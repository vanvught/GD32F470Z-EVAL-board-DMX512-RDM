
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08008000 <__gVectors>:
 8008000:	10008000 	andne	r8, r0, r0
 8008004:	0800938d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip, pc}
 8008008:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800800c:	080093e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, r9, ip, pc}
 8008010:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008014:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008018:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
	...
 800802c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008030:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008034:	00000000 	andeq	r0, r0, r0
 8008038:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800803c:	08019711 	stmdaeq	r1, {r0, r4, r8, r9, sl, ip, pc}
 8008040:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008044:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008048:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800804c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008050:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008054:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008058:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800805c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008060:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008064:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008068:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800806c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008070:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008074:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008078:	0800eb09 	stmdaeq	r0, {r0, r3, r8, r9, fp, sp, lr, pc}
 800807c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008080:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008084:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008088:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800808c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008090:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008094:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008098:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800809c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080ac:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080b0:	0800e8bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, fp, sp, lr, pc}
 80080b4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080b8:	08011875 	stmdaeq	r1, {r0, r2, r4, r5, r6, fp, ip}
 80080bc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080cc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080dc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080ec:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080fc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008100:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008104:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008108:	0800e9c1 	stmdaeq	r0, {r0, r6, r7, r8, fp, sp, lr, pc}
 800810c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008110:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008114:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008118:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800811c:	0800eae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, sp, lr, pc}
 8008120:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008124:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008128:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800812c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008130:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008134:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008138:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800813c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008140:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008144:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008148:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800814c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008150:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008154:	0800eb79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, fp, sp, lr, pc}
 8008158:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800815c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008160:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008164:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008168:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800816c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008170:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008174:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008178:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800817c:	00000000 	andeq	r0, r0, r0
 8008180:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008184:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008188:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800818c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008190:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008194:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008198:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800819c:	00000000 	andeq	r0, r0, r0
 80081a0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80081a4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80081a8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}

Disassembly of section .text:

080081ac <net::igmp_init()>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	f00c fb75 	bl	801489c <net::igmp_set_ip()>
 80081b2:	492c      	ldr	r1, [pc, #176]	@ (8008264 <net::igmp_init()+0xb8>)
 80081b4:	4b2c      	ldr	r3, [pc, #176]	@ (8008268 <net::igmp_init()+0xbc>)
 80081b6:	4a2d      	ldr	r2, [pc, #180]	@ (800826c <net::igmp_init()+0xc0>)
 80081b8:	2401      	movs	r4, #1
 80081ba:	205e      	movs	r0, #94	@ 0x5e
 80081bc:	800c      	strh	r4, [r1, #0]
 80081be:	7088      	strb	r0, [r1, #2]
 80081c0:	2106      	movs	r1, #6
 80081c2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80081c6:	f803 0b01 	strb.w	r0, [r3], #1
 80081ca:	3901      	subs	r1, #1
 80081cc:	d1f9      	bne.n	80081c2 <net::igmp_init()+0x16>
 80081ce:	4a28      	ldr	r2, [pc, #160]	@ (8008270 <net::igmp_init()+0xc4>)
 80081d0:	4828      	ldr	r0, [pc, #160]	@ (8008274 <net::igmp_init()+0xc8>)
 80081d2:	60d0      	str	r0, [r2, #12]
 80081d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80081d8:	4b27      	ldr	r3, [pc, #156]	@ (8008278 <net::igmp_init()+0xcc>)
 80081da:	8210      	strh	r0, [r2, #16]
 80081dc:	f240 4094 	movw	r0, #1172	@ 0x494
 80081e0:	8450      	strh	r0, [r2, #34]	@ 0x22
 80081e2:	4c26      	ldr	r4, [pc, #152]	@ (800827c <net::igmp_init()+0xd0>)
 80081e4:	4826      	ldr	r0, [pc, #152]	@ (8008280 <net::igmp_init()+0xd4>)
 80081e6:	8491      	strh	r1, [r2, #36]	@ 0x24
 80081e8:	2516      	movs	r5, #22
 80081ea:	6154      	str	r4, [r2, #20]
 80081ec:	84d5      	strh	r5, [r2, #38]	@ 0x26
 80081ee:	6018      	str	r0, [r3, #0]
 80081f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081f4:	2006      	movs	r0, #6
 80081f6:	491d      	ldr	r1, [pc, #116]	@ (800826c <net::igmp_init()+0xc0>)
 80081f8:	809a      	strh	r2, [r3, #4]
 80081fa:	181a      	adds	r2, r3, r0
 80081fc:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008200:	f802 5b01 	strb.w	r5, [r2], #1
 8008204:	3801      	subs	r0, #1
 8008206:	d1f9      	bne.n	80081fc <net::igmp_init()+0x50>
 8008208:	4a1e      	ldr	r2, [pc, #120]	@ (8008284 <net::igmp_init()+0xd8>)
 800820a:	615c      	str	r4, [r3, #20]
 800820c:	6811      	ldr	r1, [r2, #0]
 800820e:	4c1e      	ldr	r4, [pc, #120]	@ (8008288 <net::igmp_init()+0xdc>)
 8008210:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8008214:	8498      	strh	r0, [r3, #36]	@ 0x24
 8008216:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800821a:	4d16      	ldr	r5, [pc, #88]	@ (8008274 <net::igmp_init()+0xc8>)
 800821c:	f8c3 401e 	str.w	r4, [r3, #30]
 8008220:	8218      	strh	r0, [r3, #16]
 8008222:	2417      	movs	r4, #23
 8008224:	f240 4094 	movw	r0, #1172	@ 0x494
 8008228:	2a07      	cmp	r2, #7
 800822a:	84dc      	strh	r4, [r3, #38]	@ 0x26
 800822c:	60dd      	str	r5, [r3, #12]
 800822e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8008230:	d904      	bls.n	800823c <net::igmp_init()+0x90>
 8008232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008236:	4815      	ldr	r0, [pc, #84]	@ (800828c <net::igmp_init()+0xe0>)
 8008238:	f00f be66 	b.w	8017f08 <console_error>
 800823c:	4b14      	ldr	r3, [pc, #80]	@ (8008290 <net::igmp_init()+0xe4>)
 800823e:	f8d1 40a4 	ldr.w	r4, [r1, #164]	@ 0xa4
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	1c55      	adds	r5, r2, #1
 8008246:	1c63      	adds	r3, r4, #1
 8008248:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
 800824c:	f8c1 50a0 	str.w	r5, [r1, #160]	@ 0xa0
 8008250:	eb01 1302 	add.w	r3, r1, r2, lsl #4
 8008254:	3064      	adds	r0, #100	@ 0x64
 8008256:	2164      	movs	r1, #100	@ 0x64
 8008258:	e9c3 0108 	strd	r0, r1, [r3, #32]
 800825c:	4a0d      	ldr	r2, [pc, #52]	@ (8008294 <net::igmp_init()+0xe8>)
 800825e:	e9c3 420a 	strd	r4, r2, [r3, #40]	@ 0x28
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	10008340 	andne	r8, r0, r0, asr #6
 8008268:	1000837e 	andne	r8, r0, lr, ror r3
 800826c:	2000e234 	andcs	lr, r0, r4, lsr r2
 8008270:	10008378 	andne	r8, r0, r8, ror r3
 8008274:	00460008 	subeq	r0, r6, r8
 8008278:	10008348 	andne	r8, r0, r8, asr #6
 800827c:	02010040 	andeq	r0, r1, #64	@ 0x40
 8008280:	005e0001 	subseq	r0, lr, r1
 8008284:	2000e3d0 	ldrdcs	lr, [r0], -r0
 8008288:	020000e0 	andeq	r0, r0, #224	@ 0xe0
 800828c:	0801cbb8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, fp, lr, pc}
 8008290:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8008294:	08014849 	stmdaeq	r1, {r0, r3, r6, fp, lr}

08008298 <net::igmp_shutdown()>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d05      	ldr	r5, [pc, #20]	@ (80082b0 <net::igmp_shutdown()+0x18>)
 800829c:	2400      	movs	r4, #0
 800829e:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 80082a2:	b108      	cbz	r0, 80082a8 <net::igmp_shutdown()+0x10>
 80082a4:	f00c fb28 	bl	80148f8 <net::igmp_leave(unsigned long)>
 80082a8:	3401      	adds	r4, #1
 80082aa:	2c23      	cmp	r4, #35	@ 0x23
 80082ac:	d1f7      	bne.n	800829e <net::igmp_shutdown()+0x6>
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	10008228 	andne	r8, r0, r8, lsr #4

080082b4 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)>:
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	4d19      	ldr	r5, [pc, #100]	@ (8008320 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x6c>)
 80082ba:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082be:	7e2c      	ldrb	r4, [r5, #24]
 80082c0:	461f      	mov	r7, r3
 80082c2:	7deb      	ldrb	r3, [r5, #23]
 80082c4:	0424      	lsls	r4, r4, #16
 80082c6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 80082ca:	7e6b      	ldrb	r3, [r5, #25]
 80082cc:	3402      	adds	r4, #2
 80082ce:	eb04 6403 	add.w	r4, r4, r3, lsl #24
 80082d2:	4682      	mov	sl, r0
 80082d4:	460e      	mov	r6, r1
 80082d6:	4690      	mov	r8, r2
 80082d8:	612c      	str	r4, [r5, #16]
 80082da:	f000 f8b5 	bl	8008448 <net::arp_init()>
 80082de:	f000 f951 	bl	8008584 <net::ip_init()>
 80082e2:	f1ba 0f01 	cmp.w	sl, #1
 80082e6:	7eab      	ldrb	r3, [r5, #26]
 80082e8:	d115      	bne.n	8008316 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x62>
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	76ab      	strb	r3, [r5, #26]
 80082f0:	f899 3000 	ldrb.w	r3, [r9]
 80082f4:	b11b      	cbz	r3, 80082fe <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x4a>
 80082f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fa:	f00c b8d7 	b.w	80144ac <net::dhcp_start()>
 80082fe:	b12e      	cbz	r6, 800830c <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x58>
 8008300:	4640      	mov	r0, r8
 8008302:	f00c fc33 	bl	8014b6c <net::netif_set_netmask(net::ip_addr)>
 8008306:	4638      	mov	r0, r7
 8008308:	f00c fc44 	bl	8014b94 <net::netif_set_gw(net::ip_addr)>
 800830c:	4630      	mov	r0, r6
 800830e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008312:	f00c bb71 	b.w	80149f8 <net::net_set_primary_ip(net::ip_addr)>
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	76ab      	strb	r3, [r5, #26]
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	2000e220 	andcs	lr, r0, r0, lsr #4

08008324 <net::tcp_init()>:
 8008324:	4a07      	ldr	r2, [pc, #28]	@ (8008344 <net::tcp_init()+0x20>)
 8008326:	4908      	ldr	r1, [pc, #32]	@ (8008348 <net::tcp_init()+0x24>)
 8008328:	2306      	movs	r3, #6
 800832a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800832e:	f802 0b01 	strb.w	r0, [r2], #1
 8008332:	3b01      	subs	r3, #1
 8008334:	d1f9      	bne.n	800832a <net::tcp_init()+0x6>
 8008336:	4b05      	ldr	r3, [pc, #20]	@ (800834c <net::tcp_init()+0x28>)
 8008338:	4905      	ldr	r1, [pc, #20]	@ (8008350 <net::tcp_init()+0x2c>)
 800833a:	4a06      	ldr	r2, [pc, #24]	@ (8008354 <net::tcp_init()+0x30>)
 800833c:	60d9      	str	r1, [r3, #12]
 800833e:	615a      	str	r2, [r3, #20]
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	100083ae 	andne	r8, r0, lr, lsr #7
 8008348:	2000e234 	andcs	lr, r0, r4, lsr r2
 800834c:	100083a8 	andne	r8, r0, r8, lsr #7
 8008350:	00450008 	subeq	r0, r5, r8
 8008354:	06400040 	strbeq	r0, [r0], -r0, asr #32

08008358 <net::udp_init()>:
 8008358:	490b      	ldr	r1, [pc, #44]	@ (8008388 <net::udp_init()+0x30>)
 800835a:	4b0c      	ldr	r3, [pc, #48]	@ (800838c <net::udp_init()+0x34>)
 800835c:	4a0c      	ldr	r2, [pc, #48]	@ (8008390 <net::udp_init()+0x38>)
 800835e:	b510      	push	{r4, lr}
 8008360:	205e      	movs	r0, #94	@ 0x5e
 8008362:	2401      	movs	r4, #1
 8008364:	800c      	strh	r4, [r1, #0]
 8008366:	7088      	strb	r0, [r1, #2]
 8008368:	2106      	movs	r1, #6
 800836a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800836e:	f803 0b01 	strb.w	r0, [r3], #1
 8008372:	3901      	subs	r1, #1
 8008374:	d1f9      	bne.n	800836a <net::udp_init()+0x12>
 8008376:	4807      	ldr	r0, [pc, #28]	@ (8008394 <net::udp_init()+0x3c>)
 8008378:	4a07      	ldr	r2, [pc, #28]	@ (8008398 <net::udp_init()+0x40>)
 800837a:	4b08      	ldr	r3, [pc, #32]	@ (800839c <net::udp_init()+0x44>)
 800837c:	60c2      	str	r2, [r0, #12]
 800837e:	6143      	str	r3, [r0, #20]
 8008380:	f00c feaa 	bl	80150d8 <net::udp_set_ip()>
 8008384:	8501      	strh	r1, [r0, #40]	@ 0x28
 8008386:	bd10      	pop	{r4, pc}
 8008388:	100096a0 	andne	r9, r0, r0, lsr #13
 800838c:	100096b2 			@ <UNDEFINED> instruction: 0x100096b2
 8008390:	2000e234 	andcs	lr, r0, r4, lsr r2
 8008394:	100096ac 	andne	r9, r0, ip, lsr #13
 8008398:	00450008 	subeq	r0, r5, r8
 800839c:	11400040 	cmpne	r0, r0, asr #32

080083a0 <emac_config()>:
 80083a0:	b508      	push	{r3, lr}
 80083a2:	480f      	ldr	r0, [pc, #60]	@ (80083e0 <emac_config()+0x40>)
 80083a4:	f012 f8fd 	bl	801a5a2 <puts>
 80083a8:	f00d fa5a 	bl	8015860 <enet_gpio_config()>
 80083ac:	f640 4019 	movw	r0, #3097	@ 0xc19
 80083b0:	f010 fb2e 	bl	8018a10 <rcu_periph_clock_enable>
 80083b4:	f640 401a 	movw	r0, #3098	@ 0xc1a
 80083b8:	f010 fb2a 	bl	8018a10 <rcu_periph_clock_enable>
 80083bc:	f640 401b 	movw	r0, #3099	@ 0xc1b
 80083c0:	f010 fb26 	bl	8018a10 <rcu_periph_clock_enable>
 80083c4:	f010 fa5a 	bl	801887c <enet_deinit>
 80083c8:	f00f fff4 	bl	80183b4 <enet_software_reset>
 80083cc:	2001      	movs	r0, #1
 80083ce:	f00d f9dd 	bl	801578c <net::phy_config(unsigned long)>
 80083d2:	b920      	cbnz	r0, 80083de <emac_config()+0x3e>
 80083d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083d8:	4802      	ldr	r0, [pc, #8]	@ (80083e4 <emac_config()+0x44>)
 80083da:	f00f bd95 	b.w	8017f08 <console_error>
 80083de:	bd08      	pop	{r3, pc}
 80083e0:	0801bba2 	stmdaeq	r1, {r1, r5, r7, r8, r9, fp, ip, sp, pc}
 80083e4:	0801bbaa 	stmdaeq	r1, {r1, r3, r5, r7, r8, r9, fp, ip, sp, pc}

080083e8 <emac_start(unsigned char*, net::Link&)>:
 80083e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083ea:	466c      	mov	r4, sp
 80083ec:	4605      	mov	r5, r0
 80083ee:	460e      	mov	r6, r1
 80083f0:	2001      	movs	r0, #1
 80083f2:	4621      	mov	r1, r4
 80083f4:	f00d fe2a 	bl	801604c <net::phy_start(unsigned long, net::PhyStatus&)>
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	6033      	str	r3, [r6, #0]
 80083fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008400:	f00d f970 	bl	80156e4 <emac_adjust_link(net::PhyStatus)>
 8008404:	4628      	mov	r0, r5
 8008406:	f011 f8ed 	bl	80195e4 <mac_address_get(unsigned char*)>
 800840a:	4629      	mov	r1, r5
 800840c:	2000      	movs	r0, #0
 800840e:	f010 f833 	bl	8018478 <enet_mac_address_set>
 8008412:	4c0c      	ldr	r4, [pc, #48]	@ (8008444 <emac_start(unsigned char*, net::Link&)+0x5c>)
 8008414:	f44f 00e0 	mov.w	r0, #7340032	@ 0x700000
 8008418:	f00f ffe0 	bl	80183dc <enet_descriptors_chain_init>
 800841c:	f44f 2060 	mov.w	r0, #917504	@ 0xe0000
 8008420:	f00f ffdc 	bl	80183dc <enet_descriptors_chain_init>
 8008424:	4620      	mov	r0, r4
 8008426:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800842a:	f010 f81f 	bl	801846c <enet_transmit_checksum_config>
 800842e:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8008432:	f104 0010 	add.w	r0, r4, #16
 8008436:	f010 f819 	bl	801846c <enet_transmit_checksum_config>
 800843a:	f010 f9d9 	bl	80187f0 <enet_enable>
 800843e:	b004      	add	sp, #16
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	bf00      	nop
 8008444:	2001ba78 	andcs	fp, r1, r8, ror sl

08008448 <net::arp_init()>:
 8008448:	b410      	push	{r4}
 800844a:	4b3e      	ldr	r3, [pc, #248]	@ (8008544 <net::arp_init()+0xfc>)
 800844c:	b083      	sub	sp, #12
 800844e:	2210      	movs	r2, #16
 8008450:	2000      	movs	r0, #0
 8008452:	f103 0118 	add.w	r1, r3, #24
 8008456:	f803 0b01 	strb.w	r0, [r3], #1
 800845a:	428b      	cmp	r3, r1
 800845c:	d1fb      	bne.n	8008456 <net::arp_init()+0xe>
 800845e:	3a01      	subs	r2, #1
 8008460:	d1f7      	bne.n	8008452 <net::arp_init()+0xa>
 8008462:	4a39      	ldr	r2, [pc, #228]	@ (8008548 <net::arp_init()+0x100>)
 8008464:	4939      	ldr	r1, [pc, #228]	@ (800854c <net::arp_init()+0x104>)
 8008466:	2306      	movs	r3, #6
 8008468:	f811 0b01 	ldrb.w	r0, [r1], #1
 800846c:	f802 0b01 	strb.w	r0, [r2], #1
 8008470:	3b01      	subs	r3, #1
 8008472:	d1f9      	bne.n	8008468 <net::arp_init()+0x20>
 8008474:	4936      	ldr	r1, [pc, #216]	@ (8008550 <net::arp_init()+0x108>)
 8008476:	2206      	movs	r2, #6
 8008478:	460b      	mov	r3, r1
 800847a:	20ff      	movs	r0, #255	@ 0xff
 800847c:	3a01      	subs	r2, #1
 800847e:	f801 0b01 	strb.w	r0, [r1], #1
 8008482:	d1fb      	bne.n	800847c <net::arp_init()+0x34>
 8008484:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008488:	4c32      	ldr	r4, [pc, #200]	@ (8008554 <net::arp_init()+0x10c>)
 800848a:	4933      	ldr	r1, [pc, #204]	@ (8008558 <net::arp_init()+0x110>)
 800848c:	8298      	strh	r0, [r3, #20]
 800848e:	4a33      	ldr	r2, [pc, #204]	@ (800855c <net::arp_init()+0x114>)
 8008490:	482e      	ldr	r0, [pc, #184]	@ (800854c <net::arp_init()+0x104>)
 8008492:	e9c3 4103 	strd	r4, r1, [r3, #12]
 8008496:	2306      	movs	r3, #6
 8008498:	f810 4b01 	ldrb.w	r4, [r0], #1
 800849c:	f802 4b01 	strb.w	r4, [r2], #1
 80084a0:	3b01      	subs	r3, #1
 80084a2:	d1f9      	bne.n	8008498 <net::arp_init()+0x50>
 80084a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008560 <net::arp_init()+0x118>)
 80084a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008564 <net::arp_init()+0x11c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	a801      	add	r0, sp, #4
 80084ae:	2304      	movs	r3, #4
 80084b0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80084b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80084b8:	3b01      	subs	r3, #1
 80084ba:	d1f9      	bne.n	80084b0 <net::arp_init()+0x68>
 80084bc:	482a      	ldr	r0, [pc, #168]	@ (8008568 <net::arp_init()+0x120>)
 80084be:	2206      	movs	r2, #6
 80084c0:	3a01      	subs	r2, #1
 80084c2:	f800 3b01 	strb.w	r3, [r0], #1
 80084c6:	d1fb      	bne.n	80084c0 <net::arp_init()+0x78>
 80084c8:	4a28      	ldr	r2, [pc, #160]	@ (800856c <net::arp_init()+0x124>)
 80084ca:	4820      	ldr	r0, [pc, #128]	@ (800854c <net::arp_init()+0x104>)
 80084cc:	2306      	movs	r3, #6
 80084ce:	f810 4b01 	ldrb.w	r4, [r0], #1
 80084d2:	f802 4b01 	strb.w	r4, [r2], #1
 80084d6:	3b01      	subs	r3, #1
 80084d8:	d1f9      	bne.n	80084ce <net::arp_init()+0x86>
 80084da:	4b25      	ldr	r3, [pc, #148]	@ (8008570 <net::arp_init()+0x128>)
 80084dc:	481d      	ldr	r0, [pc, #116]	@ (8008554 <net::arp_init()+0x10c>)
 80084de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084e2:	e9c3 0103 	strd	r0, r1, [r3, #12]
 80084e6:	4919      	ldr	r1, [pc, #100]	@ (800854c <net::arp_init()+0x104>)
 80084e8:	829a      	strh	r2, [r3, #20]
 80084ea:	2206      	movs	r2, #6
 80084ec:	3316      	adds	r3, #22
 80084ee:	f811 0b01 	ldrb.w	r0, [r1], #1
 80084f2:	f803 0b01 	strb.w	r0, [r3], #1
 80084f6:	3a01      	subs	r2, #1
 80084f8:	d1f9      	bne.n	80084ee <net::arp_init()+0xa6>
 80084fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008574 <net::arp_init()+0x12c>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8008502:	2b07      	cmp	r3, #7
 8008504:	d905      	bls.n	8008512 <net::arp_init()+0xca>
 8008506:	481c      	ldr	r0, [pc, #112]	@ (8008578 <net::arp_init()+0x130>)
 8008508:	b003      	add	sp, #12
 800850a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850e:	f00f bcfb 	b.w	8017f08 <console_error>
 8008512:	f8d2 00a4 	ldr.w	r0, [r2, #164]	@ 0xa4
 8008516:	4919      	ldr	r1, [pc, #100]	@ (800857c <net::arp_init()+0x134>)
 8008518:	1c44      	adds	r4, r0, #1
 800851a:	f8c2 40a4 	str.w	r4, [r2, #164]	@ 0xa4
 800851e:	6809      	ldr	r1, [r1, #0]
 8008520:	1c5c      	adds	r4, r3, #1
 8008522:	f8c2 40a0 	str.w	r4, [r2, #160]	@ 0xa0
 8008526:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800852a:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <net::arp_init()+0x138>)
 800852c:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8008530:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8008534:	e9c3 1408 	strd	r1, r4, [r3, #32]
 8008538:	e9c3 020a 	strd	r0, r2, [r3, #40]	@ 0x28
 800853c:	b003      	add	sp, #12
 800853e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	1000cb08 	andne	ip, r0, r8, lsl #22
 8008548:	2000e292 	mulcs	r0, r2, r2
 800854c:	2000e234 	andcs	lr, r0, r4, lsr r2
 8008550:	2000e28c 	andcs	lr, r0, ip, lsl #5
 8008554:	01000608 	tsteq	r0, r8, lsl #12
 8008558:	04060008 	streq	r0, [r6], #-8
 800855c:	2000e2a2 	andcs	lr, r0, r2, lsr #5
 8008560:	2000e220 	andcs	lr, r0, r0, lsr #4
 8008564:	2000e2a7 	andcs	lr, r0, r7, lsr #5
 8008568:	2000e2ac 	andcs	lr, r0, ip, lsr #5
 800856c:	2000e256 	andcs	lr, r0, r6, asr r2
 8008570:	2000e250 	andcs	lr, r0, r0, asr r2
 8008574:	2000e3d0 	ldrdcs	lr, [r0], -r0
 8008578:	0801cbb8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, fp, lr, pc}
 800857c:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8008580:	08015e35 	stmdaeq	r1, {r0, r2, r4, r5, r9, sl, fp, ip, lr}

08008584 <net::ip_init()>:
 8008584:	b508      	push	{r3, lr}
 8008586:	f7ff fee7 	bl	8008358 <net::udp_init()>
 800858a:	f7ff fe0f 	bl	80081ac <net::igmp_init()>
 800858e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008592:	f7ff bec7 	b.w	8008324 <net::tcp_init()>
	...

08008598 <console_init()>:
 8008598:	b508      	push	{r3, lr}
 800859a:	f011 fab3 	bl	8019b04 <uart0_init>
 800859e:	4804      	ldr	r0, [pc, #16]	@ (80085b0 <console_init()+0x18>)
 80085a0:	f011 fada 	bl	8019b58 <uart0_puts>
 80085a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085a8:	4802      	ldr	r0, [pc, #8]	@ (80085b4 <console_init()+0x1c>)
 80085aa:	f011 bad5 	b.w	8019b58 <uart0_puts>
 80085ae:	bf00      	nop
 80085b0:	0801bdf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 80085b4:	0801be11 	stmdaeq	r1, {r0, r4, r9, sl, fp, ip, sp, pc}

080085b8 <net::igmp_handle(t_igmp*)>:
 80085b8:	7b83      	ldrb	r3, [r0, #14]
 80085ba:	2b45      	cmp	r3, #69	@ 0x45
 80085bc:	d000      	beq.n	80085c0 <net::igmp_handle(t_igmp*)+0x8>
 80085be:	4770      	bx	lr
 80085c0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80085c4:	2b11      	cmp	r3, #17
 80085c6:	d1fa      	bne.n	80085be <net::igmp_handle(t_igmp*)+0x6>
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	4b23      	ldr	r3, [pc, #140]	@ (800865c <net::igmp_handle(t_igmp*)+0xa4>)
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f100 081d 	add.w	r8, r0, #29
 80085d6:	466a      	mov	r2, sp
 80085d8:	f100 0421 	add.w	r4, r0, #33	@ 0x21
 80085dc:	4643      	mov	r3, r8
 80085de:	e001      	b.n	80085e4 <net::igmp_handle(t_igmp*)+0x2c>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d038      	beq.n	8008656 <net::igmp_handle(t_igmp*)+0x9e>
 80085e4:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 80085e8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80085ec:	428d      	cmp	r5, r1
 80085ee:	d0f7      	beq.n	80085e0 <net::igmp_handle(t_igmp*)+0x28>
 80085f0:	1a6d      	subs	r5, r5, r1
 80085f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008660 <net::igmp_handle(t_igmp*)+0xa8>)
 80085f4:	2701      	movs	r7, #1
 80085f6:	f503 768c 	add.w	r6, r3, #280	@ 0x118
 80085fa:	e00a      	b.n	8008612 <net::igmp_handle(t_igmp*)+0x5a>
 80085fc:	f803 7c02 	strb.w	r7, [r3, #-2]
 8008600:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 8008604:	0852      	lsrs	r2, r2, #1
 8008606:	3201      	adds	r2, #1
 8008608:	f823 2c04 	strh.w	r2, [r3, #-4]
 800860c:	3308      	adds	r3, #8
 800860e:	42b3      	cmp	r3, r6
 8008610:	d012      	beq.n	8008638 <net::igmp_handle(t_igmp*)+0x80>
 8008612:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8008616:	2a00      	cmp	r2, #0
 8008618:	d0f8      	beq.n	800860c <net::igmp_handle(t_igmp*)+0x54>
 800861a:	9201      	str	r2, [sp, #4]
 800861c:	b97d      	cbnz	r5, 800863e <net::igmp_handle(t_igmp*)+0x86>
 800861e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8008622:	2a01      	cmp	r2, #1
 8008624:	d1ea      	bne.n	80085fc <net::igmp_handle(t_igmp*)+0x44>
 8008626:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 800862a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800862e:	428a      	cmp	r2, r1
 8008630:	dbe8      	blt.n	8008604 <net::igmp_handle(t_igmp*)+0x4c>
 8008632:	3308      	adds	r3, #8
 8008634:	42b3      	cmp	r3, r6
 8008636:	d1ec      	bne.n	8008612 <net::igmp_handle(t_igmp*)+0x5a>
 8008638:	b002      	add	sp, #8
 800863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863e:	a901      	add	r1, sp, #4
 8008640:	4642      	mov	r2, r8
 8008642:	e001      	b.n	8008648 <net::igmp_handle(t_igmp*)+0x90>
 8008644:	42a2      	cmp	r2, r4
 8008646:	d0ea      	beq.n	800861e <net::igmp_handle(t_igmp*)+0x66>
 8008648:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 800864c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008650:	45e6      	cmp	lr, ip
 8008652:	d0f7      	beq.n	8008644 <net::igmp_handle(t_igmp*)+0x8c>
 8008654:	e7da      	b.n	800860c <net::igmp_handle(t_igmp*)+0x54>
 8008656:	2500      	movs	r5, #0
 8008658:	e7cb      	b.n	80085f2 <net::igmp_handle(t_igmp*)+0x3a>
 800865a:	bf00      	nop
 800865c:	010000e0 	smlatteq	r0, r0, r0, r0
 8008660:	10008230 	andne	r8, r0, r0, lsr r2

08008664 <net::net_handle()>:
 8008664:	b500      	push	{lr}
 8008666:	b083      	sub	sp, #12
 8008668:	a801      	add	r0, sp, #4
 800866a:	f00d f9d3 	bl	8015a14 <emac_eth_recv(unsigned char**)>
 800866e:	2800      	cmp	r0, #0
 8008670:	dc02      	bgt.n	8008678 <net::net_handle()+0x14>
 8008672:	b003      	add	sp, #12
 8008674:	f85d fb04 	ldr.w	pc, [sp], #4
 8008678:	9801      	ldr	r0, [sp, #4]
 800867a:	8983      	ldrh	r3, [r0, #12]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d007      	beq.n	8008690 <net::net_handle()+0x2c>
 8008680:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8008684:	d007      	beq.n	8008696 <net::net_handle()+0x32>
 8008686:	f00d f9d7 	bl	8015a38 <emac_free_pkt()>
 800868a:	b003      	add	sp, #12
 800868c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008690:	f000 fc06 	bl	8008ea0 <net::ip_handle(t_ip4*)>
 8008694:	e7f7      	b.n	8008686 <net::net_handle()+0x22>
 8008696:	f000 fb79 	bl	8008d8c <net::arp_handle(t_arp*)>
 800869a:	e7f4      	b.n	8008686 <net::net_handle()+0x22>

0800869c <net::tcp_run()>:
 800869c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800869e:	4c11      	ldr	r4, [pc, #68]	@ (80086e4 <net::tcp_run()+0x48>)
 80086a0:	b085      	sub	sp, #20
 80086a2:	2711      	movs	r7, #17
 80086a4:	f504 75f0 	add.w	r5, r4, #480	@ 0x1e0
 80086a8:	2609      	movs	r6, #9
 80086aa:	e002      	b.n	80086b2 <net::tcp_run()+0x16>
 80086ac:	3450      	adds	r4, #80	@ 0x50
 80086ae:	42ac      	cmp	r4, r5
 80086b0:	d015      	beq.n	80086de <net::tcp_run()+0x42>
 80086b2:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	d1f8      	bne.n	80086ac <net::tcp_run()+0x10>
 80086ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086bc:	69a2      	ldr	r2, [r4, #24]
 80086be:	f88d 700c 	strb.w	r7, [sp, #12]
 80086c2:	4620      	mov	r0, r4
 80086c4:	a901      	add	r1, sp, #4
 80086c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80086ca:	f00c fb03 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 80086ce:	69a3      	ldr	r3, [r4, #24]
 80086d0:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
 80086d4:	3301      	adds	r3, #1
 80086d6:	61a3      	str	r3, [r4, #24]
 80086d8:	3450      	adds	r4, #80	@ 0x50
 80086da:	42ac      	cmp	r4, r5
 80086dc:	d1e9      	bne.n	80086b2 <net::tcp_run()+0x16>
 80086de:	b005      	add	sp, #20
 80086e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e2:	bf00      	nop
 80086e4:	10008998 	mulne	r0, r8, r9

080086e8 <net::tcp_handle(t_tcp*)>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	4605      	mov	r5, r0
 80086ee:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80086f0:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
 80086f2:	4fb3      	ldr	r7, [pc, #716]	@ (80089c0 <net::tcp_handle(t_tcp*)+0x2d8>)
 80086f4:	f8b5 9010 	ldrh.w	r9, [r5, #16]
 80086f8:	ba49      	rev16	r1, r1
 80086fa:	ba40      	rev16	r0, r0
 80086fc:	8468      	strh	r0, [r5, #34]	@ 0x22
 80086fe:	84a9      	strh	r1, [r5, #36]	@ 0x24
 8008700:	f8b7 2d04 	ldrh.w	r2, [r7, #3332]	@ 0xd04
 8008704:	b28b      	uxth	r3, r1
 8008706:	429a      	cmp	r2, r3
 8008708:	b099      	sub	sp, #100	@ 0x64
 800870a:	d029      	beq.n	8008760 <net::tcp_handle(t_tcp*)+0x78>
 800870c:	f895 602e 	ldrb.w	r6, [r5, #46]	@ 0x2e
 8008710:	ab04      	add	r3, sp, #16
 8008712:	2400      	movs	r4, #0
 8008714:	f843 4b04 	str.w	r4, [r3], #4
 8008718:	aa18      	add	r2, sp, #96	@ 0x60
 800871a:	4293      	cmp	r3, r2
 800871c:	d1fa      	bne.n	8008714 <net::tcp_handle(t_tcp*)+0x2c>
 800871e:	f8d5 301a 	ldr.w	r3, [r5, #26]
 8008722:	f8d5 201e 	ldr.w	r2, [r5, #30]
 8008726:	f8ad 1018 	strh.w	r1, [sp, #24]
 800872a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800872e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8008732:	1dab      	adds	r3, r5, #6
 8008734:	f105 040c 	add.w	r4, r5, #12
 8008738:	a907      	add	r1, sp, #28
 800873a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800873e:	f801 0b01 	strb.w	r0, [r1], #1
 8008742:	42a3      	cmp	r3, r4
 8008744:	d1f9      	bne.n	800873a <net::tcp_handle(t_tcp*)+0x52>
 8008746:	4628      	mov	r0, r5
 8008748:	f00c faa4 	bl	8014c94 <net::_bswap32(t_tcp*)>
 800874c:	0932      	lsrs	r2, r6, #4
 800874e:	0092      	lsls	r2, r2, #2
 8008750:	a904      	add	r1, sp, #16
 8008752:	f00c fbab 	bl	8014eac <net::scan_options(t_tcp*, net::tcb*, long)>
 8008756:	f00c fb75 	bl	8014e44 <net::send_reset(t_tcp*, net::tcb const*)>
 800875a:	b019      	add	sp, #100	@ 0x64
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	f107 0a04 	add.w	sl, r7, #4
 8008764:	fa1f fe80 	uxth.w	lr, r0
 8008768:	4653      	mov	r3, sl
 800876a:	2400      	movs	r4, #0
 800876c:	e005      	b.n	800877a <net::tcp_handle(t_tcp*)+0x92>
 800876e:	3401      	adds	r4, #1
 8008770:	2c06      	cmp	r4, #6
 8008772:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8008776:	f000 8088 	beq.w	800888a <net::tcp_handle(t_tcp*)+0x1a2>
 800877a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800877e:	2a01      	cmp	r2, #1
 8008780:	d0f5      	beq.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 8008782:	88da      	ldrh	r2, [r3, #6]
 8008784:	4572      	cmp	r2, lr
 8008786:	d1f2      	bne.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 8008788:	1e5a      	subs	r2, r3, #1
 800878a:	f105 0119 	add.w	r1, r5, #25
 800878e:	f103 0c03 	add.w	ip, r3, #3
 8008792:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8008796:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800879a:	4286      	cmp	r6, r0
 800879c:	d1e7      	bne.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 800879e:	4562      	cmp	r2, ip
 80087a0:	d1f7      	bne.n	8008792 <net::tcp_handle(t_tcp*)+0xaa>
 80087a2:	f895 802e 	ldrb.w	r8, [r5, #46]	@ 0x2e
 80087a6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80087aa:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80087ae:	4628      	mov	r0, r5
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	f00c fa6f 	bl	8014c94 <net::_bswap32(t_tcp*)>
 80087b6:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80087b8:	9a00      	ldr	r2, [sp, #0]
 80087ba:	ba5b      	rev16	r3, r3
 80087bc:	862b      	strh	r3, [r5, #48]	@ 0x30
 80087be:	b29b      	uxth	r3, r3
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 80087c4:	ba5b      	rev16	r3, r3
 80087c6:	86ab      	strh	r3, [r5, #52]	@ 0x34
 80087c8:	f105 032a 	add.w	r3, r5, #42	@ 0x2a
 80087cc:	079b      	lsls	r3, r3, #30
 80087ce:	bf0c      	ite	eq
 80087d0:	f8d5 302a 	ldreq.w	r3, [r5, #42]	@ 0x2a
 80087d4:	f8d5 302a 	ldrne.w	r3, [r5, #42]	@ 0x2a
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	f105 0326 	add.w	r3, r5, #38	@ 0x26
 80087de:	079e      	lsls	r6, r3, #30
 80087e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80087e4:	eb07 1603 	add.w	r6, r7, r3, lsl #4
 80087e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087ec:	4631      	mov	r1, r6
 80087ee:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80087f2:	bf0c      	ite	eq
 80087f4:	f8d5 b026 	ldreq.w	fp, [r5, #38]	@ 0x26
 80087f8:	f8d5 b026 	ldrne.w	fp, [r5, #38]	@ 0x26
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	f00c fb55 	bl	8014eac <net::scan_options(t_tcp*, net::tcb*, long)>
 8008802:	f896 204c 	ldrb.w	r2, [r6, #76]	@ 0x4c
 8008806:	2a01      	cmp	r2, #1
 8008808:	d04c      	beq.n	80088a4 <net::tcp_handle(t_tcp*)+0x1bc>
 800880a:	1ed3      	subs	r3, r2, #3
 800880c:	2b07      	cmp	r3, #7
 800880e:	d8a4      	bhi.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008810:	9b00      	ldr	r3, [sp, #0]
 8008812:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8008816:	33ec      	adds	r3, #236	@ 0xec
 8008818:	fa99 f999 	rev16.w	r9, r9
 800881c:	fa13 f989 	uxtah	r9, r3, r9
 8008820:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 8008824:	fa1f f989 	uxth.w	r9, r9
 8008828:	2b00      	cmp	r3, #0
 800882a:	d077      	beq.n	800891c <net::tcp_handle(t_tcp*)+0x234>
 800882c:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800882e:	eba1 000b 	sub.w	r0, r1, fp
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	f040 8085 	bne.w	8008944 <net::tcp_handle(t_tcp*)+0x25c>
 800883a:	2800      	cmp	r0, #0
 800883c:	f340 80b8 	ble.w	80089b0 <net::tcp_handle(t_tcp*)+0x2c8>
 8008840:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 8008844:	f013 0f04 	tst.w	r3, #4
 8008848:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800884c:	4423      	add	r3, r4
 800884e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008852:	d06a      	beq.n	800892a <net::tcp_handle(t_tcp*)+0x242>
 8008854:	891d      	ldrh	r5, [r3, #8]
 8008856:	2200      	movs	r2, #0
 8008858:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 800885c:	f846 2b04 	str.w	r2, [r6], #4
 8008860:	42b3      	cmp	r3, r6
 8008862:	d1fb      	bne.n	800885c <net::tcp_handle(t_tcp*)+0x174>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	4a57      	ldr	r2, [pc, #348]	@ (80089c4 <net::tcp_handle(t_tcp*)+0x2dc>)
 8008868:	4423      	add	r3, r4
 800886a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	811d      	strh	r5, [r3, #8]
 8008872:	f640 3018 	movw	r0, #2840	@ 0xb18
 8008876:	2101      	movs	r1, #1
 8008878:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800887c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800887e:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
 8008882:	629a      	str	r2, [r3, #40]	@ 0x28
 8008884:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
 8008888:	e767      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 800888a:	4b4d      	ldr	r3, [pc, #308]	@ (80089c0 <net::tcp_handle(t_tcp*)+0x2d8>)
 800888c:	2400      	movs	r4, #0
 800888e:	e002      	b.n	8008896 <net::tcp_handle(t_tcp*)+0x1ae>
 8008890:	3401      	adds	r4, #1
 8008892:	2c06      	cmp	r4, #6
 8008894:	d085      	beq.n	80087a2 <net::tcp_handle(t_tcp*)+0xba>
 8008896:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800889a:	2a01      	cmp	r2, #1
 800889c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80088a0:	d1f6      	bne.n	8008890 <net::tcp_handle(t_tcp*)+0x1a8>
 80088a2:	e77e      	b.n	80087a2 <net::tcp_handle(t_tcp*)+0xba>
 80088a4:	f8d5 201e 	ldr.w	r2, [r5, #30]
 80088a8:	f847 2008 	str.w	r2, [r7, r8]
 80088ac:	8c69      	ldrh	r1, [r5, #34]	@ 0x22
 80088ae:	8171      	strh	r1, [r6, #10]
 80088b0:	f8d5 101a 	ldr.w	r1, [r5, #26]
 80088b4:	f84a 1008 	str.w	r1, [sl, r8]
 80088b8:	f108 020c 	add.w	r2, r8, #12
 80088bc:	443a      	add	r2, r7
 80088be:	1dab      	adds	r3, r5, #6
 80088c0:	f105 000c 	add.w	r0, r5, #12
 80088c4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80088c8:	f802 1b01 	strb.w	r1, [r2], #1
 80088cc:	4283      	cmp	r3, r0
 80088ce:	d1f9      	bne.n	80088c4 <net::tcp_handle(t_tcp*)+0x1dc>
 80088d0:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 80088d4:	0758      	lsls	r0, r3, #29
 80088d6:	f53f af40 	bmi.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 80088da:	06d9      	lsls	r1, r3, #27
 80088dc:	f100 8135 	bmi.w	8008b4a <net::tcp_handle(t_tcp*)+0x462>
 80088e0:	079a      	lsls	r2, r3, #30
 80088e2:	f57f af3a 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	4423      	add	r3, r4
 80088ea:	eb07 1403 	add.w	r4, r7, r3, lsl #4
 80088ee:	2212      	movs	r2, #18
 80088f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088f2:	9104      	str	r1, [sp, #16]
 80088f4:	f10b 0301 	add.w	r3, fp, #1
 80088f8:	4630      	mov	r0, r6
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	f88d 2018 	strb.w	r2, [sp, #24]
 8008904:	f8c4 b048 	str.w	fp, [r4, #72]	@ 0x48
 8008908:	f00c f9e4 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 800890c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800890e:	6163      	str	r3, [r4, #20]
 8008910:	2203      	movs	r2, #3
 8008912:	3301      	adds	r3, #1
 8008914:	61a3      	str	r3, [r4, #24]
 8008916:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
 800891a:	e71e      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	d18e      	bne.n	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008922:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8008924:	455b      	cmp	r3, fp
 8008926:	d18b      	bne.n	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008928:	e01f      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 800892a:	6999      	ldr	r1, [r3, #24]
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	2210      	movs	r2, #16
 8008932:	9104      	str	r1, [sp, #16]
 8008934:	4630      	mov	r0, r6
 8008936:	eb0d 0102 	add.w	r1, sp, r2
 800893a:	f88d 2018 	strb.w	r2, [sp, #24]
 800893e:	f00c f9c9 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008942:	e70a      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008944:	2800      	cmp	r0, #0
 8008946:	440b      	add	r3, r1
 8008948:	dd0b      	ble.n	8008962 <net::tcp_handle(t_tcp*)+0x27a>
 800894a:	f10b 30ff 	add.w	r0, fp, #4294967295	@ 0xffffffff
 800894e:	4448      	add	r0, r9
 8008950:	1a09      	subs	r1, r1, r0
 8008952:	2900      	cmp	r1, #0
 8008954:	f73f af74 	bgt.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008958:	1ac0      	subs	r0, r0, r3
 800895a:	2800      	cmp	r0, #0
 800895c:	f6bf af70 	bge.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008960:	e003      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 8008962:	ebab 0003 	sub.w	r0, fp, r3
 8008966:	2800      	cmp	r0, #0
 8008968:	daef      	bge.n	800894a <net::tcp_handle(t_tcp*)+0x262>
 800896a:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 800896e:	f011 0004 	ands.w	r0, r1, #4
 8008972:	f040 80f1 	bne.w	8008b58 <net::tcp_handle(t_tcp*)+0x470>
 8008976:	078b      	lsls	r3, r1, #30
 8008978:	d508      	bpl.n	800898c <net::tcp_handle(t_tcp*)+0x2a4>
 800897a:	2a03      	cmp	r2, #3
 800897c:	f000 811f 	beq.w	8008bbe <net::tcp_handle(t_tcp*)+0x4d6>
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	f00c fa5e 	bl	8014e44 <net::send_reset(t_tcp*, net::tcb const*)>
 8008988:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 800898c:	06c8      	lsls	r0, r1, #27
 800898e:	f57f aee4 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008992:	00a3      	lsls	r3, r4, #2
 8008994:	4423      	add	r3, r4
 8008996:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800899a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800899e:	1eda      	subs	r2, r3, #3
 80089a0:	2a07      	cmp	r2, #7
 80089a2:	d87f      	bhi.n	8008aa4 <net::tcp_handle(t_tcp*)+0x3bc>
 80089a4:	e8df f002 	tbb	[pc, r2]
 80089a8:	10101066 	andsne	r1, r0, r6, rrx
 80089ac:	b8a71010 	stmialt	r7!, {r4, ip}
 80089b0:	440b      	add	r3, r1
 80089b2:	ebab 0303 	sub.w	r3, fp, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f6bf af42 	bge.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 80089bc:	e7d5      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 80089be:	bf00      	nop
 80089c0:	10008998 	mulne	r0, r8, r9
 80089c4:	2001bcc0 	andcs	fp, r1, r0, asr #25
 80089c8:	00a2      	lsls	r2, r4, #2
 80089ca:	1911      	adds	r1, r2, r4
 80089cc:	eb07 1101 	add.w	r1, r7, r1, lsl #4
 80089d0:	e9d1 c205 	ldrd	ip, r2, [r1, #20]
 80089d4:	9801      	ldr	r0, [sp, #4]
 80089d6:	ebbc 0e00 	subs.w	lr, ip, r0
 80089da:	f100 80fc 	bmi.w	8008bd6 <net::tcp_handle(t_tcp*)+0x4ee>
 80089de:	9801      	ldr	r0, [sp, #4]
 80089e0:	eba0 0c0c 	sub.w	ip, r0, ip
 80089e4:	f1bc 0f00 	cmp.w	ip, #0
 80089e8:	f340 810d 	ble.w	8008c06 <net::tcp_handle(t_tcp*)+0x51e>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	1a89      	subs	r1, r1, r2
 80089f0:	2900      	cmp	r1, #0
 80089f2:	f300 80fa 	bgt.w	8008bea <net::tcp_handle(t_tcp*)+0x502>
 80089f6:	3b04      	subs	r3, #4
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d856      	bhi.n	8008aaa <net::tcp_handle(t_tcp*)+0x3c2>
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	d053      	beq.n	8008aaa <net::tcp_handle(t_tcp*)+0x3c2>
 8008a02:	00a3      	lsls	r3, r4, #2
 8008a04:	4423      	add	r3, r4
 8008a06:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a0c:	455a      	cmp	r2, fp
 8008a0e:	f040 816c 	bne.w	8008cea <net::tcp_handle(t_tcp*)+0x602>
 8008a12:	f8b7 01e0 	ldrh.w	r0, [r7, #480]	@ 0x1e0
 8008a16:	9900      	ldr	r1, [sp, #0]
 8008a18:	f44f 63b2 	mov.w	r3, #1424	@ 0x590
 8008a1c:	fb00 f303 	mul.w	r3, r0, r3
 8008a20:	18fa      	adds	r2, r7, r3
 8008a22:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008a26:	f8a2 4772 	strh.w	r4, [r2, #1906]	@ 0x772
 8008a2a:	19da      	adds	r2, r3, r7
 8008a2c:	f105 0322 	add.w	r3, r5, #34	@ 0x22
 8008a30:	4419      	add	r1, r3
 8008a32:	079b      	lsls	r3, r3, #30
 8008a34:	4688      	mov	r8, r1
 8008a36:	f040 8122 	bne.w	8008c7e <net::tcp_handle(t_tcp*)+0x596>
 8008a3a:	f1b9 0f03 	cmp.w	r9, #3
 8008a3e:	f240 811e 	bls.w	8008c7e <net::tcp_handle(t_tcp*)+0x596>
 8008a42:	f1a9 0304 	sub.w	r3, r9, #4
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	1c59      	adds	r1, r3, #1
 8008a4a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8008a4e:	4694      	mov	ip, r2
 8008a50:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8008a54:	f858 eb04 	ldr.w	lr, [r8], #4
 8008a58:	f84c eb04 	str.w	lr, [ip], #4
 8008a5c:	4588      	cmp	r8, r1
 8008a5e:	d1f9      	bne.n	8008a54 <net::tcp_handle(t_tcp*)+0x36c>
 8008a60:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8008a64:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	f000 8112 	beq.w	8008c92 <net::tcp_handle(t_tcp*)+0x5aa>
 8008a6e:	4452      	add	r2, sl
 8008a70:	3b05      	subs	r3, #5
 8008a72:	e106      	b.n	8008c82 <net::tcp_handle(t_tcp*)+0x59a>
 8008a74:	00a3      	lsls	r3, r4, #2
 8008a76:	4423      	add	r3, r4
 8008a78:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a7c:	9801      	ldr	r0, [sp, #4]
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	1a11      	subs	r1, r2, r0
 8008a82:	2900      	cmp	r1, #0
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	f340 80eb 	ble.w	8008c60 <net::tcp_handle(t_tcp*)+0x578>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f00c f9d9 	bl	8014e44 <net::send_reset(t_tcp*, net::tcb const*)>
 8008a92:	00a3      	lsls	r3, r4, #2
 8008a94:	4423      	add	r3, r4
 8008a96:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a9a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a9e:	1f1a      	subs	r2, r3, #4
 8008aa0:	2a02      	cmp	r2, #2
 8008aa2:	d9ab      	bls.n	80089fc <net::tcp_handle(t_tcp*)+0x314>
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	f67f ae58 	bls.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008aaa:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 8008aae:	07ca      	lsls	r2, r1, #31
 8008ab0:	f57f ae53 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	4423      	add	r3, r4
 8008ab8:	eb07 1403 	add.w	r4, r7, r3, lsl #4
 8008abc:	4630      	mov	r0, r6
 8008abe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ac0:	69a2      	ldr	r2, [r4, #24]
 8008ac2:	9204      	str	r2, [sp, #16]
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	eb0d 0102 	add.w	r1, sp, r2
 8008acc:	6423      	str	r3, [r4, #64]	@ 0x40
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	f88d 2018 	strb.w	r2, [sp, #24]
 8008ad4:	f00c f8fe 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008ad8:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8008adc:	2b05      	cmp	r3, #5
 8008ade:	f000 80b9 	beq.w	8008c54 <net::tcp_handle(t_tcp*)+0x56c>
 8008ae2:	f200 80b2 	bhi.w	8008c4a <net::tcp_handle(t_tcp*)+0x562>
 8008ae6:	3b03      	subs	r3, #3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	f63f ae36 	bhi.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008aee:	2307      	movs	r3, #7
 8008af0:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
 8008af4:	e631      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008af6:	00a3      	lsls	r3, r4, #2
 8008af8:	4423      	add	r3, r4
 8008afa:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008afe:	9801      	ldr	r0, [sp, #4]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	4282      	cmp	r2, r0
 8008b04:	d1d3      	bne.n	8008aae <net::tcp_handle(t_tcp*)+0x3c6>
 8008b06:	891d      	ldrh	r5, [r3, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008b0e:	f846 2b04 	str.w	r2, [r6], #4
 8008b12:	42b3      	cmp	r3, r6
 8008b14:	d1fb      	bne.n	8008b0e <net::tcp_handle(t_tcp*)+0x426>
 8008b16:	e6a5      	b.n	8008864 <net::tcp_handle(t_tcp*)+0x17c>
 8008b18:	00a3      	lsls	r3, r4, #2
 8008b1a:	eb03 0a04 	add.w	sl, r3, r4
 8008b1e:	eb07 1a0a 	add.w	sl, r7, sl, lsl #4
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d1c0      	bne.n	8008aae <net::tcp_handle(t_tcp*)+0x3c6>
 8008b2c:	f8da 3040 	ldr.w	r3, [sl, #64]	@ 0x40
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	2310      	movs	r3, #16
 8008b34:	eb0d 0103 	add.w	r1, sp, r3
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f88d 3018 	strb.w	r3, [sp, #24]
 8008b3e:	9204      	str	r2, [sp, #16]
 8008b40:	f00c f8c8 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008b44:	f89a 304c 	ldrb.w	r3, [sl, #76]	@ 0x4c
 8008b48:	e7a9      	b.n	8008a9e <net::tcp_handle(t_tcp*)+0x3b6>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	b019      	add	sp, #100	@ 0x64
 8008b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	f00c b976 	b.w	8014e44 <net::send_reset(t_tcp*, net::tcb const*)>
 8008b58:	00a3      	lsls	r3, r4, #2
 8008b5a:	4423      	add	r3, r4
 8008b5c:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008b60:	2a07      	cmp	r2, #7
 8008b62:	8919      	ldrh	r1, [r3, #8]
 8008b64:	d81b      	bhi.n	8008b9e <net::tcp_handle(t_tcp*)+0x4b6>
 8008b66:	2a03      	cmp	r2, #3
 8008b68:	d021      	beq.n	8008bae <net::tcp_handle(t_tcp*)+0x4c6>
 8008b6a:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f846 2b04 	str.w	r2, [r6], #4
 8008b74:	42b3      	cmp	r3, r6
 8008b76:	d1fb      	bne.n	8008b70 <net::tcp_handle(t_tcp*)+0x488>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	4a62      	ldr	r2, [pc, #392]	@ (8008d04 <net::tcp_handle(t_tcp*)+0x61c>)
 8008b7c:	4423      	add	r3, r4
 8008b7e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	8119      	strh	r1, [r3, #8]
 8008b86:	f640 3418 	movw	r4, #2840	@ 0xb18
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008b90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008b92:	f8a3 4044 	strh.w	r4, [r3, #68]	@ 0x44
 8008b96:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b98:	f883 004c 	strb.w	r0, [r3, #76]	@ 0x4c
 8008b9c:	e5dd      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008b9e:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f846 2b04 	str.w	r2, [r6], #4
 8008ba8:	429e      	cmp	r6, r3
 8008baa:	d1fb      	bne.n	8008ba4 <net::tcp_handle(t_tcp*)+0x4bc>
 8008bac:	e7e4      	b.n	8008b78 <net::tcp_handle(t_tcp*)+0x490>
 8008bae:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f846 2b04 	str.w	r2, [r6], #4
 8008bb8:	42b3      	cmp	r3, r6
 8008bba:	d1fb      	bne.n	8008bb4 <net::tcp_handle(t_tcp*)+0x4cc>
 8008bbc:	e7dc      	b.n	8008b78 <net::tcp_handle(t_tcp*)+0x490>
 8008bbe:	00a3      	lsls	r3, r4, #2
 8008bc0:	4423      	add	r3, r4
 8008bc2:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008bc6:	891d      	ldrh	r5, [r3, #8]
 8008bc8:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008bcc:	f846 0b04 	str.w	r0, [r6], #4
 8008bd0:	429e      	cmp	r6, r3
 8008bd2:	d1fb      	bne.n	8008bcc <net::tcp_handle(t_tcp*)+0x4e4>
 8008bd4:	e646      	b.n	8008864 <net::tcp_handle(t_tcp*)+0x17c>
 8008bd6:	1a80      	subs	r0, r0, r2
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f340 8090 	ble.w	8008cfe <net::tcp_handle(t_tcp*)+0x616>
 8008bde:	9801      	ldr	r0, [sp, #4]
 8008be0:	eba0 010c 	sub.w	r1, r0, ip
 8008be4:	2900      	cmp	r1, #0
 8008be6:	f77f af06 	ble.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008bea:	00a3      	lsls	r3, r4, #2
 8008bec:	4423      	add	r3, r4
 8008bee:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008bf2:	2410      	movs	r4, #16
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	f88d 4018 	strb.w	r4, [sp, #24]
 8008bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bfe:	eb0d 0104 	add.w	r1, sp, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	e69b      	b.n	800893e <net::tcp_handle(t_tcp*)+0x256>
 8008c06:	f1be 0f00 	cmp.w	lr, #0
 8008c0a:	f47f aef4 	bne.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c0e:	9801      	ldr	r0, [sp, #4]
 8008c10:	1a82      	subs	r2, r0, r2
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	f73f aeef 	bgt.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c18:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8008c1a:	eba2 000b 	sub.w	r0, r2, fp
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	db08      	blt.n	8008c34 <net::tcp_handle(t_tcp*)+0x54c>
 8008c22:	455a      	cmp	r2, fp
 8008c24:	f47f aee7 	bne.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c28:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8008c2a:	9901      	ldr	r1, [sp, #4]
 8008c2c:	1a52      	subs	r2, r2, r1
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	f73f aee1 	bgt.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c34:	00a2      	lsls	r2, r4, #2
 8008c36:	4422      	add	r2, r4
 8008c38:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8008c3c:	9903      	ldr	r1, [sp, #12]
 8008c3e:	61d1      	str	r1, [r2, #28]
 8008c40:	9901      	ldr	r1, [sp, #4]
 8008c42:	f8c2 b024 	str.w	fp, [r2, #36]	@ 0x24
 8008c46:	6291      	str	r1, [r2, #40]	@ 0x28
 8008c48:	e6d5      	b.n	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c4a:	2b06      	cmp	r3, #6
 8008c4c:	f47f ad85 	bne.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008c50:	230a      	movs	r3, #10
 8008c52:	e74d      	b.n	8008af0 <net::tcp_handle(t_tcp*)+0x408>
 8008c54:	69a3      	ldr	r3, [r4, #24]
 8008c56:	9a01      	ldr	r2, [sp, #4]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d0f9      	beq.n	8008c50 <net::tcp_handle(t_tcp*)+0x568>
 8008c5c:	2308      	movs	r3, #8
 8008c5e:	e747      	b.n	8008af0 <net::tcp_handle(t_tcp*)+0x408>
 8008c60:	1a82      	subs	r2, r0, r2
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	f73f af11 	bgt.w	8008a8a <net::tcp_handle(t_tcp*)+0x3a2>
 8008c68:	9903      	ldr	r1, [sp, #12]
 8008c6a:	61d9      	str	r1, [r3, #28]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	9901      	ldr	r1, [sp, #4]
 8008c70:	f8c3 b024 	str.w	fp, [r3, #36]	@ 0x24
 8008c74:	6299      	str	r1, [r3, #40]	@ 0x28
 8008c76:	6159      	str	r1, [r3, #20]
 8008c78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8008c7c:	e56d      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008c7e:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 8008c82:	3301      	adds	r3, #1
 8008c84:	4443      	add	r3, r8
 8008c86:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c8a:	f802 1b01 	strb.w	r1, [r2], #1
 8008c8e:	4543      	cmp	r3, r8
 8008c90:	d1f9      	bne.n	8008c86 <net::tcp_handle(t_tcp*)+0x59e>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	eb03 0804 	add.w	r8, r3, r4
 8008c98:	f44f 63b2 	mov.w	r3, #1424	@ 0x590
 8008c9c:	eb07 1808 	add.w	r8, r7, r8, lsl #4
 8008ca0:	fb03 7300 	mla	r3, r3, r0, r7
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f8a3 9770 	strh.w	r9, [r3, #1904]	@ 0x770
 8008caa:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
 8008cae:	444b      	add	r3, r9
 8008cb0:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	f8b8 3044 	ldrh.w	r3, [r8, #68]	@ 0x44
 8008cba:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
 8008cbe:	f8a8 3044 	strh.w	r3, [r8, #68]	@ 0x44
 8008cc2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	2310      	movs	r3, #16
 8008cca:	eb0d 0103 	add.w	r1, sp, r3
 8008cce:	f88d 3018 	strb.w	r3, [sp, #24]
 8008cd2:	f00b ffff 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008cd6:	f8b7 21e0 	ldrh.w	r2, [r7, #480]	@ 0x1e0
 8008cda:	f898 304c 	ldrb.w	r3, [r8, #76]	@ 0x4c
 8008cde:	3201      	adds	r2, #1
 8008ce0:	f002 0201 	and.w	r2, r2, #1
 8008ce4:	f8a7 21e0 	strh.w	r2, [r7, #480]	@ 0x1e0
 8008ce8:	e6dc      	b.n	8008aa4 <net::tcp_handle(t_tcp*)+0x3bc>
 8008cea:	699c      	ldr	r4, [r3, #24]
 8008cec:	2310      	movs	r3, #16
 8008cee:	e9cd 4204 	strd	r4, r2, [sp, #16]
 8008cf2:	eb0d 0103 	add.w	r1, sp, r3
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f88d 3018 	strb.w	r3, [sp, #24]
 8008cfc:	e61f      	b.n	800893e <net::tcp_handle(t_tcp*)+0x256>
 8008cfe:	9a01      	ldr	r2, [sp, #4]
 8008d00:	614a      	str	r2, [r1, #20]
 8008d02:	e789      	b.n	8008c18 <net::tcp_handle(t_tcp*)+0x530>
 8008d04:	2001bcc0 	andcs	fp, r1, r0, asr #25

08008d08 <net::udp_handle(t_udp*)>:
 8008d08:	f8b0 c024 	ldrh.w	ip, [r0, #36]	@ 0x24
 8008d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d84 <net::udp_handle(t_udp*)+0x7c>)
 8008d0e:	fa9c fc9c 	rev16.w	ip, ip
 8008d12:	2300      	movs	r3, #0
 8008d14:	fa1f fc8c 	uxth.w	ip, ip
 8008d18:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8008d1c:	4561      	cmp	r1, ip
 8008d1e:	d003      	beq.n	8008d28 <net::udp_handle(t_udp*)+0x20>
 8008d20:	3301      	adds	r3, #1
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d1f8      	bne.n	8008d18 <net::udp_handle(t_udp*)+0x10>
 8008d26:	4770      	bx	lr
 8008d28:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8008d2a:	b530      	push	{r4, r5, lr}
 8008d2c:	ba4c      	rev16	r4, r1
 8008d2e:	3c08      	subs	r4, #8
 8008d30:	b2a4      	uxth	r4, r4
 8008d32:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8008d36:	fa1f fc81 	uxth.w	ip, r1
 8008d3a:	f5b4 6fb8 	cmp.w	r4, #1472	@ 0x5c0
 8008d3e:	4d12      	ldr	r5, [pc, #72]	@ (8008d88 <net::udp_handle(t_udp*)+0x80>)
 8008d40:	fb03 f202 	mul.w	r2, r3, r2
 8008d44:	f102 020a 	add.w	r2, r2, #10
 8008d48:	bf28      	it	cs
 8008d4a:	f44f 64b8 	movcs.w	r4, #1472	@ 0x5c0
 8008d4e:	f5bc 6f00 	cmp.w	ip, #2048	@ 0x800
 8008d52:	442a      	add	r2, r5
 8008d54:	f100 012a 	add.w	r1, r0, #42	@ 0x2a
 8008d58:	d007      	beq.n	8008d6a <net::udp_handle(t_udp*)+0x62>
 8008d5a:	eb02 0e04 	add.w	lr, r2, r4
 8008d5e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008d62:	f802 cb01 	strb.w	ip, [r2], #1
 8008d66:	4572      	cmp	r2, lr
 8008d68:	d1f9      	bne.n	8008d5e <net::udp_handle(t_udp*)+0x56>
 8008d6a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	f8d0 101a 	ldr.w	r1, [r0, #26]
 8008d76:	50e9      	str	r1, [r5, r3]
 8008d78:	18ea      	adds	r2, r5, r3
 8008d7a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008d7c:	6054      	str	r4, [r2, #4]
 8008d7e:	ba5b      	rev16	r3, r3
 8008d80:	8113      	strh	r3, [r2, #8]
 8008d82:	bd30      	pop	{r4, r5, pc}
 8008d84:	1000caf6 	strdne	ip, [r0], -r6
 8008d88:	10009c98 	mulne	r0, r8, ip

08008d8c <net::arp_handle(t_arp*)>:
 8008d8c:	89c3      	ldrh	r3, [r0, #14]
 8008d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d92:	d17e      	bne.n	8008e92 <net::arp_handle(t_arp*)+0x106>
 8008d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	8a03      	ldrh	r3, [r0, #16]
 8008d9a:	2b08      	cmp	r3, #8
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	d172      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008da0:	7c83      	ldrb	r3, [r0, #18]
 8008da2:	2b06      	cmp	r3, #6
 8008da4:	d16f      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008da6:	7cc3      	ldrb	r3, [r0, #19]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d16c      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008dac:	f00c ff8a 	bl	8015cc4 <net::acd_arp_reply(t_arp*)>
 8008db0:	4a38      	ldr	r2, [pc, #224]	@ (8008e94 <net::arp_handle(t_arp*)+0x108>)
 8008db2:	f8d4 3026 	ldr.w	r3, [r4, #38]	@ 0x26
 8008db6:	6817      	ldr	r7, [r2, #0]
 8008db8:	429f      	cmp	r7, r3
 8008dba:	d066      	beq.n	8008e8a <net::arp_handle(t_arp*)+0xfe>
 8008dbc:	6912      	ldr	r2, [r2, #16]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	bf0d      	iteet	eq
 8008dc2:	f04f 0801 	moveq.w	r8, #1
 8008dc6:	f04f 0800 	movne.w	r8, #0
 8008dca:	2101      	movne	r1, #1
 8008dcc:	2100      	moveq	r1, #0
 8008dce:	69e6      	ldr	r6, [r4, #28]
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f00c fffd 	bl	8015dd0 <net::arp_find_record(unsigned long, net::arp::Flags)>
 8008dd6:	f104 091c 	add.w	r9, r4, #28
 8008dda:	f104 0a16 	add.w	sl, r4, #22
 8008dde:	4605      	mov	r5, r0
 8008de0:	b350      	cbz	r0, 8008e38 <net::arp_handle(t_arp*)+0xac>
 8008de2:	2302      	movs	r3, #2
 8008de4:	6143      	str	r3, [r0, #20]
 8008de6:	f100 020c 	add.w	r2, r0, #12
 8008dea:	2300      	movs	r3, #0
 8008dec:	8243      	strh	r3, [r0, #18]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4653      	mov	r3, sl
 8008df2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008df6:	f801 0b01 	strb.w	r0, [r1], #1
 8008dfa:	4599      	cmp	r9, r3
 8008dfc:	d1f9      	bne.n	8008df2 <net::arp_handle(t_arp*)+0x66>
 8008dfe:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008e02:	f1bc 0f00 	cmp.w	ip, #0
 8008e06:	d017      	beq.n	8008e38 <net::arp_handle(t_arp*)+0xac>
 8008e08:	4663      	mov	r3, ip
 8008e0a:	f105 0012 	add.w	r0, r5, #18
 8008e0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008e12:	f803 1b01 	strb.w	r1, [r3], #1
 8008e16:	4282      	cmp	r2, r0
 8008e18:	d1f9      	bne.n	8008e0e <net::arp_handle(t_arp*)+0x82>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8008e20:	f88c 3018 	strb.w	r3, [ip, #24]
 8008e24:	f88c 3019 	strb.w	r3, [ip, #25]
 8008e28:	f00c fe26 	bl	8015a78 <emac_eth_send(void*, unsigned long)>
 8008e2c:	6868      	ldr	r0, [r5, #4]
 8008e2e:	b108      	cbz	r0, 8008e34 <net::arp_handle(t_arp*)+0xa8>
 8008e30:	f011 fdb4 	bl	801a99c <operator delete[](void*)>
 8008e34:	2300      	movs	r3, #0
 8008e36:	606b      	str	r3, [r5, #4]
 8008e38:	8aa3      	ldrh	r3, [r4, #20]
 8008e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e3e:	d122      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d01f      	beq.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e46:	42b7      	cmp	r7, r6
 8008e48:	d01d      	beq.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e4a:	4d13      	ldr	r5, [pc, #76]	@ (8008e98 <net::arp_handle(t_arp*)+0x10c>)
 8008e4c:	1da3      	adds	r3, r4, #6
 8008e4e:	f104 000c 	add.w	r0, r4, #12
 8008e52:	462a      	mov	r2, r5
 8008e54:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008e58:	f802 1b01 	strb.w	r1, [r2], #1
 8008e5c:	4283      	cmp	r3, r0
 8008e5e:	d1f9      	bne.n	8008e54 <net::arp_handle(t_arp*)+0xc8>
 8008e60:	f8d4 6026 	ldr.w	r6, [r4, #38]	@ 0x26
 8008e64:	4b0d      	ldr	r3, [pc, #52]	@ (8008e9c <net::arp_handle(t_arp*)+0x110>)
 8008e66:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8008e6a:	f803 2b01 	strb.w	r2, [r3], #1
 8008e6e:	45d1      	cmp	r9, sl
 8008e70:	d1f9      	bne.n	8008e66 <net::arp_handle(t_arp*)+0xda>
 8008e72:	69e3      	ldr	r3, [r4, #28]
 8008e74:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
 8008e78:	61ee      	str	r6, [r5, #28]
 8008e7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7e:	4806      	ldr	r0, [pc, #24]	@ (8008e98 <net::arp_handle(t_arp*)+0x10c>)
 8008e80:	213c      	movs	r1, #60	@ 0x3c
 8008e82:	f00c bdf9 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	f04f 0801 	mov.w	r8, #1
 8008e90:	e79d      	b.n	8008dce <net::arp_handle(t_arp*)+0x42>
 8008e92:	4770      	bx	lr
 8008e94:	2000e220 	andcs	lr, r0, r0, lsr #4
 8008e98:	2000e250 	andcs	lr, r0, r0, asr r2
 8008e9c:	2000e270 	andcs	lr, r0, r0, ror r2

08008ea0 <net::ip_handle(t_ip4*)>:
 8008ea0:	7b81      	ldrb	r1, [r0, #14]
 8008ea2:	7dc2      	ldrb	r2, [r0, #23]
 8008ea4:	2945      	cmp	r1, #69	@ 0x45
 8008ea6:	d121      	bne.n	8008eec <net::ip_handle(t_ip4*)+0x4c>
 8008ea8:	3a01      	subs	r2, #1
 8008eaa:	b508      	push	{r3, lr}
 8008eac:	2a10      	cmp	r2, #16
 8008eae:	d80a      	bhi.n	8008ec6 <net::ip_handle(t_ip4*)+0x26>
 8008eb0:	e8df f002 	tbb	[pc, r2]
 8008eb4:	0909120e 	stmdbeq	r9, {r1, r2, r3, r9, ip}
 8008eb8:	09091609 	stmdbeq	r9, {r0, r3, r9, sl, ip}
 8008ebc:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8008ec0:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8008ec4:	bd08000a 	stclt	0, cr0, [r8, #-40]	@ 0xffffffd8
 8008ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ecc:	f7ff bf1c 	b.w	8008d08 <net::udp_handle(t_udp*)>
 8008ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ed4:	f000 b80e 	b.w	8008ef4 <net::icmp_handle(t_icmp*)>
 8008ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008edc:	f7ff bb6c 	b.w	80085b8 <net::igmp_handle(t_igmp*)>
 8008ee0:	f7ff fc02 	bl	80086e8 <net::tcp_handle(t_tcp*)>
 8008ee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ee8:	f7ff bbd8 	b.w	800869c <net::tcp_run()>
 8008eec:	2a02      	cmp	r2, #2
 8008eee:	d0f5      	beq.n	8008edc <net::ip_handle(t_ip4*)+0x3c>
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop

08008ef4 <net::icmp_handle(t_icmp*)>:
 8008ef4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d000      	beq.n	8008efe <net::icmp_handle(t_icmp*)+0xa>
 8008efc:	4770      	bx	lr
 8008efe:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1fa      	bne.n	8008efc <net::icmp_handle(t_icmp*)+0x8>
 8008f06:	f100 0c06 	add.w	ip, r0, #6
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4662      	mov	r2, ip
 8008f0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	459c      	cmp	ip, r3
 8008f18:	d1f9      	bne.n	8008f0e <net::icmp_handle(t_icmp*)+0x1a>
 8008f1a:	4a14      	ldr	r2, [pc, #80]	@ (8008f6c <net::icmp_handle(t_icmp*)+0x78>)
 8008f1c:	f100 0c0c 	add.w	ip, r0, #12
 8008f20:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f24:	f803 1b01 	strb.w	r1, [r3], #1
 8008f28:	4563      	cmp	r3, ip
 8008f2a:	d1f9      	bne.n	8008f20 <net::icmp_handle(t_icmp*)+0x2c>
 8008f2c:	8a43      	ldrh	r3, [r0, #18]
 8008f2e:	4a10      	ldr	r2, [pc, #64]	@ (8008f70 <net::icmp_handle(t_icmp*)+0x7c>)
 8008f30:	f8d0 101e 	ldr.w	r1, [r0, #30]
 8008f34:	f8d0 c01a 	ldr.w	ip, [r0, #26]
 8008f38:	f8c0 c01e 	str.w	ip, [r0, #30]
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	8243      	strh	r3, [r0, #18]
 8008f40:	6913      	ldr	r3, [r2, #16]
 8008f42:	428b      	cmp	r3, r1
 8008f44:	8a01      	ldrh	r1, [r0, #16]
 8008f46:	bf18      	it	ne
 8008f48:	6813      	ldrne	r3, [r2, #0]
 8008f4a:	f8c0 301a 	str.w	r3, [r0, #26]
 8008f4e:	ba49      	rev16	r1, r1
 8008f50:	2300      	movs	r3, #0
 8008f52:	b289      	uxth	r1, r1
 8008f54:	7603      	strb	r3, [r0, #24]
 8008f56:	7643      	strb	r3, [r0, #25]
 8008f58:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8008f5c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8008f60:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 8008f64:	310e      	adds	r1, #14
 8008f66:	f00c bd87 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 8008f6a:	bf00      	nop
 8008f6c:	2000e234 	andcs	lr, r0, r4, lsr r2
 8008f70:	2000e220 	andcs	lr, r0, r0, lsr #4

08008f74 <__aeabi_drsub>:
 8008f74:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008f78:	e002      	b.n	8008f80 <__adddf3>
 8008f7a:	bf00      	nop

08008f7c <__aeabi_dsub>:
 8008f7c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08008f80 <__adddf3>:
 8008f80:	b530      	push	{r4, r5, lr}
 8008f82:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008f86:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008f8a:	ea94 0f05 	teq	r4, r5
 8008f8e:	bf08      	it	eq
 8008f90:	ea90 0f02 	teqeq	r0, r2
 8008f94:	bf1f      	itttt	ne
 8008f96:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008f9a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008f9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008fa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008fa6:	f000 80e2 	beq.w	800916e <__adddf3+0x1ee>
 8008faa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008fae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008fb2:	bfb8      	it	lt
 8008fb4:	426d      	neglt	r5, r5
 8008fb6:	dd0c      	ble.n	8008fd2 <__adddf3+0x52>
 8008fb8:	442c      	add	r4, r5
 8008fba:	ea80 0202 	eor.w	r2, r0, r2
 8008fbe:	ea81 0303 	eor.w	r3, r1, r3
 8008fc2:	ea82 0000 	eor.w	r0, r2, r0
 8008fc6:	ea83 0101 	eor.w	r1, r3, r1
 8008fca:	ea80 0202 	eor.w	r2, r0, r2
 8008fce:	ea81 0303 	eor.w	r3, r1, r3
 8008fd2:	2d36      	cmp	r5, #54	@ 0x36
 8008fd4:	bf88      	it	hi
 8008fd6:	bd30      	pophi	{r4, r5, pc}
 8008fd8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008fe0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008fe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008fe8:	d002      	beq.n	8008ff0 <__adddf3+0x70>
 8008fea:	4240      	negs	r0, r0
 8008fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ff0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008ff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008ffc:	d002      	beq.n	8009004 <__adddf3+0x84>
 8008ffe:	4252      	negs	r2, r2
 8009000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009004:	ea94 0f05 	teq	r4, r5
 8009008:	f000 80a7 	beq.w	800915a <__adddf3+0x1da>
 800900c:	f1a4 0401 	sub.w	r4, r4, #1
 8009010:	f1d5 0e20 	rsbs	lr, r5, #32
 8009014:	db0d      	blt.n	8009032 <__adddf3+0xb2>
 8009016:	fa02 fc0e 	lsl.w	ip, r2, lr
 800901a:	fa22 f205 	lsr.w	r2, r2, r5
 800901e:	1880      	adds	r0, r0, r2
 8009020:	f141 0100 	adc.w	r1, r1, #0
 8009024:	fa03 f20e 	lsl.w	r2, r3, lr
 8009028:	1880      	adds	r0, r0, r2
 800902a:	fa43 f305 	asr.w	r3, r3, r5
 800902e:	4159      	adcs	r1, r3
 8009030:	e00e      	b.n	8009050 <__adddf3+0xd0>
 8009032:	f1a5 0520 	sub.w	r5, r5, #32
 8009036:	f10e 0e20 	add.w	lr, lr, #32
 800903a:	2a01      	cmp	r2, #1
 800903c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8009040:	bf28      	it	cs
 8009042:	f04c 0c02 	orrcs.w	ip, ip, #2
 8009046:	fa43 f305 	asr.w	r3, r3, r5
 800904a:	18c0      	adds	r0, r0, r3
 800904c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8009050:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009054:	d507      	bpl.n	8009066 <__adddf3+0xe6>
 8009056:	f04f 0e00 	mov.w	lr, #0
 800905a:	f1dc 0c00 	rsbs	ip, ip, #0
 800905e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8009062:	eb6e 0101 	sbc.w	r1, lr, r1
 8009066:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800906a:	d31b      	bcc.n	80090a4 <__adddf3+0x124>
 800906c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8009070:	d30c      	bcc.n	800908c <__adddf3+0x10c>
 8009072:	0849      	lsrs	r1, r1, #1
 8009074:	ea5f 0030 	movs.w	r0, r0, rrx
 8009078:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800907c:	f104 0401 	add.w	r4, r4, #1
 8009080:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8009084:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8009088:	f080 809a 	bcs.w	80091c0 <__adddf3+0x240>
 800908c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8009090:	bf08      	it	eq
 8009092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009096:	f150 0000 	adcs.w	r0, r0, #0
 800909a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800909e:	ea41 0105 	orr.w	r1, r1, r5
 80090a2:	bd30      	pop	{r4, r5, pc}
 80090a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80090a8:	4140      	adcs	r0, r0
 80090aa:	eb41 0101 	adc.w	r1, r1, r1
 80090ae:	3c01      	subs	r4, #1
 80090b0:	bf28      	it	cs
 80090b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80090b6:	d2e9      	bcs.n	800908c <__adddf3+0x10c>
 80090b8:	f091 0f00 	teq	r1, #0
 80090bc:	bf04      	itt	eq
 80090be:	4601      	moveq	r1, r0
 80090c0:	2000      	moveq	r0, #0
 80090c2:	fab1 f381 	clz	r3, r1
 80090c6:	bf08      	it	eq
 80090c8:	3320      	addeq	r3, #32
 80090ca:	f1a3 030b 	sub.w	r3, r3, #11
 80090ce:	f1b3 0220 	subs.w	r2, r3, #32
 80090d2:	da0c      	bge.n	80090ee <__adddf3+0x16e>
 80090d4:	320c      	adds	r2, #12
 80090d6:	dd08      	ble.n	80090ea <__adddf3+0x16a>
 80090d8:	f102 0c14 	add.w	ip, r2, #20
 80090dc:	f1c2 020c 	rsb	r2, r2, #12
 80090e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80090e4:	fa21 f102 	lsr.w	r1, r1, r2
 80090e8:	e00c      	b.n	8009104 <__adddf3+0x184>
 80090ea:	f102 0214 	add.w	r2, r2, #20
 80090ee:	bfd8      	it	le
 80090f0:	f1c2 0c20 	rsble	ip, r2, #32
 80090f4:	fa01 f102 	lsl.w	r1, r1, r2
 80090f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80090fc:	bfdc      	itt	le
 80090fe:	ea41 010c 	orrle.w	r1, r1, ip
 8009102:	4090      	lslle	r0, r2
 8009104:	1ae4      	subs	r4, r4, r3
 8009106:	bfa2      	ittt	ge
 8009108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800910c:	4329      	orrge	r1, r5
 800910e:	bd30      	popge	{r4, r5, pc}
 8009110:	ea6f 0404 	mvn.w	r4, r4
 8009114:	3c1f      	subs	r4, #31
 8009116:	da1c      	bge.n	8009152 <__adddf3+0x1d2>
 8009118:	340c      	adds	r4, #12
 800911a:	dc0e      	bgt.n	800913a <__adddf3+0x1ba>
 800911c:	f104 0414 	add.w	r4, r4, #20
 8009120:	f1c4 0220 	rsb	r2, r4, #32
 8009124:	fa20 f004 	lsr.w	r0, r0, r4
 8009128:	fa01 f302 	lsl.w	r3, r1, r2
 800912c:	ea40 0003 	orr.w	r0, r0, r3
 8009130:	fa21 f304 	lsr.w	r3, r1, r4
 8009134:	ea45 0103 	orr.w	r1, r5, r3
 8009138:	bd30      	pop	{r4, r5, pc}
 800913a:	f1c4 040c 	rsb	r4, r4, #12
 800913e:	f1c4 0220 	rsb	r2, r4, #32
 8009142:	fa20 f002 	lsr.w	r0, r0, r2
 8009146:	fa01 f304 	lsl.w	r3, r1, r4
 800914a:	ea40 0003 	orr.w	r0, r0, r3
 800914e:	4629      	mov	r1, r5
 8009150:	bd30      	pop	{r4, r5, pc}
 8009152:	fa21 f004 	lsr.w	r0, r1, r4
 8009156:	4629      	mov	r1, r5
 8009158:	bd30      	pop	{r4, r5, pc}
 800915a:	f094 0f00 	teq	r4, #0
 800915e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8009162:	bf06      	itte	eq
 8009164:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8009168:	3401      	addeq	r4, #1
 800916a:	3d01      	subne	r5, #1
 800916c:	e74e      	b.n	800900c <__adddf3+0x8c>
 800916e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009172:	bf18      	it	ne
 8009174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009178:	d029      	beq.n	80091ce <__adddf3+0x24e>
 800917a:	ea94 0f05 	teq	r4, r5
 800917e:	bf08      	it	eq
 8009180:	ea90 0f02 	teqeq	r0, r2
 8009184:	d005      	beq.n	8009192 <__adddf3+0x212>
 8009186:	ea54 0c00 	orrs.w	ip, r4, r0
 800918a:	bf04      	itt	eq
 800918c:	4619      	moveq	r1, r3
 800918e:	4610      	moveq	r0, r2
 8009190:	bd30      	pop	{r4, r5, pc}
 8009192:	ea91 0f03 	teq	r1, r3
 8009196:	bf1e      	ittt	ne
 8009198:	2100      	movne	r1, #0
 800919a:	2000      	movne	r0, #0
 800919c:	bd30      	popne	{r4, r5, pc}
 800919e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80091a2:	d105      	bne.n	80091b0 <__adddf3+0x230>
 80091a4:	0040      	lsls	r0, r0, #1
 80091a6:	4149      	adcs	r1, r1
 80091a8:	bf28      	it	cs
 80091aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80091b4:	bf3c      	itt	cc
 80091b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80091ba:	bd30      	popcc	{r4, r5, pc}
 80091bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80091c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80091c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091c8:	f04f 0000 	mov.w	r0, #0
 80091cc:	bd30      	pop	{r4, r5, pc}
 80091ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80091d2:	bf1a      	itte	ne
 80091d4:	4619      	movne	r1, r3
 80091d6:	4610      	movne	r0, r2
 80091d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80091dc:	bf1c      	itt	ne
 80091de:	460b      	movne	r3, r1
 80091e0:	4602      	movne	r2, r0
 80091e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80091e6:	bf06      	itte	eq
 80091e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80091ec:	ea91 0f03 	teqeq	r1, r3
 80091f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80091f4:	bd30      	pop	{r4, r5, pc}
 80091f6:	bf00      	nop

080091f8 <__aeabi_ui2d>:
 80091f8:	f090 0f00 	teq	r0, #0
 80091fc:	bf04      	itt	eq
 80091fe:	2100      	moveq	r1, #0
 8009200:	4770      	bxeq	lr
 8009202:	b530      	push	{r4, r5, lr}
 8009204:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8009208:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800920c:	f04f 0500 	mov.w	r5, #0
 8009210:	f04f 0100 	mov.w	r1, #0
 8009214:	e750      	b.n	80090b8 <__adddf3+0x138>
 8009216:	bf00      	nop

08009218 <__aeabi_i2d>:
 8009218:	f090 0f00 	teq	r0, #0
 800921c:	bf04      	itt	eq
 800921e:	2100      	moveq	r1, #0
 8009220:	4770      	bxeq	lr
 8009222:	b530      	push	{r4, r5, lr}
 8009224:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8009228:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800922c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8009230:	bf48      	it	mi
 8009232:	4240      	negmi	r0, r0
 8009234:	f04f 0100 	mov.w	r1, #0
 8009238:	e73e      	b.n	80090b8 <__adddf3+0x138>
 800923a:	bf00      	nop

0800923c <__aeabi_f2d>:
 800923c:	0042      	lsls	r2, r0, #1
 800923e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8009242:	ea4f 0131 	mov.w	r1, r1, rrx
 8009246:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800924a:	bf1f      	itttt	ne
 800924c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8009250:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8009254:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8009258:	4770      	bxne	lr
 800925a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800925e:	bf08      	it	eq
 8009260:	4770      	bxeq	lr
 8009262:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8009266:	bf04      	itt	eq
 8009268:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800926c:	4770      	bxeq	lr
 800926e:	b530      	push	{r4, r5, lr}
 8009270:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8009274:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800927c:	e71c      	b.n	80090b8 <__adddf3+0x138>
 800927e:	bf00      	nop

08009280 <__aeabi_ul2d>:
 8009280:	ea50 0201 	orrs.w	r2, r0, r1
 8009284:	bf08      	it	eq
 8009286:	4770      	bxeq	lr
 8009288:	b530      	push	{r4, r5, lr}
 800928a:	f04f 0500 	mov.w	r5, #0
 800928e:	e00a      	b.n	80092a6 <__aeabi_l2d+0x16>

08009290 <__aeabi_l2d>:
 8009290:	ea50 0201 	orrs.w	r2, r0, r1
 8009294:	bf08      	it	eq
 8009296:	4770      	bxeq	lr
 8009298:	b530      	push	{r4, r5, lr}
 800929a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800929e:	d502      	bpl.n	80092a6 <__aeabi_l2d+0x16>
 80092a0:	4240      	negs	r0, r0
 80092a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80092a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80092aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80092ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80092b2:	f43f aed8 	beq.w	8009066 <__adddf3+0xe6>
 80092b6:	f04f 0203 	mov.w	r2, #3
 80092ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092be:	bf18      	it	ne
 80092c0:	3203      	addne	r2, #3
 80092c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092c6:	bf18      	it	ne
 80092c8:	3203      	addne	r2, #3
 80092ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80092ce:	f1c2 0320 	rsb	r3, r2, #32
 80092d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80092d6:	fa20 f002 	lsr.w	r0, r0, r2
 80092da:	fa01 fe03 	lsl.w	lr, r1, r3
 80092de:	ea40 000e 	orr.w	r0, r0, lr
 80092e2:	fa21 f102 	lsr.w	r1, r1, r2
 80092e6:	4414      	add	r4, r2
 80092e8:	e6bd      	b.n	8009066 <__adddf3+0xe6>
 80092ea:	bf00      	nop

080092ec <__aeabi_d2f>:
 80092ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80092f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80092f4:	bf24      	itt	cs
 80092f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80092fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80092fe:	d90d      	bls.n	800931c <__aeabi_d2f+0x30>
 8009300:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8009304:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009308:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800930c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8009310:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8009314:	bf08      	it	eq
 8009316:	f020 0001 	biceq.w	r0, r0, #1
 800931a:	4770      	bx	lr
 800931c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8009320:	d121      	bne.n	8009366 <__aeabi_d2f+0x7a>
 8009322:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8009326:	bfbc      	itt	lt
 8009328:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800932c:	4770      	bxlt	lr
 800932e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8009332:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8009336:	f1c2 0218 	rsb	r2, r2, #24
 800933a:	f1c2 0c20 	rsb	ip, r2, #32
 800933e:	fa10 f30c 	lsls.w	r3, r0, ip
 8009342:	fa20 f002 	lsr.w	r0, r0, r2
 8009346:	bf18      	it	ne
 8009348:	f040 0001 	orrne.w	r0, r0, #1
 800934c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009350:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8009354:	fa03 fc0c 	lsl.w	ip, r3, ip
 8009358:	ea40 000c 	orr.w	r0, r0, ip
 800935c:	fa23 f302 	lsr.w	r3, r3, r2
 8009360:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009364:	e7cc      	b.n	8009300 <__aeabi_d2f+0x14>
 8009366:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800936a:	d107      	bne.n	800937c <__aeabi_d2f+0x90>
 800936c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8009370:	bf1e      	ittt	ne
 8009372:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8009376:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800937a:	4770      	bxne	lr
 800937c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8009380:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8009384:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop

0800938c <Reset_Handler>:
 800938c:	490f      	ldr	r1, [pc, #60]	@ (80093cc <ZeroBSSLoop+0x1e>)
 800938e:	4a10      	ldr	r2, [pc, #64]	@ (80093d0 <ZeroBSSLoop+0x22>)
 8009390:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <ZeroBSSLoop+0x26>)
 8009392:	1a5b      	subs	r3, r3, r1
 8009394:	d005      	beq.n	80093a2 <ZeroBSS>

08009396 <CopyDataLoop>:
 8009396:	f812 4b01 	ldrb.w	r4, [r2], #1
 800939a:	f801 4b01 	strb.w	r4, [r1], #1
 800939e:	3b01      	subs	r3, #1
 80093a0:	dcf9      	bgt.n	8009396 <CopyDataLoop>

080093a2 <ZeroBSS>:
 80093a2:	4a0d      	ldr	r2, [pc, #52]	@ (80093d8 <ZeroBSSLoop+0x2a>)
 80093a4:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <ZeroBSSLoop+0x2e>)
 80093a6:	eba3 0302 	sub.w	r3, r3, r2
 80093aa:	f04f 0400 	mov.w	r4, #0

080093ae <ZeroBSSLoop>:
 80093ae:	f842 4b04 	str.w	r4, [r2], #4
 80093b2:	3b04      	subs	r3, #4
 80093b4:	dcfb      	bgt.n	80093ae <ZeroBSSLoop>
 80093b6:	f00e fdf3 	bl	8017fa0 <stack_debug_init>
 80093ba:	f00e fe55 	bl	8018068 <SystemInit>
 80093be:	f010 fd73 	bl	8019ea8 <__libc_init_array>
 80093c2:	f000 fe7b 	bl	800a0bc <main>
 80093c6:	4770      	bx	lr
 80093c8:	bf00      	nop
 80093ca:	00000000 	andeq	r0, r0, r0
 80093ce:	f7d02000 			@ <UNDEFINED> instruction: 0xf7d02000
 80093d2:	00780801 	rsbseq	r0, r8, r1, lsl #16
 80093d6:	00782000 	rsbseq	r2, r8, r0
 80093da:	bd042000 	stclt	0, cr2, [r4, #-0]
 80093de:	 	ldrb	r2, [lr, r1]!

080093e0 <ADC_IRQHandler>:
 80093e0:	e7fe      	b.n	80093e0 <ADC_IRQHandler>

080093e2 <HardFault_Handler>:
 80093e2:	f01e 0f04 	tst.w	lr, #4
 80093e6:	bf0c      	ite	eq
 80093e8:	f3ef 8008 	mrseq	r0, MSP
 80093ec:	f3ef 8009 	mrsne	r0, PSP
 80093f0:	4671      	mov	r1, lr
 80093f2:	f000 b801 	b.w	80093f8 <hardfault_handler>
 80093f6:	4770      	bx	lr

080093f8 <hardfault_handler>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	4d2f      	ldr	r5, [pc, #188]	@ (80094bc <hardfault_handler+0xc4>)
 80093fe:	b087      	sub	sp, #28
 8009400:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	e9d0 9303 	ldrd	r9, r3, [r0, #12]
 800940c:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800940e:	9303      	str	r3, [sp, #12]
 8009410:	e9d0 ba01 	ldrd	fp, sl, [r0, #4]
 8009414:	69c3      	ldr	r3, [r0, #28]
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	e9d0 7605 	ldrd	r7, r6, [r0, #20]
 800941c:	4688      	mov	r8, r1
 800941e:	6801      	ldr	r1, [r0, #0]
 8009420:	4827      	ldr	r0, [pc, #156]	@ (80094c0 <hardfault_handler+0xc8>)
 8009422:	9105      	str	r1, [sp, #20]
 8009424:	f011 f868 	bl	801a4f8 <printf>
 8009428:	4826      	ldr	r0, [pc, #152]	@ (80094c4 <hardfault_handler+0xcc>)
 800942a:	f011 f865 	bl	801a4f8 <printf>
 800942e:	9905      	ldr	r1, [sp, #20]
 8009430:	4825      	ldr	r0, [pc, #148]	@ (80094c8 <hardfault_handler+0xd0>)
 8009432:	f011 f861 	bl	801a4f8 <printf>
 8009436:	4659      	mov	r1, fp
 8009438:	4824      	ldr	r0, [pc, #144]	@ (80094cc <hardfault_handler+0xd4>)
 800943a:	f011 f85d 	bl	801a4f8 <printf>
 800943e:	4651      	mov	r1, sl
 8009440:	4823      	ldr	r0, [pc, #140]	@ (80094d0 <hardfault_handler+0xd8>)
 8009442:	f011 f859 	bl	801a4f8 <printf>
 8009446:	4649      	mov	r1, r9
 8009448:	4822      	ldr	r0, [pc, #136]	@ (80094d4 <hardfault_handler+0xdc>)
 800944a:	f011 f855 	bl	801a4f8 <printf>
 800944e:	9903      	ldr	r1, [sp, #12]
 8009450:	4821      	ldr	r0, [pc, #132]	@ (80094d8 <hardfault_handler+0xe0>)
 8009452:	f011 f851 	bl	801a4f8 <printf>
 8009456:	4639      	mov	r1, r7
 8009458:	4820      	ldr	r0, [pc, #128]	@ (80094dc <hardfault_handler+0xe4>)
 800945a:	f011 f84d 	bl	801a4f8 <printf>
 800945e:	4631      	mov	r1, r6
 8009460:	481f      	ldr	r0, [pc, #124]	@ (80094e0 <hardfault_handler+0xe8>)
 8009462:	f011 f849 	bl	801a4f8 <printf>
 8009466:	9904      	ldr	r1, [sp, #16]
 8009468:	481e      	ldr	r0, [pc, #120]	@ (80094e4 <hardfault_handler+0xec>)
 800946a:	f011 f845 	bl	801a4f8 <printf>
 800946e:	481e      	ldr	r0, [pc, #120]	@ (80094e8 <hardfault_handler+0xf0>)
 8009470:	f011 f842 	bl	801a4f8 <printf>
 8009474:	4621      	mov	r1, r4
 8009476:	481d      	ldr	r0, [pc, #116]	@ (80094ec <hardfault_handler+0xf4>)
 8009478:	f011 f83e 	bl	801a4f8 <printf>
 800947c:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800947e:	481c      	ldr	r0, [pc, #112]	@ (80094f0 <hardfault_handler+0xf8>)
 8009480:	f011 f83a 	bl	801a4f8 <printf>
 8009484:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8009486:	481b      	ldr	r0, [pc, #108]	@ (80094f4 <hardfault_handler+0xfc>)
 8009488:	f011 f836 	bl	801a4f8 <printf>
 800948c:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 800948e:	481a      	ldr	r0, [pc, #104]	@ (80094f8 <hardfault_handler+0x100>)
 8009490:	f011 f832 	bl	801a4f8 <printf>
 8009494:	0622      	lsls	r2, r4, #24
 8009496:	d503      	bpl.n	80094a0 <hardfault_handler+0xa8>
 8009498:	9902      	ldr	r1, [sp, #8]
 800949a:	4818      	ldr	r0, [pc, #96]	@ (80094fc <hardfault_handler+0x104>)
 800949c:	f011 f82c 	bl	801a4f8 <printf>
 80094a0:	0423      	lsls	r3, r4, #16
 80094a2:	d503      	bpl.n	80094ac <hardfault_handler+0xb4>
 80094a4:	9901      	ldr	r1, [sp, #4]
 80094a6:	4816      	ldr	r0, [pc, #88]	@ (8009500 <hardfault_handler+0x108>)
 80094a8:	f011 f826 	bl	801a4f8 <printf>
 80094ac:	4815      	ldr	r0, [pc, #84]	@ (8009504 <hardfault_handler+0x10c>)
 80094ae:	f011 f823 	bl	801a4f8 <printf>
 80094b2:	4815      	ldr	r0, [pc, #84]	@ (8009508 <hardfault_handler+0x110>)
 80094b4:	4641      	mov	r1, r8
 80094b6:	f011 f81f 	bl	801a4f8 <printf>
 80094ba:	e7fe      	b.n	80094ba <hardfault_handler+0xc2>
 80094bc:	e000ed00 	and	lr, r0, r0, lsl #26
 80094c0:	0801aacc 	stmdaeq	r1, {r2, r3, r6, r7, r9, fp, sp, pc}
 80094c4:	0801aad9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, fp, sp, pc}
 80094c8:	0801aae9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, fp, sp, pc}
 80094cc:	0801aaf4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, fp, sp, pc}
 80094d0:	0801aaff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, sp, pc}
 80094d4:	0801ab0a 	stmdaeq	r1, {r1, r3, r8, r9, fp, sp, pc}
 80094d8:	0801ab15 	stmdaeq	r1, {r0, r2, r4, r8, r9, fp, sp, pc}
 80094dc:	0801ab20 	stmdaeq	r1, {r5, r8, r9, fp, sp, pc}
 80094e0:	0801ab2b 	stmdaeq	r1, {r0, r1, r3, r5, r8, r9, fp, sp, pc}
 80094e4:	0801ab36 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, fp, sp, pc}
 80094e8:	0801ab41 	stmdaeq	r1, {r0, r6, r8, r9, fp, sp, pc}
 80094ec:	0801ab4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, fp, sp, pc}
 80094f0:	0801ab59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, fp, sp, pc}
 80094f4:	0801ab65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, fp, sp, pc}
 80094f8:	0801ab71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, fp, sp, pc}
 80094fc:	0801ab7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, fp, sp, pc}
 8009500:	0801ab8a 	stmdaeq	r1, {r1, r3, r7, r8, r9, fp, sp, pc}
 8009504:	0801ab96 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, fp, sp, pc}
 8009508:	0801ab9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, fp, sp, pc}

0800950c <LightSet::GetRefreshRate()>:
 800950c:	2000      	movs	r0, #0
 800950e:	4770      	bx	lr

08009510 <LightSet::FullOn()>:
 8009510:	4770      	bx	lr

08009512 <LightSet::SetDmxStartAddress(unsigned short)>:
 8009512:	2000      	movs	r0, #0
 8009514:	4770      	bx	lr

08009516 <LightSet::GetDmxStartAddress()>:
 8009516:	2001      	movs	r0, #1
 8009518:	4770      	bx	lr

0800951a <LightSet::GetDmxFootprint()>:
 800951a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800951e:	4770      	bx	lr

08009520 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8009520:	2300      	movs	r3, #0
 8009522:	2001      	movs	r0, #1
 8009524:	7093      	strb	r3, [r2, #2]
 8009526:	8010      	strh	r0, [r2, #0]
 8009528:	4770      	bx	lr
	...

0800952c <DmxSend::GetRefreshRate()>:
 800952c:	4b03      	ldr	r3, [pc, #12]	@ (800953c <DmxSend::GetRefreshRate()+0x10>)
 800952e:	4804      	ldr	r0, [pc, #16]	@ (8009540 <DmxSend::GetRefreshRate()+0x14>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	fbb0 f0f3 	udiv	r0, r0, r3
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	2000d404 	andcs	sp, r0, r4, lsl #8
 8009540:	000f4240 	andeq	r4, pc, r0, asr #4

08009544 <DmxSend::~DmxSend()>:
 8009544:	4770      	bx	lr

08009546 <LightSetWith4<64ul>::~LightSetWith4()>:
 8009546:	4770      	bx	lr

08009548 <LightSetWith4<64ul>::Print()>:
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
 800954c:	6840      	ldr	r0, [r0, #4]
 800954e:	b110      	cbz	r0, 8009556 <LightSetWith4<64ul>::Print()+0xe>
 8009550:	6803      	ldr	r3, [r0, #0]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	4798      	blx	r3
 8009556:	68a0      	ldr	r0, [r4, #8]
 8009558:	b120      	cbz	r0, 8009564 <LightSetWith4<64ul>::Print()+0x1c>
 800955a:	6803      	ldr	r3, [r0, #0]
 800955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009562:	4718      	bx	r3
 8009564:	bd10      	pop	{r4, pc}

08009566 <LightSetWith4<64ul>::Start(unsigned long)>:
 8009566:	293f      	cmp	r1, #63	@ 0x3f
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	d804      	bhi.n	8009578 <LightSetWith4<64ul>::Start(unsigned long)+0x12>
 800956e:	6840      	ldr	r0, [r0, #4]
 8009570:	b110      	cbz	r0, 8009578 <LightSetWith4<64ul>::Start(unsigned long)+0x12>
 8009572:	6803      	ldr	r3, [r0, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	4718      	bx	r3
 8009578:	6890      	ldr	r0, [r2, #8]
 800957a:	b120      	cbz	r0, 8009586 <LightSetWith4<64ul>::Start(unsigned long)+0x20>
 800957c:	6802      	ldr	r2, [r0, #0]
 800957e:	f003 0103 	and.w	r1, r3, #3
 8009582:	6892      	ldr	r2, [r2, #8]
 8009584:	4710      	bx	r2
 8009586:	4770      	bx	lr

08009588 <LightSetWith4<64ul>::Stop(unsigned long)>:
 8009588:	293f      	cmp	r1, #63	@ 0x3f
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	d804      	bhi.n	800959a <LightSetWith4<64ul>::Stop(unsigned long)+0x12>
 8009590:	6840      	ldr	r0, [r0, #4]
 8009592:	b110      	cbz	r0, 800959a <LightSetWith4<64ul>::Stop(unsigned long)+0x12>
 8009594:	6803      	ldr	r3, [r0, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4718      	bx	r3
 800959a:	6890      	ldr	r0, [r2, #8]
 800959c:	b120      	cbz	r0, 80095a8 <LightSetWith4<64ul>::Stop(unsigned long)+0x20>
 800959e:	6802      	ldr	r2, [r0, #0]
 80095a0:	f003 0103 	and.w	r1, r3, #3
 80095a4:	68d2      	ldr	r2, [r2, #12]
 80095a6:	4710      	bx	r2
 80095a8:	4770      	bx	lr

080095aa <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 80095aa:	b4f0      	push	{r4, r5, r6, r7}
 80095ac:	293f      	cmp	r1, #63	@ 0x3f
 80095ae:	f89d c010 	ldrb.w	ip, [sp, #16]
 80095b2:	4605      	mov	r5, r0
 80095b4:	460c      	mov	r4, r1
 80095b6:	4616      	mov	r6, r2
 80095b8:	461f      	mov	r7, r3
 80095ba:	d808      	bhi.n	80095ce <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x24>
 80095bc:	6840      	ldr	r0, [r0, #4]
 80095be:	b130      	cbz	r0, 80095ce <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x24>
 80095c0:	6804      	ldr	r4, [r0, #0]
 80095c2:	f8cd c010 	str.w	ip, [sp, #16]
 80095c6:	6924      	ldr	r4, [r4, #16]
 80095c8:	46a4      	mov	ip, r4
 80095ca:	bcf0      	pop	{r4, r5, r6, r7}
 80095cc:	4760      	bx	ip
 80095ce:	68a8      	ldr	r0, [r5, #8]
 80095d0:	b148      	cbz	r0, 80095e6 <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x3c>
 80095d2:	6803      	ldr	r3, [r0, #0]
 80095d4:	f8cd c010 	str.w	ip, [sp, #16]
 80095d8:	691d      	ldr	r5, [r3, #16]
 80095da:	4632      	mov	r2, r6
 80095dc:	463b      	mov	r3, r7
 80095de:	f004 0103 	and.w	r1, r4, #3
 80095e2:	46ac      	mov	ip, r5
 80095e4:	e7f1      	b.n	80095ca <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x20>
 80095e6:	bcf0      	pop	{r4, r5, r6, r7}
 80095e8:	4770      	bx	lr

080095ea <LightSetWith4<64ul>::Sync(unsigned long)>:
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	6840      	ldr	r0, [r0, #4]
 80095f0:	460d      	mov	r5, r1
 80095f2:	b110      	cbz	r0, 80095fa <LightSetWith4<64ul>::Sync(unsigned long)+0x10>
 80095f4:	6803      	ldr	r3, [r0, #0]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	4798      	blx	r3
 80095fa:	68a0      	ldr	r0, [r4, #8]
 80095fc:	b128      	cbz	r0, 800960a <LightSetWith4<64ul>::Sync(unsigned long)+0x20>
 80095fe:	6803      	ldr	r3, [r0, #0]
 8009600:	4629      	mov	r1, r5
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009608:	4718      	bx	r3
 800960a:	bd70      	pop	{r4, r5, r6, pc}

0800960c <LightSetWith4<64ul>::Sync()>:
 800960c:	b510      	push	{r4, lr}
 800960e:	4604      	mov	r4, r0
 8009610:	6840      	ldr	r0, [r0, #4]
 8009612:	b110      	cbz	r0, 800961a <LightSetWith4<64ul>::Sync()+0xe>
 8009614:	6803      	ldr	r3, [r0, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	4798      	blx	r3
 800961a:	68a0      	ldr	r0, [r4, #8]
 800961c:	b120      	cbz	r0, 8009628 <LightSetWith4<64ul>::Sync()+0x1c>
 800961e:	6803      	ldr	r3, [r0, #0]
 8009620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	4718      	bx	r3
 8009628:	bd10      	pop	{r4, pc}

0800962a <LightSetWith4<64ul>::Blackout(bool)>:
 800962a:	b570      	push	{r4, r5, r6, lr}
 800962c:	4604      	mov	r4, r0
 800962e:	6840      	ldr	r0, [r0, #4]
 8009630:	460d      	mov	r5, r1
 8009632:	b110      	cbz	r0, 800963a <LightSetWith4<64ul>::Blackout(bool)+0x10>
 8009634:	6803      	ldr	r3, [r0, #0]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	4798      	blx	r3
 800963a:	68a0      	ldr	r0, [r4, #8]
 800963c:	b128      	cbz	r0, 800964a <LightSetWith4<64ul>::Blackout(bool)+0x20>
 800963e:	6803      	ldr	r3, [r0, #0]
 8009640:	4629      	mov	r1, r5
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009648:	4718      	bx	r3
 800964a:	bd70      	pop	{r4, r5, r6, pc}

0800964c <LightSetWith4<64ul>::SetDmxStartAddress(unsigned short)>:
 800964c:	2000      	movs	r0, #0
 800964e:	4770      	bx	lr

08009650 <LightSetWith4<64ul>::GetDmxStartAddress()>:
 8009650:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009654:	4770      	bx	lr

08009656 <LightSetWith4<64ul>::GetDmxFootprint()>:
 8009656:	2000      	movs	r0, #0
 8009658:	4770      	bx	lr

0800965a <LightSetWith4<64ul>::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800965a:	2000      	movs	r0, #0
 800965c:	4770      	bx	lr
	...

08009660 <DmxSend::Blackout(bool)>:
 8009660:	4b01      	ldr	r3, [pc, #4]	@ (8009668 <DmxSend::Blackout(bool)+0x8>)
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	f005 be48 	b.w	800f2f8 <Dmx::Blackout()>
 8009668:	2000d404 	andcs	sp, r0, r4, lsl #8

0800966c <DmxSend::Print()>:
 800966c:	b510      	push	{r4, lr}
 800966e:	4c10      	ldr	r4, [pc, #64]	@ (80096b0 <DmxSend::Print()+0x44>)
 8009670:	4810      	ldr	r0, [pc, #64]	@ (80096b4 <DmxSend::Print()+0x48>)
 8009672:	f010 ff96 	bl	801a5a2 <puts>
 8009676:	6820      	ldr	r0, [r4, #0]
 8009678:	f005 fd40 	bl	800f0fc <Dmx::GetDmxBreakTime() const>
 800967c:	4601      	mov	r1, r0
 800967e:	480e      	ldr	r0, [pc, #56]	@ (80096b8 <DmxSend::Print()+0x4c>)
 8009680:	f010 ff3a 	bl	801a4f8 <printf>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	f005 fd6f 	bl	800f168 <Dmx::GetDmxMabTime() const>
 800968a:	4601      	mov	r1, r0
 800968c:	480b      	ldr	r0, [pc, #44]	@ (80096bc <DmxSend::Print()+0x50>)
 800968e:	f010 ff33 	bl	801a4f8 <printf>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	490a      	ldr	r1, [pc, #40]	@ (80096c0 <DmxSend::Print()+0x54>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	480a      	ldr	r0, [pc, #40]	@ (80096c4 <DmxSend::Print()+0x58>)
 800969a:	fbb1 f1f3 	udiv	r1, r1, r3
 800969e:	f010 ff2b 	bl	801a4f8 <printf>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	4808      	ldr	r0, [pc, #32]	@ (80096c8 <DmxSend::Print()+0x5c>)
 80096a6:	8a19      	ldrh	r1, [r3, #16]
 80096a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ac:	f010 bf24 	b.w	801a4f8 <printf>
 80096b0:	2000d404 	andcs	sp, r0, r4, lsl #8
 80096b4:	0801abb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, fp, sp, pc}
 80096b8:	0801abbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, fp, sp, pc}
 80096bc:	0801abcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, r9, fp, sp, pc}
 80096c0:	000f4240 	andeq	r4, pc, r0, asr #4
 80096c4:	0801abe3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, fp, sp, pc}
 80096c8:	0801abf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, sp, pc}

080096cc <DmxSend::FullOn()>:
 80096cc:	4b01      	ldr	r3, [pc, #4]	@ (80096d4 <DmxSend::FullOn()+0x8>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	f005 be78 	b.w	800f3c4 <Dmx::FullOn()>
 80096d4:	2000d404 	andcs	sp, r0, r4, lsl #8

080096d8 <DmxSend::Sync(unsigned long)>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4d14      	ldr	r5, [pc, #80]	@ (800972c <DmxSend::Sync(unsigned long)+0x54>)
 80096dc:	f240 6304 	movw	r3, #1540	@ 0x604
 80096e0:	fb03 5301 	mla	r3, r3, r1, r5
 80096e4:	460c      	mov	r4, r1
 80096e6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 80096ea:	b92b      	cbnz	r3, 80096f8 <DmxSend::Sync(unsigned long)+0x20>
 80096ec:	4b10      	ldr	r3, [pc, #64]	@ (8009730 <DmxSend::Sync(unsigned long)+0x58>)
 80096ee:	4a11      	ldr	r2, [pc, #68]	@ (8009734 <DmxSend::Sync(unsigned long)+0x5c>)
 80096f0:	4811      	ldr	r0, [pc, #68]	@ (8009738 <DmxSend::Sync(unsigned long)+0x60>)
 80096f2:	2163      	movs	r1, #99	@ 0x63
 80096f4:	f010 ffe0 	bl	801a6b8 <__assert_func>
 80096f8:	4b10      	ldr	r3, [pc, #64]	@ (800973c <DmxSend::Sync(unsigned long)+0x64>)
 80096fa:	2c21      	cmp	r4, #33	@ 0x21
 80096fc:	681e      	ldr	r6, [r3, #0]
 80096fe:	d905      	bls.n	800970c <DmxSend::Sync(unsigned long)+0x34>
 8009700:	4b0f      	ldr	r3, [pc, #60]	@ (8009740 <DmxSend::Sync(unsigned long)+0x68>)
 8009702:	4a10      	ldr	r2, [pc, #64]	@ (8009744 <DmxSend::Sync(unsigned long)+0x6c>)
 8009704:	4810      	ldr	r0, [pc, #64]	@ (8009748 <DmxSend::Sync(unsigned long)+0x70>)
 8009706:	21b5      	movs	r1, #181	@ 0xb5
 8009708:	f010 ffd6 	bl	801a6b8 <__assert_func>
 800970c:	f240 6204 	movw	r2, #1540	@ 0x604
 8009710:	4362      	muls	r2, r4
 8009712:	18ab      	adds	r3, r5, r2
 8009714:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009718:	442a      	add	r2, r5
 800971a:	4621      	mov	r1, r4
 800971c:	4630      	mov	r0, r6
 800971e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 8009722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009726:	f005 bd97 	b.w	800f258 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)>
 800972a:	bf00      	nop
 800972c:	20000080 	andcs	r0, r0, r0, lsl #1
 8009730:	0801ac0b 	stmdaeq	r1, {r0, r1, r3, sl, fp, sp, pc}
 8009734:	0801ac36 	stmdaeq	r1, {r1, r2, r4, r5, sl, fp, sp, pc}
 8009738:	0801ac3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, sl, fp, sp, pc}
 800973c:	2000d404 	andcs	sp, r0, r4, lsl #8
 8009740:	0801ac58 	stmdaeq	r1, {r3, r4, r6, sl, fp, sp, pc}
 8009744:	0801ac6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, sl, fp, sp, pc}
 8009748:	0801ac73 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, fp, sp, pc}

0800974c <DmxSend::~DmxSend()>:
 800974c:	b510      	push	{r4, lr}
 800974e:	2108      	movs	r1, #8
 8009750:	4604      	mov	r4, r0
 8009752:	f011 f925 	bl	801a9a0 <operator delete(void*, unsigned int)>
 8009756:	4620      	mov	r0, r4
 8009758:	bd10      	pop	{r4, pc}

0800975a <LightSetWith4<64ul>::~LightSetWith4()>:
 800975a:	b510      	push	{r4, lr}
 800975c:	210c      	movs	r1, #12
 800975e:	4604      	mov	r4, r0
 8009760:	f011 f91e 	bl	801a9a0 <operator delete(void*, unsigned int)>
 8009764:	4620      	mov	r0, r4
 8009766:	bd10      	pop	{r4, pc}

08009768 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	2907      	cmp	r1, #7
 800976c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8009770:	460c      	mov	r4, r1
 8009772:	4615      	mov	r5, r2
 8009774:	461e      	mov	r6, r3
 8009776:	d905      	bls.n	8009784 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1c>
 8009778:	4b11      	ldr	r3, [pc, #68]	@ (80097c0 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x58>)
 800977a:	4a12      	ldr	r2, [pc, #72]	@ (80097c4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5c>)
 800977c:	4812      	ldr	r0, [pc, #72]	@ (80097c8 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x60>)
 800977e:	2157      	movs	r1, #87	@ 0x57
 8009780:	f010 ff9a 	bl	801a6b8 <__assert_func>
 8009784:	b92d      	cbnz	r5, 8009792 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 8009786:	4b11      	ldr	r3, [pc, #68]	@ (80097cc <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x64>)
 8009788:	4a0e      	ldr	r2, [pc, #56]	@ (80097c4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5c>)
 800978a:	480f      	ldr	r0, [pc, #60]	@ (80097c8 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x60>)
 800978c:	2158      	movs	r1, #88	@ 0x58
 800978e:	f010 ff93 	bl	801a6b8 <__assert_func>
 8009792:	b92e      	cbnz	r6, 80097a0 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x38>
 8009794:	4b0e      	ldr	r3, [pc, #56]	@ (80097d0 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x68>)
 8009796:	4a0b      	ldr	r2, [pc, #44]	@ (80097c4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5c>)
 8009798:	480b      	ldr	r0, [pc, #44]	@ (80097c8 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x60>)
 800979a:	2159      	movs	r1, #89	@ 0x59
 800979c:	f010 ff8c 	bl	801a6b8 <__assert_func>
 80097a0:	b167      	cbz	r7, 80097bc <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x54>
 80097a2:	4f0c      	ldr	r7, [pc, #48]	@ (80097d4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x6c>)
 80097a4:	4621      	mov	r1, r4
 80097a6:	6838      	ldr	r0, [r7, #0]
 80097a8:	4633      	mov	r3, r6
 80097aa:	462a      	mov	r2, r5
 80097ac:	f005 fd54 	bl	800f258 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)>
 80097b0:	6838      	ldr	r0, [r7, #0]
 80097b2:	4621      	mov	r1, r4
 80097b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097b8:	f005 be6c 	b.w	800f494 <Dmx::StartOutput(unsigned long)>
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097be:	bf00      	nop
 80097c0:	0801ac9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, pc}
 80097c4:	0801acb0 	stmdaeq	r1, {r4, r5, r7, sl, fp, sp, pc}
 80097c8:	0801ac3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, sl, fp, sp, pc}
 80097cc:	0801acb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, sp, pc}
 80097d0:	0801acc9 	stmdaeq	r1, {r0, r3, r6, r7, sl, fp, sp, pc}
 80097d4:	2000d404 	andcs	sp, r0, r4, lsl #8

080097d8 <DmxSend::Stop(unsigned long)>:
 80097d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097da:	2343      	movs	r3, #67	@ 0x43
 80097dc:	460c      	mov	r4, r1
 80097de:	4a1c      	ldr	r2, [pc, #112]	@ (8009850 <DmxSend::Stop(unsigned long)+0x78>)
 80097e0:	491c      	ldr	r1, [pc, #112]	@ (8009854 <DmxSend::Stop(unsigned long)+0x7c>)
 80097e2:	4605      	mov	r5, r0
 80097e4:	481c      	ldr	r0, [pc, #112]	@ (8009858 <DmxSend::Stop(unsigned long)+0x80>)
 80097e6:	f010 fe87 	bl	801a4f8 <printf>
 80097ea:	b2e2      	uxtb	r2, r4
 80097ec:	2301      	movs	r3, #1
 80097ee:	4093      	lsls	r3, r2
 80097f0:	792a      	ldrb	r2, [r5, #4]
 80097f2:	4917      	ldr	r1, [pc, #92]	@ (8009850 <DmxSend::Stop(unsigned long)+0x78>)
 80097f4:	4819      	ldr	r0, [pc, #100]	@ (800985c <DmxSend::Stop(unsigned long)+0x84>)
 80097f6:	4393      	bics	r3, r2
 80097f8:	bf0c      	ite	eq
 80097fa:	2301      	moveq	r3, #1
 80097fc:	2300      	movne	r3, #0
 80097fe:	e9cd 4300 	strd	r4, r3, [sp]
 8009802:	4a14      	ldr	r2, [pc, #80]	@ (8009854 <DmxSend::Stop(unsigned long)+0x7c>)
 8009804:	2344      	movs	r3, #68	@ 0x44
 8009806:	f010 fe77 	bl	801a4f8 <printf>
 800980a:	2c07      	cmp	r4, #7
 800980c:	d905      	bls.n	800981a <DmxSend::Stop(unsigned long)+0x42>
 800980e:	4b14      	ldr	r3, [pc, #80]	@ (8009860 <DmxSend::Stop(unsigned long)+0x88>)
 8009810:	4a0f      	ldr	r2, [pc, #60]	@ (8009850 <DmxSend::Stop(unsigned long)+0x78>)
 8009812:	4810      	ldr	r0, [pc, #64]	@ (8009854 <DmxSend::Stop(unsigned long)+0x7c>)
 8009814:	2146      	movs	r1, #70	@ 0x46
 8009816:	f010 ff4f 	bl	801a6b8 <__assert_func>
 800981a:	792b      	ldrb	r3, [r5, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	40a2      	lsls	r2, r4
 8009820:	ea32 0103 	bics.w	r1, r2, r3
 8009824:	d008      	beq.n	8009838 <DmxSend::Stop(unsigned long)+0x60>
 8009826:	2349      	movs	r3, #73	@ 0x49
 8009828:	4a09      	ldr	r2, [pc, #36]	@ (8009850 <DmxSend::Stop(unsigned long)+0x78>)
 800982a:	490a      	ldr	r1, [pc, #40]	@ (8009854 <DmxSend::Stop(unsigned long)+0x7c>)
 800982c:	480d      	ldr	r0, [pc, #52]	@ (8009864 <DmxSend::Stop(unsigned long)+0x8c>)
 800982e:	b003      	add	sp, #12
 8009830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009834:	f010 be60 	b.w	801a4f8 <printf>
 8009838:	ea23 0302 	bic.w	r3, r3, r2
 800983c:	480a      	ldr	r0, [pc, #40]	@ (8009868 <DmxSend::Stop(unsigned long)+0x90>)
 800983e:	712b      	strb	r3, [r5, #4]
 8009840:	2300      	movs	r3, #0
 8009842:	461a      	mov	r2, r3
 8009844:	6800      	ldr	r0, [r0, #0]
 8009846:	4621      	mov	r1, r4
 8009848:	f005 fb4a 	bl	800eee0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 800984c:	2353      	movs	r3, #83	@ 0x53
 800984e:	e7eb      	b.n	8009828 <DmxSend::Stop(unsigned long)+0x50>
 8009850:	0801acd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, sl, fp, sp, pc}
 8009854:	0801ac3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, sl, fp, sp, pc}
 8009858:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 800985c:	0801ace9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, fp, sp, pc}
 8009860:	0801ac9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, pc}
 8009864:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}
 8009868:	2000d404 	andcs	sp, r0, r4, lsl #8

0800986c <DmxSend::Start(unsigned long)>:
 800986c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800986e:	232d      	movs	r3, #45	@ 0x2d
 8009870:	460c      	mov	r4, r1
 8009872:	4a19      	ldr	r2, [pc, #100]	@ (80098d8 <DmxSend::Start(unsigned long)+0x6c>)
 8009874:	4919      	ldr	r1, [pc, #100]	@ (80098dc <DmxSend::Start(unsigned long)+0x70>)
 8009876:	4605      	mov	r5, r0
 8009878:	4819      	ldr	r0, [pc, #100]	@ (80098e0 <DmxSend::Start(unsigned long)+0x74>)
 800987a:	f010 fe3d 	bl	801a4f8 <printf>
 800987e:	4a17      	ldr	r2, [pc, #92]	@ (80098dc <DmxSend::Start(unsigned long)+0x70>)
 8009880:	4915      	ldr	r1, [pc, #84]	@ (80098d8 <DmxSend::Start(unsigned long)+0x6c>)
 8009882:	4818      	ldr	r0, [pc, #96]	@ (80098e4 <DmxSend::Start(unsigned long)+0x78>)
 8009884:	9400      	str	r4, [sp, #0]
 8009886:	232e      	movs	r3, #46	@ 0x2e
 8009888:	f010 fe36 	bl	801a4f8 <printf>
 800988c:	2c07      	cmp	r4, #7
 800988e:	d905      	bls.n	800989c <DmxSend::Start(unsigned long)+0x30>
 8009890:	4b15      	ldr	r3, [pc, #84]	@ (80098e8 <DmxSend::Start(unsigned long)+0x7c>)
 8009892:	4a11      	ldr	r2, [pc, #68]	@ (80098d8 <DmxSend::Start(unsigned long)+0x6c>)
 8009894:	4811      	ldr	r0, [pc, #68]	@ (80098dc <DmxSend::Start(unsigned long)+0x70>)
 8009896:	2130      	movs	r1, #48	@ 0x30
 8009898:	f010 ff0e 	bl	801a6b8 <__assert_func>
 800989c:	792a      	ldrb	r2, [r5, #4]
 800989e:	2301      	movs	r3, #1
 80098a0:	fa03 f104 	lsl.w	r1, r3, r4
 80098a4:	ea31 0002 	bics.w	r0, r1, r2
 80098a8:	d108      	bne.n	80098bc <DmxSend::Start(unsigned long)+0x50>
 80098aa:	2333      	movs	r3, #51	@ 0x33
 80098ac:	4a0a      	ldr	r2, [pc, #40]	@ (80098d8 <DmxSend::Start(unsigned long)+0x6c>)
 80098ae:	490b      	ldr	r1, [pc, #44]	@ (80098dc <DmxSend::Start(unsigned long)+0x70>)
 80098b0:	480e      	ldr	r0, [pc, #56]	@ (80098ec <DmxSend::Start(unsigned long)+0x80>)
 80098b2:	b003      	add	sp, #12
 80098b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098b8:	f010 be1e 	b.w	801a4f8 <printf>
 80098bc:	430a      	orrs	r2, r1
 80098be:	712a      	strb	r2, [r5, #4]
 80098c0:	4d0b      	ldr	r5, [pc, #44]	@ (80098f0 <DmxSend::Start(unsigned long)+0x84>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	6828      	ldr	r0, [r5, #0]
 80098c6:	4621      	mov	r1, r4
 80098c8:	f005 fb0a 	bl	800eee0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 80098cc:	6828      	ldr	r0, [r5, #0]
 80098ce:	4621      	mov	r1, r4
 80098d0:	f005 fcb8 	bl	800f244 <Dmx::GetOutputStyle(unsigned long) const>
 80098d4:	233f      	movs	r3, #63	@ 0x3f
 80098d6:	e7e9      	b.n	80098ac <DmxSend::Start(unsigned long)+0x40>
 80098d8:	0801ad1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, sl, fp, sp, pc}
 80098dc:	0801ac3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, sl, fp, sp, pc}
 80098e0:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 80098e4:	0801ad24 	stmdaeq	r1, {r2, r5, r8, sl, fp, sp, pc}
 80098e8:	0801ac9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, pc}
 80098ec:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}
 80098f0:	2000d404 	andcs	sp, r0, r4, lsl #8

080098f4 <DmxSend::Sync()>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4b10      	ldr	r3, [pc, #64]	@ (8009938 <DmxSend::Sync()+0x44>)
 80098f8:	4d10      	ldr	r5, [pc, #64]	@ (800993c <DmxSend::Sync()+0x48>)
 80098fa:	4604      	mov	r4, r0
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	f005 fde3 	bl	800f4c8 <Dmx::Sync()>
 8009902:	f8d5 3600 	ldr.w	r3, [r5, #1536]	@ 0x600
 8009906:	b14b      	cbz	r3, 800991c <DmxSend::Sync()+0x28>
 8009908:	2300      	movs	r3, #0
 800990a:	f8c5 3600 	str.w	r3, [r5, #1536]	@ 0x600
 800990e:	7921      	ldrb	r1, [r4, #4]
 8009910:	f011 0101 	ands.w	r1, r1, #1
 8009914:	d102      	bne.n	800991c <DmxSend::Sync()+0x28>
 8009916:	4620      	mov	r0, r4
 8009918:	f7ff ffa8 	bl	800986c <DmxSend::Start(unsigned long)>
 800991c:	f8d5 3c04 	ldr.w	r3, [r5, #3076]	@ 0xc04
 8009920:	b14b      	cbz	r3, 8009936 <DmxSend::Sync()+0x42>
 8009922:	2300      	movs	r3, #0
 8009924:	f8c5 3c04 	str.w	r3, [r5, #3076]	@ 0xc04
 8009928:	7923      	ldrb	r3, [r4, #4]
 800992a:	079b      	lsls	r3, r3, #30
 800992c:	d403      	bmi.n	8009936 <DmxSend::Sync()+0x42>
 800992e:	2101      	movs	r1, #1
 8009930:	4620      	mov	r0, r4
 8009932:	f7ff ff9b 	bl	800986c <DmxSend::Start(unsigned long)>
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	2000d404 	andcs	sp, r0, r4, lsl #8
 800993c:	20000080 	andcs	r0, r0, r0, lsl #1

08009940 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>:
 8009940:	b110      	cbz	r0, 8009948 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]+0x8>
 8009942:	6803      	ldr	r3, [r0, #0]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	4718      	bx	r3
 8009948:	4770      	bx	lr

0800994a <Display::PutChar(int) [clone .isra.0]>:
 800994a:	b110      	cbz	r0, 8009952 <Display::PutChar(int) [clone .isra.0]+0x8>
 800994c:	6803      	ldr	r3, [r0, #0]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	4718      	bx	r3
 8009952:	4770      	bx	lr

08009954 <net::dhcp_run()>:
 8009954:	b510      	push	{r4, lr}
 8009956:	4b11      	ldr	r3, [pc, #68]	@ (800999c <net::dhcp_run()+0x48>)
 8009958:	6a1c      	ldr	r4, [r3, #32]
 800995a:	b086      	sub	sp, #24
 800995c:	b1cc      	cbz	r4, 8009992 <net::dhcp_run()+0x3e>
 800995e:	a904      	add	r1, sp, #16
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	f10d 030e 	add.w	r3, sp, #14
 8009966:	aa05      	add	r2, sp, #20
 8009968:	f00b fbfa 	bl	8015160 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800996c:	4601      	mov	r1, r0
 800996e:	b180      	cbz	r0, 8009992 <net::dhcp_run()+0x3e>
 8009970:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009974:	2b43      	cmp	r3, #67	@ 0x43
 8009976:	d10c      	bne.n	8009992 <net::dhcp_run()+0x3e>
 8009978:	9804      	ldr	r0, [sp, #16]
 800997a:	6862      	ldr	r2, [r4, #4]
 800997c:	6843      	ldr	r3, [r0, #4]
 800997e:	4293      	cmp	r3, r2
 8009980:	d009      	beq.n	8009996 <net::dhcp_run()+0x42>
 8009982:	e9cd 3200 	strd	r3, r2, [sp]
 8009986:	4906      	ldr	r1, [pc, #24]	@ (80099a0 <net::dhcp_run()+0x4c>)
 8009988:	4a06      	ldr	r2, [pc, #24]	@ (80099a4 <net::dhcp_run()+0x50>)
 800998a:	4807      	ldr	r0, [pc, #28]	@ (80099a8 <net::dhcp_run()+0x54>)
 800998c:	2379      	movs	r3, #121	@ 0x79
 800998e:	f010 fdb3 	bl	801a4f8 <printf>
 8009992:	b006      	add	sp, #24
 8009994:	bd10      	pop	{r4, pc}
 8009996:	f00a fe6d 	bl	8014674 <net::dhcp_process(net::dhcp::Message const*, unsigned long)>
 800999a:	e7fa      	b.n	8009992 <net::dhcp_run()+0x3e>
 800999c:	2000e220 	andcs	lr, r0, r0, lsr #4
 80099a0:	0801ad67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, fp, sp, pc}
 80099a4:	0801ad45 	stmdaeq	r1, {r0, r2, r6, r8, sl, fp, sp, pc}
 80099a8:	0801ad70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, sp, pc}

080099ac <Display::Printf(unsigned long, char const*, ...)>:
 80099ac:	b40c      	push	{r2, r3}
 80099ae:	b570      	push	{r4, r5, r6, lr}
 80099b0:	6984      	ldr	r4, [r0, #24]
 80099b2:	b08a      	sub	sp, #40	@ 0x28
 80099b4:	4605      	mov	r5, r0
 80099b6:	460e      	mov	r6, r1
 80099b8:	b174      	cbz	r4, 80099d8 <Display::Printf(unsigned long, char const*, ...)+0x2c>
 80099ba:	ab0f      	add	r3, sp, #60	@ 0x3c
 80099bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	2120      	movs	r1, #32
 80099c2:	a802      	add	r0, sp, #8
 80099c4:	f010 fdd8 	bl	801a578 <vsnprintf>
 80099c8:	4604      	mov	r4, r0
 80099ca:	69a8      	ldr	r0, [r5, #24]
 80099cc:	6803      	ldr	r3, [r0, #0]
 80099ce:	aa02      	add	r2, sp, #8
 80099d0:	69dd      	ldr	r5, [r3, #28]
 80099d2:	4631      	mov	r1, r6
 80099d4:	4623      	mov	r3, r4
 80099d6:	47a8      	blx	r5
 80099d8:	4620      	mov	r0, r4
 80099da:	b00a      	add	sp, #40	@ 0x28
 80099dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099e0:	b002      	add	sp, #8
 80099e2:	4770      	bx	lr

080099e4 <Display::TextStatus(char const*)>:
 80099e4:	6983      	ldr	r3, [r0, #24]
 80099e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d038      	beq.n	8009a64 <Display::TextStatus(char const*)+0x80>
 80099f2:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
 80099f6:	b92e      	cbnz	r6, 8009a04 <Display::TextStatus(char const*)+0x20>
 80099f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a68 <Display::TextStatus(char const*)+0x84>)
 80099fa:	4a1c      	ldr	r2, [pc, #112]	@ (8009a6c <Display::TextStatus(char const*)+0x88>)
 80099fc:	481c      	ldr	r0, [pc, #112]	@ (8009a70 <Display::TextStatus(char const*)+0x8c>)
 80099fe:	21ae      	movs	r1, #174	@ 0xae
 8009a00:	f010 fe5a 	bl	801a6b8 <__assert_func>
 8009a04:	b92f      	cbnz	r7, 8009a12 <Display::TextStatus(char const*)+0x2e>
 8009a06:	4b1b      	ldr	r3, [pc, #108]	@ (8009a74 <Display::TextStatus(char const*)+0x90>)
 8009a08:	4a18      	ldr	r2, [pc, #96]	@ (8009a6c <Display::TextStatus(char const*)+0x88>)
 8009a0a:	4819      	ldr	r0, [pc, #100]	@ (8009a70 <Display::TextStatus(char const*)+0x8c>)
 8009a0c:	21af      	movs	r1, #175	@ 0xaf
 8009a0e:	f010 fe53 	bl	801a6b8 <__assert_func>
 8009a12:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 8009a16:	69a0      	ldr	r0, [r4, #24]
 8009a18:	464a      	mov	r2, r9
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	f7ff ff90 	bl	8009940 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009a20:	f04f 0800 	mov.w	r8, #0
 8009a24:	3e01      	subs	r6, #1
 8009a26:	4546      	cmp	r6, r8
 8009a28:	69a0      	ldr	r0, [r4, #24]
 8009a2a:	d815      	bhi.n	8009a58 <Display::TextStatus(char const*)+0x74>
 8009a2c:	464a      	mov	r2, r9
 8009a2e:	2100      	movs	r1, #0
 8009a30:	f7ff ff86 	bl	8009940 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009a34:	69a0      	ldr	r0, [r4, #24]
 8009a36:	b1a8      	cbz	r0, 8009a64 <Display::TextStatus(char const*)+0x80>
 8009a38:	6841      	ldr	r1, [r0, #4]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	5cea      	ldrb	r2, [r5, r3]
 8009a3e:	b11a      	cbz	r2, 8009a48 <Display::TextStatus(char const*)+0x64>
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	4299      	cmp	r1, r3
 8009a44:	4613      	mov	r3, r2
 8009a46:	d8f9      	bhi.n	8009a3c <Display::TextStatus(char const*)+0x58>
 8009a48:	6802      	ldr	r2, [r0, #0]
 8009a4a:	69d4      	ldr	r4, [r2, #28]
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	462a      	mov	r2, r5
 8009a50:	46a4      	mov	ip, r4
 8009a52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a56:	4760      	bx	ip
 8009a58:	2120      	movs	r1, #32
 8009a5a:	f7ff ff76 	bl	800994a <Display::PutChar(int) [clone .isra.0]>
 8009a5e:	f108 0801 	add.w	r8, r8, #1
 8009a62:	e7e0      	b.n	8009a26 <Display::TextStatus(char const*)+0x42>
 8009a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a68:	0801ada6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, fp, sp, pc}
 8009a6c:	0801adb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, sp, pc}
 8009a70:	0801adbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, sl, fp, sp, pc}
 8009a74:	0801ade4 	stmdaeq	r1, {r2, r5, r6, r7, r8, sl, fp, sp, pc}

08009a78 <Display::TextStatus(char const*, unsigned long)>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4614      	mov	r4, r2
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	f7ff ffb1 	bl	80099e4 <Display::TextStatus(char const*)>
 8009a82:	1c63      	adds	r3, r4, #1
 8009a84:	d005      	beq.n	8009a92 <Display::TextStatus(char const*, unsigned long)+0x1a>
 8009a86:	4629      	mov	r1, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a8e:	f00e ba6f 	b.w	8017f70 <console_status>
 8009a92:	bd38      	pop	{r3, r4, r5, pc}

08009a94 <Display::SetSleep(bool)>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4604      	mov	r4, r0
 8009a98:	6980      	ldr	r0, [r0, #24]
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	b138      	cbz	r0, 8009aae <Display::SetSleep(bool)+0x1a>
 8009a9e:	6803      	ldr	r3, [r0, #0]
 8009aa0:	7561      	strb	r1, [r4, #21]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa4:	4798      	blx	r3
 8009aa6:	b915      	cbnz	r5, 8009aae <Display::SetSleep(bool)+0x1a>
 8009aa8:	4b01      	ldr	r3, [pc, #4]	@ (8009ab0 <Display::SetSleep(bool)+0x1c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6063      	str	r3, [r4, #4]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	2001bcc0 	andcs	fp, r1, r0, asr #25

08009ab4 <E131Bridge::Run()>:
 8009ab4:	b513      	push	{r0, r1, r4, lr}
 8009ab6:	f500 6247 	add.w	r2, r0, #3184	@ 0xc70
 8009aba:	4604      	mov	r4, r0
 8009abc:	f10d 0306 	add.w	r3, sp, #6
 8009ac0:	f600 416c 	addw	r1, r0, #3180	@ 0xc6c
 8009ac4:	6800      	ldr	r0, [r0, #0]
 8009ac6:	f00b fb4b 	bl	8015160 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 8009aca:	4b23      	ldr	r3, [pc, #140]	@ (8009b58 <E131Bridge::Run()+0xa4>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	bb90      	cbnz	r0, 8009b38 <E131Bridge::Run()+0x84>
 8009ad2:	7fe2      	ldrb	r2, [r4, #31]
 8009ad4:	b172      	cbz	r2, 8009af4 <E131Bridge::Run()+0x40>
 8009ad6:	68a2      	ldr	r2, [r4, #8]
 8009ad8:	1a9b      	subs	r3, r3, r2
 8009ada:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d921      	bls.n	8009b26 <E131Bridge::Run()+0x72>
 8009ae2:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	@ 0xc74
 8009ae6:	b9ab      	cbnz	r3, 8009b14 <E131Bridge::Run()+0x60>
 8009ae8:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8009aec:	f023 0302 	bic.w	r3, r3, #2
 8009af0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8009af4:	f894 3c68 	ldrb.w	r3, [r4, #3176]	@ 0xc68
 8009af8:	b153      	cbz	r3, 8009b10 <E131Bridge::Run()+0x5c>
 8009afa:	4b18      	ldr	r3, [pc, #96]	@ (8009b5c <E131Bridge::Run()+0xa8>)
 8009afc:	6818      	ldr	r0, [r3, #0]
 8009afe:	6943      	ldr	r3, [r0, #20]
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d005      	beq.n	8009b10 <E131Bridge::Run()+0x5c>
 8009b04:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8009b08:	b1a3      	cbz	r3, 8009b34 <E131Bridge::Run()+0x80>
 8009b0a:	2103      	movs	r1, #3
 8009b0c:	f00d ffae 	bl	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 8009b10:	b002      	add	sp, #8
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e5      	bne.n	8009ae8 <E131Bridge::Run()+0x34>
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4620      	mov	r0, r4
 8009b22:	f002 fab1 	bl	800c088 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 8009b26:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b30:	d3e0      	bcc.n	8009af4 <E131Bridge::Run()+0x40>
 8009b32:	e7d9      	b.n	8009ae8 <E131Bridge::Run()+0x34>
 8009b34:	2102      	movs	r1, #2
 8009b36:	e7e9      	b.n	8009b0c <E131Bridge::Run()+0x58>
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f002 fe65 	bl	800c808 <E131Bridge::IsValidRoot()>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0e6      	beq.n	8009b10 <E131Bridge::Run()+0x5c>
 8009b42:	4620      	mov	r0, r4
 8009b44:	f002 fe88 	bl	800c858 <E131Bridge::Process()>
 8009b48:	6862      	ldr	r2, [r4, #4]
 8009b4a:	68e3      	ldr	r3, [r4, #12]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009b50:	bf88      	it	hi
 8009b52:	60e2      	strhi	r2, [r4, #12]
 8009b54:	e7dc      	b.n	8009b10 <E131Bridge::Run()+0x5c>
 8009b56:	bf00      	nop
 8009b58:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8009b5c:	2000e3d0 	ldrdcs	lr, [r0], -r0

08009b60 <hardware::ledblink::display(unsigned long)>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d0d      	ldr	r5, [pc, #52]	@ (8009b98 <hardware::ledblink::display(unsigned long)+0x38>)
 8009b64:	682a      	ldr	r2, [r5, #0]
 8009b66:	4603      	mov	r3, r0
 8009b68:	6990      	ldr	r0, [r2, #24]
 8009b6a:	b1a0      	cbz	r0, 8009b96 <hardware::ledblink::display(unsigned long)+0x36>
 8009b6c:	2b05      	cmp	r3, #5
 8009b6e:	bf9c      	itt	ls
 8009b70:	4a0a      	ldrls	r2, [pc, #40]	@ (8009b9c <hardware::ledblink::display(unsigned long)+0x3c>)
 8009b72:	5cd4      	ldrbls	r4, [r2, r3]
 8009b74:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009b78:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8009b7c:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 8009b80:	bf88      	it	hi
 8009b82:	2455      	movhi	r4, #85	@ 0x55
 8009b84:	f7ff fedc 	bl	8009940 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	6998      	ldr	r0, [r3, #24]
 8009b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b92:	f7ff beda 	b.w	800994a <Display::PutChar(int) [clone .isra.0]>
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	2000e2e4 	andcs	lr, r0, r4, ror #5
 8009b9c:	0801bedc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, pc}

08009ba0 <PixelConfiguration::Get()>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	4c06      	ldr	r4, [pc, #24]	@ (8009bbc <PixelConfiguration::Get()+0x1c>)
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	b933      	cbnz	r3, 8009bb6 <PixelConfiguration::Get()+0x16>
 8009ba8:	4b05      	ldr	r3, [pc, #20]	@ (8009bc0 <PixelConfiguration::Get()+0x20>)
 8009baa:	4a06      	ldr	r2, [pc, #24]	@ (8009bc4 <PixelConfiguration::Get()+0x24>)
 8009bac:	4806      	ldr	r0, [pc, #24]	@ (8009bc8 <PixelConfiguration::Get()+0x28>)
 8009bae:	f240 110d 	movw	r1, #269	@ 0x10d
 8009bb2:	f010 fd81 	bl	801a6b8 <__assert_func>
 8009bb6:	6820      	ldr	r0, [r4, #0]
 8009bb8:	bd10      	pop	{r4, pc}
 8009bba:	bf00      	nop
 8009bbc:	2000007c 	andcs	r0, r0, ip, ror r0
 8009bc0:	0801adef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, fp, sp, pc}
 8009bc4:	0801ae02 	stmdaeq	r1, {r1, r9, sl, fp, sp, pc}
 8009bc8:	0801ae06 	stmdaeq	r1, {r1, r2, r9, sl, fp, sp, pc}

08009bcc <PixelDmxConfiguration::PixelDmxConfiguration()>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	2203      	movs	r2, #3
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	e9c4 2202 	strd	r2, r2, [r4, #8]
 8009bd6:	4a20      	ldr	r2, [pc, #128]	@ (8009c58 <PixelDmxConfiguration::PixelDmxConfiguration()+0x8c>)
 8009bd8:	4920      	ldr	r1, [pc, #128]	@ (8009c5c <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009bda:	2506      	movs	r5, #6
 8009bdc:	e9c4 5204 	strd	r5, r2, [r4, #16]
 8009be0:	2300      	movs	r3, #0
 8009be2:	20aa      	movs	r0, #170	@ 0xaa
 8009be4:	4d1e      	ldr	r5, [pc, #120]	@ (8009c60 <PixelDmxConfiguration::PixelDmxConfiguration()+0x94>)
 8009be6:	61a3      	str	r3, [r4, #24]
 8009be8:	e9c4 0300 	strd	r0, r3, [r4]
 8009bec:	4a1d      	ldr	r2, [pc, #116]	@ (8009c64 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009bee:	481e      	ldr	r0, [pc, #120]	@ (8009c68 <PixelDmxConfiguration::PixelDmxConfiguration()+0x9c>)
 8009bf0:	2332      	movs	r3, #50	@ 0x32
 8009bf2:	f010 fc81 	bl	801a4f8 <printf>
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	b12b      	cbz	r3, 8009c06 <PixelDmxConfiguration::PixelDmxConfiguration()+0x3a>
 8009bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8009c6c <PixelDmxConfiguration::PixelDmxConfiguration()+0xa0>)
 8009bfc:	4a19      	ldr	r2, [pc, #100]	@ (8009c64 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009bfe:	4817      	ldr	r0, [pc, #92]	@ (8009c5c <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009c00:	2134      	movs	r1, #52	@ 0x34
 8009c02:	f010 fd59 	bl	801a6b8 <__assert_func>
 8009c06:	4a17      	ldr	r2, [pc, #92]	@ (8009c64 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009c08:	4914      	ldr	r1, [pc, #80]	@ (8009c5c <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009c0a:	4819      	ldr	r0, [pc, #100]	@ (8009c70 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa4>)
 8009c0c:	602c      	str	r4, [r5, #0]
 8009c0e:	2337      	movs	r3, #55	@ 0x37
 8009c10:	f010 fc72 	bl	801a4f8 <printf>
 8009c14:	4d17      	ldr	r5, [pc, #92]	@ (8009c74 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa8>)
 8009c16:	4814      	ldr	r0, [pc, #80]	@ (8009c68 <PixelDmxConfiguration::PixelDmxConfiguration()+0x9c>)
 8009c18:	2301      	movs	r3, #1
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	21aa      	movs	r1, #170	@ 0xaa
 8009c1e:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
 8009c22:	e9c4 320b 	strd	r3, r2, [r4, #44]	@ 0x2c
 8009c26:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009c2a:	4a13      	ldr	r2, [pc, #76]	@ (8009c78 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009c2c:	4913      	ldr	r1, [pc, #76]	@ (8009c7c <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009c2e:	2336      	movs	r3, #54	@ 0x36
 8009c30:	f010 fc62 	bl	801a4f8 <printf>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b12b      	cbz	r3, 8009c44 <PixelDmxConfiguration::PixelDmxConfiguration()+0x78>
 8009c38:	4b0c      	ldr	r3, [pc, #48]	@ (8009c6c <PixelDmxConfiguration::PixelDmxConfiguration()+0xa0>)
 8009c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8009c78 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009c3c:	480f      	ldr	r0, [pc, #60]	@ (8009c7c <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009c3e:	2138      	movs	r1, #56	@ 0x38
 8009c40:	f010 fd3a 	bl	801a6b8 <__assert_func>
 8009c44:	4a0c      	ldr	r2, [pc, #48]	@ (8009c78 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009c46:	490d      	ldr	r1, [pc, #52]	@ (8009c7c <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009c48:	4809      	ldr	r0, [pc, #36]	@ (8009c70 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa4>)
 8009c4a:	602c      	str	r4, [r5, #0]
 8009c4c:	233b      	movs	r3, #59	@ 0x3b
 8009c4e:	f010 fc53 	bl	801a4f8 <printf>
 8009c52:	4620      	mov	r0, r4
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	bf00      	nop
 8009c58:	ff000001 			@ <UNDEFINED> instruction: 0xff000001
 8009c5c:	0801ae06 	stmdaeq	r1, {r1, r2, r9, sl, fp, sp, pc}
 8009c60:	2000007c 	andcs	r0, r0, ip, ror r0
 8009c64:	0801ae31 	stmdaeq	r1, {r0, r4, r5, r9, sl, fp, sp, pc}
 8009c68:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 8009c6c:	0801ae44 	stmdaeq	r1, {r2, r6, r9, sl, fp, sp, pc}
 8009c70:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}
 8009c74:	20000078 	andcs	r0, r0, r8, ror r0
 8009c78:	0801ae57 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, sl, fp, sp, pc}
 8009c7c:	0801ae6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, sl, fp, sp, pc}

08009c80 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	4c56      	ldr	r4, [pc, #344]	@ (8009de0 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x160>)
 8009c86:	b085      	sub	sp, #20
 8009c88:	4689      	mov	r9, r1
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	f007 fb9b 	bl	80113c8 <PixelPatterns::PixelPatterns(unsigned long)>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	b12b      	cbz	r3, 8009ca2 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x22>
 8009c96:	4b53      	ldr	r3, [pc, #332]	@ (8009de4 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x164>)
 8009c98:	4a53      	ldr	r2, [pc, #332]	@ (8009de8 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x168>)
 8009c9a:	4854      	ldr	r0, [pc, #336]	@ (8009dec <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x16c>)
 8009c9c:	2125      	movs	r1, #37	@ 0x25
 8009c9e:	f010 fd0b 	bl	801a6b8 <__assert_func>
 8009ca2:	f1b9 0f05 	cmp.w	r9, #5
 8009ca6:	6026      	str	r6, [r4, #0]
 8009ca8:	dc1c      	bgt.n	8009ce4 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x64>
 8009caa:	2500      	movs	r5, #0
 8009cac:	f8df a14c 	ldr.w	sl, [pc, #332]	@ 8009dfc <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x17c>
 8009cb0:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8009e00 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x180>
 8009cb4:	f8c6 9000 	str.w	r9, [r6]
 8009cb8:	46ab      	mov	fp, r5
 8009cba:	462c      	mov	r4, r5
 8009cbc:	f1b9 0f05 	cmp.w	r9, #5
 8009cc0:	f200 8086 	bhi.w	8009dd0 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x150>
 8009cc4:	e8df f009 	tbb	[pc, r9]
 8009cc8:	1c120338 	ldcne	3, cr0, [r2], {56}	@ 0x38
 8009ccc:	23002c24 	movwcs	r2, #3108	@ 0xc24
 8009cd0:	2264      	movs	r2, #100	@ 0x64
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f007 fbcf 	bl	8011478 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>
 8009cda:	3501      	adds	r5, #1
 8009cdc:	2d08      	cmp	r5, #8
 8009cde:	f10a 0a20 	add.w	sl, sl, #32
 8009ce2:	d1eb      	bne.n	8009cbc <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x3c>
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	b005      	add	sp, #20
 8009ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cec:	2364      	movs	r3, #100	@ 0x64
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	9401      	str	r4, [sp, #4]
 8009cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8009df0 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x170>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f007 fbd3 	bl	80114a4 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009cfe:	e7ec      	b.n	8009cda <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x5a>
 8009d00:	4a3b      	ldr	r2, [pc, #236]	@ (8009df0 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x170>)
 8009d02:	9400      	str	r4, [sp, #0]
 8009d04:	2364      	movs	r3, #100	@ 0x64
 8009d06:	4629      	mov	r1, r5
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f007 fbe7 	bl	80114dc <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009d0e:	e7e4      	b.n	8009cda <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x5a>
 8009d10:	2364      	movs	r3, #100	@ 0x64
 8009d12:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009d16:	4629      	mov	r1, r5
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f007 fbf9 	bl	8011510 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>
 8009d1e:	e7dc      	b.n	8009cda <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x5a>
 8009d20:	230a      	movs	r3, #10
 8009d22:	2264      	movs	r2, #100	@ 0x64
 8009d24:	e9cd 3200 	strd	r3, r2, [sp]
 8009d28:	9402      	str	r4, [sp, #8]
 8009d2a:	4b31      	ldr	r3, [pc, #196]	@ (8009df0 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x170>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4630      	mov	r0, r6
 8009d32:	f007 fc1d 	bl	8011570 <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009d36:	e7d0      	b.n	8009cda <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x5a>
 8009d38:	f8ca b01c 	str.w	fp, [sl, #28]
 8009d3c:	2700      	movs	r7, #0
 8009d3e:	f7ff ff2f 	bl	8009ba0 <PixelConfiguration::Get()>
 8009d42:	6803      	ldr	r3, [r0, #0]
 8009d44:	429f      	cmp	r7, r3
 8009d46:	d30a      	bcc.n	8009d5e <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0xde>
 8009d48:	f8d8 0000 	ldr.w	r0, [r8]
 8009d4c:	f008 f80a 	bl	8011d64 <WS28xxMulti::IsUpdating()>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d1f9      	bne.n	8009d48 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0xc8>
 8009d54:	f8d8 0000 	ldr.w	r0, [r8]
 8009d58:	f007 ff12 	bl	8011b80 <WS28xxMulti::Update()>
 8009d5c:	e7bd      	b.n	8009cda <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x5a>
 8009d5e:	f7ff ff1f 	bl	8009ba0 <PixelConfiguration::Get()>
 8009d62:	68c3      	ldr	r3, [r0, #12]
 8009d64:	2b0d      	cmp	r3, #13
 8009d66:	d829      	bhi.n	8009dbc <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x13c>
 8009d68:	e8df f003 	tbb	[pc, r3]
 8009d6c:	28282807 	stmdacs	r8!, {r0, r1, r2, fp, sp}
 8009d70:	1d282828 	stcne	8, cr2, [r8, #-160]!	@ 0xffffff60
 8009d74:	12282828 	eorne	r2, r8, #40, 16	@ 0x280000
 8009d78:	e9cd1212 	stmib	sp, {r1, r4, r9, ip}^
 8009d7c:	4400      	add	r0, r0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f8d8 0000 	ldr.w	r0, [r8]
 8009d84:	463a      	mov	r2, r7
 8009d86:	4629      	mov	r1, r5
 8009d88:	f008 f902 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8009d8c:	3701      	adds	r7, #1
 8009d8e:	e7d6      	b.n	8009d3e <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0xbe>
 8009d90:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8009d94:	9400      	str	r4, [sp, #0]
 8009d96:	f8d8 0000 	ldr.w	r0, [r8]
 8009d9a:	23ff      	movs	r3, #255	@ 0xff
 8009d9c:	463a      	mov	r2, r7
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f008 fa1a 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8009da4:	e7f2      	b.n	8009d8c <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x10c>
 8009da6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8009daa:	9400      	str	r4, [sp, #0]
 8009dac:	f8d8 0000 	ldr.w	r0, [r8]
 8009db0:	2300      	movs	r3, #0
 8009db2:	463a      	mov	r2, r7
 8009db4:	4629      	mov	r1, r5
 8009db6:	f009 f8eb 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8009dba:	e7e7      	b.n	8009d8c <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x10c>
 8009dbc:	e9cd 4400 	strd	r4, r4, [sp]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f8d8 0000 	ldr.w	r0, [r8]
 8009dc6:	463a      	mov	r2, r7
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f007 ffd3 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8009dce:	e7dd      	b.n	8009d8c <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x10c>
 8009dd0:	4b08      	ldr	r3, [pc, #32]	@ (8009df4 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x174>)
 8009dd2:	4a09      	ldr	r2, [pc, #36]	@ (8009df8 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x178>)
 8009dd4:	4805      	ldr	r0, [pc, #20]	@ (8009dec <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x16c>)
 8009dd6:	214b      	movs	r1, #75	@ 0x4b
 8009dd8:	f010 fc6e 	bl	801a6b8 <__assert_func>
 8009ddc:	e77d      	b.n	8009cda <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)+0x5a>
 8009dde:	bf00      	nop
 8009de0:	2000dfb0 			@ <UNDEFINED> instruction: 0x2000dfb0
 8009de4:	0801ae44 	stmdaeq	r1, {r2, r6, r9, sl, fp, sp, pc}
 8009de8:	0801ae9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, sl, fp, sp, pc}
 8009dec:	0801aeaf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r9, sl, fp, sp, pc}
 8009df0:	00646464 	rsbeq	r6, r4, r4, ror #8
 8009df4:	0801ac34 	stmdaeq	r1, {r2, r4, r5, sl, fp, sp, pc}
 8009df8:	0801aed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, sp, pc}
 8009dfc:	2000dea8 	andcs	sp, r0, r8, lsr #29
 8009e00:	2000dfac 	andcs	sp, r0, ip, lsr #31

08009e04 <RDMSubDevices::~RDMSubDevices()>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	4a12      	ldr	r2, [pc, #72]	@ (8009e50 <RDMSubDevices::~RDMSubDevices()+0x4c>)
 8009e08:	4912      	ldr	r1, [pc, #72]	@ (8009e54 <RDMSubDevices::~RDMSubDevices()+0x50>)
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	2348      	movs	r3, #72	@ 0x48
 8009e0e:	4812      	ldr	r0, [pc, #72]	@ (8009e58 <RDMSubDevices::~RDMSubDevices()+0x54>)
 8009e10:	f010 fb72 	bl	801a4f8 <printf>
 8009e14:	2500      	movs	r5, #0
 8009e16:	462e      	mov	r6, r5
 8009e18:	88a3      	ldrh	r3, [r4, #4]
 8009e1a:	6820      	ldr	r0, [r4, #0]
 8009e1c:	42ab      	cmp	r3, r5
 8009e1e:	d80c      	bhi.n	8009e3a <RDMSubDevices::~RDMSubDevices()+0x36>
 8009e20:	b108      	cbz	r0, 8009e26 <RDMSubDevices::~RDMSubDevices()+0x22>
 8009e22:	f010 fdbb 	bl	801a99c <operator delete[](void*)>
 8009e26:	2300      	movs	r3, #0
 8009e28:	80a3      	strh	r3, [r4, #4]
 8009e2a:	4a09      	ldr	r2, [pc, #36]	@ (8009e50 <RDMSubDevices::~RDMSubDevices()+0x4c>)
 8009e2c:	4909      	ldr	r1, [pc, #36]	@ (8009e54 <RDMSubDevices::~RDMSubDevices()+0x50>)
 8009e2e:	480b      	ldr	r0, [pc, #44]	@ (8009e5c <RDMSubDevices::~RDMSubDevices()+0x58>)
 8009e30:	2351      	movs	r3, #81	@ 0x51
 8009e32:	f010 fb61 	bl	801a4f8 <printf>
 8009e36:	4620      	mov	r0, r4
 8009e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e3a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8009e3e:	00af      	lsls	r7, r5, #2
 8009e40:	b110      	cbz	r0, 8009e48 <RDMSubDevices::~RDMSubDevices()+0x44>
 8009e42:	6803      	ldr	r3, [r0, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4798      	blx	r3
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	3501      	adds	r5, #1
 8009e4c:	51de      	str	r6, [r3, r7]
 8009e4e:	e7e3      	b.n	8009e18 <RDMSubDevices::~RDMSubDevices()+0x14>
 8009e50:	0801aee3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, sl, fp, sp, pc}
 8009e54:	0801aef2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 8009e58:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 8009e5c:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}

08009e60 <LLRPDevice::LLRPDevice()>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	2100      	movs	r1, #0
 8009e64:	4605      	mov	r5, r0
 8009e66:	f003 fbf6 	bl	800d656 <RDMHandler::RDMHandler(bool)>
 8009e6a:	2335      	movs	r3, #53	@ 0x35
 8009e6c:	4a13      	ldr	r2, [pc, #76]	@ (8009ebc <LLRPDevice::LLRPDevice()+0x5c>)
 8009e6e:	4914      	ldr	r1, [pc, #80]	@ (8009ec0 <LLRPDevice::LLRPDevice()+0x60>)
 8009e70:	4814      	ldr	r0, [pc, #80]	@ (8009ec4 <LLRPDevice::LLRPDevice()+0x64>)
 8009e72:	4e15      	ldr	r6, [pc, #84]	@ (8009ec8 <LLRPDevice::LLRPDevice()+0x68>)
 8009e74:	f010 fb40 	bl	801a4f8 <printf>
 8009e78:	f241 50c1 	movw	r0, #5569	@ 0x15c1
 8009e7c:	f00b f936 	bl	80150ec <net::udp_begin(unsigned short)>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	4604      	mov	r4, r0
 8009e84:	d00b      	beq.n	8009e9e <LLRPDevice::LLRPDevice()+0x3e>
 8009e86:	6030      	str	r0, [r6, #0]
 8009e88:	4810      	ldr	r0, [pc, #64]	@ (8009ecc <LLRPDevice::LLRPDevice()+0x6c>)
 8009e8a:	f00a fd17 	bl	80148bc <net::igmp_join(unsigned long)>
 8009e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8009ebc <LLRPDevice::LLRPDevice()+0x5c>)
 8009e90:	490b      	ldr	r1, [pc, #44]	@ (8009ec0 <LLRPDevice::LLRPDevice()+0x60>)
 8009e92:	480f      	ldr	r0, [pc, #60]	@ (8009ed0 <LLRPDevice::LLRPDevice()+0x70>)
 8009e94:	233b      	movs	r3, #59	@ 0x3b
 8009e96:	f010 fb2f 	bl	801a4f8 <printf>
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	bd70      	pop	{r4, r5, r6, pc}
 8009e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed4 <LLRPDevice::LLRPDevice()+0x74>)
 8009ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8009ed8 <LLRPDevice::LLRPDevice()+0x78>)
 8009ea2:	480e      	ldr	r0, [pc, #56]	@ (8009edc <LLRPDevice::LLRPDevice()+0x7c>)
 8009ea4:	21b9      	movs	r1, #185	@ 0xb9
 8009ea6:	f010 fc07 	bl	801a6b8 <__assert_func>
 8009eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee0 <LLRPDevice::LLRPDevice()+0x80>)
 8009eac:	4a03      	ldr	r2, [pc, #12]	@ (8009ebc <LLRPDevice::LLRPDevice()+0x5c>)
 8009eae:	4804      	ldr	r0, [pc, #16]	@ (8009ec0 <LLRPDevice::LLRPDevice()+0x60>)
 8009eb0:	6034      	str	r4, [r6, #0]
 8009eb2:	2138      	movs	r1, #56	@ 0x38
 8009eb4:	f010 fc00 	bl	801a6b8 <__assert_func>
 8009eb8:	e7e6      	b.n	8009e88 <LLRPDevice::LLRPDevice()+0x28>
 8009eba:	bf00      	nop
 8009ebc:	0801afe4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8009ec0:	0801af15 	stmdaeq	r1, {r0, r2, r4, r8, r9, sl, fp, sp, pc}
 8009ec4:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 8009ec8:	2000d3fc 	strdcs	sp, [r0], -ip
 8009ecc:	85faffef 	ldrbhi	pc, [sl, #4079]!	@ 0xfef	@ <UNPREDICTABLE>
 8009ed0:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}
 8009ed4:	0801af3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, fp, sp, pc}
 8009ed8:	0801af47 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, sl, fp, sp, pc}
 8009edc:	0801af4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, fp, sp, pc}
 8009ee0:	0801af73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, pc}

08009ee4 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8009ee4:	4b14      	ldr	r3, [pc, #80]	@ (8009f38 <RDMDeviceResponder::~RDMDeviceResponder()+0x54>)
 8009ee6:	b570      	push	{r4, r5, r6, lr}
 8009ee8:	4604      	mov	r4, r0
 8009eea:	f840 3b60 	str.w	r3, [r0], #96
 8009eee:	f7ff ff89 	bl	8009e04 <RDMSubDevices::~RDMSubDevices()>
 8009ef2:	4a12      	ldr	r2, [pc, #72]	@ (8009f3c <RDMDeviceResponder::~RDMDeviceResponder()+0x58>)
 8009ef4:	4912      	ldr	r1, [pc, #72]	@ (8009f40 <RDMDeviceResponder::~RDMDeviceResponder()+0x5c>)
 8009ef6:	4813      	ldr	r0, [pc, #76]	@ (8009f44 <RDMDeviceResponder::~RDMDeviceResponder()+0x60>)
 8009ef8:	2353      	movs	r3, #83	@ 0x53
 8009efa:	f010 fafd 	bl	801a4f8 <printf>
 8009efe:	2500      	movs	r5, #0
 8009f00:	462e      	mov	r6, r5
 8009f02:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8009f06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f08:	429d      	cmp	r5, r3
 8009f0a:	d30a      	bcc.n	8009f22 <RDMDeviceResponder::~RDMDeviceResponder()+0x3e>
 8009f0c:	b108      	cbz	r0, 8009f12 <RDMDeviceResponder::~RDMDeviceResponder()+0x2e>
 8009f0e:	f010 fd45 	bl	801a99c <operator delete[](void*)>
 8009f12:	4a0a      	ldr	r2, [pc, #40]	@ (8009f3c <RDMDeviceResponder::~RDMDeviceResponder()+0x58>)
 8009f14:	490a      	ldr	r1, [pc, #40]	@ (8009f40 <RDMDeviceResponder::~RDMDeviceResponder()+0x5c>)
 8009f16:	480c      	ldr	r0, [pc, #48]	@ (8009f48 <RDMDeviceResponder::~RDMDeviceResponder()+0x64>)
 8009f18:	235c      	movs	r3, #92	@ 0x5c
 8009f1a:	f010 faed 	bl	801a4f8 <printf>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	bd70      	pop	{r4, r5, r6, pc}
 8009f22:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8009f26:	b128      	cbz	r0, 8009f34 <RDMDeviceResponder::~RDMDeviceResponder()+0x50>
 8009f28:	6803      	ldr	r3, [r0, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	4798      	blx	r3
 8009f2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f30:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8009f34:	3501      	adds	r5, #1
 8009f36:	e7e4      	b.n	8009f02 <RDMDeviceResponder::~RDMDeviceResponder()+0x1e>
 8009f38:	0801ea70 	stmdaeq	r1, {r4, r5, r6, r9, fp, sp, lr, pc}
 8009f3c:	0801af87 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, fp, sp, pc}
 8009f40:	0801af93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, sl, fp, sp, pc}
 8009f44:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 8009f48:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}

08009f4c <RDMNetDevice::~RDMNetDevice()>:
 8009f4c:	4b17      	ldr	r3, [pc, #92]	@ (8009fac <RDMNetDevice::~RDMNetDevice()+0x60>)
 8009f4e:	4a18      	ldr	r2, [pc, #96]	@ (8009fb0 <RDMNetDevice::~RDMNetDevice()+0x64>)
 8009f50:	4918      	ldr	r1, [pc, #96]	@ (8009fb4 <RDMNetDevice::~RDMNetDevice()+0x68>)
 8009f52:	b510      	push	{r4, lr}
 8009f54:	6003      	str	r3, [r0, #0]
 8009f56:	4604      	mov	r4, r0
 8009f58:	2337      	movs	r3, #55	@ 0x37
 8009f5a:	4817      	ldr	r0, [pc, #92]	@ (8009fb8 <RDMNetDevice::~RDMNetDevice()+0x6c>)
 8009f5c:	f010 facc 	bl	801a4f8 <printf>
 8009f60:	4a13      	ldr	r2, [pc, #76]	@ (8009fb0 <RDMNetDevice::~RDMNetDevice()+0x64>)
 8009f62:	4914      	ldr	r1, [pc, #80]	@ (8009fb4 <RDMNetDevice::~RDMNetDevice()+0x68>)
 8009f64:	4815      	ldr	r0, [pc, #84]	@ (8009fbc <RDMNetDevice::~RDMNetDevice()+0x70>)
 8009f66:	2339      	movs	r3, #57	@ 0x39
 8009f68:	f010 fac6 	bl	801a4f8 <printf>
 8009f6c:	4a14      	ldr	r2, [pc, #80]	@ (8009fc0 <RDMNetDevice::~RDMNetDevice()+0x74>)
 8009f6e:	4915      	ldr	r1, [pc, #84]	@ (8009fc4 <RDMNetDevice::~RDMNetDevice()+0x78>)
 8009f70:	4811      	ldr	r0, [pc, #68]	@ (8009fb8 <RDMNetDevice::~RDMNetDevice()+0x6c>)
 8009f72:	233f      	movs	r3, #63	@ 0x3f
 8009f74:	f010 fac0 	bl	801a4f8 <printf>
 8009f78:	4813      	ldr	r0, [pc, #76]	@ (8009fc8 <RDMNetDevice::~RDMNetDevice()+0x7c>)
 8009f7a:	f00a fcbd 	bl	80148f8 <net::igmp_leave(unsigned long)>
 8009f7e:	f241 50c1 	movw	r0, #5569	@ 0x15c1
 8009f82:	f00b f8c9 	bl	8015118 <net::udp_end(unsigned short)>
 8009f86:	b128      	cbz	r0, 8009f94 <RDMNetDevice::~RDMNetDevice()+0x48>
 8009f88:	4b10      	ldr	r3, [pc, #64]	@ (8009fcc <RDMNetDevice::~RDMNetDevice()+0x80>)
 8009f8a:	4a11      	ldr	r2, [pc, #68]	@ (8009fd0 <RDMNetDevice::~RDMNetDevice()+0x84>)
 8009f8c:	4811      	ldr	r0, [pc, #68]	@ (8009fd4 <RDMNetDevice::~RDMNetDevice()+0x88>)
 8009f8e:	21bf      	movs	r1, #191	@ 0xbf
 8009f90:	f010 fb92 	bl	801a6b8 <__assert_func>
 8009f94:	4a0a      	ldr	r2, [pc, #40]	@ (8009fc0 <RDMNetDevice::~RDMNetDevice()+0x74>)
 8009f96:	490b      	ldr	r1, [pc, #44]	@ (8009fc4 <RDMNetDevice::~RDMNetDevice()+0x78>)
 8009f98:	4808      	ldr	r0, [pc, #32]	@ (8009fbc <RDMNetDevice::~RDMNetDevice()+0x70>)
 8009f9a:	2344      	movs	r3, #68	@ 0x44
 8009f9c:	f010 faac 	bl	801a4f8 <printf>
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f7ff ff9f 	bl	8009ee4 <RDMDeviceResponder::~RDMDeviceResponder()>
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	bf00      	nop
 8009fac:	0801bf30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, ip, sp, pc}
 8009fb0:	0801afb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, r9, sl, fp, sp, pc}
 8009fb4:	0801afc1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, fp, sp, pc}
 8009fb8:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 8009fbc:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}
 8009fc0:	0801afe3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8009fc4:	0801af15 	stmdaeq	r1, {r0, r2, r4, r8, r9, sl, fp, sp, pc}
 8009fc8:	85faffef 	ldrbhi	pc, [sl, #4079]!	@ 0xfef	@ <UNPREDICTABLE>
 8009fcc:	0801afef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8009fd0:	0801affb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8009fd4:	0801af4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, fp, sp, pc}

08009fd8 <RDMNetDevice::~RDMNetDevice()>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	4604      	mov	r4, r0
 8009fdc:	f7ff ffb6 	bl	8009f4c <RDMNetDevice::~RDMNetDevice()>
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	21ac      	movs	r1, #172	@ 0xac
 8009fe4:	f010 fcdc 	bl	801a9a0 <operator delete(void*, unsigned int)>
 8009fe8:	4620      	mov	r0, r4
 8009fea:	bd10      	pop	{r4, pc}

08009fec <RDMDeviceResponder::~RDMDeviceResponder()>:
 8009fec:	b510      	push	{r4, lr}
 8009fee:	4604      	mov	r4, r0
 8009ff0:	f7ff ff78 	bl	8009ee4 <RDMDeviceResponder::~RDMDeviceResponder()>
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	21a0      	movs	r1, #160	@ 0xa0
 8009ff8:	f010 fcd2 	bl	801a9a0 <operator delete(void*, unsigned int)>
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	bd10      	pop	{r4, pc}

0800a000 <RDMNetDevice::Print()>:
 800a000:	b530      	push	{r4, r5, lr}
 800a002:	b091      	sub	sp, #68	@ 0x44
 800a004:	2300      	movs	r3, #0
 800a006:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800a00a:	4b1a      	ldr	r3, [pc, #104]	@ (800a074 <RDMNetDevice::Print()+0x74>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	aa02      	add	r2, sp, #8
 800a010:	4604      	mov	r4, r0
 800a012:	f103 0110 	add.w	r1, r3, #16
 800a016:	4610      	mov	r0, r2
 800a018:	f813 5b01 	ldrb.w	r5, [r3], #1
 800a01c:	f802 5b01 	strb.w	r5, [r2], #1
 800a020:	428b      	cmp	r3, r1
 800a022:	d1f9      	bne.n	800a018 <RDMNetDevice::Print()+0x18>
 800a024:	a906      	add	r1, sp, #24
 800a026:	f010 fb41 	bl	801a6ac <uuid_unparse>
 800a02a:	4813      	ldr	r0, [pc, #76]	@ (800a078 <RDMNetDevice::Print()+0x78>)
 800a02c:	f010 fa64 	bl	801a4f8 <printf>
 800a030:	a906      	add	r1, sp, #24
 800a032:	4812      	ldr	r0, [pc, #72]	@ (800a07c <RDMNetDevice::Print()+0x7c>)
 800a034:	f010 fa60 	bl	801a4f8 <printf>
 800a038:	4811      	ldr	r0, [pc, #68]	@ (800a080 <RDMNetDevice::Print()+0x80>)
 800a03a:	f010 fa5d 	bl	801a4f8 <printf>
 800a03e:	f241 51c1 	movw	r1, #5569	@ 0x15c1
 800a042:	4810      	ldr	r0, [pc, #64]	@ (800a084 <RDMNetDevice::Print()+0x84>)
 800a044:	f010 fa58 	bl	801a4f8 <printf>
 800a048:	2385      	movs	r3, #133	@ 0x85
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	22ff      	movs	r2, #255	@ 0xff
 800a04e:	23fa      	movs	r3, #250	@ 0xfa
 800a050:	21ef      	movs	r1, #239	@ 0xef
 800a052:	480d      	ldr	r0, [pc, #52]	@ (800a088 <RDMNetDevice::Print()+0x88>)
 800a054:	f010 fa50 	bl	801a4f8 <printf>
 800a058:	2386      	movs	r3, #134	@ 0x86
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	22ff      	movs	r2, #255	@ 0xff
 800a05e:	23fa      	movs	r3, #250	@ 0xfa
 800a060:	21ef      	movs	r1, #239	@ 0xef
 800a062:	480a      	ldr	r0, [pc, #40]	@ (800a08c <RDMNetDevice::Print()+0x8c>)
 800a064:	f010 fa48 	bl	801a4f8 <printf>
 800a068:	4620      	mov	r0, r4
 800a06a:	f003 f9cd 	bl	800d408 <RDMDeviceResponder::Print()>
 800a06e:	b011      	add	sp, #68	@ 0x44
 800a070:	bd30      	pop	{r4, r5, pc}
 800a072:	bf00      	nop
 800a074:	2000e3d0 	ldrdcs	lr, [r0], -r0
 800a078:	0801afff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800a07c:	0801b007 	stmdaeq	r1, {r0, r1, r2, ip, sp, pc}
 800a080:	0801b012 	stmdaeq	r1, {r1, r4, ip, sp, pc}
 800a084:	0801b01f 	stmdaeq	r1, {r0, r1, r2, r3, r4, ip, sp, pc}
 800a088:	0801b039 	stmdaeq	r1, {r0, r3, r4, r5, ip, sp, pc}
 800a08c:	0801b05c 	stmdaeq	r1, {r2, r3, r4, r6, ip, sp, pc}

0800a090 <Hardware::RebootHandler()>:
 800a090:	b508      	push	{r3, lr}
 800a092:	4b07      	ldr	r3, [pc, #28]	@ (800a0b0 <Hardware::RebootHandler()+0x20>)
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	f008 fd71 	bl	8012b7c <WS28xxMulti::Blackout()>
 800a09a:	4b06      	ldr	r3, [pc, #24]	@ (800a0b4 <Hardware::RebootHandler()+0x24>)
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	f005 f92b 	bl	800f2f8 <Dmx::Blackout()>
 800a0a2:	4b05      	ldr	r3, [pc, #20]	@ (800a0b8 <Hardware::RebootHandler()+0x28>)
 800a0a4:	6818      	ldr	r0, [r3, #0]
 800a0a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a0aa:	f001 bec7 	b.w	800be3c <E131Bridge::Stop()>
 800a0ae:	bf00      	nop
 800a0b0:	2000dfb4 			@ <UNDEFINED> instruction: 0x2000dfb4
 800a0b4:	2000d404 	andcs	sp, r0, r4, lsl #8
 800a0b8:	2000d2d4 	ldrdcs	sp, [r0], -r4

0800a0bc <main>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	f5ad 5d8c 	sub.w	sp, sp, #4480	@ 0x1180
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	a889      	add	r0, sp, #548	@ 0x224
 800a0c8:	f00d fe1a 	bl	8017d00 <Hardware::Hardware()>
 800a0cc:	a873      	add	r0, sp, #460	@ 0x1cc
 800a0ce:	f00c f8a9 	bl	8016224 <DisplayUdf::DisplayUdf()>
 800a0d2:	a807      	add	r0, sp, #28
 800a0d4:	f00c fc32 	bl	801693c <ConfigStore::ConfigStore()>
 800a0d8:	49a4      	ldr	r1, [pc, #656]	@ (800a36c <main+0x2b0>)
 800a0da:	2203      	movs	r2, #3
 800a0dc:	a873      	add	r0, sp, #460	@ 0x1cc
 800a0de:	f7ff fccb 	bl	8009a78 <Display::TextStatus(char const*, unsigned long)>
 800a0e2:	a8de      	add	r0, sp, #888	@ 0x378
 800a0e4:	f009 fdbe 	bl	8013c64 <Network::Network()>
 800a0e8:	a808      	add	r0, sp, #32
 800a0ea:	f009 fb6d 	bl	80137c8 <MDNS::MDNS()>
 800a0ee:	49a0      	ldr	r1, [pc, #640]	@ (800a370 <main+0x2b4>)
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	a873      	add	r0, sp, #460	@ 0x1cc
 800a0f4:	f7ff fcc0 	bl	8009a78 <Display::TextStatus(char const*, unsigned long)>
 800a0f8:	4b9e      	ldr	r3, [pc, #632]	@ (800a374 <main+0x2b8>)
 800a0fa:	4a9f      	ldr	r2, [pc, #636]	@ (800a378 <main+0x2bc>)
 800a0fc:	499f      	ldr	r1, [pc, #636]	@ (800a37c <main+0x2c0>)
 800a0fe:	a809      	add	r0, sp, #36	@ 0x24
 800a100:	f00d fbce 	bl	80178a0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 800a104:	489e      	ldr	r0, [pc, #632]	@ (800a380 <main+0x2c4>)
 800a106:	f010 fa4c 	bl	801a5a2 <puts>
 800a10a:	f20d 540c 	addw	r4, sp, #1292	@ 0x50c
 800a10e:	499d      	ldr	r1, [pc, #628]	@ (800a384 <main+0x2c8>)
 800a110:	489d      	ldr	r0, [pc, #628]	@ (800a388 <main+0x2cc>)
 800a112:	f010 f9f1 	bl	801a4f8 <printf>
 800a116:	4620      	mov	r0, r4
 800a118:	f001 fe26 	bl	800bd68 <E131Bridge::E131Bridge()>
 800a11c:	f50d 6086 	add.w	r0, sp, #1072	@ 0x430
 800a120:	f002 fcd4 	bl	800cacc <E131Params::E131Params()>
 800a124:	f50d 6086 	add.w	r0, sp, #1072	@ 0x430
 800a128:	f002 fce8 	bl	800cafc <E131Params::Load()>
 800a12c:	f50d 6086 	add.w	r0, sp, #1072	@ 0x430
 800a130:	f002 ffb0 	bl	800d094 <E131Params::Set()>
 800a134:	a863      	add	r0, sp, #396	@ 0x18c
 800a136:	f7ff fd49 	bl	8009bcc <PixelDmxConfiguration::PixelDmxConfiguration()>
 800a13a:	a844      	add	r0, sp, #272	@ 0x110
 800a13c:	f005 fb48 	bl	800f7d0 <PixelDmxParams::PixelDmxParams()>
 800a140:	a844      	add	r0, sp, #272	@ 0x110
 800a142:	f005 ff15 	bl	800ff70 <PixelDmxParams::Load()>
 800a146:	ae15      	add	r6, sp, #84	@ 0x54
 800a148:	a844      	add	r0, sp, #272	@ 0x110
 800a14a:	f005 fe2b 	bl	800fda4 <PixelDmxParams::Set()>
 800a14e:	4630      	mov	r0, r6
 800a150:	f006 f930 	bl	80103b4 <WS28xxDmxMulti::WS28xxDmxMulti()>
 800a154:	2500      	movs	r5, #0
 800a156:	9b6d      	ldr	r3, [sp, #436]	@ 0x1b4
 800a158:	9f6a      	ldr	r7, [sp, #424]	@ 0x1a8
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	4629      	mov	r1, r5
 800a15e:	f44f 5a80 	mov.w	sl, #4096	@ 0x1000
 800a162:	42bd      	cmp	r5, r7
 800a164:	f040 80b9 	bne.w	800a2da <main+0x21e>
 800a168:	f89d 8120 	ldrb.w	r8, [sp, #288]	@ 0x120
 800a16c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a3c4 <main+0x308>
 800a170:	463a      	mov	r2, r7
 800a172:	4641      	mov	r1, r8
 800a174:	a80a      	add	r0, sp, #40	@ 0x28
 800a176:	f7ff fd83 	bl	8009c80 <PixelTestPattern::PixelTestPattern(pixelpatterns::Pattern, unsigned long)>
 800a17a:	f8bd 543d 	ldrh.w	r5, [sp, #1085]	@ 0x43d
 800a17e:	f005 0503 	and.w	r5, r5, #3
 800a182:	2d01      	cmp	r5, #1
 800a184:	f040 80d5 	bne.w	800a332 <main+0x276>
 800a188:	f8bd 3435 	ldrh.w	r3, [sp, #1077]	@ 0x435
 800a18c:	f8da 1000 	ldr.w	r1, [sl]
 800a190:	462a      	mov	r2, r5
 800a192:	4620      	mov	r0, r4
 800a194:	f001 fea4 	bl	800bee0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800a198:	f8bd 243d 	ldrh.w	r2, [sp, #1085]	@ 0x43d
 800a19c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a1a0:	2a01      	cmp	r2, #1
 800a1a2:	d108      	bne.n	800a1b6 <main+0xfa>
 800a1a4:	f8da 1000 	ldr.w	r1, [sl]
 800a1a8:	f8bd 3437 	ldrh.w	r3, [sp, #1079]	@ 0x437
 800a1ac:	3101      	adds	r1, #1
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f001 fe96 	bl	800bee0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	ab19      	add	r3, sp, #100	@ 0x64
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	9304      	str	r3, [sp, #16]
 800a1bc:	f004 fd20 	bl	800ec00 <Dmx::Dmx()>
 800a1c0:	a80f      	add	r0, sp, #60	@ 0x3c
 800a1c2:	f004 f96d 	bl	800e4a0 <DmxParams::DmxParams()>
 800a1c6:	a80f      	add	r0, sp, #60	@ 0x3c
 800a1c8:	f004 f97b 	bl	800e4c2 <DmxParams::Load()>
 800a1cc:	9904      	ldr	r1, [sp, #16]
 800a1ce:	a80f      	add	r0, sp, #60	@ 0x3c
 800a1d0:	f004 fa90 	bl	800e6f4 <DmxParams::Set(Dmx*)>
 800a1d4:	f8da 9000 	ldr.w	r9, [sl]
 800a1d8:	f04f 0b0c 	mov.w	fp, #12
 800a1dc:	f1b9 0f21 	cmp.w	r9, #33	@ 0x21
 800a1e0:	f240 80a9 	bls.w	800a336 <main+0x27a>
 800a1e4:	ab0d      	add	r3, sp, #52	@ 0x34
 800a1e6:	4a69      	ldr	r2, [pc, #420]	@ (800a38c <main+0x2d0>)
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	711a      	strb	r2, [r3, #4]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e9cd 3587 	strd	r3, r5, [sp, #540]	@ 0x21c
 800a1f4:	4b66      	ldr	r3, [pc, #408]	@ (800a390 <main+0x2d4>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	bf18      	it	ne
 800a1fe:	4616      	movne	r6, r2
 800a200:	2d00      	cmp	r5, #0
 800a202:	f000 80ab 	beq.w	800a35c <main+0x2a0>
 800a206:	aa0d      	add	r2, sp, #52	@ 0x34
 800a208:	4962      	ldr	r1, [pc, #392]	@ (800a394 <main+0x2d8>)
 800a20a:	9214      	str	r2, [sp, #80]	@ 0x50
 800a20c:	ab12      	add	r3, sp, #72	@ 0x48
 800a20e:	e9c3 1600 	strd	r1, r6, [r3]
 800a212:	2340      	movs	r3, #64	@ 0x40
 800a214:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800a218:	495f      	ldr	r1, [pc, #380]	@ (800a398 <main+0x2dc>)
 800a21a:	4a60      	ldr	r2, [pc, #384]	@ (800a39c <main+0x2e0>)
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	ae12      	add	r6, sp, #72	@ 0x48
 800a220:	2325      	movs	r3, #37	@ 0x25
 800a222:	485f      	ldr	r0, [pc, #380]	@ (800a3a0 <main+0x2e4>)
 800a224:	f010 f968 	bl	801a4f8 <printf>
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff f98d 	bl	8009548 <LightSetWith4<64ul>::Print()>
 800a22e:	495d      	ldr	r1, [pc, #372]	@ (800a3a4 <main+0x2e8>)
 800a230:	f8c4 6c74 	str.w	r6, [r4, #3188]	@ 0xc74
 800a234:	2203      	movs	r2, #3
 800a236:	a873      	add	r0, sp, #460	@ 0x1cc
 800a238:	f7ff fc1e 	bl	8009a78 <Display::TextStatus(char const*, unsigned long)>
 800a23c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800a23e:	f006 ff97 	bl	8011170 <pixel::pixel_get_type(pixel::Type)>
 800a242:	9b63      	ldr	r3, [sp, #396]	@ 0x18c
 800a244:	4a58      	ldr	r2, [pc, #352]	@ (800a3a8 <main+0x2ec>)
 800a246:	9502      	str	r5, [sp, #8]
 800a248:	e9cd 0300 	strd	r0, r3, [sp]
 800a24c:	2120      	movs	r1, #32
 800a24e:	463b      	mov	r3, r7
 800a250:	a829      	add	r0, sp, #164	@ 0xa4
 800a252:	f010 f979 	bl	801a548 <snprintf>
 800a256:	4a55      	ldr	r2, [pc, #340]	@ (800a3ac <main+0x2f0>)
 800a258:	2120      	movs	r1, #32
 800a25a:	a832      	add	r0, sp, #200	@ 0xc8
 800a25c:	f010 f974 	bl	801a548 <snprintf>
 800a260:	4605      	mov	r5, r0
 800a262:	202c      	movs	r0, #44	@ 0x2c
 800a264:	f010 fb9e 	bl	801a9a4 <operator new(unsigned int)>
 800a268:	4603      	mov	r3, r0
 800a26a:	2200      	movs	r2, #0
 800a26c:	6042      	str	r2, [r0, #4]
 800a26e:	6282      	str	r2, [r0, #40]	@ 0x28
 800a270:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 800a274:	f823 2b08 	strh.w	r2, [r3], #8
 800a278:	aa29      	add	r2, sp, #164	@ 0xa4
 800a27a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a27e:	b109      	cbz	r1, 800a284 <main+0x1c8>
 800a280:	42b3      	cmp	r3, r6
 800a282:	d16d      	bne.n	800a360 <main+0x2a4>
 800a284:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a286:	ab0b      	add	r3, sp, #44	@ 0x2c
 800a288:	2301      	movs	r3, #1
 800a28a:	461a      	mov	r2, r3
 800a28c:	a90b      	add	r1, sp, #44	@ 0x2c
 800a28e:	a8b3      	add	r0, sp, #716	@ 0x2cc
 800a290:	f002 ffb4 	bl	800d1fc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)>
 800a294:	a8db      	add	r0, sp, #876	@ 0x36c
 800a296:	f7ff fde3 	bl	8009e60 <LLRPDevice::LLRPDevice()>
 800a29a:	4b45      	ldr	r3, [pc, #276]	@ (800a3b0 <main+0x2f4>)
 800a29c:	4a45      	ldr	r2, [pc, #276]	@ (800a3b4 <main+0x2f8>)
 800a29e:	4946      	ldr	r1, [pc, #280]	@ (800a3b8 <main+0x2fc>)
 800a2a0:	93b3      	str	r3, [sp, #716]	@ 0x2cc
 800a2a2:	4846      	ldr	r0, [pc, #280]	@ (800a3bc <main+0x300>)
 800a2a4:	2331      	movs	r3, #49	@ 0x31
 800a2a6:	f010 f927 	bl	801a4f8 <printf>
 800a2aa:	4a42      	ldr	r2, [pc, #264]	@ (800a3b4 <main+0x2f8>)
 800a2ac:	4942      	ldr	r1, [pc, #264]	@ (800a3b8 <main+0x2fc>)
 800a2ae:	4844      	ldr	r0, [pc, #272]	@ (800a3c0 <main+0x304>)
 800a2b0:	2333      	movs	r3, #51	@ 0x33
 800a2b2:	f010 f921 	bl	801a4f8 <printf>
 800a2b6:	b2e8      	uxtb	r0, r5
 800a2b8:	2820      	cmp	r0, #32
 800a2ba:	f89d 3322 	ldrb.w	r3, [sp, #802]	@ 0x322
 800a2be:	bf28      	it	cs
 800a2c0:	2020      	movcs	r0, #32
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f040 81ca 	bne.w	800a65e <main+0x5a2>
 800a2ca:	ab32      	add	r3, sp, #200	@ 0xc8
 800a2cc:	a9b4      	add	r1, sp, #720	@ 0x2d0
 800a2ce:	3a01      	subs	r2, #1
 800a2d0:	f080 81c8 	bcs.w	800a664 <main+0x5a8>
 800a2d4:	f88d 0321 	strb.w	r0, [sp, #801]	@ 0x321
 800a2d8:	e096      	b.n	800a408 <main+0x34c>
 800a2da:	2d07      	cmp	r5, #7
 800a2dc:	d817      	bhi.n	800a30e <main+0x252>
 800a2de:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 800a2e0:	fa0a f305 	lsl.w	r3, sl, r5
 800a2e4:	4393      	bics	r3, r2
 800a2e6:	ab44      	add	r3, sp, #272	@ 0x110
 800a2e8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800a2ec:	bf08      	it	eq
 800a2ee:	f04f 0901 	moveq.w	r9, #1
 800a2f2:	f8b3 8016 	ldrh.w	r8, [r3, #22]
 800a2f6:	bf18      	it	ne
 800a2f8:	f04f 0900 	movne.w	r9, #0
 800a2fc:	9b04      	ldr	r3, [sp, #16]
 800a2fe:	eba8 0801 	sub.w	r8, r8, r1
 800a302:	eb01 0b03 	add.w	fp, r1, r3
 800a306:	4559      	cmp	r1, fp
 800a308:	d105      	bne.n	800a316 <main+0x25a>
 800a30a:	3501      	adds	r5, #1
 800a30c:	e729      	b.n	800a162 <main+0xa6>
 800a30e:	f04f 0900 	mov.w	r9, #0
 800a312:	46c8      	mov	r8, r9
 800a314:	e7f2      	b.n	800a2fc <main+0x240>
 800a316:	f1b9 0f00 	cmp.w	r9, #0
 800a31a:	d008      	beq.n	800a32e <main+0x272>
 800a31c:	eb08 0301 	add.w	r3, r8, r1
 800a320:	b29b      	uxth	r3, r3
 800a322:	2201      	movs	r2, #1
 800a324:	4620      	mov	r0, r4
 800a326:	9105      	str	r1, [sp, #20]
 800a328:	f001 fdda 	bl	800bee0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800a32c:	9905      	ldr	r1, [sp, #20]
 800a32e:	3101      	adds	r1, #1
 800a330:	e7e9      	b.n	800a306 <main+0x24a>
 800a332:	2500      	movs	r5, #0
 800a334:	e730      	b.n	800a198 <main+0xdc>
 800a336:	fb0b 4309 	mla	r3, fp, r9, r4
 800a33a:	f8da 1000 	ldr.w	r1, [sl]
 800a33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a340:	9804      	ldr	r0, [sp, #16]
 800a342:	2b01      	cmp	r3, #1
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	eba9 0101 	sub.w	r1, r9, r1
 800a34c:	bf0c      	ite	eq
 800a34e:	461a      	moveq	r2, r3
 800a350:	2201      	movne	r2, #1
 800a352:	f004 fdc5 	bl	800eee0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 800a356:	f109 0901 	add.w	r9, r9, #1
 800a35a:	e73f      	b.n	800a1dc <main+0x120>
 800a35c:	462a      	mov	r2, r5
 800a35e:	e753      	b.n	800a208 <main+0x14c>
 800a360:	f803 1b01 	strb.w	r1, [r3], #1
 800a364:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a366:	3101      	adds	r1, #1
 800a368:	6281      	str	r1, [r0, #40]	@ 0x28
 800a36a:	e786      	b.n	800a27a <main+0x1be>
 800a36c:	0801ee8a 	stmdaeq	r1, {r1, r3, r7, r9, sl, fp, sp, lr, pc}
 800a370:	0801ee7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, sl, fp, sp, lr, pc}
 800a374:	0801b07f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, ip, sp, pc}
 800a378:	0801b088 	stmdaeq	r1, {r3, r7, ip, sp, pc}
 800a37c:	0801bf84 	stmdaeq	r1, {r2, r7, r8, r9, sl, fp, ip, sp, pc}
 800a380:	2000e378 	andcs	lr, r0, r8, ror r3
 800a384:	0801b094 	stmdaeq	r1, {r2, r4, r7, ip, sp, pc}
 800a388:	0801b0ca 	stmdaeq	r1, {r1, r3, r6, r7, ip, sp, pc}
 800a38c:	0801beec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 800a390:	2000dfb0 			@ <UNDEFINED> instruction: 0x2000dfb0
 800a394:	0801bf48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, ip, sp, pc}
 800a398:	0801b0ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, ip, sp, pc}
 800a39c:	0801b0d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, ip, sp, pc}
 800a3a0:	0801b10d 	stmdaeq	r1, {r0, r2, r3, r8, ip, sp, pc}
 800a3a4:	0801ec66 	stmdaeq	r1, {r1, r2, r5, r6, sl, fp, sp, lr, pc}
 800a3a8:	0801b129 	stmdaeq	r1, {r0, r3, r5, r8, ip, sp, pc}
 800a3ac:	0801b144 	stmdaeq	r1, {r2, r6, r8, ip, sp, pc}
 800a3b0:	0801bf30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, ip, sp, pc}
 800a3b4:	0801afb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, sp, pc}
 800a3b8:	0801afc1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, fp, sp, pc}
 800a3bc:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 800a3c0:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}
 800a3c4:	20000000 	andcs	r0, r0, r0
 800a3c8:	f813 5b01 	ldrb.w	r5, [r3], #1
 800a3cc:	f801 5b01 	strb.w	r5, [r1], #1
 800a3d0:	3a01      	subs	r2, #1
 800a3d2:	d2f9      	bcs.n	800a3c8 <main+0x30c>
 800a3d4:	2501      	movs	r5, #1
 800a3d6:	f04f 0900 	mov.w	r9, #0
 800a3da:	e9cd 5901 	strd	r5, r9, [sp, #4]
 800a3de:	4ead      	ldr	r6, [pc, #692]	@ (800a694 <main+0x5d8>)
 800a3e0:	9000      	str	r0, [sp, #0]
 800a3e2:	f88d 0320 	strb.w	r0, [sp, #800]	@ 0x320
 800a3e6:	f88d 0160 	strb.w	r0, [sp, #352]	@ 0x160
 800a3ea:	abbc      	add	r3, sp, #752	@ 0x2f0
 800a3ec:	6830      	ldr	r0, [r6, #0]
 800a3ee:	2204      	movs	r2, #4
 800a3f0:	2109      	movs	r1, #9
 800a3f2:	f00c fb31 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a3f6:	e9cd 5901 	strd	r5, r9, [sp, #4]
 800a3fa:	9500      	str	r5, [sp, #0]
 800a3fc:	6830      	ldr	r0, [r6, #0]
 800a3fe:	ab58      	add	r3, sp, #352	@ 0x160
 800a400:	2224      	movs	r2, #36	@ 0x24
 800a402:	2109      	movs	r1, #9
 800a404:	f00c fb28 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a408:	4ba3      	ldr	r3, [pc, #652]	@ (800a698 <main+0x5dc>)
 800a40a:	93c4      	str	r3, [sp, #784]	@ 0x310
 800a40c:	a8b3      	add	r0, sp, #716	@ 0x2cc
 800a40e:	f002 ff4f 	bl	800d2b0 <RDMDeviceResponder::Init()>
 800a412:	a858      	add	r0, sp, #352	@ 0x160
 800a414:	f002 fe88 	bl	800d128 <RDMDeviceParams::RDMDeviceParams()>
 800a418:	a858      	add	r0, sp, #352	@ 0x160
 800a41a:	f002 fe98 	bl	800d14e <RDMDeviceParams::Load()>
 800a41e:	a9b4      	add	r1, sp, #720	@ 0x2d0
 800a420:	a858      	add	r0, sp, #352	@ 0x160
 800a422:	f002 fe99 	bl	800d158 <RDMDeviceParams::Set(RDMDevice*)>
 800a426:	a8b3      	add	r0, sp, #716	@ 0x2cc
 800a428:	f7ff fdea 	bl	800a000 <RDMNetDevice::Print()>
 800a42c:	4620      	mov	r0, r4
 800a42e:	f002 fabb 	bl	800c9a8 <E131Bridge::Print()>
 800a432:	9b63      	ldr	r3, [sp, #396]	@ 0x18c
 800a434:	4999      	ldr	r1, [pc, #612]	@ (800a69c <main+0x5e0>)
 800a436:	463a      	mov	r2, r7
 800a438:	a873      	add	r0, sp, #460	@ 0x1cc
 800a43a:	f00b ff09 	bl	8016250 <DisplayUdf::SetTitle(char const*, ...)>
 800a43e:	2203      	movs	r2, #3
 800a440:	2102      	movs	r1, #2
 800a442:	a873      	add	r0, sp, #460	@ 0x1cc
 800a444:	f00b ff17 	bl	8016276 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a448:	2207      	movs	r2, #7
 800a44a:	2103      	movs	r1, #3
 800a44c:	a873      	add	r0, sp, #460	@ 0x1cc
 800a44e:	f00b ff12 	bl	8016276 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a452:	2202      	movs	r2, #2
 800a454:	2104      	movs	r1, #4
 800a456:	a873      	add	r0, sp, #460	@ 0x1cc
 800a458:	f00b ff0d 	bl	8016276 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a45c:	2212      	movs	r2, #18
 800a45e:	2105      	movs	r1, #5
 800a460:	a873      	add	r0, sp, #460	@ 0x1cc
 800a462:	f00b ff08 	bl	8016276 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a466:	2213      	movs	r2, #19
 800a468:	2106      	movs	r1, #6
 800a46a:	a873      	add	r0, sp, #460	@ 0x1cc
 800a46c:	f00b ff03 	bl	8016276 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a470:	a83b      	add	r0, sp, #236	@ 0xec
 800a472:	f00b ffcb 	bl	801640c <DisplayUdfParams::DisplayUdfParams()>
 800a476:	a83b      	add	r0, sp, #236	@ 0xec
 800a478:	f00b ffd6 	bl	8016428 <DisplayUdfParams::Load()>
 800a47c:	a973      	add	r1, sp, #460	@ 0x1cc
 800a47e:	a83b      	add	r0, sp, #236	@ 0xec
 800a480:	f00c f8fa 	bl	8016678 <DisplayUdfParams::Set(DisplayUdf*)>
 800a484:	a873      	add	r0, sp, #460	@ 0x1cc
 800a486:	f00b ff11 	bl	80162ac <DisplayUdf::Show()>
 800a48a:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800a48c:	f006 fe70 	bl	8011170 <pixel::pixel_get_type(pixel::Type)>
 800a490:	4605      	mov	r5, r0
 800a492:	9867      	ldr	r0, [sp, #412]	@ 0x19c
 800a494:	9e63      	ldr	r6, [sp, #396]	@ 0x18c
 800a496:	9f6b      	ldr	r7, [sp, #428]	@ 0x1ac
 800a498:	f006 fedc 	bl	8011254 <pixel::pixel_get_map(pixel::Map)>
 800a49c:	4a80      	ldr	r2, [pc, #512]	@ (800a6a0 <main+0x5e4>)
 800a49e:	9600      	str	r6, [sp, #0]
 800a4a0:	e9cd 7001 	strd	r7, r0, [sp, #4]
 800a4a4:	462b      	mov	r3, r5
 800a4a6:	2107      	movs	r1, #7
 800a4a8:	a873      	add	r0, sp, #460	@ 0x1cc
 800a4aa:	f7ff fa7f 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 800a4ae:	f1b8 0f00 	cmp.w	r8, #0
 800a4b2:	d010      	beq.n	800a4d6 <main+0x41a>
 800a4b4:	9879      	ldr	r0, [sp, #484]	@ 0x1e4
 800a4b6:	b118      	cbz	r0, 800a4c0 <main+0x404>
 800a4b8:	6803      	ldr	r3, [r0, #0]
 800a4ba:	2106      	movs	r1, #6
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	4798      	blx	r3
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	f006 ffcd 	bl	8011460 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800a4c6:	4a77      	ldr	r2, [pc, #476]	@ (800a6a4 <main+0x5e8>)
 800a4c8:	f8cd 8000 	str.w	r8, [sp]
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2106      	movs	r1, #6
 800a4d0:	a873      	add	r0, sp, #460	@ 0x1cc
 800a4d2:	f7ff fa6b 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	7fe3      	ldrb	r3, [r4, #31]
 800a4da:	2203      	movs	r2, #3
 800a4dc:	a84e      	add	r0, sp, #312	@ 0x138
 800a4de:	f000 fa79 	bl	800a9d4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)>
 800a4e2:	a821      	add	r0, sp, #132	@ 0x84
 800a4e4:	f000 fd5a 	bl	800af9c <RemoteConfigParams::RemoteConfigParams()>
 800a4e8:	a821      	add	r0, sp, #132	@ 0x84
 800a4ea:	f000 fd5f 	bl	800afac <RemoteConfigParams::Load()>
 800a4ee:	a94e      	add	r1, sp, #312	@ 0x138
 800a4f0:	a821      	add	r0, sp, #132	@ 0x84
 800a4f2:	f000 fe69 	bl	800b1c8 <RemoteConfigParams::Set(RemoteConfig*)>
 800a4f6:	a807      	add	r0, sp, #28
 800a4f8:	f00c fb04 	bl	8016b04 <ConfigStore::Flash()>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d1fa      	bne.n	800a4f6 <main+0x43a>
 800a500:	a808      	add	r0, sp, #32
 800a502:	f009 fae5 	bl	8013ad0 <MDNS::Print()>
 800a506:	4968      	ldr	r1, [pc, #416]	@ (800a6a8 <main+0x5ec>)
 800a508:	2203      	movs	r2, #3
 800a50a:	a873      	add	r0, sp, #460	@ 0x1cc
 800a50c:	f7ff fab4 	bl	8009a78 <Display::TextStatus(char const*, unsigned long)>
 800a510:	4620      	mov	r0, r4
 800a512:	f001 fc89 	bl	800be28 <E131Bridge::Start()>
 800a516:	4965      	ldr	r1, [pc, #404]	@ (800a6ac <main+0x5f0>)
 800a518:	2202      	movs	r2, #2
 800a51a:	a873      	add	r0, sp, #460	@ 0x1cc
 800a51c:	f7ff faac 	bl	8009a78 <Display::TextStatus(char const*, unsigned long)>
 800a520:	2102      	movs	r1, #2
 800a522:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a526:	f00e f9c7 	bl	80188b8 <fwdgt_config>
 800a52a:	2801      	cmp	r0, #1
 800a52c:	bf0c      	ite	eq
 800a52e:	2301      	moveq	r3, #1
 800a530:	2300      	movne	r3, #0
 800a532:	f88d 3234 	strb.w	r3, [sp, #564]	@ 0x234
 800a536:	d101      	bne.n	800a53c <main+0x480>
 800a538:	f00e f9ae 	bl	8018898 <fwdgt_enable>
 800a53c:	4e5c      	ldr	r6, [pc, #368]	@ (800a6b0 <main+0x5f4>)
 800a53e:	af0a      	add	r7, sp, #40	@ 0x28
 800a540:	f00e f9b2 	bl	80188a8 <fwdgt_counter_reload>
 800a544:	f7fe f88e 	bl	8008664 <net::net_handle()>
 800a548:	f7ff fa04 	bl	8009954 <net::dhcp_run()>
 800a54c:	4620      	mov	r0, r4
 800a54e:	f7ff fab1 	bl	8009ab4 <E131Bridge::Run()>
 800a552:	f89d 3144 	ldrb.w	r3, [sp, #324]	@ 0x144
 800a556:	bb1b      	cbnz	r3, 800a5a0 <main+0x4e4>
 800a558:	9d57      	ldr	r5, [sp, #348]	@ 0x15c
 800a55a:	aa0c      	add	r2, sp, #48	@ 0x30
 800a55c:	69a8      	ldr	r0, [r5, #24]
 800a55e:	f105 011c 	add.w	r1, r5, #28
 800a562:	f00a fd31 	bl	8014fc8 <net::tcp_read(long, unsigned char const**, unsigned long&)>
 800a566:	4680      	mov	r8, r0
 800a568:	b170      	cbz	r0, 800a588 <main+0x4cc>
 800a56a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a56c:	4a51      	ldr	r2, [pc, #324]	@ (800a6b4 <main+0x5f8>)
 800a56e:	4952      	ldr	r1, [pc, #328]	@ (800a6b8 <main+0x5fc>)
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	4852      	ldr	r0, [pc, #328]	@ (800a6bc <main+0x600>)
 800a574:	2333      	movs	r3, #51	@ 0x33
 800a576:	f00f ffbf 	bl	801a4f8 <printf>
 800a57a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a57c:	69ea      	ldr	r2, [r5, #28]
 800a57e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a582:	4641      	mov	r1, r8
 800a584:	f001 faac 	bl	800bae0 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)>
 800a588:	494d      	ldr	r1, [pc, #308]	@ (800a6c0 <main+0x604>)
 800a58a:	9853      	ldr	r0, [sp, #332]	@ 0x14c
 800a58c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a58e:	aa54      	add	r2, sp, #336	@ 0x150
 800a590:	f00a fde6 	bl	8015160 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a594:	2803      	cmp	r0, #3
 800a596:	9055      	str	r0, [sp, #340]	@ 0x154
 800a598:	d902      	bls.n	800a5a0 <main+0x4e4>
 800a59a:	a84e      	add	r0, sp, #312	@ 0x138
 800a59c:	f000 fbda 	bl	800ad54 <RemoteConfig::HandleRequest()>
 800a5a0:	a807      	add	r0, sp, #28
 800a5a2:	f00c faaf 	bl	8016b04 <ConfigStore::Flash()>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800a6f0 <main+0x634>
 800a5ac:	b18b      	cbz	r3, 800a5d2 <main+0x516>
 800a5ae:	6830      	ldr	r0, [r6, #0]
 800a5b0:	f007 fbd8 	bl	8011d64 <WS28xxMulti::IsUpdating()>
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	b960      	cbnz	r0, 800a5d2 <main+0x516>
 800a5b8:	f8d8 b000 	ldr.w	fp, [r8]
 800a5bc:	f8df a134 	ldr.w	sl, [pc, #308]	@ 800a6f4 <main+0x638>
 800a5c0:	4681      	mov	r9, r0
 800a5c2:	f8da 3000 	ldr.w	r3, [sl]
 800a5c6:	4599      	cmp	r9, r3
 800a5c8:	d351      	bcc.n	800a66e <main+0x5b2>
 800a5ca:	b115      	cbz	r5, 800a5d2 <main+0x516>
 800a5cc:	6830      	ldr	r0, [r6, #0]
 800a5ce:	f007 fad7 	bl	8011b80 <WS28xxMulti::Update()>
 800a5d2:	4d3c      	ldr	r5, [pc, #240]	@ (800a6c4 <main+0x608>)
 800a5d4:	483c      	ldr	r0, [pc, #240]	@ (800a6c8 <main+0x60c>)
 800a5d6:	4b3d      	ldr	r3, [pc, #244]	@ (800a6cc <main+0x610>)
 800a5d8:	4a3d      	ldr	r2, [pc, #244]	@ (800a6d0 <main+0x614>)
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f00a fdbf 	bl	8015160 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a5e2:	4b3c      	ldr	r3, [pc, #240]	@ (800a6d4 <main+0x618>)
 800a5e4:	280b      	cmp	r0, #11
 800a5e6:	6018      	str	r0, [r3, #0]
 800a5e8:	d90a      	bls.n	800a600 <main+0x544>
 800a5ea:	682b      	ldr	r3, [r5, #0]
 800a5ec:	789a      	ldrb	r2, [r3, #2]
 800a5ee:	f012 0f78 	tst.w	r2, #120	@ 0x78
 800a5f2:	d105      	bne.n	800a600 <main+0x544>
 800a5f4:	8899      	ldrh	r1, [r3, #4]
 800a5f6:	ba49      	rev16	r1, r1
 800a5f8:	b289      	uxth	r1, r1
 800a5fa:	a808      	add	r0, sp, #32
 800a5fc:	f009 f99a 	bl	8013934 <MDNS::HandleQuestions(unsigned long)>
 800a600:	4d35      	ldr	r5, [pc, #212]	@ (800a6d8 <main+0x61c>)
 800a602:	4836      	ldr	r0, [pc, #216]	@ (800a6dc <main+0x620>)
 800a604:	4a36      	ldr	r2, [pc, #216]	@ (800a6e0 <main+0x624>)
 800a606:	6800      	ldr	r0, [r0, #0]
 800a608:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800a60c:	4629      	mov	r1, r5
 800a60e:	f00a fda7 	bl	8015160 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a612:	2841      	cmp	r0, #65	@ 0x41
 800a614:	d911      	bls.n	800a63a <main+0x57e>
 800a616:	a8db      	add	r0, sp, #876	@ 0x36c
 800a618:	f003 fc4c 	bl	800deb4 <LLRPDevice::DumpCommon()>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	f8d3 302a 	ldr.w	r3, [r3, #42]	@ 0x2a
 800a622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a626:	d02c      	beq.n	800a682 <main+0x5c6>
 800a628:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a62c:	d064      	beq.n	800a6f8 <main+0x63c>
 800a62e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a632:	d102      	bne.n	800a63a <main+0x57e>
 800a634:	a8db      	add	r0, sp, #876	@ 0x36c
 800a636:	f003 fb55 	bl	800dce4 <LLRPDevice::HandleRequestMessage()>
 800a63a:	9a77      	ldr	r2, [sp, #476]	@ 0x1dc
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	d065      	beq.n	800a70c <main+0x650>
 800a640:	f89d 31e1 	ldrb.w	r3, [sp, #481]	@ 0x1e1
 800a644:	2b00      	cmp	r3, #0
 800a646:	d15b      	bne.n	800a700 <main+0x644>
 800a648:	f8d8 3000 	ldr.w	r3, [r8]
 800a64c:	9974      	ldr	r1, [sp, #464]	@ 0x1d0
 800a64e:	1a5b      	subs	r3, r3, r1
 800a650:	429a      	cmp	r2, r3
 800a652:	d25b      	bcs.n	800a70c <main+0x650>
 800a654:	2101      	movs	r1, #1
 800a656:	a873      	add	r0, sp, #460	@ 0x1cc
 800a658:	f7ff fa1c 	bl	8009a94 <Display::SetSleep(bool)>
 800a65c:	e056      	b.n	800a70c <main+0x650>
 800a65e:	ab32      	add	r3, sp, #200	@ 0xc8
 800a660:	a9bc      	add	r1, sp, #752	@ 0x2f0
 800a662:	e6b5      	b.n	800a3d0 <main+0x314>
 800a664:	f813 5b01 	ldrb.w	r5, [r3], #1
 800a668:	f801 5b01 	strb.w	r5, [r1], #1
 800a66c:	e62f      	b.n	800a2ce <main+0x212>
 800a66e:	4649      	mov	r1, r9
 800a670:	465a      	mov	r2, fp
 800a672:	a80a      	add	r0, sp, #40	@ 0x28
 800a674:	f007 f8d6 	bl	8011824 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>
 800a678:	4328      	orrs	r0, r5
 800a67a:	b2c5      	uxtb	r5, r0
 800a67c:	f109 0901 	add.w	r9, r9, #1
 800a680:	e79f      	b.n	800a5c2 <main+0x506>
 800a682:	4b18      	ldr	r3, [pc, #96]	@ (800a6e4 <main+0x628>)
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	4a18      	ldr	r2, [pc, #96]	@ (800a6e8 <main+0x62c>)
 800a688:	490b      	ldr	r1, [pc, #44]	@ (800a6b8 <main+0x5fc>)
 800a68a:	4818      	ldr	r0, [pc, #96]	@ (800a6ec <main+0x630>)
 800a68c:	2360      	movs	r3, #96	@ 0x60
 800a68e:	f00f ff33 	bl	801a4f8 <printf>
 800a692:	e7d2      	b.n	800a63a <main+0x57e>
 800a694:	2000e2cc 	andcs	lr, r0, ip, asr #5
 800a698:	00040100 	andeq	r0, r4, r0, lsl #2
 800a69c:	0801b15d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, ip, sp, pc}
 800a6a0:	0801b16e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, ip, sp, pc}
 800a6a4:	0801b17b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, ip, sp, pc}
 800a6a8:	0801ea3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, sp, lr, pc}
 800a6ac:	0801ea29 	stmdaeq	r1, {r0, r3, r5, r9, fp, sp, lr, pc}
 800a6b0:	2000dfac 	andcs	sp, r0, ip, lsr #31
 800a6b4:	0801b181 	stmdaeq	r1, {r0, r7, r8, ip, sp, pc}
 800a6b8:	0801b1ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, ip, sp, pc}
 800a6bc:	0801b1af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, ip, sp, pc}
 800a6c0:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a6c4:	2000dfc0 	andcs	sp, r0, r0, asr #31
 800a6c8:	2000dfd0 	ldrdcs	sp, [r0], -r0
 800a6cc:	2000dfc8 	andcs	sp, r0, r8, asr #31
 800a6d0:	2000dfcc 	andcs	sp, r0, ip, asr #31
 800a6d4:	2000dfc4 	andcs	sp, r0, r4, asr #31
 800a6d8:	2000d3f4 	strdcs	sp, [r0], -r4
 800a6dc:	2000d3fc 	strdcs	sp, [r0], -ip
 800a6e0:	2000d3f8 	strdcs	sp, [r0], -r8
 800a6e4:	0801b1ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, ip, sp, pc}
 800a6e8:	0801af15 	stmdaeq	r1, {r0, r2, r4, r8, r9, sl, fp, sp, pc}
 800a6ec:	0801b1d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, ip, sp, pc}
 800a6f0:	2001bcc0 	andcs	fp, r1, r0, asr #25
 800a6f4:	2000dfa8 	andcs	sp, r0, r8, lsr #31
 800a6f8:	a8db      	add	r0, sp, #876	@ 0x36c
 800a6fa:	f003 fb89 	bl	800de10 <LLRPDevice::HandleRdmCommand()>
 800a6fe:	e79c      	b.n	800a63a <main+0x57e>
 800a700:	4b0e      	ldr	r3, [pc, #56]	@ (800a73c <main+0x680>)
 800a702:	f8d3 1810 	ldr.w	r1, [r3, #2064]	@ 0x810
 800a706:	f411 5100 	ands.w	r1, r1, #8192	@ 0x2000
 800a70a:	d0a4      	beq.n	800a656 <main+0x59a>
 800a70c:	f8d8 9000 	ldr.w	r9, [r8]
 800a710:	ad89      	add	r5, sp, #548	@ 0x224
 800a712:	f04f 0800 	mov.w	r8, #0
 800a716:	9bb1      	ldr	r3, [sp, #708]	@ 0x2c4
 800a718:	4598      	cmp	r8, r3
 800a71a:	d302      	bcc.n	800a722 <main+0x666>
 800a71c:	f00d fc94 	bl	8018048 <stack_debug_run()>
 800a720:	e70e      	b.n	800a540 <main+0x484>
 800a722:	6a2b      	ldr	r3, [r5, #32]
 800a724:	4599      	cmp	r9, r3
 800a726:	d304      	bcc.n	800a732 <main+0x676>
 800a728:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a72a:	4798      	blx	r3
 800a72c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a72e:	444b      	add	r3, r9
 800a730:	622b      	str	r3, [r5, #32]
 800a732:	f108 0801 	add.w	r8, r8, #1
 800a736:	3510      	adds	r5, #16
 800a738:	e7ed      	b.n	800a716 <main+0x65a>
 800a73a:	bf00      	nop
 800a73c:	40020000 	andmi	r0, r2, r0

0800a740 <rdm::device::responder::factorydefaults()>:
 800a740:	b510      	push	{r4, lr}
 800a742:	4b0d      	ldr	r3, [pc, #52]	@ (800a778 <rdm::device::responder::factorydefaults()+0x38>)
 800a744:	4c0d      	ldr	r4, [pc, #52]	@ (800a77c <rdm::device::responder::factorydefaults()+0x3c>)
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	b086      	sub	sp, #24
 800a74a:	2100      	movs	r1, #0
 800a74c:	f000 f996 	bl	800aa7c <RemoteConfig::SetDisable(bool)>
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	2109      	movs	r1, #9
 800a754:	f00c f96e 	bl	8016a34 <ConfigStore::ResetSetList(configstore::Store)>
 800a758:	2301      	movs	r3, #1
 800a75a:	2100      	movs	r1, #0
 800a75c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	f88d 3017 	strb.w	r3, [sp, #23]
 800a766:	6820      	ldr	r0, [r4, #0]
 800a768:	f10d 0317 	add.w	r3, sp, #23
 800a76c:	2214      	movs	r2, #20
 800a76e:	f00c f973 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a772:	b006      	add	sp, #24
 800a774:	bd10      	pop	{r4, pc}
 800a776:	bf00      	nop
 800a778:	2000cd30 	andcs	ip, r0, r0, lsr sp
 800a77c:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800a780 <RDMSoftwareVersion::GetVersion()>:
 800a780:	4800      	ldr	r0, [pc, #0]	@ (800a784 <RDMSoftwareVersion::GetVersion()+0x4>)
 800a782:	4770      	bx	lr
 800a784:	0801bf88 	stmdaeq	r1, {r3, r7, r8, r9, sl, fp, ip, sp, pc}

0800a788 <RDMSoftwareVersion::GetVersionLength()>:
 800a788:	2003      	movs	r0, #3
 800a78a:	4770      	bx	lr

0800a78c <RDMSoftwareVersion::GetVersionId()>:
 800a78c:	4800      	ldr	r0, [pc, #0]	@ (800a790 <RDMSoftwareVersion::GetVersionId()+0x4>)
 800a78e:	4770      	bx	lr
 800a790:	66f19818 	usatvs	r9, #17, r8, lsl #16

0800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>:
 800a794:	b430      	push	{r4, r5}
 800a796:	4d05      	ldr	r5, [pc, #20]	@ (800a7ac <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]+0x18>)
 800a798:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800a79c:	682d      	ldr	r5, [r5, #0]
 800a79e:	b11d      	cbz	r5, 800a7a8 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]+0x14>
 800a7a0:	9402      	str	r4, [sp, #8]
 800a7a2:	bc30      	pop	{r4, r5}
 800a7a4:	f00a bcfa 	b.w	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800a7a8:	bc30      	pop	{r4, r5}
 800a7aa:	4770      	bx	lr
 800a7ac:	2000e220 	andcs	lr, r0, r0, lsr #4

0800a7b0 <RemoteConfig::HandleDisplayGet()>:
 800a7b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e8 <RemoteConfig::HandleDisplayGet()+0x38>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7b6:	7d59      	ldrb	r1, [r3, #21]
 800a7b8:	4d0c      	ldr	r5, [pc, #48]	@ (800a7ec <RemoteConfig::HandleDisplayGet()+0x3c>)
 800a7ba:	4a0d      	ldr	r2, [pc, #52]	@ (800a7f0 <RemoteConfig::HandleDisplayGet()+0x40>)
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <RemoteConfig::HandleDisplayGet()+0x44>)
 800a7be:	4604      	mov	r4, r0
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	bf08      	it	eq
 800a7c4:	4613      	moveq	r3, r2
 800a7c6:	6828      	ldr	r0, [r5, #0]
 800a7c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a7f8 <RemoteConfig::HandleDisplayGet()+0x48>)
 800a7ca:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a7ce:	f00f febb 	bl	801a548 <snprintf>
 800a7d2:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	4602      	mov	r2, r0
 800a7da:	69a3      	ldr	r3, [r4, #24]
 800a7dc:	6829      	ldr	r1, [r5, #0]
 800a7de:	6960      	ldr	r0, [r4, #20]
 800a7e0:	f7ff ffd8 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a7e4:	b003      	add	sp, #12
 800a7e6:	bd30      	pop	{r4, r5, pc}
 800a7e8:	2000e2e4 	andcs	lr, r0, r4, ror #5
 800a7ec:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a7f0:	0801b205 	stmdaeq	r1, {r0, r2, r9, ip, sp, pc}
 800a7f4:	0801b34c 	stmdaeq	r1, {r2, r3, r6, r8, r9, ip, sp, pc}
 800a7f8:	0801b208 	stmdaeq	r1, {r3, r9, ip, sp, pc}

0800a7fc <RemoteConfig::HandleUptime()>:
 800a7fc:	7bc3      	ldrb	r3, [r0, #15]
 800a7fe:	b1ab      	cbz	r3, 800a82c <RemoteConfig::HandleUptime()+0x30>
 800a800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a802:	4b0b      	ldr	r3, [pc, #44]	@ (800a830 <RemoteConfig::HandleUptime()+0x34>)
 800a804:	4d0b      	ldr	r5, [pc, #44]	@ (800a834 <RemoteConfig::HandleUptime()+0x38>)
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4a0b      	ldr	r2, [pc, #44]	@ (800a838 <RemoteConfig::HandleUptime()+0x3c>)
 800a80a:	4604      	mov	r4, r0
 800a80c:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a810:	6828      	ldr	r0, [r5, #0]
 800a812:	f00f fe99 	bl	801a548 <snprintf>
 800a816:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	4602      	mov	r2, r0
 800a81e:	69a3      	ldr	r3, [r4, #24]
 800a820:	6829      	ldr	r1, [r5, #0]
 800a822:	6960      	ldr	r0, [r4, #20]
 800a824:	f7ff ffb6 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a828:	b003      	add	sp, #12
 800a82a:	bd30      	pop	{r4, r5, pc}
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	2001bcb8 			@ <UNDEFINED> instruction: 0x2001bcb8
 800a834:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a838:	0801b214 	stmdaeq	r1, {r2, r4, r9, ip, sp, pc}

0800a83c <RemoteConfig::HandleVersion()>:
 800a83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a83e:	4d0a      	ldr	r5, [pc, #40]	@ (800a868 <RemoteConfig::HandleVersion()+0x2c>)
 800a840:	4b0a      	ldr	r3, [pc, #40]	@ (800a86c <RemoteConfig::HandleVersion()+0x30>)
 800a842:	4a0b      	ldr	r2, [pc, #44]	@ (800a870 <RemoteConfig::HandleVersion()+0x34>)
 800a844:	4604      	mov	r4, r0
 800a846:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a84a:	6828      	ldr	r0, [r5, #0]
 800a84c:	f00f fe7c 	bl	801a548 <snprintf>
 800a850:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	4602      	mov	r2, r0
 800a858:	69a3      	ldr	r3, [r4, #24]
 800a85a:	6829      	ldr	r1, [r5, #0]
 800a85c:	6960      	ldr	r0, [r4, #20]
 800a85e:	f7ff ff99 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a862:	b003      	add	sp, #12
 800a864:	bd30      	pop	{r4, r5, pc}
 800a866:	bf00      	nop
 800a868:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a86c:	2000e378 	andcs	lr, r0, r8, ror r3
 800a870:	0801b221 	stmdaeq	r1, {r0, r5, r9, ip, sp, pc}

0800a874 <RemoteConfig::HandleTftpGet()>:
 800a874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a876:	4604      	mov	r4, r0
 800a878:	4d0d      	ldr	r5, [pc, #52]	@ (800a8b0 <RemoteConfig::HandleTftpGet()+0x3c>)
 800a87a:	f000 fd45 	bl	800b308 <RemoteConfig::PlatformHandleTftpGet()>
 800a87e:	f894 1020 	ldrb.w	r1, [r4, #32]
 800a882:	4a0c      	ldr	r2, [pc, #48]	@ (800a8b4 <RemoteConfig::HandleTftpGet()+0x40>)
 800a884:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b8 <RemoteConfig::HandleTftpGet()+0x44>)
 800a886:	6828      	ldr	r0, [r5, #0]
 800a888:	2900      	cmp	r1, #0
 800a88a:	bf18      	it	ne
 800a88c:	4613      	movne	r3, r2
 800a88e:	4a0b      	ldr	r2, [pc, #44]	@ (800a8bc <RemoteConfig::HandleTftpGet()+0x48>)
 800a890:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a894:	f00f fe58 	bl	801a548 <snprintf>
 800a898:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	4602      	mov	r2, r0
 800a8a0:	69a3      	ldr	r3, [r4, #24]
 800a8a2:	6829      	ldr	r1, [r5, #0]
 800a8a4:	6960      	ldr	r0, [r4, #20]
 800a8a6:	f7ff ff75 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a8aa:	b003      	add	sp, #12
 800a8ac:	bd30      	pop	{r4, r5, pc}
 800a8ae:	bf00      	nop
 800a8b0:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a8b4:	0801b205 	stmdaeq	r1, {r0, r2, r9, ip, sp, pc}
 800a8b8:	0801b34c 	stmdaeq	r1, {r2, r3, r6, r8, r9, ip, sp, pc}
 800a8bc:	0801b22c 	stmdaeq	r1, {r2, r3, r5, r9, ip, sp, pc}

0800a8c0 <RemoteConfig::HandleList()>:
 800a8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c4:	6801      	ldr	r1, [r0, #0]
 800a8c6:	4a23      	ldr	r2, [pc, #140]	@ (800a954 <RemoteConfig::HandleList()+0x94>)
 800a8c8:	4b23      	ldr	r3, [pc, #140]	@ (800a958 <RemoteConfig::HandleList()+0x98>)
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	2012      	movs	r0, #18
 800a8ce:	fb00 2201 	mla	r2, r0, r1, r2
 800a8d2:	6860      	ldr	r0, [r4, #4]
 800a8d4:	4921      	ldr	r1, [pc, #132]	@ (800a95c <RemoteConfig::HandleList()+0x9c>)
 800a8d6:	681d      	ldr	r5, [r3, #0]
 800a8d8:	4b21      	ldr	r3, [pc, #132]	@ (800a960 <RemoteConfig::HandleList()+0xa0>)
 800a8da:	f04f 0e0c 	mov.w	lr, #12
 800a8de:	fb0e 1100 	mla	r1, lr, r0, r1
 800a8e2:	4820      	ldr	r0, [pc, #128]	@ (800a964 <RemoteConfig::HandleList()+0xa4>)
 800a8e4:	681e      	ldr	r6, [r3, #0]
 800a8e6:	f890 8009 	ldrb.w	r8, [r0, #9]
 800a8ea:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800a8ee:	b2f3      	uxtb	r3, r6
 800a8f0:	f3c6 2707 	ubfx	r7, r6, #8, #8
 800a8f4:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a8f8:	b088      	sub	sp, #32
 800a8fa:	3507      	adds	r5, #7
 800a8fc:	0e36      	lsrs	r6, r6, #24
 800a8fe:	f1b8 0f00 	cmp.w	r8, #0
 800a902:	d019      	beq.n	800a938 <RemoteConfig::HandleList()+0x78>
 800a904:	3009      	adds	r0, #9
 800a906:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800a90a:	e9cd e005 	strd	lr, r0, [sp, #20]
 800a90e:	e9cd c601 	strd	ip, r6, [sp, #4]
 800a912:	4a15      	ldr	r2, [pc, #84]	@ (800a968 <RemoteConfig::HandleList()+0xa8>)
 800a914:	9700      	str	r7, [sp, #0]
 800a916:	f240 5184 	movw	r1, #1412	@ 0x584
 800a91a:	4628      	mov	r0, r5
 800a91c:	f00f fe14 	bl	801a548 <snprintf>
 800a920:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	4602      	mov	r2, r0
 800a928:	69a3      	ldr	r3, [r4, #24]
 800a92a:	6960      	ldr	r0, [r4, #20]
 800a92c:	4629      	mov	r1, r5
 800a92e:	f7ff ff31 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a932:	b008      	add	sp, #32
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 800a93c:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800a940:	e9cd 7c00 	strd	r7, ip, [sp]
 800a944:	4a09      	ldr	r2, [pc, #36]	@ (800a96c <RemoteConfig::HandleList()+0xac>)
 800a946:	f240 5184 	movw	r1, #1412	@ 0x584
 800a94a:	4628      	mov	r0, r5
 800a94c:	f00f fdfc 	bl	801a548 <snprintf>
 800a950:	e7e6      	b.n	800a920 <RemoteConfig::HandleList()+0x60>
 800a952:	bf00      	nop
 800a954:	0801c028 	stmdaeq	r1, {r3, r5, lr, pc}
 800a958:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a95c:	0801bf8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, sp, pc}
 800a960:	2000e220 	andcs	lr, r0, r0, lsr #4
 800a964:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800a968:	0801b235 	stmdaeq	r1, {r0, r2, r4, r5, r9, ip, sp, pc}
 800a96c:	0801b24e 	stmdaeq	r1, {r1, r2, r3, r6, r9, ip, sp, pc}

0800a970 <RemoteConfig::HandleDisplaySet()>:
 800a970:	b508      	push	{r3, lr}
 800a972:	69c3      	ldr	r3, [r0, #28]
 800a974:	2b09      	cmp	r3, #9
 800a976:	d10a      	bne.n	800a98e <RemoteConfig::HandleDisplaySet()+0x1e>
 800a978:	4b05      	ldr	r3, [pc, #20]	@ (800a990 <RemoteConfig::HandleDisplaySet()+0x20>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	7a59      	ldrb	r1, [r3, #9]
 800a97e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a982:	4259      	negs	r1, r3
 800a984:	4159      	adcs	r1, r3
 800a986:	4b03      	ldr	r3, [pc, #12]	@ (800a994 <RemoteConfig::HandleDisplaySet()+0x24>)
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	f7ff f883 	bl	8009a94 <Display::SetSleep(bool)>
 800a98e:	bd08      	pop	{r3, pc}
 800a990:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a994:	2000e2e4 	andcs	lr, r0, r4, ror #5

0800a998 <RemoteConfig::HandleTftpSet()>:
 800a998:	69c3      	ldr	r3, [r0, #28]
 800a99a:	2b06      	cmp	r3, #6
 800a99c:	d115      	bne.n	800a9ca <RemoteConfig::HandleTftpSet()+0x32>
 800a99e:	b510      	push	{r4, lr}
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a9cc <RemoteConfig::HandleTftpSet()+0x34>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	799b      	ldrb	r3, [r3, #6]
 800a9a6:	2b30      	cmp	r3, #48	@ 0x30
 800a9a8:	bf14      	ite	ne
 800a9aa:	2301      	movne	r3, #1
 800a9ac:	2300      	moveq	r3, #0
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	f880 3020 	strb.w	r3, [r0, #32]
 800a9b4:	d004      	beq.n	800a9c0 <RemoteConfig::HandleTftpSet()+0x28>
 800a9b6:	4b06      	ldr	r3, [pc, #24]	@ (800a9d0 <RemoteConfig::HandleTftpSet()+0x38>)
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	f7ff f86a 	bl	8009a94 <Display::SetSleep(bool)>
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c6:	f000 bc7b 	b.w	800b2c0 <RemoteConfig::PlatformHandleTftpSet()>
 800a9ca:	4770      	bx	lr
 800a9cc:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a9d0:	2000e2e4 	andcs	lr, r0, r4, ror #5

0800a9d4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)>:
 800a9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9d6:	2500      	movs	r5, #0
 800a9d8:	4604      	mov	r4, r0
 800a9da:	e9c0 1200 	strd	r1, r2, [r0]
 800a9de:	6083      	str	r3, [r0, #8]
 800a9e0:	60c5      	str	r5, [r0, #12]
 800a9e2:	8205      	strh	r5, [r0, #16]
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9e8:	e9c4 0505 	strd	r0, r5, [r4, #20]
 800a9ec:	4f13      	ldr	r7, [pc, #76]	@ (800aa3c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x68>)
 800a9ee:	4814      	ldr	r0, [pc, #80]	@ (800aa40 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x6c>)
 800a9f0:	4e14      	ldr	r6, [pc, #80]	@ (800aa44 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x70>)
 800a9f2:	6004      	str	r4, [r0, #0]
 800a9f4:	6978      	ldr	r0, [r7, #20]
 800a9f6:	6030      	str	r0, [r6, #0]
 800a9f8:	8b38      	ldrh	r0, [r7, #24]
 800a9fa:	61e5      	str	r5, [r4, #28]
 800a9fc:	f884 5020 	strb.w	r5, [r4, #32]
 800aa00:	6265      	str	r5, [r4, #36]	@ 0x24
 800aa02:	80b0      	strh	r0, [r6, #4]
 800aa04:	f642 1005 	movw	r0, #10501	@ 0x2905
 800aa08:	71b1      	strb	r1, [r6, #6]
 800aa0a:	71f2      	strb	r2, [r6, #7]
 800aa0c:	7233      	strb	r3, [r6, #8]
 800aa0e:	7275      	strb	r5, [r6, #9]
 800aa10:	f00a fb6c 	bl	80150ec <net::udp_begin(unsigned short)>
 800aa14:	6160      	str	r0, [r4, #20]
 800aa16:	480c      	ldr	r0, [pc, #48]	@ (800aa48 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x74>)
 800aa18:	9500      	str	r5, [sp, #0]
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4629      	mov	r1, r5
 800aa20:	6800      	ldr	r0, [r0, #0]
 800aa22:	f008 ff27 	bl	8013874 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800aa26:	2020      	movs	r0, #32
 800aa28:	f00f ffbc 	bl	801a9a4 <operator new(unsigned int)>
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	f000 fc79 	bl	800b324 <HttpDaemon::HttpDaemon()>
 800aa32:	4620      	mov	r0, r4
 800aa34:	6265      	str	r5, [r4, #36]	@ 0x24
 800aa36:	b003      	add	sp, #12
 800aa38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	2000e220 	andcs	lr, r0, r0, lsr #4
 800aa40:	2000cd30 	andcs	ip, r0, r0, lsr sp
 800aa44:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800aa48:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc

0800aa4c <RemoteConfig::GetStringNode() const>:
 800aa4c:	4b03      	ldr	r3, [pc, #12]	@ (800aa5c <RemoteConfig::GetStringNode() const+0x10>)
 800aa4e:	7998      	ldrb	r0, [r3, #6]
 800aa50:	4b03      	ldr	r3, [pc, #12]	@ (800aa60 <RemoteConfig::GetStringNode() const+0x14>)
 800aa52:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800aa56:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800aa5a:	4770      	bx	lr
 800aa5c:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800aa60:	0801c028 	stmdaeq	r1, {r3, r5, lr, pc}

0800aa64 <RemoteConfig::GetStringOutput() const>:
 800aa64:	4b03      	ldr	r3, [pc, #12]	@ (800aa74 <RemoteConfig::GetStringOutput() const+0x10>)
 800aa66:	79d8      	ldrb	r0, [r3, #7]
 800aa68:	4b03      	ldr	r3, [pc, #12]	@ (800aa78 <RemoteConfig::GetStringOutput() const+0x14>)
 800aa6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800aa6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa72:	4770      	bx	lr
 800aa74:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800aa78:	0801bf8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, sp, pc}

0800aa7c <RemoteConfig::SetDisable(bool)>:
 800aa7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa7e:	7b06      	ldrb	r6, [r0, #12]
 800aa80:	4605      	mov	r5, r0
 800aa82:	b181      	cbz	r1, 800aaa6 <RemoteConfig::SetDisable(bool)+0x2a>
 800aa84:	b96e      	cbnz	r6, 800aaa2 <RemoteConfig::SetDisable(bool)+0x26>
 800aa86:	f642 1005 	movw	r0, #10501	@ 0x2905
 800aa8a:	f00a fb45 	bl	8015118 <net::udp_end(unsigned short)>
 800aa8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa92:	616b      	str	r3, [r5, #20]
 800aa94:	4b0d      	ldr	r3, [pc, #52]	@ (800aacc <RemoteConfig::SetDisable(bool)+0x50>)
 800aa96:	4631      	mov	r1, r6
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	f008 fecf 	bl	801383c <MDNS::ServiceRecordDelete(mdns::Services)>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	732b      	strb	r3, [r5, #12]
 800aaa2:	b002      	add	sp, #8
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	2e00      	cmp	r6, #0
 800aaa8:	d0fb      	beq.n	800aaa2 <RemoteConfig::SetDisable(bool)+0x26>
 800aaaa:	f642 1005 	movw	r0, #10501	@ 0x2905
 800aaae:	460c      	mov	r4, r1
 800aab0:	f00a fb1c 	bl	80150ec <net::udp_begin(unsigned short)>
 800aab4:	6168      	str	r0, [r5, #20]
 800aab6:	4805      	ldr	r0, [pc, #20]	@ (800aacc <RemoteConfig::SetDisable(bool)+0x50>)
 800aab8:	9400      	str	r4, [sp, #0]
 800aaba:	6800      	ldr	r0, [r0, #0]
 800aabc:	4623      	mov	r3, r4
 800aabe:	4622      	mov	r2, r4
 800aac0:	4621      	mov	r1, r4
 800aac2:	f008 fed7 	bl	8013874 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800aac6:	732c      	strb	r4, [r5, #12]
 800aac8:	e7eb      	b.n	800aaa2 <RemoteConfig::SetDisable(bool)+0x26>
 800aaca:	bf00      	nop
 800aacc:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc

0800aad0 <RemoteConfig::SetDisplayName(char const*)>:
 800aad0:	b508      	push	{r3, lr}
 800aad2:	4809      	ldr	r0, [pc, #36]	@ (800aaf8 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800aad4:	3901      	subs	r1, #1
 800aad6:	2217      	movs	r2, #23
 800aad8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aadc:	b11b      	cbz	r3, 800aae6 <RemoteConfig::SetDisplayName(char const*)+0x16>
 800aade:	3a01      	subs	r2, #1
 800aae0:	f800 3b01 	strb.w	r3, [r0], #1
 800aae4:	d1f8      	bne.n	800aad8 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800aae6:	2100      	movs	r1, #0
 800aae8:	f00f fa22 	bl	8019f30 <memset>
 800aaec:	4b03      	ldr	r3, [pc, #12]	@ (800aafc <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2020 	strb.w	r2, [r3, #32]
 800aaf4:	bd08      	pop	{r3, pc}
 800aaf6:	bf00      	nop
 800aaf8:	2000cd15 	andcs	ip, r0, r5, lsl sp
 800aafc:	2000cd0c 	andcs	ip, r0, ip, lsl #26

0800ab00 <RemoteConfig::HandleGet(void*, unsigned long)>:
 800ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab02:	4f29      	ldr	r7, [pc, #164]	@ (800aba8 <RemoteConfig::HandleGet(void*, unsigned long)+0xa8>)
 800ab04:	b085      	sub	sp, #20
 800ab06:	4604      	mov	r4, r0
 800ab08:	4616      	mov	r6, r2
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	b9a9      	cbnz	r1, 800ab3a <RemoteConfig::HandleGet(void*, unsigned long)+0x3a>
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
 800ab14:	aa03      	add	r2, sp, #12
 800ab16:	3105      	adds	r1, #5
 800ab18:	9303      	str	r3, [sp, #12]
 800ab1a:	f000 fba5 	bl	800b268 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800ab1e:	1e03      	subs	r3, r0, #0
 800ab20:	da1b      	bge.n	800ab5a <RemoteConfig::HandleGet(void*, unsigned long)+0x5a>
 800ab22:	f642 1305 	movw	r3, #10501	@ 0x2905
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	69a3      	ldr	r3, [r4, #24]
 800ab2a:	4920      	ldr	r1, [pc, #128]	@ (800abac <RemoteConfig::HandleGet(void*, unsigned long)+0xac>)
 800ab2c:	6960      	ldr	r0, [r4, #20]
 800ab2e:	220b      	movs	r2, #11
 800ab30:	f7ff fe30 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800ab34:	200c      	movs	r0, #12
 800ab36:	b005      	add	sp, #20
 800ab38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab3a:	9203      	str	r2, [sp, #12]
 800ab3c:	aa03      	add	r2, sp, #12
 800ab3e:	6039      	str	r1, [r7, #0]
 800ab40:	f000 fb92 	bl	800b268 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800ab44:	1e03      	subs	r3, r0, #0
 800ab46:	da08      	bge.n	800ab5a <RemoteConfig::HandleGet(void*, unsigned long)+0x5a>
 800ab48:	2e0b      	cmp	r6, #11
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	4917      	ldr	r1, [pc, #92]	@ (800abac <RemoteConfig::HandleGet(void*, unsigned long)+0xac>)
 800ab4e:	bf28      	it	cs
 800ab50:	220b      	movcs	r2, #11
 800ab52:	4628      	mov	r0, r5
 800ab54:	f00f f9ca 	bl	8019eec <memcpy>
 800ab58:	e7ec      	b.n	800ab34 <RemoteConfig::HandleGet(void*, unsigned long)+0x34>
 800ab5a:	4915      	ldr	r1, [pc, #84]	@ (800abb0 <RemoteConfig::HandleGet(void*, unsigned long)+0xb0>)
 800ab5c:	2218      	movs	r2, #24
 800ab5e:	4353      	muls	r3, r2
 800ab60:	18ca      	adds	r2, r1, r3
 800ab62:	58cb      	ldr	r3, [r1, r3]
 800ab64:	6852      	ldr	r2, [r2, #4]
 800ab66:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800ab6a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ab6e:	07d2      	lsls	r2, r2, #31
 800ab70:	bf48      	it	mi
 800ab72:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800ab76:	a903      	add	r1, sp, #12
 800ab78:	bf48      	it	mi
 800ab7a:	58d3      	ldrmi	r3, [r2, r3]
 800ab7c:	4798      	blx	r3
 800ab7e:	b955      	cbnz	r5, 800ab96 <RemoteConfig::HandleGet(void*, unsigned long)+0x96>
 800ab80:	f642 1305 	movw	r3, #10501	@ 0x2905
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	69a3      	ldr	r3, [r4, #24]
 800ab88:	9a03      	ldr	r2, [sp, #12]
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	6960      	ldr	r0, [r4, #20]
 800ab8e:	f7ff fe01 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800ab92:	9803      	ldr	r0, [sp, #12]
 800ab94:	e7cf      	b.n	800ab36 <RemoteConfig::HandleGet(void*, unsigned long)+0x36>
 800ab96:	9a03      	ldr	r2, [sp, #12]
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	42b2      	cmp	r2, r6
 800ab9c:	bf28      	it	cs
 800ab9e:	4632      	movcs	r2, r6
 800aba0:	4628      	mov	r0, r5
 800aba2:	f00f f9ae 	bl	8019f02 <memmove>
 800aba6:	e7f4      	b.n	800ab92 <RemoteConfig::HandleGet(void*, unsigned long)+0x92>
 800aba8:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800abac:	0801b264 	stmdaeq	r1, {r2, r5, r6, r9, ip, sp, pc}
 800abb0:	0801c1dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, lr, pc}

0800abb4 <RemoteConfig::HandleGetNoParams()>:
 800abb4:	2200      	movs	r2, #0
 800abb6:	4611      	mov	r1, r2
 800abb8:	f7ff bfa2 	b.w	800ab00 <RemoteConfig::HandleGet(void*, unsigned long)>

0800abbc <RemoteConfig::HandleGetRconfigTxt(unsigned long&)>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	b08a      	sub	sp, #40	@ 0x28
 800abc0:	a802      	add	r0, sp, #8
 800abc2:	460c      	mov	r4, r1
 800abc4:	f000 f9ea 	bl	800af9c <RemoteConfigParams::RemoteConfigParams()>
 800abc8:	4a05      	ldr	r2, [pc, #20]	@ (800abe0 <RemoteConfig::HandleGetRconfigTxt(unsigned long&)+0x24>)
 800abca:	9400      	str	r4, [sp, #0]
 800abcc:	6812      	ldr	r2, [r2, #0]
 800abce:	f240 538c 	movw	r3, #1420	@ 0x58c
 800abd2:	2100      	movs	r1, #0
 800abd4:	a802      	add	r0, sp, #8
 800abd6:	f000 fa59 	bl	800b08c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)>
 800abda:	b00a      	add	sp, #40	@ 0x28
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	bf00      	nop
 800abe0:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800abe4 <RemoteConfig::HandleGetEnvTxt(unsigned long&)>:
 800abe4:	b513      	push	{r0, r1, r4, lr}
 800abe6:	a801      	add	r0, sp, #4
 800abe8:	460c      	mov	r4, r1
 800abea:	f00c f801 	bl	8016bf0 <EnvParams::EnvParams()>
 800abee:	4905      	ldr	r1, [pc, #20]	@ (800ac04 <RemoteConfig::HandleGetEnvTxt(unsigned long&)+0x20>)
 800abf0:	4623      	mov	r3, r4
 800abf2:	6809      	ldr	r1, [r1, #0]
 800abf4:	f240 528c 	movw	r2, #1420	@ 0x58c
 800abf8:	a801      	add	r0, sp, #4
 800abfa:	f00c f857 	bl	8016cac <EnvParams::Builder(char*, unsigned long, unsigned long&)>
 800abfe:	b002      	add	sp, #8
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	bf00      	nop
 800ac04:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ac08 <RemoteConfig::HandleGetNetworkTxt(unsigned long&)>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	b09a      	sub	sp, #104	@ 0x68
 800ac0c:	a802      	add	r0, sp, #8
 800ac0e:	460c      	mov	r4, r1
 800ac10:	f00a fb5c 	bl	80152cc <NetworkParams::NetworkParams()>
 800ac14:	4a05      	ldr	r2, [pc, #20]	@ (800ac2c <RemoteConfig::HandleGetNetworkTxt(unsigned long&)+0x24>)
 800ac16:	9400      	str	r4, [sp, #0]
 800ac18:	6812      	ldr	r2, [r2, #0]
 800ac1a:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ac1e:	2100      	movs	r1, #0
 800ac20:	a802      	add	r0, sp, #8
 800ac22:	f00a fc3f 	bl	80154a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)>
 800ac26:	b01a      	add	sp, #104	@ 0x68
 800ac28:	bd10      	pop	{r4, pc}
 800ac2a:	bf00      	nop
 800ac2c:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ac30 <RemoteConfig::HandleGetE131Txt(unsigned long&)>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	b0ba      	sub	sp, #232	@ 0xe8
 800ac34:	a803      	add	r0, sp, #12
 800ac36:	460c      	mov	r4, r1
 800ac38:	f001 ff48 	bl	800cacc <E131Params::E131Params()>
 800ac3c:	4a05      	ldr	r2, [pc, #20]	@ (800ac54 <RemoteConfig::HandleGetE131Txt(unsigned long&)+0x24>)
 800ac3e:	9400      	str	r4, [sp, #0]
 800ac40:	6812      	ldr	r2, [r2, #0]
 800ac42:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ac46:	2100      	movs	r1, #0
 800ac48:	a803      	add	r0, sp, #12
 800ac4a:	f002 f8e7 	bl	800ce1c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)>
 800ac4e:	b03a      	add	sp, #232	@ 0xe8
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	bf00      	nop
 800ac54:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ac58 <RemoteConfig::HandleGetParamsTxt(unsigned long&)>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	a803      	add	r0, sp, #12
 800ac5e:	460c      	mov	r4, r1
 800ac60:	f003 fc1e 	bl	800e4a0 <DmxParams::DmxParams()>
 800ac64:	4a05      	ldr	r2, [pc, #20]	@ (800ac7c <RemoteConfig::HandleGetParamsTxt(unsigned long&)+0x24>)
 800ac66:	9400      	str	r4, [sp, #0]
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ac6e:	2100      	movs	r1, #0
 800ac70:	a803      	add	r0, sp, #12
 800ac72:	f003 fcc3 	bl	800e5fc <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)>
 800ac76:	b006      	add	sp, #24
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	bf00      	nop
 800ac7c:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ac80 <RemoteConfig::HandleGetDevicesTxt(unsigned long&)>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	b08c      	sub	sp, #48	@ 0x30
 800ac84:	a802      	add	r0, sp, #8
 800ac86:	460c      	mov	r4, r1
 800ac88:	f004 fda2 	bl	800f7d0 <PixelDmxParams::PixelDmxParams()>
 800ac8c:	4a05      	ldr	r2, [pc, #20]	@ (800aca4 <RemoteConfig::HandleGetDevicesTxt(unsigned long&)+0x24>)
 800ac8e:	9400      	str	r4, [sp, #0]
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ac96:	2100      	movs	r1, #0
 800ac98:	a802      	add	r0, sp, #8
 800ac9a:	f004 ff39 	bl	800fb10 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)>
 800ac9e:	b00c      	add	sp, #48	@ 0x30
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	bf00      	nop
 800aca4:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800aca8 <RemoteConfig::HandleGetDisplayTxt(unsigned long&)>:
 800aca8:	b510      	push	{r4, lr}
 800acaa:	b08c      	sub	sp, #48	@ 0x30
 800acac:	a803      	add	r0, sp, #12
 800acae:	460c      	mov	r4, r1
 800acb0:	f00b fbac 	bl	801640c <DisplayUdfParams::DisplayUdfParams()>
 800acb4:	4a05      	ldr	r2, [pc, #20]	@ (800accc <RemoteConfig::HandleGetDisplayTxt(unsigned long&)+0x24>)
 800acb6:	9400      	str	r4, [sp, #0]
 800acb8:	6812      	ldr	r2, [r2, #0]
 800acba:	f240 538c 	movw	r3, #1420	@ 0x58c
 800acbe:	2100      	movs	r1, #0
 800acc0:	a803      	add	r0, sp, #12
 800acc2:	f00b fc45 	bl	8016550 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)>
 800acc6:	b00c      	add	sp, #48	@ 0x30
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	bf00      	nop
 800accc:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800acd0 <RemoteConfig::HandleSet(void*, unsigned long)>:
 800acd0:	b530      	push	{r4, r5, lr}
 800acd2:	b085      	sub	sp, #20
 800acd4:	4604      	mov	r4, r0
 800acd6:	9201      	str	r2, [sp, #4]
 800acd8:	b9d1      	cbnz	r1, 800ad10 <RemoteConfig::HandleSet(void*, unsigned long)+0x40>
 800acda:	f240 538b 	movw	r3, #1419	@ 0x58b
 800acde:	9303      	str	r3, [sp, #12]
 800ace0:	4b19      	ldr	r3, [pc, #100]	@ (800ad48 <RemoteConfig::HandleSet(void*, unsigned long)+0x78>)
 800ace2:	6819      	ldr	r1, [r3, #0]
 800ace4:	aa03      	add	r2, sp, #12
 800ace6:	3101      	adds	r1, #1
 800ace8:	f000 fabe 	bl	800b268 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800acec:	2800      	cmp	r0, #0
 800acee:	db0d      	blt.n	800ad0c <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800acf0:	4b16      	ldr	r3, [pc, #88]	@ (800ad4c <RemoteConfig::HandleSet(void*, unsigned long)+0x7c>)
 800acf2:	2218      	movs	r2, #24
 800acf4:	fb02 3300 	mla	r3, r2, r0, r3
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	1051      	asrs	r1, r2, #1
 800acfe:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ad02:	07d2      	lsls	r2, r2, #31
 800ad04:	bf44      	itt	mi
 800ad06:	5862      	ldrmi	r2, [r4, r1]
 800ad08:	58d3      	ldrmi	r3, [r2, r3]
 800ad0a:	4798      	blx	r3
 800ad0c:	b005      	add	sp, #20
 800ad0e:	bd30      	pop	{r4, r5, pc}
 800ad10:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d8f9      	bhi.n	800ad0c <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800ad18:	4b0d      	ldr	r3, [pc, #52]	@ (800ad50 <RemoteConfig::HandleSet(void*, unsigned long)+0x80>)
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	460d      	mov	r5, r1
 800ad1e:	07d9      	lsls	r1, r3, #31
 800ad20:	d50b      	bpl.n	800ad3a <RemoteConfig::HandleSet(void*, unsigned long)+0x6a>
 800ad22:	782b      	ldrb	r3, [r5, #0]
 800ad24:	2b7b      	cmp	r3, #123	@ 0x7b
 800ad26:	d108      	bne.n	800ad3a <RemoteConfig::HandleSet(void*, unsigned long)+0x6a>
 800ad28:	1e51      	subs	r1, r2, #1
 800ad2a:	b289      	uxth	r1, r1
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f00c f810 	bl	8016d54 <properties::convert_json_file(char*, unsigned long, bool)>
 800ad34:	1e02      	subs	r2, r0, #0
 800ad36:	dde9      	ble.n	800ad0c <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800ad38:	b292      	uxth	r2, r2
 800ad3a:	4b03      	ldr	r3, [pc, #12]	@ (800ad48 <RemoteConfig::HandleSet(void*, unsigned long)+0x78>)
 800ad3c:	61e2      	str	r2, [r4, #28]
 800ad3e:	601d      	str	r5, [r3, #0]
 800ad40:	aa01      	add	r2, sp, #4
 800ad42:	1c69      	adds	r1, r5, #1
 800ad44:	4620      	mov	r0, r4
 800ad46:	e7cf      	b.n	800ace8 <RemoteConfig::HandleSet(void*, unsigned long)+0x18>
 800ad48:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800ad4c:	0801c1dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, lr, pc}
 800ad50:	2000e2e1 	andcs	lr, r0, r1, ror #5

0800ad54 <RemoteConfig::HandleRequest()>:
 800ad54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ad58:	69c2      	ldr	r2, [r0, #28]
 800ad5a:	4b3f      	ldr	r3, [pc, #252]	@ (800ae58 <RemoteConfig::HandleRequest()+0x104>)
 800ad5c:	3a01      	subs	r2, #1
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	5c99      	ldrb	r1, [r3, r2]
 800ad62:	290a      	cmp	r1, #10
 800ad64:	bf08      	it	eq
 800ad66:	61c2      	streq	r2, [r0, #28]
 800ad68:	7819      	ldrb	r1, [r3, #0]
 800ad6a:	293f      	cmp	r1, #63	@ 0x3f
 800ad6c:	d13c      	bne.n	800ade8 <RemoteConfig::HandleRequest()+0x94>
 800ad6e:	69c4      	ldr	r4, [r0, #28]
 800ad70:	493a      	ldr	r1, [pc, #232]	@ (800ae5c <RemoteConfig::HandleRequest()+0x108>)
 800ad72:	3c01      	subs	r4, #1
 800ad74:	61c4      	str	r4, [r0, #28]
 800ad76:	2200      	movs	r2, #0
 800ad78:	468c      	mov	ip, r1
 800ad7a:	7b8e      	ldrb	r6, [r1, #14]
 800ad7c:	898d      	ldrh	r5, [r1, #12]
 800ad7e:	b18e      	cbz	r6, 800ada4 <RemoteConfig::HandleRequest()+0x50>
 800ad80:	42ac      	cmp	r4, r5
 800ad82:	d811      	bhi.n	800ada8 <RemoteConfig::HandleRequest()+0x54>
 800ad84:	3201      	adds	r2, #1
 800ad86:	2a08      	cmp	r2, #8
 800ad88:	f101 0110 	add.w	r1, r1, #16
 800ad8c:	d1f5      	bne.n	800ad7a <RemoteConfig::HandleRequest()+0x26>
 800ad8e:	f642 1305 	movw	r3, #10501	@ 0x2905
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	6983      	ldr	r3, [r0, #24]
 800ad96:	4932      	ldr	r1, [pc, #200]	@ (800ae60 <RemoteConfig::HandleRequest()+0x10c>)
 800ad98:	6940      	ldr	r0, [r0, #20]
 800ad9a:	f7ff fcfb 	bl	800a794 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800ad9e:	b002      	add	sp, #8
 800ada0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada4:	42ac      	cmp	r4, r5
 800ada6:	d1ed      	bne.n	800ad84 <RemoteConfig::HandleRequest()+0x30>
 800ada8:	688e      	ldr	r6, [r1, #8]
 800adaa:	461f      	mov	r7, r3
 800adac:	3e01      	subs	r6, #1
 800adae:	441d      	add	r5, r3
 800adb0:	42af      	cmp	r7, r5
 800adb2:	d10f      	bne.n	800add4 <RemoteConfig::HandleRequest()+0x80>
 800adb4:	0113      	lsls	r3, r2, #4
 800adb6:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 800adba:	f85c 3003 	ldr.w	r3, [ip, r3]
 800adbe:	6852      	ldr	r2, [r2, #4]
 800adc0:	1054      	asrs	r4, r2, #1
 800adc2:	eb00 0162 	add.w	r1, r0, r2, asr #1
 800adc6:	07d2      	lsls	r2, r2, #31
 800adc8:	d40b      	bmi.n	800ade2 <RemoteConfig::HandleRequest()+0x8e>
 800adca:	4608      	mov	r0, r1
 800adcc:	b002      	add	sp, #8
 800adce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800add2:	4718      	bx	r3
 800add4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800add8:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800addc:	45f0      	cmp	r8, lr
 800adde:	d0e7      	beq.n	800adb0 <RemoteConfig::HandleRequest()+0x5c>
 800ade0:	e7d0      	b.n	800ad84 <RemoteConfig::HandleRequest()+0x30>
 800ade2:	5902      	ldr	r2, [r0, r4]
 800ade4:	58d3      	ldr	r3, [r2, r3]
 800ade6:	e7f0      	b.n	800adca <RemoteConfig::HandleRequest()+0x76>
 800ade8:	7b42      	ldrb	r2, [r0, #13]
 800adea:	2a00      	cmp	r2, #0
 800adec:	d1d7      	bne.n	800ad9e <RemoteConfig::HandleRequest()+0x4a>
 800adee:	2923      	cmp	r1, #35	@ 0x23
 800adf0:	d105      	bne.n	800adfe <RemoteConfig::HandleRequest()+0xaa>
 800adf2:	4611      	mov	r1, r2
 800adf4:	b002      	add	sp, #8
 800adf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adfa:	f7ff bf69 	b.w	800acd0 <RemoteConfig::HandleSet(void*, unsigned long)>
 800adfe:	2921      	cmp	r1, #33	@ 0x21
 800ae00:	d1cd      	bne.n	800ad9e <RemoteConfig::HandleRequest()+0x4a>
 800ae02:	69c2      	ldr	r2, [r0, #28]
 800ae04:	3a01      	subs	r2, #1
 800ae06:	2a05      	cmp	r2, #5
 800ae08:	61c2      	str	r2, [r0, #28]
 800ae0a:	d91e      	bls.n	800ae4a <RemoteConfig::HandleRequest()+0xf6>
 800ae0c:	4d15      	ldr	r5, [pc, #84]	@ (800ae64 <RemoteConfig::HandleRequest()+0x110>)
 800ae0e:	4619      	mov	r1, r3
 800ae10:	1d5e      	adds	r6, r3, #5
 800ae12:	461c      	mov	r4, r3
 800ae14:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800ae18:	f815 7b01 	ldrb.w	r7, [r5], #1
 800ae1c:	45bc      	cmp	ip, r7
 800ae1e:	d112      	bne.n	800ae46 <RemoteConfig::HandleRequest()+0xf2>
 800ae20:	42b4      	cmp	r4, r6
 800ae22:	d1f7      	bne.n	800ae14 <RemoteConfig::HandleRequest()+0xc0>
 800ae24:	2300      	movs	r3, #0
 800ae26:	4a10      	ldr	r2, [pc, #64]	@ (800ae68 <RemoteConfig::HandleRequest()+0x114>)
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	58d3      	ldr	r3, [r2, r3]
 800ae2c:	e7ce      	b.n	800adcc <RemoteConfig::HandleRequest()+0x78>
 800ae2e:	4a0f      	ldr	r2, [pc, #60]	@ (800ae6c <RemoteConfig::HandleRequest()+0x118>)
 800ae30:	3308      	adds	r3, #8
 800ae32:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ae36:	f812 4b01 	ldrb.w	r4, [r2], #1
 800ae3a:	42a5      	cmp	r5, r4
 800ae3c:	d105      	bne.n	800ae4a <RemoteConfig::HandleRequest()+0xf6>
 800ae3e:	4299      	cmp	r1, r3
 800ae40:	d1f7      	bne.n	800ae32 <RemoteConfig::HandleRequest()+0xde>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e7ef      	b.n	800ae26 <RemoteConfig::HandleRequest()+0xd2>
 800ae46:	2a08      	cmp	r2, #8
 800ae48:	d8f1      	bhi.n	800ae2e <RemoteConfig::HandleRequest()+0xda>
 800ae4a:	f642 1305 	movw	r3, #10501	@ 0x2905
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	6983      	ldr	r3, [r0, #24]
 800ae52:	4907      	ldr	r1, [pc, #28]	@ (800ae70 <RemoteConfig::HandleRequest()+0x11c>)
 800ae54:	2208      	movs	r2, #8
 800ae56:	e79f      	b.n	800ad98 <RemoteConfig::HandleRequest()+0x44>
 800ae58:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800ae5c:	0801c134 	stmdaeq	r1, {r2, r4, r5, r8, lr, pc}
 800ae60:	0801b270 	stmdaeq	r1, {r4, r5, r6, r9, ip, sp, pc}
 800ae64:	0801b279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, ip, sp, pc}
 800ae68:	0801c114 	stmdaeq	r1, {r2, r4, r8, lr, pc}
 800ae6c:	0801b27f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, ip, sp, pc}
 800ae70:	0801b288 	stmdaeq	r1, {r3, r7, r9, ip, sp, pc}

0800ae74 <RemoteConfig::HandleSetRconfigTxt()>:
 800ae74:	b510      	push	{r4, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	4604      	mov	r4, r0
 800ae7a:	4668      	mov	r0, sp
 800ae7c:	f000 f88e 	bl	800af9c <RemoteConfigParams::RemoteConfigParams()>
 800ae80:	4b05      	ldr	r3, [pc, #20]	@ (800ae98 <RemoteConfig::HandleSetRconfigTxt()+0x24>)
 800ae82:	69e2      	ldr	r2, [r4, #28]
 800ae84:	6819      	ldr	r1, [r3, #0]
 800ae86:	4668      	mov	r0, sp
 800ae88:	f000 f89a 	bl	800afc0 <RemoteConfigParams::Load(char const*, unsigned long)>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4668      	mov	r0, sp
 800ae90:	f000 f99a 	bl	800b1c8 <RemoteConfigParams::Set(RemoteConfig*)>
 800ae94:	b008      	add	sp, #32
 800ae96:	bd10      	pop	{r4, pc}
 800ae98:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ae9c <RemoteConfig::HandleSetEnvTxt()>:
 800ae9c:	b513      	push	{r0, r1, r4, lr}
 800ae9e:	4604      	mov	r4, r0
 800aea0:	a801      	add	r0, sp, #4
 800aea2:	f00b fea5 	bl	8016bf0 <EnvParams::EnvParams()>
 800aea6:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <RemoteConfig::HandleSetEnvTxt()+0x1c>)
 800aea8:	69e2      	ldr	r2, [r4, #28]
 800aeaa:	6819      	ldr	r1, [r3, #0]
 800aeac:	a801      	add	r0, sp, #4
 800aeae:	f00b fea1 	bl	8016bf4 <EnvParams::LoadAndSet(char const*, unsigned long)>
 800aeb2:	b002      	add	sp, #8
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	bf00      	nop
 800aeb8:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800aebc <RemoteConfig::HandleSetNetworkTxt()>:
 800aebc:	b510      	push	{r4, lr}
 800aebe:	b098      	sub	sp, #96	@ 0x60
 800aec0:	4604      	mov	r4, r0
 800aec2:	4668      	mov	r0, sp
 800aec4:	f00a fa02 	bl	80152cc <NetworkParams::NetworkParams()>
 800aec8:	4b03      	ldr	r3, [pc, #12]	@ (800aed8 <RemoteConfig::HandleSetNetworkTxt()+0x1c>)
 800aeca:	69e2      	ldr	r2, [r4, #28]
 800aecc:	6819      	ldr	r1, [r3, #0]
 800aece:	4668      	mov	r0, sp
 800aed0:	f00a fa10 	bl	80152f4 <NetworkParams::Load(char const*, unsigned long)>
 800aed4:	b018      	add	sp, #96	@ 0x60
 800aed6:	bd10      	pop	{r4, pc}
 800aed8:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800aedc <RemoteConfig::HandleSetE131Txt()>:
 800aedc:	b510      	push	{r4, lr}
 800aede:	b0b8      	sub	sp, #224	@ 0xe0
 800aee0:	4604      	mov	r4, r0
 800aee2:	a801      	add	r0, sp, #4
 800aee4:	f001 fdf2 	bl	800cacc <E131Params::E131Params()>
 800aee8:	4b03      	ldr	r3, [pc, #12]	@ (800aef8 <RemoteConfig::HandleSetE131Txt()+0x1c>)
 800aeea:	69e2      	ldr	r2, [r4, #28]
 800aeec:	6819      	ldr	r1, [r3, #0]
 800aeee:	a801      	add	r0, sp, #4
 800aef0:	f001 fe0e 	bl	800cb10 <E131Params::Load(char const*, unsigned long)>
 800aef4:	b038      	add	sp, #224	@ 0xe0
 800aef6:	bd10      	pop	{r4, pc}
 800aef8:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800aefc <RemoteConfig::HandleSetParamsTxt()>:
 800aefc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aefe:	4604      	mov	r4, r0
 800af00:	a801      	add	r0, sp, #4
 800af02:	f003 facd 	bl	800e4a0 <DmxParams::DmxParams()>
 800af06:	4b04      	ldr	r3, [pc, #16]	@ (800af18 <RemoteConfig::HandleSetParamsTxt()+0x1c>)
 800af08:	69e2      	ldr	r2, [r4, #28]
 800af0a:	6819      	ldr	r1, [r3, #0]
 800af0c:	a801      	add	r0, sp, #4
 800af0e:	f003 fae1 	bl	800e4d4 <DmxParams::Load(char const*, unsigned long)>
 800af12:	b004      	add	sp, #16
 800af14:	bd10      	pop	{r4, pc}
 800af16:	bf00      	nop
 800af18:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800af1c <RemoteConfig::HandleSetDevicesTxt()>:
 800af1c:	b510      	push	{r4, lr}
 800af1e:	b08a      	sub	sp, #40	@ 0x28
 800af20:	4604      	mov	r4, r0
 800af22:	4668      	mov	r0, sp
 800af24:	f004 fc54 	bl	800f7d0 <PixelDmxParams::PixelDmxParams()>
 800af28:	4b03      	ldr	r3, [pc, #12]	@ (800af38 <RemoteConfig::HandleSetDevicesTxt()+0x1c>)
 800af2a:	69e2      	ldr	r2, [r4, #28]
 800af2c:	6819      	ldr	r1, [r3, #0]
 800af2e:	4668      	mov	r0, sp
 800af30:	f005 f844 	bl	800ffbc <PixelDmxParams::Load(char const*, unsigned long)>
 800af34:	b00a      	add	sp, #40	@ 0x28
 800af36:	bd10      	pop	{r4, pc}
 800af38:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800af3c <RemoteConfig::HandleSetDisplayTxt()>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	b08a      	sub	sp, #40	@ 0x28
 800af40:	4604      	mov	r4, r0
 800af42:	a801      	add	r0, sp, #4
 800af44:	f00b fa62 	bl	801640c <DisplayUdfParams::DisplayUdfParams()>
 800af48:	4b03      	ldr	r3, [pc, #12]	@ (800af58 <RemoteConfig::HandleSetDisplayTxt()+0x1c>)
 800af4a:	69e2      	ldr	r2, [r4, #28]
 800af4c:	6819      	ldr	r1, [r3, #0]
 800af4e:	a801      	add	r0, sp, #4
 800af50:	f00b fa74 	bl	801643c <DisplayUdfParams::Load(char const*, unsigned long)>
 800af54:	b00a      	add	sp, #40	@ 0x28
 800af56:	bd10      	pop	{r4, pc}
 800af58:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800af5c <RemoteConfig::HandleFactory()>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4b05      	ldr	r3, [pc, #20]	@ (800af74 <RemoteConfig::HandleFactory()+0x18>)
 800af60:	681d      	ldr	r5, [r3, #0]
 800af62:	2400      	movs	r4, #0
 800af64:	4621      	mov	r1, r4
 800af66:	4628      	mov	r0, r5
 800af68:	3401      	adds	r4, #1
 800af6a:	f00b fd63 	bl	8016a34 <ConfigStore::ResetSetList(configstore::Store)>
 800af6e:	2c1b      	cmp	r4, #27
 800af70:	d1f8      	bne.n	800af64 <RemoteConfig::HandleFactory()+0x8>
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800af78 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>:
 800af78:	b507      	push	{r0, r1, r2, lr}
 800af7a:	2300      	movs	r3, #0
 800af7c:	2101      	movs	r1, #1
 800af7e:	e9cd 3100 	strd	r3, r1, [sp]
 800af82:	4602      	mov	r2, r0
 800af84:	4804      	ldr	r0, [pc, #16]	@ (800af98 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)+0x20>)
 800af86:	2320      	movs	r3, #32
 800af88:	6800      	ldr	r0, [r0, #0]
 800af8a:	210a      	movs	r1, #10
 800af8c:	f00b fd8a 	bl	8016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800af90:	b003      	add	sp, #12
 800af92:	f85d fb04 	ldr.w	pc, [sp], #4
 800af96:	bf00      	nop
 800af98:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800af9c <RemoteConfigParams::RemoteConfigParams()>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	2220      	movs	r2, #32
 800afa0:	4604      	mov	r4, r0
 800afa2:	2100      	movs	r1, #0
 800afa4:	f00e ffc4 	bl	8019f30 <memset>
 800afa8:	4620      	mov	r0, r4
 800afaa:	bd10      	pop	{r4, pc}

0800afac <RemoteConfigParams::Load()>:
 800afac:	b508      	push	{r3, lr}
 800afae:	2200      	movs	r2, #0
 800afb0:	7002      	strb	r2, [r0, #0]
 800afb2:	7042      	strb	r2, [r0, #1]
 800afb4:	7082      	strb	r2, [r0, #2]
 800afb6:	70c2      	strb	r2, [r0, #3]
 800afb8:	f7ff ffde 	bl	800af78 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>
 800afbc:	bd08      	pop	{r3, pc}
	...

0800afc0 <RemoteConfigParams::Load(char const*, unsigned long)>:
 800afc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afc2:	2500      	movs	r5, #0
 800afc4:	b087      	sub	sp, #28
 800afc6:	4604      	mov	r4, r0
 800afc8:	460e      	mov	r6, r1
 800afca:	4617      	mov	r7, r2
 800afcc:	7005      	strb	r5, [r0, #0]
 800afce:	7045      	strb	r5, [r0, #1]
 800afd0:	7085      	strb	r5, [r0, #2]
 800afd2:	70c5      	strb	r5, [r0, #3]
 800afd4:	4602      	mov	r2, r0
 800afd6:	490c      	ldr	r1, [pc, #48]	@ (800b008 <RemoteConfigParams::Load(char const*, unsigned long)+0x48>)
 800afd8:	a804      	add	r0, sp, #16
 800afda:	f00c f83d 	bl	8017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800afde:	463a      	mov	r2, r7
 800afe0:	4631      	mov	r1, r6
 800afe2:	a804      	add	r0, sp, #16
 800afe4:	f00c f83c 	bl	8017060 <ReadConfigFile::Read(char const*, unsigned int)>
 800afe8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800afec:	2320      	movs	r3, #32
 800afee:	4807      	ldr	r0, [pc, #28]	@ (800b00c <RemoteConfigParams::Load(char const*, unsigned long)+0x4c>)
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	462a      	mov	r2, r5
 800aff4:	4623      	mov	r3, r4
 800aff6:	210a      	movs	r1, #10
 800aff8:	6800      	ldr	r0, [r0, #0]
 800affa:	f00b fd2d 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800affe:	a804      	add	r0, sp, #16
 800b000:	f00c f82d 	bl	801705e <ReadConfigFile::~ReadConfigFile()>
 800b004:	b007      	add	sp, #28
 800b006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b008:	0800b089 	stmdaeq	r0, {r0, r3, r7, ip, sp, pc}
 800b00c:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800b010 <RemoteConfigParams::SetBool(unsigned char, unsigned long)>:
 800b010:	6803      	ldr	r3, [r0, #0]
 800b012:	b111      	cbz	r1, 800b01a <RemoteConfigParams::SetBool(unsigned char, unsigned long)+0xa>
 800b014:	4313      	orrs	r3, r2
 800b016:	6003      	str	r3, [r0, #0]
 800b018:	4770      	bx	lr
 800b01a:	ea23 0302 	bic.w	r3, r3, r2
 800b01e:	e7fa      	b.n	800b016 <RemoteConfigParams::SetBool(unsigned char, unsigned long)+0x6>

0800b020 <RemoteConfigParams::callbackFunction(char const*)>:
 800b020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b024:	4f16      	ldr	r7, [pc, #88]	@ (800b080 <RemoteConfigParams::callbackFunction(char const*)+0x60>)
 800b026:	4604      	mov	r4, r0
 800b028:	460e      	mov	r6, r1
 800b02a:	2506      	movs	r5, #6
 800b02c:	3d01      	subs	r5, #1
 800b02e:	d113      	bne.n	800b058 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800b030:	2317      	movs	r3, #23
 800b032:	9301      	str	r3, [sp, #4]
 800b034:	4913      	ldr	r1, [pc, #76]	@ (800b084 <RemoteConfigParams::callbackFunction(char const*)+0x64>)
 800b036:	ab01      	add	r3, sp, #4
 800b038:	f104 0208 	add.w	r2, r4, #8
 800b03c:	4630      	mov	r0, r6
 800b03e:	f00c f845 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800b042:	b930      	cbnz	r0, 800b052 <RemoteConfigParams::callbackFunction(char const*)+0x32>
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	4423      	add	r3, r4
 800b048:	721d      	strb	r5, [r3, #8]
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	f043 0310 	orr.w	r3, r3, #16
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	b002      	add	sp, #8
 800b054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800b05e:	aa01      	add	r2, sp, #4
 800b060:	4630      	mov	r0, r6
 800b062:	f00c f923 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b066:	b108      	cbz	r0, 800b06c <RemoteConfigParams::callbackFunction(char const*)+0x4c>
 800b068:	3708      	adds	r7, #8
 800b06a:	e7df      	b.n	800b02c <RemoteConfigParams::callbackFunction(char const*)+0xc>
 800b06c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b070:	4642      	mov	r2, r8
 800b072:	4620      	mov	r0, r4
 800b074:	b002      	add	sp, #8
 800b076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b07a:	f7ff bfc9 	b.w	800b010 <RemoteConfigParams::SetBool(unsigned char, unsigned long)>
 800b07e:	bf00      	nop
 800b080:	0801c1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, lr, pc}
 800b084:	0801cca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, lr, pc}

0800b088 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800b088:	f7ff bfca 	b.w	800b020 <RemoteConfigParams::callbackFunction(char const*)>

0800b08c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)>:
 800b08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	4605      	mov	r5, r0
 800b092:	b087      	sub	sp, #28
 800b094:	4614      	mov	r4, r2
 800b096:	461e      	mov	r6, r3
 800b098:	b361      	cbz	r1, 800b0f4 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x68>
 800b09a:	2220      	movs	r2, #32
 800b09c:	f00e ff31 	bl	8019f02 <memmove>
 800b0a0:	4940      	ldr	r1, [pc, #256]	@ (800b1a4 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x118>)
 800b0a2:	4f41      	ldr	r7, [pc, #260]	@ (800b1a8 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x11c>)
 800b0a4:	f8df b118 	ldr.w	fp, [pc, #280]	@ 800b1c0 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x134>
 800b0a8:	f8df a118 	ldr.w	sl, [pc, #280]	@ 800b1c4 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x138>
 800b0ac:	4633      	mov	r3, r6
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	a803      	add	r0, sp, #12
 800b0b2:	f00b fefb 	bl	8016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800b0b6:	f04f 0806 	mov.w	r8, #6
 800b0ba:	f04f 0901 	mov.w	r9, #1
 800b0be:	f1b8 0801 	subs.w	r8, r8, #1
 800b0c2:	f8d5 c000 	ldr.w	ip, [r5]
 800b0c6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b0ca:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800b0ce:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800b0d2:	d112      	bne.n	800b0fa <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 800b0d4:	42a2      	cmp	r2, r4
 800b0d6:	d246      	bcs.n	800b166 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xda>
 800b0d8:	9803      	ldr	r0, [sp, #12]
 800b0da:	f01c 0f10 	tst.w	ip, #16
 800b0de:	f105 0508 	add.w	r5, r5, #8
 800b0e2:	4410      	add	r0, r2
 800b0e4:	eba4 0402 	sub.w	r4, r4, r2
 800b0e8:	d12f      	bne.n	800b14a <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xbe>
 800b0ea:	bb7e      	cbnz	r6, 800b14c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc0>
 800b0ec:	4b2f      	ldr	r3, [pc, #188]	@ (800b1ac <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800b0ee:	4a30      	ldr	r2, [pc, #192]	@ (800b1b0 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x124>)
 800b0f0:	9500      	str	r5, [sp, #0]
 800b0f2:	e02e      	b.n	800b152 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc6>
 800b0f4:	f7ff ff40 	bl	800af78 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>
 800b0f8:	e7d2      	b.n	800b0a0 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 800b0fa:	42a2      	cmp	r2, r4
 800b0fc:	e9d7 3100 	ldrd	r3, r1, [r7]
 800b100:	d21d      	bcs.n	800b13e <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xb2>
 800b102:	9803      	ldr	r0, [sp, #12]
 800b104:	ea01 0e0c 	and.w	lr, r1, ip
 800b108:	ea31 0c0c 	bics.w	ip, r1, ip
 800b10c:	4410      	add	r0, r2
 800b10e:	eba4 0402 	sub.w	r4, r4, r2
 800b112:	d003      	beq.n	800b11c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x90>
 800b114:	b91e      	cbnz	r6, 800b11e <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x92>
 800b116:	4a27      	ldr	r2, [pc, #156]	@ (800b1b4 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x128>)
 800b118:	9600      	str	r6, [sp, #0]
 800b11a:	e006      	b.n	800b12a <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x9e>
 800b11c:	b18e      	cbz	r6, 800b142 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xb6>
 800b11e:	eba1 020e 	sub.w	r2, r1, lr
 800b122:	4251      	negs	r1, r2
 800b124:	4151      	adcs	r1, r2
 800b126:	9100      	str	r1, [sp, #0]
 800b128:	465a      	mov	r2, fp
 800b12a:	4621      	mov	r1, r4
 800b12c:	f00f fa0c 	bl	801a548 <snprintf>
 800b130:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b134:	4284      	cmp	r4, r0
 800b136:	bfa4      	itt	ge
 800b138:	181b      	addge	r3, r3, r0
 800b13a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800b13e:	3708      	adds	r7, #8
 800b140:	e7bd      	b.n	800b0be <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x32>
 800b142:	f8cd 9000 	str.w	r9, [sp]
 800b146:	4652      	mov	r2, sl
 800b148:	e7ef      	b.n	800b12a <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x9e>
 800b14a:	b336      	cbz	r6, 800b19a <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x10e>
 800b14c:	4b17      	ldr	r3, [pc, #92]	@ (800b1ac <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800b14e:	4a1a      	ldr	r2, [pc, #104]	@ (800b1b8 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x12c>)
 800b150:	9500      	str	r5, [sp, #0]
 800b152:	4621      	mov	r1, r4
 800b154:	f00f f9f8 	bl	801a548 <snprintf>
 800b158:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b15c:	4284      	cmp	r4, r0
 800b15e:	bfa4      	itt	ge
 800b160:	181b      	addge	r3, r3, r0
 800b162:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800b166:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b16a:	b17b      	cbz	r3, 800b18c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x100>
 800b16c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	4413      	add	r3, r2
 800b174:	227d      	movs	r2, #125	@ 0x7d
 800b176:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b17a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b17e:	9903      	ldr	r1, [sp, #12]
 800b180:	54ca      	strb	r2, [r1, r3]
 800b182:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b186:	3301      	adds	r3, #1
 800b188:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b18c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	b007      	add	sp, #28
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	4b04      	ldr	r3, [pc, #16]	@ (800b1ac <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800b19c:	4a07      	ldr	r2, [pc, #28]	@ (800b1bc <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x130>)
 800b19e:	9500      	str	r5, [sp, #0]
 800b1a0:	e7d7      	b.n	800b152 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc6>
 800b1a2:	bf00      	nop
 800b1a4:	0801ccf2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, fp, lr, pc}
 800b1a8:	0801c1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, lr, pc}
 800b1ac:	0801cca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, lr, pc}
 800b1b0:	0801b2dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, ip, sp, pc}
 800b1b4:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 800b1b8:	0801b2d1 	stmdaeq	r1, {r0, r4, r6, r7, r9, ip, sp, pc}
 800b1bc:	0801b2dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, ip, sp, pc}
 800b1c0:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800b1c4:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800b1c8 <RemoteConfigParams::Set(RemoteConfig*)>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	6801      	ldr	r1, [r0, #0]
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	f001 0101 	and.w	r1, r1, #1
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f7ff fc51 	bl	800aa7c <RemoteConfig::SetDisable(bool)>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800b1e0:	7362      	strb	r2, [r4, #13]
 800b1e2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800b1e6:	73a2      	strb	r2, [r4, #14]
 800b1e8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800b1ec:	73e2      	strb	r2, [r4, #15]
 800b1ee:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800b1f2:	06db      	lsls	r3, r3, #27
 800b1f4:	7422      	strb	r2, [r4, #16]
 800b1f6:	d506      	bpl.n	800b206 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800b1f8:	f105 0108 	add.w	r1, r5, #8
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b202:	f7ff bc65 	b.w	800aad0 <RemoteConfig::SetDisplayName(char const*)>
 800b206:	bd38      	pop	{r3, r4, r5, pc}

0800b208 <RemoteConfig::HandleReboot()>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	7b83      	ldrb	r3, [r0, #14]
 800b20c:	b30b      	cbz	r3, 800b252 <RemoteConfig::HandleReboot()+0x4a>
 800b20e:	4c11      	ldr	r4, [pc, #68]	@ (800b254 <RemoteConfig::HandleReboot()+0x4c>)
 800b210:	6825      	ldr	r5, [r4, #0]
 800b212:	2301      	movs	r3, #1
 800b214:	7443      	strb	r3, [r0, #17]
 800b216:	69a8      	ldr	r0, [r5, #24]
 800b218:	b138      	cbz	r0, 800b22a <RemoteConfig::HandleReboot()+0x22>
 800b21a:	6803      	ldr	r3, [r0, #0]
 800b21c:	2100      	movs	r1, #0
 800b21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b220:	7569      	strb	r1, [r5, #21]
 800b222:	4798      	blx	r3
 800b224:	4b0c      	ldr	r3, [pc, #48]	@ (800b258 <RemoteConfig::HandleReboot()+0x50>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	606b      	str	r3, [r5, #4]
 800b22a:	4d0c      	ldr	r5, [pc, #48]	@ (800b25c <RemoteConfig::HandleReboot()+0x54>)
 800b22c:	6828      	ldr	r0, [r5, #0]
 800b22e:	f00b fc69 	bl	8016b04 <ConfigStore::Flash()>
 800b232:	2800      	cmp	r0, #0
 800b234:	d1fa      	bne.n	800b22c <RemoteConfig::HandleReboot()+0x24>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	6998      	ldr	r0, [r3, #24]
 800b23a:	b110      	cbz	r0, 800b242 <RemoteConfig::HandleReboot()+0x3a>
 800b23c:	6803      	ldr	r3, [r0, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	4798      	blx	r3
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	4906      	ldr	r1, [pc, #24]	@ (800b260 <RemoteConfig::HandleReboot()+0x58>)
 800b246:	f7fe fbcd 	bl	80099e4 <Display::TextStatus(char const*)>
 800b24a:	4b06      	ldr	r3, [pc, #24]	@ (800b264 <RemoteConfig::HandleReboot()+0x5c>)
 800b24c:	6818      	ldr	r0, [r3, #0]
 800b24e:	f00c fe2f 	bl	8017eb0 <Hardware::Reboot()>
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	2000e2e4 	andcs	lr, r0, r4, ror #5
 800b258:	2001bcc0 	andcs	fp, r1, r0, asr #25
 800b25c:	2000e2cc 	andcs	lr, r0, ip, asr #5
 800b260:	0801b2e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, ip, sp, pc}
 800b264:	2000e3d0 	ldrdcs	lr, [r0], -r0

0800b268 <RemoteConfig::GetIndex(void const*, unsigned long&)>:
 800b268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b26c:	f8d2 c000 	ldr.w	ip, [r2]
 800b270:	4e12      	ldr	r6, [pc, #72]	@ (800b2bc <RemoteConfig::GetIndex(void const*, unsigned long&)+0x54>)
 800b272:	2000      	movs	r0, #0
 800b274:	f10d 0e04 	add.w	lr, sp, #4
 800b278:	7d33      	ldrb	r3, [r6, #20]
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	4563      	cmp	r3, ip
 800b27e:	bf2c      	ite	cs
 800b280:	4614      	movcs	r4, r2
 800b282:	4674      	movcc	r4, lr
 800b284:	6935      	ldr	r5, [r6, #16]
 800b286:	6827      	ldr	r7, [r4, #0]
 800b288:	3d01      	subs	r5, #1
 800b28a:	440f      	add	r7, r1
 800b28c:	460c      	mov	r4, r1
 800b28e:	42bc      	cmp	r4, r7
 800b290:	d101      	bne.n	800b296 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x2e>
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	e00c      	b.n	800b2b0 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x48>
 800b296:	f894 9000 	ldrb.w	r9, [r4]
 800b29a:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 800b29e:	45c1      	cmp	r9, r8
 800b2a0:	d009      	beq.n	800b2b6 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x4e>
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	2807      	cmp	r0, #7
 800b2a6:	f106 0618 	add.w	r6, r6, #24
 800b2aa:	d1e5      	bne.n	800b278 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x10>
 800b2ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2b0:	b003      	add	sp, #12
 800b2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2b6:	3401      	adds	r4, #1
 800b2b8:	e7e9      	b.n	800b28e <RemoteConfig::GetIndex(void const*, unsigned long&)+0x26>
 800b2ba:	bf00      	nop
 800b2bc:	0801c1dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, lr, pc}

0800b2c0 <RemoteConfig::PlatformHandleTftpSet()>:
 800b2c0:	f890 1020 	ldrb.w	r1, [r0, #32]
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	4c0d      	ldr	r4, [pc, #52]	@ (800b2fc <RemoteConfig::PlatformHandleTftpSet()+0x3c>)
 800b2c8:	b171      	cbz	r1, 800b2e8 <RemoteConfig::PlatformHandleTftpSet()+0x28>
 800b2ca:	f24a 51a5 	movw	r1, #42405	@ 0xa5a5
 800b2ce:	2001      	movs	r0, #1
 800b2d0:	f00d ff9e 	bl	8019210 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 800b2d4:	490a      	ldr	r1, [pc, #40]	@ (800b300 <RemoteConfig::PlatformHandleTftpSet()+0x40>)
 800b2d6:	6820      	ldr	r0, [r4, #0]
 800b2d8:	f7fe fb84 	bl	80099e4 <Display::TextStatus(char const*)>
 800b2dc:	4908      	ldr	r1, [pc, #32]	@ (800b300 <RemoteConfig::PlatformHandleTftpSet()+0x40>)
 800b2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e2:	2002      	movs	r0, #2
 800b2e4:	f00c be44 	b.w	8017f70 <console_status>
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	f00d ff91 	bl	8019210 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 800b2ee:	4905      	ldr	r1, [pc, #20]	@ (800b304 <RemoteConfig::PlatformHandleTftpSet()+0x44>)
 800b2f0:	6820      	ldr	r0, [r4, #0]
 800b2f2:	f7fe fb77 	bl	80099e4 <Display::TextStatus(char const*)>
 800b2f6:	4903      	ldr	r1, [pc, #12]	@ (800b304 <RemoteConfig::PlatformHandleTftpSet()+0x44>)
 800b2f8:	e7f1      	b.n	800b2de <RemoteConfig::PlatformHandleTftpSet()+0x1e>
 800b2fa:	bf00      	nop
 800b2fc:	2000e2e4 	andcs	lr, r0, r4, ror #5
 800b300:	0801b33e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, ip, sp, pc}
 800b304:	0801b347 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, ip, sp, pc}

0800b308 <RemoteConfig::PlatformHandleTftpGet()>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4604      	mov	r4, r0
 800b30c:	2001      	movs	r0, #1
 800b30e:	f00d ff8d 	bl	801922c <bkp_data_read(bkp_data_register_enum)>
 800b312:	f24a 53a5 	movw	r3, #42405	@ 0xa5a5
 800b316:	1ac3      	subs	r3, r0, r3
 800b318:	4258      	negs	r0, r3
 800b31a:	4158      	adcs	r0, r3
 800b31c:	f884 0020 	strb.w	r0, [r4, #32]
 800b320:	bd10      	pop	{r4, pc}
	...

0800b324 <HttpDaemon::HttpDaemon()>:
 800b324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b32a:	2500      	movs	r5, #0
 800b32c:	e9c0 3506 	strd	r3, r5, [r0, #24]
 800b330:	4606      	mov	r6, r0
 800b332:	2050      	movs	r0, #80	@ 0x50
 800b334:	f009 fe16 	bl	8014f64 <net::tcp_begin(unsigned short)>
 800b338:	462c      	mov	r4, r5
 800b33a:	61b0      	str	r0, [r6, #24]
 800b33c:	f44f 7702 	mov.w	r7, #520	@ 0x208
 800b340:	2038      	movs	r0, #56	@ 0x38
 800b342:	f00f fb2f 	bl	801a9a4 <operator new(unsigned int)>
 800b346:	69b3      	ldr	r3, [r6, #24]
 800b348:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800b34c:	e9c0 5300 	strd	r5, r3, [r0]
 800b350:	3501      	adds	r5, #1
 800b352:	2203      	movs	r2, #3
 800b354:	2305      	movs	r3, #5
 800b356:	2d06      	cmp	r5, #6
 800b358:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b35c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b360:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800b364:	e9c0 4408 	strd	r4, r4, [r0, #32]
 800b368:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
 800b36c:	6287      	str	r7, [r0, #40]	@ 0x28
 800b36e:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
 800b372:	d1e5      	bne.n	800b340 <HttpDaemon::HttpDaemon()+0x1c>
 800b374:	4805      	ldr	r0, [pc, #20]	@ (800b38c <HttpDaemon::HttpDaemon()+0x68>)
 800b376:	9400      	str	r4, [sp, #0]
 800b378:	2300      	movs	r3, #0
 800b37a:	2202      	movs	r2, #2
 800b37c:	4619      	mov	r1, r3
 800b37e:	6800      	ldr	r0, [r0, #0]
 800b380:	f008 fa78 	bl	8013874 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800b384:	4630      	mov	r0, r6
 800b386:	b003      	add	sp, #12
 800b388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b38a:	bf00      	nop
 800b38c:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc

0800b390 <DisplaySet::SetSleep(bool)>:
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop

0800b394 <HttpDeamonHandleRequest::ParseMethod(char*)>:
 800b394:	460b      	mov	r3, r1
 800b396:	b510      	push	{r4, lr}
 800b398:	4929      	ldr	r1, [pc, #164]	@ (800b440 <HttpDeamonHandleRequest::ParseMethod(char*)+0xac>)
 800b39a:	4604      	mov	r4, r0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f00f f919 	bl	801a5d4 <strtok>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d039      	beq.n	800b41a <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b3a6:	7803      	ldrb	r3, [r0, #0]
 800b3a8:	2b47      	cmp	r3, #71	@ 0x47
 800b3aa:	d139      	bne.n	800b420 <HttpDeamonHandleRequest::ParseMethod(char*)+0x8c>
 800b3ac:	4a25      	ldr	r2, [pc, #148]	@ (800b444 <HttpDeamonHandleRequest::ParseMethod(char*)+0xb0>)
 800b3ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b3b2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b3b6:	428b      	cmp	r3, r1
 800b3b8:	d12f      	bne.n	800b41a <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1f7      	bne.n	800b3ae <HttpDeamonHandleRequest::ParseMethod(char*)+0x1a>
 800b3be:	4920      	ldr	r1, [pc, #128]	@ (800b440 <HttpDeamonHandleRequest::ParseMethod(char*)+0xac>)
 800b3c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	f00f f906 	bl	801a5d4 <strtok>
 800b3c8:	b320      	cbz	r0, 800b414 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b3ca:	61a0      	str	r0, [r4, #24]
 800b3cc:	491e      	ldr	r1, [pc, #120]	@ (800b448 <HttpDeamonHandleRequest::ParseMethod(char*)+0xb4>)
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	f00f f900 	bl	801a5d4 <strtok>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	b1e8      	cbz	r0, 800b414 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b3d8:	7802      	ldrb	r2, [r0, #0]
 800b3da:	2a48      	cmp	r2, #72	@ 0x48
 800b3dc:	d11a      	bne.n	800b414 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b3de:	4a1b      	ldr	r2, [pc, #108]	@ (800b44c <HttpDeamonHandleRequest::ParseMethod(char*)+0xb8>)
 800b3e0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b3e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b3e8:	4288      	cmp	r0, r1
 800b3ea:	d113      	bne.n	800b414 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d1f7      	bne.n	800b3e0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x4c>
 800b3f0:	4917      	ldr	r1, [pc, #92]	@ (800b450 <HttpDeamonHandleRequest::ParseMethod(char*)+0xbc>)
 800b3f2:	f00f f8ef 	bl	801a5d4 <strtok>
 800b3f6:	b168      	cbz	r0, 800b414 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b3f8:	7803      	ldrb	r3, [r0, #0]
 800b3fa:	2b31      	cmp	r3, #49	@ 0x31
 800b3fc:	d11d      	bne.n	800b43a <HttpDeamonHandleRequest::ParseMethod(char*)+0xa6>
 800b3fe:	4a15      	ldr	r2, [pc, #84]	@ (800b454 <HttpDeamonHandleRequest::ParseMethod(char*)+0xc0>)
 800b400:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b404:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b408:	428b      	cmp	r3, r1
 800b40a:	d116      	bne.n	800b43a <HttpDeamonHandleRequest::ParseMethod(char*)+0xa6>
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1f7      	bne.n	800b400 <HttpDeamonHandleRequest::ParseMethod(char*)+0x6c>
 800b410:	20c8      	movs	r0, #200	@ 0xc8
 800b412:	bd10      	pop	{r4, pc}
 800b414:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b418:	bd10      	pop	{r4, pc}
 800b41a:	f240 10f5 	movw	r0, #501	@ 0x1f5
 800b41e:	bd10      	pop	{r4, pc}
 800b420:	2b50      	cmp	r3, #80	@ 0x50
 800b422:	d1fa      	bne.n	800b41a <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b424:	4a0c      	ldr	r2, [pc, #48]	@ (800b458 <HttpDeamonHandleRequest::ParseMethod(char*)+0xc4>)
 800b426:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b42a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b42e:	428b      	cmp	r3, r1
 800b430:	d1f3      	bne.n	800b41a <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1f7      	bne.n	800b426 <HttpDeamonHandleRequest::ParseMethod(char*)+0x92>
 800b436:	2301      	movs	r3, #1
 800b438:	e7c1      	b.n	800b3be <HttpDeamonHandleRequest::ParseMethod(char*)+0x2a>
 800b43a:	f240 10f9 	movw	r0, #505	@ 0x1f9
 800b43e:	bd10      	pop	{r4, pc}
 800b440:	0801c284 	stmdaeq	r1, {r2, r7, r9, lr, pc}
 800b444:	0801c288 	stmdaeq	r1, {r3, r7, r9, lr, pc}
 800b448:	0801c294 	stmdaeq	r1, {r2, r4, r7, r9, lr, pc}
 800b44c:	0801c298 	stmdaeq	r1, {r3, r4, r7, r9, lr, pc}
 800b450:	0801c2a0 	stmdaeq	r1, {r5, r7, r9, lr, pc}
 800b454:	0801c2a4 	stmdaeq	r1, {r2, r5, r7, r9, lr, pc}
 800b458:	0801c28c 	stmdaeq	r1, {r2, r3, r7, r9, lr, pc}

0800b45c <HttpDeamonHandleRequest::ParseHeaderField(char*)>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	460b      	mov	r3, r1
 800b460:	4605      	mov	r5, r0
 800b462:	493f      	ldr	r1, [pc, #252]	@ (800b560 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x104>)
 800b464:	4618      	mov	r0, r3
 800b466:	f00f f8b5 	bl	801a5d4 <strtok>
 800b46a:	b370      	cbz	r0, 800b4ca <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b46c:	1e41      	subs	r1, r0, #1
 800b46e:	4c3d      	ldr	r4, [pc, #244]	@ (800b564 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x108>)
 800b470:	468c      	mov	ip, r1
 800b472:	e000      	b.n	800b476 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x1a>
 800b474:	b360      	cbz	r0, 800b4d0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x74>
 800b476:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 800b47a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b47e:	2b19      	cmp	r3, #25
 800b480:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b484:	f1a3 0e41 	sub.w	lr, r3, #65	@ 0x41
 800b488:	4602      	mov	r2, r0
 800b48a:	bf98      	it	ls
 800b48c:	f100 0220 	addls.w	r2, r0, #32
 800b490:	f1be 0f19 	cmp.w	lr, #25
 800b494:	bf98      	it	ls
 800b496:	3320      	addls	r3, #32
 800b498:	4293      	cmp	r3, r2
 800b49a:	d0eb      	beq.n	800b474 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x18>
 800b49c:	4832      	ldr	r0, [pc, #200]	@ (800b568 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x10c>)
 800b49e:	e000      	b.n	800b4a2 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x46>
 800b4a0:	b34c      	cbz	r4, 800b4f6 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x9a>
 800b4a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b4a6:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800b4aa:	2b19      	cmp	r3, #25
 800b4ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b4b0:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 800b4b4:	4622      	mov	r2, r4
 800b4b6:	bf98      	it	ls
 800b4b8:	f104 0220 	addls.w	r2, r4, #32
 800b4bc:	f1bc 0f19 	cmp.w	ip, #25
 800b4c0:	bf98      	it	ls
 800b4c2:	3320      	addls	r3, #32
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d0eb      	beq.n	800b4a0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x44>
 800b4c8:	e03a      	b.n	800b540 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b4ca:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b4ce:	bd38      	pop	{r3, r4, r5, pc}
 800b4d0:	4926      	ldr	r1, [pc, #152]	@ (800b56c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x110>)
 800b4d2:	f00f f87f 	bl	801a5d4 <strtok>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d0f7      	beq.n	800b4ca <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b4da:	4a25      	ldr	r2, [pc, #148]	@ (800b570 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x114>)
 800b4dc:	1e43      	subs	r3, r0, #1
 800b4de:	f100 0c0b 	add.w	ip, r0, #11
 800b4e2:	e001      	b.n	800b4e8 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x8c>
 800b4e4:	459c      	cmp	ip, r3
 800b4e6:	d019      	beq.n	800b51c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xc0>
 800b4e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b4ec:	f812 4b01 	ldrb.w	r4, [r2], #1
 800b4f0:	428c      	cmp	r4, r1
 800b4f2:	d0f7      	beq.n	800b4e4 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x88>
 800b4f4:	e024      	b.n	800b540 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b4f6:	491f      	ldr	r1, [pc, #124]	@ (800b574 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x118>)
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f00f f86b 	bl	801a5d4 <strtok>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d0e3      	beq.n	800b4ca <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b502:	7803      	ldrb	r3, [r0, #0]
 800b504:	b1db      	cbz	r3, 800b53e <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe2>
 800b506:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800b50a:	2a09      	cmp	r2, #9
 800b50c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b510:	d8db      	bhi.n	800b4ca <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b512:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b516:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b51a:	e7f3      	b.n	800b504 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xa8>
 800b51c:	7b02      	ldrb	r2, [r0, #12]
 800b51e:	2a6a      	cmp	r2, #106	@ 0x6a
 800b520:	f100 030c 	add.w	r3, r0, #12
 800b524:	d10e      	bne.n	800b544 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe8>
 800b526:	4914      	ldr	r1, [pc, #80]	@ (800b578 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x11c>)
 800b528:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b52c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b530:	4282      	cmp	r2, r0
 800b532:	d105      	bne.n	800b540 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b534:	2a00      	cmp	r2, #0
 800b536:	d1f7      	bne.n	800b528 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xcc>
 800b538:	2303      	movs	r3, #3
 800b53a:	632b      	str	r3, [r5, #48]	@ 0x30
 800b53c:	e000      	b.n	800b540 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b53e:	612c      	str	r4, [r5, #16]
 800b540:	20c8      	movs	r0, #200	@ 0xc8
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	2a6f      	cmp	r2, #111	@ 0x6f
 800b546:	d1fb      	bne.n	800b540 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b548:	490c      	ldr	r1, [pc, #48]	@ (800b57c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x120>)
 800b54a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b54e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b552:	4282      	cmp	r2, r0
 800b554:	d1f4      	bne.n	800b540 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b556:	2a00      	cmp	r2, #0
 800b558:	d1f7      	bne.n	800b54a <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xee>
 800b55a:	2304      	movs	r3, #4
 800b55c:	e7ed      	b.n	800b53a <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xde>
 800b55e:	bf00      	nop
 800b560:	0801c2a8 	stmdaeq	r1, {r3, r5, r7, r9, lr, pc}
 800b564:	0801c2ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, lr, pc}
 800b568:	0801c2bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, lr, pc}
 800b56c:	0801c2f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, lr, pc}
 800b570:	0801c2cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, lr, pc}
 800b574:	0801c284 	stmdaeq	r1, {r2, r7, r9, lr, pc}
 800b578:	0801c2dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, lr, pc}
 800b57c:	0801c2e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, lr, pc}

0800b580 <HttpDeamonHandleRequest::ParseRequest()>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b584:	4605      	mov	r5, r0
 800b586:	6940      	ldr	r0, [r0, #20]
 800b588:	2400      	movs	r4, #0
 800b58a:	2205      	movs	r2, #5
 800b58c:	e9c5 4403 	strd	r4, r4, [r5, #12]
 800b590:	632a      	str	r2, [r5, #48]	@ 0x30
 800b592:	b300      	cbz	r0, 800b5d6 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b594:	4619      	mov	r1, r3
 800b596:	46a4      	mov	ip, r4
 800b598:	4626      	mov	r6, r4
 800b59a:	e002      	b.n	800b5a2 <HttpDeamonHandleRequest::ParseRequest()+0x22>
 800b59c:	3401      	adds	r4, #1
 800b59e:	42a0      	cmp	r0, r4
 800b5a0:	d919      	bls.n	800b5d6 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b5a2:	5d1a      	ldrb	r2, [r3, r4]
 800b5a4:	2a0a      	cmp	r2, #10
 800b5a6:	d1f9      	bne.n	800b59c <HttpDeamonHandleRequest::ParseRequest()+0x1c>
 800b5a8:	4423      	add	r3, r4
 800b5aa:	f10c 0701 	add.w	r7, ip, #1
 800b5ae:	f803 6c01 	strb.w	r6, [r3, #-1]
 800b5b2:	f1bc 0f00 	cmp.w	ip, #0
 800b5b6:	d010      	beq.n	800b5da <HttpDeamonHandleRequest::ParseRequest()+0x5a>
 800b5b8:	780b      	ldrb	r3, [r1, #0]
 800b5ba:	b193      	cbz	r3, 800b5e2 <HttpDeamonHandleRequest::ParseRequest()+0x62>
 800b5bc:	4628      	mov	r0, r5
 800b5be:	f7ff ff4d 	bl	800b45c <HttpDeamonHandleRequest::ParseHeaderField(char*)>
 800b5c2:	28c8      	cmp	r0, #200	@ 0xc8
 800b5c4:	d108      	bne.n	800b5d8 <HttpDeamonHandleRequest::ParseRequest()+0x58>
 800b5c6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b5c8:	6968      	ldr	r0, [r5, #20]
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	1919      	adds	r1, r3, r4
 800b5ce:	3401      	adds	r4, #1
 800b5d0:	42a0      	cmp	r0, r4
 800b5d2:	46bc      	mov	ip, r7
 800b5d4:	d8e5      	bhi.n	800b5a2 <HttpDeamonHandleRequest::ParseRequest()+0x22>
 800b5d6:	20c8      	movs	r0, #200	@ 0xc8
 800b5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f7ff feda 	bl	800b394 <HttpDeamonHandleRequest::ParseMethod(char*)>
 800b5e0:	e7ef      	b.n	800b5c2 <HttpDeamonHandleRequest::ParseRequest()+0x42>
 800b5e2:	696a      	ldr	r2, [r5, #20]
 800b5e4:	3a01      	subs	r2, #1
 800b5e6:	1b12      	subs	r2, r2, r4
 800b5e8:	b292      	uxth	r2, r2
 800b5ea:	60ea      	str	r2, [r5, #12]
 800b5ec:	2a00      	cmp	r2, #0
 800b5ee:	d0f2      	beq.n	800b5d6 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b5f0:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800b5f2:	3401      	adds	r4, #1
 800b5f4:	4421      	add	r1, r4
 800b5f6:	61e9      	str	r1, [r5, #28]
 800b5f8:	548b      	strb	r3, [r1, r2]
 800b5fa:	e7ec      	b.n	800b5d6 <HttpDeamonHandleRequest::ParseRequest()+0x56>

0800b5fc <HttpDeamonHandleRequest::HandleGetTxt()>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	4605      	mov	r5, r0
 800b600:	6980      	ldr	r0, [r0, #24]
 800b602:	7983      	ldrb	r3, [r0, #6]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d039      	beq.n	800b67c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b608:	1d84      	adds	r4, r0, #6
 800b60a:	4623      	mov	r3, r4
 800b60c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b610:	2a00      	cmp	r2, #0
 800b612:	d1fb      	bne.n	800b60c <HttpDeamonHandleRequest::HandleGetTxt()+0x10>
 800b614:	1b1a      	subs	r2, r3, r4
 800b616:	2a04      	cmp	r2, #4
 800b618:	d930      	bls.n	800b67c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b61a:	1f13      	subs	r3, r2, #4
 800b61c:	18e1      	adds	r1, r4, r3
 800b61e:	5ce3      	ldrb	r3, [r4, r3]
 800b620:	2b2e      	cmp	r3, #46	@ 0x2e
 800b622:	d12b      	bne.n	800b67c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b624:	4c18      	ldr	r4, [pc, #96]	@ (800b688 <HttpDeamonHandleRequest::HandleGetTxt()+0x8c>)
 800b626:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b62a:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800b62e:	4563      	cmp	r3, ip
 800b630:	d124      	bne.n	800b67c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1f7      	bne.n	800b626 <HttpDeamonHandleRequest::HandleGetTxt()+0x2a>
 800b636:	4c15      	ldr	r4, [pc, #84]	@ (800b68c <HttpDeamonHandleRequest::HandleGetTxt()+0x90>)
 800b638:	7821      	ldrb	r1, [r4, #0]
 800b63a:	f041 0601 	orr.w	r6, r1, #1
 800b63e:	1d43      	adds	r3, r0, #5
 800b640:	7026      	strb	r6, [r4, #0]
 800b642:	4813      	ldr	r0, [pc, #76]	@ (800b690 <HttpDeamonHandleRequest::HandleGetTxt()+0x94>)
 800b644:	f001 0601 	and.w	r6, r1, #1
 800b648:	e003      	b.n	800b652 <HttpDeamonHandleRequest::HandleGetTxt()+0x56>
 800b64a:	3a01      	subs	r2, #1
 800b64c:	f800 1b01 	strb.w	r1, [r0], #1
 800b650:	d005      	beq.n	800b65e <HttpDeamonHandleRequest::HandleGetTxt()+0x62>
 800b652:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b656:	2900      	cmp	r1, #0
 800b658:	d1f7      	bne.n	800b64a <HttpDeamonHandleRequest::HandleGetTxt()+0x4e>
 800b65a:	f00e fc69 	bl	8019f30 <memset>
 800b65e:	4b0d      	ldr	r3, [pc, #52]	@ (800b694 <HttpDeamonHandleRequest::HandleGetTxt()+0x98>)
 800b660:	490b      	ldr	r1, [pc, #44]	@ (800b690 <HttpDeamonHandleRequest::HandleGetTxt()+0x94>)
 800b662:	6818      	ldr	r0, [r3, #0]
 800b664:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800b668:	f7ff fa4a 	bl	800ab00 <RemoteConfig::HandleGet(void*, unsigned long)>
 800b66c:	7823      	ldrb	r3, [r4, #0]
 800b66e:	60a8      	str	r0, [r5, #8]
 800b670:	b93e      	cbnz	r6, 800b682 <HttpDeamonHandleRequest::HandleGetTxt()+0x86>
 800b672:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b676:	7023      	strb	r3, [r4, #0]
 800b678:	20c8      	movs	r0, #200	@ 0xc8
 800b67a:	bd70      	pop	{r4, r5, r6, pc}
 800b67c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b680:	bd70      	pop	{r4, r5, r6, pc}
 800b682:	f043 0301 	orr.w	r3, r3, #1
 800b686:	e7f6      	b.n	800b676 <HttpDeamonHandleRequest::HandleGetTxt()+0x7a>
 800b688:	0801c2f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, lr, pc}
 800b68c:	2000e2e1 	andcs	lr, r0, r1, ror #5
 800b690:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800b694:	2000cd30 	andcs	ip, r0, r0, lsr sp

0800b698 <HttpDeamonHandleRequest::HandleGet()>:
 800b698:	b530      	push	{r4, r5, lr}
 800b69a:	4604      	mov	r4, r0
 800b69c:	b083      	sub	sp, #12
 800b69e:	6980      	ldr	r0, [r0, #24]
 800b6a0:	4b91      	ldr	r3, [pc, #580]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b6a2:	6223      	str	r3, [r4, #32]
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4a91      	ldr	r2, [pc, #580]	@ (800b8ec <HttpDeamonHandleRequest::HandleGet()+0x254>)
 800b6a8:	9101      	str	r1, [sp, #4]
 800b6aa:	1e43      	subs	r3, r0, #1
 800b6ac:	f100 0e05 	add.w	lr, r0, #5
 800b6b0:	e001      	b.n	800b6b6 <HttpDeamonHandleRequest::HandleGet()+0x1e>
 800b6b2:	459e      	cmp	lr, r3
 800b6b4:	d020      	beq.n	800b6f8 <HttpDeamonHandleRequest::HandleGet()+0x60>
 800b6b6:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 800b6ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b6be:	458c      	cmp	ip, r1
 800b6c0:	d0f7      	beq.n	800b6b2 <HttpDeamonHandleRequest::HandleGet()+0x1a>
 800b6c2:	7803      	ldrb	r3, [r0, #0]
 800b6c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6c6:	f040 8081 	bne.w	800b7cc <HttpDeamonHandleRequest::HandleGet()+0x134>
 800b6ca:	4a89      	ldr	r2, [pc, #548]	@ (800b8f0 <HttpDeamonHandleRequest::HandleGet()+0x258>)
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b6d2:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b6d6:	4563      	cmp	r3, ip
 800b6d8:	d13c      	bne.n	800b754 <HttpDeamonHandleRequest::HandleGet()+0xbc>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1f7      	bne.n	800b6ce <HttpDeamonHandleRequest::HandleGet()+0x36>
 800b6de:	4885      	ldr	r0, [pc, #532]	@ (800b8f4 <HttpDeamonHandleRequest::HandleGet()+0x25c>)
 800b6e0:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 800b6e4:	a901      	add	r1, sp, #4
 800b6e6:	f000 fb1d 	bl	800bd24 <get_file_content(char const*, unsigned long&, http::contentTypes&)>
 800b6ea:	9b01      	ldr	r3, [sp, #4]
 800b6ec:	6220      	str	r0, [r4, #32]
 800b6ee:	b36b      	cbz	r3, 800b74c <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b6f0:	60a3      	str	r3, [r4, #8]
 800b6f2:	20c8      	movs	r0, #200	@ 0xc8
 800b6f4:	b003      	add	sp, #12
 800b6f6:	bd30      	pop	{r4, r5, pc}
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6fc:	7982      	ldrb	r2, [r0, #6]
 800b6fe:	1dc1      	adds	r1, r0, #7
 800b700:	2a00      	cmp	r2, #0
 800b702:	d046      	beq.n	800b792 <HttpDeamonHandleRequest::HandleGet()+0xfa>
 800b704:	f241 5305 	movw	r3, #5381	@ 0x1505
 800b708:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800b70c:	fa12 f383 	uxtah	r3, r2, r3
 800b710:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b714:	b29b      	uxth	r3, r3
 800b716:	2a00      	cmp	r2, #0
 800b718:	d1f6      	bne.n	800b708 <HttpDeamonHandleRequest::HandleGet()+0x70>
 800b71a:	f244 729b 	movw	r2, #18331	@ 0x479b
 800b71e:	4293      	cmp	r3, r2
 800b720:	d073      	beq.n	800b80a <HttpDeamonHandleRequest::HandleGet()+0x172>
 800b722:	d858      	bhi.n	800b7d6 <HttpDeamonHandleRequest::HandleGet()+0x13e>
 800b724:	f241 6261 	movw	r2, #5729	@ 0x1661
 800b728:	4293      	cmp	r3, r2
 800b72a:	d02b      	beq.n	800b784 <HttpDeamonHandleRequest::HandleGet()+0xec>
 800b72c:	f242 4272 	movw	r2, #9330	@ 0x2472
 800b730:	4293      	cmp	r3, r2
 800b732:	d063      	beq.n	800b7fc <HttpDeamonHandleRequest::HandleGet()+0x164>
 800b734:	f241 12fa 	movw	r2, #4602	@ 0x11fa
 800b738:	4293      	cmp	r3, r2
 800b73a:	d12a      	bne.n	800b792 <HttpDeamonHandleRequest::HandleGet()+0xfa>
 800b73c:	486a      	ldr	r0, [pc, #424]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b73e:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b742:	f000 fae9 	bl	800bd18 <remoteconfig::json_get_directory(char*, unsigned long)>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1d1      	bne.n	800b6f0 <HttpDeamonHandleRequest::HandleGet()+0x58>
 800b74c:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 800b750:	b003      	add	sp, #12
 800b752:	bd30      	pop	{r4, r5, pc}
 800b754:	4a68      	ldr	r2, [pc, #416]	@ (800b8f8 <HttpDeamonHandleRequest::HandleGet()+0x260>)
 800b756:	4601      	mov	r1, r0
 800b758:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b75c:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b760:	4563      	cmp	r3, ip
 800b762:	d103      	bne.n	800b76c <HttpDeamonHandleRequest::HandleGet()+0xd4>
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1f7      	bne.n	800b758 <HttpDeamonHandleRequest::HandleGet()+0xc0>
 800b768:	4864      	ldr	r0, [pc, #400]	@ (800b8fc <HttpDeamonHandleRequest::HandleGet()+0x264>)
 800b76a:	e7b9      	b.n	800b6e0 <HttpDeamonHandleRequest::HandleGet()+0x48>
 800b76c:	4a64      	ldr	r2, [pc, #400]	@ (800b900 <HttpDeamonHandleRequest::HandleGet()+0x268>)
 800b76e:	4601      	mov	r1, r0
 800b770:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b774:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b778:	4563      	cmp	r3, ip
 800b77a:	d127      	bne.n	800b7cc <HttpDeamonHandleRequest::HandleGet()+0x134>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1f7      	bne.n	800b770 <HttpDeamonHandleRequest::HandleGet()+0xd8>
 800b780:	4860      	ldr	r0, [pc, #384]	@ (800b904 <HttpDeamonHandleRequest::HandleGet()+0x26c>)
 800b782:	e7ad      	b.n	800b6e0 <HttpDeamonHandleRequest::HandleGet()+0x48>
 800b784:	4858      	ldr	r0, [pc, #352]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b786:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b78a:	f000 fa61 	bl	800bc50 <remoteconfig::json_get_list(char*, unsigned long)>
 800b78e:	4603      	mov	r3, r0
 800b790:	e7da      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b792:	4a5d      	ldr	r2, [pc, #372]	@ (800b908 <HttpDeamonHandleRequest::HandleGet()+0x270>)
 800b794:	f100 0509 	add.w	r5, r0, #9
 800b798:	4673      	mov	r3, lr
 800b79a:	e001      	b.n	800b7a0 <HttpDeamonHandleRequest::HandleGet()+0x108>
 800b79c:	429d      	cmp	r5, r3
 800b79e:	d045      	beq.n	800b82c <HttpDeamonHandleRequest::HandleGet()+0x194>
 800b7a0:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 800b7a4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b7a8:	458c      	cmp	ip, r1
 800b7aa:	d0f7      	beq.n	800b79c <HttpDeamonHandleRequest::HandleGet()+0x104>
 800b7ac:	4b57      	ldr	r3, [pc, #348]	@ (800b90c <HttpDeamonHandleRequest::HandleGet()+0x274>)
 800b7ae:	f100 050b 	add.w	r5, r0, #11
 800b7b2:	e001      	b.n	800b7b8 <HttpDeamonHandleRequest::HandleGet()+0x120>
 800b7b4:	4575      	cmp	r5, lr
 800b7b6:	d068      	beq.n	800b88a <HttpDeamonHandleRequest::HandleGet()+0x1f2>
 800b7b8:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 800b7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c0:	4291      	cmp	r1, r2
 800b7c2:	d0f7      	beq.n	800b7b4 <HttpDeamonHandleRequest::HandleGet()+0x11c>
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f7ff ff19 	bl	800b5fc <HttpDeamonHandleRequest::HandleGetTxt()>
 800b7ca:	e793      	b.n	800b6f4 <HttpDeamonHandleRequest::HandleGet()+0x5c>
 800b7cc:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 800b7d0:	a901      	add	r1, sp, #4
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	e787      	b.n	800b6e6 <HttpDeamonHandleRequest::HandleGet()+0x4e>
 800b7d6:	f646 424b 	movw	r2, #27723	@ 0x6c4b
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d01c      	beq.n	800b818 <HttpDeamonHandleRequest::HandleGet()+0x180>
 800b7de:	f24b 72d9 	movw	r2, #47065	@ 0xb7d9
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d1d5      	bne.n	800b792 <HttpDeamonHandleRequest::HandleGet()+0xfa>
 800b7e6:	4b4a      	ldr	r3, [pc, #296]	@ (800b910 <HttpDeamonHandleRequest::HandleGet()+0x278>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	7bdb      	ldrb	r3, [r3, #15]
 800b7ec:	b1db      	cbz	r3, 800b826 <HttpDeamonHandleRequest::HandleGet()+0x18e>
 800b7ee:	483e      	ldr	r0, [pc, #248]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b7f0:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b7f4:	f000 fa7a 	bl	800bcec <remoteconfig::json_get_uptime(char*, unsigned long)>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	e7a5      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b7fc:	483a      	ldr	r0, [pc, #232]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b7fe:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b802:	f00c f971 	bl	8017ae8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)>
 800b806:	4603      	mov	r3, r0
 800b808:	e79e      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b80a:	4837      	ldr	r0, [pc, #220]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b80c:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b810:	f000 fa76 	bl	800bd00 <remoteconfig::json_get_display(char*, unsigned long)>
 800b814:	4603      	mov	r3, r0
 800b816:	e797      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b818:	4833      	ldr	r0, [pc, #204]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b81a:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b81e:	f000 fa49 	bl	800bcb4 <remoteconfig::json_get_version(char*, unsigned long)>
 800b822:	4603      	mov	r3, r0
 800b824:	e790      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b826:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b82a:	e763      	b.n	800b6f4 <HttpDeamonHandleRequest::HandleGet()+0x5c>
 800b82c:	7c05      	ldrb	r5, [r0, #16]
 800b82e:	7a82      	ldrb	r2, [r0, #10]
 800b830:	2d3f      	cmp	r5, #63	@ 0x3f
 800b832:	bf04      	itt	eq
 800b834:	2300      	moveq	r3, #0
 800b836:	7403      	strbeq	r3, [r0, #16]
 800b838:	f100 010b 	add.w	r1, r0, #11
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	d085      	beq.n	800b74c <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b840:	f241 5305 	movw	r3, #5381	@ 0x1505
 800b844:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800b848:	fa12 f383 	uxtah	r3, r2, r3
 800b84c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b850:	b29b      	uxth	r3, r3
 800b852:	2a00      	cmp	r2, #0
 800b854:	d1f6      	bne.n	800b844 <HttpDeamonHandleRequest::HandleGet()+0x1ac>
 800b856:	f643 124e 	movw	r2, #14670	@ 0x394e
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d035      	beq.n	800b8ca <HttpDeamonHandleRequest::HandleGet()+0x232>
 800b85e:	f648 5249 	movw	r2, #36169	@ 0x8d49
 800b862:	4293      	cmp	r3, r2
 800b864:	f47f af72 	bne.w	800b74c <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b868:	2d3f      	cmp	r5, #63	@ 0x3f
 800b86a:	f47f af6f 	bne.w	800b74c <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b86e:	7c40      	ldrb	r0, [r0, #17]
 800b870:	f020 0320 	bic.w	r3, r0, #32
 800b874:	3b41      	subs	r3, #65	@ 0x41
 800b876:	2b19      	cmp	r3, #25
 800b878:	f63f af68 	bhi.w	800b74c <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b87c:	491a      	ldr	r1, [pc, #104]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b87e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800b882:	f002 ff99 	bl	800e7b8 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)>
 800b886:	4603      	mov	r3, r0
 800b888:	e75e      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b88a:	7b02      	ldrb	r2, [r0, #12]
 800b88c:	300d      	adds	r0, #13
 800b88e:	2a00      	cmp	r2, #0
 800b890:	f43f af5c 	beq.w	800b74c <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b894:	f241 5305 	movw	r3, #5381	@ 0x1505
 800b898:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800b89c:	fa12 f383 	uxtah	r3, r2, r3
 800b8a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	2a00      	cmp	r2, #0
 800b8a8:	d1f6      	bne.n	800b898 <HttpDeamonHandleRequest::HandleGet()+0x200>
 800b8aa:	f645 625a 	movw	r2, #24154	@ 0x5e5a
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d012      	beq.n	800b8d8 <HttpDeamonHandleRequest::HandleGet()+0x240>
 800b8b2:	f648 5249 	movw	r2, #36169	@ 0x8d49
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	f47f af48 	bne.w	800b74c <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b8bc:	480a      	ldr	r0, [pc, #40]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b8be:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b8c2:	f005 fc35 	bl	8011130 <remoteconfig::pixel::json_get_status(char*, unsigned long)>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	e73e      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b8ca:	4807      	ldr	r0, [pc, #28]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b8cc:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b8d0:	f002 ff3a 	bl	800e748 <remoteconfig::dmx::json_get_ports(char*, unsigned long)>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	e737      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b8d8:	4803      	ldr	r0, [pc, #12]	@ (800b8e8 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b8da:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b8de:	f005 fcc5 	bl	801126c <remoteconfig::pixel::json_get_types(char*, unsigned long)>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	e730      	b.n	800b748 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b8e6:	bf00      	nop
 800b8e8:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800b8ec:	0801c300 	stmdaeq	r1, {r8, r9, lr, pc}
 800b8f0:	0801c294 	stmdaeq	r1, {r2, r4, r7, r9, lr, pc}
 800b8f4:	0801c318 	stmdaeq	r1, {r3, r4, r8, r9, lr, pc}
 800b8f8:	0801c324 	stmdaeq	r1, {r2, r5, r8, r9, lr, pc}
 800b8fc:	0801c32c 	stmdaeq	r1, {r2, r3, r5, r8, r9, lr, pc}
 800b900:	0801c338 	stmdaeq	r1, {r3, r4, r5, r8, r9, lr, pc}
 800b904:	0801c340 	stmdaeq	r1, {r6, r8, r9, lr, pc}
 800b908:	0801c308 	stmdaeq	r1, {r3, r8, r9, lr, pc}
 800b90c:	0801c310 	stmdaeq	r1, {r4, r8, r9, lr, pc}
 800b910:	2000cd30 	andcs	ip, r0, r0, lsr sp

0800b914 <HttpDeamonHandleRequest::HandlePost(bool)>:
 800b914:	b570      	push	{r4, r5, r6, lr}
 800b916:	4604      	mov	r4, r0
 800b918:	b082      	sub	sp, #8
 800b91a:	b331      	cbz	r1, 800b96a <HttpDeamonHandleRequest::HandlePost(bool)+0x56>
 800b91c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b91e:	8aa1      	ldrh	r1, [r4, #20]
 800b920:	61e0      	str	r0, [r4, #28]
 800b922:	60e1      	str	r1, [r4, #12]
 800b924:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d13c      	bne.n	800b9a6 <HttpDeamonHandleRequest::HandlePost(bool)+0x92>
 800b92c:	4d5e      	ldr	r5, [pc, #376]	@ (800baa8 <HttpDeamonHandleRequest::HandlePost(bool)+0x194>)
 800b92e:	4b5f      	ldr	r3, [pc, #380]	@ (800baac <HttpDeamonHandleRequest::HandlePost(bool)+0x198>)
 800b930:	782e      	ldrb	r6, [r5, #0]
 800b932:	460a      	mov	r2, r1
 800b934:	4601      	mov	r1, r0
 800b936:	6818      	ldr	r0, [r3, #0]
 800b938:	f046 0301 	orr.w	r3, r6, #1
 800b93c:	702b      	strb	r3, [r5, #0]
 800b93e:	f7ff f9c7 	bl	800acd0 <RemoteConfig::HandleSet(void*, unsigned long)>
 800b942:	782b      	ldrb	r3, [r5, #0]
 800b944:	07f2      	lsls	r2, r6, #31
 800b946:	bf4c      	ite	mi
 800b948:	f043 0301 	orrmi.w	r3, r3, #1
 800b94c:	f023 0301 	bicpl.w	r3, r3, #1
 800b950:	702b      	strb	r3, [r5, #0]
 800b952:	2300      	movs	r3, #0
 800b954:	4a56      	ldr	r2, [pc, #344]	@ (800bab0 <HttpDeamonHandleRequest::HandlePost(bool)+0x19c>)
 800b956:	4857      	ldr	r0, [pc, #348]	@ (800bab4 <HttpDeamonHandleRequest::HandlePost(bool)+0x1a0>)
 800b958:	6323      	str	r3, [r4, #48]	@ 0x30
 800b95a:	f240 519f 	movw	r1, #1439	@ 0x59f
 800b95e:	f00e fdf3 	bl	801a548 <snprintf>
 800b962:	60a0      	str	r0, [r4, #8]
 800b964:	20c8      	movs	r0, #200	@ 0xc8
 800b966:	b002      	add	sp, #8
 800b968:	bd70      	pop	{r4, r5, r6, pc}
 800b96a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	d134      	bne.n	800b9da <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800b970:	6985      	ldr	r5, [r0, #24]
 800b972:	782b      	ldrb	r3, [r5, #0]
 800b974:	2b2f      	cmp	r3, #47	@ 0x2f
 800b976:	f040 808c 	bne.w	800ba92 <HttpDeamonHandleRequest::HandlePost(bool)+0x17e>
 800b97a:	4a4f      	ldr	r2, [pc, #316]	@ (800bab8 <HttpDeamonHandleRequest::HandlePost(bool)+0x1a4>)
 800b97c:	4629      	mov	r1, r5
 800b97e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b982:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b986:	4283      	cmp	r3, r0
 800b988:	d12b      	bne.n	800b9e2 <HttpDeamonHandleRequest::HandlePost(bool)+0xce>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f7      	bne.n	800b97e <HttpDeamonHandleRequest::HandlePost(bool)+0x6a>
 800b98e:	2301      	movs	r3, #1
 800b990:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800b994:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d3e3      	bcc.n	800b964 <HttpDeamonHandleRequest::HandlePost(bool)+0x50>
 800b99c:	68e1      	ldr	r1, [r4, #12]
 800b99e:	2900      	cmp	r1, #0
 800b9a0:	d0e0      	beq.n	800b964 <HttpDeamonHandleRequest::HandlePost(bool)+0x50>
 800b9a2:	69e0      	ldr	r0, [r4, #28]
 800b9a4:	e7be      	b.n	800b924 <HttpDeamonHandleRequest::HandlePost(bool)+0x10>
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f00b f9d4 	bl	8016d54 <properties::convert_json_file(char*, unsigned long, bool)>
 800b9ac:	1e05      	subs	r5, r0, #0
 800b9ae:	dd14      	ble.n	800b9da <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800b9b0:	69e3      	ldr	r3, [r4, #28]
 800b9b2:	4942      	ldr	r1, [pc, #264]	@ (800babc <HttpDeamonHandleRequest::HandlePost(bool)+0x1a8>)
 800b9b4:	442b      	add	r3, r5
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b9bc:	69e0      	ldr	r0, [r4, #28]
 800b9be:	f10d 0207 	add.w	r2, sp, #7
 800b9c2:	f00b fc73 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b9c6:	bb20      	cbnz	r0, 800ba12 <HttpDeamonHandleRequest::HandlePost(bool)+0xfe>
 800b9c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d0c0      	beq.n	800b952 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800b9d0:	4b36      	ldr	r3, [pc, #216]	@ (800baac <HttpDeamonHandleRequest::HandlePost(bool)+0x198>)
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	7b83      	ldrb	r3, [r0, #14]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d164      	bne.n	800baa4 <HttpDeamonHandleRequest::HandlePost(bool)+0x190>
 800b9da:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b9de:	b002      	add	sp, #8
 800b9e0:	bd70      	pop	{r4, r5, r6, pc}
 800b9e2:	1a1b      	subs	r3, r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bf0c      	ite	eq
 800b9e8:	2301      	moveq	r3, #1
 800b9ea:	2300      	movne	r3, #0
 800b9ec:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800b9f0:	d0d0      	beq.n	800b994 <HttpDeamonHandleRequest::HandlePost(bool)+0x80>
 800b9f2:	782b      	ldrb	r3, [r5, #0]
 800b9f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b9f6:	d109      	bne.n	800ba0c <HttpDeamonHandleRequest::HandlePost(bool)+0xf8>
 800b9f8:	4a31      	ldr	r2, [pc, #196]	@ (800bac0 <HttpDeamonHandleRequest::HandlePost(bool)+0x1ac>)
 800b9fa:	e001      	b.n	800ba00 <HttpDeamonHandleRequest::HandlePost(bool)+0xec>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0c9      	beq.n	800b994 <HttpDeamonHandleRequest::HandlePost(bool)+0x80>
 800ba00:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800ba04:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800ba08:	428b      	cmp	r3, r1
 800ba0a:	d0f7      	beq.n	800b9fc <HttpDeamonHandleRequest::HandlePost(bool)+0xe8>
 800ba0c:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 800ba10:	e7a9      	b.n	800b966 <HttpDeamonHandleRequest::HandlePost(bool)+0x52>
 800ba12:	492c      	ldr	r1, [pc, #176]	@ (800bac4 <HttpDeamonHandleRequest::HandlePost(bool)+0x1b0>)
 800ba14:	69e0      	ldr	r0, [r4, #28]
 800ba16:	f10d 0207 	add.w	r2, sp, #7
 800ba1a:	f00b fc47 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba1e:	b178      	cbz	r0, 800ba40 <HttpDeamonHandleRequest::HandlePost(bool)+0x12c>
 800ba20:	4929      	ldr	r1, [pc, #164]	@ (800bac8 <HttpDeamonHandleRequest::HandlePost(bool)+0x1b4>)
 800ba22:	69e0      	ldr	r0, [r4, #28]
 800ba24:	f10d 0207 	add.w	r2, sp, #7
 800ba28:	f00b fc40 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba2c:	bb10      	cbnz	r0, 800ba74 <HttpDeamonHandleRequest::HandlePost(bool)+0x160>
 800ba2e:	4a27      	ldr	r2, [pc, #156]	@ (800bacc <HttpDeamonHandleRequest::HandlePost(bool)+0x1b8>)
 800ba30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba34:	6810      	ldr	r0, [r2, #0]
 800ba36:	b37b      	cbz	r3, 800ba98 <HttpDeamonHandleRequest::HandlePost(bool)+0x184>
 800ba38:	2104      	movs	r1, #4
 800ba3a:	f00c f817 	bl	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 800ba3e:	e788      	b.n	800b952 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800ba40:	4b23      	ldr	r3, [pc, #140]	@ (800bad0 <HttpDeamonHandleRequest::HandlePost(bool)+0x1bc>)
 800ba42:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800ba46:	681d      	ldr	r5, [r3, #0]
 800ba48:	69a8      	ldr	r0, [r5, #24]
 800ba4a:	fab6 f186 	clz	r1, r6
 800ba4e:	0949      	lsrs	r1, r1, #5
 800ba50:	2800      	cmp	r0, #0
 800ba52:	f43f af7e 	beq.w	800b952 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800ba56:	6803      	ldr	r3, [r0, #0]
 800ba58:	4a1e      	ldr	r2, [pc, #120]	@ (800bad4 <HttpDeamonHandleRequest::HandlePost(bool)+0x1c0>)
 800ba5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba5c:	7569      	strb	r1, [r5, #21]
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d106      	bne.n	800ba70 <HttpDeamonHandleRequest::HandlePost(bool)+0x15c>
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	f43f af75 	beq.w	800b952 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800ba68:	4b1b      	ldr	r3, [pc, #108]	@ (800bad8 <HttpDeamonHandleRequest::HandlePost(bool)+0x1c4>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	606b      	str	r3, [r5, #4]
 800ba6e:	e770      	b.n	800b952 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800ba70:	4798      	blx	r3
 800ba72:	e7f6      	b.n	800ba62 <HttpDeamonHandleRequest::HandlePost(bool)+0x14e>
 800ba74:	69e0      	ldr	r0, [r4, #28]
 800ba76:	4a19      	ldr	r2, [pc, #100]	@ (800badc <HttpDeamonHandleRequest::HandlePost(bool)+0x1c8>)
 800ba78:	1e43      	subs	r3, r0, #1
 800ba7a:	f100 0c04 	add.w	ip, r0, #4
 800ba7e:	e001      	b.n	800ba84 <HttpDeamonHandleRequest::HandlePost(bool)+0x170>
 800ba80:	4563      	cmp	r3, ip
 800ba82:	d00b      	beq.n	800ba9c <HttpDeamonHandleRequest::HandlePost(bool)+0x188>
 800ba84:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800ba88:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ba8c:	428e      	cmp	r6, r1
 800ba8e:	d0f7      	beq.n	800ba80 <HttpDeamonHandleRequest::HandlePost(bool)+0x16c>
 800ba90:	e7a3      	b.n	800b9da <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800ba92:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 800ba96:	e7ac      	b.n	800b9f2 <HttpDeamonHandleRequest::HandlePost(bool)+0xde>
 800ba98:	2102      	movs	r1, #2
 800ba9a:	e7ce      	b.n	800ba3a <HttpDeamonHandleRequest::HandlePost(bool)+0x126>
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	f00c f88d 	bl	8017bbc <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)>
 800baa2:	e756      	b.n	800b952 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800baa4:	f7ff fbb0 	bl	800b208 <RemoteConfig::HandleReboot()>
 800baa8:	2000e2e1 	andcs	lr, r0, r1, ror #5
 800baac:	2000cd30 	andcs	ip, r0, r0, lsr sp
 800bab0:	0801c388 	stmdaeq	r1, {r3, r7, r8, r9, lr, pc}
 800bab4:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800bab8:	0801c34c 	stmdaeq	r1, {r2, r3, r6, r8, r9, lr, pc}
 800babc:	0801c364 	stmdaeq	r1, {r2, r5, r6, r8, r9, lr, pc}
 800bac0:	0801c35c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, lr, pc}
 800bac4:	0801c36c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, lr, pc}
 800bac8:	0801c374 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, lr, pc}
 800bacc:	2000e3d0 	ldrdcs	lr, [r0], -r0
 800bad0:	2000e2e4 	andcs	lr, r0, r4, ror #5
 800bad4:	0800b391 	stmdaeq	r0, {r0, r4, r7, r8, r9, ip, sp, pc}
 800bad8:	2001bcc0 	andcs	fp, r1, r0, asr #25
 800badc:	0801c380 	stmdaeq	r1, {r7, r8, r9, lr, pc}

0800bae0 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bae4:	6141      	str	r1, [r0, #20]
 800bae6:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800baea:	b084      	sub	sp, #16
 800baec:	4604      	mov	r4, r0
 800baee:	6242      	str	r2, [r0, #36]	@ 0x24
 800baf0:	d05f      	beq.n	800bbb2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xd2>
 800baf2:	2bc8      	cmp	r3, #200	@ 0xc8
 800baf4:	d055      	beq.n	800bba2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xc2>
 800baf6:	f5b3 7fcf 	cmp.w	r3, #414	@ 0x19e
 800bafa:	dc10      	bgt.n	800bb1e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x3e>
 800bafc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800bb00:	db1c      	blt.n	800bb3c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5c>
 800bb02:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800bb06:	2a0e      	cmp	r2, #14
 800bb08:	d818      	bhi.n	800bb3c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5c>
 800bb0a:	e8df f002 	tbb	[pc, r2]
 800bb0e:	17171772 			@ <UNDEFINED> instruction: 0x17171772
 800bb12:	17171770 			@ <UNDEFINED> instruction: 0x17171770
 800bb16:	17171717 			@ <UNDEFINED> instruction: 0x17171717
 800bb1a:	00606217 	rsbeq	r6, r0, r7, lsl r2
 800bb1e:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d057      	beq.n	800bbd6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xf6>
 800bb26:	f240 12f9 	movw	r2, #505	@ 0x1f9
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d04d      	beq.n	800bbca <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xea>
 800bb2e:	4e3a      	ldr	r6, [pc, #232]	@ (800bc18 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x138>)
 800bb30:	4a3a      	ldr	r2, [pc, #232]	@ (800bc1c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x13c>)
 800bb32:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800bb36:	bf08      	it	eq
 800bb38:	4616      	moveq	r6, r2
 800bb3a:	e000      	b.n	800bb3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bb3c:	4e36      	ldr	r6, [pc, #216]	@ (800bc18 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x138>)
 800bb3e:	4838      	ldr	r0, [pc, #224]	@ (800bc20 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x140>)
 800bb40:	6220      	str	r0, [r4, #32]
 800bb42:	2200      	movs	r2, #0
 800bb44:	6322      	str	r2, [r4, #48]	@ 0x30
 800bb46:	f240 519f 	movw	r1, #1439	@ 0x59f
 800bb4a:	e9cd 6600 	strd	r6, r6, [sp]
 800bb4e:	4a35      	ldr	r2, [pc, #212]	@ (800bc24 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x144>)
 800bb50:	f00e fcfa 	bl	801a548 <snprintf>
 800bb54:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	@ 0x24
 800bb58:	60a0      	str	r0, [r4, #8]
 800bb5a:	4933      	ldr	r1, [pc, #204]	@ (800bc28 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x148>)
 800bb5c:	9003      	str	r0, [sp, #12]
 800bb5e:	9600      	str	r6, [sp, #0]
 800bb60:	6809      	ldr	r1, [r1, #0]
 800bb62:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800bb64:	4a31      	ldr	r2, [pc, #196]	@ (800bc2c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x14c>)
 800bb66:	3116      	adds	r1, #22
 800bb68:	9101      	str	r1, [sp, #4]
 800bb6a:	4931      	ldr	r1, [pc, #196]	@ (800bc30 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x150>)
 800bb6c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800bb70:	9102      	str	r1, [sp, #8]
 800bb72:	4628      	mov	r0, r5
 800bb74:	f240 519f 	movw	r1, #1439	@ 0x59f
 800bb78:	f00e fce6 	bl	801a548 <snprintf>
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800bb80:	4602      	mov	r2, r0
 800bb82:	6860      	ldr	r0, [r4, #4]
 800bb84:	f009 fa58 	bl	8015038 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	68a2      	ldr	r2, [r4, #8]
 800bb8c:	6a21      	ldr	r1, [r4, #32]
 800bb8e:	6860      	ldr	r0, [r4, #4]
 800bb90:	f009 fa52 	bl	8015038 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>
 800bb94:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
 800bb9e:	b004      	add	sp, #16
 800bba0:	bd70      	pop	{r4, r5, r6, pc}
 800bba2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bba4:	2901      	cmp	r1, #1
 800bba6:	4615      	mov	r5, r2
 800bba8:	d017      	beq.n	800bbda <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xfa>
 800bbaa:	68a0      	ldr	r0, [r4, #8]
 800bbac:	4e21      	ldr	r6, [pc, #132]	@ (800bc34 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x154>)
 800bbae:	23c8      	movs	r3, #200	@ 0xc8
 800bbb0:	e7d3      	b.n	800bb5a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x7a>
 800bbb2:	f7ff fce5 	bl	800b580 <HttpDeamonHandleRequest::ParseRequest()>
 800bbb6:	28c8      	cmp	r0, #200	@ 0xc8
 800bbb8:	4603      	mov	r3, r0
 800bbba:	62a0      	str	r0, [r4, #40]	@ 0x28
 800bbbc:	d19b      	bne.n	800baf6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800bbbe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bbc0:	b1cb      	cbz	r3, 800bbf6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x116>
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d01b      	beq.n	800bbfe <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x11e>
 800bbc6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800bbc8:	e7ef      	b.n	800bbaa <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xca>
 800bbca:	4e1b      	ldr	r6, [pc, #108]	@ (800bc38 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x158>)
 800bbcc:	e7b7      	b.n	800bb3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bbce:	4e1b      	ldr	r6, [pc, #108]	@ (800bc3c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x15c>)
 800bbd0:	e7b5      	b.n	800bb3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bbd2:	4e1b      	ldr	r6, [pc, #108]	@ (800bc40 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x160>)
 800bbd4:	e7b3      	b.n	800bb3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bbd6:	4e1b      	ldr	r6, [pc, #108]	@ (800bc44 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x164>)
 800bbd8:	e7b1      	b.n	800bb3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bbda:	f7ff fe9b 	bl	800b914 <HttpDeamonHandleRequest::HandlePost(bool)>
 800bbde:	28c8      	cmp	r0, #200	@ 0xc8
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	62a0      	str	r0, [r4, #40]	@ 0x28
 800bbe4:	d187      	bne.n	800baf6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800bbe6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800bbe8:	68a0      	ldr	r0, [r4, #8]
 800bbea:	4e12      	ldr	r6, [pc, #72]	@ (800bc34 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x154>)
 800bbec:	e7b5      	b.n	800bb5a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x7a>
 800bbee:	4e16      	ldr	r6, [pc, #88]	@ (800bc48 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x168>)
 800bbf0:	e7a5      	b.n	800bb3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bbf2:	4e16      	ldr	r6, [pc, #88]	@ (800bc4c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16c>)
 800bbf4:	e7a3      	b.n	800bb3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f7ff fd4e 	bl	800b698 <HttpDeamonHandleRequest::HandleGet()>
 800bbfc:	e7ef      	b.n	800bbde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xfe>
 800bbfe:	2100      	movs	r1, #0
 800bc00:	4620      	mov	r0, r4
 800bc02:	f7ff fe87 	bl	800b914 <HttpDeamonHandleRequest::HandlePost(bool)>
 800bc06:	28c8      	cmp	r0, #200	@ 0xc8
 800bc08:	4603      	mov	r3, r0
 800bc0a:	62a0      	str	r0, [r4, #40]	@ 0x28
 800bc0c:	f47f af73 	bne.w	800baf6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800bc10:	68e3      	ldr	r3, [r4, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1d7      	bne.n	800bbc6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xe6>
 800bc16:	e7c2      	b.n	800bb9e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xbe>
 800bc18:	0801c3f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, lr, pc}
 800bc1c:	0801c434 	stmdaeq	r1, {r2, r4, r5, sl, lr, pc}
 800bc20:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800bc24:	0801c48c 	stmdaeq	r1, {r2, r3, r7, sl, lr, pc}
 800bc28:	2000e200 	andcs	lr, r0, r0, lsl #4
 800bc2c:	0801c4e8 	stmdaeq	r1, {r3, r5, r6, r7, sl, lr, pc}
 800bc30:	0801cc04 	stmdaeq	r1, {r2, sl, fp, lr, pc}
 800bc34:	0801c488 	stmdaeq	r1, {r3, r7, sl, lr, pc}
 800bc38:	0801c464 	stmdaeq	r1, {r2, r5, r6, sl, lr, pc}
 800bc3c:	0801c41c 	stmdaeq	r1, {r2, r3, r4, sl, lr, pc}
 800bc40:	0801c400 	stmdaeq	r1, {sl, lr, pc}
 800bc44:	0801c44c 	stmdaeq	r1, {r2, r3, r6, sl, lr, pc}
 800bc48:	0801c47c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, lr, pc}
 800bc4c:	0801c3e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, lr, pc}

0800bc50 <remoteconfig::json_get_list(char*, unsigned long)>:
 800bc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc54:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800bcb0 <remoteconfig::json_get_list(char*, unsigned long)+0x60>
 800bc58:	4b12      	ldr	r3, [pc, #72]	@ (800bca4 <remoteconfig::json_get_list(char*, unsigned long)+0x54>)
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	f8d8 0000 	ldr.w	r0, [r8]
 800bc62:	681c      	ldr	r4, [r3, #0]
 800bc64:	460e      	mov	r6, r1
 800bc66:	f7fe fef1 	bl	800aa4c <RemoteConfig::GetStringNode() const>
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	f8d8 0000 	ldr.w	r0, [r8]
 800bc70:	f7fe fef8 	bl	800aa64 <RemoteConfig::GetStringOutput() const>
 800bc74:	4b0c      	ldr	r3, [pc, #48]	@ (800bca8 <remoteconfig::json_get_list(char*, unsigned long)+0x58>)
 800bc76:	7a1a      	ldrb	r2, [r3, #8]
 800bc78:	9704      	str	r7, [sp, #16]
 800bc7a:	3309      	adds	r3, #9
 800bc7c:	9303      	str	r3, [sp, #12]
 800bc7e:	0e23      	lsrs	r3, r4, #24
 800bc80:	9302      	str	r3, [sp, #8]
 800bc82:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bc8c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	4a06      	ldr	r2, [pc, #24]	@ (800bcac <remoteconfig::json_get_list(char*, unsigned long)+0x5c>)
 800bc94:	b2e3      	uxtb	r3, r4
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f00e fc55 	bl	801a548 <snprintf>
 800bc9e:	b008      	add	sp, #32
 800bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca4:	2000e220 	andcs	lr, r0, r0, lsr #4
 800bca8:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800bcac:	0801b350 	stmdaeq	r1, {r4, r6, r8, r9, ip, sp, pc}
 800bcb0:	2000cd30 	andcs	ip, r0, r0, lsr sp

0800bcb4 <remoteconfig::json_get_version(char*, unsigned long)>:
 800bcb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bcb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <remoteconfig::json_get_version(char*, unsigned long)+0x2c>)
 800bcb8:	9305      	str	r3, [sp, #20]
 800bcba:	2208      	movs	r2, #8
 800bcbc:	9204      	str	r2, [sp, #16]
 800bcbe:	f1a3 020b 	sub.w	r2, r3, #11
 800bcc2:	9203      	str	r2, [sp, #12]
 800bcc4:	220b      	movs	r2, #11
 800bcc6:	9202      	str	r2, [sp, #8]
 800bcc8:	3b0e      	subs	r3, #14
 800bcca:	4a06      	ldr	r2, [pc, #24]	@ (800bce4 <remoteconfig::json_get_version(char*, unsigned long)+0x30>)
 800bccc:	9201      	str	r2, [sp, #4]
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	4a05      	ldr	r2, [pc, #20]	@ (800bce8 <remoteconfig::json_get_version(char*, unsigned long)+0x34>)
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	f00e fc38 	bl	801a548 <snprintf>
 800bcd8:	b007      	add	sp, #28
 800bcda:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcde:	bf00      	nop
 800bce0:	2000e3c6 	andcs	lr, r0, r6, asr #7
 800bce4:	0801b3f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, ip, sp, pc}
 800bce8:	0801b3af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, ip, sp, pc}

0800bcec <remoteconfig::json_get_uptime(char*, unsigned long)>:
 800bcec:	4b02      	ldr	r3, [pc, #8]	@ (800bcf8 <remoteconfig::json_get_uptime(char*, unsigned long)+0xc>)
 800bcee:	4a03      	ldr	r2, [pc, #12]	@ (800bcfc <remoteconfig::json_get_uptime(char*, unsigned long)+0x10>)
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f00e bc29 	b.w	801a548 <snprintf>
 800bcf6:	bf00      	nop
 800bcf8:	2001bcb8 			@ <UNDEFINED> instruction: 0x2001bcb8
 800bcfc:	0801b404 	stmdaeq	r1, {r2, sl, ip, sp, pc}

0800bd00 <remoteconfig::json_get_display(char*, unsigned long)>:
 800bd00:	4b03      	ldr	r3, [pc, #12]	@ (800bd10 <remoteconfig::json_get_display(char*, unsigned long)+0x10>)
 800bd02:	4a04      	ldr	r2, [pc, #16]	@ (800bd14 <remoteconfig::json_get_display(char*, unsigned long)+0x14>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	7d5b      	ldrb	r3, [r3, #21]
 800bd08:	f083 0301 	eor.w	r3, r3, #1
 800bd0c:	f00e bc1c 	b.w	801a548 <snprintf>
 800bd10:	2000e2e4 	andcs	lr, r0, r4, ror #5
 800bd14:	0801b413 	stmdaeq	r1, {r0, r1, r4, sl, ip, sp, pc}

0800bd18 <remoteconfig::json_get_directory(char*, unsigned long)>:
 800bd18:	4a01      	ldr	r2, [pc, #4]	@ (800bd20 <remoteconfig::json_get_directory(char*, unsigned long)+0x8>)
 800bd1a:	f00e bc15 	b.w	801a548 <snprintf>
 800bd1e:	bf00      	nop
 800bd20:	0801b422 	stmdaeq	r1, {r1, r5, sl, ip, sp, pc}

0800bd24 <get_file_content(char const*, unsigned long&, http::contentTypes&)>:
 800bd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd26:	4c0e      	ldr	r4, [pc, #56]	@ (800bd60 <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x3c>)
 800bd28:	230b      	movs	r3, #11
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	d104      	bne.n	800bd38 <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x14>
 800bd2e:	600b      	str	r3, [r1, #0]
 800bd30:	2105      	movs	r1, #5
 800bd32:	6011      	str	r1, [r2, #0]
 800bd34:	4618      	mov	r0, r3
 800bd36:	e011      	b.n	800bd5c <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x38>
 800bd38:	6825      	ldr	r5, [r4, #0]
 800bd3a:	1e47      	subs	r7, r0, #1
 800bd3c:	3d01      	subs	r5, #1
 800bd3e:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800bd42:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bd46:	4566      	cmp	r6, ip
 800bd48:	d001      	beq.n	800bd4e <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x2a>
 800bd4a:	3410      	adds	r4, #16
 800bd4c:	e7ed      	b.n	800bd2a <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x6>
 800bd4e:	2e00      	cmp	r6, #0
 800bd50:	d1f5      	bne.n	800bd3e <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x1a>
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	600b      	str	r3, [r1, #0]
 800bd56:	6860      	ldr	r0, [r4, #4]
 800bd58:	68e3      	ldr	r3, [r4, #12]
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	0801cd00 	stmdaeq	r1, {r8, sl, fp, lr, pc}

0800bd64 <LightSet::Blackout(bool)>:
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop

0800bd68 <E131Bridge::E131Bridge()>:
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	2500      	movs	r5, #0
 800bd6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd72:	2101      	movs	r1, #1
 800bd74:	e9c0 3500 	strd	r3, r5, [r0]
 800bd78:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800bd7c:	f880 1c68 	strb.w	r1, [r0, #3176]	@ 0xc68
 800bd80:	f8c4 3c7c 	str.w	r3, [r4, #3196]	@ 0xc7c
 800bd84:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800bd88:	f8c4 5c74 	str.w	r5, [r4, #3188]	@ 0xc74
 800bd8c:	f8c4 5c78 	str.w	r5, [r4, #3192]	@ 0xc78
 800bd90:	f8c4 5c80 	str.w	r5, [r4, #3200]	@ 0xc80
 800bd94:	f009 f9aa 	bl	80150ec <net::udp_begin(unsigned short)>
 800bd98:	4b22      	ldr	r3, [pc, #136]	@ (800be24 <E131Bridge::E131Bridge()+0xbc>)
 800bd9a:	f8c4 0c7c 	str.w	r0, [r4, #3196]	@ 0xc7c
 800bd9e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800bda2:	601c      	str	r4, [r3, #0]
 800bda4:	f504 72e4 	add.w	r2, r4, #456	@ 0x1c8
 800bda8:	4663      	mov	r3, ip
 800bdaa:	f843 5b04 	str.w	r5, [r3], #4
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d1fb      	bne.n	800bdaa <E131Bridge::E131Bridge()+0x42>
 800bdb2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800bdb6:	f504 72ea 	add.w	r2, r4, #468	@ 0x1d4
 800bdba:	2102      	movs	r1, #2
 800bdbc:	f843 1c08 	str.w	r1, [r3, #-8]
 800bdc0:	330c      	adds	r3, #12
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d1fa      	bne.n	800bdbc <E131Bridge::E131Bridge()+0x54>
 800bdc6:	f104 0310 	add.w	r3, r4, #16
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f843 2b04 	str.w	r2, [r3], #4
 800bdd0:	459c      	cmp	ip, r3
 800bdd2:	d1fb      	bne.n	800bdcc <E131Bridge::E131Bridge()+0x64>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	6262      	str	r2, [r4, #36]	@ 0x24
 800bdd8:	f884 3020 	strb.w	r3, [r4, #32]
 800bddc:	f504 6c2d 	add.w	ip, r4, #2768	@ 0xad0
 800bde0:	f504 7203 	add.w	r2, r4, #524	@ 0x20c
 800bde4:	f604 3e14 	addw	lr, r4, #2836	@ 0xb14
 800bde8:	2100      	movs	r1, #0
 800bdea:	2064      	movs	r0, #100	@ 0x64
 800bdec:	f1a2 0344 	sub.w	r3, r2, #68	@ 0x44
 800bdf0:	f843 1b04 	str.w	r1, [r3], #4
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d1fb      	bne.n	800bdf0 <E131Bridge::E131Bridge()+0x88>
 800bdf8:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800bdfc:	4572      	cmp	r2, lr
 800bdfe:	f8cc 1008 	str.w	r1, [ip, #8]
 800be02:	f8cc 1000 	str.w	r1, [ip]
 800be06:	f8cc 1004 	str.w	r1, [ip, #4]
 800be0a:	f88c 0009 	strb.w	r0, [ip, #9]
 800be0e:	f10c 0c0c 	add.w	ip, ip, #12
 800be12:	d1eb      	bne.n	800bdec <E131Bridge::E131Bridge()+0x84>
 800be14:	f44f 50ae 	mov.w	r0, #5568	@ 0x15c0
 800be18:	f009 f968 	bl	80150ec <net::udp_begin(unsigned short)>
 800be1c:	6020      	str	r0, [r4, #0]
 800be1e:	4620      	mov	r0, r4
 800be20:	bd38      	pop	{r3, r4, r5, pc}
 800be22:	bf00      	nop
 800be24:	2000d2d4 	ldrdcs	sp, [r0], -r4

0800be28 <E131Bridge::Start()>:
 800be28:	4603      	mov	r3, r0
 800be2a:	4a03      	ldr	r2, [pc, #12]	@ (800be38 <E131Bridge::Start()+0x10>)
 800be2c:	2102      	movs	r1, #2
 800be2e:	6810      	ldr	r0, [r2, #0]
 800be30:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
 800be34:	f00b be1a 	b.w	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 800be38:	2000e3d0 	ldrdcs	lr, [r0], -r0

0800be3c <E131Bridge::Stop()>:
 800be3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3e:	2301      	movs	r3, #1
 800be40:	2400      	movs	r4, #0
 800be42:	4d0e      	ldr	r5, [pc, #56]	@ (800be7c <E131Bridge::Stop()+0x40>)
 800be44:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
 800be48:	4606      	mov	r6, r0
 800be4a:	4627      	mov	r7, r4
 800be4c:	f8d6 3c74 	ldr.w	r3, [r6, #3188]	@ 0xc74
 800be50:	4621      	mov	r1, r4
 800be52:	4618      	mov	r0, r3
 800be54:	b113      	cbz	r3, 800be5c <E131Bridge::Stop()+0x20>
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	4798      	blx	r3
 800be5c:	3401      	adds	r4, #1
 800be5e:	2c22      	cmp	r4, #34	@ 0x22
 800be60:	f8c5 7600 	str.w	r7, [r5, #1536]	@ 0x600
 800be64:	f205 6504 	addw	r5, r5, #1540	@ 0x604
 800be68:	d1f0      	bne.n	800be4c <E131Bridge::Stop()+0x10>
 800be6a:	4b05      	ldr	r3, [pc, #20]	@ (800be80 <E131Bridge::Stop()+0x44>)
 800be6c:	f886 7028 	strb.w	r7, [r6, #40]	@ 0x28
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	2100      	movs	r1, #0
 800be74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be78:	f00b bdf8 	b.w	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 800be7c:	20000080 	andcs	r0, r0, r0, lsl #1
 800be80:	2000e3d0 	ldrdcs	lr, [r0], -r0

0800be84 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	461c      	mov	r4, r3
 800be88:	b1c9      	cbz	r1, 800bebe <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800be8a:	8b41      	ldrh	r1, [r0, #26]
 800be8c:	f100 051a 	add.w	r5, r0, #26
 800be90:	b159      	cbz	r1, 800beaa <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800be92:	42a1      	cmp	r1, r4
 800be94:	d01a      	beq.n	800becc <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800be96:	f500 73cc 	add.w	r3, r0, #408	@ 0x198
 800be9a:	e001      	b.n	800bea0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1c>
 800be9c:	4283      	cmp	r3, r0
 800be9e:	d016      	beq.n	800bece <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800bea0:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 800bea2:	428a      	cmp	r2, r1
 800bea4:	f100 000c 	add.w	r0, r0, #12
 800bea8:	d1f8      	bne.n	800be9c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x18>
 800beaa:	ba20      	rev	r0, r4
 800beac:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800beb0:	802c      	strh	r4, [r5, #0]
 800beb2:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800beb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beba:	f008 bcff 	b.w	80148bc <net::igmp_join(unsigned long)>
 800bebe:	b12a      	cbz	r2, 800becc <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800bec0:	8b81      	ldrh	r1, [r0, #28]
 800bec2:	f100 051c 	add.w	r5, r0, #28
 800bec6:	2900      	cmp	r1, #0
 800bec8:	d0ef      	beq.n	800beaa <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800beca:	e7e2      	b.n	800be92 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xe>
 800becc:	bd38      	pop	{r3, r4, r5, pc}
 800bece:	ba08      	rev	r0, r1
 800bed0:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800bed4:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800bed8:	f008 fd0e 	bl	80148f8 <net::igmp_leave(unsigned long)>
 800bedc:	e7e5      	b.n	800beaa <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800bede:	bf00      	nop

0800bee0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>:
 800bee0:	2a02      	cmp	r2, #2
 800bee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee4:	4606      	mov	r6, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	461f      	mov	r7, r3
 800beea:	d01b      	beq.n	800bf24 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x44>
 800beec:	2a01      	cmp	r2, #1
 800beee:	d000      	beq.n	800bef2 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x12>
 800bef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800bef6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800befa:	004d      	lsls	r5, r1, #1
 800befc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800befe:	2a01      	cmp	r2, #1
 800bf00:	d01e      	beq.n	800bf40 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x60>
 800bf02:	7fc3      	ldrb	r3, [r0, #31]
 800bf04:	3301      	adds	r3, #1
 800bf06:	77c3      	strb	r3, [r0, #31]
 800bf08:	ba38      	rev	r0, r7
 800bf0a:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800bf0e:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800bf12:	4425      	add	r5, r4
 800bf14:	f008 fcd2 	bl	80148bc <net::igmp_join(unsigned long)>
 800bf18:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	6343      	str	r3, [r0, #52]	@ 0x34
 800bf20:	8607      	strh	r7, [r0, #48]	@ 0x30
 800bf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf24:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800bf28:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bf2c:	004d      	lsls	r5, r1, #1
 800bf2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d023      	beq.n	800bf7c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x9c>
 800bf34:	4425      	add	r5, r4
 800bf36:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	636b      	str	r3, [r5, #52]	@ 0x34
 800bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf40:	f8b3 c030 	ldrh.w	ip, [r3, #48]	@ 0x30
 800bf44:	45bc      	cmp	ip, r7
 800bf46:	d0d3      	beq.n	800bef0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x10>
 800bf48:	4601      	mov	r1, r0
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	4294      	cmp	r4, r2
 800bf4e:	f102 0201 	add.w	r2, r2, #1
 800bf52:	d002      	beq.n	800bf5a <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x7a>
 800bf54:	8e0b      	ldrh	r3, [r1, #48]	@ 0x30
 800bf56:	4563      	cmp	r3, ip
 800bf58:	d0d6      	beq.n	800bf08 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x28>
 800bf5a:	2a22      	cmp	r2, #34	@ 0x22
 800bf5c:	f101 010c 	add.w	r1, r1, #12
 800bf60:	d1f4      	bne.n	800bf4c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x6c>
 800bf62:	ea4f 200c 	mov.w	r0, ip, lsl #8
 800bf66:	f400 007f 	and.w	r0, r0, #16711680	@ 0xff0000
 800bf6a:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
 800bf6e:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800bf72:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800bf76:	f008 fcbf 	bl	80148f8 <net::igmp_leave(unsigned long)>
 800bf7a:	e7c5      	b.n	800bf08 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x28>
 800bf7c:	7fc3      	ldrb	r3, [r0, #31]
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	77c3      	strb	r3, [r0, #31]
 800bf82:	2200      	movs	r2, #0
 800bf84:	4603      	mov	r3, r0
 800bf86:	e003      	b.n	800bf90 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xb0>
 800bf88:	2a22      	cmp	r2, #34	@ 0x22
 800bf8a:	f103 030c 	add.w	r3, r3, #12
 800bf8e:	d007      	beq.n	800bfa0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xc0>
 800bf90:	4294      	cmp	r4, r2
 800bf92:	f102 0201 	add.w	r2, r2, #1
 800bf96:	d0f7      	beq.n	800bf88 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xa8>
 800bf98:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 800bf9a:	42b9      	cmp	r1, r7
 800bf9c:	d1f4      	bne.n	800bf88 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xa8>
 800bf9e:	e7c9      	b.n	800bf34 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x54>
 800bfa0:	ba38      	rev	r0, r7
 800bfa2:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800bfa6:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800bfaa:	f008 fca5 	bl	80148f8 <net::igmp_leave(unsigned long)>
 800bfae:	e7c1      	b.n	800bf34 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x54>

0800bfb0 <E131Bridge::CheckMergeTimeouts(unsigned long)>:
 800bfb0:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 800bfb4:	b530      	push	{r4, r5, lr}
 800bfb6:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
 800bfba:	6844      	ldr	r4, [r0, #4]
 800bfbc:	009a      	lsls	r2, r3, #2
 800bfbe:	f8de 31c8 	ldr.w	r3, [lr, #456]	@ 0x1c8
 800bfc2:	f242 7510 	movw	r5, #10000	@ 0x2710
 800bfc6:	eba4 0c03 	sub.w	ip, r4, r3
 800bfca:	45ac      	cmp	ip, r5
 800bfcc:	ea4f 1301 	mov.w	r3, r1, lsl #4
 800bfd0:	d90c      	bls.n	800bfec <E131Bridge::CheckMergeTimeouts(unsigned long)+0x3c>
 800bfd2:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800bfd6:	2400      	movs	r4, #0
 800bfd8:	f8ce 41cc 	str.w	r4, [lr, #460]	@ 0x1cc
 800bfdc:	5084      	str	r4, [r0, r2]
 800bfde:	4402      	add	r2, r0
 800bfe0:	6054      	str	r4, [r2, #4]
 800bfe2:	6094      	str	r4, [r2, #8]
 800bfe4:	60d4      	str	r4, [r2, #12]
 800bfe6:	f88e 4208 	strb.w	r4, [lr, #520]	@ 0x208
 800bfea:	6844      	ldr	r4, [r0, #4]
 800bfec:	4419      	add	r1, r3
 800bfee:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800bff2:	0089      	lsls	r1, r1, #2
 800bff4:	f8dc 31e4 	ldr.w	r3, [ip, #484]	@ 0x1e4
 800bff8:	1ae4      	subs	r4, r4, r3
 800bffa:	f242 7310 	movw	r3, #10000	@ 0x2710
 800bffe:	429c      	cmp	r4, r3
 800c000:	d90b      	bls.n	800c01a <E131Bridge::CheckMergeTimeouts(unsigned long)+0x6a>
 800c002:	f501 73f6 	add.w	r3, r1, #492	@ 0x1ec
 800c006:	18c1      	adds	r1, r0, r3
 800c008:	2200      	movs	r2, #0
 800c00a:	f8cc 21e8 	str.w	r2, [ip, #488]	@ 0x1e8
 800c00e:	50c2      	str	r2, [r0, r3]
 800c010:	604a      	str	r2, [r1, #4]
 800c012:	608a      	str	r2, [r1, #8]
 800c014:	60ca      	str	r2, [r1, #12]
 800c016:	f88c 2208 	strb.w	r2, [ip, #520]	@ 0x208
 800c01a:	4603      	mov	r3, r0
 800c01c:	f600 1c08 	addw	ip, r0, #2312	@ 0x908
 800c020:	2200      	movs	r2, #0
 800c022:	f893 1208 	ldrb.w	r1, [r3, #520]	@ 0x208
 800c026:	3344      	adds	r3, #68	@ 0x44
 800c028:	459c      	cmp	ip, r3
 800c02a:	ea42 0201 	orr.w	r2, r2, r1
 800c02e:	d1f8      	bne.n	800c022 <E131Bridge::CheckMergeTimeouts(unsigned long)+0x72>
 800c030:	b922      	cbnz	r2, 800c03c <E131Bridge::CheckMergeTimeouts(unsigned long)+0x8c>
 800c032:	2301      	movs	r3, #1
 800c034:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 800c038:	f880 202a 	strb.w	r2, [r0, #42]	@ 0x2a
 800c03c:	bd30      	pop	{r4, r5, pc}
 800c03e:	bf00      	nop

0800c040 <E131Bridge::IsPriorityTimeOut(unsigned long) const>:
 800c040:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800c044:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c048:	6843      	ldr	r3, [r0, #4]
 800c04a:	e9d1 2079 	ldrd	r2, r0, [r1, #484]	@ 0x1e4
 800c04e:	b410      	push	{r4}
 800c050:	f8d1 41cc 	ldr.w	r4, [r1, #460]	@ 0x1cc
 800c054:	1a9a      	subs	r2, r3, r2
 800c056:	b94c      	cbnz	r4, 800c06c <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x2c>
 800c058:	b128      	cbz	r0, 800c066 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x26>
 800c05a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800c05e:	4282      	cmp	r2, r0
 800c060:	bf94      	ite	ls
 800c062:	2000      	movls	r0, #0
 800c064:	2001      	movhi	r0, #1
 800c066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	f8d1 11c8 	ldr.w	r1, [r1, #456]	@ 0x1c8
 800c070:	1a5b      	subs	r3, r3, r1
 800c072:	b128      	cbz	r0, 800c080 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x40>
 800c074:	f242 700f 	movw	r0, #9999	@ 0x270f
 800c078:	4283      	cmp	r3, r0
 800c07a:	d8f0      	bhi.n	800c05e <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x1e>
 800c07c:	2000      	movs	r0, #0
 800c07e:	e7f2      	b.n	800c066 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x26>
 800c080:	f242 7010 	movw	r0, #10000	@ 0x2710
 800c084:	4283      	cmp	r3, r0
 800c086:	e7eb      	b.n	800c060 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x20>

0800c088 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	2301      	movs	r3, #1
 800c08c:	4606      	mov	r6, r0
 800c08e:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 800c092:	b109      	cbz	r1, 800c098 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10>
 800c094:	2a00      	cmp	r2, #0
 800c096:	d14c      	bne.n	800c132 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xaa>
 800c098:	f04f 0e00 	mov.w	lr, #0
 800c09c:	483e      	ldr	r0, [pc, #248]	@ (800c198 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x110>)
 800c09e:	f506 73f6 	add.w	r3, r6, #492	@ 0x1ec
 800c0a2:	f606 2cf4 	addw	ip, r6, #2804	@ 0xaf4
 800c0a6:	4677      	mov	r7, lr
 800c0a8:	7f5c      	ldrb	r4, [r3, #29]
 800c0aa:	b174      	cbz	r4, 800c0ca <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x42>
 800c0ac:	b111      	cbz	r1, 800c0b4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800c0ae:	f853 5c20 	ldr.w	r5, [r3, #-32]
 800c0b2:	bb55      	cbnz	r5, 800c10a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800c0b4:	b112      	cbz	r2, 800c0bc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x34>
 800c0b6:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800c0ba:	bb95      	cbnz	r5, 800c122 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9a>
 800c0bc:	f896 502a 	ldrb.w	r5, [r6, #42]	@ 0x2a
 800c0c0:	b91d      	cbnz	r5, 800c0ca <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x42>
 800c0c2:	f8c0 5600 	str.w	r5, [r0, #1536]	@ 0x600
 800c0c6:	46a6      	mov	lr, r4
 800c0c8:	775d      	strb	r5, [r3, #29]
 800c0ca:	3344      	adds	r3, #68	@ 0x44
 800c0cc:	459c      	cmp	ip, r3
 800c0ce:	f200 6004 	addw	r0, r0, #1540	@ 0x604
 800c0d2:	d1e9      	bne.n	800c0a8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x20>
 800c0d4:	f1be 0f00 	cmp.w	lr, #0
 800c0d8:	d00b      	beq.n	800c0f2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800c0da:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800c0dc:	2901      	cmp	r1, #1
 800c0de:	d04f      	beq.n	800c180 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xf8>
 800c0e0:	2902      	cmp	r1, #2
 800c0e2:	d106      	bne.n	800c0f2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800c0e4:	f8d6 0c74 	ldr.w	r0, [r6, #3188]	@ 0xc74
 800c0e8:	4a2c      	ldr	r2, [pc, #176]	@ (800c19c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>)
 800c0ea:	6803      	ldr	r3, [r0, #0]
 800c0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d14f      	bne.n	800c192 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10a>
 800c0f2:	4b2b      	ldr	r3, [pc, #172]	@ (800c1a0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x118>)
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	f00b fcb8 	bl	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 800c0fc:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 800c100:	f023 0302 	bic.w	r3, r3, #2
 800c104:	f886 3021 	strb.w	r3, [r6, #33]	@ 0x21
 800c108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10a:	771f      	strb	r7, [r3, #28]
 800c10c:	f843 7c20 	str.w	r7, [r3, #-32]
 800c110:	f843 7c1c 	str.w	r7, [r3, #-28]
 800c114:	f843 7c18 	str.w	r7, [r3, #-24]
 800c118:	f843 7c14 	str.w	r7, [r3, #-20]
 800c11c:	f843 7c10 	str.w	r7, [r3, #-16]
 800c120:	e7c8      	b.n	800c0b4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800c122:	f843 7c04 	str.w	r7, [r3, #-4]
 800c126:	601f      	str	r7, [r3, #0]
 800c128:	605f      	str	r7, [r3, #4]
 800c12a:	609f      	str	r7, [r3, #8]
 800c12c:	60df      	str	r7, [r3, #12]
 800c12e:	771f      	strb	r7, [r3, #28]
 800c130:	e7c4      	b.n	800c0bc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x34>
 800c132:	f04f 0e00 	mov.w	lr, #0
 800c136:	f8c0 3029 	str.w	r3, [r0, #41]	@ 0x29
 800c13a:	f880 3020 	strb.w	r3, [r0, #32]
 800c13e:	4a16      	ldr	r2, [pc, #88]	@ (800c198 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x110>)
 800c140:	4c18      	ldr	r4, [pc, #96]	@ (800c1a4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11c>)
 800c142:	f500 73ea 	add.w	r3, r0, #468	@ 0x1d4
 800c146:	4671      	mov	r1, lr
 800c148:	e005      	b.n	800c156 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xce>
 800c14a:	f202 6204 	addw	r2, r2, #1540	@ 0x604
 800c14e:	42a2      	cmp	r2, r4
 800c150:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 800c154:	d0be      	beq.n	800c0d4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x4c>
 800c156:	f893 0035 	ldrb.w	r0, [r3, #53]	@ 0x35
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d0f5      	beq.n	800c14a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xc2>
 800c15e:	f843 1c08 	str.w	r1, [r3, #-8]
 800c162:	f843 1c04 	str.w	r1, [r3, #-4]
 800c166:	6019      	str	r1, [r3, #0]
 800c168:	6059      	str	r1, [r3, #4]
 800c16a:	6099      	str	r1, [r3, #8]
 800c16c:	6159      	str	r1, [r3, #20]
 800c16e:	6199      	str	r1, [r3, #24]
 800c170:	61d9      	str	r1, [r3, #28]
 800c172:	6219      	str	r1, [r3, #32]
 800c174:	6259      	str	r1, [r3, #36]	@ 0x24
 800c176:	4686      	mov	lr, r0
 800c178:	f8c2 1600 	str.w	r1, [r2, #1536]	@ 0x600
 800c17c:	8699      	strh	r1, [r3, #52]	@ 0x34
 800c17e:	e7e4      	b.n	800c14a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xc2>
 800c180:	f8d6 0c74 	ldr.w	r0, [r6, #3188]	@ 0xc74
 800c184:	4a08      	ldr	r2, [pc, #32]	@ (800c1a8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x120>)
 800c186:	6803      	ldr	r3, [r0, #0]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d0b1      	beq.n	800c0f2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800c18e:	4798      	blx	r3
 800c190:	e7af      	b.n	800c0f2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800c192:	4798      	blx	r3
 800c194:	e7ad      	b.n	800c0f2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800c196:	bf00      	nop
 800c198:	20000080 	andcs	r0, r0, r0, lsl #1
 800c19c:	08009511 	stmdaeq	r0, {r0, r4, r8, sl, ip, pc}
 800c1a0:	2000e3d0 	ldrdcs	lr, [r0], -r0
 800c1a4:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800c1a8:	0800bd65 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, fp, ip, sp, pc}

0800c1ac <E131Bridge::HandleDmx()>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	f8d0 ac6c 	ldr.w	sl, [r0, #3180]	@ 0xc6c
 800c1b4:	4fa3      	ldr	r7, [pc, #652]	@ (800c444 <E131Bridge::HandleDmx()+0x298>)
 800c1b6:	f8ba 307b 	ldrh.w	r3, [sl, #123]	@ 0x7b
 800c1ba:	b08b      	sub	sp, #44	@ 0x2c
 800c1bc:	ba5b      	rev16	r3, r3
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	f10a 027e 	add.w	r2, sl, #126	@ 0x7e
 800c1c4:	9208      	str	r2, [sp, #32]
 800c1c6:	f1a7 0802 	sub.w	r8, r7, #2
 800c1ca:	1e5a      	subs	r2, r3, #1
 800c1cc:	4681      	mov	r9, r0
 800c1ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1d0:	9207      	str	r2, [sp, #28]
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	4498      	add	r8, r3
 800c1d6:	f500 75e8 	add.w	r5, r0, #464	@ 0x1d0
 800c1da:	2600      	movs	r6, #0
 800c1dc:	e00b      	b.n	800c1f6 <E131Bridge::HandleDmx()+0x4a>
 800c1de:	3601      	adds	r6, #1
 800c1e0:	2e22      	cmp	r6, #34	@ 0x22
 800c1e2:	f104 040c 	add.w	r4, r4, #12
 800c1e6:	f207 6704 	addw	r7, r7, #1540	@ 0x604
 800c1ea:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 800c1ee:	f208 6804 	addw	r8, r8, #1540	@ 0x604
 800c1f2:	f000 81b4 	beq.w	800c55e <E131Bridge::HandleDmx()+0x3b2>
 800c1f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d1f0      	bne.n	800c1de <E131Bridge::HandleDmx()+0x32>
 800c1fc:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800c1fe:	f8ba 2071 	ldrh.w	r2, [sl, #113]	@ 0x71
 800c202:	ba5b      	rev16	r3, r3
 800c204:	b29b      	uxth	r3, r3
 800c206:	429a      	cmp	r2, r3
 800c208:	d1e9      	bne.n	800c1de <E131Bridge::HandleDmx()+0x32>
 800c20a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800c20e:	f8d9 bc70 	ldr.w	fp, [r9, #3184]	@ 0xc70
 800c212:	69aa      	ldr	r2, [r5, #24]
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	455b      	cmp	r3, fp
 800c218:	9203      	str	r2, [sp, #12]
 800c21a:	f000 80c2 	beq.w	800c3a2 <E131Bridge::HandleDmx()+0x1f6>
 800c21e:	455a      	cmp	r2, fp
 800c220:	f040 80da 	bne.w	800c3d8 <E131Bridge::HandleDmx()+0x22c>
 800c224:	f8d9 2c6c 	ldr.w	r2, [r9, #3180]	@ 0xc6c
 800c228:	f04f 0b00 	mov.w	fp, #0
 800c22c:	3215      	adds	r2, #21
 800c22e:	f105 031b 	add.w	r3, r5, #27
 800c232:	f105 0c2b 	add.w	ip, r5, #43	@ 0x2b
 800c236:	e002      	b.n	800c23e <E131Bridge::HandleDmx()+0x92>
 800c238:	4563      	cmp	r3, ip
 800c23a:	f000 80db 	beq.w	800c3f4 <E131Bridge::HandleDmx()+0x248>
 800c23e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800c242:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800c246:	4288      	cmp	r0, r1
 800c248:	d0f6      	beq.n	800c238 <E131Bridge::HandleDmx()+0x8c>
 800c24a:	f1bb 0f00 	cmp.w	fp, #0
 800c24e:	f000 80c3 	beq.w	800c3d8 <E131Bridge::HandleDmx()+0x22c>
 800c252:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c256:	f04f 0b00 	mov.w	fp, #0
 800c25a:	7c2a      	ldrb	r2, [r5, #16]
 800c25c:	742b      	strb	r3, [r5, #16]
 800c25e:	3313      	adds	r3, #19
 800c260:	1a9b      	subs	r3, r3, r2
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b13      	cmp	r3, #19
 800c266:	d9ba      	bls.n	800c1de <E131Bridge::HandleDmx()+0x32>
 800c268:	f99a 3070 	ldrsb.w	r3, [sl, #112]	@ 0x70
 800c26c:	f89a 2070 	ldrb.w	r2, [sl, #112]	@ 0x70
 800c270:	2b00      	cmp	r3, #0
 800c272:	dbb4      	blt.n	800c1de <E131Bridge::HandleDmx()+0x32>
 800c274:	0652      	lsls	r2, r2, #25
 800c276:	f100 81d3 	bmi.w	800c620 <E131Bridge::HandleDmx()+0x474>
 800c27a:	2301      	movs	r3, #1
 800c27c:	9306      	str	r3, [sp, #24]
 800c27e:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800c282:	b133      	cbz	r3, 800c292 <E131Bridge::HandleDmx()+0xe6>
 800c284:	f899 302e 	ldrb.w	r3, [r9, #46]	@ 0x2e
 800c288:	b91b      	cbnz	r3, 800c292 <E131Bridge::HandleDmx()+0xe6>
 800c28a:	4631      	mov	r1, r6
 800c28c:	4648      	mov	r0, r9
 800c28e:	f7ff fe8f 	bl	800bfb0 <E131Bridge::CheckMergeTimeouts(unsigned long)>
 800c292:	f89a 206c 	ldrb.w	r2, [sl, #108]	@ 0x6c
 800c296:	f899 3020 	ldrb.w	r3, [r9, #32]
 800c29a:	9205      	str	r2, [sp, #20]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	f080 80d3 	bcs.w	800c448 <E131Bridge::HandleDmx()+0x29c>
 800c2a2:	4631      	mov	r1, r6
 800c2a4:	4648      	mov	r0, r9
 800c2a6:	f7ff fecb 	bl	800c040 <E131Bridge::IsPriorityTimeOut(unsigned long) const>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d097      	beq.n	800c1de <E131Bridge::HandleDmx()+0x32>
 800c2ae:	9a05      	ldr	r2, [sp, #20]
 800c2b0:	f889 2020 	strb.w	r2, [r9, #32]
 800c2b4:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800c2b8:	9305      	str	r3, [sp, #20]
 800c2ba:	9b04      	ldr	r3, [sp, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f040 80d6 	bne.w	800c46e <E131Bridge::HandleDmx()+0x2c2>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 81b5 	beq.w	800c634 <E131Bridge::HandleDmx()+0x488>
 800c2ca:	9b06      	ldr	r3, [sp, #24]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 8175 	beq.w	800c5bc <E131Bridge::HandleDmx()+0x410>
 800c2d2:	f1bb 0f00 	cmp.w	fp, #0
 800c2d6:	f040 8175 	bne.w	800c5c4 <E131Bridge::HandleDmx()+0x418>
 800c2da:	f8d9 3c70 	ldr.w	r3, [r9, #3184]	@ 0xc70
 800c2de:	f845 3c04 	str.w	r3, [r5, #-4]
 800c2e2:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c2e6:	742b      	strb	r3, [r5, #16]
 800c2e8:	f10a 0216 	add.w	r2, sl, #22
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	f105 0010 	add.w	r0, r5, #16
 800c2f2:	f852 1b04 	ldr.w	r1, [r2], #4
 800c2f6:	f843 1b04 	str.w	r1, [r3], #4
 800c2fa:	4283      	cmp	r3, r0
 800c2fc:	d1f9      	bne.n	800c2f2 <E131Bridge::HandleDmx()+0x146>
 800c2fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c302:	f845 3c08 	str.w	r3, [r5, #-8]
 800c306:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800c30a:	b923      	cbnz	r3, 800c316 <E131Bridge::HandleDmx()+0x16a>
 800c30c:	2301      	movs	r3, #1
 800c30e:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800c312:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800c316:	2301      	movs	r3, #1
 800c318:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800c31c:	9b07      	ldr	r3, [sp, #28]
 800c31e:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 81b6 	beq.w	800c694 <E131Bridge::HandleDmx()+0x4e8>
 800c328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32a:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800c32e:	9b08      	ldr	r3, [sp, #32]
 800c330:	4450      	add	r0, sl
 800c332:	463a      	mov	r2, r7
 800c334:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c338:	f802 1b01 	strb.w	r1, [r2], #1
 800c33c:	4298      	cmp	r0, r3
 800c33e:	d1f9      	bne.n	800c334 <E131Bridge::HandleDmx()+0x188>
 800c340:	9b07      	ldr	r3, [sp, #28]
 800c342:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c346:	f1bc 0f00 	cmp.w	ip, #0
 800c34a:	f000 8250 	beq.w	800c7ee <E131Bridge::HandleDmx()+0x642>
 800c34e:	9a05      	ldr	r2, [sp, #20]
 800c350:	9b08      	ldr	r3, [sp, #32]
 800c352:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c356:	f802 1b01 	strb.w	r1, [r2], #1
 800c35a:	4298      	cmp	r0, r3
 800c35c:	d1f9      	bne.n	800c352 <E131Bridge::HandleDmx()+0x1a6>
 800c35e:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800c362:	069b      	lsls	r3, r3, #26
 800c364:	f100 80c7 	bmi.w	800c4f6 <E131Bridge::HandleDmx()+0x34a>
 800c368:	f8ba 306d 	ldrh.w	r3, [sl, #109]	@ 0x6d
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	2a00      	cmp	r2, #0
 800c370:	f000 80c4 	beq.w	800c4fc <E131Bridge::HandleDmx()+0x350>
 800c374:	f899 202c 	ldrb.w	r2, [r9, #44]	@ 0x2c
 800c378:	2a00      	cmp	r2, #0
 800c37a:	f040 80bf 	bne.w	800c4fc <E131Bridge::HandleDmx()+0x350>
 800c37e:	9a06      	ldr	r2, [sp, #24]
 800c380:	ba5b      	rev16	r3, r3
 800c382:	b29b      	uxth	r3, r3
 800c384:	b91a      	cbnz	r2, 800c38e <E131Bridge::HandleDmx()+0x1e2>
 800c386:	f1bb 0f00 	cmp.w	fp, #0
 800c38a:	f000 8219 	beq.w	800c7c0 <E131Bridge::HandleDmx()+0x614>
 800c38e:	9906      	ldr	r1, [sp, #24]
 800c390:	465a      	mov	r2, fp
 800c392:	4648      	mov	r0, r9
 800c394:	f7ff fd76 	bl	800be84 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800c398:	f240 1301 	movw	r3, #257	@ 0x101
 800c39c:	f8a9 302b 	strh.w	r3, [r9, #43]	@ 0x2b
 800c3a0:	e0b1      	b.n	800c506 <E131Bridge::HandleDmx()+0x35a>
 800c3a2:	f8d9 2c6c 	ldr.w	r2, [r9, #3180]	@ 0xc6c
 800c3a6:	3215      	adds	r2, #21
 800c3a8:	1e6b      	subs	r3, r5, #1
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	f105 0e0f 	add.w	lr, r5, #15
 800c3b0:	e001      	b.n	800c3b6 <E131Bridge::HandleDmx()+0x20a>
 800c3b2:	4573      	cmp	r3, lr
 800c3b4:	d03f      	beq.n	800c436 <E131Bridge::HandleDmx()+0x28a>
 800c3b6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c3ba:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 800c3be:	4561      	cmp	r1, ip
 800c3c0:	d0f7      	beq.n	800c3b2 <E131Bridge::HandleDmx()+0x206>
 800c3c2:	9b03      	ldr	r3, [sp, #12]
 800c3c4:	455b      	cmp	r3, fp
 800c3c6:	eba1 010c 	sub.w	r1, r1, ip
 800c3ca:	f000 80cb 	beq.w	800c564 <E131Bridge::HandleDmx()+0x3b8>
 800c3ce:	b919      	cbnz	r1, 800c3d8 <E131Bridge::HandleDmx()+0x22c>
 800c3d0:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c3d4:	468b      	mov	fp, r1
 800c3d6:	e740      	b.n	800c25a <E131Bridge::HandleDmx()+0xae>
 800c3d8:	f99a 2070 	ldrsb.w	r2, [sl, #112]	@ 0x70
 800c3dc:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800c3e0:	2a00      	cmp	r2, #0
 800c3e2:	f6ff aefc 	blt.w	800c1de <E131Bridge::HandleDmx()+0x32>
 800c3e6:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800c3ea:	f47f aef8 	bne.w	800c1de <E131Bridge::HandleDmx()+0x32>
 800c3ee:	9306      	str	r3, [sp, #24]
 800c3f0:	469b      	mov	fp, r3
 800c3f2:	e744      	b.n	800c27e <E131Bridge::HandleDmx()+0xd2>
 800c3f4:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c3f8:	f103 0213 	add.w	r2, r3, #19
 800c3fc:	b2d2      	uxtb	r2, r2
 800c3fe:	f1bb 0f00 	cmp.w	fp, #0
 800c402:	f47f af2a 	bne.w	800c25a <E131Bridge::HandleDmx()+0xae>
 800c406:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800c40a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800c40e:	1a52      	subs	r2, r2, r1
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	2a13      	cmp	r2, #19
 800c414:	f67f aee3 	bls.w	800c1de <E131Bridge::HandleDmx()+0x32>
 800c418:	f99a 3070 	ldrsb.w	r3, [sl, #112]	@ 0x70
 800c41c:	f89a 2070 	ldrb.w	r2, [sl, #112]	@ 0x70
 800c420:	2b00      	cmp	r3, #0
 800c422:	f6ff aedc 	blt.w	800c1de <E131Bridge::HandleDmx()+0x32>
 800c426:	0651      	lsls	r1, r2, #25
 800c428:	f100 80ef 	bmi.w	800c60a <E131Bridge::HandleDmx()+0x45e>
 800c42c:	f8cd b018 	str.w	fp, [sp, #24]
 800c430:	f04f 0b01 	mov.w	fp, #1
 800c434:	e723      	b.n	800c27e <E131Bridge::HandleDmx()+0xd2>
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	455b      	cmp	r3, fp
 800c43a:	f47f af0a 	bne.w	800c252 <E131Bridge::HandleDmx()+0xa6>
 800c43e:	f04f 0b01 	mov.w	fp, #1
 800c442:	e6f4      	b.n	800c22e <E131Bridge::HandleDmx()+0x82>
 800c444:	20000080 	andcs	r0, r0, r0, lsl #1
 800c448:	f67f af34 	bls.w	800c2b4 <E131Bridge::HandleDmx()+0x108>
 800c44c:	2300      	movs	r3, #0
 800c44e:	f845 3c04 	str.w	r3, [r5, #-4]
 800c452:	61ab      	str	r3, [r5, #24]
 800c454:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800c458:	f89a 306c 	ldrb.w	r3, [sl, #108]	@ 0x6c
 800c45c:	f889 3020 	strb.w	r3, [r9, #32]
 800c460:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800c464:	9305      	str	r3, [sp, #20]
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f43f af2a 	beq.w	800c2c2 <E131Bridge::HandleDmx()+0x116>
 800c46e:	9b06      	ldr	r3, [sp, #24]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d17c      	bne.n	800c56e <E131Bridge::HandleDmx()+0x3c2>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 8146 	beq.w	800c708 <E131Bridge::HandleDmx()+0x55c>
 800c47c:	f1bb 0f00 	cmp.w	fp, #0
 800c480:	f43f af6d 	beq.w	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c484:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c488:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800c48c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c490:	616b      	str	r3, [r5, #20]
 800c492:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800c496:	b923      	cbnz	r3, 800c4a2 <E131Bridge::HandleDmx()+0x2f6>
 800c498:	2301      	movs	r3, #1
 800c49a:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800c49e:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800c4a8:	9b07      	ldr	r3, [sp, #28]
 800c4aa:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800c4ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 80ee 	beq.w	800c694 <E131Bridge::HandleDmx()+0x4e8>
 800c4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ba:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800c4be:	9b08      	ldr	r3, [sp, #32]
 800c4c0:	4450      	add	r0, sl
 800c4c2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c4c6:	f802 1b01 	strb.w	r1, [r2], #1
 800c4ca:	4283      	cmp	r3, r0
 800c4cc:	d1f9      	bne.n	800c4c2 <E131Bridge::HandleDmx()+0x316>
 800c4ce:	9b07      	ldr	r3, [sp, #28]
 800c4d0:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c4d4:	f1bc 0f00 	cmp.w	ip, #0
 800c4d8:	f000 8165 	beq.w	800c7a6 <E131Bridge::HandleDmx()+0x5fa>
 800c4dc:	9a05      	ldr	r2, [sp, #20]
 800c4de:	9b08      	ldr	r3, [sp, #32]
 800c4e0:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c4e4:	f802 1b01 	strb.w	r1, [r2], #1
 800c4e8:	4283      	cmp	r3, r0
 800c4ea:	d1f9      	bne.n	800c4e0 <E131Bridge::HandleDmx()+0x334>
 800c4ec:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800c4f0:	069b      	lsls	r3, r3, #26
 800c4f2:	f57f af39 	bpl.w	800c368 <E131Bridge::HandleDmx()+0x1bc>
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f889 302c 	strb.w	r3, [r9, #44]	@ 0x2c
 800c4fc:	f899 302b 	ldrb.w	r3, [r9, #43]	@ 0x2b
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 808a 	beq.w	800c61a <E131Bridge::HandleDmx()+0x46e>
 800c506:	f8d9 0c74 	ldr.w	r0, [r9, #3188]	@ 0xc74
 800c50a:	f899 202f 	ldrb.w	r2, [r9, #47]	@ 0x2f
 800c50e:	6803      	ldr	r3, [r0, #0]
 800c510:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c514:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 800c518:	2a00      	cmp	r2, #0
 800c51a:	f000 8083 	beq.w	800c624 <E131Bridge::HandleDmx()+0x478>
 800c51e:	6803      	ldr	r3, [r0, #0]
 800c520:	9a05      	ldr	r2, [sp, #20]
 800c522:	2101      	movs	r1, #1
 800c524:	9100      	str	r1, [sp, #0]
 800c526:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c52a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 800c52e:	4631      	mov	r1, r6
 800c530:	47d8      	blx	fp
 800c532:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 800c536:	b95b      	cbnz	r3, 800c550 <E131Bridge::HandleDmx()+0x3a4>
 800c538:	f8d9 0c74 	ldr.w	r0, [r9, #3188]	@ 0xc74
 800c53c:	6803      	ldr	r3, [r0, #0]
 800c53e:	4631      	mov	r1, r6
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	4798      	blx	r3
 800c544:	f04f 0301 	mov.w	r3, #1
 800c548:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
 800c54c:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800c550:	f899 3021 	ldrb.w	r3, [r9, #33]	@ 0x21
 800c554:	f043 0302 	orr.w	r3, r3, #2
 800c558:	f889 3021 	strb.w	r3, [r9, #33]	@ 0x21
 800c55c:	e63f      	b.n	800c1de <E131Bridge::HandleDmx()+0x32>
 800c55e:	b00b      	add	sp, #44	@ 0x2c
 800c560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c564:	fab1 fb81 	clz	fp, r1
 800c568:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800c56c:	e65f      	b.n	800c22e <E131Bridge::HandleDmx()+0x82>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f040 8093 	bne.w	800c69c <E131Bridge::HandleDmx()+0x4f0>
 800c576:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c57a:	742b      	strb	r3, [r5, #16]
 800c57c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c580:	f845 3c08 	str.w	r3, [r5, #-8]
 800c584:	9b07      	ldr	r3, [sp, #28]
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 8084 	beq.w	800c694 <E131Bridge::HandleDmx()+0x4e8>
 800c58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c58e:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800c592:	9b08      	ldr	r3, [sp, #32]
 800c594:	4452      	add	r2, sl
 800c596:	4639      	mov	r1, r7
 800c598:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c59c:	f801 0b01 	strb.w	r0, [r1], #1
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d1f9      	bne.n	800c598 <E131Bridge::HandleDmx()+0x3ec>
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c5aa:	9905      	ldr	r1, [sp, #20]
 800c5ac:	9b08      	ldr	r3, [sp, #32]
 800c5ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5b2:	f801 0b01 	strb.w	r0, [r1], #1
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d1f9      	bne.n	800c5ae <E131Bridge::HandleDmx()+0x402>
 800c5ba:	e6d0      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c5bc:	f1bb 0f00 	cmp.w	fp, #0
 800c5c0:	f43f ae8b 	beq.w	800c2da <E131Bridge::HandleDmx()+0x12e>
 800c5c4:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c5c8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800c5cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c5d0:	616b      	str	r3, [r5, #20]
 800c5d2:	9b07      	ldr	r3, [sp, #28]
 800c5d4:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d05b      	beq.n	800c694 <E131Bridge::HandleDmx()+0x4e8>
 800c5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5de:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800c5e2:	9b08      	ldr	r3, [sp, #32]
 800c5e4:	4452      	add	r2, sl
 800c5e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c5ea:	f801 0b01 	strb.w	r0, [r1], #1
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d1f9      	bne.n	800c5e6 <E131Bridge::HandleDmx()+0x43a>
 800c5f2:	9b07      	ldr	r3, [sp, #28]
 800c5f4:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c5f8:	9905      	ldr	r1, [sp, #20]
 800c5fa:	9b08      	ldr	r3, [sp, #32]
 800c5fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c600:	f801 0b01 	strb.w	r0, [r1], #1
 800c604:	429a      	cmp	r2, r3
 800c606:	d1f9      	bne.n	800c5fc <E131Bridge::HandleDmx()+0x450>
 800c608:	e6a9      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c60a:	4659      	mov	r1, fp
 800c60c:	f04f 0b01 	mov.w	fp, #1
 800c610:	465a      	mov	r2, fp
 800c612:	4648      	mov	r0, r9
 800c614:	f7ff fd38 	bl	800c088 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c618:	e5e1      	b.n	800c1de <E131Bridge::HandleDmx()+0x32>
 800c61a:	f8d9 0c74 	ldr.w	r0, [r9, #3188]	@ 0xc74
 800c61e:	e77e      	b.n	800c51e <E131Bridge::HandleDmx()+0x372>
 800c620:	2101      	movs	r1, #1
 800c622:	e7f5      	b.n	800c610 <E131Bridge::HandleDmx()+0x464>
 800c624:	9200      	str	r2, [sp, #0]
 800c626:	4631      	mov	r1, r6
 800c628:	9a05      	ldr	r2, [sp, #20]
 800c62a:	47d8      	blx	fp
 800c62c:	2301      	movs	r3, #1
 800c62e:	f885 303a 	strb.w	r3, [r5, #58]	@ 0x3a
 800c632:	e78d      	b.n	800c550 <E131Bridge::HandleDmx()+0x3a4>
 800c634:	f8d9 3c70 	ldr.w	r3, [r9, #3184]	@ 0xc70
 800c638:	f845 3c04 	str.w	r3, [r5, #-4]
 800c63c:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c640:	742b      	strb	r3, [r5, #16]
 800c642:	f10a 0216 	add.w	r2, sl, #22
 800c646:	462b      	mov	r3, r5
 800c648:	f105 0010 	add.w	r0, r5, #16
 800c64c:	f852 1b04 	ldr.w	r1, [r2], #4
 800c650:	f843 1b04 	str.w	r1, [r3], #4
 800c654:	4283      	cmp	r3, r0
 800c656:	d1f9      	bne.n	800c64c <E131Bridge::HandleDmx()+0x4a0>
 800c658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c65c:	f845 3c08 	str.w	r3, [r5, #-8]
 800c660:	9b07      	ldr	r3, [sp, #28]
 800c662:	b1bb      	cbz	r3, 800c694 <E131Bridge::HandleDmx()+0x4e8>
 800c664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c666:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800c66a:	9b08      	ldr	r3, [sp, #32]
 800c66c:	4452      	add	r2, sl
 800c66e:	4639      	mov	r1, r7
 800c670:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c674:	f801 0b01 	strb.w	r0, [r1], #1
 800c678:	4293      	cmp	r3, r2
 800c67a:	d1f9      	bne.n	800c670 <E131Bridge::HandleDmx()+0x4c4>
 800c67c:	9b07      	ldr	r3, [sp, #28]
 800c67e:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c682:	9905      	ldr	r1, [sp, #20]
 800c684:	9b08      	ldr	r3, [sp, #32]
 800c686:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c68a:	f801 0b01 	strb.w	r0, [r1], #1
 800c68e:	4293      	cmp	r3, r2
 800c690:	d1f9      	bne.n	800c686 <E131Bridge::HandleDmx()+0x4da>
 800c692:	e664      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c694:	9b07      	ldr	r3, [sp, #28]
 800c696:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c69a:	e660      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c69c:	f1bb 0f00 	cmp.w	fp, #0
 800c6a0:	f47f ae5d 	bne.w	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c6a4:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c6a8:	742b      	strb	r3, [r5, #16]
 800c6aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c6ae:	f845 3c08 	str.w	r3, [r5, #-8]
 800c6b2:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800c6b6:	b923      	cbnz	r3, 800c6c2 <E131Bridge::HandleDmx()+0x516>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800c6be:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800c6c8:	9b07      	ldr	r3, [sp, #28]
 800c6ca:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0e0      	beq.n	800c694 <E131Bridge::HandleDmx()+0x4e8>
 800c6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d4:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800c6d8:	9b08      	ldr	r3, [sp, #32]
 800c6da:	4450      	add	r0, sl
 800c6dc:	463a      	mov	r2, r7
 800c6de:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c6e2:	f802 1b01 	strb.w	r1, [r2], #1
 800c6e6:	4283      	cmp	r3, r0
 800c6e8:	d1f9      	bne.n	800c6de <E131Bridge::HandleDmx()+0x532>
 800c6ea:	9b07      	ldr	r3, [sp, #28]
 800c6ec:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c6f0:	f1bc 0f00 	cmp.w	ip, #0
 800c6f4:	d04a      	beq.n	800c78c <E131Bridge::HandleDmx()+0x5e0>
 800c6f6:	9a05      	ldr	r2, [sp, #20]
 800c6f8:	9b08      	ldr	r3, [sp, #32]
 800c6fa:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c6fe:	f802 1b01 	strb.w	r1, [r2], #1
 800c702:	4283      	cmp	r3, r0
 800c704:	d1f9      	bne.n	800c6fa <E131Bridge::HandleDmx()+0x54e>
 800c706:	e62a      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c708:	f8d9 3c70 	ldr.w	r3, [r9, #3184]	@ 0xc70
 800c70c:	61ab      	str	r3, [r5, #24]
 800c70e:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800c712:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800c716:	f105 021c 	add.w	r2, r5, #28
 800c71a:	f10a 0316 	add.w	r3, sl, #22
 800c71e:	f10a 0026 	add.w	r0, sl, #38	@ 0x26
 800c722:	f853 1b04 	ldr.w	r1, [r3], #4
 800c726:	f842 1b04 	str.w	r1, [r2], #4
 800c72a:	4298      	cmp	r0, r3
 800c72c:	d1f9      	bne.n	800c722 <E131Bridge::HandleDmx()+0x576>
 800c72e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c732:	616b      	str	r3, [r5, #20]
 800c734:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800c738:	b923      	cbnz	r3, 800c744 <E131Bridge::HandleDmx()+0x598>
 800c73a:	2301      	movs	r3, #1
 800c73c:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800c740:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800c744:	2301      	movs	r3, #1
 800c746:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800c74a:	9b07      	ldr	r3, [sp, #28]
 800c74c:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800c750:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800c754:	2b00      	cmp	r3, #0
 800c756:	d09d      	beq.n	800c694 <E131Bridge::HandleDmx()+0x4e8>
 800c758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c75a:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800c75e:	9b08      	ldr	r3, [sp, #32]
 800c760:	4450      	add	r0, sl
 800c762:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c766:	f802 1b01 	strb.w	r1, [r2], #1
 800c76a:	4283      	cmp	r3, r0
 800c76c:	d1f9      	bne.n	800c762 <E131Bridge::HandleDmx()+0x5b6>
 800c76e:	9b07      	ldr	r3, [sp, #28]
 800c770:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800c774:	f1bc 0f00 	cmp.w	ip, #0
 800c778:	d02c      	beq.n	800c7d4 <E131Bridge::HandleDmx()+0x628>
 800c77a:	9a05      	ldr	r2, [sp, #20]
 800c77c:	9b08      	ldr	r3, [sp, #32]
 800c77e:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c782:	f802 1b01 	strb.w	r1, [r2], #1
 800c786:	4283      	cmp	r3, r0
 800c788:	d1f9      	bne.n	800c77e <E131Bridge::HandleDmx()+0x5d2>
 800c78a:	e5e8      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c78c:	1e7b      	subs	r3, r7, #1
 800c78e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c792:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800c796:	428a      	cmp	r2, r1
 800c798:	bf38      	it	cc
 800c79a:	460a      	movcc	r2, r1
 800c79c:	4598      	cmp	r8, r3
 800c79e:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800c7a2:	d1f4      	bne.n	800c78e <E131Bridge::HandleDmx()+0x5e2>
 800c7a4:	e5db      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c7a6:	1e7b      	subs	r3, r7, #1
 800c7a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c7ac:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800c7b0:	428a      	cmp	r2, r1
 800c7b2:	bf38      	it	cc
 800c7b4:	460a      	movcc	r2, r1
 800c7b6:	4543      	cmp	r3, r8
 800c7b8:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800c7bc:	d1f4      	bne.n	800c7a8 <E131Bridge::HandleDmx()+0x5fc>
 800c7be:	e5ce      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c7c0:	69aa      	ldr	r2, [r5, #24]
 800c7c2:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800c7c6:	3a00      	subs	r2, #0
 800c7c8:	bf18      	it	ne
 800c7ca:	2201      	movne	r2, #1
 800c7cc:	3900      	subs	r1, #0
 800c7ce:	bf18      	it	ne
 800c7d0:	2101      	movne	r1, #1
 800c7d2:	e5de      	b.n	800c392 <E131Bridge::HandleDmx()+0x1e6>
 800c7d4:	1e7b      	subs	r3, r7, #1
 800c7d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c7da:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800c7de:	428a      	cmp	r2, r1
 800c7e0:	bf38      	it	cc
 800c7e2:	460a      	movcc	r2, r1
 800c7e4:	4543      	cmp	r3, r8
 800c7e6:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800c7ea:	d1f4      	bne.n	800c7d6 <E131Bridge::HandleDmx()+0x62a>
 800c7ec:	e5b7      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>
 800c7ee:	1e7b      	subs	r3, r7, #1
 800c7f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c7f4:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800c7f8:	428a      	cmp	r2, r1
 800c7fa:	bf38      	it	cc
 800c7fc:	460a      	movcc	r2, r1
 800c7fe:	4543      	cmp	r3, r8
 800c800:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800c804:	d1f4      	bne.n	800c7f0 <E131Bridge::HandleDmx()+0x644>
 800c806:	e5aa      	b.n	800c35e <E131Bridge::HandleDmx()+0x1b2>

0800c808 <E131Bridge::IsValidRoot()>:
 800c808:	b410      	push	{r4}
 800c80a:	f8d0 4c6c 	ldr.w	r4, [r0, #3180]	@ 0xc6c
 800c80e:	4a11      	ldr	r2, [pc, #68]	@ (800c854 <E131Bridge::IsValidRoot()+0x4c>)
 800c810:	1ce3      	adds	r3, r4, #3
 800c812:	f104 0c0f 	add.w	ip, r4, #15
 800c816:	e001      	b.n	800c81c <E131Bridge::IsValidRoot()+0x14>
 800c818:	4563      	cmp	r3, ip
 800c81a:	d009      	beq.n	800c830 <E131Bridge::IsValidRoot()+0x28>
 800c81c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800c820:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c824:	4288      	cmp	r0, r1
 800c826:	d0f7      	beq.n	800c818 <E131Bridge::IsValidRoot()+0x10>
 800c828:	2000      	movs	r0, #0
 800c82a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	f8d4 0012 	ldr.w	r0, [r4, #18]
 800c834:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800c838:	d007      	beq.n	800c84a <E131Bridge::IsValidRoot()+0x42>
 800c83a:	f1a0 6000 	sub.w	r0, r0, #134217728	@ 0x8000000
 800c83e:	fab0 f080 	clz	r0, r0
 800c842:	0940      	lsrs	r0, r0, #5
 800c844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	2001      	movs	r0, #1
 800c84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	0801ea59 	stmdaeq	r1, {r0, r3, r4, r6, r9, fp, sp, lr, pc}

0800c858 <E131Bridge::Process()>:
 800c858:	f890 202b 	ldrb.w	r2, [r0, #43]	@ 0x2b
 800c85c:	6843      	ldr	r3, [r0, #4]
 800c85e:	2100      	movs	r1, #0
 800c860:	b510      	push	{r4, lr}
 800c862:	4604      	mov	r4, r0
 800c864:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800c868:	6083      	str	r3, [r0, #8]
 800c86a:	b112      	cbz	r2, 800c872 <E131Bridge::Process()+0x1a>
 800c86c:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800c870:	b1ea      	cbz	r2, 800c8ae <E131Bridge::Process()+0x56>
 800c872:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	@ 0xc74
 800c876:	b14b      	cbz	r3, 800c88c <E131Bridge::Process()+0x34>
 800c878:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	@ 0xc6c
 800c87c:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800c880:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800c884:	d01c      	beq.n	800c8c0 <E131Bridge::Process()+0x68>
 800c886:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 800c88a:	d033      	beq.n	800c8f4 <E131Bridge::Process()+0x9c>
 800c88c:	f894 3c68 	ldrb.w	r3, [r4, #3176]	@ 0xc68
 800c890:	b163      	cbz	r3, 800c8ac <E131Bridge::Process()+0x54>
 800c892:	4b1c      	ldr	r3, [pc, #112]	@ (800c904 <E131Bridge::Process()+0xac>)
 800c894:	6818      	ldr	r0, [r3, #0]
 800c896:	6943      	ldr	r3, [r0, #20]
 800c898:	2b04      	cmp	r3, #4
 800c89a:	d007      	beq.n	800c8ac <E131Bridge::Process()+0x54>
 800c89c:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800c8a0:	bb1b      	cbnz	r3, 800c8ea <E131Bridge::Process()+0x92>
 800c8a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a6:	2102      	movs	r1, #2
 800c8a8:	f00b b8e0 	b.w	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 800c8ac:	bd10      	pop	{r4, pc}
 800c8ae:	6900      	ldr	r0, [r0, #16]
 800c8b0:	f640 11c3 	movw	r1, #2499	@ 0x9c3
 800c8b4:	1a1b      	subs	r3, r3, r0
 800c8b6:	428b      	cmp	r3, r1
 800c8b8:	bf88      	it	hi
 800c8ba:	f884 202b 	strbhi.w	r2, [r4, #43]	@ 0x2b
 800c8be:	e7d8      	b.n	800c872 <E131Bridge::Process()+0x1a>
 800c8c0:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800c8c4:	2a02      	cmp	r2, #2
 800c8c6:	d1e1      	bne.n	800c88c <E131Bridge::Process()+0x34>
 800c8c8:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 800c8cc:	2aa1      	cmp	r2, #161	@ 0xa1
 800c8ce:	d1dd      	bne.n	800c88c <E131Bridge::Process()+0x34>
 800c8d0:	f8b3 2077 	ldrh.w	r2, [r3, #119]	@ 0x77
 800c8d4:	2a00      	cmp	r2, #0
 800c8d6:	d1d9      	bne.n	800c88c <E131Bridge::Process()+0x34>
 800c8d8:	f8b3 3079 	ldrh.w	r3, [r3, #121]	@ 0x79
 800c8dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8e0:	d1d4      	bne.n	800c88c <E131Bridge::Process()+0x34>
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f7ff fc62 	bl	800c1ac <E131Bridge::HandleDmx()>
 800c8e8:	e7d0      	b.n	800c88c <E131Bridge::Process()+0x34>
 800c8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ee:	2103      	movs	r1, #3
 800c8f0:	f00b b8bc 	b.w	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8fa:	d1c7      	bne.n	800c88c <E131Bridge::Process()+0x34>
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f000 f803 	bl	800c908 <E131Bridge::HandleSynchronization()>
 800c902:	e7c3      	b.n	800c88c <E131Bridge::Process()+0x34>
 800c904:	2000e3d0 	ldrdcs	lr, [r0], -r0

0800c908 <E131Bridge::HandleSynchronization()>:
 800c908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c90c:	f8d0 3c6c 	ldr.w	r3, [r0, #3180]	@ 0xc6c
 800c910:	8b42      	ldrh	r2, [r0, #26]
 800c912:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 800c916:	ba5b      	rev16	r3, r3
 800c918:	b29b      	uxth	r3, r3
 800c91a:	429a      	cmp	r2, r3
 800c91c:	4604      	mov	r4, r0
 800c91e:	d009      	beq.n	800c934 <E131Bridge::HandleSynchronization()+0x2c>
 800c920:	8b82      	ldrh	r2, [r0, #28]
 800c922:	429a      	cmp	r2, r3
 800c924:	d006      	beq.n	800c934 <E131Bridge::HandleSynchronization()+0x2c>
 800c926:	4b1f      	ldr	r3, [pc, #124]	@ (800c9a4 <E131Bridge::HandleSynchronization()+0x9c>)
 800c928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c92c:	6818      	ldr	r0, [r3, #0]
 800c92e:	2102      	movs	r1, #2
 800c930:	f00b b89c 	b.w	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 800c934:	6863      	ldr	r3, [r4, #4]
 800c936:	6123      	str	r3, [r4, #16]
 800c938:	2500      	movs	r5, #0
 800c93a:	f204 260a 	addw	r6, r4, #522	@ 0x20a
 800c93e:	2744      	movs	r7, #68	@ 0x44
 800c940:	fb07 f305 	mul.w	r3, r7, r5
 800c944:	5cf3      	ldrb	r3, [r6, r3]
 800c946:	b12b      	cbz	r3, 800c954 <E131Bridge::HandleSynchronization()+0x4c>
 800c948:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	@ 0xc74
 800c94c:	6803      	ldr	r3, [r0, #0]
 800c94e:	4629      	mov	r1, r5
 800c950:	695b      	ldr	r3, [r3, #20]
 800c952:	4798      	blx	r3
 800c954:	3501      	adds	r5, #1
 800c956:	2d22      	cmp	r5, #34	@ 0x22
 800c958:	d1f2      	bne.n	800c940 <E131Bridge::HandleSynchronization()+0x38>
 800c95a:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	@ 0xc74
 800c95e:	6803      	ldr	r3, [r0, #0]
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	4798      	blx	r3
 800c964:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 800c968:	f504 612d 	add.w	r1, r4, #2768	@ 0xad0
 800c96c:	2000      	movs	r0, #0
 800c96e:	2201      	movs	r2, #1
 800c970:	428b      	cmp	r3, r1
 800c972:	d107      	bne.n	800c984 <E131Bridge::HandleSynchronization()+0x7c>
 800c974:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	@ 0xc78
 800c978:	b190      	cbz	r0, 800c9a0 <E131Bridge::HandleSynchronization()+0x98>
 800c97a:	6803      	ldr	r3, [r0, #0]
 800c97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	4718      	bx	r3
 800c984:	f893 5042 	ldrb.w	r5, [r3, #66]	@ 0x42
 800c988:	b145      	cbz	r5, 800c99c <E131Bridge::HandleSynchronization()+0x94>
 800c98a:	f893 5041 	ldrb.w	r5, [r3, #65]	@ 0x41
 800c98e:	f883 0042 	strb.w	r0, [r3, #66]	@ 0x42
 800c992:	b91d      	cbnz	r5, 800c99c <E131Bridge::HandleSynchronization()+0x94>
 800c994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c998:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800c99c:	3344      	adds	r3, #68	@ 0x44
 800c99e:	e7e7      	b.n	800c970 <E131Bridge::HandleSynchronization()+0x68>
 800c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a4:	2000e3d0 	ldrdcs	lr, [r0], -r0

0800c9a8 <E131Bridge::Print()>:
 800c9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	4b19      	ldr	r3, [pc, #100]	@ (800ca14 <E131Bridge::Print()+0x6c>)
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	785a      	ldrb	r2, [r3, #1]
 800c9b2:	7819      	ldrb	r1, [r3, #0]
 800c9b4:	4818      	ldr	r0, [pc, #96]	@ (800ca18 <E131Bridge::Print()+0x70>)
 800c9b6:	f00d fd9f 	bl	801a4f8 <printf>
 800c9ba:	7fe3      	ldrb	r3, [r4, #31]
 800c9bc:	b1fb      	cbz	r3, 800c9fe <E131Bridge::Print()+0x56>
 800c9be:	4817      	ldr	r0, [pc, #92]	@ (800ca1c <E131Bridge::Print()+0x74>)
 800c9c0:	4f17      	ldr	r7, [pc, #92]	@ (800ca20 <E131Bridge::Print()+0x78>)
 800c9c2:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800ca28 <E131Bridge::Print()+0x80>
 800c9c6:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800ca2c <E131Bridge::Print()+0x84>
 800c9ca:	f00d fd95 	bl	801a4f8 <printf>
 800c9ce:	4626      	mov	r6, r4
 800c9d0:	2500      	movs	r5, #0
 800c9d2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d10d      	bne.n	800c9f4 <E131Bridge::Print()+0x4c>
 800c9d8:	2344      	movs	r3, #68	@ 0x44
 800c9da:	f504 7200 	add.w	r2, r4, #512	@ 0x200
 800c9de:	436b      	muls	r3, r5
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	58d3      	ldr	r3, [r2, r3]
 800c9e4:	8e32      	ldrh	r2, [r6, #48]	@ 0x30
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	bf14      	ite	ne
 800c9ea:	463b      	movne	r3, r7
 800c9ec:	4643      	moveq	r3, r8
 800c9ee:	4648      	mov	r0, r9
 800c9f0:	f00d fd82 	bl	801a4f8 <printf>
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	2d22      	cmp	r5, #34	@ 0x22
 800c9f8:	f106 060c 	add.w	r6, r6, #12
 800c9fc:	d1e9      	bne.n	800c9d2 <E131Bridge::Print()+0x2a>
 800c9fe:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800ca02:	b123      	cbz	r3, 800ca0e <E131Bridge::Print()+0x66>
 800ca04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca08:	4806      	ldr	r0, [pc, #24]	@ (800ca24 <E131Bridge::Print()+0x7c>)
 800ca0a:	f00d bd75 	b.w	801a4f8 <printf>
 800ca0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca12:	bf00      	nop
 800ca14:	0801ea65 	stmdaeq	r1, {r0, r2, r5, r6, r9, fp, sp, lr, pc}
 800ca18:	0801b553 	stmdaeq	r1, {r0, r1, r4, r6, r8, sl, ip, sp, pc}
 800ca1c:	0801b566 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, ip, sp, pc}
 800ca20:	0801b54f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, ip, sp, pc}
 800ca24:	0801b584 	stmdaeq	r1, {r2, r7, r8, sl, ip, sp, pc}
 800ca28:	0801b54b 	stmdaeq	r1, {r0, r1, r3, r6, r8, sl, ip, sp, pc}
 800ca2c:	0801b56f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, pc}

0800ca30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>:
 800ca30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca32:	88c6      	ldrh	r6, [r0, #6]
 800ca34:	8885      	ldrh	r5, [r0, #4]
 800ca36:	42ae      	cmp	r6, r5
 800ca38:	d216      	bcs.n	800ca68 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x38>
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	6800      	ldr	r0, [r0, #0]
 800ca3e:	1bad      	subs	r5, r5, r6
 800ca40:	4430      	add	r0, r6
 800ca42:	7a26      	ldrb	r6, [r4, #8]
 800ca44:	b923      	cbnz	r3, 800ca50 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x20>
 800ca46:	b926      	cbnz	r6, 800ca52 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x22>
 800ca48:	9200      	str	r2, [sp, #0]
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4a09      	ldr	r2, [pc, #36]	@ (800ca74 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x44>)
 800ca4e:	e003      	b.n	800ca58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800ca50:	b166      	cbz	r6, 800ca6c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x3c>
 800ca52:	9200      	str	r2, [sp, #0]
 800ca54:	4a08      	ldr	r2, [pc, #32]	@ (800ca78 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x48>)
 800ca56:	460b      	mov	r3, r1
 800ca58:	4629      	mov	r1, r5
 800ca5a:	f00d fd75 	bl	801a548 <snprintf>
 800ca5e:	4285      	cmp	r5, r0
 800ca60:	bfa2      	ittt	ge
 800ca62:	88e3      	ldrhge	r3, [r4, #6]
 800ca64:	181b      	addge	r3, r3, r0
 800ca66:	80e3      	strhge	r3, [r4, #6]
 800ca68:	b002      	add	sp, #8
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}
 800ca6c:	9200      	str	r2, [sp, #0]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4a02      	ldr	r2, [pc, #8]	@ (800ca7c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x4c>)
 800ca72:	e7f1      	b.n	800ca58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800ca74:	0801b2dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, ip, sp, pc}
 800ca78:	0801b2d1 	stmdaeq	r1, {r0, r4, r6, r7, r9, ip, sp, pc}
 800ca7c:	0801b2dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, ip, sp, pc}

0800ca80 <memcmp>:
 800ca80:	4402      	add	r2, r0
 800ca82:	4290      	cmp	r0, r2
 800ca84:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 800ca88:	d106      	bne.n	800ca98 <memcmp+0x18>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	4770      	bx	lr
 800ca8e:	3001      	adds	r0, #1
 800ca90:	4290      	cmp	r0, r2
 800ca92:	d102      	bne.n	800ca9a <memcmp+0x1a>
 800ca94:	2000      	movs	r0, #0
 800ca96:	e006      	b.n	800caa6 <memcmp+0x26>
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	7803      	ldrb	r3, [r0, #0]
 800ca9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d0f4      	beq.n	800ca8e <memcmp+0xe>
 800caa4:	1b18      	subs	r0, r3, r4
 800caa6:	bd10      	pop	{r4, pc}

0800caa8 <E131ParamsStore::Copy(e131params::Params*)>:
 800caa8:	b507      	push	{r0, r1, r2, lr}
 800caaa:	2300      	movs	r3, #0
 800caac:	2101      	movs	r1, #1
 800caae:	e9cd 3100 	strd	r3, r1, [sp]
 800cab2:	4602      	mov	r2, r0
 800cab4:	4804      	ldr	r0, [pc, #16]	@ (800cac8 <E131ParamsStore::Copy(e131params::Params*)+0x20>)
 800cab6:	23dc      	movs	r3, #220	@ 0xdc
 800cab8:	6800      	ldr	r0, [r0, #0]
 800caba:	2119      	movs	r1, #25
 800cabc:	f009 fff2 	bl	8016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800cac0:	b003      	add	sp, #12
 800cac2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cac6:	bf00      	nop
 800cac8:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800cacc <E131Params::E131Params()>:
 800cacc:	b510      	push	{r4, lr}
 800cace:	22dc      	movs	r2, #220	@ 0xdc
 800cad0:	4604      	mov	r4, r0
 800cad2:	2100      	movs	r1, #0
 800cad4:	f00d fa2c 	bl	8019f30 <memset>
 800cad8:	2201      	movs	r2, #1
 800cada:	7162      	strb	r2, [r4, #5]
 800cadc:	2202      	movs	r2, #2
 800cade:	71e2      	strb	r2, [r4, #7]
 800cae0:	2203      	movs	r2, #3
 800cae2:	7262      	strb	r2, [r4, #9]
 800cae4:	2204      	movs	r2, #4
 800cae6:	2300      	movs	r3, #0
 800cae8:	72e2      	strb	r2, [r4, #11]
 800caea:	2255      	movs	r2, #85	@ 0x55
 800caec:	71a3      	strb	r3, [r4, #6]
 800caee:	7223      	strb	r3, [r4, #8]
 800caf0:	72a3      	strb	r3, [r4, #10]
 800caf2:	7323      	strb	r3, [r4, #12]
 800caf4:	7362      	strb	r2, [r4, #13]
 800caf6:	73a3      	strb	r3, [r4, #14]
 800caf8:	4620      	mov	r0, r4
 800cafa:	bd10      	pop	{r4, pc}

0800cafc <E131Params::Load()>:
 800cafc:	b508      	push	{r3, lr}
 800cafe:	2200      	movs	r2, #0
 800cb00:	7002      	strb	r2, [r0, #0]
 800cb02:	7042      	strb	r2, [r0, #1]
 800cb04:	7082      	strb	r2, [r0, #2]
 800cb06:	70c2      	strb	r2, [r0, #3]
 800cb08:	f7ff ffce 	bl	800caa8 <E131ParamsStore::Copy(e131params::Params*)>
 800cb0c:	2001      	movs	r0, #1
 800cb0e:	bd08      	pop	{r3, pc}

0800cb10 <E131Params::Load(char const*, unsigned long)>:
 800cb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb12:	2500      	movs	r5, #0
 800cb14:	b087      	sub	sp, #28
 800cb16:	4604      	mov	r4, r0
 800cb18:	460e      	mov	r6, r1
 800cb1a:	4617      	mov	r7, r2
 800cb1c:	7005      	strb	r5, [r0, #0]
 800cb1e:	7045      	strb	r5, [r0, #1]
 800cb20:	7085      	strb	r5, [r0, #2]
 800cb22:	70c5      	strb	r5, [r0, #3]
 800cb24:	4602      	mov	r2, r0
 800cb26:	490c      	ldr	r1, [pc, #48]	@ (800cb58 <E131Params::Load(char const*, unsigned long)+0x48>)
 800cb28:	a804      	add	r0, sp, #16
 800cb2a:	f00a fa95 	bl	8017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800cb2e:	463a      	mov	r2, r7
 800cb30:	4631      	mov	r1, r6
 800cb32:	a804      	add	r0, sp, #16
 800cb34:	f00a fa94 	bl	8017060 <ReadConfigFile::Read(char const*, unsigned int)>
 800cb38:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800cb3c:	23dc      	movs	r3, #220	@ 0xdc
 800cb3e:	4807      	ldr	r0, [pc, #28]	@ (800cb5c <E131Params::Load(char const*, unsigned long)+0x4c>)
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	462a      	mov	r2, r5
 800cb44:	4623      	mov	r3, r4
 800cb46:	2119      	movs	r1, #25
 800cb48:	6800      	ldr	r0, [r0, #0]
 800cb4a:	f009 ff85 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800cb4e:	a804      	add	r0, sp, #16
 800cb50:	f00a fa85 	bl	801705e <ReadConfigFile::~ReadConfigFile()>
 800cb54:	b007      	add	sp, #28
 800cb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb58:	0800ce19 	stmdaeq	r0, {r0, r3, r4, r9, sl, fp, lr, pc}
 800cb5c:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800cb60 <E131Params::callbackFunction(char const*)>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	460f      	mov	r7, r1
 800cb66:	b089      	sub	sp, #36	@ 0x24
 800cb68:	2608      	movs	r6, #8
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	499f      	ldr	r1, [pc, #636]	@ (800cdec <E131Params::callbackFunction(char const*)+0x28c>)
 800cb6e:	9602      	str	r6, [sp, #8]
 800cb70:	eb0d 0306 	add.w	r3, sp, r6
 800cb74:	aa03      	add	r2, sp, #12
 800cb76:	4638      	mov	r0, r7
 800cb78:	f00a faa8 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800cb7c:	bb40      	cbnz	r0, 800cbd0 <E131Params::callbackFunction(char const*)+0x70>
 800cb7e:	499c      	ldr	r1, [pc, #624]	@ (800cdf0 <E131Params::callbackFunction(char const*)+0x290>)
 800cb80:	2204      	movs	r2, #4
 800cb82:	a803      	add	r0, sp, #12
 800cb84:	f7ff ff7c 	bl	800ca80 <memcmp>
 800cb88:	6825      	ldr	r5, [r4, #0]
 800cb8a:	b188      	cbz	r0, 800cbb0 <E131Params::callbackFunction(char const*)+0x50>
 800cb8c:	4999      	ldr	r1, [pc, #612]	@ (800cdf4 <E131Params::callbackFunction(char const*)+0x294>)
 800cb8e:	2203      	movs	r2, #3
 800cb90:	a803      	add	r0, sp, #12
 800cb92:	f7ff ff75 	bl	800ca80 <memcmp>
 800cb96:	b198      	cbz	r0, 800cbc0 <E131Params::callbackFunction(char const*)+0x60>
 800cb98:	4997      	ldr	r1, [pc, #604]	@ (800cdf8 <E131Params::callbackFunction(char const*)+0x298>)
 800cb9a:	2202      	movs	r2, #2
 800cb9c:	a803      	add	r0, sp, #12
 800cb9e:	f7ff ff6f 	bl	800ca80 <memcmp>
 800cba2:	b188      	cbz	r0, 800cbc8 <E131Params::callbackFunction(char const*)+0x68>
 800cba4:	4995      	ldr	r1, [pc, #596]	@ (800cdfc <E131Params::callbackFunction(char const*)+0x29c>)
 800cba6:	4632      	mov	r2, r6
 800cba8:	a803      	add	r0, sp, #12
 800cbaa:	f7ff ff69 	bl	800ca80 <memcmp>
 800cbae:	b168      	cbz	r0, 800cbcc <E131Params::callbackFunction(char const*)+0x6c>
 800cbb0:	f025 0520 	bic.w	r5, r5, #32
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	6025      	str	r5, [r4, #0]
 800cbb8:	74a3      	strb	r3, [r4, #18]
 800cbba:	b009      	add	sp, #36	@ 0x24
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	f045 0520 	orr.w	r5, r5, #32
 800cbc6:	e7f6      	b.n	800cbb6 <E131Params::callbackFunction(char const*)+0x56>
 800cbc8:	2302      	movs	r3, #2
 800cbca:	e7fa      	b.n	800cbc2 <E131Params::callbackFunction(char const*)+0x62>
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e7f8      	b.n	800cbc2 <E131Params::callbackFunction(char const*)+0x62>
 800cbd0:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 800ce10 <E131Params::callbackFunction(char const*)+0x2b0>
 800cbd4:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 800ce14 <E131Params::callbackFunction(char const*)+0x2b4>
 800cbd8:	f104 0853 	add.w	r8, r4, #83	@ 0x53
 800cbdc:	2500      	movs	r5, #0
 800cbde:	f10d 0206 	add.w	r2, sp, #6
 800cbe2:	4651      	mov	r1, sl
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f00a fb1c 	bl	8017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800cbea:	b9d8      	cbnz	r0, 800cc24 <E131Params::callbackFunction(char const*)+0xc4>
 800cbec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	1e42      	subs	r2, r0, #1
 800cbf4:	b292      	uxth	r2, r2
 800cbf6:	f64f 16fe 	movw	r6, #63998	@ 0xf9fe
 800cbfa:	42b2      	cmp	r2, r6
 800cbfc:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800cc00:	f04f 0102 	mov.w	r1, #2
 800cc04:	bf8c      	ite	hi
 800cc06:	1912      	addhi	r2, r2, r4
 800cc08:	1912      	addls	r2, r2, r4
 800cc0a:	fa01 f105 	lsl.w	r1, r1, r5
 800cc0e:	bf83      	ittte	hi
 800cc10:	3501      	addhi	r5, #1
 800cc12:	f8a2 5005 	strhhi.w	r5, [r2, #5]
 800cc16:	438b      	bichi	r3, r1
 800cc18:	f8a2 0005 	strhls.w	r0, [r2, #5]
 800cc1c:	bf98      	it	ls
 800cc1e:	430b      	orrls	r3, r1
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	e7ca      	b.n	800cbba <E131Params::callbackFunction(char const*)+0x5a>
 800cc24:	4976      	ldr	r1, [pc, #472]	@ (800ce00 <E131Params::callbackFunction(char const*)+0x2a0>)
 800cc26:	2612      	movs	r6, #18
 800cc28:	436e      	muls	r6, r5
 800cc2a:	f04f 0903 	mov.w	r9, #3
 800cc2e:	ab02      	add	r3, sp, #8
 800cc30:	aa03      	add	r2, sp, #12
 800cc32:	4431      	add	r1, r6
 800cc34:	4638      	mov	r0, r7
 800cc36:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc3a:	f00a fa47 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800cc3e:	b9f8      	cbnz	r0, 800cc80 <E131Params::callbackFunction(char const*)+0x120>
 800cc40:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800cc44:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 800cc48:	006d      	lsls	r5, r5, #1
 800cc4a:	f042 0220 	orr.w	r2, r2, #32
 800cc4e:	fa09 f905 	lsl.w	r9, r9, r5
 800cc52:	2a6c      	cmp	r2, #108	@ 0x6c
 800cc54:	ea23 0309 	bic.w	r3, r3, r9
 800cc58:	d10d      	bne.n	800cc76 <E131Params::callbackFunction(char const*)+0x116>
 800cc5a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800cc5e:	f042 0220 	orr.w	r2, r2, #32
 800cc62:	2a74      	cmp	r2, #116	@ 0x74
 800cc64:	d107      	bne.n	800cc76 <E131Params::callbackFunction(char const*)+0x116>
 800cc66:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800cc6a:	f040 0020 	orr.w	r0, r0, #32
 800cc6e:	f1a0 0270 	sub.w	r2, r0, #112	@ 0x70
 800cc72:	4250      	negs	r0, r2
 800cc74:	4150      	adcs	r0, r2
 800cc76:	40a8      	lsls	r0, r5
 800cc78:	4303      	orrs	r3, r0
 800cc7a:	f8a4 300f 	strh.w	r3, [r4, #15]
 800cc7e:	e79c      	b.n	800cbba <E131Params::callbackFunction(char const*)+0x5a>
 800cc80:	4860      	ldr	r0, [pc, #384]	@ (800ce04 <E131Params::callbackFunction(char const*)+0x2a4>)
 800cc82:	210e      	movs	r1, #14
 800cc84:	f04f 0911 	mov.w	r9, #17
 800cc88:	fb01 0105 	mla	r1, r1, r5, r0
 800cc8c:	ab02      	add	r3, sp, #8
 800cc8e:	4642      	mov	r2, r8
 800cc90:	4638      	mov	r0, r7
 800cc92:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc96:	f00a fa19 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800cc9a:	bb08      	cbnz	r0, 800cce0 <E131Params::callbackFunction(char const*)+0x180>
 800cc9c:	9b02      	ldr	r3, [sp, #8]
 800cc9e:	4a5a      	ldr	r2, [pc, #360]	@ (800ce08 <E131Params::callbackFunction(char const*)+0x2a8>)
 800cca0:	4426      	add	r6, r4
 800cca2:	441e      	add	r6, r3
 800cca4:	4649      	mov	r1, r9
 800cca6:	f886 0053 	strb.w	r0, [r6, #83]	@ 0x53
 800ccaa:	1c6b      	adds	r3, r5, #1
 800ccac:	a803      	add	r0, sp, #12
 800ccae:	f00d fc4b 	bl	801a548 <snprintf>
 800ccb2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ccb6:	a903      	add	r1, sp, #12
 800ccb8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800ccbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d001      	beq.n	800ccc8 <E131Params::callbackFunction(char const*)+0x168>
 800ccc4:	1a9b      	subs	r3, r3, r2
 800ccc6:	e001      	b.n	800cccc <E131Params::callbackFunction(char const*)+0x16c>
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1f5      	bne.n	800ccb8 <E131Params::callbackFunction(char const*)+0x158>
 800cccc:	2180      	movs	r1, #128	@ 0x80
 800ccce:	6822      	ldr	r2, [r4, #0]
 800ccd0:	40a9      	lsls	r1, r5
 800ccd2:	b91b      	cbnz	r3, 800ccdc <E131Params::callbackFunction(char const*)+0x17c>
 800ccd4:	ea22 0201 	bic.w	r2, r2, r1
 800ccd8:	6022      	str	r2, [r4, #0]
 800ccda:	e76e      	b.n	800cbba <E131Params::callbackFunction(char const*)+0x5a>
 800ccdc:	430a      	orrs	r2, r1
 800ccde:	e7fb      	b.n	800ccd8 <E131Params::callbackFunction(char const*)+0x178>
 800cce0:	2307      	movs	r3, #7
 800cce2:	9302      	str	r3, [sp, #8]
 800cce4:	aa03      	add	r2, sp, #12
 800cce6:	ab02      	add	r3, sp, #8
 800cce8:	eb0b 0106 	add.w	r1, fp, r6
 800ccec:	4638      	mov	r0, r7
 800ccee:	f00a f9ed 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d15f      	bne.n	800cdb6 <E131Params::callbackFunction(char const*)+0x256>
 800ccf6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ccfa:	f043 0320 	orr.w	r3, r3, #32
 800ccfe:	2b69      	cmp	r3, #105	@ 0x69
 800cd00:	d12e      	bne.n	800cd60 <E131Params::callbackFunction(char const*)+0x200>
 800cd02:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800cd06:	f043 0320 	orr.w	r3, r3, #32
 800cd0a:	2b6e      	cmp	r3, #110	@ 0x6e
 800cd0c:	d151      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800cd12:	f043 0320 	orr.w	r3, r3, #32
 800cd16:	2b70      	cmp	r3, #112	@ 0x70
 800cd18:	d14b      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cd1e:	f043 0320 	orr.w	r3, r3, #32
 800cd22:	2b75      	cmp	r3, #117	@ 0x75
 800cd24:	d145      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd26:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cd2a:	f043 0320 	orr.w	r3, r3, #32
 800cd2e:	3b74      	subs	r3, #116	@ 0x74
 800cd30:	bf18      	it	ne
 800cd32:	2301      	movne	r3, #1
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800cd3a:	f8b4 200d 	ldrh.w	r2, [r4, #13]
 800cd3e:	f04f 0103 	mov.w	r1, #3
 800cd42:	fa01 f105 	lsl.w	r1, r1, r5
 800cd46:	bf18      	it	ne
 800cd48:	2301      	movne	r3, #1
 800cd4a:	ea22 0201 	bic.w	r2, r2, r1
 800cd4e:	bf0b      	itete	eq
 800cd50:	40ab      	lsleq	r3, r5
 800cd52:	fa03 f505 	lslne.w	r5, r3, r5
 800cd56:	431a      	orreq	r2, r3
 800cd58:	432a      	orrne	r2, r5
 800cd5a:	f8a4 200d 	strh.w	r2, [r4, #13]
 800cd5e:	e72c      	b.n	800cbba <E131Params::callbackFunction(char const*)+0x5a>
 800cd60:	2b64      	cmp	r3, #100	@ 0x64
 800cd62:	d126      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd64:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800cd68:	f043 0320 	orr.w	r3, r3, #32
 800cd6c:	2b69      	cmp	r3, #105	@ 0x69
 800cd6e:	d120      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd70:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800cd74:	f043 0320 	orr.w	r3, r3, #32
 800cd78:	2b73      	cmp	r3, #115	@ 0x73
 800cd7a:	d11a      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cd80:	f043 0320 	orr.w	r3, r3, #32
 800cd84:	2b61      	cmp	r3, #97	@ 0x61
 800cd86:	d114      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd88:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cd8c:	f043 0320 	orr.w	r3, r3, #32
 800cd90:	2b62      	cmp	r3, #98	@ 0x62
 800cd92:	d10e      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cd94:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800cd98:	f043 0320 	orr.w	r3, r3, #32
 800cd9c:	2b6c      	cmp	r3, #108	@ 0x6c
 800cd9e:	d108      	bne.n	800cdb2 <E131Params::callbackFunction(char const*)+0x252>
 800cda0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800cda4:	f043 0320 	orr.w	r3, r3, #32
 800cda8:	2b65      	cmp	r3, #101	@ 0x65
 800cdaa:	bf0c      	ite	eq
 800cdac:	2302      	moveq	r3, #2
 800cdae:	2301      	movne	r3, #1
 800cdb0:	e7c0      	b.n	800cd34 <E131Params::callbackFunction(char const*)+0x1d4>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e7be      	b.n	800cd34 <E131Params::callbackFunction(char const*)+0x1d4>
 800cdb6:	3501      	adds	r5, #1
 800cdb8:	2d04      	cmp	r5, #4
 800cdba:	f10a 0a10 	add.w	sl, sl, #16
 800cdbe:	f108 0812 	add.w	r8, r8, #18
 800cdc2:	f47f af0c 	bne.w	800cbde <E131Params::callbackFunction(char const*)+0x7e>
 800cdc6:	4911      	ldr	r1, [pc, #68]	@ (800ce0c <E131Params::callbackFunction(char const*)+0x2ac>)
 800cdc8:	f10d 0205 	add.w	r2, sp, #5
 800cdcc:	4638      	mov	r0, r7
 800cdce:	f00a fa6d 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	f47f aef1 	bne.w	800cbba <E131Params::callbackFunction(char const*)+0x5a>
 800cdd8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	b112      	cbz	r2, 800cde6 <E131Params::callbackFunction(char const*)+0x286>
 800cde0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cde4:	e71c      	b.n	800cc20 <E131Params::callbackFunction(char const*)+0xc0>
 800cde6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cdea:	e719      	b.n	800cc20 <E131Params::callbackFunction(char const*)+0xc0>
 800cdec:	0801f355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, ip, sp, lr, pc}
 800cdf0:	0801b59e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, sl, ip, sp, pc}
 800cdf4:	0801b5a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, sl, ip, sp, pc}
 800cdf8:	0801ae41 	stmdaeq	r1, {r0, r6, r9, sl, fp, sp, pc}
 800cdfc:	0801b5a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, sl, ip, sp, pc}
 800ce00:	0801f406 	stmdaeq	r1, {r1, r2, sl, ip, sp, lr, pc}
 800ce04:	0801f386 	stmdaeq	r1, {r1, r2, r7, r8, r9, ip, sp, lr, pc}
 800ce08:	0801b5b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, ip, sp, pc}
 800ce0c:	0801f35e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, ip, sp, lr, pc}
 800ce10:	0801f44e 	stmdaeq	r1, {r1, r2, r3, r6, sl, ip, sp, lr, pc}
 800ce14:	0801f3be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}

0800ce18 <E131Params::staticCallbackFunction(void*, char const*)>:
 800ce18:	f7ff bea2 	b.w	800cb60 <E131Params::callbackFunction(char const*)>

0800ce1c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)>:
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	4604      	mov	r4, r0
 800ce22:	b087      	sub	sp, #28
 800ce24:	4615      	mov	r5, r2
 800ce26:	461e      	mov	r6, r3
 800ce28:	2900      	cmp	r1, #0
 800ce2a:	d053      	beq.n	800ced4 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0xb8>
 800ce2c:	22dc      	movs	r2, #220	@ 0xdc
 800ce2e:	f00d f868 	bl	8019f02 <memmove>
 800ce32:	462a      	mov	r2, r5
 800ce34:	4980      	ldr	r1, [pc, #512]	@ (800d038 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x21c>)
 800ce36:	f8df 824c 	ldr.w	r8, [pc, #588]	@ 800d084 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x268>
 800ce3a:	f8df 924c 	ldr.w	r9, [pc, #588]	@ 800d088 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x26c>
 800ce3e:	f8df b24c 	ldr.w	fp, [pc, #588]	@ 800d08c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x270>
 800ce42:	4633      	mov	r3, r6
 800ce44:	a803      	add	r0, sp, #12
 800ce46:	f00a f831 	bl	8016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800ce4a:	f104 0753 	add.w	r7, r4, #83	@ 0x53
 800ce4e:	2500      	movs	r5, #0
 800ce50:	f8d9 3000 	ldr.w	r3, [r9]
 800ce54:	6821      	ldr	r1, [r4, #0]
 800ce56:	42ab      	cmp	r3, r5
 800ce58:	d83f      	bhi.n	800ceda <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0xbe>
 800ce5a:	7ca3      	ldrb	r3, [r4, #18]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	f000 80a2 	beq.w	800cfa6 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x18a>
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	f000 80a1 	beq.w	800cfaa <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x18e>
 800ce68:	4a74      	ldr	r2, [pc, #464]	@ (800d03c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x220>)
 800ce6a:	4875      	ldr	r0, [pc, #468]	@ (800d040 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x224>)
 800ce6c:	2b03      	cmp	r3, #3
 800ce6e:	bf18      	it	ne
 800ce70:	4602      	movne	r2, r0
 800ce72:	f3c1 1340 	ubfx	r3, r1, #5, #1
 800ce76:	a803      	add	r0, sp, #12
 800ce78:	4972      	ldr	r1, [pc, #456]	@ (800d044 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 800ce7a:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 800d090 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x274>
 800ce7e:	4e72      	ldr	r6, [pc, #456]	@ (800d048 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x22c>)
 800ce80:	4f72      	ldr	r7, [pc, #456]	@ (800d04c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 800ce82:	f7ff fdd5 	bl	800ca30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800ce86:	4972      	ldr	r1, [pc, #456]	@ (800d050 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 800ce88:	a803      	add	r0, sp, #12
 800ce8a:	f00a f8cb 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800ce8e:	2500      	movs	r5, #0
 800ce90:	f8d9 3000 	ldr.w	r3, [r9]
 800ce94:	42ab      	cmp	r3, r5
 800ce96:	f200 808a 	bhi.w	800cfae <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x192>
 800ce9a:	496e      	ldr	r1, [pc, #440]	@ (800d054 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x238>)
 800ce9c:	a803      	add	r0, sp, #12
 800ce9e:	f00a f8c1 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cea8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800ceac:	42a2      	cmp	r2, r4
 800ceae:	f080 80a3 	bcs.w	800cff8 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x1dc>
 800ceb2:	9803      	ldr	r0, [sp, #12]
 800ceb4:	f413 6300 	ands.w	r3, r3, #2048	@ 0x800
 800ceb8:	4410      	add	r0, r2
 800ceba:	eba4 0402 	sub.w	r4, r4, r2
 800cebe:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800cec2:	f040 8088 	bne.w	800cfd6 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x1ba>
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	f040 8086 	bne.w	800cfd8 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x1bc>
 800cecc:	9200      	str	r2, [sp, #0]
 800cece:	4b62      	ldr	r3, [pc, #392]	@ (800d058 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x23c>)
 800ced0:	4a62      	ldr	r2, [pc, #392]	@ (800d05c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x240>)
 800ced2:	e087      	b.n	800cfe4 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x1c8>
 800ced4:	f7ff fde8 	bl	800caa8 <E131ParamsStore::Copy(e131params::Params*)>
 800ced8:	e7ab      	b.n	800ce32 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x16>
 800ceda:	f8bd e012 	ldrh.w	lr, [sp, #18]
 800cede:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 800cee2:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800cee6:	45b6      	cmp	lr, r6
 800cee8:	f8b3 2005 	ldrh.w	r2, [r3, #5]
 800ceec:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800cef0:	d223      	bcs.n	800cf3a <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x11e>
 800cef2:	f04f 0c02 	mov.w	ip, #2
 800cef6:	9803      	ldr	r0, [sp, #12]
 800cef8:	fa0c fc05 	lsl.w	ip, ip, r5
 800cefc:	ea3c 0101 	bics.w	r1, ip, r1
 800cf00:	4470      	add	r0, lr
 800cf02:	eba6 060e 	sub.w	r6, r6, lr
 800cf06:	eb0b 1305 	add.w	r3, fp, r5, lsl #4
 800cf0a:	f89d e014 	ldrb.w	lr, [sp, #20]
 800cf0e:	d005      	beq.n	800cf1c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x100>
 800cf10:	f1be 0f00 	cmp.w	lr, #0
 800cf14:	d105      	bne.n	800cf22 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x106>
 800cf16:	9200      	str	r2, [sp, #0]
 800cf18:	4a50      	ldr	r2, [pc, #320]	@ (800d05c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x240>)
 800cf1a:	e004      	b.n	800cf26 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x10a>
 800cf1c:	f1be 0f00 	cmp.w	lr, #0
 800cf20:	d03c      	beq.n	800cf9c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x180>
 800cf22:	9200      	str	r2, [sp, #0]
 800cf24:	4a4e      	ldr	r2, [pc, #312]	@ (800d060 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x244>)
 800cf26:	4631      	mov	r1, r6
 800cf28:	f00d fb0e 	bl	801a548 <snprintf>
 800cf2c:	4286      	cmp	r6, r0
 800cf2e:	bfa2      	ittt	ge
 800cf30:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800cf34:	18c0      	addge	r0, r0, r3
 800cf36:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800cf3a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 800cf3e:	4949      	ldr	r1, [pc, #292]	@ (800d064 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x248>)
 800cf40:	fa23 f30a 	lsr.w	r3, r3, sl
 800cf44:	2212      	movs	r2, #18
 800cf46:	f013 0303 	ands.w	r3, r3, #3
 800cf4a:	fb02 1105 	mla	r1, r2, r5, r1
 800cf4e:	d028      	beq.n	800cfa2 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x186>
 800cf50:	4a45      	ldr	r2, [pc, #276]	@ (800d068 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x24c>)
 800cf52:	4846      	ldr	r0, [pc, #280]	@ (800d06c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x250>)
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	bf18      	it	ne
 800cf58:	4602      	movne	r2, r0
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	bf18      	it	ne
 800cf5e:	2301      	movne	r3, #1
 800cf60:	a803      	add	r0, sp, #12
 800cf62:	f7ff fd65 	bl	800ca30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800cf66:	6822      	ldr	r2, [r4, #0]
 800cf68:	2380      	movs	r3, #128	@ 0x80
 800cf6a:	40ab      	lsls	r3, r5
 800cf6c:	401a      	ands	r2, r3
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	bf0c      	ite	eq
 800cf72:	2601      	moveq	r6, #1
 800cf74:	2600      	movne	r6, #0
 800cf76:	f105 0501 	add.w	r5, r5, #1
 800cf7a:	d005      	beq.n	800cf88 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x16c>
 800cf7c:	4a3c      	ldr	r2, [pc, #240]	@ (800d070 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x254>)
 800cf7e:	462b      	mov	r3, r5
 800cf80:	2111      	movs	r1, #17
 800cf82:	4638      	mov	r0, r7
 800cf84:	f00d fae0 	bl	801a548 <snprintf>
 800cf88:	463a      	mov	r2, r7
 800cf8a:	4641      	mov	r1, r8
 800cf8c:	4633      	mov	r3, r6
 800cf8e:	a803      	add	r0, sp, #12
 800cf90:	f7ff fd4e 	bl	800ca30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800cf94:	f108 080e 	add.w	r8, r8, #14
 800cf98:	3712      	adds	r7, #18
 800cf9a:	e759      	b.n	800ce50 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x34>
 800cf9c:	9200      	str	r2, [sp, #0]
 800cf9e:	4a35      	ldr	r2, [pc, #212]	@ (800d074 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 800cfa0:	e7c1      	b.n	800cf26 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x10a>
 800cfa2:	4a35      	ldr	r2, [pc, #212]	@ (800d078 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x25c>)
 800cfa4:	e7d9      	b.n	800cf5a <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x13e>
 800cfa6:	4a35      	ldr	r2, [pc, #212]	@ (800d07c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x260>)
 800cfa8:	e763      	b.n	800ce72 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x56>
 800cfaa:	4a35      	ldr	r2, [pc, #212]	@ (800d080 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x264>)
 800cfac:	e761      	b.n	800ce72 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x56>
 800cfae:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 800cfb2:	006a      	lsls	r2, r5, #1
 800cfb4:	4113      	asrs	r3, r2
 800cfb6:	f003 0303 	and.w	r3, r3, #3
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	4641      	mov	r1, r8
 800cfbe:	bf15      	itete	ne
 800cfc0:	2301      	movne	r3, #1
 800cfc2:	2300      	moveq	r3, #0
 800cfc4:	4632      	movne	r2, r6
 800cfc6:	463a      	moveq	r2, r7
 800cfc8:	a803      	add	r0, sp, #12
 800cfca:	f7ff fd31 	bl	800ca30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800cfce:	3501      	adds	r5, #1
 800cfd0:	f108 0812 	add.w	r8, r8, #18
 800cfd4:	e75c      	b.n	800ce90 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x74>
 800cfd6:	b34a      	cbz	r2, 800d02c <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x210>
 800cfd8:	3b00      	subs	r3, #0
 800cfda:	bf18      	it	ne
 800cfdc:	2301      	movne	r3, #1
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	4a1f      	ldr	r2, [pc, #124]	@ (800d060 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x244>)
 800cfe2:	4b1d      	ldr	r3, [pc, #116]	@ (800d058 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x23c>)
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	f00d faaf 	bl	801a548 <snprintf>
 800cfea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cfee:	4284      	cmp	r4, r0
 800cff0:	bfa4      	itt	ge
 800cff2:	181b      	addge	r3, r3, r0
 800cff4:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800cff8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cffc:	b17b      	cbz	r3, 800d01e <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x202>
 800cffe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d002:	9b03      	ldr	r3, [sp, #12]
 800d004:	4413      	add	r3, r2
 800d006:	227d      	movs	r2, #125	@ 0x7d
 800d008:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d00c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d010:	9903      	ldr	r1, [sp, #12]
 800d012:	54ca      	strb	r2, [r1, r3]
 800d014:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d018:	3301      	adds	r3, #1
 800d01a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d01e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d022:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	b007      	add	sp, #28
 800d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02c:	2301      	movs	r3, #1
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	4a10      	ldr	r2, [pc, #64]	@ (800d074 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 800d032:	4b09      	ldr	r3, [pc, #36]	@ (800d058 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x23c>)
 800d034:	e7d6      	b.n	800cfe4 <E131Params::Builder(e131params::Params const*, char*, unsigned long, unsigned long&)+0x1c8>
 800d036:	bf00      	nop
 800d038:	0801ea50 	stmdaeq	r1, {r4, r6, r9, fp, sp, lr, pc}
 800d03c:	0801b5a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, sl, ip, sp, pc}
 800d040:	0801b59e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, sl, ip, sp, pc}
 800d044:	0801f355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, ip, sp, lr, pc}
 800d048:	0801b5cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, sl, ip, sp, pc}
 800d04c:	0801b5d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, sl, ip, sp, pc}
 800d050:	0801b5d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl, ip, sp, pc}
 800d054:	0801b298 	stmdaeq	r1, {r3, r4, r7, r9, ip, sp, pc}
 800d058:	0801f35e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, ip, sp, lr, pc}
 800d05c:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 800d060:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800d064:	0801f3be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp, lr, pc}
 800d068:	0801b5c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, sl, ip, sp, pc}
 800d06c:	0801b5be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, sl, ip, sp, pc}
 800d070:	0801b5b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, ip, sp, pc}
 800d074:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}
 800d078:	0801b5b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, ip, sp, pc}
 800d07c:	0801b5a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, sl, ip, sp, pc}
 800d080:	0801ae41 	stmdaeq	r1, {r0, r6, r9, sl, fp, sp, pc}
 800d084:	0801f386 	stmdaeq	r1, {r1, r2, r7, r8, r9, ip, sp, lr, pc}
 800d088:	2000d2d8 	ldrdcs	sp, [r0], -r8
 800d08c:	0801f44e 	stmdaeq	r1, {r1, r2, r3, r6, sl, ip, sp, lr, pc}
 800d090:	0801f406 	stmdaeq	r1, {r1, r2, sl, ip, sp, lr, pc}

0800d094 <E131Params::Set()>:
 800d094:	4b18      	ldr	r3, [pc, #96]	@ (800d0f8 <E131Params::Set()+0x64>)
 800d096:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d098:	681c      	ldr	r4, [r3, #0]
 800d09a:	2c22      	cmp	r4, #34	@ 0x22
 800d09c:	d806      	bhi.n	800d0ac <E131Params::Set()+0x18>
 800d09e:	f1c4 0322 	rsb	r3, r4, #34	@ 0x22
 800d0a2:	4a16      	ldr	r2, [pc, #88]	@ (800d0fc <E131Params::Set()+0x68>)
 800d0a4:	2b04      	cmp	r3, #4
 800d0a6:	bf28      	it	cs
 800d0a8:	2304      	movcs	r3, #4
 800d0aa:	6013      	str	r3, [r2, #0]
 800d0ac:	6806      	ldr	r6, [r0, #0]
 800d0ae:	b196      	cbz	r6, 800d0d6 <E131Params::Set()+0x42>
 800d0b0:	4b13      	ldr	r3, [pc, #76]	@ (800d100 <E131Params::Set()+0x6c>)
 800d0b2:	681d      	ldr	r5, [r3, #0]
 800d0b4:	4b11      	ldr	r3, [pc, #68]	@ (800d0fc <E131Params::Set()+0x68>)
 800d0b6:	2244      	movs	r2, #68	@ 0x44
 800d0b8:	681f      	ldr	r7, [r3, #0]
 800d0ba:	fb02 5204 	mla	r2, r2, r4, r5
 800d0be:	2300      	movs	r3, #0
 800d0c0:	429f      	cmp	r7, r3
 800d0c2:	d004      	beq.n	800d0ce <E131Params::Set()+0x3a>
 800d0c4:	18e1      	adds	r1, r4, r3
 800d0c6:	2921      	cmp	r1, #33	@ 0x21
 800d0c8:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 800d0cc:	d904      	bls.n	800d0d8 <E131Params::Set()+0x44>
 800d0ce:	7c83      	ldrb	r3, [r0, #18]
 800d0d0:	626b      	str	r3, [r5, #36]	@ 0x24
 800d0d2:	0533      	lsls	r3, r6, #20
 800d0d4:	d40c      	bmi.n	800d0f0 <E131Params::Set()+0x5c>
 800d0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d8:	f8b0 100f 	ldrh.w	r1, [r0, #15]
 800d0dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d0e0:	fa41 f10c 	asr.w	r1, r1, ip
 800d0e4:	f001 0103 	and.w	r1, r1, #3
 800d0e8:	f8c2 11bc 	str.w	r1, [r2, #444]	@ 0x1bc
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	e7e7      	b.n	800d0c0 <E131Params::Set()+0x2c>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	f885 302e 	strb.w	r3, [r5, #46]	@ 0x2e
 800d0f6:	e7ee      	b.n	800d0d6 <E131Params::Set()+0x42>
 800d0f8:	20000000 	andcs	r0, r0, r0
 800d0fc:	2000d2d8 	ldrdcs	sp, [r0], -r8
 800d100:	2000d2d4 	ldrdcs	sp, [r0], -r4

0800d104 <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)>:
 800d104:	b507      	push	{r0, r1, r2, lr}
 800d106:	2300      	movs	r3, #0
 800d108:	2101      	movs	r1, #1
 800d10a:	e9cd 3100 	strd	r3, r1, [sp]
 800d10e:	4602      	mov	r2, r0
 800d110:	4804      	ldr	r0, [pc, #16]	@ (800d124 <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)+0x20>)
 800d112:	2329      	movs	r3, #41	@ 0x29
 800d114:	6800      	ldr	r0, [r0, #0]
 800d116:	2109      	movs	r1, #9
 800d118:	f009 fcc4 	bl	8016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800d11c:	b003      	add	sp, #12
 800d11e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d122:	bf00      	nop
 800d124:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800d128 <RDMDeviceParams::RDMDeviceParams()>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	2225      	movs	r2, #37	@ 0x25
 800d12c:	4604      	mov	r4, r0
 800d12e:	2100      	movs	r1, #0
 800d130:	f00c fefe 	bl	8019f30 <memset>
 800d134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d138:	237f      	movs	r3, #127	@ 0x7f
 800d13a:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 800d13e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 800d142:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
 800d146:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d14a:	4620      	mov	r0, r4
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <RDMDeviceParams::Load()>:
 800d14e:	b508      	push	{r3, lr}
 800d150:	f7ff ffd8 	bl	800d104 <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)>
 800d154:	bd08      	pop	{r3, pc}
	...

0800d158 <RDMDeviceParams::Set(RDMDevice*)>:
 800d158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d15c:	6803      	ldr	r3, [r0, #0]
 800d15e:	460c      	mov	r4, r1
 800d160:	07d9      	lsls	r1, r3, #31
 800d162:	b087      	sub	sp, #28
 800d164:	4605      	mov	r5, r0
 800d166:	d52d      	bpl.n	800d1c4 <RDMDeviceParams::Set(RDMDevice*)+0x6c>
 800d168:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 800d16c:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800d170:	2e20      	cmp	r6, #32
 800d172:	f100 0104 	add.w	r1, r0, #4
 800d176:	bf28      	it	cs
 800d178:	2620      	movcs	r6, #32
 800d17a:	b39b      	cbz	r3, 800d1e4 <RDMDeviceParams::Set(RDMDevice*)+0x8c>
 800d17c:	f104 0320 	add.w	r3, r4, #32
 800d180:	2701      	movs	r7, #1
 800d182:	4632      	mov	r2, r6
 800d184:	4618      	mov	r0, r3
 800d186:	f04f 0900 	mov.w	r9, #0
 800d18a:	f00c feba 	bl	8019f02 <memmove>
 800d18e:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
 800d192:	e9cd 7901 	strd	r7, r9, [sp, #4]
 800d196:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800d1f4 <RDMDeviceParams::Set(RDMDevice*)+0x9c>
 800d19a:	9600      	str	r6, [sp, #0]
 800d19c:	4603      	mov	r3, r0
 800d19e:	2204      	movs	r2, #4
 800d1a0:	f8d8 0000 	ldr.w	r0, [r8]
 800d1a4:	f88d 6017 	strb.w	r6, [sp, #23]
 800d1a8:	2109      	movs	r1, #9
 800d1aa:	f009 fc55 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d1ae:	e9cd 7901 	strd	r7, r9, [sp, #4]
 800d1b2:	9700      	str	r7, [sp, #0]
 800d1b4:	f8d8 0000 	ldr.w	r0, [r8]
 800d1b8:	f10d 0317 	add.w	r3, sp, #23
 800d1bc:	2224      	movs	r2, #36	@ 0x24
 800d1be:	2109      	movs	r1, #9
 800d1c0:	f009 fc4a 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	079a      	lsls	r2, r3, #30
 800d1c8:	bf44      	itt	mi
 800d1ca:	f8b5 2025 	ldrhmi.w	r2, [r5, #37]	@ 0x25
 800d1ce:	f8a4 2040 	strhmi.w	r2, [r4, #64]	@ 0x40
 800d1d2:	075b      	lsls	r3, r3, #29
 800d1d4:	bf44      	itt	mi
 800d1d6:	f8b5 3027 	ldrhmi.w	r3, [r5, #39]	@ 0x27
 800d1da:	f8a4 3042 	strhmi.w	r3, [r4, #66]	@ 0x42
 800d1de:	b007      	add	sp, #28
 800d1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1e4:	4632      	mov	r2, r6
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f00c fe8b 	bl	8019f02 <memmove>
 800d1ec:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
 800d1f0:	e7e8      	b.n	800d1c4 <RDMDeviceParams::Set(RDMDevice*)+0x6c>
 800d1f2:	bf00      	nop
 800d1f4:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800d1f8 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 800d1f8:	4770      	bx	lr

0800d1fa <RDMDeviceResponder::DmxStartAddressUpdate()>:
 800d1fa:	4770      	bx	lr

0800d1fc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)>:
 800d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fe:	4604      	mov	r4, r0
 800d200:	3004      	adds	r0, #4
 800d202:	460f      	mov	r7, r1
 800d204:	4616      	mov	r6, r2
 800d206:	461d      	mov	r5, r3
 800d208:	f001 f870 	bl	800e2ec <RDMDevice::RDMDevice()>
 800d20c:	4620      	mov	r0, r4
 800d20e:	4b24      	ldr	r3, [pc, #144]	@ (800d2a0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa4>)
 800d210:	f840 3b57 	str.w	r3, [r0], #87
 800d214:	f000 fd54 	bl	800dcc0 <RDMIdentify::RDMIdentify()>
 800d218:	4a22      	ldr	r2, [pc, #136]	@ (800d2a4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa8>)
 800d21a:	66a7      	str	r7, [r4, #104]	@ 0x68
 800d21c:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800d220:	6011      	str	r1, [r2, #0]
 800d222:	4a21      	ldr	r2, [pc, #132]	@ (800d2a8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xac>)
 800d224:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 800d228:	6011      	str	r1, [r2, #0]
 800d22a:	4a20      	ldr	r2, [pc, #128]	@ (800d2ac <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xb0>)
 800d22c:	6014      	str	r4, [r2, #0]
 800d22e:	2265      	movs	r2, #101	@ 0x65
 800d230:	f884 2097 	strb.w	r2, [r4, #151]	@ 0x97
 800d234:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800d238:	2300      	movs	r3, #0
 800d23a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d23e:	2201      	movs	r2, #1
 800d240:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 800d244:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d246:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 800d24a:	6623      	str	r3, [r4, #96]	@ 0x60
 800d24c:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 800d250:	f104 0271 	add.w	r2, r4, #113	@ 0x71
 800d254:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 800d258:	f802 3b01 	strb.w	r3, [r2], #1
 800d25c:	428a      	cmp	r2, r1
 800d25e:	d1fb      	bne.n	800d258 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0x5c>
 800d260:	f104 0397 	add.w	r3, r4, #151	@ 0x97
 800d264:	2200      	movs	r2, #0
 800d266:	f801 2b01 	strb.w	r2, [r1], #1
 800d26a:	428b      	cmp	r3, r1
 800d26c:	d1fb      	bne.n	800d266 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0x6a>
 800d26e:	f884 607e 	strb.w	r6, [r4, #126]	@ 0x7e
 800d272:	f884 507d 	strb.w	r5, [r4, #125]	@ 0x7d
 800d276:	f7fd fa83 	bl	800a780 <RDMSoftwareVersion::GetVersion()>
 800d27a:	66e0      	str	r0, [r4, #108]	@ 0x6c
 800d27c:	f7fd fa84 	bl	800a788 <RDMSoftwareVersion::GetVersionLength()>
 800d280:	f105 4380 	add.w	r3, r5, #1073741824	@ 0x40000000
 800d284:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800d286:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 800d28a:	3b01      	subs	r3, #1
 800d28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	b91b      	cbnz	r3, 800d29c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa0>
 800d294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d298:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 800d29c:	4620      	mov	r0, r4
 800d29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2a0:	0801ea70 	stmdaeq	r1, {r4, r5, r6, r9, fp, sp, lr, pc}
 800d2a4:	2000d2e8 	andcs	sp, r0, r8, ror #5
 800d2a8:	2000d2ec 	andcs	sp, r0, ip, ror #5
 800d2ac:	2000d2dc 	ldrdcs	sp, [r0], -ip

0800d2b0 <RDMDeviceResponder::Init()>:
 800d2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
 800d2ba:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
 800d2be:	2a20      	cmp	r2, #32
 800d2c0:	bf28      	it	cs
 800d2c2:	2220      	movcs	r2, #32
 800d2c4:	b087      	sub	sp, #28
 800d2c6:	3004      	adds	r0, #4
 800d2c8:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	3901      	subs	r1, #1
 800d2d0:	d275      	bcs.n	800d3be <RDMDeviceResponder::Init()+0x10e>
 800d2d2:	2501      	movs	r5, #1
 800d2d4:	2700      	movs	r7, #0
 800d2d6:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800d2da:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800d2de:	4e49      	ldr	r6, [pc, #292]	@ (800d404 <RDMDeviceResponder::Init()+0x154>)
 800d2e0:	9200      	str	r2, [sp, #0]
 800d2e2:	6830      	ldr	r0, [r6, #0]
 800d2e4:	f88d 2017 	strb.w	r2, [sp, #23]
 800d2e8:	2109      	movs	r1, #9
 800d2ea:	2204      	movs	r2, #4
 800d2ec:	f009 fbb4 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d2f0:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800d2f4:	9500      	str	r5, [sp, #0]
 800d2f6:	6830      	ldr	r0, [r6, #0]
 800d2f8:	f10d 0317 	add.w	r3, sp, #23
 800d2fc:	2224      	movs	r2, #36	@ 0x24
 800d2fe:	2109      	movs	r1, #9
 800d300:	f009 fbaa 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d304:	f06f 0522 	mvn.w	r5, #34	@ 0x22
 800d308:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800d30c:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 800d310:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d314:	1b2d      	subs	r5, r5, r4
 800d316:	18a9      	adds	r1, r5, r2
 800d318:	4288      	cmp	r0, r1
 800d31a:	d854      	bhi.n	800d3c6 <RDMDeviceResponder::Init()+0x116>
 800d31c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800d320:	f7fd fa34 	bl	800a78c <RDMSoftwareVersion::GetVersionId()>
 800d324:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 800d328:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
 800d32c:	2201      	movs	r2, #1
 800d32e:	f884 2071 	strb.w	r2, [r4, #113]	@ 0x71
 800d332:	2200      	movs	r2, #0
 800d334:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
 800d338:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
 800d33c:	0a1a      	lsrs	r2, r3, #8
 800d33e:	0e03      	lsrs	r3, r0, #24
 800d340:	f884 3077 	strb.w	r3, [r4, #119]	@ 0x77
 800d344:	0c03      	lsrs	r3, r0, #16
 800d346:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
 800d34a:	0a03      	lsrs	r3, r0, #8
 800d34c:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
 800d350:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800d354:	f884 2075 	strb.w	r2, [r4, #117]	@ 0x75
 800d358:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d35c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800d35e:	f884 007a 	strb.w	r0, [r4, #122]	@ 0x7a
 800d362:	3b01      	subs	r3, #1
 800d364:	f8b4 6064 	ldrh.w	r6, [r4, #100]	@ 0x64
 800d368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d36c:	685d      	ldr	r5, [r3, #4]
 800d36e:	bb7d      	cbnz	r5, 800d3d0 <RDMDeviceResponder::Init()+0x120>
 800d370:	f8b4 009c 	ldrh.w	r0, [r4, #156]	@ 0x9c
 800d374:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800d378:	0a03      	lsrs	r3, r0, #8
 800d37a:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
 800d37e:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
 800d382:	0a33      	lsrs	r3, r6, #8
 800d384:	b2c0      	uxtb	r0, r0
 800d386:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
 800d38a:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800d38e:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
 800d392:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
 800d396:	f884 6082 	strb.w	r6, [r4, #130]	@ 0x82
 800d39a:	f104 0371 	add.w	r3, r4, #113	@ 0x71
 800d39e:	f104 0284 	add.w	r2, r4, #132	@ 0x84
 800d3a2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d3a6:	7499      	strb	r1, [r3, #18]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d1fa      	bne.n	800d3a2 <RDMDeviceResponder::Init()+0xf2>
 800d3ac:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800d3b0:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800d3b4:	4413      	add	r3, r2
 800d3b6:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800d3ba:	b007      	add	sp, #28
 800d3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3be:	f810 5b01 	ldrb.w	r5, [r0], #1
 800d3c2:	77c5      	strb	r5, [r0, #31]
 800d3c4:	e783      	b.n	800d2ce <RDMDeviceResponder::Init()+0x1e>
 800d3c6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d3ca:	440b      	add	r3, r1
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	e7a2      	b.n	800d316 <RDMDeviceResponder::Init()+0x66>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d6:	4798      	blx	r3
 800d3d8:	0a00      	lsrs	r0, r0, #8
 800d3da:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 800d3de:	682b      	ldr	r3, [r5, #0]
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e4:	4798      	blx	r3
 800d3e6:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 800d3ea:	682b      	ldr	r3, [r5, #0]
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3f0:	4798      	blx	r3
 800d3f2:	0a00      	lsrs	r0, r0, #8
 800d3f4:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3fe:	4798      	blx	r3
 800d400:	e7bf      	b.n	800d382 <RDMDeviceResponder::Init()+0xd2>
 800d402:	bf00      	nop
 800d404:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800d408 <RDMDeviceResponder::Print()>:
 800d408:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d40a:	4604      	mov	r4, r0
 800d40c:	3004      	adds	r0, #4
 800d40e:	f000 ffbd 	bl	800e38c <RDMDevice::Print()>
 800d412:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800d416:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800d418:	481b      	ldr	r0, [pc, #108]	@ (800d488 <RDMDeviceResponder::Print()+0x80>)
 800d41a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d41e:	3b01      	subs	r3, #1
 800d420:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800d424:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 800d426:	f00d f8bc 	bl	801a5a2 <puts>
 800d42a:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 800d42e:	f894 1071 	ldrb.w	r1, [r4, #113]	@ 0x71
 800d432:	4816      	ldr	r0, [pc, #88]	@ (800d48c <RDMDeviceResponder::Print()+0x84>)
 800d434:	f00d f860 	bl	801a4f8 <printf>
 800d438:	f8b4 107f 	ldrh.w	r1, [r4, #127]	@ 0x7f
 800d43c:	4814      	ldr	r0, [pc, #80]	@ (800d490 <RDMDeviceResponder::Print()+0x88>)
 800d43e:	ba49      	rev16	r1, r1
 800d440:	b289      	uxth	r1, r1
 800d442:	f00d f859 	bl	801a4f8 <printf>
 800d446:	f8b4 107b 	ldrh.w	r1, [r4, #123]	@ 0x7b
 800d44a:	4812      	ldr	r0, [pc, #72]	@ (800d494 <RDMDeviceResponder::Print()+0x8c>)
 800d44c:	ba49      	rev16	r1, r1
 800d44e:	b289      	uxth	r1, r1
 800d450:	3508      	adds	r5, #8
 800d452:	f00d f851 	bl	801a4f8 <printf>
 800d456:	9500      	str	r5, [sp, #0]
 800d458:	f894 207e 	ldrb.w	r2, [r4, #126]	@ 0x7e
 800d45c:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 800d460:	480d      	ldr	r0, [pc, #52]	@ (800d498 <RDMDeviceResponder::Print()+0x90>)
 800d462:	b2f3      	uxtb	r3, r6
 800d464:	f00d f848 	bl	801a4f8 <printf>
 800d468:	f8b4 1081 	ldrh.w	r1, [r4, #129]	@ 0x81
 800d46c:	480b      	ldr	r0, [pc, #44]	@ (800d49c <RDMDeviceResponder::Print()+0x94>)
 800d46e:	ba49      	rev16	r1, r1
 800d470:	b289      	uxth	r1, r1
 800d472:	f00d f841 	bl	801a4f8 <printf>
 800d476:	f894 1083 	ldrb.w	r1, [r4, #131]	@ 0x83
 800d47a:	4809      	ldr	r0, [pc, #36]	@ (800d4a0 <RDMDeviceResponder::Print()+0x98>)
 800d47c:	b002      	add	sp, #8
 800d47e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d482:	f00d b839 	b.w	801a4f8 <printf>
 800d486:	bf00      	nop
 800d488:	0801b5e0 	stmdaeq	r1, {r5, r6, r7, r8, sl, ip, sp, pc}
 800d48c:	0801b5fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, pc}
 800d490:	0801b615 	stmdaeq	r1, {r0, r2, r4, r9, sl, ip, sp, pc}
 800d494:	0801b62d 	stmdaeq	r1, {r0, r2, r3, r5, r9, sl, ip, sp, pc}
 800d498:	0801b645 	stmdaeq	r1, {r0, r2, r6, r9, sl, ip, sp, pc}
 800d49c:	0801b663 	stmdaeq	r1, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
 800d4a0:	0801b67b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, sl, ip, sp, pc}

0800d4a4 <memcpy.isra.0>:
 800d4a4:	440a      	add	r2, r1
 800d4a6:	4291      	cmp	r1, r2
 800d4a8:	d100      	bne.n	800d4ac <memcpy.isra.0+0x8>
 800d4aa:	4770      	bx	lr
 800d4ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4b0:	f800 3b01 	strb.w	r3, [r0], #1
 800d4b4:	e7f7      	b.n	800d4a6 <memcpy.isra.0+0x2>
	...

0800d4b8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	790c      	ldrb	r4, [r1, #4]
 800d4be:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 800d4c2:	6809      	ldr	r1, [r1, #0]
 800d4c4:	2c20      	cmp	r4, #32
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	4605      	mov	r5, r0
 800d4ca:	bf28      	it	cs
 800d4cc:	2420      	movcs	r4, #32
 800d4ce:	b313      	cbz	r3, 800d516 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x5e>
 800d4d0:	f100 0820 	add.w	r8, r0, #32
 800d4d4:	4622      	mov	r2, r4
 800d4d6:	4640      	mov	r0, r8
 800d4d8:	f7ff ffe4 	bl	800d4a4 <memcpy.isra.0>
 800d4dc:	2700      	movs	r7, #0
 800d4de:	f885 4050 	strb.w	r4, [r5, #80]	@ 0x50
 800d4e2:	2501      	movs	r5, #1
 800d4e4:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800d4e8:	4e0e      	ldr	r6, [pc, #56]	@ (800d524 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x6c>)
 800d4ea:	9400      	str	r4, [sp, #0]
 800d4ec:	6830      	ldr	r0, [r6, #0]
 800d4ee:	f88d 4017 	strb.w	r4, [sp, #23]
 800d4f2:	4643      	mov	r3, r8
 800d4f4:	2204      	movs	r2, #4
 800d4f6:	2109      	movs	r1, #9
 800d4f8:	f009 faae 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d4fc:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800d500:	9500      	str	r5, [sp, #0]
 800d502:	6830      	ldr	r0, [r6, #0]
 800d504:	f10d 0317 	add.w	r3, sp, #23
 800d508:	2224      	movs	r2, #36	@ 0x24
 800d50a:	2109      	movs	r1, #9
 800d50c:	f009 faa4 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d510:	b006      	add	sp, #24
 800d512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d516:	4622      	mov	r2, r4
 800d518:	f7ff ffc4 	bl	800d4a4 <memcpy.isra.0>
 800d51c:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
 800d520:	e7f6      	b.n	800d510 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x58>
 800d522:	bf00      	nop
 800d524:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800d528 <RDMDeviceResponder::SetFactoryDefaults()>:
 800d528:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d52a:	4604      	mov	r4, r0
 800d52c:	4669      	mov	r1, sp
 800d52e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800d532:	f88d 3004 	strb.w	r3, [sp, #4]
 800d536:	3004      	adds	r0, #4
 800d538:	9000      	str	r0, [sp, #0]
 800d53a:	f06f 0522 	mvn.w	r5, #34	@ 0x22
 800d53e:	f7ff ffbb 	bl	800d4b8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800d542:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800d546:	f894 1054 	ldrb.w	r1, [r4, #84]	@ 0x54
 800d54a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d54e:	1b2d      	subs	r5, r5, r4
 800d550:	18a8      	adds	r0, r5, r2
 800d552:	4288      	cmp	r0, r1
 800d554:	d361      	bcc.n	800d61a <RDMDeviceResponder::SetFactoryDefaults()+0xf2>
 800d556:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800d55a:	2301      	movs	r3, #1
 800d55c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
 800d560:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	685d      	ldr	r5, [r3, #4]
 800d566:	b1f5      	cbz	r5, 800d5a6 <RDMDeviceResponder::SetFactoryDefaults()+0x7e>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	4628      	mov	r0, r5
 800d56c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d56e:	4798      	blx	r3
 800d570:	0a00      	lsrs	r0, r0, #8
 800d572:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 800d576:	682b      	ldr	r3, [r5, #0]
 800d578:	4628      	mov	r0, r5
 800d57a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d57c:	4798      	blx	r3
 800d57e:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 800d582:	682b      	ldr	r3, [r5, #0]
 800d584:	4628      	mov	r0, r5
 800d586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d588:	4798      	blx	r3
 800d58a:	0a00      	lsrs	r0, r0, #8
 800d58c:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	4628      	mov	r0, r5
 800d594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d596:	4798      	blx	r3
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	4798      	blx	r3
 800d5a6:	f8b4 509c 	ldrh.w	r5, [r4, #156]	@ 0x9c
 800d5aa:	1e6b      	subs	r3, r5, #1
 800d5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5b0:	d217      	bcs.n	800d5e2 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800d5b2:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800d5b6:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800d5b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c2:	6858      	ldr	r0, [r3, #4]
 800d5c4:	b168      	cbz	r0, 800d5e2 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800d5c6:	6803      	ldr	r3, [r0, #0]
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5cc:	4798      	blx	r3
 800d5ce:	b120      	cbz	r0, 800d5da <RDMDeviceResponder::SetFactoryDefaults()+0xb2>
 800d5d0:	0a2b      	lsrs	r3, r5, #8
 800d5d2:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
 800d5d6:	f884 5080 	strb.w	r5, [r4, #128]	@ 0x80
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	4620      	mov	r0, r4
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	4798      	blx	r3
 800d5e2:	f104 0171 	add.w	r1, r4, #113	@ 0x71
 800d5e6:	2213      	movs	r2, #19
 800d5e8:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 800d5ec:	f7ff ff5a 	bl	800d4a4 <memcpy.isra.0>
 800d5f0:	2601      	movs	r6, #1
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	d313      	bcc.n	800d624 <RDMDeviceResponder::SetFactoryDefaults()+0xfc>
 800d5fc:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800d600:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800d604:	4413      	add	r3, r2
 800d606:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800d60a:	2301      	movs	r3, #1
 800d60c:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
 800d610:	b002      	add	sp, #8
 800d612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d616:	f7fd b893 	b.w	800a740 <rdm::device::responder::factorydefaults()>
 800d61a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d61e:	4403      	add	r3, r0
 800d620:	b29b      	uxth	r3, r3
 800d622:	e795      	b.n	800d550 <RDMDeviceResponder::SetFactoryDefaults()+0x28>
 800d624:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800d626:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d62a:	b193      	cbz	r3, 800d652 <RDMDeviceResponder::SetFactoryDefaults()+0x12a>
 800d62c:	7a1a      	ldrb	r2, [r3, #8]
 800d62e:	b982      	cbnz	r2, 800d652 <RDMDeviceResponder::SetFactoryDefaults()+0x12a>
 800d630:	f103 0015 	add.w	r0, r3, #21
 800d634:	f890 5023 	ldrb.w	r5, [r0, #35]	@ 0x23
 800d638:	b125      	cbz	r5, 800d644 <RDMDeviceResponder::SetFactoryDefaults()+0x11c>
 800d63a:	3201      	adds	r2, #1
 800d63c:	2a20      	cmp	r2, #32
 800d63e:	f800 5f01 	strb.w	r5, [r0, #1]!
 800d642:	d1f7      	bne.n	800d634 <RDMDeviceResponder::SetFactoryDefaults()+0x10c>
 800d644:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800d648:	899a      	ldrh	r2, [r3, #12]
 800d64a:	825a      	strh	r2, [r3, #18]
 800d64c:	7b9a      	ldrb	r2, [r3, #14]
 800d64e:	751a      	strb	r2, [r3, #20]
 800d650:	721e      	strb	r6, [r3, #8]
 800d652:	3101      	adds	r1, #1
 800d654:	e7ce      	b.n	800d5f4 <RDMDeviceResponder::SetFactoryDefaults()+0xcc>

0800d656 <RDMHandler::RDMHandler(bool)>:
 800d656:	2200      	movs	r2, #0
 800d658:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800d65c:	7001      	strb	r1, [r0, #0]
 800d65e:	7042      	strb	r2, [r0, #1]
 800d660:	4770      	bx	lr

0800d662 <RDMHandler::HandleString(char const*, unsigned long)>:
 800d662:	6883      	ldr	r3, [r0, #8]
 800d664:	f803 2f17 	strb.w	r2, [r3, #23]!
 800d668:	440a      	add	r2, r1
 800d66a:	4291      	cmp	r1, r2
 800d66c:	d100      	bne.n	800d670 <RDMHandler::HandleString(char const*, unsigned long)+0xe>
 800d66e:	4770      	bx	lr
 800d670:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d674:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d678:	e7f7      	b.n	800d66a <RDMHandler::HandleString(char const*, unsigned long)+0x8>
	...

0800d67c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 800d682:	25cc      	movs	r5, #204	@ 0xcc
 800d684:	701d      	strb	r5, [r3, #0]
 800d686:	7825      	ldrb	r5, [r4, #0]
 800d688:	705d      	strb	r5, [r3, #1]
 800d68a:	7ba5      	ldrb	r5, [r4, #14]
 800d68c:	73dd      	strb	r5, [r3, #15]
 800d68e:	2500      	movs	r5, #0
 800d690:	745d      	strb	r5, [r3, #17]
 800d692:	7c65      	ldrb	r5, [r4, #17]
 800d694:	749d      	strb	r5, [r3, #18]
 800d696:	7ca5      	ldrb	r5, [r4, #18]
 800d698:	74dd      	strb	r5, [r3, #19]
 800d69a:	7ce5      	ldrb	r5, [r4, #19]
 800d69c:	3501      	adds	r5, #1
 800d69e:	751d      	strb	r5, [r3, #20]
 800d6a0:	7d25      	ldrb	r5, [r4, #20]
 800d6a2:	755d      	strb	r5, [r3, #21]
 800d6a4:	7d65      	ldrb	r5, [r4, #21]
 800d6a6:	759d      	strb	r5, [r3, #22]
 800d6a8:	b119      	cbz	r1, 800d6b2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800d6aa:	1e4d      	subs	r5, r1, #1
 800d6ac:	2d01      	cmp	r5, #1
 800d6ae:	d91f      	bls.n	800d6f0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x74>
 800d6b0:	bd70      	pop	{r4, r5, r6, pc}
 800d6b2:	7dda      	ldrb	r2, [r3, #23]
 800d6b4:	7419      	strb	r1, [r3, #16]
 800d6b6:	3218      	adds	r2, #24
 800d6b8:	709a      	strb	r2, [r3, #2]
 800d6ba:	4a14      	ldr	r2, [pc, #80]	@ (800d70c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x90>)
 800d6bc:	6812      	ldr	r2, [r2, #0]
 800d6be:	1de1      	adds	r1, r4, #7
 800d6c0:	1c9d      	adds	r5, r3, #2
 800d6c2:	3249      	adds	r2, #73	@ 0x49
 800d6c4:	340d      	adds	r4, #13
 800d6c6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800d6ca:	f805 6f01 	strb.w	r6, [r5, #1]!
 800d6ce:	42a1      	cmp	r1, r4
 800d6d0:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800d6d4:	71ae      	strb	r6, [r5, #6]
 800d6d6:	d1f6      	bne.n	800d6c6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 800d6d8:	2200      	movs	r2, #0
 800d6da:	6884      	ldr	r4, [r0, #8]
 800d6dc:	7899      	ldrb	r1, [r3, #2]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	4291      	cmp	r1, r2
 800d6e2:	d80e      	bhi.n	800d702 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x86>
 800d6e4:	0a1d      	lsrs	r5, r3, #8
 800d6e6:	54a5      	strb	r5, [r4, r2]
 800d6e8:	6882      	ldr	r2, [r0, #8]
 800d6ea:	440a      	add	r2, r1
 800d6ec:	7053      	strb	r3, [r2, #1]
 800d6ee:	e7df      	b.n	800d6b0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 800d6f0:	7419      	strb	r1, [r3, #16]
 800d6f2:	2102      	movs	r1, #2
 800d6f4:	251a      	movs	r5, #26
 800d6f6:	75d9      	strb	r1, [r3, #23]
 800d6f8:	0a11      	lsrs	r1, r2, #8
 800d6fa:	709d      	strb	r5, [r3, #2]
 800d6fc:	7619      	strb	r1, [r3, #24]
 800d6fe:	765a      	strb	r2, [r3, #25]
 800d700:	e7db      	b.n	800d6ba <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 800d702:	5ca5      	ldrb	r5, [r4, r2]
 800d704:	442b      	add	r3, r5
 800d706:	b29b      	uxth	r3, r3
 800d708:	3201      	adds	r2, #1
 800d70a:	e7e9      	b.n	800d6e0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 800d70c:	2000d2dc 	ldrdcs	sp, [r0], -ip

0800d710 <RDMHandler::RespondMessageAck()>:
 800d710:	2200      	movs	r2, #0
 800d712:	4611      	mov	r1, r2
 800d714:	f7ff bfb2 	b.w	800d67c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800d718 <RDMHandler::GetDeviceInfo(unsigned short)>:
 800d718:	4b1c      	ldr	r3, [pc, #112]	@ (800d78c <RDMHandler::GetDeviceInfo(unsigned short)+0x74>)
 800d71a:	b510      	push	{r4, lr}
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4604      	mov	r4, r0
 800d720:	b351      	cbz	r1, 800d778 <RDMHandler::GetDeviceInfo(unsigned short)+0x60>
 800d722:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800d726:	3901      	subs	r1, #1
 800d728:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d72a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d72e:	8a11      	ldrh	r1, [r2, #16]
 800d730:	0a09      	lsrs	r1, r1, #8
 800d732:	f883 108e 	strb.w	r1, [r3, #142]	@ 0x8e
 800d736:	8a11      	ldrh	r1, [r2, #16]
 800d738:	f883 108f 	strb.w	r1, [r3, #143]	@ 0x8f
 800d73c:	7d11      	ldrb	r1, [r2, #20]
 800d73e:	f883 1090 	strb.w	r1, [r3, #144]	@ 0x90
 800d742:	7d51      	ldrb	r1, [r2, #21]
 800d744:	f883 1091 	strb.w	r1, [r3, #145]	@ 0x91
 800d748:	8a51      	ldrh	r1, [r2, #18]
 800d74a:	0a09      	lsrs	r1, r1, #8
 800d74c:	f883 1092 	strb.w	r1, [r3, #146]	@ 0x92
 800d750:	8a51      	ldrh	r1, [r2, #18]
 800d752:	f883 1093 	strb.w	r1, [r3, #147]	@ 0x93
 800d756:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 800d75a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
 800d75e:	f103 0184 	add.w	r1, r3, #132	@ 0x84
 800d762:	68a0      	ldr	r0, [r4, #8]
 800d764:	2213      	movs	r2, #19
 800d766:	75c2      	strb	r2, [r0, #23]
 800d768:	3018      	adds	r0, #24
 800d76a:	f7ff fe9b 	bl	800d4a4 <memcpy.isra.0>
 800d76e:	4620      	mov	r0, r4
 800d770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d774:	f7ff bfcc 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d778:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800d77c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 800d780:	0a11      	lsrs	r1, r2, #8
 800d782:	f883 1075 	strb.w	r1, [r3, #117]	@ 0x75
 800d786:	f103 0171 	add.w	r1, r3, #113	@ 0x71
 800d78a:	e7ea      	b.n	800d762 <RDMHandler::GetDeviceInfo(unsigned short)+0x4a>
 800d78c:	2000d2dc 	ldrdcs	sp, [r0], -ip

0800d790 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	6887      	ldr	r7, [r0, #8]
 800d796:	2301      	movs	r3, #1
 800d798:	75fb      	strb	r3, [r7, #23]
 800d79a:	4b2c      	ldr	r3, [pc, #176]	@ (800d84c <RDMHandler::GetFactoryDefaults(unsigned short)+0xbc>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f893 1099 	ldrb.w	r1, [r3, #153]	@ 0x99
 800d7a2:	b309      	cbz	r1, 800d7e8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x58>
 800d7a4:	f06f 0e22 	mvn.w	lr, #34	@ 0x22
 800d7a8:	f8b3 5048 	ldrh.w	r5, [r3, #72]	@ 0x48
 800d7ac:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800d7b0:	f893 c054 	ldrb.w	ip, [r3, #84]	@ 0x54
 800d7b4:	f103 0423 	add.w	r4, r3, #35	@ 0x23
 800d7b8:	ebae 0e03 	sub.w	lr, lr, r3
 800d7bc:	eb0e 0604 	add.w	r6, lr, r4
 800d7c0:	45b4      	cmp	ip, r6
 800d7c2:	d813      	bhi.n	800d7ec <RDMHandler::GetFactoryDefaults(unsigned short)+0x5c>
 800d7c4:	4295      	cmp	r5, r2
 800d7c6:	d130      	bne.n	800d82a <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800d7c8:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800d7cc:	f893 507d 	ldrb.w	r5, [r3, #125]	@ 0x7d
 800d7d0:	f8b3 409a 	ldrh.w	r4, [r3, #154]	@ 0x9a
 800d7d4:	442a      	add	r2, r5
 800d7d6:	4294      	cmp	r4, r2
 800d7d8:	d127      	bne.n	800d82a <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800d7da:	f8b3 c064 	ldrh.w	ip, [r3, #100]	@ 0x64
 800d7de:	2500      	movs	r5, #0
 800d7e0:	f06f 0e14 	mvn.w	lr, #20
 800d7e4:	4565      	cmp	r5, ip
 800d7e6:	d306      	bcc.n	800d7f6 <RDMHandler::GetFactoryDefaults(unsigned short)+0x66>
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	e022      	b.n	800d832 <RDMHandler::GetFactoryDefaults(unsigned short)+0xa2>
 800d7ec:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800d7f0:	4432      	add	r2, r6
 800d7f2:	b292      	uxth	r2, r2
 800d7f4:	e7e2      	b.n	800d7bc <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800d7f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d7f8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800d7fc:	b31a      	cbz	r2, 800d846 <RDMHandler::GetFactoryDefaults(unsigned short)+0xb6>
 800d7fe:	7a14      	ldrb	r4, [r2, #8]
 800d800:	b19c      	cbz	r4, 800d82a <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800d802:	7d16      	ldrb	r6, [r2, #20]
 800d804:	8a54      	ldrh	r4, [r2, #18]
 800d806:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 800d80a:	f892 9036 	ldrb.w	r9, [r2, #54]	@ 0x36
 800d80e:	4434      	add	r4, r6
 800d810:	b2a4      	uxth	r4, r4
 800d812:	f102 0615 	add.w	r6, r2, #21
 800d816:	ebae 0a02 	sub.w	sl, lr, r2
 800d81a:	eb0a 0b06 	add.w	fp, sl, r6
 800d81e:	45cb      	cmp	fp, r9
 800d820:	d30c      	bcc.n	800d83c <RDMHandler::GetFactoryDefaults(unsigned short)+0xac>
 800d822:	45a0      	cmp	r8, r4
 800d824:	d00f      	beq.n	800d846 <RDMHandler::GetFactoryDefaults(unsigned short)+0xb6>
 800d826:	2100      	movs	r1, #0
 800d828:	7211      	strb	r1, [r2, #8]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d830:	4613      	mov	r3, r2
 800d832:	763b      	strb	r3, [r7, #24]
 800d834:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	f7ff bf6a 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d83c:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 800d840:	445c      	add	r4, fp
 800d842:	b2a4      	uxth	r4, r4
 800d844:	e7e9      	b.n	800d81a <RDMHandler::GetFactoryDefaults(unsigned short)+0x8a>
 800d846:	3501      	adds	r5, #1
 800d848:	e7cc      	b.n	800d7e4 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 800d84a:	bf00      	nop
 800d84c:	2000d2dc 	ldrdcs	sp, [r0], -ip

0800d850 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 800d850:	b510      	push	{r4, lr}
 800d852:	4905      	ldr	r1, [pc, #20]	@ (800d868 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 800d854:	4604      	mov	r4, r0
 800d856:	220e      	movs	r2, #14
 800d858:	f7ff ff03 	bl	800d662 <RDMHandler::HandleString(char const*, unsigned long)>
 800d85c:	4620      	mov	r0, r4
 800d85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d862:	f7ff bf55 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d866:	bf00      	nop
 800d868:	0801b3f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, ip, sp, pc}

0800d86c <RDMHandler::GetDeviceLabel(unsigned short)>:
 800d86c:	4b0d      	ldr	r3, [pc, #52]	@ (800d8a4 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800d86e:	b510      	push	{r4, lr}
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4604      	mov	r4, r0
 800d874:	b189      	cbz	r1, 800d89a <RDMHandler::GetDeviceLabel(unsigned short)+0x2e>
 800d876:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800d87a:	3901      	subs	r1, #1
 800d87c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d87e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d882:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 800d886:	f103 0116 	add.w	r1, r3, #22
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7ff fee9 	bl	800d662 <RDMHandler::HandleString(char const*, unsigned long)>
 800d890:	4620      	mov	r0, r4
 800d892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d896:	f7ff bf3b 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d89a:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800d89e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800d8a2:	e7f2      	b.n	800d88a <RDMHandler::GetDeviceLabel(unsigned short)+0x1e>
 800d8a4:	2000d2dc 	ldrdcs	sp, [r0], -ip

0800d8a8 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 800d8a8:	6883      	ldr	r3, [r0, #8]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	75da      	strb	r2, [r3, #23]
 800d8ae:	4a02      	ldr	r2, [pc, #8]	@ (800d8b8 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 800d8b0:	7812      	ldrb	r2, [r2, #0]
 800d8b2:	761a      	strb	r2, [r3, #24]
 800d8b4:	f7ff bf2c 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d8b8:	2000d2e5 	andcs	sp, r0, r5, ror #5

0800d8bc <RDMHandler::GetManufacturerLabel(unsigned short)>:
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e8 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	7810      	ldrb	r0, [r2, #0]
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d1fa      	bne.n	800d8c4 <RDMHandler::GetManufacturerLabel(unsigned short)+0x8>
 800d8ce:	1a52      	subs	r2, r2, r1
 800d8d0:	2a20      	cmp	r2, #32
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	4904      	ldr	r1, [pc, #16]	@ (800d8e8 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 800d8d6:	bf28      	it	cs
 800d8d8:	2220      	movcs	r2, #32
 800d8da:	f7ff fec2 	bl	800d662 <RDMHandler::HandleString(char const*, unsigned long)>
 800d8de:	4620      	mov	r0, r4
 800d8e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8e4:	f7ff bf14 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d8e8:	0801ec7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, sl, fp, sp, lr, pc}

0800d8ec <RDMHandler::RespondMessageNack(unsigned short)>:
 800d8ec:	460a      	mov	r2, r1
 800d8ee:	2102      	movs	r1, #2
 800d8f0:	f7ff bec4 	b.w	800d67c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800d8f4 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	6843      	ldr	r3, [r0, #4]
 800d8f8:	7d9a      	ldrb	r2, [r3, #22]
 800d8fa:	2a01      	cmp	r2, #1
 800d8fc:	4604      	mov	r4, r0
 800d8fe:	d004      	beq.n	800d90a <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 800d900:	2101      	movs	r1, #1
 800d902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d906:	f7ff bff1 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800d90a:	7ddb      	ldrb	r3, [r3, #23]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d003      	beq.n	800d918 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800d910:	2bff      	cmp	r3, #255	@ 0xff
 800d912:	d001      	beq.n	800d918 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800d914:	2106      	movs	r1, #6
 800d916:	e7f4      	b.n	800d902 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800d918:	68a2      	ldr	r2, [r4, #8]
 800d91a:	2100      	movs	r1, #0
 800d91c:	2bff      	cmp	r3, #255	@ 0xff
 800d91e:	75d1      	strb	r1, [r2, #23]
 800d920:	d102      	bne.n	800d928 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 800d922:	2104      	movs	r1, #4
 800d924:	4620      	mov	r0, r4
 800d926:	e7ec      	b.n	800d902 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800d928:	4b03      	ldr	r3, [pc, #12]	@ (800d938 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 800d92a:	6818      	ldr	r0, [r3, #0]
 800d92c:	f00a fac0 	bl	8017eb0 <Hardware::Reboot()>
 800d930:	2800      	cmp	r0, #0
 800d932:	d0f6      	beq.n	800d922 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 800d934:	bd10      	pop	{r4, pc}
 800d936:	bf00      	nop
 800d938:	2000e3d0 	ldrdcs	lr, [r0], -r0

0800d93c <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	6843      	ldr	r3, [r0, #4]
 800d940:	7d9a      	ldrb	r2, [r3, #22]
 800d942:	2a01      	cmp	r2, #1
 800d944:	4604      	mov	r4, r0
 800d946:	460d      	mov	r5, r1
 800d948:	d004      	beq.n	800d954 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 800d94a:	2101      	movs	r1, #1
 800d94c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d950:	f7ff bfcc 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800d954:	7ddb      	ldrb	r3, [r3, #23]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d901      	bls.n	800d95e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800d95a:	2106      	movs	r1, #6
 800d95c:	e7f6      	b.n	800d94c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 800d95e:	4912      	ldr	r1, [pc, #72]	@ (800d9a8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 800d960:	4f12      	ldr	r7, [pc, #72]	@ (800d9ac <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 800d962:	680e      	ldr	r6, [r1, #0]
 800d964:	4912      	ldr	r1, [pc, #72]	@ (800d9b0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 800d966:	6808      	ldr	r0, [r1, #0]
 800d968:	4912      	ldr	r1, [pc, #72]	@ (800d9b4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800d96a:	b98b      	cbnz	r3, 800d990 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x54>
 800d96c:	700b      	strb	r3, [r1, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	2102      	movs	r1, #2
 800d972:	f00a f89d 	bl	8017ab0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800d976:	7839      	ldrb	r1, [r7, #0]
 800d978:	b111      	cbz	r1, 800d980 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800d97a:	4630      	mov	r0, r6
 800d97c:	f000 f9a7 	bl	800dcce <RDMIdentify::Off(rdm::identify::Mode)>
 800d980:	b98d      	cbnz	r5, 800d9a6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6a>
 800d982:	68a3      	ldr	r3, [r4, #8]
 800d984:	75dd      	strb	r5, [r3, #23]
 800d986:	4620      	mov	r0, r4
 800d988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d98c:	f7ff bec0 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d990:	700a      	strb	r2, [r1, #0]
 800d992:	2104      	movs	r1, #4
 800d994:	f00a f88c 	bl	8017ab0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800d998:	7839      	ldrb	r1, [r7, #0]
 800d99a:	2900      	cmp	r1, #0
 800d99c:	d0f0      	beq.n	800d980 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f000 f994 	bl	800dccc <RDMIdentify::On(rdm::identify::Mode)>
 800d9a4:	e7ec      	b.n	800d980 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800d9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9a8:	2000d2e0 	andcs	sp, r0, r0, ror #5
 800d9ac:	2000d2e4 	andcs	sp, r0, r4, ror #5
 800d9b0:	2000e3d0 	ldrdcs	lr, [r0], -r0
 800d9b4:	2000d2e5 	andcs	sp, r0, r5, ror #5

0800d9b8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	6843      	ldr	r3, [r0, #4]
 800d9bc:	7d9b      	ldrb	r3, [r3, #22]
 800d9be:	4604      	mov	r4, r0
 800d9c0:	460d      	mov	r5, r1
 800d9c2:	b123      	cbz	r3, 800d9ce <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 800d9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9c8:	2101      	movs	r1, #1
 800d9ca:	f7ff bf8f 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800d9ce:	4b06      	ldr	r3, [pc, #24]	@ (800d9e8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 800d9d0:	6818      	ldr	r0, [r3, #0]
 800d9d2:	f7ff fda9 	bl	800d528 <RDMDeviceResponder::SetFactoryDefaults()>
 800d9d6:	b935      	cbnz	r5, 800d9e6 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 800d9d8:	68a3      	ldr	r3, [r4, #8]
 800d9da:	75dd      	strb	r5, [r3, #23]
 800d9dc:	4620      	mov	r0, r4
 800d9de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9e2:	f7ff be95 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800d9e6:	bd38      	pop	{r3, r4, r5, pc}
 800d9e8:	2000d2dc 	ldrdcs	sp, [r0], -ip

0800d9ec <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 800d9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9ee:	6843      	ldr	r3, [r0, #4]
 800d9f0:	460d      	mov	r5, r1
 800d9f2:	7d99      	ldrb	r1, [r3, #22]
 800d9f4:	2920      	cmp	r1, #32
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	d905      	bls.n	800da06 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1a>
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	b003      	add	sp, #12
 800d9fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800da02:	f7ff bf73 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800da06:	4817      	ldr	r0, [pc, #92]	@ (800da64 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x78>)
 800da08:	6800      	ldr	r0, [r0, #0]
 800da0a:	b302      	cbz	r2, 800da4e <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x62>
 800da0c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800da10:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 800da12:	3a01      	subs	r2, #1
 800da14:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800da18:	b1b9      	cbz	r1, 800da4a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x5e>
 800da1a:	3316      	adds	r3, #22
 800da1c:	f100 0615 	add.w	r6, r0, #21
 800da20:	2200      	movs	r2, #0
 800da22:	3201      	adds	r2, #1
 800da24:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800da28:	f806 7f01 	strb.w	r7, [r6, #1]!
 800da2c:	2a20      	cmp	r2, #32
 800da2e:	d001      	beq.n	800da34 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x48>
 800da30:	4291      	cmp	r1, r2
 800da32:	d8f6      	bhi.n	800da22 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x36>
 800da34:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
 800da38:	b995      	cbnz	r5, 800da60 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x74>
 800da3a:	68a3      	ldr	r3, [r4, #8]
 800da3c:	4620      	mov	r0, r4
 800da3e:	75dd      	strb	r5, [r3, #23]
 800da40:	b003      	add	sp, #12
 800da42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800da46:	f7ff be63 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800da4a:	460a      	mov	r2, r1
 800da4c:	e7f2      	b.n	800da34 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x48>
 800da4e:	3317      	adds	r3, #23
 800da50:	f88d 1004 	strb.w	r1, [sp, #4]
 800da54:	3004      	adds	r0, #4
 800da56:	4669      	mov	r1, sp
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	f7ff fd2d 	bl	800d4b8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800da5e:	e7eb      	b.n	800da38 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4c>
 800da60:	b003      	add	sp, #12
 800da62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da64:	2000d2dc 	ldrdcs	sp, [r0], -ip

0800da68 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 800da68:	b4f0      	push	{r4, r5, r6, r7}
 800da6a:	4615      	mov	r5, r2
 800da6c:	f005 04ef 	and.w	r4, r5, #239	@ 0xef
 800da70:	2c20      	cmp	r4, #32
 800da72:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800da76:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800da7a:	d003      	beq.n	800da84 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800da7c:	2105      	movs	r1, #5
 800da7e:	bcf0      	pop	{r4, r5, r6, r7}
 800da80:	f7ff bf34 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800da84:	4c28      	ldr	r4, [pc, #160]	@ (800db28 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>)
 800da86:	6824      	ldr	r4, [r4, #0]
 800da88:	88a4      	ldrh	r4, [r4, #4]
 800da8a:	4294      	cmp	r4, r2
 800da8c:	d205      	bcs.n	800da9a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x32>
 800da8e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800da92:	42a2      	cmp	r2, r4
 800da94:	d001      	beq.n	800da9a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x32>
 800da96:	2109      	movs	r1, #9
 800da98:	e7f1      	b.n	800da7e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800da9a:	4c24      	ldr	r4, [pc, #144]	@ (800db2c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc4>)
 800da9c:	4f24      	ldr	r7, [pc, #144]	@ (800db30 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc8>)
 800da9e:	f8b4 c000 	ldrh.w	ip, [r4]
 800daa2:	459c      	cmp	ip, r3
 800daa4:	d108      	bne.n	800dab8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x50>
 800daa6:	f890 c000 	ldrb.w	ip, [r0]
 800daaa:	7da7      	ldrb	r7, [r4, #22]
 800daac:	7de3      	ldrb	r3, [r4, #23]
 800daae:	f1bc 0f00 	cmp.w	ip, #0
 800dab2:	d106      	bne.n	800dac2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5a>
 800dab4:	b93b      	cbnz	r3, 800dac6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800dab6:	e002      	b.n	800dabe <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x56>
 800dab8:	3418      	adds	r4, #24
 800daba:	42bc      	cmp	r4, r7
 800dabc:	d1ef      	bne.n	800da9e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 800dabe:	2100      	movs	r1, #0
 800dac0:	e7dd      	b.n	800da7e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800dac2:	2f00      	cmp	r7, #0
 800dac4:	d0fb      	beq.n	800dabe <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x56>
 800dac6:	2d20      	cmp	r5, #32
 800dac8:	d11b      	bne.n	800db02 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x9a>
 800daca:	bb59      	cbnz	r1, 800db24 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xbc>
 800dacc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d0e0      	beq.n	800da96 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2e>
 800dad4:	6863      	ldr	r3, [r4, #4]
 800dad6:	b913      	cbnz	r3, 800dade <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x76>
 800dad8:	68a1      	ldr	r1, [r4, #8]
 800dada:	07cd      	lsls	r5, r1, #31
 800dadc:	d5ce      	bpl.n	800da7c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x14>
 800dade:	7d21      	ldrb	r1, [r4, #20]
 800dae0:	42b1      	cmp	r1, r6
 800dae2:	d001      	beq.n	800dae8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x80>
 800dae4:	2101      	movs	r1, #1
 800dae6:	e7ca      	b.n	800da7e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800dae8:	68a1      	ldr	r1, [r4, #8]
 800daea:	104d      	asrs	r5, r1, #1
 800daec:	eb00 0461 	add.w	r4, r0, r1, asr #1
 800daf0:	07c9      	lsls	r1, r1, #31
 800daf2:	bf48      	it	mi
 800daf4:	5941      	ldrmi	r1, [r0, r5]
 800daf6:	4620      	mov	r0, r4
 800daf8:	bf48      	it	mi
 800dafa:	58cb      	ldrmi	r3, [r1, r3]
 800dafc:	bcf0      	pop	{r4, r5, r6, r7}
 800dafe:	4611      	mov	r1, r2
 800db00:	4718      	bx	r3
 800db02:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800db06:	f003 0401 	and.w	r4, r3, #1
 800db0a:	b90d      	cbnz	r5, 800db10 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xa8>
 800db0c:	2c00      	cmp	r4, #0
 800db0e:	d0b5      	beq.n	800da7c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x14>
 800db10:	105e      	asrs	r6, r3, #1
 800db12:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800db16:	b10c      	cbz	r4, 800db1c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb4>
 800db18:	5980      	ldr	r0, [r0, r6]
 800db1a:	5945      	ldr	r5, [r0, r5]
 800db1c:	4618      	mov	r0, r3
 800db1e:	462b      	mov	r3, r5
 800db20:	bcf0      	pop	{r4, r5, r6, r7}
 800db22:	4718      	bx	r3
 800db24:	bcf0      	pop	{r4, r5, r6, r7}
 800db26:	4770      	bx	lr
 800db28:	2000d2ec 	andcs	sp, r0, ip, ror #5
 800db2c:	0801ea80 	stmdaeq	r1, {r7, r9, fp, sp, lr, pc}
 800db30:	0801ec60 	stmdaeq	r1, {r5, r6, sl, fp, sp, lr, pc}

0800db34 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 800db34:	23ff      	movs	r3, #255	@ 0xff
 800db36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3a:	7013      	strb	r3, [r2, #0]
 800db3c:	7bcb      	ldrb	r3, [r1, #15]
 800db3e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800db42:	4607      	mov	r7, r0
 800db44:	468a      	mov	sl, r1
 800db46:	4614      	mov	r4, r2
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d079      	beq.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800db4c:	7c0b      	ldrb	r3, [r1, #16]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d176      	bne.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800db52:	4b58      	ldr	r3, [pc, #352]	@ (800dcb4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x180>)
 800db54:	1c8e      	adds	r6, r1, #2
 800db56:	2206      	movs	r2, #6
 800db58:	4957      	ldr	r1, [pc, #348]	@ (800dcb8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x184>)
 800db5a:	f8d3 8000 	ldr.w	r8, [r3]
 800db5e:	4630      	mov	r0, r6
 800db60:	f7fe ff8e 	bl	800ca80 <memcmp>
 800db64:	f108 094a 	add.w	r9, r8, #74	@ 0x4a
 800db68:	4605      	mov	r5, r0
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d06b      	beq.n	800dc46 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x112>
 800db6e:	4630      	mov	r0, r6
 800db70:	2202      	movs	r2, #2
 800db72:	4649      	mov	r1, r9
 800db74:	f7fe ff84 	bl	800ca80 <memcmp>
 800db78:	4606      	mov	r6, r0
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d160      	bne.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800db7e:	f10a 0b04 	add.w	fp, sl, #4
 800db82:	494d      	ldr	r1, [pc, #308]	@ (800dcb8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x184>)
 800db84:	2204      	movs	r2, #4
 800db86:	4658      	mov	r0, fp
 800db88:	f7fe ff7a 	bl	800ca80 <memcmp>
 800db8c:	4605      	mov	r5, r0
 800db8e:	2800      	cmp	r0, #0
 800db90:	d059      	beq.n	800dc46 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x112>
 800db92:	f108 014c 	add.w	r1, r8, #76	@ 0x4c
 800db96:	2204      	movs	r2, #4
 800db98:	4658      	mov	r0, fp
 800db9a:	f7fe ff71 	bl	800ca80 <memcmp>
 800db9e:	fab0 f580 	clz	r5, r0
 800dba2:	096d      	lsrs	r5, r5, #5
 800dba4:	4631      	mov	r1, r6
 800dba6:	f89a 2013 	ldrb.w	r2, [sl, #19]
 800dbaa:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 800dbae:	b90d      	cbnz	r5, 800dbb4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x80>
 800dbb0:	2900      	cmp	r1, #0
 800dbb2:	d045      	beq.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dbb4:	2a10      	cmp	r2, #16
 800dbb6:	d16f      	bne.n	800dc98 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x164>
 800dbb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbbc:	d145      	bne.n	800dc4a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x116>
 800dbbe:	787b      	ldrb	r3, [r7, #1]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d13d      	bne.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dbc4:	2206      	movs	r2, #6
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	f10a 0017 	add.w	r0, sl, #23
 800dbcc:	f7fe ff58 	bl	800ca80 <memcmp>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	dc35      	bgt.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dbd4:	2206      	movs	r2, #6
 800dbd6:	f10a 011d 	add.w	r1, sl, #29
 800dbda:	4648      	mov	r0, r9
 800dbdc:	f7fe ff50 	bl	800ca80 <memcmp>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	dc2d      	bgt.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dbe4:	23fe      	movs	r3, #254	@ 0xfe
 800dbe6:	7023      	strb	r3, [r4, #0]
 800dbe8:	7063      	strb	r3, [r4, #1]
 800dbea:	70a3      	strb	r3, [r4, #2]
 800dbec:	70e3      	strb	r3, [r4, #3]
 800dbee:	7123      	strb	r3, [r4, #4]
 800dbf0:	7163      	strb	r3, [r4, #5]
 800dbf2:	71a3      	strb	r3, [r4, #6]
 800dbf4:	23aa      	movs	r3, #170	@ 0xaa
 800dbf6:	71e3      	strb	r3, [r4, #7]
 800dbf8:	f108 0249 	add.w	r2, r8, #73	@ 0x49
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	f108 084f 	add.w	r8, r8, #79	@ 0x4f
 800dc02:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 800dc06:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dc0a:	f060 0055 	orn	r0, r0, #85	@ 0x55
 800dc0e:	7208      	strb	r0, [r1, #8]
 800dc10:	7810      	ldrb	r0, [r2, #0]
 800dc12:	f040 0055 	orr.w	r0, r0, #85	@ 0x55
 800dc16:	7248      	strb	r0, [r1, #9]
 800dc18:	7810      	ldrb	r0, [r2, #0]
 800dc1a:	4542      	cmp	r2, r8
 800dc1c:	4403      	add	r3, r0
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	f101 0102 	add.w	r1, r1, #2
 800dc24:	d1ef      	bne.n	800dc06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xd2>
 800dc26:	0a1a      	lsrs	r2, r3, #8
 800dc28:	f062 0155 	orn	r1, r2, #85	@ 0x55
 800dc2c:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 800dc30:	7562      	strb	r2, [r4, #21]
 800dc32:	f063 0255 	orn	r2, r3, #85	@ 0x55
 800dc36:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800dc3a:	7521      	strb	r1, [r4, #20]
 800dc3c:	75a2      	strb	r2, [r4, #22]
 800dc3e:	75e3      	strb	r3, [r4, #23]
 800dc40:	b003      	add	sp, #12
 800dc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc46:	2101      	movs	r1, #1
 800dc48:	e7ad      	b.n	800dba6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 800dc4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc4e:	d11a      	bne.n	800dc86 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x152>
 800dc50:	f89a 3016 	ldrb.w	r3, [sl, #22]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1f3      	bne.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dc58:	707b      	strb	r3, [r7, #1]
 800dc5a:	2900      	cmp	r1, #0
 800dc5c:	d1f0      	bne.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dc5e:	2d00      	cmp	r5, #0
 800dc60:	d0ee      	beq.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dc62:	2302      	movs	r3, #2
 800dc64:	75e3      	strb	r3, [r4, #23]
 800dc66:	4b15      	ldr	r3, [pc, #84]	@ (800dcbc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x188>)
 800dc68:	7661      	strb	r1, [r4, #25]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	7621      	strb	r1, [r4, #24]
 800dc6e:	889b      	ldrh	r3, [r3, #4]
 800dc70:	3b00      	subs	r3, #0
 800dc72:	bf18      	it	ne
 800dc74:	2301      	movne	r3, #1
 800dc76:	005b      	lsls	r3, r3, #1
 800dc78:	4638      	mov	r0, r7
 800dc7a:	7663      	strb	r3, [r4, #25]
 800dc7c:	b003      	add	sp, #12
 800dc7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc82:	f7ff bd45 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800dc86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc8a:	d1d9      	bne.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dc8c:	f89a 3016 	ldrb.w	r3, [sl, #22]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1d5      	bne.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dc94:	2301      	movs	r3, #1
 800dc96:	e7df      	b.n	800dc58 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x124>
 800dc98:	f8ba 0011 	ldrh.w	r0, [sl, #17]
 800dc9c:	ba40      	rev16	r0, r0
 800dc9e:	b280      	uxth	r0, r0
 800dca0:	9001      	str	r0, [sp, #4]
 800dca2:	f89a 0016 	ldrb.w	r0, [sl, #22]
 800dca6:	9000      	str	r0, [sp, #0]
 800dca8:	ba5b      	rev16	r3, r3
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	4638      	mov	r0, r7
 800dcae:	f7ff fedb 	bl	800da68 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800dcb2:	e7c5      	b.n	800dc40 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800dcb4:	2000d2dc 	ldrdcs	sp, [r0], -ip
 800dcb8:	0801ec60 	stmdaeq	r1, {r5, r6, sl, fp, sp, lr, pc}
 800dcbc:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800dcc0 <RDMIdentify::RDMIdentify()>:
 800dcc0:	4b01      	ldr	r3, [pc, #4]	@ (800dcc8 <RDMIdentify::RDMIdentify()+0x8>)
 800dcc2:	6018      	str	r0, [r3, #0]
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	2000d2e0 	andcs	sp, r0, r0, ror #5

0800dccc <RDMIdentify::On(rdm::identify::Mode)>:
 800dccc:	4770      	bx	lr

0800dcce <RDMIdentify::Off(rdm::identify::Mode)>:
 800dcce:	4770      	bx	lr

0800dcd0 <memcpy.isra.0>:
 800dcd0:	440a      	add	r2, r1
 800dcd2:	4291      	cmp	r1, r2
 800dcd4:	d100      	bne.n	800dcd8 <memcpy.isra.0+0x8>
 800dcd6:	4770      	bx	lr
 800dcd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcdc:	f800 3b01 	strb.w	r3, [r0], #1
 800dce0:	e7f7      	b.n	800dcd2 <memcpy.isra.0+0x2>
	...

0800dce4 <LLRPDevice::HandleRequestMessage()>:
 800dce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dce8:	4e43      	ldr	r6, [pc, #268]	@ (800ddf8 <LLRPDevice::HandleRequestMessage()+0x114>)
 800dcea:	4f44      	ldr	r7, [pc, #272]	@ (800ddfc <LLRPDevice::HandleRequestMessage()+0x118>)
 800dcec:	6835      	ldr	r5, [r6, #0]
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	f895 4042 	ldrb.w	r4, [r5, #66]	@ 0x42
 800dcf4:	f8b5 3043 	ldrh.w	r3, [r5, #67]	@ 0x43
 800dcf8:	0424      	lsls	r4, r4, #16
 800dcfa:	ba5b      	rev16	r3, r3
 800dcfc:	b089      	sub	sp, #36	@ 0x24
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 800dd04:	431c      	orrs	r4, r3
 800dd06:	2206      	movs	r2, #6
 800dd08:	314a      	adds	r1, #74	@ 0x4a
 800dd0a:	a802      	add	r0, sp, #8
 800dd0c:	f7ff ffe0 	bl	800dcd0 <memcpy.isra.0>
 800dd10:	2c12      	cmp	r4, #18
 800dd12:	d909      	bls.n	800dd28 <LLRPDevice::HandleRequestMessage()+0x44>
 800dd14:	f105 0954 	add.w	r9, r5, #84	@ 0x54
 800dd18:	f04f 0800 	mov.w	r8, #0
 800dd1c:	3c12      	subs	r4, #18
 800dd1e:	2306      	movs	r3, #6
 800dd20:	fbb4 f4f3 	udiv	r4, r4, r3
 800dd24:	45a0      	cmp	r8, r4
 800dd26:	d15b      	bne.n	800dde0 <LLRPDevice::HandleRequestMessage()+0xfc>
 800dd28:	2206      	movs	r2, #6
 800dd2a:	a902      	add	r1, sp, #8
 800dd2c:	f105 0046 	add.w	r0, r5, #70	@ 0x46
 800dd30:	f7fe fea6 	bl	800ca80 <memcmp>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	dc50      	bgt.n	800ddda <LLRPDevice::HandleRequestMessage()+0xf6>
 800dd38:	2206      	movs	r2, #6
 800dd3a:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
 800dd3e:	a802      	add	r0, sp, #8
 800dd40:	f7fe fe9e 	bl	800ca80 <memcmp>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	dc48      	bgt.n	800ddda <LLRPDevice::HandleRequestMessage()+0xf6>
 800dd48:	6834      	ldr	r4, [r6, #0]
 800dd4a:	2210      	movs	r2, #16
 800dd4c:	f104 0517 	add.w	r5, r4, #23
 800dd50:	4629      	mov	r1, r5
 800dd52:	eb0d 0002 	add.w	r0, sp, r2
 800dd56:	f7ff ffbb 	bl	800dcd0 <memcpy.isra.0>
 800dd5a:	2343      	movs	r3, #67	@ 0x43
 800dd5c:	74a3      	strb	r3, [r4, #18]
 800dd5e:	4b28      	ldr	r3, [pc, #160]	@ (800de00 <LLRPDevice::HandleRequestMessage()+0x11c>)
 800dd60:	4628      	mov	r0, r5
 800dd62:	6819      	ldr	r1, [r3, #0]
 800dd64:	4d27      	ldr	r5, [pc, #156]	@ (800de04 <LLRPDevice::HandleRequestMessage()+0x120>)
 800dd66:	2210      	movs	r2, #16
 800dd68:	f7ff ffb2 	bl	800dcd0 <memcpy.isra.0>
 800dd6c:	232c      	movs	r3, #44	@ 0x2c
 800dd6e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800dd72:	2300      	movs	r3, #0
 800dd74:	2210      	movs	r2, #16
 800dd76:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 800dd7a:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
 800dd7e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800dd82:	2302      	movs	r3, #2
 800dd84:	eb0d 0102 	add.w	r1, sp, r2
 800dd88:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800dd8c:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 800dd90:	f7ff ff9e 	bl	800dcd0 <memcpy.isra.0>
 800dd94:	6839      	ldr	r1, [r7, #0]
 800dd96:	2311      	movs	r3, #17
 800dd98:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dda2:	2206      	movs	r2, #6
 800dda4:	314a      	adds	r1, #74	@ 0x4a
 800dda6:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 800ddaa:	f7ff ff91 	bl	800dcd0 <memcpy.isra.0>
 800ddae:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800ddb2:	2206      	movs	r2, #6
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	f7ff ff8b 	bl	800dcd0 <memcpy.isra.0>
 800ddba:	23ff      	movs	r3, #255	@ 0xff
 800ddbc:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
 800ddc0:	4b11      	ldr	r3, [pc, #68]	@ (800de08 <LLRPDevice::HandleRequestMessage()+0x124>)
 800ddc2:	6818      	ldr	r0, [r3, #0]
 800ddc4:	f855 3c14 	ldr.w	r3, [r5, #-20]
 800ddc8:	b13b      	cbz	r3, 800ddda <LLRPDevice::HandleRequestMessage()+0xf6>
 800ddca:	f241 53c1 	movw	r3, #5569	@ 0x15c1
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	2253      	movs	r2, #83	@ 0x53
 800ddd2:	4b0e      	ldr	r3, [pc, #56]	@ (800de0c <LLRPDevice::HandleRequestMessage()+0x128>)
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	f007 f9e1 	bl	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800ddda:	b009      	add	sp, #36	@ 0x24
 800dddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dde0:	2206      	movs	r2, #6
 800dde2:	a902      	add	r1, sp, #8
 800dde4:	4648      	mov	r0, r9
 800dde6:	f7fe fe4b 	bl	800ca80 <memcmp>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d0f5      	beq.n	800ddda <LLRPDevice::HandleRequestMessage()+0xf6>
 800ddee:	f109 0906 	add.w	r9, r9, #6
 800ddf2:	f108 0801 	add.w	r8, r8, #1
 800ddf6:	e795      	b.n	800dd24 <LLRPDevice::HandleRequestMessage()+0x40>
 800ddf8:	2000d3f4 	strdcs	sp, [r0], -r4
 800ddfc:	2000d2dc 	ldrdcs	sp, [r0], -ip
 800de00:	2000e3d0 	ldrdcs	lr, [r0], -r0
 800de04:	2000e234 	andcs	lr, r0, r4, lsr r2
 800de08:	2000d3fc 	strdcs	sp, [r0], -ip
 800de0c:	86faffef 	ldrbthi	pc, [sl], pc, ror #31	@ <UNPREDICTABLE>

0800de10 <LLRPDevice::HandleRdmCommand()>:
 800de10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de14:	4b21      	ldr	r3, [pc, #132]	@ (800de9c <LLRPDevice::HandleRdmCommand()+0x8c>)
 800de16:	4f22      	ldr	r7, [pc, #136]	@ (800dea0 <LLRPDevice::HandleRdmCommand()+0x90>)
 800de18:	681c      	ldr	r4, [r3, #0]
 800de1a:	f104 0946 	add.w	r9, r4, #70	@ 0x46
 800de1e:	b087      	sub	sp, #28
 800de20:	463a      	mov	r2, r7
 800de22:	4649      	mov	r1, r9
 800de24:	f7ff fe86 	bl	800db34 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 800de28:	783b      	ldrb	r3, [r7, #0]
 800de2a:	2bcc      	cmp	r3, #204	@ 0xcc
 800de2c:	d132      	bne.n	800de94 <LLRPDevice::HandleRdmCommand()+0x84>
 800de2e:	f104 0817 	add.w	r8, r4, #23
 800de32:	2210      	movs	r2, #16
 800de34:	4641      	mov	r1, r8
 800de36:	a802      	add	r0, sp, #8
 800de38:	f7ff ff4a 	bl	800dcd0 <memcpy.isra.0>
 800de3c:	78be      	ldrb	r6, [r7, #2]
 800de3e:	4b19      	ldr	r3, [pc, #100]	@ (800dea4 <LLRPDevice::HandleRdmCommand()+0x94>)
 800de40:	f106 0537 	add.w	r5, r6, #55	@ 0x37
 800de44:	b2ed      	uxtb	r5, r5
 800de46:	6819      	ldr	r1, [r3, #0]
 800de48:	74a5      	strb	r5, [r4, #18]
 800de4a:	2210      	movs	r2, #16
 800de4c:	4640      	mov	r0, r8
 800de4e:	f7ff ff3f 	bl	800dcd0 <memcpy.isra.0>
 800de52:	f106 0320 	add.w	r3, r6, #32
 800de56:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800de5a:	2210      	movs	r2, #16
 800de5c:	a902      	add	r1, sp, #8
 800de5e:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 800de62:	f7ff ff35 	bl	800dcd0 <memcpy.isra.0>
 800de66:	1d73      	adds	r3, r6, #5
 800de68:	1c72      	adds	r2, r6, #1
 800de6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800de6e:	b2d2      	uxtb	r2, r2
 800de70:	4648      	mov	r0, r9
 800de72:	1c79      	adds	r1, r7, #1
 800de74:	f7ff ff2c 	bl	800dcd0 <memcpy.isra.0>
 800de78:	4b0b      	ldr	r3, [pc, #44]	@ (800dea8 <LLRPDevice::HandleRdmCommand()+0x98>)
 800de7a:	6818      	ldr	r0, [r3, #0]
 800de7c:	4b0b      	ldr	r3, [pc, #44]	@ (800deac <LLRPDevice::HandleRdmCommand()+0x9c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f105 0210 	add.w	r2, r5, #16
 800de84:	b133      	cbz	r3, 800de94 <LLRPDevice::HandleRdmCommand()+0x84>
 800de86:	f241 53c1 	movw	r3, #5569	@ 0x15c1
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	4621      	mov	r1, r4
 800de8e:	4b08      	ldr	r3, [pc, #32]	@ (800deb0 <LLRPDevice::HandleRdmCommand()+0xa0>)
 800de90:	f007 f984 	bl	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800de94:	b007      	add	sp, #28
 800de96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de9a:	bf00      	nop
 800de9c:	2000d3f4 	strdcs	sp, [r0], -r4
 800dea0:	2000d2f0 	strdcs	sp, [r0], -r0
 800dea4:	2000e3d0 	ldrdcs	lr, [r0], -r0
 800dea8:	2000d3fc 	strdcs	sp, [r0], -ip
 800deac:	2000e220 	andcs	lr, r0, r0, lsr #4
 800deb0:	86faffef 	ldrbthi	pc, [sl], pc, ror #31	@ <UNPREDICTABLE>

0800deb4 <LLRPDevice::DumpCommon()>:
 800deb4:	4770      	bx	lr

0800deb6 <memcpy.isra.0>:
 800deb6:	440a      	add	r2, r1
 800deb8:	4291      	cmp	r1, r2
 800deba:	d100      	bne.n	800debe <memcpy.isra.0+0x8>
 800debc:	4770      	bx	lr
 800debe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dec2:	f800 3b01 	strb.w	r3, [r0], #1
 800dec6:	e7f7      	b.n	800deb8 <memcpy.isra.0+0x2>

0800dec8 <RDMHandler::GetInterfaceList(unsigned short)>:
 800dec8:	6883      	ldr	r3, [r0, #8]
 800deca:	2200      	movs	r2, #0
 800decc:	761a      	strb	r2, [r3, #24]
 800dece:	765a      	strb	r2, [r3, #25]
 800ded0:	769a      	strb	r2, [r3, #26]
 800ded2:	2101      	movs	r1, #1
 800ded4:	771a      	strb	r2, [r3, #28]
 800ded6:	2206      	movs	r2, #6
 800ded8:	76d9      	strb	r1, [r3, #27]
 800deda:	775a      	strb	r2, [r3, #29]
 800dedc:	75da      	strb	r2, [r3, #23]
 800dede:	f7ff bc17 	b.w	800d710 <RDMHandler::RespondMessageAck()>
	...

0800dee4 <RDMHandler::GetInterfaceName(unsigned short)>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800deea:	2204      	movs	r2, #4
 800deec:	4604      	mov	r4, r0
 800deee:	3117      	adds	r1, #23
 800def0:	f105 0018 	add.w	r0, r5, #24
 800def4:	f7ff ffdf 	bl	800deb6 <memcpy.isra.0>
 800def8:	4a0d      	ldr	r2, [pc, #52]	@ (800df30 <RDMHandler::GetInterfaceName(unsigned short)+0x4c>)
 800defa:	6813      	ldr	r3, [r2, #0]
 800defc:	f105 001c 	add.w	r0, r5, #28
 800df00:	3306      	adds	r3, #6
 800df02:	f813 1b01 	ldrb.w	r1, [r3], #1
 800df06:	f800 1b01 	strb.w	r1, [r0], #1
 800df0a:	2900      	cmp	r1, #0
 800df0c:	d1f9      	bne.n	800df02 <RDMHandler::GetInterfaceName(unsigned short)+0x1e>
 800df0e:	6812      	ldr	r2, [r2, #0]
 800df10:	3206      	adds	r2, #6
 800df12:	4611      	mov	r1, r2
 800df14:	460b      	mov	r3, r1
 800df16:	3101      	adds	r1, #1
 800df18:	7818      	ldrb	r0, [r3, #0]
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d1fa      	bne.n	800df14 <RDMHandler::GetInterfaceName(unsigned short)+0x30>
 800df1e:	1a9b      	subs	r3, r3, r2
 800df20:	3304      	adds	r3, #4
 800df22:	75eb      	strb	r3, [r5, #23]
 800df24:	4620      	mov	r0, r4
 800df26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df2a:	f7ff bbf1 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800df2e:	bf00      	nop
 800df30:	2000e200 	andcs	lr, r0, r0, lsl #4

0800df34 <RDMHandler::GetHardwareAddress(unsigned short)>:
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800df3a:	4604      	mov	r4, r0
 800df3c:	2204      	movs	r2, #4
 800df3e:	f105 0018 	add.w	r0, r5, #24
 800df42:	3117      	adds	r1, #23
 800df44:	f7ff ffb7 	bl	800deb6 <memcpy.isra.0>
 800df48:	f105 001c 	add.w	r0, r5, #28
 800df4c:	4905      	ldr	r1, [pc, #20]	@ (800df64 <RDMHandler::GetHardwareAddress(unsigned short)+0x30>)
 800df4e:	2206      	movs	r2, #6
 800df50:	f7ff ffb1 	bl	800deb6 <memcpy.isra.0>
 800df54:	230a      	movs	r3, #10
 800df56:	75eb      	strb	r3, [r5, #23]
 800df58:	4620      	mov	r0, r4
 800df5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df5e:	f7ff bbd7 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800df62:	bf00      	nop
 800df64:	2000e234 	andcs	lr, r0, r4, lsr r2

0800df68 <RDMHandler::GetDHCPMode(unsigned short)>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800df6e:	4604      	mov	r4, r0
 800df70:	2204      	movs	r2, #4
 800df72:	f105 0018 	add.w	r0, r5, #24
 800df76:	3117      	adds	r1, #23
 800df78:	f7ff ff9d 	bl	800deb6 <memcpy.isra.0>
 800df7c:	4b05      	ldr	r3, [pc, #20]	@ (800df94 <RDMHandler::GetDHCPMode(unsigned short)+0x2c>)
 800df7e:	7e9b      	ldrb	r3, [r3, #26]
 800df80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800df84:	772b      	strb	r3, [r5, #28]
 800df86:	2305      	movs	r3, #5
 800df88:	75eb      	strb	r3, [r5, #23]
 800df8a:	4620      	mov	r0, r4
 800df8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df90:	f7ff bbbe 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800df94:	2000e220 	andcs	lr, r0, r0, lsr #4

0800df98 <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 800df98:	4b0b      	ldr	r3, [pc, #44]	@ (800dfc8 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x30>)
 800df9a:	6842      	ldr	r2, [r0, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	7919      	ldrb	r1, [r3, #4]
 800dfa0:	b911      	cbnz	r1, 800dfa8 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 800dfa2:	210b      	movs	r1, #11
 800dfa4:	f7ff bca2 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800dfa8:	7ed2      	ldrb	r2, [r2, #27]
 800dfaa:	2a01      	cmp	r2, #1
 800dfac:	d809      	bhi.n	800dfc2 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 800dfae:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 800dfb2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800dfb6:	f042 0208 	orr.w	r2, r2, #8
 800dfba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800dfbe:	f7ff bba7 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800dfc2:	2106      	movs	r1, #6
 800dfc4:	e7ee      	b.n	800dfa4 <RDMHandler::SetDHCPMode(bool, unsigned short)+0xc>
 800dfc6:	bf00      	nop
 800dfc8:	2000e200 	andcs	lr, r0, r0, lsl #4

0800dfcc <RDMHandler::GetNameServers(unsigned short)>:
 800dfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfce:	6843      	ldr	r3, [r0, #4]
 800dfd0:	7ddb      	ldrb	r3, [r3, #23]
 800dfd2:	2b02      	cmp	r3, #2
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	d905      	bls.n	800dfe4 <RDMHandler::GetNameServers(unsigned short)+0x18>
 800dfd8:	2106      	movs	r1, #6
 800dfda:	b003      	add	sp, #12
 800dfdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfe0:	f7ff bc84 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800dfe4:	4a0b      	ldr	r2, [pc, #44]	@ (800e014 <RDMHandler::GetNameServers(unsigned short)+0x48>)
 800dfe6:	6885      	ldr	r5, [r0, #8]
 800dfe8:	6812      	ldr	r2, [r2, #0]
 800dfea:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800dfee:	f105 0019 	add.w	r0, r5, #25
 800dff2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dff6:	9201      	str	r2, [sp, #4]
 800dff8:	2204      	movs	r2, #4
 800dffa:	762b      	strb	r3, [r5, #24]
 800dffc:	eb0d 0102 	add.w	r1, sp, r2
 800e000:	f7ff ff59 	bl	800deb6 <memcpy.isra.0>
 800e004:	2305      	movs	r3, #5
 800e006:	4620      	mov	r0, r4
 800e008:	75eb      	strb	r3, [r5, #23]
 800e00a:	b003      	add	sp, #12
 800e00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e010:	f7ff bb7e 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e014:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e018 <RDMHandler::GetZeroconf(unsigned short)>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e01e:	4604      	mov	r4, r0
 800e020:	2204      	movs	r2, #4
 800e022:	3117      	adds	r1, #23
 800e024:	f105 0018 	add.w	r0, r5, #24
 800e028:	f7ff ff45 	bl	800deb6 <memcpy.isra.0>
 800e02c:	4b07      	ldr	r3, [pc, #28]	@ (800e04c <RDMHandler::GetZeroconf(unsigned short)+0x34>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	795b      	ldrb	r3, [r3, #5]
 800e032:	b11b      	cbz	r3, 800e03c <RDMHandler::GetZeroconf(unsigned short)+0x24>
 800e034:	4b06      	ldr	r3, [pc, #24]	@ (800e050 <RDMHandler::GetZeroconf(unsigned short)+0x38>)
 800e036:	7e9b      	ldrb	r3, [r3, #26]
 800e038:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e03c:	772b      	strb	r3, [r5, #28]
 800e03e:	2305      	movs	r3, #5
 800e040:	75eb      	strb	r3, [r5, #23]
 800e042:	4620      	mov	r0, r4
 800e044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e048:	f7ff bb62 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e04c:	2000e200 	andcs	lr, r0, r0, lsl #4
 800e050:	2000e220 	andcs	lr, r0, r0, lsr #4

0800e054 <RDMHandler::SetZeroconf(bool, unsigned short)>:
 800e054:	4b10      	ldr	r3, [pc, #64]	@ (800e098 <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 800e056:	6842      	ldr	r2, [r0, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	7959      	ldrb	r1, [r3, #5]
 800e05c:	b510      	push	{r4, lr}
 800e05e:	4604      	mov	r4, r0
 800e060:	b921      	cbnz	r1, 800e06c <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 800e062:	210b      	movs	r1, #11
 800e064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e068:	f7ff bc40 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800e06c:	7ed2      	ldrb	r2, [r2, #27]
 800e06e:	2a01      	cmp	r2, #1
 800e070:	d109      	bne.n	800e086 <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 800e072:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800e076:	f042 0210 	orr.w	r2, r2, #16
 800e07a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800e07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e082:	f7ff bb45 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e086:	b92a      	cbnz	r2, 800e094 <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 800e088:	4618      	mov	r0, r3
 800e08a:	4611      	mov	r1, r2
 800e08c:	f005 ff38 	bl	8013f00 <Network::SetQueuedStaticIp(unsigned long, unsigned long)>
 800e090:	4620      	mov	r0, r4
 800e092:	e7f4      	b.n	800e07e <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 800e094:	2106      	movs	r1, #6
 800e096:	e7e5      	b.n	800e064 <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 800e098:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e09c <RDMHandler::RenewDhcp(bool, unsigned short)>:
 800e09c:	b510      	push	{r4, lr}
 800e09e:	4b09      	ldr	r3, [pc, #36]	@ (800e0c4 <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 800e0a0:	7e9b      	ldrb	r3, [r3, #26]
 800e0a2:	079b      	lsls	r3, r3, #30
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	d404      	bmi.n	800e0b2 <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 800e0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0ac:	210b      	movs	r1, #11
 800e0ae:	f7ff bc1d 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800e0b2:	4b05      	ldr	r3, [pc, #20]	@ (800e0c8 <RDMHandler::RenewDhcp(bool, unsigned short)+0x2c>)
 800e0b4:	6818      	ldr	r0, [r3, #0]
 800e0b6:	f005 ff1c 	bl	8013ef2 <Network::EnableDhcp()>
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0c0:	f7ff bb26 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e0c4:	2000e220 	andcs	lr, r0, r0, lsr #4
 800e0c8:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e0cc <RDMHandler::GetAddressNetmask(unsigned short)>:
 800e0cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0ce:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e0d2:	4e11      	ldr	r6, [pc, #68]	@ (800e118 <RDMHandler::GetAddressNetmask(unsigned short)+0x4c>)
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	6833      	ldr	r3, [r6, #0]
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f105 0018 	add.w	r0, r5, #24
 800e0de:	2204      	movs	r2, #4
 800e0e0:	3117      	adds	r1, #23
 800e0e2:	f7ff fee8 	bl	800deb6 <memcpy.isra.0>
 800e0e6:	2204      	movs	r2, #4
 800e0e8:	eb0d 0102 	add.w	r1, sp, r2
 800e0ec:	f105 001c 	add.w	r0, r5, #28
 800e0f0:	f7ff fee1 	bl	800deb6 <memcpy.isra.0>
 800e0f4:	6870      	ldr	r0, [r6, #4]
 800e0f6:	f00c fca5 	bl	801aa44 <__popcountsi2>
 800e0fa:	7eb3      	ldrb	r3, [r6, #26]
 800e0fc:	f885 0020 	strb.w	r0, [r5, #32]
 800e100:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e104:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
 800e108:	4620      	mov	r0, r4
 800e10a:	230a      	movs	r3, #10
 800e10c:	75eb      	strb	r3, [r5, #23]
 800e10e:	b002      	add	sp, #8
 800e110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e114:	f7ff bafc 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e118:	2000e220 	andcs	lr, r0, r0, lsr #4

0800e11c <RDMHandler::GetStaticAddress(unsigned short)>:
 800e11c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e11e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e122:	4e0f      	ldr	r6, [pc, #60]	@ (800e160 <RDMHandler::GetStaticAddress(unsigned short)+0x44>)
 800e124:	4604      	mov	r4, r0
 800e126:	6833      	ldr	r3, [r6, #0]
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	f105 0018 	add.w	r0, r5, #24
 800e12e:	2204      	movs	r2, #4
 800e130:	3117      	adds	r1, #23
 800e132:	f7ff fec0 	bl	800deb6 <memcpy.isra.0>
 800e136:	2204      	movs	r2, #4
 800e138:	eb0d 0102 	add.w	r1, sp, r2
 800e13c:	f105 001c 	add.w	r0, r5, #28
 800e140:	f7ff feb9 	bl	800deb6 <memcpy.isra.0>
 800e144:	6870      	ldr	r0, [r6, #4]
 800e146:	f00c fc7d 	bl	801aa44 <__popcountsi2>
 800e14a:	2309      	movs	r3, #9
 800e14c:	f885 0020 	strb.w	r0, [r5, #32]
 800e150:	4620      	mov	r0, r4
 800e152:	75eb      	strb	r3, [r5, #23]
 800e154:	b002      	add	sp, #8
 800e156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e15a:	f7ff bad9 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e15e:	bf00      	nop
 800e160:	2000e220 	andcs	lr, r0, r0, lsr #4

0800e164 <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 800e164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e166:	6845      	ldr	r5, [r0, #4]
 800e168:	7dab      	ldrb	r3, [r5, #22]
 800e16a:	2b09      	cmp	r3, #9
 800e16c:	4604      	mov	r4, r0
 800e16e:	d005      	beq.n	800e17c <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 800e170:	2101      	movs	r1, #1
 800e172:	b003      	add	sp, #12
 800e174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e178:	f7ff bbb8 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800e17c:	2204      	movs	r2, #4
 800e17e:	eb0d 0002 	add.w	r0, sp, r2
 800e182:	f105 011b 	add.w	r1, r5, #27
 800e186:	f7ff fe96 	bl	800deb6 <memcpy.isra.0>
 800e18a:	4b09      	ldr	r3, [pc, #36]	@ (800e1b0 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x4c>)
 800e18c:	7fea      	ldrb	r2, [r5, #31]
 800e18e:	6818      	ldr	r0, [r3, #0]
 800e190:	9901      	ldr	r1, [sp, #4]
 800e192:	b12a      	cbz	r2, 800e1a0 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x3c>
 800e194:	f1c2 0220 	rsb	r2, r2, #32
 800e198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e19c:	4093      	lsls	r3, r2
 800e19e:	ba1a      	rev	r2, r3
 800e1a0:	f005 feae 	bl	8013f00 <Network::SetQueuedStaticIp(unsigned long, unsigned long)>
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	b003      	add	sp, #12
 800e1a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1ac:	f7ff bab0 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e1b0:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e1b4 <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 800e1b4:	4b08      	ldr	r3, [pc, #32]	@ (800e1d8 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 800e1b6:	b510      	push	{r4, lr}
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	6818      	ldr	r0, [r3, #0]
 800e1bc:	f005 fec2 	bl	8013f44 <Network::ApplyQueuedConfig()>
 800e1c0:	b120      	cbz	r0, 800e1cc <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c8:	f7ff baa2 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	2101      	movs	r1, #1
 800e1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1d4:	f7ff bb8a 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800e1d8:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e1dc <RDMHandler::GetDefaultRoute(unsigned short)>:
 800e1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1de:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e214 <RDMHandler::GetDefaultRoute(unsigned short)+0x38>)
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	f105 0018 	add.w	r0, r5, #24
 800e1ee:	2204      	movs	r2, #4
 800e1f0:	3117      	adds	r1, #23
 800e1f2:	f7ff fe60 	bl	800deb6 <memcpy.isra.0>
 800e1f6:	2204      	movs	r2, #4
 800e1f8:	f105 001c 	add.w	r0, r5, #28
 800e1fc:	eb0d 0102 	add.w	r1, sp, r2
 800e200:	f7ff fe59 	bl	800deb6 <memcpy.isra.0>
 800e204:	2308      	movs	r3, #8
 800e206:	4620      	mov	r0, r4
 800e208:	75eb      	strb	r3, [r5, #23]
 800e20a:	b003      	add	sp, #12
 800e20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e210:	f7ff ba7e 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e214:	2000e220 	andcs	lr, r0, r0, lsr #4

0800e218 <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 800e218:	b513      	push	{r0, r1, r4, lr}
 800e21a:	6841      	ldr	r1, [r0, #4]
 800e21c:	7d8b      	ldrb	r3, [r1, #22]
 800e21e:	2b08      	cmp	r3, #8
 800e220:	4604      	mov	r4, r0
 800e222:	d005      	beq.n	800e230 <RDMHandler::SetDefaultRoute(bool, unsigned short)+0x18>
 800e224:	2101      	movs	r1, #1
 800e226:	b002      	add	sp, #8
 800e228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e22c:	f7ff bb5e 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800e230:	2204      	movs	r2, #4
 800e232:	eb0d 0002 	add.w	r0, sp, r2
 800e236:	311b      	adds	r1, #27
 800e238:	f7ff fe3d 	bl	800deb6 <memcpy.isra.0>
 800e23c:	4b05      	ldr	r3, [pc, #20]	@ (800e254 <RDMHandler::SetDefaultRoute(bool, unsigned short)+0x3c>)
 800e23e:	9901      	ldr	r1, [sp, #4]
 800e240:	6818      	ldr	r0, [r3, #0]
 800e242:	f005 fe71 	bl	8013f28 <Network::SetQueuedDefaultRoute(unsigned long)>
 800e246:	4620      	mov	r0, r4
 800e248:	b002      	add	sp, #8
 800e24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e24e:	f7ff ba5f 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e252:	bf00      	nop
 800e254:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e258 <RDMHandler::GetHostName(unsigned short)>:
 800e258:	4b09      	ldr	r3, [pc, #36]	@ (800e280 <RDMHandler::GetHostName(unsigned short)+0x28>)
 800e25a:	6819      	ldr	r1, [r3, #0]
 800e25c:	3116      	adds	r1, #22
 800e25e:	b510      	push	{r4, lr}
 800e260:	460b      	mov	r3, r1
 800e262:	4604      	mov	r4, r0
 800e264:	461a      	mov	r2, r3
 800e266:	3301      	adds	r3, #1
 800e268:	7810      	ldrb	r0, [r2, #0]
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d1fa      	bne.n	800e264 <RDMHandler::GetHostName(unsigned short)+0xc>
 800e26e:	4620      	mov	r0, r4
 800e270:	1a52      	subs	r2, r2, r1
 800e272:	f7ff f9f6 	bl	800d662 <RDMHandler::HandleString(char const*, unsigned long)>
 800e276:	4620      	mov	r0, r4
 800e278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e27c:	f7ff ba48 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e280:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e284 <RDMHandler::SetHostName(bool, unsigned short)>:
 800e284:	b510      	push	{r4, lr}
 800e286:	6841      	ldr	r1, [r0, #4]
 800e288:	7d8b      	ldrb	r3, [r1, #22]
 800e28a:	2b3f      	cmp	r3, #63	@ 0x3f
 800e28c:	4604      	mov	r4, r0
 800e28e:	d904      	bls.n	800e29a <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 800e290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e294:	2102      	movs	r1, #2
 800e296:	f7ff bb29 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
 800e29a:	440b      	add	r3, r1
 800e29c:	2200      	movs	r2, #0
 800e29e:	75da      	strb	r2, [r3, #23]
 800e2a0:	4b04      	ldr	r3, [pc, #16]	@ (800e2b4 <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 800e2a2:	3117      	adds	r1, #23
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	f005 fdf3 	bl	8013e90 <Network::SetHostName(char const*)>
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b0:	f7ff ba2e 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e2b4:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e2b8 <RDMHandler::GetDomainName(unsigned short)>:
 800e2b8:	4b09      	ldr	r3, [pc, #36]	@ (800e2e0 <RDMHandler::GetDomainName(unsigned short)+0x28>)
 800e2ba:	6819      	ldr	r1, [r3, #0]
 800e2bc:	3156      	adds	r1, #86	@ 0x56
 800e2be:	b510      	push	{r4, lr}
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	7810      	ldrb	r0, [r2, #0]
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d1fa      	bne.n	800e2c4 <RDMHandler::GetDomainName(unsigned short)+0xc>
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	1a52      	subs	r2, r2, r1
 800e2d2:	f7ff f9c6 	bl	800d662 <RDMHandler::HandleString(char const*, unsigned long)>
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2dc:	f7ff ba18 	b.w	800d710 <RDMHandler::RespondMessageAck()>
 800e2e0:	2000e200 	andcs	lr, r0, r0, lsl #4

0800e2e4 <RDMHandler::SetDomainName(bool, unsigned short)>:
 800e2e4:	210b      	movs	r1, #11
 800e2e6:	f7ff bb01 	b.w	800d8ec <RDMHandler::RespondMessageNack(unsigned short)>
	...

0800e2ec <RDMDevice::RDMDevice()>:
 800e2ec:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800e2f0:	b513      	push	{r0, r1, r4, lr}
 800e2f2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800e2f6:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 800e300:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 800e304:	f880 3052 	strb.w	r3, [r0, #82]	@ 0x52
 800e308:	4b1c      	ldr	r3, [pc, #112]	@ (800e37c <RDMDevice::RDMDevice()+0x90>)
 800e30a:	491d      	ldr	r1, [pc, #116]	@ (800e380 <RDMDevice::RDMDevice()+0x94>)
 800e30c:	6018      	str	r0, [r3, #0]
 800e30e:	4b1d      	ldr	r3, [pc, #116]	@ (800e384 <RDMDevice::RDMDevice()+0x98>)
 800e310:	781a      	ldrb	r2, [r3, #0]
 800e312:	f880 2046 	strb.w	r2, [r0, #70]	@ 0x46
 800e316:	785b      	ldrb	r3, [r3, #1]
 800e318:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 800e31c:	466a      	mov	r2, sp
 800e31e:	2306      	movs	r3, #6
 800e320:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e324:	f802 4b01 	strb.w	r4, [r2], #1
 800e328:	3b01      	subs	r3, #1
 800e32a:	d1f9      	bne.n	800e320 <RDMDevice::RDMDevice()+0x34>
 800e32c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e330:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e334:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e338:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800e33c:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 800e340:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 800e344:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 800e348:	f880 304f 	strb.w	r3, [r0, #79]	@ 0x4f
 800e34c:	4a0e      	ldr	r2, [pc, #56]	@ (800e388 <RDMDevice::RDMDevice()+0x9c>)
 800e34e:	f880 104a 	strb.w	r1, [r0, #74]	@ 0x4a
 800e352:	2319      	movs	r3, #25
 800e354:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
 800e358:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 800e35c:	f880 404b 	strb.w	r4, [r0, #75]	@ 0x4b
 800e360:	f880 404c 	strb.w	r4, [r0, #76]	@ 0x4c
 800e364:	4603      	mov	r3, r0
 800e366:	f100 0119 	add.w	r1, r0, #25
 800e36a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800e36e:	f803 4b01 	strb.w	r4, [r3], #1
 800e372:	4299      	cmp	r1, r3
 800e374:	d1f9      	bne.n	800e36a <RDMDevice::RDMDevice()+0x7e>
 800e376:	b002      	add	sp, #8
 800e378:	bd10      	pop	{r4, pc}
 800e37a:	bf00      	nop
 800e37c:	2000d400 	andcs	sp, r0, r0, lsl #8
 800e380:	2000e234 	andcs	lr, r0, r4, lsr r2
 800e384:	0801ec79 	stmdaeq	r1, {r0, r3, r4, r5, r6, sl, fp, sp, lr, pc}
 800e388:	0801ec97 	stmdaeq	r1, {r0, r1, r2, r4, r7, sl, fp, sp, lr, pc}

0800e38c <RDMDevice::Print()>:
 800e38c:	b513      	push	{r0, r1, r4, lr}
 800e38e:	4604      	mov	r4, r0
 800e390:	481f      	ldr	r0, [pc, #124]	@ (800e410 <RDMDevice::Print()+0x84>)
 800e392:	f00c f906 	bl	801a5a2 <puts>
 800e396:	4b1f      	ldr	r3, [pc, #124]	@ (800e414 <RDMDevice::Print()+0x88>)
 800e398:	461a      	mov	r2, r3
 800e39a:	4619      	mov	r1, r3
 800e39c:	3301      	adds	r3, #1
 800e39e:	7808      	ldrb	r0, [r1, #0]
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d1fa      	bne.n	800e39a <RDMDevice::Print()+0xe>
 800e3a4:	1a89      	subs	r1, r1, r2
 800e3a6:	2920      	cmp	r1, #32
 800e3a8:	bf28      	it	cs
 800e3aa:	2120      	movcs	r1, #32
 800e3ac:	4a19      	ldr	r2, [pc, #100]	@ (800e414 <RDMDevice::Print()+0x88>)
 800e3ae:	481a      	ldr	r0, [pc, #104]	@ (800e418 <RDMDevice::Print()+0x8c>)
 800e3b0:	f00c f8a2 	bl	801a4f8 <printf>
 800e3b4:	f894 2047 	ldrb.w	r2, [r4, #71]	@ 0x47
 800e3b8:	f894 1046 	ldrb.w	r1, [r4, #70]	@ 0x46
 800e3bc:	4817      	ldr	r0, [pc, #92]	@ (800e41c <RDMDevice::Print()+0x90>)
 800e3be:	f00c f89b 	bl	801a4f8 <printf>
 800e3c2:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 800e3cc:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 800e3d0:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 800e3d4:	4812      	ldr	r0, [pc, #72]	@ (800e420 <RDMDevice::Print()+0x94>)
 800e3d6:	f00c f88f 	bl	801a4f8 <printf>
 800e3da:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 800e3de:	4811      	ldr	r0, [pc, #68]	@ (800e424 <RDMDevice::Print()+0x98>)
 800e3e0:	f104 0220 	add.w	r2, r4, #32
 800e3e4:	f00c f888 	bl	801a4f8 <printf>
 800e3e8:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800e3ec:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800e3f0:	480d      	ldr	r0, [pc, #52]	@ (800e428 <RDMDevice::Print()+0x9c>)
 800e3f2:	0a09      	lsrs	r1, r1, #8
 800e3f4:	f00c f880 	bl	801a4f8 <printf>
 800e3f8:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 800e3fc:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800e400:	480a      	ldr	r0, [pc, #40]	@ (800e42c <RDMDevice::Print()+0xa0>)
 800e402:	0a09      	lsrs	r1, r1, #8
 800e404:	b002      	add	sp, #8
 800e406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e40a:	f00c b875 	b.w	801a4f8 <printf>
 800e40e:	bf00      	nop
 800e410:	0801b693 	stmdaeq	r1, {r0, r1, r4, r7, r9, sl, ip, sp, pc}
 800e414:	0801ec7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, sl, fp, sp, lr, pc}
 800e418:	0801b6ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, ip, sp, pc}
 800e41c:	0801b6c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, ip, sp, pc}
 800e420:	0801b6e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, sl, ip, sp, pc}
 800e424:	0801b70d 	stmdaeq	r1, {r0, r2, r3, r8, r9, sl, ip, sp, pc}
 800e428:	0801b728 	stmdaeq	r1, {r3, r5, r8, r9, sl, ip, sp, pc}
 800e42c:	0801b747 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, sl, ip, sp, pc}

0800e430 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>:
 800e430:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e432:	88c6      	ldrh	r6, [r0, #6]
 800e434:	8885      	ldrh	r5, [r0, #4]
 800e436:	42ae      	cmp	r6, r5
 800e438:	d216      	bcs.n	800e468 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x38>
 800e43a:	4604      	mov	r4, r0
 800e43c:	6800      	ldr	r0, [r0, #0]
 800e43e:	1bad      	subs	r5, r5, r6
 800e440:	4430      	add	r0, r6
 800e442:	7a26      	ldrb	r6, [r4, #8]
 800e444:	b923      	cbnz	r3, 800e450 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x20>
 800e446:	b926      	cbnz	r6, 800e452 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x22>
 800e448:	9200      	str	r2, [sp, #0]
 800e44a:	460b      	mov	r3, r1
 800e44c:	4a09      	ldr	r2, [pc, #36]	@ (800e474 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x44>)
 800e44e:	e003      	b.n	800e458 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 800e450:	b166      	cbz	r6, 800e46c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x3c>
 800e452:	9200      	str	r2, [sp, #0]
 800e454:	4a08      	ldr	r2, [pc, #32]	@ (800e478 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x48>)
 800e456:	460b      	mov	r3, r1
 800e458:	4629      	mov	r1, r5
 800e45a:	f00c f875 	bl	801a548 <snprintf>
 800e45e:	4285      	cmp	r5, r0
 800e460:	bfa2      	ittt	ge
 800e462:	88e3      	ldrhge	r3, [r4, #6]
 800e464:	181b      	addge	r3, r3, r0
 800e466:	80e3      	strhge	r3, [r4, #6]
 800e468:	b002      	add	sp, #8
 800e46a:	bd70      	pop	{r4, r5, r6, pc}
 800e46c:	9200      	str	r2, [sp, #0]
 800e46e:	460b      	mov	r3, r1
 800e470:	4a02      	ldr	r2, [pc, #8]	@ (800e47c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x4c>)
 800e472:	e7f1      	b.n	800e458 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 800e474:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 800e478:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800e47c:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800e480 <StoreDmxSend::Copy(dmxsendparams::Params*)>:
 800e480:	b507      	push	{r0, r1, r2, lr}
 800e482:	2300      	movs	r3, #0
 800e484:	2101      	movs	r1, #1
 800e486:	e9cd 3100 	strd	r3, r1, [sp]
 800e48a:	4602      	mov	r2, r0
 800e48c:	4803      	ldr	r0, [pc, #12]	@ (800e49c <StoreDmxSend::Copy(dmxsendparams::Params*)+0x1c>)
 800e48e:	230a      	movs	r3, #10
 800e490:	6800      	ldr	r0, [r0, #0]
 800e492:	f008 fb07 	bl	8016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800e496:	b003      	add	sp, #12
 800e498:	f85d fb04 	ldr.w	pc, [sp], #4
 800e49c:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800e4a0 <DmxParams::DmxParams()>:
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	7002      	strb	r2, [r0, #0]
 800e4a4:	7042      	strb	r2, [r0, #1]
 800e4a6:	7082      	strb	r2, [r0, #2]
 800e4a8:	70c2      	strb	r2, [r0, #3]
 800e4aa:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 800e4ae:	7142      	strb	r2, [r0, #5]
 800e4b0:	71c2      	strb	r2, [r0, #7]
 800e4b2:	2228      	movs	r2, #40	@ 0x28
 800e4b4:	7101      	strb	r1, [r0, #4]
 800e4b6:	7202      	strb	r2, [r0, #8]
 800e4b8:	210c      	movs	r1, #12
 800e4ba:	22ff      	movs	r2, #255	@ 0xff
 800e4bc:	7181      	strb	r1, [r0, #6]
 800e4be:	7242      	strb	r2, [r0, #9]
 800e4c0:	4770      	bx	lr

0800e4c2 <DmxParams::Load()>:
 800e4c2:	b508      	push	{r3, lr}
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	7002      	strb	r2, [r0, #0]
 800e4c8:	7042      	strb	r2, [r0, #1]
 800e4ca:	7082      	strb	r2, [r0, #2]
 800e4cc:	70c2      	strb	r2, [r0, #3]
 800e4ce:	f7ff ffd7 	bl	800e480 <StoreDmxSend::Copy(dmxsendparams::Params*)>
 800e4d2:	bd08      	pop	{r3, pc}

0800e4d4 <DmxParams::Load(char const*, unsigned long)>:
 800e4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4d6:	2500      	movs	r5, #0
 800e4d8:	b087      	sub	sp, #28
 800e4da:	4604      	mov	r4, r0
 800e4dc:	460e      	mov	r6, r1
 800e4de:	4617      	mov	r7, r2
 800e4e0:	7005      	strb	r5, [r0, #0]
 800e4e2:	7045      	strb	r5, [r0, #1]
 800e4e4:	7085      	strb	r5, [r0, #2]
 800e4e6:	70c5      	strb	r5, [r0, #3]
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	490c      	ldr	r1, [pc, #48]	@ (800e51c <DmxParams::Load(char const*, unsigned long)+0x48>)
 800e4ec:	a804      	add	r0, sp, #16
 800e4ee:	f008 fdb3 	bl	8017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800e4f2:	463a      	mov	r2, r7
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	a804      	add	r0, sp, #16
 800e4f8:	f008 fdb2 	bl	8017060 <ReadConfigFile::Read(char const*, unsigned int)>
 800e4fc:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800e500:	230a      	movs	r3, #10
 800e502:	4807      	ldr	r0, [pc, #28]	@ (800e520 <DmxParams::Load(char const*, unsigned long)+0x4c>)
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	462a      	mov	r2, r5
 800e508:	4623      	mov	r3, r4
 800e50a:	2101      	movs	r1, #1
 800e50c:	6800      	ldr	r0, [r0, #0]
 800e50e:	f008 faa3 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800e512:	a804      	add	r0, sp, #16
 800e514:	f008 fda3 	bl	801705e <ReadConfigFile::~ReadConfigFile()>
 800e518:	b007      	add	sp, #28
 800e51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e51c:	0800e5f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, sp, lr, pc}
 800e520:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800e524 <DmxParams::callbackFunction(char const*)>:
 800e524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e526:	460d      	mov	r5, r1
 800e528:	4604      	mov	r4, r0
 800e52a:	492f      	ldr	r1, [pc, #188]	@ (800e5e8 <DmxParams::callbackFunction(char const*)+0xc4>)
 800e52c:	f10d 0206 	add.w	r2, sp, #6
 800e530:	4628      	mov	r0, r5
 800e532:	f008 fe76 	bl	8017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e536:	b9a0      	cbnz	r0, 800e562 <DmxParams::callbackFunction(char const*)+0x3e>
 800e538:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e53c:	6823      	ldr	r3, [r4, #0]
 800e53e:	2a5b      	cmp	r2, #91	@ 0x5b
 800e540:	d907      	bls.n	800e552 <DmxParams::callbackFunction(char const*)+0x2e>
 800e542:	2ab0      	cmp	r2, #176	@ 0xb0
 800e544:	d005      	beq.n	800e552 <DmxParams::callbackFunction(char const*)+0x2e>
 800e546:	80a2      	strh	r2, [r4, #4]
 800e548:	f043 0301 	orr.w	r3, r3, #1
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	b003      	add	sp, #12
 800e550:	bd30      	pop	{r4, r5, pc}
 800e552:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 800e556:	7122      	strb	r2, [r4, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	7162      	strb	r2, [r4, #5]
 800e55c:	f023 0301 	bic.w	r3, r3, #1
 800e560:	e7f4      	b.n	800e54c <DmxParams::callbackFunction(char const*)+0x28>
 800e562:	4922      	ldr	r1, [pc, #136]	@ (800e5ec <DmxParams::callbackFunction(char const*)+0xc8>)
 800e564:	f10d 0206 	add.w	r2, sp, #6
 800e568:	4628      	mov	r0, r5
 800e56a:	f008 fe5a 	bl	8017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e56e:	b970      	cbnz	r0, 800e58e <DmxParams::callbackFunction(char const*)+0x6a>
 800e570:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e574:	6823      	ldr	r3, [r4, #0]
 800e576:	2a0c      	cmp	r2, #12
 800e578:	bf93      	iteet	ls
 800e57a:	220c      	movls	r2, #12
 800e57c:	80e2      	strhhi	r2, [r4, #6]
 800e57e:	f043 0302 	orrhi.w	r3, r3, #2
 800e582:	71a2      	strbls	r2, [r4, #6]
 800e584:	bf9c      	itt	ls
 800e586:	71e0      	strbls	r0, [r4, #7]
 800e588:	f023 0302 	bicls.w	r3, r3, #2
 800e58c:	e7de      	b.n	800e54c <DmxParams::callbackFunction(char const*)+0x28>
 800e58e:	4918      	ldr	r1, [pc, #96]	@ (800e5f0 <DmxParams::callbackFunction(char const*)+0xcc>)
 800e590:	f10d 0205 	add.w	r2, sp, #5
 800e594:	4628      	mov	r0, r5
 800e596:	f008 fe89 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e59a:	b950      	cbnz	r0, 800e5b2 <DmxParams::callbackFunction(char const*)+0x8e>
 800e59c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	7222      	strb	r2, [r4, #8]
 800e5a4:	2a28      	cmp	r2, #40	@ 0x28
 800e5a6:	bf14      	ite	ne
 800e5a8:	f043 0304 	orrne.w	r3, r3, #4
 800e5ac:	f023 0304 	biceq.w	r3, r3, #4
 800e5b0:	e7cc      	b.n	800e54c <DmxParams::callbackFunction(char const*)+0x28>
 800e5b2:	4910      	ldr	r1, [pc, #64]	@ (800e5f4 <DmxParams::callbackFunction(char const*)+0xd0>)
 800e5b4:	f10d 0206 	add.w	r2, sp, #6
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	f008 fe32 	bl	8017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d1c5      	bne.n	800e54e <DmxParams::callbackFunction(char const*)+0x2a>
 800e5c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e5c6:	6823      	ldr	r3, [r4, #0]
 800e5c8:	1e91      	subs	r1, r2, #2
 800e5ca:	f5b1 7fff 	cmp.w	r1, #510	@ 0x1fe
 800e5ce:	bf3b      	ittet	cc
 800e5d0:	0852      	lsrcc	r2, r2, #1
 800e5d2:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 800e5d6:	22ff      	movcs	r2, #255	@ 0xff
 800e5d8:	7262      	strbcc	r2, [r4, #9]
 800e5da:	bf32      	itee	cc
 800e5dc:	f043 0308 	orrcc.w	r3, r3, #8
 800e5e0:	7262      	strbcs	r2, [r4, #9]
 800e5e2:	f023 0308 	biccs.w	r3, r3, #8
 800e5e6:	e7b1      	b.n	800e54c <DmxParams::callbackFunction(char const*)+0x28>
 800e5e8:	0801ecd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, sl, fp, sp, lr, pc}
 800e5ec:	0801ecca 	stmdaeq	r1, {r1, r3, r6, r7, sl, fp, sp, lr, pc}
 800e5f0:	0801ecbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sl, fp, sp, lr, pc}
 800e5f4:	0801ecb1 	stmdaeq	r1, {r0, r4, r5, r7, sl, fp, sp, lr, pc}

0800e5f8 <DmxParams::staticCallbackFunction(void*, char const*)>:
 800e5f8:	f7ff bf94 	b.w	800e524 <DmxParams::callbackFunction(char const*)>

0800e5fc <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	4604      	mov	r4, r0
 800e600:	b086      	sub	sp, #24
 800e602:	4615      	mov	r5, r2
 800e604:	461e      	mov	r6, r3
 800e606:	b369      	cbz	r1, 800e664 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x68>
 800e608:	220a      	movs	r2, #10
 800e60a:	f00b fc7a 	bl	8019f02 <memmove>
 800e60e:	462a      	mov	r2, r5
 800e610:	4930      	ldr	r1, [pc, #192]	@ (800e6d4 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xd8>)
 800e612:	4633      	mov	r3, r6
 800e614:	a803      	add	r0, sp, #12
 800e616:	f008 fc49 	bl	8016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800e61a:	6823      	ldr	r3, [r4, #0]
 800e61c:	88a2      	ldrh	r2, [r4, #4]
 800e61e:	492e      	ldr	r1, [pc, #184]	@ (800e6d8 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xdc>)
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	a803      	add	r0, sp, #12
 800e626:	f7ff ff03 	bl	800e430 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 800e62a:	6823      	ldr	r3, [r4, #0]
 800e62c:	88e2      	ldrh	r2, [r4, #6]
 800e62e:	492b      	ldr	r1, [pc, #172]	@ (800e6dc <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe0>)
 800e630:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e634:	a803      	add	r0, sp, #12
 800e636:	f7ff fefb 	bl	800e430 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 800e63a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e63e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e642:	7a23      	ldrb	r3, [r4, #8]
 800e644:	6821      	ldr	r1, [r4, #0]
 800e646:	42aa      	cmp	r2, r5
 800e648:	d21d      	bcs.n	800e686 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x8a>
 800e64a:	9803      	ldr	r0, [sp, #12]
 800e64c:	0749      	lsls	r1, r1, #29
 800e64e:	4410      	add	r0, r2
 800e650:	eba5 0502 	sub.w	r5, r5, r2
 800e654:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e658:	d407      	bmi.n	800e66a <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 800e65a:	b93a      	cbnz	r2, 800e66c <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x70>
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	4a20      	ldr	r2, [pc, #128]	@ (800e6e0 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe4>)
 800e660:	4b20      	ldr	r3, [pc, #128]	@ (800e6e4 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe8>)
 800e662:	e006      	b.n	800e672 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x76>
 800e664:	f7ff ff0c 	bl	800e480 <StoreDmxSend::Copy(dmxsendparams::Params*)>
 800e668:	e7d1      	b.n	800e60e <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x12>
 800e66a:	b37a      	cbz	r2, 800e6cc <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xd0>
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6e8 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xec>)
 800e670:	4b1c      	ldr	r3, [pc, #112]	@ (800e6e4 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe8>)
 800e672:	4629      	mov	r1, r5
 800e674:	f00b ff68 	bl	801a548 <snprintf>
 800e678:	4285      	cmp	r5, r0
 800e67a:	bfa2      	ittt	ge
 800e67c:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800e680:	18c0      	addge	r0, r0, r3
 800e682:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800e686:	7a62      	ldrb	r2, [r4, #9]
 800e688:	6823      	ldr	r3, [r4, #0]
 800e68a:	4918      	ldr	r1, [pc, #96]	@ (800e6ec <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xf0>)
 800e68c:	3201      	adds	r2, #1
 800e68e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e692:	0052      	lsls	r2, r2, #1
 800e694:	a803      	add	r0, sp, #12
 800e696:	f7ff fecb 	bl	800e430 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 800e69a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e69e:	b17b      	cbz	r3, 800e6c0 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 800e6a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e6a4:	9b03      	ldr	r3, [sp, #12]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	227d      	movs	r2, #125	@ 0x7d
 800e6aa:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e6ae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e6b2:	9903      	ldr	r1, [sp, #12]
 800e6b4:	54ca      	strb	r2, [r1, r3]
 800e6b6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e6c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e6c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6c6:	601a      	str	r2, [r3, #0]
 800e6c8:	b006      	add	sp, #24
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	4a08      	ldr	r2, [pc, #32]	@ (800e6f0 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xf4>)
 800e6d0:	4b04      	ldr	r3, [pc, #16]	@ (800e6e4 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe8>)
 800e6d2:	e7ce      	b.n	800e672 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x76>
 800e6d4:	0801ecde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, sl, fp, sp, lr, pc}
 800e6d8:	0801ecd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, sl, fp, sp, lr, pc}
 800e6dc:	0801ecca 	stmdaeq	r1, {r1, r3, r6, r7, sl, fp, sp, lr, pc}
 800e6e0:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 800e6e4:	0801ecbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sl, fp, sp, lr, pc}
 800e6e8:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800e6ec:	0801ecb1 	stmdaeq	r1, {r0, r4, r5, r7, sl, fp, sp, lr, pc}
 800e6f0:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800e6f4 <DmxParams::Set(Dmx*)>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	6803      	ldr	r3, [r0, #0]
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	07d8      	lsls	r0, r3, #31
 800e6fc:	460d      	mov	r5, r1
 800e6fe:	d503      	bpl.n	800e708 <DmxParams::Set(Dmx*)+0x14>
 800e700:	88a1      	ldrh	r1, [r4, #4]
 800e702:	4628      	mov	r0, r5
 800e704:	f000 fcca 	bl	800f09c <Dmx::SetDmxBreakTime(unsigned long)>
 800e708:	6823      	ldr	r3, [r4, #0]
 800e70a:	0799      	lsls	r1, r3, #30
 800e70c:	d503      	bpl.n	800e716 <DmxParams::Set(Dmx*)+0x22>
 800e70e:	88e1      	ldrh	r1, [r4, #6]
 800e710:	4628      	mov	r0, r5
 800e712:	f000 fcf9 	bl	800f108 <Dmx::SetDmxMabTime(unsigned long)>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	075a      	lsls	r2, r3, #29
 800e71a:	d507      	bpl.n	800e72c <DmxParams::Set(Dmx*)+0x38>
 800e71c:	7a21      	ldrb	r1, [r4, #8]
 800e71e:	b111      	cbz	r1, 800e726 <DmxParams::Set(Dmx*)+0x32>
 800e720:	4b08      	ldr	r3, [pc, #32]	@ (800e744 <DmxParams::Set(Dmx*)+0x50>)
 800e722:	fbb3 f1f1 	udiv	r1, r3, r1
 800e726:	4628      	mov	r0, r5
 800e728:	f000 fd24 	bl	800f174 <Dmx::SetDmxPeriodTime(unsigned long)>
 800e72c:	6823      	ldr	r3, [r4, #0]
 800e72e:	071b      	lsls	r3, r3, #28
 800e730:	d507      	bpl.n	800e742 <DmxParams::Set(Dmx*)+0x4e>
 800e732:	7a61      	ldrb	r1, [r4, #9]
 800e734:	3101      	adds	r1, #1
 800e736:	4628      	mov	r0, r5
 800e738:	0049      	lsls	r1, r1, #1
 800e73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e73e:	f000 bd49 	b.w	800f1d4 <Dmx::SetDmxSlots(unsigned short)>
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	000f4240 	andeq	r4, pc, r0, asr #4

0800e748 <remoteconfig::dmx::json_get_ports(char*, unsigned long)>:
 800e748:	235b      	movs	r3, #91	@ 0x5b
 800e74a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e74e:	4604      	mov	r4, r0
 800e750:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 800e7b0 <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x68>
 800e754:	f800 3b01 	strb.w	r3, [r0], #1
 800e758:	f8d9 3000 	ldr.w	r3, [r9]
 800e75c:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 800e7b4 <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x6c>
 800e760:	695a      	ldr	r2, [r3, #20]
 800e762:	4f11      	ldr	r7, [pc, #68]	@ (800e7a8 <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x60>)
 800e764:	2a01      	cmp	r2, #1
 800e766:	bf0c      	ite	eq
 800e768:	4643      	moveq	r3, r8
 800e76a:	463b      	movne	r3, r7
 800e76c:	460e      	mov	r6, r1
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	4a0e      	ldr	r2, [pc, #56]	@ (800e7ac <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x64>)
 800e772:	2341      	movs	r3, #65	@ 0x41
 800e774:	3901      	subs	r1, #1
 800e776:	f00b fee7 	bl	801a548 <snprintf>
 800e77a:	f8d9 3000 	ldr.w	r3, [r9]
 800e77e:	4a0b      	ldr	r2, [pc, #44]	@ (800e7ac <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x64>)
 800e780:	699b      	ldr	r3, [r3, #24]
 800e782:	1c45      	adds	r5, r0, #1
 800e784:	2b01      	cmp	r3, #1
 800e786:	bf08      	it	eq
 800e788:	4647      	moveq	r7, r8
 800e78a:	1960      	adds	r0, r4, r5
 800e78c:	9700      	str	r7, [sp, #0]
 800e78e:	2342      	movs	r3, #66	@ 0x42
 800e790:	1b71      	subs	r1, r6, r5
 800e792:	f00b fed9 	bl	801a548 <snprintf>
 800e796:	4428      	add	r0, r5
 800e798:	4404      	add	r4, r0
 800e79a:	235d      	movs	r3, #93	@ 0x5d
 800e79c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e7a0:	b003      	add	sp, #12
 800e7a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7a6:	bf00      	nop
 800e7a8:	0801b5be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, sl, ip, sp, pc}
 800e7ac:	0801b766 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, ip, sp, pc}
 800e7b0:	2000d404 	andcs	sp, r0, r4, lsl #8
 800e7b4:	0801b5b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, ip, sp, pc}

0800e7b8 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)>:
 800e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7bc:	f040 0420 	orr.w	r4, r0, #32
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	f1a4 0161 	sub.w	r1, r4, #97	@ 0x61
 800e7c6:	2901      	cmp	r1, #1
 800e7c8:	b088      	sub	sp, #32
 800e7ca:	4616      	mov	r6, r2
 800e7cc:	d81f      	bhi.n	800e80e <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x56>
 800e7ce:	4b11      	ldr	r3, [pc, #68]	@ (800e814 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x5c>)
 800e7d0:	6818      	ldr	r0, [r3, #0]
 800e7d2:	f000 fbf7 	bl	800efc4 <Dmx::GetTotalStatistics(unsigned long)>
 800e7d6:	6802      	ldr	r2, [r0, #0]
 800e7d8:	6841      	ldr	r1, [r0, #4]
 800e7da:	6947      	ldr	r7, [r0, #20]
 800e7dc:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800e7e0:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800e7e4:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e7e8:	6900      	ldr	r0, [r0, #16]
 800e7ea:	9200      	str	r2, [sp, #0]
 800e7ec:	f1a4 0320 	sub.w	r3, r4, #32
 800e7f0:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800e7f4:	e9cd 1701 	strd	r1, r7, [sp, #4]
 800e7f8:	e9cd ce03 	strd	ip, lr, [sp, #12]
 800e7fc:	4a06      	ldr	r2, [pc, #24]	@ (800e818 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x60>)
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	4631      	mov	r1, r6
 800e802:	4628      	mov	r0, r5
 800e804:	f00b fea0 	bl	801a548 <snprintf>
 800e808:	b008      	add	sp, #32
 800e80a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e80e:	2000      	movs	r0, #0
 800e810:	e7fa      	b.n	800e808 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x50>
 800e812:	bf00      	nop
 800e814:	2000d404 	andcs	sp, r0, r4, lsl #8
 800e818:	0801b786 	stmdaeq	r1, {r1, r2, r7, r8, r9, sl, ip, sp, pc}

0800e81c <Dmx::StopData(unsigned long) [clone .part.0]>:
 800e81c:	b430      	push	{r4, r5}
 800e81e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e822:	4d1f      	ldr	r5, [pc, #124]	@ (800e8a0 <Dmx::StopData(unsigned long) [clone .part.0]+0x84>)
 800e824:	4a1f      	ldr	r2, [pc, #124]	@ (800e8a4 <Dmx::StopData(unsigned long) [clone .part.0]+0x88>)
 800e826:	6940      	ldr	r0, [r0, #20]
 800e828:	4b1f      	ldr	r3, [pc, #124]	@ (800e8a8 <Dmx::StopData(unsigned long) [clone .part.0]+0x8c>)
 800e82a:	2400      	movs	r4, #0
 800e82c:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
 800e830:	4d1e      	ldr	r5, [pc, #120]	@ (800e8ac <Dmx::StopData(unsigned long) [clone .part.0]+0x90>)
 800e832:	2900      	cmp	r1, #0
 800e834:	bf18      	it	ne
 800e836:	4613      	movne	r3, r2
 800e838:	4a1d      	ldr	r2, [pc, #116]	@ (800e8b0 <Dmx::StopData(unsigned long) [clone .part.0]+0x94>)
 800e83a:	bf18      	it	ne
 800e83c:	462a      	movne	r2, r5
 800e83e:	b9e8      	cbnz	r0, 800e87c <Dmx::StopData(unsigned long) [clone .part.0]+0x60>
 800e840:	4b1c      	ldr	r3, [pc, #112]	@ (800e8b4 <Dmx::StopData(unsigned long) [clone .part.0]+0x98>)
 800e842:	f44f 7405 	mov.w	r4, #532	@ 0x214
 800e846:	fb04 3101 	mla	r1, r4, r1, r3
 800e84a:	e002      	b.n	800e852 <Dmx::StopData(unsigned long) [clone .part.0]+0x36>
 800e84c:	f8d1 3210 	ldr.w	r3, [r1, #528]	@ 0x210
 800e850:	b193      	cbz	r3, 800e878 <Dmx::StopData(unsigned long) [clone .part.0]+0x5c>
 800e852:	f8d1 3210 	ldr.w	r3, [r1, #528]	@ 0x210
 800e856:	2b04      	cmp	r3, #4
 800e858:	d1f8      	bne.n	800e84c <Dmx::StopData(unsigned long) [clone .part.0]+0x30>
 800e85a:	6813      	ldr	r3, [r2, #0]
 800e85c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e860:	6013      	str	r3, [r2, #0]
 800e862:	f3bf 8f5f 	dmb	sy
 800e866:	6813      	ldr	r3, [r2, #0]
 800e868:	065b      	lsls	r3, r3, #25
 800e86a:	d5fa      	bpl.n	800e862 <Dmx::StopData(unsigned long) [clone .part.0]+0x46>
 800e86c:	f8c1 0210 	str.w	r0, [r1, #528]	@ 0x210
 800e870:	f8d1 3210 	ldr.w	r3, [r1, #528]	@ 0x210
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1ec      	bne.n	800e852 <Dmx::StopData(unsigned long) [clone .part.0]+0x36>
 800e878:	bc30      	pop	{r4, r5}
 800e87a:	4770      	bx	lr
 800e87c:	6818      	ldr	r0, [r3, #0]
 800e87e:	4a0e      	ldr	r2, [pc, #56]	@ (800e8b8 <Dmx::StopData(unsigned long) [clone .part.0]+0x9c>)
 800e880:	f020 0020 	bic.w	r0, r0, #32
 800e884:	6018      	str	r0, [r3, #0]
 800e886:	6818      	ldr	r0, [r3, #0]
 800e888:	f020 0010 	bic.w	r0, r0, #16
 800e88c:	6018      	str	r0, [r3, #0]
 800e88e:	f240 531c 	movw	r3, #1308	@ 0x51c
 800e892:	fb03 2301 	mla	r3, r3, r1, r2
 800e896:	f8c3 4518 	str.w	r4, [r3, #1304]	@ 0x518
 800e89a:	bc30      	pop	{r4, r5}
 800e89c:	4770      	bx	lr
 800e89e:	bf00      	nop
 800e8a0:	2000de9c 	mulcs	r0, ip, lr
 800e8a4:	4001140c 	andmi	r1, r1, ip, lsl #8
 800e8a8:	4000480c 	andmi	r4, r0, ip, lsl #16
 800e8ac:	40011400 	andmi	r1, r1, r0, lsl #8
 800e8b0:	40004800 	andmi	r4, r0, r0, lsl #16
 800e8b4:	2001c000 	andcs	ip, r1, r0
 800e8b8:	2000d414 	andcs	sp, r0, r4, lsl r4

0800e8bc <TIMER1_IRQHandler>:
 800e8bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e8c0:	691a      	ldr	r2, [r3, #16]
 800e8c2:	0712      	lsls	r2, r2, #28
 800e8c4:	d53a      	bpl.n	800e93c <TIMER1_IRQHandler+0x80>
 800e8c6:	493a      	ldr	r1, [pc, #232]	@ (800e9b0 <TIMER1_IRQHandler+0xf4>)
 800e8c8:	f8d1 2210 	ldr.w	r2, [r1, #528]	@ 0x210
 800e8cc:	2a02      	cmp	r2, #2
 800e8ce:	b430      	push	{r4, r5}
 800e8d0:	d03a      	beq.n	800e948 <TIMER1_IRQHandler+0x8c>
 800e8d2:	2a04      	cmp	r2, #4
 800e8d4:	d051      	beq.n	800e97a <TIMER1_IRQHandler+0xbe>
 800e8d6:	2a01      	cmp	r2, #1
 800e8d8:	d124      	bne.n	800e924 <TIMER1_IRQHandler+0x68>
 800e8da:	4a36      	ldr	r2, [pc, #216]	@ (800e9b4 <TIMER1_IRQHandler+0xf8>)
 800e8dc:	f8d2 4400 	ldr.w	r4, [r2, #1024]	@ 0x400
 800e8e0:	f8d2 040c 	ldr.w	r0, [r2, #1036]	@ 0x40c
 800e8e4:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 800e8e8:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800e8ec:	f444 1400 	orr.w	r4, r4, #2097152	@ 0x200000
 800e8f0:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 800e8f4:	f8c2 4400 	str.w	r4, [r2, #1024]	@ 0x400
 800e8f8:	f8c2 040c 	str.w	r0, [r2, #1036]	@ 0x40c
 800e8fc:	f8d2 4420 	ldr.w	r4, [r2, #1056]	@ 0x420
 800e900:	f8d2 0424 	ldr.w	r0, [r2, #1060]	@ 0x424
 800e904:	f8c2 4420 	str.w	r4, [r2, #1056]	@ 0x420
 800e908:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 800e90c:	f440 60e0 	orr.w	r0, r0, #1792	@ 0x700
 800e910:	f8c2 0424 	str.w	r0, [r2, #1060]	@ 0x424
 800e914:	2402      	movs	r4, #2
 800e916:	4828      	ldr	r0, [pc, #160]	@ (800e9b8 <TIMER1_IRQHandler+0xfc>)
 800e918:	f8c1 4210 	str.w	r4, [r1, #528]	@ 0x210
 800e91c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e91e:	6841      	ldr	r1, [r0, #4]
 800e920:	440a      	add	r2, r1
 800e922:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e924:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e928:	f06f 0208 	mvn.w	r2, #8
 800e92c:	611a      	str	r2, [r3, #16]
 800e92e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e932:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e936:	bc30      	pop	{r4, r5}
 800e938:	611a      	str	r2, [r3, #16]
 800e93a:	4770      	bx	lr
 800e93c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e944:	611a      	str	r2, [r3, #16]
 800e946:	4770      	bx	lr
 800e948:	4b1c      	ldr	r3, [pc, #112]	@ (800e9bc <TIMER1_IRQHandler+0x100>)
 800e94a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e94c:	f022 0201 	bic.w	r2, r2, #1
 800e950:	659a      	str	r2, [r3, #88]	@ 0x58
 800e952:	6898      	ldr	r0, [r3, #8]
 800e954:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 800e958:	6098      	str	r0, [r3, #8]
 800e95a:	f8b1 0204 	ldrh.w	r0, [r1, #516]	@ 0x204
 800e95e:	6659      	str	r1, [r3, #100]	@ 0x64
 800e960:	f04f 2440 	mov.w	r4, #1073758208	@ 0x40004000
 800e964:	f042 0211 	orr.w	r2, r2, #17
 800e968:	65d8      	str	r0, [r3, #92]	@ 0x5c
 800e96a:	659a      	str	r2, [r3, #88]	@ 0x58
 800e96c:	f8d4 3814 	ldr.w	r3, [r4, #2068]	@ 0x814
 800e970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e974:	f8c4 3814 	str.w	r3, [r4, #2068]	@ 0x814
 800e978:	e7d4      	b.n	800e924 <TIMER1_IRQHandler+0x68>
 800e97a:	4a0e      	ldr	r2, [pc, #56]	@ (800e9b4 <TIMER1_IRQHandler+0xf8>)
 800e97c:	f8d2 0400 	ldr.w	r0, [r2, #1024]	@ 0x400
 800e980:	f8d2 440c 	ldr.w	r4, [r2, #1036]	@ 0x40c
 800e984:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800e988:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 800e98c:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 800e990:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800e994:	f8c2 0400 	str.w	r0, [r2, #1024]	@ 0x400
 800e998:	f8c2 440c 	str.w	r4, [r2, #1036]	@ 0x40c
 800e99c:	4806      	ldr	r0, [pc, #24]	@ (800e9b8 <TIMER1_IRQHandler+0xfc>)
 800e99e:	f8c2 5428 	str.w	r5, [r2, #1064]	@ 0x428
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f8c1 2210 	str.w	r2, [r1, #528]	@ 0x210
 800e9a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9aa:	6801      	ldr	r1, [r0, #0]
 800e9ac:	e7b8      	b.n	800e920 <TIMER1_IRQHandler+0x64>
 800e9ae:	bf00      	nop
 800e9b0:	2001c000 	andcs	ip, r1, r0
 800e9b4:	40020000 	andmi	r0, r2, r0
 800e9b8:	2000d408 	andcs	sp, r0, r8, lsl #8
 800e9bc:	40026000 	andmi	r6, r2, r0

0800e9c0 <TIMER4_IRQHandler>:
 800e9c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e9c4:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	@ 0xc10
 800e9c8:	0752      	lsls	r2, r2, #29
 800e9ca:	d53e      	bpl.n	800ea4a <TIMER4_IRQHandler+0x8a>
 800e9cc:	4940      	ldr	r1, [pc, #256]	@ (800ead0 <TIMER4_IRQHandler+0x110>)
 800e9ce:	f8d1 2424 	ldr.w	r2, [r1, #1060]	@ 0x424
 800e9d2:	2a02      	cmp	r2, #2
 800e9d4:	b430      	push	{r4, r5}
 800e9d6:	d03f      	beq.n	800ea58 <TIMER4_IRQHandler+0x98>
 800e9d8:	2a04      	cmp	r2, #4
 800e9da:	d05e      	beq.n	800ea9a <TIMER4_IRQHandler+0xda>
 800e9dc:	2a01      	cmp	r2, #1
 800e9de:	d126      	bne.n	800ea2e <TIMER4_IRQHandler+0x6e>
 800e9e0:	4a3c      	ldr	r2, [pc, #240]	@ (800ead4 <TIMER4_IRQHandler+0x114>)
 800e9e2:	f8d2 4800 	ldr.w	r4, [r2, #2048]	@ 0x800
 800e9e6:	f8d2 080c 	ldr.w	r0, [r2, #2060]	@ 0x80c
 800e9ea:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
 800e9ee:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 800e9f2:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 800e9f6:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800e9fa:	f8c2 4800 	str.w	r4, [r2, #2048]	@ 0x800
 800e9fe:	f8c2 080c 	str.w	r0, [r2, #2060]	@ 0x80c
 800ea02:	f8d2 0820 	ldr.w	r0, [r2, #2080]	@ 0x820
 800ea06:	f8d2 5824 	ldr.w	r5, [r2, #2084]	@ 0x824
 800ea0a:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 800ea0e:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 800ea12:	f8c2 0820 	str.w	r0, [r2, #2080]	@ 0x820
 800ea16:	2402      	movs	r4, #2
 800ea18:	482f      	ldr	r0, [pc, #188]	@ (800ead8 <TIMER4_IRQHandler+0x118>)
 800ea1a:	f8c2 5824 	str.w	r5, [r2, #2084]	@ 0x824
 800ea1e:	f8c1 4424 	str.w	r4, [r1, #1060]	@ 0x424
 800ea22:	f8d3 2c24 	ldr.w	r2, [r3, #3108]	@ 0xc24
 800ea26:	6841      	ldr	r1, [r0, #4]
 800ea28:	440a      	add	r2, r1
 800ea2a:	f8c3 2c38 	str.w	r2, [r3, #3128]	@ 0xc38
 800ea2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea32:	f06f 0204 	mvn.w	r2, #4
 800ea36:	f8c3 2c10 	str.w	r2, [r3, #3088]	@ 0xc10
 800ea3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea42:	bc30      	pop	{r4, r5}
 800ea44:	f8c3 2c10 	str.w	r2, [r3, #3088]	@ 0xc10
 800ea48:	4770      	bx	lr
 800ea4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea52:	f8c3 2c10 	str.w	r2, [r3, #3088]	@ 0xc10
 800ea56:	4770      	bx	lr
 800ea58:	4b20      	ldr	r3, [pc, #128]	@ (800eadc <TIMER4_IRQHandler+0x11c>)
 800ea5a:	4c21      	ldr	r4, [pc, #132]	@ (800eae0 <TIMER4_IRQHandler+0x120>)
 800ea5c:	f8d3 24a0 	ldr.w	r2, [r3, #1184]	@ 0x4a0
 800ea60:	f022 0201 	bic.w	r2, r2, #1
 800ea64:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
 800ea68:	f8d3 040c 	ldr.w	r0, [r3, #1036]	@ 0x40c
 800ea6c:	f440 1000 	orr.w	r0, r0, #2097152	@ 0x200000
 800ea70:	f8c3 040c 	str.w	r0, [r3, #1036]	@ 0x40c
 800ea74:	f042 0211 	orr.w	r2, r2, #17
 800ea78:	f501 7005 	add.w	r0, r1, #532	@ 0x214
 800ea7c:	f8b1 1418 	ldrh.w	r1, [r1, #1048]	@ 0x418
 800ea80:	f8c3 04ac 	str.w	r0, [r3, #1196]	@ 0x4ac
 800ea84:	f8c3 14a4 	str.w	r1, [r3, #1188]	@ 0x4a4
 800ea88:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
 800ea8c:	f8d4 3414 	ldr.w	r3, [r4, #1044]	@ 0x414
 800ea90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea94:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
 800ea98:	e7c9      	b.n	800ea2e <TIMER4_IRQHandler+0x6e>
 800ea9a:	4a0e      	ldr	r2, [pc, #56]	@ (800ead4 <TIMER4_IRQHandler+0x114>)
 800ea9c:	f8d2 0800 	ldr.w	r0, [r2, #2048]	@ 0x800
 800eaa0:	f8d2 480c 	ldr.w	r4, [r2, #2060]	@ 0x80c
 800eaa4:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 800eaa8:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800eaac:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
 800eab0:	2540      	movs	r5, #64	@ 0x40
 800eab2:	f8c2 0800 	str.w	r0, [r2, #2048]	@ 0x800
 800eab6:	f8c2 480c 	str.w	r4, [r2, #2060]	@ 0x80c
 800eaba:	4807      	ldr	r0, [pc, #28]	@ (800ead8 <TIMER4_IRQHandler+0x118>)
 800eabc:	f8c2 5828 	str.w	r5, [r2, #2088]	@ 0x828
 800eac0:	2201      	movs	r2, #1
 800eac2:	f8c1 2424 	str.w	r2, [r1, #1060]	@ 0x424
 800eac6:	f8d3 2c24 	ldr.w	r2, [r3, #3108]	@ 0xc24
 800eaca:	6801      	ldr	r1, [r0, #0]
 800eacc:	e7ac      	b.n	800ea28 <TIMER4_IRQHandler+0x68>
 800eace:	bf00      	nop
 800ead0:	2001c000 	andcs	ip, r1, r0
 800ead4:	40020000 	andmi	r0, r2, r0
 800ead8:	2000d408 	andcs	sp, r0, r8, lsl #8
 800eadc:	40026000 	andmi	r6, r2, r0
 800eae0:	40011000 	andmi	r1, r1, r0

0800eae4 <TIMER6_IRQHandler>:
 800eae4:	4b06      	ldr	r3, [pc, #24]	@ (800eb00 <TIMER6_IRQHandler+0x1c>)
 800eae6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 800eaea:	07da      	lsls	r2, r3, #31
 800eaec:	bf41      	itttt	mi
 800eaee:	4905      	ldrmi	r1, [pc, #20]	@ (800eb04 <TIMER6_IRQHandler+0x20>)
 800eaf0:	684a      	ldrmi	r2, [r1, #4]
 800eaf2:	3201      	addmi	r2, #1
 800eaf4:	604a      	strmi	r2, [r1, #4]
 800eaf6:	4a02      	ldr	r2, [pc, #8]	@ (800eb00 <TIMER6_IRQHandler+0x1c>)
 800eaf8:	43db      	mvns	r3, r3
 800eafa:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
 800eafe:	4770      	bx	lr
 800eb00:	40001000 	andmi	r1, r0, r0
 800eb04:	2001bcb8 			@ <UNDEFINED> instruction: 0x2001bcb8

0800eb08 <DMA0_Channel3_IRQHandler>:
 800eb08:	4b17      	ldr	r3, [pc, #92]	@ (800eb68 <DMA0_Channel3_IRQHandler+0x60>)
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800eb0e:	0110      	lsls	r0, r2, #4
 800eb10:	d516      	bpl.n	800eb40 <DMA0_Channel3_IRQHandler+0x38>
 800eb12:	06ca      	lsls	r2, r1, #27
 800eb14:	d514      	bpl.n	800eb40 <DMA0_Channel3_IRQHandler+0x38>
 800eb16:	b510      	push	{r4, lr}
 800eb18:	4c14      	ldr	r4, [pc, #80]	@ (800eb6c <DMA0_Channel3_IRQHandler+0x64>)
 800eb1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eb1c:	f8d4 120c 	ldr.w	r1, [r4, #524]	@ 0x20c
 800eb20:	f022 0298 	bic.w	r2, r2, #152	@ 0x98
 800eb24:	659a      	str	r2, [r3, #88]	@ 0x58
 800eb26:	b989      	cbnz	r1, 800eb4c <DMA0_Channel3_IRQHandler+0x44>
 800eb28:	f8c4 1210 	str.w	r1, [r4, #528]	@ 0x210
 800eb2c:	4a10      	ldr	r2, [pc, #64]	@ (800eb70 <DMA0_Channel3_IRQHandler+0x68>)
 800eb2e:	6813      	ldr	r3, [r2, #0]
 800eb30:	3301      	adds	r3, #1
 800eb32:	6013      	str	r3, [r2, #0]
 800eb34:	4a0c      	ldr	r2, [pc, #48]	@ (800eb68 <DMA0_Channel3_IRQHandler+0x60>)
 800eb36:	6893      	ldr	r3, [r2, #8]
 800eb38:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 800eb3c:	6093      	str	r3, [r2, #8]
 800eb3e:	bd10      	pop	{r4, pc}
 800eb40:	4a09      	ldr	r2, [pc, #36]	@ (800eb68 <DMA0_Channel3_IRQHandler+0x60>)
 800eb42:	6893      	ldr	r3, [r2, #8]
 800eb44:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 800eb48:	6093      	str	r3, [r2, #8]
 800eb4a:	4770      	bx	lr
 800eb4c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800eb50:	4b08      	ldr	r3, [pc, #32]	@ (800eb74 <DMA0_Channel3_IRQHandler+0x6c>)
 800eb52:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800eb54:	689b      	ldr	r3, [r3, #8]
 800eb56:	2102      	movs	r1, #2
 800eb58:	441a      	add	r2, r3
 800eb5a:	f00a fa11 	bl	8018f80 <timer_channel_output_pulse_value_config>
 800eb5e:	2304      	movs	r3, #4
 800eb60:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
 800eb64:	e7e2      	b.n	800eb2c <DMA0_Channel3_IRQHandler+0x24>
 800eb66:	bf00      	nop
 800eb68:	40026000 	andmi	r6, r2, r0
 800eb6c:	2001c000 	andcs	ip, r1, r0
 800eb70:	2000de64 	andcs	sp, r0, r4, ror #28
 800eb74:	2000d408 	andcs	sp, r0, r8, lsl #8

0800eb78 <DMA1_Channel6_IRQHandler>:
 800eb78:	4b1c      	ldr	r3, [pc, #112]	@ (800ebec <DMA1_Channel6_IRQHandler+0x74>)
 800eb7a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800eb7e:	f8d3 14a0 	ldr.w	r1, [r3, #1184]	@ 0x4a0
 800eb82:	0290      	lsls	r0, r2, #10
 800eb84:	d51a      	bpl.n	800ebbc <DMA1_Channel6_IRQHandler+0x44>
 800eb86:	06ca      	lsls	r2, r1, #27
 800eb88:	d518      	bpl.n	800ebbc <DMA1_Channel6_IRQHandler+0x44>
 800eb8a:	b510      	push	{r4, lr}
 800eb8c:	4c18      	ldr	r4, [pc, #96]	@ (800ebf0 <DMA1_Channel6_IRQHandler+0x78>)
 800eb8e:	f8d3 24a0 	ldr.w	r2, [r3, #1184]	@ 0x4a0
 800eb92:	f8d4 1420 	ldr.w	r1, [r4, #1056]	@ 0x420
 800eb96:	f022 0298 	bic.w	r2, r2, #152	@ 0x98
 800eb9a:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
 800eb9e:	b9a9      	cbnz	r1, 800ebcc <DMA1_Channel6_IRQHandler+0x54>
 800eba0:	f8c4 1424 	str.w	r1, [r4, #1060]	@ 0x424
 800eba4:	4a13      	ldr	r2, [pc, #76]	@ (800ebf4 <DMA1_Channel6_IRQHandler+0x7c>)
 800eba6:	69d3      	ldr	r3, [r2, #28]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	61d3      	str	r3, [r2, #28]
 800ebac:	4a0f      	ldr	r2, [pc, #60]	@ (800ebec <DMA1_Channel6_IRQHandler+0x74>)
 800ebae:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800ebb2:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800ebb6:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
 800ebba:	bd10      	pop	{r4, pc}
 800ebbc:	4a0b      	ldr	r2, [pc, #44]	@ (800ebec <DMA1_Channel6_IRQHandler+0x74>)
 800ebbe:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800ebc2:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800ebc6:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
 800ebca:	4770      	bx	lr
 800ebcc:	4b0a      	ldr	r3, [pc, #40]	@ (800ebf8 <DMA1_Channel6_IRQHandler+0x80>)
 800ebce:	480b      	ldr	r0, [pc, #44]	@ (800ebfc <DMA1_Channel6_IRQHandler+0x84>)
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ebd6:	2101      	movs	r1, #1
 800ebd8:	f8d2 2c24 	ldr.w	r2, [r2, #3108]	@ 0xc24
 800ebdc:	441a      	add	r2, r3
 800ebde:	f00a f9cf 	bl	8018f80 <timer_channel_output_pulse_value_config>
 800ebe2:	2304      	movs	r3, #4
 800ebe4:	f8c4 3424 	str.w	r3, [r4, #1060]	@ 0x424
 800ebe8:	e7dc      	b.n	800eba4 <DMA1_Channel6_IRQHandler+0x2c>
 800ebea:	bf00      	nop
 800ebec:	40026000 	andmi	r6, r2, r0
 800ebf0:	2001c000 	andcs	ip, r1, r0
 800ebf4:	2000de64 	andcs	sp, r0, r4, ror #28
 800ebf8:	2000d408 	andcs	sp, r0, r8, lsl #8
 800ebfc:	40000c00 	andmi	r0, r0, r0, lsl #24

0800ec00 <Dmx::Dmx()>:
 800ec00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec04:	49a7      	ldr	r1, [pc, #668]	@ (800eea4 <Dmx::Dmx()+0x2a4>)
 800ec06:	4ba8      	ldr	r3, [pc, #672]	@ (800eea8 <Dmx::Dmx()+0x2a8>)
 800ec08:	f8df b2d0 	ldr.w	fp, [pc, #720]	@ 800eedc <Dmx::Dmx()+0x2dc>
 800ec0c:	6008      	str	r0, [r1, #0]
 800ec0e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800ec12:	e9c0 2200 	strd	r2, r2, [r0]
 800ec16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec1a:	6102      	str	r2, [r0, #16]
 800ec1c:	21b0      	movs	r1, #176	@ 0xb0
 800ec1e:	220c      	movs	r2, #12
 800ec20:	2500      	movs	r5, #0
 800ec22:	e9c3 1200 	strd	r1, r2, [r3]
 800ec26:	4ea1      	ldr	r6, [pc, #644]	@ (800eeac <Dmx::Dmx()+0x2ac>)
 800ec28:	7705      	strb	r5, [r0, #28]
 800ec2a:	f44f 620c 	mov.w	r2, #2240	@ 0x8c0
 800ec2e:	b08f      	sub	sp, #60	@ 0x3c
 800ec30:	4607      	mov	r7, r0
 800ec32:	609a      	str	r2, [r3, #8]
 800ec34:	46d8      	mov	r8, fp
 800ec36:	f100 0910 	add.w	r9, r0, #16
 800ec3a:	f04f 0a01 	mov.w	sl, #1
 800ec3e:	462c      	mov	r4, r5
 800ec40:	e9d6 0300 	ldrd	r0, r3, [r6]
 800ec44:	2202      	movs	r2, #2
 800ec46:	2101      	movs	r1, #1
 800ec48:	9303      	str	r3, [sp, #12]
 800ec4a:	9002      	str	r0, [sp, #8]
 800ec4c:	f009 fe5e 	bl	801890c <gpio_mode_set>
 800ec50:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800ec54:	2100      	movs	r1, #0
 800ec56:	2202      	movs	r2, #2
 800ec58:	f009 fe7a 	bl	8018950 <gpio_output_options_set>
 800ec5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec60:	f849 3c08 	str.w	r3, [r9, #-8]
 800ec64:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	4b91      	ldr	r3, [pc, #580]	@ (800eeb0 <Dmx::Dmx()+0x2b0>)
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ec72:	f000 8110 	beq.w	800ee96 <Dmx::Dmx()+0x296>
 800ec76:	f8c9 a000 	str.w	sl, [r9]
 800ec7a:	b113      	cbz	r3, 800ec82 <Dmx::Dmx()+0x82>
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	f7ff fdcd 	bl	800e81c <Dmx::StopData(unsigned long) [clone .part.0]>
 800ec82:	e9d6 3200 	ldrd	r3, r2, [r6]
 800ec86:	629a      	str	r2, [r3, #40]	@ 0x28
 800ec88:	498a      	ldr	r1, [pc, #552]	@ (800eeb4 <Dmx::Dmx()+0x2b4>)
 800ec8a:	f240 521c 	movw	r2, #1308	@ 0x51c
 800ec8e:	f44f 7305 	mov.w	r3, #532	@ 0x214
 800ec92:	fb02 1205 	mla	r2, r2, r5, r1
 800ec96:	fb03 b305 	mla	r3, r3, r5, fp
 800ec9a:	f8c2 4518 	str.w	r4, [r2, #1304]	@ 0x518
 800ec9e:	f8c3 4210 	str.w	r4, [r3, #528]	@ 0x210
 800eca2:	f240 2301 	movw	r3, #513	@ 0x201
 800eca6:	f8c8 420c 	str.w	r4, [r8, #524]	@ 0x20c
 800ecaa:	f8c8 3204 	str.w	r3, [r8, #516]	@ 0x204
 800ecae:	4640      	mov	r0, r8
 800ecb0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	f00b f93b 	bl	8019f30 <memset>
 800ecba:	3608      	adds	r6, #8
 800ecbc:	f508 7805 	add.w	r8, r8, #532	@ 0x214
 800ecc0:	b90d      	cbnz	r5, 800ecc6 <Dmx::Dmx()+0xc6>
 800ecc2:	2501      	movs	r5, #1
 800ecc4:	e7bc      	b.n	800ec40 <Dmx::Dmx()+0x40>
 800ecc6:	4e7c      	ldr	r6, [pc, #496]	@ (800eeb8 <Dmx::Dmx()+0x2b8>)
 800ecc8:	4d7c      	ldr	r5, [pc, #496]	@ (800eebc <Dmx::Dmx()+0x2bc>)
 800ecca:	f640 4015 	movw	r0, #3093	@ 0xc15
 800ecce:	f009 fe9f 	bl	8018a10 <rcu_periph_clock_enable>
 800ecd2:	f640 4016 	movw	r0, #3094	@ 0xc16
 800ecd6:	f009 fe9b 	bl	8018a10 <rcu_periph_clock_enable>
 800ecda:	4630      	mov	r0, r6
 800ecdc:	2103      	movs	r1, #3
 800ecde:	f009 fa7b 	bl	80181d8 <dma_deinit>
 800ece2:	f04f 0b40 	mov.w	fp, #64	@ 0x40
 800ece6:	4b76      	ldr	r3, [pc, #472]	@ (800eec0 <Dmx::Dmx()+0x2c0>)
 800ece8:	9305      	str	r3, [sp, #20]
 800ecea:	aa05      	add	r2, sp, #20
 800ecec:	4630      	mov	r0, r6
 800ecee:	f44f 3900 	mov.w	r9, #131072	@ 0x20000
 800ecf2:	2103      	movs	r1, #3
 800ecf4:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 800ecf8:	9408      	str	r4, [sp, #32]
 800ecfa:	f8cd a018 	str.w	sl, [sp, #24]
 800ecfe:	9409      	str	r4, [sp, #36]	@ 0x24
 800ed00:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800ed04:	f009 faa0 	bl	8018248 <dma_single_data_mode_init>
 800ed08:	4630      	mov	r0, r6
 800ed0a:	2103      	movs	r1, #3
 800ed0c:	f009 fb22 	bl	8018354 <dma_circulation_disable>
 800ed10:	2204      	movs	r2, #4
 800ed12:	2103      	movs	r1, #3
 800ed14:	4630      	mov	r0, r6
 800ed16:	f009 fb25 	bl	8018364 <dma_channel_subperipheral_select>
 800ed1a:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 800ed1c:	f04f 0810 	mov.w	r8, #16
 800ed20:	f023 0398 	bic.w	r3, r3, #152	@ 0x98
 800ed24:	65b3      	str	r3, [r6, #88]	@ 0x58
 800ed26:	f885 830e 	strb.w	r8, [r5, #782]	@ 0x30e
 800ed2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ed2e:	602b      	str	r3, [r5, #0]
 800ed30:	4864      	ldr	r0, [pc, #400]	@ (800eec4 <Dmx::Dmx()+0x2c4>)
 800ed32:	2106      	movs	r1, #6
 800ed34:	f009 fa50 	bl	80181d8 <dma_deinit>
 800ed38:	4b63      	ldr	r3, [pc, #396]	@ (800eec8 <Dmx::Dmx()+0x2c8>)
 800ed3a:	4862      	ldr	r0, [pc, #392]	@ (800eec4 <Dmx::Dmx()+0x2c4>)
 800ed3c:	9305      	str	r3, [sp, #20]
 800ed3e:	aa05      	add	r2, sp, #20
 800ed40:	2106      	movs	r1, #6
 800ed42:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800ed46:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 800ed4a:	f8cd a018 	str.w	sl, [sp, #24]
 800ed4e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800ed52:	f009 fa79 	bl	8018248 <dma_single_data_mode_init>
 800ed56:	485b      	ldr	r0, [pc, #364]	@ (800eec4 <Dmx::Dmx()+0x2c4>)
 800ed58:	2106      	movs	r1, #6
 800ed5a:	f009 fafb 	bl	8018354 <dma_circulation_disable>
 800ed5e:	4859      	ldr	r0, [pc, #356]	@ (800eec4 <Dmx::Dmx()+0x2c4>)
 800ed60:	2205      	movs	r2, #5
 800ed62:	2106      	movs	r1, #6
 800ed64:	f009 fafe 	bl	8018364 <dma_channel_subperipheral_select>
 800ed68:	f8d6 34a0 	ldr.w	r3, [r6, #1184]	@ 0x4a0
 800ed6c:	f023 0398 	bic.w	r3, r3, #152	@ 0x98
 800ed70:	f8c6 34a0 	str.w	r3, [r6, #1184]	@ 0x4a0
 800ed74:	f885 8345 	strb.w	r8, [r5, #837]	@ 0x345
 800ed78:	2320      	movs	r3, #32
 800ed7a:	60ab      	str	r3, [r5, #8]
 800ed7c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ed80:	f009 fe46 	bl	8018a10 <rcu_periph_clock_enable>
 800ed84:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800ed88:	f009 fefe 	bl	8018b88 <timer_deinit>
 800ed8c:	a805      	add	r0, sp, #20
 800ed8e:	f009 ffa1 	bl	8018cd4 <timer_struct_para_init>
 800ed92:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800ed96:	a905      	add	r1, sp, #20
 800ed98:	f04f 09ef 	mov.w	r9, #239	@ 0xef
 800ed9c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800eda0:	9406      	str	r4, [sp, #24]
 800eda2:	f88d 4020 	strb.w	r4, [sp, #32]
 800eda6:	9607      	str	r6, [sp, #28]
 800eda8:	f8cd 9014 	str.w	r9, [sp, #20]
 800edac:	f009 ff9a 	bl	8018ce4 <timer_init>
 800edb0:	4631      	mov	r1, r6
 800edb2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800edb6:	f00a f93b 	bl	8019030 <timer_flag_clear>
 800edba:	4631      	mov	r1, r6
 800edbc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800edc0:	f00a f93d 	bl	801903e <timer_interrupt_flag_clear>
 800edc4:	4642      	mov	r2, r8
 800edc6:	2102      	movs	r1, #2
 800edc8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800edcc:	f00a f8b2 	bl	8018f34 <timer_channel_output_mode_config>
 800edd0:	4632      	mov	r2, r6
 800edd2:	2102      	movs	r1, #2
 800edd4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800edd8:	f00a f8d2 	bl	8018f80 <timer_channel_output_pulse_value_config>
 800eddc:	2108      	movs	r1, #8
 800edde:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800ede2:	f00a f928 	bl	8019036 <timer_interrupt_enable>
 800ede6:	f885 431c 	strb.w	r4, [r5, #796]	@ 0x31c
 800edea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800edee:	602b      	str	r3, [r5, #0]
 800edf0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800edf4:	f009 ffaa 	bl	8018d4c <timer_enable>
 800edf8:	f241 0003 	movw	r0, #4099	@ 0x1003
 800edfc:	f009 fe08 	bl	8018a10 <rcu_periph_clock_enable>
 800ee00:	4832      	ldr	r0, [pc, #200]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee02:	f009 fec1 	bl	8018b88 <timer_deinit>
 800ee06:	a805      	add	r0, sp, #20
 800ee08:	f009 ff64 	bl	8018cd4 <timer_struct_para_init>
 800ee0c:	a905      	add	r1, sp, #20
 800ee0e:	482f      	ldr	r0, [pc, #188]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee10:	f8cd 9014 	str.w	r9, [sp, #20]
 800ee14:	e9cd 4606 	strd	r4, r6, [sp, #24]
 800ee18:	f88d 4020 	strb.w	r4, [sp, #32]
 800ee1c:	f009 ff62 	bl	8018ce4 <timer_init>
 800ee20:	4631      	mov	r1, r6
 800ee22:	482a      	ldr	r0, [pc, #168]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee24:	f00a f904 	bl	8019030 <timer_flag_clear>
 800ee28:	4631      	mov	r1, r6
 800ee2a:	4828      	ldr	r0, [pc, #160]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee2c:	f00a f907 	bl	801903e <timer_interrupt_flag_clear>
 800ee30:	4642      	mov	r2, r8
 800ee32:	4826      	ldr	r0, [pc, #152]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee34:	2101      	movs	r1, #1
 800ee36:	f00a f87d 	bl	8018f34 <timer_channel_output_mode_config>
 800ee3a:	4632      	mov	r2, r6
 800ee3c:	4823      	ldr	r0, [pc, #140]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee3e:	2101      	movs	r1, #1
 800ee40:	f00a f89e 	bl	8018f80 <timer_channel_output_pulse_value_config>
 800ee44:	4821      	ldr	r0, [pc, #132]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee46:	2104      	movs	r1, #4
 800ee48:	f00a f8f5 	bl	8019036 <timer_interrupt_enable>
 800ee4c:	f885 4332 	strb.w	r4, [r5, #818]	@ 0x332
 800ee50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ee54:	606b      	str	r3, [r5, #4]
 800ee56:	481d      	ldr	r0, [pc, #116]	@ (800eecc <Dmx::Dmx()+0x2cc>)
 800ee58:	f04f 0802 	mov.w	r8, #2
 800ee5c:	f009 ff76 	bl	8018d4c <timer_enable>
 800ee60:	491b      	ldr	r1, [pc, #108]	@ (800eed0 <Dmx::Dmx()+0x2d0>)
 800ee62:	481c      	ldr	r0, [pc, #112]	@ (800eed4 <Dmx::Dmx()+0x2d4>)
 800ee64:	f8cd 8000 	str.w	r8, [sp]
 800ee68:	2300      	movs	r3, #0
 800ee6a:	2208      	movs	r2, #8
 800ee6c:	f00a f9ee 	bl	801924c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
 800ee70:	f885 4327 	strb.w	r4, [r5, #807]	@ 0x327
 800ee74:	2680      	movs	r6, #128	@ 0x80
 800ee76:	606e      	str	r6, [r5, #4]
 800ee78:	4915      	ldr	r1, [pc, #84]	@ (800eed0 <Dmx::Dmx()+0x2d0>)
 800ee7a:	4817      	ldr	r0, [pc, #92]	@ (800eed8 <Dmx::Dmx()+0x2d8>)
 800ee7c:	f8cd 8000 	str.w	r8, [sp]
 800ee80:	2300      	movs	r3, #0
 800ee82:	2208      	movs	r2, #8
 800ee84:	f00a f9e2 	bl	801924c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
 800ee88:	f885 4347 	strb.w	r4, [r5, #839]	@ 0x347
 800ee8c:	60ae      	str	r6, [r5, #8]
 800ee8e:	4638      	mov	r0, r7
 800ee90:	b00f      	add	sp, #60	@ 0x3c
 800ee92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f43f aef6 	beq.w	800ec88 <Dmx::Dmx()+0x88>
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	f7ff fcbd 	bl	800e81c <Dmx::StopData(unsigned long) [clone .part.0]>
 800eea2:	e6f1      	b.n	800ec88 <Dmx::Dmx()+0x88>
 800eea4:	2000d404 	andcs	sp, r0, r4, lsl #8
 800eea8:	2000d408 	andcs	sp, r0, r8, lsl #8
 800eeac:	0801ecec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, fp, sp, lr, pc}
 800eeb0:	2000de9c 	mulcs	r0, ip, lr
 800eeb4:	2000d414 	andcs	sp, r0, r4, lsl r4
 800eeb8:	40026000 	andmi	r6, r2, r0
 800eebc:	e000e100 	and	lr, r0, r0, lsl #2
 800eec0:	40004804 	andmi	r4, r0, r4, lsl #16
 800eec4:	40026400 	andmi	r6, r2, r0, lsl #8
 800eec8:	40011404 	andmi	r1, r1, r4, lsl #8
 800eecc:	40000c00 	andmi	r0, r0, r0, lsl #24
 800eed0:	0003d090 	muleq	r3, r0, r0
 800eed4:	40004800 	andmi	r4, r0, r0, lsl #16
 800eed8:	40011400 	andmi	r1, r1, r0, lsl #8
 800eedc:	2001c000 	andcs	ip, r1, r0

0800eee0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>:
 800eee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800eee8:	4615      	mov	r5, r2
 800eeea:	6972      	ldr	r2, [r6, #20]
 800eeec:	42aa      	cmp	r2, r5
 800eeee:	461f      	mov	r7, r3
 800eef0:	460c      	mov	r4, r1
 800eef2:	d021      	beq.n	800ef38 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x58>
 800eef4:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800efb0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd0>
 800eef8:	6175      	str	r5, [r6, #20]
 800eefa:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 800eefe:	b10b      	cbz	r3, 800ef04 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x24>
 800ef00:	f7ff fc8c 	bl	800e81c <Dmx::StopData(unsigned long) [clone .part.0]>
 800ef04:	b975      	cbnz	r5, 800ef24 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x44>
 800ef06:	4b29      	ldr	r3, [pc, #164]	@ (800efac <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xcc>)
 800ef08:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800ef0c:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 800ef10:	6852      	ldr	r2, [r2, #4]
 800ef12:	619a      	str	r2, [r3, #24]
 800ef14:	b127      	cbz	r7, 800ef20 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x40>
 800ef16:	6975      	ldr	r5, [r6, #20]
 800ef18:	b9cd      	cbnz	r5, 800ef4e <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x6e>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800ef20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef24:	2d01      	cmp	r5, #1
 800ef26:	d1f5      	bne.n	800ef14 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x34>
 800ef28:	4b20      	ldr	r3, [pc, #128]	@ (800efac <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xcc>)
 800ef2a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800ef2e:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 800ef32:	6852      	ldr	r2, [r2, #4]
 800ef34:	629a      	str	r2, [r3, #40]	@ 0x28
 800ef36:	e7ed      	b.n	800ef14 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x34>
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d134      	bne.n	800efa6 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xc6>
 800ef3c:	4b1c      	ldr	r3, [pc, #112]	@ (800efb0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd0>)
 800ef3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0ec      	beq.n	800ef20 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x40>
 800ef46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4a:	f7ff bc67 	b.w	800e81c <Dmx::StopData(unsigned long) [clone .part.0]>
 800ef4e:	4b19      	ldr	r3, [pc, #100]	@ (800efb4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd4>)
 800ef50:	4919      	ldr	r1, [pc, #100]	@ (800efb8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd8>)
 800ef52:	f240 521c 	movw	r2, #1308	@ 0x51c
 800ef56:	fb02 3304 	mla	r3, r2, r4, r3
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f8c3 2518 	str.w	r2, [r3, #1304]	@ 0x518
 800ef60:	4b16      	ldr	r3, [pc, #88]	@ (800efbc <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xdc>)
 800ef62:	4a17      	ldr	r2, [pc, #92]	@ (800efc0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xe0>)
 800ef64:	2c00      	cmp	r4, #0
 800ef66:	bf18      	it	ne
 800ef68:	4619      	movne	r1, r3
 800ef6a:	f1a3 030c 	sub.w	r3, r3, #12
 800ef6e:	bf18      	it	ne
 800ef70:	461a      	movne	r2, r3
 800ef72:	f3bf 8f5f 	dmb	sy
 800ef76:	6813      	ldr	r3, [r2, #0]
 800ef78:	061b      	lsls	r3, r3, #24
 800ef7a:	d5fa      	bpl.n	800ef72 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x92>
 800ef7c:	6813      	ldr	r3, [r2, #0]
 800ef7e:	f023 0320 	bic.w	r3, r3, #32
 800ef82:	6013      	str	r3, [r2, #0]
 800ef84:	6813      	ldr	r3, [r2, #0]
 800ef86:	f023 0310 	bic.w	r3, r3, #16
 800ef8a:	6013      	str	r3, [r2, #0]
 800ef8c:	680b      	ldr	r3, [r1, #0]
 800ef8e:	f043 0320 	orr.w	r3, r3, #32
 800ef92:	600b      	str	r3, [r1, #0]
 800ef94:	680b      	ldr	r3, [r1, #0]
 800ef96:	2202      	movs	r2, #2
 800ef98:	f043 0310 	orr.w	r3, r3, #16
 800ef9c:	600b      	str	r3, [r1, #0]
 800ef9e:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
 800efa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa6:	f8df 8008 	ldr.w	r8, [pc, #8]	@ 800efb0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd0>
 800efaa:	e7b5      	b.n	800ef18 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x38>
 800efac:	0801ecec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, fp, sp, lr, pc}
 800efb0:	2000de9c 	mulcs	r0, ip, lr
 800efb4:	2000d414 	andcs	sp, r0, r4, lsl r4
 800efb8:	4000480c 	andmi	r4, r0, ip, lsl #16
 800efbc:	4001140c 	andmi	r1, r1, ip, lsl #8
 800efc0:	40004800 	andmi	r4, r0, r0, lsl #16

0800efc4 <Dmx::GetTotalStatistics(unsigned long)>:
 800efc4:	4b06      	ldr	r3, [pc, #24]	@ (800efe0 <Dmx::GetTotalStatistics(unsigned long)+0x1c>)
 800efc6:	4807      	ldr	r0, [pc, #28]	@ (800efe4 <Dmx::GetTotalStatistics(unsigned long)+0x20>)
 800efc8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800efcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800efd0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800efd4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	6043      	str	r3, [r0, #4]
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	2000de4c 	andcs	sp, r0, ip, asr #28
 800efe4:	2000de64 	andcs	sp, r0, r4, ror #28

0800efe8 <Dmx::StartDmxOutput(unsigned long)>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	b339      	cbz	r1, 800f03c <Dmx::StartDmxOutput(unsigned long)+0x54>
 800efec:	2901      	cmp	r1, #1
 800efee:	d124      	bne.n	800f03a <Dmx::StartDmxOutput(unsigned long)+0x52>
 800eff0:	4c25      	ldr	r4, [pc, #148]	@ (800f088 <Dmx::StartDmxOutput(unsigned long)+0xa0>)
 800eff2:	2106      	movs	r1, #6
 800eff4:	4620      	mov	r0, r4
 800eff6:	f00a f903 	bl	8019200 <usart_flag_get>
 800effa:	2801      	cmp	r0, #1
 800effc:	d1f9      	bne.n	800eff2 <Dmx::StartDmxOutput(unsigned long)+0xa>
 800effe:	4b23      	ldr	r3, [pc, #140]	@ (800f08c <Dmx::StartDmxOutput(unsigned long)+0xa4>)
 800f000:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800f004:	f8d3 180c 	ldr.w	r1, [r3, #2060]	@ 0x80c
 800f008:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800f00c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f010:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800f014:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800f018:	4a1d      	ldr	r2, [pc, #116]	@ (800f090 <Dmx::StartDmxOutput(unsigned long)+0xa8>)
 800f01a:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800f01e:	2540      	movs	r5, #64	@ 0x40
 800f020:	f8c3 180c 	str.w	r1, [r3, #2060]	@ 0x80c
 800f024:	f8c3 5828 	str.w	r5, [r3, #2088]	@ 0x828
 800f028:	f8d4 3c24 	ldr.w	r3, [r4, #3108]	@ 0xc24
 800f02c:	6811      	ldr	r1, [r2, #0]
 800f02e:	4a19      	ldr	r2, [pc, #100]	@ (800f094 <Dmx::StartDmxOutput(unsigned long)+0xac>)
 800f030:	440b      	add	r3, r1
 800f032:	f8c4 3c38 	str.w	r3, [r4, #3128]	@ 0xc38
 800f036:	f8c2 0424 	str.w	r0, [r2, #1060]	@ 0x424
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	4c16      	ldr	r4, [pc, #88]	@ (800f098 <Dmx::StartDmxOutput(unsigned long)+0xb0>)
 800f03e:	2106      	movs	r1, #6
 800f040:	4620      	mov	r0, r4
 800f042:	f00a f8dd 	bl	8019200 <usart_flag_get>
 800f046:	2801      	cmp	r0, #1
 800f048:	d1f9      	bne.n	800f03e <Dmx::StartDmxOutput(unsigned long)+0x56>
 800f04a:	4b10      	ldr	r3, [pc, #64]	@ (800f08c <Dmx::StartDmxOutput(unsigned long)+0xa4>)
 800f04c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800f050:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 800f054:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800f058:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800f05c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
 800f060:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800f064:	4a0a      	ldr	r2, [pc, #40]	@ (800f090 <Dmx::StartDmxOutput(unsigned long)+0xa8>)
 800f066:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800f06a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800f06e:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 800f072:	f8c3 5428 	str.w	r5, [r3, #1064]	@ 0x428
 800f076:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f078:	6811      	ldr	r1, [r2, #0]
 800f07a:	4a06      	ldr	r2, [pc, #24]	@ (800f094 <Dmx::StartDmxOutput(unsigned long)+0xac>)
 800f07c:	440b      	add	r3, r1
 800f07e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f080:	f8c2 0210 	str.w	r0, [r2, #528]	@ 0x210
 800f084:	bd38      	pop	{r3, r4, r5, pc}
 800f086:	bf00      	nop
 800f088:	40011400 	andmi	r1, r1, r0, lsl #8
 800f08c:	40020000 	andmi	r0, r2, r0
 800f090:	2000d408 	andcs	sp, r0, r8, lsl #8
 800f094:	2001c000 	andcs	ip, r1, r0
 800f098:	40004800 	andmi	r4, r0, r0, lsl #16

0800f09c <Dmx::SetDmxBreakTime(unsigned long)>:
 800f09c:	4a15      	ldr	r2, [pc, #84]	@ (800f0f4 <Dmx::SetDmxBreakTime(unsigned long)+0x58>)
 800f09e:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 800f0a2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	@ 0x418
 800f0a6:	b410      	push	{r4}
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	4c13      	ldr	r4, [pc, #76]	@ (800f0f8 <Dmx::SetDmxBreakTime(unsigned long)+0x5c>)
 800f0ac:	bf38      	it	cc
 800f0ae:	4613      	movcc	r3, r2
 800f0b0:	469c      	mov	ip, r3
 800f0b2:	295c      	cmp	r1, #92	@ 0x5c
 800f0b4:	6863      	ldr	r3, [r4, #4]
 800f0b6:	6842      	ldr	r2, [r0, #4]
 800f0b8:	bf38      	it	cc
 800f0ba:	215c      	movcc	r1, #92	@ 0x5c
 800f0bc:	440b      	add	r3, r1
 800f0be:	6021      	str	r1, [r4, #0]
 800f0c0:	212c      	movs	r1, #44	@ 0x2c
 800f0c2:	fb01 330c 	mla	r3, r1, ip, r3
 800f0c6:	b16a      	cbz	r2, 800f0e4 <Dmx::SetDmxBreakTime(unsigned long)+0x48>
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d205      	bcs.n	800f0d8 <Dmx::SetDmxBreakTime(unsigned long)+0x3c>
 800f0cc:	185a      	adds	r2, r3, r1
 800f0ce:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 800f0d2:	428a      	cmp	r2, r1
 800f0d4:	bf38      	it	cc
 800f0d6:	460a      	movcc	r2, r1
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	60a3      	str	r3, [r4, #8]
 800f0dc:	6002      	str	r2, [r0, #0]
 800f0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f0e8:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 800f0ec:	428a      	cmp	r2, r1
 800f0ee:	bf38      	it	cc
 800f0f0:	460a      	movcc	r2, r1
 800f0f2:	e7f1      	b.n	800f0d8 <Dmx::SetDmxBreakTime(unsigned long)+0x3c>
 800f0f4:	2001c000 	andcs	ip, r1, r0
 800f0f8:	2000d408 	andcs	sp, r0, r8, lsl #8

0800f0fc <Dmx::GetDmxBreakTime() const>:
 800f0fc:	4b01      	ldr	r3, [pc, #4]	@ (800f104 <Dmx::GetDmxBreakTime() const+0x8>)
 800f0fe:	6818      	ldr	r0, [r3, #0]
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	2000d408 	andcs	sp, r0, r8, lsl #8

0800f108 <Dmx::SetDmxMabTime(unsigned long)>:
 800f108:	4a15      	ldr	r2, [pc, #84]	@ (800f160 <Dmx::SetDmxMabTime(unsigned long)+0x58>)
 800f10a:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 800f10e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	@ 0x418
 800f112:	b410      	push	{r4}
 800f114:	4293      	cmp	r3, r2
 800f116:	4c13      	ldr	r4, [pc, #76]	@ (800f164 <Dmx::SetDmxMabTime(unsigned long)+0x5c>)
 800f118:	bf38      	it	cc
 800f11a:	4613      	movcc	r3, r2
 800f11c:	469c      	mov	ip, r3
 800f11e:	290c      	cmp	r1, #12
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	6842      	ldr	r2, [r0, #4]
 800f124:	bf38      	it	cc
 800f126:	210c      	movcc	r1, #12
 800f128:	440b      	add	r3, r1
 800f12a:	6061      	str	r1, [r4, #4]
 800f12c:	212c      	movs	r1, #44	@ 0x2c
 800f12e:	fb01 330c 	mla	r3, r1, ip, r3
 800f132:	b16a      	cbz	r2, 800f150 <Dmx::SetDmxMabTime(unsigned long)+0x48>
 800f134:	429a      	cmp	r2, r3
 800f136:	d205      	bcs.n	800f144 <Dmx::SetDmxMabTime(unsigned long)+0x3c>
 800f138:	185a      	adds	r2, r3, r1
 800f13a:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 800f13e:	428a      	cmp	r2, r1
 800f140:	bf38      	it	cc
 800f142:	460a      	movcc	r2, r1
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	60a3      	str	r3, [r4, #8]
 800f148:	6002      	str	r2, [r0, #0]
 800f14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f14e:	4770      	bx	lr
 800f150:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f154:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 800f158:	428a      	cmp	r2, r1
 800f15a:	bf38      	it	cc
 800f15c:	460a      	movcc	r2, r1
 800f15e:	e7f1      	b.n	800f144 <Dmx::SetDmxMabTime(unsigned long)+0x3c>
 800f160:	2001c000 	andcs	ip, r1, r0
 800f164:	2000d408 	andcs	sp, r0, r8, lsl #8

0800f168 <Dmx::GetDmxMabTime() const>:
 800f168:	4b01      	ldr	r3, [pc, #4]	@ (800f170 <Dmx::GetDmxMabTime() const+0x8>)
 800f16a:	6858      	ldr	r0, [r3, #4]
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	2000d408 	andcs	sp, r0, r8, lsl #8

0800f174 <Dmx::SetDmxPeriodTime(unsigned long)>:
 800f174:	4a15      	ldr	r2, [pc, #84]	@ (800f1cc <Dmx::SetDmxPeriodTime(unsigned long)+0x58>)
 800f176:	6041      	str	r1, [r0, #4]
 800f178:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 800f17c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	@ 0x418
 800f180:	4293      	cmp	r3, r2
 800f182:	bf38      	it	cc
 800f184:	4613      	movcc	r3, r2
 800f186:	4a12      	ldr	r2, [pc, #72]	@ (800f1d0 <Dmx::SetDmxPeriodTime(unsigned long)+0x5c>)
 800f188:	b510      	push	{r4, lr}
 800f18a:	469c      	mov	ip, r3
 800f18c:	e9d2 3400 	ldrd	r3, r4, [r2]
 800f190:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 800f194:	4423      	add	r3, r4
 800f196:	fb0e 330c 	mla	r3, lr, ip, r3
 800f19a:	b161      	cbz	r1, 800f1b6 <Dmx::SetDmxPeriodTime(unsigned long)+0x42>
 800f19c:	4299      	cmp	r1, r3
 800f19e:	d206      	bcs.n	800f1ae <Dmx::SetDmxPeriodTime(unsigned long)+0x3a>
 800f1a0:	eb03 010e 	add.w	r1, r3, lr
 800f1a4:	f240 4cb4 	movw	ip, #1204	@ 0x4b4
 800f1a8:	4561      	cmp	r1, ip
 800f1aa:	bf38      	it	cc
 800f1ac:	4661      	movcc	r1, ip
 800f1ae:	1acb      	subs	r3, r1, r3
 800f1b0:	6001      	str	r1, [r0, #0]
 800f1b2:	6093      	str	r3, [r2, #8]
 800f1b4:	bd10      	pop	{r4, pc}
 800f1b6:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800f1ba:	f240 4cb4 	movw	ip, #1204	@ 0x4b4
 800f1be:	4561      	cmp	r1, ip
 800f1c0:	bf38      	it	cc
 800f1c2:	4661      	movcc	r1, ip
 800f1c4:	1acb      	subs	r3, r1, r3
 800f1c6:	6001      	str	r1, [r0, #0]
 800f1c8:	6093      	str	r3, [r2, #8]
 800f1ca:	bd10      	pop	{r4, pc}
 800f1cc:	2001c000 	andcs	ip, r1, r0
 800f1d0:	2000d408 	andcs	sp, r0, r8, lsl #8

0800f1d4 <Dmx::SetDmxSlots(unsigned short)>:
 800f1d4:	1e8b      	subs	r3, r1, #2
 800f1d6:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800f1da:	d829      	bhi.n	800f230 <Dmx::SetDmxSlots(unsigned short)+0x5c>
 800f1dc:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f1e0:	428a      	cmp	r2, r1
 800f1e2:	bf28      	it	cs
 800f1e4:	460a      	movcs	r2, r1
 800f1e6:	428b      	cmp	r3, r1
 800f1e8:	bf28      	it	cs
 800f1ea:	460b      	movcs	r3, r1
 800f1ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f1f0:	b430      	push	{r4, r5}
 800f1f2:	4d12      	ldr	r5, [pc, #72]	@ (800f23c <Dmx::SetDmxSlots(unsigned short)+0x68>)
 800f1f4:	6101      	str	r1, [r0, #16]
 800f1f6:	f8d5 4204 	ldr.w	r4, [r5, #516]	@ 0x204
 800f1fa:	f8d5 5418 	ldr.w	r5, [r5, #1048]	@ 0x418
 800f1fe:	4910      	ldr	r1, [pc, #64]	@ (800f240 <Dmx::SetDmxSlots(unsigned short)+0x6c>)
 800f200:	6842      	ldr	r2, [r0, #4]
 800f202:	680b      	ldr	r3, [r1, #0]
 800f204:	42ac      	cmp	r4, r5
 800f206:	bf38      	it	cc
 800f208:	462c      	movcc	r4, r5
 800f20a:	46a4      	mov	ip, r4
 800f20c:	684c      	ldr	r4, [r1, #4]
 800f20e:	4423      	add	r3, r4
 800f210:	242c      	movs	r4, #44	@ 0x2c
 800f212:	fb04 330c 	mla	r3, r4, ip, r3
 800f216:	b962      	cbnz	r2, 800f232 <Dmx::SetDmxSlots(unsigned short)+0x5e>
 800f218:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f21c:	f240 44b4 	movw	r4, #1204	@ 0x4b4
 800f220:	42a2      	cmp	r2, r4
 800f222:	bf38      	it	cc
 800f224:	4622      	movcc	r2, r4
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	bc30      	pop	{r4, r5}
 800f22a:	6002      	str	r2, [r0, #0]
 800f22c:	608b      	str	r3, [r1, #8]
 800f22e:	4770      	bx	lr
 800f230:	4770      	bx	lr
 800f232:	429a      	cmp	r2, r3
 800f234:	d2f7      	bcs.n	800f226 <Dmx::SetDmxSlots(unsigned short)+0x52>
 800f236:	191a      	adds	r2, r3, r4
 800f238:	e7f0      	b.n	800f21c <Dmx::SetDmxSlots(unsigned short)+0x48>
 800f23a:	bf00      	nop
 800f23c:	2001c000 	andcs	ip, r1, r0
 800f240:	2000d408 	andcs	sp, r0, r8, lsl #8

0800f244 <Dmx::GetOutputStyle(unsigned long) const>:
 800f244:	4b03      	ldr	r3, [pc, #12]	@ (800f254 <Dmx::GetOutputStyle(unsigned long) const+0x10>)
 800f246:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800f24a:	fb02 3301 	mla	r3, r2, r1, r3
 800f24e:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 800f252:	4770      	bx	lr
 800f254:	2001c000 	andcs	ip, r1, r0

0800f258 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)>:
 800f258:	f44f 7c05 	mov.w	ip, #532	@ 0x214
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	fb0c fc01 	mul.w	ip, ip, r1
 800f262:	460c      	mov	r4, r1
 800f264:	4611      	mov	r1, r2
 800f266:	6902      	ldr	r2, [r0, #16]
 800f268:	4f21      	ldr	r7, [pc, #132]	@ (800f2f0 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x98>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	bf28      	it	cs
 800f26e:	4613      	movcs	r3, r2
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	461d      	mov	r5, r3
 800f274:	eb07 030c 	add.w	r3, r7, ip
 800f278:	4606      	mov	r6, r0
 800f27a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 800f284:	1898      	adds	r0, r3, r2
 800f286:	2300      	movs	r3, #0
 800f288:	f807 300c 	strb.w	r3, [r7, ip]
 800f28c:	b115      	cbz	r5, 800f294 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x3c>
 800f28e:	462a      	mov	r2, r5
 800f290:	f00a fe37 	bl	8019f02 <memmove>
 800f294:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f298:	68a3      	ldr	r3, [r4, #8]
 800f29a:	42ab      	cmp	r3, r5
 800f29c:	d100      	bne.n	800f2a0 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x48>
 800f29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a0:	60a5      	str	r5, [r4, #8]
 800f2a2:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 800f2a6:	f8d7 4418 	ldr.w	r4, [r7, #1048]	@ 0x418
 800f2aa:	4912      	ldr	r1, [pc, #72]	@ (800f2f4 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x9c>)
 800f2ac:	6872      	ldr	r2, [r6, #4]
 800f2ae:	680b      	ldr	r3, [r1, #0]
 800f2b0:	42a0      	cmp	r0, r4
 800f2b2:	bf38      	it	cc
 800f2b4:	4620      	movcc	r0, r4
 800f2b6:	684c      	ldr	r4, [r1, #4]
 800f2b8:	4423      	add	r3, r4
 800f2ba:	242c      	movs	r4, #44	@ 0x2c
 800f2bc:	fb04 3300 	mla	r3, r4, r0, r3
 800f2c0:	b15a      	cbz	r2, 800f2da <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x82>
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d205      	bcs.n	800f2d2 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x7a>
 800f2c6:	191a      	adds	r2, r3, r4
 800f2c8:	f240 40b4 	movw	r0, #1204	@ 0x4b4
 800f2cc:	4282      	cmp	r2, r0
 800f2ce:	bf38      	it	cc
 800f2d0:	4602      	movcc	r2, r0
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	6032      	str	r2, [r6, #0]
 800f2d6:	608b      	str	r3, [r1, #8]
 800f2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2da:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f2de:	f240 40b4 	movw	r0, #1204	@ 0x4b4
 800f2e2:	4282      	cmp	r2, r0
 800f2e4:	bf38      	it	cc
 800f2e6:	4602      	movcc	r2, r0
 800f2e8:	1ad3      	subs	r3, r2, r3
 800f2ea:	6032      	str	r2, [r6, #0]
 800f2ec:	608b      	str	r3, [r1, #8]
 800f2ee:	e7f3      	b.n	800f2d8 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x80>
 800f2f0:	2001c000 	andcs	ip, r1, r0
 800f2f4:	2000d408 	andcs	sp, r0, r8, lsl #8

0800f2f8 <Dmx::Blackout()>:
 800f2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2fc:	f100 0610 	add.w	r6, r0, #16
 800f300:	4d29      	ldr	r5, [pc, #164]	@ (800f3a8 <Dmx::Blackout()+0xb0>)
 800f302:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800f306:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800f3c0 <Dmx::Blackout()+0xc8>
 800f30a:	4607      	mov	r7, r0
 800f30c:	2400      	movs	r4, #0
 800f30e:	f240 2901 	movw	r9, #513	@ 0x201
 800f312:	b99b      	cbnz	r3, 800f33c <Dmx::Blackout()+0x44>
 800f314:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f318:	b11b      	cbz	r3, 800f322 <Dmx::Blackout()+0x2a>
 800f31a:	4621      	mov	r1, r4
 800f31c:	4638      	mov	r0, r7
 800f31e:	f7ff fa7d 	bl	800e81c <Dmx::StopData(unsigned long) [clone .part.0]>
 800f322:	f8c5 9204 	str.w	r9, [r5, #516]	@ 0x204
 800f326:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f32a:	2100      	movs	r1, #0
 800f32c:	4628      	mov	r0, r5
 800f32e:	f00a fdff 	bl	8019f30 <memset>
 800f332:	6833      	ldr	r3, [r6, #0]
 800f334:	b983      	cbnz	r3, 800f358 <Dmx::Blackout()+0x60>
 800f336:	2301      	movs	r3, #1
 800f338:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800f33c:	f505 7505 	add.w	r5, r5, #532	@ 0x214
 800f340:	b944      	cbnz	r4, 800f354 <Dmx::Blackout()+0x5c>
 800f342:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800f346:	2401      	movs	r4, #1
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d0e3      	beq.n	800f314 <Dmx::Blackout()+0x1c>
 800f34c:	f505 7505 	add.w	r5, r5, #532	@ 0x214
 800f350:	2c00      	cmp	r4, #0
 800f352:	d0f6      	beq.n	800f342 <Dmx::Blackout()+0x4a>
 800f354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f358:	4b14      	ldr	r3, [pc, #80]	@ (800f3ac <Dmx::Blackout()+0xb4>)
 800f35a:	4815      	ldr	r0, [pc, #84]	@ (800f3b0 <Dmx::Blackout()+0xb8>)
 800f35c:	4915      	ldr	r1, [pc, #84]	@ (800f3b4 <Dmx::Blackout()+0xbc>)
 800f35e:	f240 521c 	movw	r2, #1308	@ 0x51c
 800f362:	fb02 3304 	mla	r3, r2, r4, r3
 800f366:	4a14      	ldr	r2, [pc, #80]	@ (800f3b8 <Dmx::Blackout()+0xc0>)
 800f368:	2c01      	cmp	r4, #1
 800f36a:	bf18      	it	ne
 800f36c:	4611      	movne	r1, r2
 800f36e:	4a13      	ldr	r2, [pc, #76]	@ (800f3bc <Dmx::Blackout()+0xc4>)
 800f370:	bf18      	it	ne
 800f372:	4602      	movne	r2, r0
 800f374:	2000      	movs	r0, #0
 800f376:	f8c3 0518 	str.w	r0, [r3, #1304]	@ 0x518
 800f37a:	f3bf 8f5f 	dmb	sy
 800f37e:	6813      	ldr	r3, [r2, #0]
 800f380:	061b      	lsls	r3, r3, #24
 800f382:	d5fa      	bpl.n	800f37a <Dmx::Blackout()+0x82>
 800f384:	6813      	ldr	r3, [r2, #0]
 800f386:	f023 0320 	bic.w	r3, r3, #32
 800f38a:	6013      	str	r3, [r2, #0]
 800f38c:	6813      	ldr	r3, [r2, #0]
 800f38e:	f023 0310 	bic.w	r3, r3, #16
 800f392:	6013      	str	r3, [r2, #0]
 800f394:	680b      	ldr	r3, [r1, #0]
 800f396:	f043 0320 	orr.w	r3, r3, #32
 800f39a:	600b      	str	r3, [r1, #0]
 800f39c:	680b      	ldr	r3, [r1, #0]
 800f39e:	f043 0310 	orr.w	r3, r3, #16
 800f3a2:	600b      	str	r3, [r1, #0]
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	e7c7      	b.n	800f338 <Dmx::Blackout()+0x40>
 800f3a8:	2001c000 	andcs	ip, r1, r0
 800f3ac:	2000d414 	andcs	sp, r0, r4, lsl r4
 800f3b0:	40004800 	andmi	r4, r0, r0, lsl #16
 800f3b4:	4001140c 	andmi	r1, r1, ip, lsl #8
 800f3b8:	4000480c 	andmi	r4, r0, ip, lsl #16
 800f3bc:	40011400 	andmi	r1, r1, r0, lsl #8
 800f3c0:	2000de9c 	mulcs	r0, ip, lr

0800f3c4 <Dmx::FullOn()>:
 800f3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c8:	f100 0610 	add.w	r6, r0, #16
 800f3cc:	4c2b      	ldr	r4, [pc, #172]	@ (800f47c <Dmx::FullOn()+0xb8>)
 800f3ce:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800f3d2:	4607      	mov	r7, r0
 800f3d4:	2500      	movs	r5, #0
 800f3d6:	b143      	cbz	r3, 800f3ea <Dmx::FullOn()+0x26>
 800f3d8:	f504 7405 	add.w	r4, r4, #532	@ 0x214
 800f3dc:	2d00      	cmp	r5, #0
 800f3de:	d148      	bne.n	800f472 <Dmx::FullOn()+0xae>
 800f3e0:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800f3e4:	2501      	movs	r5, #1
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1f6      	bne.n	800f3d8 <Dmx::FullOn()+0x14>
 800f3ea:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 800f490 <Dmx::FullOn()+0xcc>
 800f3ee:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 800f3f2:	b11b      	cbz	r3, 800f3fc <Dmx::FullOn()+0x38>
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	4638      	mov	r0, r7
 800f3f8:	f7ff fa10 	bl	800e81c <Dmx::StopData(unsigned long) [clone .part.0]>
 800f3fc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f400:	21ff      	movs	r1, #255	@ 0xff
 800f402:	4620      	mov	r0, r4
 800f404:	f00a fd94 	bl	8019f30 <memset>
 800f408:	f240 2201 	movw	r2, #513	@ 0x201
 800f40c:	2300      	movs	r3, #0
 800f40e:	7023      	strb	r3, [r4, #0]
 800f410:	f8c4 2204 	str.w	r2, [r4, #516]	@ 0x204
 800f414:	6832      	ldr	r2, [r6, #0]
 800f416:	b372      	cbz	r2, 800f476 <Dmx::FullOn()+0xb2>
 800f418:	4a19      	ldr	r2, [pc, #100]	@ (800f480 <Dmx::FullOn()+0xbc>)
 800f41a:	f240 511c 	movw	r1, #1308	@ 0x51c
 800f41e:	fb01 2205 	mla	r2, r1, r5, r2
 800f422:	2d01      	cmp	r5, #1
 800f424:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
 800f428:	4b16      	ldr	r3, [pc, #88]	@ (800f484 <Dmx::FullOn()+0xc0>)
 800f42a:	4917      	ldr	r1, [pc, #92]	@ (800f488 <Dmx::FullOn()+0xc4>)
 800f42c:	4a17      	ldr	r2, [pc, #92]	@ (800f48c <Dmx::FullOn()+0xc8>)
 800f42e:	bf18      	it	ne
 800f430:	4619      	movne	r1, r3
 800f432:	f1a3 030c 	sub.w	r3, r3, #12
 800f436:	bf18      	it	ne
 800f438:	461a      	movne	r2, r3
 800f43a:	f3bf 8f5f 	dmb	sy
 800f43e:	6813      	ldr	r3, [r2, #0]
 800f440:	061b      	lsls	r3, r3, #24
 800f442:	d5fa      	bpl.n	800f43a <Dmx::FullOn()+0x76>
 800f444:	6813      	ldr	r3, [r2, #0]
 800f446:	f023 0320 	bic.w	r3, r3, #32
 800f44a:	6013      	str	r3, [r2, #0]
 800f44c:	6813      	ldr	r3, [r2, #0]
 800f44e:	f023 0310 	bic.w	r3, r3, #16
 800f452:	6013      	str	r3, [r2, #0]
 800f454:	680b      	ldr	r3, [r1, #0]
 800f456:	f043 0320 	orr.w	r3, r3, #32
 800f45a:	600b      	str	r3, [r1, #0]
 800f45c:	680b      	ldr	r3, [r1, #0]
 800f45e:	f043 0310 	orr.w	r3, r3, #16
 800f462:	600b      	str	r3, [r1, #0]
 800f464:	2302      	movs	r3, #2
 800f466:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
 800f46a:	f504 7405 	add.w	r4, r4, #532	@ 0x214
 800f46e:	2d00      	cmp	r5, #0
 800f470:	d0b6      	beq.n	800f3e0 <Dmx::FullOn()+0x1c>
 800f472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f476:	2301      	movs	r3, #1
 800f478:	e7f5      	b.n	800f466 <Dmx::FullOn()+0xa2>
 800f47a:	bf00      	nop
 800f47c:	2001c000 	andcs	ip, r1, r0
 800f480:	2000d414 	andcs	sp, r0, r4, lsl r4
 800f484:	4000480c 	andmi	r4, r0, ip, lsl #16
 800f488:	4001140c 	andmi	r1, r1, ip, lsl #8
 800f48c:	40011400 	andmi	r1, r1, r0, lsl #8
 800f490:	2000de9c 	mulcs	r0, ip, lr

0800f494 <Dmx::StartOutput(unsigned long)>:
 800f494:	4a0a      	ldr	r2, [pc, #40]	@ (800f4c0 <Dmx::StartOutput(unsigned long)+0x2c>)
 800f496:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f49a:	2a01      	cmp	r2, #1
 800f49c:	d000      	beq.n	800f4a0 <Dmx::StartOutput(unsigned long)+0xc>
 800f49e:	4770      	bx	lr
 800f4a0:	4a08      	ldr	r2, [pc, #32]	@ (800f4c4 <Dmx::StartOutput(unsigned long)+0x30>)
 800f4a2:	f44f 7c05 	mov.w	ip, #532	@ 0x214
 800f4a6:	fb0c 2301 	mla	r3, ip, r1, r2
 800f4aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800f4ae:	2a00      	cmp	r2, #0
 800f4b0:	d1f5      	bne.n	800f49e <Dmx::StartOutput(unsigned long)+0xa>
 800f4b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1f1      	bne.n	800f49e <Dmx::StartOutput(unsigned long)+0xa>
 800f4ba:	f7ff bd95 	b.w	800efe8 <Dmx::StartDmxOutput(unsigned long)>
 800f4be:	bf00      	nop
 800f4c0:	2000de9c 	mulcs	r0, ip, lr
 800f4c4:	2001c000 	andcs	ip, r1, r0

0800f4c8 <Dmx::Sync()>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4c17      	ldr	r4, [pc, #92]	@ (800f528 <Dmx::Sync()+0x60>)
 800f4cc:	f894 3208 	ldrb.w	r3, [r4, #520]	@ 0x208
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	b133      	cbz	r3, 800f4e2 <Dmx::Sync()+0x1a>
 800f4d4:	4b15      	ldr	r3, [pc, #84]	@ (800f52c <Dmx::Sync()+0x64>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	f884 2208 	strb.w	r2, [r4, #520]	@ 0x208
 800f4e0:	d017      	beq.n	800f512 <Dmx::Sync()+0x4a>
 800f4e2:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 800f4e6:	b133      	cbz	r3, 800f4f6 <Dmx::Sync()+0x2e>
 800f4e8:	4a10      	ldr	r2, [pc, #64]	@ (800f52c <Dmx::Sync()+0x64>)
 800f4ea:	6851      	ldr	r1, [r2, #4]
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	2901      	cmp	r1, #1
 800f4f0:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
 800f4f4:	d000      	beq.n	800f4f8 <Dmx::Sync()+0x30>
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	f8d4 3420 	ldr.w	r3, [r4, #1056]	@ 0x420
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1fa      	bne.n	800f4f6 <Dmx::Sync()+0x2e>
 800f500:	f8d4 3424 	ldr.w	r3, [r4, #1060]	@ 0x424
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1f6      	bne.n	800f4f6 <Dmx::Sync()+0x2e>
 800f508:	4628      	mov	r0, r5
 800f50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f50e:	f7ff bd6b 	b.w	800efe8 <Dmx::StartDmxOutput(unsigned long)>
 800f512:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1e3      	bne.n	800f4e2 <Dmx::Sync()+0x1a>
 800f51a:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
 800f51e:	2900      	cmp	r1, #0
 800f520:	d1df      	bne.n	800f4e2 <Dmx::Sync()+0x1a>
 800f522:	f7ff fd61 	bl	800efe8 <Dmx::StartDmxOutput(unsigned long)>
 800f526:	e7dc      	b.n	800f4e2 <Dmx::Sync()+0x1a>
 800f528:	2001c000 	andcs	ip, r1, r0
 800f52c:	2000de9c 	mulcs	r0, ip, lr

0800f530 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>:
 800f530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f532:	88c6      	ldrh	r6, [r0, #6]
 800f534:	8885      	ldrh	r5, [r0, #4]
 800f536:	42ae      	cmp	r6, r5
 800f538:	d216      	bcs.n	800f568 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x38>
 800f53a:	4604      	mov	r4, r0
 800f53c:	6800      	ldr	r0, [r0, #0]
 800f53e:	1bad      	subs	r5, r5, r6
 800f540:	4430      	add	r0, r6
 800f542:	7a26      	ldrb	r6, [r4, #8]
 800f544:	b923      	cbnz	r3, 800f550 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x20>
 800f546:	b926      	cbnz	r6, 800f552 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x22>
 800f548:	9200      	str	r2, [sp, #0]
 800f54a:	460b      	mov	r3, r1
 800f54c:	4a09      	ldr	r2, [pc, #36]	@ (800f574 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x44>)
 800f54e:	e003      	b.n	800f558 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 800f550:	b166      	cbz	r6, 800f56c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x3c>
 800f552:	9200      	str	r2, [sp, #0]
 800f554:	4a08      	ldr	r2, [pc, #32]	@ (800f578 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x48>)
 800f556:	460b      	mov	r3, r1
 800f558:	4629      	mov	r1, r5
 800f55a:	f00a fff5 	bl	801a548 <snprintf>
 800f55e:	4285      	cmp	r5, r0
 800f560:	bfa2      	ittt	ge
 800f562:	88e3      	ldrhge	r3, [r4, #6]
 800f564:	181b      	addge	r3, r3, r0
 800f566:	80e3      	strhge	r3, [r4, #6]
 800f568:	b002      	add	sp, #8
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	9200      	str	r2, [sp, #0]
 800f56e:	460b      	mov	r3, r1
 800f570:	4a02      	ldr	r2, [pc, #8]	@ (800f57c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x4c>)
 800f572:	e7f1      	b.n	800f558 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 800f574:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 800f578:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800f57c:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800f580 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>:
 800f580:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f582:	88c6      	ldrh	r6, [r0, #6]
 800f584:	8885      	ldrh	r5, [r0, #4]
 800f586:	42ae      	cmp	r6, r5
 800f588:	d216      	bcs.n	800f5b8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x38>
 800f58a:	4604      	mov	r4, r0
 800f58c:	6800      	ldr	r0, [r0, #0]
 800f58e:	1bad      	subs	r5, r5, r6
 800f590:	4430      	add	r0, r6
 800f592:	7a26      	ldrb	r6, [r4, #8]
 800f594:	b923      	cbnz	r3, 800f5a0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x20>
 800f596:	b926      	cbnz	r6, 800f5a2 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x22>
 800f598:	9200      	str	r2, [sp, #0]
 800f59a:	460b      	mov	r3, r1
 800f59c:	4a09      	ldr	r2, [pc, #36]	@ (800f5c4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x44>)
 800f59e:	e003      	b.n	800f5a8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 800f5a0:	b166      	cbz	r6, 800f5bc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x3c>
 800f5a2:	9200      	str	r2, [sp, #0]
 800f5a4:	4a08      	ldr	r2, [pc, #32]	@ (800f5c8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x48>)
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	f00a ffcd 	bl	801a548 <snprintf>
 800f5ae:	4285      	cmp	r5, r0
 800f5b0:	bfa2      	ittt	ge
 800f5b2:	88e3      	ldrhge	r3, [r4, #6]
 800f5b4:	181b      	addge	r3, r3, r0
 800f5b6:	80e3      	strhge	r3, [r4, #6]
 800f5b8:	b002      	add	sp, #8
 800f5ba:	bd70      	pop	{r4, r5, r6, pc}
 800f5bc:	9200      	str	r2, [sp, #0]
 800f5be:	460b      	mov	r3, r1
 800f5c0:	4a02      	ldr	r2, [pc, #8]	@ (800f5cc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x4c>)
 800f5c2:	e7f1      	b.n	800f5a8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 800f5c4:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 800f5c8:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800f5cc:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800f5d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>:
 800f5d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5d2:	88c6      	ldrh	r6, [r0, #6]
 800f5d4:	8885      	ldrh	r5, [r0, #4]
 800f5d6:	42ae      	cmp	r6, r5
 800f5d8:	d216      	bcs.n	800f608 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x38>
 800f5da:	4604      	mov	r4, r0
 800f5dc:	6800      	ldr	r0, [r0, #0]
 800f5de:	1bad      	subs	r5, r5, r6
 800f5e0:	4430      	add	r0, r6
 800f5e2:	7a26      	ldrb	r6, [r4, #8]
 800f5e4:	b923      	cbnz	r3, 800f5f0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x20>
 800f5e6:	b926      	cbnz	r6, 800f5f2 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x22>
 800f5e8:	9200      	str	r2, [sp, #0]
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4a09      	ldr	r2, [pc, #36]	@ (800f614 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x44>)
 800f5ee:	e003      	b.n	800f5f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800f5f0:	b166      	cbz	r6, 800f60c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x3c>
 800f5f2:	9200      	str	r2, [sp, #0]
 800f5f4:	4a08      	ldr	r2, [pc, #32]	@ (800f618 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x48>)
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	f00a ffa5 	bl	801a548 <snprintf>
 800f5fe:	4285      	cmp	r5, r0
 800f600:	bfa2      	ittt	ge
 800f602:	88e3      	ldrhge	r3, [r4, #6]
 800f604:	181b      	addge	r3, r3, r0
 800f606:	80e3      	strhge	r3, [r4, #6]
 800f608:	b002      	add	sp, #8
 800f60a:	bd70      	pop	{r4, r5, r6, pc}
 800f60c:	9200      	str	r2, [sp, #0]
 800f60e:	460b      	mov	r3, r1
 800f610:	4a02      	ldr	r2, [pc, #8]	@ (800f61c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x4c>)
 800f612:	e7f1      	b.n	800f5f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800f614:	0801b2dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, ip, sp, pc}
 800f618:	0801b2d1 	stmdaeq	r1, {r0, r4, r6, r7, r9, ip, sp, pc}
 800f61c:	0801b2dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, ip, sp, pc}

0800f620 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>:
 800f620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f624:	8885      	ldrh	r5, [r0, #4]
 800f626:	4698      	mov	r8, r3
 800f628:	88c3      	ldrh	r3, [r0, #6]
 800f62a:	42ab      	cmp	r3, r5
 800f62c:	4604      	mov	r4, r0
 800f62e:	d229      	bcs.n	800f684 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x64>
 800f630:	6826      	ldr	r6, [r4, #0]
 800f632:	f894 a008 	ldrb.w	sl, [r4, #8]
 800f636:	4691      	mov	r9, r2
 800f638:	ee10 0a10 	vmov	r0, s0
 800f63c:	460f      	mov	r7, r1
 800f63e:	441e      	add	r6, r3
 800f640:	1aed      	subs	r5, r5, r3
 800f642:	f7f9 fdfb 	bl	800923c <__aeabi_f2d>
 800f646:	f1b9 0f00 	cmp.w	r9, #0
 800f64a:	d109      	bne.n	800f660 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x40>
 800f64c:	f1ba 0f00 	cmp.w	sl, #0
 800f650:	d109      	bne.n	800f666 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x46>
 800f652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f656:	4a10      	ldr	r2, [pc, #64]	@ (800f698 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x78>)
 800f658:	f8cd 8000 	str.w	r8, [sp]
 800f65c:	463b      	mov	r3, r7
 800f65e:	e008      	b.n	800f672 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x52>
 800f660:	f1ba 0f00 	cmp.w	sl, #0
 800f664:	d011      	beq.n	800f68a <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x6a>
 800f666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f66a:	4a0c      	ldr	r2, [pc, #48]	@ (800f69c <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x7c>)
 800f66c:	f8cd 8000 	str.w	r8, [sp]
 800f670:	463b      	mov	r3, r7
 800f672:	4629      	mov	r1, r5
 800f674:	4630      	mov	r0, r6
 800f676:	f00a ff67 	bl	801a548 <snprintf>
 800f67a:	4285      	cmp	r5, r0
 800f67c:	bfa2      	ittt	ge
 800f67e:	88e3      	ldrhge	r3, [r4, #6]
 800f680:	181b      	addge	r3, r3, r0
 800f682:	80e3      	strhge	r3, [r4, #6]
 800f684:	b004      	add	sp, #16
 800f686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f68e:	4a04      	ldr	r2, [pc, #16]	@ (800f6a0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x80>)
 800f690:	f8cd 8000 	str.w	r8, [sp]
 800f694:	463b      	mov	r3, r7
 800f696:	e7ec      	b.n	800f672 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x52>
 800f698:	0801b827 	stmdaeq	r1, {r0, r1, r2, r5, fp, ip, sp, pc}
 800f69c:	0801b81c 	stmdaeq	r1, {r2, r3, r4, fp, ip, sp, pc}
 800f6a0:	0801b828 	stmdaeq	r1, {r3, r5, fp, ip, sp, pc}

0800f6a4 <pixel::pixel_convert_TxH(unsigned char)>:
 800f6a4:	28f0      	cmp	r0, #240	@ 0xf0
 800f6a6:	d017      	beq.n	800f6d8 <pixel::pixel_convert_TxH(unsigned char)+0x34>
 800f6a8:	d80c      	bhi.n	800f6c4 <pixel::pixel_convert_TxH(unsigned char)+0x20>
 800f6aa:	28c0      	cmp	r0, #192	@ 0xc0
 800f6ac:	d017      	beq.n	800f6de <pixel::pixel_convert_TxH(unsigned char)+0x3a>
 800f6ae:	28e0      	cmp	r0, #224	@ 0xe0
 800f6b0:	d018      	beq.n	800f6e4 <pixel::pixel_convert_TxH(unsigned char)+0x40>
 800f6b2:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800f6f8 <pixel::pixel_convert_TxH(unsigned char)+0x54>
 800f6b6:	2880      	cmp	r0, #128	@ 0x80
 800f6b8:	eef4 7a04 	vmov.f32	s15, #68	@ 0x3e200000  0.1562500
 800f6bc:	bf08      	it	eq
 800f6be:	eeb0 0a67 	vmoveq.f32	s0, s15
 800f6c2:	4770      	bx	lr
 800f6c4:	28fc      	cmp	r0, #252	@ 0xfc
 800f6c6:	d010      	beq.n	800f6ea <pixel::pixel_convert_TxH(unsigned char)+0x46>
 800f6c8:	28fe      	cmp	r0, #254	@ 0xfe
 800f6ca:	d011      	beq.n	800f6f0 <pixel::pixel_convert_TxH(unsigned char)+0x4c>
 800f6cc:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800f6f8 <pixel::pixel_convert_TxH(unsigned char)+0x54>
 800f6d0:	28f8      	cmp	r0, #248	@ 0xf8
 800f6d2:	eef6 7a09 	vmov.f32	s15, #105	@ 0x3f480000  0.7812500
 800f6d6:	e7f1      	b.n	800f6bc <pixel::pixel_convert_TxH(unsigned char)+0x18>
 800f6d8:	eeb6 0a04 	vmov.f32	s0, #100	@ 0x3f200000  0.625
 800f6dc:	4770      	bx	lr
 800f6de:	eeb5 0a04 	vmov.f32	s0, #84	@ 0x3ea00000  0.3125000
 800f6e2:	4770      	bx	lr
 800f6e4:	eeb5 0a0e 	vmov.f32	s0, #94	@ 0x3ef00000  0.4687500
 800f6e8:	4770      	bx	lr
 800f6ea:	eeb6 0a0e 	vmov.f32	s0, #110	@ 0x3f700000  0.9375000
 800f6ee:	4770      	bx	lr
 800f6f0:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800f6fc <pixel::pixel_convert_TxH(unsigned char)+0x58>
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	00000000 	andeq	r0, r0, r0
 800f6fc:	3f8c0000 	svccc	0x008c0000

0800f700 <pixel::pixel_convert_TxH(float)>:
 800f700:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800f794 <pixel::pixel_convert_TxH(float)+0x94>
 800f704:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70c:	d433      	bmi.n	800f776 <pixel::pixel_convert_TxH(float)+0x76>
 800f70e:	eef4 7a0e 	vmov.f32	s15, #78	@ 0x3e700000  0.2343750
 800f712:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	d42e      	bmi.n	800f77a <pixel::pixel_convert_TxH(float)+0x7a>
 800f71c:	eef5 7a09 	vmov.f32	s15, #89	@ 0x3ec80000  0.3906250
 800f720:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f728:	d429      	bmi.n	800f77e <pixel::pixel_convert_TxH(float)+0x7e>
 800f72a:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800f798 <pixel::pixel_convert_TxH(float)+0x98>
 800f72e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f736:	d424      	bmi.n	800f782 <pixel::pixel_convert_TxH(float)+0x82>
 800f738:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f79c <pixel::pixel_convert_TxH(float)+0x9c>
 800f73c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f744:	d41f      	bmi.n	800f786 <pixel::pixel_convert_TxH(float)+0x86>
 800f746:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800f7a0 <pixel::pixel_convert_TxH(float)+0xa0>
 800f74a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f752:	d41a      	bmi.n	800f78a <pixel::pixel_convert_TxH(float)+0x8a>
 800f754:	eddf 7a13 	vldr	s15, [pc, #76]	@ 800f7a4 <pixel::pixel_convert_TxH(float)+0xa4>
 800f758:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f760:	d415      	bmi.n	800f78e <pixel::pixel_convert_TxH(float)+0x8e>
 800f762:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800f7a8 <pixel::pixel_convert_TxH(float)+0xa8>
 800f766:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76e:	bf4c      	ite	mi
 800f770:	20fe      	movmi	r0, #254	@ 0xfe
 800f772:	2000      	movpl	r0, #0
 800f774:	4770      	bx	lr
 800f776:	2000      	movs	r0, #0
 800f778:	4770      	bx	lr
 800f77a:	2080      	movs	r0, #128	@ 0x80
 800f77c:	4770      	bx	lr
 800f77e:	20c0      	movs	r0, #192	@ 0xc0
 800f780:	4770      	bx	lr
 800f782:	20e0      	movs	r0, #224	@ 0xe0
 800f784:	4770      	bx	lr
 800f786:	20f0      	movs	r0, #240	@ 0xf0
 800f788:	4770      	bx	lr
 800f78a:	20f8      	movs	r0, #248	@ 0xf8
 800f78c:	4770      	bx	lr
 800f78e:	20fc      	movs	r0, #252	@ 0xfc
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	3da00000 	stccc	0, cr0, [r0]
 800f798:	3f0c0000 	svccc	0x000c0000
 800f79c:	3f340000 	svccc	0x00340000
 800f7a0:	3f5c0000 	svccc	0x005c0000
 800f7a4:	3f820000 	svccc	0x00820000
 800f7a8:	3f960000 	svccc	0x00960000

0800f7ac <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>:
 800f7ac:	b507      	push	{r0, r1, r2, lr}
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	e9cd 3100 	strd	r3, r1, [sp]
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	4804      	ldr	r0, [pc, #16]	@ (800f7cc <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)+0x20>)
 800f7ba:	2326      	movs	r3, #38	@ 0x26
 800f7bc:	6800      	ldr	r0, [r0, #0]
 800f7be:	2102      	movs	r1, #2
 800f7c0:	f007 f970 	bl	8016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800f7c4:	b003      	add	sp, #12
 800f7c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7ca:	bf00      	nop
 800f7cc:	2000e2cc 	andcs	lr, r0, ip, asr #5

0800f7d0 <PixelDmxParams::PixelDmxParams()>:
 800f7d0:	2103      	movs	r1, #3
 800f7d2:	7101      	strb	r1, [r0, #4]
 800f7d4:	f06f 0155 	mvn.w	r1, #85	@ 0x55
 800f7d8:	7141      	strb	r1, [r0, #5]
 800f7da:	2101      	movs	r1, #1
 800f7dc:	71c1      	strb	r1, [r0, #7]
 800f7de:	73c1      	strb	r1, [r0, #15]
 800f7e0:	7441      	strb	r1, [r0, #17]
 800f7e2:	7581      	strb	r1, [r0, #22]
 800f7e4:	2105      	movs	r1, #5
 800f7e6:	b530      	push	{r4, r5, lr}
 800f7e8:	7601      	strb	r1, [r0, #24]
 800f7ea:	253d      	movs	r5, #61	@ 0x3d
 800f7ec:	210d      	movs	r1, #13
 800f7ee:	7305      	strb	r5, [r0, #12]
 800f7f0:	7701      	strb	r1, [r0, #28]
 800f7f2:	25ff      	movs	r5, #255	@ 0xff
 800f7f4:	2111      	movs	r1, #17
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	2409      	movs	r4, #9
 800f7fa:	7385      	strb	r5, [r0, #14]
 800f7fc:	7781      	strb	r1, [r0, #30]
 800f7fe:	2506      	movs	r5, #6
 800f800:	2115      	movs	r1, #21
 800f802:	7002      	strb	r2, [r0, #0]
 800f804:	7042      	strb	r2, [r0, #1]
 800f806:	7082      	strb	r2, [r0, #2]
 800f808:	70c2      	strb	r2, [r0, #3]
 800f80a:	7182      	strb	r2, [r0, #6]
 800f80c:	7202      	strb	r2, [r0, #8]
 800f80e:	7282      	strb	r2, [r0, #10]
 800f810:	72c4      	strb	r4, [r0, #11]
 800f812:	7342      	strb	r2, [r0, #13]
 800f814:	7482      	strb	r2, [r0, #18]
 800f816:	74c5      	strb	r5, [r0, #19]
 800f818:	7502      	strb	r2, [r0, #20]
 800f81a:	7542      	strb	r2, [r0, #21]
 800f81c:	7242      	strb	r2, [r0, #9]
 800f81e:	7402      	strb	r2, [r0, #16]
 800f820:	75c2      	strb	r2, [r0, #23]
 800f822:	7642      	strb	r2, [r0, #25]
 800f824:	7684      	strb	r4, [r0, #26]
 800f826:	76c2      	strb	r2, [r0, #27]
 800f828:	7742      	strb	r2, [r0, #29]
 800f82a:	77c2      	strb	r2, [r0, #31]
 800f82c:	f880 1020 	strb.w	r1, [r0, #32]
 800f830:	2119      	movs	r1, #25
 800f832:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22
 800f836:	211d      	movs	r1, #29
 800f838:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 800f83c:	f880 2023 	strb.w	r2, [r0, #35]	@ 0x23
 800f840:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f844:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800f848:	bd30      	pop	{r4, r5, pc}
	...

0800f84c <PixelDmxParams::callbackFunction(char const*)>:
 800f84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f850:	4604      	mov	r4, r0
 800f852:	b088      	sub	sp, #32
 800f854:	460d      	mov	r5, r1
 800f856:	b929      	cbnz	r1, 800f864 <PixelDmxParams::callbackFunction(char const*)+0x18>
 800f858:	4b8d      	ldr	r3, [pc, #564]	@ (800fa90 <PixelDmxParams::callbackFunction(char const*)+0x244>)
 800f85a:	4a8e      	ldr	r2, [pc, #568]	@ (800fa94 <PixelDmxParams::callbackFunction(char const*)+0x248>)
 800f85c:	488e      	ldr	r0, [pc, #568]	@ (800fa98 <PixelDmxParams::callbackFunction(char const*)+0x24c>)
 800f85e:	217a      	movs	r1, #122	@ 0x7a
 800f860:	f00a ff2a 	bl	801a6b8 <__assert_func>
 800f864:	2308      	movs	r3, #8
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	498c      	ldr	r1, [pc, #560]	@ (800fa9c <PixelDmxParams::callbackFunction(char const*)+0x250>)
 800f86a:	446b      	add	r3, sp
 800f86c:	aa04      	add	r2, sp, #16
 800f86e:	4628      	mov	r0, r5
 800f870:	f007 fc2c 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800f874:	b9a0      	cbnz	r0, 800f8a0 <PixelDmxParams::callbackFunction(char const*)+0x54>
 800f876:	9b02      	ldr	r3, [sp, #8]
 800f878:	3320      	adds	r3, #32
 800f87a:	446b      	add	r3, sp
 800f87c:	f803 0c10 	strb.w	r0, [r3, #-16]
 800f880:	a804      	add	r0, sp, #16
 800f882:	f001 fc81 	bl	8011188 <pixel::pixel_get_type(char const*)>
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	280e      	cmp	r0, #14
 800f88a:	bf0d      	iteet	eq
 800f88c:	2203      	moveq	r2, #3
 800f88e:	7120      	strbne	r0, [r4, #4]
 800f890:	f043 0301 	orrne.w	r3, r3, #1
 800f894:	7122      	strbeq	r2, [r4, #4]
 800f896:	bf08      	it	eq
 800f898:	f023 0301 	biceq.w	r3, r3, #1
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	e033      	b.n	800f908 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 800f8a0:	497f      	ldr	r1, [pc, #508]	@ (800faa0 <PixelDmxParams::callbackFunction(char const*)+0x254>)
 800f8a2:	f10d 0202 	add.w	r2, sp, #2
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f007 fcbb 	bl	8017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800f8ac:	b990      	cbnz	r0, 800f8d4 <PixelDmxParams::callbackFunction(char const*)+0x88>
 800f8ae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	1e51      	subs	r1, r2, #1
 800f8b6:	f5b1 7f2a 	cmp.w	r1, #680	@ 0x2a8
 800f8ba:	bf2d      	iteet	cs
 800f8bc:	f06f 0255 	mvncs.w	r2, #85	@ 0x55
 800f8c0:	f8a4 2005 	strhcc.w	r2, [r4, #5]
 800f8c4:	f043 0302 	orrcc.w	r3, r3, #2
 800f8c8:	7162      	strbcs	r2, [r4, #5]
 800f8ca:	bf24      	itt	cs
 800f8cc:	71a0      	strbcs	r0, [r4, #6]
 800f8ce:	f023 0302 	biccs.w	r3, r3, #2
 800f8d2:	e7e3      	b.n	800f89c <PixelDmxParams::callbackFunction(char const*)+0x50>
 800f8d4:	2303      	movs	r3, #3
 800f8d6:	9302      	str	r3, [sp, #8]
 800f8d8:	4972      	ldr	r1, [pc, #456]	@ (800faa4 <PixelDmxParams::callbackFunction(char const*)+0x258>)
 800f8da:	ab02      	add	r3, sp, #8
 800f8dc:	aa04      	add	r2, sp, #16
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f007 fbf4 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800f8e4:	b998      	cbnz	r0, 800f90e <PixelDmxParams::callbackFunction(char const*)+0xc2>
 800f8e6:	9b02      	ldr	r3, [sp, #8]
 800f8e8:	3320      	adds	r3, #32
 800f8ea:	446b      	add	r3, sp
 800f8ec:	f803 0c10 	strb.w	r0, [r3, #-16]
 800f8f0:	a804      	add	r0, sp, #16
 800f8f2:	f001 fc79 	bl	80111e8 <pixel::pixel_get_map(char const*)>
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	74e0      	strb	r0, [r4, #19]
 800f8fa:	2806      	cmp	r0, #6
 800f8fc:	bf14      	ite	ne
 800f8fe:	f443 7300 	orrne.w	r3, r3, #512	@ 0x200
 800f902:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 800f906:	6023      	str	r3, [r4, #0]
 800f908:	b008      	add	sp, #32
 800f90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90e:	4966      	ldr	r1, [pc, #408]	@ (800faa8 <PixelDmxParams::callbackFunction(char const*)+0x25c>)
 800f910:	aa01      	add	r2, sp, #4
 800f912:	4628      	mov	r0, r5
 800f914:	f007 fbf3 	bl	80170fe <Sscan::Float(char const*, char const*, float&)>
 800f918:	b968      	cbnz	r0, 800f936 <PixelDmxParams::callbackFunction(char const*)+0xea>
 800f91a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f91e:	f7ff feef 	bl	800f700 <pixel::pixel_convert_TxH(float)>
 800f922:	6823      	ldr	r3, [r4, #0]
 800f924:	b120      	cbz	r0, 800f930 <PixelDmxParams::callbackFunction(char const*)+0xe4>
 800f926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f92a:	6023      	str	r3, [r4, #0]
 800f92c:	7520      	strb	r0, [r4, #20]
 800f92e:	e7eb      	b.n	800f908 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 800f930:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f934:	e7f9      	b.n	800f92a <PixelDmxParams::callbackFunction(char const*)+0xde>
 800f936:	495d      	ldr	r1, [pc, #372]	@ (800faac <PixelDmxParams::callbackFunction(char const*)+0x260>)
 800f938:	aa01      	add	r2, sp, #4
 800f93a:	4628      	mov	r0, r5
 800f93c:	f007 fbdf 	bl	80170fe <Sscan::Float(char const*, char const*, float&)>
 800f940:	b968      	cbnz	r0, 800f95e <PixelDmxParams::callbackFunction(char const*)+0x112>
 800f942:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f946:	f7ff fedb 	bl	800f700 <pixel::pixel_convert_TxH(float)>
 800f94a:	6823      	ldr	r3, [r4, #0]
 800f94c:	b120      	cbz	r0, 800f958 <PixelDmxParams::callbackFunction(char const*)+0x10c>
 800f94e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f952:	6023      	str	r3, [r4, #0]
 800f954:	7560      	strb	r0, [r4, #21]
 800f956:	e7d7      	b.n	800f908 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 800f958:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f95c:	e7f9      	b.n	800f952 <PixelDmxParams::callbackFunction(char const*)+0x106>
 800f95e:	4954      	ldr	r1, [pc, #336]	@ (800fab0 <PixelDmxParams::callbackFunction(char const*)+0x264>)
 800f960:	f10d 0202 	add.w	r2, sp, #2
 800f964:	4628      	mov	r0, r5
 800f966:	f007 fc5c 	bl	8017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800f96a:	b998      	cbnz	r0, 800f994 <PixelDmxParams::callbackFunction(char const*)+0x148>
 800f96c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800f970:	6823      	ldr	r3, [r4, #0]
 800f972:	1e8a      	subs	r2, r1, #2
 800f974:	b292      	uxth	r2, r2
 800f976:	f240 25a6 	movw	r5, #678	@ 0x2a6
 800f97a:	42aa      	cmp	r2, r5
 800f97c:	bf81      	itttt	hi
 800f97e:	2201      	movhi	r2, #1
 800f980:	7462      	strbhi	r2, [r4, #17]
 800f982:	74a0      	strbhi	r0, [r4, #18]
 800f984:	f423 7380 	bichi.w	r3, r3, #256	@ 0x100
 800f988:	bf9c      	itt	ls
 800f98a:	f8a4 1011 	strhls.w	r1, [r4, #17]
 800f98e:	f443 7380 	orrls.w	r3, r3, #256	@ 0x100
 800f992:	e783      	b.n	800f89c <PixelDmxParams::callbackFunction(char const*)+0x50>
 800f994:	4947      	ldr	r1, [pc, #284]	@ (800fab4 <PixelDmxParams::callbackFunction(char const*)+0x268>)
 800f996:	aa03      	add	r2, sp, #12
 800f998:	4628      	mov	r0, r5
 800f99a:	f007 fc5e 	bl	801725a <Sscan::Uint32(char const*, char const*, unsigned long&)>
 800f99e:	b960      	cbnz	r0, 800f9ba <PixelDmxParams::callbackFunction(char const*)+0x16e>
 800f9a0:	9a03      	ldr	r2, [sp, #12]
 800f9a2:	4945      	ldr	r1, [pc, #276]	@ (800fab8 <PixelDmxParams::callbackFunction(char const*)+0x26c>)
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	f8c4 200a 	str.w	r2, [r4, #10]
 800f9aa:	428a      	cmp	r2, r1
 800f9ac:	bf14      	ite	ne
 800f9ae:	f043 0310 	orrne.w	r3, r3, #16
 800f9b2:	f023 0310 	biceq.w	r3, r3, #16
 800f9b6:	6023      	str	r3, [r4, #0]
 800f9b8:	e7a6      	b.n	800f908 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 800f9ba:	4940      	ldr	r1, [pc, #256]	@ (800fabc <PixelDmxParams::callbackFunction(char const*)+0x270>)
 800f9bc:	f10d 0201 	add.w	r2, sp, #1
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f007 fc73 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f9c6:	b988      	cbnz	r0, 800f9ec <PixelDmxParams::callbackFunction(char const*)+0x1a0>
 800f9c8:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f9cc:	6823      	ldr	r3, [r4, #0]
 800f9ce:	1e4a      	subs	r2, r1, #1
 800f9d0:	b2d2      	uxtb	r2, r2
 800f9d2:	2afd      	cmp	r2, #253	@ 0xfd
 800f9d4:	bf89      	itett	hi
 800f9d6:	f023 0320 	bichi.w	r3, r3, #32
 800f9da:	f043 0320 	orrls.w	r3, r3, #32
 800f9de:	6023      	strhi	r3, [r4, #0]
 800f9e0:	23ff      	movhi	r3, #255	@ 0xff
 800f9e2:	bf9a      	itte	ls
 800f9e4:	6023      	strls	r3, [r4, #0]
 800f9e6:	73a1      	strbls	r1, [r4, #14]
 800f9e8:	73a3      	strbhi	r3, [r4, #14]
 800f9ea:	e78d      	b.n	800f908 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 800f9ec:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800fac8 <PixelDmxParams::callbackFunction(char const*)+0x27c>
 800f9f0:	2600      	movs	r6, #0
 800f9f2:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800f9f6:	f10d 0202 	add.w	r2, sp, #2
 800f9fa:	4641      	mov	r1, r8
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	f007 fc10 	bl	8017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800fa02:	b960      	cbnz	r0, 800fa1e <PixelDmxParams::callbackFunction(char const*)+0x1d2>
 800fa04:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800fa08:	6823      	ldr	r3, [r4, #0]
 800fa0a:	fa07 f006 	lsl.w	r0, r7, r6
 800fa0e:	f106 0208 	add.w	r2, r6, #8
 800fa12:	b1f9      	cbz	r1, 800fa54 <PixelDmxParams::callbackFunction(char const*)+0x208>
 800fa14:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800fa18:	4303      	orrs	r3, r0
 800fa1a:	80d1      	strh	r1, [r2, #6]
 800fa1c:	6023      	str	r3, [r4, #0]
 800fa1e:	3601      	adds	r6, #1
 800fa20:	2e08      	cmp	r6, #8
 800fa22:	f108 0814 	add.w	r8, r8, #20
 800fa26:	d1e6      	bne.n	800f9f6 <PixelDmxParams::callbackFunction(char const*)+0x1aa>
 800fa28:	4925      	ldr	r1, [pc, #148]	@ (800fac0 <PixelDmxParams::callbackFunction(char const*)+0x274>)
 800fa2a:	f10d 0201 	add.w	r2, sp, #1
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f007 fc3c 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fa34:	b9b0      	cbnz	r0, 800fa64 <PixelDmxParams::callbackFunction(char const*)+0x218>
 800fa36:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	1e91      	subs	r1, r2, #2
 800fa3e:	2906      	cmp	r1, #6
 800fa40:	bf8d      	iteet	hi
 800fa42:	2201      	movhi	r2, #1
 800fa44:	73e2      	strbls	r2, [r4, #15]
 800fa46:	f043 0340 	orrls.w	r3, r3, #64	@ 0x40
 800fa4a:	73e2      	strbhi	r2, [r4, #15]
 800fa4c:	bf88      	it	hi
 800fa4e:	f023 0340 	bichi.w	r3, r3, #64	@ 0x40
 800fa52:	e723      	b.n	800f89c <PixelDmxParams::callbackFunction(char const*)+0x50>
 800fa54:	00b1      	lsls	r1, r6, #2
 800fa56:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800fa5a:	3101      	adds	r1, #1
 800fa5c:	80d1      	strh	r1, [r2, #6]
 800fa5e:	ea23 0300 	bic.w	r3, r3, r0
 800fa62:	e7db      	b.n	800fa1c <PixelDmxParams::callbackFunction(char const*)+0x1d0>
 800fa64:	4917      	ldr	r1, [pc, #92]	@ (800fac4 <PixelDmxParams::callbackFunction(char const*)+0x278>)
 800fa66:	f10d 0201 	add.w	r2, sp, #1
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f007 fc1e 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	f47f af49 	bne.w	800f908 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 800fa76:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	1e51      	subs	r1, r2, #1
 800fa7e:	2904      	cmp	r1, #4
 800fa80:	bf99      	ittee	ls
 800fa82:	7422      	strbls	r2, [r4, #16]
 800fa84:	f043 0308 	orrls.w	r3, r3, #8
 800fa88:	7420      	strbhi	r0, [r4, #16]
 800fa8a:	f023 0308 	bichi.w	r3, r3, #8
 800fa8e:	e705      	b.n	800f89c <PixelDmxParams::callbackFunction(char const*)+0x50>
 800fa90:	0801b831 	stmdaeq	r1, {r0, r4, r5, fp, ip, sp, pc}
 800fa94:	0801b842 	stmdaeq	r1, {r1, r6, fp, ip, sp, pc}
 800fa98:	0801b853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, sp, pc}
 800fa9c:	0801f2a0 	stmdaeq	r1, {r5, r7, r9, ip, sp, lr, pc}
 800faa0:	0801f276 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, ip, sp, lr, pc}
 800faa4:	0801f290 	stmdaeq	r1, {r4, r7, r9, ip, sp, lr, pc}
 800faa8:	0801f288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr, pc}
 800faac:	0801f280 	stmdaeq	r1, {r7, r9, ip, sp, lr, pc}
 800fab0:	0801f266 	stmdaeq	r1, {r1, r2, r5, r6, r9, ip, sp, lr, pc}
 800fab4:	0801f257 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, ip, sp, lr, pc}
 800fab8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800fabc:	0801f245 	stmdaeq	r1, {r0, r2, r6, r9, ip, sp, lr, pc}
 800fac0:	0801f23a 	stmdaeq	r1, {r1, r3, r4, r5, r9, ip, sp, lr, pc}
 800fac4:	0801f22d 	stmdaeq	r1, {r0, r2, r3, r5, r9, ip, sp, lr, pc}
 800fac8:	0801f2b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, ip, sp, lr, pc}

0800facc <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	460d      	mov	r5, r1
 800fad0:	4604      	mov	r4, r0
 800fad2:	b930      	cbnz	r0, 800fae2 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x16>
 800fad4:	4b0a      	ldr	r3, [pc, #40]	@ (800fb00 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x34>)
 800fad6:	4a0b      	ldr	r2, [pc, #44]	@ (800fb04 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x38>)
 800fad8:	480b      	ldr	r0, [pc, #44]	@ (800fb08 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x3c>)
 800fada:	f240 11b5 	movw	r1, #437	@ 0x1b5
 800fade:	f00a fdeb 	bl	801a6b8 <__assert_func>
 800fae2:	b935      	cbnz	r5, 800faf2 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x26>
 800fae4:	4b09      	ldr	r3, [pc, #36]	@ (800fb0c <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x40>)
 800fae6:	4a07      	ldr	r2, [pc, #28]	@ (800fb04 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x38>)
 800fae8:	4807      	ldr	r0, [pc, #28]	@ (800fb08 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x3c>)
 800faea:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 800faee:	f00a fde3 	bl	801a6b8 <__assert_func>
 800faf2:	4629      	mov	r1, r5
 800faf4:	4620      	mov	r0, r4
 800faf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fafa:	f7ff bea7 	b.w	800f84c <PixelDmxParams::callbackFunction(char const*)>
 800fafe:	bf00      	nop
 800fb00:	0801b871 	stmdaeq	r1, {r0, r4, r5, r6, fp, ip, sp, pc}
 800fb04:	0801b87e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, fp, ip, sp, pc}
 800fb08:	0801b853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, sp, pc}
 800fb0c:	0801adf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, fp, sp, pc}

0800fb10 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)>:
 800fb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb12:	4604      	mov	r4, r0
 800fb14:	b087      	sub	sp, #28
 800fb16:	460e      	mov	r6, r1
 800fb18:	461f      	mov	r7, r3
 800fb1a:	4615      	mov	r5, r2
 800fb1c:	b932      	cbnz	r2, 800fb2c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x1c>
 800fb1e:	4b87      	ldr	r3, [pc, #540]	@ (800fd3c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>)
 800fb20:	4a87      	ldr	r2, [pc, #540]	@ (800fd40 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 800fb22:	4888      	ldr	r0, [pc, #544]	@ (800fd44 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 800fb24:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800fb28:	f00a fdc6 	bl	801a6b8 <__assert_func>
 800fb2c:	2e00      	cmp	r6, #0
 800fb2e:	f000 8092 	beq.w	800fc56 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x146>
 800fb32:	2226      	movs	r2, #38	@ 0x26
 800fb34:	4631      	mov	r1, r6
 800fb36:	4620      	mov	r0, r4
 800fb38:	f00a f9e3 	bl	8019f02 <memmove>
 800fb3c:	4982      	ldr	r1, [pc, #520]	@ (800fd48 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x238>)
 800fb3e:	463b      	mov	r3, r7
 800fb40:	462a      	mov	r2, r5
 800fb42:	a803      	add	r0, sp, #12
 800fb44:	f007 f9b2 	bl	8016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800fb48:	7920      	ldrb	r0, [r4, #4]
 800fb4a:	f001 fb11 	bl	8011170 <pixel::pixel_get_type(pixel::Type)>
 800fb4e:	6823      	ldr	r3, [r4, #0]
 800fb50:	497e      	ldr	r1, [pc, #504]	@ (800fd4c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x23c>)
 800fb52:	4602      	mov	r2, r0
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	a803      	add	r0, sp, #12
 800fb5a:	f7ff fd39 	bl	800f5d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 800fb64:	497a      	ldr	r1, [pc, #488]	@ (800fd50 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x240>)
 800fb66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fb6a:	a803      	add	r0, sp, #12
 800fb6c:	f7ff fd08 	bl	800f580 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 800fb70:	4978      	ldr	r1, [pc, #480]	@ (800fd54 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x244>)
 800fb72:	a803      	add	r0, sp, #12
 800fb74:	f007 fa56 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	059e      	lsls	r6, r3, #22
 800fb7c:	d407      	bmi.n	800fb8e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x7e>
 800fb7e:	7923      	ldrb	r3, [r4, #4]
 800fb80:	3b01      	subs	r3, #1
 800fb82:	2b09      	cmp	r3, #9
 800fb84:	bf96      	itet	ls
 800fb86:	4a74      	ldrls	r2, [pc, #464]	@ (800fd58 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x248>)
 800fb88:	2302      	movhi	r3, #2
 800fb8a:	56d3      	ldrsbls	r3, [r2, r3]
 800fb8c:	74e3      	strb	r3, [r4, #19]
 800fb8e:	7ce0      	ldrb	r0, [r4, #19]
 800fb90:	f001 fb60 	bl	8011254 <pixel::pixel_get_map(pixel::Map)>
 800fb94:	6823      	ldr	r3, [r4, #0]
 800fb96:	4971      	ldr	r1, [pc, #452]	@ (800fd5c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x24c>)
 800fb98:	4602      	mov	r2, r0
 800fb9a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800fb9e:	a803      	add	r0, sp, #12
 800fba0:	f7ff fd16 	bl	800f5d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800fba4:	6823      	ldr	r3, [r4, #0]
 800fba6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800fbaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fbae:	d011      	beq.n	800fbd4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 800fbb0:	f7f9 fff6 	bl	8009ba0 <PixelConfiguration::Get()>
 800fbb4:	7923      	ldrb	r3, [r4, #4]
 800fbb6:	2b03      	cmp	r3, #3
 800fbb8:	d051      	beq.n	800fc5e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x14e>
 800fbba:	3b08      	subs	r3, #8
 800fbbc:	2b02      	cmp	r3, #2
 800fbbe:	bf8c      	ite	hi
 800fbc0:	23f0      	movhi	r3, #240	@ 0xf0
 800fbc2:	23fc      	movls	r3, #252	@ 0xfc
 800fbc4:	6822      	ldr	r2, [r4, #0]
 800fbc6:	0555      	lsls	r5, r2, #21
 800fbc8:	bf5c      	itt	pl
 800fbca:	21c0      	movpl	r1, #192	@ 0xc0
 800fbcc:	7521      	strbpl	r1, [r4, #20]
 800fbce:	0510      	lsls	r0, r2, #20
 800fbd0:	bf58      	it	pl
 800fbd2:	7563      	strbpl	r3, [r4, #21]
 800fbd4:	4962      	ldr	r1, [pc, #392]	@ (800fd60 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x250>)
 800fbd6:	a803      	add	r0, sp, #12
 800fbd8:	f007 fa24 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800fbdc:	7d20      	ldrb	r0, [r4, #20]
 800fbde:	f7ff fd61 	bl	800f6a4 <pixel::pixel_convert_TxH(unsigned char)>
 800fbe2:	6822      	ldr	r2, [r4, #0]
 800fbe4:	495f      	ldr	r1, [pc, #380]	@ (800fd64 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x254>)
 800fbe6:	2302      	movs	r3, #2
 800fbe8:	f3c2 2280 	ubfx	r2, r2, #10, #1
 800fbec:	a803      	add	r0, sp, #12
 800fbee:	f7ff fd17 	bl	800f620 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>
 800fbf2:	7d60      	ldrb	r0, [r4, #21]
 800fbf4:	f7ff fd56 	bl	800f6a4 <pixel::pixel_convert_TxH(unsigned char)>
 800fbf8:	6822      	ldr	r2, [r4, #0]
 800fbfa:	495b      	ldr	r1, [pc, #364]	@ (800fd68 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 800fc02:	a803      	add	r0, sp, #12
 800fc04:	f7ff fd0c 	bl	800f620 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>
 800fc08:	4958      	ldr	r1, [pc, #352]	@ (800fd6c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x25c>)
 800fc0a:	a803      	add	r0, sp, #12
 800fc0c:	f007 fa0a 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800fc10:	6823      	ldr	r3, [r4, #0]
 800fc12:	f8b4 2011 	ldrh.w	r2, [r4, #17]
 800fc16:	4956      	ldr	r1, [pc, #344]	@ (800fd70 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x260>)
 800fc18:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800fc1c:	a803      	add	r0, sp, #12
 800fc1e:	f7ff fcaf 	bl	800f580 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 800fc22:	4954      	ldr	r1, [pc, #336]	@ (800fd74 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x264>)
 800fc24:	a803      	add	r0, sp, #12
 800fc26:	f007 f9fd 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800fc2a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fc2e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800fc32:	f8d4 300a 	ldr.w	r3, [r4, #10]
 800fc36:	6821      	ldr	r1, [r4, #0]
 800fc38:	42aa      	cmp	r2, r5
 800fc3a:	d221      	bcs.n	800fc80 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x170>
 800fc3c:	9803      	ldr	r0, [sp, #12]
 800fc3e:	06c9      	lsls	r1, r1, #27
 800fc40:	4410      	add	r0, r2
 800fc42:	eba5 0502 	sub.w	r5, r5, r2
 800fc46:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800fc4a:	d40a      	bmi.n	800fc62 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x152>
 800fc4c:	b95a      	cbnz	r2, 800fc66 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x156>
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	4a49      	ldr	r2, [pc, #292]	@ (800fd78 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x268>)
 800fc52:	4b4a      	ldr	r3, [pc, #296]	@ (800fd7c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 800fc54:	e00a      	b.n	800fc6c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x15c>
 800fc56:	4620      	mov	r0, r4
 800fc58:	f7ff fda8 	bl	800f7ac <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>
 800fc5c:	e76e      	b.n	800fb3c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x2c>
 800fc5e:	23f8      	movs	r3, #248	@ 0xf8
 800fc60:	e7b0      	b.n	800fbc4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0xb4>
 800fc62:	2a00      	cmp	r2, #0
 800fc64:	d066      	beq.n	800fd34 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x224>
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	4a45      	ldr	r2, [pc, #276]	@ (800fd80 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x270>)
 800fc6a:	4b44      	ldr	r3, [pc, #272]	@ (800fd7c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	f00a fc6b 	bl	801a548 <snprintf>
 800fc72:	4285      	cmp	r5, r0
 800fc74:	bfa2      	ittt	ge
 800fc76:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800fc7a:	18c0      	addge	r0, r0, r3
 800fc7c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800fc80:	4940      	ldr	r1, [pc, #256]	@ (800fd84 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x274>)
 800fc82:	4e41      	ldr	r6, [pc, #260]	@ (800fd88 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x278>)
 800fc84:	a803      	add	r0, sp, #12
 800fc86:	f007 f9cd 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800fc8a:	6823      	ldr	r3, [r4, #0]
 800fc8c:	7ba2      	ldrb	r2, [r4, #14]
 800fc8e:	493f      	ldr	r1, [pc, #252]	@ (800fd8c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x27c>)
 800fc90:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fc94:	a803      	add	r0, sp, #12
 800fc96:	f7ff fc4b 	bl	800f530 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 800fc9a:	2500      	movs	r5, #0
 800fc9c:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800fca0:	6822      	ldr	r2, [r4, #0]
 800fca2:	fa07 f305 	lsl.w	r3, r7, r5
 800fca6:	4393      	bics	r3, r2
 800fca8:	f105 0208 	add.w	r2, r5, #8
 800fcac:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800fcb0:	bf0c      	ite	eq
 800fcb2:	2301      	moveq	r3, #1
 800fcb4:	2300      	movne	r3, #0
 800fcb6:	4631      	mov	r1, r6
 800fcb8:	88d2      	ldrh	r2, [r2, #6]
 800fcba:	a803      	add	r0, sp, #12
 800fcbc:	3501      	adds	r5, #1
 800fcbe:	f7ff fc5f 	bl	800f580 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 800fcc2:	2d08      	cmp	r5, #8
 800fcc4:	f106 0614 	add.w	r6, r6, #20
 800fcc8:	d1ea      	bne.n	800fca0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x190>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	7be2      	ldrb	r2, [r4, #15]
 800fcce:	4930      	ldr	r1, [pc, #192]	@ (800fd90 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x280>)
 800fcd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fcd4:	a803      	add	r0, sp, #12
 800fcd6:	f7ff fc2b 	bl	800f530 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 800fcda:	492e      	ldr	r1, [pc, #184]	@ (800fd94 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x284>)
 800fcdc:	a803      	add	r0, sp, #12
 800fcde:	f007 f9a1 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	7c22      	ldrb	r2, [r4, #16]
 800fce6:	492c      	ldr	r1, [pc, #176]	@ (800fd98 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x288>)
 800fce8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fcec:	a803      	add	r0, sp, #12
 800fcee:	f7ff fc1f 	bl	800f530 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 800fcf2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800fcf6:	b17b      	cbz	r3, 800fd18 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x208>
 800fcf8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	4413      	add	r3, r2
 800fd00:	227d      	movs	r2, #125	@ 0x7d
 800fd02:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fd06:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fd0a:	9903      	ldr	r1, [sp, #12]
 800fd0c:	54ca      	strb	r2, [r1, r3]
 800fd0e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fd12:	3301      	adds	r3, #1
 800fd14:	f8ad 3012 	strh.w	r3, [sp, #18]
 800fd18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fd1a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	4907      	ldr	r1, [pc, #28]	@ (800fd40 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	4a07      	ldr	r2, [pc, #28]	@ (800fd44 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 800fd26:	481d      	ldr	r0, [pc, #116]	@ (800fd9c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x28c>)
 800fd28:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800fd2c:	f00a fbe4 	bl	801a4f8 <printf>
 800fd30:	b007      	add	sp, #28
 800fd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	4a1a      	ldr	r2, [pc, #104]	@ (800fda0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x290>)
 800fd38:	4b10      	ldr	r3, [pc, #64]	@ (800fd7c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 800fd3a:	e797      	b.n	800fc6c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x15c>
 800fd3c:	0801b895 	stmdaeq	r1, {r0, r2, r4, r7, fp, ip, sp, pc}
 800fd40:	0801b8a8 	stmdaeq	r1, {r3, r5, r7, fp, ip, sp, pc}
 800fd44:	0801b853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, sp, pc}
 800fd48:	0801f2a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, ip, sp, lr, pc}
 800fd4c:	0801f2a0 	stmdaeq	r1, {r5, r7, r9, ip, sp, lr, pc}
 800fd50:	0801f276 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, ip, sp, lr, pc}
 800fd54:	0801b8b0 	stmdaeq	r1, {r4, r5, r7, fp, ip, sp, pc}
 800fd58:	0801ecfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, fp, sp, lr, pc}
 800fd5c:	0801f290 	stmdaeq	r1, {r4, r7, r9, ip, sp, lr, pc}
 800fd60:	0801b8c4 	stmdaeq	r1, {r2, r6, r7, fp, ip, sp, pc}
 800fd64:	0801f288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr, pc}
 800fd68:	0801f280 	stmdaeq	r1, {r7, r9, ip, sp, lr, pc}
 800fd6c:	0801b8da 	stmdaeq	r1, {r1, r3, r4, r6, r7, fp, ip, sp, pc}
 800fd70:	0801f266 	stmdaeq	r1, {r1, r2, r5, r6, r9, ip, sp, lr, pc}
 800fd74:	0801b8e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, fp, ip, sp, pc}
 800fd78:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 800fd7c:	0801f257 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, ip, sp, lr, pc}
 800fd80:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800fd84:	0801b8f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp, ip, sp, pc}
 800fd88:	0801f2b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, ip, sp, lr, pc}
 800fd8c:	0801f245 	stmdaeq	r1, {r0, r2, r6, r9, ip, sp, lr, pc}
 800fd90:	0801f23a 	stmdaeq	r1, {r1, r3, r4, r5, r9, ip, sp, lr, pc}
 800fd94:	0801b903 	stmdaeq	r1, {r0, r1, r8, fp, ip, sp, pc}
 800fd98:	0801f22d 	stmdaeq	r1, {r0, r2, r3, r5, r9, ip, sp, lr, pc}
 800fd9c:	0801b910 	stmdaeq	r1, {r4, r8, fp, ip, sp, pc}
 800fda0:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800fda4 <PixelDmxParams::Set()>:
 800fda4:	b538      	push	{r3, r4, r5, lr}
 800fda6:	4604      	mov	r4, r0
 800fda8:	f7f9 fefa 	bl	8009ba0 <PixelConfiguration::Get()>
 800fdac:	6823      	ldr	r3, [r4, #0]
 800fdae:	07dd      	lsls	r5, r3, #31
 800fdb0:	bf44      	itt	mi
 800fdb2:	7922      	ldrbmi	r2, [r4, #4]
 800fdb4:	60c2      	strmi	r2, [r0, #12]
 800fdb6:	0799      	lsls	r1, r3, #30
 800fdb8:	d505      	bpl.n	800fdc6 <PixelDmxParams::Set()+0x22>
 800fdba:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 800fdbe:	2a00      	cmp	r2, #0
 800fdc0:	bf08      	it	eq
 800fdc2:	22aa      	moveq	r2, #170	@ 0xaa
 800fdc4:	6002      	str	r2, [r0, #0]
 800fdc6:	059a      	lsls	r2, r3, #22
 800fdc8:	bf44      	itt	mi
 800fdca:	7ce2      	ldrbmi	r2, [r4, #19]
 800fdcc:	6102      	strmi	r2, [r0, #16]
 800fdce:	055d      	lsls	r5, r3, #21
 800fdd0:	bf44      	itt	mi
 800fdd2:	7d22      	ldrbmi	r2, [r4, #20]
 800fdd4:	7542      	strbmi	r2, [r0, #21]
 800fdd6:	0519      	lsls	r1, r3, #20
 800fdd8:	bf44      	itt	mi
 800fdda:	7d62      	ldrbmi	r2, [r4, #21]
 800fddc:	7582      	strbmi	r2, [r0, #22]
 800fdde:	06da      	lsls	r2, r3, #27
 800fde0:	bf44      	itt	mi
 800fde2:	f8d4 200a 	ldrmi.w	r2, [r4, #10]
 800fde6:	6042      	strmi	r2, [r0, #4]
 800fde8:	069d      	lsls	r5, r3, #26
 800fdea:	4d0e      	ldr	r5, [pc, #56]	@ (800fe24 <PixelDmxParams::Set()+0x80>)
 800fdec:	bf44      	itt	mi
 800fdee:	7ba3      	ldrbmi	r3, [r4, #14]
 800fdf0:	75c3      	strbmi	r3, [r0, #23]
 800fdf2:	682b      	ldr	r3, [r5, #0]
 800fdf4:	b92b      	cbnz	r3, 800fe02 <PixelDmxParams::Set()+0x5e>
 800fdf6:	4b0c      	ldr	r3, [pc, #48]	@ (800fe28 <PixelDmxParams::Set()+0x84>)
 800fdf8:	4a0c      	ldr	r2, [pc, #48]	@ (800fe2c <PixelDmxParams::Set()+0x88>)
 800fdfa:	480d      	ldr	r0, [pc, #52]	@ (800fe30 <PixelDmxParams::Set()+0x8c>)
 800fdfc:	21a4      	movs	r1, #164	@ 0xa4
 800fdfe:	f00a fc5b 	bl	801a6b8 <__assert_func>
 800fe02:	6822      	ldr	r2, [r4, #0]
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	0750      	lsls	r0, r2, #29
 800fe08:	bf44      	itt	mi
 800fe0a:	f8b4 1007 	ldrhmi.w	r1, [r4, #7]
 800fe0e:	62d9      	strmi	r1, [r3, #44]	@ 0x2c
 800fe10:	05d1      	lsls	r1, r2, #23
 800fe12:	bf44      	itt	mi
 800fe14:	f8b4 1011 	ldrhmi.w	r1, [r4, #17]
 800fe18:	6219      	strmi	r1, [r3, #32]
 800fe1a:	0652      	lsls	r2, r2, #25
 800fe1c:	bf44      	itt	mi
 800fe1e:	7be2      	ldrbmi	r2, [r4, #15]
 800fe20:	61da      	strmi	r2, [r3, #28]
 800fe22:	bd38      	pop	{r3, r4, r5, pc}
 800fe24:	20000078 	andcs	r0, r0, r8, ror r0
 800fe28:	0801adef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, fp, sp, pc}
 800fe2c:	0801ae02 	stmdaeq	r1, {r1, r9, sl, fp, sp, pc}
 800fe30:	0801b92c 	stmdaeq	r1, {r2, r3, r5, r8, fp, ip, sp, pc}

0800fe34 <PixelDmxParams::Dump()>:
 800fe34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe36:	4604      	mov	r4, r0
 800fe38:	4b38      	ldr	r3, [pc, #224]	@ (800ff1c <PixelDmxParams::Dump()+0xe8>)
 800fe3a:	4a39      	ldr	r2, [pc, #228]	@ (800ff20 <PixelDmxParams::Dump()+0xec>)
 800fe3c:	4939      	ldr	r1, [pc, #228]	@ (800ff24 <PixelDmxParams::Dump()+0xf0>)
 800fe3e:	483a      	ldr	r0, [pc, #232]	@ (800ff28 <PixelDmxParams::Dump()+0xf4>)
 800fe40:	4e3a      	ldr	r6, [pc, #232]	@ (800ff2c <PixelDmxParams::Dump()+0xf8>)
 800fe42:	f00a fb59 	bl	801a4f8 <printf>
 800fe46:	7920      	ldrb	r0, [r4, #4]
 800fe48:	f001 f992 	bl	8011170 <pixel::pixel_get_type(pixel::Type)>
 800fe4c:	7923      	ldrb	r3, [r4, #4]
 800fe4e:	4938      	ldr	r1, [pc, #224]	@ (800ff30 <PixelDmxParams::Dump()+0xfc>)
 800fe50:	4602      	mov	r2, r0
 800fe52:	4838      	ldr	r0, [pc, #224]	@ (800ff34 <PixelDmxParams::Dump()+0x100>)
 800fe54:	f00a fb50 	bl	801a4f8 <printf>
 800fe58:	7ce5      	ldrb	r5, [r4, #19]
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f001 f9fa 	bl	8011254 <pixel::pixel_get_map(pixel::Map)>
 800fe60:	462a      	mov	r2, r5
 800fe62:	4603      	mov	r3, r0
 800fe64:	4934      	ldr	r1, [pc, #208]	@ (800ff38 <PixelDmxParams::Dump()+0x104>)
 800fe66:	4835      	ldr	r0, [pc, #212]	@ (800ff3c <PixelDmxParams::Dump()+0x108>)
 800fe68:	f00a fb46 	bl	801a4f8 <printf>
 800fe6c:	7d25      	ldrb	r5, [r4, #20]
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f7ff fc18 	bl	800f6a4 <pixel::pixel_convert_TxH(unsigned char)>
 800fe74:	ee10 0a10 	vmov	r0, s0
 800fe78:	f7f9 f9e0 	bl	800923c <__aeabi_f2d>
 800fe7c:	9500      	str	r5, [sp, #0]
 800fe7e:	4602      	mov	r2, r0
 800fe80:	460b      	mov	r3, r1
 800fe82:	482f      	ldr	r0, [pc, #188]	@ (800ff40 <PixelDmxParams::Dump()+0x10c>)
 800fe84:	492f      	ldr	r1, [pc, #188]	@ (800ff44 <PixelDmxParams::Dump()+0x110>)
 800fe86:	f00a fb37 	bl	801a4f8 <printf>
 800fe8a:	7d65      	ldrb	r5, [r4, #21]
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f7ff fc09 	bl	800f6a4 <pixel::pixel_convert_TxH(unsigned char)>
 800fe92:	ee10 0a10 	vmov	r0, s0
 800fe96:	f7f9 f9d1 	bl	800923c <__aeabi_f2d>
 800fe9a:	9500      	str	r5, [sp, #0]
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	4827      	ldr	r0, [pc, #156]	@ (800ff40 <PixelDmxParams::Dump()+0x10c>)
 800fea2:	4929      	ldr	r1, [pc, #164]	@ (800ff48 <PixelDmxParams::Dump()+0x114>)
 800fea4:	f00a fb28 	bl	801a4f8 <printf>
 800fea8:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 800feac:	4927      	ldr	r1, [pc, #156]	@ (800ff4c <PixelDmxParams::Dump()+0x118>)
 800feae:	4828      	ldr	r0, [pc, #160]	@ (800ff50 <PixelDmxParams::Dump()+0x11c>)
 800feb0:	f00a fb22 	bl	801a4f8 <printf>
 800feb4:	2500      	movs	r5, #0
 800feb6:	f105 0308 	add.w	r3, r5, #8
 800feba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800febe:	4631      	mov	r1, r6
 800fec0:	88da      	ldrh	r2, [r3, #6]
 800fec2:	4823      	ldr	r0, [pc, #140]	@ (800ff50 <PixelDmxParams::Dump()+0x11c>)
 800fec4:	3501      	adds	r5, #1
 800fec6:	f00a fb17 	bl	801a4f8 <printf>
 800feca:	2d08      	cmp	r5, #8
 800fecc:	f106 0614 	add.w	r6, r6, #20
 800fed0:	d1f1      	bne.n	800feb6 <PixelDmxParams::Dump()+0x82>
 800fed2:	7be2      	ldrb	r2, [r4, #15]
 800fed4:	491f      	ldr	r1, [pc, #124]	@ (800ff54 <PixelDmxParams::Dump()+0x120>)
 800fed6:	481e      	ldr	r0, [pc, #120]	@ (800ff50 <PixelDmxParams::Dump()+0x11c>)
 800fed8:	f00a fb0e 	bl	801a4f8 <printf>
 800fedc:	f8b4 2011 	ldrh.w	r2, [r4, #17]
 800fee0:	491d      	ldr	r1, [pc, #116]	@ (800ff58 <PixelDmxParams::Dump()+0x124>)
 800fee2:	481b      	ldr	r0, [pc, #108]	@ (800ff50 <PixelDmxParams::Dump()+0x11c>)
 800fee4:	f00a fb08 	bl	801a4f8 <printf>
 800fee8:	f8d4 200a 	ldr.w	r2, [r4, #10]
 800feec:	491b      	ldr	r1, [pc, #108]	@ (800ff5c <PixelDmxParams::Dump()+0x128>)
 800feee:	481c      	ldr	r0, [pc, #112]	@ (800ff60 <PixelDmxParams::Dump()+0x12c>)
 800fef0:	f00a fb02 	bl	801a4f8 <printf>
 800fef4:	7ba2      	ldrb	r2, [r4, #14]
 800fef6:	491b      	ldr	r1, [pc, #108]	@ (800ff64 <PixelDmxParams::Dump()+0x130>)
 800fef8:	4815      	ldr	r0, [pc, #84]	@ (800ff50 <PixelDmxParams::Dump()+0x11c>)
 800fefa:	f00a fafd 	bl	801a4f8 <printf>
 800fefe:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 800ff02:	4919      	ldr	r1, [pc, #100]	@ (800ff68 <PixelDmxParams::Dump()+0x134>)
 800ff04:	4812      	ldr	r0, [pc, #72]	@ (800ff50 <PixelDmxParams::Dump()+0x11c>)
 800ff06:	f00a faf7 	bl	801a4f8 <printf>
 800ff0a:	7c22      	ldrb	r2, [r4, #16]
 800ff0c:	4917      	ldr	r1, [pc, #92]	@ (800ff6c <PixelDmxParams::Dump()+0x138>)
 800ff0e:	4810      	ldr	r0, [pc, #64]	@ (800ff50 <PixelDmxParams::Dump()+0x11c>)
 800ff10:	b002      	add	sp, #8
 800ff12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff16:	f00a baef 	b.w	801a4f8 <printf>
 800ff1a:	bf00      	nop
 800ff1c:	0801f2a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, ip, sp, lr, pc}
 800ff20:	0801b94e 	stmdaeq	r1, {r1, r2, r3, r6, r8, fp, ip, sp, pc}
 800ff24:	0801b853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, sp, pc}
 800ff28:	0801b953 	stmdaeq	r1, {r0, r1, r4, r6, r8, fp, ip, sp, pc}
 800ff2c:	0801f2b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, ip, sp, lr, pc}
 800ff30:	0801f2a0 	stmdaeq	r1, {r5, r7, r9, ip, sp, lr, pc}
 800ff34:	0801b961 	stmdaeq	r1, {r0, r5, r6, r8, fp, ip, sp, pc}
 800ff38:	0801f290 	stmdaeq	r1, {r4, r7, r9, ip, sp, lr, pc}
 800ff3c:	0801b96e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, fp, ip, sp, pc}
 800ff40:	0801b97b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 800ff44:	0801f288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr, pc}
 800ff48:	0801f280 	stmdaeq	r1, {r7, r9, ip, sp, lr, pc}
 800ff4c:	0801f276 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, ip, sp, lr, pc}
 800ff50:	0801b98c 	stmdaeq	r1, {r2, r3, r7, r8, fp, ip, sp, pc}
 800ff54:	0801f23a 	stmdaeq	r1, {r1, r3, r4, r5, r9, ip, sp, lr, pc}
 800ff58:	0801f266 	stmdaeq	r1, {r1, r2, r5, r6, r9, ip, sp, lr, pc}
 800ff5c:	0801f257 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, ip, sp, lr, pc}
 800ff60:	0801b994 	stmdaeq	r1, {r2, r4, r7, r8, fp, ip, sp, pc}
 800ff64:	0801f245 	stmdaeq	r1, {r0, r2, r6, r9, ip, sp, lr, pc}
 800ff68:	0801f374 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, ip, sp, lr, pc}
 800ff6c:	0801f22d 	stmdaeq	r1, {r0, r2, r3, r5, r9, ip, sp, lr, pc}

0800ff70 <PixelDmxParams::Load()>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	4e0e      	ldr	r6, [pc, #56]	@ (800ffac <PixelDmxParams::Load()+0x3c>)
 800ff74:	4d0e      	ldr	r5, [pc, #56]	@ (800ffb0 <PixelDmxParams::Load()+0x40>)
 800ff76:	4604      	mov	r4, r0
 800ff78:	4632      	mov	r2, r6
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	2352      	movs	r3, #82	@ 0x52
 800ff7e:	480d      	ldr	r0, [pc, #52]	@ (800ffb4 <PixelDmxParams::Load()+0x44>)
 800ff80:	f00a faba 	bl	801a4f8 <printf>
 800ff84:	2300      	movs	r3, #0
 800ff86:	7023      	strb	r3, [r4, #0]
 800ff88:	7063      	strb	r3, [r4, #1]
 800ff8a:	70a3      	strb	r3, [r4, #2]
 800ff8c:	70e3      	strb	r3, [r4, #3]
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f7ff fc0c 	bl	800f7ac <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>
 800ff94:	4620      	mov	r0, r4
 800ff96:	f7ff ff4d 	bl	800fe34 <PixelDmxParams::Dump()>
 800ff9a:	4632      	mov	r2, r6
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	4806      	ldr	r0, [pc, #24]	@ (800ffb8 <PixelDmxParams::Load()+0x48>)
 800ffa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffa4:	2362      	movs	r3, #98	@ 0x62
 800ffa6:	f00a baa7 	b.w	801a4f8 <printf>
 800ffaa:	bf00      	nop
 800ffac:	0801b99c 	stmdaeq	r1, {r2, r3, r4, r7, r8, fp, ip, sp, pc}
 800ffb0:	0801b853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, sp, pc}
 800ffb4:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 800ffb8:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}

0800ffbc <PixelDmxParams::Load(char const*, unsigned long)>:
 800ffbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffbe:	2366      	movs	r3, #102	@ 0x66
 800ffc0:	460e      	mov	r6, r1
 800ffc2:	b087      	sub	sp, #28
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	4617      	mov	r7, r2
 800ffc8:	491d      	ldr	r1, [pc, #116]	@ (8010040 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 800ffca:	4a1e      	ldr	r2, [pc, #120]	@ (8010044 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 800ffcc:	481e      	ldr	r0, [pc, #120]	@ (8010048 <PixelDmxParams::Load(char const*, unsigned long)+0x8c>)
 800ffce:	f00a fa93 	bl	801a4f8 <printf>
 800ffd2:	b92e      	cbnz	r6, 800ffe0 <PixelDmxParams::Load(char const*, unsigned long)+0x24>
 800ffd4:	4b1d      	ldr	r3, [pc, #116]	@ (801004c <PixelDmxParams::Load(char const*, unsigned long)+0x90>)
 800ffd6:	4a1b      	ldr	r2, [pc, #108]	@ (8010044 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 800ffd8:	4819      	ldr	r0, [pc, #100]	@ (8010040 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 800ffda:	2168      	movs	r1, #104	@ 0x68
 800ffdc:	f00a fb6c 	bl	801a6b8 <__assert_func>
 800ffe0:	b92f      	cbnz	r7, 800ffee <PixelDmxParams::Load(char const*, unsigned long)+0x32>
 800ffe2:	4b1b      	ldr	r3, [pc, #108]	@ (8010050 <PixelDmxParams::Load(char const*, unsigned long)+0x94>)
 800ffe4:	4a17      	ldr	r2, [pc, #92]	@ (8010044 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 800ffe6:	4816      	ldr	r0, [pc, #88]	@ (8010040 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 800ffe8:	2169      	movs	r1, #105	@ 0x69
 800ffea:	f00a fb65 	bl	801a6b8 <__assert_func>
 800ffee:	2500      	movs	r5, #0
 800fff0:	4622      	mov	r2, r4
 800fff2:	4918      	ldr	r1, [pc, #96]	@ (8010054 <PixelDmxParams::Load(char const*, unsigned long)+0x98>)
 800fff4:	7025      	strb	r5, [r4, #0]
 800fff6:	7065      	strb	r5, [r4, #1]
 800fff8:	70a5      	strb	r5, [r4, #2]
 800fffa:	70e5      	strb	r5, [r4, #3]
 800fffc:	a804      	add	r0, sp, #16
 800fffe:	f007 f82b 	bl	8017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010002:	463a      	mov	r2, r7
 8010004:	4631      	mov	r1, r6
 8010006:	a804      	add	r0, sp, #16
 8010008:	f007 f82a 	bl	8017060 <ReadConfigFile::Read(char const*, unsigned int)>
 801000c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8010010:	2326      	movs	r3, #38	@ 0x26
 8010012:	4811      	ldr	r0, [pc, #68]	@ (8010058 <PixelDmxParams::Load(char const*, unsigned long)+0x9c>)
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	462a      	mov	r2, r5
 8010018:	4623      	mov	r3, r4
 801001a:	2102      	movs	r1, #2
 801001c:	6800      	ldr	r0, [r0, #0]
 801001e:	f006 fd1b 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8010022:	4620      	mov	r0, r4
 8010024:	f7ff ff06 	bl	800fe34 <PixelDmxParams::Dump()>
 8010028:	4a06      	ldr	r2, [pc, #24]	@ (8010044 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 801002a:	4905      	ldr	r1, [pc, #20]	@ (8010040 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 801002c:	480b      	ldr	r0, [pc, #44]	@ (801005c <PixelDmxParams::Load(char const*, unsigned long)+0xa0>)
 801002e:	2376      	movs	r3, #118	@ 0x76
 8010030:	f00a fa62 	bl	801a4f8 <printf>
 8010034:	a804      	add	r0, sp, #16
 8010036:	f007 f812 	bl	801705e <ReadConfigFile::~ReadConfigFile()>
 801003a:	b007      	add	sp, #28
 801003c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801003e:	bf00      	nop
 8010040:	0801b853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, sp, pc}
 8010044:	0801b99c 	stmdaeq	r1, {r2, r3, r4, r7, r8, fp, ip, sp, pc}
 8010048:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 801004c:	0801b895 	stmdaeq	r1, {r0, r2, r4, r7, fp, ip, sp, pc}
 8010050:	0801acc9 	stmdaeq	r1, {r0, r3, r6, r7, sl, fp, sp, pc}
 8010054:	0800facd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, ip, sp, lr, pc}
 8010058:	2000e2cc 	andcs	lr, r0, ip, asr #5
 801005c:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}

08010060 <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 8010060:	2000      	movs	r0, #0
 8010062:	4770      	bx	lr

08010064 <WS28xxDmxMulti::GetDmxStartAddress()>:
 8010064:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <WS28xxDmxMulti::GetDmxFootprint()>:
 801006c:	2000      	movs	r0, #0
 801006e:	4770      	bx	lr

08010070 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8010070:	b538      	push	{r3, r4, r5, lr}
 8010072:	6845      	ldr	r5, [r0, #4]
 8010074:	4b06      	ldr	r3, [pc, #24]	@ (8010090 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x20>)
 8010076:	6003      	str	r3, [r0, #0]
 8010078:	4604      	mov	r4, r0
 801007a:	b135      	cbz	r5, 801008a <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1a>
 801007c:	4628      	mov	r0, r5
 801007e:	f001 fc35 	bl	80118ec <WS28xxMulti::~WS28xxMulti()>
 8010082:	2104      	movs	r1, #4
 8010084:	4628      	mov	r0, r5
 8010086:	f00a fc8b 	bl	801a9a0 <operator delete(void*, unsigned int)>
 801008a:	4620      	mov	r0, r4
 801008c:	bd38      	pop	{r3, r4, r5, pc}
 801008e:	bf00      	nop
 8010090:	0801ed38 	stmdaeq	r1, {r3, r4, r5, r8, sl, fp, sp, lr, pc}

08010094 <WS28xxDmxMulti::Sync()>:
 8010094:	b510      	push	{r4, lr}
 8010096:	4604      	mov	r4, r0
 8010098:	6860      	ldr	r0, [r4, #4]
 801009a:	f001 fe63 	bl	8011d64 <WS28xxMulti::IsUpdating()>
 801009e:	2800      	cmp	r0, #0
 80100a0:	d1fa      	bne.n	8010098 <WS28xxDmxMulti::Sync()+0x4>
 80100a2:	6860      	ldr	r0, [r4, #4]
 80100a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a8:	f001 bd6a 	b.w	8011b80 <WS28xxMulti::Update()>

080100ac <WS28xxDmxMulti::FullOn()>:
 80100ac:	b510      	push	{r4, lr}
 80100ae:	4604      	mov	r4, r0
 80100b0:	6860      	ldr	r0, [r4, #4]
 80100b2:	f001 fe57 	bl	8011d64 <WS28xxMulti::IsUpdating()>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d1fa      	bne.n	80100b0 <WS28xxDmxMulti::FullOn()+0x4>
 80100ba:	6860      	ldr	r0, [r4, #4]
 80100bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100c0:	f002 be62 	b.w	8012d88 <WS28xxMulti::FullOn()>

080100c4 <WS28xxDmxMulti::Print()>:
 80100c4:	b530      	push	{r4, r5, lr}
 80100c6:	4d69      	ldr	r5, [pc, #420]	@ (801026c <WS28xxDmxMulti::Print()+0x1a8>)
 80100c8:	682c      	ldr	r4, [r5, #0]
 80100ca:	b083      	sub	sp, #12
 80100cc:	2c00      	cmp	r4, #0
 80100ce:	f000 80a2 	beq.w	8010216 <WS28xxDmxMulti::Print()+0x152>
 80100d2:	4867      	ldr	r0, [pc, #412]	@ (8010270 <WS28xxDmxMulti::Print()+0x1ac>)
 80100d4:	f00a fa65 	bl	801a5a2 <puts>
 80100d8:	68e0      	ldr	r0, [r4, #12]
 80100da:	f001 f849 	bl	8011170 <pixel::pixel_get_type(pixel::Type)>
 80100de:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80100e2:	4601      	mov	r1, r0
 80100e4:	4863      	ldr	r0, [pc, #396]	@ (8010274 <WS28xxDmxMulti::Print()+0x1b0>)
 80100e6:	f00a fa07 	bl	801a4f8 <printf>
 80100ea:	4863      	ldr	r0, [pc, #396]	@ (8010278 <WS28xxDmxMulti::Print()+0x1b4>)
 80100ec:	6821      	ldr	r1, [r4, #0]
 80100ee:	f00a fa03 	bl	801a4f8 <printf>
 80100f2:	7d23      	ldrb	r3, [r4, #20]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d12c      	bne.n	8010152 <WS28xxDmxMulti::Print()+0x8e>
 80100f8:	68e0      	ldr	r0, [r4, #12]
 80100fa:	f1a0 010b 	sub.w	r1, r0, #11
 80100fe:	2901      	cmp	r1, #1
 8010100:	d94b      	bls.n	801019a <WS28xxDmxMulti::Print()+0xd6>
 8010102:	6861      	ldr	r1, [r4, #4]
 8010104:	485d      	ldr	r0, [pc, #372]	@ (801027c <WS28xxDmxMulti::Print()+0x1b8>)
 8010106:	f00a f9f7 	bl	801a4f8 <printf>
 801010a:	69a1      	ldr	r1, [r4, #24]
 801010c:	485c      	ldr	r0, [pc, #368]	@ (8010280 <WS28xxDmxMulti::Print()+0x1bc>)
 801010e:	f00a f9f3 	bl	801a4f8 <printf>
 8010112:	485c      	ldr	r0, [pc, #368]	@ (8010284 <WS28xxDmxMulti::Print()+0x1c0>)
 8010114:	f00a fa45 	bl	801a5a2 <puts>
 8010118:	69e1      	ldr	r1, [r4, #28]
 801011a:	485b      	ldr	r0, [pc, #364]	@ (8010288 <WS28xxDmxMulti::Print()+0x1c4>)
 801011c:	f00a f9ec 	bl	801a4f8 <printf>
 8010120:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8010124:	4859      	ldr	r0, [pc, #356]	@ (801028c <WS28xxDmxMulti::Print()+0x1c8>)
 8010126:	f00a f9e7 	bl	801a4f8 <printf>
 801012a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801012c:	4858      	ldr	r0, [pc, #352]	@ (8010290 <WS28xxDmxMulti::Print()+0x1cc>)
 801012e:	f00a f9e3 	bl	801a4f8 <printf>
 8010132:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010134:	4857      	ldr	r0, [pc, #348]	@ (8010294 <WS28xxDmxMulti::Print()+0x1d0>)
 8010136:	f00a f9df 	bl	801a4f8 <printf>
 801013a:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 801013c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801013e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8010140:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8010142:	9001      	str	r0, [sp, #4]
 8010144:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
 8010146:	9400      	str	r4, [sp, #0]
 8010148:	4853      	ldr	r0, [pc, #332]	@ (8010298 <WS28xxDmxMulti::Print()+0x1d4>)
 801014a:	f00a f9d5 	bl	801a4f8 <printf>
 801014e:	b003      	add	sp, #12
 8010150:	bd30      	pop	{r4, r5, pc}
 8010152:	6920      	ldr	r0, [r4, #16]
 8010154:	f001 f87e 	bl	8011254 <pixel::pixel_get_map(pixel::Map)>
 8010158:	6922      	ldr	r2, [r4, #16]
 801015a:	4601      	mov	r1, r0
 801015c:	484f      	ldr	r0, [pc, #316]	@ (801029c <WS28xxDmxMulti::Print()+0x1d8>)
 801015e:	f00a f9cb 	bl	801a4f8 <printf>
 8010162:	7d65      	ldrb	r5, [r4, #21]
 8010164:	2dff      	cmp	r5, #255	@ 0xff
 8010166:	d01d      	beq.n	80101a4 <WS28xxDmxMulti::Print()+0xe0>
 8010168:	2ddf      	cmp	r5, #223	@ 0xdf
 801016a:	d944      	bls.n	80101f6 <WS28xxDmxMulti::Print()+0x132>
 801016c:	f1a5 0ce0 	sub.w	ip, r5, #224	@ 0xe0
 8010170:	f1bc 0f1e 	cmp.w	ip, #30
 8010174:	d816      	bhi.n	80101a4 <WS28xxDmxMulti::Print()+0xe0>
 8010176:	e8df f00c 	tbb	[pc, ip]
 801017a:	1515156b 	ldrne	r1, [r5, #-1387]	@ 0xfffffa95
 801017e:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 8010182:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 8010186:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 801018a:	15151571 	ldrne	r1, [r5, #-1393]	@ 0xfffffa8f
 801018e:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 8010192:	15151556 	ldrne	r1, [r5, #-1366]	@ 0xfffffaaa
 8010196:	005c1559 	subseq	r1, ip, r9, asr r5
 801019a:	7de1      	ldrb	r1, [r4, #23]
 801019c:	4840      	ldr	r0, [pc, #256]	@ (80102a0 <WS28xxDmxMulti::Print()+0x1dc>)
 801019e:	f00a f9ab 	bl	801a4f8 <printf>
 80101a2:	e7ae      	b.n	8010102 <WS28xxDmxMulti::Print()+0x3e>
 80101a4:	2200      	movs	r2, #0
 80101a6:	2300      	movs	r3, #0
 80101a8:	483e      	ldr	r0, [pc, #248]	@ (80102a4 <WS28xxDmxMulti::Print()+0x1e0>)
 80101aa:	9500      	str	r5, [sp, #0]
 80101ac:	f00a f9a4 	bl	801a4f8 <printf>
 80101b0:	7da1      	ldrb	r1, [r4, #22]
 80101b2:	29ff      	cmp	r1, #255	@ 0xff
 80101b4:	d018      	beq.n	80101e8 <WS28xxDmxMulti::Print()+0x124>
 80101b6:	29df      	cmp	r1, #223	@ 0xdf
 80101b8:	d925      	bls.n	8010206 <WS28xxDmxMulti::Print()+0x142>
 80101ba:	f1a1 0ee0 	sub.w	lr, r1, #224	@ 0xe0
 80101be:	f1be 0f1e 	cmp.w	lr, #30
 80101c2:	d811      	bhi.n	80101e8 <WS28xxDmxMulti::Print()+0x124>
 80101c4:	e8df f00e 	tbb	[pc, lr]
 80101c8:	10101041 	andsne	r1, r0, r1, asr #32
 80101cc:	10101010 	andsne	r1, r0, r0, lsl r0
 80101d0:	10101010 	andsne	r1, r0, r0, lsl r0
 80101d4:	10101010 	andsne	r1, r0, r0, lsl r0
 80101d8:	10101047 	andsne	r1, r0, r7, asr #32
 80101dc:	10101010 	andsne	r1, r0, r0, lsl r0
 80101e0:	1010103e 	andsne	r1, r0, lr, lsr r0
 80101e4:	0038103b 	eorseq	r1, r8, fp, lsr r0
 80101e8:	2200      	movs	r2, #0
 80101ea:	2300      	movs	r3, #0
 80101ec:	9100      	str	r1, [sp, #0]
 80101ee:	482e      	ldr	r0, [pc, #184]	@ (80102a8 <WS28xxDmxMulti::Print()+0x1e4>)
 80101f0:	f00a f982 	bl	801a4f8 <printf>
 80101f4:	e785      	b.n	8010102 <WS28xxDmxMulti::Print()+0x3e>
 80101f6:	2d80      	cmp	r5, #128	@ 0x80
 80101f8:	f04f 0200 	mov.w	r2, #0
 80101fc:	d033      	beq.n	8010266 <WS28xxDmxMulti::Print()+0x1a2>
 80101fe:	2dc0      	cmp	r5, #192	@ 0xc0
 8010200:	d1d1      	bne.n	80101a6 <WS28xxDmxMulti::Print()+0xe2>
 8010202:	4b2a      	ldr	r3, [pc, #168]	@ (80102ac <WS28xxDmxMulti::Print()+0x1e8>)
 8010204:	e7d0      	b.n	80101a8 <WS28xxDmxMulti::Print()+0xe4>
 8010206:	2980      	cmp	r1, #128	@ 0x80
 8010208:	f04f 0200 	mov.w	r2, #0
 801020c:	d029      	beq.n	8010262 <WS28xxDmxMulti::Print()+0x19e>
 801020e:	29c0      	cmp	r1, #192	@ 0xc0
 8010210:	d1eb      	bne.n	80101ea <WS28xxDmxMulti::Print()+0x126>
 8010212:	4b26      	ldr	r3, [pc, #152]	@ (80102ac <WS28xxDmxMulti::Print()+0x1e8>)
 8010214:	e7ea      	b.n	80101ec <WS28xxDmxMulti::Print()+0x128>
 8010216:	4b26      	ldr	r3, [pc, #152]	@ (80102b0 <WS28xxDmxMulti::Print()+0x1ec>)
 8010218:	4a26      	ldr	r2, [pc, #152]	@ (80102b4 <WS28xxDmxMulti::Print()+0x1f0>)
 801021a:	4827      	ldr	r0, [pc, #156]	@ (80102b8 <WS28xxDmxMulti::Print()+0x1f4>)
 801021c:	21a4      	movs	r1, #164	@ 0xa4
 801021e:	f00a fa4b 	bl	801a6b8 <__assert_func>
 8010222:	682c      	ldr	r4, [r5, #0]
 8010224:	e755      	b.n	80100d2 <WS28xxDmxMulti::Print()+0xe>
 8010226:	4b25      	ldr	r3, [pc, #148]	@ (80102bc <WS28xxDmxMulti::Print()+0x1f8>)
 8010228:	2200      	movs	r2, #0
 801022a:	e7bd      	b.n	80101a8 <WS28xxDmxMulti::Print()+0xe4>
 801022c:	4b24      	ldr	r3, [pc, #144]	@ (80102c0 <WS28xxDmxMulti::Print()+0x1fc>)
 801022e:	2200      	movs	r2, #0
 8010230:	e7ba      	b.n	80101a8 <WS28xxDmxMulti::Print()+0xe4>
 8010232:	4b24      	ldr	r3, [pc, #144]	@ (80102c4 <WS28xxDmxMulti::Print()+0x200>)
 8010234:	2200      	movs	r2, #0
 8010236:	e7b7      	b.n	80101a8 <WS28xxDmxMulti::Print()+0xe4>
 8010238:	4b22      	ldr	r3, [pc, #136]	@ (80102c4 <WS28xxDmxMulti::Print()+0x200>)
 801023a:	2200      	movs	r2, #0
 801023c:	e7d6      	b.n	80101ec <WS28xxDmxMulti::Print()+0x128>
 801023e:	4b20      	ldr	r3, [pc, #128]	@ (80102c0 <WS28xxDmxMulti::Print()+0x1fc>)
 8010240:	2200      	movs	r2, #0
 8010242:	e7d3      	b.n	80101ec <WS28xxDmxMulti::Print()+0x128>
 8010244:	4b1d      	ldr	r3, [pc, #116]	@ (80102bc <WS28xxDmxMulti::Print()+0x1f8>)
 8010246:	2200      	movs	r2, #0
 8010248:	e7d0      	b.n	80101ec <WS28xxDmxMulti::Print()+0x128>
 801024a:	4b1f      	ldr	r3, [pc, #124]	@ (80102c8 <WS28xxDmxMulti::Print()+0x204>)
 801024c:	2200      	movs	r2, #0
 801024e:	e7cd      	b.n	80101ec <WS28xxDmxMulti::Print()+0x128>
 8010250:	4b1d      	ldr	r3, [pc, #116]	@ (80102c8 <WS28xxDmxMulti::Print()+0x204>)
 8010252:	2200      	movs	r2, #0
 8010254:	e7a8      	b.n	80101a8 <WS28xxDmxMulti::Print()+0xe4>
 8010256:	4b1d      	ldr	r3, [pc, #116]	@ (80102cc <WS28xxDmxMulti::Print()+0x208>)
 8010258:	2200      	movs	r2, #0
 801025a:	e7c7      	b.n	80101ec <WS28xxDmxMulti::Print()+0x128>
 801025c:	4b1b      	ldr	r3, [pc, #108]	@ (80102cc <WS28xxDmxMulti::Print()+0x208>)
 801025e:	2200      	movs	r2, #0
 8010260:	e7a2      	b.n	80101a8 <WS28xxDmxMulti::Print()+0xe4>
 8010262:	4b1b      	ldr	r3, [pc, #108]	@ (80102d0 <WS28xxDmxMulti::Print()+0x20c>)
 8010264:	e7c2      	b.n	80101ec <WS28xxDmxMulti::Print()+0x128>
 8010266:	4b1a      	ldr	r3, [pc, #104]	@ (80102d0 <WS28xxDmxMulti::Print()+0x20c>)
 8010268:	e79e      	b.n	80101a8 <WS28xxDmxMulti::Print()+0xe4>
 801026a:	bf00      	nop
 801026c:	20000078 	andcs	r0, r0, r8, ror r0
 8010270:	0801c57c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, lr, pc}
 8010274:	0801c590 	stmdaeq	r1, {r4, r7, r8, sl, lr, pc}
 8010278:	0801c5b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, lr, pc}
 801027c:	0801c620 	stmdaeq	r1, {r5, r9, sl, lr, pc}
 8010280:	0801c634 	stmdaeq	r1, {r2, r4, r5, r9, sl, lr, pc}
 8010284:	0801c648 	stmdaeq	r1, {r3, r6, r9, sl, lr, pc}
 8010288:	0801c660 	stmdaeq	r1, {r5, r6, r9, sl, lr, pc}
 801028c:	0801c678 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, lr, pc}
 8010290:	0801c69c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, lr, pc}
 8010294:	0801c6b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, lr, pc}
 8010298:	0801c6cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, lr, pc}
 801029c:	0801c5c4 	stmdaeq	r1, {r2, r6, r7, r8, sl, lr, pc}
 80102a0:	0801c608 	stmdaeq	r1, {r3, r9, sl, lr, pc}
 80102a4:	0801c5d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, sl, lr, pc}
 80102a8:	0801c5f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, sl, lr, pc}
 80102ac:	3fd40000 	svccc	0x00d40000
 80102b0:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 80102b4:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 80102b8:	0801c558 	stmdaeq	r1, {r3, r4, r6, r8, sl, lr, pc}
 80102bc:	3fe90000 	svccc	0x00e90000
 80102c0:	3fee0000 	svccc	0x00ee0000
 80102c4:	3ff18000 	svccc	0x00f18000
 80102c8:	3fde0000 	svccc	0x00de0000
 80102cc:	3fe40000 	svccc	0x00e40000
 80102d0:	3fc40000 	svccc	0x00c40000

080102d4 <WS28xxDmxMulti::Start(unsigned long)>:
 80102d4:	b530      	push	{r4, r5, lr}
 80102d6:	b083      	sub	sp, #12
 80102d8:	460d      	mov	r5, r1
 80102da:	4604      	mov	r4, r0
 80102dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010308 <WS28xxDmxMulti::Start(unsigned long)+0x34>)
 80102de:	490b      	ldr	r1, [pc, #44]	@ (801030c <WS28xxDmxMulti::Start(unsigned long)+0x38>)
 80102e0:	480b      	ldr	r0, [pc, #44]	@ (8010310 <WS28xxDmxMulti::Start(unsigned long)+0x3c>)
 80102e2:	9500      	str	r5, [sp, #0]
 80102e4:	234b      	movs	r3, #75	@ 0x4b
 80102e6:	f00a f907 	bl	801a4f8 <printf>
 80102ea:	68a0      	ldr	r0, [r4, #8]
 80102ec:	b128      	cbz	r0, 80102fa <WS28xxDmxMulti::Start(unsigned long)+0x26>
 80102ee:	2101      	movs	r1, #1
 80102f0:	40a9      	lsls	r1, r5
 80102f2:	4301      	orrs	r1, r0
 80102f4:	60a1      	str	r1, [r4, #8]
 80102f6:	b003      	add	sp, #12
 80102f8:	bd30      	pop	{r4, r5, pc}
 80102fa:	4b06      	ldr	r3, [pc, #24]	@ (8010314 <WS28xxDmxMulti::Start(unsigned long)+0x40>)
 80102fc:	2204      	movs	r2, #4
 80102fe:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
 8010302:	68a0      	ldr	r0, [r4, #8]
 8010304:	e7f3      	b.n	80102ee <WS28xxDmxMulti::Start(unsigned long)+0x1a>
 8010306:	bf00      	nop
 8010308:	0801c6e0 	stmdaeq	r1, {r5, r6, r7, r9, sl, lr, pc}
 801030c:	0801c700 	stmdaeq	r1, {r8, r9, sl, lr, pc}
 8010310:	0801c708 	stmdaeq	r1, {r3, r8, r9, sl, lr, pc}
 8010314:	40020000 	andmi	r0, r2, r0

08010318 <WS28xxDmxMulti::Blackout(bool)>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4604      	mov	r4, r0
 801031c:	460d      	mov	r5, r1
 801031e:	7301      	strb	r1, [r0, #12]
 8010320:	6860      	ldr	r0, [r4, #4]
 8010322:	f001 fd1f 	bl	8011d64 <WS28xxMulti::IsUpdating()>
 8010326:	2800      	cmp	r0, #0
 8010328:	d1fa      	bne.n	8010320 <WS28xxDmxMulti::Blackout(bool)+0x8>
 801032a:	6860      	ldr	r0, [r4, #4]
 801032c:	b11d      	cbz	r5, 8010336 <WS28xxDmxMulti::Blackout(bool)+0x1e>
 801032e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010332:	f002 bc23 	b.w	8012b7c <WS28xxMulti::Blackout()>
 8010336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801033a:	f001 bc21 	b.w	8011b80 <WS28xxMulti::Update()>
 801033e:	bf00      	nop

08010340 <WS28xxDmxMulti::Stop(unsigned long)>:
 8010340:	b530      	push	{r4, r5, lr}
 8010342:	b083      	sub	sp, #12
 8010344:	460c      	mov	r4, r1
 8010346:	4605      	mov	r5, r0
 8010348:	4a0b      	ldr	r2, [pc, #44]	@ (8010378 <WS28xxDmxMulti::Stop(unsigned long)+0x38>)
 801034a:	490c      	ldr	r1, [pc, #48]	@ (801037c <WS28xxDmxMulti::Stop(unsigned long)+0x3c>)
 801034c:	480c      	ldr	r0, [pc, #48]	@ (8010380 <WS28xxDmxMulti::Stop(unsigned long)+0x40>)
 801034e:	9400      	str	r4, [sp, #0]
 8010350:	2357      	movs	r3, #87	@ 0x57
 8010352:	f00a f8d1 	bl	801a4f8 <printf>
 8010356:	68ab      	ldr	r3, [r5, #8]
 8010358:	2201      	movs	r2, #1
 801035a:	40a2      	lsls	r2, r4
 801035c:	4213      	tst	r3, r2
 801035e:	bf1c      	itt	ne
 8010360:	4393      	bicne	r3, r2
 8010362:	60ab      	strne	r3, [r5, #8]
 8010364:	b10b      	cbz	r3, 801036a <WS28xxDmxMulti::Stop(unsigned long)+0x2a>
 8010366:	b003      	add	sp, #12
 8010368:	bd30      	pop	{r4, r5, pc}
 801036a:	4806      	ldr	r0, [pc, #24]	@ (8010384 <WS28xxDmxMulti::Stop(unsigned long)+0x44>)
 801036c:	2104      	movs	r1, #4
 801036e:	f8c0 1828 	str.w	r1, [r0, #2088]	@ 0x828
 8010372:	b003      	add	sp, #12
 8010374:	bd30      	pop	{r4, r5, pc}
 8010376:	bf00      	nop
 8010378:	0801c6e0 	stmdaeq	r1, {r5, r6, r7, r9, sl, lr, pc}
 801037c:	0801c720 	stmdaeq	r1, {r5, r8, r9, sl, lr, pc}
 8010380:	0801c708 	stmdaeq	r1, {r3, r8, r9, sl, lr, pc}
 8010384:	40020000 	andmi	r0, r2, r0

08010388 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8010388:	b538      	push	{r3, r4, r5, lr}
 801038a:	6845      	ldr	r5, [r0, #4]
 801038c:	4b08      	ldr	r3, [pc, #32]	@ (80103b0 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x28>)
 801038e:	6003      	str	r3, [r0, #0]
 8010390:	4604      	mov	r4, r0
 8010392:	b135      	cbz	r5, 80103a2 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1a>
 8010394:	4628      	mov	r0, r5
 8010396:	f001 faa9 	bl	80118ec <WS28xxMulti::~WS28xxMulti()>
 801039a:	2104      	movs	r1, #4
 801039c:	4628      	mov	r0, r5
 801039e:	f00a faff 	bl	801a9a0 <operator delete(void*, unsigned int)>
 80103a2:	4620      	mov	r0, r4
 80103a4:	2110      	movs	r1, #16
 80103a6:	f00a fafb 	bl	801a9a0 <operator delete(void*, unsigned int)>
 80103aa:	4620      	mov	r0, r4
 80103ac:	bd38      	pop	{r3, r4, r5, pc}
 80103ae:	bf00      	nop
 80103b0:	0801ed38 	stmdaeq	r1, {r3, r4, r5, r8, sl, fp, sp, lr, pc}

080103b4 <WS28xxDmxMulti::WS28xxDmxMulti()>:
 80103b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b6:	4605      	mov	r5, r0
 80103b8:	48b4      	ldr	r0, [pc, #720]	@ (801068c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2d8>)
 80103ba:	4eb5      	ldr	r6, [pc, #724]	@ (8010690 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2dc>)
 80103bc:	4ab5      	ldr	r2, [pc, #724]	@ (8010694 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e0>)
 80103be:	49b6      	ldr	r1, [pc, #728]	@ (8010698 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e4>)
 80103c0:	2300      	movs	r3, #0
 80103c2:	e9c5 0300 	strd	r0, r3, [r5]
 80103c6:	60ab      	str	r3, [r5, #8]
 80103c8:	732b      	strb	r3, [r5, #12]
 80103ca:	48b4      	ldr	r0, [pc, #720]	@ (801069c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 80103cc:	2335      	movs	r3, #53	@ 0x35
 80103ce:	f00a f893 	bl	801a4f8 <printf>
 80103d2:	6834      	ldr	r4, [r6, #0]
 80103d4:	2c00      	cmp	r4, #0
 80103d6:	f000 8199 	beq.w	801070c <WS28xxDmxMulti::WS28xxDmxMulti()+0x358>
 80103da:	4ab1      	ldr	r2, [pc, #708]	@ (80106a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 80103dc:	49b1      	ldr	r1, [pc, #708]	@ (80106a4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f0>)
 80103de:	48af      	ldr	r0, [pc, #700]	@ (801069c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 80103e0:	2367      	movs	r3, #103	@ 0x67
 80103e2:	f00a f889 	bl	801a4f8 <printf>
 80103e6:	4aae      	ldr	r2, [pc, #696]	@ (80106a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 80103e8:	49af      	ldr	r1, [pc, #700]	@ (80106a8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 80103ea:	48ac      	ldr	r0, [pc, #688]	@ (801069c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 80103ec:	2397      	movs	r3, #151	@ 0x97
 80103ee:	f00a f883 	bl	801a4f8 <printf>
 80103f2:	68e2      	ldr	r2, [r4, #12]
 80103f4:	6827      	ldr	r7, [r4, #0]
 80103f6:	2a07      	cmp	r2, #7
 80103f8:	f000 80dd 	beq.w	80105b6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x202>
 80103fc:	f5b7 7f2a 	cmp.w	r7, #680	@ 0x2a8
 8010400:	f1a2 030b 	sub.w	r3, r2, #11
 8010404:	bf28      	it	cs
 8010406:	f44f 772a 	movcs.w	r7, #680	@ 0x2a8
 801040a:	2103      	movs	r1, #3
 801040c:	2b01      	cmp	r3, #1
 801040e:	6926      	ldr	r6, [r4, #16]
 8010410:	6027      	str	r7, [r4, #0]
 8010412:	60a1      	str	r1, [r4, #8]
 8010414:	f200 8161 	bhi.w	80106da <WS28xxDmxMulti::WS28xxDmxMulti()+0x326>
 8010418:	7de2      	ldrb	r2, [r4, #23]
 801041a:	2a1f      	cmp	r2, #31
 801041c:	bf8c      	ite	hi
 801041e:	22ff      	movhi	r2, #255	@ 0xff
 8010420:	f062 021f 	ornls	r2, r2, #31
 8010424:	75e2      	strb	r2, [r4, #23]
 8010426:	2200      	movs	r2, #0
 8010428:	2e06      	cmp	r6, #6
 801042a:	7522      	strb	r2, [r4, #20]
 801042c:	f000 80e5 	beq.w	80105fa <WS28xxDmxMulti::WS28xxDmxMulti()+0x246>
 8010430:	6866      	ldr	r6, [r4, #4]
 8010432:	2e00      	cmp	r6, #0
 8010434:	f040 80ae 	bne.w	8010594 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1e0>
 8010438:	4e9c      	ldr	r6, [pc, #624]	@ (80106ac <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f8>)
 801043a:	6066      	str	r6, [r4, #4]
 801043c:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8010440:	0057      	lsls	r7, r2, #1
 8010442:	489b      	ldr	r0, [pc, #620]	@ (80106b0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 8010444:	fbb0 f3f7 	udiv	r3, r0, r7
 8010448:	61a3      	str	r3, [r4, #24]
 801044a:	4a95      	ldr	r2, [pc, #596]	@ (80106a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 801044c:	4996      	ldr	r1, [pc, #600]	@ (80106a8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 801044e:	4899      	ldr	r0, [pc, #612]	@ (80106b4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 8010450:	23f2      	movs	r3, #242	@ 0xf2
 8010452:	f00a f851 	bl	801a4f8 <printf>
 8010456:	7d20      	ldrb	r0, [r4, #20]
 8010458:	2800      	cmp	r0, #0
 801045a:	d13f      	bne.n	80104dc <WS28xxDmxMulti::WS28xxDmxMulti()+0x128>
 801045c:	68e6      	ldr	r6, [r4, #12]
 801045e:	b126      	cbz	r6, 801046a <WS28xxDmxMulti::WS28xxDmxMulti()+0xb6>
 8010460:	f1a6 010b 	sub.w	r1, r6, #11
 8010464:	2901      	cmp	r1, #1
 8010466:	bf88      	it	hi
 8010468:	60e0      	strhi	r0, [r4, #12]
 801046a:	4a8d      	ldr	r2, [pc, #564]	@ (80106a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 801046c:	498e      	ldr	r1, [pc, #568]	@ (80106a8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 801046e:	488b      	ldr	r0, [pc, #556]	@ (801069c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 8010470:	2397      	movs	r3, #151	@ 0x97
 8010472:	f00a f841 	bl	801a4f8 <printf>
 8010476:	68e0      	ldr	r0, [r4, #12]
 8010478:	6827      	ldr	r7, [r4, #0]
 801047a:	2807      	cmp	r0, #7
 801047c:	f000 80da 	beq.w	8010634 <WS28xxDmxMulti::WS28xxDmxMulti()+0x280>
 8010480:	f5b7 7f2a 	cmp.w	r7, #680	@ 0x2a8
 8010484:	f1a0 020b 	sub.w	r2, r0, #11
 8010488:	bf28      	it	cs
 801048a:	f44f 772a 	movcs.w	r7, #680	@ 0x2a8
 801048e:	2603      	movs	r6, #3
 8010490:	2a01      	cmp	r2, #1
 8010492:	4639      	mov	r1, r7
 8010494:	6027      	str	r7, [r4, #0]
 8010496:	60a6      	str	r6, [r4, #8]
 8010498:	6927      	ldr	r7, [r4, #16]
 801049a:	f200 80ee 	bhi.w	801067a <WS28xxDmxMulti::WS28xxDmxMulti()+0x2c6>
 801049e:	7de0      	ldrb	r0, [r4, #23]
 80104a0:	281f      	cmp	r0, #31
 80104a2:	bf8c      	ite	hi
 80104a4:	20ff      	movhi	r0, #255	@ 0xff
 80104a6:	f060 001f 	ornls	r0, r0, #31
 80104aa:	2200      	movs	r2, #0
 80104ac:	2f06      	cmp	r7, #6
 80104ae:	75e0      	strb	r0, [r4, #23]
 80104b0:	7522      	strb	r2, [r4, #20]
 80104b2:	f000 813d 	beq.w	8010730 <WS28xxDmxMulti::WS28xxDmxMulti()+0x37c>
 80104b6:	6867      	ldr	r7, [r4, #4]
 80104b8:	2f00      	cmp	r7, #0
 80104ba:	f040 80a3 	bne.w	8010604 <WS28xxDmxMulti::WS28xxDmxMulti()+0x250>
 80104be:	4f7b      	ldr	r7, [pc, #492]	@ (80106ac <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f8>)
 80104c0:	6067      	str	r7, [r4, #4]
 80104c2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80104c6:	0051      	lsls	r1, r2, #1
 80104c8:	4e79      	ldr	r6, [pc, #484]	@ (80106b0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 80104ca:	fbb6 f7f1 	udiv	r7, r6, r1
 80104ce:	4a74      	ldr	r2, [pc, #464]	@ (80106a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 80104d0:	4975      	ldr	r1, [pc, #468]	@ (80106a8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 80104d2:	4878      	ldr	r0, [pc, #480]	@ (80106b4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 80104d4:	61a7      	str	r7, [r4, #24]
 80104d6:	23f2      	movs	r3, #242	@ 0xf2
 80104d8:	f00a f80e 	bl	801a4f8 <printf>
 80104dc:	68e1      	ldr	r1, [r4, #12]
 80104de:	4a76      	ldr	r2, [pc, #472]	@ (80106b8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x304>)
 80104e0:	6a20      	ldr	r0, [r4, #32]
 80104e2:	4b76      	ldr	r3, [pc, #472]	@ (80106bc <WS28xxDmxMulti::WS28xxDmxMulti()+0x308>)
 80104e4:	6827      	ldr	r7, [r4, #0]
 80104e6:	2907      	cmp	r1, #7
 80104e8:	bf16      	itet	ne
 80104ea:	4613      	movne	r3, r2
 80104ec:	f44f 72c0 	moveq.w	r2, #384	@ 0x180
 80104f0:	f44f 72ff 	movne.w	r2, #510	@ 0x1fe
 80104f4:	f04f 0600 	mov.w	r6, #0
 80104f8:	8762      	strh	r2, [r4, #58]	@ 0x3a
 80104fa:	f8c4 3036 	str.w	r3, [r4, #54]	@ 0x36
 80104fe:	86a6      	strh	r6, [r4, #52]	@ 0x34
 8010500:	bf0c      	ite	eq
 8010502:	2281      	moveq	r2, #129	@ 0x81
 8010504:	22ab      	movne	r2, #171	@ 0xab
 8010506:	2800      	cmp	r0, #0
 8010508:	d04f      	beq.n	80105aa <WS28xxDmxMulti::WS28xxDmxMulti()+0x1f6>
 801050a:	42b8      	cmp	r0, r7
 801050c:	d84d      	bhi.n	80105aa <WS28xxDmxMulti::WS28xxDmxMulti()+0x1f6>
 801050e:	fbb7 f3f0 	udiv	r3, r7, r0
 8010512:	fbb3 f1f2 	udiv	r1, r3, r2
 8010516:	3101      	adds	r1, #1
 8010518:	fa1f fe81 	uxth.w	lr, r1
 801051c:	69e6      	ldr	r6, [r4, #28]
 801051e:	68a2      	ldr	r2, [r4, #8]
 8010520:	6263      	str	r3, [r4, #36]	@ 0x24
 8010522:	2e08      	cmp	r6, #8
 8010524:	bf28      	it	cs
 8010526:	2608      	movcs	r6, #8
 8010528:	fb16 fc0e 	smulbb	ip, r6, lr
 801052c:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8010530:	fb02 f303 	mul.w	r3, r2, r3
 8010534:	62a1      	str	r1, [r4, #40]	@ 0x28
 8010536:	4a5a      	ldr	r2, [pc, #360]	@ (80106a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8010538:	495a      	ldr	r1, [pc, #360]	@ (80106a4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f0>)
 801053a:	6323      	str	r3, [r4, #48]	@ 0x30
 801053c:	61e6      	str	r6, [r4, #28]
 801053e:	2392      	movs	r3, #146	@ 0x92
 8010540:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8010542:	485c      	ldr	r0, [pc, #368]	@ (80106b4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 8010544:	4f5e      	ldr	r7, [pc, #376]	@ (80106c0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x30c>)
 8010546:	f009 ffd7 	bl	801a4f8 <printf>
 801054a:	2004      	movs	r0, #4
 801054c:	f00a fa2a 	bl	801a9a4 <operator new(unsigned int)>
 8010550:	4604      	mov	r4, r0
 8010552:	f002 f8b9 	bl	80126c8 <WS28xxMulti::WS28xxMulti()>
 8010556:	4620      	mov	r0, r4
 8010558:	606c      	str	r4, [r5, #4]
 801055a:	f002 fb0f 	bl	8012b7c <WS28xxMulti::Blackout()>
 801055e:	f640 4002 	movw	r0, #3074	@ 0xc02
 8010562:	f008 fa55 	bl	8018a10 <rcu_periph_clock_enable>
 8010566:	4857      	ldr	r0, [pc, #348]	@ (80106c4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x310>)
 8010568:	2304      	movs	r3, #4
 801056a:	2200      	movs	r2, #0
 801056c:	2101      	movs	r1, #1
 801056e:	f008 f9cd 	bl	801890c <gpio_mode_set>
 8010572:	4854      	ldr	r0, [pc, #336]	@ (80106c4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x310>)
 8010574:	2304      	movs	r3, #4
 8010576:	2202      	movs	r2, #2
 8010578:	2100      	movs	r1, #0
 801057a:	f008 f9e9 	bl	8018950 <gpio_output_options_set>
 801057e:	2304      	movs	r3, #4
 8010580:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8010584:	4a43      	ldr	r2, [pc, #268]	@ (8010694 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e0>)
 8010586:	4944      	ldr	r1, [pc, #272]	@ (8010698 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e4>)
 8010588:	484a      	ldr	r0, [pc, #296]	@ (80106b4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 801058a:	2342      	movs	r3, #66	@ 0x42
 801058c:	f009 ffb4 	bl	801a4f8 <printf>
 8010590:	4628      	mov	r0, r5
 8010592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010594:	484c      	ldr	r0, [pc, #304]	@ (80106c8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x314>)
 8010596:	4286      	cmp	r6, r0
 8010598:	d831      	bhi.n	80105fe <WS28xxDmxMulti::WS28xxDmxMulti()+0x24a>
 801059a:	4b4c      	ldr	r3, [pc, #304]	@ (80106cc <WS28xxDmxMulti::WS28xxDmxMulti()+0x318>)
 801059c:	fbb3 f1f6 	udiv	r1, r3, r6
 80105a0:	fb07 f101 	mul.w	r1, r7, r1
 80105a4:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 80105a8:	e74b      	b.n	8010442 <WS28xxDmxMulti::WS28xxDmxMulti()+0x8e>
 80105aa:	f04f 0e01 	mov.w	lr, #1
 80105ae:	6227      	str	r7, [r4, #32]
 80105b0:	4671      	mov	r1, lr
 80105b2:	4673      	mov	r3, lr
 80105b4:	e7b2      	b.n	801051c <WS28xxDmxMulti::WS28xxDmxMulti()+0x168>
 80105b6:	6923      	ldr	r3, [r4, #16]
 80105b8:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 80105bc:	bf28      	it	cs
 80105be:	f44f 7700 	movcs.w	r7, #512	@ 0x200
 80105c2:	2104      	movs	r1, #4
 80105c4:	2601      	movs	r6, #1
 80105c6:	2b06      	cmp	r3, #6
 80105c8:	6027      	str	r7, [r4, #0]
 80105ca:	60a1      	str	r1, [r4, #8]
 80105cc:	7526      	strb	r6, [r4, #20]
 80105ce:	f000 8106 	beq.w	80107de <WS28xxDmxMulti::WS28xxDmxMulti()+0x42a>
 80105d2:	7d60      	ldrb	r0, [r4, #21]
 80105d4:	f894 e016 	ldrb.w	lr, [r4, #22]
 80105d8:	4586      	cmp	lr, r0
 80105da:	d81e      	bhi.n	801061a <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 80105dc:	2600      	movs	r6, #0
 80105de:	2a03      	cmp	r2, #3
 80105e0:	f8a4 6015 	strh.w	r6, [r4, #21]
 80105e4:	f000 808f 	beq.w	8010706 <WS28xxDmxMulti::WS28xxDmxMulti()+0x352>
 80105e8:	3a08      	subs	r2, #8
 80105ea:	2a02      	cmp	r2, #2
 80105ec:	f200 80cf 	bhi.w	801078e <WS28xxDmxMulti::WS28xxDmxMulti()+0x3da>
 80105f0:	23fc      	movs	r3, #252	@ 0xfc
 80105f2:	75a3      	strb	r3, [r4, #22]
 80105f4:	20c0      	movs	r0, #192	@ 0xc0
 80105f6:	7560      	strb	r0, [r4, #21]
 80105f8:	e011      	b.n	801061e <WS28xxDmxMulti::WS28xxDmxMulti()+0x26a>
 80105fa:	6122      	str	r2, [r4, #16]
 80105fc:	e718      	b.n	8010430 <WS28xxDmxMulti::WS28xxDmxMulti()+0x7c>
 80105fe:	6060      	str	r0, [r4, #4]
 8010600:	2700      	movs	r7, #0
 8010602:	e71e      	b.n	8010442 <WS28xxDmxMulti::WS28xxDmxMulti()+0x8e>
 8010604:	4e30      	ldr	r6, [pc, #192]	@ (80106c8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x314>)
 8010606:	42b7      	cmp	r7, r6
 8010608:	d864      	bhi.n	80106d4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x320>
 801060a:	4b30      	ldr	r3, [pc, #192]	@ (80106cc <WS28xxDmxMulti::WS28xxDmxMulti()+0x318>)
 801060c:	fbb3 f0f7 	udiv	r0, r3, r7
 8010610:	fb01 f000 	mul.w	r0, r1, r0
 8010614:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8010618:	e756      	b.n	80104c8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x114>
 801061a:	2800      	cmp	r0, #0
 801061c:	d0ea      	beq.n	80105f4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 801061e:	fb07 f101 	mul.w	r1, r7, r1
 8010622:	4e2b      	ldr	r6, [pc, #172]	@ (80106d0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x31c>)
 8010624:	4f22      	ldr	r7, [pc, #136]	@ (80106b0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 8010626:	6066      	str	r6, [r4, #4]
 8010628:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801062c:	004a      	lsls	r2, r1, #1
 801062e:	fbb7 f3f2 	udiv	r3, r7, r2
 8010632:	e709      	b.n	8010448 <WS28xxDmxMulti::WS28xxDmxMulti()+0x94>
 8010634:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 8010638:	bf28      	it	cs
 801063a:	f44f 7700 	movcs.w	r7, #512	@ 0x200
 801063e:	4639      	mov	r1, r7
 8010640:	6027      	str	r7, [r4, #0]
 8010642:	6927      	ldr	r7, [r4, #16]
 8010644:	2604      	movs	r6, #4
 8010646:	2301      	movs	r3, #1
 8010648:	2f06      	cmp	r7, #6
 801064a:	60a6      	str	r6, [r4, #8]
 801064c:	7523      	strb	r3, [r4, #20]
 801064e:	f000 80cb 	beq.w	80107e8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x434>
 8010652:	7d63      	ldrb	r3, [r4, #21]
 8010654:	f894 e016 	ldrb.w	lr, [r4, #22]
 8010658:	459e      	cmp	lr, r3
 801065a:	d86d      	bhi.n	8010738 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 801065c:	2200      	movs	r2, #0
 801065e:	2803      	cmp	r0, #3
 8010660:	f8a4 2015 	strh.w	r2, [r4, #21]
 8010664:	f000 80a7 	beq.w	80107b6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x402>
 8010668:	3808      	subs	r0, #8
 801066a:	2802      	cmp	r0, #2
 801066c:	f200 80b5 	bhi.w	80107da <WS28xxDmxMulti::WS28xxDmxMulti()+0x426>
 8010670:	27fc      	movs	r7, #252	@ 0xfc
 8010672:	75a7      	strb	r7, [r4, #22]
 8010674:	23c0      	movs	r3, #192	@ 0xc0
 8010676:	7563      	strb	r3, [r4, #21]
 8010678:	e060      	b.n	801073c <WS28xxDmxMulti::WS28xxDmxMulti()+0x388>
 801067a:	2800      	cmp	r0, #0
 801067c:	d169      	bne.n	8010752 <WS28xxDmxMulti::WS28xxDmxMulti()+0x39e>
 801067e:	2f06      	cmp	r7, #6
 8010680:	7520      	strb	r0, [r4, #20]
 8010682:	f47f af18 	bne.w	80104b6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 8010686:	6120      	str	r0, [r4, #16]
 8010688:	e715      	b.n	80104b6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 801068a:	bf00      	nop
 801068c:	0801ed38 	stmdaeq	r1, {r3, r4, r5, r8, sl, fp, sp, lr, pc}
 8010690:	20000078 	andcs	r0, r0, r8, ror r0
 8010694:	0801c728 	stmdaeq	r1, {r3, r5, r8, r9, sl, lr, pc}
 8010698:	0801c6e0 	stmdaeq	r1, {r5, r6, r7, r9, sl, lr, pc}
 801069c:	0801c738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, lr, pc}
 80106a0:	0801c748 	stmdaeq	r1, {r3, r6, r8, r9, sl, lr, pc}
 80106a4:	0801c558 	stmdaeq	r1, {r3, r4, r6, r8, sl, lr, pc}
 80106a8:	0801c754 	stmdaeq	r1, {r2, r4, r6, r8, r9, sl, lr, pc}
 80106ac:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80106b0:	000f4240 	andeq	r4, pc, r0, asr #4
 80106b4:	0801c780 	stmdaeq	r1, {r7, r8, r9, sl, lr, pc}
 80106b8:	015400aa 	cmpeq	r4, sl, lsr #1
 80106bc:	01000080 	smlabbeq	r0, r0, r0, r0
 80106c0:	40020000 	andmi	r0, r2, r0
 80106c4:	40020800 	andmi	r0, r2, r0, lsl #16
 80106c8:	017d7840 	cmneq	sp, r0, asr #16
 80106cc:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80106d0:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80106d4:	6066      	str	r6, [r4, #4]
 80106d6:	2100      	movs	r1, #0
 80106d8:	e6f6      	b.n	80104c8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x114>
 80106da:	2a00      	cmp	r2, #0
 80106dc:	f43f aea4 	beq.w	8010428 <WS28xxDmxMulti::WS28xxDmxMulti()+0x74>
 80106e0:	2a0d      	cmp	r2, #13
 80106e2:	d01b      	beq.n	801071c <WS28xxDmxMulti::WS28xxDmxMulti()+0x368>
 80106e4:	2001      	movs	r0, #1
 80106e6:	2a0e      	cmp	r2, #14
 80106e8:	7520      	strb	r0, [r4, #20]
 80106ea:	d140      	bne.n	801076e <WS28xxDmxMulti::WS28xxDmxMulti()+0x3ba>
 80106ec:	2e06      	cmp	r6, #6
 80106ee:	7d60      	ldrb	r0, [r4, #21]
 80106f0:	7da3      	ldrb	r3, [r4, #22]
 80106f2:	60e1      	str	r1, [r4, #12]
 80106f4:	bf04      	itt	eq
 80106f6:	2202      	moveq	r2, #2
 80106f8:	6122      	streq	r2, [r4, #16]
 80106fa:	4283      	cmp	r3, r0
 80106fc:	d88d      	bhi.n	801061a <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 80106fe:	f04f 0c00 	mov.w	ip, #0
 8010702:	f8a4 c015 	strh.w	ip, [r4, #21]
 8010706:	23f8      	movs	r3, #248	@ 0xf8
 8010708:	75a3      	strb	r3, [r4, #22]
 801070a:	e773      	b.n	80105f4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 801070c:	4b39      	ldr	r3, [pc, #228]	@ (80107f4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x440>)
 801070e:	4a3a      	ldr	r2, [pc, #232]	@ (80107f8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x444>)
 8010710:	483a      	ldr	r0, [pc, #232]	@ (80107fc <WS28xxDmxMulti::WS28xxDmxMulti()+0x448>)
 8010712:	21a4      	movs	r1, #164	@ 0xa4
 8010714:	f009 ffd0 	bl	801a6b8 <__assert_func>
 8010718:	6834      	ldr	r4, [r6, #0]
 801071a:	e65e      	b.n	80103da <WS28xxDmxMulti::WS28xxDmxMulti()+0x26>
 801071c:	2100      	movs	r1, #0
 801071e:	2e06      	cmp	r6, #6
 8010720:	7521      	strb	r1, [r4, #20]
 8010722:	d007      	beq.n	8010734 <WS28xxDmxMulti::WS28xxDmxMulti()+0x380>
 8010724:	6866      	ldr	r6, [r4, #4]
 8010726:	2e00      	cmp	r6, #0
 8010728:	f43f ae86 	beq.w	8010438 <WS28xxDmxMulti::WS28xxDmxMulti()+0x84>
 801072c:	4834      	ldr	r0, [pc, #208]	@ (8010800 <WS28xxDmxMulti::WS28xxDmxMulti()+0x44c>)
 801072e:	e732      	b.n	8010596 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1e2>
 8010730:	6122      	str	r2, [r4, #16]
 8010732:	e6c0      	b.n	80104b6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 8010734:	6121      	str	r1, [r4, #16]
 8010736:	e7f5      	b.n	8010724 <WS28xxDmxMulti::WS28xxDmxMulti()+0x370>
 8010738:	2b00      	cmp	r3, #0
 801073a:	d09b      	beq.n	8010674 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2c0>
 801073c:	fb06 fc01 	mul.w	ip, r6, r1
 8010740:	4a30      	ldr	r2, [pc, #192]	@ (8010804 <WS28xxDmxMulti::WS28xxDmxMulti()+0x450>)
 8010742:	4e31      	ldr	r6, [pc, #196]	@ (8010808 <WS28xxDmxMulti::WS28xxDmxMulti()+0x454>)
 8010744:	6062      	str	r2, [r4, #4]
 8010746:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 801074a:	0048      	lsls	r0, r1, #1
 801074c:	fbb6 f7f0 	udiv	r7, r6, r0
 8010750:	e6bd      	b.n	80104ce <WS28xxDmxMulti::WS28xxDmxMulti()+0x11a>
 8010752:	280d      	cmp	r0, #13
 8010754:	d11e      	bne.n	8010794 <WS28xxDmxMulti::WS28xxDmxMulti()+0x3e0>
 8010756:	2f06      	cmp	r7, #6
 8010758:	6867      	ldr	r7, [r4, #4]
 801075a:	f04f 0300 	mov.w	r3, #0
 801075e:	7523      	strb	r3, [r4, #20]
 8010760:	bf08      	it	eq
 8010762:	6123      	streq	r3, [r4, #16]
 8010764:	2f00      	cmp	r7, #0
 8010766:	f43f aeaa 	beq.w	80104be <WS28xxDmxMulti::WS28xxDmxMulti()+0x10a>
 801076a:	4e25      	ldr	r6, [pc, #148]	@ (8010800 <WS28xxDmxMulti::WS28xxDmxMulti()+0x44c>)
 801076c:	e74b      	b.n	8010606 <WS28xxDmxMulti::WS28xxDmxMulti()+0x252>
 801076e:	2e06      	cmp	r6, #6
 8010770:	f47f af2f 	bne.w	80105d2 <WS28xxDmxMulti::WS28xxDmxMulti()+0x21e>
 8010774:	1e53      	subs	r3, r2, #1
 8010776:	2b09      	cmp	r3, #9
 8010778:	d931      	bls.n	80107de <WS28xxDmxMulti::WS28xxDmxMulti()+0x42a>
 801077a:	7d60      	ldrb	r0, [r4, #21]
 801077c:	7da6      	ldrb	r6, [r4, #22]
 801077e:	2202      	movs	r2, #2
 8010780:	4286      	cmp	r6, r0
 8010782:	6122      	str	r2, [r4, #16]
 8010784:	f63f af49 	bhi.w	801061a <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 8010788:	2000      	movs	r0, #0
 801078a:	f8a4 0015 	strh.w	r0, [r4, #21]
 801078e:	23f0      	movs	r3, #240	@ 0xf0
 8010790:	75a3      	strb	r3, [r4, #22]
 8010792:	e72f      	b.n	80105f4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 8010794:	2301      	movs	r3, #1
 8010796:	280e      	cmp	r0, #14
 8010798:	7523      	strb	r3, [r4, #20]
 801079a:	d10e      	bne.n	80107ba <WS28xxDmxMulti::WS28xxDmxMulti()+0x406>
 801079c:	2f06      	cmp	r7, #6
 801079e:	bf04      	itt	eq
 80107a0:	2302      	moveq	r3, #2
 80107a2:	6123      	streq	r3, [r4, #16]
 80107a4:	7da7      	ldrb	r7, [r4, #22]
 80107a6:	7d63      	ldrb	r3, [r4, #21]
 80107a8:	60e6      	str	r6, [r4, #12]
 80107aa:	429f      	cmp	r7, r3
 80107ac:	d8c4      	bhi.n	8010738 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 80107ae:	2600      	movs	r6, #0
 80107b0:	f8a4 6015 	strh.w	r6, [r4, #21]
 80107b4:	2603      	movs	r6, #3
 80107b6:	27f8      	movs	r7, #248	@ 0xf8
 80107b8:	e75b      	b.n	8010672 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2be>
 80107ba:	2f06      	cmp	r7, #6
 80107bc:	f47f af49 	bne.w	8010652 <WS28xxDmxMulti::WS28xxDmxMulti()+0x29e>
 80107c0:	1e47      	subs	r7, r0, #1
 80107c2:	2f09      	cmp	r7, #9
 80107c4:	d910      	bls.n	80107e8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x434>
 80107c6:	7d63      	ldrb	r3, [r4, #21]
 80107c8:	f894 c016 	ldrb.w	ip, [r4, #22]
 80107cc:	2002      	movs	r0, #2
 80107ce:	459c      	cmp	ip, r3
 80107d0:	6120      	str	r0, [r4, #16]
 80107d2:	d8b1      	bhi.n	8010738 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 80107d4:	2200      	movs	r2, #0
 80107d6:	f8a4 2015 	strh.w	r2, [r4, #21]
 80107da:	27f0      	movs	r7, #240	@ 0xf0
 80107dc:	e749      	b.n	8010672 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2be>
 80107de:	480b      	ldr	r0, [pc, #44]	@ (801080c <WS28xxDmxMulti::WS28xxDmxMulti()+0x458>)
 80107e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80107e4:	6123      	str	r3, [r4, #16]
 80107e6:	e6f4      	b.n	80105d2 <WS28xxDmxMulti::WS28xxDmxMulti()+0x21e>
 80107e8:	4a08      	ldr	r2, [pc, #32]	@ (801080c <WS28xxDmxMulti::WS28xxDmxMulti()+0x458>)
 80107ea:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 80107ee:	6127      	str	r7, [r4, #16]
 80107f0:	e72f      	b.n	8010652 <WS28xxDmxMulti::WS28xxDmxMulti()+0x29e>
 80107f2:	bf00      	nop
 80107f4:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 80107f8:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 80107fc:	0801c558 	stmdaeq	r1, {r3, r4, r6, r8, sl, lr, pc}
 8010800:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8010804:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8010808:	000f4240 	andeq	r4, pc, r0, asr #4
 801080c:	0801ed08 	stmdaeq	r1, {r3, r8, sl, fp, sp, lr, pc}

08010810 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>:
 8010810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010814:	b0a1      	sub	sp, #132	@ 0x84
 8010816:	4604      	mov	r4, r0
 8010818:	460f      	mov	r7, r1
 801081a:	9305      	str	r3, [sp, #20]
 801081c:	4692      	mov	sl, r2
 801081e:	2a00      	cmp	r2, #0
 8010820:	f000 8244 	beq.w	8010cac <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x49c>
 8010824:	9b05      	ldr	r3, [sp, #20]
 8010826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801082a:	f200 824a 	bhi.w	8010cc2 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4b2>
 801082e:	4d98      	ldr	r5, [pc, #608]	@ (8010a90 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x280>)
 8010830:	682e      	ldr	r6, [r5, #0]
 8010832:	2e00      	cmp	r6, #0
 8010834:	f000 8250 	beq.w	8010cd8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4c8>
 8010838:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 801083a:	fbb7 f5f0 	udiv	r5, r7, r0
 801083e:	fb00 7115 	mls	r1, r0, r5, r7
 8010842:	eb06 0241 	add.w	r2, r6, r1, lsl #1
 8010846:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8010848:	f8b2 8034 	ldrh.w	r8, [r2, #52]	@ 0x34
 801084c:	68b3      	ldr	r3, [r6, #8]
 801084e:	9f05      	ldr	r7, [sp, #20]
 8010850:	fbb7 f7f3 	udiv	r7, r7, r3
 8010854:	4447      	add	r7, r8
 8010856:	4287      	cmp	r7, r0
 8010858:	68f1      	ldr	r1, [r6, #12]
 801085a:	f8d6 b020 	ldr.w	fp, [r6, #32]
 801085e:	f896 9014 	ldrb.w	r9, [r6, #20]
 8010862:	9106      	str	r1, [sp, #24]
 8010864:	bf28      	it	cs
 8010866:	4607      	movcs	r7, r0
 8010868:	2b03      	cmp	r3, #3
 801086a:	f000 8093 	beq.w	8010994 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x184>
 801086e:	2b04      	cmp	r3, #4
 8010870:	f040 8215 	bne.w	8010c9e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x48e>
 8010874:	f1b9 0f00 	cmp.w	r9, #0
 8010878:	f000 8236 	beq.w	8010ce8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4d8>
 801087c:	4547      	cmp	r7, r8
 801087e:	f240 8086 	bls.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010882:	9e05      	ldr	r6, [sp, #20]
 8010884:	2e00      	cmp	r6, #0
 8010886:	f000 8082 	beq.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801088a:	eba7 0c08 	sub.w	ip, r7, r8
 801088e:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8010892:	fb0b f808 	mul.w	r8, fp, r8
 8010896:	4656      	mov	r6, sl
 8010898:	9206      	str	r2, [sp, #24]
 801089a:	f04f 0900 	mov.w	r9, #0
 801089e:	f1bb 0f00 	cmp.w	fp, #0
 80108a2:	d068      	beq.n	8010976 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x166>
 80108a4:	f01b 0303 	ands.w	r3, fp, #3
 80108a8:	4647      	mov	r7, r8
 80108aa:	eb0b 0a08 	add.w	sl, fp, r8
 80108ae:	d02d      	beq.n	801090c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xfc>
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d01c      	beq.n	80108ee <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xde>
 80108b4:	2b02      	cmp	r3, #2
 80108b6:	d00d      	beq.n	80108d4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xc4>
 80108b8:	78f0      	ldrb	r0, [r6, #3]
 80108ba:	9002      	str	r0, [sp, #8]
 80108bc:	78b7      	ldrb	r7, [r6, #2]
 80108be:	9701      	str	r7, [sp, #4]
 80108c0:	7871      	ldrb	r1, [r6, #1]
 80108c2:	9100      	str	r1, [sp, #0]
 80108c4:	7833      	ldrb	r3, [r6, #0]
 80108c6:	6860      	ldr	r0, [r4, #4]
 80108c8:	4642      	mov	r2, r8
 80108ca:	4629      	mov	r1, r5
 80108cc:	f002 fb60 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80108d0:	f108 0701 	add.w	r7, r8, #1
 80108d4:	78f2      	ldrb	r2, [r6, #3]
 80108d6:	9202      	str	r2, [sp, #8]
 80108d8:	78b3      	ldrb	r3, [r6, #2]
 80108da:	9301      	str	r3, [sp, #4]
 80108dc:	7870      	ldrb	r0, [r6, #1]
 80108de:	9000      	str	r0, [sp, #0]
 80108e0:	463a      	mov	r2, r7
 80108e2:	7833      	ldrb	r3, [r6, #0]
 80108e4:	6860      	ldr	r0, [r4, #4]
 80108e6:	4629      	mov	r1, r5
 80108e8:	f002 fb52 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80108ec:	3701      	adds	r7, #1
 80108ee:	78f1      	ldrb	r1, [r6, #3]
 80108f0:	9102      	str	r1, [sp, #8]
 80108f2:	78b2      	ldrb	r2, [r6, #2]
 80108f4:	9201      	str	r2, [sp, #4]
 80108f6:	7873      	ldrb	r3, [r6, #1]
 80108f8:	9300      	str	r3, [sp, #0]
 80108fa:	463a      	mov	r2, r7
 80108fc:	7833      	ldrb	r3, [r6, #0]
 80108fe:	6860      	ldr	r0, [r4, #4]
 8010900:	4629      	mov	r1, r5
 8010902:	3701      	adds	r7, #1
 8010904:	f002 fb44 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010908:	4557      	cmp	r7, sl
 801090a:	d034      	beq.n	8010976 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x166>
 801090c:	78f1      	ldrb	r1, [r6, #3]
 801090e:	9102      	str	r1, [sp, #8]
 8010910:	78b2      	ldrb	r2, [r6, #2]
 8010912:	9201      	str	r2, [sp, #4]
 8010914:	7870      	ldrb	r0, [r6, #1]
 8010916:	7833      	ldrb	r3, [r6, #0]
 8010918:	9000      	str	r0, [sp, #0]
 801091a:	463a      	mov	r2, r7
 801091c:	6860      	ldr	r0, [r4, #4]
 801091e:	4629      	mov	r1, r5
 8010920:	f002 fb36 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010924:	78f3      	ldrb	r3, [r6, #3]
 8010926:	9302      	str	r3, [sp, #8]
 8010928:	78b1      	ldrb	r1, [r6, #2]
 801092a:	9101      	str	r1, [sp, #4]
 801092c:	7870      	ldrb	r0, [r6, #1]
 801092e:	9000      	str	r0, [sp, #0]
 8010930:	1c7a      	adds	r2, r7, #1
 8010932:	7833      	ldrb	r3, [r6, #0]
 8010934:	6860      	ldr	r0, [r4, #4]
 8010936:	9204      	str	r2, [sp, #16]
 8010938:	4629      	mov	r1, r5
 801093a:	f002 fb29 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801093e:	78f2      	ldrb	r2, [r6, #3]
 8010940:	9202      	str	r2, [sp, #8]
 8010942:	78b3      	ldrb	r3, [r6, #2]
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	7871      	ldrb	r1, [r6, #1]
 8010948:	9a04      	ldr	r2, [sp, #16]
 801094a:	7833      	ldrb	r3, [r6, #0]
 801094c:	9100      	str	r1, [sp, #0]
 801094e:	6860      	ldr	r0, [r4, #4]
 8010950:	3201      	adds	r2, #1
 8010952:	4629      	mov	r1, r5
 8010954:	f002 fb1c 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010958:	78f0      	ldrb	r0, [r6, #3]
 801095a:	9002      	str	r0, [sp, #8]
 801095c:	78b2      	ldrb	r2, [r6, #2]
 801095e:	9201      	str	r2, [sp, #4]
 8010960:	7871      	ldrb	r1, [r6, #1]
 8010962:	7833      	ldrb	r3, [r6, #0]
 8010964:	9100      	str	r1, [sp, #0]
 8010966:	1cfa      	adds	r2, r7, #3
 8010968:	6860      	ldr	r0, [r4, #4]
 801096a:	4629      	mov	r1, r5
 801096c:	3704      	adds	r7, #4
 801096e:	f002 fb0f 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010972:	4557      	cmp	r7, sl
 8010974:	d1ca      	bne.n	801090c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xfc>
 8010976:	9f06      	ldr	r7, [sp, #24]
 8010978:	45b9      	cmp	r9, r7
 801097a:	d008      	beq.n	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801097c:	9805      	ldr	r0, [sp, #20]
 801097e:	f109 0901 	add.w	r9, r9, #1
 8010982:	ebb0 0f89 	cmp.w	r0, r9, lsl #2
 8010986:	44d8      	add	r8, fp
 8010988:	f106 0604 	add.w	r6, r6, #4
 801098c:	d887      	bhi.n	801089e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x8e>
 801098e:	b021      	add	sp, #132	@ 0x84
 8010990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010994:	493f      	ldr	r1, [pc, #252]	@ (8010a94 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x284>)
 8010996:	2248      	movs	r2, #72	@ 0x48
 8010998:	a80e      	add	r0, sp, #56	@ 0x38
 801099a:	f009 faa7 	bl	8019eec <memcpy>
 801099e:	6933      	ldr	r3, [r6, #16]
 80109a0:	9304      	str	r3, [sp, #16]
 80109a2:	2b05      	cmp	r3, #5
 80109a4:	f200 8259 	bhi.w	8010e5a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x64a>
 80109a8:	f1b9 0f00 	cmp.w	r9, #0
 80109ac:	f040 80be 	bne.w	8010b2c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x31c>
 80109b0:	4547      	cmp	r7, r8
 80109b2:	d9ec      	bls.n	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80109b4:	9805      	ldr	r0, [sp, #20]
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d0e9      	beq.n	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80109ba:	9a06      	ldr	r2, [sp, #24]
 80109bc:	2a00      	cmp	r2, #0
 80109be:	f000 819a 	beq.w	8010cf6 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4e6>
 80109c2:	f1a2 000b 	sub.w	r0, r2, #11
 80109c6:	eba7 0c08 	sub.w	ip, r7, r8
 80109ca:	9f04      	ldr	r7, [sp, #16]
 80109cc:	fb0b fe08 	mul.w	lr, fp, r8
 80109d0:	2801      	cmp	r0, #1
 80109d2:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 80109d6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80109da:	f10e 0201 	add.w	r2, lr, #1
 80109de:	f240 825d 	bls.w	8010e9c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x68c>
 80109e2:	f1a8 0603 	sub.w	r6, r8, #3
 80109e6:	009b      	lsls	r3, r3, #2
 80109e8:	9208      	str	r2, [sp, #32]
 80109ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80109ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80109f0:	930d      	str	r3, [sp, #52]	@ 0x34
 80109f2:	f1bb 0f00 	cmp.w	fp, #0
 80109f6:	f000 808a 	beq.w	8010b0e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2fe>
 80109fa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80109fc:	9807      	ldr	r0, [sp, #28]
 80109fe:	3780      	adds	r7, #128	@ 0x80
 8010a00:	eb0d 0807 	add.w	r8, sp, r7
 8010a04:	e958 2311 	ldrd	r2, r3, [r8, #-68]	@ 0x44
 8010a08:	f858 1c48 	ldr.w	r1, [r8, #-72]
 8010a0c:	18c3      	adds	r3, r0, r3
 8010a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a10:	1847      	adds	r7, r0, r1
 8010a12:	1886      	adds	r6, r0, r2
 8010a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a16:	f81a 1007 	ldrb.w	r1, [sl, r7]
 8010a1a:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8010a1e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010a20:	960c      	str	r6, [sp, #48]	@ 0x30
 8010a22:	eb0a 0807 	add.w	r8, sl, r7
 8010a26:	eb0a 0706 	add.w	r7, sl, r6
 8010a2a:	eb0a 0602 	add.w	r6, sl, r2
 8010a2e:	9a06      	ldr	r2, [sp, #24]
 8010a30:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010a34:	2a0d      	cmp	r2, #13
 8010a36:	f040 82ec 	bne.w	8011012 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x802>
 8010a3a:	9a08      	ldr	r2, [sp, #32]
 8010a3c:	f01b 0f01 	tst.w	fp, #1
 8010a40:	4691      	mov	r9, r2
 8010a42:	445a      	add	r2, fp
 8010a44:	9204      	str	r2, [sp, #16]
 8010a46:	d147      	bne.n	8010ad8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2c8>
 8010a48:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8010a4c:	43d8      	mvns	r0, r3
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	43c9      	mvns	r1, r1
 8010a52:	0883      	lsrs	r3, r0, #2
 8010a54:	f3c1 1281 	ubfx	r2, r1, #6, #2
 8010a58:	f003 0030 	and.w	r0, r3, #48	@ 0x30
 8010a5c:	0909      	lsrs	r1, r1, #4
 8010a5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010a62:	f001 030c 	and.w	r3, r1, #12
 8010a66:	4310      	orrs	r0, r2
 8010a68:	4318      	orrs	r0, r3
 8010a6a:	f040 03c0 	orr.w	r3, r0, #192	@ 0xc0
 8010a6e:	464a      	mov	r2, r9
 8010a70:	6860      	ldr	r0, [r4, #4]
 8010a72:	4629      	mov	r1, r5
 8010a74:	f001 fbb0 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010a78:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010a7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a7e:	f81a 1000 	ldrb.w	r1, [sl, r0]
 8010a82:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010a86:	f81a 0002 	ldrb.w	r0, [sl, r2]
 8010a8a:	f109 0901 	add.w	r9, r9, #1
 8010a8e:	e023      	b.n	8010ad8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2c8>
 8010a90:	20000078 	andcs	r0, r0, r8, ror r0
 8010a94:	0801aa6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, sp, pc}
 8010a98:	7830      	ldrb	r0, [r6, #0]
 8010a9a:	9000      	str	r0, [sp, #0]
 8010a9c:	f898 1000 	ldrb.w	r1, [r8]
 8010aa0:	9102      	str	r1, [sp, #8]
 8010aa2:	43c3      	mvns	r3, r0
 8010aa4:	089a      	lsrs	r2, r3, #2
 8010aa6:	43cb      	mvns	r3, r1
 8010aa8:	f002 0030 	and.w	r0, r2, #48	@ 0x30
 8010aac:	0919      	lsrs	r1, r3, #4
 8010aae:	f3c3 1281 	ubfx	r2, r3, #6, #2
 8010ab2:	4310      	orrs	r0, r2
 8010ab4:	f001 030c 	and.w	r3, r1, #12
 8010ab8:	4318      	orrs	r0, r3
 8010aba:	f040 03c0 	orr.w	r3, r0, #192	@ 0xc0
 8010abe:	7838      	ldrb	r0, [r7, #0]
 8010ac0:	9001      	str	r0, [sp, #4]
 8010ac2:	6860      	ldr	r0, [r4, #4]
 8010ac4:	464a      	mov	r2, r9
 8010ac6:	4629      	mov	r1, r5
 8010ac8:	f001 fb86 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010acc:	f898 1000 	ldrb.w	r1, [r8]
 8010ad0:	7838      	ldrb	r0, [r7, #0]
 8010ad2:	7833      	ldrb	r3, [r6, #0]
 8010ad4:	f109 0901 	add.w	r9, r9, #1
 8010ad8:	43da      	mvns	r2, r3
 8010ada:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8010ade:	0890      	lsrs	r0, r2, #2
 8010ae0:	43c9      	mvns	r1, r1
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	f3c1 1281 	ubfx	r2, r1, #6, #2
 8010ae8:	f000 0330 	and.w	r3, r0, #48	@ 0x30
 8010aec:	0909      	lsrs	r1, r1, #4
 8010aee:	f001 000c 	and.w	r0, r1, #12
 8010af2:	4313      	orrs	r3, r2
 8010af4:	4303      	orrs	r3, r0
 8010af6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010afa:	464a      	mov	r2, r9
 8010afc:	6860      	ldr	r0, [r4, #4]
 8010afe:	4629      	mov	r1, r5
 8010b00:	f001 fb6a 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010b04:	9b04      	ldr	r3, [sp, #16]
 8010b06:	f109 0901 	add.w	r9, r9, #1
 8010b0a:	454b      	cmp	r3, r9
 8010b0c:	d1c4      	bne.n	8010a98 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x288>
 8010b0e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8010b10:	9e07      	ldr	r6, [sp, #28]
 8010b12:	42b7      	cmp	r7, r6
 8010b14:	f43f af3b 	beq.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010b18:	9a08      	ldr	r2, [sp, #32]
 8010b1a:	9905      	ldr	r1, [sp, #20]
 8010b1c:	3603      	adds	r6, #3
 8010b1e:	445a      	add	r2, fp
 8010b20:	42b1      	cmp	r1, r6
 8010b22:	9607      	str	r6, [sp, #28]
 8010b24:	9208      	str	r2, [sp, #32]
 8010b26:	f63f af64 	bhi.w	80109f2 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1e2>
 8010b2a:	e730      	b.n	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010b2c:	4547      	cmp	r7, r8
 8010b2e:	f67f af2e 	bls.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010b32:	9e05      	ldr	r6, [sp, #20]
 8010b34:	2e00      	cmp	r6, #0
 8010b36:	f43f af2a 	beq.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010b3a:	eba7 0c08 	sub.w	ip, r7, r8
 8010b3e:	9f04      	ldr	r7, [sp, #16]
 8010b40:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 8010b44:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8010b48:	fb0b f208 	mul.w	r2, fp, r8
 8010b4c:	f1ae 0303 	sub.w	r3, lr, #3
 8010b50:	0088      	lsls	r0, r1, #2
 8010b52:	2600      	movs	r6, #0
 8010b54:	9208      	str	r2, [sp, #32]
 8010b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b58:	900c      	str	r0, [sp, #48]	@ 0x30
 8010b5a:	9604      	str	r6, [sp, #16]
 8010b5c:	f1bb 0f00 	cmp.w	fp, #0
 8010b60:	f000 808e 	beq.w	8010c80 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x470>
 8010b64:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8010b66:	9904      	ldr	r1, [sp, #16]
 8010b68:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010b6c:	3780      	adds	r7, #128	@ 0x80
 8010b6e:	eb0d 0807 	add.w	r8, sp, r7
 8010b72:	e958 7311 	ldrd	r7, r3, [r8, #-68]	@ 0x44
 8010b76:	f858 2c48 	ldr.w	r2, [r8, #-72]
 8010b7a:	1888      	adds	r0, r1, r2
 8010b7c:	9006      	str	r0, [sp, #24]
 8010b7e:	19ca      	adds	r2, r1, r7
 8010b80:	eb0a 0700 	add.w	r7, sl, r0
 8010b84:	4660      	mov	r0, ip
 8010b86:	4419      	add	r1, r3
 8010b88:	4458      	add	r0, fp
 8010b8a:	f01b 0303 	ands.w	r3, fp, #3
 8010b8e:	4666      	mov	r6, ip
 8010b90:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b92:	910a      	str	r1, [sp, #40]	@ 0x28
 8010b94:	eb0a 0802 	add.w	r8, sl, r2
 8010b98:	eb0a 0901 	add.w	r9, sl, r1
 8010b9c:	9007      	str	r0, [sp, #28]
 8010b9e:	d039      	beq.n	8010c14 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x404>
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d023      	beq.n	8010bec <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x3dc>
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d010      	beq.n	8010bca <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x3ba>
 8010ba8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010baa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bac:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010bb0:	9101      	str	r1, [sp, #4]
 8010bb2:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8010bb6:	9a06      	ldr	r2, [sp, #24]
 8010bb8:	9300      	str	r3, [sp, #0]
 8010bba:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8010bbe:	6860      	ldr	r0, [r4, #4]
 8010bc0:	4662      	mov	r2, ip
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	f001 f8d6 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010bc8:	3601      	adds	r6, #1
 8010bca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bce:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8010bd2:	9001      	str	r0, [sp, #4]
 8010bd4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010bd8:	9906      	ldr	r1, [sp, #24]
 8010bda:	9200      	str	r2, [sp, #0]
 8010bdc:	f81a 3001 	ldrb.w	r3, [sl, r1]
 8010be0:	6860      	ldr	r0, [r4, #4]
 8010be2:	4632      	mov	r2, r6
 8010be4:	4629      	mov	r1, r5
 8010be6:	f001 f8c5 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010bea:	3601      	adds	r6, #1
 8010bec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bf0:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8010bf4:	9301      	str	r3, [sp, #4]
 8010bf6:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010bfa:	9806      	ldr	r0, [sp, #24]
 8010bfc:	9100      	str	r1, [sp, #0]
 8010bfe:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8010c02:	6860      	ldr	r0, [r4, #4]
 8010c04:	4632      	mov	r2, r6
 8010c06:	4629      	mov	r1, r5
 8010c08:	f001 f8b4 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010c0c:	9b07      	ldr	r3, [sp, #28]
 8010c0e:	3601      	adds	r6, #1
 8010c10:	429e      	cmp	r6, r3
 8010c12:	d035      	beq.n	8010c80 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x470>
 8010c14:	f899 0000 	ldrb.w	r0, [r9]
 8010c18:	9001      	str	r0, [sp, #4]
 8010c1a:	f898 3000 	ldrb.w	r3, [r8]
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	4632      	mov	r2, r6
 8010c22:	783b      	ldrb	r3, [r7, #0]
 8010c24:	6860      	ldr	r0, [r4, #4]
 8010c26:	4629      	mov	r1, r5
 8010c28:	f001 f8a4 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010c2c:	f899 2000 	ldrb.w	r2, [r9]
 8010c30:	9201      	str	r2, [sp, #4]
 8010c32:	f898 1000 	ldrb.w	r1, [r8]
 8010c36:	9100      	str	r1, [sp, #0]
 8010c38:	1c72      	adds	r2, r6, #1
 8010c3a:	783b      	ldrb	r3, [r7, #0]
 8010c3c:	6860      	ldr	r0, [r4, #4]
 8010c3e:	9206      	str	r2, [sp, #24]
 8010c40:	4629      	mov	r1, r5
 8010c42:	f001 f897 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010c46:	f899 0000 	ldrb.w	r0, [r9]
 8010c4a:	9001      	str	r0, [sp, #4]
 8010c4c:	f898 3000 	ldrb.w	r3, [r8]
 8010c50:	9a06      	ldr	r2, [sp, #24]
 8010c52:	9300      	str	r3, [sp, #0]
 8010c54:	783b      	ldrb	r3, [r7, #0]
 8010c56:	6860      	ldr	r0, [r4, #4]
 8010c58:	3201      	adds	r2, #1
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	f001 f88a 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010c60:	f899 2000 	ldrb.w	r2, [r9]
 8010c64:	9201      	str	r2, [sp, #4]
 8010c66:	f898 1000 	ldrb.w	r1, [r8]
 8010c6a:	9100      	str	r1, [sp, #0]
 8010c6c:	783b      	ldrb	r3, [r7, #0]
 8010c6e:	6860      	ldr	r0, [r4, #4]
 8010c70:	1cf2      	adds	r2, r6, #3
 8010c72:	4629      	mov	r1, r5
 8010c74:	f001 f87e 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010c78:	9b07      	ldr	r3, [sp, #28]
 8010c7a:	3604      	adds	r6, #4
 8010c7c:	429e      	cmp	r6, r3
 8010c7e:	d1c9      	bne.n	8010c14 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x404>
 8010c80:	9f04      	ldr	r7, [sp, #16]
 8010c82:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010c84:	42b7      	cmp	r7, r6
 8010c86:	f43f ae82 	beq.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010c8a:	9a08      	ldr	r2, [sp, #32]
 8010c8c:	9905      	ldr	r1, [sp, #20]
 8010c8e:	3703      	adds	r7, #3
 8010c90:	445a      	add	r2, fp
 8010c92:	42b9      	cmp	r1, r7
 8010c94:	9704      	str	r7, [sp, #16]
 8010c96:	9208      	str	r2, [sp, #32]
 8010c98:	f63f af60 	bhi.w	8010b5c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x34c>
 8010c9c:	e677      	b.n	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010c9e:	4b74      	ldr	r3, [pc, #464]	@ (8010e70 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x660>)
 8010ca0:	4a74      	ldr	r2, [pc, #464]	@ (8010e74 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8010ca2:	4875      	ldr	r0, [pc, #468]	@ (8010e78 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8010ca4:	21c8      	movs	r1, #200	@ 0xc8
 8010ca6:	f009 fd07 	bl	801a6b8 <__assert_func>
 8010caa:	e5e3      	b.n	8010874 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x64>
 8010cac:	4b73      	ldr	r3, [pc, #460]	@ (8010e7c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x66c>)
 8010cae:	4a71      	ldr	r2, [pc, #452]	@ (8010e74 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8010cb0:	4871      	ldr	r0, [pc, #452]	@ (8010e78 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8010cb2:	2165      	movs	r1, #101	@ 0x65
 8010cb4:	f009 fd00 	bl	801a6b8 <__assert_func>
 8010cb8:	9b05      	ldr	r3, [sp, #20]
 8010cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010cbe:	f67f adb6 	bls.w	801082e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1e>
 8010cc2:	4d6f      	ldr	r5, [pc, #444]	@ (8010e80 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x670>)
 8010cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8010e84 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x674>)
 8010cc6:	4a6b      	ldr	r2, [pc, #428]	@ (8010e74 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8010cc8:	486b      	ldr	r0, [pc, #428]	@ (8010e78 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8010cca:	2166      	movs	r1, #102	@ 0x66
 8010ccc:	f009 fcf4 	bl	801a6b8 <__assert_func>
 8010cd0:	682e      	ldr	r6, [r5, #0]
 8010cd2:	2e00      	cmp	r6, #0
 8010cd4:	f47f adb0 	bne.w	8010838 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x28>
 8010cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8010e88 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x678>)
 8010cda:	4a6c      	ldr	r2, [pc, #432]	@ (8010e8c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x67c>)
 8010cdc:	486c      	ldr	r0, [pc, #432]	@ (8010e90 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x680>)
 8010cde:	21a4      	movs	r1, #164	@ 0xa4
 8010ce0:	f009 fcea 	bl	801a6b8 <__assert_func>
 8010ce4:	682e      	ldr	r6, [r5, #0]
 8010ce6:	e5a7      	b.n	8010838 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x28>
 8010ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8010e94 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x684>)
 8010cea:	4a62      	ldr	r2, [pc, #392]	@ (8010e74 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8010cec:	4862      	ldr	r0, [pc, #392]	@ (8010e78 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8010cee:	21c9      	movs	r1, #201	@ 0xc9
 8010cf0:	f009 fce2 	bl	801a6b8 <__assert_func>
 8010cf4:	e5c2      	b.n	801087c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x6c>
 8010cf6:	9e04      	ldr	r6, [sp, #16]
 8010cf8:	9806      	ldr	r0, [sp, #24]
 8010cfa:	9004      	str	r0, [sp, #16]
 8010cfc:	eba7 0e08 	sub.w	lr, r7, r8
 8010d00:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8010d04:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8010d08:	fb0b f108 	mul.w	r1, fp, r8
 8010d0c:	f1ac 0303 	sub.w	r3, ip, #3
 8010d10:	00ba      	lsls	r2, r7, #2
 8010d12:	9108      	str	r1, [sp, #32]
 8010d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d16:	920c      	str	r2, [sp, #48]	@ 0x30
 8010d18:	f1bb 0f00 	cmp.w	fp, #0
 8010d1c:	f000 808e 	beq.w	8010e3c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x62c>
 8010d20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d22:	9904      	ldr	r1, [sp, #16]
 8010d24:	f8dd e020 	ldr.w	lr, [sp, #32]
 8010d28:	3680      	adds	r6, #128	@ 0x80
 8010d2a:	eb0d 0806 	add.w	r8, sp, r6
 8010d2e:	e958 2311 	ldrd	r2, r3, [r8, #-68]	@ 0x44
 8010d32:	f858 7c48 	ldr.w	r7, [r8, #-72]
 8010d36:	19c8      	adds	r0, r1, r7
 8010d38:	9006      	str	r0, [sp, #24]
 8010d3a:	eb0a 0700 	add.w	r7, sl, r0
 8010d3e:	4670      	mov	r0, lr
 8010d40:	188a      	adds	r2, r1, r2
 8010d42:	4458      	add	r0, fp
 8010d44:	4419      	add	r1, r3
 8010d46:	f01b 0303 	ands.w	r3, fp, #3
 8010d4a:	4676      	mov	r6, lr
 8010d4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d4e:	910a      	str	r1, [sp, #40]	@ 0x28
 8010d50:	eb0a 0802 	add.w	r8, sl, r2
 8010d54:	eb0a 0901 	add.w	r9, sl, r1
 8010d58:	9007      	str	r0, [sp, #28]
 8010d5a:	d039      	beq.n	8010dd0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x5c0>
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d023      	beq.n	8010da8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x598>
 8010d60:	2b02      	cmp	r3, #2
 8010d62:	d010      	beq.n	8010d86 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x576>
 8010d64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d68:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010d6c:	9101      	str	r1, [sp, #4]
 8010d6e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8010d72:	9a06      	ldr	r2, [sp, #24]
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8010d7a:	6860      	ldr	r0, [r4, #4]
 8010d7c:	4672      	mov	r2, lr
 8010d7e:	4629      	mov	r1, r5
 8010d80:	f001 f906 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010d84:	3601      	adds	r6, #1
 8010d86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d8a:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8010d8e:	9001      	str	r0, [sp, #4]
 8010d90:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8010d94:	9906      	ldr	r1, [sp, #24]
 8010d96:	9200      	str	r2, [sp, #0]
 8010d98:	f81a 3001 	ldrb.w	r3, [sl, r1]
 8010d9c:	6860      	ldr	r0, [r4, #4]
 8010d9e:	4632      	mov	r2, r6
 8010da0:	4629      	mov	r1, r5
 8010da2:	f001 f8f5 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010da6:	3601      	adds	r6, #1
 8010da8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dac:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8010db0:	9301      	str	r3, [sp, #4]
 8010db2:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010db6:	9806      	ldr	r0, [sp, #24]
 8010db8:	9100      	str	r1, [sp, #0]
 8010dba:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8010dbe:	6860      	ldr	r0, [r4, #4]
 8010dc0:	4632      	mov	r2, r6
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	f001 f8e4 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010dc8:	9b07      	ldr	r3, [sp, #28]
 8010dca:	3601      	adds	r6, #1
 8010dcc:	429e      	cmp	r6, r3
 8010dce:	d035      	beq.n	8010e3c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x62c>
 8010dd0:	f899 0000 	ldrb.w	r0, [r9]
 8010dd4:	9001      	str	r0, [sp, #4]
 8010dd6:	f898 3000 	ldrb.w	r3, [r8]
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	4632      	mov	r2, r6
 8010dde:	783b      	ldrb	r3, [r7, #0]
 8010de0:	6860      	ldr	r0, [r4, #4]
 8010de2:	4629      	mov	r1, r5
 8010de4:	f001 f8d4 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010de8:	f899 2000 	ldrb.w	r2, [r9]
 8010dec:	9201      	str	r2, [sp, #4]
 8010dee:	f898 1000 	ldrb.w	r1, [r8]
 8010df2:	9100      	str	r1, [sp, #0]
 8010df4:	1c72      	adds	r2, r6, #1
 8010df6:	783b      	ldrb	r3, [r7, #0]
 8010df8:	6860      	ldr	r0, [r4, #4]
 8010dfa:	9206      	str	r2, [sp, #24]
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	f001 f8c7 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010e02:	f899 0000 	ldrb.w	r0, [r9]
 8010e06:	9001      	str	r0, [sp, #4]
 8010e08:	f898 3000 	ldrb.w	r3, [r8]
 8010e0c:	9a06      	ldr	r2, [sp, #24]
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	783b      	ldrb	r3, [r7, #0]
 8010e12:	6860      	ldr	r0, [r4, #4]
 8010e14:	3201      	adds	r2, #1
 8010e16:	4629      	mov	r1, r5
 8010e18:	f001 f8ba 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010e1c:	f899 2000 	ldrb.w	r2, [r9]
 8010e20:	9201      	str	r2, [sp, #4]
 8010e22:	f898 1000 	ldrb.w	r1, [r8]
 8010e26:	9100      	str	r1, [sp, #0]
 8010e28:	783b      	ldrb	r3, [r7, #0]
 8010e2a:	6860      	ldr	r0, [r4, #4]
 8010e2c:	1cf2      	adds	r2, r6, #3
 8010e2e:	4629      	mov	r1, r5
 8010e30:	f001 f8ae 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8010e34:	9b07      	ldr	r3, [sp, #28]
 8010e36:	3604      	adds	r6, #4
 8010e38:	429e      	cmp	r6, r3
 8010e3a:	d1c9      	bne.n	8010dd0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x5c0>
 8010e3c:	9f04      	ldr	r7, [sp, #16]
 8010e3e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010e40:	42b7      	cmp	r7, r6
 8010e42:	f43f ada4 	beq.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010e46:	9a08      	ldr	r2, [sp, #32]
 8010e48:	9905      	ldr	r1, [sp, #20]
 8010e4a:	3703      	adds	r7, #3
 8010e4c:	445a      	add	r2, fp
 8010e4e:	428f      	cmp	r7, r1
 8010e50:	9704      	str	r7, [sp, #16]
 8010e52:	9208      	str	r2, [sp, #32]
 8010e54:	f4ff af60 	bcc.w	8010d18 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x508>
 8010e58:	e599      	b.n	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8010e98 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x688>)
 8010e5c:	4a05      	ldr	r2, [pc, #20]	@ (8010e74 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8010e5e:	4806      	ldr	r0, [pc, #24]	@ (8010e78 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8010e60:	21b3      	movs	r1, #179	@ 0xb3
 8010e62:	f009 fc29 	bl	801a6b8 <__assert_func>
 8010e66:	f1b9 0f00 	cmp.w	r9, #0
 8010e6a:	f47f ae5f 	bne.w	8010b2c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x31c>
 8010e6e:	e59f      	b.n	80109b0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1a0>
 8010e70:	0801c81c 	stmdaeq	r1, {r2, r3, r4, fp, lr, pc}
 8010e74:	0801c7a4 	stmdaeq	r1, {r2, r5, r7, r8, r9, sl, lr, pc}
 8010e78:	0801c6e0 	stmdaeq	r1, {r5, r6, r7, r9, sl, lr, pc}
 8010e7c:	0801c790 	stmdaeq	r1, {r4, r7, r8, r9, sl, lr, pc}
 8010e80:	20000078 	andcs	r0, r0, r8, ror r0
 8010e84:	0801c7ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, lr, pc}
 8010e88:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 8010e8c:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 8010e90:	0801c558 	stmdaeq	r1, {r3, r4, r6, r8, sl, lr, pc}
 8010e94:	0801c834 	stmdaeq	r1, {r2, r4, r5, fp, lr, pc}
 8010e98:	0801c7d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, lr, pc}
 8010e9c:	f1a8 0103 	sub.w	r1, r8, #3
 8010ea0:	0098      	lsls	r0, r3, #2
 8010ea2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ea4:	910c      	str	r1, [sp, #48]	@ 0x30
 8010ea6:	f8cd 9020 	str.w	r9, [sp, #32]
 8010eaa:	900d      	str	r0, [sp, #52]	@ 0x34
 8010eac:	f1bb 0f00 	cmp.w	fp, #0
 8010eb0:	f000 80a0 	beq.w	8010ff4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x7e4>
 8010eb4:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8010eb6:	9908      	ldr	r1, [sp, #32]
 8010eb8:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8010ebc:	3780      	adds	r7, #128	@ 0x80
 8010ebe:	eb0d 0907 	add.w	r9, sp, r7
 8010ec2:	4667      	mov	r7, ip
 8010ec4:	f859 3c48 	ldr.w	r3, [r9, #-72]
 8010ec8:	18c8      	adds	r0, r1, r3
 8010eca:	e959 2311 	ldrd	r2, r3, [r9, #-68]	@ 0x44
 8010ece:	188a      	adds	r2, r1, r2
 8010ed0:	4419      	add	r1, r3
 8010ed2:	eb0a 0301 	add.w	r3, sl, r1
 8010ed6:	920a      	str	r2, [sp, #40]	@ 0x28
 8010ed8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010eda:	eb0a 0902 	add.w	r9, sl, r2
 8010ede:	f01b 0103 	ands.w	r1, fp, #3
 8010ee2:	eb0b 020c 	add.w	r2, fp, ip
 8010ee6:	9006      	str	r0, [sp, #24]
 8010ee8:	eb0a 0800 	add.w	r8, sl, r0
 8010eec:	9304      	str	r3, [sp, #16]
 8010eee:	9207      	str	r2, [sp, #28]
 8010ef0:	d03e      	beq.n	8010f70 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x760>
 8010ef2:	2901      	cmp	r1, #1
 8010ef4:	d026      	beq.n	8010f44 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x734>
 8010ef6:	2902      	cmp	r1, #2
 8010ef8:	d011      	beq.n	8010f1e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x70e>
 8010efa:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8010efe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f00:	7df3      	ldrb	r3, [r6, #23]
 8010f02:	9202      	str	r2, [sp, #8]
 8010f04:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8010f08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f0a:	9001      	str	r0, [sp, #4]
 8010f0c:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010f10:	9100      	str	r1, [sp, #0]
 8010f12:	6860      	ldr	r0, [r4, #4]
 8010f14:	4662      	mov	r2, ip
 8010f16:	4629      	mov	r1, r5
 8010f18:	f001 f95e 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010f1c:	3701      	adds	r7, #1
 8010f1e:	9806      	ldr	r0, [sp, #24]
 8010f20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f22:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8010f26:	7df3      	ldrb	r3, [r6, #23]
 8010f28:	9202      	str	r2, [sp, #8]
 8010f2a:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8010f2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f30:	9001      	str	r0, [sp, #4]
 8010f32:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010f36:	9100      	str	r1, [sp, #0]
 8010f38:	463a      	mov	r2, r7
 8010f3a:	6860      	ldr	r0, [r4, #4]
 8010f3c:	4629      	mov	r1, r5
 8010f3e:	f001 f94b 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010f42:	3701      	adds	r7, #1
 8010f44:	9b06      	ldr	r3, [sp, #24]
 8010f46:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010f48:	f81a c003 	ldrb.w	ip, [sl, r3]
 8010f4c:	f81a e000 	ldrb.w	lr, [sl, r0]
 8010f50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f52:	7df3      	ldrb	r3, [r6, #23]
 8010f54:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8010f58:	9100      	str	r1, [sp, #0]
 8010f5a:	e9cd ec01 	strd	lr, ip, [sp, #4]
 8010f5e:	463a      	mov	r2, r7
 8010f60:	6860      	ldr	r0, [r4, #4]
 8010f62:	4629      	mov	r1, r5
 8010f64:	f001 f938 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010f68:	9b07      	ldr	r3, [sp, #28]
 8010f6a:	3701      	adds	r7, #1
 8010f6c:	42bb      	cmp	r3, r7
 8010f6e:	d041      	beq.n	8010ff4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x7e4>
 8010f70:	f898 0000 	ldrb.w	r0, [r8]
 8010f74:	7df3      	ldrb	r3, [r6, #23]
 8010f76:	9002      	str	r0, [sp, #8]
 8010f78:	f899 2000 	ldrb.w	r2, [r9]
 8010f7c:	9904      	ldr	r1, [sp, #16]
 8010f7e:	9201      	str	r2, [sp, #4]
 8010f80:	7808      	ldrb	r0, [r1, #0]
 8010f82:	9000      	str	r0, [sp, #0]
 8010f84:	463a      	mov	r2, r7
 8010f86:	6860      	ldr	r0, [r4, #4]
 8010f88:	4629      	mov	r1, r5
 8010f8a:	f001 f925 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010f8e:	f898 2000 	ldrb.w	r2, [r8]
 8010f92:	7df3      	ldrb	r3, [r6, #23]
 8010f94:	9202      	str	r2, [sp, #8]
 8010f96:	f899 1000 	ldrb.w	r1, [r9]
 8010f9a:	9804      	ldr	r0, [sp, #16]
 8010f9c:	9101      	str	r1, [sp, #4]
 8010f9e:	7802      	ldrb	r2, [r0, #0]
 8010fa0:	9200      	str	r2, [sp, #0]
 8010fa2:	6860      	ldr	r0, [r4, #4]
 8010fa4:	1c7a      	adds	r2, r7, #1
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	9206      	str	r2, [sp, #24]
 8010faa:	f001 f915 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010fae:	f898 1000 	ldrb.w	r1, [r8]
 8010fb2:	7df3      	ldrb	r3, [r6, #23]
 8010fb4:	9102      	str	r1, [sp, #8]
 8010fb6:	f899 0000 	ldrb.w	r0, [r9]
 8010fba:	9904      	ldr	r1, [sp, #16]
 8010fbc:	9001      	str	r0, [sp, #4]
 8010fbe:	7808      	ldrb	r0, [r1, #0]
 8010fc0:	9a06      	ldr	r2, [sp, #24]
 8010fc2:	9000      	str	r0, [sp, #0]
 8010fc4:	6860      	ldr	r0, [r4, #4]
 8010fc6:	3201      	adds	r2, #1
 8010fc8:	4629      	mov	r1, r5
 8010fca:	f001 f905 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010fce:	f898 2000 	ldrb.w	r2, [r8]
 8010fd2:	7df3      	ldrb	r3, [r6, #23]
 8010fd4:	9202      	str	r2, [sp, #8]
 8010fd6:	f899 1000 	ldrb.w	r1, [r9]
 8010fda:	9804      	ldr	r0, [sp, #16]
 8010fdc:	9101      	str	r1, [sp, #4]
 8010fde:	7802      	ldrb	r2, [r0, #0]
 8010fe0:	9200      	str	r2, [sp, #0]
 8010fe2:	6860      	ldr	r0, [r4, #4]
 8010fe4:	1cfa      	adds	r2, r7, #3
 8010fe6:	4629      	mov	r1, r5
 8010fe8:	f001 f8f6 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010fec:	9b07      	ldr	r3, [sp, #28]
 8010fee:	3704      	adds	r7, #4
 8010ff0:	42bb      	cmp	r3, r7
 8010ff2:	d1bd      	bne.n	8010f70 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x760>
 8010ff4:	9f08      	ldr	r7, [sp, #32]
 8010ff6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8010ff8:	4287      	cmp	r7, r0
 8010ffa:	f43f acc8 	beq.w	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011000:	9905      	ldr	r1, [sp, #20]
 8011002:	3703      	adds	r7, #3
 8011004:	445a      	add	r2, fp
 8011006:	42b9      	cmp	r1, r7
 8011008:	9708      	str	r7, [sp, #32]
 801100a:	9209      	str	r2, [sp, #36]	@ 0x24
 801100c:	f63f af4e 	bhi.w	8010eac <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x69c>
 8011010:	e4bd      	b.n	801098e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8011012:	4b03      	ldr	r3, [pc, #12]	@ (8011020 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x810>)
 8011014:	4a03      	ldr	r2, [pc, #12]	@ (8011024 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x814>)
 8011016:	4804      	ldr	r0, [pc, #16]	@ (8011028 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x818>)
 8011018:	21a2      	movs	r1, #162	@ 0xa2
 801101a:	f009 fb4d 	bl	801a6b8 <__assert_func>
 801101e:	bf00      	nop
 8011020:	0801c80c 	stmdaeq	r1, {r2, r3, fp, lr, pc}
 8011024:	0801c810 	stmdaeq	r1, {r4, fp, lr, pc}
 8011028:	0801c6e0 	stmdaeq	r1, {r5, r6, r7, r9, sl, lr, pc}

0801102c <WS28xxDmxMulti::Sync(unsigned long)>:
 801102c:	2921      	cmp	r1, #33	@ 0x21
 801102e:	b570      	push	{r4, r5, r6, lr}
 8011030:	460c      	mov	r4, r1
 8011032:	4605      	mov	r5, r0
 8011034:	d810      	bhi.n	8011058 <WS28xxDmxMulti::Sync(unsigned long)+0x2c>
 8011036:	4a0c      	ldr	r2, [pc, #48]	@ (8011068 <WS28xxDmxMulti::Sync(unsigned long)+0x3c>)
 8011038:	f240 6304 	movw	r3, #1540	@ 0x604
 801103c:	fb04 f303 	mul.w	r3, r4, r3
 8011040:	18d1      	adds	r1, r2, r3
 8011042:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 8011046:	4402      	add	r2, r0
 8011048:	f8d1 3600 	ldr.w	r3, [r1, #1536]	@ 0x600
 801104c:	4628      	mov	r0, r5
 801104e:	4621      	mov	r1, r4
 8011050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011054:	f7ff bbdc 	b.w	8010810 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 8011058:	4b04      	ldr	r3, [pc, #16]	@ (801106c <WS28xxDmxMulti::Sync(unsigned long)+0x40>)
 801105a:	4a05      	ldr	r2, [pc, #20]	@ (8011070 <WS28xxDmxMulti::Sync(unsigned long)+0x44>)
 801105c:	4805      	ldr	r0, [pc, #20]	@ (8011074 <WS28xxDmxMulti::Sync(unsigned long)+0x48>)
 801105e:	21b5      	movs	r1, #181	@ 0xb5
 8011060:	f009 fb2a 	bl	801a6b8 <__assert_func>
 8011064:	e7e7      	b.n	8011036 <WS28xxDmxMulti::Sync(unsigned long)+0xa>
 8011066:	bf00      	nop
 8011068:	20000080 	andcs	r0, r0, r0, lsl #1
 801106c:	0801c844 	stmdaeq	r1, {r2, r6, fp, lr, pc}
 8011070:	0801c858 	stmdaeq	r1, {r3, r4, r6, fp, lr, pc}
 8011074:	0801c860 	stmdaeq	r1, {r5, r6, fp, lr, pc}

08011078 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 8011078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801107c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8011080:	b143      	cbz	r3, 8011094 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1c>
 8011082:	4d23      	ldr	r5, [pc, #140]	@ (8011110 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x98>)
 8011084:	682f      	ldr	r7, [r5, #0]
 8011086:	4606      	mov	r6, r0
 8011088:	460c      	mov	r4, r1
 801108a:	2f00      	cmp	r7, #0
 801108c:	d038      	beq.n	8011100 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x88>
 801108e:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 8011090:	4284      	cmp	r4, r0
 8011092:	d001      	beq.n	8011098 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x20>
 8011094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011098:	4c1e      	ldr	r4, [pc, #120]	@ (8011114 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x9c>)
 801109a:	2500      	movs	r5, #0
 801109c:	f242 6818 	movw	r8, #9752	@ 0x2618
 80110a0:	e00e      	b.n	80110c0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x48>
 80110a2:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 80110a6:	f814 f008 	pld	[r4, r8]
 80110aa:	4622      	mov	r2, r4
 80110ac:	4629      	mov	r1, r5
 80110ae:	4630      	mov	r0, r6
 80110b0:	f7ff fbae 	bl	8010810 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 80110b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80110b6:	3501      	adds	r5, #1
 80110b8:	429d      	cmp	r5, r3
 80110ba:	f204 6404 	addw	r4, r4, #1540	@ 0x604
 80110be:	d81a      	bhi.n	80110f6 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x7e>
 80110c0:	2d22      	cmp	r5, #34	@ 0x22
 80110c2:	d1ee      	bne.n	80110a2 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 80110c4:	4b14      	ldr	r3, [pc, #80]	@ (8011118 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa0>)
 80110c6:	4a15      	ldr	r2, [pc, #84]	@ (801111c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa4>)
 80110c8:	4815      	ldr	r0, [pc, #84]	@ (8011120 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa8>)
 80110ca:	21b5      	movs	r1, #181	@ 0xb5
 80110cc:	f009 faf4 	bl	801a6b8 <__assert_func>
 80110d0:	f504 5218 	add.w	r2, r4, #9728	@ 0x2600
 80110d4:	3218      	adds	r2, #24
 80110d6:	4629      	mov	r1, r5
 80110d8:	f892 f000 	pld	[r2]
 80110dc:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 80110e0:	4622      	mov	r2, r4
 80110e2:	4630      	mov	r0, r6
 80110e4:	f7ff fb94 	bl	8010810 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 80110e8:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80110ea:	2922      	cmp	r1, #34	@ 0x22
 80110ec:	f04f 0523 	mov.w	r5, #35	@ 0x23
 80110f0:	f204 6404 	addw	r4, r4, #1540	@ 0x604
 80110f4:	d8d5      	bhi.n	80110a2 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 80110f6:	6870      	ldr	r0, [r6, #4]
 80110f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110fc:	f000 bd40 	b.w	8011b80 <WS28xxMulti::Update()>
 8011100:	4b08      	ldr	r3, [pc, #32]	@ (8011124 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xac>)
 8011102:	4a09      	ldr	r2, [pc, #36]	@ (8011128 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xb0>)
 8011104:	4809      	ldr	r0, [pc, #36]	@ (801112c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xb4>)
 8011106:	21a4      	movs	r1, #164	@ 0xa4
 8011108:	f009 fad6 	bl	801a6b8 <__assert_func>
 801110c:	682f      	ldr	r7, [r5, #0]
 801110e:	e7be      	b.n	801108e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x16>
 8011110:	20000078 	andcs	r0, r0, r8, ror r0
 8011114:	20000480 	andcs	r0, r0, r0, lsl #9
 8011118:	0801c844 	stmdaeq	r1, {r2, r6, fp, lr, pc}
 801111c:	0801c858 	stmdaeq	r1, {r3, r4, r6, fp, lr, pc}
 8011120:	0801c860 	stmdaeq	r1, {r5, r6, fp, lr, pc}
 8011124:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 8011128:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 801112c:	0801c558 	stmdaeq	r1, {r3, r4, r6, r8, sl, lr, pc}

08011130 <remoteconfig::pixel::json_get_status(char*, unsigned long)>:
 8011130:	b570      	push	{r4, r5, r6, lr}
 8011132:	4e0a      	ldr	r6, [pc, #40]	@ (801115c <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x2c>)
 8011134:	6833      	ldr	r3, [r6, #0]
 8011136:	4604      	mov	r4, r0
 8011138:	460d      	mov	r5, r1
 801113a:	b933      	cbnz	r3, 801114a <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x1a>
 801113c:	4b08      	ldr	r3, [pc, #32]	@ (8011160 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x30>)
 801113e:	4a09      	ldr	r2, [pc, #36]	@ (8011164 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x34>)
 8011140:	4809      	ldr	r0, [pc, #36]	@ (8011168 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x38>)
 8011142:	f240 110d 	movw	r1, #269	@ 0x10d
 8011146:	f009 fab7 	bl	801a6b8 <__assert_func>
 801114a:	6833      	ldr	r3, [r6, #0]
 801114c:	4a07      	ldr	r2, [pc, #28]	@ (801116c <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x3c>)
 801114e:	699b      	ldr	r3, [r3, #24]
 8011150:	4629      	mov	r1, r5
 8011152:	4620      	mov	r0, r4
 8011154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011158:	f009 b9f6 	b.w	801a548 <snprintf>
 801115c:	2000007c 	andcs	r0, r0, ip, ror r0
 8011160:	0801adef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, fp, sp, pc}
 8011164:	0801ae02 	stmdaeq	r1, {r1, r9, sl, fp, sp, pc}
 8011168:	0801b9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, ip, sp, pc}
 801116c:	0801b9c0 	stmdaeq	r1, {r6, r7, r8, fp, ip, sp, pc}

08011170 <pixel::pixel_get_type(pixel::Type)>:
 8011170:	280d      	cmp	r0, #13
 8011172:	bfda      	itte	le
 8011174:	4b02      	ldrle	r3, [pc, #8]	@ (8011180 <pixel::pixel_get_type(pixel::Type)+0x10>)
 8011176:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 801117a:	4802      	ldrgt	r0, [pc, #8]	@ (8011184 <pixel::pixel_get_type(pixel::Type)+0x14>)
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	0801ed8c 	stmdaeq	r1, {r2, r3, r7, r8, sl, fp, sp, lr, pc}
 8011184:	0801b9d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, fp, ip, sp, pc}

08011188 <pixel::pixel_get_type(char const*)>:
 8011188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801118a:	4604      	mov	r4, r0
 801118c:	b928      	cbnz	r0, 801119a <pixel::pixel_get_type(char const*)+0x12>
 801118e:	4b12      	ldr	r3, [pc, #72]	@ (80111d8 <pixel::pixel_get_type(char const*)+0x50>)
 8011190:	4a12      	ldr	r2, [pc, #72]	@ (80111dc <pixel::pixel_get_type(char const*)+0x54>)
 8011192:	4813      	ldr	r0, [pc, #76]	@ (80111e0 <pixel::pixel_get_type(char const*)+0x58>)
 8011194:	213c      	movs	r1, #60	@ 0x3c
 8011196:	f009 fa8f 	bl	801a6b8 <__assert_func>
 801119a:	4912      	ldr	r1, [pc, #72]	@ (80111e4 <pixel::pixel_get_type(char const*)+0x5c>)
 801119c:	2000      	movs	r0, #0
 801119e:	1e66      	subs	r6, r4, #1
 80111a0:	1e4d      	subs	r5, r1, #1
 80111a2:	e000      	b.n	80111a6 <pixel::pixel_get_type(char const*)+0x1e>
 80111a4:	b1ba      	cbz	r2, 80111d6 <pixel::pixel_get_type(char const*)+0x4e>
 80111a6:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80111aa:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 80111ae:	2b19      	cmp	r3, #25
 80111b0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80111b4:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 80111b8:	4617      	mov	r7, r2
 80111ba:	bf98      	it	ls
 80111bc:	f102 0720 	addls.w	r7, r2, #32
 80111c0:	f1bc 0f19 	cmp.w	ip, #25
 80111c4:	bf98      	it	ls
 80111c6:	3320      	addls	r3, #32
 80111c8:	42bb      	cmp	r3, r7
 80111ca:	d0eb      	beq.n	80111a4 <pixel::pixel_get_type(char const*)+0x1c>
 80111cc:	3001      	adds	r0, #1
 80111ce:	280e      	cmp	r0, #14
 80111d0:	f101 0108 	add.w	r1, r1, #8
 80111d4:	d1e3      	bne.n	801119e <pixel::pixel_get_type(char const*)+0x16>
 80111d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111d8:	0801b9de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, fp, ip, sp, pc}
 80111dc:	0801b9f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, fp, ip, sp, pc}
 80111e0:	0801ba00 	stmdaeq	r1, {r9, fp, ip, sp, pc}
 80111e4:	0801ed8c 	stmdaeq	r1, {r2, r3, r7, r8, sl, fp, sp, lr, pc}

080111e8 <pixel::pixel_get_map(char const*)>:
 80111e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ea:	4604      	mov	r4, r0
 80111ec:	b928      	cbnz	r0, 80111fa <pixel::pixel_get_map(char const*)+0x12>
 80111ee:	4b15      	ldr	r3, [pc, #84]	@ (8011244 <pixel::pixel_get_map(char const*)+0x5c>)
 80111f0:	4a15      	ldr	r2, [pc, #84]	@ (8011248 <pixel::pixel_get_map(char const*)+0x60>)
 80111f2:	4816      	ldr	r0, [pc, #88]	@ (801124c <pixel::pixel_get_map(char const*)+0x64>)
 80111f4:	214a      	movs	r1, #74	@ 0x4a
 80111f6:	f009 fa5f 	bl	801a6b8 <__assert_func>
 80111fa:	4b15      	ldr	r3, [pc, #84]	@ (8011250 <pixel::pixel_get_map(char const*)+0x68>)
 80111fc:	2000      	movs	r0, #0
 80111fe:	1e5d      	subs	r5, r3, #1
 8011200:	1e66      	subs	r6, r4, #1
 8011202:	f103 0c02 	add.w	ip, r3, #2
 8011206:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801120a:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 801120e:	2919      	cmp	r1, #25
 8011210:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011214:	f1a1 0e41 	sub.w	lr, r1, #65	@ 0x41
 8011218:	4617      	mov	r7, r2
 801121a:	bf98      	it	ls
 801121c:	f102 0720 	addls.w	r7, r2, #32
 8011220:	f1be 0f19 	cmp.w	lr, #25
 8011224:	bf98      	it	ls
 8011226:	3120      	addls	r1, #32
 8011228:	42b9      	cmp	r1, r7
 801122a:	d005      	beq.n	8011238 <pixel::pixel_get_map(char const*)+0x50>
 801122c:	3001      	adds	r0, #1
 801122e:	2806      	cmp	r0, #6
 8011230:	f103 0304 	add.w	r3, r3, #4
 8011234:	d1e3      	bne.n	80111fe <pixel::pixel_get_map(char const*)+0x16>
 8011236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011238:	2a00      	cmp	r2, #0
 801123a:	d0fc      	beq.n	8011236 <pixel::pixel_get_map(char const*)+0x4e>
 801123c:	4565      	cmp	r5, ip
 801123e:	d1e2      	bne.n	8011206 <pixel::pixel_get_map(char const*)+0x1e>
 8011240:	e7f9      	b.n	8011236 <pixel::pixel_get_map(char const*)+0x4e>
 8011242:	bf00      	nop
 8011244:	0801b9de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, fp, ip, sp, pc}
 8011248:	0801ba12 	stmdaeq	r1, {r1, r4, r9, fp, ip, sp, pc}
 801124c:	0801ba00 	stmdaeq	r1, {r9, fp, ip, sp, pc}
 8011250:	0801ed74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, sp, lr, pc}

08011254 <pixel::pixel_get_map(pixel::Map)>:
 8011254:	2805      	cmp	r0, #5
 8011256:	bfda      	itte	le
 8011258:	4b02      	ldrle	r3, [pc, #8]	@ (8011264 <pixel::pixel_get_map(pixel::Map)+0x10>)
 801125a:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 801125e:	4802      	ldrgt	r0, [pc, #8]	@ (8011268 <pixel::pixel_get_map(pixel::Map)+0x14>)
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop
 8011264:	0801ed74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, sp, lr, pc}
 8011268:	0801ba20 	stmdaeq	r1, {r5, r9, fp, ip, sp, pc}

0801126c <remoteconfig::pixel::json_get_types(char*, unsigned long)>:
 801126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011270:	f1a1 0802 	sub.w	r8, r1, #2
 8011274:	4a15      	ldr	r2, [pc, #84]	@ (80112cc <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x60>)
 8011276:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80112dc <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x70>
 801127a:	f8df a064 	ldr.w	sl, [pc, #100]	@ 80112e0 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x74>
 801127e:	460d      	mov	r5, r1
 8011280:	4641      	mov	r1, r8
 8011282:	4606      	mov	r6, r0
 8011284:	f009 f960 	bl	801a548 <snprintf>
 8011288:	2700      	movs	r7, #0
 801128a:	4604      	mov	r4, r0
 801128c:	eb07 0309 	add.w	r3, r7, r9
 8011290:	3708      	adds	r7, #8
 8011292:	2f78      	cmp	r7, #120	@ 0x78
 8011294:	eb06 0004 	add.w	r0, r6, r4
 8011298:	d111      	bne.n	80112be <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x52>
 801129a:	235d      	movs	r3, #93	@ 0x5d
 801129c:	1c67      	adds	r7, r4, #1
 801129e:	f800 3c01 	strb.w	r3, [r0, #-1]
 80112a2:	42bd      	cmp	r5, r7
 80112a4:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80112a8:	5533      	strb	r3, [r6, r4]
 80112aa:	d205      	bcs.n	80112b8 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x4c>
 80112ac:	4b08      	ldr	r3, [pc, #32]	@ (80112d0 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x64>)
 80112ae:	4a09      	ldr	r2, [pc, #36]	@ (80112d4 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x68>)
 80112b0:	4809      	ldr	r0, [pc, #36]	@ (80112d8 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x6c>)
 80112b2:	216e      	movs	r1, #110	@ 0x6e
 80112b4:	f009 fa00 	bl	801a6b8 <__assert_func>
 80112b8:	4638      	mov	r0, r7
 80112ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112be:	eba8 0104 	sub.w	r1, r8, r4
 80112c2:	4652      	mov	r2, sl
 80112c4:	f009 f940 	bl	801a548 <snprintf>
 80112c8:	4404      	add	r4, r0
 80112ca:	e7df      	b.n	801128c <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x20>
 80112cc:	0801ba2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, ip, sp, pc}
 80112d0:	0801ba35 	stmdaeq	r1, {r0, r2, r4, r5, r9, fp, ip, sp, pc}
 80112d4:	0801ba4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, fp, ip, sp, pc}
 80112d8:	0801ba00 	stmdaeq	r1, {r9, fp, ip, sp, pc}
 80112dc:	0801ed8c 	stmdaeq	r1, {r2, r3, r7, r8, sl, fp, sp, lr, pc}
 80112e0:	0801b2d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, ip, sp, pc}

080112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>:
 80112e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112e8:	4607      	mov	r7, r0
 80112ea:	4688      	mov	r8, r1
 80112ec:	f3c2 4907 	ubfx	r9, r2, #16, #8
 80112f0:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 80112f4:	b2d4      	uxtb	r4, r2
 80112f6:	f7f8 fc53 	bl	8009ba0 <PixelConfiguration::Get()>
 80112fa:	68c3      	ldr	r3, [r0, #12]
 80112fc:	4e29      	ldr	r6, [pc, #164]	@ (80113a4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xc0>)
 80112fe:	2b0d      	cmp	r3, #13
 8011300:	d846      	bhi.n	8011390 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xac>
 8011302:	e8df f003 	tbb	[pc, r3]
 8011306:	45454507 	strbmi	r4, [r5, #-1287]	@ 0xfffffaf9
 801130a:	30454545 	subcc	r4, r5, r5, asr #10
 801130e:	12454545 	subne	r4, r5, #289406976	@ 0x11400000
 8011312:	e9cd1d12 	stmib	sp, {r1, r4, r8, sl, fp, ip}^
 8011316:	a400      	add	r4, pc, #0	@ (adr r4, 8011318 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x34>)
 8011318:	464b      	mov	r3, r9
 801131a:	6830      	ldr	r0, [r6, #0]
 801131c:	4642      	mov	r2, r8
 801131e:	4639      	mov	r1, r7
 8011320:	f000 fe36 	bl	8011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011324:	b004      	add	sp, #16
 8011326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132a:	e9cd a401 	strd	sl, r4, [sp, #4]
 801132e:	f8cd 9000 	str.w	r9, [sp]
 8011332:	23ff      	movs	r3, #255	@ 0xff
 8011334:	6830      	ldr	r0, [r6, #0]
 8011336:	4642      	mov	r2, r8
 8011338:	4639      	mov	r1, r7
 801133a:	f000 ff4d 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801133e:	e7f1      	b.n	8011324 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 8011340:	ea6f 1519 	mvn.w	r5, r9, lsr #4
 8011344:	f089 03c0 	eor.w	r3, r9, #192	@ 0xc0
 8011348:	f005 050c 	and.w	r5, r5, #12
 801134c:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 8011350:	ea6f 0394 	mvn.w	r3, r4, lsr #2
 8011354:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011358:	432b      	orrs	r3, r5
 801135a:	e9cd a901 	strd	sl, r9, [sp, #4]
 801135e:	9400      	str	r4, [sp, #0]
 8011360:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011364:	e7e6      	b.n	8011334 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x50>
 8011366:	45d1      	cmp	r9, sl
 8011368:	6830      	ldr	r0, [r6, #0]
 801136a:	f04f 0300 	mov.w	r3, #0
 801136e:	d109      	bne.n	8011384 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xa0>
 8011370:	45a1      	cmp	r9, r4
 8011372:	d107      	bne.n	8011384 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xa0>
 8011374:	e9cd 3901 	strd	r3, r9, [sp, #4]
 8011378:	9300      	str	r3, [sp, #0]
 801137a:	4642      	mov	r2, r8
 801137c:	4639      	mov	r1, r7
 801137e:	f001 fe07 	bl	8012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011382:	e7cf      	b.n	8011324 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 8011384:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8011388:	f8cd a000 	str.w	sl, [sp]
 801138c:	464b      	mov	r3, r9
 801138e:	e7f4      	b.n	801137a <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x96>
 8011390:	e9cd a400 	strd	sl, r4, [sp]
 8011394:	464b      	mov	r3, r9
 8011396:	6830      	ldr	r0, [r6, #0]
 8011398:	4642      	mov	r2, r8
 801139a:	4639      	mov	r1, r7
 801139c:	f000 fcea 	bl	8011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80113a0:	e7c0      	b.n	8011324 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 80113a2:	bf00      	nop
 80113a4:	2000dfac 	andcs	sp, r0, ip, lsr #31

080113a8 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>:
 80113a8:	b538      	push	{r3, r4, r5, lr}
 80113aa:	4605      	mov	r5, r0
 80113ac:	2400      	movs	r4, #0
 80113ae:	f7f8 fbf7 	bl	8009ba0 <PixelConfiguration::Get()>
 80113b2:	6803      	ldr	r3, [r0, #0]
 80113b4:	429c      	cmp	r4, r3
 80113b6:	d300      	bcc.n	80113ba <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x12>
 80113b8:	bd38      	pop	{r3, r4, r5, pc}
 80113ba:	4621      	mov	r1, r4
 80113bc:	2200      	movs	r2, #0
 80113be:	4628      	mov	r0, r5
 80113c0:	f7ff ff90 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80113c4:	3401      	adds	r4, #1
 80113c6:	e7f2      	b.n	80113ae <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x6>

080113c8 <PixelPatterns::PixelPatterns(unsigned long)>:
 80113c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80113ca:	233a      	movs	r3, #58	@ 0x3a
 80113cc:	4a19      	ldr	r2, [pc, #100]	@ (8011434 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 80113ce:	460c      	mov	r4, r1
 80113d0:	4605      	mov	r5, r0
 80113d2:	4919      	ldr	r1, [pc, #100]	@ (8011438 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 80113d4:	4819      	ldr	r0, [pc, #100]	@ (801143c <PixelPatterns::PixelPatterns(unsigned long)+0x74>)
 80113d6:	f009 f88f 	bl	801a4f8 <printf>
 80113da:	4a17      	ldr	r2, [pc, #92]	@ (8011438 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 80113dc:	4915      	ldr	r1, [pc, #84]	@ (8011434 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 80113de:	4818      	ldr	r0, [pc, #96]	@ (8011440 <PixelPatterns::PixelPatterns(unsigned long)+0x78>)
 80113e0:	9400      	str	r4, [sp, #0]
 80113e2:	233b      	movs	r3, #59	@ 0x3b
 80113e4:	f009 f888 	bl	801a4f8 <printf>
 80113e8:	4b16      	ldr	r3, [pc, #88]	@ (8011444 <PixelPatterns::PixelPatterns(unsigned long)+0x7c>)
 80113ea:	4a17      	ldr	r2, [pc, #92]	@ (8011448 <PixelPatterns::PixelPatterns(unsigned long)+0x80>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	b92b      	cbnz	r3, 80113fe <PixelPatterns::PixelPatterns(unsigned long)+0x36>
 80113f2:	4b16      	ldr	r3, [pc, #88]	@ (801144c <PixelPatterns::PixelPatterns(unsigned long)+0x84>)
 80113f4:	4a0f      	ldr	r2, [pc, #60]	@ (8011434 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 80113f6:	4810      	ldr	r0, [pc, #64]	@ (8011438 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 80113f8:	2142      	movs	r1, #66	@ 0x42
 80113fa:	f009 f95d 	bl	801a6b8 <__assert_func>
 80113fe:	4b14      	ldr	r3, [pc, #80]	@ (8011450 <PixelPatterns::PixelPatterns(unsigned long)+0x88>)
 8011400:	2c08      	cmp	r4, #8
 8011402:	bf28      	it	cs
 8011404:	2408      	movcs	r4, #8
 8011406:	601c      	str	r4, [r3, #0]
 8011408:	4b12      	ldr	r3, [pc, #72]	@ (8011454 <PixelPatterns::PixelPatterns(unsigned long)+0x8c>)
 801140a:	2200      	movs	r2, #0
 801140c:	6818      	ldr	r0, [r3, #0]
 801140e:	4b12      	ldr	r3, [pc, #72]	@ (8011458 <PixelPatterns::PixelPatterns(unsigned long)+0x90>)
 8011410:	4611      	mov	r1, r2
 8011412:	3201      	adds	r2, #1
 8011414:	2a08      	cmp	r2, #8
 8011416:	61d9      	str	r1, [r3, #28]
 8011418:	6018      	str	r0, [r3, #0]
 801141a:	6199      	str	r1, [r3, #24]
 801141c:	f103 0320 	add.w	r3, r3, #32
 8011420:	d1f7      	bne.n	8011412 <PixelPatterns::PixelPatterns(unsigned long)+0x4a>
 8011422:	4a04      	ldr	r2, [pc, #16]	@ (8011434 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 8011424:	4904      	ldr	r1, [pc, #16]	@ (8011438 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 8011426:	480d      	ldr	r0, [pc, #52]	@ (801145c <PixelPatterns::PixelPatterns(unsigned long)+0x94>)
 8011428:	234e      	movs	r3, #78	@ 0x4e
 801142a:	f009 f865 	bl	801a4f8 <printf>
 801142e:	4628      	mov	r0, r5
 8011430:	b003      	add	sp, #12
 8011432:	bd30      	pop	{r4, r5, pc}
 8011434:	0801ba5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, fp, ip, sp, pc}
 8011438:	0801ba6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, ip, sp, pc}
 801143c:	0801acdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, sp, pc}
 8011440:	0801ba8b 	stmdaeq	r1, {r0, r1, r3, r7, r9, fp, ip, sp, pc}
 8011444:	2000dfb4 			@ <UNDEFINED> instruction: 0x2000dfb4
 8011448:	2000dfac 	andcs	sp, r0, ip, lsr #31
 801144c:	0801baae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, fp, ip, sp, pc}
 8011450:	2000dfa8 	andcs	sp, r0, r8, lsr #31
 8011454:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8011458:	2000dea8 	andcs	sp, r0, r8, lsr #29
 801145c:	0801ad10 	stmdaeq	r1, {r4, r8, sl, fp, sp, pc}

08011460 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8011460:	2805      	cmp	r0, #5
 8011462:	bfdd      	ittte	le
 8011464:	4b02      	ldrle	r3, [pc, #8]	@ (8011470 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8011466:	220e      	movle	r2, #14
 8011468:	fb02 3000 	mlale	r0, r2, r0, r3
 801146c:	4801      	ldrgt	r0, [pc, #4]	@ (8011474 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 801146e:	4770      	bx	lr
 8011470:	0801edfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, sl, fp, sp, lr, pc}
 8011474:	0801b9d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, fp, ip, sp, pc}

08011478 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>:
 8011478:	b5e0      	push	{r5, r6, r7, lr}
 801147a:	4608      	mov	r0, r1
 801147c:	460d      	mov	r5, r1
 801147e:	4617      	mov	r7, r2
 8011480:	461e      	mov	r6, r3
 8011482:	f7ff ff91 	bl	80113a8 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8011486:	4906      	ldr	r1, [pc, #24]	@ (80114a0 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)+0x28>)
 8011488:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 801148c:	2301      	movs	r3, #1
 801148e:	61cb      	str	r3, [r1, #28]
 8011490:	22ff      	movs	r2, #255	@ 0xff
 8011492:	2300      	movs	r3, #0
 8011494:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011498:	604f      	str	r7, [r1, #4]
 801149a:	618e      	str	r6, [r1, #24]
 801149c:	bde0      	pop	{r5, r6, r7, pc}
 801149e:	bf00      	nop
 80114a0:	2000dea8 	andcs	sp, r0, r8, lsr #29

080114a4 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 80114a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a6:	4c0c      	ldr	r4, [pc, #48]	@ (80114d8 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x34>)
 80114a8:	460d      	mov	r5, r1
 80114aa:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 80114ae:	4608      	mov	r0, r1
 80114b0:	4617      	mov	r7, r2
 80114b2:	461e      	mov	r6, r3
 80114b4:	f7ff ff78 	bl	80113a8 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 80114b8:	2302      	movs	r3, #2
 80114ba:	61e3      	str	r3, [r4, #28]
 80114bc:	9b06      	ldr	r3, [sp, #24]
 80114be:	6063      	str	r3, [r4, #4]
 80114c0:	f7f8 fb6e 	bl	8009ba0 <PixelConfiguration::Get()>
 80114c4:	6803      	ldr	r3, [r0, #0]
 80114c6:	6123      	str	r3, [r4, #16]
 80114c8:	2300      	movs	r3, #0
 80114ca:	6163      	str	r3, [r4, #20]
 80114cc:	9b07      	ldr	r3, [sp, #28]
 80114ce:	61a3      	str	r3, [r4, #24]
 80114d0:	e9c4 7602 	strd	r7, r6, [r4, #8]
 80114d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114d6:	bf00      	nop
 80114d8:	2000dea8 	andcs	sp, r0, r8, lsr #29

080114dc <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 80114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114de:	4c0b      	ldr	r4, [pc, #44]	@ (801150c <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 80114e0:	460d      	mov	r5, r1
 80114e2:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 80114e6:	4608      	mov	r0, r1
 80114e8:	4616      	mov	r6, r2
 80114ea:	461f      	mov	r7, r3
 80114ec:	f7ff ff5c 	bl	80113a8 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 80114f0:	2303      	movs	r3, #3
 80114f2:	61e3      	str	r3, [r4, #28]
 80114f4:	6067      	str	r7, [r4, #4]
 80114f6:	f7f8 fb53 	bl	8009ba0 <PixelConfiguration::Get()>
 80114fa:	6803      	ldr	r3, [r0, #0]
 80114fc:	6123      	str	r3, [r4, #16]
 80114fe:	2300      	movs	r3, #0
 8011500:	6163      	str	r3, [r4, #20]
 8011502:	9b06      	ldr	r3, [sp, #24]
 8011504:	60a6      	str	r6, [r4, #8]
 8011506:	61a3      	str	r3, [r4, #24]
 8011508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801150a:	bf00      	nop
 801150c:	2000dea8 	andcs	sp, r0, r8, lsr #29

08011510 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>:
 8011510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011512:	4608      	mov	r0, r1
 8011514:	460d      	mov	r5, r1
 8011516:	4616      	mov	r6, r2
 8011518:	461f      	mov	r7, r3
 801151a:	f7ff ff45 	bl	80113a8 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 801151e:	f7f8 fb3f 	bl	8009ba0 <PixelConfiguration::Get()>
 8011522:	4911      	ldr	r1, [pc, #68]	@ (8011568 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x58>)
 8011524:	6800      	ldr	r0, [r0, #0]
 8011526:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 801152a:	2304      	movs	r3, #4
 801152c:	61cb      	str	r3, [r1, #28]
 801152e:	608e      	str	r6, [r1, #8]
 8011530:	1e43      	subs	r3, r0, #1
 8011532:	4e0e      	ldr	r6, [pc, #56]	@ (801156c <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x5c>)
 8011534:	604f      	str	r7, [r1, #4]
 8011536:	005b      	lsls	r3, r3, #1
 8011538:	b29b      	uxth	r3, r3
 801153a:	6835      	ldr	r5, [r6, #0]
 801153c:	610b      	str	r3, [r1, #16]
 801153e:	2300      	movs	r3, #0
 8011540:	614b      	str	r3, [r1, #20]
 8011542:	b96d      	cbnz	r5, 8011560 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x50>
 8011544:	0084      	lsls	r4, r0, #2
 8011546:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 801154a:	4298      	cmp	r0, r3
 801154c:	bf34      	ite	cc
 801154e:	4620      	movcc	r0, r4
 8011550:	f04f 30ff 	movcs.w	r0, #4294967295	@ 0xffffffff
 8011554:	f009 fa28 	bl	801a9a8 <operator new[](unsigned int)>
 8011558:	6030      	str	r0, [r6, #0]
 801155a:	4404      	add	r4, r0
 801155c:	42a0      	cmp	r0, r4
 801155e:	d100      	bne.n	8011562 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x52>
 8011560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011562:	f840 5b04 	str.w	r5, [r0], #4
 8011566:	e7f9      	b.n	801155c <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x4c>
 8011568:	2000dea8 	andcs	sp, r0, r8, lsr #29
 801156c:	2000dea4 	andcs	sp, r0, r4, lsr #29

08011570 <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 8011570:	b5e0      	push	{r5, r6, r7, lr}
 8011572:	4608      	mov	r0, r1
 8011574:	460d      	mov	r5, r1
 8011576:	461e      	mov	r6, r3
 8011578:	4617      	mov	r7, r2
 801157a:	f7ff ff15 	bl	80113a8 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 801157e:	4908      	ldr	r1, [pc, #32]	@ (80115a0 <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 8011580:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8011584:	2305      	movs	r3, #5
 8011586:	61cb      	str	r3, [r1, #28]
 8011588:	9b05      	ldr	r3, [sp, #20]
 801158a:	604b      	str	r3, [r1, #4]
 801158c:	9b04      	ldr	r3, [sp, #16]
 801158e:	610b      	str	r3, [r1, #16]
 8011590:	2300      	movs	r3, #0
 8011592:	614b      	str	r3, [r1, #20]
 8011594:	9b06      	ldr	r3, [sp, #24]
 8011596:	618b      	str	r3, [r1, #24]
 8011598:	e9c1 7602 	strd	r7, r6, [r1, #8]
 801159c:	bde0      	pop	{r5, r6, r7, pc}
 801159e:	bf00      	nop
 80115a0:	2000dea8 	andcs	sp, r0, r8, lsr #29

080115a4 <PixelPatterns::Wheel(unsigned char)>:
 80115a4:	43cb      	mvns	r3, r1
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	2b54      	cmp	r3, #84	@ 0x54
 80115aa:	d807      	bhi.n	80115bc <PixelPatterns::Wheel(unsigned char)+0x18>
 80115ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	0418      	lsls	r0, r3, #16
 80115b4:	f480 007f 	eor.w	r0, r0, #16711680	@ 0xff0000
 80115b8:	4318      	orrs	r0, r3
 80115ba:	4770      	bx	lr
 80115bc:	2ba9      	cmp	r3, #169	@ 0xa9
 80115be:	d809      	bhi.n	80115d4 <PixelPatterns::Wheel(unsigned char)+0x30>
 80115c0:	f1c1 01aa 	rsb	r1, r1, #170	@ 0xaa
 80115c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80115c8:	b2c9      	uxtb	r1, r1
 80115ca:	43c8      	mvns	r0, r1
 80115cc:	b2c0      	uxtb	r0, r0
 80115ce:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80115d2:	4770      	bx	lr
 80115d4:	f1c1 0155 	rsb	r1, r1, #85	@ 0x55
 80115d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80115dc:	b2c9      	uxtb	r1, r1
 80115de:	0208      	lsls	r0, r1, #8
 80115e0:	f480 407f 	eor.w	r0, r0, #65280	@ 0xff00
 80115e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80115e8:	4770      	bx	lr
	...

080115ec <PixelPatterns::Increment(unsigned long)>:
 80115ec:	4a0d      	ldr	r2, [pc, #52]	@ (8011624 <PixelPatterns::Increment(unsigned long)+0x38>)
 80115ee:	b510      	push	{r4, lr}
 80115f0:	014c      	lsls	r4, r1, #5
 80115f2:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 80115f6:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 80115fa:	b938      	cbnz	r0, 801160c <PixelPatterns::Increment(unsigned long)+0x20>
 80115fc:	690c      	ldr	r4, [r1, #16]
 80115fe:	3301      	adds	r3, #1
 8011600:	42a3      	cmp	r3, r4
 8011602:	bf14      	ite	ne
 8011604:	461a      	movne	r2, r3
 8011606:	4602      	moveq	r2, r0
 8011608:	614a      	str	r2, [r1, #20]
 801160a:	bd10      	pop	{r4, pc}
 801160c:	b92b      	cbnz	r3, 801161a <PixelPatterns::Increment(unsigned long)+0x2e>
 801160e:	4422      	add	r2, r4
 8011610:	6913      	ldr	r3, [r2, #16]
 8011612:	3b01      	subs	r3, #1
 8011614:	b29b      	uxth	r3, r3
 8011616:	6153      	str	r3, [r2, #20]
 8011618:	e7f7      	b.n	801160a <PixelPatterns::Increment(unsigned long)+0x1e>
 801161a:	3b01      	subs	r3, #1
 801161c:	614b      	str	r3, [r1, #20]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1f3      	bne.n	801160a <PixelPatterns::Increment(unsigned long)+0x1e>
 8011622:	e7f4      	b.n	801160e <PixelPatterns::Increment(unsigned long)+0x22>
 8011624:	2000dea8 	andcs	sp, r0, r8, lsr #29

08011628 <PixelPatterns::RainbowCycleUpdate(unsigned long)>:
 8011628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162a:	4b12      	ldr	r3, [pc, #72]	@ (8011674 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x4c>)
 801162c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011630:	4606      	mov	r6, r0
 8011632:	695f      	ldr	r7, [r3, #20]
 8011634:	460c      	mov	r4, r1
 8011636:	2500      	movs	r5, #0
 8011638:	f7f8 fab2 	bl	8009ba0 <PixelConfiguration::Get()>
 801163c:	6803      	ldr	r3, [r0, #0]
 801163e:	429d      	cmp	r5, r3
 8011640:	d305      	bcc.n	801164e <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x26>
 8011642:	4621      	mov	r1, r4
 8011644:	4630      	mov	r0, r6
 8011646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801164a:	f7ff bfcf 	b.w	80115ec <PixelPatterns::Increment(unsigned long)>
 801164e:	f7f8 faa7 	bl	8009ba0 <PixelConfiguration::Get()>
 8011652:	0229      	lsls	r1, r5, #8
 8011654:	6803      	ldr	r3, [r0, #0]
 8011656:	fbb1 f1f3 	udiv	r1, r1, r3
 801165a:	4439      	add	r1, r7
 801165c:	b2c9      	uxtb	r1, r1
 801165e:	4630      	mov	r0, r6
 8011660:	f7ff ffa0 	bl	80115a4 <PixelPatterns::Wheel(unsigned char)>
 8011664:	4629      	mov	r1, r5
 8011666:	4602      	mov	r2, r0
 8011668:	4620      	mov	r0, r4
 801166a:	f7ff fe3b 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 801166e:	3501      	adds	r5, #1
 8011670:	e7e2      	b.n	8011638 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x10>
 8011672:	bf00      	nop
 8011674:	2000dea8 	andcs	sp, r0, r8, lsr #29

08011678 <PixelPatterns::TheaterChaseUpdate(unsigned long)>:
 8011678:	4b13      	ldr	r3, [pc, #76]	@ (80116c8 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x50>)
 801167a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801167e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011682:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8011686:	f8d3 9014 	ldr.w	r9, [r3, #20]
 801168a:	f8df a040 	ldr.w	sl, [pc, #64]	@ 80116cc <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x54>
 801168e:	4606      	mov	r6, r0
 8011690:	460c      	mov	r4, r1
 8011692:	2500      	movs	r5, #0
 8011694:	f7f8 fa84 	bl	8009ba0 <PixelConfiguration::Get()>
 8011698:	6803      	ldr	r3, [r0, #0]
 801169a:	429d      	cmp	r5, r3
 801169c:	d305      	bcc.n	80116aa <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x32>
 801169e:	4621      	mov	r1, r4
 80116a0:	4630      	mov	r0, r6
 80116a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116a6:	f7ff bfa1 	b.w	80115ec <PixelPatterns::Increment(unsigned long)>
 80116aa:	eb05 0309 	add.w	r3, r5, r9
 80116ae:	fb0a f303 	mul.w	r3, sl, r3
 80116b2:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 80116b6:	4629      	mov	r1, r5
 80116b8:	bf94      	ite	ls
 80116ba:	463a      	movls	r2, r7
 80116bc:	4642      	movhi	r2, r8
 80116be:	4620      	mov	r0, r4
 80116c0:	f7ff fe10 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80116c4:	3501      	adds	r5, #1
 80116c6:	e7e5      	b.n	8011694 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x1c>
 80116c8:	2000dea8 	andcs	sp, r0, r8, lsr #29
 80116cc:	aaaaaaab 	bge	6abc180 <__stack_size+0x6ab4180>

080116d0 <PixelPatterns::ColourWipeUpdate(unsigned long)>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4b08      	ldr	r3, [pc, #32]	@ (80116f4 <PixelPatterns::ColourWipeUpdate(unsigned long)+0x24>)
 80116d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80116d8:	460c      	mov	r4, r1
 80116da:	4605      	mov	r5, r0
 80116dc:	6959      	ldr	r1, [r3, #20]
 80116de:	689a      	ldr	r2, [r3, #8]
 80116e0:	4620      	mov	r0, r4
 80116e2:	f7ff fdff 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80116e6:	4621      	mov	r1, r4
 80116e8:	4628      	mov	r0, r5
 80116ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116ee:	f7ff bf7d 	b.w	80115ec <PixelPatterns::Increment(unsigned long)>
 80116f2:	bf00      	nop
 80116f4:	2000dea8 	andcs	sp, r0, r8, lsr #29

080116f8 <PixelPatterns::ScannerUpdate(unsigned long)>:
 80116f8:	4b26      	ldr	r3, [pc, #152]	@ (8011794 <PixelPatterns::ScannerUpdate(unsigned long)+0x9c>)
 80116fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011702:	e9d3 2b04 	ldrd	r2, fp, [r3, #16]
 8011706:	689f      	ldr	r7, [r3, #8]
 8011708:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8011798 <PixelPatterns::ScannerUpdate(unsigned long)+0xa0>
 801170c:	9001      	str	r0, [sp, #4]
 801170e:	460e      	mov	r6, r1
 8011710:	2400      	movs	r4, #0
 8011712:	eba2 090b 	sub.w	r9, r2, fp
 8011716:	f7f8 fa43 	bl	8009ba0 <PixelConfiguration::Get()>
 801171a:	6803      	ldr	r3, [r0, #0]
 801171c:	429c      	cmp	r4, r3
 801171e:	d306      	bcc.n	801172e <PixelPatterns::ScannerUpdate(unsigned long)+0x36>
 8011720:	9801      	ldr	r0, [sp, #4]
 8011722:	4631      	mov	r1, r6
 8011724:	b003      	add	sp, #12
 8011726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172a:	f7ff bf5f 	b.w	80115ec <PixelPatterns::Increment(unsigned long)>
 801172e:	455c      	cmp	r4, fp
 8011730:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8011734:	d10a      	bne.n	801174c <PixelPatterns::ScannerUpdate(unsigned long)+0x54>
 8011736:	463a      	mov	r2, r7
 8011738:	4621      	mov	r1, r4
 801173a:	4630      	mov	r0, r6
 801173c:	f7ff fdd2 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011740:	f8d8 3000 	ldr.w	r3, [r8]
 8011744:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8011748:	3401      	adds	r4, #1
 801174a:	e7e4      	b.n	8011716 <PixelPatterns::ScannerUpdate(unsigned long)+0x1e>
 801174c:	45a1      	cmp	r9, r4
 801174e:	d109      	bne.n	8011764 <PixelPatterns::ScannerUpdate(unsigned long)+0x6c>
 8011750:	463a      	mov	r2, r7
 8011752:	4649      	mov	r1, r9
 8011754:	4630      	mov	r0, r6
 8011756:	f7ff fdc5 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 801175a:	f8d8 2000 	ldr.w	r2, [r8]
 801175e:	f842 700a 	str.w	r7, [r2, sl]
 8011762:	e7f1      	b.n	8011748 <PixelPatterns::ScannerUpdate(unsigned long)+0x50>
 8011764:	f8d8 2000 	ldr.w	r2, [r8]
 8011768:	f852 200a 	ldr.w	r2, [r2, sl]
 801176c:	f3c2 2546 	ubfx	r5, r2, #9, #7
 8011770:	f3c2 4146 	ubfx	r1, r2, #17, #7
 8011774:	022d      	lsls	r5, r5, #8
 8011776:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 801177a:	f3c2 0246 	ubfx	r2, r2, #1, #7
 801177e:	4315      	orrs	r5, r2
 8011780:	462a      	mov	r2, r5
 8011782:	4621      	mov	r1, r4
 8011784:	4630      	mov	r0, r6
 8011786:	f7ff fdad 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 801178a:	f8d8 2000 	ldr.w	r2, [r8]
 801178e:	f842 500a 	str.w	r5, [r2, sl]
 8011792:	e7d9      	b.n	8011748 <PixelPatterns::ScannerUpdate(unsigned long)+0x50>
 8011794:	2000dea8 	andcs	sp, r0, r8, lsr #29
 8011798:	2000dea4 	andcs	sp, r0, r4, lsr #29

0801179c <PixelPatterns::FadeUpdate(unsigned long)>:
 801179c:	4a20      	ldr	r2, [pc, #128]	@ (8011820 <PixelPatterns::FadeUpdate(unsigned long)+0x84>)
 801179e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80117a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117a4:	e9d2 7302 	ldrd	r7, r3, [r2, #8]
 80117a8:	460c      	mov	r4, r1
 80117aa:	e9d2 1604 	ldrd	r1, r6, [r2, #16]
 80117ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80117b2:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80117b6:	4372      	muls	r2, r6
 80117b8:	4605      	mov	r5, r0
 80117ba:	1b88      	subs	r0, r1, r6
 80117bc:	fb00 220c 	mla	r2, r0, ip, r2
 80117c0:	fbb2 f2f1 	udiv	r2, r2, r1
 80117c4:	0212      	lsls	r2, r2, #8
 80117c6:	fa1f fc82 	uxth.w	ip, r2
 80117ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80117ce:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80117d2:	4372      	muls	r2, r6
 80117d4:	fb00 220e 	mla	r2, r0, lr, r2
 80117d8:	b2db      	uxtb	r3, r3
 80117da:	fbb2 f2f1 	udiv	r2, r2, r1
 80117de:	0412      	lsls	r2, r2, #16
 80117e0:	b2ff      	uxtb	r7, r7
 80117e2:	4373      	muls	r3, r6
 80117e4:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80117e8:	fb00 3307 	mla	r3, r0, r7, r3
 80117ec:	ea4c 0202 	orr.w	r2, ip, r2
 80117f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	ea42 0603 	orr.w	r6, r2, r3
 80117fa:	2700      	movs	r7, #0
 80117fc:	f7f8 f9d0 	bl	8009ba0 <PixelConfiguration::Get()>
 8011800:	6803      	ldr	r3, [r0, #0]
 8011802:	429f      	cmp	r7, r3
 8011804:	d305      	bcc.n	8011812 <PixelPatterns::FadeUpdate(unsigned long)+0x76>
 8011806:	4621      	mov	r1, r4
 8011808:	4628      	mov	r0, r5
 801180a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801180e:	f7ff beed 	b.w	80115ec <PixelPatterns::Increment(unsigned long)>
 8011812:	4639      	mov	r1, r7
 8011814:	4632      	mov	r2, r6
 8011816:	4620      	mov	r0, r4
 8011818:	f7ff fd64 	bl	80112e4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 801181c:	3701      	adds	r7, #1
 801181e:	e7ed      	b.n	80117fc <PixelPatterns::FadeUpdate(unsigned long)+0x60>
 8011820:	2000dea8 	andcs	sp, r0, r8, lsr #29

08011824 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>:
 8011824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011826:	4b12      	ldr	r3, [pc, #72]	@ (8011870 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x4c>)
 8011828:	014e      	lsls	r6, r1, #5
 801182a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 801182e:	599c      	ldr	r4, [r3, r6]
 8011830:	686f      	ldr	r7, [r5, #4]
 8011832:	1b14      	subs	r4, r2, r4
 8011834:	42bc      	cmp	r4, r7
 8011836:	d309      	bcc.n	801184c <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x28>
 8011838:	519a      	str	r2, [r3, r6]
 801183a:	69eb      	ldr	r3, [r5, #28]
 801183c:	3b01      	subs	r3, #1
 801183e:	2b04      	cmp	r3, #4
 8011840:	d804      	bhi.n	801184c <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x28>
 8011842:	e8df f003 	tbb	[pc, r3]
 8011846:	0f0c0905 	svceq	0x000c0905
 801184a:	20000012 	andcs	r0, r0, r2, lsl r0
 801184e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011850:	f7ff feea 	bl	8011628 <PixelPatterns::RainbowCycleUpdate(unsigned long)>
 8011854:	2001      	movs	r0, #1
 8011856:	e7fa      	b.n	801184e <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2a>
 8011858:	f7ff ff0e 	bl	8011678 <PixelPatterns::TheaterChaseUpdate(unsigned long)>
 801185c:	e7fa      	b.n	8011854 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 801185e:	f7ff ff37 	bl	80116d0 <PixelPatterns::ColourWipeUpdate(unsigned long)>
 8011862:	e7f7      	b.n	8011854 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8011864:	f7ff ff48 	bl	80116f8 <PixelPatterns::ScannerUpdate(unsigned long)>
 8011868:	e7f4      	b.n	8011854 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 801186a:	f7ff ff97 	bl	801179c <PixelPatterns::FadeUpdate(unsigned long)>
 801186e:	e7f1      	b.n	8011854 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8011870:	2000dea8 	andcs	sp, r0, r8, lsr #29

08011874 <TIMER3_IRQHandler>:
 8011874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011878:	f8d3 2810 	ldr.w	r2, [r3, #2064]	@ 0x810
 801187c:	0791      	lsls	r1, r2, #30
 801187e:	d52b      	bpl.n	80118d8 <TIMER3_IRQHandler+0x64>
 8011880:	b410      	push	{r4}
 8011882:	f8d3 4400 	ldr.w	r4, [r3, #1024]	@ 0x400
 8011886:	4817      	ldr	r0, [pc, #92]	@ (80118e4 <TIMER3_IRQHandler+0x70>)
 8011888:	f024 0101 	bic.w	r1, r4, #1
 801188c:	f8c3 1400 	str.w	r1, [r3, #1024]	@ 0x400
 8011890:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 8011894:	4c14      	ldr	r4, [pc, #80]	@ (80118e8 <TIMER3_IRQHandler+0x74>)
 8011896:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 801189a:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 801189e:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 80118a2:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 80118a6:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 80118aa:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 80118ae:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80118b2:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 80118b6:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 80118ba:	2300      	movs	r3, #0
 80118bc:	7023      	strb	r3, [r4, #0]
 80118be:	f44f 517f 	mov.w	r1, #16320	@ 0x3fc0
 80118c2:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 80118c6:	43d2      	mvns	r2, r2
 80118c8:	f8c0 1828 	str.w	r1, [r0, #2088]	@ 0x828
 80118cc:	6184      	str	r4, [r0, #24]
 80118ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118d2:	f8cc 2810 	str.w	r2, [ip, #2064]	@ 0x810
 80118d6:	4770      	bx	lr
 80118d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80118dc:	43d1      	mvns	r1, r2
 80118de:	f8c0 1810 	str.w	r1, [r0, #2064]	@ 0x810
 80118e2:	4770      	bx	lr
 80118e4:	40020000 	andmi	r0, r2, r0
 80118e8:	2000dfb8 			@ <UNDEFINED> instruction: 0x2000dfb8

080118ec <WS28xxMulti::~WS28xxMulti()>:
 80118ec:	b570      	push	{r4, r5, r6, lr}
 80118ee:	4e0a      	ldr	r6, [pc, #40]	@ (8011918 <WS28xxMulti::~WS28xxMulti()+0x2c>)
 80118f0:	4d0a      	ldr	r5, [pc, #40]	@ (801191c <WS28xxMulti::~WS28xxMulti()+0x30>)
 80118f2:	4632      	mov	r2, r6
 80118f4:	4604      	mov	r4, r0
 80118f6:	4629      	mov	r1, r5
 80118f8:	23c6      	movs	r3, #198	@ 0xc6
 80118fa:	4809      	ldr	r0, [pc, #36]	@ (8011920 <WS28xxMulti::~WS28xxMulti()+0x34>)
 80118fc:	f008 fdfc 	bl	801a4f8 <printf>
 8011900:	4b08      	ldr	r3, [pc, #32]	@ (8011924 <WS28xxMulti::~WS28xxMulti()+0x38>)
 8011902:	2000      	movs	r0, #0
 8011904:	6018      	str	r0, [r3, #0]
 8011906:	4632      	mov	r2, r6
 8011908:	4629      	mov	r1, r5
 801190a:	23ca      	movs	r3, #202	@ 0xca
 801190c:	4806      	ldr	r0, [pc, #24]	@ (8011928 <WS28xxMulti::~WS28xxMulti()+0x3c>)
 801190e:	f008 fdf3 	bl	801a4f8 <printf>
 8011912:	4620      	mov	r0, r4
 8011914:	bd70      	pop	{r4, r5, r6, pc}
 8011916:	bf00      	nop
 8011918:	0801c888 	stmdaeq	r1, {r3, r7, fp, lr, pc}
 801191c:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8011920:	0801c738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, lr, pc}
 8011924:	2000dfb4 			@ <UNDEFINED> instruction: 0x2000dfb4
 8011928:	0801c780 	stmdaeq	r1, {r7, r8, r9, sl, lr, pc}

0801192c <WS28xxMulti::Setup(unsigned char, unsigned char)>:
 801192c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011930:	23ce      	movs	r3, #206	@ 0xce
 8011932:	b093      	sub	sp, #76	@ 0x4c
 8011934:	460d      	mov	r5, r1
 8011936:	4614      	mov	r4, r2
 8011938:	4983      	ldr	r1, [pc, #524]	@ (8011b48 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 801193a:	4a84      	ldr	r2, [pc, #528]	@ (8011b4c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 801193c:	4607      	mov	r7, r0
 801193e:	4884      	ldr	r0, [pc, #528]	@ (8011b50 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x224>)
 8011940:	f008 fdda 	bl	801a4f8 <printf>
 8011944:	4628      	mov	r0, r5
 8011946:	f009 f87d 	bl	801aa44 <__popcountsi2>
 801194a:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801194e:	fb05 f600 	mul.w	r6, r5, r0
 8011952:	4620      	mov	r0, r4
 8011954:	f009 f876 	bl	801aa44 <__popcountsi2>
 8011958:	fb00 f505 	mul.w	r5, r0, r5
 801195c:	08f6      	lsrs	r6, r6, #3
 801195e:	f240 182b 	movw	r8, #299	@ 0x12b
 8011962:	08ed      	lsrs	r5, r5, #3
 8011964:	23db      	movs	r3, #219	@ 0xdb
 8011966:	4a78      	ldr	r2, [pc, #480]	@ (8011b48 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 8011968:	4978      	ldr	r1, [pc, #480]	@ (8011b4c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 801196a:	487a      	ldr	r0, [pc, #488]	@ (8011b54 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x228>)
 801196c:	f8cd 8000 	str.w	r8, [sp]
 8011970:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8011974:	f008 fdc0 	bl	801a4f8 <printf>
 8011978:	f241 0001 	movw	r0, #4097	@ 0x1001
 801197c:	f007 f848 	bl	8018a10 <rcu_periph_clock_enable>
 8011980:	4875      	ldr	r0, [pc, #468]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8011982:	f007 f901 	bl	8018b88 <timer_deinit>
 8011986:	f04f 0900 	mov.w	r9, #0
 801198a:	4873      	ldr	r0, [pc, #460]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801198c:	f8cd 801c 	str.w	r8, [sp, #28]
 8011990:	a905      	add	r1, sp, #20
 8011992:	e9cd 9905 	strd	r9, r9, [sp, #20]
 8011996:	f007 f9a5 	bl	8018ce4 <timer_init>
 801199a:	486f      	ldr	r0, [pc, #444]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801199c:	2101      	movs	r1, #1
 801199e:	f007 fb3b 	bl	8019018 <timer_master_slave_mode_config>
 80119a2:	486d      	ldr	r0, [pc, #436]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 80119a4:	2130      	movs	r1, #48	@ 0x30
 80119a6:	f007 fb27 	bl	8018ff8 <timer_master_output_trigger_source_select>
 80119aa:	486b      	ldr	r0, [pc, #428]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 80119ac:	2210      	movs	r2, #16
 80119ae:	4649      	mov	r1, r9
 80119b0:	f007 fac0 	bl	8018f34 <timer_channel_output_mode_config>
 80119b4:	4868      	ldr	r0, [pc, #416]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 80119b6:	2210      	movs	r2, #16
 80119b8:	2102      	movs	r1, #2
 80119ba:	f007 fabb 	bl	8018f34 <timer_channel_output_mode_config>
 80119be:	4866      	ldr	r0, [pc, #408]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 80119c0:	2210      	movs	r2, #16
 80119c2:	2103      	movs	r1, #3
 80119c4:	f007 fab6 	bl	8018f34 <timer_channel_output_mode_config>
 80119c8:	4863      	ldr	r0, [pc, #396]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 80119ca:	2201      	movs	r2, #1
 80119cc:	4649      	mov	r1, r9
 80119ce:	f007 fad7 	bl	8018f80 <timer_channel_output_pulse_value_config>
 80119d2:	4861      	ldr	r0, [pc, #388]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 80119d4:	4632      	mov	r2, r6
 80119d6:	2102      	movs	r1, #2
 80119d8:	f007 fad2 	bl	8018f80 <timer_channel_output_pulse_value_config>
 80119dc:	462a      	mov	r2, r5
 80119de:	2103      	movs	r1, #3
 80119e0:	485d      	ldr	r0, [pc, #372]	@ (8011b58 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 80119e2:	f007 facd 	bl	8018f80 <timer_channel_output_pulse_value_config>
 80119e6:	f241 0002 	movw	r0, #4098	@ 0x1002
 80119ea:	f007 f811 	bl	8018a10 <rcu_periph_clock_enable>
 80119ee:	485b      	ldr	r0, [pc, #364]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80119f0:	f007 f8ca 	bl	8018b88 <timer_deinit>
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119f8:	4858      	ldr	r0, [pc, #352]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80119fa:	9307      	str	r3, [sp, #28]
 80119fc:	a905      	add	r1, sp, #20
 80119fe:	e9cd 9905 	strd	r9, r9, [sp, #20]
 8011a02:	f007 f96f 	bl	8018ce4 <timer_init>
 8011a06:	4855      	ldr	r0, [pc, #340]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8011a08:	2101      	movs	r1, #1
 8011a0a:	f007 fb05 	bl	8019018 <timer_master_slave_mode_config>
 8011a0e:	4853      	ldr	r0, [pc, #332]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8011a10:	2107      	movs	r1, #7
 8011a12:	f007 faf9 	bl	8019008 <timer_slave_mode_select>
 8011a16:	4851      	ldr	r0, [pc, #324]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8011a18:	2120      	movs	r1, #32
 8011a1a:	f007 fae5 	bl	8018fe8 <timer_input_trigger_source_select>
 8011a1e:	484f      	ldr	r0, [pc, #316]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8011a20:	2210      	movs	r2, #16
 8011a22:	4649      	mov	r1, r9
 8011a24:	f007 fa86 	bl	8018f34 <timer_channel_output_mode_config>
 8011a28:	683a      	ldr	r2, [r7, #0]
 8011a2a:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8011a2e:	3201      	adds	r2, #1
 8011a30:	4282      	cmp	r2, r0
 8011a32:	d87e      	bhi.n	8011b32 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x206>
 8011a34:	b292      	uxth	r2, r2
 8011a36:	4849      	ldr	r0, [pc, #292]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8011a38:	2100      	movs	r1, #0
 8011a3a:	f007 faa1 	bl	8018f80 <timer_channel_output_pulse_value_config>
 8011a3e:	4847      	ldr	r0, [pc, #284]	@ (8011b5c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8011a40:	2102      	movs	r1, #2
 8011a42:	f007 faf8 	bl	8019036 <timer_interrupt_enable>
 8011a46:	4946      	ldr	r1, [pc, #280]	@ (8011b60 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x234>)
 8011a48:	2400      	movs	r4, #0
 8011a4a:	f881 431e 	strb.w	r4, [r1, #798]	@ 0x31e
 8011a4e:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 8011a52:	600f      	str	r7, [r1, #0]
 8011a54:	f640 4015 	movw	r0, #3093	@ 0xc15
 8011a58:	f006 ffda 	bl	8018a10 <rcu_periph_clock_enable>
 8011a5c:	2104      	movs	r1, #4
 8011a5e:	4841      	ldr	r0, [pc, #260]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011a60:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 8011b78 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x24c>
 8011a64:	4e40      	ldr	r6, [pc, #256]	@ (8011b68 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x23c>)
 8011a66:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8011b7c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x250>
 8011a6a:	f006 fbb5 	bl	80181d8 <dma_deinit>
 8011a6e:	a809      	add	r0, sp, #36	@ 0x24
 8011a70:	f006 fbde 	bl	8018230 <dma_single_data_para_struct_init>
 8011a74:	2501      	movs	r5, #1
 8011a76:	2740      	movs	r7, #64	@ 0x40
 8011a78:	aa09      	add	r2, sp, #36	@ 0x24
 8011a7a:	9609      	str	r6, [sp, #36]	@ 0x24
 8011a7c:	4839      	ldr	r0, [pc, #228]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011a7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011a80:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8011a84:	2104      	movs	r1, #4
 8011a86:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
 8011a8a:	950a      	str	r5, [sp, #40]	@ 0x28
 8011a8c:	9411      	str	r4, [sp, #68]	@ 0x44
 8011a8e:	960d      	str	r6, [sp, #52]	@ 0x34
 8011a90:	f006 fbda 	bl	8018248 <dma_single_data_mode_init>
 8011a94:	4833      	ldr	r0, [pc, #204]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011a96:	2104      	movs	r1, #4
 8011a98:	f006 fc5c 	bl	8018354 <dma_circulation_disable>
 8011a9c:	2205      	movs	r2, #5
 8011a9e:	4831      	ldr	r0, [pc, #196]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011aa0:	2104      	movs	r1, #4
 8011aa2:	f006 fc5f 	bl	8018364 <dma_channel_subperipheral_select>
 8011aa6:	2107      	movs	r1, #7
 8011aa8:	482e      	ldr	r0, [pc, #184]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011aaa:	f006 fb95 	bl	80181d8 <dma_deinit>
 8011aae:	a809      	add	r0, sp, #36	@ 0x24
 8011ab0:	f006 fbbe 	bl	8018230 <dma_single_data_para_struct_init>
 8011ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8011b6c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x240>)
 8011ab6:	482b      	ldr	r0, [pc, #172]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011aba:	aa09      	add	r2, sp, #36	@ 0x24
 8011abc:	2107      	movs	r1, #7
 8011abe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011ac0:	940c      	str	r4, [sp, #48]	@ 0x30
 8011ac2:	950a      	str	r5, [sp, #40]	@ 0x28
 8011ac4:	960d      	str	r6, [sp, #52]	@ 0x34
 8011ac6:	9411      	str	r4, [sp, #68]	@ 0x44
 8011ac8:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8011acc:	f006 fbbc 	bl	8018248 <dma_single_data_mode_init>
 8011ad0:	4824      	ldr	r0, [pc, #144]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011ad2:	2107      	movs	r1, #7
 8011ad4:	f006 fc3e 	bl	8018354 <dma_circulation_disable>
 8011ad8:	2205      	movs	r2, #5
 8011ada:	4822      	ldr	r0, [pc, #136]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011adc:	2107      	movs	r1, #7
 8011ade:	f006 fc41 	bl	8018364 <dma_channel_subperipheral_select>
 8011ae2:	2102      	movs	r1, #2
 8011ae4:	481f      	ldr	r0, [pc, #124]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011ae6:	f006 fb77 	bl	80181d8 <dma_deinit>
 8011aea:	a809      	add	r0, sp, #36	@ 0x24
 8011aec:	f006 fba0 	bl	8018230 <dma_single_data_para_struct_init>
 8011af0:	aa09      	add	r2, sp, #36	@ 0x24
 8011af2:	481c      	ldr	r0, [pc, #112]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011af4:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011af6:	2102      	movs	r1, #2
 8011af8:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8011afc:	950c      	str	r5, [sp, #48]	@ 0x30
 8011afe:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8011b02:	950a      	str	r5, [sp, #40]	@ 0x28
 8011b04:	960d      	str	r6, [sp, #52]	@ 0x34
 8011b06:	9411      	str	r4, [sp, #68]	@ 0x44
 8011b08:	f006 fb9e 	bl	8018248 <dma_single_data_mode_init>
 8011b0c:	4815      	ldr	r0, [pc, #84]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011b0e:	2102      	movs	r1, #2
 8011b10:	f006 fc20 	bl	8018354 <dma_circulation_disable>
 8011b14:	4813      	ldr	r0, [pc, #76]	@ (8011b64 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8011b16:	2205      	movs	r2, #5
 8011b18:	2102      	movs	r1, #2
 8011b1a:	f006 fc23 	bl	8018364 <dma_channel_subperipheral_select>
 8011b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8011b4c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 8011b20:	4909      	ldr	r1, [pc, #36]	@ (8011b48 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 8011b22:	4813      	ldr	r0, [pc, #76]	@ (8011b70 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x244>)
 8011b24:	f240 137b 	movw	r3, #379	@ 0x17b
 8011b28:	f008 fce6 	bl	801a4f8 <printf>
 8011b2c:	b013      	add	sp, #76	@ 0x4c
 8011b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b32:	4a06      	ldr	r2, [pc, #24]	@ (8011b4c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 8011b34:	4b0f      	ldr	r3, [pc, #60]	@ (8011b74 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x248>)
 8011b36:	4804      	ldr	r0, [pc, #16]	@ (8011b48 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 8011b38:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8011b3c:	f008 fdbc 	bl	801a6b8 <__assert_func>
 8011b40:	683a      	ldr	r2, [r7, #0]
 8011b42:	3201      	adds	r2, #1
 8011b44:	e776      	b.n	8011a34 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x108>
 8011b46:	bf00      	nop
 8011b48:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8011b4c:	0801c8b8 	stmdaeq	r1, {r3, r4, r5, r7, fp, lr, pc}
 8011b50:	0801c738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, lr, pc}
 8011b54:	0801c8c0 	stmdaeq	r1, {r6, r7, fp, lr, pc}
 8011b58:	40000400 	andmi	r0, r0, r0, lsl #8
 8011b5c:	40000800 	andmi	r0, r0, r0, lsl #16
 8011b60:	e000e100 	and	lr, r0, r0, lsl #2
 8011b64:	40026000 	andmi	r6, r2, r0
 8011b68:	40020818 	andmi	r0, r2, r8, lsl r8
 8011b6c:	20020000 	andcs	r0, r2, r0
 8011b70:	0801c780 	stmdaeq	r1, {r7, r8, r9, sl, lr, pc}
 8011b74:	0801c8fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, fp, lr, pc}
 8011b78:	0801ee78 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, fp, sp, lr, pc}
 8011b7c:	40020828 	andmi	r0, r2, r8, lsr #16

08011b80 <WS28xxMulti::Update()>:
 8011b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b82:	4c6b      	ldr	r4, [pc, #428]	@ (8011d30 <WS28xxMulti::Update()+0x1b0>)
 8011b84:	7823      	ldrb	r3, [r4, #0]
 8011b86:	4605      	mov	r5, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	f040 80c0 	bne.w	8011d0e <WS28xxMulti::Update()+0x18e>
 8011b8e:	4a69      	ldr	r2, [pc, #420]	@ (8011d34 <WS28xxMulti::Update()+0x1b4>)
 8011b90:	6828      	ldr	r0, [r5, #0]
 8011b92:	f8d2 3410 	ldr.w	r3, [r2, #1040]	@ 0x410
 8011b96:	4f68      	ldr	r7, [pc, #416]	@ (8011d38 <WS28xxMulti::Update()+0x1b8>)
 8011b98:	0841      	lsrs	r1, r0, #1
 8011b9a:	f023 0001 	bic.w	r0, r3, #1
 8011b9e:	f8c2 0410 	str.w	r0, [r2, #1040]	@ 0x410
 8011ba2:	f040 0301 	orr.w	r3, r0, #1
 8011ba6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8011baa:	f5a7 4600 	sub.w	r6, r7, #32768	@ 0x8000
 8011bae:	f040 003d 	orr.w	r0, r0, #61	@ 0x3d
 8011bb2:	f8c2 0408 	str.w	r0, [r2, #1032]	@ 0x408
 8011bb6:	f8c2 641c 	str.w	r6, [r2, #1052]	@ 0x41c
 8011bba:	f8c2 7418 	str.w	r7, [r2, #1048]	@ 0x418
 8011bbe:	f8c2 1414 	str.w	r1, [r2, #1044]	@ 0x414
 8011bc2:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
 8011bc6:	f8d2 7414 	ldr.w	r7, [r2, #1044]	@ 0x414
 8011bca:	2f00      	cmp	r7, #0
 8011bcc:	d1fb      	bne.n	8011bc6 <WS28xxMulti::Update()+0x46>
 8011bce:	495b      	ldr	r1, [pc, #364]	@ (8011d3c <WS28xxMulti::Update()+0x1bc>)
 8011bd0:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8011bd4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011bd8:	2301      	movs	r3, #1
 8011bda:	628a      	str	r2, [r1, #40]	@ 0x28
 8011bdc:	7023      	strb	r3, [r4, #0]
 8011bde:	f8dc 4800 	ldr.w	r4, [ip, #2048]	@ 0x800
 8011be2:	f024 0001 	bic.w	r0, r4, #1
 8011be6:	f8cc 0800 	str.w	r0, [ip, #2048]	@ 0x800
 8011bea:	f8cc 7824 	str.w	r7, [ip, #2084]	@ 0x824
 8011bee:	f8dc 1400 	ldr.w	r1, [ip, #1024]	@ 0x400
 8011bf2:	4c53      	ldr	r4, [pc, #332]	@ (8011d40 <WS28xxMulti::Update()+0x1c0>)
 8011bf4:	f021 0201 	bic.w	r2, r1, #1
 8011bf8:	f8cc 2400 	str.w	r2, [ip, #1024]	@ 0x400
 8011bfc:	f8cc 7424 	str.w	r7, [ip, #1060]	@ 0x424
 8011c00:	6827      	ldr	r7, [r4, #0]
 8011c02:	2f00      	cmp	r7, #0
 8011c04:	f000 808b 	beq.w	8011d1e <WS28xxMulti::Update()+0x19e>
 8011c08:	7d3b      	ldrb	r3, [r7, #20]
 8011c0a:	4c4a      	ldr	r4, [pc, #296]	@ (8011d34 <WS28xxMulti::Update()+0x1b4>)
 8011c0c:	4f4d      	ldr	r7, [pc, #308]	@ (8011d44 <WS28xxMulti::Update()+0x1c4>)
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d053      	beq.n	8011cba <WS28xxMulti::Update()+0x13a>
 8011c12:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8011c14:	f020 0101 	bic.w	r1, r0, #1
 8011c18:	6721      	str	r1, [r4, #112]	@ 0x70
 8011c1a:	2220      	movs	r2, #32
 8011c1c:	2104      	movs	r1, #4
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f006 fbc5 	bl	80183ae <dma_interrupt_flag_clear>
 8011c24:	67e7      	str	r7, [r4, #124]	@ 0x7c
 8011c26:	882b      	ldrh	r3, [r5, #0]
 8011c28:	6763      	str	r3, [r4, #116]	@ 0x74
 8011c2a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011c2c:	f042 0001 	orr.w	r0, r2, #1
 8011c30:	6720      	str	r0, [r4, #112]	@ 0x70
 8011c32:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8011c36:	f021 0301 	bic.w	r3, r1, #1
 8011c3a:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8011c3e:	2220      	movs	r2, #32
 8011c40:	2107      	movs	r1, #7
 8011c42:	4620      	mov	r0, r4
 8011c44:	f006 fbb3 	bl	80183ae <dma_interrupt_flag_clear>
 8011c48:	f8c4 60c4 	str.w	r6, [r4, #196]	@ 0xc4
 8011c4c:	882e      	ldrh	r6, [r5, #0]
 8011c4e:	f8c4 60bc 	str.w	r6, [r4, #188]	@ 0xbc
 8011c52:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8011c56:	f040 0101 	orr.w	r1, r0, #1
 8011c5a:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 8011c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c60:	f023 0601 	bic.w	r6, r3, #1
 8011c64:	2220      	movs	r2, #32
 8011c66:	2102      	movs	r1, #2
 8011c68:	4620      	mov	r0, r4
 8011c6a:	6426      	str	r6, [r4, #64]	@ 0x40
 8011c6c:	f006 fb9f 	bl	80183ae <dma_interrupt_flag_clear>
 8011c70:	64e7      	str	r7, [r4, #76]	@ 0x4c
 8011c72:	882f      	ldrh	r7, [r5, #0]
 8011c74:	6467      	str	r7, [r4, #68]	@ 0x44
 8011c76:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8011c78:	4833      	ldr	r0, [pc, #204]	@ (8011d48 <WS28xxMulti::Update()+0x1c8>)
 8011c7a:	f045 0201 	orr.w	r2, r5, #1
 8011c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011c82:	6422      	str	r2, [r4, #64]	@ 0x40
 8011c84:	f007 f869 	bl	8018d5a <timer_dma_enable>
 8011c88:	482f      	ldr	r0, [pc, #188]	@ (8011d48 <WS28xxMulti::Update()+0x1c8>)
 8011c8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011c8e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8011c92:	f007 f862 	bl	8018d5a <timer_dma_enable>
 8011c96:	482c      	ldr	r0, [pc, #176]	@ (8011d48 <WS28xxMulti::Update()+0x1c8>)
 8011c98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011c9c:	f007 f85d 	bl	8018d5a <timer_dma_enable>
 8011ca0:	f8d4 0800 	ldr.w	r0, [r4, #2048]	@ 0x800
 8011ca4:	f040 0101 	orr.w	r1, r0, #1
 8011ca8:	f8c4 1800 	str.w	r1, [r4, #2048]	@ 0x800
 8011cac:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 8011cb0:	f043 0601 	orr.w	r6, r3, #1
 8011cb4:	f8c4 6400 	str.w	r6, [r4, #1024]	@ 0x400
 8011cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cba:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8011cbe:	f020 0101 	bic.w	r1, r0, #1
 8011cc2:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 8011cc6:	2220      	movs	r2, #32
 8011cc8:	2107      	movs	r1, #7
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f006 fb6f 	bl	80183ae <dma_interrupt_flag_clear>
 8011cd0:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
 8011cd4:	882b      	ldrh	r3, [r5, #0]
 8011cd6:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8011cda:	f8d4 70b8 	ldr.w	r7, [r4, #184]	@ 0xb8
 8011cde:	f047 0001 	orr.w	r0, r7, #1
 8011ce2:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 8011ce6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8011ce8:	f021 0301 	bic.w	r3, r1, #1
 8011cec:	2220      	movs	r2, #32
 8011cee:	2102      	movs	r1, #2
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	6423      	str	r3, [r4, #64]	@ 0x40
 8011cf4:	f006 fb5b 	bl	80183ae <dma_interrupt_flag_clear>
 8011cf8:	64e6      	str	r6, [r4, #76]	@ 0x4c
 8011cfa:	882d      	ldrh	r5, [r5, #0]
 8011cfc:	6465      	str	r5, [r4, #68]	@ 0x44
 8011cfe:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8011d00:	4811      	ldr	r0, [pc, #68]	@ (8011d48 <WS28xxMulti::Update()+0x1c8>)
 8011d02:	f046 0201 	orr.w	r2, r6, #1
 8011d06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011d0a:	6422      	str	r2, [r4, #64]	@ 0x40
 8011d0c:	e7bf      	b.n	8011c8e <WS28xxMulti::Update()+0x10e>
 8011d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8011d4c <WS28xxMulti::Update()+0x1cc>)
 8011d10:	4a0f      	ldr	r2, [pc, #60]	@ (8011d50 <WS28xxMulti::Update()+0x1d0>)
 8011d12:	4810      	ldr	r0, [pc, #64]	@ (8011d54 <WS28xxMulti::Update()+0x1d4>)
 8011d14:	f240 2167 	movw	r1, #615	@ 0x267
 8011d18:	f008 fcce 	bl	801a6b8 <__assert_func>
 8011d1c:	e737      	b.n	8011b8e <WS28xxMulti::Update()+0xe>
 8011d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8011d58 <WS28xxMulti::Update()+0x1d8>)
 8011d20:	4a0e      	ldr	r2, [pc, #56]	@ (8011d5c <WS28xxMulti::Update()+0x1dc>)
 8011d22:	480f      	ldr	r0, [pc, #60]	@ (8011d60 <WS28xxMulti::Update()+0x1e0>)
 8011d24:	f240 110d 	movw	r1, #269	@ 0x10d
 8011d28:	f008 fcc6 	bl	801a6b8 <__assert_func>
 8011d2c:	6827      	ldr	r7, [r4, #0]
 8011d2e:	e76b      	b.n	8011c08 <WS28xxMulti::Update()+0x88>
 8011d30:	2000dfb8 			@ <UNDEFINED> instruction: 0x2000dfb8
 8011d34:	40026000 	andmi	r6, r2, r0
 8011d38:	20028000 	andcs	r8, r2, r0
 8011d3c:	40020000 	andmi	r0, r2, r0
 8011d40:	2000007c 	andcs	r0, r0, ip, ror r0
 8011d44:	0801ee78 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, fp, sp, lr, pc}
 8011d48:	40000400 	andmi	r0, r0, r0, lsl #8
 8011d4c:	0801c978 	stmdaeq	r1, {r3, r4, r5, r6, r8, fp, lr, pc}
 8011d50:	0801c988 	stmdaeq	r1, {r3, r7, r8, fp, lr, pc}
 8011d54:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8011d58:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 8011d5c:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 8011d60:	0801c91c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr, pc}

08011d64 <WS28xxMulti::IsUpdating()>:
 8011d64:	f3bf 8f5f 	dmb	sy
 8011d68:	4b01      	ldr	r3, [pc, #4]	@ (8011d70 <WS28xxMulti::IsUpdating()+0xc>)
 8011d6a:	7818      	ldrb	r0, [r3, #0]
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	2000dfb8 			@ <UNDEFINED> instruction: 0x2000dfb8

08011d74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>:
 8011d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d78:	2907      	cmp	r1, #7
 8011d7a:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8011d7e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8011d82:	4688      	mov	r8, r1
 8011d84:	4617      	mov	r7, r2
 8011d86:	461d      	mov	r5, r3
 8011d88:	f200 80f1 	bhi.w	8011f6e <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x1fa>
 8011d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8011f80 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x20c>)
 8011d8e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8011d92:	f108 0106 	add.w	r1, r8, #6
 8011d96:	eb02 1803 	add.w	r8, r2, r3, lsl #4
 8011d9a:	fa5f fc81 	uxtb.w	ip, r1
 8011d9e:	f108 7788 	add.w	r7, r8, #17825792	@ 0x1100000
 8011da2:	eb0c 03c7 	add.w	r3, ip, r7, lsl #3
 8011da6:	00f9      	lsls	r1, r7, #3
 8011da8:	009a      	lsls	r2, r3, #2
 8011daa:	062f      	lsls	r7, r5, #24
 8011dac:	bf4c      	ite	mi
 8011dae:	2000      	movmi	r0, #0
 8011db0:	2001      	movpl	r0, #1
 8011db2:	6010      	str	r0, [r2, #0]
 8011db4:	f101 0080 	add.w	r0, r1, #128	@ 0x80
 8011db8:	4460      	add	r0, ip
 8011dba:	0632      	lsls	r2, r6, #24
 8011dbc:	ea4f 0780 	mov.w	r7, r0, lsl #2
 8011dc0:	f501 7380 	add.w	r3, r1, #256	@ 0x100
 8011dc4:	bf4c      	ite	mi
 8011dc6:	2200      	movmi	r2, #0
 8011dc8:	2201      	movpl	r2, #1
 8011dca:	4463      	add	r3, ip
 8011dcc:	0098      	lsls	r0, r3, #2
 8011dce:	603a      	str	r2, [r7, #0]
 8011dd0:	0627      	lsls	r7, r4, #24
 8011dd2:	f101 0710 	add.w	r7, r1, #16
 8011dd6:	bf4c      	ite	mi
 8011dd8:	2200      	movmi	r2, #0
 8011dda:	2201      	movpl	r2, #1
 8011ddc:	4467      	add	r7, ip
 8011dde:	6002      	str	r2, [r0, #0]
 8011de0:	f101 0390 	add.w	r3, r1, #144	@ 0x90
 8011de4:	0668      	lsls	r0, r5, #25
 8011de6:	ea4f 0287 	mov.w	r2, r7, lsl #2
 8011dea:	bf4c      	ite	mi
 8011dec:	2000      	movmi	r0, #0
 8011dee:	2001      	movpl	r0, #1
 8011df0:	4463      	add	r3, ip
 8011df2:	6010      	str	r0, [r2, #0]
 8011df4:	0677      	lsls	r7, r6, #25
 8011df6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011dfa:	f501 7788 	add.w	r7, r1, #272	@ 0x110
 8011dfe:	bf4c      	ite	mi
 8011e00:	2000      	movmi	r0, #0
 8011e02:	2001      	movpl	r0, #1
 8011e04:	4467      	add	r7, ip
 8011e06:	6010      	str	r0, [r2, #0]
 8011e08:	00bb      	lsls	r3, r7, #2
 8011e0a:	0660      	lsls	r0, r4, #25
 8011e0c:	f101 0220 	add.w	r2, r1, #32
 8011e10:	bf4c      	ite	mi
 8011e12:	2000      	movmi	r0, #0
 8011e14:	2001      	movpl	r0, #1
 8011e16:	4462      	add	r2, ip
 8011e18:	6018      	str	r0, [r3, #0]
 8011e1a:	06af      	lsls	r7, r5, #26
 8011e1c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8011e20:	f101 07a0 	add.w	r7, r1, #160	@ 0xa0
 8011e24:	bf4c      	ite	mi
 8011e26:	2000      	movmi	r0, #0
 8011e28:	2001      	movpl	r0, #1
 8011e2a:	4467      	add	r7, ip
 8011e2c:	6018      	str	r0, [r3, #0]
 8011e2e:	00ba      	lsls	r2, r7, #2
 8011e30:	06b0      	lsls	r0, r6, #26
 8011e32:	f501 7390 	add.w	r3, r1, #288	@ 0x120
 8011e36:	bf4c      	ite	mi
 8011e38:	2000      	movmi	r0, #0
 8011e3a:	2001      	movpl	r0, #1
 8011e3c:	4463      	add	r3, ip
 8011e3e:	6010      	str	r0, [r2, #0]
 8011e40:	06a7      	lsls	r7, r4, #26
 8011e42:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011e46:	f101 0730 	add.w	r7, r1, #48	@ 0x30
 8011e4a:	bf4c      	ite	mi
 8011e4c:	2000      	movmi	r0, #0
 8011e4e:	2001      	movpl	r0, #1
 8011e50:	4467      	add	r7, ip
 8011e52:	6010      	str	r0, [r2, #0]
 8011e54:	00bb      	lsls	r3, r7, #2
 8011e56:	06e8      	lsls	r0, r5, #27
 8011e58:	f101 02b0 	add.w	r2, r1, #176	@ 0xb0
 8011e5c:	bf4c      	ite	mi
 8011e5e:	2000      	movmi	r0, #0
 8011e60:	2001      	movpl	r0, #1
 8011e62:	4462      	add	r2, ip
 8011e64:	6018      	str	r0, [r3, #0]
 8011e66:	06f7      	lsls	r7, r6, #27
 8011e68:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8011e6c:	f501 7798 	add.w	r7, r1, #304	@ 0x130
 8011e70:	bf4c      	ite	mi
 8011e72:	2000      	movmi	r0, #0
 8011e74:	2001      	movpl	r0, #1
 8011e76:	4467      	add	r7, ip
 8011e78:	6018      	str	r0, [r3, #0]
 8011e7a:	00ba      	lsls	r2, r7, #2
 8011e7c:	06e0      	lsls	r0, r4, #27
 8011e7e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8011e82:	bf4c      	ite	mi
 8011e84:	2000      	movmi	r0, #0
 8011e86:	2001      	movpl	r0, #1
 8011e88:	4463      	add	r3, ip
 8011e8a:	6010      	str	r0, [r2, #0]
 8011e8c:	072f      	lsls	r7, r5, #28
 8011e8e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011e92:	f101 07c0 	add.w	r7, r1, #192	@ 0xc0
 8011e96:	bf4c      	ite	mi
 8011e98:	2000      	movmi	r0, #0
 8011e9a:	2001      	movpl	r0, #1
 8011e9c:	4467      	add	r7, ip
 8011e9e:	6010      	str	r0, [r2, #0]
 8011ea0:	00bb      	lsls	r3, r7, #2
 8011ea2:	0730      	lsls	r0, r6, #28
 8011ea4:	f501 72a0 	add.w	r2, r1, #320	@ 0x140
 8011ea8:	bf4c      	ite	mi
 8011eaa:	2000      	movmi	r0, #0
 8011eac:	2001      	movpl	r0, #1
 8011eae:	4462      	add	r2, ip
 8011eb0:	6018      	str	r0, [r3, #0]
 8011eb2:	0727      	lsls	r7, r4, #28
 8011eb4:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8011eb8:	f101 0750 	add.w	r7, r1, #80	@ 0x50
 8011ebc:	bf4c      	ite	mi
 8011ebe:	2000      	movmi	r0, #0
 8011ec0:	2001      	movpl	r0, #1
 8011ec2:	4467      	add	r7, ip
 8011ec4:	6018      	str	r0, [r3, #0]
 8011ec6:	00ba      	lsls	r2, r7, #2
 8011ec8:	0768      	lsls	r0, r5, #29
 8011eca:	f101 03d0 	add.w	r3, r1, #208	@ 0xd0
 8011ece:	bf4c      	ite	mi
 8011ed0:	2000      	movmi	r0, #0
 8011ed2:	2001      	movpl	r0, #1
 8011ed4:	4463      	add	r3, ip
 8011ed6:	6010      	str	r0, [r2, #0]
 8011ed8:	0777      	lsls	r7, r6, #29
 8011eda:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011ede:	f501 77a8 	add.w	r7, r1, #336	@ 0x150
 8011ee2:	bf4c      	ite	mi
 8011ee4:	2000      	movmi	r0, #0
 8011ee6:	2001      	movpl	r0, #1
 8011ee8:	4467      	add	r7, ip
 8011eea:	6010      	str	r0, [r2, #0]
 8011eec:	00bb      	lsls	r3, r7, #2
 8011eee:	0760      	lsls	r0, r4, #29
 8011ef0:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8011ef4:	bf4c      	ite	mi
 8011ef6:	2000      	movmi	r0, #0
 8011ef8:	2001      	movpl	r0, #1
 8011efa:	4462      	add	r2, ip
 8011efc:	6018      	str	r0, [r3, #0]
 8011efe:	07af      	lsls	r7, r5, #30
 8011f00:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8011f04:	f101 07e0 	add.w	r7, r1, #224	@ 0xe0
 8011f08:	bf4c      	ite	mi
 8011f0a:	2000      	movmi	r0, #0
 8011f0c:	2001      	movpl	r0, #1
 8011f0e:	4467      	add	r7, ip
 8011f10:	6018      	str	r0, [r3, #0]
 8011f12:	00ba      	lsls	r2, r7, #2
 8011f14:	07b0      	lsls	r0, r6, #30
 8011f16:	f501 73b0 	add.w	r3, r1, #352	@ 0x160
 8011f1a:	bf4c      	ite	mi
 8011f1c:	2000      	movmi	r0, #0
 8011f1e:	2001      	movpl	r0, #1
 8011f20:	4463      	add	r3, ip
 8011f22:	07a7      	lsls	r7, r4, #30
 8011f24:	f101 0770 	add.w	r7, r1, #112	@ 0x70
 8011f28:	6010      	str	r0, [r2, #0]
 8011f2a:	4467      	add	r7, ip
 8011f2c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011f30:	bf4c      	ite	mi
 8011f32:	2000      	movmi	r0, #0
 8011f34:	2001      	movpl	r0, #1
 8011f36:	00bb      	lsls	r3, r7, #2
 8011f38:	07ed      	lsls	r5, r5, #31
 8011f3a:	f101 05f0 	add.w	r5, r1, #240	@ 0xf0
 8011f3e:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 8011f42:	6010      	str	r0, [r2, #0]
 8011f44:	4465      	add	r5, ip
 8011f46:	bf54      	ite	pl
 8011f48:	2001      	movpl	r0, #1
 8011f4a:	2000      	movmi	r0, #0
 8011f4c:	4461      	add	r1, ip
 8011f4e:	07f6      	lsls	r6, r6, #31
 8011f50:	6018      	str	r0, [r3, #0]
 8011f52:	bf54      	ite	pl
 8011f54:	2601      	movpl	r6, #1
 8011f56:	2600      	movmi	r6, #0
 8011f58:	00aa      	lsls	r2, r5, #2
 8011f5a:	07e4      	lsls	r4, r4, #31
 8011f5c:	ea4f 0081 	mov.w	r0, r1, lsl #2
 8011f60:	bf54      	ite	pl
 8011f62:	2401      	movpl	r4, #1
 8011f64:	2400      	movmi	r4, #0
 8011f66:	6016      	str	r6, [r2, #0]
 8011f68:	6004      	str	r4, [r0, #0]
 8011f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6e:	4b05      	ldr	r3, [pc, #20]	@ (8011f84 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x210>)
 8011f70:	4a05      	ldr	r2, [pc, #20]	@ (8011f88 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x214>)
 8011f72:	4806      	ldr	r0, [pc, #24]	@ (8011f8c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x218>)
 8011f74:	f240 3126 	movw	r1, #806	@ 0x326
 8011f78:	f008 fb9e 	bl	801a6b8 <__assert_func>
 8011f7c:	e706      	b.n	8011d8c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x18>
 8011f7e:	bf00      	nop
 8011f80:	20028000 	andcs	r8, r2, r0
 8011f84:	0801c990 	stmdaeq	r1, {r4, r7, r8, fp, lr, pc}
 8011f88:	0801c9b0 	stmdaeq	r1, {r4, r5, r7, r8, fp, lr, pc}
 8011f8c:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}

08011f90 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>:
 8011f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f94:	290f      	cmp	r1, #15
 8011f96:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011f9a:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 8011f9e:	4688      	mov	r8, r1
 8011fa0:	4681      	mov	r9, r0
 8011fa2:	4615      	mov	r5, r2
 8011fa4:	461f      	mov	r7, r3
 8011fa6:	f200 80f8 	bhi.w	801219a <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x20a>
 8011faa:	f8d9 3000 	ldr.w	r3, [r9]
 8011fae:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 8011fb2:	f080 80ff 	bcs.w	80121b4 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x224>
 8011fb6:	4a83      	ldr	r2, [pc, #524]	@ (80121c4 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x234>)
 8011fb8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8011fbc:	f108 0106 	add.w	r1, r8, #6
 8011fc0:	eb02 1800 	add.w	r8, r2, r0, lsl #4
 8011fc4:	fa5f fc81 	uxtb.w	ip, r1
 8011fc8:	f108 7588 	add.w	r5, r8, #17825792	@ 0x1100000
 8011fcc:	00e9      	lsls	r1, r5, #3
 8011fce:	eb0c 03c5 	add.w	r3, ip, r5, lsl #3
 8011fd2:	0638      	lsls	r0, r7, #24
 8011fd4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011fd8:	f101 0580 	add.w	r5, r1, #128	@ 0x80
 8011fdc:	bf54      	ite	pl
 8011fde:	2000      	movpl	r0, #0
 8011fe0:	2001      	movmi	r0, #1
 8011fe2:	4465      	add	r5, ip
 8011fe4:	6010      	str	r0, [r2, #0]
 8011fe6:	00ab      	lsls	r3, r5, #2
 8011fe8:	f501 7280 	add.w	r2, r1, #256	@ 0x100
 8011fec:	0635      	lsls	r5, r6, #24
 8011fee:	bf54      	ite	pl
 8011ff0:	2000      	movpl	r0, #0
 8011ff2:	2001      	movmi	r0, #1
 8011ff4:	4462      	add	r2, ip
 8011ff6:	6018      	str	r0, [r3, #0]
 8011ff8:	0095      	lsls	r5, r2, #2
 8011ffa:	0620      	lsls	r0, r4, #24
 8011ffc:	f101 0310 	add.w	r3, r1, #16
 8012000:	bf54      	ite	pl
 8012002:	2000      	movpl	r0, #0
 8012004:	2001      	movmi	r0, #1
 8012006:	4463      	add	r3, ip
 8012008:	6028      	str	r0, [r5, #0]
 801200a:	009a      	lsls	r2, r3, #2
 801200c:	f017 0540 	ands.w	r5, r7, #64	@ 0x40
 8012010:	f101 0090 	add.w	r0, r1, #144	@ 0x90
 8012014:	bf18      	it	ne
 8012016:	2501      	movne	r5, #1
 8012018:	4460      	add	r0, ip
 801201a:	6015      	str	r5, [r2, #0]
 801201c:	0083      	lsls	r3, r0, #2
 801201e:	f016 0240 	ands.w	r2, r6, #64	@ 0x40
 8012022:	f501 7588 	add.w	r5, r1, #272	@ 0x110
 8012026:	bf18      	it	ne
 8012028:	2201      	movne	r2, #1
 801202a:	4465      	add	r5, ip
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
 8012032:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8012036:	f101 0220 	add.w	r2, r1, #32
 801203a:	bf18      	it	ne
 801203c:	2001      	movne	r0, #1
 801203e:	4462      	add	r2, ip
 8012040:	6018      	str	r0, [r3, #0]
 8012042:	0095      	lsls	r5, r2, #2
 8012044:	f017 0320 	ands.w	r3, r7, #32
 8012048:	f101 00a0 	add.w	r0, r1, #160	@ 0xa0
 801204c:	bf18      	it	ne
 801204e:	2301      	movne	r3, #1
 8012050:	4460      	add	r0, ip
 8012052:	602b      	str	r3, [r5, #0]
 8012054:	0082      	lsls	r2, r0, #2
 8012056:	f016 0520 	ands.w	r5, r6, #32
 801205a:	f501 7390 	add.w	r3, r1, #288	@ 0x120
 801205e:	bf18      	it	ne
 8012060:	2501      	movne	r5, #1
 8012062:	4463      	add	r3, ip
 8012064:	6015      	str	r5, [r2, #0]
 8012066:	f014 0020 	ands.w	r0, r4, #32
 801206a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801206e:	f101 0530 	add.w	r5, r1, #48	@ 0x30
 8012072:	bf18      	it	ne
 8012074:	2001      	movne	r0, #1
 8012076:	4465      	add	r5, ip
 8012078:	6010      	str	r0, [r2, #0]
 801207a:	00ab      	lsls	r3, r5, #2
 801207c:	f017 0210 	ands.w	r2, r7, #16
 8012080:	f101 00b0 	add.w	r0, r1, #176	@ 0xb0
 8012084:	bf18      	it	ne
 8012086:	2201      	movne	r2, #1
 8012088:	4460      	add	r0, ip
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	0085      	lsls	r5, r0, #2
 801208e:	f016 0310 	ands.w	r3, r6, #16
 8012092:	f501 7298 	add.w	r2, r1, #304	@ 0x130
 8012096:	bf18      	it	ne
 8012098:	2301      	movne	r3, #1
 801209a:	4462      	add	r2, ip
 801209c:	602b      	str	r3, [r5, #0]
 801209e:	f014 0010 	ands.w	r0, r4, #16
 80120a2:	ea4f 0582 	mov.w	r5, r2, lsl #2
 80120a6:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80120aa:	bf18      	it	ne
 80120ac:	2001      	movne	r0, #1
 80120ae:	4463      	add	r3, ip
 80120b0:	6028      	str	r0, [r5, #0]
 80120b2:	009a      	lsls	r2, r3, #2
 80120b4:	f017 0508 	ands.w	r5, r7, #8
 80120b8:	f101 00c0 	add.w	r0, r1, #192	@ 0xc0
 80120bc:	bf18      	it	ne
 80120be:	2501      	movne	r5, #1
 80120c0:	4460      	add	r0, ip
 80120c2:	6015      	str	r5, [r2, #0]
 80120c4:	0083      	lsls	r3, r0, #2
 80120c6:	f016 0208 	ands.w	r2, r6, #8
 80120ca:	f501 75a0 	add.w	r5, r1, #320	@ 0x140
 80120ce:	bf18      	it	ne
 80120d0:	2201      	movne	r2, #1
 80120d2:	4465      	add	r5, ip
 80120d4:	601a      	str	r2, [r3, #0]
 80120d6:	f014 0008 	ands.w	r0, r4, #8
 80120da:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80120de:	f101 0250 	add.w	r2, r1, #80	@ 0x50
 80120e2:	bf18      	it	ne
 80120e4:	2001      	movne	r0, #1
 80120e6:	4462      	add	r2, ip
 80120e8:	6018      	str	r0, [r3, #0]
 80120ea:	0095      	lsls	r5, r2, #2
 80120ec:	f017 0304 	ands.w	r3, r7, #4
 80120f0:	f101 00d0 	add.w	r0, r1, #208	@ 0xd0
 80120f4:	bf18      	it	ne
 80120f6:	2301      	movne	r3, #1
 80120f8:	4460      	add	r0, ip
 80120fa:	602b      	str	r3, [r5, #0]
 80120fc:	0082      	lsls	r2, r0, #2
 80120fe:	f016 0504 	ands.w	r5, r6, #4
 8012102:	f501 73a8 	add.w	r3, r1, #336	@ 0x150
 8012106:	bf18      	it	ne
 8012108:	2501      	movne	r5, #1
 801210a:	4463      	add	r3, ip
 801210c:	6015      	str	r5, [r2, #0]
 801210e:	f014 0004 	ands.w	r0, r4, #4
 8012112:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012116:	f101 0560 	add.w	r5, r1, #96	@ 0x60
 801211a:	bf18      	it	ne
 801211c:	2001      	movne	r0, #1
 801211e:	4465      	add	r5, ip
 8012120:	6010      	str	r0, [r2, #0]
 8012122:	00ab      	lsls	r3, r5, #2
 8012124:	f017 0202 	ands.w	r2, r7, #2
 8012128:	f101 00e0 	add.w	r0, r1, #224	@ 0xe0
 801212c:	bf18      	it	ne
 801212e:	2201      	movne	r2, #1
 8012130:	4460      	add	r0, ip
 8012132:	601a      	str	r2, [r3, #0]
 8012134:	0085      	lsls	r5, r0, #2
 8012136:	f016 0302 	ands.w	r3, r6, #2
 801213a:	f501 72b0 	add.w	r2, r1, #352	@ 0x160
 801213e:	bf18      	it	ne
 8012140:	2301      	movne	r3, #1
 8012142:	4462      	add	r2, ip
 8012144:	602b      	str	r3, [r5, #0]
 8012146:	f014 0002 	ands.w	r0, r4, #2
 801214a:	ea4f 0582 	mov.w	r5, r2, lsl #2
 801214e:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 8012152:	4463      	add	r3, ip
 8012154:	bf18      	it	ne
 8012156:	2001      	movne	r0, #1
 8012158:	6028      	str	r0, [r5, #0]
 801215a:	009a      	lsls	r2, r3, #2
 801215c:	f017 0701 	ands.w	r7, r7, #1
 8012160:	f101 05f0 	add.w	r5, r1, #240	@ 0xf0
 8012164:	4465      	add	r5, ip
 8012166:	bf1c      	itt	ne
 8012168:	2301      	movne	r3, #1
 801216a:	6013      	strne	r3, [r2, #0]
 801216c:	ea4f 0085 	mov.w	r0, r5, lsl #2
 8012170:	bf08      	it	eq
 8012172:	6017      	streq	r7, [r2, #0]
 8012174:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 8012178:	f016 0601 	ands.w	r6, r6, #1
 801217c:	bf18      	it	ne
 801217e:	2501      	movne	r5, #1
 8012180:	4461      	add	r1, ip
 8012182:	bf14      	ite	ne
 8012184:	6005      	strne	r5, [r0, #0]
 8012186:	6006      	streq	r6, [r0, #0]
 8012188:	008b      	lsls	r3, r1, #2
 801218a:	f014 0401 	ands.w	r4, r4, #1
 801218e:	bf1a      	itte	ne
 8012190:	2501      	movne	r5, #1
 8012192:	601d      	strne	r5, [r3, #0]
 8012194:	601c      	streq	r4, [r3, #0]
 8012196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219a:	4b0b      	ldr	r3, [pc, #44]	@ (80121c8 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x238>)
 801219c:	4a0b      	ldr	r2, [pc, #44]	@ (80121cc <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x23c>)
 801219e:	480c      	ldr	r0, [pc, #48]	@ (80121d0 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x240>)
 80121a0:	f240 3143 	movw	r1, #835	@ 0x343
 80121a4:	f008 fa88 	bl	801a6b8 <__assert_func>
 80121a8:	f8d9 3000 	ldr.w	r3, [r9]
 80121ac:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 80121b0:	f4ff af01 	bcc.w	8011fb6 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x26>
 80121b4:	4b07      	ldr	r3, [pc, #28]	@ (80121d4 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x244>)
 80121b6:	4a05      	ldr	r2, [pc, #20]	@ (80121cc <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x23c>)
 80121b8:	4805      	ldr	r0, [pc, #20]	@ (80121d0 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x240>)
 80121ba:	f44f 7151 	mov.w	r1, #836	@ 0x344
 80121be:	f008 fa7b 	bl	801a6b8 <__assert_func>
 80121c2:	e6f8      	b.n	8011fb6 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x26>
 80121c4:	20020000 	andcs	r0, r2, r0
 80121c8:	0801c9c0 	stmdaeq	r1, {r6, r7, r8, fp, lr, pc}
 80121cc:	0801c9d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, lr, pc}
 80121d0:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 80121d4:	0801c9e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, lr, pc}

080121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>:
 80121d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121dc:	290f      	cmp	r1, #15
 80121de:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80121e2:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 80121e6:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80121ea:	460c      	mov	r4, r1
 80121ec:	4682      	mov	sl, r0
 80121ee:	4691      	mov	r9, r2
 80121f0:	461d      	mov	r5, r3
 80121f2:	f200 808a 	bhi.w	801230a <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
 80121f6:	f8da 3000 	ldr.w	r3, [sl]
 80121fa:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 80121fe:	f080 8091 	bcs.w	8012324 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x14c>
 8012202:	4a4c      	ldr	r2, [pc, #304]	@ (8012334 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 8012204:	3406      	adds	r4, #6
 8012206:	eb02 1189 	add.w	r1, r2, r9, lsl #6
 801220a:	b2e0      	uxtb	r0, r4
 801220c:	f101 7488 	add.w	r4, r1, #17825792	@ 0x1100000
 8012210:	3430      	adds	r4, #48	@ 0x30
 8012212:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8012216:	f10c 0080 	add.w	r0, ip, #128	@ 0x80
 801221a:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 801221e:	ebaa 098c 	sub.w	r9, sl, ip, lsl #2
 8012222:	4663      	mov	r3, ip
 8012224:	ea5f 6149 	movs.w	r1, r9, lsl #25
 8012228:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801222c:	f04f 0401 	mov.w	r4, #1
 8012230:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8012234:	d53d      	bpl.n	80122b2 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xda>
 8012236:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 801223a:	f015 0180 	ands.w	r1, r5, #128	@ 0x80
 801223e:	f5a2 6380 	sub.w	r3, r2, #1024	@ 0x400
 8012242:	bf0c      	ite	eq
 8012244:	f8cc 1000 	streq.w	r1, [ip]
 8012248:	f8cc 4000 	strne.w	r4, [ip]
 801224c:	f5a2 7900 	sub.w	r9, r2, #512	@ 0x200
 8012250:	f016 0080 	ands.w	r0, r6, #128	@ 0x80
 8012254:	bf0c      	ite	eq
 8012256:	6018      	streq	r0, [r3, #0]
 8012258:	601c      	strne	r4, [r3, #0]
 801225a:	f017 0180 	ands.w	r1, r7, #128	@ 0x80
 801225e:	bf0c      	ite	eq
 8012260:	f8c9 1000 	streq.w	r1, [r9]
 8012264:	f8c9 4000 	strne.w	r4, [r9]
 8012268:	f018 0380 	ands.w	r3, r8, #128	@ 0x80
 801226c:	bf0c      	ite	eq
 801226e:	6013      	streq	r3, [r2, #0]
 8012270:	6014      	strne	r4, [r2, #0]
 8012272:	2340      	movs	r3, #64	@ 0x40
 8012274:	3240      	adds	r2, #64	@ 0x40
 8012276:	e01a      	b.n	80122ae <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd6>
 8012278:	6014      	str	r4, [r2, #0]
 801227a:	f5a9 6c80 	sub.w	ip, r9, #1024	@ 0x400
 801227e:	ea11 0006 	ands.w	r0, r1, r6
 8012282:	f5a9 7300 	sub.w	r3, r9, #512	@ 0x200
 8012286:	bf0c      	ite	eq
 8012288:	f8cc 0000 	streq.w	r0, [ip]
 801228c:	f8cc 4000 	strne.w	r4, [ip]
 8012290:	ea11 0207 	ands.w	r2, r1, r7
 8012294:	bf0c      	ite	eq
 8012296:	601a      	streq	r2, [r3, #0]
 8012298:	601c      	strne	r4, [r3, #0]
 801229a:	ea11 0008 	ands.w	r0, r1, r8
 801229e:	bf0c      	ite	eq
 80122a0:	f8c9 0000 	streq.w	r0, [r9]
 80122a4:	f8c9 4000 	strne.w	r4, [r9]
 80122a8:	f109 0240 	add.w	r2, r9, #64	@ 0x40
 80122ac:	084b      	lsrs	r3, r1, #1
 80122ae:	4552      	cmp	r2, sl
 80122b0:	d029      	beq.n	8012306 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x12e>
 80122b2:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 80122b6:	ea13 0005 	ands.w	r0, r3, r5
 80122ba:	f5a2 6980 	sub.w	r9, r2, #1024	@ 0x400
 80122be:	bf0c      	ite	eq
 80122c0:	f8cc 0000 	streq.w	r0, [ip]
 80122c4:	f8cc 4000 	strne.w	r4, [ip]
 80122c8:	ea13 0106 	ands.w	r1, r3, r6
 80122cc:	f5a2 7c00 	sub.w	ip, r2, #512	@ 0x200
 80122d0:	bf0c      	ite	eq
 80122d2:	f8c9 1000 	streq.w	r1, [r9]
 80122d6:	f8c9 4000 	strne.w	r4, [r9]
 80122da:	ea13 0007 	ands.w	r0, r3, r7
 80122de:	bf14      	ite	ne
 80122e0:	f8cc 4000 	strne.w	r4, [ip]
 80122e4:	f8cc 0000 	streq.w	r0, [ip]
 80122e8:	ea13 0108 	ands.w	r1, r3, r8
 80122ec:	bf0c      	ite	eq
 80122ee:	6011      	streq	r1, [r2, #0]
 80122f0:	6014      	strne	r4, [r2, #0]
 80122f2:	0859      	lsrs	r1, r3, #1
 80122f4:	ea15 0353 	ands.w	r3, r5, r3, lsr #1
 80122f8:	f102 0940 	add.w	r9, r2, #64	@ 0x40
 80122fc:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 8012300:	d1ba      	bne.n	8012278 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa0>
 8012302:	6013      	str	r3, [r2, #0]
 8012304:	e7b9      	b.n	801227a <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
 8012306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801230a:	4b0b      	ldr	r3, [pc, #44]	@ (8012338 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 801230c:	4a0b      	ldr	r2, [pc, #44]	@ (801233c <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 801230e:	480c      	ldr	r0, [pc, #48]	@ (8012340 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>)
 8012310:	f240 3161 	movw	r1, #865	@ 0x361
 8012314:	f008 f9d0 	bl	801a6b8 <__assert_func>
 8012318:	f8da 3000 	ldr.w	r3, [sl]
 801231c:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 8012320:	f4ff af6f 	bcc.w	8012202 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 8012324:	4b07      	ldr	r3, [pc, #28]	@ (8012344 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>)
 8012326:	4a05      	ldr	r2, [pc, #20]	@ (801233c <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 8012328:	4805      	ldr	r0, [pc, #20]	@ (8012340 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>)
 801232a:	f240 3162 	movw	r1, #866	@ 0x362
 801232e:	f008 f9c3 	bl	801a6b8 <__assert_func>
 8012332:	e766      	b.n	8012202 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 8012334:	20020000 	andcs	r0, r2, r0
 8012338:	0801c9c0 	stmdaeq	r1, {r6, r7, r8, fp, lr, pc}
 801233c:	0801ca00 	stmdaeq	r1, {r9, fp, lr, pc}
 8012340:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8012344:	0801c9e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, lr, pc}

08012348 <WS28xxMulti::Setup(unsigned long)>:
 8012348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801234c:	4ac3      	ldr	r2, [pc, #780]	@ (801265c <WS28xxMulti::Setup(unsigned long)+0x314>)
 801234e:	4cc4      	ldr	r4, [pc, #784]	@ (8012660 <WS28xxMulti::Setup(unsigned long)+0x318>)
 8012350:	b094      	sub	sp, #80	@ 0x50
 8012352:	460d      	mov	r5, r1
 8012354:	f240 137f 	movw	r3, #383	@ 0x17f
 8012358:	49c2      	ldr	r1, [pc, #776]	@ (8012664 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 801235a:	4607      	mov	r7, r0
 801235c:	48c2      	ldr	r0, [pc, #776]	@ (8012668 <WS28xxMulti::Setup(unsigned long)+0x320>)
 801235e:	f008 f8cb 	bl	801a4f8 <printf>
 8012362:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8012366:	f006 fb53 	bl	8018a10 <rcu_periph_clock_enable>
 801236a:	48c0      	ldr	r0, [pc, #768]	@ (801266c <WS28xxMulti::Setup(unsigned long)+0x324>)
 801236c:	2340      	movs	r3, #64	@ 0x40
 801236e:	2200      	movs	r2, #0
 8012370:	2102      	movs	r1, #2
 8012372:	f006 facb 	bl	801890c <gpio_mode_set>
 8012376:	2340      	movs	r3, #64	@ 0x40
 8012378:	48bc      	ldr	r0, [pc, #752]	@ (801266c <WS28xxMulti::Setup(unsigned long)+0x324>)
 801237a:	2202      	movs	r2, #2
 801237c:	2100      	movs	r1, #0
 801237e:	f006 fae7 	bl	8018950 <gpio_output_options_set>
 8012382:	48ba      	ldr	r0, [pc, #744]	@ (801266c <WS28xxMulti::Setup(unsigned long)+0x324>)
 8012384:	2240      	movs	r2, #64	@ 0x40
 8012386:	2102      	movs	r1, #2
 8012388:	f006 fafe 	bl	8018988 <gpio_af_set>
 801238c:	fbb4 f4f5 	udiv	r4, r4, r5
 8012390:	4ab4      	ldr	r2, [pc, #720]	@ (8012664 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8012392:	49b2      	ldr	r1, [pc, #712]	@ (801265c <WS28xxMulti::Setup(unsigned long)+0x314>)
 8012394:	48b6      	ldr	r0, [pc, #728]	@ (8012670 <WS28xxMulti::Setup(unsigned long)+0x328>)
 8012396:	f240 13a1 	movw	r3, #417	@ 0x1a1
 801239a:	e9cd 5400 	strd	r5, r4, [sp]
 801239e:	f008 f8ab 	bl	801a4f8 <printf>
 80123a2:	2c0c      	cmp	r4, #12
 80123a4:	f241 0001 	movw	r0, #4097	@ 0x1001
 80123a8:	bf38      	it	cc
 80123aa:	240c      	movcc	r4, #12
 80123ac:	f006 fb30 	bl	8018a10 <rcu_periph_clock_enable>
 80123b0:	48b0      	ldr	r0, [pc, #704]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80123b2:	f006 fbe9 	bl	8018b88 <timer_deinit>
 80123b6:	2600      	movs	r6, #0
 80123b8:	1e63      	subs	r3, r4, #1
 80123ba:	48ae      	ldr	r0, [pc, #696]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80123bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80123be:	a907      	add	r1, sp, #28
 80123c0:	e9cd 6607 	strd	r6, r6, [sp, #28]
 80123c4:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80123c8:	f006 fc8c 	bl	8018ce4 <timer_init>
 80123cc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80123d0:	f04f 0a01 	mov.w	sl, #1
 80123d4:	9006      	str	r0, [sp, #24]
 80123d6:	4631      	mov	r1, r6
 80123d8:	48a6      	ldr	r0, [pc, #664]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80123da:	f04f 0902 	mov.w	r9, #2
 80123de:	aa04      	add	r2, sp, #16
 80123e0:	e9cd a904 	strd	sl, r9, [sp, #16]
 80123e4:	f006 fcbe 	bl	8018d64 <timer_channel_output_config>
 80123e8:	fa24 f10a 	lsr.w	r1, r4, sl
 80123ec:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 80123f0:	1e4d      	subs	r5, r1, #1
 80123f2:	4545      	cmp	r5, r8
 80123f4:	f200 80f5 	bhi.w	80125e2 <WS28xxMulti::Setup(unsigned long)+0x29a>
 80123f8:	4631      	mov	r1, r6
 80123fa:	489e      	ldr	r0, [pc, #632]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80123fc:	b2aa      	uxth	r2, r5
 80123fe:	f006 fdbf 	bl	8018f80 <timer_channel_output_pulse_value_config>
 8012402:	4631      	mov	r1, r6
 8012404:	489b      	ldr	r0, [pc, #620]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012406:	2260      	movs	r2, #96	@ 0x60
 8012408:	f006 fd94 	bl	8018f34 <timer_channel_output_mode_config>
 801240c:	4632      	mov	r2, r6
 801240e:	4631      	mov	r1, r6
 8012410:	4898      	ldr	r0, [pc, #608]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012412:	f006 fdc3 	bl	8018f9c <timer_channel_output_shadow_config>
 8012416:	4897      	ldr	r0, [pc, #604]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012418:	2210      	movs	r2, #16
 801241a:	4649      	mov	r1, r9
 801241c:	f006 fd8a 	bl	8018f34 <timer_channel_output_mode_config>
 8012420:	4894      	ldr	r0, [pc, #592]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012422:	2210      	movs	r2, #16
 8012424:	2103      	movs	r1, #3
 8012426:	f006 fd85 	bl	8018f34 <timer_channel_output_mode_config>
 801242a:	4892      	ldr	r0, [pc, #584]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801242c:	4652      	mov	r2, sl
 801242e:	4649      	mov	r1, r9
 8012430:	f006 fda6 	bl	8018f80 <timer_channel_output_pulse_value_config>
 8012434:	08a4      	lsrs	r4, r4, #2
 8012436:	1e66      	subs	r6, r4, #1
 8012438:	b2b2      	uxth	r2, r6
 801243a:	488e      	ldr	r0, [pc, #568]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801243c:	2103      	movs	r1, #3
 801243e:	f006 fd9f 	bl	8018f80 <timer_channel_output_pulse_value_config>
 8012442:	488c      	ldr	r0, [pc, #560]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012444:	2101      	movs	r1, #1
 8012446:	f006 fde7 	bl	8019018 <timer_master_slave_mode_config>
 801244a:	2130      	movs	r1, #48	@ 0x30
 801244c:	4889      	ldr	r0, [pc, #548]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801244e:	f006 fdd3 	bl	8018ff8 <timer_master_output_trigger_source_select>
 8012452:	f241 0002 	movw	r0, #4098	@ 0x1002
 8012456:	f006 fadb 	bl	8018a10 <rcu_periph_clock_enable>
 801245a:	4887      	ldr	r0, [pc, #540]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 801245c:	f006 fb94 	bl	8018b88 <timer_deinit>
 8012460:	f04f 0a00 	mov.w	sl, #0
 8012464:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012468:	4883      	ldr	r0, [pc, #524]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 801246a:	9309      	str	r3, [sp, #36]	@ 0x24
 801246c:	a907      	add	r1, sp, #28
 801246e:	e9cd aa07 	strd	sl, sl, [sp, #28]
 8012472:	f006 fc37 	bl	8018ce4 <timer_init>
 8012476:	4880      	ldr	r0, [pc, #512]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012478:	2101      	movs	r1, #1
 801247a:	f006 fdcd 	bl	8019018 <timer_master_slave_mode_config>
 801247e:	487e      	ldr	r0, [pc, #504]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012480:	2107      	movs	r1, #7
 8012482:	f006 fdc1 	bl	8019008 <timer_slave_mode_select>
 8012486:	487c      	ldr	r0, [pc, #496]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012488:	2120      	movs	r1, #32
 801248a:	f006 fdad 	bl	8018fe8 <timer_input_trigger_source_select>
 801248e:	487a      	ldr	r0, [pc, #488]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012490:	4651      	mov	r1, sl
 8012492:	2210      	movs	r2, #16
 8012494:	f006 fd4e 	bl	8018f34 <timer_channel_output_mode_config>
 8012498:	6839      	ldr	r1, [r7, #0]
 801249a:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 801249e:	4281      	cmp	r1, r0
 80124a0:	f200 80d2 	bhi.w	8012648 <WS28xxMulti::Setup(unsigned long)+0x300>
 80124a4:	b28a      	uxth	r2, r1
 80124a6:	4874      	ldr	r0, [pc, #464]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 80124a8:	4d74      	ldr	r5, [pc, #464]	@ (801267c <WS28xxMulti::Setup(unsigned long)+0x334>)
 80124aa:	2100      	movs	r1, #0
 80124ac:	f006 fd68 	bl	8018f80 <timer_channel_output_pulse_value_config>
 80124b0:	2400      	movs	r4, #0
 80124b2:	4871      	ldr	r0, [pc, #452]	@ (8012678 <WS28xxMulti::Setup(unsigned long)+0x330>)
 80124b4:	2102      	movs	r1, #2
 80124b6:	f006 fdbe 	bl	8019036 <timer_interrupt_enable>
 80124ba:	f885 431e 	strb.w	r4, [r5, #798]	@ 0x31e
 80124be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80124c2:	602a      	str	r2, [r5, #0]
 80124c4:	f640 4015 	movw	r0, #3093	@ 0xc15
 80124c8:	f006 faa2 	bl	8018a10 <rcu_periph_clock_enable>
 80124cc:	2107      	movs	r1, #7
 80124ce:	486c      	ldr	r0, [pc, #432]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80124d0:	4e6c      	ldr	r6, [pc, #432]	@ (8012684 <WS28xxMulti::Setup(unsigned long)+0x33c>)
 80124d2:	f005 fe81 	bl	80181d8 <dma_deinit>
 80124d6:	a80b      	add	r0, sp, #44	@ 0x2c
 80124d8:	f005 feaa 	bl	8018230 <dma_single_data_para_struct_init>
 80124dc:	2501      	movs	r5, #1
 80124de:	4b6a      	ldr	r3, [pc, #424]	@ (8012688 <WS28xxMulti::Setup(unsigned long)+0x340>)
 80124e0:	4867      	ldr	r0, [pc, #412]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80124e2:	960d      	str	r6, [sp, #52]	@ 0x34
 80124e4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80124e6:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 80124ea:	f04f 0940 	mov.w	r9, #64	@ 0x40
 80124ee:	2107      	movs	r1, #7
 80124f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124f2:	950e      	str	r5, [sp, #56]	@ 0x38
 80124f4:	950c      	str	r5, [sp, #48]	@ 0x30
 80124f6:	9413      	str	r4, [sp, #76]	@ 0x4c
 80124f8:	960f      	str	r6, [sp, #60]	@ 0x3c
 80124fa:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 80124fe:	f005 fea3 	bl	8018248 <dma_single_data_mode_init>
 8012502:	485f      	ldr	r0, [pc, #380]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012504:	2107      	movs	r1, #7
 8012506:	f005 ff25 	bl	8018354 <dma_circulation_disable>
 801250a:	2205      	movs	r2, #5
 801250c:	485c      	ldr	r0, [pc, #368]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 801250e:	2107      	movs	r1, #7
 8012510:	f005 ff28 	bl	8018364 <dma_channel_subperipheral_select>
 8012514:	2102      	movs	r1, #2
 8012516:	485a      	ldr	r0, [pc, #360]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012518:	f005 fe5e 	bl	80181d8 <dma_deinit>
 801251c:	a80b      	add	r0, sp, #44	@ 0x2c
 801251e:	f005 fe87 	bl	8018230 <dma_single_data_para_struct_init>
 8012522:	e9cd 460e 	strd	r4, r6, [sp, #56]	@ 0x38
 8012526:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012528:	4855      	ldr	r0, [pc, #340]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 801252a:	950c      	str	r5, [sp, #48]	@ 0x30
 801252c:	2102      	movs	r1, #2
 801252e:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012530:	4d56      	ldr	r5, [pc, #344]	@ (801268c <WS28xxMulti::Setup(unsigned long)+0x344>)
 8012532:	4c57      	ldr	r4, [pc, #348]	@ (8012690 <WS28xxMulti::Setup(unsigned long)+0x348>)
 8012534:	4e57      	ldr	r6, [pc, #348]	@ (8012694 <WS28xxMulti::Setup(unsigned long)+0x34c>)
 8012536:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 801253a:	940d      	str	r4, [sp, #52]	@ 0x34
 801253c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801253e:	f005 fe83 	bl	8018248 <dma_single_data_mode_init>
 8012542:	484f      	ldr	r0, [pc, #316]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012544:	2102      	movs	r1, #2
 8012546:	f005 ff05 	bl	8018354 <dma_circulation_disable>
 801254a:	484d      	ldr	r0, [pc, #308]	@ (8012680 <WS28xxMulti::Setup(unsigned long)+0x338>)
 801254c:	2205      	movs	r2, #5
 801254e:	2102      	movs	r1, #2
 8012550:	f005 ff08 	bl	8018364 <dma_channel_subperipheral_select>
 8012554:	6830      	ldr	r0, [r6, #0]
 8012556:	2800      	cmp	r0, #0
 8012558:	f000 80a6 	beq.w	80126a8 <WS28xxMulti::Setup(unsigned long)+0x360>
 801255c:	68c1      	ldr	r1, [r0, #12]
 801255e:	f1a1 020b 	sub.w	r2, r1, #11
 8012562:	2a02      	cmp	r2, #2
 8012564:	d81b      	bhi.n	801259e <WS28xxMulti::Setup(unsigned long)+0x256>
 8012566:	6803      	ldr	r3, [r0, #0]
 8012568:	f103 0801 	add.w	r8, r3, #1
 801256c:	d021      	beq.n	80125b2 <WS28xxMulti::Setup(unsigned long)+0x26a>
 801256e:	2400      	movs	r4, #0
 8012570:	4626      	mov	r6, r4
 8012572:	25ff      	movs	r5, #255	@ 0xff
 8012574:	2300      	movs	r3, #0
 8012576:	461a      	mov	r2, r3
 8012578:	4621      	mov	r1, r4
 801257a:	4638      	mov	r0, r7
 801257c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012580:	9600      	str	r6, [sp, #0]
 8012582:	f7ff fe29 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012586:	4621      	mov	r1, r4
 8012588:	e9cd 5501 	strd	r5, r5, [sp, #4]
 801258c:	23ff      	movs	r3, #255	@ 0xff
 801258e:	9500      	str	r5, [sp, #0]
 8012590:	4642      	mov	r2, r8
 8012592:	4638      	mov	r0, r7
 8012594:	3401      	adds	r4, #1
 8012596:	f7ff fe1f 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801259a:	2c08      	cmp	r4, #8
 801259c:	d1ea      	bne.n	8012574 <WS28xxMulti::Setup(unsigned long)+0x22c>
 801259e:	4a2f      	ldr	r2, [pc, #188]	@ (801265c <WS28xxMulti::Setup(unsigned long)+0x314>)
 80125a0:	4930      	ldr	r1, [pc, #192]	@ (8012664 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 80125a2:	483d      	ldr	r0, [pc, #244]	@ (8012698 <WS28xxMulti::Setup(unsigned long)+0x350>)
 80125a4:	f240 234e 	movw	r3, #590	@ 0x24e
 80125a8:	f007 ffa6 	bl	801a4f8 <printf>
 80125ac:	b014      	add	sp, #80	@ 0x50
 80125ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b2:	2600      	movs	r6, #0
 80125b4:	4634      	mov	r4, r6
 80125b6:	2300      	movs	r3, #0
 80125b8:	461a      	mov	r2, r3
 80125ba:	4631      	mov	r1, r6
 80125bc:	4638      	mov	r0, r7
 80125be:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80125c2:	9400      	str	r4, [sp, #0]
 80125c4:	f7ff fe08 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80125c8:	4631      	mov	r1, r6
 80125ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80125ce:	2300      	movs	r3, #0
 80125d0:	9400      	str	r4, [sp, #0]
 80125d2:	4642      	mov	r2, r8
 80125d4:	4638      	mov	r0, r7
 80125d6:	3601      	adds	r6, #1
 80125d8:	f7ff fdfe 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80125dc:	2e08      	cmp	r6, #8
 80125de:	d1ea      	bne.n	80125b6 <WS28xxMulti::Setup(unsigned long)+0x26e>
 80125e0:	e7dd      	b.n	801259e <WS28xxMulti::Setup(unsigned long)+0x256>
 80125e2:	4b2e      	ldr	r3, [pc, #184]	@ (801269c <WS28xxMulti::Setup(unsigned long)+0x354>)
 80125e4:	4a1d      	ldr	r2, [pc, #116]	@ (801265c <WS28xxMulti::Setup(unsigned long)+0x314>)
 80125e6:	481f      	ldr	r0, [pc, #124]	@ (8012664 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 80125e8:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80125ec:	f008 f864 	bl	801a6b8 <__assert_func>
 80125f0:	4631      	mov	r1, r6
 80125f2:	4820      	ldr	r0, [pc, #128]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80125f4:	b2aa      	uxth	r2, r5
 80125f6:	f006 fcc3 	bl	8018f80 <timer_channel_output_pulse_value_config>
 80125fa:	4631      	mov	r1, r6
 80125fc:	481d      	ldr	r0, [pc, #116]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80125fe:	2260      	movs	r2, #96	@ 0x60
 8012600:	f006 fc98 	bl	8018f34 <timer_channel_output_mode_config>
 8012604:	4632      	mov	r2, r6
 8012606:	4631      	mov	r1, r6
 8012608:	481a      	ldr	r0, [pc, #104]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801260a:	f006 fcc7 	bl	8018f9c <timer_channel_output_shadow_config>
 801260e:	4819      	ldr	r0, [pc, #100]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012610:	2210      	movs	r2, #16
 8012612:	4649      	mov	r1, r9
 8012614:	f006 fc8e 	bl	8018f34 <timer_channel_output_mode_config>
 8012618:	4816      	ldr	r0, [pc, #88]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801261a:	2210      	movs	r2, #16
 801261c:	2103      	movs	r1, #3
 801261e:	f006 fc89 	bl	8018f34 <timer_channel_output_mode_config>
 8012622:	4652      	mov	r2, sl
 8012624:	4813      	ldr	r0, [pc, #76]	@ (8012674 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012626:	4649      	mov	r1, r9
 8012628:	f006 fcaa 	bl	8018f80 <timer_channel_output_pulse_value_config>
 801262c:	fa24 f209 	lsr.w	r2, r4, r9
 8012630:	1e56      	subs	r6, r2, #1
 8012632:	4546      	cmp	r6, r8
 8012634:	f67f af00 	bls.w	8012438 <WS28xxMulti::Setup(unsigned long)+0xf0>
 8012638:	4b19      	ldr	r3, [pc, #100]	@ (80126a0 <WS28xxMulti::Setup(unsigned long)+0x358>)
 801263a:	4a08      	ldr	r2, [pc, #32]	@ (801265c <WS28xxMulti::Setup(unsigned long)+0x314>)
 801263c:	4809      	ldr	r0, [pc, #36]	@ (8012664 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 801263e:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8012642:	f008 f839 	bl	801a6b8 <__assert_func>
 8012646:	e6f7      	b.n	8012438 <WS28xxMulti::Setup(unsigned long)+0xf0>
 8012648:	f240 11e5 	movw	r1, #485	@ 0x1e5
 801264c:	4b15      	ldr	r3, [pc, #84]	@ (80126a4 <WS28xxMulti::Setup(unsigned long)+0x35c>)
 801264e:	4a03      	ldr	r2, [pc, #12]	@ (801265c <WS28xxMulti::Setup(unsigned long)+0x314>)
 8012650:	4804      	ldr	r0, [pc, #16]	@ (8012664 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8012652:	f008 f831 	bl	801a6b8 <__assert_func>
 8012656:	6839      	ldr	r1, [r7, #0]
 8012658:	e724      	b.n	80124a4 <WS28xxMulti::Setup(unsigned long)+0x15c>
 801265a:	bf00      	nop
 801265c:	0801c8b8 	stmdaeq	r1, {r3, r4, r5, r7, fp, lr, pc}
 8012660:	0e4e1c00 	cdpeq	12, 4, cr1, cr14, cr0, {0}
 8012664:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8012668:	0801c738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, lr, pc}
 801266c:	40020000 	andmi	r0, r2, r0
 8012670:	0801ca10 	stmdaeq	r1, {r4, r9, fp, lr, pc}
 8012674:	40000400 	andmi	r0, r0, r0, lsl #8
 8012678:	40000800 	andmi	r0, r0, r0, lsl #16
 801267c:	e000e100 	and	lr, r0, r0, lsl #2
 8012680:	40026000 	andmi	r6, r2, r0
 8012684:	0801ee78 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, fp, sp, lr, pc}
 8012688:	40020828 	andmi	r0, r2, r8, lsr #16
 801268c:	40020818 	andmi	r0, r2, r8, lsl r8
 8012690:	20020000 	andcs	r0, r2, r0
 8012694:	2000007c 	andcs	r0, r0, ip, ror r0
 8012698:	0801c780 	stmdaeq	r1, {r7, r8, r9, sl, lr, pc}
 801269c:	0801ca40 	stmdaeq	r1, {r6, r9, fp, lr, pc}
 80126a0:	0801ca64 	stmdaeq	r1, {r2, r5, r6, r9, fp, lr, pc}
 80126a4:	0801ca88 	stmdaeq	r1, {r3, r7, r9, fp, lr, pc}
 80126a8:	4804      	ldr	r0, [pc, #16]	@ (80126bc <WS28xxMulti::Setup(unsigned long)+0x374>)
 80126aa:	4b05      	ldr	r3, [pc, #20]	@ (80126c0 <WS28xxMulti::Setup(unsigned long)+0x378>)
 80126ac:	4a05      	ldr	r2, [pc, #20]	@ (80126c4 <WS28xxMulti::Setup(unsigned long)+0x37c>)
 80126ae:	f240 110d 	movw	r1, #269	@ 0x10d
 80126b2:	f008 f801 	bl	801a6b8 <__assert_func>
 80126b6:	6830      	ldr	r0, [r6, #0]
 80126b8:	e750      	b.n	801255c <WS28xxMulti::Setup(unsigned long)+0x214>
 80126ba:	bf00      	nop
 80126bc:	0801c91c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr, pc}
 80126c0:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 80126c4:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}

080126c8 <WS28xxMulti::WS28xxMulti()>:
 80126c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ca:	4605      	mov	r5, r0
 80126cc:	2300      	movs	r3, #0
 80126ce:	4cb0      	ldr	r4, [pc, #704]	@ (8012990 <WS28xxMulti::WS28xxMulti()+0x2c8>)
 80126d0:	602b      	str	r3, [r5, #0]
 80126d2:	4ab0      	ldr	r2, [pc, #704]	@ (8012994 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 80126d4:	49b0      	ldr	r1, [pc, #704]	@ (8012998 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 80126d6:	48b1      	ldr	r0, [pc, #708]	@ (801299c <WS28xxMulti::WS28xxMulti()+0x2d4>)
 80126d8:	b083      	sub	sp, #12
 80126da:	237c      	movs	r3, #124	@ 0x7c
 80126dc:	f007 ff0c 	bl	801a4f8 <printf>
 80126e0:	6820      	ldr	r0, [r4, #0]
 80126e2:	2800      	cmp	r0, #0
 80126e4:	f040 818c 	bne.w	8012a00 <WS28xxMulti::WS28xxMulti()+0x338>
 80126e8:	4fad      	ldr	r7, [pc, #692]	@ (80129a0 <WS28xxMulti::WS28xxMulti()+0x2d8>)
 80126ea:	4aab      	ldr	r2, [pc, #684]	@ (8012998 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 80126ec:	49a9      	ldr	r1, [pc, #676]	@ (8012994 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 80126ee:	48ad      	ldr	r0, [pc, #692]	@ (80129a4 <WS28xxMulti::WS28xxMulti()+0x2dc>)
 80126f0:	2608      	movs	r6, #8
 80126f2:	9600      	str	r6, [sp, #0]
 80126f4:	2381      	movs	r3, #129	@ 0x81
 80126f6:	6025      	str	r5, [r4, #0]
 80126f8:	f007 fefe 	bl	801a4f8 <printf>
 80126fc:	683c      	ldr	r4, [r7, #0]
 80126fe:	2c00      	cmp	r4, #0
 8012700:	f000 8175 	beq.w	80129ee <WS28xxMulti::WS28xxMulti()+0x326>
 8012704:	4aa8      	ldr	r2, [pc, #672]	@ (80129a8 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 8012706:	49a9      	ldr	r1, [pc, #676]	@ (80129ac <WS28xxMulti::WS28xxMulti()+0x2e4>)
 8012708:	48a4      	ldr	r0, [pc, #656]	@ (801299c <WS28xxMulti::WS28xxMulti()+0x2d4>)
 801270a:	2397      	movs	r3, #151	@ 0x97
 801270c:	f007 fef4 	bl	801a4f8 <printf>
 8012710:	68e2      	ldr	r2, [r4, #12]
 8012712:	6823      	ldr	r3, [r4, #0]
 8012714:	2a07      	cmp	r2, #7
 8012716:	f000 80a2 	beq.w	801285e <WS28xxMulti::WS28xxMulti()+0x196>
 801271a:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 801271e:	f1a2 000b 	sub.w	r0, r2, #11
 8012722:	bf28      	it	cs
 8012724:	f44f 732a 	movcs.w	r3, #680	@ 0x2a8
 8012728:	2103      	movs	r1, #3
 801272a:	2801      	cmp	r0, #1
 801272c:	6926      	ldr	r6, [r4, #16]
 801272e:	6023      	str	r3, [r4, #0]
 8012730:	60a1      	str	r1, [r4, #8]
 8012732:	f200 8112 	bhi.w	801295a <WS28xxMulti::WS28xxMulti()+0x292>
 8012736:	7de2      	ldrb	r2, [r4, #23]
 8012738:	2a1f      	cmp	r2, #31
 801273a:	bf8c      	ite	hi
 801273c:	22ff      	movhi	r2, #255	@ 0xff
 801273e:	f062 021f 	ornls	r2, r2, #31
 8012742:	75e2      	strb	r2, [r4, #23]
 8012744:	2200      	movs	r2, #0
 8012746:	2e06      	cmp	r6, #6
 8012748:	7522      	strb	r2, [r4, #20]
 801274a:	f000 80ba 	beq.w	80128c2 <WS28xxMulti::WS28xxMulti()+0x1fa>
 801274e:	6866      	ldr	r6, [r4, #4]
 8012750:	2e00      	cmp	r6, #0
 8012752:	d174      	bne.n	801283e <WS28xxMulti::WS28xxMulti()+0x176>
 8012754:	4e96      	ldr	r6, [pc, #600]	@ (80129b0 <WS28xxMulti::WS28xxMulti()+0x2e8>)
 8012756:	6066      	str	r6, [r4, #4]
 8012758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801275c:	005a      	lsls	r2, r3, #1
 801275e:	4f95      	ldr	r7, [pc, #596]	@ (80129b4 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 8012760:	fbb7 f0f2 	udiv	r0, r7, r2
 8012764:	4991      	ldr	r1, [pc, #580]	@ (80129ac <WS28xxMulti::WS28xxMulti()+0x2e4>)
 8012766:	61a0      	str	r0, [r4, #24]
 8012768:	4a8f      	ldr	r2, [pc, #572]	@ (80129a8 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 801276a:	4893      	ldr	r0, [pc, #588]	@ (80129b8 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 801276c:	23f2      	movs	r3, #242	@ 0xf2
 801276e:	f007 fec3 	bl	801a4f8 <printf>
 8012772:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012776:	f1a7 010b 	sub.w	r1, r7, #11
 801277a:	2902      	cmp	r1, #2
 801277c:	f240 8090 	bls.w	80128a0 <WS28xxMulti::WS28xxMulti()+0x1d8>
 8012780:	6823      	ldr	r3, [r4, #0]
 8012782:	fb06 f303 	mul.w	r3, r6, r3
 8012786:	4e8d      	ldr	r6, [pc, #564]	@ (80129bc <WS28xxMulti::WS28xxMulti()+0x2f4>)
 8012788:	4982      	ldr	r1, [pc, #520]	@ (8012994 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 801278a:	488d      	ldr	r0, [pc, #564]	@ (80129c0 <WS28xxMulti::WS28xxMulti()+0x2f8>)
 801278c:	00da      	lsls	r2, r3, #3
 801278e:	f5a6 4700 	sub.w	r7, r6, #32768	@ 0x8000
 8012792:	602a      	str	r2, [r5, #0]
 8012794:	239c      	movs	r3, #156	@ 0x9c
 8012796:	4a80      	ldr	r2, [pc, #512]	@ (8012998 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012798:	9601      	str	r6, [sp, #4]
 801279a:	9700      	str	r7, [sp, #0]
 801279c:	f007 feac 	bl	801a4f8 <printf>
 80127a0:	6828      	ldr	r0, [r5, #0]
 80127a2:	497c      	ldr	r1, [pc, #496]	@ (8012994 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 80127a4:	9000      	str	r0, [sp, #0]
 80127a6:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 80127aa:	0a9e      	lsrs	r6, r3, #10
 80127ac:	4a7a      	ldr	r2, [pc, #488]	@ (8012998 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 80127ae:	4885      	ldr	r0, [pc, #532]	@ (80129c4 <WS28xxMulti::WS28xxMulti()+0x2fc>)
 80127b0:	9601      	str	r6, [sp, #4]
 80127b2:	239d      	movs	r3, #157	@ 0x9d
 80127b4:	f007 fea0 	bl	801a4f8 <printf>
 80127b8:	6829      	ldr	r1, [r5, #0]
 80127ba:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80127be:	f200 810f 	bhi.w	80129e0 <WS28xxMulti::WS28xxMulti()+0x318>
 80127c2:	f640 4002 	movw	r0, #3074	@ 0xc02
 80127c6:	f006 f923 	bl	8018a10 <rcu_periph_clock_enable>
 80127ca:	487f      	ldr	r0, [pc, #508]	@ (80129c8 <WS28xxMulti::WS28xxMulti()+0x300>)
 80127cc:	4f7f      	ldr	r7, [pc, #508]	@ (80129cc <WS28xxMulti::WS28xxMulti()+0x304>)
 80127ce:	f44f 537f 	mov.w	r3, #16320	@ 0x3fc0
 80127d2:	2202      	movs	r2, #2
 80127d4:	2101      	movs	r1, #1
 80127d6:	f006 f899 	bl	801890c <gpio_mode_set>
 80127da:	f44f 537f 	mov.w	r3, #16320	@ 0x3fc0
 80127de:	2100      	movs	r1, #0
 80127e0:	4879      	ldr	r0, [pc, #484]	@ (80129c8 <WS28xxMulti::WS28xxMulti()+0x300>)
 80127e2:	2202      	movs	r2, #2
 80127e4:	f006 f8b4 	bl	8018950 <gpio_output_options_set>
 80127e8:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 80127ec:	f8c7 2828 	str.w	r2, [r7, #2088]	@ 0x828
 80127f0:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80127f4:	f006 f90c 	bl	8018a10 <rcu_periph_clock_enable>
 80127f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80127fc:	2202      	movs	r2, #2
 80127fe:	2101      	movs	r1, #1
 8012800:	4638      	mov	r0, r7
 8012802:	f006 f883 	bl	801890c <gpio_mode_set>
 8012806:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801280a:	4638      	mov	r0, r7
 801280c:	2202      	movs	r2, #2
 801280e:	2100      	movs	r1, #0
 8012810:	f006 f89e 	bl	8018950 <gpio_output_options_set>
 8012814:	7d23      	ldrb	r3, [r4, #20]
 8012816:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801281a:	61b8      	str	r0, [r7, #24]
 801281c:	b1d3      	cbz	r3, 8012854 <WS28xxMulti::WS28xxMulti()+0x18c>
 801281e:	7da2      	ldrb	r2, [r4, #22]
 8012820:	7d61      	ldrb	r1, [r4, #21]
 8012822:	4628      	mov	r0, r5
 8012824:	f7ff f882 	bl	801192c <WS28xxMulti::Setup(unsigned char, unsigned char)>
 8012828:	f006 ffc8 	bl	80197bc <dma::memcpy32_init()>
 801282c:	4a59      	ldr	r2, [pc, #356]	@ (8012994 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 801282e:	495a      	ldr	r1, [pc, #360]	@ (8012998 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012830:	4861      	ldr	r0, [pc, #388]	@ (80129b8 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 8012832:	23c2      	movs	r3, #194	@ 0xc2
 8012834:	f007 fe60 	bl	801a4f8 <printf>
 8012838:	4628      	mov	r0, r5
 801283a:	b003      	add	sp, #12
 801283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801283e:	4f64      	ldr	r7, [pc, #400]	@ (80129d0 <WS28xxMulti::WS28xxMulti()+0x308>)
 8012840:	42be      	cmp	r6, r7
 8012842:	d840      	bhi.n	80128c6 <WS28xxMulti::WS28xxMulti()+0x1fe>
 8012844:	4863      	ldr	r0, [pc, #396]	@ (80129d4 <WS28xxMulti::WS28xxMulti()+0x30c>)
 8012846:	fbb0 f1f6 	udiv	r1, r0, r6
 801284a:	fb03 f101 	mul.w	r1, r3, r1
 801284e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8012852:	e784      	b.n	801275e <WS28xxMulti::WS28xxMulti()+0x96>
 8012854:	6861      	ldr	r1, [r4, #4]
 8012856:	4628      	mov	r0, r5
 8012858:	f7ff fd76 	bl	8012348 <WS28xxMulti::Setup(unsigned long)>
 801285c:	e7e4      	b.n	8012828 <WS28xxMulti::WS28xxMulti()+0x160>
 801285e:	6920      	ldr	r0, [r4, #16]
 8012860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012864:	bf28      	it	cs
 8012866:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 801286a:	2104      	movs	r1, #4
 801286c:	2601      	movs	r6, #1
 801286e:	2806      	cmp	r0, #6
 8012870:	6023      	str	r3, [r4, #0]
 8012872:	60a1      	str	r1, [r4, #8]
 8012874:	7526      	strb	r6, [r4, #20]
 8012876:	f000 8136 	beq.w	8012ae6 <WS28xxMulti::WS28xxMulti()+0x41e>
 801287a:	7d67      	ldrb	r7, [r4, #21]
 801287c:	f894 e016 	ldrb.w	lr, [r4, #22]
 8012880:	45be      	cmp	lr, r7
 8012882:	d823      	bhi.n	80128cc <WS28xxMulti::WS28xxMulti()+0x204>
 8012884:	2600      	movs	r6, #0
 8012886:	2a03      	cmp	r2, #3
 8012888:	f8a4 6015 	strh.w	r6, [r4, #21]
 801288c:	d07c      	beq.n	8012988 <WS28xxMulti::WS28xxMulti()+0x2c0>
 801288e:	3a08      	subs	r2, #8
 8012890:	2a02      	cmp	r2, #2
 8012892:	f200 811e 	bhi.w	8012ad2 <WS28xxMulti::WS28xxMulti()+0x40a>
 8012896:	20fc      	movs	r0, #252	@ 0xfc
 8012898:	75a0      	strb	r0, [r4, #22]
 801289a:	27c0      	movs	r7, #192	@ 0xc0
 801289c:	7567      	strb	r7, [r4, #21]
 801289e:	e017      	b.n	80128d0 <WS28xxMulti::WS28xxMulti()+0x208>
 80128a0:	f240 37fe 	movw	r7, #1022	@ 0x3fe
 80128a4:	4a3c      	ldr	r2, [pc, #240]	@ (8012998 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 80128a6:	493b      	ldr	r1, [pc, #236]	@ (8012994 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 80128a8:	484b      	ldr	r0, [pc, #300]	@ (80129d8 <WS28xxMulti::WS28xxMulti()+0x310>)
 80128aa:	9700      	str	r7, [sp, #0]
 80128ac:	238b      	movs	r3, #139	@ 0x8b
 80128ae:	f007 fe23 	bl	801a4f8 <printf>
 80128b2:	6820      	ldr	r0, [r4, #0]
 80128b4:	42b8      	cmp	r0, r7
 80128b6:	d816      	bhi.n	80128e6 <WS28xxMulti::WS28xxMulti()+0x21e>
 80128b8:	fb06 f300 	mul.w	r3, r6, r0
 80128bc:	4403      	add	r3, r0
 80128be:	3308      	adds	r3, #8
 80128c0:	e761      	b.n	8012786 <WS28xxMulti::WS28xxMulti()+0xbe>
 80128c2:	6122      	str	r2, [r4, #16]
 80128c4:	e743      	b.n	801274e <WS28xxMulti::WS28xxMulti()+0x86>
 80128c6:	6067      	str	r7, [r4, #4]
 80128c8:	2200      	movs	r2, #0
 80128ca:	e748      	b.n	801275e <WS28xxMulti::WS28xxMulti()+0x96>
 80128cc:	2f00      	cmp	r7, #0
 80128ce:	d0e4      	beq.n	801289a <WS28xxMulti::WS28xxMulti()+0x1d2>
 80128d0:	fb03 f101 	mul.w	r1, r3, r1
 80128d4:	4e41      	ldr	r6, [pc, #260]	@ (80129dc <WS28xxMulti::WS28xxMulti()+0x314>)
 80128d6:	4b37      	ldr	r3, [pc, #220]	@ (80129b4 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 80128d8:	6066      	str	r6, [r4, #4]
 80128da:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80128de:	004a      	lsls	r2, r1, #1
 80128e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80128e4:	e73e      	b.n	8012764 <WS28xxMulti::WS28xxMulti()+0x9c>
 80128e6:	4a30      	ldr	r2, [pc, #192]	@ (80129a8 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 80128e8:	4930      	ldr	r1, [pc, #192]	@ (80129ac <WS28xxMulti::WS28xxMulti()+0x2e4>)
 80128ea:	482c      	ldr	r0, [pc, #176]	@ (801299c <WS28xxMulti::WS28xxMulti()+0x2d4>)
 80128ec:	6027      	str	r7, [r4, #0]
 80128ee:	2397      	movs	r3, #151	@ 0x97
 80128f0:	f007 fe02 	bl	801a4f8 <printf>
 80128f4:	68e2      	ldr	r2, [r4, #12]
 80128f6:	6823      	ldr	r3, [r4, #0]
 80128f8:	2a07      	cmp	r2, #7
 80128fa:	f000 809f 	beq.w	8012a3c <WS28xxMulti::WS28xxMulti()+0x374>
 80128fe:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 8012902:	f1a2 010b 	sub.w	r1, r2, #11
 8012906:	bf28      	it	cs
 8012908:	f44f 732a 	movcs.w	r3, #680	@ 0x2a8
 801290c:	2003      	movs	r0, #3
 801290e:	2901      	cmp	r1, #1
 8012910:	6927      	ldr	r7, [r4, #16]
 8012912:	6023      	str	r3, [r4, #0]
 8012914:	60a0      	str	r0, [r4, #8]
 8012916:	f200 80bc 	bhi.w	8012a92 <WS28xxMulti::WS28xxMulti()+0x3ca>
 801291a:	7de1      	ldrb	r1, [r4, #23]
 801291c:	291f      	cmp	r1, #31
 801291e:	bf8c      	ite	hi
 8012920:	21ff      	movhi	r1, #255	@ 0xff
 8012922:	f061 011f 	ornls	r1, r1, #31
 8012926:	75e1      	strb	r1, [r4, #23]
 8012928:	2200      	movs	r2, #0
 801292a:	2f06      	cmp	r7, #6
 801292c:	7522      	strb	r2, [r4, #20]
 801292e:	f000 80ae 	beq.w	8012a8e <WS28xxMulti::WS28xxMulti()+0x3c6>
 8012932:	6860      	ldr	r0, [r4, #4]
 8012934:	2800      	cmp	r0, #0
 8012936:	d174      	bne.n	8012a22 <WS28xxMulti::WS28xxMulti()+0x35a>
 8012938:	4f1d      	ldr	r7, [pc, #116]	@ (80129b0 <WS28xxMulti::WS28xxMulti()+0x2e8>)
 801293a:	6067      	str	r7, [r4, #4]
 801293c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012940:	0058      	lsls	r0, r3, #1
 8012942:	491c      	ldr	r1, [pc, #112]	@ (80129b4 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 8012944:	fbb1 f1f0 	udiv	r1, r1, r0
 8012948:	61a1      	str	r1, [r4, #24]
 801294a:	4a17      	ldr	r2, [pc, #92]	@ (80129a8 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 801294c:	4917      	ldr	r1, [pc, #92]	@ (80129ac <WS28xxMulti::WS28xxMulti()+0x2e4>)
 801294e:	481a      	ldr	r0, [pc, #104]	@ (80129b8 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 8012950:	23f2      	movs	r3, #242	@ 0xf2
 8012952:	f007 fdd1 	bl	801a4f8 <printf>
 8012956:	6820      	ldr	r0, [r4, #0]
 8012958:	e7ae      	b.n	80128b8 <WS28xxMulti::WS28xxMulti()+0x1f0>
 801295a:	2a00      	cmp	r2, #0
 801295c:	f43f aef3 	beq.w	8012746 <WS28xxMulti::WS28xxMulti()+0x7e>
 8012960:	2a0d      	cmp	r2, #13
 8012962:	d054      	beq.n	8012a0e <WS28xxMulti::WS28xxMulti()+0x346>
 8012964:	2701      	movs	r7, #1
 8012966:	2a0e      	cmp	r2, #14
 8012968:	7527      	strb	r7, [r4, #20]
 801296a:	f040 80a2 	bne.w	8012ab2 <WS28xxMulti::WS28xxMulti()+0x3ea>
 801296e:	2e06      	cmp	r6, #6
 8012970:	7d67      	ldrb	r7, [r4, #21]
 8012972:	f894 c016 	ldrb.w	ip, [r4, #22]
 8012976:	60e1      	str	r1, [r4, #12]
 8012978:	bf04      	itt	eq
 801297a:	2202      	moveq	r2, #2
 801297c:	6122      	streq	r2, [r4, #16]
 801297e:	45bc      	cmp	ip, r7
 8012980:	d8a4      	bhi.n	80128cc <WS28xxMulti::WS28xxMulti()+0x204>
 8012982:	2000      	movs	r0, #0
 8012984:	f8a4 0015 	strh.w	r0, [r4, #21]
 8012988:	20f8      	movs	r0, #248	@ 0xf8
 801298a:	75a0      	strb	r0, [r4, #22]
 801298c:	e785      	b.n	801289a <WS28xxMulti::WS28xxMulti()+0x1d2>
 801298e:	bf00      	nop
 8012990:	2000dfb4 			@ <UNDEFINED> instruction: 0x2000dfb4
 8012994:	0801caa0 	stmdaeq	r1, {r5, r7, r9, fp, lr, pc}
 8012998:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 801299c:	0801c738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, lr, pc}
 80129a0:	2000007c 	andcs	r0, r0, ip, ror r0
 80129a4:	0801cac0 	stmdaeq	r1, {r6, r7, r9, fp, lr, pc}
 80129a8:	0801c748 	stmdaeq	r1, {r3, r6, r8, r9, sl, lr, pc}
 80129ac:	0801c91c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr, pc}
 80129b0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80129b4:	000f4240 	andeq	r4, pc, r0, asr #4
 80129b8:	0801c780 	stmdaeq	r1, {r7, r8, r9, sl, lr, pc}
 80129bc:	20028000 	andcs	r8, r2, r0
 80129c0:	0801cb08 	stmdaeq	r1, {r3, r8, r9, fp, lr, pc}
 80129c4:	0801cb38 	stmdaeq	r1, {r3, r4, r5, r8, r9, fp, lr, pc}
 80129c8:	40020800 	andmi	r0, r2, r0, lsl #16
 80129cc:	40020000 	andmi	r0, r2, r0
 80129d0:	017d7840 	cmneq	sp, r0, asr #16
 80129d4:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80129d8:	0801cae4 	stmdaeq	r1, {r2, r5, r6, r7, r9, fp, lr, pc}
 80129dc:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80129e0:	4b59      	ldr	r3, [pc, #356]	@ (8012b48 <WS28xxMulti::WS28xxMulti()+0x480>)
 80129e2:	4a5a      	ldr	r2, [pc, #360]	@ (8012b4c <WS28xxMulti::WS28xxMulti()+0x484>)
 80129e4:	485a      	ldr	r0, [pc, #360]	@ (8012b50 <WS28xxMulti::WS28xxMulti()+0x488>)
 80129e6:	219e      	movs	r1, #158	@ 0x9e
 80129e8:	f007 fe66 	bl	801a6b8 <__assert_func>
 80129ec:	e6e9      	b.n	80127c2 <WS28xxMulti::WS28xxMulti()+0xfa>
 80129ee:	4b59      	ldr	r3, [pc, #356]	@ (8012b54 <WS28xxMulti::WS28xxMulti()+0x48c>)
 80129f0:	4a59      	ldr	r2, [pc, #356]	@ (8012b58 <WS28xxMulti::WS28xxMulti()+0x490>)
 80129f2:	485a      	ldr	r0, [pc, #360]	@ (8012b5c <WS28xxMulti::WS28xxMulti()+0x494>)
 80129f4:	f240 110d 	movw	r1, #269	@ 0x10d
 80129f8:	f007 fe5e 	bl	801a6b8 <__assert_func>
 80129fc:	683c      	ldr	r4, [r7, #0]
 80129fe:	e681      	b.n	8012704 <WS28xxMulti::WS28xxMulti()+0x3c>
 8012a00:	4b57      	ldr	r3, [pc, #348]	@ (8012b60 <WS28xxMulti::WS28xxMulti()+0x498>)
 8012a02:	4a52      	ldr	r2, [pc, #328]	@ (8012b4c <WS28xxMulti::WS28xxMulti()+0x484>)
 8012a04:	4852      	ldr	r0, [pc, #328]	@ (8012b50 <WS28xxMulti::WS28xxMulti()+0x488>)
 8012a06:	217e      	movs	r1, #126	@ 0x7e
 8012a08:	f007 fe56 	bl	801a6b8 <__assert_func>
 8012a0c:	e66c      	b.n	80126e8 <WS28xxMulti::WS28xxMulti()+0x20>
 8012a0e:	2100      	movs	r1, #0
 8012a10:	2e06      	cmp	r6, #6
 8012a12:	7521      	strb	r1, [r4, #20]
 8012a14:	d010      	beq.n	8012a38 <WS28xxMulti::WS28xxMulti()+0x370>
 8012a16:	6866      	ldr	r6, [r4, #4]
 8012a18:	2e00      	cmp	r6, #0
 8012a1a:	f43f ae9b 	beq.w	8012754 <WS28xxMulti::WS28xxMulti()+0x8c>
 8012a1e:	4f51      	ldr	r7, [pc, #324]	@ (8012b64 <WS28xxMulti::WS28xxMulti()+0x49c>)
 8012a20:	e70e      	b.n	8012840 <WS28xxMulti::WS28xxMulti()+0x178>
 8012a22:	4f51      	ldr	r7, [pc, #324]	@ (8012b68 <WS28xxMulti::WS28xxMulti()+0x4a0>)
 8012a24:	42b8      	cmp	r0, r7
 8012a26:	d857      	bhi.n	8012ad8 <WS28xxMulti::WS28xxMulti()+0x410>
 8012a28:	4950      	ldr	r1, [pc, #320]	@ (8012b6c <WS28xxMulti::WS28xxMulti()+0x4a4>)
 8012a2a:	fbb1 f2f0 	udiv	r2, r1, r0
 8012a2e:	fb03 f202 	mul.w	r2, r3, r2
 8012a32:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8012a36:	e784      	b.n	8012942 <WS28xxMulti::WS28xxMulti()+0x27a>
 8012a38:	6121      	str	r1, [r4, #16]
 8012a3a:	e7ec      	b.n	8012a16 <WS28xxMulti::WS28xxMulti()+0x34e>
 8012a3c:	6921      	ldr	r1, [r4, #16]
 8012a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012a42:	bf28      	it	cs
 8012a44:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012a48:	2004      	movs	r0, #4
 8012a4a:	2701      	movs	r7, #1
 8012a4c:	2906      	cmp	r1, #6
 8012a4e:	6023      	str	r3, [r4, #0]
 8012a50:	60a0      	str	r0, [r4, #8]
 8012a52:	7527      	strb	r7, [r4, #20]
 8012a54:	d072      	beq.n	8012b3c <WS28xxMulti::WS28xxMulti()+0x474>
 8012a56:	7d61      	ldrb	r1, [r4, #21]
 8012a58:	f894 c016 	ldrb.w	ip, [r4, #22]
 8012a5c:	458c      	cmp	ip, r1
 8012a5e:	d83f      	bhi.n	8012ae0 <WS28xxMulti::WS28xxMulti()+0x418>
 8012a60:	2700      	movs	r7, #0
 8012a62:	2a03      	cmp	r2, #3
 8012a64:	f8a4 7015 	strh.w	r7, [r4, #21]
 8012a68:	d055      	beq.n	8012b16 <WS28xxMulti::WS28xxMulti()+0x44e>
 8012a6a:	3a08      	subs	r2, #8
 8012a6c:	2a02      	cmp	r2, #2
 8012a6e:	d863      	bhi.n	8012b38 <WS28xxMulti::WS28xxMulti()+0x470>
 8012a70:	21fc      	movs	r1, #252	@ 0xfc
 8012a72:	75a1      	strb	r1, [r4, #22]
 8012a74:	27c0      	movs	r7, #192	@ 0xc0
 8012a76:	7567      	strb	r7, [r4, #21]
 8012a78:	fb00 f303 	mul.w	r3, r0, r3
 8012a7c:	4f3c      	ldr	r7, [pc, #240]	@ (8012b70 <WS28xxMulti::WS28xxMulti()+0x4a8>)
 8012a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8012b74 <WS28xxMulti::WS28xxMulti()+0x4ac>)
 8012a80:	6067      	str	r7, [r4, #4]
 8012a82:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8012a86:	0043      	lsls	r3, r0, #1
 8012a88:	fbb2 f1f3 	udiv	r1, r2, r3
 8012a8c:	e75c      	b.n	8012948 <WS28xxMulti::WS28xxMulti()+0x280>
 8012a8e:	6122      	str	r2, [r4, #16]
 8012a90:	e74f      	b.n	8012932 <WS28xxMulti::WS28xxMulti()+0x26a>
 8012a92:	2a00      	cmp	r2, #0
 8012a94:	f43f af49 	beq.w	801292a <WS28xxMulti::WS28xxMulti()+0x262>
 8012a98:	2a0d      	cmp	r2, #13
 8012a9a:	d129      	bne.n	8012af0 <WS28xxMulti::WS28xxMulti()+0x428>
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	2f06      	cmp	r7, #6
 8012aa0:	7522      	strb	r2, [r4, #20]
 8012aa2:	d100      	bne.n	8012aa6 <WS28xxMulti::WS28xxMulti()+0x3de>
 8012aa4:	6122      	str	r2, [r4, #16]
 8012aa6:	6860      	ldr	r0, [r4, #4]
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	f43f af45 	beq.w	8012938 <WS28xxMulti::WS28xxMulti()+0x270>
 8012aae:	4f2d      	ldr	r7, [pc, #180]	@ (8012b64 <WS28xxMulti::WS28xxMulti()+0x49c>)
 8012ab0:	e7b8      	b.n	8012a24 <WS28xxMulti::WS28xxMulti()+0x35c>
 8012ab2:	2e06      	cmp	r6, #6
 8012ab4:	f47f aee1 	bne.w	801287a <WS28xxMulti::WS28xxMulti()+0x1b2>
 8012ab8:	1e50      	subs	r0, r2, #1
 8012aba:	2809      	cmp	r0, #9
 8012abc:	d913      	bls.n	8012ae6 <WS28xxMulti::WS28xxMulti()+0x41e>
 8012abe:	7d67      	ldrb	r7, [r4, #21]
 8012ac0:	7da6      	ldrb	r6, [r4, #22]
 8012ac2:	2202      	movs	r2, #2
 8012ac4:	42be      	cmp	r6, r7
 8012ac6:	6122      	str	r2, [r4, #16]
 8012ac8:	f63f af00 	bhi.w	80128cc <WS28xxMulti::WS28xxMulti()+0x204>
 8012acc:	2700      	movs	r7, #0
 8012ace:	f8a4 7015 	strh.w	r7, [r4, #21]
 8012ad2:	20f0      	movs	r0, #240	@ 0xf0
 8012ad4:	75a0      	strb	r0, [r4, #22]
 8012ad6:	e6e0      	b.n	801289a <WS28xxMulti::WS28xxMulti()+0x1d2>
 8012ad8:	6067      	str	r7, [r4, #4]
 8012ada:	2000      	movs	r0, #0
 8012adc:	e731      	b.n	8012942 <WS28xxMulti::WS28xxMulti()+0x27a>
 8012ade:	2003      	movs	r0, #3
 8012ae0:	2900      	cmp	r1, #0
 8012ae2:	d1c9      	bne.n	8012a78 <WS28xxMulti::WS28xxMulti()+0x3b0>
 8012ae4:	e7c6      	b.n	8012a74 <WS28xxMulti::WS28xxMulti()+0x3ac>
 8012ae6:	4f24      	ldr	r7, [pc, #144]	@ (8012b78 <WS28xxMulti::WS28xxMulti()+0x4b0>)
 8012ae8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8012aec:	6120      	str	r0, [r4, #16]
 8012aee:	e6c4      	b.n	801287a <WS28xxMulti::WS28xxMulti()+0x1b2>
 8012af0:	2101      	movs	r1, #1
 8012af2:	2a0e      	cmp	r2, #14
 8012af4:	7521      	strb	r1, [r4, #20]
 8012af6:	d110      	bne.n	8012b1a <WS28xxMulti::WS28xxMulti()+0x452>
 8012af8:	2f06      	cmp	r7, #6
 8012afa:	7d61      	ldrb	r1, [r4, #21]
 8012afc:	f894 c016 	ldrb.w	ip, [r4, #22]
 8012b00:	60e0      	str	r0, [r4, #12]
 8012b02:	bf04      	itt	eq
 8012b04:	2702      	moveq	r7, #2
 8012b06:	6127      	streq	r7, [r4, #16]
 8012b08:	458c      	cmp	ip, r1
 8012b0a:	d8e9      	bhi.n	8012ae0 <WS28xxMulti::WS28xxMulti()+0x418>
 8012b0c:	f04f 0e00 	mov.w	lr, #0
 8012b10:	f8a4 e015 	strh.w	lr, [r4, #21]
 8012b14:	2003      	movs	r0, #3
 8012b16:	21f8      	movs	r1, #248	@ 0xf8
 8012b18:	e7ab      	b.n	8012a72 <WS28xxMulti::WS28xxMulti()+0x3aa>
 8012b1a:	2f06      	cmp	r7, #6
 8012b1c:	d19b      	bne.n	8012a56 <WS28xxMulti::WS28xxMulti()+0x38e>
 8012b1e:	1e51      	subs	r1, r2, #1
 8012b20:	2909      	cmp	r1, #9
 8012b22:	d90b      	bls.n	8012b3c <WS28xxMulti::WS28xxMulti()+0x474>
 8012b24:	7d61      	ldrb	r1, [r4, #21]
 8012b26:	7da0      	ldrb	r0, [r4, #22]
 8012b28:	2202      	movs	r2, #2
 8012b2a:	4288      	cmp	r0, r1
 8012b2c:	6122      	str	r2, [r4, #16]
 8012b2e:	d8d6      	bhi.n	8012ade <WS28xxMulti::WS28xxMulti()+0x416>
 8012b30:	2700      	movs	r7, #0
 8012b32:	f8a4 7015 	strh.w	r7, [r4, #21]
 8012b36:	2003      	movs	r0, #3
 8012b38:	21f0      	movs	r1, #240	@ 0xf0
 8012b3a:	e79a      	b.n	8012a72 <WS28xxMulti::WS28xxMulti()+0x3aa>
 8012b3c:	4f0e      	ldr	r7, [pc, #56]	@ (8012b78 <WS28xxMulti::WS28xxMulti()+0x4b0>)
 8012b3e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8012b42:	6121      	str	r1, [r4, #16]
 8012b44:	e787      	b.n	8012a56 <WS28xxMulti::WS28xxMulti()+0x38e>
 8012b46:	bf00      	nop
 8012b48:	0801cb60 	stmdaeq	r1, {r5, r6, r8, r9, fp, lr, pc}
 8012b4c:	0801caa0 	stmdaeq	r1, {r5, r7, r9, fp, lr, pc}
 8012b50:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8012b54:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 8012b58:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 8012b5c:	0801c91c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr, pc}
 8012b60:	0801caac 	stmdaeq	r1, {r2, r3, r5, r7, r9, fp, lr, pc}
 8012b64:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8012b68:	017d7840 	cmneq	sp, r0, asr #16
 8012b6c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8012b70:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8012b74:	000f4240 	andeq	r4, pc, r0, asr #4
 8012b78:	0801ee50 	stmdaeq	r1, {r4, r6, r9, sl, fp, sp, lr, pc}

08012b7c <WS28xxMulti::Blackout()>:
 8012b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b80:	4a75      	ldr	r2, [pc, #468]	@ (8012d58 <WS28xxMulti::Blackout()+0x1dc>)
 8012b82:	4976      	ldr	r1, [pc, #472]	@ (8012d5c <WS28xxMulti::Blackout()+0x1e0>)
 8012b84:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 8012d84 <WS28xxMulti::Blackout()+0x208>
 8012b88:	b087      	sub	sp, #28
 8012b8a:	4607      	mov	r7, r0
 8012b8c:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8012b90:	4873      	ldr	r0, [pc, #460]	@ (8012d60 <WS28xxMulti::Blackout()+0x1e4>)
 8012b92:	f007 fcb1 	bl	801a4f8 <printf>
 8012b96:	f3bf 8f5f 	dmb	sy
 8012b9a:	f898 3000 	ldrb.w	r3, [r8]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1f9      	bne.n	8012b96 <WS28xxMulti::Blackout()+0x1a>
 8012ba2:	4c70      	ldr	r4, [pc, #448]	@ (8012d64 <WS28xxMulti::Blackout()+0x1e8>)
 8012ba4:	6820      	ldr	r0, [r4, #0]
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	f000 80c5 	beq.w	8012d36 <WS28xxMulti::Blackout()+0x1ba>
 8012bac:	7d06      	ldrb	r6, [r0, #20]
 8012bae:	b34e      	cbz	r6, 8012c04 <WS28xxMulti::Blackout()+0x88>
 8012bb0:	4e6d      	ldr	r6, [pc, #436]	@ (8012d68 <WS28xxMulti::Blackout()+0x1ec>)
 8012bb2:	496e      	ldr	r1, [pc, #440]	@ (8012d6c <WS28xxMulti::Blackout()+0x1f0>)
 8012bb4:	f506 3480 	add.w	r4, r6, #65536	@ 0x10000
 8012bb8:	e9c6 1100 	strd	r1, r1, [r6]
 8012bbc:	e9c6 1102 	strd	r1, r1, [r6, #8]
 8012bc0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8012bc4:	3640      	adds	r6, #64	@ 0x40
 8012bc6:	42b4      	cmp	r4, r6
 8012bc8:	e946 110a 	strd	r1, r1, [r6, #-40]	@ 0x28
 8012bcc:	e946 1108 	strd	r1, r1, [r6, #-32]
 8012bd0:	e946 1106 	strd	r1, r1, [r6, #-24]
 8012bd4:	e946 1104 	strd	r1, r1, [r6, #-16]
 8012bd8:	e946 1102 	strd	r1, r1, [r6, #-8]
 8012bdc:	d1ec      	bne.n	8012bb8 <WS28xxMulti::Blackout()+0x3c>
 8012bde:	4638      	mov	r0, r7
 8012be0:	f7fe ffce 	bl	8011b80 <WS28xxMulti::Update()>
 8012be4:	f3bf 8f5f 	dmb	sy
 8012be8:	f898 7000 	ldrb.w	r7, [r8]
 8012bec:	2f00      	cmp	r7, #0
 8012bee:	d1f9      	bne.n	8012be4 <WS28xxMulti::Blackout()+0x68>
 8012bf0:	4a59      	ldr	r2, [pc, #356]	@ (8012d58 <WS28xxMulti::Blackout()+0x1dc>)
 8012bf2:	495a      	ldr	r1, [pc, #360]	@ (8012d5c <WS28xxMulti::Blackout()+0x1e0>)
 8012bf4:	485e      	ldr	r0, [pc, #376]	@ (8012d70 <WS28xxMulti::Blackout()+0x1f4>)
 8012bf6:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 8012bfa:	b007      	add	sp, #28
 8012bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c00:	f007 bc7a 	b.w	801a4f8 <printf>
 8012c04:	68c2      	ldr	r2, [r0, #12]
 8012c06:	f1a2 010b 	sub.w	r1, r2, #11
 8012c0a:	2902      	cmp	r1, #2
 8012c0c:	9104      	str	r1, [sp, #16]
 8012c0e:	f200 8085 	bhi.w	8012d1c <WS28xxMulti::Blackout()+0x1a0>
 8012c12:	f8d0 a000 	ldr.w	sl, [r0]
 8012c16:	f10a 0501 	add.w	r5, sl, #1
 8012c1a:	9505      	str	r5, [sp, #20]
 8012c1c:	4634      	mov	r4, r6
 8012c1e:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 8012c22:	2300      	movs	r3, #0
 8012c24:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012c28:	9400      	str	r4, [sp, #0]
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	4631      	mov	r1, r6
 8012c2e:	4638      	mov	r0, r7
 8012c30:	f7ff fad2 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c34:	f1ba 0f00 	cmp.w	sl, #0
 8012c38:	d05f      	beq.n	8012cfa <WS28xxMulti::Blackout()+0x17e>
 8012c3a:	f10a 33ff 	add.w	r3, sl, #4294967295	@ 0xffffffff
 8012c3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012c42:	9400      	str	r4, [sp, #0]
 8012c44:	f003 0903 	and.w	r9, r3, #3
 8012c48:	2201      	movs	r2, #1
 8012c4a:	23e0      	movs	r3, #224	@ 0xe0
 8012c4c:	4631      	mov	r1, r6
 8012c4e:	4638      	mov	r0, r7
 8012c50:	2502      	movs	r5, #2
 8012c52:	f7ff fac1 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c56:	4555      	cmp	r5, sl
 8012c58:	d84f      	bhi.n	8012cfa <WS28xxMulti::Blackout()+0x17e>
 8012c5a:	f1b9 0f00 	cmp.w	r9, #0
 8012c5e:	d025      	beq.n	8012cac <WS28xxMulti::Blackout()+0x130>
 8012c60:	f1b9 0f01 	cmp.w	r9, #1
 8012c64:	d016      	beq.n	8012c94 <WS28xxMulti::Blackout()+0x118>
 8012c66:	f1b9 0f02 	cmp.w	r9, #2
 8012c6a:	d009      	beq.n	8012c80 <WS28xxMulti::Blackout()+0x104>
 8012c6c:	462a      	mov	r2, r5
 8012c6e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012c72:	9400      	str	r4, [sp, #0]
 8012c74:	23e0      	movs	r3, #224	@ 0xe0
 8012c76:	4631      	mov	r1, r6
 8012c78:	4638      	mov	r0, r7
 8012c7a:	f7ff faad 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c7e:	2503      	movs	r5, #3
 8012c80:	462a      	mov	r2, r5
 8012c82:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012c86:	9400      	str	r4, [sp, #0]
 8012c88:	23e0      	movs	r3, #224	@ 0xe0
 8012c8a:	4631      	mov	r1, r6
 8012c8c:	4638      	mov	r0, r7
 8012c8e:	f7ff faa3 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c92:	3501      	adds	r5, #1
 8012c94:	462a      	mov	r2, r5
 8012c96:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012c9a:	9400      	str	r4, [sp, #0]
 8012c9c:	23e0      	movs	r3, #224	@ 0xe0
 8012c9e:	4631      	mov	r1, r6
 8012ca0:	4638      	mov	r0, r7
 8012ca2:	3501      	adds	r5, #1
 8012ca4:	f7ff fa98 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012ca8:	4555      	cmp	r5, sl
 8012caa:	d826      	bhi.n	8012cfa <WS28xxMulti::Blackout()+0x17e>
 8012cac:	462a      	mov	r2, r5
 8012cae:	23e0      	movs	r3, #224	@ 0xe0
 8012cb0:	4631      	mov	r1, r6
 8012cb2:	4638      	mov	r0, r7
 8012cb4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012cb8:	9400      	str	r4, [sp, #0]
 8012cba:	f7ff fa8d 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012cbe:	1c6a      	adds	r2, r5, #1
 8012cc0:	23e0      	movs	r3, #224	@ 0xe0
 8012cc2:	4631      	mov	r1, r6
 8012cc4:	4638      	mov	r0, r7
 8012cc6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012cca:	9400      	str	r4, [sp, #0]
 8012ccc:	f7ff fa84 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012cd0:	1caa      	adds	r2, r5, #2
 8012cd2:	23e0      	movs	r3, #224	@ 0xe0
 8012cd4:	4631      	mov	r1, r6
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012cdc:	9400      	str	r4, [sp, #0]
 8012cde:	f7ff fa7b 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012ce2:	1cea      	adds	r2, r5, #3
 8012ce4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012ce8:	23e0      	movs	r3, #224	@ 0xe0
 8012cea:	9400      	str	r4, [sp, #0]
 8012cec:	4631      	mov	r1, r6
 8012cee:	4638      	mov	r0, r7
 8012cf0:	3504      	adds	r5, #4
 8012cf2:	f7ff fa71 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012cf6:	4555      	cmp	r5, sl
 8012cf8:	d9d8      	bls.n	8012cac <WS28xxMulti::Blackout()+0x130>
 8012cfa:	9804      	ldr	r0, [sp, #16]
 8012cfc:	2802      	cmp	r0, #2
 8012cfe:	d015      	beq.n	8012d2c <WS28xxMulti::Blackout()+0x1b0>
 8012d00:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8012d04:	f8cd b000 	str.w	fp, [sp]
 8012d08:	23ff      	movs	r3, #255	@ 0xff
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	9a05      	ldr	r2, [sp, #20]
 8012d0e:	4638      	mov	r0, r7
 8012d10:	3601      	adds	r6, #1
 8012d12:	f7ff fa61 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012d16:	2e08      	cmp	r6, #8
 8012d18:	d183      	bne.n	8012c22 <WS28xxMulti::Blackout()+0xa6>
 8012d1a:	e760      	b.n	8012bde <WS28xxMulti::Blackout()+0x62>
 8012d1c:	b9a2      	cbnz	r2, 8012d48 <WS28xxMulti::Blackout()+0x1cc>
 8012d1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012d22:	2100      	movs	r1, #0
 8012d24:	4810      	ldr	r0, [pc, #64]	@ (8012d68 <WS28xxMulti::Blackout()+0x1ec>)
 8012d26:	f007 f903 	bl	8019f30 <memset>
 8012d2a:	e758      	b.n	8012bde <WS28xxMulti::Blackout()+0x62>
 8012d2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012d30:	9400      	str	r4, [sp, #0]
 8012d32:	2300      	movs	r3, #0
 8012d34:	e7e9      	b.n	8012d0a <WS28xxMulti::Blackout()+0x18e>
 8012d36:	480f      	ldr	r0, [pc, #60]	@ (8012d74 <WS28xxMulti::Blackout()+0x1f8>)
 8012d38:	4b0f      	ldr	r3, [pc, #60]	@ (8012d78 <WS28xxMulti::Blackout()+0x1fc>)
 8012d3a:	4a10      	ldr	r2, [pc, #64]	@ (8012d7c <WS28xxMulti::Blackout()+0x200>)
 8012d3c:	f240 110d 	movw	r1, #269	@ 0x10d
 8012d40:	f007 fcba 	bl	801a6b8 <__assert_func>
 8012d44:	6820      	ldr	r0, [r4, #0]
 8012d46:	e731      	b.n	8012bac <WS28xxMulti::Blackout()+0x30>
 8012d48:	4b0d      	ldr	r3, [pc, #52]	@ (8012d80 <WS28xxMulti::Blackout()+0x204>)
 8012d4a:	4a03      	ldr	r2, [pc, #12]	@ (8012d58 <WS28xxMulti::Blackout()+0x1dc>)
 8012d4c:	4803      	ldr	r0, [pc, #12]	@ (8012d5c <WS28xxMulti::Blackout()+0x1e0>)
 8012d4e:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8012d52:	f007 fcb1 	bl	801a6b8 <__assert_func>
 8012d56:	e7e2      	b.n	8012d1e <WS28xxMulti::Blackout()+0x1a2>
 8012d58:	0801cb88 	stmdaeq	r1, {r3, r7, r8, r9, fp, lr, pc}
 8012d5c:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8012d60:	0801c738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, lr, pc}
 8012d64:	2000007c 	andcs	r0, r0, ip, ror r0
 8012d68:	20020000 	andcs	r0, r2, r0
 8012d6c:	3fc03fc0 	svccc	0x00c03fc0
 8012d70:	0801c780 	stmdaeq	r1, {r7, r8, r9, sl, lr, pc}
 8012d74:	0801c91c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr, pc}
 8012d78:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 8012d7c:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 8012d80:	0801cb94 	stmdaeq	r1, {r2, r4, r7, r8, r9, fp, lr, pc}
 8012d84:	2000dfb8 			@ <UNDEFINED> instruction: 0x2000dfb8

08012d88 <WS28xxMulti::FullOn()>:
 8012d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8c:	4a75      	ldr	r2, [pc, #468]	@ (8012f64 <WS28xxMulti::FullOn()+0x1dc>)
 8012d8e:	4976      	ldr	r1, [pc, #472]	@ (8012f68 <WS28xxMulti::FullOn()+0x1e0>)
 8012d90:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 8012f8c <WS28xxMulti::FullOn()+0x204>
 8012d94:	b087      	sub	sp, #28
 8012d96:	4607      	mov	r7, r0
 8012d98:	f240 23e1 	movw	r3, #737	@ 0x2e1
 8012d9c:	4873      	ldr	r0, [pc, #460]	@ (8012f6c <WS28xxMulti::FullOn()+0x1e4>)
 8012d9e:	f007 fbab 	bl	801a4f8 <printf>
 8012da2:	f3bf 8f5f 	dmb	sy
 8012da6:	f898 3000 	ldrb.w	r3, [r8]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d1f9      	bne.n	8012da2 <WS28xxMulti::FullOn()+0x1a>
 8012dae:	4c70      	ldr	r4, [pc, #448]	@ (8012f70 <WS28xxMulti::FullOn()+0x1e8>)
 8012db0:	6820      	ldr	r0, [r4, #0]
 8012db2:	2800      	cmp	r0, #0
 8012db4:	f000 80c5 	beq.w	8012f42 <WS28xxMulti::FullOn()+0x1ba>
 8012db8:	7d06      	ldrb	r6, [r0, #20]
 8012dba:	b1c6      	cbz	r6, 8012dee <WS28xxMulti::FullOn()+0x66>
 8012dbc:	486d      	ldr	r0, [pc, #436]	@ (8012f74 <WS28xxMulti::FullOn()+0x1ec>)
 8012dbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	f007 f8b4 	bl	8019f30 <memset>
 8012dc8:	4638      	mov	r0, r7
 8012dca:	f7fe fed9 	bl	8011b80 <WS28xxMulti::Update()>
 8012dce:	f3bf 8f5f 	dmb	sy
 8012dd2:	f898 7000 	ldrb.w	r7, [r8]
 8012dd6:	2f00      	cmp	r7, #0
 8012dd8:	d1f9      	bne.n	8012dce <WS28xxMulti::FullOn()+0x46>
 8012dda:	4a62      	ldr	r2, [pc, #392]	@ (8012f64 <WS28xxMulti::FullOn()+0x1dc>)
 8012ddc:	4962      	ldr	r1, [pc, #392]	@ (8012f68 <WS28xxMulti::FullOn()+0x1e0>)
 8012dde:	4866      	ldr	r0, [pc, #408]	@ (8012f78 <WS28xxMulti::FullOn()+0x1f0>)
 8012de0:	f240 3315 	movw	r3, #789	@ 0x315
 8012de4:	b007      	add	sp, #28
 8012de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dea:	f007 bb85 	b.w	801a4f8 <printf>
 8012dee:	68c2      	ldr	r2, [r0, #12]
 8012df0:	f1a2 010b 	sub.w	r1, r2, #11
 8012df4:	2902      	cmp	r1, #2
 8012df6:	9104      	str	r1, [sp, #16]
 8012df8:	f200 8084 	bhi.w	8012f04 <WS28xxMulti::FullOn()+0x17c>
 8012dfc:	f8d0 a000 	ldr.w	sl, [r0]
 8012e00:	f10a 0001 	add.w	r0, sl, #1
 8012e04:	9005      	str	r0, [sp, #20]
 8012e06:	46b3      	mov	fp, r6
 8012e08:	24ff      	movs	r4, #255	@ 0xff
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8012e10:	f8cd b000 	str.w	fp, [sp]
 8012e14:	461a      	mov	r2, r3
 8012e16:	4631      	mov	r1, r6
 8012e18:	4638      	mov	r0, r7
 8012e1a:	f7ff f9dd 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e1e:	f1ba 0f00 	cmp.w	sl, #0
 8012e22:	d05f      	beq.n	8012ee4 <WS28xxMulti::FullOn()+0x15c>
 8012e24:	f10a 32ff 	add.w	r2, sl, #4294967295	@ 0xffffffff
 8012e28:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012e2c:	9400      	str	r4, [sp, #0]
 8012e2e:	f002 0903 	and.w	r9, r2, #3
 8012e32:	23e0      	movs	r3, #224	@ 0xe0
 8012e34:	2201      	movs	r2, #1
 8012e36:	4631      	mov	r1, r6
 8012e38:	4638      	mov	r0, r7
 8012e3a:	2502      	movs	r5, #2
 8012e3c:	f7ff f9cc 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e40:	4555      	cmp	r5, sl
 8012e42:	d84f      	bhi.n	8012ee4 <WS28xxMulti::FullOn()+0x15c>
 8012e44:	f1b9 0f00 	cmp.w	r9, #0
 8012e48:	d025      	beq.n	8012e96 <WS28xxMulti::FullOn()+0x10e>
 8012e4a:	f1b9 0f01 	cmp.w	r9, #1
 8012e4e:	d016      	beq.n	8012e7e <WS28xxMulti::FullOn()+0xf6>
 8012e50:	f1b9 0f02 	cmp.w	r9, #2
 8012e54:	d009      	beq.n	8012e6a <WS28xxMulti::FullOn()+0xe2>
 8012e56:	462a      	mov	r2, r5
 8012e58:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012e5c:	9400      	str	r4, [sp, #0]
 8012e5e:	23e0      	movs	r3, #224	@ 0xe0
 8012e60:	4631      	mov	r1, r6
 8012e62:	4638      	mov	r0, r7
 8012e64:	f7ff f9b8 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e68:	2503      	movs	r5, #3
 8012e6a:	462a      	mov	r2, r5
 8012e6c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012e70:	9400      	str	r4, [sp, #0]
 8012e72:	23e0      	movs	r3, #224	@ 0xe0
 8012e74:	4631      	mov	r1, r6
 8012e76:	4638      	mov	r0, r7
 8012e78:	f7ff f9ae 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e7c:	3501      	adds	r5, #1
 8012e7e:	462a      	mov	r2, r5
 8012e80:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012e84:	9400      	str	r4, [sp, #0]
 8012e86:	23e0      	movs	r3, #224	@ 0xe0
 8012e88:	4631      	mov	r1, r6
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	3501      	adds	r5, #1
 8012e8e:	f7ff f9a3 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e92:	4555      	cmp	r5, sl
 8012e94:	d826      	bhi.n	8012ee4 <WS28xxMulti::FullOn()+0x15c>
 8012e96:	462a      	mov	r2, r5
 8012e98:	23e0      	movs	r3, #224	@ 0xe0
 8012e9a:	4631      	mov	r1, r6
 8012e9c:	4638      	mov	r0, r7
 8012e9e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012ea2:	9400      	str	r4, [sp, #0]
 8012ea4:	f7ff f998 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012ea8:	1c6a      	adds	r2, r5, #1
 8012eaa:	23e0      	movs	r3, #224	@ 0xe0
 8012eac:	4631      	mov	r1, r6
 8012eae:	4638      	mov	r0, r7
 8012eb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012eb4:	9400      	str	r4, [sp, #0]
 8012eb6:	f7ff f98f 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012eba:	1caa      	adds	r2, r5, #2
 8012ebc:	23e0      	movs	r3, #224	@ 0xe0
 8012ebe:	4631      	mov	r1, r6
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012ec6:	9400      	str	r4, [sp, #0]
 8012ec8:	f7ff f986 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012ecc:	1cea      	adds	r2, r5, #3
 8012ece:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012ed2:	23e0      	movs	r3, #224	@ 0xe0
 8012ed4:	9400      	str	r4, [sp, #0]
 8012ed6:	4631      	mov	r1, r6
 8012ed8:	4638      	mov	r0, r7
 8012eda:	3504      	adds	r5, #4
 8012edc:	f7ff f97c 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012ee0:	4555      	cmp	r5, sl
 8012ee2:	d9d8      	bls.n	8012e96 <WS28xxMulti::FullOn()+0x10e>
 8012ee4:	9904      	ldr	r1, [sp, #16]
 8012ee6:	2902      	cmp	r1, #2
 8012ee8:	d025      	beq.n	8012f36 <WS28xxMulti::FullOn()+0x1ae>
 8012eea:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012eee:	9400      	str	r4, [sp, #0]
 8012ef0:	23ff      	movs	r3, #255	@ 0xff
 8012ef2:	4631      	mov	r1, r6
 8012ef4:	9a05      	ldr	r2, [sp, #20]
 8012ef6:	4638      	mov	r0, r7
 8012ef8:	3601      	adds	r6, #1
 8012efa:	f7ff f96d 	bl	80121d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012efe:	2e08      	cmp	r6, #8
 8012f00:	d183      	bne.n	8012e0a <WS28xxMulti::FullOn()+0x82>
 8012f02:	e761      	b.n	8012dc8 <WS28xxMulti::FullOn()+0x40>
 8012f04:	bb32      	cbnz	r2, 8012f54 <WS28xxMulti::FullOn()+0x1cc>
 8012f06:	4d1b      	ldr	r5, [pc, #108]	@ (8012f74 <WS28xxMulti::FullOn()+0x1ec>)
 8012f08:	23ff      	movs	r3, #255	@ 0xff
 8012f0a:	f505 3480 	add.w	r4, r5, #65536	@ 0x10000
 8012f0e:	e9c5 3300 	strd	r3, r3, [r5]
 8012f12:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8012f16:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8012f1a:	3540      	adds	r5, #64	@ 0x40
 8012f1c:	42ac      	cmp	r4, r5
 8012f1e:	e945 330a 	strd	r3, r3, [r5, #-40]	@ 0x28
 8012f22:	e945 3308 	strd	r3, r3, [r5, #-32]
 8012f26:	e945 3306 	strd	r3, r3, [r5, #-24]
 8012f2a:	e945 3304 	strd	r3, r3, [r5, #-16]
 8012f2e:	e945 3302 	strd	r3, r3, [r5, #-8]
 8012f32:	d1ec      	bne.n	8012f0e <WS28xxMulti::FullOn()+0x186>
 8012f34:	e748      	b.n	8012dc8 <WS28xxMulti::FullOn()+0x40>
 8012f36:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8012f3a:	f8cd b000 	str.w	fp, [sp]
 8012f3e:	2300      	movs	r3, #0
 8012f40:	e7d7      	b.n	8012ef2 <WS28xxMulti::FullOn()+0x16a>
 8012f42:	480e      	ldr	r0, [pc, #56]	@ (8012f7c <WS28xxMulti::FullOn()+0x1f4>)
 8012f44:	4b0e      	ldr	r3, [pc, #56]	@ (8012f80 <WS28xxMulti::FullOn()+0x1f8>)
 8012f46:	4a0f      	ldr	r2, [pc, #60]	@ (8012f84 <WS28xxMulti::FullOn()+0x1fc>)
 8012f48:	f240 110d 	movw	r1, #269	@ 0x10d
 8012f4c:	f007 fbb4 	bl	801a6b8 <__assert_func>
 8012f50:	6820      	ldr	r0, [r4, #0]
 8012f52:	e731      	b.n	8012db8 <WS28xxMulti::FullOn()+0x30>
 8012f54:	4b0c      	ldr	r3, [pc, #48]	@ (8012f88 <WS28xxMulti::FullOn()+0x200>)
 8012f56:	4a03      	ldr	r2, [pc, #12]	@ (8012f64 <WS28xxMulti::FullOn()+0x1dc>)
 8012f58:	4803      	ldr	r0, [pc, #12]	@ (8012f68 <WS28xxMulti::FullOn()+0x1e0>)
 8012f5a:	f240 3103 	movw	r1, #771	@ 0x303
 8012f5e:	f007 fbab 	bl	801a6b8 <__assert_func>
 8012f62:	e7d0      	b.n	8012f06 <WS28xxMulti::FullOn()+0x17e>
 8012f64:	0801cbb0 	stmdaeq	r1, {r4, r5, r7, r8, r9, fp, lr, pc}
 8012f68:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 8012f6c:	0801c738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, lr, pc}
 8012f70:	2000007c 	andcs	r0, r0, ip, ror r0
 8012f74:	20020000 	andcs	r0, r2, r0
 8012f78:	0801c780 	stmdaeq	r1, {r7, r8, r9, sl, lr, pc}
 8012f7c:	0801c91c 	stmdaeq	r1, {r2, r3, r4, r8, fp, lr, pc}
 8012f80:	0801c540 	stmdaeq	r1, {r6, r8, sl, lr, pc}
 8012f84:	0801c554 	stmdaeq	r1, {r2, r4, r6, r8, sl, lr, pc}
 8012f88:	0801cb94 	stmdaeq	r1, {r2, r4, r7, r8, r9, fp, lr, pc}
 8012f8c:	2000dfb8 			@ <UNDEFINED> instruction: 0x2000dfb8

08012f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8012f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f94:	290f      	cmp	r1, #15
 8012f96:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8012f9a:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8012f9e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8012fa2:	460c      	mov	r4, r1
 8012fa4:	4682      	mov	sl, r0
 8012fa6:	4691      	mov	r9, r2
 8012fa8:	461d      	mov	r5, r3
 8012faa:	f200 8086 	bhi.w	80130ba <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x12a>
 8012fae:	f8da 3000 	ldr.w	r3, [sl]
 8012fb2:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 8012fb6:	f080 808d 	bcs.w	80130d4 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x144>
 8012fba:	4a4a      	ldr	r2, [pc, #296]	@ (80130e4 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x154>)
 8012fbc:	3406      	adds	r4, #6
 8012fbe:	eb02 1189 	add.w	r1, r2, r9, lsl #6
 8012fc2:	b2e0      	uxtb	r0, r4
 8012fc4:	f101 7488 	add.w	r4, r1, #17825792	@ 0x1100000
 8012fc8:	3430      	adds	r4, #48	@ 0x30
 8012fca:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8012fce:	f10c 0080 	add.w	r0, ip, #128	@ 0x80
 8012fd2:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8012fd6:	ebaa 098c 	sub.w	r9, sl, ip, lsl #2
 8012fda:	4663      	mov	r3, ip
 8012fdc:	ea5f 6049 	movs.w	r0, r9, lsl #25
 8012fe0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012fe4:	f04f 0400 	mov.w	r4, #0
 8012fe8:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8012fec:	f04f 0e01 	mov.w	lr, #1
 8012ff0:	d53a      	bpl.n	8013068 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd8>
 8012ff2:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 8012ff6:	0631      	lsls	r1, r6, #24
 8012ff8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8012ffc:	bf4c      	ite	mi
 8012ffe:	f8cc 4000 	strmi.w	r4, [ip]
 8013002:	f8cc e000 	strpl.w	lr, [ip]
 8013006:	f5a2 7300 	sub.w	r3, r2, #512	@ 0x200
 801300a:	0628      	lsls	r0, r5, #24
 801300c:	bf4c      	ite	mi
 801300e:	600c      	strmi	r4, [r1, #0]
 8013010:	f8c1 e000 	strpl.w	lr, [r1]
 8013014:	0639      	lsls	r1, r7, #24
 8013016:	bf4c      	ite	mi
 8013018:	601c      	strmi	r4, [r3, #0]
 801301a:	f8c3 e000 	strpl.w	lr, [r3]
 801301e:	f018 0f80 	tst.w	r8, #128	@ 0x80
 8013022:	bf14      	ite	ne
 8013024:	6014      	strne	r4, [r2, #0]
 8013026:	f8c2 e000 	streq.w	lr, [r2]
 801302a:	2340      	movs	r3, #64	@ 0x40
 801302c:	3240      	adds	r2, #64	@ 0x40
 801302e:	e019      	b.n	8013064 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd4>
 8013030:	f8c2 e000 	str.w	lr, [r2]
 8013034:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8013038:	4229      	tst	r1, r5
 801303a:	f5a0 7900 	sub.w	r9, r0, #512	@ 0x200
 801303e:	bf14      	ite	ne
 8013040:	601c      	strne	r4, [r3, #0]
 8013042:	f8c3 e000 	streq.w	lr, [r3]
 8013046:	4239      	tst	r1, r7
 8013048:	bf14      	ite	ne
 801304a:	f8c9 4000 	strne.w	r4, [r9]
 801304e:	f8c9 e000 	streq.w	lr, [r9]
 8013052:	ea11 0f08 	tst.w	r1, r8
 8013056:	bf14      	ite	ne
 8013058:	6004      	strne	r4, [r0, #0]
 801305a:	f8c0 e000 	streq.w	lr, [r0]
 801305e:	f100 0240 	add.w	r2, r0, #64	@ 0x40
 8013062:	084b      	lsrs	r3, r1, #1
 8013064:	4552      	cmp	r2, sl
 8013066:	d026      	beq.n	80130b6 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x126>
 8013068:	f5a2 60c0 	sub.w	r0, r2, #1536	@ 0x600
 801306c:	4233      	tst	r3, r6
 801306e:	f5a2 6980 	sub.w	r9, r2, #1024	@ 0x400
 8013072:	bf0c      	ite	eq
 8013074:	f8c0 e000 	streq.w	lr, [r0]
 8013078:	6004      	strne	r4, [r0, #0]
 801307a:	f5a2 7c00 	sub.w	ip, r2, #512	@ 0x200
 801307e:	422b      	tst	r3, r5
 8013080:	bf0c      	ite	eq
 8013082:	f8c9 e000 	streq.w	lr, [r9]
 8013086:	f8c9 4000 	strne.w	r4, [r9]
 801308a:	423b      	tst	r3, r7
 801308c:	bf0c      	ite	eq
 801308e:	f8cc e000 	streq.w	lr, [ip]
 8013092:	f8cc 4000 	strne.w	r4, [ip]
 8013096:	ea13 0f08 	tst.w	r3, r8
 801309a:	bf0c      	ite	eq
 801309c:	f8c2 e000 	streq.w	lr, [r2]
 80130a0:	6014      	strne	r4, [r2, #0]
 80130a2:	0859      	lsrs	r1, r3, #1
 80130a4:	ea16 0353 	ands.w	r3, r6, r3, lsr #1
 80130a8:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 80130ac:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 80130b0:	d0be      	beq.n	8013030 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa0>
 80130b2:	6014      	str	r4, [r2, #0]
 80130b4:	e7be      	b.n	8013034 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
 80130b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130ba:	4b0b      	ldr	r3, [pc, #44]	@ (80130e8 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>)
 80130bc:	4a0b      	ldr	r2, [pc, #44]	@ (80130ec <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 80130be:	480c      	ldr	r0, [pc, #48]	@ (80130f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 80130c0:	f240 3187 	movw	r1, #903	@ 0x387
 80130c4:	f007 faf8 	bl	801a6b8 <__assert_func>
 80130c8:	f8da 3000 	ldr.w	r3, [sl]
 80130cc:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 80130d0:	f4ff af73 	bcc.w	8012fba <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 80130d4:	4b07      	ldr	r3, [pc, #28]	@ (80130f4 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 80130d6:	4a05      	ldr	r2, [pc, #20]	@ (80130ec <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 80130d8:	4805      	ldr	r0, [pc, #20]	@ (80130f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 80130da:	f44f 7162 	mov.w	r1, #904	@ 0x388
 80130de:	f007 faeb 	bl	801a6b8 <__assert_func>
 80130e2:	e76a      	b.n	8012fba <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 80130e4:	20020000 	andcs	r0, r2, r0
 80130e8:	0801c9c0 	stmdaeq	r1, {r6, r7, r8, fp, lr, pc}
 80130ec:	0801c9b0 	stmdaeq	r1, {r4, r5, r7, r8, fp, lr, pc}
 80130f0:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 80130f4:	0801c9e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, lr, pc}

080130f8 <memcpy.isra.0>:
 80130f8:	440a      	add	r2, r1
 80130fa:	4291      	cmp	r1, r2
 80130fc:	d100      	bne.n	8013100 <memcpy.isra.0+0x8>
 80130fe:	4770      	bx	lr
 8013100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013104:	f800 3b01 	strb.w	r3, [r0], #1
 8013108:	e7f7      	b.n	80130fa <memcpy.isra.0+0x2>

0801310a <strlen>:
 801310a:	4603      	mov	r3, r0
 801310c:	461a      	mov	r2, r3
 801310e:	3301      	adds	r3, #1
 8013110:	7811      	ldrb	r1, [r2, #0]
 8013112:	2900      	cmp	r1, #0
 8013114:	d1fa      	bne.n	801310c <strlen+0x2>
 8013116:	1a10      	subs	r0, r2, r0
 8013118:	4770      	bx	lr
	...

0801311c <mdns::Domain::AddDotLocal()>:
 801311c:	b510      	push	{r4, lr}
 801311e:	4604      	mov	r4, r0
 8013120:	f8b0 0100 	ldrh.w	r0, [r0, #256]	@ 0x100
 8013124:	4905      	ldr	r1, [pc, #20]	@ (801313c <mdns::Domain::AddDotLocal()+0x20>)
 8013126:	2207      	movs	r2, #7
 8013128:	4420      	add	r0, r4
 801312a:	f7ff ffe5 	bl	80130f8 <memcpy.isra.0>
 801312e:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 8013132:	3307      	adds	r3, #7
 8013134:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8013138:	bd10      	pop	{r4, pc}
 801313a:	bf00      	nop
 801313c:	0801f076 	stmdaeq	r1, {r1, r2, r4, r5, r6, ip, sp, lr, pc}

08013140 <create_host_domain(mdns::Domain&)>:
 8013140:	2300      	movs	r3, #0
 8013142:	b570      	push	{r4, r5, r6, lr}
 8013144:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 8013148:	4b0c      	ldr	r3, [pc, #48]	@ (801317c <create_host_domain(mdns::Domain&)+0x3c>)
 801314a:	681e      	ldr	r6, [r3, #0]
 801314c:	3616      	adds	r6, #22
 801314e:	4604      	mov	r4, r0
 8013150:	4630      	mov	r0, r6
 8013152:	f7ff ffda 	bl	801310a <strlen>
 8013156:	2301      	movs	r3, #1
 8013158:	7020      	strb	r0, [r4, #0]
 801315a:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 801315e:	4602      	mov	r2, r0
 8013160:	4605      	mov	r5, r0
 8013162:	4631      	mov	r1, r6
 8013164:	18e0      	adds	r0, r4, r3
 8013166:	f7ff ffc7 	bl	80130f8 <memcpy.isra.0>
 801316a:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 801316e:	441d      	add	r5, r3
 8013170:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
 8013174:	4620      	mov	r0, r4
 8013176:	f7ff ffd1 	bl	801311c <mdns::Domain::AddDotLocal()>
 801317a:	bd70      	pop	{r4, r5, r6, pc}
 801317c:	2000e200 	andcs	lr, r0, r0, lsl #4

08013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>:
 8013180:	2300      	movs	r3, #0
 8013182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013186:	4604      	mov	r4, r0
 8013188:	460e      	mov	r6, r1
 801318a:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801318e:	b1aa      	cbz	r2, 80131bc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x3c>
 8013190:	680f      	ldr	r7, [r1, #0]
 8013192:	f100 0801 	add.w	r8, r0, #1
 8013196:	b3b7      	cbz	r7, 8013206 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x86>
 8013198:	4638      	mov	r0, r7
 801319a:	f7ff ffb6 	bl	801310a <strlen>
 801319e:	2301      	movs	r3, #1
 80131a0:	4605      	mov	r5, r0
 80131a2:	7020      	strb	r0, [r4, #0]
 80131a4:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 80131a8:	4602      	mov	r2, r0
 80131aa:	4639      	mov	r1, r7
 80131ac:	4640      	mov	r0, r8
 80131ae:	f7ff ffa3 	bl	80130f8 <memcpy.isra.0>
 80131b2:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 80131b6:	441d      	add	r5, r3
 80131b8:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
 80131bc:	4b15      	ldr	r3, [pc, #84]	@ (8013214 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x94>)
 80131be:	68f6      	ldr	r6, [r6, #12]
 80131c0:	f8b4 0100 	ldrh.w	r0, [r4, #256]	@ 0x100
 80131c4:	0131      	lsls	r1, r6, #4
 80131c6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 80131ca:	5859      	ldr	r1, [r3, r1]
 80131cc:	88b5      	ldrh	r5, [r6, #4]
 80131ce:	4420      	add	r0, r4
 80131d0:	462a      	mov	r2, r5
 80131d2:	f7ff ff91 	bl	80130f8 <memcpy.isra.0>
 80131d6:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 80131da:	18e8      	adds	r0, r5, r3
 80131dc:	68b3      	ldr	r3, [r6, #8]
 80131de:	b280      	uxth	r0, r0
 80131e0:	f8a4 0100 	strh.w	r0, [r4, #256]	@ 0x100
 80131e4:	2205      	movs	r2, #5
 80131e6:	4420      	add	r0, r4
 80131e8:	b98b      	cbnz	r3, 801320e <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x8e>
 80131ea:	490b      	ldr	r1, [pc, #44]	@ (8013218 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x98>)
 80131ec:	f7ff ff84 	bl	80130f8 <memcpy.isra.0>
 80131f0:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 80131f4:	3305      	adds	r3, #5
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 80131fc:	4620      	mov	r0, r4
 80131fe:	f7ff ff8d 	bl	801311c <mdns::Domain::AddDotLocal()>
 8013202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013206:	4b05      	ldr	r3, [pc, #20]	@ (801321c <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x9c>)
 8013208:	681f      	ldr	r7, [r3, #0]
 801320a:	3716      	adds	r7, #22
 801320c:	e7c4      	b.n	8013198 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x18>
 801320e:	4904      	ldr	r1, [pc, #16]	@ (8013220 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xa0>)
 8013210:	e7ec      	b.n	80131ec <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x6c>
 8013212:	bf00      	nop
 8013214:	0801ef9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, sp, lr, pc}
 8013218:	0801f071 	stmdaeq	r1, {r0, r4, r5, r6, ip, sp, lr, pc}
 801321c:	2000e200 	andcs	lr, r0, r0, lsl #4
 8013220:	0801f06c 	stmdaeq	r1, {r2, r3, r5, r6, ip, sp, lr, pc}

08013224 <mdns::Domain::Print(bool)>:
 8013224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013228:	4605      	mov	r5, r0
 801322a:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8013268 <mdns::Domain::Print(bool)+0x44>
 801322e:	2020      	movs	r0, #32
 8013230:	460e      	mov	r6, r1
 8013232:	f007 f9b1 	bl	801a598 <putchar>
 8013236:	462a      	mov	r2, r5
 8013238:	7817      	ldrb	r7, [r2, #0]
 801323a:	b92f      	cbnz	r7, 8013248 <mdns::Domain::Print(bool)+0x24>
 801323c:	b18e      	cbz	r6, 8013262 <mdns::Domain::Print(bool)+0x3e>
 801323e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013242:	200a      	movs	r0, #10
 8013244:	f007 b9a8 	b.w	801a598 <putchar>
 8013248:	f8b5 3100 	ldrh.w	r3, [r5, #256]	@ 0x100
 801324c:	442b      	add	r3, r5
 801324e:	429a      	cmp	r2, r3
 8013250:	d2f4      	bcs.n	801323c <mdns::Domain::Print(bool)+0x18>
 8013252:	1c54      	adds	r4, r2, #1
 8013254:	4622      	mov	r2, r4
 8013256:	4639      	mov	r1, r7
 8013258:	4640      	mov	r0, r8
 801325a:	f007 f94d 	bl	801a4f8 <printf>
 801325e:	19e2      	adds	r2, r4, r7
 8013260:	e7ea      	b.n	8013238 <mdns::Domain::Print(bool)+0x14>
 8013262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013266:	bf00      	nop
 8013268:	0801bac3 	stmdaeq	r1, {r0, r1, r6, r7, r9, fp, ip, sp, pc}

0801326c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>:
 801326c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	@ 0x100
 8013270:	f8b1 3100 	ldrh.w	r3, [r1, #256]	@ 0x100
 8013274:	4293      	cmp	r3, r2
 8013276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801327a:	d127      	bne.n	80132cc <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 801327c:	18c2      	adds	r2, r0, r3
 801327e:	7803      	ldrb	r3, [r0, #0]
 8013280:	b11b      	cbz	r3, 801328a <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x1e>
 8013282:	780c      	ldrb	r4, [r1, #0]
 8013284:	b10c      	cbz	r4, 801328a <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x1e>
 8013286:	4290      	cmp	r0, r2
 8013288:	d301      	bcc.n	801328e <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x22>
 801328a:	2001      	movs	r0, #1
 801328c:	e01f      	b.n	80132ce <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x62>
 801328e:	42a3      	cmp	r3, r4
 8013290:	d11c      	bne.n	80132cc <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 8013292:	4684      	mov	ip, r0
 8013294:	460f      	mov	r7, r1
 8013296:	461e      	mov	r6, r3
 8013298:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 801329c:	f1a4 0541 	sub.w	r5, r4, #65	@ 0x41
 80132a0:	2d19      	cmp	r5, #25
 80132a2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80132a6:	f1a5 0841 	sub.w	r8, r5, #65	@ 0x41
 80132aa:	46a6      	mov	lr, r4
 80132ac:	bf98      	it	ls
 80132ae:	f104 0e20 	addls.w	lr, r4, #32
 80132b2:	f1b8 0f19 	cmp.w	r8, #25
 80132b6:	bf98      	it	ls
 80132b8:	3520      	addls	r5, #32
 80132ba:	4575      	cmp	r5, lr
 80132bc:	d106      	bne.n	80132cc <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 80132be:	b10c      	cbz	r4, 80132c4 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x58>
 80132c0:	3e01      	subs	r6, #1
 80132c2:	d1e9      	bne.n	8013298 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x2c>
 80132c4:	3301      	adds	r3, #1
 80132c6:	4418      	add	r0, r3
 80132c8:	4419      	add	r1, r3
 80132ca:	e7d8      	b.n	801327e <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x12>
 80132cc:	2000      	movs	r0, #0
 80132ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132d2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)>:
 80132d2:	f892 c000 	ldrb.w	ip, [r2]
 80132d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132da:	ea6f 050c 	mvn.w	r5, ip
 80132de:	4606      	mov	r6, r0
 80132e0:	440d      	add	r5, r1
 80132e2:	42b5      	cmp	r5, r6
 80132e4:	4628      	mov	r0, r5
 80132e6:	d201      	bcs.n	80132ec <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1a>
 80132e8:	2000      	movs	r0, #0
 80132ea:	e040      	b.n	801336e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x9c>
 80132ec:	7803      	ldrb	r3, [r0, #0]
 80132ee:	4563      	cmp	r3, ip
 80132f0:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 80132f4:	d1f5      	bne.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80132f6:	78ac      	ldrb	r4, [r5, #2]
 80132f8:	7853      	ldrb	r3, [r2, #1]
 80132fa:	429c      	cmp	r4, r3
 80132fc:	d1f1      	bne.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80132fe:	4604      	mov	r4, r0
 8013300:	4617      	mov	r7, r2
 8013302:	e018      	b.n	8013336 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x64>
 8013304:	4573      	cmp	r3, lr
 8013306:	db27      	blt.n	8013358 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x86>
 8013308:	e7eb      	b.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801330a:	2b3f      	cmp	r3, #63	@ 0x3f
 801330c:	d913      	bls.n	8013336 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x64>
 801330e:	2bbf      	cmp	r3, #191	@ 0xbf
 8013310:	d9e7      	bls.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 8013312:	f104 0e01 	add.w	lr, r4, #1
 8013316:	4571      	cmp	r1, lr
 8013318:	d9e3      	bls.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801331a:	f894 e001 	ldrb.w	lr, [r4, #1]
 801331e:	021b      	lsls	r3, r3, #8
 8013320:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8013324:	4473      	add	r3, lr
 8013326:	eb06 0e03 	add.w	lr, r6, r3
 801332a:	4574      	cmp	r4, lr
 801332c:	d3d9      	bcc.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801332e:	5cf3      	ldrb	r3, [r6, r3]
 8013330:	2b3f      	cmp	r3, #63	@ 0x3f
 8013332:	d8d6      	bhi.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 8013334:	4674      	mov	r4, lr
 8013336:	783b      	ldrb	r3, [r7, #0]
 8013338:	eb04 0e03 	add.w	lr, r4, r3
 801333c:	4571      	cmp	r1, lr
 801333e:	d9d0      	bls.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 8013340:	f04f 0e00 	mov.w	lr, #0
 8013344:	f814 900e 	ldrb.w	r9, [r4, lr]
 8013348:	f817 800e 	ldrb.w	r8, [r7, lr]
 801334c:	45c1      	cmp	r9, r8
 801334e:	d1d9      	bne.n	8013304 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x32>
 8013350:	f10e 0e01 	add.w	lr, lr, #1
 8013354:	4573      	cmp	r3, lr
 8013356:	daf5      	bge.n	8013344 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x72>
 8013358:	3301      	adds	r3, #1
 801335a:	441f      	add	r7, r3
 801335c:	441c      	add	r4, r3
 801335e:	f897 e000 	ldrb.w	lr, [r7]
 8013362:	7823      	ldrb	r3, [r4, #0]
 8013364:	f1be 0f00 	cmp.w	lr, #0
 8013368:	d1cf      	bne.n	801330a <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x38>
 801336a:	2b00      	cmp	r3, #0
 801336c:	d1b9      	bne.n	80132e2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801336e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>:
 8013374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013376:	460a      	mov	r2, r1
 8013378:	4606      	mov	r6, r0
 801337a:	4605      	mov	r5, r0
 801337c:	7814      	ldrb	r4, [r2, #0]
 801337e:	b91c      	cbnz	r4, 8013388 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x14>
 8013380:	4628      	mov	r0, r5
 8013382:	f800 4b01 	strb.w	r4, [r0], #1
 8013386:	e00e      	b.n	80133a6 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x32>
 8013388:	4810      	ldr	r0, [pc, #64]	@ (80133cc <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x58>)
 801338a:	4631      	mov	r1, r6
 801338c:	f7ff ffa1 	bl	80132d2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)>
 8013390:	b150      	cbz	r0, 80133a8 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x34>
 8013392:	4b0e      	ldr	r3, [pc, #56]	@ (80133cc <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x58>)
 8013394:	1ac3      	subs	r3, r0, r3
 8013396:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801339a:	4628      	mov	r0, r5
 801339c:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 80133a0:	f800 2b02 	strb.w	r2, [r0], #2
 80133a4:	706b      	strb	r3, [r5, #1]
 80133a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a8:	462b      	mov	r3, r5
 80133aa:	3201      	adds	r2, #1
 80133ac:	f803 4b01 	strb.w	r4, [r3], #1
 80133b0:	4617      	mov	r7, r2
 80133b2:	4618      	mov	r0, r3
 80133b4:	f817 1b01 	ldrb.w	r1, [r7], #1
 80133b8:	f800 1b01 	strb.w	r1, [r0], #1
 80133bc:	1b41      	subs	r1, r0, r5
 80133be:	3901      	subs	r1, #1
 80133c0:	42a1      	cmp	r1, r4
 80133c2:	d3f7      	bcc.n	80133b4 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x40>
 80133c4:	4422      	add	r2, r4
 80133c6:	191d      	adds	r5, r3, r4
 80133c8:	e7d8      	b.n	801337c <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x8>
 80133ca:	bf00      	nop
 80133cc:	2000dfd5 	ldrdcs	sp, [r0], -r5

080133d0 <add_answer_a(unsigned char*, unsigned long)>:
 80133d0:	b530      	push	{r4, r5, lr}
 80133d2:	b0c3      	sub	sp, #268	@ 0x10c
 80133d4:	4605      	mov	r5, r0
 80133d6:	a801      	add	r0, sp, #4
 80133d8:	460c      	mov	r4, r1
 80133da:	f7ff feb1 	bl	8013140 <create_host_domain(mdns::Domain&)>
 80133de:	a901      	add	r1, sp, #4
 80133e0:	4628      	mov	r0, r5
 80133e2:	f7ff ffc7 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 80133e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80133ea:	8003      	strh	r3, [r0, #0]
 80133ec:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80133f0:	8043      	strh	r3, [r0, #2]
 80133f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80133f6:	8103      	strh	r3, [r0, #8]
 80133f8:	4b04      	ldr	r3, [pc, #16]	@ (801340c <add_answer_a(unsigned char*, unsigned long)+0x3c>)
 80133fa:	ba24      	rev	r4, r4
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	6044      	str	r4, [r0, #4]
 8013400:	f8c0 300a 	str.w	r3, [r0, #10]
 8013404:	300e      	adds	r0, #14
 8013406:	1b40      	subs	r0, r0, r5
 8013408:	b043      	add	sp, #268	@ 0x10c
 801340a:	bd30      	pop	{r4, r5, pc}
 801340c:	2000e220 	andcs	lr, r0, r0, lsr #4

08013410 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]>:
 8013410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013412:	4e11      	ldr	r6, [pc, #68]	@ (8013458 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]+0x48>)
 8013414:	b0c3      	sub	sp, #268	@ 0x10c
 8013416:	4607      	mov	r7, r0
 8013418:	460d      	mov	r5, r1
 801341a:	4630      	mov	r0, r6
 801341c:	490f      	ldr	r1, [pc, #60]	@ (801345c <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]+0x4c>)
 801341e:	f7ff ffa9 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013422:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8013426:	8003      	strh	r3, [r0, #0]
 8013428:	ba2d      	rev	r5, r5
 801342a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801342e:	8043      	strh	r3, [r0, #2]
 8013430:	4604      	mov	r4, r0
 8013432:	6045      	str	r5, [r0, #4]
 8013434:	2200      	movs	r2, #0
 8013436:	f100 050a 	add.w	r5, r0, #10
 801343a:	4639      	mov	r1, r7
 801343c:	a801      	add	r0, sp, #4
 801343e:	f7ff fe9f 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013442:	a901      	add	r1, sp, #4
 8013444:	4628      	mov	r0, r5
 8013446:	f7ff ff95 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 801344a:	1b45      	subs	r5, r0, r5
 801344c:	ba6d      	rev16	r5, r5
 801344e:	1b80      	subs	r0, r0, r6
 8013450:	8125      	strh	r5, [r4, #8]
 8013452:	b043      	add	sp, #268	@ 0x10c
 8013454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013456:	bf00      	nop
 8013458:	2000dfe1 	andcs	sp, r0, r1, ror #31
 801345c:	0801ee98 	stmdaeq	r1, {r3, r4, r7, r9, sl, fp, sp, lr, pc}

08013460 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 8013460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013462:	b0c3      	sub	sp, #268	@ 0x10c
 8013464:	460e      	mov	r6, r1
 8013466:	4607      	mov	r7, r0
 8013468:	4601      	mov	r1, r0
 801346a:	4615      	mov	r5, r2
 801346c:	a801      	add	r0, sp, #4
 801346e:	2201      	movs	r2, #1
 8013470:	f7ff fe86 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013474:	a901      	add	r1, sp, #4
 8013476:	4630      	mov	r0, r6
 8013478:	f7ff ff7c 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 801347c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8013480:	8003      	strh	r3, [r0, #0]
 8013482:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013486:	8043      	strh	r3, [r0, #2]
 8013488:	2300      	movs	r3, #0
 801348a:	f8c0 300a 	str.w	r3, [r0, #10]
 801348e:	ba2d      	rev	r5, r5
 8013490:	897b      	ldrh	r3, [r7, #10]
 8013492:	81c3      	strh	r3, [r0, #14]
 8013494:	4604      	mov	r4, r0
 8013496:	6045      	str	r5, [r0, #4]
 8013498:	f100 0510 	add.w	r5, r0, #16
 801349c:	a801      	add	r0, sp, #4
 801349e:	f7ff fe4f 	bl	8013140 <create_host_domain(mdns::Domain&)>
 80134a2:	a901      	add	r1, sp, #4
 80134a4:	4628      	mov	r0, r5
 80134a6:	f7ff ff65 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 80134aa:	1d83      	adds	r3, r0, #6
 80134ac:	1b5b      	subs	r3, r3, r5
 80134ae:	ba5b      	rev16	r3, r3
 80134b0:	1b80      	subs	r0, r0, r6
 80134b2:	8123      	strh	r3, [r4, #8]
 80134b4:	b043      	add	sp, #268	@ 0x10c
 80134b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134b8 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 80134b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134ba:	b0c3      	sub	sp, #268	@ 0x10c
 80134bc:	460e      	mov	r6, r1
 80134be:	4607      	mov	r7, r0
 80134c0:	4601      	mov	r1, r0
 80134c2:	4615      	mov	r5, r2
 80134c4:	a801      	add	r0, sp, #4
 80134c6:	2200      	movs	r2, #0
 80134c8:	f7ff fe5a 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80134cc:	a901      	add	r1, sp, #4
 80134ce:	4630      	mov	r0, r6
 80134d0:	f7ff ff50 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 80134d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80134d8:	8003      	strh	r3, [r0, #0]
 80134da:	ba2d      	rev	r5, r5
 80134dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80134e0:	8043      	strh	r3, [r0, #2]
 80134e2:	4604      	mov	r4, r0
 80134e4:	6045      	str	r5, [r0, #4]
 80134e6:	2201      	movs	r2, #1
 80134e8:	f100 050a 	add.w	r5, r0, #10
 80134ec:	4639      	mov	r1, r7
 80134ee:	a801      	add	r0, sp, #4
 80134f0:	f7ff fe46 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80134f4:	a901      	add	r1, sp, #4
 80134f6:	4628      	mov	r0, r5
 80134f8:	f7ff ff3c 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 80134fc:	1b45      	subs	r5, r0, r5
 80134fe:	ba6d      	rev16	r5, r5
 8013500:	1b80      	subs	r0, r0, r6
 8013502:	8125      	strh	r5, [r4, #8]
 8013504:	b043      	add	sp, #268	@ 0x10c
 8013506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013508 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 8013508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801350a:	b0c3      	sub	sp, #268	@ 0x10c
 801350c:	4604      	mov	r4, r0
 801350e:	460e      	mov	r6, r1
 8013510:	4615      	mov	r5, r2
 8013512:	4601      	mov	r1, r0
 8013514:	2201      	movs	r2, #1
 8013516:	a801      	add	r0, sp, #4
 8013518:	f7ff fe32 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 801351c:	a901      	add	r1, sp, #4
 801351e:	4630      	mov	r0, r6
 8013520:	f7ff ff28 	bl	8013374 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013524:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013528:	8002      	strh	r2, [r0, #0]
 801352a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 801352e:	8042      	strh	r2, [r0, #2]
 8013530:	6862      	ldr	r2, [r4, #4]
 8013532:	ba2d      	rev	r5, r5
 8013534:	6045      	str	r5, [r0, #4]
 8013536:	f100 050b 	add.w	r5, r0, #11
 801353a:	b932      	cbnz	r2, 801354a <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)+0x42>
 801353c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013540:	8101      	strh	r1, [r0, #8]
 8013542:	7282      	strb	r2, [r0, #10]
 8013544:	1ba8      	subs	r0, r5, r6
 8013546:	b043      	add	sp, #268	@ 0x10c
 8013548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801354a:	8927      	ldrh	r7, [r4, #8]
 801354c:	7287      	strb	r7, [r0, #10]
 801354e:	1c7a      	adds	r2, r7, #1
 8013550:	ba52      	rev16	r2, r2
 8013552:	8102      	strh	r2, [r0, #8]
 8013554:	8922      	ldrh	r2, [r4, #8]
 8013556:	6861      	ldr	r1, [r4, #4]
 8013558:	4628      	mov	r0, r5
 801355a:	f7ff fdcd 	bl	80130f8 <memcpy.isra.0>
 801355e:	443d      	add	r5, r7
 8013560:	e7f0      	b.n	8013544 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)+0x3c>

08013562 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)>:
 8013562:	4281      	cmp	r1, r0
 8013564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013568:	4606      	mov	r6, r0
 801356a:	d310      	bcc.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 801356c:	4291      	cmp	r1, r2
 801356e:	d20e      	bcs.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013570:	2500      	movs	r5, #0
 8013572:	f503 7c80 	add.w	ip, r3, #256	@ 0x100
 8013576:	701d      	strb	r5, [r3, #0]
 8013578:	4608      	mov	r0, r1
 801357a:	4607      	mov	r7, r0
 801357c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8013580:	b38c      	cbz	r4, 80135e6 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x84>
 8013582:	f004 01c0 	and.w	r1, r4, #192	@ 0xc0
 8013586:	2980      	cmp	r1, #128	@ 0x80
 8013588:	d001      	beq.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 801358a:	d803      	bhi.n	8013594 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x32>
 801358c:	b199      	cbz	r1, 80135b6 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x54>
 801358e:	2000      	movs	r0, #0
 8013590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013594:	29c0      	cmp	r1, #192	@ 0xc0
 8013596:	d1f0      	bne.n	801357a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x18>
 8013598:	7800      	ldrb	r0, [r0, #0]
 801359a:	0224      	lsls	r4, r4, #8
 801359c:	f404 547c 	and.w	r4, r4, #16128	@ 0x3f00
 80135a0:	4320      	orrs	r0, r4
 80135a2:	b905      	cbnz	r5, 80135a6 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x44>
 80135a4:	1cbd      	adds	r5, r7, #2
 80135a6:	1831      	adds	r1, r6, r0
 80135a8:	d2f1      	bcs.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 80135aa:	428a      	cmp	r2, r1
 80135ac:	d9ef      	bls.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 80135ae:	5c30      	ldrb	r0, [r6, r0]
 80135b0:	283f      	cmp	r0, #63	@ 0x3f
 80135b2:	d9e1      	bls.n	8013578 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x16>
 80135b4:	e7eb      	b.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 80135b6:	1901      	adds	r1, r0, r4
 80135b8:	4291      	cmp	r1, r2
 80135ba:	d2e8      	bcs.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 80135bc:	1c67      	adds	r7, r4, #1
 80135be:	441f      	add	r7, r3
 80135c0:	4567      	cmp	r7, ip
 80135c2:	d2e4      	bcs.n	801358e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 80135c4:	469e      	mov	lr, r3
 80135c6:	f80e 4b01 	strb.w	r4, [lr], #1
 80135ca:	f810 8b01 	ldrb.w	r8, [r0], #1
 80135ce:	f80e 8b01 	strb.w	r8, [lr], #1
 80135d2:	ebae 0803 	sub.w	r8, lr, r3
 80135d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80135da:	4544      	cmp	r4, r8
 80135dc:	dcf5      	bgt.n	80135ca <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x68>
 80135de:	2300      	movs	r3, #0
 80135e0:	703b      	strb	r3, [r7, #0]
 80135e2:	463b      	mov	r3, r7
 80135e4:	e7c8      	b.n	8013578 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x16>
 80135e6:	2d00      	cmp	r5, #0
 80135e8:	bf18      	it	ne
 80135ea:	4628      	movne	r0, r5
 80135ec:	e7d0      	b.n	8013590 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2e>
	...

080135f0 <MDNS::SendTo(unsigned long)>:
 80135f0:	4b0d      	ldr	r3, [pc, #52]	@ (8013628 <MDNS::SendTo(unsigned long)+0x38>)
 80135f2:	b513      	push	{r0, r1, r4, lr}
 80135f4:	6818      	ldr	r0, [r3, #0]
 80135f6:	4b0d      	ldr	r3, [pc, #52]	@ (801362c <MDNS::SendTo(unsigned long)+0x3c>)
 80135f8:	460a      	mov	r2, r1
 80135fa:	6819      	ldr	r1, [r3, #0]
 80135fc:	4b0c      	ldr	r3, [pc, #48]	@ (8013630 <MDNS::SendTo(unsigned long)+0x40>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	b94b      	cbnz	r3, 8013616 <MDNS::SendTo(unsigned long)+0x26>
 8013602:	b131      	cbz	r1, 8013612 <MDNS::SendTo(unsigned long)+0x22>
 8013604:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	4b0a      	ldr	r3, [pc, #40]	@ (8013634 <MDNS::SendTo(unsigned long)+0x44>)
 801360c:	490a      	ldr	r1, [pc, #40]	@ (8013638 <MDNS::SendTo(unsigned long)+0x48>)
 801360e:	f001 fdc5 	bl	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 8013612:	b002      	add	sp, #8
 8013614:	bd10      	pop	{r4, pc}
 8013616:	4b09      	ldr	r3, [pc, #36]	@ (801363c <MDNS::SendTo(unsigned long)+0x4c>)
 8013618:	4c09      	ldr	r4, [pc, #36]	@ (8013640 <MDNS::SendTo(unsigned long)+0x50>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	8824      	ldrh	r4, [r4, #0]
 801361e:	2900      	cmp	r1, #0
 8013620:	d0f7      	beq.n	8013612 <MDNS::SendTo(unsigned long)+0x22>
 8013622:	9400      	str	r4, [sp, #0]
 8013624:	e7f2      	b.n	801360c <MDNS::SendTo(unsigned long)+0x1c>
 8013626:	bf00      	nop
 8013628:	2000dfd0 	ldrdcs	sp, [r0], -r0
 801362c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8013630:	2000dfd4 	ldrdcs	sp, [r0], -r4
 8013634:	fb0000e0 	blx	80139be <MDNS::HandleQuestions(unsigned long)+0x8a>
 8013638:	2000dfd5 	ldrdcs	sp, [r0], -r5
 801363c:	2000dfcc 	andcs	sp, r0, ip, asr #31
 8013640:	2000dfc8 	andcs	sp, r0, r8, asr #31

08013644 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>:
 8013644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013646:	4b11      	ldr	r3, [pc, #68]	@ (801368c <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x48>)
 8013648:	4c11      	ldr	r4, [pc, #68]	@ (8013690 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x4c>)
 801364a:	681d      	ldr	r5, [r3, #0]
 801364c:	f015 0501 	ands.w	r5, r5, #1
 8013650:	460f      	mov	r7, r1
 8013652:	4606      	mov	r6, r0
 8013654:	4611      	mov	r1, r2
 8013656:	d003      	beq.n	8013660 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x1c>
 8013658:	4620      	mov	r0, r4
 801365a:	f7ff feb9 	bl	80133d0 <add_answer_a(unsigned char*, unsigned long)>
 801365e:	4404      	add	r4, r0
 8013660:	4b0c      	ldr	r3, [pc, #48]	@ (8013694 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x50>)
 8013662:	2284      	movs	r2, #132	@ 0x84
 8013664:	709a      	strb	r2, [r3, #2]
 8013666:	2200      	movs	r2, #0
 8013668:	ba6d      	rev16	r5, r5
 801366a:	1ae4      	subs	r4, r4, r3
 801366c:	70da      	strb	r2, [r3, #3]
 801366e:	801f      	strh	r7, [r3, #0]
 8013670:	711a      	strb	r2, [r3, #4]
 8013672:	715a      	strb	r2, [r3, #5]
 8013674:	80dd      	strh	r5, [r3, #6]
 8013676:	721a      	strb	r2, [r3, #8]
 8013678:	725a      	strb	r2, [r3, #9]
 801367a:	729a      	strb	r2, [r3, #10]
 801367c:	72da      	strb	r2, [r3, #11]
 801367e:	b2a1      	uxth	r1, r4
 8013680:	4630      	mov	r0, r6
 8013682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013686:	f7ff bfb3 	b.w	80135f0 <MDNS::SendTo(unsigned long)>
 801368a:	bf00      	nop
 801368c:	2000e1dc 	ldrdcs	lr, [r0], -ip
 8013690:	2000dfe1 	andcs	sp, r0, r1, ror #31
 8013694:	2000dfd5 	ldrdcs	sp, [r0], -r5

08013698 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>:
 8013698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801369c:	461e      	mov	r6, r3
 801369e:	4b25      	ldr	r3, [pc, #148]	@ (8013734 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x9c>)
 80136a0:	4c25      	ldr	r4, [pc, #148]	@ (8013738 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0xa0>)
 80136a2:	f8d3 9000 	ldr.w	r9, [r3]
 80136a6:	f019 0510 	ands.w	r5, r9, #16
 80136aa:	4607      	mov	r7, r0
 80136ac:	4688      	mov	r8, r1
 80136ae:	4692      	mov	sl, r2
 80136b0:	d005      	beq.n	80136be <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x26>
 80136b2:	4631      	mov	r1, r6
 80136b4:	4640      	mov	r0, r8
 80136b6:	f7ff feab 	bl	8013410 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]>
 80136ba:	2501      	movs	r5, #1
 80136bc:	4404      	add	r4, r0
 80136be:	f019 0f20 	tst.w	r9, #32
 80136c2:	d006      	beq.n	80136d2 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x3a>
 80136c4:	4621      	mov	r1, r4
 80136c6:	4632      	mov	r2, r6
 80136c8:	4640      	mov	r0, r8
 80136ca:	f7ff fef5 	bl	80134b8 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 80136ce:	3501      	adds	r5, #1
 80136d0:	4404      	add	r4, r0
 80136d2:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80136d6:	d006      	beq.n	80136e6 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x4e>
 80136d8:	4621      	mov	r1, r4
 80136da:	4632      	mov	r2, r6
 80136dc:	4640      	mov	r0, r8
 80136de:	f7ff febf 	bl	8013460 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 80136e2:	3501      	adds	r5, #1
 80136e4:	4404      	add	r4, r0
 80136e6:	f019 0f80 	tst.w	r9, #128	@ 0x80
 80136ea:	d006      	beq.n	80136fa <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x62>
 80136ec:	4621      	mov	r1, r4
 80136ee:	4632      	mov	r2, r6
 80136f0:	4640      	mov	r0, r8
 80136f2:	f7ff ff09 	bl	8013508 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 80136f6:	3501      	adds	r5, #1
 80136f8:	4404      	add	r4, r0
 80136fa:	4631      	mov	r1, r6
 80136fc:	4620      	mov	r0, r4
 80136fe:	f7ff fe67 	bl	80133d0 <add_answer_a(unsigned char*, unsigned long)>
 8013702:	4b0e      	ldr	r3, [pc, #56]	@ (801373c <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0xa4>)
 8013704:	2284      	movs	r2, #132	@ 0x84
 8013706:	2101      	movs	r1, #1
 8013708:	709a      	strb	r2, [r3, #2]
 801370a:	7259      	strb	r1, [r3, #9]
 801370c:	2200      	movs	r2, #0
 801370e:	1821      	adds	r1, r4, r0
 8013710:	ba6d      	rev16	r5, r5
 8013712:	70da      	strb	r2, [r3, #3]
 8013714:	1ac9      	subs	r1, r1, r3
 8013716:	f8a3 a000 	strh.w	sl, [r3]
 801371a:	80dd      	strh	r5, [r3, #6]
 801371c:	4638      	mov	r0, r7
 801371e:	b289      	uxth	r1, r1
 8013720:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013724:	711a      	strb	r2, [r3, #4]
 8013726:	715a      	strb	r2, [r3, #5]
 8013728:	721a      	strb	r2, [r3, #8]
 801372a:	729a      	strb	r2, [r3, #10]
 801372c:	72da      	strb	r2, [r3, #11]
 801372e:	f7ff bf5f 	b.w	80135f0 <MDNS::SendTo(unsigned long)>
 8013732:	bf00      	nop
 8013734:	2000e1d8 	ldrdcs	lr, [r0], -r8
 8013738:	2000dfe1 	andcs	sp, r0, r1, ror #31
 801373c:	2000dfd5 	ldrdcs	sp, [r0], -r5

08013740 <MDNS::SendAnnouncement(unsigned long)>:
 8013740:	4b14      	ldr	r3, [pc, #80]	@ (8013794 <MDNS::SendAnnouncement(unsigned long)+0x54>)
 8013742:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 8013746:	b570      	push	{r4, r5, r6, lr}
 8013748:	801a      	strh	r2, [r3, #0]
 801374a:	4b13      	ldr	r3, [pc, #76]	@ (8013798 <MDNS::SendAnnouncement(unsigned long)+0x58>)
 801374c:	4e13      	ldr	r6, [pc, #76]	@ (801379c <MDNS::SendAnnouncement(unsigned long)+0x5c>)
 801374e:	2201      	movs	r2, #1
 8013750:	601a      	str	r2, [r3, #0]
 8013752:	460c      	mov	r4, r1
 8013754:	460a      	mov	r2, r1
 8013756:	2100      	movs	r1, #0
 8013758:	4605      	mov	r5, r0
 801375a:	f7ff ff73 	bl	8013644 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>
 801375e:	68f3      	ldr	r3, [r6, #12]
 8013760:	2b08      	cmp	r3, #8
 8013762:	dc08      	bgt.n	8013776 <MDNS::SendAnnouncement(unsigned long)+0x36>
 8013764:	4b0e      	ldr	r3, [pc, #56]	@ (80137a0 <MDNS::SendAnnouncement(unsigned long)+0x60>)
 8013766:	22f0      	movs	r2, #240	@ 0xf0
 8013768:	601a      	str	r2, [r3, #0]
 801376a:	4631      	mov	r1, r6
 801376c:	4623      	mov	r3, r4
 801376e:	2200      	movs	r2, #0
 8013770:	4628      	mov	r0, r5
 8013772:	f7ff ff91 	bl	8013698 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013776:	69f3      	ldr	r3, [r6, #28]
 8013778:	2b08      	cmp	r3, #8
 801377a:	dc0a      	bgt.n	8013792 <MDNS::SendAnnouncement(unsigned long)+0x52>
 801377c:	4b08      	ldr	r3, [pc, #32]	@ (80137a0 <MDNS::SendAnnouncement(unsigned long)+0x60>)
 801377e:	4909      	ldr	r1, [pc, #36]	@ (80137a4 <MDNS::SendAnnouncement(unsigned long)+0x64>)
 8013780:	22f0      	movs	r2, #240	@ 0xf0
 8013782:	601a      	str	r2, [r3, #0]
 8013784:	4628      	mov	r0, r5
 8013786:	4623      	mov	r3, r4
 8013788:	2200      	movs	r2, #0
 801378a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801378e:	f7ff bf83 	b.w	8013698 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013792:	bd70      	pop	{r4, r5, r6, pc}
 8013794:	2000dfc8 	andcs	sp, r0, r8, asr #31
 8013798:	2000e1dc 	ldrdcs	lr, [r0], -ip
 801379c:	2000e1e0 	andcs	lr, r0, r0, ror #3
 80137a0:	2000e1d8 	ldrdcs	lr, [r0], -r8
 80137a4:	2000e1f0 	strdcs	lr, [r0], -r0

080137a8 <network::mdns_announcement()>:
 80137a8:	4b02      	ldr	r3, [pc, #8]	@ (80137b4 <network::mdns_announcement()+0xc>)
 80137aa:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80137ae:	6818      	ldr	r0, [r3, #0]
 80137b0:	f7ff bfc6 	b.w	8013740 <MDNS::SendAnnouncement(unsigned long)>
 80137b4:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc

080137b8 <network::mdns_shutdown()>:
 80137b8:	4b02      	ldr	r3, [pc, #8]	@ (80137c4 <network::mdns_shutdown()+0xc>)
 80137ba:	2100      	movs	r1, #0
 80137bc:	6818      	ldr	r0, [r3, #0]
 80137be:	f7ff bfbf 	b.w	8013740 <MDNS::SendAnnouncement(unsigned long)>
 80137c2:	bf00      	nop
 80137c4:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc

080137c8 <MDNS::MDNS()>:
 80137c8:	b538      	push	{r3, r4, r5, lr}
 80137ca:	4b16      	ldr	r3, [pc, #88]	@ (8013824 <MDNS::MDNS()+0x5c>)
 80137cc:	4d16      	ldr	r5, [pc, #88]	@ (8013828 <MDNS::MDNS()+0x60>)
 80137ce:	6018      	str	r0, [r3, #0]
 80137d0:	4b16      	ldr	r3, [pc, #88]	@ (801382c <MDNS::MDNS()+0x64>)
 80137d2:	2209      	movs	r2, #9
 80137d4:	4604      	mov	r4, r0
 80137d6:	f241 40e9 	movw	r0, #5353	@ 0x14e9
 80137da:	60da      	str	r2, [r3, #12]
 80137dc:	61da      	str	r2, [r3, #28]
 80137de:	f001 fc85 	bl	80150ec <net::udp_begin(unsigned short)>
 80137e2:	4b13      	ldr	r3, [pc, #76]	@ (8013830 <MDNS::MDNS()+0x68>)
 80137e4:	6018      	str	r0, [r3, #0]
 80137e6:	4813      	ldr	r0, [pc, #76]	@ (8013834 <MDNS::MDNS()+0x6c>)
 80137e8:	f001 f868 	bl	80148bc <net::igmp_join(unsigned long)>
 80137ec:	4b12      	ldr	r3, [pc, #72]	@ (8013838 <MDNS::MDNS()+0x70>)
 80137ee:	6819      	ldr	r1, [r3, #0]
 80137f0:	233f      	movs	r3, #63	@ 0x3f
 80137f2:	f101 0256 	add.w	r2, r1, #86	@ 0x56
 80137f6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80137fa:	b118      	cbz	r0, 8013804 <MDNS::MDNS()+0x3c>
 80137fc:	3b01      	subs	r3, #1
 80137fe:	f802 0b01 	strb.w	r0, [r2], #1
 8013802:	d1f8      	bne.n	80137f6 <MDNS::MDNS()+0x2e>
 8013804:	4413      	add	r3, r2
 8013806:	2000      	movs	r0, #0
 8013808:	429a      	cmp	r2, r3
 801380a:	d108      	bne.n	801381e <MDNS::MDNS()+0x56>
 801380c:	f881 0095 	strb.w	r0, [r1, #149]	@ 0x95
 8013810:	4620      	mov	r0, r4
 8013812:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8013816:	f7ff ff93 	bl	8013740 <MDNS::SendAnnouncement(unsigned long)>
 801381a:	4620      	mov	r0, r4
 801381c:	bd38      	pop	{r3, r4, r5, pc}
 801381e:	f802 0b01 	strb.w	r0, [r2], #1
 8013822:	e7f1      	b.n	8013808 <MDNS::MDNS()+0x40>
 8013824:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc
 8013828:	0801f076 	stmdaeq	r1, {r1, r2, r4, r5, r6, ip, sp, lr, pc}
 801382c:	2000e1e0 	andcs	lr, r0, r0, ror #3
 8013830:	2000dfd0 	ldrdcs	sp, [r0], -r0
 8013834:	fb0000e0 	blx	8013bbe <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x3a>
 8013838:	2000e200 	andcs	lr, r0, r0, lsl #4

0801383c <MDNS::ServiceRecordDelete(mdns::Services)>:
 801383c:	b510      	push	{r4, lr}
 801383e:	4c0c      	ldr	r4, [pc, #48]	@ (8013870 <MDNS::ServiceRecordDelete(mdns::Services)+0x34>)
 8013840:	68e3      	ldr	r3, [r4, #12]
 8013842:	4299      	cmp	r1, r3
 8013844:	d003      	beq.n	801384e <MDNS::ServiceRecordDelete(mdns::Services)+0x12>
 8013846:	69e3      	ldr	r3, [r4, #28]
 8013848:	4299      	cmp	r1, r3
 801384a:	d10f      	bne.n	801386c <MDNS::ServiceRecordDelete(mdns::Services)+0x30>
 801384c:	3410      	adds	r4, #16
 801384e:	2300      	movs	r3, #0
 8013850:	461a      	mov	r2, r3
 8013852:	4621      	mov	r1, r4
 8013854:	f7ff ff20 	bl	8013698 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013858:	6820      	ldr	r0, [r4, #0]
 801385a:	b108      	cbz	r0, 8013860 <MDNS::ServiceRecordDelete(mdns::Services)+0x24>
 801385c:	f007 f89e 	bl	801a99c <operator delete[](void*)>
 8013860:	6860      	ldr	r0, [r4, #4]
 8013862:	b108      	cbz	r0, 8013868 <MDNS::ServiceRecordDelete(mdns::Services)+0x2c>
 8013864:	f007 f89a 	bl	801a99c <operator delete[](void*)>
 8013868:	2001      	movs	r0, #1
 801386a:	bd10      	pop	{r4, pc}
 801386c:	2000      	movs	r0, #0
 801386e:	e7fc      	b.n	801386a <MDNS::ServiceRecordDelete(mdns::Services)+0x2e>
 8013870:	2000e1e0 	andcs	lr, r0, r0, ror #3

08013874 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>:
 8013874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013878:	4d2a      	ldr	r5, [pc, #168]	@ (8013924 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb0>)
 801387a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801387e:	461f      	mov	r7, r3
 8013880:	68eb      	ldr	r3, [r5, #12]
 8013882:	2b09      	cmp	r3, #9
 8013884:	4680      	mov	r8, r0
 8013886:	4689      	mov	r9, r1
 8013888:	4692      	mov	sl, r2
 801388a:	d003      	beq.n	8013894 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x20>
 801388c:	69eb      	ldr	r3, [r5, #28]
 801388e:	2b09      	cmp	r3, #9
 8013890:	d145      	bne.n	801391e <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xaa>
 8013892:	3510      	adds	r5, #16
 8013894:	f1b9 0f00 	cmp.w	r9, #0
 8013898:	d012      	beq.n	80138c0 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x4c>
 801389a:	4648      	mov	r0, r9
 801389c:	f7ff fc35 	bl	801310a <strlen>
 80138a0:	283f      	cmp	r0, #63	@ 0x3f
 80138a2:	4604      	mov	r4, r0
 80138a4:	d839      	bhi.n	801391a <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa6>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	d035      	beq.n	8013916 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa2>
 80138aa:	1c60      	adds	r0, r4, #1
 80138ac:	f007 f87c 	bl	801a9a8 <operator new[](unsigned int)>
 80138b0:	4622      	mov	r2, r4
 80138b2:	6028      	str	r0, [r5, #0]
 80138b4:	4649      	mov	r1, r9
 80138b6:	f7ff fc1f 	bl	80130f8 <memcpy.isra.0>
 80138ba:	682b      	ldr	r3, [r5, #0]
 80138bc:	2200      	movs	r2, #0
 80138be:	551a      	strb	r2, [r3, r4]
 80138c0:	f8c5 a00c 	str.w	sl, [r5, #12]
 80138c4:	b91e      	cbnz	r6, 80138ce <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x5a>
 80138c6:	4b18      	ldr	r3, [pc, #96]	@ (8013928 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb4>)
 80138c8:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 80138cc:	899e      	ldrh	r6, [r3, #12]
 80138ce:	ba76      	rev16	r6, r6
 80138d0:	b2b6      	uxth	r6, r6
 80138d2:	816e      	strh	r6, [r5, #10]
 80138d4:	b187      	cbz	r7, 80138f8 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x84>
 80138d6:	4638      	mov	r0, r7
 80138d8:	f7ff fc17 	bl	801310a <strlen>
 80138dc:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80138e0:	bf28      	it	cs
 80138e2:	f44f 7080 	movcs.w	r0, #256	@ 0x100
 80138e6:	4604      	mov	r4, r0
 80138e8:	f007 f85e 	bl	801a9a8 <operator new[](unsigned int)>
 80138ec:	4622      	mov	r2, r4
 80138ee:	6068      	str	r0, [r5, #4]
 80138f0:	4639      	mov	r1, r7
 80138f2:	f7ff fc01 	bl	80130f8 <memcpy.isra.0>
 80138f6:	812c      	strh	r4, [r5, #8]
 80138f8:	4b0c      	ldr	r3, [pc, #48]	@ (801392c <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb8>)
 80138fa:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 80138fe:	801a      	strh	r2, [r3, #0]
 8013900:	4b0b      	ldr	r3, [pc, #44]	@ (8013930 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xbc>)
 8013902:	22f0      	movs	r2, #240	@ 0xf0
 8013904:	601a      	str	r2, [r3, #0]
 8013906:	4640      	mov	r0, r8
 8013908:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801390c:	2200      	movs	r2, #0
 801390e:	4629      	mov	r1, r5
 8013910:	f7ff fec2 	bl	8013698 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013914:	2001      	movs	r0, #1
 8013916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801391a:	243f      	movs	r4, #63	@ 0x3f
 801391c:	e7c5      	b.n	80138aa <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x36>
 801391e:	2000      	movs	r0, #0
 8013920:	e7f9      	b.n	8013916 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa2>
 8013922:	bf00      	nop
 8013924:	2000e1e0 	andcs	lr, r0, r0, ror #3
 8013928:	0801ef9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, sp, lr, pc}
 801392c:	2000dfc8 	andcs	sp, r0, r8, asr #31
 8013930:	2000e1d8 	ldrdcs	lr, [r0], -r8

08013934 <MDNS::HandleQuestions(unsigned long)>:
 8013934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013938:	4b5c      	ldr	r3, [pc, #368]	@ (8013aac <MDNS::HandleQuestions(unsigned long)+0x178>)
 801393a:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 8013acc <MDNS::HandleQuestions(unsigned long)+0x198>
 801393e:	881a      	ldrh	r2, [r3, #0]
 8013940:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 8013944:	429a      	cmp	r2, r3
 8013946:	f04f 0500 	mov.w	r5, #0
 801394a:	4b59      	ldr	r3, [pc, #356]	@ (8013ab0 <MDNS::HandleQuestions(unsigned long)+0x17c>)
 801394c:	f8c9 5000 	str.w	r5, [r9]
 8013950:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 8013954:	bf14      	ite	ne
 8013956:	2201      	movne	r2, #1
 8013958:	462a      	moveq	r2, r5
 801395a:	9001      	str	r0, [sp, #4]
 801395c:	4688      	mov	r8, r1
 801395e:	701a      	strb	r2, [r3, #0]
 8013960:	d004      	beq.n	801396c <MDNS::HandleQuestions(unsigned long)+0x38>
 8013962:	2901      	cmp	r1, #1
 8013964:	bf02      	ittt	eq
 8013966:	4b53      	ldreq	r3, [pc, #332]	@ (8013ab4 <MDNS::HandleQuestions(unsigned long)+0x180>)
 8013968:	681b      	ldreq	r3, [r3, #0]
 801396a:	881d      	ldrheq	r5, [r3, #0]
 801396c:	4c52      	ldr	r4, [pc, #328]	@ (8013ab8 <MDNS::HandleQuestions(unsigned long)+0x184>)
 801396e:	f04f 0b00 	mov.w	fp, #0
 8013972:	f04f 0a0c 	mov.w	sl, #12
 8013976:	45c3      	cmp	fp, r8
 8013978:	d10e      	bne.n	8013998 <MDNS::HandleQuestions(unsigned long)+0x64>
 801397a:	f8d9 3000 	ldr.w	r3, [r9]
 801397e:	2b00      	cmp	r3, #0
 8013980:	f000 808f 	beq.w	8013aa2 <MDNS::HandleQuestions(unsigned long)+0x16e>
 8013984:	9801      	ldr	r0, [sp, #4]
 8013986:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801398a:	4629      	mov	r1, r5
 801398c:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 8013990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013994:	f7ff be56 	b.w	8013644 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>
 8013998:	4b48      	ldr	r3, [pc, #288]	@ (8013abc <MDNS::HandleQuestions(unsigned long)+0x188>)
 801399a:	4e46      	ldr	r6, [pc, #280]	@ (8013ab4 <MDNS::HandleQuestions(unsigned long)+0x180>)
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	6830      	ldr	r0, [r6, #0]
 80139a0:	ab03      	add	r3, sp, #12
 80139a2:	4402      	add	r2, r0
 80139a4:	eb00 010a 	add.w	r1, r0, sl
 80139a8:	f7ff fddb 	bl	8013562 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)>
 80139ac:	2800      	cmp	r0, #0
 80139ae:	d078      	beq.n	8013aa2 <MDNS::HandleQuestions(unsigned long)+0x16e>
 80139b0:	6833      	ldr	r3, [r6, #0]
 80139b2:	eb03 020a 	add.w	r2, r3, sl
 80139b6:	1a80      	subs	r0, r0, r2
 80139b8:	f8ad 010c 	strh.w	r0, [sp, #268]	@ 0x10c
 80139bc:	fa1a f080 	uxtah	r0, sl, r0
 80139c0:	181a      	adds	r2, r3, r0
 80139c2:	f100 0a04 	add.w	sl, r0, #4
 80139c6:	8852      	ldrh	r2, [r2, #2]
 80139c8:	f402 42fe 	and.w	r2, r2, #32512	@ 0x7f00
 80139cc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80139d0:	d002      	beq.n	80139d8 <MDNS::HandleQuestions(unsigned long)+0xa4>
 80139d2:	f10b 0b01 	add.w	fp, fp, #1
 80139d6:	e7ce      	b.n	8013976 <MDNS::HandleQuestions(unsigned long)+0x42>
 80139d8:	5a1e      	ldrh	r6, [r3, r0]
 80139da:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80139de:	d002      	beq.n	80139e6 <MDNS::HandleQuestions(unsigned long)+0xb2>
 80139e0:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 80139e4:	d10d      	bne.n	8013a02 <MDNS::HandleQuestions(unsigned long)+0xce>
 80139e6:	a844      	add	r0, sp, #272	@ 0x110
 80139e8:	f7ff fbaa 	bl	8013140 <create_host_domain(mdns::Domain&)>
 80139ec:	a903      	add	r1, sp, #12
 80139ee:	a844      	add	r0, sp, #272	@ 0x110
 80139f0:	f7ff fc3c 	bl	801326c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 80139f4:	b128      	cbz	r0, 8013a02 <MDNS::HandleQuestions(unsigned long)+0xce>
 80139f6:	f8d9 3000 	ldr.w	r3, [r9]
 80139fa:	f043 0301 	orr.w	r3, r3, #1
 80139fe:	f8c9 3000 	str.w	r3, [r9]
 8013a02:	4f2f      	ldr	r7, [pc, #188]	@ (8013ac0 <MDNS::HandleQuestions(unsigned long)+0x18c>)
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2b08      	cmp	r3, #8
 8013a08:	dc46      	bgt.n	8013a98 <MDNS::HandleQuestions(unsigned long)+0x164>
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	f5b6 6f40 	cmp.w	r6, #3072	@ 0xc00
 8013a10:	6023      	str	r3, [r4, #0]
 8013a12:	d002      	beq.n	8013a1a <MDNS::HandleQuestions(unsigned long)+0xe6>
 8013a14:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 8013a18:	d115      	bne.n	8013a46 <MDNS::HandleQuestions(unsigned long)+0x112>
 8013a1a:	482a      	ldr	r0, [pc, #168]	@ (8013ac4 <MDNS::HandleQuestions(unsigned long)+0x190>)
 8013a1c:	a903      	add	r1, sp, #12
 8013a1e:	f7ff fc25 	bl	801326c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 8013a22:	b108      	cbz	r0, 8013a28 <MDNS::HandleQuestions(unsigned long)+0xf4>
 8013a24:	2310      	movs	r3, #16
 8013a26:	6023      	str	r3, [r4, #0]
 8013a28:	2200      	movs	r2, #0
 8013a2a:	4639      	mov	r1, r7
 8013a2c:	a885      	add	r0, sp, #532	@ 0x214
 8013a2e:	f7ff fba7 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013a32:	a903      	add	r1, sp, #12
 8013a34:	a885      	add	r0, sp, #532	@ 0x214
 8013a36:	f7ff fc19 	bl	801326c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 8013a3a:	6823      	ldr	r3, [r4, #0]
 8013a3c:	b118      	cbz	r0, 8013a46 <MDNS::HandleQuestions(unsigned long)+0x112>
 8013a3e:	f043 0320 	orr.w	r3, r3, #32
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	6023      	str	r3, [r4, #0]
 8013a46:	4639      	mov	r1, r7
 8013a48:	a885      	add	r0, sp, #532	@ 0x214
 8013a4a:	2201      	movs	r2, #1
 8013a4c:	f7ff fb98 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013a50:	a903      	add	r1, sp, #12
 8013a52:	a885      	add	r0, sp, #532	@ 0x214
 8013a54:	f7ff fc0a 	bl	801326c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 8013a58:	b1d8      	cbz	r0, 8013a92 <MDNS::HandleQuestions(unsigned long)+0x15e>
 8013a5a:	f5b6 5f04 	cmp.w	r6, #8448	@ 0x2100
 8013a5e:	d002      	beq.n	8013a66 <MDNS::HandleQuestions(unsigned long)+0x132>
 8013a60:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 8013a64:	d112      	bne.n	8013a8c <MDNS::HandleQuestions(unsigned long)+0x158>
 8013a66:	7823      	ldrb	r3, [r4, #0]
 8013a68:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 8013a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a70:	6023      	str	r3, [r4, #0]
 8013a72:	d103      	bne.n	8013a7c <MDNS::HandleQuestions(unsigned long)+0x148>
 8013a74:	7823      	ldrb	r3, [r4, #0]
 8013a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a7a:	6023      	str	r3, [r4, #0]
 8013a7c:	9801      	ldr	r0, [sp, #4]
 8013a7e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8013a82:	462a      	mov	r2, r5
 8013a84:	4639      	mov	r1, r7
 8013a86:	f7ff fe07 	bl	8013698 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013a8a:	e005      	b.n	8013a98 <MDNS::HandleQuestions(unsigned long)+0x164>
 8013a8c:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8013a90:	d0f0      	beq.n	8013a74 <MDNS::HandleQuestions(unsigned long)+0x140>
 8013a92:	6823      	ldr	r3, [r4, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d1f1      	bne.n	8013a7c <MDNS::HandleQuestions(unsigned long)+0x148>
 8013a98:	4b0b      	ldr	r3, [pc, #44]	@ (8013ac8 <MDNS::HandleQuestions(unsigned long)+0x194>)
 8013a9a:	3710      	adds	r7, #16
 8013a9c:	429f      	cmp	r7, r3
 8013a9e:	d1b1      	bne.n	8013a04 <MDNS::HandleQuestions(unsigned long)+0xd0>
 8013aa0:	e797      	b.n	80139d2 <MDNS::HandleQuestions(unsigned long)+0x9e>
 8013aa2:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 8013aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aaa:	bf00      	nop
 8013aac:	2000dfc8 	andcs	sp, r0, r8, asr #31
 8013ab0:	2000dfd4 	ldrdcs	sp, [r0], -r4
 8013ab4:	2000dfc0 	andcs	sp, r0, r0, asr #31
 8013ab8:	2000e1d8 	ldrdcs	lr, [r0], -r8
 8013abc:	2000dfc4 	andcs	sp, r0, r4, asr #31
 8013ac0:	2000e1e0 	andcs	lr, r0, r0, ror #3
 8013ac4:	0801ee98 	stmdaeq	r1, {r3, r4, r7, r9, sl, fp, sp, lr, pc}
 8013ac8:	2000e200 	andcs	lr, r0, r0, lsl #4
 8013acc:	2000e1dc 	ldrdcs	lr, [r0], -ip

08013ad0 <MDNS::Print()>:
 8013ad0:	b530      	push	{r4, r5, lr}
 8013ad2:	4815      	ldr	r0, [pc, #84]	@ (8013b28 <MDNS::Print()+0x58>)
 8013ad4:	4c15      	ldr	r4, [pc, #84]	@ (8013b2c <MDNS::Print()+0x5c>)
 8013ad6:	b0c3      	sub	sp, #268	@ 0x10c
 8013ad8:	f006 fd0e 	bl	801a4f8 <printf>
 8013adc:	a801      	add	r0, sp, #4
 8013ade:	f7ff fb2f 	bl	8013140 <create_host_domain(mdns::Domain&)>
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	a801      	add	r0, sp, #4
 8013ae6:	f7ff fb9d 	bl	8013224 <mdns::Domain::Print(bool)>
 8013aea:	2503      	movs	r5, #3
 8013aec:	3d01      	subs	r5, #1
 8013aee:	d101      	bne.n	8013af4 <MDNS::Print()+0x24>
 8013af0:	b043      	add	sp, #268	@ 0x10c
 8013af2:	bd30      	pop	{r4, r5, pc}
 8013af4:	68e3      	ldr	r3, [r4, #12]
 8013af6:	2b08      	cmp	r3, #8
 8013af8:	dc14      	bgt.n	8013b24 <MDNS::Print()+0x54>
 8013afa:	2200      	movs	r2, #0
 8013afc:	4621      	mov	r1, r4
 8013afe:	a801      	add	r0, sp, #4
 8013b00:	f7ff fb3e 	bl	8013180 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013b04:	2100      	movs	r1, #0
 8013b06:	a801      	add	r0, sp, #4
 8013b08:	f7ff fb8c 	bl	8013224 <mdns::Domain::Print(bool)>
 8013b0c:	8961      	ldrh	r1, [r4, #10]
 8013b0e:	4a08      	ldr	r2, [pc, #32]	@ (8013b30 <MDNS::Print()+0x60>)
 8013b10:	6863      	ldr	r3, [r4, #4]
 8013b12:	4808      	ldr	r0, [pc, #32]	@ (8013b34 <MDNS::Print()+0x64>)
 8013b14:	ba49      	rev16	r1, r1
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	bf08      	it	eq
 8013b1a:	4613      	moveq	r3, r2
 8013b1c:	b289      	uxth	r1, r1
 8013b1e:	8922      	ldrh	r2, [r4, #8]
 8013b20:	f006 fcea 	bl	801a4f8 <printf>
 8013b24:	3410      	adds	r4, #16
 8013b26:	e7e1      	b.n	8013aec <MDNS::Print()+0x1c>
 8013b28:	0801bac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp, ip, sp, pc}
 8013b2c:	2000e1e0 	andcs	lr, r0, r0, ror #3
 8013b30:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 8013b34:	0801bacf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, fp, ip, sp, pc}

08013b38 <strncpy.isra.0>:
 8013b38:	3901      	subs	r1, #1
 8013b3a:	b112      	cbz	r2, 8013b42 <strncpy.isra.0+0xa>
 8013b3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013b40:	b913      	cbnz	r3, 8013b48 <strncpy.isra.0+0x10>
 8013b42:	4402      	add	r2, r0
 8013b44:	2300      	movs	r3, #0
 8013b46:	e005      	b.n	8013b54 <strncpy.isra.0+0x1c>
 8013b48:	f800 3b01 	strb.w	r3, [r0], #1
 8013b4c:	3a01      	subs	r2, #1
 8013b4e:	e7f4      	b.n	8013b3a <strncpy.isra.0+0x2>
 8013b50:	f800 3b01 	strb.w	r3, [r0], #1
 8013b54:	4290      	cmp	r0, r2
 8013b56:	d1fb      	bne.n	8013b50 <strncpy.isra.0+0x18>
 8013b58:	4770      	bx	lr
	...

08013b5c <NetworkStore::SaveDhcp(bool)>:
 8013b5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013b5e:	2301      	movs	r3, #1
 8013b60:	2100      	movs	r1, #0
 8013b62:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013b66:	f88d 0017 	strb.w	r0, [sp, #23]
 8013b6a:	4805      	ldr	r0, [pc, #20]	@ (8013b80 <NetworkStore::SaveDhcp(bool)+0x24>)
 8013b6c:	9300      	str	r3, [sp, #0]
 8013b6e:	6800      	ldr	r0, [r0, #0]
 8013b70:	f10d 0317 	add.w	r3, sp, #23
 8013b74:	2214      	movs	r2, #20
 8013b76:	f002 ff6f 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8013b7a:	b007      	add	sp, #28
 8013b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b80:	2000e2cc 	andcs	lr, r0, ip, asr #5

08013b84 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)>:
 8013b84:	b530      	push	{r4, r5, lr}
 8013b86:	4605      	mov	r5, r0
 8013b88:	06e8      	lsls	r0, r5, #27
 8013b8a:	b087      	sub	sp, #28
 8013b8c:	460c      	mov	r4, r1
 8013b8e:	d51a      	bpl.n	8013bc6 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x42>
 8013b90:	f002 fe68 	bl	8016864 <net::display_ip()>
 8013b94:	f7ff fe08 	bl	80137a8 <network::mdns_announcement()>
 8013b98:	4b2e      	ldr	r3, [pc, #184]	@ (8013c54 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8013b9a:	6821      	ldr	r1, [r4, #0]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	482e      	ldr	r0, [pc, #184]	@ (8013c58 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd4>)
 8013ba0:	0e1a      	lsrs	r2, r3, #24
 8013ba2:	9204      	str	r2, [sp, #16]
 8013ba4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013ba8:	9203      	str	r2, [sp, #12]
 8013baa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	9301      	str	r3, [sp, #4]
 8013bb2:	0e0b      	lsrs	r3, r1, #24
 8013bb4:	9202      	str	r2, [sp, #8]
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013bbc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8013bc0:	b2c9      	uxtb	r1, r1
 8013bc2:	f006 fc99 	bl	801a4f8 <printf>
 8013bc6:	0669      	lsls	r1, r5, #25
 8013bc8:	d518      	bpl.n	8013bfc <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x78>
 8013bca:	f002 fe53 	bl	8016874 <net::display_netmask()>
 8013bce:	4b21      	ldr	r3, [pc, #132]	@ (8013c54 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8013bd0:	6861      	ldr	r1, [r4, #4]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	4821      	ldr	r0, [pc, #132]	@ (8013c5c <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd8>)
 8013bd6:	0e1a      	lsrs	r2, r3, #24
 8013bd8:	9204      	str	r2, [sp, #16]
 8013bda:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013bde:	9203      	str	r2, [sp, #12]
 8013be0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	9301      	str	r3, [sp, #4]
 8013be8:	0e0b      	lsrs	r3, r1, #24
 8013bea:	9202      	str	r2, [sp, #8]
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013bf2:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8013bf6:	b2c9      	uxtb	r1, r1
 8013bf8:	f006 fc7e 	bl	801a4f8 <printf>
 8013bfc:	06aa      	lsls	r2, r5, #26
 8013bfe:	d518      	bpl.n	8013c32 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xae>
 8013c00:	f002 fe5a 	bl	80168b8 <net::display_gateway()>
 8013c04:	4b13      	ldr	r3, [pc, #76]	@ (8013c54 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8013c06:	68a1      	ldr	r1, [r4, #8]
 8013c08:	689b      	ldr	r3, [r3, #8]
 8013c0a:	4815      	ldr	r0, [pc, #84]	@ (8013c60 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xdc>)
 8013c0c:	0e1a      	lsrs	r2, r3, #24
 8013c0e:	9204      	str	r2, [sp, #16]
 8013c10:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013c14:	9203      	str	r2, [sp, #12]
 8013c16:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013c1a:	b2db      	uxtb	r3, r3
 8013c1c:	9301      	str	r3, [sp, #4]
 8013c1e:	0e0b      	lsrs	r3, r1, #24
 8013c20:	9202      	str	r2, [sp, #8]
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013c28:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8013c2c:	b2c9      	uxtb	r1, r1
 8013c2e:	f006 fc63 	bl	801a4f8 <printf>
 8013c32:	076b      	lsls	r3, r5, #29
 8013c34:	d50c      	bpl.n	8013c50 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xcc>
 8013c36:	7823      	ldrb	r3, [r4, #0]
 8013c38:	b953      	cbnz	r3, 8013c50 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xcc>
 8013c3a:	f7ff fdbd 	bl	80137b8 <network::mdns_shutdown()>
 8013c3e:	f001 f98f 	bl	8014f60 <net::tcp_shutdown()>
 8013c42:	f7f4 fb29 	bl	8008298 <net::igmp_shutdown()>
 8013c46:	b007      	add	sp, #28
 8013c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c4c:	f000 bc7a 	b.w	8014544 <net::dhcp_release_and_stop()>
 8013c50:	b007      	add	sp, #28
 8013c52:	bd30      	pop	{r4, r5, pc}
 8013c54:	2000e220 	andcs	lr, r0, r0, lsr #4
 8013c58:	0801bad9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, fp, ip, sp, pc}
 8013c5c:	0801baf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, sp, pc}
 8013c60:	0801bb1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, ip, sp, pc}

08013c64 <Network::Network()>:
 8013c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c66:	2300      	movs	r3, #0
 8013c68:	f240 1201 	movw	r2, #257	@ 0x101
 8013c6c:	6003      	str	r3, [r0, #0]
 8013c6e:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 8013c72:	4b53      	ldr	r3, [pc, #332]	@ (8013dc0 <Network::Network()+0x15c>)
 8013c74:	8082      	strh	r2, [r0, #4]
 8013c76:	4a53      	ldr	r2, [pc, #332]	@ (8013dc4 <Network::Network()+0x160>)
 8013c78:	6018      	str	r0, [r3, #0]
 8013c7a:	b09f      	sub	sp, #124	@ 0x7c
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	1d83      	adds	r3, r0, #6
 8013c80:	f812 6b01 	ldrb.w	r6, [r2], #1
 8013c84:	f803 6b01 	strb.w	r6, [r3], #1
 8013c88:	2e00      	cmp	r6, #0
 8013c8a:	d1f9      	bne.n	8013c80 <Network::Network()+0x1c>
 8013c8c:	f884 6056 	strb.w	r6, [r4, #86]	@ 0x56
 8013c90:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8013c94:	f104 02a4 	add.w	r2, r4, #164	@ 0xa4
 8013c98:	f803 6b01 	strb.w	r6, [r3], #1
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d1fb      	bne.n	8013c98 <Network::Network()+0x34>
 8013ca0:	4d49      	ldr	r5, [pc, #292]	@ (8013dc8 <Network::Network()+0x164>)
 8013ca2:	f002 fd9f 	bl	80167e4 <net::display_emac_config()>
 8013ca6:	f7f4 fb7b 	bl	80083a0 <emac_config()>
 8013caa:	f002 fdad 	bl	8016808 <net::display_emac_start()>
 8013cae:	4847      	ldr	r0, [pc, #284]	@ (8013dcc <Network::Network()+0x168>)
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	f7f4 fb99 	bl	80083e8 <emac_start(unsigned char*, net::Link&)>
 8013cb6:	7e6b      	ldrb	r3, [r5, #25]
 8013cb8:	9302      	str	r3, [sp, #8]
 8013cba:	7e2b      	ldrb	r3, [r5, #24]
 8013cbc:	9301      	str	r3, [sp, #4]
 8013cbe:	7deb      	ldrb	r3, [r5, #23]
 8013cc0:	9300      	str	r3, [sp, #0]
 8013cc2:	7dab      	ldrb	r3, [r5, #22]
 8013cc4:	7d6a      	ldrb	r2, [r5, #21]
 8013cc6:	7d29      	ldrb	r1, [r5, #20]
 8013cc8:	4841      	ldr	r0, [pc, #260]	@ (8013dd0 <Network::Network()+0x16c>)
 8013cca:	f006 fc15 	bl	801a4f8 <printf>
 8013cce:	f001 fd08 	bl	80156e2 <net::phy_customized_timing()>
 8013cd2:	f001 fd05 	bl	80156e0 <net::phy_customized_led()>
 8013cd6:	f000 ff17 	bl	8014b08 <net::netif_init()>
 8013cda:	483e      	ldr	r0, [pc, #248]	@ (8013dd4 <Network::Network()+0x170>)
 8013cdc:	f000 ffb4 	bl	8014c48 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))>
 8013ce0:	a806      	add	r0, sp, #24
 8013ce2:	f001 faf3 	bl	80152cc <NetworkParams::NetworkParams()>
 8013ce6:	a806      	add	r0, sp, #24
 8013ce8:	f001 fafa 	bl	80152e0 <NetworkParams::Load()>
 8013cec:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d15b      	bne.n	8013dac <Network::Network()+0x148>
 8013cf4:	4a38      	ldr	r2, [pc, #224]	@ (8013dd8 <Network::Network()+0x174>)
 8013cf6:	f104 0315 	add.w	r3, r4, #21
 8013cfa:	f104 0120 	add.w	r1, r4, #32
 8013cfe:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013d02:	f803 0f01 	strb.w	r0, [r3, #1]!
 8013d06:	428b      	cmp	r3, r1
 8013d08:	d1f9      	bne.n	8013cfe <Network::Network()+0x9a>
 8013d0a:	7deb      	ldrb	r3, [r5, #23]
 8013d0c:	091a      	lsrs	r2, r3, #4
 8013d0e:	2b9f      	cmp	r3, #159	@ 0x9f
 8013d10:	f003 030f 	and.w	r3, r3, #15
 8013d14:	bf94      	ite	ls
 8013d16:	3230      	addls	r2, #48	@ 0x30
 8013d18:	3237      	addhi	r2, #55	@ 0x37
 8013d1a:	2b09      	cmp	r3, #9
 8013d1c:	bf94      	ite	ls
 8013d1e:	3330      	addls	r3, #48	@ 0x30
 8013d20:	3337      	addhi	r3, #55	@ 0x37
 8013d22:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8013d26:	7e2b      	ldrb	r3, [r5, #24]
 8013d28:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
 8013d2c:	2b9f      	cmp	r3, #159	@ 0x9f
 8013d2e:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8013d32:	f003 030f 	and.w	r3, r3, #15
 8013d36:	bf94      	ite	ls
 8013d38:	3230      	addls	r2, #48	@ 0x30
 8013d3a:	3237      	addhi	r2, #55	@ 0x37
 8013d3c:	2b09      	cmp	r3, #9
 8013d3e:	bf94      	ite	ls
 8013d40:	3330      	addls	r3, #48	@ 0x30
 8013d42:	3337      	addhi	r3, #55	@ 0x37
 8013d44:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8013d48:	7e6b      	ldrb	r3, [r5, #25]
 8013d4a:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 8013d4e:	2b9f      	cmp	r3, #159	@ 0x9f
 8013d50:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8013d54:	f003 030f 	and.w	r3, r3, #15
 8013d58:	bf94      	ite	ls
 8013d5a:	3230      	addls	r2, #48	@ 0x30
 8013d5c:	3237      	addhi	r2, #55	@ 0x37
 8013d5e:	2b09      	cmp	r3, #9
 8013d60:	bf94      	ite	ls
 8013d62:	3330      	addls	r3, #48	@ 0x30
 8013d64:	3337      	addhi	r3, #55	@ 0x37
 8013d66:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 8013d70:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 8013d74:	6820      	ldr	r0, [r4, #0]
 8013d76:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8013d78:	f104 0316 	add.w	r3, r4, #22
 8013d7c:	61eb      	str	r3, [r5, #28]
 8013d7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8013d82:	f88d 3017 	strb.w	r3, [sp, #23]
 8013d86:	1e43      	subs	r3, r0, #1
 8013d88:	4258      	negs	r0, r3
 8013d8a:	4158      	adcs	r0, r3
 8013d8c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8013d90:	f002 fd4c 	bl	801682c <net::display_emac_status(bool)>
 8013d94:	f10d 0317 	add.w	r3, sp, #23
 8013d98:	9300      	str	r3, [sp, #0]
 8013d9a:	6820      	ldr	r0, [r4, #0]
 8013d9c:	463b      	mov	r3, r7
 8013d9e:	4632      	mov	r2, r6
 8013da0:	4629      	mov	r1, r5
 8013da2:	f7f4 fa87 	bl	80082b4 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)>
 8013da6:	4620      	mov	r0, r4
 8013da8:	b01f      	add	sp, #124	@ 0x7c
 8013daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dac:	223f      	movs	r2, #63	@ 0x3f
 8013dae:	f10d 012d 	add.w	r1, sp, #45	@ 0x2d
 8013db2:	f104 0016 	add.w	r0, r4, #22
 8013db6:	f7ff febf 	bl	8013b38 <strncpy.isra.0>
 8013dba:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
 8013dbe:	e7d9      	b.n	8013d74 <Network::Network()+0x110>
 8013dc0:	2000e200 	andcs	lr, r0, r0, lsl #4
 8013dc4:	0801bb3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, sp, pc}
 8013dc8:	2000e220 	andcs	lr, r0, r0, lsr #4
 8013dcc:	2000e234 	andcs	lr, r0, r4, lsr r2
 8013dd0:	0801bb43 	stmdaeq	r1, {r0, r1, r6, r8, r9, fp, ip, sp, pc}
 8013dd4:	08013b85 	stmdaeq	r1, {r0, r2, r7, r8, r9, fp, ip, sp}
 8013dd8:	0801bb62 	stmdaeq	r1, {r1, r5, r6, r8, r9, fp, ip, sp, pc}

08013ddc <Network::SetIp(unsigned long)>:
 8013ddc:	b510      	push	{r4, lr}
 8013dde:	4b0d      	ldr	r3, [pc, #52]	@ (8013e14 <Network::SetIp(unsigned long)+0x38>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	428b      	cmp	r3, r1
 8013de4:	b086      	sub	sp, #24
 8013de6:	460c      	mov	r4, r1
 8013de8:	d012      	beq.n	8013e10 <Network::SetIp(unsigned long)+0x34>
 8013dea:	4608      	mov	r0, r1
 8013dec:	f000 fe04 	bl	80149f8 <net::net_set_primary_ip(net::ip_addr)>
 8013df0:	9405      	str	r4, [sp, #20]
 8013df2:	2302      	movs	r3, #2
 8013df4:	2400      	movs	r4, #0
 8013df6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013dfa:	2204      	movs	r2, #4
 8013dfc:	4806      	ldr	r0, [pc, #24]	@ (8013e18 <Network::SetIp(unsigned long)+0x3c>)
 8013dfe:	9200      	str	r2, [sp, #0]
 8013e00:	6800      	ldr	r0, [r0, #0]
 8013e02:	ab05      	add	r3, sp, #20
 8013e04:	4621      	mov	r1, r4
 8013e06:	f002 fe27 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	f7ff fea6 	bl	8013b5c <NetworkStore::SaveDhcp(bool)>
 8013e10:	b006      	add	sp, #24
 8013e12:	bd10      	pop	{r4, pc}
 8013e14:	2000e220 	andcs	lr, r0, r0, lsr #4
 8013e18:	2000e2cc 	andcs	lr, r0, ip, asr #5

08013e1c <Network::SetNetmask(unsigned long)>:
 8013e1c:	b510      	push	{r4, lr}
 8013e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8013e4c <Network::SetNetmask(unsigned long)+0x30>)
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	428b      	cmp	r3, r1
 8013e24:	b086      	sub	sp, #24
 8013e26:	460c      	mov	r4, r1
 8013e28:	d00e      	beq.n	8013e48 <Network::SetNetmask(unsigned long)+0x2c>
 8013e2a:	4608      	mov	r0, r1
 8013e2c:	f000 fe9e 	bl	8014b6c <net::netif_set_netmask(net::ip_addr)>
 8013e30:	2304      	movs	r3, #4
 8013e32:	2100      	movs	r1, #0
 8013e34:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013e38:	4805      	ldr	r0, [pc, #20]	@ (8013e50 <Network::SetNetmask(unsigned long)+0x34>)
 8013e3a:	9300      	str	r3, [sp, #0]
 8013e3c:	6800      	ldr	r0, [r0, #0]
 8013e3e:	9405      	str	r4, [sp, #20]
 8013e40:	ab05      	add	r3, sp, #20
 8013e42:	2208      	movs	r2, #8
 8013e44:	f002 fe08 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8013e48:	b006      	add	sp, #24
 8013e4a:	bd10      	pop	{r4, pc}
 8013e4c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8013e50:	2000e2cc 	andcs	lr, r0, ip, asr #5

08013e54 <Network::SetGatewayIp(unsigned long)>:
 8013e54:	b510      	push	{r4, lr}
 8013e56:	4b0c      	ldr	r3, [pc, #48]	@ (8013e88 <Network::SetGatewayIp(unsigned long)+0x34>)
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	428b      	cmp	r3, r1
 8013e5c:	b086      	sub	sp, #24
 8013e5e:	460c      	mov	r4, r1
 8013e60:	d00f      	beq.n	8013e82 <Network::SetGatewayIp(unsigned long)+0x2e>
 8013e62:	4608      	mov	r0, r1
 8013e64:	f000 fe96 	bl	8014b94 <net::netif_set_gw(net::ip_addr)>
 8013e68:	2308      	movs	r3, #8
 8013e6a:	2100      	movs	r1, #0
 8013e6c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013e70:	4806      	ldr	r0, [pc, #24]	@ (8013e8c <Network::SetGatewayIp(unsigned long)+0x38>)
 8013e72:	9405      	str	r4, [sp, #20]
 8013e74:	2304      	movs	r3, #4
 8013e76:	9300      	str	r3, [sp, #0]
 8013e78:	6800      	ldr	r0, [r0, #0]
 8013e7a:	ab05      	add	r3, sp, #20
 8013e7c:	220c      	movs	r2, #12
 8013e7e:	f002 fdeb 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8013e82:	b006      	add	sp, #24
 8013e84:	bd10      	pop	{r4, pc}
 8013e86:	bf00      	nop
 8013e88:	2000e220 	andcs	lr, r0, r0, lsr #4
 8013e8c:	2000e2cc 	andcs	lr, r0, ip, asr #5

08013e90 <Network::SetHostName(char const*)>:
 8013e90:	b530      	push	{r4, r5, lr}
 8013e92:	f100 0416 	add.w	r4, r0, #22
 8013e96:	4605      	mov	r5, r0
 8013e98:	b085      	sub	sp, #20
 8013e9a:	223f      	movs	r2, #63	@ 0x3f
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	f7ff fe4b 	bl	8013b38 <strncpy.isra.0>
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8013ea8:	4623      	mov	r3, r4
 8013eaa:	461a      	mov	r2, r3
 8013eac:	3301      	adds	r3, #1
 8013eae:	7811      	ldrb	r1, [r2, #0]
 8013eb0:	2900      	cmp	r1, #0
 8013eb2:	d1fa      	bne.n	8013eaa <Network::SetHostName(char const*)+0x1a>
 8013eb4:	1b12      	subs	r2, r2, r4
 8013eb6:	2a40      	cmp	r2, #64	@ 0x40
 8013eb8:	bf28      	it	cs
 8013eba:	2240      	movcs	r2, #64	@ 0x40
 8013ebc:	2320      	movs	r3, #32
 8013ebe:	4808      	ldr	r0, [pc, #32]	@ (8013ee0 <Network::SetHostName(char const*)+0x50>)
 8013ec0:	9102      	str	r1, [sp, #8]
 8013ec2:	9301      	str	r3, [sp, #4]
 8013ec4:	9200      	str	r2, [sp, #0]
 8013ec6:	6800      	ldr	r0, [r0, #0]
 8013ec8:	4623      	mov	r3, r4
 8013eca:	2215      	movs	r2, #21
 8013ecc:	f002 fdc4 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8013ed0:	f7ff fc6a 	bl	80137a8 <network::mdns_announcement()>
 8013ed4:	b005      	add	sp, #20
 8013ed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013eda:	f002 bd0d 	b.w	80168f8 <net::display_hostname()>
 8013ede:	bf00      	nop
 8013ee0:	2000e2cc 	andcs	lr, r0, ip, asr #5

08013ee4 <Network::SetZeroconf()>:
 8013ee4:	b508      	push	{r3, lr}
 8013ee6:	f000 f869 	bl	8013fbc <net::autoip_start()>
 8013eea:	2000      	movs	r0, #0
 8013eec:	f7ff fe36 	bl	8013b5c <NetworkStore::SaveDhcp(bool)>
 8013ef0:	bd08      	pop	{r3, pc}

08013ef2 <Network::EnableDhcp()>:
 8013ef2:	b508      	push	{r3, lr}
 8013ef4:	f000 fada 	bl	80144ac <net::dhcp_start()>
 8013ef8:	2001      	movs	r0, #1
 8013efa:	f7ff fe2f 	bl	8013b5c <NetworkStore::SaveDhcp(bool)>
 8013efe:	bd08      	pop	{r3, pc}

08013f00 <Network::SetQueuedStaticIp(unsigned long, unsigned long)>:
 8013f00:	b909      	cbnz	r1, 8013f06 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x6>
 8013f02:	4b08      	ldr	r3, [pc, #32]	@ (8013f24 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x24>)
 8013f04:	6819      	ldr	r1, [r3, #0]
 8013f06:	f8c0 10a8 	str.w	r1, [r0, #168]	@ 0xa8
 8013f0a:	b90a      	cbnz	r2, 8013f10 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x10>
 8013f0c:	4b05      	ldr	r3, [pc, #20]	@ (8013f24 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x24>)
 8013f0e:	685a      	ldr	r2, [r3, #4]
 8013f10:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8013f14:	f8c0 20ac 	str.w	r2, [r0, #172]	@ 0xac
 8013f18:	f043 0303 	orr.w	r3, r3, #3
 8013f1c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 8013f20:	4770      	bx	lr
 8013f22:	bf00      	nop
 8013f24:	2000e220 	andcs	lr, r0, r0, lsr #4

08013f28 <Network::SetQueuedDefaultRoute(unsigned long)>:
 8013f28:	b909      	cbnz	r1, 8013f2e <Network::SetQueuedDefaultRoute(unsigned long)+0x6>
 8013f2a:	4b05      	ldr	r3, [pc, #20]	@ (8013f40 <Network::SetQueuedDefaultRoute(unsigned long)+0x18>)
 8013f2c:	6899      	ldr	r1, [r3, #8]
 8013f2e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8013f32:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
 8013f36:	f043 0304 	orr.w	r3, r3, #4
 8013f3a:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 8013f3e:	4770      	bx	lr
 8013f40:	2000e220 	andcs	lr, r0, r0, lsr #4

08013f44 <Network::ApplyQueuedConfig()>:
 8013f44:	b538      	push	{r3, r4, r5, lr}
 8013f46:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8013f4a:	4604      	mov	r4, r0
 8013f4c:	b3a3      	cbz	r3, 8013fb8 <Network::ApplyQueuedConfig()+0x74>
 8013f4e:	07d9      	lsls	r1, r3, #31
 8013f50:	d40f      	bmi.n	8013f72 <Network::ApplyQueuedConfig()+0x2e>
 8013f52:	f013 0f06 	tst.w	r3, #6
 8013f56:	d110      	bne.n	8013f7a <Network::ApplyQueuedConfig()+0x36>
 8013f58:	f013 0508 	ands.w	r5, r3, #8
 8013f5c:	d024      	beq.n	8013fa8 <Network::ApplyQueuedConfig()+0x64>
 8013f5e:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d101      	bne.n	8013f6a <Network::ApplyQueuedConfig()+0x26>
 8013f66:	f7ff ffc4 	bl	8013ef2 <Network::EnableDhcp()>
 8013f6a:	2302      	movs	r3, #2
 8013f6c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8013f70:	e015      	b.n	8013f9e <Network::ApplyQueuedConfig()+0x5a>
 8013f72:	f8d0 10a8 	ldr.w	r1, [r0, #168]	@ 0xa8
 8013f76:	f7ff ff31 	bl	8013ddc <Network::SetIp(unsigned long)>
 8013f7a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8013f7e:	079a      	lsls	r2, r3, #30
 8013f80:	d504      	bpl.n	8013f8c <Network::ApplyQueuedConfig()+0x48>
 8013f82:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8013f86:	4620      	mov	r0, r4
 8013f88:	f7ff ff48 	bl	8013e1c <Network::SetNetmask(unsigned long)>
 8013f8c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8013f90:	075b      	lsls	r3, r3, #29
 8013f92:	d504      	bpl.n	8013f9e <Network::ApplyQueuedConfig()+0x5a>
 8013f94:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7ff ff5b 	bl	8013e54 <Network::SetGatewayIp(unsigned long)>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
 8013fa4:	2001      	movs	r0, #1
 8013fa6:	bd38      	pop	{r3, r4, r5, pc}
 8013fa8:	f013 0310 	ands.w	r3, r3, #16
 8013fac:	d004      	beq.n	8013fb8 <Network::ApplyQueuedConfig()+0x74>
 8013fae:	f7ff ff99 	bl	8013ee4 <Network::SetZeroconf()>
 8013fb2:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 8013fb6:	e7f5      	b.n	8013fa4 <Network::ApplyQueuedConfig()+0x60>
 8013fb8:	4618      	mov	r0, r3
 8013fba:	e7f4      	b.n	8013fa6 <Network::ApplyQueuedConfig()+0x62>

08013fbc <net::autoip_start()>:
 8013fbc:	b570      	push	{r4, r5, r6, lr}
 8013fbe:	4e21      	ldr	r6, [pc, #132]	@ (8014044 <net::autoip_start()+0x88>)
 8013fc0:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 8013fc2:	b95c      	cbnz	r4, 8013fdc <net::autoip_start()+0x20>
 8013fc4:	201c      	movs	r0, #28
 8013fc6:	f006 fced 	bl	801a9a4 <operator new(unsigned int)>
 8013fca:	2100      	movs	r1, #0
 8013fcc:	4604      	mov	r4, r0
 8013fce:	f100 021c 	add.w	r2, r0, #28
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8013fd8:	4293      	cmp	r3, r2
 8013fda:	d1fb      	bne.n	8013fd4 <net::autoip_start()+0x18>
 8013fdc:	6863      	ldr	r3, [r4, #4]
 8013fde:	bb7b      	cbnz	r3, 8014040 <net::autoip_start()+0x84>
 8013fe0:	f104 050c 	add.w	r5, r4, #12
 8013fe4:	4918      	ldr	r1, [pc, #96]	@ (8014048 <net::autoip_start()+0x8c>)
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	f001 fec2 	bl	8015d70 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>
 8013fec:	8822      	ldrh	r2, [r4, #0]
 8013fee:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d01c      	beq.n	8014030 <net::autoip_start()+0x74>
 8013ff6:	f8b6 3017 	ldrh.w	r3, [r6, #23]
 8013ffa:	4a14      	ldr	r2, [pc, #80]	@ (801404c <net::autoip_start()+0x90>)
 8013ffc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014000:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8014002:	7a1b      	ldrb	r3, [r3, #8]
 8014004:	ba12      	rev	r2, r2
 8014006:	4413      	add	r3, r2
 8014008:	b29b      	uxth	r3, r3
 801400a:	4a11      	ldr	r2, [pc, #68]	@ (8014050 <net::autoip_start()+0x94>)
 801400c:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 8014010:	f443 037e 	orr.w	r3, r3, #16646144	@ 0xfe0000
 8014014:	4293      	cmp	r3, r2
 8014016:	4a0f      	ldr	r2, [pc, #60]	@ (8014054 <net::autoip_start()+0x98>)
 8014018:	bf98      	it	ls
 801401a:	f503 437e 	addls.w	r3, r3, #65024	@ 0xfe00
 801401e:	4293      	cmp	r3, r2
 8014020:	6023      	str	r3, [r4, #0]
 8014022:	bf84      	itt	hi
 8014024:	f5a3 437e 	subhi.w	r3, r3, #65024	@ 0xfe00
 8014028:	6023      	strhi	r3, [r4, #0]
 801402a:	6823      	ldr	r3, [r4, #0]
 801402c:	ba1b      	rev	r3, r3
 801402e:	6023      	str	r3, [r4, #0]
 8014030:	2301      	movs	r3, #1
 8014032:	6821      	ldr	r1, [r4, #0]
 8014034:	6063      	str	r3, [r4, #4]
 8014036:	4628      	mov	r0, r5
 8014038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801403c:	f001 bd62 	b.w	8015b04 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 8014040:	bd70      	pop	{r4, r5, r6, pc}
 8014042:	bf00      	nop
 8014044:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014048:	0801407d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, lr}
 801404c:	0001fea9 	andeq	pc, r1, r9, lsr #29
 8014050:	a9fe00ff 	ldmibge	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}^
 8014054:	a9fefeff 	ldmibge	lr!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr, pc}^

08014058 <net::autoip_stop()>:
 8014058:	4b07      	ldr	r3, [pc, #28]	@ (8014078 <net::autoip_stop()+0x20>)
 801405a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801405c:	b151      	cbz	r1, 8014074 <net::autoip_stop()+0x1c>
 801405e:	2200      	movs	r2, #0
 8014060:	604a      	str	r2, [r1, #4]
 8014062:	8819      	ldrh	r1, [r3, #0]
 8014064:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 8014068:	4299      	cmp	r1, r3
 801406a:	d103      	bne.n	8014074 <net::autoip_stop()+0x1c>
 801406c:	4611      	mov	r1, r2
 801406e:	4610      	mov	r0, r2
 8014070:	f000 bda4 	b.w	8014bbc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8014074:	4770      	bx	lr
 8014076:	bf00      	nop
 8014078:	2000e220 	andcs	lr, r0, r0, lsr #4

0801407c <net::autoip_conflict_callback(net::acd::Callback)>:
 801407c:	b510      	push	{r4, lr}
 801407e:	4c11      	ldr	r4, [pc, #68]	@ (80140c4 <net::autoip_conflict_callback(net::acd::Callback)+0x48>)
 8014080:	2801      	cmp	r0, #1
 8014082:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014084:	4602      	mov	r2, r0
 8014086:	d00e      	beq.n	80140a6 <net::autoip_conflict_callback(net::acd::Callback)+0x2a>
 8014088:	2802      	cmp	r0, #2
 801408a:	d013      	beq.n	80140b4 <net::autoip_conflict_callback(net::acd::Callback)+0x38>
 801408c:	b950      	cbnz	r0, 80140a4 <net::autoip_conflict_callback(net::acd::Callback)+0x28>
 801408e:	2102      	movs	r1, #2
 8014090:	6059      	str	r1, [r3, #4]
 8014092:	6818      	ldr	r0, [r3, #0]
 8014094:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014098:	f000 fd90 	bl	8014bbc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 801409c:	7ea3      	ldrb	r3, [r4, #26]
 801409e:	f043 0304 	orr.w	r3, r3, #4
 80140a2:	76a3      	strb	r3, [r4, #26]
 80140a4:	bd10      	pop	{r4, pc}
 80140a6:	7a1a      	ldrb	r2, [r3, #8]
 80140a8:	3201      	adds	r2, #1
 80140aa:	721a      	strb	r2, [r3, #8]
 80140ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140b0:	f7ff bf84 	b.w	8013fbc <net::autoip_start()>
 80140b4:	2200      	movs	r2, #0
 80140b6:	601a      	str	r2, [r3, #0]
 80140b8:	f7ff ffce 	bl	8014058 <net::autoip_stop()>
 80140bc:	7ea3      	ldrb	r3, [r4, #26]
 80140be:	f023 0304 	bic.w	r3, r3, #4
 80140c2:	e7ee      	b.n	80140a2 <net::autoip_conflict_callback(net::acd::Callback)+0x26>
 80140c4:	2000e220 	andcs	lr, r0, r0, lsr #4

080140c8 <net::dhcp_bind()>:
 80140c8:	4833      	ldr	r0, [pc, #204]	@ (8014198 <net::dhcp_bind()+0xd0>)
 80140ca:	6a03      	ldr	r3, [r0, #32]
 80140cc:	2200      	movs	r2, #0
 80140ce:	b410      	push	{r4}
 80140d0:	82da      	strh	r2, [r3, #22]
 80140d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140d4:	1c51      	adds	r1, r2, #1
 80140d6:	d009      	beq.n	80140ec <net::dhcp_bind()+0x24>
 80140d8:	321e      	adds	r2, #30
 80140da:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 80140de:	d23f      	bcs.n	8014160 <net::dhcp_bind()+0x98>
 80140e0:	2a3b      	cmp	r2, #59	@ 0x3b
 80140e2:	d940      	bls.n	8014166 <net::dhcp_bind()+0x9e>
 80140e4:	213c      	movs	r1, #60	@ 0x3c
 80140e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80140ea:	831a      	strh	r2, [r3, #24]
 80140ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80140ee:	1c54      	adds	r4, r2, #1
 80140f0:	d00b      	beq.n	801410a <net::dhcp_bind()+0x42>
 80140f2:	321e      	adds	r2, #30
 80140f4:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 80140f8:	d237      	bcs.n	801416a <net::dhcp_bind()+0xa2>
 80140fa:	2a3b      	cmp	r2, #59	@ 0x3b
 80140fc:	d938      	bls.n	8014170 <net::dhcp_bind()+0xa8>
 80140fe:	213c      	movs	r1, #60	@ 0x3c
 8014100:	fbb2 f2f1 	udiv	r2, r2, r1
 8014104:	b292      	uxth	r2, r2
 8014106:	81da      	strh	r2, [r3, #14]
 8014108:	825a      	strh	r2, [r3, #18]
 801410a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801410c:	1c51      	adds	r1, r2, #1
 801410e:	d00b      	beq.n	8014128 <net::dhcp_bind()+0x60>
 8014110:	321e      	adds	r2, #30
 8014112:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 8014116:	d22d      	bcs.n	8014174 <net::dhcp_bind()+0xac>
 8014118:	2a3b      	cmp	r2, #59	@ 0x3b
 801411a:	d92e      	bls.n	801417a <net::dhcp_bind()+0xb2>
 801411c:	213c      	movs	r1, #60	@ 0x3c
 801411e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014122:	b292      	uxth	r2, r2
 8014124:	821a      	strh	r2, [r3, #16]
 8014126:	829a      	strh	r2, [r3, #20]
 8014128:	8a1a      	ldrh	r2, [r3, #16]
 801412a:	89d9      	ldrh	r1, [r3, #14]
 801412c:	4291      	cmp	r1, r2
 801412e:	d302      	bcc.n	8014136 <net::dhcp_bind()+0x6e>
 8014130:	b10a      	cbz	r2, 8014136 <net::dhcp_bind()+0x6e>
 8014132:	2200      	movs	r2, #0
 8014134:	81da      	strh	r2, [r3, #14]
 8014136:	7a9a      	ldrb	r2, [r3, #10]
 8014138:	07d4      	lsls	r4, r2, #31
 801413a:	d520      	bpl.n	801417e <net::dhcp_bind()+0xb6>
 801413c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801413e:	7a1c      	ldrb	r4, [r3, #8]
 8014140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014142:	2c0a      	cmp	r4, #10
 8014144:	bf1f      	itttt	ne
 8014146:	240a      	movne	r4, #10
 8014148:	811c      	strhne	r4, [r3, #8]
 801414a:	2400      	movne	r4, #0
 801414c:	819c      	strhne	r4, [r3, #12]
 801414e:	7e84      	ldrb	r4, [r0, #26]
 8014150:	f044 0402 	orr.w	r4, r4, #2
 8014154:	7684      	strb	r4, [r0, #26]
 8014156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801415a:	6a18      	ldr	r0, [r3, #32]
 801415c:	f000 bd2e 	b.w	8014bbc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8014160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014164:	e7c1      	b.n	80140ea <net::dhcp_bind()+0x22>
 8014166:	2201      	movs	r2, #1
 8014168:	e7bf      	b.n	80140ea <net::dhcp_bind()+0x22>
 801416a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801416e:	e7c9      	b.n	8014104 <net::dhcp_bind()+0x3c>
 8014170:	2201      	movs	r2, #1
 8014172:	e7c7      	b.n	8014104 <net::dhcp_bind()+0x3c>
 8014174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014178:	e7d3      	b.n	8014122 <net::dhcp_bind()+0x5a>
 801417a:	2201      	movs	r2, #1
 801417c:	e7d1      	b.n	8014122 <net::dhcp_bind()+0x5a>
 801417e:	6a1a      	ldr	r2, [r3, #32]
 8014180:	0611      	lsls	r1, r2, #24
 8014182:	d507      	bpl.n	8014194 <net::dhcp_bind()+0xcc>
 8014184:	b2d2      	uxtb	r2, r2
 8014186:	2abf      	cmp	r2, #191	@ 0xbf
 8014188:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801418c:	bf88      	it	hi
 801418e:	f06f 417f 	mvnhi.w	r1, #4278190080	@ 0xff000000
 8014192:	e7d4      	b.n	801413e <net::dhcp_bind()+0x76>
 8014194:	21ff      	movs	r1, #255	@ 0xff
 8014196:	e7d2      	b.n	801413e <net::dhcp_bind()+0x76>
 8014198:	2000e220 	andcs	lr, r0, r0, lsr #4

0801419c <net::message_init()>:
 801419c:	b508      	push	{r3, lr}
 801419e:	4b0c      	ldr	r3, [pc, #48]	@ (80141d0 <net::message_init()+0x34>)
 80141a0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80141a4:	2100      	movs	r1, #0
 80141a6:	4618      	mov	r0, r3
 80141a8:	f005 fec2 	bl	8019f30 <memset>
 80141ac:	f240 1201 	movw	r2, #257	@ 0x101
 80141b0:	8002      	strh	r2, [r0, #0]
 80141b2:	2206      	movs	r2, #6
 80141b4:	7082      	strb	r2, [r0, #2]
 80141b6:	4a07      	ldr	r2, [pc, #28]	@ (80141d4 <net::message_init()+0x38>)
 80141b8:	6951      	ldr	r1, [r2, #20]
 80141ba:	8b12      	ldrh	r2, [r2, #24]
 80141bc:	8402      	strh	r2, [r0, #32]
 80141be:	4a06      	ldr	r2, [pc, #24]	@ (80141d8 <net::message_init()+0x3c>)
 80141c0:	f8c0 20ec 	str.w	r2, [r0, #236]	@ 0xec
 80141c4:	f240 1235 	movw	r2, #309	@ 0x135
 80141c8:	f8a0 20f0 	strh.w	r2, [r0, #240]	@ 0xf0
 80141cc:	61c1      	str	r1, [r0, #28]
 80141ce:	bd08      	pop	{r3, pc}
 80141d0:	10008000 	andne	r8, r0, r0
 80141d4:	2000e220 	andcs	lr, r0, r0, lsr #4
 80141d8:	63538263 	cmpvs	r3, #805306374	@ 0x30000006

080141dc <net::dhcp_discover()>:
 80141dc:	4a27      	ldr	r2, [pc, #156]	@ (801427c <net::dhcp_discover()+0xa0>)
 80141de:	b513      	push	{r0, r1, r4, lr}
 80141e0:	6a14      	ldr	r4, [r2, #32]
 80141e2:	7a21      	ldrb	r1, [r4, #8]
 80141e4:	2906      	cmp	r1, #6
 80141e6:	bf1c      	itt	ne
 80141e8:	2106      	movne	r1, #6
 80141ea:	8121      	strhne	r1, [r4, #8]
 80141ec:	f04f 0300 	mov.w	r3, #0
 80141f0:	6a10      	ldr	r0, [r2, #32]
 80141f2:	6223      	str	r3, [r4, #32]
 80141f4:	bf18      	it	ne
 80141f6:	81a3      	strhne	r3, [r4, #12]
 80141f8:	7a43      	ldrb	r3, [r0, #9]
 80141fa:	b923      	cbnz	r3, 8014206 <net::dhcp_discover()+0x2a>
 80141fc:	6843      	ldr	r3, [r0, #4]
 80141fe:	ba1b      	rev	r3, r3
 8014200:	3301      	adds	r3, #1
 8014202:	ba1b      	rev	r3, r3
 8014204:	6043      	str	r3, [r0, #4]
 8014206:	491e      	ldr	r1, [pc, #120]	@ (8014280 <net::dhcp_discover()+0xa4>)
 8014208:	6843      	ldr	r3, [r0, #4]
 801420a:	604b      	str	r3, [r1, #4]
 801420c:	f643 5301 	movw	r3, #15617	@ 0x3d01
 8014210:	f8a1 30f2 	strh.w	r3, [r1, #242]	@ 0xf2
 8014214:	f240 1307 	movw	r3, #263	@ 0x107
 8014218:	f8a1 30f4 	strh.w	r3, [r1, #244]	@ 0xf4
 801421c:	8a93      	ldrh	r3, [r2, #20]
 801421e:	f8a1 30f6 	strh.w	r3, [r1, #246]	@ 0xf6
 8014222:	8ad3      	ldrh	r3, [r2, #22]
 8014224:	f8a1 30f8 	strh.w	r3, [r1, #248]	@ 0xf8
 8014228:	8b13      	ldrh	r3, [r2, #24]
 801422a:	f8a1 30fa 	strh.w	r3, [r1, #250]	@ 0xfa
 801422e:	4a15      	ldr	r2, [pc, #84]	@ (8014284 <net::dhcp_discover()+0xa8>)
 8014230:	4b15      	ldr	r3, [pc, #84]	@ (8014288 <net::dhcp_discover()+0xac>)
 8014232:	e9c1 233f 	strd	r2, r3, [r1, #252]	@ 0xfc
 8014236:	23ff      	movs	r3, #255	@ 0xff
 8014238:	f881 3104 	strb.w	r3, [r1, #260]	@ 0x104
 801423c:	2343      	movs	r3, #67	@ 0x43
 801423e:	9300      	str	r3, [sp, #0]
 8014240:	6800      	ldr	r0, [r0, #0]
 8014242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014246:	f240 1205 	movw	r2, #261	@ 0x105
 801424a:	f000 ffa7 	bl	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 801424e:	7a63      	ldrb	r3, [r4, #9]
 8014250:	2bff      	cmp	r3, #255	@ 0xff
 8014252:	bf1c      	itt	ne
 8014254:	3301      	addne	r3, #1
 8014256:	7263      	strbne	r3, [r4, #9]
 8014258:	7a62      	ldrb	r2, [r4, #9]
 801425a:	2a05      	cmp	r2, #5
 801425c:	bf9a      	itte	ls
 801425e:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
 8014262:	4093      	lslls	r3, r2
 8014264:	f64e 2360 	movwhi	r3, #60000	@ 0xea60
 8014268:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801426c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014270:	fbb3 f3f2 	udiv	r3, r3, r2
 8014274:	81a3      	strh	r3, [r4, #12]
 8014276:	b002      	add	sp, #8
 8014278:	bd10      	pop	{r4, pc}
 801427a:	bf00      	nop
 801427c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014280:	10008000 	andne	r8, r0, r0
 8014284:	03010637 	movweq	r0, #5687	@ 0x1637
 8014288:	3b3a330f 	blcc	8ea0ecc <_sidata+0xe816fc>

0801428c <net::memcpy_ip(unsigned char*, unsigned long)>:
 801428c:	6001      	str	r1, [r0, #0]
 801428e:	4770      	bx	lr

08014290 <net::send_request()>:
 8014290:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014292:	4c31      	ldr	r4, [pc, #196]	@ (8014358 <net::send_request()+0xc8>)
 8014294:	4d31      	ldr	r5, [pc, #196]	@ (801435c <net::send_request()+0xcc>)
 8014296:	f643 5303 	movw	r3, #15619	@ 0x3d03
 801429a:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 801429e:	f240 1307 	movw	r3, #263	@ 0x107
 80142a2:	f8a4 30f4 	strh.w	r3, [r4, #244]	@ 0xf4
 80142a6:	8aab      	ldrh	r3, [r5, #20]
 80142a8:	f8a4 30f6 	strh.w	r3, [r4, #246]	@ 0xf6
 80142ac:	8aeb      	ldrh	r3, [r5, #22]
 80142ae:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 80142b2:	8b2b      	ldrh	r3, [r5, #24]
 80142b4:	6a2e      	ldr	r6, [r5, #32]
 80142b6:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 80142ba:	f240 4332 	movw	r3, #1074	@ 0x432
 80142be:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 80142c2:	6a31      	ldr	r1, [r6, #32]
 80142c4:	f104 00fe 	add.w	r0, r4, #254	@ 0xfe
 80142c8:	f7ff ffe0 	bl	801428c <net::memcpy_ip(unsigned char*, unsigned long)>
 80142cc:	f240 4336 	movw	r3, #1078	@ 0x436
 80142d0:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 80142d4:	69f1      	ldr	r1, [r6, #28]
 80142d6:	f504 7082 	add.w	r0, r4, #260	@ 0x104
 80142da:	f7ff ffd7 	bl	801428c <net::memcpy_ip(unsigned char*, unsigned long)>
 80142de:	230c      	movs	r3, #12
 80142e0:	f8a4 3108 	strh.w	r3, [r4, #264]	@ 0x108
 80142e4:	69eb      	ldr	r3, [r5, #28]
 80142e6:	221e      	movs	r2, #30
 80142e8:	3b01      	subs	r3, #1
 80142ea:	f204 1509 	addw	r5, r4, #265	@ 0x109
 80142ee:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80142f2:	1c51      	adds	r1, r2, #1
 80142f4:	bb58      	cbnz	r0, 801434e <net::send_request()+0xbe>
 80142f6:	f1a2 031e 	sub.w	r3, r2, #30
 80142fa:	f884 3109 	strb.w	r3, [r4, #265]	@ 0x109
 80142fe:	18a3      	adds	r3, r4, r2
 8014300:	440c      	add	r4, r1
 8014302:	2037      	movs	r0, #55	@ 0x37
 8014304:	2106      	movs	r1, #6
 8014306:	f883 00ec 	strb.w	r0, [r3, #236]	@ 0xec
 801430a:	f884 10ec 	strb.w	r1, [r4, #236]	@ 0xec
 801430e:	f883 10f0 	strb.w	r1, [r3, #240]	@ 0xf0
 8014312:	210f      	movs	r1, #15
 8014314:	f883 10f1 	strb.w	r1, [r3, #241]	@ 0xf1
 8014318:	213a      	movs	r1, #58	@ 0x3a
 801431a:	f883 10f2 	strb.w	r1, [r3, #242]	@ 0xf2
 801431e:	2001      	movs	r0, #1
 8014320:	213b      	movs	r1, #59	@ 0x3b
 8014322:	f883 00ee 	strb.w	r0, [r3, #238]	@ 0xee
 8014326:	f883 10f3 	strb.w	r1, [r3, #243]	@ 0xf3
 801432a:	2003      	movs	r0, #3
 801432c:	21ff      	movs	r1, #255	@ 0xff
 801432e:	f883 10f4 	strb.w	r1, [r3, #244]	@ 0xf4
 8014332:	f883 00ef 	strb.w	r0, [r3, #239]	@ 0xef
 8014336:	2343      	movs	r3, #67	@ 0x43
 8014338:	9300      	str	r3, [sp, #0]
 801433a:	32f5      	adds	r2, #245	@ 0xf5
 801433c:	4906      	ldr	r1, [pc, #24]	@ (8014358 <net::send_request()+0xc8>)
 801433e:	6830      	ldr	r0, [r6, #0]
 8014340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014344:	b292      	uxth	r2, r2
 8014346:	f000 ff29 	bl	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 801434a:	b002      	add	sp, #8
 801434c:	bd70      	pop	{r4, r5, r6, pc}
 801434e:	f805 0f01 	strb.w	r0, [r5, #1]!
 8014352:	460a      	mov	r2, r1
 8014354:	e7cb      	b.n	80142ee <net::send_request()+0x5e>
 8014356:	bf00      	nop
 8014358:	10008000 	andne	r8, r0, r0
 801435c:	2000e220 	andcs	lr, r0, r0, lsr #4

08014360 <net::dhcp_select()>:
 8014360:	4b11      	ldr	r3, [pc, #68]	@ (80143a8 <net::dhcp_select()+0x48>)
 8014362:	b510      	push	{r4, lr}
 8014364:	6a1c      	ldr	r4, [r3, #32]
 8014366:	7a23      	ldrb	r3, [r4, #8]
 8014368:	2b01      	cmp	r3, #1
 801436a:	bf1f      	itttt	ne
 801436c:	2301      	movne	r3, #1
 801436e:	8123      	strhne	r3, [r4, #8]
 8014370:	2300      	movne	r3, #0
 8014372:	81a3      	strhne	r3, [r4, #12]
 8014374:	f7ff ff8c 	bl	8014290 <net::send_request()>
 8014378:	7a63      	ldrb	r3, [r4, #9]
 801437a:	2bff      	cmp	r3, #255	@ 0xff
 801437c:	bf1c      	itt	ne
 801437e:	3301      	addne	r3, #1
 8014380:	7263      	strbne	r3, [r4, #9]
 8014382:	7a62      	ldrb	r2, [r4, #9]
 8014384:	2a05      	cmp	r2, #5
 8014386:	bf9d      	ittte	ls
 8014388:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
 801438c:	4093      	lslls	r3, r2
 801438e:	b29b      	uxthls	r3, r3
 8014390:	f64e 2360 	movwhi	r3, #60000	@ 0xea60
 8014394:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014398:	b29b      	uxth	r3, r3
 801439a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801439e:	fbb3 f3f2 	udiv	r3, r3, r2
 80143a2:	81a3      	strh	r3, [r4, #12]
 80143a4:	bd10      	pop	{r4, pc}
 80143a6:	bf00      	nop
 80143a8:	2000e220 	andcs	lr, r0, r0, lsr #4

080143ac <net::dhcp_reboot()>:
 80143ac:	4b12      	ldr	r3, [pc, #72]	@ (80143f8 <net::dhcp_reboot()+0x4c>)
 80143ae:	b510      	push	{r4, lr}
 80143b0:	6a1c      	ldr	r4, [r3, #32]
 80143b2:	7a23      	ldrb	r3, [r4, #8]
 80143b4:	2b03      	cmp	r3, #3
 80143b6:	bf1f      	itttt	ne
 80143b8:	2303      	movne	r3, #3
 80143ba:	8123      	strhne	r3, [r4, #8]
 80143bc:	2300      	movne	r3, #0
 80143be:	81a3      	strhne	r3, [r4, #12]
 80143c0:	f7ff ff66 	bl	8014290 <net::send_request()>
 80143c4:	7a63      	ldrb	r3, [r4, #9]
 80143c6:	2bff      	cmp	r3, #255	@ 0xff
 80143c8:	bf1c      	itt	ne
 80143ca:	3301      	addne	r3, #1
 80143cc:	7263      	strbne	r3, [r4, #9]
 80143ce:	7a63      	ldrb	r3, [r4, #9]
 80143d0:	2b09      	cmp	r3, #9
 80143d2:	bf9f      	itttt	ls
 80143d4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80143d8:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 80143dc:	00db      	lslls	r3, r3, #3
 80143de:	b29b      	uxthls	r3, r3
 80143e0:	bf88      	it	hi
 80143e2:	f242 7310 	movwhi	r3, #10000	@ 0x2710
 80143e6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80143ea:	b29b      	uxth	r3, r3
 80143ec:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80143f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80143f4:	81a3      	strh	r3, [r4, #12]
 80143f6:	bd10      	pop	{r4, pc}
 80143f8:	2000e220 	andcs	lr, r0, r0, lsr #4

080143fc <net::memcpy_ip(unsigned char const*)>:
 80143fc:	6800      	ldr	r0, [r0, #0]
 80143fe:	4770      	bx	lr

08014400 <net::dhcp_handle_ack(net::dhcp::Message const*)>:
 8014400:	4b0e      	ldr	r3, [pc, #56]	@ (801443c <net::dhcp_handle_ack(net::dhcp::Message const*)+0x3c>)
 8014402:	b510      	push	{r4, lr}
 8014404:	6a1c      	ldr	r4, [r3, #32]
 8014406:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014408:	b913      	cbnz	r3, 8014410 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x10>
 801440a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801440c:	085b      	lsrs	r3, r3, #1
 801440e:	6323      	str	r3, [r4, #48]	@ 0x30
 8014410:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014412:	b923      	cbnz	r3, 801441e <net::dhcp_handle_ack(net::dhcp::Message const*)+0x1e>
 8014414:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8014416:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801441a:	08db      	lsrs	r3, r3, #3
 801441c:	6363      	str	r3, [r4, #52]	@ 0x34
 801441e:	3010      	adds	r0, #16
 8014420:	f7ff ffec 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8014424:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014426:	7aa3      	ldrb	r3, [r4, #10]
 8014428:	6220      	str	r0, [r4, #32]
 801442a:	b11a      	cbz	r2, 8014434 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x34>
 801442c:	f043 0301 	orr.w	r3, r3, #1
 8014430:	72a3      	strb	r3, [r4, #10]
 8014432:	bd10      	pop	{r4, pc}
 8014434:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8014438:	e7fa      	b.n	8014430 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x30>
 801443a:	bf00      	nop
 801443c:	2000e220 	andcs	lr, r0, r0, lsr #4

08014440 <net::dhcp_inform()>:
 8014440:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014442:	2044      	movs	r0, #68	@ 0x44
 8014444:	f000 fe52 	bl	80150ec <net::udp_begin(unsigned short)>
 8014448:	4c16      	ldr	r4, [pc, #88]	@ (80144a4 <net::dhcp_inform()+0x64>)
 801444a:	4d17      	ldr	r5, [pc, #92]	@ (80144a8 <net::dhcp_inform()+0x68>)
 801444c:	4606      	mov	r6, r0
 801444e:	f7ff fea5 	bl	801419c <net::message_init()>
 8014452:	6829      	ldr	r1, [r5, #0]
 8014454:	4620      	mov	r0, r4
 8014456:	f7ff ff19 	bl	801428c <net::memcpy_ip(unsigned char*, unsigned long)>
 801445a:	f1a4 010c 	sub.w	r1, r4, #12
 801445e:	f643 5308 	movw	r3, #15624	@ 0x3d08
 8014462:	f8a1 30f2 	strh.w	r3, [r1, #242]	@ 0xf2
 8014466:	f240 1307 	movw	r3, #263	@ 0x107
 801446a:	f8a1 30f4 	strh.w	r3, [r1, #244]	@ 0xf4
 801446e:	8aab      	ldrh	r3, [r5, #20]
 8014470:	f8a1 30f6 	strh.w	r3, [r1, #246]	@ 0xf6
 8014474:	8aeb      	ldrh	r3, [r5, #22]
 8014476:	f8a1 30f8 	strh.w	r3, [r1, #248]	@ 0xf8
 801447a:	8b2b      	ldrh	r3, [r5, #24]
 801447c:	f8a1 30fa 	strh.w	r3, [r1, #250]	@ 0xfa
 8014480:	23ff      	movs	r3, #255	@ 0xff
 8014482:	f881 30fc 	strb.w	r3, [r1, #252]	@ 0xfc
 8014486:	2343      	movs	r3, #67	@ 0x43
 8014488:	9300      	str	r3, [sp, #0]
 801448a:	4630      	mov	r0, r6
 801448c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014490:	22fd      	movs	r2, #253	@ 0xfd
 8014492:	f000 fe83 	bl	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 8014496:	2044      	movs	r0, #68	@ 0x44
 8014498:	b002      	add	sp, #8
 801449a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801449e:	f000 be3b 	b.w	8015118 <net::udp_end(unsigned short)>
 80144a2:	bf00      	nop
 80144a4:	1000800c 	andne	r8, r0, ip
 80144a8:	2000e220 	andcs	lr, r0, r0, lsr #4

080144ac <net::dhcp_start()>:
 80144ac:	b570      	push	{r4, r5, r6, lr}
 80144ae:	4d20      	ldr	r5, [pc, #128]	@ (8014530 <net::dhcp_start()+0x84>)
 80144b0:	6a2c      	ldr	r4, [r5, #32]
 80144b2:	b96c      	cbnz	r4, 80144d0 <net::dhcp_start()+0x24>
 80144b4:	2048      	movs	r0, #72	@ 0x48
 80144b6:	f006 fa75 	bl	801a9a4 <operator new(unsigned int)>
 80144ba:	4b1e      	ldr	r3, [pc, #120]	@ (8014534 <net::dhcp_start()+0x88>)
 80144bc:	6228      	str	r0, [r5, #32]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80144c4:	2907      	cmp	r1, #7
 80144c6:	4604      	mov	r4, r0
 80144c8:	d919      	bls.n	80144fe <net::dhcp_start()+0x52>
 80144ca:	481b      	ldr	r0, [pc, #108]	@ (8014538 <net::dhcp_start()+0x8c>)
 80144cc:	f003 fd1c 	bl	8017f08 <console_error>
 80144d0:	2248      	movs	r2, #72	@ 0x48
 80144d2:	2100      	movs	r1, #0
 80144d4:	4620      	mov	r0, r4
 80144d6:	f005 fd2b 	bl	8019f30 <memset>
 80144da:	2044      	movs	r0, #68	@ 0x44
 80144dc:	f000 fe06 	bl	80150ec <net::udp_begin(unsigned short)>
 80144e0:	6020      	str	r0, [r4, #0]
 80144e2:	f7ff fe5b 	bl	801419c <net::message_init()>
 80144e6:	7ead      	ldrb	r5, [r5, #26]
 80144e8:	f015 0501 	ands.w	r5, r5, #1
 80144ec:	d11d      	bne.n	801452a <net::dhcp_start()+0x7e>
 80144ee:	7a23      	ldrb	r3, [r4, #8]
 80144f0:	2b02      	cmp	r3, #2
 80144f2:	d002      	beq.n	80144fa <net::dhcp_start()+0x4e>
 80144f4:	2302      	movs	r3, #2
 80144f6:	8123      	strh	r3, [r4, #8]
 80144f8:	81a5      	strh	r5, [r4, #12]
 80144fa:	4628      	mov	r0, r5
 80144fc:	bd70      	pop	{r4, r5, r6, pc}
 80144fe:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8014502:	4a0e      	ldr	r2, [pc, #56]	@ (801453c <net::dhcp_start()+0x90>)
 8014504:	1c46      	adds	r6, r0, #1
 8014506:	f8c3 60a4 	str.w	r6, [r3, #164]	@ 0xa4
 801450a:	6812      	ldr	r2, [r2, #0]
 801450c:	1c4e      	adds	r6, r1, #1
 801450e:	f8c3 60a0 	str.w	r6, [r3, #160]	@ 0xa0
 8014512:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8014516:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 801451a:	621a      	str	r2, [r3, #32]
 801451c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014520:	e9c3 2009 	strd	r2, r0, [r3, #36]	@ 0x24
 8014524:	4a06      	ldr	r2, [pc, #24]	@ (8014540 <net::dhcp_start()+0x94>)
 8014526:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014528:	e7d2      	b.n	80144d0 <net::dhcp_start()+0x24>
 801452a:	f7ff fe57 	bl	80141dc <net::dhcp_discover()>
 801452e:	e7e4      	b.n	80144fa <net::dhcp_start()+0x4e>
 8014530:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014534:	2000e3d0 	ldrdcs	lr, [r0], -r0
 8014538:	0801bb6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 801453c:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8014540:	080145e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, lr}

08014544 <net::dhcp_release_and_stop()>:
 8014544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014548:	4d25      	ldr	r5, [pc, #148]	@ (80145e0 <net::dhcp_release_and_stop()+0x9c>)
 801454a:	6a2c      	ldr	r4, [r5, #32]
 801454c:	2c00      	cmp	r4, #0
 801454e:	d044      	beq.n	80145da <net::dhcp_release_and_stop()+0x96>
 8014550:	7a23      	ldrb	r3, [r4, #8]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d041      	beq.n	80145da <net::dhcp_release_and_stop()+0x96>
 8014556:	2600      	movs	r6, #0
 8014558:	69e7      	ldr	r7, [r4, #28]
 801455a:	61e6      	str	r6, [r4, #28]
 801455c:	2218      	movs	r2, #24
 801455e:	4631      	mov	r1, r6
 8014560:	f104 0020 	add.w	r0, r4, #32
 8014564:	f005 fce4 	bl	8019f30 <memset>
 8014568:	6a2b      	ldr	r3, [r5, #32]
 801456a:	8266      	strh	r6, [r4, #18]
 801456c:	6166      	str	r6, [r4, #20]
 801456e:	8326      	strh	r6, [r4, #24]
 8014570:	b363      	cbz	r3, 80145cc <net::dhcp_release_and_stop()+0x88>
 8014572:	7a1b      	ldrb	r3, [r3, #8]
 8014574:	2b0a      	cmp	r3, #10
 8014576:	d002      	beq.n	801457e <net::dhcp_release_and_stop()+0x3a>
 8014578:	3b04      	subs	r3, #4
 801457a:	2b01      	cmp	r3, #1
 801457c:	d826      	bhi.n	80145cc <net::dhcp_release_and_stop()+0x88>
 801457e:	2600      	movs	r6, #0
 8014580:	8126      	strh	r6, [r4, #8]
 8014582:	81a6      	strh	r6, [r4, #12]
 8014584:	4c17      	ldr	r4, [pc, #92]	@ (80145e4 <net::dhcp_release_and_stop()+0xa0>)
 8014586:	f8d5 8020 	ldr.w	r8, [r5, #32]
 801458a:	f243 6307 	movw	r3, #13831	@ 0x3607
 801458e:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 8014592:	2304      	movs	r3, #4
 8014594:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
 8014598:	f8d8 101c 	ldr.w	r1, [r8, #28]
 801459c:	f104 00f5 	add.w	r0, r4, #245	@ 0xf5
 80145a0:	f7ff fe74 	bl	801428c <net::memcpy_ip(unsigned char*, unsigned long)>
 80145a4:	23ff      	movs	r3, #255	@ 0xff
 80145a6:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 80145aa:	2343      	movs	r3, #67	@ 0x43
 80145ac:	9300      	str	r3, [sp, #0]
 80145ae:	22fa      	movs	r2, #250	@ 0xfa
 80145b0:	4621      	mov	r1, r4
 80145b2:	f8d8 0000 	ldr.w	r0, [r8]
 80145b6:	463b      	mov	r3, r7
 80145b8:	f000 fdf0 	bl	801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 80145bc:	2044      	movs	r0, #68	@ 0x44
 80145be:	f000 fdab 	bl	8015118 <net::udp_end(unsigned short)>
 80145c2:	4632      	mov	r2, r6
 80145c4:	4631      	mov	r1, r6
 80145c6:	4630      	mov	r0, r6
 80145c8:	f000 faf8 	bl	8014bbc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 80145cc:	6a28      	ldr	r0, [r5, #32]
 80145ce:	b110      	cbz	r0, 80145d6 <net::dhcp_release_and_stop()+0x92>
 80145d0:	2148      	movs	r1, #72	@ 0x48
 80145d2:	f006 f9e5 	bl	801a9a0 <operator delete(void*, unsigned int)>
 80145d6:	2300      	movs	r3, #0
 80145d8:	622b      	str	r3, [r5, #32]
 80145da:	b002      	add	sp, #8
 80145dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145e0:	2000e220 	andcs	lr, r0, r0, lsr #4
 80145e4:	10008000 	andne	r8, r0, r0

080145e8 <net::dhcp_fine_tmr()>:
 80145e8:	b508      	push	{r3, lr}
 80145ea:	4b21      	ldr	r3, [pc, #132]	@ (8014670 <net::dhcp_fine_tmr()+0x88>)
 80145ec:	6a1b      	ldr	r3, [r3, #32]
 80145ee:	b123      	cbz	r3, 80145fa <net::dhcp_fine_tmr()+0x12>
 80145f0:	899a      	ldrh	r2, [r3, #12]
 80145f2:	2a01      	cmp	r2, #1
 80145f4:	d902      	bls.n	80145fc <net::dhcp_fine_tmr()+0x14>
 80145f6:	3a01      	subs	r2, #1
 80145f8:	819a      	strh	r2, [r3, #12]
 80145fa:	bd08      	pop	{r3, pc}
 80145fc:	d1fd      	bne.n	80145fa <net::dhcp_fine_tmr()+0x12>
 80145fe:	2200      	movs	r2, #0
 8014600:	819a      	strh	r2, [r3, #12]
 8014602:	7a1a      	ldrb	r2, [r3, #8]
 8014604:	3a01      	subs	r2, #1
 8014606:	2a0b      	cmp	r2, #11
 8014608:	d8f7      	bhi.n	80145fa <net::dhcp_fine_tmr()+0x12>
 801460a:	a101      	add	r1, pc, #4	@ (adr r1, 8014610 <net::dhcp_fine_tmr()+0x28>)
 801460c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014610:	08014641 	stmdaeq	r1, {r0, r6, r9, sl, lr}
 8014614:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 8014618:	0801465b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, lr}
 801461c:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 8014620:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 8014624:	08014669 	stmdaeq	r1, {r0, r3, r5, r6, r9, sl, lr}
 8014628:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 801462c:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 8014630:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 8014634:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 8014638:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 801463c:	08014669 	stmdaeq	r1, {r0, r3, r5, r6, r9, sl, lr}
 8014640:	7a5b      	ldrb	r3, [r3, #9]
 8014642:	2b05      	cmp	r3, #5
 8014644:	d803      	bhi.n	801464e <net::dhcp_fine_tmr()+0x66>
 8014646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801464a:	f7ff be89 	b.w	8014360 <net::dhcp_select()>
 801464e:	f7ff ff79 	bl	8014544 <net::dhcp_release_and_stop()>
 8014652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014656:	f7ff bf29 	b.w	80144ac <net::dhcp_start()>
 801465a:	7a5b      	ldrb	r3, [r3, #9]
 801465c:	2b01      	cmp	r3, #1
 801465e:	d803      	bhi.n	8014668 <net::dhcp_fine_tmr()+0x80>
 8014660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014664:	f7ff bea2 	b.w	80143ac <net::dhcp_reboot()>
 8014668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801466c:	f7ff bdb6 	b.w	80141dc <net::dhcp_discover()>
 8014670:	2000e220 	andcs	lr, r0, r0, lsr #4

08014674 <net::dhcp_process(net::dhcp::Message const*, unsigned long)>:
 8014674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014678:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 80147cc <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x158>
 801467c:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8014680:	4606      	mov	r6, r0
 8014682:	4689      	mov	r9, r1
 8014684:	2218      	movs	r2, #24
 8014686:	2100      	movs	r1, #0
 8014688:	f105 0020 	add.w	r0, r5, #32
 801468c:	2700      	movs	r7, #0
 801468e:	f106 04f0 	add.w	r4, r6, #240	@ 0xf0
 8014692:	f005 fc4d 	bl	8019f30 <memset>
 8014696:	44a1      	add	r9, r4
 8014698:	61ef      	str	r7, [r5, #28]
 801469a:	454c      	cmp	r4, r9
 801469c:	d318      	bcc.n	80146d0 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x5c>
 801469e:	2f02      	cmp	r7, #2
 80146a0:	d167      	bne.n	8014772 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xfe>
 80146a2:	3610      	adds	r6, #16
 80146a4:	4630      	mov	r0, r6
 80146a6:	f7ff fea9 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 80146aa:	7a2b      	ldrb	r3, [r5, #8]
 80146ac:	6228      	str	r0, [r5, #32]
 80146ae:	2b06      	cmp	r3, #6
 80146b0:	d170      	bne.n	8014794 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 80146b2:	f8d8 4020 	ldr.w	r4, [r8, #32]
 80146b6:	69e3      	ldr	r3, [r4, #28]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d06b      	beq.n	8014794 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 80146bc:	2300      	movs	r3, #0
 80146be:	81a3      	strh	r3, [r4, #12]
 80146c0:	4630      	mov	r0, r6
 80146c2:	f7ff fe9b 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 80146c6:	6220      	str	r0, [r4, #32]
 80146c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146cc:	f7ff be48 	b.w	8014360 <net::dhcp_select()>
 80146d0:	7823      	ldrb	r3, [r4, #0]
 80146d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80146d4:	d822      	bhi.n	801471c <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xa8>
 80146d6:	2b32      	cmp	r3, #50	@ 0x32
 80146d8:	d808      	bhi.n	80146ec <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x78>
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d027      	beq.n	801472e <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xba>
 80146de:	2b03      	cmp	r3, #3
 80146e0:	d02b      	beq.n	801473a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc6>
 80146e2:	b1fb      	cbz	r3, 8014724 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xb0>
 80146e4:	7863      	ldrb	r3, [r4, #1]
 80146e6:	3302      	adds	r3, #2
 80146e8:	441c      	add	r4, r3
 80146ea:	e7d6      	b.n	801469a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 80146ec:	3b33      	subs	r3, #51	@ 0x33
 80146ee:	2b08      	cmp	r3, #8
 80146f0:	d8f8      	bhi.n	80146e4 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x70>
 80146f2:	a201      	add	r2, pc, #4	@ (adr r2, 80146f8 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x84>)
 80146f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146f8:	0801474f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, sl, lr}
 80146fc:	080146e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, sl, lr}
 8014700:	08014729 	stmdaeq	r1, {r0, r3, r5, r8, r9, sl, lr}
 8014704:	08014745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, lr}
 8014708:	080146e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, sl, lr}
 801470c:	080146e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, sl, lr}
 8014710:	080146e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, sl, lr}
 8014714:	0801475b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, lr}
 8014718:	08014767 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, lr}
 801471c:	2bff      	cmp	r3, #255	@ 0xff
 801471e:	d1e1      	bne.n	80146e4 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x70>
 8014720:	464c      	mov	r4, r9
 8014722:	e7ba      	b.n	801469a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 8014724:	3401      	adds	r4, #1
 8014726:	e7b8      	b.n	801469a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 8014728:	78a7      	ldrb	r7, [r4, #2]
 801472a:	3403      	adds	r4, #3
 801472c:	e7b5      	b.n	801469a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 801472e:	1ca0      	adds	r0, r4, #2
 8014730:	f7ff fe64 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8014734:	6268      	str	r0, [r5, #36]	@ 0x24
 8014736:	3406      	adds	r4, #6
 8014738:	e7af      	b.n	801469a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 801473a:	1ca0      	adds	r0, r4, #2
 801473c:	f7ff fe5e 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8014740:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014742:	e7f8      	b.n	8014736 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014744:	1ca0      	adds	r0, r4, #2
 8014746:	f7ff fe59 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 801474a:	61e8      	str	r0, [r5, #28]
 801474c:	e7f3      	b.n	8014736 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 801474e:	1ca0      	adds	r0, r4, #2
 8014750:	f7ff fe54 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8014754:	ba00      	rev	r0, r0
 8014756:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8014758:	e7ed      	b.n	8014736 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 801475a:	1ca0      	adds	r0, r4, #2
 801475c:	f7ff fe4e 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8014760:	ba00      	rev	r0, r0
 8014762:	6328      	str	r0, [r5, #48]	@ 0x30
 8014764:	e7e7      	b.n	8014736 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014766:	1ca0      	adds	r0, r4, #2
 8014768:	f7ff fe48 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 801476c:	ba00      	rev	r0, r0
 801476e:	6368      	str	r0, [r5, #52]	@ 0x34
 8014770:	e7e1      	b.n	8014736 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014772:	2f05      	cmp	r7, #5
 8014774:	d110      	bne.n	8014798 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x124>
 8014776:	7a2b      	ldrb	r3, [r5, #8]
 8014778:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 801477c:	2a01      	cmp	r2, #1
 801477e:	d106      	bne.n	801478e <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x11a>
 8014780:	4630      	mov	r0, r6
 8014782:	f7ff fe3d 	bl	8014400 <net::dhcp_handle_ack(net::dhcp::Message const*)>
 8014786:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801478a:	f7ff bc9d 	b.w	80140c8 <net::dhcp_bind()>
 801478e:	3b04      	subs	r3, #4
 8014790:	2b01      	cmp	r3, #1
 8014792:	d9f5      	bls.n	8014780 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x10c>
 8014794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014798:	2f06      	cmp	r7, #6
 801479a:	d1fb      	bne.n	8014794 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 801479c:	7a2b      	ldrb	r3, [r5, #8]
 801479e:	1eda      	subs	r2, r3, #3
 80147a0:	2a02      	cmp	r2, #2
 80147a2:	d901      	bls.n	80147a8 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x134>
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d1f5      	bne.n	8014794 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 80147a8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80147ac:	7a1a      	ldrb	r2, [r3, #8]
 80147ae:	2a0c      	cmp	r2, #12
 80147b0:	bf1f      	itttt	ne
 80147b2:	220c      	movne	r2, #12
 80147b4:	811a      	strhne	r2, [r3, #8]
 80147b6:	2200      	movne	r2, #0
 80147b8:	819a      	strhne	r2, [r3, #12]
 80147ba:	2200      	movs	r2, #0
 80147bc:	4611      	mov	r1, r2
 80147be:	4610      	mov	r0, r2
 80147c0:	f000 f9fc 	bl	8014bbc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 80147c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147c8:	f7ff bd08 	b.w	80141dc <net::dhcp_discover()>
 80147cc:	2000e220 	andcs	lr, r0, r0, lsr #4

080147d0 <net::igmp_send_report(unsigned long)>:
 80147d0:	4a19      	ldr	r2, [pc, #100]	@ (8014838 <net::igmp_send_report(unsigned long)+0x68>)
 80147d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d4:	f3c0 2106 	ubfx	r1, r0, #8, #7
 80147d8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80147dc:	4c17      	ldr	r4, [pc, #92]	@ (801483c <net::igmp_send_report(unsigned long)+0x6c>)
 80147de:	70d1      	strb	r1, [r2, #3]
 80147e0:	7113      	strb	r3, [r2, #4]
 80147e2:	f3c0 6107 	ubfx	r1, r0, #24, #8
 80147e6:	4613      	mov	r3, r2
 80147e8:	7151      	strb	r1, [r2, #5]
 80147ea:	4605      	mov	r5, r0
 80147ec:	4622      	mov	r2, r4
 80147ee:	f103 0c06 	add.w	ip, r3, #6
 80147f2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80147f6:	f802 1b01 	strb.w	r1, [r2], #1
 80147fa:	4563      	cmp	r3, ip
 80147fc:	d1f9      	bne.n	80147f2 <net::igmp_send_report(unsigned long)+0x22>
 80147fe:	4e10      	ldr	r6, [pc, #64]	@ (8014840 <net::igmp_send_report(unsigned long)+0x70>)
 8014800:	4810      	ldr	r0, [pc, #64]	@ (8014844 <net::igmp_send_report(unsigned long)+0x74>)
 8014802:	8833      	ldrh	r3, [r6, #0]
 8014804:	8263      	strh	r3, [r4, #18]
 8014806:	2700      	movs	r7, #0
 8014808:	2118      	movs	r1, #24
 801480a:	f8c4 501e 	str.w	r5, [r4, #30]
 801480e:	8327      	strh	r7, [r4, #24]
 8014810:	f000 f90e 	bl	8014a30 <net::net_chksum(void const*, unsigned long)>
 8014814:	2120      	movs	r1, #32
 8014816:	8320      	strh	r0, [r4, #24]
 8014818:	480a      	ldr	r0, [pc, #40]	@ (8014844 <net::igmp_send_report(unsigned long)+0x74>)
 801481a:	f8c4 502a 	str.w	r5, [r4, #42]	@ 0x2a
 801481e:	8527      	strh	r7, [r4, #40]	@ 0x28
 8014820:	f000 f906 	bl	8014a30 <net::net_chksum(void const*, unsigned long)>
 8014824:	212e      	movs	r1, #46	@ 0x2e
 8014826:	4603      	mov	r3, r0
 8014828:	4804      	ldr	r0, [pc, #16]	@ (801483c <net::igmp_send_report(unsigned long)+0x6c>)
 801482a:	8523      	strh	r3, [r4, #40]	@ 0x28
 801482c:	f001 f924 	bl	8015a78 <emac_eth_send(void*, unsigned long)>
 8014830:	8833      	ldrh	r3, [r6, #0]
 8014832:	3301      	adds	r3, #1
 8014834:	8033      	strh	r3, [r6, #0]
 8014836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014838:	10008340 	andne	r8, r0, r0, asr #6
 801483c:	10008378 	andne	r8, r0, r8, ror r3
 8014840:	10008224 	andne	r8, r0, r4, lsr #4
 8014844:	10008386 	andne	r8, r0, r6, lsl #7

08014848 <net::igmp_timer()>:
 8014848:	b570      	push	{r4, r5, r6, lr}
 801484a:	4c12      	ldr	r4, [pc, #72]	@ (8014894 <net::igmp_timer()+0x4c>)
 801484c:	4e12      	ldr	r6, [pc, #72]	@ (8014898 <net::igmp_timer()+0x50>)
 801484e:	f504 758c 	add.w	r5, r4, #280	@ 0x118
 8014852:	e002      	b.n	801485a <net::igmp_timer()+0x12>
 8014854:	3408      	adds	r4, #8
 8014856:	42ac      	cmp	r4, r5
 8014858:	d01a      	beq.n	8014890 <net::igmp_timer()+0x48>
 801485a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 801485e:	1e53      	subs	r3, r2, #1
 8014860:	b29b      	uxth	r3, r3
 8014862:	2a00      	cmp	r2, #0
 8014864:	d0f6      	beq.n	8014854 <net::igmp_timer()+0xc>
 8014866:	f824 3c04 	strh.w	r3, [r4, #-4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d1f2      	bne.n	8014854 <net::igmp_timer()+0xc>
 801486e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8014872:	2b01      	cmp	r3, #1
 8014874:	d1ee      	bne.n	8014854 <net::igmp_timer()+0xc>
 8014876:	f854 0c08 	ldr.w	r0, [r4, #-8]
 801487a:	42b0      	cmp	r0, r6
 801487c:	f04f 0302 	mov.w	r3, #2
 8014880:	d0e8      	beq.n	8014854 <net::igmp_timer()+0xc>
 8014882:	f804 3c02 	strb.w	r3, [r4, #-2]
 8014886:	3408      	adds	r4, #8
 8014888:	f7ff ffa2 	bl	80147d0 <net::igmp_send_report(unsigned long)>
 801488c:	42ac      	cmp	r4, r5
 801488e:	d1e4      	bne.n	801485a <net::igmp_timer()+0x12>
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	bf00      	nop
 8014894:	10008230 	andne	r8, r0, r0, lsr r2
 8014898:	010000e0 	smlatteq	r0, r0, r0, r0

0801489c <net::igmp_set_ip()>:
 801489c:	4b04      	ldr	r3, [pc, #16]	@ (80148b0 <net::igmp_set_ip()+0x14>)
 801489e:	4905      	ldr	r1, [pc, #20]	@ (80148b4 <net::igmp_set_ip()+0x18>)
 80148a0:	4a05      	ldr	r2, [pc, #20]	@ (80148b8 <net::igmp_set_ip()+0x1c>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f8c1 301a 	str.w	r3, [r1, #26]
 80148a8:	f8c2 301a 	str.w	r3, [r2, #26]
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	2000e220 	andcs	lr, r0, r0, lsr #4
 80148b4:	10008378 	andne	r8, r0, r8, ror r3
 80148b8:	10008348 	andne	r8, r0, r8, asr #6

080148bc <net::igmp_join(unsigned long)>:
 80148bc:	f000 03e0 	and.w	r3, r0, #224	@ 0xe0
 80148c0:	2be0      	cmp	r3, #224	@ 0xe0
 80148c2:	d10c      	bne.n	80148de <net::igmp_join(unsigned long)+0x22>
 80148c4:	490b      	ldr	r1, [pc, #44]	@ (80148f4 <net::igmp_join(unsigned long)+0x38>)
 80148c6:	2300      	movs	r3, #0
 80148c8:	e003      	b.n	80148d2 <net::igmp_join(unsigned long)+0x16>
 80148ca:	b14a      	cbz	r2, 80148e0 <net::igmp_join(unsigned long)+0x24>
 80148cc:	3301      	adds	r3, #1
 80148ce:	2b23      	cmp	r3, #35	@ 0x23
 80148d0:	d005      	beq.n	80148de <net::igmp_join(unsigned long)+0x22>
 80148d2:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80148d6:	4282      	cmp	r2, r0
 80148d8:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
 80148dc:	d1f5      	bne.n	80148ca <net::igmp_join(unsigned long)+0xe>
 80148de:	4770      	bx	lr
 80148e0:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 80148e4:	2201      	movs	r2, #1
 80148e6:	2302      	movs	r3, #2
 80148e8:	f88c 2006 	strb.w	r2, [ip, #6]
 80148ec:	f8ac 3004 	strh.w	r3, [ip, #4]
 80148f0:	f7ff bf6e 	b.w	80147d0 <net::igmp_send_report(unsigned long)>
 80148f4:	10008228 	andne	r8, r0, r8, lsr #4

080148f8 <net::igmp_leave(unsigned long)>:
 80148f8:	b570      	push	{r4, r5, r6, lr}
 80148fa:	4c0f      	ldr	r4, [pc, #60]	@ (8014938 <net::igmp_leave(unsigned long)+0x40>)
 80148fc:	4602      	mov	r2, r0
 80148fe:	f504 718c 	add.w	r1, r4, #280	@ 0x118
 8014902:	e002      	b.n	801490a <net::igmp_leave(unsigned long)+0x12>
 8014904:	3408      	adds	r4, #8
 8014906:	428c      	cmp	r4, r1
 8014908:	d014      	beq.n	8014934 <net::igmp_leave(unsigned long)+0x3c>
 801490a:	6823      	ldr	r3, [r4, #0]
 801490c:	4293      	cmp	r3, r2
 801490e:	d1f9      	bne.n	8014904 <net::igmp_leave(unsigned long)+0xc>
 8014910:	4e0a      	ldr	r6, [pc, #40]	@ (801493c <net::igmp_leave(unsigned long)+0x44>)
 8014912:	480b      	ldr	r0, [pc, #44]	@ (8014940 <net::igmp_leave(unsigned long)+0x48>)
 8014914:	8833      	ldrh	r3, [r6, #0]
 8014916:	8243      	strh	r3, [r0, #18]
 8014918:	2500      	movs	r5, #0
 801491a:	212e      	movs	r1, #46	@ 0x2e
 801491c:	f8c0 202a 	str.w	r2, [r0, #42]	@ 0x2a
 8014920:	8305      	strh	r5, [r0, #24]
 8014922:	8505      	strh	r5, [r0, #40]	@ 0x28
 8014924:	f001 f8a8 	bl	8015a78 <emac_eth_send(void*, unsigned long)>
 8014928:	8833      	ldrh	r3, [r6, #0]
 801492a:	6025      	str	r5, [r4, #0]
 801492c:	3301      	adds	r3, #1
 801492e:	8033      	strh	r3, [r6, #0]
 8014930:	71a5      	strb	r5, [r4, #6]
 8014932:	80a5      	strh	r5, [r4, #4]
 8014934:	bd70      	pop	{r4, r5, r6, pc}
 8014936:	bf00      	nop
 8014938:	10008228 	andne	r8, r0, r8, lsr #4
 801493c:	10008224 	andne	r8, r0, r4, lsr #4
 8014940:	10008348 	andne	r8, r0, r8, asr #6

08014944 <net::igmp_report_groups()>:
 8014944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014946:	4c14      	ldr	r4, [pc, #80]	@ (8014998 <net::igmp_report_groups()+0x54>)
 8014948:	4d14      	ldr	r5, [pc, #80]	@ (801499c <net::igmp_report_groups()+0x58>)
 801494a:	f504 778c 	add.w	r7, r4, #280	@ 0x118
 801494e:	2601      	movs	r6, #1
 8014950:	e002      	b.n	8014958 <net::igmp_report_groups()+0x14>
 8014952:	3408      	adds	r4, #8
 8014954:	42bc      	cmp	r4, r7
 8014956:	d01e      	beq.n	8014996 <net::igmp_report_groups()+0x52>
 8014958:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801495c:	2b02      	cmp	r3, #2
 801495e:	d007      	beq.n	8014970 <net::igmp_report_groups()+0x2c>
 8014960:	2b01      	cmp	r3, #1
 8014962:	d1f6      	bne.n	8014952 <net::igmp_report_groups()+0xe>
 8014964:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8014968:	3b01      	subs	r3, #1
 801496a:	b29b      	uxth	r3, r3
 801496c:	2b04      	cmp	r3, #4
 801496e:	d9f0      	bls.n	8014952 <net::igmp_report_groups()+0xe>
 8014970:	f005 fe20 	bl	801a5b4 <random>
 8014974:	fba5 3200 	umull	r3, r2, r5, r0
 8014978:	f022 0303 	bic.w	r3, r2, #3
 801497c:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 8014980:	1ac0      	subs	r0, r0, r3
 8014982:	2801      	cmp	r0, #1
 8014984:	bf38      	it	cc
 8014986:	2001      	movcc	r0, #1
 8014988:	f824 0c04 	strh.w	r0, [r4, #-4]
 801498c:	f804 6c02 	strb.w	r6, [r4, #-2]
 8014990:	3408      	adds	r4, #8
 8014992:	42bc      	cmp	r4, r7
 8014994:	d1e0      	bne.n	8014958 <net::igmp_report_groups()+0x14>
 8014996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014998:	10008230 	andne	r8, r0, r0, lsr r2
 801499c:	cccccccd 	stclgt	12, cr12, [ip], {205}	@ 0xcd

080149a0 <net::primary_ip_conflict_callback(net::acd::Callback)>:
 80149a0:	b140      	cbz	r0, 80149b4 <net::primary_ip_conflict_callback(net::acd::Callback)+0x14>
 80149a2:	2802      	cmp	r0, #2
 80149a4:	d000      	beq.n	80149a8 <net::primary_ip_conflict_callback(net::acd::Callback)+0x8>
 80149a6:	4770      	bx	lr
 80149a8:	4a10      	ldr	r2, [pc, #64]	@ (80149ec <net::primary_ip_conflict_callback(net::acd::Callback)+0x4c>)
 80149aa:	7e93      	ldrb	r3, [r2, #26]
 80149ac:	f023 0308 	bic.w	r3, r3, #8
 80149b0:	7693      	strb	r3, [r2, #26]
 80149b2:	4770      	bx	lr
 80149b4:	4b0e      	ldr	r3, [pc, #56]	@ (80149f0 <net::primary_ip_conflict_callback(net::acd::Callback)+0x50>)
 80149b6:	b510      	push	{r4, lr}
 80149b8:	4c0c      	ldr	r4, [pc, #48]	@ (80149ec <net::primary_ip_conflict_callback(net::acd::Callback)+0x4c>)
 80149ba:	6818      	ldr	r0, [r3, #0]
 80149bc:	6923      	ldr	r3, [r4, #16]
 80149be:	4298      	cmp	r0, r3
 80149c0:	d008      	beq.n	80149d4 <net::primary_ip_conflict_callback(net::acd::Callback)+0x34>
 80149c2:	f000 f8c1 	bl	8014b48 <net::netif_set_ipaddr(net::ip_addr)>
 80149c6:	f7ff fd3b 	bl	8014440 <net::dhcp_inform()>
 80149ca:	7ea3      	ldrb	r3, [r4, #26]
 80149cc:	f043 0308 	orr.w	r3, r3, #8
 80149d0:	76a3      	strb	r3, [r4, #26]
 80149d2:	bd10      	pop	{r4, pc}
 80149d4:	4602      	mov	r2, r0
 80149d6:	21ff      	movs	r1, #255	@ 0xff
 80149d8:	f000 f8f0 	bl	8014bbc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 80149dc:	f7ff fd30 	bl	8014440 <net::dhcp_inform()>
 80149e0:	7ea3      	ldrb	r3, [r4, #26]
 80149e2:	f043 0308 	orr.w	r3, r3, #8
 80149e6:	76a3      	strb	r3, [r4, #26]
 80149e8:	bd10      	pop	{r4, pc}
 80149ea:	bf00      	nop
 80149ec:	2000e220 	andcs	lr, r0, r0, lsr #4
 80149f0:	2000e20c 	andcs	lr, r0, ip, lsl #4

080149f4 <net::net_shutdown()>:
 80149f4:	f000 b92e 	b.w	8014c54 <net::netif_set_link_down()>

080149f8 <net::net_set_primary_ip(net::ip_addr)>:
 80149f8:	b510      	push	{r4, lr}
 80149fa:	4604      	mov	r4, r0
 80149fc:	f7ff fda2 	bl	8014544 <net::dhcp_release_and_stop()>
 8014a00:	4908      	ldr	r1, [pc, #32]	@ (8014a24 <net::net_set_primary_ip(net::ip_addr)+0x2c>)
 8014a02:	4809      	ldr	r0, [pc, #36]	@ (8014a28 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 8014a04:	f001 f9b4 	bl	8015d70 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>
 8014a08:	b934      	cbnz	r4, 8014a18 <net::net_set_primary_ip(net::ip_addr)+0x20>
 8014a0a:	4b08      	ldr	r3, [pc, #32]	@ (8014a2c <net::net_set_primary_ip(net::ip_addr)+0x34>)
 8014a0c:	4806      	ldr	r0, [pc, #24]	@ (8014a28 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 8014a0e:	6919      	ldr	r1, [r3, #16]
 8014a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a14:	f001 b876 	b.w	8015b04 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 8014a18:	4621      	mov	r1, r4
 8014a1a:	4803      	ldr	r0, [pc, #12]	@ (8014a28 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 8014a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a20:	f001 b870 	b.w	8015b04 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 8014a24:	080149a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, lr}
 8014a28:	2000e20c 	andcs	lr, r0, ip, lsl #4
 8014a2c:	2000e220 	andcs	lr, r0, r0, lsr #4

08014a30 <net::net_chksum(void const*, unsigned long)>:
 8014a30:	2901      	cmp	r1, #1
 8014a32:	d91f      	bls.n	8014a74 <net::net_chksum(void const*, unsigned long)+0x44>
 8014a34:	f1a1 0c02 	sub.w	ip, r1, #2
 8014a38:	f02c 0c01 	bic.w	ip, ip, #1
 8014a3c:	f10c 0c02 	add.w	ip, ip, #2
 8014a40:	4484      	add	ip, r0
 8014a42:	2300      	movs	r3, #0
 8014a44:	f830 2b02 	ldrh.w	r2, [r0], #2
 8014a48:	4560      	cmp	r0, ip
 8014a4a:	4413      	add	r3, r2
 8014a4c:	d1fa      	bne.n	8014a44 <net::net_chksum(void const*, unsigned long)+0x14>
 8014a4e:	07ca      	lsls	r2, r1, #31
 8014a50:	d40a      	bmi.n	8014a68 <net::net_chksum(void const*, unsigned long)+0x38>
 8014a52:	0c1a      	lsrs	r2, r3, #16
 8014a54:	d005      	beq.n	8014a62 <net::net_chksum(void const*, unsigned long)+0x32>
 8014a56:	fa12 f383 	uxtah	r3, r2, r3
 8014a5a:	0c1a      	lsrs	r2, r3, #16
 8014a5c:	bf1c      	itt	ne
 8014a5e:	b29b      	uxthne	r3, r3
 8014a60:	3301      	addne	r3, #1
 8014a62:	43db      	mvns	r3, r3
 8014a64:	b298      	uxth	r0, r3
 8014a66:	4770      	bx	lr
 8014a68:	7802      	ldrb	r2, [r0, #0]
 8014a6a:	0212      	lsls	r2, r2, #8
 8014a6c:	ba52      	rev16	r2, r2
 8014a6e:	fa13 f382 	uxtah	r3, r3, r2
 8014a72:	e7ee      	b.n	8014a52 <net::net_chksum(void const*, unsigned long)+0x22>
 8014a74:	b121      	cbz	r1, 8014a80 <net::net_chksum(void const*, unsigned long)+0x50>
 8014a76:	7803      	ldrb	r3, [r0, #0]
 8014a78:	021b      	lsls	r3, r3, #8
 8014a7a:	ba5b      	rev16	r3, r3
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	e7f0      	b.n	8014a62 <net::net_chksum(void const*, unsigned long)+0x32>
 8014a80:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8014a84:	4770      	bx	lr
 8014a86:	bf00      	nop

08014a88 <net::default_callback(unsigned short, net::netif_ext_callback_args_t const*)>:
 8014a88:	4770      	bx	lr
	...

08014a8c <net::netif_do_update_globals()>:
 8014a8c:	4908      	ldr	r1, [pc, #32]	@ (8014ab0 <net::netif_do_update_globals()+0x24>)
 8014a8e:	e9d1 3200 	ldrd	r3, r2, [r1]
 8014a92:	b410      	push	{r4}
 8014a94:	ea63 0402 	orn	r4, r3, r2
 8014a98:	43d0      	mvns	r0, r2
 8014a9a:	60cc      	str	r4, [r1, #12]
 8014a9c:	4013      	ands	r3, r2
 8014a9e:	4905      	ldr	r1, [pc, #20]	@ (8014ab4 <net::netif_do_update_globals()+0x28>)
 8014aa0:	4a05      	ldr	r2, [pc, #20]	@ (8014ab8 <net::netif_do_update_globals()+0x2c>)
 8014aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aa6:	6008      	str	r0, [r1, #0]
 8014aa8:	6013      	str	r3, [r2, #0]
 8014aaa:	f001 bab7 	b.w	801601c <net::ip_set_ip()>
 8014aae:	bf00      	nop
 8014ab0:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014ab4:	2000e208 	andcs	lr, r0, r8, lsl #4
 8014ab8:	2000e204 	andcs	lr, r0, r4, lsl #4

08014abc <net::netif_issue_reports()>:
 8014abc:	4b04      	ldr	r3, [pc, #16]	@ (8014ad0 <net::netif_issue_reports()+0x14>)
 8014abe:	7e9a      	ldrb	r2, [r3, #26]
 8014ac0:	07d2      	lsls	r2, r2, #31
 8014ac2:	d503      	bpl.n	8014acc <net::netif_issue_reports()+0x10>
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	b10b      	cbz	r3, 8014acc <net::netif_issue_reports()+0x10>
 8014ac8:	f7ff bf3c 	b.w	8014944 <net::igmp_report_groups()>
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	2000e220 	andcs	lr, r0, r0, lsr #4

08014ad4 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>:
 8014ad4:	b570      	push	{r4, r5, r6, lr}
 8014ad6:	4e0b      	ldr	r6, [pc, #44]	@ (8014b04 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x30>)
 8014ad8:	6833      	ldr	r3, [r6, #0]
 8014ada:	4283      	cmp	r3, r0
 8014adc:	4604      	mov	r4, r0
 8014ade:	460d      	mov	r5, r1
 8014ae0:	d00d      	beq.n	8014afe <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x2a>
 8014ae2:	600b      	str	r3, [r1, #0]
 8014ae4:	f001 fa9a 	bl	801601c <net::ip_set_ip()>
 8014ae8:	6828      	ldr	r0, [r5, #0]
 8014aea:	4621      	mov	r1, r4
 8014aec:	f001 f946 	bl	8015d7c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)>
 8014af0:	6034      	str	r4, [r6, #0]
 8014af2:	f7ff ffcb 	bl	8014a8c <net::netif_do_update_globals()>
 8014af6:	f7ff ffe1 	bl	8014abc <net::netif_issue_reports()>
 8014afa:	2001      	movs	r0, #1
 8014afc:	bd70      	pop	{r4, r5, r6, pc}
 8014afe:	2000      	movs	r0, #0
 8014b00:	e7fc      	b.n	8014afc <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x28>
 8014b02:	bf00      	nop
 8014b04:	2000e220 	andcs	lr, r0, r0, lsr #4

08014b08 <net::netif_init()>:
 8014b08:	4b0c      	ldr	r3, [pc, #48]	@ (8014b3c <net::netif_init()+0x34>)
 8014b0a:	7e1a      	ldrb	r2, [r3, #24]
 8014b0c:	7dd8      	ldrb	r0, [r3, #23]
 8014b0e:	0412      	lsls	r2, r2, #16
 8014b10:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8014b14:	7e58      	ldrb	r0, [r3, #25]
 8014b16:	3202      	adds	r2, #2
 8014b18:	2100      	movs	r1, #0
 8014b1a:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 8014b1e:	e9c3 1100 	strd	r1, r1, [r3]
 8014b22:	611a      	str	r2, [r3, #16]
 8014b24:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8014b28:	e9c3 1108 	strd	r1, r1, [r3, #32]
 8014b2c:	7699      	strb	r1, [r3, #26]
 8014b2e:	6299      	str	r1, [r3, #40]	@ 0x28
 8014b30:	4b03      	ldr	r3, [pc, #12]	@ (8014b40 <net::netif_init()+0x38>)
 8014b32:	4a04      	ldr	r2, [pc, #16]	@ (8014b44 <net::netif_init()+0x3c>)
 8014b34:	601a      	str	r2, [r3, #0]
 8014b36:	f7f3 bc87 	b.w	8008448 <net::arp_init()>
 8014b3a:	bf00      	nop
 8014b3c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014b40:	2000e21c 	andcs	lr, r0, ip, lsl r2
 8014b44:	08014a89 	stmdaeq	r1, {r0, r3, r7, r9, fp, lr}

08014b48 <net::netif_set_ipaddr(net::ip_addr)>:
 8014b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b4a:	4669      	mov	r1, sp
 8014b4c:	f7ff ffc2 	bl	8014ad4 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 8014b50:	b130      	cbz	r0, 8014b60 <net::netif_set_ipaddr(net::ip_addr)+0x18>
 8014b52:	9b00      	ldr	r3, [sp, #0]
 8014b54:	9301      	str	r3, [sp, #4]
 8014b56:	4b04      	ldr	r3, [pc, #16]	@ (8014b68 <net::netif_set_ipaddr(net::ip_addr)+0x20>)
 8014b58:	a901      	add	r1, sp, #4
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2010      	movs	r0, #16
 8014b5e:	4798      	blx	r3
 8014b60:	b005      	add	sp, #20
 8014b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b66:	bf00      	nop
 8014b68:	2000e21c 	andcs	lr, r0, ip, lsl r2

08014b6c <net::netif_set_netmask(net::ip_addr)>:
 8014b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b6e:	4b07      	ldr	r3, [pc, #28]	@ (8014b8c <net::netif_set_netmask(net::ip_addr)+0x20>)
 8014b70:	685c      	ldr	r4, [r3, #4]
 8014b72:	42a0      	cmp	r0, r4
 8014b74:	d008      	beq.n	8014b88 <net::netif_set_netmask(net::ip_addr)+0x1c>
 8014b76:	6058      	str	r0, [r3, #4]
 8014b78:	f7ff ff88 	bl	8014a8c <net::netif_do_update_globals()>
 8014b7c:	4b04      	ldr	r3, [pc, #16]	@ (8014b90 <net::netif_set_netmask(net::ip_addr)+0x24>)
 8014b7e:	9402      	str	r4, [sp, #8]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	a901      	add	r1, sp, #4
 8014b84:	2040      	movs	r0, #64	@ 0x40
 8014b86:	4798      	blx	r3
 8014b88:	b004      	add	sp, #16
 8014b8a:	bd10      	pop	{r4, pc}
 8014b8c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014b90:	2000e21c 	andcs	lr, r0, ip, lsl r2

08014b94 <net::netif_set_gw(net::ip_addr)>:
 8014b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b96:	4a07      	ldr	r2, [pc, #28]	@ (8014bb4 <net::netif_set_gw(net::ip_addr)+0x20>)
 8014b98:	6893      	ldr	r3, [r2, #8]
 8014b9a:	4298      	cmp	r0, r3
 8014b9c:	d006      	beq.n	8014bac <net::netif_set_gw(net::ip_addr)+0x18>
 8014b9e:	9303      	str	r3, [sp, #12]
 8014ba0:	4b05      	ldr	r3, [pc, #20]	@ (8014bb8 <net::netif_set_gw(net::ip_addr)+0x24>)
 8014ba2:	6090      	str	r0, [r2, #8]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	a901      	add	r1, sp, #4
 8014ba8:	2020      	movs	r0, #32
 8014baa:	4798      	blx	r3
 8014bac:	b005      	add	sp, #20
 8014bae:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bb2:	bf00      	nop
 8014bb4:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014bb8:	2000e21c 	andcs	lr, r0, ip, lsl r2

08014bbc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>:
 8014bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bc0:	4688      	mov	r8, r1
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	4617      	mov	r7, r2
 8014bc6:	4605      	mov	r5, r0
 8014bc8:	b348      	cbz	r0, 8014c1e <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x62>
 8014bca:	2400      	movs	r4, #0
 8014bcc:	4e1c      	ldr	r6, [pc, #112]	@ (8014c40 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x84>)
 8014bce:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8014bd2:	45c8      	cmp	r8, r9
 8014bd4:	d007      	beq.n	8014be6 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x2a>
 8014bd6:	f8c6 8004 	str.w	r8, [r6, #4]
 8014bda:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8014bde:	f7ff ff55 	bl	8014a8c <net::netif_do_update_globals()>
 8014be2:	f8cd 9008 	str.w	r9, [sp, #8]
 8014be6:	68b3      	ldr	r3, [r6, #8]
 8014be8:	429f      	cmp	r7, r3
 8014bea:	bf1e      	ittt	ne
 8014bec:	60b7      	strne	r7, [r6, #8]
 8014bee:	f044 0420 	orrne.w	r4, r4, #32
 8014bf2:	9303      	strne	r3, [sp, #12]
 8014bf4:	b30d      	cbz	r5, 8014c3a <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x7e>
 8014bf6:	4669      	mov	r1, sp
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f7ff ff6b 	bl	8014ad4 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 8014bfe:	b1b8      	cbz	r0, 8014c30 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x74>
 8014c00:	9b00      	ldr	r3, [sp, #0]
 8014c02:	9301      	str	r3, [sp, #4]
 8014c04:	f044 0410 	orr.w	r4, r4, #16
 8014c08:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8014c0c:	b995      	cbnz	r5, 8014c34 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x78>
 8014c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8014c44 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x88>)
 8014c10:	a901      	add	r1, sp, #4
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	4620      	mov	r0, r4
 8014c16:	4798      	blx	r3
 8014c18:	b005      	add	sp, #20
 8014c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c1e:	4669      	mov	r1, sp
 8014c20:	f7ff ff58 	bl	8014ad4 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	d0d0      	beq.n	8014bca <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0xe>
 8014c28:	9b00      	ldr	r3, [sp, #0]
 8014c2a:	9301      	str	r3, [sp, #4]
 8014c2c:	2410      	movs	r4, #16
 8014c2e:	e7cd      	b.n	8014bcc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x10>
 8014c30:	2c00      	cmp	r4, #0
 8014c32:	d1e9      	bne.n	8014c08 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x4c>
 8014c34:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 8014c38:	e7e9      	b.n	8014c0e <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x52>
 8014c3a:	2c00      	cmp	r4, #0
 8014c3c:	d1e4      	bne.n	8014c08 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x4c>
 8014c3e:	e7eb      	b.n	8014c18 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x5c>
 8014c40:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014c44:	2000e21c 	andcs	lr, r0, ip, lsl r2

08014c48 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))>:
 8014c48:	4b01      	ldr	r3, [pc, #4]	@ (8014c50 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))+0x8>)
 8014c4a:	6018      	str	r0, [r3, #0]
 8014c4c:	4770      	bx	lr
 8014c4e:	bf00      	nop
 8014c50:	2000e21c 	andcs	lr, r0, ip, lsl r2

08014c54 <net::netif_set_link_down()>:
 8014c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c56:	4a0d      	ldr	r2, [pc, #52]	@ (8014c8c <net::netif_set_link_down()+0x38>)
 8014c58:	7e93      	ldrb	r3, [r2, #26]
 8014c5a:	07d9      	lsls	r1, r3, #31
 8014c5c:	d512      	bpl.n	8014c84 <net::netif_set_link_down()+0x30>
 8014c5e:	f023 0301 	bic.w	r3, r3, #1
 8014c62:	7693      	strb	r3, [r2, #26]
 8014c64:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014c66:	b11b      	cbz	r3, 8014c70 <net::netif_set_link_down()+0x1c>
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	b10b      	cbz	r3, 8014c70 <net::netif_set_link_down()+0x1c>
 8014c6c:	f7ff f9f4 	bl	8014058 <net::autoip_stop()>
 8014c70:	f001 f822 	bl	8015cb8 <net::acd_network_changed_link_down()>
 8014c74:	2300      	movs	r3, #0
 8014c76:	f88d 3004 	strb.w	r3, [sp, #4]
 8014c7a:	4b05      	ldr	r3, [pc, #20]	@ (8014c90 <net::netif_set_link_down()+0x3c>)
 8014c7c:	a901      	add	r1, sp, #4
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	2004      	movs	r0, #4
 8014c82:	4798      	blx	r3
 8014c84:	b005      	add	sp, #20
 8014c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c8a:	bf00      	nop
 8014c8c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8014c90:	2000e21c 	andcs	lr, r0, ip, lsl r2

08014c94 <net::_bswap32(t_tcp*)>:
 8014c94:	f100 032a 	add.w	r3, r0, #42	@ 0x2a
 8014c98:	079a      	lsls	r2, r3, #30
 8014c9a:	bf0b      	itete	eq
 8014c9c:	f8d0 302a 	ldreq.w	r3, [r0, #42]	@ 0x2a
 8014ca0:	f8d0 302a 	ldrne.w	r3, [r0, #42]	@ 0x2a
 8014ca4:	ba1b      	reveq	r3, r3
 8014ca6:	ba1b      	revne	r3, r3
 8014ca8:	bf0c      	ite	eq
 8014caa:	f8c0 302a 	streq.w	r3, [r0, #42]	@ 0x2a
 8014cae:	f8c0 302a 	strne.w	r3, [r0, #42]	@ 0x2a
 8014cb2:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 8014cb6:	079b      	lsls	r3, r3, #30
 8014cb8:	bf0b      	itete	eq
 8014cba:	f8d0 3026 	ldreq.w	r3, [r0, #38]	@ 0x26
 8014cbe:	f8d0 3026 	ldrne.w	r3, [r0, #38]	@ 0x26
 8014cc2:	ba1b      	reveq	r3, r3
 8014cc4:	ba1b      	revne	r3, r3
 8014cc6:	bf0c      	ite	eq
 8014cc8:	f8c0 3026 	streq.w	r3, [r0, #38]	@ 0x26
 8014ccc:	f8c0 3026 	strne.w	r3, [r0, #38]	@ 0x26
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop

08014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>:
 8014cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd8:	7a0b      	ldrb	r3, [r1, #8]
 8014cda:	8f86      	ldrh	r6, [r0, #60]	@ 0x3c
 8014cdc:	4c52      	ldr	r4, [pc, #328]	@ (8014e28 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8014cde:	f003 0302 	and.w	r3, r3, #2
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	bf14      	ite	ne
 8014ce6:	2324      	movne	r3, #36	@ 0x24
 8014ce8:	2320      	moveq	r3, #32
 8014cea:	441e      	add	r6, r3
 8014cec:	b084      	sub	sp, #16
 8014cee:	4605      	mov	r5, r0
 8014cf0:	bf14      	ite	ne
 8014cf2:	f04f 0e90 	movne.w	lr, #144	@ 0x90
 8014cf6:	f04f 0e80 	moveq.w	lr, #128	@ 0x80
 8014cfa:	f100 030c 	add.w	r3, r0, #12
 8014cfe:	f100 0c12 	add.w	ip, r0, #18
 8014d02:	4622      	mov	r2, r4
 8014d04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014d08:	f802 0b01 	strb.w	r0, [r2], #1
 8014d0c:	459c      	cmp	ip, r3
 8014d0e:	d1f9      	bne.n	8014d04 <net::send_package(net::tcb const*, net::SendInfo const&)+0x30>
 8014d10:	b2b7      	uxth	r7, r6
 8014d12:	4a46      	ldr	r2, [pc, #280]	@ (8014e2c <net::send_package(net::tcb const*, net::SendInfo const&)+0x158>)
 8014d14:	f107 0314 	add.w	r3, r7, #20
 8014d18:	ba5b      	rev16	r3, r3
 8014d1a:	8223      	strh	r3, [r4, #16]
 8014d1c:	8813      	ldrh	r3, [r2, #0]
 8014d1e:	8263      	strh	r3, [r4, #18]
 8014d20:	3301      	adds	r3, #1
 8014d22:	8013      	strh	r3, [r2, #0]
 8014d24:	682b      	ldr	r3, [r5, #0]
 8014d26:	f8c4 301a 	str.w	r3, [r4, #26]
 8014d2a:	686b      	ldr	r3, [r5, #4]
 8014d2c:	f8c4 301e 	str.w	r3, [r4, #30]
 8014d30:	2300      	movs	r3, #0
 8014d32:	8323      	strh	r3, [r4, #24]
 8014d34:	892a      	ldrh	r2, [r5, #8]
 8014d36:	8462      	strh	r2, [r4, #34]	@ 0x22
 8014d38:	680a      	ldr	r2, [r1, #0]
 8014d3a:	8968      	ldrh	r0, [r5, #10]
 8014d3c:	f8c4 2026 	str.w	r2, [r4, #38]	@ 0x26
 8014d40:	684a      	ldr	r2, [r1, #4]
 8014d42:	84a0      	strh	r0, [r4, #36]	@ 0x24
 8014d44:	f884 e02e 	strb.w	lr, [r4, #46]	@ 0x2e
 8014d48:	f8c4 202a 	str.w	r2, [r4, #42]	@ 0x2a
 8014d4c:	7a0a      	ldrb	r2, [r1, #8]
 8014d4e:	f884 202f 	strb.w	r2, [r4, #47]	@ 0x2f
 8014d52:	f8b5 2044 	ldrh.w	r2, [r5, #68]	@ 0x44
 8014d56:	8622      	strh	r2, [r4, #48]	@ 0x30
 8014d58:	8c2a      	ldrh	r2, [r5, #32]
 8014d5a:	86a2      	strh	r2, [r4, #52]	@ 0x34
 8014d5c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8014d5e:	7a0b      	ldrb	r3, [r1, #8]
 8014d60:	079b      	lsls	r3, r3, #30
 8014d62:	bf41      	itttt	mi
 8014d64:	f240 4302 	movwmi	r3, #1026	@ 0x402
 8014d68:	86e3      	strhmi	r3, [r4, #54]	@ 0x36
 8014d6a:	f648 4305 	movwmi	r3, #35845	@ 0x8c05
 8014d6e:	8723      	strhmi	r3, [r4, #56]	@ 0x38
 8014d70:	4b2f      	ldr	r3, [pc, #188]	@ (8014e30 <net::send_package(net::tcb const*, net::SendInfo const&)+0x15c>)
 8014d72:	bf48      	it	mi
 8014d74:	4a2f      	ldrmi	r2, [pc, #188]	@ (8014e34 <net::send_package(net::tcb const*, net::SendInfo const&)+0x160>)
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	bf58      	it	pl
 8014d7a:	4a2f      	ldrpl	r2, [pc, #188]	@ (8014e38 <net::send_package(net::tcb const*, net::SendInfo const&)+0x164>)
 8014d7c:	ba1b      	rev	r3, r3
 8014d7e:	6053      	str	r3, [r2, #4]
 8014d80:	4b2e      	ldr	r3, [pc, #184]	@ (8014e3c <net::send_package(net::tcb const*, net::SendInfo const&)+0x168>)
 8014d82:	6013      	str	r3, [r2, #0]
 8014d84:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d86:	6093      	str	r3, [r2, #8]
 8014d88:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8014d8a:	b18b      	cbz	r3, 8014db0 <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 8014d8c:	8fa9      	ldrh	r1, [r5, #60]	@ 0x3c
 8014d8e:	b179      	cbz	r1, 8014db0 <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 8014d90:	781b      	ldrb	r3, [r3, #0]
 8014d92:	7313      	strb	r3, [r2, #12]
 8014d94:	8fab      	ldrh	r3, [r5, #60]	@ 0x3c
 8014d96:	2b01      	cmp	r3, #1
 8014d98:	f102 020d 	add.w	r2, r2, #13
 8014d9c:	d908      	bls.n	8014db0 <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 8014d9e:	2301      	movs	r3, #1
 8014da0:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8014da2:	5cc9      	ldrb	r1, [r1, r3]
 8014da4:	f802 1b01 	strb.w	r1, [r2], #1
 8014da8:	8fa9      	ldrh	r1, [r5, #60]	@ 0x3c
 8014daa:	3301      	adds	r3, #1
 8014dac:	4299      	cmp	r1, r3
 8014dae:	dcf7      	bgt.n	8014da0 <net::send_package(net::tcb const*, net::SendInfo const&)+0xcc>
 8014db0:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8014db2:	481d      	ldr	r0, [pc, #116]	@ (8014e28 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8014db4:	ba5b      	rev16	r3, r3
 8014db6:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014db8:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8014dba:	ba5b      	rev16	r3, r3
 8014dbc:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8014dbe:	f7ff ff69 	bl	8014c94 <net::_bswap32(t_tcp*)>
 8014dc2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014dc4:	ba5b      	rev16	r3, r3
 8014dc6:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014dc8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014dca:	f100 0816 	add.w	r8, r0, #22
 8014dce:	ba5b      	rev16	r3, r3
 8014dd0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014dd2:	4642      	mov	r2, r8
 8014dd4:	ab01      	add	r3, sp, #4
 8014dd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8014dda:	f843 1b04 	str.w	r1, [r3], #4
 8014dde:	a904      	add	r1, sp, #16
 8014de0:	428b      	cmp	r3, r1
 8014de2:	d1f8      	bne.n	8014dd6 <net::send_package(net::tcb const*, net::SendInfo const&)+0x102>
 8014de4:	682b      	ldr	r3, [r5, #0]
 8014de6:	f8c4 3016 	str.w	r3, [r4, #22]
 8014dea:	686b      	ldr	r3, [r5, #4]
 8014dec:	f8c4 301a 	str.w	r3, [r4, #26]
 8014df0:	b2b1      	uxth	r1, r6
 8014df2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8014df6:	4812      	ldr	r0, [pc, #72]	@ (8014e40 <net::send_package(net::tcb const*, net::SendInfo const&)+0x16c>)
 8014df8:	83e3      	strh	r3, [r4, #30]
 8014dfa:	ba7f      	rev16	r7, r7
 8014dfc:	310c      	adds	r1, #12
 8014dfe:	8427      	strh	r7, [r4, #32]
 8014e00:	f7ff fe16 	bl	8014a30 <net::net_chksum(void const*, unsigned long)>
 8014e04:	ab01      	add	r3, sp, #4
 8014e06:	4605      	mov	r5, r0
 8014e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e0c:	f848 2b04 	str.w	r2, [r8], #4
 8014e10:	aa04      	add	r2, sp, #16
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d1f8      	bne.n	8014e08 <net::send_package(net::tcb const*, net::SendInfo const&)+0x134>
 8014e16:	4804      	ldr	r0, [pc, #16]	@ (8014e28 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8014e18:	8665      	strh	r5, [r4, #50]	@ 0x32
 8014e1a:	f106 0122 	add.w	r1, r6, #34	@ 0x22
 8014e1e:	b004      	add	sp, #16
 8014e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e24:	f000 be28 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 8014e28:	100083a8 	andne	r8, r0, r8, lsr #7
 8014e2c:	10008994 	mulne	r0, r4, r9
 8014e30:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8014e34:	100083e2 	andne	r8, r0, r2, ror #7
 8014e38:	100083de 	ldrdne	r8, [r0], -lr
 8014e3c:	0a080101 	beq	8215248 <_sidata+0x1f5a78>
 8014e40:	100083be 			@ <UNDEFINED> instruction: 0x100083be

08014e44 <net::send_reset(t_tcp*, net::tcb const*)>:
 8014e44:	f890 202f 	ldrb.w	r2, [r0, #47]	@ 0x2f
 8014e48:	0753      	lsls	r3, r2, #29
 8014e4a:	d42d      	bmi.n	8014ea8 <net::send_reset(t_tcp*, net::tcb const*)+0x64>
 8014e4c:	b500      	push	{lr}
 8014e4e:	b085      	sub	sp, #20
 8014e50:	4603      	mov	r3, r0
 8014e52:	4608      	mov	r0, r1
 8014e54:	2104      	movs	r1, #4
 8014e56:	f88d 100c 	strb.w	r1, [sp, #12]
 8014e5a:	f012 0110 	ands.w	r1, r2, #16
 8014e5e:	d119      	bne.n	8014e94 <net::send_reset(t_tcp*, net::tcb const*)+0x50>
 8014e60:	f04f 0c14 	mov.w	ip, #20
 8014e64:	9101      	str	r1, [sp, #4]
 8014e66:	f88d c00c 	strb.w	ip, [sp, #12]
 8014e6a:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8014e6e:	07d2      	lsls	r2, r2, #31
 8014e70:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014e74:	bf48      	it	mi
 8014e76:	3101      	addmi	r1, #1
 8014e78:	0792      	lsls	r2, r2, #30
 8014e7a:	bf0c      	ite	eq
 8014e7c:	f8d3 3026 	ldreq.w	r3, [r3, #38]	@ 0x26
 8014e80:	f8d3 3026 	ldrne.w	r3, [r3, #38]	@ 0x26
 8014e84:	440b      	add	r3, r1
 8014e86:	a901      	add	r1, sp, #4
 8014e88:	9302      	str	r3, [sp, #8]
 8014e8a:	f7ff ff23 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8014e8e:	b005      	add	sp, #20
 8014e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e94:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8014e98:	0789      	lsls	r1, r1, #30
 8014e9a:	bf0c      	ite	eq
 8014e9c:	f8d3 102a 	ldreq.w	r1, [r3, #42]	@ 0x2a
 8014ea0:	f8d3 102a 	ldrne.w	r1, [r3, #42]	@ 0x2a
 8014ea4:	9101      	str	r1, [sp, #4]
 8014ea6:	e7e0      	b.n	8014e6a <net::send_reset(t_tcp*, net::tcb const*)+0x26>
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop

08014eac <net::scan_options(t_tcp*, net::tcb*, long)>:
 8014eac:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 8014eb0:	441a      	add	r2, r3
 8014eb2:	f100 0c3c 	add.w	ip, r0, #60	@ 0x3c
 8014eb6:	4562      	cmp	r2, ip
 8014eb8:	d349      	bcc.n	8014f4e <net::scan_options(t_tcp*, net::tcb*, long)+0xa2>
 8014eba:	b530      	push	{r4, r5, lr}
 8014ebc:	f100 0336 	add.w	r3, r0, #54	@ 0x36
 8014ec0:	f893 c000 	ldrb.w	ip, [r3]
 8014ec4:	f1bc 0f08 	cmp.w	ip, #8
 8014ec8:	d820      	bhi.n	8014f0c <net::scan_options(t_tcp*, net::tcb*, long)+0x60>
 8014eca:	e8df f00c 	tbb	[pc, ip]
 8014ece:	1f052726 	svcne	0x00052726
 8014ed2:	1f1f1f1f 	svcne	0x001f1f1f
 8014ed6:	f8930029 			@ <UNDEFINED> instruction: 0xf8930029
 8014eda:	c001      	stmia	r0!, {r0}
 8014edc:	f1bc 0f04 	cmp.w	ip, #4
 8014ee0:	d116      	bne.n	8014f10 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8014ee2:	f103 0e04 	add.w	lr, r3, #4
 8014ee6:	4572      	cmp	r2, lr
 8014ee8:	d312      	bcc.n	8014f10 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8014eea:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8014eee:	fa9c fc9c 	rev16.w	ip, ip
 8014ef2:	fa1f fc8c 	uxth.w	ip, ip
 8014ef6:	f10c 0c14 	add.w	ip, ip, #20
 8014efa:	f240 5e8c 	movw	lr, #1420	@ 0x58c
 8014efe:	45f4      	cmp	ip, lr
 8014f00:	bfa8      	it	ge
 8014f02:	46f4      	movge	ip, lr
 8014f04:	f1ac 0c14 	sub.w	ip, ip, #20
 8014f08:	f8a1 c034 	strh.w	ip, [r1, #52]	@ 0x34
 8014f0c:	f893 c001 	ldrb.w	ip, [r3, #1]
 8014f10:	4463      	add	r3, ip
 8014f12:	f103 0c06 	add.w	ip, r3, #6
 8014f16:	4562      	cmp	r2, ip
 8014f18:	d2d2      	bcs.n	8014ec0 <net::scan_options(t_tcp*, net::tcb*, long)+0x14>
 8014f1a:	bd30      	pop	{r4, r5, pc}
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	e7f8      	b.n	8014f12 <net::scan_options(t_tcp*, net::tcb*, long)+0x66>
 8014f20:	f893 c001 	ldrb.w	ip, [r3, #1]
 8014f24:	f1bc 0f0a 	cmp.w	ip, #10
 8014f28:	d1f2      	bne.n	8014f10 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8014f2a:	f103 0e0a 	add.w	lr, r3, #10
 8014f2e:	4572      	cmp	r2, lr
 8014f30:	d3ee      	bcc.n	8014f10 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8014f32:	1c9c      	adds	r4, r3, #2
 8014f34:	f890 e02f 	ldrb.w	lr, [r0, #47]	@ 0x2f
 8014f38:	07a4      	lsls	r4, r4, #30
 8014f3a:	bf0c      	ite	eq
 8014f3c:	f8d3 4002 	ldreq.w	r4, [r3, #2]
 8014f40:	f8d3 4002 	ldrne.w	r4, [r3, #2]
 8014f44:	f01e 0f02 	tst.w	lr, #2
 8014f48:	d002      	beq.n	8014f50 <net::scan_options(t_tcp*, net::tcb*, long)+0xa4>
 8014f4a:	630c      	str	r4, [r1, #48]	@ 0x30
 8014f4c:	e7de      	b.n	8014f0c <net::scan_options(t_tcp*, net::tcb*, long)+0x60>
 8014f4e:	4770      	bx	lr
 8014f50:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 8014f52:	fa95 fe85 	rev.w	lr, r5
 8014f56:	ba25      	rev	r5, r4
 8014f58:	4575      	cmp	r5, lr
 8014f5a:	d9d9      	bls.n	8014f10 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8014f5c:	e7f5      	b.n	8014f4a <net::scan_options(t_tcp*, net::tcb*, long)+0x9e>
 8014f5e:	bf00      	nop

08014f60 <net::tcp_shutdown()>:
 8014f60:	4770      	bx	lr
 8014f62:	bf00      	nop

08014f64 <net::tcp_begin(unsigned short)>:
 8014f64:	4b16      	ldr	r3, [pc, #88]	@ (8014fc0 <net::tcp_begin(unsigned short)+0x5c>)
 8014f66:	f8b3 1d04 	ldrh.w	r1, [r3, #3332]	@ 0xd04
 8014f6a:	4281      	cmp	r1, r0
 8014f6c:	d025      	beq.n	8014fba <net::tcp_begin(unsigned short)+0x56>
 8014f6e:	bb09      	cbnz	r1, 8014fb4 <net::tcp_begin(unsigned short)+0x50>
 8014f70:	b530      	push	{r4, r5, lr}
 8014f72:	4d14      	ldr	r5, [pc, #80]	@ (8014fc4 <net::tcp_begin(unsigned short)+0x60>)
 8014f74:	f8a3 0d04 	strh.w	r0, [r3, #3332]	@ 0xd04
 8014f78:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8014f7c:	f503 7c0c 	add.w	ip, r3, #560	@ 0x230
 8014f80:	f640 3418 	movw	r4, #2840	@ 0xb18
 8014f84:	f04f 0e01 	mov.w	lr, #1
 8014f88:	f1a2 0350 	sub.w	r3, r2, #80	@ 0x50
 8014f8c:	f843 1b04 	str.w	r1, [r3], #4
 8014f90:	4293      	cmp	r3, r2
 8014f92:	d1fb      	bne.n	8014f8c <net::tcp_begin(unsigned short)+0x28>
 8014f94:	682b      	ldr	r3, [r5, #0]
 8014f96:	f822 0c48 	strh.w	r0, [r2, #-72]
 8014f9a:	f822 4c0c 	strh.w	r4, [r2, #-12]
 8014f9e:	f802 ec04 	strb.w	lr, [r2, #-4]
 8014fa2:	e942 330f 	strd	r3, r3, [r2, #-60]	@ 0x3c
 8014fa6:	e942 330a 	strd	r3, r3, [r2, #-40]	@ 0x28
 8014faa:	3250      	adds	r2, #80	@ 0x50
 8014fac:	4562      	cmp	r2, ip
 8014fae:	d1eb      	bne.n	8014f88 <net::tcp_begin(unsigned short)+0x24>
 8014fb0:	2000      	movs	r0, #0
 8014fb2:	bd30      	pop	{r4, r5, pc}
 8014fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fb8:	4770      	bx	lr
 8014fba:	2000      	movs	r0, #0
 8014fbc:	4770      	bx	lr
 8014fbe:	bf00      	nop
 8014fc0:	10008998 	mulne	r0, r8, r9
 8014fc4:	2001bcc0 	andcs	fp, r1, r0, asr #25

08014fc8 <net::tcp_read(long, unsigned char const**, unsigned long&)>:
 8014fc8:	b570      	push	{r4, r5, r6, lr}
 8014fca:	4b1a      	ldr	r3, [pc, #104]	@ (8015034 <net::tcp_read(long, unsigned char const**, unsigned long&)+0x6c>)
 8014fcc:	f640 5408 	movw	r4, #3336	@ 0xd08
 8014fd0:	fb04 f000 	mul.w	r0, r4, r0
 8014fd4:	eb03 0c00 	add.w	ip, r3, r0
 8014fd8:	f8bc e1e2 	ldrh.w	lr, [ip, #482]	@ 0x1e2
 8014fdc:	f8bc 41e0 	ldrh.w	r4, [ip, #480]	@ 0x1e0
 8014fe0:	4574      	cmp	r4, lr
 8014fe2:	bf08      	it	eq
 8014fe4:	2000      	moveq	r0, #0
 8014fe6:	d100      	bne.n	8014fea <net::tcp_read(long, unsigned char const**, unsigned long&)+0x22>
 8014fe8:	bd70      	pop	{r4, r5, r6, pc}
 8014fea:	f44f 64b2 	mov.w	r4, #1424	@ 0x590
 8014fee:	fb04 fe0e 	mul.w	lr, r4, lr
 8014ff2:	eb0e 0500 	add.w	r5, lr, r0
 8014ff6:	441d      	add	r5, r3
 8014ff8:	f500 76f2 	add.w	r6, r0, #484	@ 0x1e4
 8014ffc:	f8b5 4772 	ldrh.w	r4, [r5, #1906]	@ 0x772
 8015000:	6014      	str	r4, [r2, #0]
 8015002:	4476      	add	r6, lr
 8015004:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015008:	441e      	add	r6, r3
 801500a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801500e:	600e      	str	r6, [r1, #0]
 8015010:	4403      	add	r3, r0
 8015012:	f8bc 21e2 	ldrh.w	r2, [ip, #482]	@ 0x1e2
 8015016:	f8b3 1044 	ldrh.w	r1, [r3, #68]	@ 0x44
 801501a:	f8b5 0770 	ldrh.w	r0, [r5, #1904]	@ 0x770
 801501e:	3201      	adds	r2, #1
 8015020:	f201 518c 	addw	r1, r1, #1420	@ 0x58c
 8015024:	f002 0201 	and.w	r2, r2, #1
 8015028:	f8a3 1044 	strh.w	r1, [r3, #68]	@ 0x44
 801502c:	f8ac 21e2 	strh.w	r2, [ip, #482]	@ 0x1e2
 8015030:	bd70      	pop	{r4, r5, r6, pc}
 8015032:	bf00      	nop
 8015034:	10008998 	mulne	r0, r8, r9

08015038 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>:
 8015038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015040:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 80150d4 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x9c>
 8015044:	f640 5408 	movw	r4, #3336	@ 0xd08
 8015048:	011b      	lsls	r3, r3, #4
 801504a:	fb04 3700 	mla	r7, r4, r0, r3
 801504e:	b085      	sub	sp, #20
 8015050:	eb08 0907 	add.w	r9, r8, r7
 8015054:	2a00      	cmp	r2, #0
 8015056:	d038      	beq.n	80150ca <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x92>
 8015058:	f107 0b10 	add.w	fp, r7, #16
 801505c:	468a      	mov	sl, r1
 801505e:	4616      	mov	r6, r2
 8015060:	44c3      	add	fp, r8
 8015062:	e01e      	b.n	80150a2 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x6a>
 8015064:	f8c5 a038 	str.w	sl, [r5, #56]	@ 0x38
 8015068:	87ac      	strh	r4, [r5, #60]	@ 0x3c
 801506a:	f8db 3008 	ldr.w	r3, [fp, #8]
 801506e:	f8db 2030 	ldr.w	r2, [fp, #48]	@ 0x30
 8015072:	4566      	cmp	r6, ip
 8015074:	bf8c      	ite	hi
 8015076:	f04f 0c10 	movhi.w	ip, #16
 801507a:	f04f 0c18 	movls.w	ip, #24
 801507e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015082:	f88d c00c 	strb.w	ip, [sp, #12]
 8015086:	f7ff fe25 	bl	8014cd4 <net::send_package(net::tcb const*, net::SendInfo const&)>
 801508a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 801508e:	2100      	movs	r1, #0
 8015090:	4422      	add	r2, r4
 8015092:	1b1b      	subs	r3, r3, r4
 8015094:	1b36      	subs	r6, r6, r4
 8015096:	e9c5 2306 	strd	r2, r3, [r5, #24]
 801509a:	63a9      	str	r1, [r5, #56]	@ 0x38
 801509c:	87a9      	strh	r1, [r5, #60]	@ 0x3c
 801509e:	44a2      	add	sl, r4
 80150a0:	d013      	beq.n	80150ca <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x92>
 80150a2:	eb08 0507 	add.w	r5, r8, r7
 80150a6:	f240 548c 	movw	r4, #1420	@ 0x58c
 80150aa:	42b4      	cmp	r4, r6
 80150ac:	69eb      	ldr	r3, [r5, #28]
 80150ae:	bf28      	it	cs
 80150b0:	4634      	movcs	r4, r6
 80150b2:	429c      	cmp	r4, r3
 80150b4:	f240 5c8b 	movw	ip, #1419	@ 0x58b
 80150b8:	a901      	add	r1, sp, #4
 80150ba:	4648      	mov	r0, r9
 80150bc:	d9d2      	bls.n	8015064 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x2c>
 80150be:	4804      	ldr	r0, [pc, #16]	@ (80150d0 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x98>)
 80150c0:	f002 ff22 	bl	8017f08 <console_error>
 80150c4:	1b36      	subs	r6, r6, r4
 80150c6:	44a2      	add	sl, r4
 80150c8:	d1eb      	bne.n	80150a2 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x6a>
 80150ca:	b005      	add	sp, #20
 80150cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d0:	0801cbcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, fp, lr, pc}
 80150d4:	10008998 	mulne	r0, r8, r9

080150d8 <net::udp_set_ip()>:
 80150d8:	4a02      	ldr	r2, [pc, #8]	@ (80150e4 <net::udp_set_ip()+0xc>)
 80150da:	4b03      	ldr	r3, [pc, #12]	@ (80150e8 <net::udp_set_ip()+0x10>)
 80150dc:	6812      	ldr	r2, [r2, #0]
 80150de:	f8c3 201a 	str.w	r2, [r3, #26]
 80150e2:	4770      	bx	lr
 80150e4:	2000e220 	andcs	lr, r0, r0, lsr #4
 80150e8:	100096ac 	andne	r9, r0, ip, lsr #13

080150ec <net::udp_begin(unsigned short)>:
 80150ec:	4a08      	ldr	r2, [pc, #32]	@ (8015110 <net::udp_begin(unsigned short)+0x24>)
 80150ee:	4601      	mov	r1, r0
 80150f0:	2000      	movs	r0, #0
 80150f2:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80150f6:	428b      	cmp	r3, r1
 80150f8:	d005      	beq.n	8015106 <net::udp_begin(unsigned short)+0x1a>
 80150fa:	b12b      	cbz	r3, 8015108 <net::udp_begin(unsigned short)+0x1c>
 80150fc:	3001      	adds	r0, #1
 80150fe:	2808      	cmp	r0, #8
 8015100:	d1f7      	bne.n	80150f2 <net::udp_begin(unsigned short)+0x6>
 8015102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015106:	4770      	bx	lr
 8015108:	4b02      	ldr	r3, [pc, #8]	@ (8015114 <net::udp_begin(unsigned short)+0x28>)
 801510a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
 801510e:	4770      	bx	lr
 8015110:	1000caf6 	strdne	ip, [r0], -r6
 8015114:	1000caf8 	strdne	ip, [r0], -r8

08015118 <net::udp_end(unsigned short)>:
 8015118:	4a0d      	ldr	r2, [pc, #52]	@ (8015150 <net::udp_end(unsigned short)+0x38>)
 801511a:	b508      	push	{r3, lr}
 801511c:	2300      	movs	r3, #0
 801511e:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8015122:	4281      	cmp	r1, r0
 8015124:	d008      	beq.n	8015138 <net::udp_end(unsigned short)+0x20>
 8015126:	3301      	adds	r3, #1
 8015128:	2b08      	cmp	r3, #8
 801512a:	d1f8      	bne.n	801511e <net::udp_end(unsigned short)+0x6>
 801512c:	4809      	ldr	r0, [pc, #36]	@ (8015154 <net::udp_end(unsigned short)+0x3c>)
 801512e:	f002 feeb 	bl	8017f08 <console_error>
 8015132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015136:	bd08      	pop	{r3, pc}
 8015138:	4a07      	ldr	r2, [pc, #28]	@ (8015158 <net::udp_end(unsigned short)+0x40>)
 801513a:	4908      	ldr	r1, [pc, #32]	@ (801515c <net::udp_end(unsigned short)+0x44>)
 801513c:	f240 50cc 	movw	r0, #1484	@ 0x5cc
 8015140:	fb00 2203 	mla	r2, r0, r3, r2
 8015144:	2000      	movs	r0, #0
 8015146:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
 801514a:	6050      	str	r0, [r2, #4]
 801514c:	bd08      	pop	{r3, pc}
 801514e:	bf00      	nop
 8015150:	1000caf6 	strdne	ip, [r0], -r6
 8015154:	0801cbfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, fp, lr, pc}
 8015158:	10009c98 	mulne	r0, r8, ip
 801515c:	1000caf8 	strdne	ip, [r0], -r8

08015160 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>:
 8015160:	b510      	push	{r4, lr}
 8015162:	f240 5ccc 	movw	ip, #1484	@ 0x5cc
 8015166:	4c0c      	ldr	r4, [pc, #48]	@ (8015198 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)+0x38>)
 8015168:	fb0c fc00 	mul.w	ip, ip, r0
 801516c:	eb04 0e0c 	add.w	lr, r4, ip
 8015170:	f8de 0004 	ldr.w	r0, [lr, #4]
 8015174:	b900      	cbnz	r0, 8015178 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)+0x18>
 8015176:	bd10      	pop	{r4, pc}
 8015178:	f10c 000a 	add.w	r0, ip, #10
 801517c:	4420      	add	r0, r4
 801517e:	6008      	str	r0, [r1, #0]
 8015180:	f854 100c 	ldr.w	r1, [r4, ip]
 8015184:	6011      	str	r1, [r2, #0]
 8015186:	f8be 2008 	ldrh.w	r2, [lr, #8]
 801518a:	801a      	strh	r2, [r3, #0]
 801518c:	2300      	movs	r3, #0
 801518e:	f8de 0004 	ldr.w	r0, [lr, #4]
 8015192:	f8ce 3004 	str.w	r3, [lr, #4]
 8015196:	bd10      	pop	{r4, pc}
 8015198:	10009c98 	mulne	r0, r8, ip

0801519c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>:
 801519c:	b570      	push	{r4, r5, r6, lr}
 801519e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80151a2:	4e3d      	ldr	r6, [pc, #244]	@ (8015298 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xfc>)
 80151a4:	fa94 fe94 	rev16.w	lr, r4
 80151a8:	4c3c      	ldr	r4, [pc, #240]	@ (801529c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x100>)
 80151aa:	f8b6 c000 	ldrh.w	ip, [r6]
 80151ae:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
 80151b2:	4c3b      	ldr	r4, [pc, #236]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80151b4:	b290      	uxth	r0, r2
 80151b6:	f8a4 c012 	strh.w	ip, [r4, #18]
 80151ba:	f10c 0c01 	add.w	ip, ip, #1
 80151be:	f8a6 c000 	strh.w	ip, [r6]
 80151c2:	f100 0c1c 	add.w	ip, r0, #28
 80151c6:	3008      	adds	r0, #8
 80151c8:	ba40      	rev16	r0, r0
 80151ca:	ba6d      	rev16	r5, r5
 80151cc:	fa9c fc9c 	rev16.w	ip, ip
 80151d0:	84e0      	strh	r0, [r4, #38]	@ 0x26
 80151d2:	f5b2 6fb8 	cmp.w	r2, #1472	@ 0x5c0
 80151d6:	f04f 0000 	mov.w	r0, #0
 80151da:	8465      	strh	r5, [r4, #34]	@ 0x22
 80151dc:	f8a4 e024 	strh.w	lr, [r4, #36]	@ 0x24
 80151e0:	4615      	mov	r5, r2
 80151e2:	f8a4 c010 	strh.w	ip, [r4, #16]
 80151e6:	bf28      	it	cs
 80151e8:	f44f 65b8 	movcs.w	r5, #1472	@ 0x5c0
 80151ec:	8320      	strh	r0, [r4, #24]
 80151ee:	b14a      	cbz	r2, 8015204 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x68>
 80151f0:	eb01 0e05 	add.w	lr, r1, r5
 80151f4:	f104 002a 	add.w	r0, r4, #42	@ 0x2a
 80151f8:	f811 cb01 	ldrb.w	ip, [r1], #1
 80151fc:	f800 cb01 	strb.w	ip, [r0], #1
 8015200:	4571      	cmp	r1, lr
 8015202:	d1f9      	bne.n	80151f8 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x5c>
 8015204:	1c5a      	adds	r2, r3, #1
 8015206:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 801520a:	d02e      	beq.n	801526a <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xce>
 801520c:	4a25      	ldr	r2, [pc, #148]	@ (80152a4 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x108>)
 801520e:	6812      	ldr	r2, [r2, #0]
 8015210:	439a      	bics	r2, r3
 8015212:	d01c      	beq.n	801524e <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xb2>
 8015214:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8015218:	2ae0      	cmp	r2, #224	@ 0xe0
 801521a:	d136      	bne.n	801528a <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xee>
 801521c:	4822      	ldr	r0, [pc, #136]	@ (80152a8 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x10c>)
 801521e:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8015222:	70c2      	strb	r2, [r0, #3]
 8015224:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015228:	7102      	strb	r2, [r0, #4]
 801522a:	f3c3 6207 	ubfx	r2, r3, #24, #8
 801522e:	7142      	strb	r2, [r0, #5]
 8015230:	4a1b      	ldr	r2, [pc, #108]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8015232:	1d85      	adds	r5, r0, #6
 8015234:	f810 cb01 	ldrb.w	ip, [r0], #1
 8015238:	f802 cb01 	strb.w	ip, [r2], #1
 801523c:	42a8      	cmp	r0, r5
 801523e:	d1f9      	bne.n	8015234 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x98>
 8015240:	f8c4 301e 	str.w	r3, [r4, #30]
 8015244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015248:	4815      	ldr	r0, [pc, #84]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 801524a:	f000 bc15 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 801524e:	4a14      	ldr	r2, [pc, #80]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8015250:	25ff      	movs	r5, #255	@ 0xff
 8015252:	1d90      	adds	r0, r2, #6
 8015254:	f802 5b01 	strb.w	r5, [r2], #1
 8015258:	4282      	cmp	r2, r0
 801525a:	d1fb      	bne.n	8015254 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xb8>
 801525c:	f8c4 301e 	str.w	r3, [r4, #30]
 8015260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015264:	480e      	ldr	r0, [pc, #56]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8015266:	f000 bc07 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 801526a:	4b0d      	ldr	r3, [pc, #52]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 801526c:	22ff      	movs	r2, #255	@ 0xff
 801526e:	1d98      	adds	r0, r3, #6
 8015270:	f803 2b01 	strb.w	r2, [r3], #1
 8015274:	4283      	cmp	r3, r0
 8015276:	d1fb      	bne.n	8015270 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xd4>
 8015278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801527c:	f8c4 301e 	str.w	r3, [r4, #30]
 8015280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015284:	4806      	ldr	r0, [pc, #24]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8015286:	f000 bbf7 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 801528a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801528e:	4804      	ldr	r0, [pc, #16]	@ (80152a0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8015290:	461a      	mov	r2, r3
 8015292:	f000 be27 	b.w	8015ee4 <net::arp_send(t_udp*, unsigned long, unsigned long)>
 8015296:	bf00      	nop
 8015298:	100096a8 	andne	r9, r0, r8, lsr #13
 801529c:	1000caf8 	strdne	ip, [r0], -r8
 80152a0:	100096ac 	andne	r9, r0, ip, lsr #13
 80152a4:	2000e208 	andcs	lr, r0, r8, lsl #4
 80152a8:	100096a0 	andne	r9, r0, r0, lsr #13

080152ac <NetworkParamsStore::Copy(networkparams::Params*)>:
 80152ac:	b507      	push	{r0, r1, r2, lr}
 80152ae:	2301      	movs	r3, #1
 80152b0:	2100      	movs	r1, #0
 80152b2:	e9cd 1300 	strd	r1, r3, [sp]
 80152b6:	4602      	mov	r2, r0
 80152b8:	4803      	ldr	r0, [pc, #12]	@ (80152c8 <NetworkParamsStore::Copy(networkparams::Params*)+0x1c>)
 80152ba:	235e      	movs	r3, #94	@ 0x5e
 80152bc:	6800      	ldr	r0, [r0, #0]
 80152be:	f001 fbf1 	bl	8016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 80152c2:	b003      	add	sp, #12
 80152c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80152c8:	2000e2cc 	andcs	lr, r0, ip, asr #5

080152cc <NetworkParams::NetworkParams()>:
 80152cc:	b510      	push	{r4, lr}
 80152ce:	225e      	movs	r2, #94	@ 0x5e
 80152d0:	4604      	mov	r4, r0
 80152d2:	2100      	movs	r1, #0
 80152d4:	f004 fe2c 	bl	8019f30 <memset>
 80152d8:	2301      	movs	r3, #1
 80152da:	7523      	strb	r3, [r4, #20]
 80152dc:	4620      	mov	r0, r4
 80152de:	bd10      	pop	{r4, pc}

080152e0 <NetworkParams::Load()>:
 80152e0:	b508      	push	{r3, lr}
 80152e2:	2200      	movs	r2, #0
 80152e4:	7002      	strb	r2, [r0, #0]
 80152e6:	7042      	strb	r2, [r0, #1]
 80152e8:	7082      	strb	r2, [r0, #2]
 80152ea:	70c2      	strb	r2, [r0, #3]
 80152ec:	f7ff ffde 	bl	80152ac <NetworkParamsStore::Copy(networkparams::Params*)>
 80152f0:	bd08      	pop	{r3, pc}
	...

080152f4 <NetworkParams::Load(char const*, unsigned long)>:
 80152f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152f6:	2500      	movs	r5, #0
 80152f8:	b087      	sub	sp, #28
 80152fa:	4604      	mov	r4, r0
 80152fc:	460e      	mov	r6, r1
 80152fe:	4617      	mov	r7, r2
 8015300:	7005      	strb	r5, [r0, #0]
 8015302:	7045      	strb	r5, [r0, #1]
 8015304:	7085      	strb	r5, [r0, #2]
 8015306:	70c5      	strb	r5, [r0, #3]
 8015308:	4602      	mov	r2, r0
 801530a:	490c      	ldr	r1, [pc, #48]	@ (801533c <NetworkParams::Load(char const*, unsigned long)+0x48>)
 801530c:	a804      	add	r0, sp, #16
 801530e:	f001 fea3 	bl	8017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8015312:	463a      	mov	r2, r7
 8015314:	4631      	mov	r1, r6
 8015316:	a804      	add	r0, sp, #16
 8015318:	f001 fea2 	bl	8017060 <ReadConfigFile::Read(char const*, unsigned int)>
 801531c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8015320:	235e      	movs	r3, #94	@ 0x5e
 8015322:	4807      	ldr	r0, [pc, #28]	@ (8015340 <NetworkParams::Load(char const*, unsigned long)+0x4c>)
 8015324:	9300      	str	r3, [sp, #0]
 8015326:	462a      	mov	r2, r5
 8015328:	4623      	mov	r3, r4
 801532a:	4629      	mov	r1, r5
 801532c:	6800      	ldr	r0, [r0, #0]
 801532e:	f001 fb93 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8015332:	a804      	add	r0, sp, #16
 8015334:	f001 fe93 	bl	801705e <ReadConfigFile::~ReadConfigFile()>
 8015338:	b007      	add	sp, #28
 801533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801533c:	080154a1 	stmdaeq	r1, {r0, r5, r7, sl, ip, lr}
 8015340:	2000e2cc 	andcs	lr, r0, ip, asr #5

08015344 <NetworkParams::callbackFunction(char const*)>:
 8015344:	b530      	push	{r4, r5, lr}
 8015346:	460d      	mov	r5, r1
 8015348:	b085      	sub	sp, #20
 801534a:	4604      	mov	r4, r0
 801534c:	494d      	ldr	r1, [pc, #308]	@ (8015484 <NetworkParams::callbackFunction(char const*)+0x140>)
 801534e:	f10d 0207 	add.w	r2, sp, #7
 8015352:	4628      	mov	r0, r5
 8015354:	f001 ffaa 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8015358:	b978      	cbnz	r0, 801537a <NetworkParams::callbackFunction(char const*)+0x36>
 801535a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801535e:	6823      	ldr	r3, [r4, #0]
 8015360:	b142      	cbz	r2, 8015374 <NetworkParams::callbackFunction(char const*)+0x30>
 8015362:	f023 0301 	bic.w	r3, r3, #1
 8015366:	3a00      	subs	r2, #0
 8015368:	bf18      	it	ne
 801536a:	2201      	movne	r2, #1
 801536c:	6023      	str	r3, [r4, #0]
 801536e:	7522      	strb	r2, [r4, #20]
 8015370:	b005      	add	sp, #20
 8015372:	bd30      	pop	{r4, r5, pc}
 8015374:	f043 0301 	orr.w	r3, r3, #1
 8015378:	e7f5      	b.n	8015366 <NetworkParams::callbackFunction(char const*)+0x22>
 801537a:	4943      	ldr	r1, [pc, #268]	@ (8015488 <NetworkParams::callbackFunction(char const*)+0x144>)
 801537c:	f10d 0207 	add.w	r2, sp, #7
 8015380:	4628      	mov	r0, r5
 8015382:	f001 ff93 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8015386:	b980      	cbnz	r0, 80153aa <NetworkParams::callbackFunction(char const*)+0x66>
 8015388:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801538c:	6823      	ldr	r3, [r4, #0]
 801538e:	1e51      	subs	r1, r2, #1
 8015390:	2904      	cmp	r1, #4
 8015392:	bf97      	itett	ls
 8015394:	f443 7380 	orrls.w	r3, r3, #256	@ 0x100
 8015398:	f423 7380 	bichi.w	r3, r3, #256	@ 0x100
 801539c:	6023      	strls	r3, [r4, #0]
 801539e:	f884 205d 	strbls.w	r2, [r4, #93]	@ 0x5d
 80153a2:	bf84      	itt	hi
 80153a4:	6023      	strhi	r3, [r4, #0]
 80153a6:	f884 005d 	strbhi.w	r0, [r4, #93]	@ 0x5d
 80153aa:	4938      	ldr	r1, [pc, #224]	@ (801548c <NetworkParams::callbackFunction(char const*)+0x148>)
 80153ac:	aa02      	add	r2, sp, #8
 80153ae:	4628      	mov	r0, r5
 80153b0:	f001 fef7 	bl	80171a2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 80153b4:	b9d8      	cbnz	r0, 80153ee <NetworkParams::callbackFunction(char const*)+0xaa>
 80153b6:	9a02      	ldr	r2, [sp, #8]
 80153b8:	6823      	ldr	r3, [r4, #0]
 80153ba:	b2d1      	uxtb	r1, r2
 80153bc:	29ac      	cmp	r1, #172	@ 0xac
 80153be:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80153c2:	d007      	beq.n	80153d4 <NetworkParams::callbackFunction(char const*)+0x90>
 80153c4:	29c0      	cmp	r1, #192	@ 0xc0
 80153c6:	d00c      	beq.n	80153e2 <NetworkParams::callbackFunction(char const*)+0x9e>
 80153c8:	290a      	cmp	r1, #10
 80153ca:	d006      	beq.n	80153da <NetworkParams::callbackFunction(char const*)+0x96>
 80153cc:	2902      	cmp	r1, #2
 80153ce:	d004      	beq.n	80153da <NetworkParams::callbackFunction(char const*)+0x96>
 80153d0:	b11a      	cbz	r2, 80153da <NetworkParams::callbackFunction(char const*)+0x96>
 80153d2:	e008      	b.n	80153e6 <NetworkParams::callbackFunction(char const*)+0xa2>
 80153d4:	3810      	subs	r0, #16
 80153d6:	280f      	cmp	r0, #15
 80153d8:	d805      	bhi.n	80153e6 <NetworkParams::callbackFunction(char const*)+0xa2>
 80153da:	6062      	str	r2, [r4, #4]
 80153dc:	f043 0302 	orr.w	r3, r3, #2
 80153e0:	e003      	b.n	80153ea <NetworkParams::callbackFunction(char const*)+0xa6>
 80153e2:	28a8      	cmp	r0, #168	@ 0xa8
 80153e4:	d0f9      	beq.n	80153da <NetworkParams::callbackFunction(char const*)+0x96>
 80153e6:	f023 0302 	bic.w	r3, r3, #2
 80153ea:	6023      	str	r3, [r4, #0]
 80153ec:	e7c0      	b.n	8015370 <NetworkParams::callbackFunction(char const*)+0x2c>
 80153ee:	4928      	ldr	r1, [pc, #160]	@ (8015490 <NetworkParams::callbackFunction(char const*)+0x14c>)
 80153f0:	aa02      	add	r2, sp, #8
 80153f2:	4628      	mov	r0, r5
 80153f4:	f001 fed5 	bl	80171a2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 80153f8:	b970      	cbnz	r0, 8015418 <NetworkParams::callbackFunction(char const*)+0xd4>
 80153fa:	9a02      	ldr	r2, [sp, #8]
 80153fc:	6823      	ldr	r3, [r4, #0]
 80153fe:	b142      	cbz	r2, 8015412 <NetworkParams::callbackFunction(char const*)+0xce>
 8015400:	ba11      	rev	r1, r2
 8015402:	43c8      	mvns	r0, r1
 8015404:	ea11 0150 	ands.w	r1, r1, r0, lsr #1
 8015408:	d103      	bne.n	8015412 <NetworkParams::callbackFunction(char const*)+0xce>
 801540a:	60a2      	str	r2, [r4, #8]
 801540c:	f043 0304 	orr.w	r3, r3, #4
 8015410:	e7eb      	b.n	80153ea <NetworkParams::callbackFunction(char const*)+0xa6>
 8015412:	f023 0304 	bic.w	r3, r3, #4
 8015416:	e7e8      	b.n	80153ea <NetworkParams::callbackFunction(char const*)+0xa6>
 8015418:	491e      	ldr	r1, [pc, #120]	@ (8015494 <NetworkParams::callbackFunction(char const*)+0x150>)
 801541a:	aa02      	add	r2, sp, #8
 801541c:	4628      	mov	r0, r5
 801541e:	f001 fec0 	bl	80171a2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8015422:	b950      	cbnz	r0, 801543a <NetworkParams::callbackFunction(char const*)+0xf6>
 8015424:	9a02      	ldr	r2, [sp, #8]
 8015426:	6823      	ldr	r3, [r4, #0]
 8015428:	b122      	cbz	r2, 8015434 <NetworkParams::callbackFunction(char const*)+0xf0>
 801542a:	f043 0308 	orr.w	r3, r3, #8
 801542e:	6023      	str	r3, [r4, #0]
 8015430:	60e2      	str	r2, [r4, #12]
 8015432:	e79d      	b.n	8015370 <NetworkParams::callbackFunction(char const*)+0x2c>
 8015434:	f023 0308 	bic.w	r3, r3, #8
 8015438:	e7d7      	b.n	80153ea <NetworkParams::callbackFunction(char const*)+0xa6>
 801543a:	233f      	movs	r3, #63	@ 0x3f
 801543c:	9303      	str	r3, [sp, #12]
 801543e:	4916      	ldr	r1, [pc, #88]	@ (8015498 <NetworkParams::callbackFunction(char const*)+0x154>)
 8015440:	ab03      	add	r3, sp, #12
 8015442:	f104 0215 	add.w	r2, r4, #21
 8015446:	4628      	mov	r0, r5
 8015448:	f001 fe40 	bl	80170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 801544c:	b930      	cbnz	r0, 801545c <NetworkParams::callbackFunction(char const*)+0x118>
 801544e:	9b03      	ldr	r3, [sp, #12]
 8015450:	4423      	add	r3, r4
 8015452:	7558      	strb	r0, [r3, #21]
 8015454:	6823      	ldr	r3, [r4, #0]
 8015456:	f043 0320 	orr.w	r3, r3, #32
 801545a:	e7c6      	b.n	80153ea <NetworkParams::callbackFunction(char const*)+0xa6>
 801545c:	490f      	ldr	r1, [pc, #60]	@ (801549c <NetworkParams::callbackFunction(char const*)+0x158>)
 801545e:	aa02      	add	r2, sp, #8
 8015460:	4628      	mov	r0, r5
 8015462:	f001 fe9e 	bl	80171a2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8015466:	2800      	cmp	r0, #0
 8015468:	d182      	bne.n	8015370 <NetworkParams::callbackFunction(char const*)+0x2c>
 801546a:	9a02      	ldr	r2, [sp, #8]
 801546c:	6823      	ldr	r3, [r4, #0]
 801546e:	b12a      	cbz	r2, 801547c <NetworkParams::callbackFunction(char const*)+0x138>
 8015470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015474:	6023      	str	r3, [r4, #0]
 8015476:	f8c4 2055 	str.w	r2, [r4, #85]	@ 0x55
 801547a:	e779      	b.n	8015370 <NetworkParams::callbackFunction(char const*)+0x2c>
 801547c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015480:	e7f8      	b.n	8015474 <NetworkParams::callbackFunction(char const*)+0x130>
 8015482:	bf00      	nop
 8015484:	0801f0c5 	stmdaeq	r1, {r0, r2, r6, r7, ip, sp, lr, pc}
 8015488:	0801f0b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, ip, sp, lr, pc}
 801548c:	0801f0aa 	stmdaeq	r1, {r1, r3, r5, r7, ip, sp, lr, pc}
 8015490:	0801f0a1 	stmdaeq	r1, {r0, r5, r7, ip, sp, lr, pc}
 8015494:	0801f091 	stmdaeq	r1, {r0, r4, r7, ip, sp, lr, pc}
 8015498:	0801f088 	stmdaeq	r1, {r3, r7, ip, sp, lr, pc}
 801549c:	0801f07d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, ip, sp, lr, pc}

080154a0 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 80154a0:	f7ff bf50 	b.w	8015344 <NetworkParams::callbackFunction(char const*)>

080154a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)>:
 80154a4:	b570      	push	{r4, r5, r6, lr}
 80154a6:	4604      	mov	r4, r0
 80154a8:	b086      	sub	sp, #24
 80154aa:	4615      	mov	r5, r2
 80154ac:	461e      	mov	r6, r3
 80154ae:	2900      	cmp	r1, #0
 80154b0:	d046      	beq.n	8015540 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x9c>
 80154b2:	225e      	movs	r2, #94	@ 0x5e
 80154b4:	f004 fd25 	bl	8019f02 <memmove>
 80154b8:	462a      	mov	r2, r5
 80154ba:	4d76      	ldr	r5, [pc, #472]	@ (8015694 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f0>)
 80154bc:	4976      	ldr	r1, [pc, #472]	@ (8015698 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f4>)
 80154be:	4633      	mov	r3, r6
 80154c0:	a803      	add	r0, sp, #12
 80154c2:	f001 fcf3 	bl	8016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 80154c6:	692a      	ldr	r2, [r5, #16]
 80154c8:	4974      	ldr	r1, [pc, #464]	@ (801569c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f8>)
 80154ca:	2300      	movs	r3, #0
 80154cc:	a803      	add	r0, sp, #12
 80154ce:	f001 fd2f 	bl	8016f30 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 80154d2:	6823      	ldr	r3, [r4, #0]
 80154d4:	0799      	lsls	r1, r3, #30
 80154d6:	bf5c      	itt	pl
 80154d8:	682a      	ldrpl	r2, [r5, #0]
 80154da:	6062      	strpl	r2, [r4, #4]
 80154dc:	075a      	lsls	r2, r3, #29
 80154de:	bf5c      	itt	pl
 80154e0:	686a      	ldrpl	r2, [r5, #4]
 80154e2:	60a2      	strpl	r2, [r4, #8]
 80154e4:	071e      	lsls	r6, r3, #28
 80154e6:	bf5c      	itt	pl
 80154e8:	68aa      	ldrpl	r2, [r5, #8]
 80154ea:	60e2      	strpl	r2, [r4, #12]
 80154ec:	0698      	lsls	r0, r3, #26
 80154ee:	d412      	bmi.n	8015516 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x72>
 80154f0:	4b6b      	ldr	r3, [pc, #428]	@ (80156a0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1fc>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f104 0015 	add.w	r0, r4, #21
 80154f8:	3315      	adds	r3, #21
 80154fa:	223f      	movs	r2, #63	@ 0x3f
 80154fc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015500:	b119      	cbz	r1, 801550a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x66>
 8015502:	3a01      	subs	r2, #1
 8015504:	f800 1b01 	strb.w	r1, [r0], #1
 8015508:	d1f8      	bne.n	80154fc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x58>
 801550a:	2100      	movs	r1, #0
 801550c:	f004 fd10 	bl	8019f30 <memset>
 8015510:	2300      	movs	r3, #0
 8015512:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015516:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801551a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801551e:	7d23      	ldrb	r3, [r4, #20]
 8015520:	6821      	ldr	r1, [r4, #0]
 8015522:	42aa      	cmp	r2, r5
 8015524:	d21d      	bcs.n	8015562 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xbe>
 8015526:	9803      	ldr	r0, [sp, #12]
 8015528:	07c9      	lsls	r1, r1, #31
 801552a:	4410      	add	r0, r2
 801552c:	eba5 0502 	sub.w	r5, r5, r2
 8015530:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015534:	d407      	bmi.n	8015546 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xa2>
 8015536:	b93a      	cbnz	r2, 8015548 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xa4>
 8015538:	9300      	str	r3, [sp, #0]
 801553a:	4a5a      	ldr	r2, [pc, #360]	@ (80156a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x200>)
 801553c:	4b5a      	ldr	r3, [pc, #360]	@ (80156a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 801553e:	e006      	b.n	801554e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xaa>
 8015540:	f7ff feb4 	bl	80152ac <NetworkParamsStore::Copy(networkparams::Params*)>
 8015544:	e7b8      	b.n	80154b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 8015546:	b312      	cbz	r2, 801558e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xea>
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	4a58      	ldr	r2, [pc, #352]	@ (80156ac <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x208>)
 801554c:	4b56      	ldr	r3, [pc, #344]	@ (80156a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 801554e:	4629      	mov	r1, r5
 8015550:	f004 fffa 	bl	801a548 <snprintf>
 8015554:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015558:	4285      	cmp	r5, r0
 801555a:	bfa4      	itt	ge
 801555c:	181b      	addge	r3, r3, r0
 801555e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8015562:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015566:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801556a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 801556e:	6821      	ldr	r1, [r4, #0]
 8015570:	42aa      	cmp	r2, r5
 8015572:	d21f      	bcs.n	80155b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x110>
 8015574:	9803      	ldr	r0, [sp, #12]
 8015576:	05ce      	lsls	r6, r1, #23
 8015578:	4410      	add	r0, r2
 801557a:	eba5 0502 	sub.w	r5, r5, r2
 801557e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015582:	d408      	bmi.n	8015596 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xf2>
 8015584:	b94a      	cbnz	r2, 801559a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xf6>
 8015586:	9300      	str	r3, [sp, #0]
 8015588:	4a46      	ldr	r2, [pc, #280]	@ (80156a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x200>)
 801558a:	4b49      	ldr	r3, [pc, #292]	@ (80156b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 801558c:	e008      	b.n	80155a0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xfc>
 801558e:	9300      	str	r3, [sp, #0]
 8015590:	4a48      	ldr	r2, [pc, #288]	@ (80156b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x210>)
 8015592:	4b45      	ldr	r3, [pc, #276]	@ (80156a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 8015594:	e7db      	b.n	801554e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xaa>
 8015596:	2a00      	cmp	r2, #0
 8015598:	d03e      	beq.n	8015618 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x174>
 801559a:	9300      	str	r3, [sp, #0]
 801559c:	4a43      	ldr	r2, [pc, #268]	@ (80156ac <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x208>)
 801559e:	4b44      	ldr	r3, [pc, #272]	@ (80156b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 80155a0:	4629      	mov	r1, r5
 80155a2:	f004 ffd1 	bl	801a548 <snprintf>
 80155a6:	4285      	cmp	r5, r0
 80155a8:	bfa2      	ittt	ge
 80155aa:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80155ae:	18c0      	addge	r0, r0, r3
 80155b0:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80155b4:	4940      	ldr	r1, [pc, #256]	@ (80156b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x214>)
 80155b6:	a803      	add	r0, sp, #12
 80155b8:	f001 fd34 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 80155bc:	6823      	ldr	r3, [r4, #0]
 80155be:	6862      	ldr	r2, [r4, #4]
 80155c0:	493e      	ldr	r1, [pc, #248]	@ (80156bc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x218>)
 80155c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80155c6:	a803      	add	r0, sp, #12
 80155c8:	f001 fcb2 	bl	8016f30 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 80155cc:	6823      	ldr	r3, [r4, #0]
 80155ce:	68a2      	ldr	r2, [r4, #8]
 80155d0:	493b      	ldr	r1, [pc, #236]	@ (80156c0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x21c>)
 80155d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80155d6:	a803      	add	r0, sp, #12
 80155d8:	f001 fcaa 	bl	8016f30 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 80155dc:	6823      	ldr	r3, [r4, #0]
 80155de:	68e2      	ldr	r2, [r4, #12]
 80155e0:	4938      	ldr	r1, [pc, #224]	@ (80156c4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x220>)
 80155e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80155e6:	a803      	add	r0, sp, #12
 80155e8:	f001 fca2 	bl	8016f30 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 80155ec:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80155f0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80155f4:	6821      	ldr	r1, [r4, #0]
 80155f6:	42aa      	cmp	r2, r5
 80155f8:	d221      	bcs.n	801563e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x19a>
 80155fa:	9803      	ldr	r0, [sp, #12]
 80155fc:	0689      	lsls	r1, r1, #26
 80155fe:	4410      	add	r0, r2
 8015600:	eba5 0502 	sub.w	r5, r5, r2
 8015604:	f104 0315 	add.w	r3, r4, #21
 8015608:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801560c:	d408      	bmi.n	8015620 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x17c>
 801560e:	b94a      	cbnz	r2, 8015624 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x180>
 8015610:	9300      	str	r3, [sp, #0]
 8015612:	4a2d      	ldr	r2, [pc, #180]	@ (80156c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x224>)
 8015614:	4b2d      	ldr	r3, [pc, #180]	@ (80156cc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 8015616:	e008      	b.n	801562a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x186>
 8015618:	9300      	str	r3, [sp, #0]
 801561a:	4a26      	ldr	r2, [pc, #152]	@ (80156b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x210>)
 801561c:	4b24      	ldr	r3, [pc, #144]	@ (80156b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 801561e:	e7bf      	b.n	80155a0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xfc>
 8015620:	2a00      	cmp	r2, #0
 8015622:	d032      	beq.n	801568a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1e6>
 8015624:	9300      	str	r3, [sp, #0]
 8015626:	4a2a      	ldr	r2, [pc, #168]	@ (80156d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>)
 8015628:	4b28      	ldr	r3, [pc, #160]	@ (80156cc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 801562a:	4629      	mov	r1, r5
 801562c:	f004 ff8c 	bl	801a548 <snprintf>
 8015630:	4285      	cmp	r5, r0
 8015632:	bfa2      	ittt	ge
 8015634:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8015638:	18c0      	addge	r0, r0, r3
 801563a:	f8ad 0012 	strhge.w	r0, [sp, #18]
 801563e:	4925      	ldr	r1, [pc, #148]	@ (80156d4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 8015640:	a803      	add	r0, sp, #12
 8015642:	f001 fcef 	bl	8017024 <PropertiesBuilder::AddComment(char const*)>
 8015646:	6823      	ldr	r3, [r4, #0]
 8015648:	f8d4 2055 	ldr.w	r2, [r4, #85]	@ 0x55
 801564c:	4922      	ldr	r1, [pc, #136]	@ (80156d8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 801564e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015652:	a803      	add	r0, sp, #12
 8015654:	f001 fc6c 	bl	8016f30 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 8015658:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801565c:	b17b      	cbz	r3, 801567e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1da>
 801565e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015662:	9b03      	ldr	r3, [sp, #12]
 8015664:	4413      	add	r3, r2
 8015666:	227d      	movs	r2, #125	@ 0x7d
 8015668:	f803 2c01 	strb.w	r2, [r3, #-1]
 801566c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015670:	9903      	ldr	r1, [sp, #12]
 8015672:	54ca      	strb	r2, [r1, r3]
 8015674:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015678:	3301      	adds	r3, #1
 801567a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801567e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015684:	601a      	str	r2, [r3, #0]
 8015686:	b006      	add	sp, #24
 8015688:	bd70      	pop	{r4, r5, r6, pc}
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	4a13      	ldr	r2, [pc, #76]	@ (80156dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x238>)
 801568e:	4b0f      	ldr	r3, [pc, #60]	@ (80156cc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 8015690:	e7cb      	b.n	801562a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x186>
 8015692:	bf00      	nop
 8015694:	2000e220 	andcs	lr, r0, r0, lsr #4
 8015698:	0801f0ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, ip, sp, lr, pc}
 801569c:	0801bb80 	stmdaeq	r1, {r7, r8, r9, fp, ip, sp, pc}
 80156a0:	2000e200 	andcs	lr, r0, r0, lsl #4
 80156a4:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 80156a8:	0801f0c5 	stmdaeq	r1, {r0, r2, r6, r7, ip, sp, lr, pc}
 80156ac:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 80156b0:	0801f0b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, ip, sp, lr, pc}
 80156b4:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}
 80156b8:	0801bb8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, fp, ip, sp, pc}
 80156bc:	0801f0aa 	stmdaeq	r1, {r1, r3, r5, r7, ip, sp, lr, pc}
 80156c0:	0801f0a1 	stmdaeq	r1, {r0, r5, r7, ip, sp, lr, pc}
 80156c4:	0801f091 	stmdaeq	r1, {r0, r4, r7, ip, sp, lr, pc}
 80156c8:	0801b2dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, ip, sp, pc}
 80156cc:	0801f088 	stmdaeq	r1, {r3, r7, ip, sp, lr, pc}
 80156d0:	0801b2d1 	stmdaeq	r1, {r0, r4, r6, r7, r9, ip, sp, pc}
 80156d4:	0801bb97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, r9, fp, ip, sp, pc}
 80156d8:	0801f07d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, ip, sp, lr, pc}
 80156dc:	0801b2dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, ip, sp, pc}

080156e0 <net::phy_customized_led()>:
 80156e0:	4770      	bx	lr

080156e2 <net::phy_customized_timing()>:
 80156e2:	4770      	bx	lr

080156e4 <emac_adjust_link(net::PhyStatus)>:
 80156e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80156e6:	ac04      	add	r4, sp, #16
 80156e8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80156ec:	460c      	mov	r4, r1
 80156ee:	4b14      	ldr	r3, [pc, #80]	@ (8015740 <emac_adjust_link(net::PhyStatus)+0x5c>)
 80156f0:	4914      	ldr	r1, [pc, #80]	@ (8015744 <emac_adjust_link(net::PhyStatus)+0x60>)
 80156f2:	2a00      	cmp	r2, #0
 80156f4:	4615      	mov	r5, r2
 80156f6:	4606      	mov	r6, r0
 80156f8:	bf14      	ite	ne
 80156fa:	2264      	movne	r2, #100	@ 0x64
 80156fc:	220a      	moveq	r2, #10
 80156fe:	4812      	ldr	r0, [pc, #72]	@ (8015748 <emac_adjust_link(net::PhyStatus)+0x64>)
 8015700:	2c00      	cmp	r4, #0
 8015702:	bf18      	it	ne
 8015704:	460b      	movne	r3, r1
 8015706:	4911      	ldr	r1, [pc, #68]	@ (801574c <emac_adjust_link(net::PhyStatus)+0x68>)
 8015708:	2e01      	cmp	r6, #1
 801570a:	bf08      	it	eq
 801570c:	4601      	moveq	r1, r0
 801570e:	4810      	ldr	r0, [pc, #64]	@ (8015750 <emac_adjust_link(net::PhyStatus)+0x6c>)
 8015710:	f004 fef2 	bl	801a4f8 <printf>
 8015714:	2d01      	cmp	r5, #1
 8015716:	d10d      	bne.n	8015734 <emac_adjust_link(net::PhyStatus)+0x50>
 8015718:	2c01      	cmp	r4, #1
 801571a:	bf14      	ite	ne
 801571c:	f44f 4080 	movne.w	r0, #16384	@ 0x4000
 8015720:	f44f 4090 	moveq.w	r0, #18432	@ 0x4800
 8015724:	2210      	movs	r2, #16
 8015726:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801572a:	b004      	add	sp, #16
 801572c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015730:	f002 bee4 	b.w	80184fc <enet_init>
 8015734:	1e63      	subs	r3, r4, #1
 8015736:	4258      	negs	r0, r3
 8015738:	4158      	adcs	r0, r3
 801573a:	02c0      	lsls	r0, r0, #11
 801573c:	e7f2      	b.n	8015724 <emac_adjust_link(net::PhyStatus)+0x40>
 801573e:	bf00      	nop
 8015740:	0801bbcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, r9, fp, ip, sp, pc}
 8015744:	0801bbd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, fp, ip, sp, pc}
 8015748:	0801bbc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, fp, ip, sp, pc}
 801574c:	0801bbca 	stmdaeq	r1, {r1, r3, r6, r7, r8, r9, fp, ip, sp, pc}
 8015750:	0801bbd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, ip, sp, pc}

08015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>:
 8015754:	b508      	push	{r3, lr}
 8015756:	4613      	mov	r3, r2
 8015758:	b28a      	uxth	r2, r1
 801575a:	b281      	uxth	r1, r0
 801575c:	2000      	movs	r0, #0
 801575e:	f002 fea3 	bl	80184a8 <enet_phy_write_read>
 8015762:	1e43      	subs	r3, r0, #1
 8015764:	4258      	negs	r0, r3
 8015766:	4158      	adcs	r0, r3
 8015768:	bd08      	pop	{r3, pc}

0801576a <net::phy_write(unsigned long, unsigned long, unsigned short)>:
 801576a:	b507      	push	{r0, r1, r2, lr}
 801576c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015770:	f10d 0306 	add.w	r3, sp, #6
 8015774:	b28a      	uxth	r2, r1
 8015776:	b281      	uxth	r1, r0
 8015778:	2002      	movs	r0, #2
 801577a:	f002 fe95 	bl	80184a8 <enet_phy_write_read>
 801577e:	1e43      	subs	r3, r0, #1
 8015780:	4258      	negs	r0, r3
 8015782:	4158      	adcs	r0, r3
 8015784:	b003      	add	sp, #12
 8015786:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801578c <net::phy_config(unsigned long)>:
 801578c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801578e:	4e28      	ldr	r6, [pc, #160]	@ (8015830 <net::phy_config(unsigned long)+0xa4>)
 8015790:	4605      	mov	r5, r0
 8015792:	2001      	movs	r0, #1
 8015794:	6934      	ldr	r4, [r6, #16]
 8015796:	f003 f977 	bl	8018a88 <rcu_clock_freq_get>
 801579a:	4b26      	ldr	r3, [pc, #152]	@ (8015834 <net::phy_config(unsigned long)+0xa8>)
 801579c:	4a26      	ldr	r2, [pc, #152]	@ (8015838 <net::phy_config(unsigned long)+0xac>)
 801579e:	4403      	add	r3, r0
 80157a0:	4293      	cmp	r3, r2
 80157a2:	f024 041c 	bic.w	r4, r4, #28
 80157a6:	d216      	bcs.n	80157d6 <net::phy_config(unsigned long)+0x4a>
 80157a8:	f044 0408 	orr.w	r4, r4, #8
 80157ac:	6134      	str	r4, [r6, #16]
 80157ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80157b2:	2100      	movs	r1, #0
 80157b4:	4628      	mov	r0, r5
 80157b6:	f7ff ffd8 	bl	801576a <net::phy_write(unsigned long, unsigned long, unsigned short)>
 80157ba:	b330      	cbz	r0, 801580a <net::phy_config(unsigned long)+0x7e>
 80157bc:	4c1f      	ldr	r4, [pc, #124]	@ (801583c <net::phy_config(unsigned long)+0xb0>)
 80157be:	6826      	ldr	r6, [r4, #0]
 80157c0:	6823      	ldr	r3, [r4, #0]
 80157c2:	1b9b      	subs	r3, r3, r6
 80157c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80157c8:	d325      	bcc.n	8015816 <net::phy_config(unsigned long)+0x8a>
 80157ca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80157ce:	43c0      	mvns	r0, r0
 80157d0:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80157d4:	e01a      	b.n	801580c <net::phy_config(unsigned long)+0x80>
 80157d6:	4b1a      	ldr	r3, [pc, #104]	@ (8015840 <net::phy_config(unsigned long)+0xb4>)
 80157d8:	4a1a      	ldr	r2, [pc, #104]	@ (8015844 <net::phy_config(unsigned long)+0xb8>)
 80157da:	4403      	add	r3, r0
 80157dc:	4293      	cmp	r3, r2
 80157de:	d802      	bhi.n	80157e6 <net::phy_config(unsigned long)+0x5a>
 80157e0:	f044 040c 	orr.w	r4, r4, #12
 80157e4:	e7e2      	b.n	80157ac <net::phy_config(unsigned long)+0x20>
 80157e6:	4b18      	ldr	r3, [pc, #96]	@ (8015848 <net::phy_config(unsigned long)+0xbc>)
 80157e8:	4a18      	ldr	r2, [pc, #96]	@ (801584c <net::phy_config(unsigned long)+0xc0>)
 80157ea:	4403      	add	r3, r0
 80157ec:	4293      	cmp	r3, r2
 80157ee:	d3dd      	bcc.n	80157ac <net::phy_config(unsigned long)+0x20>
 80157f0:	4b17      	ldr	r3, [pc, #92]	@ (8015850 <net::phy_config(unsigned long)+0xc4>)
 80157f2:	4a18      	ldr	r2, [pc, #96]	@ (8015854 <net::phy_config(unsigned long)+0xc8>)
 80157f4:	4403      	add	r3, r0
 80157f6:	4293      	cmp	r3, r2
 80157f8:	d802      	bhi.n	8015800 <net::phy_config(unsigned long)+0x74>
 80157fa:	f044 0404 	orr.w	r4, r4, #4
 80157fe:	e7d5      	b.n	80157ac <net::phy_config(unsigned long)+0x20>
 8015800:	4b15      	ldr	r3, [pc, #84]	@ (8015858 <net::phy_config(unsigned long)+0xcc>)
 8015802:	4a16      	ldr	r2, [pc, #88]	@ (801585c <net::phy_config(unsigned long)+0xd0>)
 8015804:	4403      	add	r3, r0
 8015806:	4293      	cmp	r3, r2
 8015808:	d902      	bls.n	8015810 <net::phy_config(unsigned long)+0x84>
 801580a:	2000      	movs	r0, #0
 801580c:	b002      	add	sp, #8
 801580e:	bd70      	pop	{r4, r5, r6, pc}
 8015810:	f044 0410 	orr.w	r4, r4, #16
 8015814:	e7ca      	b.n	80157ac <net::phy_config(unsigned long)+0x20>
 8015816:	f10d 0206 	add.w	r2, sp, #6
 801581a:	2100      	movs	r1, #0
 801581c:	4628      	mov	r0, r5
 801581e:	f7ff ff99 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8015822:	2800      	cmp	r0, #0
 8015824:	d0f1      	beq.n	801580a <net::phy_config(unsigned long)+0x7e>
 8015826:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801582a:	2b00      	cmp	r3, #0
 801582c:	dbc8      	blt.n	80157c0 <net::phy_config(unsigned long)+0x34>
 801582e:	e7ed      	b.n	801580c <net::phy_config(unsigned long)+0x80>
 8015830:	40028000 	andmi	r8, r2, r0
 8015834:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8015838:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 801583c:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8015840:	fde9f140 	stc2l	1, cr15, [r9, #256]!	@ 0x100
 8015844:	017d783f 	cmneq	sp, pc, lsr r8
 8015848:	fc6c7900 	stc2l	9, cr7, [ip], #-0	@ <UNPREDICTABLE>
 801584c:	02625a00 	rsbeq	r5, r2, #0, 20
 8015850:	fa0a1f00 	blx	829d458 <_sidata+0x27dc88>
 8015854:	02faf07f 	rscseq	pc, sl, #127	@ 0x7f
 8015858:	f70f2e80 			@ <UNDEFINED> instruction: 0xf70f2e80
 801585c:	055d4a80 	ldrbeq	r4, [sp, #-2688]	@ 0xfffff580

08015860 <enet_gpio_config()>:
 8015860:	b510      	push	{r4, lr}
 8015862:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015866:	f003 f8d3 	bl	8018a10 <rcu_periph_clock_enable>
 801586a:	f640 4001 	movw	r0, #3073	@ 0xc01
 801586e:	4c68      	ldr	r4, [pc, #416]	@ (8015a10 <enet_gpio_config()+0x1b0>)
 8015870:	f003 f8ce 	bl	8018a10 <rcu_periph_clock_enable>
 8015874:	f640 4002 	movw	r0, #3074	@ 0xc02
 8015878:	f003 f8ca 	bl	8018a10 <rcu_periph_clock_enable>
 801587c:	f241 100e 	movw	r0, #4366	@ 0x110e
 8015880:	f003 f8c6 	bl	8018a10 <rcu_periph_clock_enable>
 8015884:	4620      	mov	r0, r4
 8015886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801588a:	2100      	movs	r1, #0
 801588c:	f003 f87c 	bl	8018988 <gpio_af_set>
 8015890:	4620      	mov	r0, r4
 8015892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015896:	2200      	movs	r2, #0
 8015898:	2102      	movs	r1, #2
 801589a:	f003 f837 	bl	801890c <gpio_mode_set>
 801589e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80158a2:	2203      	movs	r2, #3
 80158a4:	4620      	mov	r0, r4
 80158a6:	2100      	movs	r1, #0
 80158a8:	f003 f852 	bl	8018950 <gpio_output_options_set>
 80158ac:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 80158b0:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 80158b4:	f003 f8cc 	bl	8018a50 <rcu_ckout0_config>
 80158b8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80158bc:	f003 f958 	bl	8018b70 <syscfg_enet_phy_interface_config>
 80158c0:	2302      	movs	r3, #2
 80158c2:	4619      	mov	r1, r3
 80158c4:	4620      	mov	r0, r4
 80158c6:	2200      	movs	r2, #0
 80158c8:	f003 f820 	bl	801890c <gpio_mode_set>
 80158cc:	4620      	mov	r0, r4
 80158ce:	2302      	movs	r3, #2
 80158d0:	2203      	movs	r2, #3
 80158d2:	2100      	movs	r1, #0
 80158d4:	f003 f83c 	bl	8018950 <gpio_output_options_set>
 80158d8:	4620      	mov	r0, r4
 80158da:	2304      	movs	r3, #4
 80158dc:	2200      	movs	r2, #0
 80158de:	2102      	movs	r1, #2
 80158e0:	f003 f814 	bl	801890c <gpio_mode_set>
 80158e4:	4620      	mov	r0, r4
 80158e6:	2304      	movs	r3, #4
 80158e8:	2203      	movs	r2, #3
 80158ea:	2100      	movs	r1, #0
 80158ec:	f003 f830 	bl	8018950 <gpio_output_options_set>
 80158f0:	4620      	mov	r0, r4
 80158f2:	2380      	movs	r3, #128	@ 0x80
 80158f4:	2200      	movs	r2, #0
 80158f6:	2102      	movs	r1, #2
 80158f8:	f003 f808 	bl	801890c <gpio_mode_set>
 80158fc:	2380      	movs	r3, #128	@ 0x80
 80158fe:	4620      	mov	r0, r4
 8015900:	2203      	movs	r2, #3
 8015902:	2100      	movs	r1, #0
 8015904:	f003 f824 	bl	8018950 <gpio_output_options_set>
 8015908:	4620      	mov	r0, r4
 801590a:	2202      	movs	r2, #2
 801590c:	210b      	movs	r1, #11
 801590e:	f003 f83b 	bl	8018988 <gpio_af_set>
 8015912:	4620      	mov	r0, r4
 8015914:	2204      	movs	r2, #4
 8015916:	210b      	movs	r1, #11
 8015918:	f003 f836 	bl	8018988 <gpio_af_set>
 801591c:	4620      	mov	r0, r4
 801591e:	2280      	movs	r2, #128	@ 0x80
 8015920:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8015924:	210b      	movs	r1, #11
 8015926:	f003 f82f 	bl	8018988 <gpio_af_set>
 801592a:	4620      	mov	r0, r4
 801592c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015930:	2200      	movs	r2, #0
 8015932:	2102      	movs	r1, #2
 8015934:	f002 ffea 	bl	801890c <gpio_mode_set>
 8015938:	4620      	mov	r0, r4
 801593a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801593e:	2203      	movs	r2, #3
 8015940:	2100      	movs	r1, #0
 8015942:	f003 f805 	bl	8018950 <gpio_output_options_set>
 8015946:	4620      	mov	r0, r4
 8015948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801594c:	2200      	movs	r2, #0
 801594e:	2102      	movs	r1, #2
 8015950:	f002 ffdc 	bl	801890c <gpio_mode_set>
 8015954:	4620      	mov	r0, r4
 8015956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801595a:	2203      	movs	r2, #3
 801595c:	2100      	movs	r1, #0
 801595e:	f002 fff7 	bl	8018950 <gpio_output_options_set>
 8015962:	4620      	mov	r0, r4
 8015964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8015968:	2200      	movs	r2, #0
 801596a:	2102      	movs	r1, #2
 801596c:	f002 ffce 	bl	801890c <gpio_mode_set>
 8015970:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015974:	4620      	mov	r0, r4
 8015976:	2203      	movs	r2, #3
 8015978:	2100      	movs	r1, #0
 801597a:	f002 ffe9 	bl	8018950 <gpio_output_options_set>
 801597e:	4620      	mov	r0, r4
 8015980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015984:	210b      	movs	r1, #11
 8015986:	f002 ffff 	bl	8018988 <gpio_af_set>
 801598a:	4620      	mov	r0, r4
 801598c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015990:	210b      	movs	r1, #11
 8015992:	f002 fff9 	bl	8018988 <gpio_af_set>
 8015996:	4620      	mov	r0, r4
 8015998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801599c:	210b      	movs	r1, #11
 801599e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80159a2:	f002 fff1 	bl	8018988 <gpio_af_set>
 80159a6:	2302      	movs	r3, #2
 80159a8:	4619      	mov	r1, r3
 80159aa:	4620      	mov	r0, r4
 80159ac:	2200      	movs	r2, #0
 80159ae:	f002 ffad 	bl	801890c <gpio_mode_set>
 80159b2:	4620      	mov	r0, r4
 80159b4:	2302      	movs	r3, #2
 80159b6:	2203      	movs	r2, #3
 80159b8:	2100      	movs	r1, #0
 80159ba:	f002 ffc9 	bl	8018950 <gpio_output_options_set>
 80159be:	4620      	mov	r0, r4
 80159c0:	2310      	movs	r3, #16
 80159c2:	2200      	movs	r2, #0
 80159c4:	2102      	movs	r1, #2
 80159c6:	f002 ffa1 	bl	801890c <gpio_mode_set>
 80159ca:	4620      	mov	r0, r4
 80159cc:	2310      	movs	r3, #16
 80159ce:	2203      	movs	r2, #3
 80159d0:	2100      	movs	r1, #0
 80159d2:	f002 ffbd 	bl	8018950 <gpio_output_options_set>
 80159d6:	4620      	mov	r0, r4
 80159d8:	2320      	movs	r3, #32
 80159da:	2200      	movs	r2, #0
 80159dc:	2102      	movs	r1, #2
 80159de:	f002 ff95 	bl	801890c <gpio_mode_set>
 80159e2:	2320      	movs	r3, #32
 80159e4:	4620      	mov	r0, r4
 80159e6:	2203      	movs	r2, #3
 80159e8:	2100      	movs	r1, #0
 80159ea:	f002 ffb1 	bl	8018950 <gpio_output_options_set>
 80159ee:	4620      	mov	r0, r4
 80159f0:	2202      	movs	r2, #2
 80159f2:	210b      	movs	r1, #11
 80159f4:	f002 ffc8 	bl	8018988 <gpio_af_set>
 80159f8:	4620      	mov	r0, r4
 80159fa:	2210      	movs	r2, #16
 80159fc:	210b      	movs	r1, #11
 80159fe:	f002 ffc3 	bl	8018988 <gpio_af_set>
 8015a02:	4620      	mov	r0, r4
 8015a04:	2220      	movs	r2, #32
 8015a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a0a:	210b      	movs	r1, #11
 8015a0c:	f002 bfbc 	b.w	8018988 <gpio_af_set>
 8015a10:	40020000 	andmi	r0, r2, r0

08015a14 <emac_eth_recv(unsigned char**)>:
 8015a14:	b538      	push	{r3, r4, r5, lr}
 8015a16:	4d07      	ldr	r5, [pc, #28]	@ (8015a34 <emac_eth_recv(unsigned char**)+0x20>)
 8015a18:	4604      	mov	r4, r0
 8015a1a:	2102      	movs	r1, #2
 8015a1c:	6828      	ldr	r0, [r5, #0]
 8015a1e:	f002 feef 	bl	8018800 <enet_desc_information_get>
 8015a22:	b118      	cbz	r0, 8015a2c <emac_eth_recv(unsigned char**)+0x18>
 8015a24:	682b      	ldr	r3, [r5, #0]
 8015a26:	689b      	ldr	r3, [r3, #8]
 8015a28:	6023      	str	r3, [r4, #0]
 8015a2a:	bd38      	pop	{r3, r4, r5, pc}
 8015a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015a30:	bd38      	pop	{r3, r4, r5, pc}
 8015a32:	bf00      	nop
 8015a34:	2000e420 	andcs	lr, r0, r0, lsr #8

08015a38 <emac_free_pkt()>:
 8015a38:	490d      	ldr	r1, [pc, #52]	@ (8015a70 <emac_free_pkt()+0x38>)
 8015a3a:	e001      	b.n	8015a40 <emac_free_pkt()+0x8>
 8015a3c:	f3bf 8f5f 	dmb	sy
 8015a40:	680b      	ldr	r3, [r1, #0]
 8015a42:	681a      	ldr	r2, [r3, #0]
 8015a44:	2a00      	cmp	r2, #0
 8015a46:	dbf9      	blt.n	8015a3c <emac_free_pkt()+0x4>
 8015a48:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8015a4c:	4a09      	ldr	r2, [pc, #36]	@ (8015a74 <emac_free_pkt()+0x3c>)
 8015a4e:	6018      	str	r0, [r3, #0]
 8015a50:	6950      	ldr	r0, [r2, #20]
 8015a52:	0600      	lsls	r0, r0, #24
 8015a54:	d509      	bpl.n	8015a6a <emac_free_pkt()+0x32>
 8015a56:	b410      	push	{r4}
 8015a58:	2000      	movs	r0, #0
 8015a5a:	2480      	movs	r4, #128	@ 0x80
 8015a5c:	6154      	str	r4, [r2, #20]
 8015a5e:	6090      	str	r0, [r2, #8]
 8015a60:	68db      	ldr	r3, [r3, #12]
 8015a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a66:	600b      	str	r3, [r1, #0]
 8015a68:	4770      	bx	lr
 8015a6a:	68db      	ldr	r3, [r3, #12]
 8015a6c:	600b      	str	r3, [r1, #0]
 8015a6e:	4770      	bx	lr
 8015a70:	2000e420 	andcs	lr, r0, r0, lsr #8
 8015a74:	40029000 	andmi	r9, r2, r0

08015a78 <emac_eth_send(void*, unsigned long)>:
 8015a78:	b570      	push	{r4, r5, r6, lr}
 8015a7a:	4c20      	ldr	r4, [pc, #128]	@ (8015afc <emac_eth_send(void*, unsigned long)+0x84>)
 8015a7c:	e001      	b.n	8015a82 <emac_eth_send(void*, unsigned long)+0xa>
 8015a7e:	f3bf 8f5f 	dmb	sy
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	681a      	ldr	r2, [r3, #0]
 8015a86:	2a00      	cmp	r2, #0
 8015a88:	dbf9      	blt.n	8015a7e <emac_eth_send(void*, unsigned long)+0x6>
 8015a8a:	689b      	ldr	r3, [r3, #8]
 8015a8c:	ea43 0200 	orr.w	r2, r3, r0
 8015a90:	0792      	lsls	r2, r2, #30
 8015a92:	d01e      	beq.n	8015ad2 <emac_eth_send(void*, unsigned long)+0x5a>
 8015a94:	460a      	mov	r2, r1
 8015a96:	eb00 0c02 	add.w	ip, r0, r2
 8015a9a:	b12a      	cbz	r2, 8015aa8 <emac_eth_send(void*, unsigned long)+0x30>
 8015a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015aa0:	f803 2b01 	strb.w	r2, [r3], #1
 8015aa4:	4584      	cmp	ip, r0
 8015aa6:	d1f9      	bne.n	8015a9c <emac_eth_send(void*, unsigned long)+0x24>
 8015aa8:	6822      	ldr	r2, [r4, #0]
 8015aaa:	4815      	ldr	r0, [pc, #84]	@ (8015b00 <emac_eth_send(void*, unsigned long)+0x88>)
 8015aac:	6813      	ldr	r3, [r2, #0]
 8015aae:	6051      	str	r1, [r2, #4]
 8015ab0:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 8015ab4:	6013      	str	r3, [r2, #0]
 8015ab6:	6943      	ldr	r3, [r0, #20]
 8015ab8:	6941      	ldr	r1, [r0, #20]
 8015aba:	f003 0304 	and.w	r3, r3, #4
 8015abe:	f001 0120 	and.w	r1, r1, #32
 8015ac2:	430b      	orrs	r3, r1
 8015ac4:	d002      	beq.n	8015acc <emac_eth_send(void*, unsigned long)+0x54>
 8015ac6:	2100      	movs	r1, #0
 8015ac8:	6143      	str	r3, [r0, #20]
 8015aca:	6041      	str	r1, [r0, #4]
 8015acc:	68d3      	ldr	r3, [r2, #12]
 8015ace:	6023      	str	r3, [r4, #0]
 8015ad0:	bd70      	pop	{r4, r5, r6, pc}
 8015ad2:	2903      	cmp	r1, #3
 8015ad4:	d9de      	bls.n	8015a94 <emac_eth_send(void*, unsigned long)+0x1c>
 8015ad6:	1f0e      	subs	r6, r1, #4
 8015ad8:	f026 0603 	bic.w	r6, r6, #3
 8015adc:	3604      	adds	r6, #4
 8015ade:	eb00 0c06 	add.w	ip, r0, r6
 8015ae2:	eba3 0e00 	sub.w	lr, r3, r0
 8015ae6:	eb00 020e 	add.w	r2, r0, lr
 8015aea:	f850 5b04 	ldr.w	r5, [r0], #4
 8015aee:	6015      	str	r5, [r2, #0]
 8015af0:	4560      	cmp	r0, ip
 8015af2:	d1f8      	bne.n	8015ae6 <emac_eth_send(void*, unsigned long)+0x6e>
 8015af4:	4433      	add	r3, r6
 8015af6:	f001 0203 	and.w	r2, r1, #3
 8015afa:	e7cc      	b.n	8015a96 <emac_eth_send(void*, unsigned long)+0x1e>
 8015afc:	2000e424 	andcs	lr, r0, r4, lsr #8
 8015b00:	40029000 	andmi	r9, r2, r0

08015b04 <net::acd_start(net::acd::Acd*, net::ip_addr)>:
 8015b04:	2301      	movs	r3, #1
 8015b06:	b510      	push	{r4, lr}
 8015b08:	7103      	strb	r3, [r0, #4]
 8015b0a:	6001      	str	r1, [r0, #0]
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	f004 fd51 	bl	801a5b4 <random>
 8015b12:	230a      	movs	r3, #10
 8015b14:	fbb0 f2f3 	udiv	r2, r0, r3
 8015b18:	fb02 0013 	mls	r0, r2, r3, r0
 8015b1c:	4b11      	ldr	r3, [pc, #68]	@ (8015b64 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x60>)
 8015b1e:	81a0      	strh	r0, [r4, #12]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8015b26:	2807      	cmp	r0, #7
 8015b28:	d907      	bls.n	8015b3a <net::acd_start(net::acd::Acd*, net::ip_addr)+0x36>
 8015b2a:	480f      	ldr	r0, [pc, #60]	@ (8015b68 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x64>)
 8015b2c:	f002 f9ec 	bl	8017f08 <console_error>
 8015b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015b34:	4b0d      	ldr	r3, [pc, #52]	@ (8015b6c <net::acd_start(net::acd::Acd*, net::ip_addr)+0x68>)
 8015b36:	601a      	str	r2, [r3, #0]
 8015b38:	bd10      	pop	{r4, pc}
 8015b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8015b70 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x6c>)
 8015b3c:	6811      	ldr	r1, [r2, #0]
 8015b3e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8015b42:	1c54      	adds	r4, r2, #1
 8015b44:	f8c3 40a4 	str.w	r4, [r3, #164]	@ 0xa4
 8015b48:	1c44      	adds	r4, r0, #1
 8015b4a:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
 8015b4e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8015b52:	3164      	adds	r1, #100	@ 0x64
 8015b54:	6219      	str	r1, [r3, #32]
 8015b56:	2164      	movs	r1, #100	@ 0x64
 8015b58:	e9c3 1209 	strd	r1, r2, [r3, #36]	@ 0x24
 8015b5c:	4905      	ldr	r1, [pc, #20]	@ (8015b74 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x70>)
 8015b5e:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8015b60:	e7e8      	b.n	8015b34 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x30>
 8015b62:	bf00      	nop
 8015b64:	2000e3d0 	ldrdcs	lr, [r0], -r0
 8015b68:	0801bb6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 8015b6c:	2000e24c 	andcs	lr, r0, ip, asr #4
 8015b70:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8015b74:	08015bd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, fp, ip, lr}

08015b78 <net::acd_stop(net::acd::Acd*)>:
 8015b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b7a:	4e13      	ldr	r6, [pc, #76]	@ (8015bc8 <net::acd_stop(net::acd::Acd*)+0x50>)
 8015b7c:	6832      	ldr	r2, [r6, #0]
 8015b7e:	2300      	movs	r3, #0
 8015b80:	429a      	cmp	r2, r3
 8015b82:	7103      	strb	r3, [r0, #4]
 8015b84:	db1a      	blt.n	8015bbc <net::acd_stop(net::acd::Acd*)+0x44>
 8015b86:	4911      	ldr	r1, [pc, #68]	@ (8015bcc <net::acd_stop(net::acd::Acd*)+0x54>)
 8015b88:	680d      	ldr	r5, [r1, #0]
 8015b8a:	f8d5 40a0 	ldr.w	r4, [r5, #160]	@ 0xa0
 8015b8e:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 8015b92:	42a3      	cmp	r3, r4
 8015b94:	d012      	beq.n	8015bbc <net::acd_stop(net::acd::Acd*)+0x44>
 8015b96:	0118      	lsls	r0, r3, #4
 8015b98:	580f      	ldr	r7, [r1, r0]
 8015b9a:	42ba      	cmp	r2, r7
 8015b9c:	d112      	bne.n	8015bc4 <net::acd_stop(net::acd::Acd*)+0x4c>
 8015b9e:	3c01      	subs	r4, #1
 8015ba0:	1ae2      	subs	r2, r4, r3
 8015ba2:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8015ba6:	0112      	lsls	r2, r2, #4
 8015ba8:	3020      	adds	r0, #32
 8015baa:	42a3      	cmp	r3, r4
 8015bac:	bf88      	it	hi
 8015bae:	2200      	movhi	r2, #0
 8015bb0:	4429      	add	r1, r5
 8015bb2:	4428      	add	r0, r5
 8015bb4:	f004 f9a5 	bl	8019f02 <memmove>
 8015bb8:	f8c5 40a0 	str.w	r4, [r5, #160]	@ 0xa0
 8015bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015bc0:	6033      	str	r3, [r6, #0]
 8015bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	e7e4      	b.n	8015b92 <net::acd_stop(net::acd::Acd*)+0x1a>
 8015bc8:	2000e24c 	andcs	lr, r0, ip, asr #4
 8015bcc:	2000e3d0 	ldrdcs	lr, [r0], -r0

08015bd0 <net::acd_timer()>:
 8015bd0:	b510      	push	{r4, lr}
 8015bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8015c80 <net::acd_timer()+0xb0>)
 8015bd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015bd6:	79a3      	ldrb	r3, [r4, #6]
 8015bd8:	b10b      	cbz	r3, 8015bde <net::acd_timer()+0xe>
 8015bda:	3b01      	subs	r3, #1
 8015bdc:	71a3      	strb	r3, [r4, #6]
 8015bde:	89a3      	ldrh	r3, [r4, #12]
 8015be0:	b10b      	cbz	r3, 8015be6 <net::acd_timer()+0x16>
 8015be2:	3b01      	subs	r3, #1
 8015be4:	81a3      	strh	r3, [r4, #12]
 8015be6:	7923      	ldrb	r3, [r4, #4]
 8015be8:	2b04      	cmp	r3, #4
 8015bea:	d805      	bhi.n	8015bf8 <net::acd_timer()+0x28>
 8015bec:	2b02      	cmp	r3, #2
 8015bee:	d82b      	bhi.n	8015c48 <net::acd_timer()+0x78>
 8015bf0:	3b01      	subs	r3, #1
 8015bf2:	2b01      	cmp	r3, #1
 8015bf4:	d90b      	bls.n	8015c0e <net::acd_timer()+0x3e>
 8015bf6:	bd10      	pop	{r4, pc}
 8015bf8:	2b07      	cmp	r3, #7
 8015bfa:	d1fc      	bne.n	8015bf6 <net::acd_timer()+0x26>
 8015bfc:	89a3      	ldrh	r3, [r4, #12]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d1f9      	bne.n	8015bf6 <net::acd_timer()+0x26>
 8015c02:	4620      	mov	r0, r4
 8015c04:	f7ff ffb8 	bl	8015b78 <net::acd_stop(net::acd::Acd*)>
 8015c08:	68a3      	ldr	r3, [r4, #8]
 8015c0a:	2001      	movs	r0, #1
 8015c0c:	e034      	b.n	8015c78 <net::acd_timer()+0xa8>
 8015c0e:	89a3      	ldrh	r3, [r4, #12]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d1f0      	bne.n	8015bf6 <net::acd_timer()+0x26>
 8015c14:	2302      	movs	r3, #2
 8015c16:	7123      	strb	r3, [r4, #4]
 8015c18:	6820      	ldr	r0, [r4, #0]
 8015c1a:	f000 f9df 	bl	8015fdc <net::arp_acd_probe(net::ip_addr)>
 8015c1e:	7963      	ldrb	r3, [r4, #5]
 8015c20:	3301      	adds	r3, #1
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	2b02      	cmp	r3, #2
 8015c26:	7163      	strb	r3, [r4, #5]
 8015c28:	d904      	bls.n	8015c34 <net::acd_timer()+0x64>
 8015c2a:	2303      	movs	r3, #3
 8015c2c:	80a3      	strh	r3, [r4, #4]
 8015c2e:	2314      	movs	r3, #20
 8015c30:	81a3      	strh	r3, [r4, #12]
 8015c32:	e7e0      	b.n	8015bf6 <net::acd_timer()+0x26>
 8015c34:	f004 fcbe 	bl	801a5b4 <random>
 8015c38:	230a      	movs	r3, #10
 8015c3a:	fbb0 f2f3 	udiv	r2, r0, r3
 8015c3e:	fb02 0013 	mls	r0, r2, r3, r0
 8015c42:	4418      	add	r0, r3
 8015c44:	81a0      	strh	r0, [r4, #12]
 8015c46:	e7d6      	b.n	8015bf6 <net::acd_timer()+0x26>
 8015c48:	89a3      	ldrh	r3, [r4, #12]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d1d3      	bne.n	8015bf6 <net::acd_timer()+0x26>
 8015c4e:	7963      	ldrb	r3, [r4, #5]
 8015c50:	b913      	cbnz	r3, 8015c58 <net::acd_timer()+0x88>
 8015c52:	2204      	movs	r2, #4
 8015c54:	7122      	strb	r2, [r4, #4]
 8015c56:	71e3      	strb	r3, [r4, #7]
 8015c58:	6820      	ldr	r0, [r4, #0]
 8015c5a:	f000 f9d3 	bl	8016004 <net::arp_acd_send_announcement(net::ip_addr)>
 8015c5e:	2314      	movs	r3, #20
 8015c60:	81a3      	strh	r3, [r4, #12]
 8015c62:	7963      	ldrb	r3, [r4, #5]
 8015c64:	3301      	adds	r3, #1
 8015c66:	b2db      	uxtb	r3, r3
 8015c68:	2b01      	cmp	r3, #1
 8015c6a:	7163      	strb	r3, [r4, #5]
 8015c6c:	d9c3      	bls.n	8015bf6 <net::acd_timer()+0x26>
 8015c6e:	2305      	movs	r3, #5
 8015c70:	80a3      	strh	r3, [r4, #4]
 8015c72:	2000      	movs	r0, #0
 8015c74:	68a3      	ldr	r3, [r4, #8]
 8015c76:	81a0      	strh	r0, [r4, #12]
 8015c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c7c:	4718      	bx	r3
 8015c7e:	bf00      	nop
 8015c80:	2000e220 	andcs	lr, r0, r0, lsr #4

08015c84 <net::acd_restart(net::acd::Acd*)>:
 8015c84:	b510      	push	{r4, lr}
 8015c86:	79c3      	ldrb	r3, [r0, #7]
 8015c88:	4604      	mov	r4, r0
 8015c8a:	3301      	adds	r3, #1
 8015c8c:	71c3      	strb	r3, [r0, #7]
 8015c8e:	6883      	ldr	r3, [r0, #8]
 8015c90:	2002      	movs	r0, #2
 8015c92:	4798      	blx	r3
 8015c94:	79e3      	ldrb	r3, [r4, #7]
 8015c96:	2b09      	cmp	r3, #9
 8015c98:	d905      	bls.n	8015ca6 <net::acd_restart(net::acd::Acd*)+0x22>
 8015c9a:	2307      	movs	r3, #7
 8015c9c:	7123      	strb	r3, [r4, #4]
 8015c9e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8015ca2:	81a3      	strh	r3, [r4, #12]
 8015ca4:	bd10      	pop	{r4, pc}
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	f7ff ff66 	bl	8015b78 <net::acd_stop(net::acd::Acd*)>
 8015cac:	68a3      	ldr	r3, [r4, #8]
 8015cae:	2001      	movs	r0, #1
 8015cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cb4:	4718      	bx	r3
	...

08015cb8 <net::acd_network_changed_link_down()>:
 8015cb8:	4b01      	ldr	r3, [pc, #4]	@ (8015cc0 <net::acd_network_changed_link_down()+0x8>)
 8015cba:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015cbc:	f7ff bf5c 	b.w	8015b78 <net::acd_stop(net::acd::Acd*)>
 8015cc0:	2000e220 	andcs	lr, r0, r0, lsr #4

08015cc4 <net::acd_arp_reply(t_arp*)>:
 8015cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cc8:	4e28      	ldr	r6, [pc, #160]	@ (8015d6c <net::acd_arp_reply(t_arp*)+0xa8>)
 8015cca:	6a75      	ldr	r5, [r6, #36]	@ 0x24
 8015ccc:	792f      	ldrb	r7, [r5, #4]
 8015cce:	2f03      	cmp	r7, #3
 8015cd0:	4604      	mov	r4, r0
 8015cd2:	d802      	bhi.n	8015cda <net::acd_arp_reply(t_arp*)+0x16>
 8015cd4:	b9bf      	cbnz	r7, 8015d06 <net::acd_arp_reply(t_arp*)+0x42>
 8015cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cda:	1f3b      	subs	r3, r7, #4
 8015cdc:	2b02      	cmp	r3, #2
 8015cde:	d8fa      	bhi.n	8015cd6 <net::acd_arp_reply(t_arp*)+0x12>
 8015ce0:	301c      	adds	r0, #28
 8015ce2:	f7fe fb8b 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8015ce6:	682b      	ldr	r3, [r5, #0]
 8015ce8:	4298      	cmp	r0, r3
 8015cea:	d1f4      	bne.n	8015cd6 <net::acd_arp_reply(t_arp*)+0x12>
 8015cec:	f104 0315 	add.w	r3, r4, #21
 8015cf0:	3613      	adds	r6, #19
 8015cf2:	341b      	adds	r4, #27
 8015cf4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015cf8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8015cfc:	4291      	cmp	r1, r2
 8015cfe:	d121      	bne.n	8015d44 <net::acd_arp_reply(t_arp*)+0x80>
 8015d00:	42a3      	cmp	r3, r4
 8015d02:	d1f7      	bne.n	8015cf4 <net::acd_arp_reply(t_arp*)+0x30>
 8015d04:	e7e7      	b.n	8015cd6 <net::acd_arp_reply(t_arp*)+0x12>
 8015d06:	301c      	adds	r0, #28
 8015d08:	f7fe fb78 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8015d0c:	682f      	ldr	r7, [r5, #0]
 8015d0e:	42b8      	cmp	r0, r7
 8015d10:	d013      	beq.n	8015d3a <net::acd_arp_reply(t_arp*)+0x76>
 8015d12:	2800      	cmp	r0, #0
 8015d14:	d0df      	beq.n	8015cd6 <net::acd_arp_reply(t_arp*)+0x12>
 8015d16:	f104 0026 	add.w	r0, r4, #38	@ 0x26
 8015d1a:	f7fe fb6f 	bl	80143fc <net::memcpy_ip(unsigned char const*)>
 8015d1e:	4287      	cmp	r7, r0
 8015d20:	d1d9      	bne.n	8015cd6 <net::acd_arp_reply(t_arp*)+0x12>
 8015d22:	f104 0315 	add.w	r3, r4, #21
 8015d26:	3613      	adds	r6, #19
 8015d28:	341b      	adds	r4, #27
 8015d2a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015d2e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8015d32:	4291      	cmp	r1, r2
 8015d34:	d1cf      	bne.n	8015cd6 <net::acd_arp_reply(t_arp*)+0x12>
 8015d36:	42a3      	cmp	r3, r4
 8015d38:	d1f7      	bne.n	8015d2a <net::acd_arp_reply(t_arp*)+0x66>
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d40:	f7ff bfa0 	b.w	8015c84 <net::acd_restart(net::acd::Acd*)>
 8015d44:	2f06      	cmp	r7, #6
 8015d46:	d107      	bne.n	8015d58 <net::acd_arp_reply(t_arp*)+0x94>
 8015d48:	4628      	mov	r0, r5
 8015d4a:	f7ff ff15 	bl	8015b78 <net::acd_stop(net::acd::Acd*)>
 8015d4e:	68ab      	ldr	r3, [r5, #8]
 8015d50:	2002      	movs	r0, #2
 8015d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d56:	4718      	bx	r3
 8015d58:	79ab      	ldrb	r3, [r5, #6]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d1ed      	bne.n	8015d3a <net::acd_arp_reply(t_arp*)+0x76>
 8015d5e:	6828      	ldr	r0, [r5, #0]
 8015d60:	f000 f950 	bl	8016004 <net::arp_acd_send_announcement(net::ip_addr)>
 8015d64:	2364      	movs	r3, #100	@ 0x64
 8015d66:	71ab      	strb	r3, [r5, #6]
 8015d68:	e7b5      	b.n	8015cd6 <net::acd_arp_reply(t_arp*)+0x12>
 8015d6a:	bf00      	nop
 8015d6c:	2000e220 	andcs	lr, r0, r0, lsr #4

08015d70 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>:
 8015d70:	4b01      	ldr	r3, [pc, #4]	@ (8015d78 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))+0x8>)
 8015d72:	6081      	str	r1, [r0, #8]
 8015d74:	6258      	str	r0, [r3, #36]	@ 0x24
 8015d76:	4770      	bx	lr
 8015d78:	2000e220 	andcs	lr, r0, r0, lsr #4

08015d7c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)>:
 8015d7c:	b320      	cbz	r0, 8015dc8 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x4c>
 8015d7e:	b319      	cbz	r1, 8015dc8 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x4c>
 8015d80:	4b12      	ldr	r3, [pc, #72]	@ (8015dcc <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x50>)
 8015d82:	b510      	push	{r4, lr}
 8015d84:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015d86:	6823      	ldr	r3, [r4, #0]
 8015d88:	4283      	cmp	r3, r0
 8015d8a:	d119      	bne.n	8015dc0 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	f64a 12fe 	movw	r2, #43518	@ 0xa9fe
 8015d92:	4293      	cmp	r3, r2
 8015d94:	d114      	bne.n	8015dc0 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8015d96:	b289      	uxth	r1, r1
 8015d98:	4299      	cmp	r1, r3
 8015d9a:	d011      	beq.n	8015dc0 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8015d9c:	7923      	ldrb	r3, [r4, #4]
 8015d9e:	2b05      	cmp	r3, #5
 8015da0:	d80c      	bhi.n	8015dbc <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x40>
 8015da2:	2b03      	cmp	r3, #3
 8015da4:	d80d      	bhi.n	8015dc2 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x46>
 8015da6:	3b01      	subs	r3, #1
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d809      	bhi.n	8015dc0 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8015dac:	4620      	mov	r0, r4
 8015dae:	f7ff fee3 	bl	8015b78 <net::acd_stop(net::acd::Acd*)>
 8015db2:	68a3      	ldr	r3, [r4, #8]
 8015db4:	2002      	movs	r0, #2
 8015db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dba:	4718      	bx	r3
 8015dbc:	2b07      	cmp	r3, #7
 8015dbe:	d0f5      	beq.n	8015dac <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x30>
 8015dc0:	bd10      	pop	{r4, pc}
 8015dc2:	2306      	movs	r3, #6
 8015dc4:	7123      	strb	r3, [r4, #4]
 8015dc6:	e7fb      	b.n	8015dc0 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	2000e220 	andcs	lr, r0, r0, lsr #4

08015dd0 <net::arp_find_record(unsigned long, net::arp::Flags)>:
 8015dd0:	4b17      	ldr	r3, [pc, #92]	@ (8015e30 <net::arp_find_record(unsigned long, net::arp::Flags)+0x60>)
 8015dd2:	b570      	push	{r4, r5, r6, lr}
 8015dd4:	f04f 0e00 	mov.w	lr, #0
 8015dd8:	4604      	mov	r4, r0
 8015dda:	f503 7cc0 	add.w	ip, r3, #384	@ 0x180
 8015dde:	4676      	mov	r6, lr
 8015de0:	4675      	mov	r5, lr
 8015de2:	4670      	mov	r0, lr
 8015de4:	e004      	b.n	8015df0 <net::arp_find_record(unsigned long, net::arp::Flags)+0x20>
 8015de6:	2a03      	cmp	r2, #3
 8015de8:	d019      	beq.n	8015e1e <net::arp_find_record(unsigned long, net::arp::Flags)+0x4e>
 8015dea:	3318      	adds	r3, #24
 8015dec:	4563      	cmp	r3, ip
 8015dee:	d012      	beq.n	8015e16 <net::arp_find_record(unsigned long, net::arp::Flags)+0x46>
 8015df0:	681a      	ldr	r2, [r3, #0]
 8015df2:	42a2      	cmp	r2, r4
 8015df4:	d01a      	beq.n	8015e2c <net::arp_find_record(unsigned long, net::arp::Flags)+0x5c>
 8015df6:	2901      	cmp	r1, #1
 8015df8:	d0f7      	beq.n	8015dea <net::arp_find_record(unsigned long, net::arp::Flags)+0x1a>
 8015dfa:	695a      	ldr	r2, [r3, #20]
 8015dfc:	b1aa      	cbz	r2, 8015e2a <net::arp_find_record(unsigned long, net::arp::Flags)+0x5a>
 8015dfe:	2a02      	cmp	r2, #2
 8015e00:	d1f1      	bne.n	8015de6 <net::arp_find_record(unsigned long, net::arp::Flags)+0x16>
 8015e02:	8a5a      	ldrh	r2, [r3, #18]
 8015e04:	4572      	cmp	r2, lr
 8015e06:	bf88      	it	hi
 8015e08:	461d      	movhi	r5, r3
 8015e0a:	f103 0318 	add.w	r3, r3, #24
 8015e0e:	bf88      	it	hi
 8015e10:	4696      	movhi	lr, r2
 8015e12:	4563      	cmp	r3, ip
 8015e14:	d1ec      	bne.n	8015df0 <net::arp_find_record(unsigned long, net::arp::Flags)+0x20>
 8015e16:	2800      	cmp	r0, #0
 8015e18:	bf08      	it	eq
 8015e1a:	4628      	moveq	r0, r5
 8015e1c:	bd70      	pop	{r4, r5, r6, pc}
 8015e1e:	8a5a      	ldrh	r2, [r3, #18]
 8015e20:	42b2      	cmp	r2, r6
 8015e22:	bf84      	itt	hi
 8015e24:	4616      	movhi	r6, r2
 8015e26:	4618      	movhi	r0, r3
 8015e28:	e7df      	b.n	8015dea <net::arp_find_record(unsigned long, net::arp::Flags)+0x1a>
 8015e2a:	601c      	str	r4, [r3, #0]
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	bd70      	pop	{r4, r5, r6, pc}
 8015e30:	1000cb08 	andne	ip, r0, r8, lsl #22

08015e34 <net::arp_timer()>:
 8015e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e38:	4c28      	ldr	r4, [pc, #160]	@ (8015edc <net::arp_timer()+0xa8>)
 8015e3a:	2703      	movs	r7, #3
 8015e3c:	f504 76c0 	add.w	r6, r4, #384	@ 0x180
 8015e40:	f04f 0800 	mov.w	r8, #0
 8015e44:	e006      	b.n	8015e54 <net::arp_timer()+0x20>
 8015e46:	2a01      	cmp	r2, #1
 8015e48:	d101      	bne.n	8015e4e <net::arp_timer()+0x1a>
 8015e4a:	2b02      	cmp	r3, #2
 8015e4c:	d839      	bhi.n	8015ec2 <net::arp_timer()+0x8e>
 8015e4e:	3418      	adds	r4, #24
 8015e50:	42a6      	cmp	r6, r4
 8015e52:	d02c      	beq.n	8015eae <net::arp_timer()+0x7a>
 8015e54:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8015e58:	2a00      	cmp	r2, #0
 8015e5a:	d0f8      	beq.n	8015e4e <net::arp_timer()+0x1a>
 8015e5c:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8015e60:	3301      	adds	r3, #1
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	2a02      	cmp	r2, #2
 8015e66:	f824 3c06 	strh.w	r3, [r4, #-6]
 8015e6a:	d022      	beq.n	8015eb2 <net::arp_timer()+0x7e>
 8015e6c:	2a03      	cmp	r2, #3
 8015e6e:	d1ea      	bne.n	8015e46 <net::arp_timer()+0x12>
 8015e70:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015e74:	d9eb      	bls.n	8015e4e <net::arp_timer()+0x1a>
 8015e76:	4d1a      	ldr	r5, [pc, #104]	@ (8015ee0 <net::arp_timer()+0xac>)
 8015e78:	2301      	movs	r3, #1
 8015e7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e7e:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8015e82:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
 8015e86:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8015e8a:	602b      	str	r3, [r5, #0]
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8015e92:	80ab      	strh	r3, [r5, #4]
 8015e94:	213c      	movs	r1, #60	@ 0x3c
 8015e96:	f7ff fdef 	bl	8015a78 <emac_eth_send(void*, unsigned long)>
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	1dab      	adds	r3, r5, #6
 8015e9e:	22ff      	movs	r2, #255	@ 0xff
 8015ea0:	f800 2b01 	strb.w	r2, [r0], #1
 8015ea4:	4298      	cmp	r0, r3
 8015ea6:	d1fb      	bne.n	8015ea0 <net::arp_timer()+0x6c>
 8015ea8:	3418      	adds	r4, #24
 8015eaa:	42a6      	cmp	r6, r4
 8015eac:	d1d2      	bne.n	8015e54 <net::arp_timer()+0x20>
 8015eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eb2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8015eb6:	d9ca      	bls.n	8015e4e <net::arp_timer()+0x1a>
 8015eb8:	f844 7c04 	str.w	r7, [r4, #-4]
 8015ebc:	f824 8c06 	strh.w	r8, [r4, #-6]
 8015ec0:	e7c5      	b.n	8015e4e <net::arp_timer()+0x1a>
 8015ec2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8015ec6:	b108      	cbz	r0, 8015ecc <net::arp_timer()+0x98>
 8015ec8:	f004 fd68 	bl	801a99c <operator delete[](void*)>
 8015ecc:	f1a4 0318 	sub.w	r3, r4, #24
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	f843 2b04 	str.w	r2, [r3], #4
 8015ed6:	42a3      	cmp	r3, r4
 8015ed8:	d1fb      	bne.n	8015ed2 <net::arp_timer()+0x9e>
 8015eda:	e7b8      	b.n	8015e4e <net::arp_timer()+0x1a>
 8015edc:	1000cb20 	andne	ip, r0, r0, lsr #22
 8015ee0:	2000e28c 	andcs	lr, r0, ip, lsl #5

08015ee4 <net::arp_send(t_udp*, unsigned long, unsigned long)>:
 8015ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ee6:	4b39      	ldr	r3, [pc, #228]	@ (8015fcc <net::arp_send(t_udp*, unsigned long, unsigned long)+0xe8>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	4604      	mov	r4, r0
 8015eec:	4393      	bics	r3, r2
 8015eee:	f04f 0000 	mov.w	r0, #0
 8015ef2:	4615      	mov	r5, r2
 8015ef4:	f8c4 201e 	str.w	r2, [r4, #30]
 8015ef8:	7620      	strb	r0, [r4, #24]
 8015efa:	7660      	strb	r0, [r4, #25]
 8015efc:	460e      	mov	r6, r1
 8015efe:	d15c      	bne.n	8015fba <net::arp_send(t_udp*, unsigned long, unsigned long)+0xd6>
 8015f00:	4b33      	ldr	r3, [pc, #204]	@ (8015fd0 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xec>)
 8015f02:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 8015f06:	6959      	ldr	r1, [r3, #20]
 8015f08:	2901      	cmp	r1, #1
 8015f0a:	dd02      	ble.n	8015f12 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x2e>
 8015f0c:	6819      	ldr	r1, [r3, #0]
 8015f0e:	42a9      	cmp	r1, r5
 8015f10:	d031      	beq.n	8015f76 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x92>
 8015f12:	3318      	adds	r3, #24
 8015f14:	4293      	cmp	r3, r2
 8015f16:	d1f6      	bne.n	8015f06 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x22>
 8015f18:	2100      	movs	r1, #0
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	f7ff ff58 	bl	8015dd0 <net::arp_find_record(unsigned long, net::arp::Flags)>
 8015f20:	6943      	ldr	r3, [r0, #20]
 8015f22:	4607      	mov	r7, r0
 8015f24:	b1d3      	cbz	r3, 8015f5c <net::arp_send(t_udp*, unsigned long, unsigned long)+0x78>
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d000      	beq.n	8015f2c <net::arp_send(t_udp*, unsigned long, unsigned long)+0x48>
 8015f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	b108      	cbz	r0, 8015f34 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x50>
 8015f30:	f004 fd34 	bl	801a99c <operator delete[](void*)>
 8015f34:	4630      	mov	r0, r6
 8015f36:	f004 fd37 	bl	801a9a8 <operator new[](unsigned int)>
 8015f3a:	ea44 0200 	orr.w	r2, r4, r0
 8015f3e:	0792      	lsls	r2, r2, #30
 8015f40:	4603      	mov	r3, r0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	d027      	beq.n	8015f96 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xb2>
 8015f46:	4631      	mov	r1, r6
 8015f48:	b131      	cbz	r1, 8015f58 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x74>
 8015f4a:	4421      	add	r1, r4
 8015f4c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8015f50:	f803 2b01 	strb.w	r2, [r3], #1
 8015f54:	428c      	cmp	r4, r1
 8015f56:	d1f9      	bne.n	8015f4c <net::arp_send(t_udp*, unsigned long, unsigned long)+0x68>
 8015f58:	60be      	str	r6, [r7, #8]
 8015f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f5c:	8243      	strh	r3, [r0, #18]
 8015f5e:	2301      	movs	r3, #1
 8015f60:	481c      	ldr	r0, [pc, #112]	@ (8015fd4 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xf0>)
 8015f62:	617b      	str	r3, [r7, #20]
 8015f64:	213c      	movs	r1, #60	@ 0x3c
 8015f66:	f8c0 5026 	str.w	r5, [r0, #38]	@ 0x26
 8015f6a:	f7ff fd85 	bl	8015a78 <emac_eth_send(void*, unsigned long)>
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d1da      	bne.n	8015f2a <net::arp_send(t_udp*, unsigned long, unsigned long)+0x46>
 8015f74:	e7da      	b.n	8015f2c <net::arp_send(t_udp*, unsigned long, unsigned long)+0x48>
 8015f76:	f103 020c 	add.w	r2, r3, #12
 8015f7a:	4621      	mov	r1, r4
 8015f7c:	3312      	adds	r3, #18
 8015f7e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015f82:	f801 0b01 	strb.w	r0, [r1], #1
 8015f86:	429a      	cmp	r2, r3
 8015f88:	d1f9      	bne.n	8015f7e <net::arp_send(t_udp*, unsigned long, unsigned long)+0x9a>
 8015f8a:	4631      	mov	r1, r6
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015f92:	f7ff bd71 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 8015f96:	2e03      	cmp	r6, #3
 8015f98:	d9d5      	bls.n	8015f46 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x62>
 8015f9a:	1f35      	subs	r5, r6, #4
 8015f9c:	f025 0503 	bic.w	r5, r5, #3
 8015fa0:	3504      	adds	r5, #4
 8015fa2:	1960      	adds	r0, r4, r5
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	f854 1b04 	ldr.w	r1, [r4], #4
 8015faa:	f842 1b04 	str.w	r1, [r2], #4
 8015fae:	4284      	cmp	r4, r0
 8015fb0:	d1f9      	bne.n	8015fa6 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xc2>
 8015fb2:	442b      	add	r3, r5
 8015fb4:	f006 0103 	and.w	r1, r6, #3
 8015fb8:	e7c6      	b.n	8015f48 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x64>
 8015fba:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 8015fbe:	b292      	uxth	r2, r2
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	bf1c      	itt	ne
 8015fc4:	4b04      	ldrne	r3, [pc, #16]	@ (8015fd8 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xf4>)
 8015fc6:	689d      	ldrne	r5, [r3, #8]
 8015fc8:	e79a      	b.n	8015f00 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x1c>
 8015fca:	bf00      	nop
 8015fcc:	2000e204 	andcs	lr, r0, r4, lsl #4
 8015fd0:	1000cb08 	andne	ip, r0, r8, lsl #22
 8015fd4:	2000e28c 	andcs	lr, r0, ip, lsl #5
 8015fd8:	2000e220 	andcs	lr, r0, r0, lsr #4

08015fdc <net::arp_acd_probe(net::ip_addr)>:
 8015fdc:	b510      	push	{r4, lr}
 8015fde:	4c07      	ldr	r4, [pc, #28]	@ (8015ffc <net::arp_acd_probe(net::ip_addr)+0x20>)
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	213c      	movs	r1, #60	@ 0x3c
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8015fec:	61e2      	str	r2, [r4, #28]
 8015fee:	f7ff fd43 	bl	8015a78 <emac_eth_send(void*, unsigned long)>
 8015ff2:	4b03      	ldr	r3, [pc, #12]	@ (8016000 <net::arp_acd_probe(net::ip_addr)+0x24>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	61e3      	str	r3, [r4, #28]
 8015ff8:	bd10      	pop	{r4, pc}
 8015ffa:	bf00      	nop
 8015ffc:	2000e28c 	andcs	lr, r0, ip, lsl #5
 8016000:	2000e220 	andcs	lr, r0, r0, lsr #4

08016004 <net::arp_acd_send_announcement(net::ip_addr)>:
 8016004:	4a04      	ldr	r2, [pc, #16]	@ (8016018 <net::arp_acd_send_announcement(net::ip_addr)+0x14>)
 8016006:	4603      	mov	r3, r0
 8016008:	213c      	movs	r1, #60	@ 0x3c
 801600a:	4610      	mov	r0, r2
 801600c:	f8c2 3026 	str.w	r3, [r2, #38]	@ 0x26
 8016010:	61d3      	str	r3, [r2, #28]
 8016012:	f7ff bd31 	b.w	8015a78 <emac_eth_send(void*, unsigned long)>
 8016016:	bf00      	nop
 8016018:	2000e28c 	andcs	lr, r0, ip, lsl #5

0801601c <net::ip_set_ip()>:
 801601c:	b508      	push	{r3, lr}
 801601e:	f7ff f85b 	bl	80150d8 <net::udp_set_ip()>
 8016022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016026:	f7fe bc39 	b.w	801489c <net::igmp_set_ip()>
 801602a:	bf00      	nop

0801602c <net::phy_get_link(unsigned long)>:
 801602c:	b507      	push	{r0, r1, r2, lr}
 801602e:	2300      	movs	r3, #0
 8016030:	f10d 0206 	add.w	r2, sp, #6
 8016034:	2101      	movs	r1, #1
 8016036:	f8ad 3006 	strh.w	r3, [sp, #6]
 801603a:	f7ff fb8b 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 801603e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016042:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8016046:	b003      	add	sp, #12
 8016048:	f85d fb04 	ldr.w	pc, [sp], #4

0801604c <net::phy_start(unsigned long, net::PhyStatus&)>:
 801604c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016050:	460d      	mov	r5, r1
 8016052:	f10d 0206 	add.w	r2, sp, #6
 8016056:	2104      	movs	r1, #4
 8016058:	4604      	mov	r4, r0
 801605a:	f7ff fb7b 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 801605e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016062:	f240 1241 	movw	r2, #321	@ 0x141
 8016066:	f401 637e 	and.w	r3, r1, #4064	@ 0xfe0
 801606a:	4313      	orrs	r3, r2
 801606c:	f411 616a 	ands.w	r1, r1, #3744	@ 0xea0
 8016070:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016074:	d10a      	bne.n	801608c <net::phy_start(unsigned long, net::PhyStatus&)+0x40>
 8016076:	f10d 0206 	add.w	r2, sp, #6
 801607a:	4620      	mov	r0, r4
 801607c:	f7ff fb6a 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8016080:	b9f8      	cbnz	r0, 80160c2 <net::phy_start(unsigned long, net::PhyStatus&)+0x76>
 8016082:	2600      	movs	r6, #0
 8016084:	4630      	mov	r0, r6
 8016086:	b003      	add	sp, #12
 8016088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801608c:	2104      	movs	r1, #4
 801608e:	4620      	mov	r0, r4
 8016090:	f7ff fb6b 	bl	801576a <net::phy_write(unsigned long, unsigned long, unsigned short)>
 8016094:	2800      	cmp	r0, #0
 8016096:	d0f4      	beq.n	8016082 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 8016098:	f10d 0206 	add.w	r2, sp, #6
 801609c:	2100      	movs	r1, #0
 801609e:	4620      	mov	r0, r4
 80160a0:	f7ff fb58 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80160a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80160a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80160ac:	f442 5290 	orr.w	r2, r2, #4608	@ 0x1200
 80160b0:	b292      	uxth	r2, r2
 80160b2:	2100      	movs	r1, #0
 80160b4:	4620      	mov	r0, r4
 80160b6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80160ba:	f7ff fb56 	bl	801576a <net::phy_write(unsigned long, unsigned long, unsigned short)>
 80160be:	b938      	cbnz	r0, 80160d0 <net::phy_start(unsigned long, net::PhyStatus&)+0x84>
 80160c0:	e7df      	b.n	8016082 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 80160c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80160c6:	f403 53a0 	and.w	r3, r3, #5120	@ 0x1400
 80160ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80160ce:	d1e3      	bne.n	8016098 <net::phy_start(unsigned long, net::PhyStatus&)+0x4c>
 80160d0:	f10d 0206 	add.w	r2, sp, #6
 80160d4:	2101      	movs	r1, #1
 80160d6:	4620      	mov	r0, r4
 80160d8:	f7ff fb3c 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80160dc:	4606      	mov	r6, r0
 80160de:	2800      	cmp	r0, #0
 80160e0:	d0cf      	beq.n	8016082 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 80160e2:	682a      	ldr	r2, [r5, #0]
 80160e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80160e8:	b90a      	cbnz	r2, 80160ee <net::phy_start(unsigned long, net::PhyStatus&)+0xa2>
 80160ea:	0759      	lsls	r1, r3, #29
 80160ec:	d40f      	bmi.n	801610e <net::phy_start(unsigned long, net::PhyStatus&)+0xc2>
 80160ee:	069a      	lsls	r2, r3, #26
 80160f0:	d43b      	bmi.n	801616a <net::phy_start(unsigned long, net::PhyStatus&)+0x11e>
 80160f2:	4f25      	ldr	r7, [pc, #148]	@ (8016188 <net::phy_start(unsigned long, net::PhyStatus&)+0x13c>)
 80160f4:	4825      	ldr	r0, [pc, #148]	@ (801618c <net::phy_start(unsigned long, net::PhyStatus&)+0x140>)
 80160f6:	f004 fa54 	bl	801a5a2 <puts>
 80160fa:	f8d7 8000 	ldr.w	r8, [r7]
 80160fe:	f241 3988 	movw	r9, #5000	@ 0x1388
 8016102:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016106:	069b      	lsls	r3, r3, #26
 8016108:	d523      	bpl.n	8016152 <net::phy_start(unsigned long, net::PhyStatus&)+0x106>
 801610a:	2301      	movs	r3, #1
 801610c:	602b      	str	r3, [r5, #0]
 801610e:	2300      	movs	r3, #0
 8016110:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016114:	aa01      	add	r2, sp, #4
 8016116:	2104      	movs	r1, #4
 8016118:	4620      	mov	r0, r4
 801611a:	f7ff fb1b 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 801611e:	f10d 0206 	add.w	r2, sp, #6
 8016122:	2105      	movs	r1, #5
 8016124:	4620      	mov	r0, r4
 8016126:	f7ff fb15 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 801612a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801612e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016132:	4013      	ands	r3, r2
 8016134:	f413 7fc0 	tst.w	r3, #384	@ 0x180
 8016138:	d022      	beq.n	8016180 <net::phy_start(unsigned long, net::PhyStatus&)+0x134>
 801613a:	2201      	movs	r2, #1
 801613c:	60aa      	str	r2, [r5, #8]
 801613e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016142:	d001      	beq.n	8016148 <net::phy_start(unsigned long, net::PhyStatus&)+0xfc>
 8016144:	2301      	movs	r3, #1
 8016146:	606b      	str	r3, [r5, #4]
 8016148:	4620      	mov	r0, r4
 801614a:	f7ff ff6f 	bl	801602c <net::phy_get_link(unsigned long)>
 801614e:	6028      	str	r0, [r5, #0]
 8016150:	e798      	b.n	8016084 <net::phy_start(unsigned long, net::PhyStatus&)+0x38>
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	eba3 0308 	sub.w	r3, r3, r8
 8016158:	454b      	cmp	r3, r9
 801615a:	d892      	bhi.n	8016082 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 801615c:	f10d 0206 	add.w	r2, sp, #6
 8016160:	2101      	movs	r1, #1
 8016162:	4620      	mov	r0, r4
 8016164:	f7ff faf6 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8016168:	e7cb      	b.n	8016102 <net::phy_start(unsigned long, net::PhyStatus&)+0xb6>
 801616a:	f10d 0206 	add.w	r2, sp, #6
 801616e:	2101      	movs	r1, #1
 8016170:	4620      	mov	r0, r4
 8016172:	f7ff faef 	bl	8015754 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8016176:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801617a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801617e:	e7c5      	b.n	801610c <net::phy_start(unsigned long, net::PhyStatus&)+0xc0>
 8016180:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8016184:	e7dd      	b.n	8016142 <net::phy_start(unsigned long, net::PhyStatus&)+0xf6>
 8016186:	bf00      	nop
 8016188:	2001bcc0 	andcs	fp, r1, r0, asr #25
 801618c:	0801bbea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, r9, fp, ip, sp, pc}

08016190 <Display::ClearEndOfLine() [clone .isra.0]>:
 8016190:	b108      	cbz	r0, 8016196 <Display::ClearEndOfLine() [clone .isra.0]+0x6>
 8016192:	2301      	movs	r3, #1
 8016194:	7303      	strb	r3, [r0, #12]
 8016196:	4770      	bx	lr

08016198 <Display::Write(unsigned long, char const*) [clone .isra.0]>:
 8016198:	b430      	push	{r4, r5}
 801619a:	b160      	cbz	r0, 80161b6 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x1e>
 801619c:	6845      	ldr	r5, [r0, #4]
 801619e:	2300      	movs	r3, #0
 80161a0:	5cd4      	ldrb	r4, [r2, r3]
 80161a2:	b11c      	cbz	r4, 80161ac <Display::Write(unsigned long, char const*) [clone .isra.0]+0x14>
 80161a4:	1c5c      	adds	r4, r3, #1
 80161a6:	429d      	cmp	r5, r3
 80161a8:	4623      	mov	r3, r4
 80161aa:	d8f9      	bhi.n	80161a0 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x8>
 80161ac:	6804      	ldr	r4, [r0, #0]
 80161ae:	69e4      	ldr	r4, [r4, #28]
 80161b0:	46a4      	mov	ip, r4
 80161b2:	bc30      	pop	{r4, r5}
 80161b4:	4760      	bx	ip
 80161b6:	bc30      	pop	{r4, r5}
 80161b8:	4770      	bx	lr
	...

080161bc <DisplayUdf::ShowIpAddress()>:
 80161bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161c0:	4e16      	ldr	r6, [pc, #88]	@ (801621c <DisplayUdf::ShowIpAddress()+0x60>)
 80161c2:	b086      	sub	sp, #24
 80161c4:	4605      	mov	r5, r0
 80161c6:	6980      	ldr	r0, [r0, #24]
 80161c8:	f7ff ffe2 	bl	8016190 <Display::ClearEndOfLine() [clone .isra.0]>
 80161cc:	6870      	ldr	r0, [r6, #4]
 80161ce:	6834      	ldr	r4, [r6, #0]
 80161d0:	f895 703e 	ldrb.w	r7, [r5, #62]	@ 0x3e
 80161d4:	f004 fc36 	bl	801aa44 <__popcountsi2>
 80161d8:	7eb3      	ldrb	r3, [r6, #26]
 80161da:	075a      	lsls	r2, r3, #29
 80161dc:	fa5f f884 	uxtb.w	r8, r4
 80161e0:	f3c4 2907 	ubfx	r9, r4, #8, #8
 80161e4:	f3c4 4a07 	ubfx	sl, r4, #16, #8
 80161e8:	ea4f 6414 	mov.w	r4, r4, lsr #24
 80161ec:	d413      	bmi.n	8016216 <DisplayUdf::ShowIpAddress()+0x5a>
 80161ee:	f013 0f02 	tst.w	r3, #2
 80161f2:	bf0c      	ite	eq
 80161f4:	2253      	moveq	r2, #83	@ 0x53
 80161f6:	2244      	movne	r2, #68	@ 0x44
 80161f8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80161fc:	e9cd a401 	strd	sl, r4, [sp, #4]
 8016200:	4a07      	ldr	r2, [pc, #28]	@ (8016220 <DisplayUdf::ShowIpAddress()+0x64>)
 8016202:	f8cd 9000 	str.w	r9, [sp]
 8016206:	4643      	mov	r3, r8
 8016208:	4639      	mov	r1, r7
 801620a:	4628      	mov	r0, r5
 801620c:	f7f3 fbce 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 8016210:	b006      	add	sp, #24
 8016212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016216:	225a      	movs	r2, #90	@ 0x5a
 8016218:	e7ee      	b.n	80161f8 <DisplayUdf::ShowIpAddress()+0x3c>
 801621a:	bf00      	nop
 801621c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8016220:	0801bc17 	stmdaeq	r1, {r0, r1, r2, r4, sl, fp, ip, sp, pc}

08016224 <DisplayUdf::DisplayUdf()>:
 8016224:	b510      	push	{r4, lr}
 8016226:	4604      	mov	r4, r0
 8016228:	f001 f908 	bl	801743c <Display::Display()>
 801622c:	2202      	movs	r2, #2
 801622e:	2300      	movs	r3, #0
 8016230:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
 8016234:	4b05      	ldr	r3, [pc, #20]	@ (801624c <DisplayUdf::DisplayUdf()+0x28>)
 8016236:	f104 023b 	add.w	r2, r4, #59	@ 0x3b
 801623a:	601c      	str	r4, [r3, #0]
 801623c:	2301      	movs	r3, #1
 801623e:	f802 3f01 	strb.w	r3, [r2, #1]!
 8016242:	3301      	adds	r3, #1
 8016244:	2b15      	cmp	r3, #21
 8016246:	d1fa      	bne.n	801623e <DisplayUdf::DisplayUdf()+0x1a>
 8016248:	4620      	mov	r0, r4
 801624a:	bd10      	pop	{r4, pc}
 801624c:	2000e2c8 	andcs	lr, r0, r8, asr #5

08016250 <DisplayUdf::SetTitle(char const*, ...)>:
 8016250:	b40e      	push	{r1, r2, r3}
 8016252:	b517      	push	{r0, r1, r2, r4, lr}
 8016254:	ab05      	add	r3, sp, #20
 8016256:	4604      	mov	r4, r0
 8016258:	f853 2b04 	ldr.w	r2, [r3], #4
 801625c:	9301      	str	r3, [sp, #4]
 801625e:	211f      	movs	r1, #31
 8016260:	301c      	adds	r0, #28
 8016262:	f004 f989 	bl	801a578 <vsnprintf>
 8016266:	4404      	add	r4, r0
 8016268:	2300      	movs	r3, #0
 801626a:	7723      	strb	r3, [r4, #28]
 801626c:	b003      	add	sp, #12
 801626e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016272:	b003      	add	sp, #12
 8016274:	4770      	bx	lr

08016276 <DisplayUdf::Set(unsigned long, displayudf::Labels)>:
 8016276:	1e4b      	subs	r3, r1, #1
 8016278:	2b05      	cmp	r3, #5
 801627a:	b530      	push	{r4, r5, lr}
 801627c:	d810      	bhi.n	80162a0 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2a>
 801627e:	f100 043b 	add.w	r4, r0, #59	@ 0x3b
 8016282:	2300      	movs	r3, #0
 8016284:	b2c9      	uxtb	r1, r1
 8016286:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801628a:	428d      	cmp	r5, r1
 801628c:	d109      	bne.n	80162a2 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2c>
 801628e:	1884      	adds	r4, r0, r2
 8016290:	4403      	add	r3, r0
 8016292:	f894 403c 	ldrb.w	r4, [r4, #60]	@ 0x3c
 8016296:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
 801629a:	4410      	add	r0, r2
 801629c:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
 80162a0:	bd30      	pop	{r4, r5, pc}
 80162a2:	3301      	adds	r3, #1
 80162a4:	2b14      	cmp	r3, #20
 80162a6:	d1ee      	bne.n	8016286 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x10>
 80162a8:	e7f7      	b.n	801629a <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x24>
	...

080162ac <DisplayUdf::Show()>:
 80162ac:	b530      	push	{r4, r5, lr}
 80162ae:	4604      	mov	r4, r0
 80162b0:	b085      	sub	sp, #20
 80162b2:	f000 fa17 	bl	80166e4 <DisplayUdf::ShowE131Bridge()>
 80162b6:	f104 033b 	add.w	r3, r4, #59	@ 0x3b
 80162ba:	f104 024f 	add.w	r2, r4, #79	@ 0x4f
 80162be:	21ff      	movs	r1, #255	@ 0xff
 80162c0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80162c4:	2806      	cmp	r0, #6
 80162c6:	bf88      	it	hi
 80162c8:	7019      	strbhi	r1, [r3, #0]
 80162ca:	4293      	cmp	r3, r2
 80162cc:	d1f8      	bne.n	80162c0 <DisplayUdf::Show()+0x14>
 80162ce:	69a0      	ldr	r0, [r4, #24]
 80162d0:	4d2a      	ldr	r5, [pc, #168]	@ (801637c <DisplayUdf::Show()+0xd0>)
 80162d2:	f7ff ff5d 	bl	8016190 <Display::ClearEndOfLine() [clone .isra.0]>
 80162d6:	f104 021c 	add.w	r2, r4, #28
 80162da:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 80162de:	f7ff ff5b 	bl	8016198 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 80162e2:	69a0      	ldr	r0, [r4, #24]
 80162e4:	4a26      	ldr	r2, [pc, #152]	@ (8016380 <DisplayUdf::Show()+0xd4>)
 80162e6:	f7ff ff53 	bl	8016190 <Display::ClearEndOfLine() [clone .isra.0]>
 80162ea:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 80162ee:	f7ff ff53 	bl	8016198 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 80162f2:	69a0      	ldr	r0, [r4, #24]
 80162f4:	4a23      	ldr	r2, [pc, #140]	@ (8016384 <DisplayUdf::Show()+0xd8>)
 80162f6:	f7ff ff4b 	bl	8016190 <Display::ClearEndOfLine() [clone .isra.0]>
 80162fa:	4b23      	ldr	r3, [pc, #140]	@ (8016388 <DisplayUdf::Show()+0xdc>)
 80162fc:	9300      	str	r3, [sp, #0]
 80162fe:	f894 103f 	ldrb.w	r1, [r4, #63]	@ 0x3f
 8016302:	2303      	movs	r3, #3
 8016304:	4620      	mov	r0, r4
 8016306:	f7f3 fb51 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 801630a:	4620      	mov	r0, r4
 801630c:	f7ff ff56 	bl	80161bc <DisplayUdf::ShowIpAddress()>
 8016310:	69a0      	ldr	r0, [r4, #24]
 8016312:	f7ff ff3d 	bl	8016190 <Display::ClearEndOfLine() [clone .isra.0]>
 8016316:	68ab      	ldr	r3, [r5, #8]
 8016318:	0e1a      	lsrs	r2, r3, #24
 801631a:	9202      	str	r2, [sp, #8]
 801631c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016320:	9201      	str	r2, [sp, #4]
 8016322:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8016326:	9200      	str	r2, [sp, #0]
 8016328:	f894 104e 	ldrb.w	r1, [r4, #78]	@ 0x4e
 801632c:	4a17      	ldr	r2, [pc, #92]	@ (801638c <DisplayUdf::Show()+0xe0>)
 801632e:	b2db      	uxtb	r3, r3
 8016330:	4620      	mov	r0, r4
 8016332:	f7f3 fb3b 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 8016336:	69a0      	ldr	r0, [r4, #24]
 8016338:	f7ff ff2a 	bl	8016190 <Display::ClearEndOfLine() [clone .isra.0]>
 801633c:	686b      	ldr	r3, [r5, #4]
 801633e:	0e1a      	lsrs	r2, r3, #24
 8016340:	9202      	str	r2, [sp, #8]
 8016342:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016346:	9201      	str	r2, [sp, #4]
 8016348:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801634c:	9200      	str	r2, [sp, #0]
 801634e:	f894 1048 	ldrb.w	r1, [r4, #72]	@ 0x48
 8016352:	4a0f      	ldr	r2, [pc, #60]	@ (8016390 <DisplayUdf::Show()+0xe4>)
 8016354:	b2db      	uxtb	r3, r3
 8016356:	4620      	mov	r0, r4
 8016358:	f7f3 fb28 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 801635c:	4620      	mov	r0, r4
 801635e:	f7ff ff2d 	bl	80161bc <DisplayUdf::ShowIpAddress()>
 8016362:	69a0      	ldr	r0, [r4, #24]
 8016364:	f7ff ff14 	bl	8016190 <Display::ClearEndOfLine() [clone .isra.0]>
 8016368:	4b0a      	ldr	r3, [pc, #40]	@ (8016394 <DisplayUdf::Show()+0xe8>)
 801636a:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 801636e:	681a      	ldr	r2, [r3, #0]
 8016370:	3216      	adds	r2, #22
 8016372:	b005      	add	sp, #20
 8016374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016378:	f7ff bf0e 	b.w	8016198 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 801637c:	2000e220 	andcs	lr, r0, r0, lsr #4
 8016380:	0801b3f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, ip, sp, pc}
 8016384:	0801bc29 	stmdaeq	r1, {r0, r3, r5, sl, fp, ip, sp, pc}
 8016388:	2000e3b8 			@ <UNDEFINED> instruction: 0x2000e3b8
 801638c:	0801bc38 	stmdaeq	r1, {r3, r4, r5, sl, fp, ip, sp, pc}
 8016390:	0801bc47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp, pc}
 8016394:	2000e200 	andcs	lr, r0, r0, lsl #4

08016398 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>:
 8016398:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801639a:	88c6      	ldrh	r6, [r0, #6]
 801639c:	8885      	ldrh	r5, [r0, #4]
 801639e:	42ae      	cmp	r6, r5
 80163a0:	d216      	bcs.n	80163d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x38>
 80163a2:	4604      	mov	r4, r0
 80163a4:	6800      	ldr	r0, [r0, #0]
 80163a6:	1bad      	subs	r5, r5, r6
 80163a8:	4430      	add	r0, r6
 80163aa:	7a26      	ldrb	r6, [r4, #8]
 80163ac:	b923      	cbnz	r3, 80163b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x20>
 80163ae:	b926      	cbnz	r6, 80163ba <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x22>
 80163b0:	9200      	str	r2, [sp, #0]
 80163b2:	460b      	mov	r3, r1
 80163b4:	4a09      	ldr	r2, [pc, #36]	@ (80163dc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x44>)
 80163b6:	e003      	b.n	80163c0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 80163b8:	b166      	cbz	r6, 80163d4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x3c>
 80163ba:	9200      	str	r2, [sp, #0]
 80163bc:	4a08      	ldr	r2, [pc, #32]	@ (80163e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x48>)
 80163be:	460b      	mov	r3, r1
 80163c0:	4629      	mov	r1, r5
 80163c2:	f004 f8c1 	bl	801a548 <snprintf>
 80163c6:	4285      	cmp	r5, r0
 80163c8:	bfa2      	ittt	ge
 80163ca:	88e3      	ldrhge	r3, [r4, #6]
 80163cc:	181b      	addge	r3, r3, r0
 80163ce:	80e3      	strhge	r3, [r4, #6]
 80163d0:	b002      	add	sp, #8
 80163d2:	bd70      	pop	{r4, r5, r6, pc}
 80163d4:	9200      	str	r2, [sp, #0]
 80163d6:	460b      	mov	r3, r1
 80163d8:	4a02      	ldr	r2, [pc, #8]	@ (80163e4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x4c>)
 80163da:	e7f1      	b.n	80163c0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 80163dc:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 80163e0:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 80163e4:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

080163e8 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>:
 80163e8:	b507      	push	{r0, r1, r2, lr}
 80163ea:	2300      	movs	r3, #0
 80163ec:	2101      	movs	r1, #1
 80163ee:	e9cd 3100 	strd	r3, r1, [sp]
 80163f2:	4602      	mov	r2, r0
 80163f4:	4804      	ldr	r0, [pc, #16]	@ (8016408 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)+0x20>)
 80163f6:	2322      	movs	r3, #34	@ 0x22
 80163f8:	6800      	ldr	r0, [r0, #0]
 80163fa:	210d      	movs	r1, #13
 80163fc:	f000 fb52 	bl	8016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 8016400:	b003      	add	sp, #12
 8016402:	f85d fb04 	ldr.w	pc, [sp], #4
 8016406:	bf00      	nop
 8016408:	2000e2cc 	andcs	lr, r0, ip, asr #5

0801640c <DisplayUdfParams::DisplayUdfParams()>:
 801640c:	b510      	push	{r4, lr}
 801640e:	2220      	movs	r2, #32
 8016410:	4604      	mov	r4, r0
 8016412:	2100      	movs	r1, #0
 8016414:	f003 fd8c 	bl	8019f30 <memset>
 8016418:	2305      	movs	r3, #5
 801641a:	f884 3020 	strb.w	r3, [r4, #32]
 801641e:	237f      	movs	r3, #127	@ 0x7f
 8016420:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8016424:	4620      	mov	r0, r4
 8016426:	bd10      	pop	{r4, pc}

08016428 <DisplayUdfParams::Load()>:
 8016428:	b508      	push	{r3, lr}
 801642a:	2200      	movs	r2, #0
 801642c:	7002      	strb	r2, [r0, #0]
 801642e:	7042      	strb	r2, [r0, #1]
 8016430:	7082      	strb	r2, [r0, #2]
 8016432:	70c2      	strb	r2, [r0, #3]
 8016434:	f7ff ffd8 	bl	80163e8 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>
 8016438:	bd08      	pop	{r3, pc}
	...

0801643c <DisplayUdfParams::Load(char const*, unsigned long)>:
 801643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801643e:	2500      	movs	r5, #0
 8016440:	b087      	sub	sp, #28
 8016442:	4604      	mov	r4, r0
 8016444:	460e      	mov	r6, r1
 8016446:	4617      	mov	r7, r2
 8016448:	7005      	strb	r5, [r0, #0]
 801644a:	7045      	strb	r5, [r0, #1]
 801644c:	7085      	strb	r5, [r0, #2]
 801644e:	70c5      	strb	r5, [r0, #3]
 8016450:	4602      	mov	r2, r0
 8016452:	490c      	ldr	r1, [pc, #48]	@ (8016484 <DisplayUdfParams::Load(char const*, unsigned long)+0x48>)
 8016454:	a804      	add	r0, sp, #16
 8016456:	f000 fdff 	bl	8017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801645a:	463a      	mov	r2, r7
 801645c:	4631      	mov	r1, r6
 801645e:	a804      	add	r0, sp, #16
 8016460:	f000 fdfe 	bl	8017060 <ReadConfigFile::Read(char const*, unsigned int)>
 8016464:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8016468:	2322      	movs	r3, #34	@ 0x22
 801646a:	4807      	ldr	r0, [pc, #28]	@ (8016488 <DisplayUdfParams::Load(char const*, unsigned long)+0x4c>)
 801646c:	9300      	str	r3, [sp, #0]
 801646e:	462a      	mov	r2, r5
 8016470:	4623      	mov	r3, r4
 8016472:	210d      	movs	r1, #13
 8016474:	6800      	ldr	r0, [r0, #0]
 8016476:	f000 faef 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 801647a:	a804      	add	r0, sp, #16
 801647c:	f000 fdef 	bl	801705e <ReadConfigFile::~ReadConfigFile()>
 8016480:	b007      	add	sp, #28
 8016482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016484:	0801654d 	stmdaeq	r1, {r0, r2, r3, r6, r8, sl, sp, lr}
 8016488:	2000e2cc 	andcs	lr, r0, ip, asr #5

0801648c <DisplayUdfParams::callbackFunction(char const*)>:
 801648c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801648e:	460e      	mov	r6, r1
 8016490:	4604      	mov	r4, r0
 8016492:	492a      	ldr	r1, [pc, #168]	@ (801653c <DisplayUdfParams::callbackFunction(char const*)+0xb0>)
 8016494:	f10d 0207 	add.w	r2, sp, #7
 8016498:	4630      	mov	r0, r6
 801649a:	f000 ff07 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801649e:	b968      	cbnz	r0, 80164bc <DisplayUdfParams::callbackFunction(char const*)+0x30>
 80164a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80164a4:	6823      	ldr	r3, [r4, #0]
 80164a6:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
 80164aa:	2a7f      	cmp	r2, #127	@ 0x7f
 80164ac:	bf14      	ite	ne
 80164ae:	f043 5300 	orrne.w	r3, r3, #536870912	@ 0x20000000
 80164b2:	f023 5300 	biceq.w	r3, r3, #536870912	@ 0x20000000
 80164b6:	6023      	str	r3, [r4, #0]
 80164b8:	b003      	add	sp, #12
 80164ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164bc:	4920      	ldr	r1, [pc, #128]	@ (8016540 <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 80164be:	f10d 0207 	add.w	r2, sp, #7
 80164c2:	4630      	mov	r0, r6
 80164c4:	f000 fef2 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80164c8:	b958      	cbnz	r0, 80164e2 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 80164ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80164ce:	6823      	ldr	r3, [r4, #0]
 80164d0:	f884 2020 	strb.w	r2, [r4, #32]
 80164d4:	2a05      	cmp	r2, #5
 80164d6:	bf14      	ite	ne
 80164d8:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 80164dc:	f023 5380 	biceq.w	r3, r3, #268435456	@ 0x10000000
 80164e0:	e7e9      	b.n	80164b6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80164e2:	4918      	ldr	r1, [pc, #96]	@ (8016544 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 80164e4:	f10d 0207 	add.w	r2, sp, #7
 80164e8:	4630      	mov	r0, r6
 80164ea:	f000 fedf 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80164ee:	b948      	cbnz	r0, 8016504 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 80164f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80164f4:	6823      	ldr	r3, [r4, #0]
 80164f6:	b112      	cbz	r2, 80164fe <DisplayUdfParams::callbackFunction(char const*)+0x72>
 80164f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80164fc:	e7db      	b.n	80164b6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80164fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016502:	e7d8      	b.n	80164b6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016504:	4f10      	ldr	r7, [pc, #64]	@ (8016548 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8016506:	2500      	movs	r5, #0
 8016508:	f857 1b04 	ldr.w	r1, [r7], #4
 801650c:	f10d 0207 	add.w	r2, sp, #7
 8016510:	4630      	mov	r0, r6
 8016512:	f000 fecb 	bl	80172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016516:	b968      	cbnz	r0, 8016534 <DisplayUdfParams::callbackFunction(char const*)+0xa8>
 8016518:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801651c:	6823      	ldr	r3, [r4, #0]
 801651e:	2201      	movs	r2, #1
 8016520:	40aa      	lsls	r2, r5
 8016522:	1e4e      	subs	r6, r1, #1
 8016524:	4425      	add	r5, r4
 8016526:	2e05      	cmp	r6, #5
 8016528:	bf99      	ittee	ls
 801652a:	7129      	strbls	r1, [r5, #4]
 801652c:	4313      	orrls	r3, r2
 801652e:	7128      	strbhi	r0, [r5, #4]
 8016530:	4393      	bichi	r3, r2
 8016532:	e7c0      	b.n	80164b6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016534:	3501      	adds	r5, #1
 8016536:	2d14      	cmp	r5, #20
 8016538:	d1e6      	bne.n	8016508 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 801653a:	e7bd      	b.n	80164b8 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 801653c:	0801f17e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, ip, sp, lr, pc}
 8016540:	0801f170 	stmdaeq	r1, {r4, r5, r6, r8, ip, sp, lr, pc}
 8016544:	0801f160 	stmdaeq	r1, {r5, r6, r8, ip, sp, lr, pc}
 8016548:	0801f0dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, ip, sp, lr, pc}

0801654c <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 801654c:	f7ff bf9e 	b.w	801648c <DisplayUdfParams::callbackFunction(char const*)>

08016550 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)>:
 8016550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016554:	4604      	mov	r4, r0
 8016556:	b086      	sub	sp, #24
 8016558:	4615      	mov	r5, r2
 801655a:	461e      	mov	r6, r3
 801655c:	b379      	cbz	r1, 80165be <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 801655e:	2222      	movs	r2, #34	@ 0x22
 8016560:	f003 fccf 	bl	8019f02 <memmove>
 8016564:	462a      	mov	r2, r5
 8016566:	493c      	ldr	r1, [pc, #240]	@ (8016658 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x108>)
 8016568:	4633      	mov	r3, r6
 801656a:	a803      	add	r0, sp, #12
 801656c:	f000 fc9e 	bl	8016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 8016570:	6823      	ldr	r3, [r4, #0]
 8016572:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 8016576:	4939      	ldr	r1, [pc, #228]	@ (801665c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x10c>)
 8016578:	f3c3 7340 	ubfx	r3, r3, #29, #1
 801657c:	a803      	add	r0, sp, #12
 801657e:	f7ff ff0b 	bl	8016398 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8016582:	6823      	ldr	r3, [r4, #0]
 8016584:	f894 2020 	ldrb.w	r2, [r4, #32]
 8016588:	4935      	ldr	r1, [pc, #212]	@ (8016660 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x110>)
 801658a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 801658e:	a803      	add	r0, sp, #12
 8016590:	f7ff ff02 	bl	8016398 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8016594:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016598:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801659c:	6823      	ldr	r3, [r4, #0]
 801659e:	42aa      	cmp	r2, r5
 80165a0:	d222      	bcs.n	80165e8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x98>
 80165a2:	9803      	ldr	r0, [sp, #12]
 80165a4:	f013 4380 	ands.w	r3, r3, #1073741824	@ 0x40000000
 80165a8:	4410      	add	r0, r2
 80165aa:	eba5 0502 	sub.w	r5, r5, r2
 80165ae:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80165b2:	d107      	bne.n	80165c4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x74>
 80165b4:	b942      	cbnz	r2, 80165c8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x78>
 80165b6:	9200      	str	r2, [sp, #0]
 80165b8:	4b2a      	ldr	r3, [pc, #168]	@ (8016664 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 80165ba:	4a2b      	ldr	r2, [pc, #172]	@ (8016668 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x118>)
 80165bc:	e00a      	b.n	80165d4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 80165be:	f7ff ff13 	bl	80163e8 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>
 80165c2:	e7cf      	b.n	8016564 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 80165c4:	2a00      	cmp	r2, #0
 80165c6:	d042      	beq.n	801664e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xfe>
 80165c8:	3b00      	subs	r3, #0
 80165ca:	bf18      	it	ne
 80165cc:	2301      	movne	r3, #1
 80165ce:	9300      	str	r3, [sp, #0]
 80165d0:	4a26      	ldr	r2, [pc, #152]	@ (801666c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x11c>)
 80165d2:	4b24      	ldr	r3, [pc, #144]	@ (8016664 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 80165d4:	4629      	mov	r1, r5
 80165d6:	f003 ffb7 	bl	801a548 <snprintf>
 80165da:	4285      	cmp	r5, r0
 80165dc:	bfa2      	ittt	ge
 80165de:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80165e2:	18c0      	addge	r0, r0, r3
 80165e4:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80165e8:	4e21      	ldr	r6, [pc, #132]	@ (8016670 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 80165ea:	2500      	movs	r5, #0
 80165ec:	2701      	movs	r7, #1
 80165ee:	f104 0804 	add.w	r8, r4, #4
 80165f2:	f856 1b04 	ldr.w	r1, [r6], #4
 80165f6:	780b      	ldrb	r3, [r1, #0]
 80165f8:	b163      	cbz	r3, 8016614 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 80165fa:	6822      	ldr	r2, [r4, #0]
 80165fc:	fa07 f305 	lsl.w	r3, r7, r5
 8016600:	4393      	bics	r3, r2
 8016602:	bf08      	it	eq
 8016604:	2301      	moveq	r3, #1
 8016606:	f818 2005 	ldrb.w	r2, [r8, r5]
 801660a:	bf18      	it	ne
 801660c:	2300      	movne	r3, #0
 801660e:	a803      	add	r0, sp, #12
 8016610:	f7ff fec2 	bl	8016398 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8016614:	3501      	adds	r5, #1
 8016616:	2d14      	cmp	r5, #20
 8016618:	d1eb      	bne.n	80165f2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xa2>
 801661a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801661e:	b17b      	cbz	r3, 8016640 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xf0>
 8016620:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016624:	9b03      	ldr	r3, [sp, #12]
 8016626:	4413      	add	r3, r2
 8016628:	227d      	movs	r2, #125	@ 0x7d
 801662a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801662e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016632:	9903      	ldr	r1, [sp, #12]
 8016634:	54ca      	strb	r2, [r1, r3]
 8016636:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801663a:	3301      	adds	r3, #1
 801663c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016640:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016644:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016646:	601a      	str	r2, [r3, #0]
 8016648:	b006      	add	sp, #24
 801664a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664e:	2301      	movs	r3, #1
 8016650:	9300      	str	r3, [sp, #0]
 8016652:	4a08      	ldr	r2, [pc, #32]	@ (8016674 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x124>)
 8016654:	4b03      	ldr	r3, [pc, #12]	@ (8016664 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 8016656:	e7bd      	b.n	80165d4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 8016658:	0801f188 	stmdaeq	r1, {r3, r7, r8, ip, sp, lr, pc}
 801665c:	0801f17e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, ip, sp, lr, pc}
 8016660:	0801f170 	stmdaeq	r1, {r4, r5, r6, r8, ip, sp, lr, pc}
 8016664:	0801f160 	stmdaeq	r1, {r5, r6, r8, ip, sp, lr, pc}
 8016668:	0801b2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, pc}
 801666c:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 8016670:	0801f0dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, ip, sp, lr, pc}
 8016674:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

08016678 <DisplayUdfParams::Set(DisplayUdf*)>:
 8016678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801667c:	4604      	mov	r4, r0
 801667e:	460d      	mov	r5, r1
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	6988      	ldr	r0, [r1, #24]
 8016684:	009a      	lsls	r2, r3, #2
 8016686:	d506      	bpl.n	8016696 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8016688:	f894 1021 	ldrb.w	r1, [r4, #33]	@ 0x21
 801668c:	7529      	strb	r1, [r5, #20]
 801668e:	b110      	cbz	r0, 8016696 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8016690:	6803      	ldr	r3, [r0, #0]
 8016692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016694:	4798      	blx	r3
 8016696:	6823      	ldr	r3, [r4, #0]
 8016698:	69a8      	ldr	r0, [r5, #24]
 801669a:	00db      	lsls	r3, r3, #3
 801669c:	bf41      	itttt	mi
 801669e:	f894 3020 	ldrbmi.w	r3, [r4, #32]
 80166a2:	f64e 2260 	movwmi	r2, #60000	@ 0xea60
 80166a6:	4353      	mulmi	r3, r2
 80166a8:	612b      	strmi	r3, [r5, #16]
 80166aa:	6821      	ldr	r1, [r4, #0]
 80166ac:	f3c1 7180 	ubfx	r1, r1, #30, #1
 80166b0:	75a9      	strb	r1, [r5, #22]
 80166b2:	b110      	cbz	r0, 80166ba <DisplayUdfParams::Set(DisplayUdf*)+0x42>
 80166b4:	6803      	ldr	r3, [r0, #0]
 80166b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80166b8:	4798      	blx	r3
 80166ba:	2600      	movs	r6, #0
 80166bc:	2701      	movs	r7, #1
 80166be:	f104 0804 	add.w	r8, r4, #4
 80166c2:	6822      	ldr	r2, [r4, #0]
 80166c4:	fa07 f306 	lsl.w	r3, r7, r6
 80166c8:	4393      	bics	r3, r2
 80166ca:	d105      	bne.n	80166d8 <DisplayUdfParams::Set(DisplayUdf*)+0x60>
 80166cc:	f818 1006 	ldrb.w	r1, [r8, r6]
 80166d0:	4632      	mov	r2, r6
 80166d2:	4628      	mov	r0, r5
 80166d4:	f7ff fdcf 	bl	8016276 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 80166d8:	3601      	adds	r6, #1
 80166da:	2e14      	cmp	r6, #20
 80166dc:	d1f1      	bne.n	80166c2 <DisplayUdfParams::Set(DisplayUdf*)+0x4a>
 80166de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080166e4 <DisplayUdf::ShowE131Bridge()>:
 80166e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80166e8:	4b29      	ldr	r3, [pc, #164]	@ (8016790 <DisplayUdf::ShowE131Bridge()+0xac>)
 80166ea:	4f2a      	ldr	r7, [pc, #168]	@ (8016794 <DisplayUdf::ShowE131Bridge()+0xb0>)
 80166ec:	681e      	ldr	r6, [r3, #0]
 80166ee:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80166f2:	7ff2      	ldrb	r2, [r6, #31]
 80166f4:	7fb3      	ldrb	r3, [r6, #30]
 80166f6:	4413      	add	r3, r2
 80166f8:	4a27      	ldr	r2, [pc, #156]	@ (8016798 <DisplayUdf::ShowE131Bridge()+0xb4>)
 80166fa:	4604      	mov	r4, r0
 80166fc:	f7f3 f956 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	2b03      	cmp	r3, #3
 8016704:	d92e      	bls.n	8016764 <DisplayUdf::ShowE131Bridge()+0x80>
 8016706:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8016708:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 801670c:	2a02      	cmp	r2, #2
 801670e:	d131      	bne.n	8016774 <DisplayUdf::ShowE131Bridge()+0x90>
 8016710:	4a22      	ldr	r2, [pc, #136]	@ (801679c <DisplayUdf::ShowE131Bridge()+0xb8>)
 8016712:	4620      	mov	r0, r4
 8016714:	f7f3 f94a 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 8016718:	b002      	add	sp, #8
 801671a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	442b      	add	r3, r5
 8016722:	2b03      	cmp	r3, #3
 8016724:	d8ef      	bhi.n	8016706 <DisplayUdf::ShowE131Bridge()+0x22>
 8016726:	220c      	movs	r2, #12
 8016728:	fb02 6203 	mla	r2, r2, r3, r6
 801672c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 801672e:	2901      	cmp	r1, #1
 8016730:	d114      	bne.n	801675c <DisplayUdf::ShowE131Bridge()+0x78>
 8016732:	2044      	movs	r0, #68	@ 0x44
 8016734:	fb00 6303 	mla	r3, r0, r3, r6
 8016738:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 801673a:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
 801673e:	2800      	cmp	r0, #0
 8016740:	bf14      	ite	ne
 8016742:	4643      	movne	r3, r8
 8016744:	464b      	moveq	r3, r9
 8016746:	e9cd 2300 	strd	r2, r3, [sp]
 801674a:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 801674e:	f105 0341 	add.w	r3, r5, #65	@ 0x41
 8016752:	5d49      	ldrb	r1, [r1, r5]
 8016754:	4652      	mov	r2, sl
 8016756:	4620      	mov	r0, r4
 8016758:	f7f3 f928 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 801675c:	3501      	adds	r5, #1
 801675e:	2d04      	cmp	r5, #4
 8016760:	d1dd      	bne.n	801671e <DisplayUdf::ShowE131Bridge()+0x3a>
 8016762:	e7d0      	b.n	8016706 <DisplayUdf::ShowE131Bridge()+0x22>
 8016764:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 80167ac <DisplayUdf::ShowE131Bridge()+0xc8>
 8016768:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 80167b0 <DisplayUdf::ShowE131Bridge()+0xcc>
 801676c:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80167b4 <DisplayUdf::ShowE131Bridge()+0xd0>
 8016770:	2500      	movs	r5, #0
 8016772:	e7d8      	b.n	8016726 <DisplayUdf::ShowE131Bridge()+0x42>
 8016774:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016776:	2b00      	cmp	r3, #0
 8016778:	d0ca      	beq.n	8016710 <DisplayUdf::ShowE131Bridge()+0x2c>
 801677a:	4809      	ldr	r0, [pc, #36]	@ (80167a0 <DisplayUdf::ShowE131Bridge()+0xbc>)
 801677c:	9300      	str	r3, [sp, #0]
 801677e:	4b09      	ldr	r3, [pc, #36]	@ (80167a4 <DisplayUdf::ShowE131Bridge()+0xc0>)
 8016780:	2a00      	cmp	r2, #0
 8016782:	bf18      	it	ne
 8016784:	4603      	movne	r3, r0
 8016786:	4a08      	ldr	r2, [pc, #32]	@ (80167a8 <DisplayUdf::ShowE131Bridge()+0xc4>)
 8016788:	4620      	mov	r0, r4
 801678a:	f7f3 f90f 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 801678e:	e7c3      	b.n	8016718 <DisplayUdf::ShowE131Bridge()+0x34>
 8016790:	2000d2d4 	ldrdcs	sp, [r0], -r4
 8016794:	20000000 	andcs	r0, r0, r0
 8016798:	0801bc5c 	stmdaeq	r1, {r2, r3, r4, r6, sl, fp, ip, sp, pc}
 801679c:	0801bc72 	stmdaeq	r1, {r1, r4, r5, r6, sl, fp, ip, sp, pc}
 80167a0:	0801b5d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl, ip, sp, pc}
 80167a4:	0801bc56 	stmdaeq	r1, {r1, r2, r4, r6, sl, fp, ip, sp, pc}
 80167a8:	0801bc79 	stmdaeq	r1, {r0, r3, r4, r5, r6, sl, fp, ip, sp, pc}
 80167ac:	0801b54f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, ip, sp, pc}
 80167b0:	0801b54b 	stmdaeq	r1, {r0, r1, r3, r6, r8, sl, ip, sp, pc}
 80167b4:	0801bc63 	stmdaeq	r1, {r0, r1, r5, r6, sl, fp, ip, sp, pc}

080167b8 <Display::ClearEndOfLine() [clone .isra.0]>:
 80167b8:	b108      	cbz	r0, 80167be <Display::ClearEndOfLine() [clone .isra.0]+0x6>
 80167ba:	2301      	movs	r3, #1
 80167bc:	7303      	strb	r3, [r0, #12]
 80167be:	4770      	bx	lr

080167c0 <Display::Write(unsigned long, char const*) [clone .isra.0]>:
 80167c0:	b430      	push	{r4, r5}
 80167c2:	b160      	cbz	r0, 80167de <Display::Write(unsigned long, char const*) [clone .isra.0]+0x1e>
 80167c4:	6845      	ldr	r5, [r0, #4]
 80167c6:	2300      	movs	r3, #0
 80167c8:	5cd4      	ldrb	r4, [r2, r3]
 80167ca:	b11c      	cbz	r4, 80167d4 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x14>
 80167cc:	1c5c      	adds	r4, r3, #1
 80167ce:	429d      	cmp	r5, r3
 80167d0:	4623      	mov	r3, r4
 80167d2:	d8f9      	bhi.n	80167c8 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x8>
 80167d4:	6804      	ldr	r4, [r0, #0]
 80167d6:	69e4      	ldr	r4, [r4, #28]
 80167d8:	46a4      	mov	ip, r4
 80167da:	bc30      	pop	{r4, r5}
 80167dc:	4760      	bx	ip
 80167de:	bc30      	pop	{r4, r5}
 80167e0:	4770      	bx	lr
	...

080167e4 <net::display_emac_config()>:
 80167e4:	4b06      	ldr	r3, [pc, #24]	@ (8016800 <net::display_emac_config()+0x1c>)
 80167e6:	4a07      	ldr	r2, [pc, #28]	@ (8016804 <net::display_emac_config()+0x20>)
 80167e8:	b510      	push	{r4, lr}
 80167ea:	681c      	ldr	r4, [r3, #0]
 80167ec:	69a0      	ldr	r0, [r4, #24]
 80167ee:	f7ff ffe3 	bl	80167b8 <Display::ClearEndOfLine() [clone .isra.0]>
 80167f2:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 80167f6:	4620      	mov	r0, r4
 80167f8:	f7f3 f8d8 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 80167fc:	bd10      	pop	{r4, pc}
 80167fe:	bf00      	nop
 8016800:	2000e2c8 	andcs	lr, r0, r8, asr #5
 8016804:	0801bc83 	stmdaeq	r1, {r0, r1, r7, sl, fp, ip, sp, pc}

08016808 <net::display_emac_start()>:
 8016808:	4b06      	ldr	r3, [pc, #24]	@ (8016824 <net::display_emac_start()+0x1c>)
 801680a:	4a07      	ldr	r2, [pc, #28]	@ (8016828 <net::display_emac_start()+0x20>)
 801680c:	b510      	push	{r4, lr}
 801680e:	681c      	ldr	r4, [r3, #0]
 8016810:	69a0      	ldr	r0, [r4, #24]
 8016812:	f7ff ffd1 	bl	80167b8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016816:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 801681a:	4620      	mov	r0, r4
 801681c:	f7f3 f8c6 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 8016820:	bd10      	pop	{r4, pc}
 8016822:	bf00      	nop
 8016824:	2000e2c8 	andcs	lr, r0, r8, asr #5
 8016828:	0801bc91 	stmdaeq	r1, {r0, r4, r7, sl, fp, ip, sp, pc}

0801682c <net::display_emac_status(bool)>:
 801682c:	4b09      	ldr	r3, [pc, #36]	@ (8016854 <net::display_emac_status(bool)+0x28>)
 801682e:	490a      	ldr	r1, [pc, #40]	@ (8016858 <net::display_emac_status(bool)+0x2c>)
 8016830:	b510      	push	{r4, lr}
 8016832:	681c      	ldr	r4, [r3, #0]
 8016834:	4602      	mov	r2, r0
 8016836:	69a0      	ldr	r0, [r4, #24]
 8016838:	f7ff ffbe 	bl	80167b8 <Display::ClearEndOfLine() [clone .isra.0]>
 801683c:	4b07      	ldr	r3, [pc, #28]	@ (801685c <net::display_emac_status(bool)+0x30>)
 801683e:	4620      	mov	r0, r4
 8016840:	2a00      	cmp	r2, #0
 8016842:	bf08      	it	eq
 8016844:	460b      	moveq	r3, r1
 8016846:	4a06      	ldr	r2, [pc, #24]	@ (8016860 <net::display_emac_status(bool)+0x34>)
 8016848:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 801684c:	f7f3 f8ae 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 8016850:	bd10      	pop	{r4, pc}
 8016852:	bf00      	nop
 8016854:	2000e2c8 	andcs	lr, r0, r8, asr #5
 8016858:	0801bca3 	stmdaeq	r1, {r0, r1, r5, r7, sl, fp, ip, sp, pc}
 801685c:	0801bca0 	stmdaeq	r1, {r5, r7, sl, fp, ip, sp, pc}
 8016860:	0801bca8 	stmdaeq	r1, {r3, r5, r7, sl, fp, ip, sp, pc}

08016864 <net::display_ip()>:
 8016864:	b508      	push	{r3, lr}
 8016866:	4b02      	ldr	r3, [pc, #8]	@ (8016870 <net::display_ip()+0xc>)
 8016868:	6818      	ldr	r0, [r3, #0]
 801686a:	f7ff fca7 	bl	80161bc <DisplayUdf::ShowIpAddress()>
 801686e:	bd08      	pop	{r3, pc}
 8016870:	2000e2c8 	andcs	lr, r0, r8, asr #5

08016874 <net::display_netmask()>:
 8016874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016876:	4b0d      	ldr	r3, [pc, #52]	@ (80168ac <net::display_netmask()+0x38>)
 8016878:	681c      	ldr	r4, [r3, #0]
 801687a:	69a0      	ldr	r0, [r4, #24]
 801687c:	f7ff ff9c 	bl	80167b8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016880:	4b0b      	ldr	r3, [pc, #44]	@ (80168b0 <net::display_netmask()+0x3c>)
 8016882:	f894 1048 	ldrb.w	r1, [r4, #72]	@ 0x48
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	0e1a      	lsrs	r2, r3, #24
 801688a:	9202      	str	r2, [sp, #8]
 801688c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016890:	9201      	str	r2, [sp, #4]
 8016892:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8016896:	9200      	str	r2, [sp, #0]
 8016898:	b2db      	uxtb	r3, r3
 801689a:	4a06      	ldr	r2, [pc, #24]	@ (80168b4 <net::display_netmask()+0x40>)
 801689c:	4620      	mov	r0, r4
 801689e:	f7f3 f885 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 80168a2:	4620      	mov	r0, r4
 80168a4:	f7ff fc8a 	bl	80161bc <DisplayUdf::ShowIpAddress()>
 80168a8:	b004      	add	sp, #16
 80168aa:	bd10      	pop	{r4, pc}
 80168ac:	2000e2c8 	andcs	lr, r0, r8, asr #5
 80168b0:	2000e220 	andcs	lr, r0, r0, lsr #4
 80168b4:	0801bc47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp, pc}

080168b8 <net::display_gateway()>:
 80168b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80168ba:	4b0c      	ldr	r3, [pc, #48]	@ (80168ec <net::display_gateway()+0x34>)
 80168bc:	681c      	ldr	r4, [r3, #0]
 80168be:	69a0      	ldr	r0, [r4, #24]
 80168c0:	f7ff ff7a 	bl	80167b8 <Display::ClearEndOfLine() [clone .isra.0]>
 80168c4:	4b0a      	ldr	r3, [pc, #40]	@ (80168f0 <net::display_gateway()+0x38>)
 80168c6:	f894 104e 	ldrb.w	r1, [r4, #78]	@ 0x4e
 80168ca:	689b      	ldr	r3, [r3, #8]
 80168cc:	0e1a      	lsrs	r2, r3, #24
 80168ce:	9202      	str	r2, [sp, #8]
 80168d0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80168d4:	9201      	str	r2, [sp, #4]
 80168d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80168da:	9200      	str	r2, [sp, #0]
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	4a05      	ldr	r2, [pc, #20]	@ (80168f4 <net::display_gateway()+0x3c>)
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7f3 f863 	bl	80099ac <Display::Printf(unsigned long, char const*, ...)>
 80168e6:	b004      	add	sp, #16
 80168e8:	bd10      	pop	{r4, pc}
 80168ea:	bf00      	nop
 80168ec:	2000e2c8 	andcs	lr, r0, r8, asr #5
 80168f0:	2000e220 	andcs	lr, r0, r0, lsr #4
 80168f4:	0801bc38 	stmdaeq	r1, {r3, r4, r5, sl, fp, ip, sp, pc}

080168f8 <net::display_hostname()>:
 80168f8:	b508      	push	{r3, lr}
 80168fa:	4b07      	ldr	r3, [pc, #28]	@ (8016918 <net::display_hostname()+0x20>)
 80168fc:	6819      	ldr	r1, [r3, #0]
 80168fe:	6988      	ldr	r0, [r1, #24]
 8016900:	f7ff ff5a 	bl	80167b8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016904:	4b05      	ldr	r3, [pc, #20]	@ (801691c <net::display_hostname()+0x24>)
 8016906:	f891 1043 	ldrb.w	r1, [r1, #67]	@ 0x43
 801690a:	681a      	ldr	r2, [r3, #0]
 801690c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016910:	3216      	adds	r2, #22
 8016912:	f7ff bf55 	b.w	80167c0 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 8016916:	bf00      	nop
 8016918:	2000e2c8 	andcs	lr, r0, r8, asr #5
 801691c:	2000e200 	andcs	lr, r0, r0, lsl #4

08016920 <ConfigStore::GetStoreOffset(configstore::Store)>:
 8016920:	b510      	push	{r4, lr}
 8016922:	4a05      	ldr	r2, [pc, #20]	@ (8016938 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 8016924:	2300      	movs	r3, #0
 8016926:	2020      	movs	r0, #32
 8016928:	428b      	cmp	r3, r1
 801692a:	d100      	bne.n	801692e <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 801692c:	bd10      	pop	{r4, pc}
 801692e:	f852 4b04 	ldr.w	r4, [r2], #4
 8016932:	3301      	adds	r3, #1
 8016934:	4420      	add	r0, r4
 8016936:	e7f7      	b.n	8016928 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 8016938:	0801f194 	stmdaeq	r1, {r2, r4, r7, r8, ip, sp, lr, pc}

0801693c <ConfigStore::ConfigStore()>:
 801693c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016940:	b085      	sub	sp, #20
 8016942:	4605      	mov	r5, r0
 8016944:	f000 f9e4 	bl	8016d10 <StoreDevice::StoreDevice()>
 8016948:	4b30      	ldr	r3, [pc, #192]	@ (8016a0c <ConfigStore::ConfigStore()+0xd0>)
 801694a:	4c31      	ldr	r4, [pc, #196]	@ (8016a10 <ConfigStore::ConfigStore()+0xd4>)
 801694c:	601d      	str	r5, [r3, #0]
 801694e:	4b31      	ldr	r3, [pc, #196]	@ (8016a14 <ConfigStore::ConfigStore()+0xd8>)
 8016950:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8016a30 <ConfigStore::ConfigStore()+0xf4>
 8016954:	601c      	str	r4, [r3, #0]
 8016956:	4628      	mov	r0, r5
 8016958:	782b      	ldrb	r3, [r5, #0]
 801695a:	f888 3000 	strb.w	r3, [r8]
 801695e:	f000 f9e8 	bl	8016d32 <StoreDevice::GetSectorSize() const>
 8016962:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8016966:	4606      	mov	r6, r0
 8016968:	fbb7 f9f0 	udiv	r9, r7, r0
 801696c:	4628      	mov	r0, r5
 801696e:	f000 f9dd 	bl	8016d2c <StoreDevice::GetSize() const>
 8016972:	4b29      	ldr	r3, [pc, #164]	@ (8016a18 <ConfigStore::ConfigStore()+0xdc>)
 8016974:	fb09 0116 	mls	r1, r9, r6, r0
 8016978:	6019      	str	r1, [r3, #0]
 801697a:	f898 3000 	ldrb.w	r3, [r8]
 801697e:	3c10      	subs	r4, #16
 8016980:	b133      	cbz	r3, 8016990 <ConfigStore::ConfigStore()+0x54>
 8016982:	ab03      	add	r3, sp, #12
 8016984:	9300      	str	r3, [sp, #0]
 8016986:	463a      	mov	r2, r7
 8016988:	4623      	mov	r3, r4
 801698a:	4628      	mov	r0, r5
 801698c:	f000 f9d4 	bl	8016d38 <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>
 8016990:	4822      	ldr	r0, [pc, #136]	@ (8016a1c <ConfigStore::ConfigStore()+0xe0>)
 8016992:	4b23      	ldr	r3, [pc, #140]	@ (8016a20 <ConfigStore::ConfigStore()+0xe4>)
 8016994:	2104      	movs	r1, #4
 8016996:	2201      	movs	r2, #1
 8016998:	f810 6b01 	ldrb.w	r6, [r0], #1
 801699c:	f813 7b01 	ldrb.w	r7, [r3], #1
 80169a0:	42be      	cmp	r6, r7
 80169a2:	bf1c      	itt	ne
 80169a4:	f803 6c01 	strbne.w	r6, [r3, #-1]
 80169a8:	2200      	movne	r2, #0
 80169aa:	3901      	subs	r1, #1
 80169ac:	d1f4      	bne.n	8016998 <ConfigStore::ConfigStore()+0x5c>
 80169ae:	b952      	cbnz	r2, 80169c6 <ConfigStore::ConfigStore()+0x8a>
 80169b0:	4a17      	ldr	r2, [pc, #92]	@ (8016a10 <ConfigStore::ConfigStore()+0xd4>)
 80169b2:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80169b6:	4608      	mov	r0, r1
 80169b8:	3b01      	subs	r3, #1
 80169ba:	f802 0b01 	strb.w	r0, [r2], #1
 80169be:	d1fb      	bne.n	80169b8 <ConfigStore::ConfigStore()+0x7c>
 80169c0:	4b18      	ldr	r3, [pc, #96]	@ (8016a24 <ConfigStore::ConfigStore()+0xe8>)
 80169c2:	2201      	movs	r2, #1
 80169c4:	601a      	str	r2, [r3, #0]
 80169c6:	4818      	ldr	r0, [pc, #96]	@ (8016a28 <ConfigStore::ConfigStore()+0xec>)
 80169c8:	2200      	movs	r2, #0
 80169ca:	2320      	movs	r3, #32
 80169cc:	f850 6b04 	ldr.w	r6, [r0], #4
 80169d0:	3201      	adds	r2, #1
 80169d2:	2a1b      	cmp	r2, #27
 80169d4:	4433      	add	r3, r6
 80169d6:	d1f9      	bne.n	80169cc <ConfigStore::ConfigStore()+0x90>
 80169d8:	4a14      	ldr	r2, [pc, #80]	@ (8016a2c <ConfigStore::ConfigStore()+0xf0>)
 80169da:	2600      	movs	r6, #0
 80169dc:	6013      	str	r3, [r2, #0]
 80169de:	4628      	mov	r0, r5
 80169e0:	f7ff ff9e 	bl	8016920 <ConfigStore::GetStoreOffset(configstore::Store)>
 80169e4:	5823      	ldr	r3, [r4, r0]
 80169e6:	3101      	adds	r1, #1
 80169e8:	3301      	adds	r3, #1
 80169ea:	bf08      	it	eq
 80169ec:	5026      	streq	r6, [r4, r0]
 80169ee:	291b      	cmp	r1, #27
 80169f0:	d1f5      	bne.n	80169de <ConfigStore::ConfigStore()+0xa2>
 80169f2:	6923      	ldr	r3, [r4, #16]
 80169f4:	3301      	adds	r3, #1
 80169f6:	d104      	bne.n	8016a02 <ConfigStore::ConfigStore()+0xc6>
 80169f8:	2300      	movs	r3, #0
 80169fa:	7423      	strb	r3, [r4, #16]
 80169fc:	7463      	strb	r3, [r4, #17]
 80169fe:	74a3      	strb	r3, [r4, #18]
 8016a00:	74e3      	strb	r3, [r4, #19]
 8016a02:	4628      	mov	r0, r5
 8016a04:	b005      	add	sp, #20
 8016a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a0a:	bf00      	nop
 8016a0c:	2000e2cc 	andcs	lr, r0, ip, asr #5
 8016a10:	40024010 	andmi	r4, r2, r0, lsl r0
 8016a14:	2001bcf4 	strdcs	fp, [r1], -r4
 8016a18:	2000e2d8 	ldrdcs	lr, [r0], -r8
 8016a1c:	0801f200 	stmdaeq	r1, {r9, ip, sp, lr, pc}
 8016a20:	40024000 	andmi	r4, r2, r0
 8016a24:	2000e2dc 	ldrdcs	lr, [r0], -ip
 8016a28:	0801f194 	stmdaeq	r1, {r2, r4, r7, r8, ip, sp, lr, pc}
 8016a2c:	2000e2d4 	ldrdcs	lr, [r0], -r4
 8016a30:	2000e2e0 	andcs	lr, r0, r0, ror #5

08016a34 <ConfigStore::ResetSetList(configstore::Store)>:
 8016a34:	b508      	push	{r3, lr}
 8016a36:	f7ff ff73 	bl	8016920 <ConfigStore::GetStoreOffset(configstore::Store)>
 8016a3a:	4905      	ldr	r1, [pc, #20]	@ (8016a50 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 8016a3c:	1842      	adds	r2, r0, r1
 8016a3e:	2300      	movs	r3, #0
 8016a40:	540b      	strb	r3, [r1, r0]
 8016a42:	7053      	strb	r3, [r2, #1]
 8016a44:	7093      	strb	r3, [r2, #2]
 8016a46:	70d3      	strb	r3, [r2, #3]
 8016a48:	4b02      	ldr	r3, [pc, #8]	@ (8016a54 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 8016a4a:	2201      	movs	r2, #1
 8016a4c:	601a      	str	r2, [r3, #0]
 8016a4e:	bd08      	pop	{r3, pc}
 8016a50:	40024000 	andmi	r4, r2, r0
 8016a54:	2000e2dc 	ldrdcs	lr, [r0], -ip

08016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>:
 8016a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a5a:	4614      	mov	r4, r2
 8016a5c:	461d      	mov	r5, r3
 8016a5e:	f7ff ff5f 	bl	8016920 <ConfigStore::GetStoreOffset(configstore::Store)>
 8016a62:	490e      	ldr	r1, [pc, #56]	@ (8016a9c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x44>)
 8016a64:	1902      	adds	r2, r0, r4
 8016a66:	9c06      	ldr	r4, [sp, #24]
 8016a68:	440a      	add	r2, r1
 8016a6a:	1e6b      	subs	r3, r5, #1
 8016a6c:	4414      	add	r4, r2
 8016a6e:	2500      	movs	r5, #0
 8016a70:	42a2      	cmp	r2, r4
 8016a72:	d10a      	bne.n	8016a8a <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x32>
 8016a74:	b145      	cbz	r5, 8016a88 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x30>
 8016a76:	9b08      	ldr	r3, [sp, #32]
 8016a78:	9a07      	ldr	r2, [sp, #28]
 8016a7a:	4418      	add	r0, r3
 8016a7c:	580b      	ldr	r3, [r1, r0]
 8016a7e:	4313      	orrs	r3, r2
 8016a80:	500b      	str	r3, [r1, r0]
 8016a82:	4b07      	ldr	r3, [pc, #28]	@ (8016aa0 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x48>)
 8016a84:	2201      	movs	r2, #1
 8016a86:	601a      	str	r2, [r3, #0]
 8016a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a8a:	7817      	ldrb	r7, [r2, #0]
 8016a8c:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016a90:	42b7      	cmp	r7, r6
 8016a92:	bf1c      	itt	ne
 8016a94:	7016      	strbne	r6, [r2, #0]
 8016a96:	2501      	movne	r5, #1
 8016a98:	3201      	adds	r2, #1
 8016a9a:	e7e9      	b.n	8016a70 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x18>
 8016a9c:	40024000 	andmi	r4, r2, r0
 8016aa0:	2000e2dc 	ldrdcs	lr, [r0], -ip

08016aa4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>:
 8016aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aa8:	b085      	sub	sp, #20
 8016aaa:	461e      	mov	r6, r3
 8016aac:	4615      	mov	r5, r2
 8016aae:	4607      	mov	r7, r0
 8016ab0:	f7ff ff36 	bl	8016920 <ConfigStore::GetStoreOffset(configstore::Store)>
 8016ab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ab6:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8016aba:	18c4      	adds	r4, r0, r3
 8016abc:	4b10      	ldr	r3, [pc, #64]	@ (8016b00 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x5c>)
 8016abe:	441c      	add	r4, r3
 8016ac0:	4688      	mov	r8, r1
 8016ac2:	4623      	mov	r3, r4
 8016ac4:	1932      	adds	r2, r6, r4
 8016ac6:	4293      	cmp	r3, r2
 8016ac8:	d10c      	bne.n	8016ae4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x40>
 8016aca:	f1b9 0f00 	cmp.w	r9, #0
 8016ace:	d00f      	beq.n	8016af0 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x4c>
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016ad6:	9600      	str	r6, [sp, #0]
 8016ad8:	462b      	mov	r3, r5
 8016ada:	4641      	mov	r1, r8
 8016adc:	4638      	mov	r0, r7
 8016ade:	f7ff ffbb 	bl	8016a58 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8016ae2:	e005      	b.n	8016af0 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x4c>
 8016ae4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016ae8:	2900      	cmp	r1, #0
 8016aea:	d0ec      	beq.n	8016ac6 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x22>
 8016aec:	4294      	cmp	r4, r2
 8016aee:	d102      	bne.n	8016af6 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x52>
 8016af0:	b005      	add	sp, #20
 8016af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016af6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016afa:	f805 3b01 	strb.w	r3, [r5], #1
 8016afe:	e7f5      	b.n	8016aec <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x48>
 8016b00:	40024000 	andmi	r4, r2, r0

08016b04 <ConfigStore::Flash()>:
 8016b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016b06:	4c24      	ldr	r4, [pc, #144]	@ (8016b98 <ConfigStore::Flash()+0x94>)
 8016b08:	6823      	ldr	r3, [r4, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d041      	beq.n	8016b92 <ConfigStore::Flash()+0x8e>
 8016b0e:	3b01      	subs	r3, #1
 8016b10:	2b05      	cmp	r3, #5
 8016b12:	d82f      	bhi.n	8016b74 <ConfigStore::Flash()+0x70>
 8016b14:	e8df f003 	tbb	[pc, r3]
 8016b18:	2c140b03 			@ <UNDEFINED> instruction: 0x2c140b03
 8016b1c:	4b1f2e23 	blmi	87e23b0 <_sidata+0x7c2be0>
 8016b20:	681a      	ldr	r2, [r3, #0]
 8016b22:	4b1f      	ldr	r3, [pc, #124]	@ (8016ba0 <ConfigStore::Flash()+0x9c>)
 8016b24:	601a      	str	r2, [r3, #0]
 8016b26:	2302      	movs	r3, #2
 8016b28:	6023      	str	r3, [r4, #0]
 8016b2a:	2001      	movs	r0, #1
 8016b2c:	e02f      	b.n	8016b8e <ConfigStore::Flash()+0x8a>
 8016b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8016b9c <ConfigStore::Flash()+0x98>)
 8016b30:	4a1b      	ldr	r2, [pc, #108]	@ (8016ba0 <ConfigStore::Flash()+0x9c>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	6812      	ldr	r2, [r2, #0]
 8016b36:	1a9b      	subs	r3, r3, r2
 8016b38:	2b63      	cmp	r3, #99	@ 0x63
 8016b3a:	d9f6      	bls.n	8016b2a <ConfigStore::Flash()+0x26>
 8016b3c:	2303      	movs	r3, #3
 8016b3e:	e7f3      	b.n	8016b28 <ConfigStore::Flash()+0x24>
 8016b40:	4918      	ldr	r1, [pc, #96]	@ (8016ba4 <ConfigStore::Flash()+0xa0>)
 8016b42:	ab03      	add	r3, sp, #12
 8016b44:	6809      	ldr	r1, [r1, #0]
 8016b46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8016b4a:	f000 f8fa 	bl	8016d42 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	d0eb      	beq.n	8016b2a <ConfigStore::Flash()+0x26>
 8016b52:	4b12      	ldr	r3, [pc, #72]	@ (8016b9c <ConfigStore::Flash()+0x98>)
 8016b54:	681a      	ldr	r2, [r3, #0]
 8016b56:	4b12      	ldr	r3, [pc, #72]	@ (8016ba0 <ConfigStore::Flash()+0x9c>)
 8016b58:	601a      	str	r2, [r3, #0]
 8016b5a:	2305      	movs	r3, #5
 8016b5c:	e7e4      	b.n	8016b28 <ConfigStore::Flash()+0x24>
 8016b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8016b9c <ConfigStore::Flash()+0x98>)
 8016b60:	4a0f      	ldr	r2, [pc, #60]	@ (8016ba0 <ConfigStore::Flash()+0x9c>)
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	6812      	ldr	r2, [r2, #0]
 8016b66:	1a9b      	subs	r3, r3, r2
 8016b68:	2b63      	cmp	r3, #99	@ 0x63
 8016b6a:	d9de      	bls.n	8016b2a <ConfigStore::Flash()+0x26>
 8016b6c:	2304      	movs	r3, #4
 8016b6e:	e7db      	b.n	8016b28 <ConfigStore::Flash()+0x24>
 8016b70:	2306      	movs	r3, #6
 8016b72:	e7d9      	b.n	8016b28 <ConfigStore::Flash()+0x24>
 8016b74:	ab03      	add	r3, sp, #12
 8016b76:	4a0c      	ldr	r2, [pc, #48]	@ (8016ba8 <ConfigStore::Flash()+0xa4>)
 8016b78:	490a      	ldr	r1, [pc, #40]	@ (8016ba4 <ConfigStore::Flash()+0xa0>)
 8016b7a:	9300      	str	r3, [sp, #0]
 8016b7c:	6812      	ldr	r2, [r2, #0]
 8016b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8016bac <ConfigStore::Flash()+0xa8>)
 8016b80:	6809      	ldr	r1, [r1, #0]
 8016b82:	f000 f8e2 	bl	8016d4a <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d0cf      	beq.n	8016b2a <ConfigStore::Flash()+0x26>
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	6020      	str	r0, [r4, #0]
 8016b8e:	b004      	add	sp, #16
 8016b90:	bd10      	pop	{r4, pc}
 8016b92:	4618      	mov	r0, r3
 8016b94:	e7fb      	b.n	8016b8e <ConfigStore::Flash()+0x8a>
 8016b96:	bf00      	nop
 8016b98:	2000e2dc 	ldrdcs	lr, [r0], -ip
 8016b9c:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8016ba0:	2000e2d0 	ldrdcs	lr, [r0], -r0
 8016ba4:	2000e2d8 	ldrdcs	lr, [r0], -r8
 8016ba8:	2000e2d4 	ldrdcs	lr, [r0], -r4
 8016bac:	40024000 	andmi	r4, r2, r0

08016bb0 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]>:
 8016bb0:	b510      	push	{r4, lr}
 8016bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8016be8 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x38>)
 8016bb4:	f44f 6461 	mov.w	r4, #3600	@ 0xe10
 8016bb8:	6913      	ldr	r3, [r2, #16]
 8016bba:	fb93 f3f4 	sdiv	r3, r3, r4
 8016bbe:	b25b      	sxtb	r3, r3
 8016bc0:	7003      	strb	r3, [r0, #0]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	6912      	ldr	r2, [r2, #16]
 8016bc6:	dd08      	ble.n	8016bda <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x2a>
 8016bc8:	4808      	ldr	r0, [pc, #32]	@ (8016bec <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x3c>)
 8016bca:	fb00 2203 	mla	r2, r0, r3, r2
 8016bce:	233c      	movs	r3, #60	@ 0x3c
 8016bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8016bd4:	b2d3      	uxtb	r3, r2
 8016bd6:	700b      	strb	r3, [r1, #0]
 8016bd8:	bd10      	pop	{r4, pc}
 8016bda:	4363      	muls	r3, r4
 8016bdc:	1a9b      	subs	r3, r3, r2
 8016bde:	223c      	movs	r2, #60	@ 0x3c
 8016be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	e7f6      	b.n	8016bd6 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x26>
 8016be8:	40024000 	andmi	r4, r2, r0
 8016bec:	fffff1f0 			@ <UNDEFINED> instruction: 0xfffff1f0

08016bf0 <EnvParams::EnvParams()>:
 8016bf0:	4770      	bx	lr
	...

08016bf4 <EnvParams::LoadAndSet(char const*, unsigned long)>:
 8016bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bf6:	460c      	mov	r4, r1
 8016bf8:	4615      	mov	r5, r2
 8016bfa:	4907      	ldr	r1, [pc, #28]	@ (8016c18 <EnvParams::LoadAndSet(char const*, unsigned long)+0x24>)
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	4668      	mov	r0, sp
 8016c00:	f000 fa2a 	bl	8017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8016c04:	462a      	mov	r2, r5
 8016c06:	4621      	mov	r1, r4
 8016c08:	4668      	mov	r0, sp
 8016c0a:	f000 fa29 	bl	8017060 <ReadConfigFile::Read(char const*, unsigned int)>
 8016c0e:	4668      	mov	r0, sp
 8016c10:	f000 fa25 	bl	801705e <ReadConfigFile::~ReadConfigFile()>
 8016c14:	b003      	add	sp, #12
 8016c16:	bd30      	pop	{r4, r5, pc}
 8016c18:	08016ca9 	stmdaeq	r1, {r0, r3, r5, r7, sl, fp, sp, lr}

08016c1c <EnvParams::callbackFunction(char const*)>:
 8016c1c:	b513      	push	{r0, r1, r4, lr}
 8016c1e:	4608      	mov	r0, r1
 8016c20:	f10d 0307 	add.w	r3, sp, #7
 8016c24:	491c      	ldr	r1, [pc, #112]	@ (8016c98 <EnvParams::callbackFunction(char const*)+0x7c>)
 8016c26:	f10d 0206 	add.w	r2, sp, #6
 8016c2a:	f000 fb5a 	bl	80172e2 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)>
 8016c2e:	bb70      	cbnz	r0, 8016c8e <EnvParams::callbackFunction(char const*)+0x72>
 8016c30:	f99d 1006 	ldrsb.w	r1, [sp, #6]
 8016c34:	f101 030c 	add.w	r3, r1, #12
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	2b1a      	cmp	r3, #26
 8016c3c:	d827      	bhi.n	8016c8e <EnvParams::callbackFunction(char const*)+0x72>
 8016c3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016c42:	bb32      	cbnz	r2, 8016c92 <EnvParams::callbackFunction(char const*)+0x76>
 8016c44:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8016c48:	434b      	muls	r3, r1
 8016c4a:	4a14      	ldr	r2, [pc, #80]	@ (8016c9c <EnvParams::callbackFunction(char const*)+0x80>)
 8016c4c:	6911      	ldr	r1, [r2, #16]
 8016c4e:	4299      	cmp	r1, r3
 8016c50:	bf1f      	itttt	ne
 8016c52:	6113      	strne	r3, [r2, #16]
 8016c54:	4b12      	ldrne	r3, [pc, #72]	@ (8016ca0 <EnvParams::callbackFunction(char const*)+0x84>)
 8016c56:	2201      	movne	r2, #1
 8016c58:	601a      	strne	r2, [r3, #0]
 8016c5a:	e018      	b.n	8016c8e <EnvParams::callbackFunction(char const*)+0x72>
 8016c5c:	f993 4000 	ldrsb.w	r4, [r3]
 8016c60:	428c      	cmp	r4, r1
 8016c62:	d111      	bne.n	8016c88 <EnvParams::callbackFunction(char const*)+0x6c>
 8016c64:	785c      	ldrb	r4, [r3, #1]
 8016c66:	4294      	cmp	r4, r2
 8016c68:	d10e      	bne.n	8016c88 <EnvParams::callbackFunction(char const*)+0x6c>
 8016c6a:	2900      	cmp	r1, #0
 8016c6c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8016c70:	fb01 f303 	mul.w	r3, r1, r3
 8016c74:	bfcb      	itete	gt
 8016c76:	ebc2 1202 	rsbgt	r2, r2, r2, lsl #4
 8016c7a:	f06f 013b 	mvnle.w	r1, #59	@ 0x3b
 8016c7e:	eb03 0382 	addgt.w	r3, r3, r2, lsl #2
 8016c82:	fb01 3302 	mlale	r3, r1, r2, r3
 8016c86:	e7e0      	b.n	8016c4a <EnvParams::callbackFunction(char const*)+0x2e>
 8016c88:	3302      	adds	r3, #2
 8016c8a:	3801      	subs	r0, #1
 8016c8c:	d1e6      	bne.n	8016c5c <EnvParams::callbackFunction(char const*)+0x40>
 8016c8e:	b002      	add	sp, #8
 8016c90:	bd10      	pop	{r4, pc}
 8016c92:	4b04      	ldr	r3, [pc, #16]	@ (8016ca4 <EnvParams::callbackFunction(char const*)+0x88>)
 8016c94:	200c      	movs	r0, #12
 8016c96:	e7f8      	b.n	8016c8a <EnvParams::callbackFunction(char const*)+0x6e>
 8016c98:	0801f21a 	stmdaeq	r1, {r1, r3, r4, r9, ip, sp, lr, pc}
 8016c9c:	40024000 	andmi	r4, r2, r0
 8016ca0:	2000e2dc 	ldrdcs	lr, [r0], -ip
 8016ca4:	0801f204 	stmdaeq	r1, {r2, r9, ip, sp, lr, pc}

08016ca8 <EnvParams::staticCallbackFunction(void*, char const*)>:
 8016ca8:	f7ff bfb8 	b.w	8016c1c <EnvParams::callbackFunction(char const*)>

08016cac <EnvParams::Builder(char*, unsigned long, unsigned long&)>:
 8016cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016cae:	461c      	mov	r4, r3
 8016cb0:	a801      	add	r0, sp, #4
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	460a      	mov	r2, r1
 8016cb6:	4914      	ldr	r1, [pc, #80]	@ (8016d08 <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x5c>)
 8016cb8:	f000 f8f8 	bl	8016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 8016cbc:	f10d 0103 	add.w	r1, sp, #3
 8016cc0:	f10d 0002 	add.w	r0, sp, #2
 8016cc4:	f7ff ff74 	bl	8016bb0 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]>
 8016cc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016ccc:	f99d 2002 	ldrsb.w	r2, [sp, #2]
 8016cd0:	490e      	ldr	r1, [pc, #56]	@ (8016d0c <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x60>)
 8016cd2:	a801      	add	r0, sp, #4
 8016cd4:	f000 f970 	bl	8016fb8 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)>
 8016cd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016cdc:	b17b      	cbz	r3, 8016cfe <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x52>
 8016cde:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016ce2:	9b01      	ldr	r3, [sp, #4]
 8016ce4:	4413      	add	r3, r2
 8016ce6:	227d      	movs	r2, #125	@ 0x7d
 8016ce8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016cec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016cf0:	9901      	ldr	r1, [sp, #4]
 8016cf2:	54ca      	strb	r2, [r1, r3]
 8016cf4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016cf8:	3301      	adds	r3, #1
 8016cfa:	f8ad 300a 	strh.w	r3, [sp, #10]
 8016cfe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016d02:	6023      	str	r3, [r4, #0]
 8016d04:	b004      	add	sp, #16
 8016d06:	bd10      	pop	{r4, pc}
 8016d08:	0801f225 	stmdaeq	r1, {r0, r2, r5, r9, ip, sp, lr, pc}
 8016d0c:	0801f21a 	stmdaeq	r1, {r1, r3, r4, r9, ip, sp, lr, pc}

08016d10 <StoreDevice::StoreDevice()>:
 8016d10:	b510      	push	{r4, lr}
 8016d12:	2301      	movs	r3, #1
 8016d14:	4604      	mov	r4, r0
 8016d16:	7003      	strb	r3, [r0, #0]
 8016d18:	2204      	movs	r2, #4
 8016d1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8016d1e:	4802      	ldr	r0, [pc, #8]	@ (8016d28 <StoreDevice::StoreDevice()+0x18>)
 8016d20:	f003 fbea 	bl	801a4f8 <printf>
 8016d24:	4620      	mov	r0, r4
 8016d26:	bd10      	pop	{r4, pc}
 8016d28:	0801bcb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, fp, ip, sp, pc}

08016d2c <StoreDevice::GetSize() const>:
 8016d2c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8016d30:	4770      	bx	lr

08016d32 <StoreDevice::GetSectorSize() const>:
 8016d32:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8016d36:	4770      	bx	lr

08016d38 <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>:
 8016d38:	9b00      	ldr	r3, [sp, #0]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	601a      	str	r2, [r3, #0]
 8016d3e:	2001      	movs	r0, #1
 8016d40:	4770      	bx	lr

08016d42 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>:
 8016d42:	2200      	movs	r2, #0
 8016d44:	601a      	str	r2, [r3, #0]
 8016d46:	2001      	movs	r0, #1
 8016d48:	4770      	bx	lr

08016d4a <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>:
 8016d4a:	9b00      	ldr	r3, [sp, #0]
 8016d4c:	2200      	movs	r2, #0
 8016d4e:	601a      	str	r2, [r3, #0]
 8016d50:	2001      	movs	r0, #1
 8016d52:	4770      	bx	lr

08016d54 <properties::convert_json_file(char*, unsigned long, bool)>:
 8016d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d58:	7803      	ldrb	r3, [r0, #0]
 8016d5a:	2b7b      	cmp	r3, #123	@ 0x7b
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	f040 80a2 	bne.w	8016ea6 <properties::convert_json_file(char*, unsigned long, bool)+0x152>
 8016d62:	b172      	cbz	r2, 8016d82 <properties::convert_json_file(char*, unsigned long, bool)+0x2e>
 8016d64:	2501      	movs	r5, #1
 8016d66:	4603      	mov	r3, r0
 8016d68:	4628      	mov	r0, r5
 8016d6a:	f04f 0c3d 	mov.w	ip, #61	@ 0x3d
 8016d6e:	f04f 0e0a 	mov.w	lr, #10
 8016d72:	428d      	cmp	r5, r1
 8016d74:	d377      	bcc.n	8016e66 <properties::convert_json_file(char*, unsigned long, bool)+0x112>
 8016d76:	b102      	cbz	r2, 8016d7a <properties::convert_json_file(char*, unsigned long, bool)+0x26>
 8016d78:	3801      	subs	r0, #1
 8016d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d7e:	4635      	mov	r5, r6
 8016d80:	e7f3      	b.n	8016d6a <properties::convert_json_file(char*, unsigned long, bool)+0x16>
 8016d82:	4605      	mov	r5, r0
 8016d84:	2323      	movs	r3, #35	@ 0x23
 8016d86:	f805 3b01 	strb.w	r3, [r5], #1
 8016d8a:	2601      	movs	r6, #1
 8016d8c:	462f      	mov	r7, r5
 8016d8e:	428e      	cmp	r6, r1
 8016d90:	d317      	bcc.n	8016dc2 <properties::convert_json_file(char*, unsigned long, bool)+0x6e>
 8016d92:	1c6b      	adds	r3, r5, #1
 8016d94:	428e      	cmp	r6, r1
 8016d96:	eba3 0004 	sub.w	r0, r3, r4
 8016d9a:	d205      	bcs.n	8016da8 <properties::convert_json_file(char*, unsigned long, bool)+0x54>
 8016d9c:	46bc      	mov	ip, r7
 8016d9e:	f81c eb01 	ldrb.w	lr, [ip], #1
 8016da2:	f1be 0f22 	cmp.w	lr, #34	@ 0x22
 8016da6:	d112      	bne.n	8016dce <properties::convert_json_file(char*, unsigned long, bool)+0x7a>
 8016da8:	240a      	movs	r4, #10
 8016daa:	702c      	strb	r4, [r5, #0]
 8016dac:	463c      	mov	r4, r7
 8016dae:	3701      	adds	r7, #1
 8016db0:	7825      	ldrb	r5, [r4, #0]
 8016db2:	2d7b      	cmp	r5, #123	@ 0x7b
 8016db4:	d0e3      	beq.n	8016d7e <properties::convert_json_file(char*, unsigned long, bool)+0x2a>
 8016db6:	428e      	cmp	r6, r1
 8016db8:	f106 0501 	add.w	r5, r6, #1
 8016dbc:	d2d5      	bcs.n	8016d6a <properties::convert_json_file(char*, unsigned long, bool)+0x16>
 8016dbe:	462e      	mov	r6, r5
 8016dc0:	e7f4      	b.n	8016dac <properties::convert_json_file(char*, unsigned long, bool)+0x58>
 8016dc2:	f817 3b01 	ldrb.w	r3, [r7], #1
 8016dc6:	2b22      	cmp	r3, #34	@ 0x22
 8016dc8:	d0e3      	beq.n	8016d92 <properties::convert_json_file(char*, unsigned long, bool)+0x3e>
 8016dca:	3601      	adds	r6, #1
 8016dcc:	e7df      	b.n	8016d8e <properties::convert_json_file(char*, unsigned long, bool)+0x3a>
 8016dce:	f803 ec01 	strb.w	lr, [r3, #-1]
 8016dd2:	3601      	adds	r6, #1
 8016dd4:	4667      	mov	r7, ip
 8016dd6:	461d      	mov	r5, r3
 8016dd8:	e7db      	b.n	8016d92 <properties::convert_json_file(char*, unsigned long, bool)+0x3e>
 8016dda:	f1b8 0f22 	cmp.w	r8, #34	@ 0x22
 8016dde:	d142      	bne.n	8016e66 <properties::convert_json_file(char*, unsigned long, bool)+0x112>
 8016de0:	eba0 0904 	sub.w	r9, r0, r4
 8016de4:	f894 8000 	ldrb.w	r8, [r4]
 8016de8:	f1b8 0f22 	cmp.w	r8, #34	@ 0x22
 8016dec:	eb04 0009 	add.w	r0, r4, r9
 8016df0:	4626      	mov	r6, r4
 8016df2:	f105 0701 	add.w	r7, r5, #1
 8016df6:	f104 0401 	add.w	r4, r4, #1
 8016dfa:	d13f      	bne.n	8016e7c <properties::convert_json_file(char*, unsigned long, bool)+0x128>
 8016dfc:	f803 cb01 	strb.w	ip, [r3], #1
 8016e00:	3001      	adds	r0, #1
 8016e02:	462f      	mov	r7, r5
 8016e04:	428f      	cmp	r7, r1
 8016e06:	f896 8000 	ldrb.w	r8, [r6]
 8016e0a:	4634      	mov	r4, r6
 8016e0c:	f107 0701 	add.w	r7, r7, #1
 8016e10:	f106 0601 	add.w	r6, r6, #1
 8016e14:	d338      	bcc.n	8016e88 <properties::convert_json_file(char*, unsigned long, bool)+0x134>
 8016e16:	7825      	ldrb	r5, [r4, #0]
 8016e18:	2d20      	cmp	r5, #32
 8016e1a:	4626      	mov	r6, r4
 8016e1c:	46b8      	mov	r8, r7
 8016e1e:	f104 0401 	add.w	r4, r4, #1
 8016e22:	f107 0701 	add.w	r7, r7, #1
 8016e26:	d134      	bne.n	8016e92 <properties::convert_json_file(char*, unsigned long, bool)+0x13e>
 8016e28:	4588      	cmp	r8, r1
 8016e2a:	d3f4      	bcc.n	8016e16 <properties::convert_json_file(char*, unsigned long, bool)+0xc2>
 8016e2c:	46b8      	mov	r8, r7
 8016e2e:	7834      	ldrb	r4, [r6, #0]
 8016e30:	2c22      	cmp	r4, #34	@ 0x22
 8016e32:	d100      	bne.n	8016e36 <properties::convert_json_file(char*, unsigned long, bool)+0xe2>
 8016e34:	3601      	adds	r6, #1
 8016e36:	4634      	mov	r4, r6
 8016e38:	f108 0501 	add.w	r5, r8, #1
 8016e3c:	f814 7b01 	ldrb.w	r7, [r4], #1
 8016e40:	2f22      	cmp	r7, #34	@ 0x22
 8016e42:	d02a      	beq.n	8016e9a <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8016e44:	2f2c      	cmp	r7, #44	@ 0x2c
 8016e46:	d028      	beq.n	8016e9a <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8016e48:	2f7d      	cmp	r7, #125	@ 0x7d
 8016e4a:	d026      	beq.n	8016e9a <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8016e4c:	4588      	cmp	r8, r1
 8016e4e:	d228      	bcs.n	8016ea2 <properties::convert_json_file(char*, unsigned long, bool)+0x14e>
 8016e50:	f1a7 0820 	sub.w	r8, r7, #32
 8016e54:	f1b8 0f5a 	cmp.w	r8, #90	@ 0x5a
 8016e58:	d803      	bhi.n	8016e62 <properties::convert_json_file(char*, unsigned long, bool)+0x10e>
 8016e5a:	f803 7b01 	strb.w	r7, [r3], #1
 8016e5e:	3001      	adds	r0, #1
 8016e60:	4626      	mov	r6, r4
 8016e62:	46a8      	mov	r8, r5
 8016e64:	e7e7      	b.n	8016e36 <properties::convert_json_file(char*, unsigned long, bool)+0xe2>
 8016e66:	428d      	cmp	r5, r1
 8016e68:	f894 8000 	ldrb.w	r8, [r4]
 8016e6c:	4627      	mov	r7, r4
 8016e6e:	f105 0501 	add.w	r5, r5, #1
 8016e72:	f104 0401 	add.w	r4, r4, #1
 8016e76:	d3b0      	bcc.n	8016dda <properties::convert_json_file(char*, unsigned long, bool)+0x86>
 8016e78:	463c      	mov	r4, r7
 8016e7a:	e7b1      	b.n	8016de0 <properties::convert_json_file(char*, unsigned long, bool)+0x8c>
 8016e7c:	428d      	cmp	r5, r1
 8016e7e:	d2c1      	bcs.n	8016e04 <properties::convert_json_file(char*, unsigned long, bool)+0xb0>
 8016e80:	f803 8b01 	strb.w	r8, [r3], #1
 8016e84:	463d      	mov	r5, r7
 8016e86:	e7ad      	b.n	8016de4 <properties::convert_json_file(char*, unsigned long, bool)+0x90>
 8016e88:	f1b8 0f3a 	cmp.w	r8, #58	@ 0x3a
 8016e8c:	d1ba      	bne.n	8016e04 <properties::convert_json_file(char*, unsigned long, bool)+0xb0>
 8016e8e:	4634      	mov	r4, r6
 8016e90:	e7c1      	b.n	8016e16 <properties::convert_json_file(char*, unsigned long, bool)+0xc2>
 8016e92:	2d22      	cmp	r5, #34	@ 0x22
 8016e94:	bf08      	it	eq
 8016e96:	4626      	moveq	r6, r4
 8016e98:	e7c9      	b.n	8016e2e <properties::convert_json_file(char*, unsigned long, bool)+0xda>
 8016e9a:	f803 eb01 	strb.w	lr, [r3], #1
 8016e9e:	3001      	adds	r0, #1
 8016ea0:	4645      	mov	r5, r8
 8016ea2:	3501      	adds	r5, #1
 8016ea4:	e765      	b.n	8016d72 <properties::convert_json_file(char*, unsigned long, bool)+0x1e>
 8016ea6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016eaa:	e766      	b.n	8016d7a <properties::convert_json_file(char*, unsigned long, bool)+0x26>

08016eac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>:
 8016eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eb0:	6002      	str	r2, [r0, #0]
 8016eb2:	4614      	mov	r4, r2
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	80c2      	strh	r2, [r0, #6]
 8016eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8016f2c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x80>)
 8016eba:	8083      	strh	r3, [r0, #4]
 8016ebc:	7812      	ldrb	r2, [r2, #0]
 8016ebe:	f002 0201 	and.w	r2, r2, #1
 8016ec2:	4606      	mov	r6, r0
 8016ec4:	7202      	strb	r2, [r0, #8]
 8016ec6:	4608      	mov	r0, r1
 8016ec8:	4605      	mov	r5, r0
 8016eca:	3001      	adds	r0, #1
 8016ecc:	782f      	ldrb	r7, [r5, #0]
 8016ece:	2f00      	cmp	r7, #0
 8016ed0:	d1fa      	bne.n	8016ec8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x1c>
 8016ed2:	1a6d      	subs	r5, r5, r1
 8016ed4:	b29b      	uxth	r3, r3
 8016ed6:	b1d2      	cbz	r2, 8016f0e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x62>
 8016ed8:	1d2f      	adds	r7, r5, #4
 8016eda:	429f      	cmp	r7, r3
 8016edc:	d814      	bhi.n	8016f08 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 8016ede:	f04f 087b 	mov.w	r8, #123	@ 0x7b
 8016ee2:	f04f 0922 	mov.w	r9, #34	@ 0x22
 8016ee6:	462a      	mov	r2, r5
 8016ee8:	f884 8000 	strb.w	r8, [r4]
 8016eec:	f884 9001 	strb.w	r9, [r4, #1]
 8016ef0:	1ca0      	adds	r0, r4, #2
 8016ef2:	f003 f806 	bl	8019f02 <memmove>
 8016ef6:	1963      	adds	r3, r4, r5
 8016ef8:	223a      	movs	r2, #58	@ 0x3a
 8016efa:	f883 9002 	strb.w	r9, [r3, #2]
 8016efe:	70da      	strb	r2, [r3, #3]
 8016f00:	3505      	adds	r5, #5
 8016f02:	f804 8007 	strb.w	r8, [r4, r7]
 8016f06:	80f5      	strh	r5, [r6, #6]
 8016f08:	4630      	mov	r0, r6
 8016f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f0e:	1caf      	adds	r7, r5, #2
 8016f10:	42bb      	cmp	r3, r7
 8016f12:	d3f9      	bcc.n	8016f08 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 8016f14:	4620      	mov	r0, r4
 8016f16:	2323      	movs	r3, #35	@ 0x23
 8016f18:	f800 3b01 	strb.w	r3, [r0], #1
 8016f1c:	462a      	mov	r2, r5
 8016f1e:	442c      	add	r4, r5
 8016f20:	f002 ffef 	bl	8019f02 <memmove>
 8016f24:	230a      	movs	r3, #10
 8016f26:	7063      	strb	r3, [r4, #1]
 8016f28:	80f7      	strh	r7, [r6, #6]
 8016f2a:	e7ed      	b.n	8016f08 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 8016f2c:	2000e2e1 	andcs	lr, r0, r1, ror #5

08016f30 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>:
 8016f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f32:	469c      	mov	ip, r3
 8016f34:	8885      	ldrh	r5, [r0, #4]
 8016f36:	88c3      	ldrh	r3, [r0, #6]
 8016f38:	42ab      	cmp	r3, r5
 8016f3a:	b085      	sub	sp, #20
 8016f3c:	d302      	bcc.n	8016f44 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x14>
 8016f3e:	2000      	movs	r0, #0
 8016f40:	b005      	add	sp, #20
 8016f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f44:	4604      	mov	r4, r0
 8016f46:	6800      	ldr	r0, [r0, #0]
 8016f48:	f894 e008 	ldrb.w	lr, [r4, #8]
 8016f4c:	4418      	add	r0, r3
 8016f4e:	1aed      	subs	r5, r5, r3
 8016f50:	b2d6      	uxtb	r6, r2
 8016f52:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8016f56:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8016f5a:	0e12      	lsrs	r2, r2, #24
 8016f5c:	f1bc 0f00 	cmp.w	ip, #0
 8016f60:	d109      	bne.n	8016f76 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x46>
 8016f62:	f1be 0f00 	cmp.w	lr, #0
 8016f66:	d109      	bne.n	8016f7c <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x4c>
 8016f68:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016f6c:	e9cd 6700 	strd	r6, r7, [sp]
 8016f70:	4a0e      	ldr	r2, [pc, #56]	@ (8016fac <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x7c>)
 8016f72:	460b      	mov	r3, r1
 8016f74:	e008      	b.n	8016f88 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x58>
 8016f76:	f1be 0f00 	cmp.w	lr, #0
 8016f7a:	d00f      	beq.n	8016f9c <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x6c>
 8016f7c:	e9cd 6700 	strd	r6, r7, [sp]
 8016f80:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016f84:	4a0a      	ldr	r2, [pc, #40]	@ (8016fb0 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x80>)
 8016f86:	460b      	mov	r3, r1
 8016f88:	4629      	mov	r1, r5
 8016f8a:	f003 fadd 	bl	801a548 <snprintf>
 8016f8e:	4285      	cmp	r5, r0
 8016f90:	dbd5      	blt.n	8016f3e <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0xe>
 8016f92:	88e3      	ldrh	r3, [r4, #6]
 8016f94:	4403      	add	r3, r0
 8016f96:	80e3      	strh	r3, [r4, #6]
 8016f98:	2001      	movs	r0, #1
 8016f9a:	e7d1      	b.n	8016f40 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x10>
 8016f9c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016fa0:	e9cd 6700 	strd	r6, r7, [sp]
 8016fa4:	4a03      	ldr	r2, [pc, #12]	@ (8016fb4 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x84>)
 8016fa6:	460b      	mov	r3, r1
 8016fa8:	e7ee      	b.n	8016f88 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x58>
 8016faa:	bf00      	nop
 8016fac:	0801bcfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, pc}
 8016fb0:	0801bce9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, fp, ip, sp, pc}
 8016fb4:	0801bcfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, pc}

08016fb8 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)>:
 8016fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fba:	88c6      	ldrh	r6, [r0, #6]
 8016fbc:	8885      	ldrh	r5, [r0, #4]
 8016fbe:	42ae      	cmp	r6, r5
 8016fc0:	b085      	sub	sp, #20
 8016fc2:	d302      	bcc.n	8016fca <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x12>
 8016fc4:	2000      	movs	r0, #0
 8016fc6:	b005      	add	sp, #20
 8016fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fca:	4604      	mov	r4, r0
 8016fcc:	6800      	ldr	r0, [r0, #0]
 8016fce:	1bad      	subs	r5, r5, r6
 8016fd0:	4430      	add	r0, r6
 8016fd2:	7a26      	ldrb	r6, [r4, #8]
 8016fd4:	b19e      	cbz	r6, 8016ffe <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x46>
 8016fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8017014 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x5c>)
 8016fd8:	4f0f      	ldr	r7, [pc, #60]	@ (8017018 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x60>)
 8016fda:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8016fde:	2a00      	cmp	r2, #0
 8016fe0:	bfc8      	it	gt
 8016fe2:	463e      	movgt	r6, r7
 8016fe4:	4a0d      	ldr	r2, [pc, #52]	@ (801701c <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x64>)
 8016fe6:	9600      	str	r6, [sp, #0]
 8016fe8:	460b      	mov	r3, r1
 8016fea:	4629      	mov	r1, r5
 8016fec:	f003 faac 	bl	801a548 <snprintf>
 8016ff0:	4285      	cmp	r5, r0
 8016ff2:	dbe7      	blt.n	8016fc4 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0xc>
 8016ff4:	88e3      	ldrh	r3, [r4, #6]
 8016ff6:	4403      	add	r3, r0
 8016ff8:	80e3      	strh	r3, [r4, #6]
 8016ffa:	2001      	movs	r0, #1
 8016ffc:	e7e3      	b.n	8016fc6 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0xe>
 8016ffe:	4e05      	ldr	r6, [pc, #20]	@ (8017014 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x5c>)
 8017000:	4f05      	ldr	r7, [pc, #20]	@ (8017018 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x60>)
 8017002:	2a00      	cmp	r2, #0
 8017004:	bfc8      	it	gt
 8017006:	463e      	movgt	r6, r7
 8017008:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801700c:	9600      	str	r6, [sp, #0]
 801700e:	4a04      	ldr	r2, [pc, #16]	@ (8017020 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x68>)
 8017010:	460b      	mov	r3, r1
 8017012:	e7ea      	b.n	8016fea <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x32>
 8017014:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 8017018:	0801bd0e 	stmdaeq	r1, {r1, r2, r3, r8, sl, fp, ip, sp, pc}
 801701c:	0801bd10 	stmdaeq	r1, {r4, r8, sl, fp, ip, sp, pc}
 8017020:	0801bd24 	stmdaeq	r1, {r2, r5, r8, sl, fp, ip, sp, pc}

08017024 <PropertiesBuilder::AddComment(char const*)>:
 8017024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017026:	7a06      	ldrb	r6, [r0, #8]
 8017028:	b98e      	cbnz	r6, 801704e <PropertiesBuilder::AddComment(char const*)+0x2a>
 801702a:	4604      	mov	r4, r0
 801702c:	88c0      	ldrh	r0, [r0, #6]
 801702e:	88a5      	ldrh	r5, [r4, #4]
 8017030:	42a8      	cmp	r0, r5
 8017032:	d20d      	bcs.n	8017050 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8017034:	6827      	ldr	r7, [r4, #0]
 8017036:	4a07      	ldr	r2, [pc, #28]	@ (8017054 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8017038:	1a2d      	subs	r5, r5, r0
 801703a:	460b      	mov	r3, r1
 801703c:	4438      	add	r0, r7
 801703e:	4629      	mov	r1, r5
 8017040:	f003 fa82 	bl	801a548 <snprintf>
 8017044:	4285      	cmp	r5, r0
 8017046:	db03      	blt.n	8017050 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8017048:	88e3      	ldrh	r3, [r4, #6]
 801704a:	4418      	add	r0, r3
 801704c:	80e0      	strh	r0, [r4, #6]
 801704e:	2601      	movs	r6, #1
 8017050:	4630      	mov	r0, r6
 8017052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017054:	0801bd33 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, fp, ip, sp, pc}

08017058 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8017058:	e9c0 1200 	strd	r1, r2, [r0]
 801705c:	4770      	bx	lr

0801705e <ReadConfigFile::~ReadConfigFile()>:
 801705e:	4770      	bx	lr

08017060 <ReadConfigFile::Read(char const*, unsigned int)>:
 8017060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017064:	b0a0      	sub	sp, #128	@ 0x80
 8017066:	230a      	movs	r3, #10
 8017068:	4607      	mov	r7, r0
 801706a:	460d      	mov	r5, r1
 801706c:	4614      	mov	r4, r2
 801706e:	f88d 3000 	strb.w	r3, [sp]
 8017072:	f04f 0800 	mov.w	r8, #0
 8017076:	b334      	cbz	r4, 80170c6 <ReadConfigFile::Read(char const*, unsigned int)+0x66>
 8017078:	466e      	mov	r6, sp
 801707a:	462a      	mov	r2, r5
 801707c:	4631      	mov	r1, r6
 801707e:	7810      	ldrb	r0, [r2, #0]
 8017080:	280d      	cmp	r0, #13
 8017082:	4613      	mov	r3, r2
 8017084:	f102 0201 	add.w	r2, r2, #1
 8017088:	d009      	beq.n	801709e <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 801708a:	280a      	cmp	r0, #10
 801708c:	d007      	beq.n	801709e <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 801708e:	f806 0b01 	strb.w	r0, [r6], #1
 8017092:	1a73      	subs	r3, r6, r1
 8017094:	2b7f      	cmp	r3, #127	@ 0x7f
 8017096:	dc16      	bgt.n	80170c6 <ReadConfigFile::Read(char const*, unsigned int)+0x66>
 8017098:	3c01      	subs	r4, #1
 801709a:	d1f0      	bne.n	801707e <ReadConfigFile::Read(char const*, unsigned int)+0x1e>
 801709c:	4613      	mov	r3, r2
 801709e:	461d      	mov	r5, r3
 80170a0:	b12c      	cbz	r4, 80170ae <ReadConfigFile::Read(char const*, unsigned int)+0x4e>
 80170a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170a6:	2a0d      	cmp	r2, #13
 80170a8:	d00b      	beq.n	80170c2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80170aa:	2a0a      	cmp	r2, #10
 80170ac:	d009      	beq.n	80170c2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80170ae:	f89d 3000 	ldrb.w	r3, [sp]
 80170b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80170b4:	d9df      	bls.n	8017076 <ReadConfigFile::Read(char const*, unsigned int)+0x16>
 80170b6:	e9d7 3000 	ldrd	r3, r0, [r7]
 80170ba:	f886 8000 	strb.w	r8, [r6]
 80170be:	4798      	blx	r3
 80170c0:	e7d9      	b.n	8017076 <ReadConfigFile::Read(char const*, unsigned int)+0x16>
 80170c2:	3c01      	subs	r4, #1
 80170c4:	e7eb      	b.n	801709e <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 80170c6:	b020      	add	sp, #128	@ 0x80
 80170c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080170cc <Sscan::Char(char const*, char const*, char*, unsigned long&)>:
 80170cc:	b570      	push	{r4, r5, r6, lr}
 80170ce:	4615      	mov	r5, r2
 80170d0:	461c      	mov	r4, r3
 80170d2:	f000 f950 	bl	8017376 <Sscan::checkName(char const*, char const*)>
 80170d6:	b170      	cbz	r0, 80170f6 <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x2a>
 80170d8:	2100      	movs	r1, #0
 80170da:	5c43      	ldrb	r3, [r0, r1]
 80170dc:	6826      	ldr	r6, [r4, #0]
 80170de:	b28a      	uxth	r2, r1
 80170e0:	b11b      	cbz	r3, 80170ea <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x1e>
 80170e2:	4296      	cmp	r6, r2
 80170e4:	d804      	bhi.n	80170f0 <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x24>
 80170e6:	2b0a      	cmp	r3, #10
 80170e8:	d107      	bne.n	80170fa <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x2e>
 80170ea:	6022      	str	r2, [r4, #0]
 80170ec:	2000      	movs	r0, #0
 80170ee:	bd70      	pop	{r4, r5, r6, pc}
 80170f0:	546b      	strb	r3, [r5, r1]
 80170f2:	3101      	adds	r1, #1
 80170f4:	e7f1      	b.n	80170da <Sscan::Char(char const*, char const*, char*, unsigned long&)+0xe>
 80170f6:	2001      	movs	r0, #1
 80170f8:	e7f9      	b.n	80170ee <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x22>
 80170fa:	2002      	movs	r0, #2
 80170fc:	e7f7      	b.n	80170ee <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x22>

080170fe <Sscan::Float(char const*, char const*, float&)>:
 80170fe:	b570      	push	{r4, r5, r6, lr}
 8017100:	4614      	mov	r4, r2
 8017102:	f000 f938 	bl	8017376 <Sscan::checkName(char const*, char const*)>
 8017106:	2800      	cmp	r0, #0
 8017108:	d049      	beq.n	801719e <Sscan::Float(char const*, char const*, float&)+0xa0>
 801710a:	7803      	ldrb	r3, [r0, #0]
 801710c:	2b2d      	cmp	r3, #45	@ 0x2d
 801710e:	bf04      	itt	eq
 8017110:	3001      	addeq	r0, #1
 8017112:	2501      	moveq	r5, #1
 8017114:	7803      	ldrb	r3, [r0, #0]
 8017116:	bf18      	it	ne
 8017118:	2500      	movne	r5, #0
 801711a:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 801711e:	d101      	bne.n	8017124 <Sscan::Float(char const*, char const*, float&)+0x26>
 8017120:	2002      	movs	r0, #2
 8017122:	bd70      	pop	{r4, r5, r6, pc}
 8017124:	2300      	movs	r3, #0
 8017126:	7802      	ldrb	r2, [r0, #0]
 8017128:	3a30      	subs	r2, #48	@ 0x30
 801712a:	2a09      	cmp	r2, #9
 801712c:	d8f8      	bhi.n	8017120 <Sscan::Float(char const*, char const*, float&)+0x22>
 801712e:	210a      	movs	r1, #10
 8017130:	fb01 2303 	mla	r3, r1, r3, r2
 8017134:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8017138:	2a2e      	cmp	r2, #46	@ 0x2e
 801713a:	d002      	beq.n	8017142 <Sscan::Float(char const*, char const*, float&)+0x44>
 801713c:	f012 0fdf 	tst.w	r2, #223	@ 0xdf
 8017140:	d1f1      	bne.n	8017126 <Sscan::Float(char const*, char const*, float&)+0x28>
 8017142:	ee07 3a90 	vmov	s15, r3
 8017146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801714a:	edc4 7a00 	vstr	s15, [r4]
 801714e:	7803      	ldrb	r3, [r0, #0]
 8017150:	2b2e      	cmp	r3, #46	@ 0x2e
 8017152:	d006      	beq.n	8017162 <Sscan::Float(char const*, char const*, float&)+0x64>
 8017154:	b11d      	cbz	r5, 801715e <Sscan::Float(char const*, char const*, float&)+0x60>
 8017156:	eef1 7a67 	vneg.f32	s15, s15
 801715a:	edc4 7a00 	vstr	s15, [r4]
 801715e:	2000      	movs	r0, #0
 8017160:	e7df      	b.n	8017122 <Sscan::Float(char const*, char const*, float&)+0x24>
 8017162:	2301      	movs	r3, #1
 8017164:	2200      	movs	r2, #0
 8017166:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 801716a:	f011 0fdf 	tst.w	r1, #223	@ 0xdf
 801716e:	d10e      	bne.n	801718e <Sscan::Float(char const*, char const*, float&)+0x90>
 8017170:	ee07 2a10 	vmov	s14, r2
 8017174:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8017178:	ee07 3a10 	vmov	s14, r3
 801717c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017180:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8017184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017188:	2d00      	cmp	r5, #0
 801718a:	d1e4      	bne.n	8017156 <Sscan::Float(char const*, char const*, float&)+0x58>
 801718c:	e7e5      	b.n	801715a <Sscan::Float(char const*, char const*, float&)+0x5c>
 801718e:	3930      	subs	r1, #48	@ 0x30
 8017190:	2909      	cmp	r1, #9
 8017192:	d8c5      	bhi.n	8017120 <Sscan::Float(char const*, char const*, float&)+0x22>
 8017194:	260a      	movs	r6, #10
 8017196:	fb06 1202 	mla	r2, r6, r2, r1
 801719a:	4373      	muls	r3, r6
 801719c:	e7e3      	b.n	8017166 <Sscan::Float(char const*, char const*, float&)+0x68>
 801719e:	2001      	movs	r0, #1
 80171a0:	e7bf      	b.n	8017122 <Sscan::Float(char const*, char const*, float&)+0x24>

080171a2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>:
 80171a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171a4:	4615      	mov	r5, r2
 80171a6:	f000 f8e6 	bl	8017376 <Sscan::checkName(char const*, char const*)>
 80171aa:	bb60      	cbnz	r0, 8017206 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x64>
 80171ac:	2001      	movs	r0, #1
 80171ae:	e028      	b.n	8017202 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x60>
 80171b0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80171b4:	2b09      	cmp	r3, #9
 80171b6:	d823      	bhi.n	8017200 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 80171b8:	230a      	movs	r3, #10
 80171ba:	fb03 2101 	mla	r1, r3, r1, r2
 80171be:	3930      	subs	r1, #48	@ 0x30
 80171c0:	4603      	mov	r3, r0
 80171c2:	4618      	mov	r0, r3
 80171c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171c8:	2a2e      	cmp	r2, #46	@ 0x2e
 80171ca:	d115      	bne.n	80171f8 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x56>
 80171cc:	29ff      	cmp	r1, #255	@ 0xff
 80171ce:	d817      	bhi.n	8017200 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 80171d0:	3401      	adds	r4, #1
 80171d2:	2c03      	cmp	r4, #3
 80171d4:	f806 1b01 	strb.w	r1, [r6], #1
 80171d8:	d117      	bne.n	801720a <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x68>
 80171da:	1d1a      	adds	r2, r3, #4
 80171dc:	2400      	movs	r4, #0
 80171de:	260a      	movs	r6, #10
 80171e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80171e4:	f011 00df 	ands.w	r0, r1, #223	@ 0xdf
 80171e8:	d113      	bne.n	8017212 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x70>
 80171ea:	2cff      	cmp	r4, #255	@ 0xff
 80171ec:	d808      	bhi.n	8017200 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 80171ee:	f88d 4007 	strb.w	r4, [sp, #7]
 80171f2:	9b01      	ldr	r3, [sp, #4]
 80171f4:	602b      	str	r3, [r5, #0]
 80171f6:	e004      	b.n	8017202 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x60>
 80171f8:	2a00      	cmp	r2, #0
 80171fa:	d0e7      	beq.n	80171cc <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x2a>
 80171fc:	42b8      	cmp	r0, r7
 80171fe:	d1d7      	bne.n	80171b0 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0xe>
 8017200:	2002      	movs	r0, #2
 8017202:	b003      	add	sp, #12
 8017204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017206:	ae01      	add	r6, sp, #4
 8017208:	2400      	movs	r4, #0
 801720a:	4603      	mov	r3, r0
 801720c:	1d07      	adds	r7, r0, #4
 801720e:	2100      	movs	r1, #0
 8017210:	e7d7      	b.n	80171c2 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x20>
 8017212:	4293      	cmp	r3, r2
 8017214:	d0f4      	beq.n	8017200 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 8017216:	3930      	subs	r1, #48	@ 0x30
 8017218:	2909      	cmp	r1, #9
 801721a:	d8f1      	bhi.n	8017200 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 801721c:	fb06 1404 	mla	r4, r6, r4, r1
 8017220:	e7de      	b.n	80171e0 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x3e>

08017222 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8017222:	b538      	push	{r3, r4, r5, lr}
 8017224:	4615      	mov	r5, r2
 8017226:	f000 f8a6 	bl	8017376 <Sscan::checkName(char const*, char const*)>
 801722a:	b190      	cbz	r0, 8017252 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x30>
 801722c:	4601      	mov	r1, r0
 801722e:	2400      	movs	r4, #0
 8017230:	780b      	ldrb	r3, [r1, #0]
 8017232:	3b30      	subs	r3, #48	@ 0x30
 8017234:	2b09      	cmp	r3, #9
 8017236:	d80e      	bhi.n	8017256 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8017238:	220a      	movs	r2, #10
 801723a:	fb02 3404 	mla	r4, r2, r4, r3
 801723e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017242:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 8017246:	d1f3      	bne.n	8017230 <Sscan::Uint16(char const*, char const*, unsigned short&)+0xe>
 8017248:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 801724c:	d203      	bcs.n	8017256 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 801724e:	802c      	strh	r4, [r5, #0]
 8017250:	bd38      	pop	{r3, r4, r5, pc}
 8017252:	2001      	movs	r0, #1
 8017254:	e7fc      	b.n	8017250 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x2e>
 8017256:	2002      	movs	r0, #2
 8017258:	e7fa      	b.n	8017250 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x2e>

0801725a <Sscan::Uint32(char const*, char const*, unsigned long&)>:
 801725a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725c:	4616      	mov	r6, r2
 801725e:	f000 f88a 	bl	8017376 <Sscan::checkName(char const*, char const*)>
 8017262:	b1f8      	cbz	r0, 80172a4 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4a>
 8017264:	2300      	movs	r3, #0
 8017266:	4605      	mov	r5, r0
 8017268:	461c      	mov	r4, r3
 801726a:	782a      	ldrb	r2, [r5, #0]
 801726c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017270:	2909      	cmp	r1, #9
 8017272:	d819      	bhi.n	80172a8 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4e>
 8017274:	200a      	movs	r0, #10
 8017276:	fba3 3700 	umull	r3, r7, r3, r0
 801727a:	3a30      	subs	r2, #48	@ 0x30
 801727c:	eb62 0202 	sbc.w	r2, r2, r2
 8017280:	18cb      	adds	r3, r1, r3
 8017282:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8017286:	fb00 7404 	mla	r4, r0, r4, r7
 801728a:	eb44 0402 	adc.w	r4, r4, r2
 801728e:	f011 00df 	ands.w	r0, r1, #223	@ 0xdf
 8017292:	d1ea      	bne.n	801726a <Sscan::Uint32(char const*, char const*, unsigned long&)+0x10>
 8017294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017298:	429a      	cmp	r2, r3
 801729a:	eb70 0404 	sbcs.w	r4, r0, r4
 801729e:	d303      	bcc.n	80172a8 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4e>
 80172a0:	6033      	str	r3, [r6, #0]
 80172a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a4:	2001      	movs	r0, #1
 80172a6:	e7fc      	b.n	80172a2 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x48>
 80172a8:	2002      	movs	r0, #2
 80172aa:	e7fa      	b.n	80172a2 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x48>

080172ac <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80172ac:	b538      	push	{r3, r4, r5, lr}
 80172ae:	4615      	mov	r5, r2
 80172b0:	f000 f861 	bl	8017376 <Sscan::checkName(char const*, char const*)>
 80172b4:	b188      	cbz	r0, 80172da <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2e>
 80172b6:	4601      	mov	r1, r0
 80172b8:	2400      	movs	r4, #0
 80172ba:	780b      	ldrb	r3, [r1, #0]
 80172bc:	3b30      	subs	r3, #48	@ 0x30
 80172be:	2b09      	cmp	r3, #9
 80172c0:	d80d      	bhi.n	80172de <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80172c2:	220a      	movs	r2, #10
 80172c4:	fb02 3404 	mla	r4, r2, r4, r3
 80172c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80172cc:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 80172d0:	d1f3      	bne.n	80172ba <Sscan::Uint8(char const*, char const*, unsigned char&)+0xe>
 80172d2:	2cff      	cmp	r4, #255	@ 0xff
 80172d4:	d803      	bhi.n	80172de <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80172d6:	702c      	strb	r4, [r5, #0]
 80172d8:	bd38      	pop	{r3, r4, r5, pc}
 80172da:	2001      	movs	r0, #1
 80172dc:	e7fc      	b.n	80172d8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2c>
 80172de:	2002      	movs	r0, #2
 80172e0:	e7fa      	b.n	80172d8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2c>

080172e2 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)>:
 80172e2:	b570      	push	{r4, r5, r6, lr}
 80172e4:	4615      	mov	r5, r2
 80172e6:	461e      	mov	r6, r3
 80172e8:	f000 f845 	bl	8017376 <Sscan::checkName(char const*, char const*)>
 80172ec:	2800      	cmp	r0, #0
 80172ee:	d040      	beq.n	8017372 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x90>
 80172f0:	7803      	ldrb	r3, [r0, #0]
 80172f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80172f4:	4601      	mov	r1, r0
 80172f6:	d107      	bne.n	8017308 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x26>
 80172f8:	3101      	adds	r1, #1
 80172fa:	2201      	movs	r2, #1
 80172fc:	780b      	ldrb	r3, [r1, #0]
 80172fe:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 8017302:	d106      	bne.n	8017312 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x30>
 8017304:	2002      	movs	r0, #2
 8017306:	bd70      	pop	{r4, r5, r6, pc}
 8017308:	2b2b      	cmp	r3, #43	@ 0x2b
 801730a:	bf08      	it	eq
 801730c:	3101      	addeq	r1, #1
 801730e:	2200      	movs	r2, #0
 8017310:	e7f4      	b.n	80172fc <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x1a>
 8017312:	2300      	movs	r3, #0
 8017314:	702b      	strb	r3, [r5, #0]
 8017316:	780b      	ldrb	r3, [r1, #0]
 8017318:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 801731c:	2801      	cmp	r0, #1
 801731e:	d8f1      	bhi.n	8017304 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017320:	2b31      	cmp	r3, #49	@ 0x31
 8017322:	bf14      	ite	ne
 8017324:	2300      	movne	r3, #0
 8017326:	230a      	moveq	r3, #10
 8017328:	702b      	strb	r3, [r5, #0]
 801732a:	7848      	ldrb	r0, [r1, #1]
 801732c:	3830      	subs	r0, #48	@ 0x30
 801732e:	2809      	cmp	r0, #9
 8017330:	d8e8      	bhi.n	8017304 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017332:	4403      	add	r3, r0
 8017334:	702b      	strb	r3, [r5, #0]
 8017336:	788b      	ldrb	r3, [r1, #2]
 8017338:	2b3a      	cmp	r3, #58	@ 0x3a
 801733a:	d1e3      	bne.n	8017304 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 801733c:	78cc      	ldrb	r4, [r1, #3]
 801733e:	3c30      	subs	r4, #48	@ 0x30
 8017340:	2c09      	cmp	r4, #9
 8017342:	d8df      	bhi.n	8017304 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017344:	790b      	ldrb	r3, [r1, #4]
 8017346:	3b30      	subs	r3, #48	@ 0x30
 8017348:	2b09      	cmp	r3, #9
 801734a:	d8db      	bhi.n	8017304 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 801734c:	7948      	ldrb	r0, [r1, #5]
 801734e:	f010 00df 	ands.w	r0, r0, #223	@ 0xdf
 8017352:	d1d7      	bne.n	8017304 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017354:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017358:	0064      	lsls	r4, r4, #1
 801735a:	b2e4      	uxtb	r4, r4
 801735c:	7034      	strb	r4, [r6, #0]
 801735e:	790b      	ldrb	r3, [r1, #4]
 8017360:	3b30      	subs	r3, #48	@ 0x30
 8017362:	441c      	add	r4, r3
 8017364:	7034      	strb	r4, [r6, #0]
 8017366:	2a00      	cmp	r2, #0
 8017368:	d0cd      	beq.n	8017306 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>
 801736a:	782b      	ldrb	r3, [r5, #0]
 801736c:	425b      	negs	r3, r3
 801736e:	702b      	strb	r3, [r5, #0]
 8017370:	e7c9      	b.n	8017306 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>
 8017372:	2001      	movs	r0, #1
 8017374:	e7c7      	b.n	8017306 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>

08017376 <Sscan::checkName(char const*, char const*)>:
 8017376:	3901      	subs	r1, #1
 8017378:	4602      	mov	r2, r0
 801737a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801737e:	b130      	cbz	r0, 801738e <Sscan::checkName(char const*, char const*)+0x18>
 8017380:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017384:	b10b      	cbz	r3, 801738a <Sscan::checkName(char const*, char const*)+0x14>
 8017386:	4298      	cmp	r0, r3
 8017388:	d0f7      	beq.n	801737a <Sscan::checkName(char const*, char const*)+0x4>
 801738a:	2000      	movs	r0, #0
 801738c:	4770      	bx	lr
 801738e:	7813      	ldrb	r3, [r2, #0]
 8017390:	2b3d      	cmp	r3, #61	@ 0x3d
 8017392:	d1fb      	bne.n	801738c <Sscan::checkName(char const*, char const*)+0x16>
 8017394:	7853      	ldrb	r3, [r2, #1]
 8017396:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 801739a:	d0f7      	beq.n	801738c <Sscan::checkName(char const*, char const*)+0x16>
 801739c:	1c50      	adds	r0, r2, #1
 801739e:	4770      	bx	lr

080173a0 <Display::PrintInfo() [clone .isra.0]>:
 80173a0:	b910      	cbnz	r0, 80173a8 <Display::PrintInfo() [clone .isra.0]+0x8>
 80173a2:	4803      	ldr	r0, [pc, #12]	@ (80173b0 <Display::PrintInfo() [clone .isra.0]+0x10>)
 80173a4:	f003 b8fd 	b.w	801a5a2 <puts>
 80173a8:	6803      	ldr	r3, [r0, #0]
 80173aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80173ac:	4718      	bx	r3
 80173ae:	bf00      	nop
 80173b0:	0801bd3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, fp, ip, sp, pc}

080173b4 <display::timeout::gpio_init()>:
 80173b4:	b510      	push	{r4, lr}
 80173b6:	4c0a      	ldr	r4, [pc, #40]	@ (80173e0 <display::timeout::gpio_init()+0x2c>)
 80173b8:	f640 4002 	movw	r0, #3074	@ 0xc02
 80173bc:	f001 fb28 	bl	8018a10 <rcu_periph_clock_enable>
 80173c0:	4620      	mov	r0, r4
 80173c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80173c6:	2201      	movs	r2, #1
 80173c8:	2100      	movs	r1, #0
 80173ca:	f001 fa9f 	bl	801890c <gpio_mode_set>
 80173ce:	4620      	mov	r0, r4
 80173d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80173d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173d8:	2201      	movs	r2, #1
 80173da:	2100      	movs	r1, #0
 80173dc:	f001 ba96 	b.w	801890c <gpio_mode_set>
 80173e0:	40020800 	andmi	r0, r2, r0, lsl #16

080173e4 <Display::Detect(display::Type)>:
 80173e4:	2902      	cmp	r1, #2
 80173e6:	b538      	push	{r3, r4, r5, lr}
 80173e8:	4604      	mov	r4, r0
 80173ea:	d014      	beq.n	8017416 <Display::Detect(display::Type)+0x32>
 80173ec:	2904      	cmp	r1, #4
 80173ee:	d01b      	beq.n	8017428 <Display::Detect(display::Type)+0x44>
 80173f0:	69a0      	ldr	r0, [r4, #24]
 80173f2:	b168      	cbz	r0, 8017410 <Display::Detect(display::Type)+0x2c>
 80173f4:	6803      	ldr	r3, [r0, #0]
 80173f6:	689b      	ldr	r3, [r3, #8]
 80173f8:	4798      	blx	r3
 80173fa:	4603      	mov	r3, r0
 80173fc:	69a0      	ldr	r0, [r4, #24]
 80173fe:	b9ab      	cbnz	r3, 801742c <Display::Detect(display::Type)+0x48>
 8017400:	b110      	cbz	r0, 8017408 <Display::Detect(display::Type)+0x24>
 8017402:	6803      	ldr	r3, [r0, #0]
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	4798      	blx	r3
 8017408:	2300      	movs	r3, #0
 801740a:	61a3      	str	r3, [r4, #24]
 801740c:	2304      	movs	r3, #4
 801740e:	6023      	str	r3, [r4, #0]
 8017410:	2300      	movs	r3, #0
 8017412:	6123      	str	r3, [r4, #16]
 8017414:	e010      	b.n	8017438 <Display::Detect(display::Type)+0x54>
 8017416:	2020      	movs	r0, #32
 8017418:	f003 fac4 	bl	801a9a4 <operator new(unsigned int)>
 801741c:	2100      	movs	r1, #0
 801741e:	4605      	mov	r5, r0
 8017420:	f000 f8bc 	bl	801759c <Ssd1306::Ssd1306(TOledPanel)>
 8017424:	61a5      	str	r5, [r4, #24]
 8017426:	e7e3      	b.n	80173f0 <Display::Detect(display::Type)+0xc>
 8017428:	6001      	str	r1, [r0, #0]
 801742a:	e7e1      	b.n	80173f0 <Display::Detect(display::Type)+0xc>
 801742c:	6803      	ldr	r3, [r0, #0]
 801742e:	68db      	ldr	r3, [r3, #12]
 8017430:	4798      	blx	r3
 8017432:	69a3      	ldr	r3, [r4, #24]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d0eb      	beq.n	8017410 <Display::Detect(display::Type)+0x2c>
 8017438:	bd38      	pop	{r3, r4, r5, pc}
	...

0801743c <Display::Display()>:
 801743c:	2304      	movs	r3, #4
 801743e:	b510      	push	{r4, lr}
 8017440:	6003      	str	r3, [r0, #0]
 8017442:	4b0e      	ldr	r3, [pc, #56]	@ (801747c <Display::Display()+0x40>)
 8017444:	4a0e      	ldr	r2, [pc, #56]	@ (8017480 <Display::Display()+0x44>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	6043      	str	r3, [r0, #4]
 801744a:	2321      	movs	r3, #33	@ 0x21
 801744c:	7203      	strb	r3, [r0, #8]
 801744e:	4b0d      	ldr	r3, [pc, #52]	@ (8017484 <Display::Display()+0x48>)
 8017450:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8017454:	237f      	movs	r3, #127	@ 0x7f
 8017456:	8283      	strh	r3, [r0, #20]
 8017458:	2300      	movs	r3, #0
 801745a:	4604      	mov	r4, r0
 801745c:	7583      	strb	r3, [r0, #22]
 801745e:	6183      	str	r3, [r0, #24]
 8017460:	4b09      	ldr	r3, [pc, #36]	@ (8017488 <Display::Display()+0x4c>)
 8017462:	2102      	movs	r1, #2
 8017464:	6018      	str	r0, [r3, #0]
 8017466:	f7ff ffbd 	bl	80173e4 <Display::Detect(display::Type)>
 801746a:	69a3      	ldr	r3, [r4, #24]
 801746c:	b10b      	cbz	r3, 8017472 <Display::Display()+0x36>
 801746e:	f7ff ffa1 	bl	80173b4 <display::timeout::gpio_init()>
 8017472:	69a0      	ldr	r0, [r4, #24]
 8017474:	f7ff ff94 	bl	80173a0 <Display::PrintInfo() [clone .isra.0]>
 8017478:	4620      	mov	r0, r4
 801747a:	bd10      	pop	{r4, pc}
 801747c:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8017480:	00061a80 	andeq	r1, r6, r0, lsl #21
 8017484:	000493e0 	andeq	r9, r4, r0, ror #7
 8017488:	2000e2e4 	andcs	lr, r0, r4, ror #5

0801748c <Ssd1306::~Ssd1306()>:
 801748c:	4770      	bx	lr

0801748e <Ssd1306::SetCursor(unsigned long)>:
 801748e:	4770      	bx	lr

08017490 <Ssd1306::PrintInfo()>:
 8017490:	b410      	push	{r4}
 8017492:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8017496:	7e44      	ldrb	r4, [r0, #25]
 8017498:	4904      	ldr	r1, [pc, #16]	@ (80174ac <Ssd1306::PrintInfo()+0x1c>)
 801749a:	4805      	ldr	r0, [pc, #20]	@ (80174b0 <Ssd1306::PrintInfo()+0x20>)
 801749c:	2c00      	cmp	r4, #0
 801749e:	bf18      	it	ne
 80174a0:	4601      	movne	r1, r0
 80174a2:	4804      	ldr	r0, [pc, #16]	@ (80174b4 <Ssd1306::PrintInfo()+0x24>)
 80174a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174a8:	f003 b826 	b.w	801a4f8 <printf>
 80174ac:	0801bd53 	stmdaeq	r1, {r0, r1, r4, r6, r8, sl, fp, ip, sp, pc}
 80174b0:	0801bd4c 	stmdaeq	r1, {r2, r3, r6, r8, sl, fp, ip, sp, pc}
 80174b4:	0801bd5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, sl, fp, ip, sp, pc}

080174b8 <Ssd1306::~Ssd1306()>:
 80174b8:	b510      	push	{r4, lr}
 80174ba:	2120      	movs	r1, #32
 80174bc:	4604      	mov	r4, r0
 80174be:	f003 fa6f 	bl	801a9a0 <operator delete(void*, unsigned int)>
 80174c2:	4620      	mov	r0, r4
 80174c4:	bd10      	pop	{r4, pc}

080174c6 <HAL_I2C::Setup()>:
 80174c6:	b510      	push	{r4, lr}
 80174c8:	4604      	mov	r4, r0
 80174ca:	7800      	ldrb	r0, [r0, #0]
 80174cc:	f002 fa08 	bl	80198e0 <gd32_i2c_set_address>
 80174d0:	6860      	ldr	r0, [r4, #4]
 80174d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174d6:	f002 b9fb 	b.w	80198d0 <gd32_i2c_set_baudrate>
	...

080174dc <Ssd1306::PutChar(int)>:
 80174dc:	b510      	push	{r4, lr}
 80174de:	f1a1 0420 	sub.w	r4, r1, #32
 80174e2:	2c5f      	cmp	r4, #95	@ 0x5f
 80174e4:	f100 0010 	add.w	r0, r0, #16
 80174e8:	bf88      	it	hi
 80174ea:	2400      	movhi	r4, #0
 80174ec:	f7ff ffeb 	bl	80174c6 <HAL_I2C::Setup()>
 80174f0:	4804      	ldr	r0, [pc, #16]	@ (8017504 <Ssd1306::PutChar(int)+0x28>)
 80174f2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80174f6:	4420      	add	r0, r4
 80174f8:	2107      	movs	r1, #7
 80174fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174fe:	f002 b9f5 	b.w	80198ec <gd32_i2c_write>
 8017502:	bf00      	nop
 8017504:	0801f500 	stmdaeq	r1, {r8, sl, ip, sp, lr, pc}

08017508 <Ssd1306::PutString(char const*)>:
 8017508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801750a:	4604      	mov	r4, r0
 801750c:	460e      	mov	r6, r1
 801750e:	460f      	mov	r7, r1
 8017510:	463d      	mov	r5, r7
 8017512:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017516:	b939      	cbnz	r1, 8017528 <Ssd1306::PutString(char const*)+0x20>
 8017518:	7b23      	ldrb	r3, [r4, #12]
 801751a:	b123      	cbz	r3, 8017526 <Ssd1306::PutString(char const*)+0x1e>
 801751c:	7321      	strb	r1, [r4, #12]
 801751e:	1bad      	subs	r5, r5, r6
 8017520:	6863      	ldr	r3, [r4, #4]
 8017522:	42ab      	cmp	r3, r5
 8017524:	d804      	bhi.n	8017530 <Ssd1306::PutString(char const*)+0x28>
 8017526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017528:	4620      	mov	r0, r4
 801752a:	f7ff ffd7 	bl	80174dc <Ssd1306::PutChar(int)>
 801752e:	e7ef      	b.n	8017510 <Ssd1306::PutString(char const*)+0x8>
 8017530:	2120      	movs	r1, #32
 8017532:	4620      	mov	r0, r4
 8017534:	f7ff ffd2 	bl	80174dc <Ssd1306::PutChar(int)>
 8017538:	3501      	adds	r5, #1
 801753a:	e7f1      	b.n	8017520 <Ssd1306::PutString(char const*)+0x18>

0801753c <Ssd1306::Text(char const*, unsigned long)>:
 801753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753e:	6843      	ldr	r3, [r0, #4]
 8017540:	429a      	cmp	r2, r3
 8017542:	bf28      	it	cs
 8017544:	461a      	movcs	r2, r3
 8017546:	4604      	mov	r4, r0
 8017548:	4615      	mov	r5, r2
 801754a:	460e      	mov	r6, r1
 801754c:	188f      	adds	r7, r1, r2
 801754e:	42be      	cmp	r6, r7
 8017550:	d107      	bne.n	8017562 <Ssd1306::Text(char const*, unsigned long)+0x26>
 8017552:	7b23      	ldrb	r3, [r4, #12]
 8017554:	b123      	cbz	r3, 8017560 <Ssd1306::Text(char const*, unsigned long)+0x24>
 8017556:	2300      	movs	r3, #0
 8017558:	7323      	strb	r3, [r4, #12]
 801755a:	6863      	ldr	r3, [r4, #4]
 801755c:	42ab      	cmp	r3, r5
 801755e:	d806      	bhi.n	801756e <Ssd1306::Text(char const*, unsigned long)+0x32>
 8017560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017562:	f816 1b01 	ldrb.w	r1, [r6], #1
 8017566:	4620      	mov	r0, r4
 8017568:	f7ff ffb8 	bl	80174dc <Ssd1306::PutChar(int)>
 801756c:	e7ef      	b.n	801754e <Ssd1306::Text(char const*, unsigned long)+0x12>
 801756e:	2120      	movs	r1, #32
 8017570:	4620      	mov	r0, r4
 8017572:	f7ff ffb3 	bl	80174dc <Ssd1306::PutChar(int)>
 8017576:	3501      	adds	r5, #1
 8017578:	e7ef      	b.n	801755a <Ssd1306::Text(char const*, unsigned long)+0x1e>

0801757a <Ssd1306::InitMembers()>:
 801757a:	2315      	movs	r3, #21
 801757c:	6043      	str	r3, [r0, #4]
 801757e:	7e03      	ldrb	r3, [r0, #24]
 8017580:	b12b      	cbz	r3, 801758e <Ssd1306::InitMembers()+0x14>
 8017582:	3b01      	subs	r3, #1
 8017584:	2b01      	cmp	r3, #1
 8017586:	d807      	bhi.n	8017598 <Ssd1306::InitMembers()+0x1e>
 8017588:	2304      	movs	r3, #4
 801758a:	2204      	movs	r2, #4
 801758c:	e001      	b.n	8017592 <Ssd1306::InitMembers()+0x18>
 801758e:	2308      	movs	r3, #8
 8017590:	461a      	mov	r2, r3
 8017592:	6083      	str	r3, [r0, #8]
 8017594:	61c2      	str	r2, [r0, #28]
 8017596:	4770      	bx	lr
 8017598:	2308      	movs	r3, #8
 801759a:	e7f6      	b.n	801758a <Ssd1306::InitMembers()+0x10>

0801759c <Ssd1306::Ssd1306(TOledPanel)>:
 801759c:	b510      	push	{r4, lr}
 801759e:	4c07      	ldr	r4, [pc, #28]	@ (80175bc <Ssd1306::Ssd1306(TOledPanel)+0x20>)
 80175a0:	6004      	str	r4, [r0, #0]
 80175a2:	2200      	movs	r2, #0
 80175a4:	243c      	movs	r4, #60	@ 0x3c
 80175a6:	7302      	strb	r2, [r0, #12]
 80175a8:	7404      	strb	r4, [r0, #16]
 80175aa:	7642      	strb	r2, [r0, #25]
 80175ac:	4c04      	ldr	r4, [pc, #16]	@ (80175c0 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 80175ae:	4a05      	ldr	r2, [pc, #20]	@ (80175c4 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 80175b0:	6144      	str	r4, [r0, #20]
 80175b2:	7601      	strb	r1, [r0, #24]
 80175b4:	6010      	str	r0, [r2, #0]
 80175b6:	f7ff ffe0 	bl	801757a <Ssd1306::InitMembers()>
 80175ba:	bd10      	pop	{r4, pc}
 80175bc:	0801f498 	stmdaeq	r1, {r3, r4, r7, sl, ip, sp, lr, pc}
 80175c0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80175c4:	2000e2e8 	andcs	lr, r0, r8, ror #5

080175c8 <Ssd1306::SendCommand(unsigned char)>:
 80175c8:	b507      	push	{r0, r1, r2, lr}
 80175ca:	2300      	movs	r3, #0
 80175cc:	3010      	adds	r0, #16
 80175ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80175d2:	f88d 1005 	strb.w	r1, [sp, #5]
 80175d6:	f7ff ff76 	bl	80174c6 <HAL_I2C::Setup()>
 80175da:	2102      	movs	r1, #2
 80175dc:	a801      	add	r0, sp, #4
 80175de:	f002 f985 	bl	80198ec <gd32_i2c_write>
 80175e2:	b003      	add	sp, #12
 80175e4:	f85d fb04 	ldr.w	pc, [sp], #4

080175e8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>:
 80175e8:	2914      	cmp	r1, #20
 80175ea:	b570      	push	{r4, r5, r6, lr}
 80175ec:	4605      	mov	r5, r0
 80175ee:	4616      	mov	r6, r2
 80175f0:	d81d      	bhi.n	801762e <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x46>
 80175f2:	6883      	ldr	r3, [r0, #8]
 80175f4:	4293      	cmp	r3, r2
 80175f6:	d91a      	bls.n	801762e <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x46>
 80175f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80175fc:	7e43      	ldrb	r3, [r0, #25]
 80175fe:	004c      	lsls	r4, r1, #1
 8017600:	b2e4      	uxtb	r4, r4
 8017602:	b10b      	cbz	r3, 8017608 <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x20>
 8017604:	3404      	adds	r4, #4
 8017606:	b2e4      	uxtb	r4, r4
 8017608:	f004 010e 	and.w	r1, r4, #14
 801760c:	4628      	mov	r0, r5
 801760e:	f7ff ffdb 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 8017612:	0921      	lsrs	r1, r4, #4
 8017614:	4628      	mov	r0, r5
 8017616:	f041 0110 	orr.w	r1, r1, #16
 801761a:	f7ff ffd5 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 801761e:	f066 014f 	orn	r1, r6, #79	@ 0x4f
 8017622:	4628      	mov	r0, r5
 8017624:	b2c9      	uxtb	r1, r1
 8017626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801762a:	f7ff bfcd 	b.w	80175c8 <Ssd1306::SendCommand(unsigned char)>
 801762e:	bd70      	pop	{r4, r5, r6, pc}

08017630 <Ssd1306::TextLine(unsigned long, char const*, unsigned long)>:
 8017630:	b570      	push	{r4, r5, r6, lr}
 8017632:	461e      	mov	r6, r3
 8017634:	6883      	ldr	r3, [r0, #8]
 8017636:	428b      	cmp	r3, r1
 8017638:	4604      	mov	r4, r0
 801763a:	4615      	mov	r5, r2
 801763c:	d30b      	bcc.n	8017656 <Ssd1306::TextLine(unsigned long, char const*, unsigned long)+0x26>
 801763e:	3901      	subs	r1, #1
 8017640:	b2ca      	uxtb	r2, r1
 8017642:	2100      	movs	r1, #0
 8017644:	f7ff ffd0 	bl	80175e8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8017648:	4632      	mov	r2, r6
 801764a:	4629      	mov	r1, r5
 801764c:	4620      	mov	r0, r4
 801764e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017652:	f7ff bf73 	b.w	801753c <Ssd1306::Text(char const*, unsigned long)>
 8017656:	bd70      	pop	{r4, r5, r6, pc}

08017658 <Ssd1306::ClearLine(unsigned long)>:
 8017658:	b538      	push	{r3, r4, r5, lr}
 801765a:	6883      	ldr	r3, [r0, #8]
 801765c:	428b      	cmp	r3, r1
 801765e:	4605      	mov	r5, r0
 8017660:	d314      	bcc.n	801768c <Ssd1306::ClearLine(unsigned long)+0x34>
 8017662:	3901      	subs	r1, #1
 8017664:	b2cc      	uxtb	r4, r1
 8017666:	4622      	mov	r2, r4
 8017668:	2100      	movs	r1, #0
 801766a:	f7ff ffbd 	bl	80175e8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 801766e:	f105 0010 	add.w	r0, r5, #16
 8017672:	f7ff ff28 	bl	80174c6 <HAL_I2C::Setup()>
 8017676:	2181      	movs	r1, #129	@ 0x81
 8017678:	4805      	ldr	r0, [pc, #20]	@ (8017690 <Ssd1306::ClearLine(unsigned long)+0x38>)
 801767a:	f002 f937 	bl	80198ec <gd32_i2c_write>
 801767e:	4622      	mov	r2, r4
 8017680:	4628      	mov	r0, r5
 8017682:	2100      	movs	r1, #0
 8017684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017688:	f7ff bfae 	b.w	80175e8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 801768c:	bd38      	pop	{r3, r4, r5, pc}
 801768e:	bf00      	nop
 8017690:	2000e2ec 	andcs	lr, r0, ip, ror #5

08017694 <Ssd1306::SetSleep(bool)>:
 8017694:	b111      	cbz	r1, 801769c <Ssd1306::SetSleep(bool)+0x8>
 8017696:	21ae      	movs	r1, #174	@ 0xae
 8017698:	f7ff bf96 	b.w	80175c8 <Ssd1306::SendCommand(unsigned char)>
 801769c:	21af      	movs	r1, #175	@ 0xaf
 801769e:	e7fb      	b.n	8017698 <Ssd1306::SetSleep(bool)+0x4>

080176a0 <Ssd1306::SetContrast(unsigned char)>:
 80176a0:	b538      	push	{r3, r4, r5, lr}
 80176a2:	4604      	mov	r4, r0
 80176a4:	460d      	mov	r5, r1
 80176a6:	2181      	movs	r1, #129	@ 0x81
 80176a8:	f7ff ff8e 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80176ac:	4629      	mov	r1, r5
 80176ae:	4620      	mov	r0, r4
 80176b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80176b4:	f7ff bf88 	b.w	80175c8 <Ssd1306::SendCommand(unsigned char)>

080176b8 <Ssd1306::SetFlipVertically(bool)>:
 80176b8:	b510      	push	{r4, lr}
 80176ba:	4604      	mov	r4, r0
 80176bc:	b141      	cbz	r1, 80176d0 <Ssd1306::SetFlipVertically(bool)+0x18>
 80176be:	21a0      	movs	r1, #160	@ 0xa0
 80176c0:	f7ff ff82 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80176c4:	21c0      	movs	r1, #192	@ 0xc0
 80176c6:	4620      	mov	r0, r4
 80176c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176cc:	f7ff bf7c 	b.w	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80176d0:	21a1      	movs	r1, #161	@ 0xa1
 80176d2:	f7ff ff79 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80176d6:	21c8      	movs	r1, #200	@ 0xc8
 80176d8:	e7f5      	b.n	80176c6 <Ssd1306::SetFlipVertically(bool)+0xe>
	...

080176dc <Ssd1306::CheckSH1106()>:
 80176dc:	b530      	push	{r4, r5, lr}
 80176de:	2100      	movs	r1, #0
 80176e0:	b087      	sub	sp, #28
 80176e2:	4604      	mov	r4, r0
 80176e4:	f7ff ff70 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80176e8:	2190      	movs	r1, #144	@ 0x90
 80176ea:	4620      	mov	r0, r4
 80176ec:	f7ff ff6c 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80176f0:	21b0      	movs	r1, #176	@ 0xb0
 80176f2:	4620      	mov	r0, r4
 80176f4:	f7ff ff68 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80176f8:	4b21      	ldr	r3, [pc, #132]	@ (8017780 <Ssd1306::CheckSH1106()+0xa4>)
 80176fa:	f104 0510 	add.w	r5, r4, #16
 80176fe:	6818      	ldr	r0, [r3, #0]
 8017700:	9002      	str	r0, [sp, #8]
 8017702:	791b      	ldrb	r3, [r3, #4]
 8017704:	f88d 300c 	strb.w	r3, [sp, #12]
 8017708:	4628      	mov	r0, r5
 801770a:	f7ff fedc 	bl	80174c6 <HAL_I2C::Setup()>
 801770e:	2105      	movs	r1, #5
 8017710:	a802      	add	r0, sp, #8
 8017712:	f002 f8eb 	bl	80198ec <gd32_i2c_write>
 8017716:	2100      	movs	r1, #0
 8017718:	4620      	mov	r0, r4
 801771a:	f7ff ff55 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 801771e:	2190      	movs	r1, #144	@ 0x90
 8017720:	4620      	mov	r0, r4
 8017722:	f7ff ff51 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 8017726:	21b0      	movs	r1, #176	@ 0xb0
 8017728:	4620      	mov	r0, r4
 801772a:	f7ff ff4d 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 801772e:	2300      	movs	r3, #0
 8017730:	4628      	mov	r0, r5
 8017732:	9304      	str	r3, [sp, #16]
 8017734:	f88d 3014 	strb.w	r3, [sp, #20]
 8017738:	f7ff fec5 	bl	80174c6 <HAL_I2C::Setup()>
 801773c:	2340      	movs	r3, #64	@ 0x40
 801773e:	2101      	movs	r1, #1
 8017740:	a801      	add	r0, sp, #4
 8017742:	f88d 3004 	strb.w	r3, [sp, #4]
 8017746:	f002 f8d1 	bl	80198ec <gd32_i2c_write>
 801774a:	4628      	mov	r0, r5
 801774c:	f7ff febb 	bl	80174c6 <HAL_I2C::Setup()>
 8017750:	2105      	movs	r1, #5
 8017752:	a804      	add	r0, sp, #16
 8017754:	f002 f930 	bl	80199b8 <gd32_i2c_read>
 8017758:	a902      	add	r1, sp, #8
 801775a:	aa04      	add	r2, sp, #16
 801775c:	2003      	movs	r0, #3
 801775e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017762:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8017766:	42ab      	cmp	r3, r5
 8017768:	d006      	beq.n	8017778 <Ssd1306::CheckSH1106()+0x9c>
 801776a:	1b5b      	subs	r3, r3, r5
 801776c:	fab3 f383 	clz	r3, r3
 8017770:	095b      	lsrs	r3, r3, #5
 8017772:	7663      	strb	r3, [r4, #25]
 8017774:	b007      	add	sp, #28
 8017776:	bd30      	pop	{r4, r5, pc}
 8017778:	3801      	subs	r0, #1
 801777a:	d2f0      	bcs.n	801775e <Ssd1306::CheckSH1106()+0x82>
 801777c:	2300      	movs	r3, #0
 801777e:	e7f5      	b.n	801776c <Ssd1306::CheckSH1106()+0x90>
 8017780:	0801bd67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp, pc}

08017784 <Ssd1306::Cls()>:
 8017784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017788:	7e46      	ldrb	r6, [r0, #25]
 801778a:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 80177ec <Ssd1306::Cls()+0x68>
 801778e:	00b6      	lsls	r6, r6, #2
 8017790:	b2f7      	uxtb	r7, r6
 8017792:	4604      	mov	r4, r0
 8017794:	2500      	movs	r5, #0
 8017796:	f047 0810 	orr.w	r8, r7, #16
 801779a:	69e3      	ldr	r3, [r4, #28]
 801779c:	42ab      	cmp	r3, r5
 801779e:	4639      	mov	r1, r7
 80177a0:	4620      	mov	r0, r4
 80177a2:	d80b      	bhi.n	80177bc <Ssd1306::Cls()+0x38>
 80177a4:	f7ff ff10 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80177a8:	4641      	mov	r1, r8
 80177aa:	4620      	mov	r0, r4
 80177ac:	f7ff ff0c 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80177b0:	4620      	mov	r0, r4
 80177b2:	21b0      	movs	r1, #176	@ 0xb0
 80177b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177b8:	f7ff bf06 	b.w	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80177bc:	f7ff ff04 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80177c0:	4641      	mov	r1, r8
 80177c2:	4620      	mov	r0, r4
 80177c4:	f7ff ff00 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80177c8:	f065 014f 	orn	r1, r5, #79	@ 0x4f
 80177cc:	b2c9      	uxtb	r1, r1
 80177ce:	4620      	mov	r0, r4
 80177d0:	f7ff fefa 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 80177d4:	f104 0010 	add.w	r0, r4, #16
 80177d8:	f7ff fe75 	bl	80174c6 <HAL_I2C::Setup()>
 80177dc:	f106 0181 	add.w	r1, r6, #129	@ 0x81
 80177e0:	4648      	mov	r0, r9
 80177e2:	f002 f883 	bl	80198ec <gd32_i2c_write>
 80177e6:	3501      	adds	r5, #1
 80177e8:	e7d7      	b.n	801779a <Ssd1306::Cls()+0x16>
 80177ea:	bf00      	nop
 80177ec:	2000e2ec 	andcs	lr, r0, ip, ror #5

080177f0 <Ssd1306::Start()>:
 80177f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80177f2:	7c04      	ldrb	r4, [r0, #16]
 80177f4:	6946      	ldr	r6, [r0, #20]
 80177f6:	4605      	mov	r5, r0
 80177f8:	4620      	mov	r0, r4
 80177fa:	f002 f871 	bl	80198e0 <gd32_i2c_set_address>
 80177fe:	4630      	mov	r0, r6
 8017800:	f002 f866 	bl	80198d0 <gd32_i2c_set_baudrate>
 8017804:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017808:	2b07      	cmp	r3, #7
 801780a:	d902      	bls.n	8017812 <Ssd1306::Start()+0x22>
 801780c:	3c50      	subs	r4, #80	@ 0x50
 801780e:	2c0f      	cmp	r4, #15
 8017810:	d80f      	bhi.n	8017832 <Ssd1306::Start()+0x42>
 8017812:	2101      	movs	r1, #1
 8017814:	f10d 0007 	add.w	r0, sp, #7
 8017818:	f002 f8ce 	bl	80199b8 <gd32_i2c_read>
 801781c:	fab0 f480 	clz	r4, r0
 8017820:	0964      	lsrs	r4, r4, #5
 8017822:	b34c      	cbz	r4, 8017878 <Ssd1306::Start()+0x88>
 8017824:	7e2e      	ldrb	r6, [r5, #24]
 8017826:	b14e      	cbz	r6, 801783c <Ssd1306::Start()+0x4c>
 8017828:	3e01      	subs	r6, #1
 801782a:	2e01      	cmp	r6, #1
 801782c:	d927      	bls.n	801787e <Ssd1306::Start()+0x8e>
 801782e:	2400      	movs	r4, #0
 8017830:	e022      	b.n	8017878 <Ssd1306::Start()+0x88>
 8017832:	2100      	movs	r1, #0
 8017834:	4608      	mov	r0, r1
 8017836:	f002 f859 	bl	80198ec <gd32_i2c_write>
 801783a:	e7ef      	b.n	801781c <Ssd1306::Start()+0x2c>
 801783c:	4f15      	ldr	r7, [pc, #84]	@ (8017894 <Ssd1306::Start()+0xa4>)
 801783e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017842:	4628      	mov	r0, r5
 8017844:	3601      	adds	r6, #1
 8017846:	f7ff febf 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 801784a:	2e18      	cmp	r6, #24
 801784c:	d1f7      	bne.n	801783e <Ssd1306::Start()+0x4e>
 801784e:	4a12      	ldr	r2, [pc, #72]	@ (8017898 <Ssd1306::Start()+0xa8>)
 8017850:	2300      	movs	r3, #0
 8017852:	4611      	mov	r1, r2
 8017854:	4618      	mov	r0, r3
 8017856:	3301      	adds	r3, #1
 8017858:	2b86      	cmp	r3, #134	@ 0x86
 801785a:	f802 0b01 	strb.w	r0, [r2], #1
 801785e:	d1fa      	bne.n	8017856 <Ssd1306::Start()+0x66>
 8017860:	2340      	movs	r3, #64	@ 0x40
 8017862:	4628      	mov	r0, r5
 8017864:	700b      	strb	r3, [r1, #0]
 8017866:	f7ff ff39 	bl	80176dc <Ssd1306::CheckSH1106()>
 801786a:	4628      	mov	r0, r5
 801786c:	f7ff ff8a 	bl	8017784 <Ssd1306::Cls()>
 8017870:	21af      	movs	r1, #175	@ 0xaf
 8017872:	4628      	mov	r0, r5
 8017874:	f7ff fea8 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 8017878:	4620      	mov	r0, r4
 801787a:	b003      	add	sp, #12
 801787c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801787e:	4f07      	ldr	r7, [pc, #28]	@ (801789c <Ssd1306::Start()+0xac>)
 8017880:	2600      	movs	r6, #0
 8017882:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017886:	4628      	mov	r0, r5
 8017888:	3601      	adds	r6, #1
 801788a:	f7ff fe9d 	bl	80175c8 <Ssd1306::SendCommand(unsigned char)>
 801788e:	2e18      	cmp	r6, #24
 8017890:	d1f7      	bne.n	8017882 <Ssd1306::Start()+0x92>
 8017892:	e7dc      	b.n	801784e <Ssd1306::Start()+0x5e>
 8017894:	0801f4e8 	stmdaeq	r1, {r3, r5, r6, r7, sl, ip, sp, lr, pc}
 8017898:	2000e2ec 	andcs	lr, r0, ip, ror #5
 801789c:	0801f4d0 	stmdaeq	r1, {r4, r6, r7, sl, ip, sp, lr, pc}

080178a0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80178a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178a4:	4d15      	ldr	r5, [pc, #84]	@ (80178fc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80178a6:	461e      	mov	r6, r3
 80178a8:	4b15      	ldr	r3, [pc, #84]	@ (8017900 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80178aa:	b086      	sub	sp, #24
 80178ac:	6018      	str	r0, [r3, #0]
 80178ae:	4604      	mov	r4, r0
 80178b0:	4617      	mov	r7, r2
 80178b2:	f105 0803 	add.w	r8, r5, #3
 80178b6:	2203      	movs	r2, #3
 80178b8:	4628      	mov	r0, r5
 80178ba:	f002 fb22 	bl	8019f02 <memmove>
 80178be:	4639      	mov	r1, r7
 80178c0:	220b      	movs	r2, #11
 80178c2:	4640      	mov	r0, r8
 80178c4:	f002 fb1d 	bl	8019f02 <memmove>
 80178c8:	f105 030e 	add.w	r3, r5, #14
 80178cc:	4631      	mov	r1, r6
 80178ce:	2208      	movs	r2, #8
 80178d0:	4618      	mov	r0, r3
 80178d2:	f002 fb16 	bl	8019f02 <memmove>
 80178d6:	2308      	movs	r3, #8
 80178d8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80178dc:	230b      	movs	r3, #11
 80178de:	9302      	str	r3, [sp, #8]
 80178e0:	4b08      	ldr	r3, [pc, #32]	@ (8017904 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80178e2:	9005      	str	r0, [sp, #20]
 80178e4:	e9cd 5300 	strd	r5, r3, [sp]
 80178e8:	4a07      	ldr	r2, [pc, #28]	@ (8017908 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80178ea:	4808      	ldr	r0, [pc, #32]	@ (801790c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80178ec:	2303      	movs	r3, #3
 80178ee:	213f      	movs	r1, #63	@ 0x3f
 80178f0:	f002 fe2a 	bl	801a548 <snprintf>
 80178f4:	4620      	mov	r0, r4
 80178f6:	b006      	add	sp, #24
 80178f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178fc:	2000e3b8 			@ <UNDEFINED> instruction: 0x2000e3b8
 8017900:	2000e374 	andcs	lr, r0, r4, ror r3
 8017904:	0801b3f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, ip, sp, pc}
 8017908:	0801bd6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl, fp, ip, sp, pc}
 801790c:	2000e378 	andcs	lr, r0, r8, ror r3

08017910 <Hardware::ledblink()>:
 8017910:	4b02      	ldr	r3, [pc, #8]	@ (801791c <Hardware::ledblink()+0xc>)
 8017912:	2210      	movs	r2, #16
 8017914:	f8c3 2c2c 	str.w	r2, [r3, #3116]	@ 0xc2c
 8017918:	4770      	bx	lr
 801791a:	bf00      	nop
 801791c:	40020000 	andmi	r0, r2, r0

08017920 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>:
 8017920:	2900      	cmp	r1, #0
 8017922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017924:	db10      	blt.n	8017948 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8017926:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 801792a:	2300      	movs	r3, #0
 801792c:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8017930:	42ab      	cmp	r3, r5
 8017932:	d009      	beq.n	8017948 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8017934:	011c      	lsls	r4, r3, #4
 8017936:	5937      	ldr	r7, [r6, r4]
 8017938:	42b9      	cmp	r1, r7
 801793a:	d106      	bne.n	801794a <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x2a>
 801793c:	4b04      	ldr	r3, [pc, #16]	@ (8017950 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x30>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	4420      	add	r0, r4
 8017942:	4413      	add	r3, r2
 8017944:	e9c0 3208 	strd	r3, r2, [r0, #32]
 8017948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801794a:	3301      	adds	r3, #1
 801794c:	e7f0      	b.n	8017930 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x10>
 801794e:	bf00      	nop
 8017950:	2001bcc0 	andcs	fp, r1, r0, asr #25

08017954 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>:
 8017954:	680a      	ldr	r2, [r1, #0]
 8017956:	2a00      	cmp	r2, #0
 8017958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801795a:	4606      	mov	r6, r0
 801795c:	468e      	mov	lr, r1
 801795e:	db17      	blt.n	8017990 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3c>
 8017960:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8017964:	2400      	movs	r4, #0
 8017966:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801796a:	429c      	cmp	r4, r3
 801796c:	d010      	beq.n	8017990 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3c>
 801796e:	0125      	lsls	r5, r4, #4
 8017970:	5948      	ldr	r0, [r1, r5]
 8017972:	4282      	cmp	r2, r0
 8017974:	d116      	bne.n	80179a4 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x50>
 8017976:	4435      	add	r5, r6
 8017978:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 801797c:	4564      	cmp	r4, ip
 801797e:	f105 0510 	add.w	r5, r5, #16
 8017982:	d306      	bcc.n	8017992 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3e>
 8017984:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017988:	f8c6 c0a0 	str.w	ip, [r6, #160]	@ 0xa0
 801798c:	f8ce 3000 	str.w	r3, [lr]
 8017990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017992:	f105 0320 	add.w	r3, r5, #32
 8017996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017998:	f105 0710 	add.w	r7, r5, #16
 801799c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80179a0:	3401      	adds	r4, #1
 80179a2:	e7eb      	b.n	801797c <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x28>
 80179a4:	3401      	adds	r4, #1
 80179a6:	e7e0      	b.n	801796a <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x16>

080179a8 <Hardware::SetFrequency(unsigned long)>:
 80179a8:	460a      	mov	r2, r1
 80179aa:	69c1      	ldr	r1, [r0, #28]
 80179ac:	2900      	cmp	r1, #0
 80179ae:	b538      	push	{r3, r4, r5, lr}
 80179b0:	4604      	mov	r4, r0
 80179b2:	da21      	bge.n	80179f8 <Hardware::SetFrequency(unsigned long)+0x50>
 80179b4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 80179b8:	2b07      	cmp	r3, #7
 80179ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80179be:	fbb1 f1f2 	udiv	r1, r1, r2
 80179c2:	d906      	bls.n	80179d2 <Hardware::SetFrequency(unsigned long)+0x2a>
 80179c4:	4825      	ldr	r0, [pc, #148]	@ (8017a5c <Hardware::SetFrequency(unsigned long)+0xb4>)
 80179c6:	f000 fa9f 	bl	8017f08 <console_error>
 80179ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80179ce:	61e2      	str	r2, [r4, #28]
 80179d0:	bd38      	pop	{r3, r4, r5, pc}
 80179d2:	4a23      	ldr	r2, [pc, #140]	@ (8017a60 <Hardware::SetFrequency(unsigned long)+0xb8>)
 80179d4:	6810      	ldr	r0, [r2, #0]
 80179d6:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 80179da:	1c55      	adds	r5, r2, #1
 80179dc:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 80179e0:	4408      	add	r0, r1
 80179e2:	1c5d      	adds	r5, r3, #1
 80179e4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80179e8:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
 80179ec:	e9c3 0108 	strd	r0, r1, [r3, #32]
 80179f0:	491c      	ldr	r1, [pc, #112]	@ (8017a64 <Hardware::SetFrequency(unsigned long)+0xbc>)
 80179f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80179f4:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80179f6:	e7ea      	b.n	80179ce <Hardware::SetFrequency(unsigned long)+0x26>
 80179f8:	2a08      	cmp	r2, #8
 80179fa:	d808      	bhi.n	8017a0e <Hardware::SetFrequency(unsigned long)+0x66>
 80179fc:	2a08      	cmp	r2, #8
 80179fe:	d808      	bhi.n	8017a12 <Hardware::SetFrequency(unsigned long)+0x6a>
 8017a00:	e8df f002 	tbb	[pc, r2]
 8017a04:	1c07150c 	cfstr32ne	mvfx1, [r7], {12}
 8017a08:	07071f07 	streq	r1, [r7, -r7, lsl #30]
 8017a0c:	2aff0021 	bcs	7fd7a98 <__stack_size+0x7fcfa98>
 8017a10:	d01b      	beq.n	8017a4a <Hardware::SetFrequency(unsigned long)+0xa2>
 8017a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017a16:	fbb3 f2f2 	udiv	r2, r3, r2
 8017a1a:	e00a      	b.n	8017a32 <Hardware::SetFrequency(unsigned long)+0x8a>
 8017a1c:	f100 011c 	add.w	r1, r0, #28
 8017a20:	f7ff ff98 	bl	8017954 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>
 8017a24:	4b10      	ldr	r3, [pc, #64]	@ (8017a68 <Hardware::SetFrequency(unsigned long)+0xc0>)
 8017a26:	2210      	movs	r2, #16
 8017a28:	f8c3 2c28 	str.w	r2, [r3, #3112]	@ 0xc28
 8017a2c:	e7d0      	b.n	80179d0 <Hardware::SetFrequency(unsigned long)+0x28>
 8017a2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017a32:	4620      	mov	r0, r4
 8017a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a38:	f7ff bf72 	b.w	8017920 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>
 8017a3c:	f240 124d 	movw	r2, #333	@ 0x14d
 8017a40:	e7f7      	b.n	8017a32 <Hardware::SetFrequency(unsigned long)+0x8a>
 8017a42:	22c8      	movs	r2, #200	@ 0xc8
 8017a44:	e7f5      	b.n	8017a32 <Hardware::SetFrequency(unsigned long)+0x8a>
 8017a46:	227d      	movs	r2, #125	@ 0x7d
 8017a48:	e7f3      	b.n	8017a32 <Hardware::SetFrequency(unsigned long)+0x8a>
 8017a4a:	f100 011c 	add.w	r1, r0, #28
 8017a4e:	f7ff ff81 	bl	8017954 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>
 8017a52:	4b05      	ldr	r3, [pc, #20]	@ (8017a68 <Hardware::SetFrequency(unsigned long)+0xc0>)
 8017a54:	2210      	movs	r2, #16
 8017a56:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18
 8017a5a:	e7b9      	b.n	80179d0 <Hardware::SetFrequency(unsigned long)+0x28>
 8017a5c:	0801bb6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 8017a60:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8017a64:	08017911 	stmdaeq	r1, {r0, r4, r8, fp, ip, sp, lr}
 8017a68:	40020000 	andmi	r0, r2, r0

08017a6c <Hardware::SetMode(hardware::ledblink::Mode)>:
 8017a6c:	7e03      	ldrb	r3, [r0, #24]
 8017a6e:	b510      	push	{r4, lr}
 8017a70:	4604      	mov	r4, r0
 8017a72:	b993      	cbnz	r3, 8017a9a <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 8017a74:	6943      	ldr	r3, [r0, #20]
 8017a76:	428b      	cmp	r3, r1
 8017a78:	d00f      	beq.n	8017a9a <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 8017a7a:	6141      	str	r1, [r0, #20]
 8017a7c:	3901      	subs	r1, #1
 8017a7e:	2904      	cmp	r1, #4
 8017a80:	d804      	bhi.n	8017a8c <Hardware::SetMode(hardware::ledblink::Mode)+0x20>
 8017a82:	e8df f001 	tbb	[pc, r1]
 8017a86:	110f0d0b 	tstne	pc, fp, lsl #26
 8017a8a:	21000013 	tstcs	r0, r3, lsl r0
 8017a8e:	4620      	mov	r0, r4
 8017a90:	f7ff ff8a 	bl	80179a8 <Hardware::SetFrequency(unsigned long)>
 8017a94:	6960      	ldr	r0, [r4, #20]
 8017a96:	f7f2 f863 	bl	8009b60 <hardware::ledblink::display(unsigned long)>
 8017a9a:	bd10      	pop	{r4, pc}
 8017a9c:	21ff      	movs	r1, #255	@ 0xff
 8017a9e:	e7f6      	b.n	8017a8e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 8017aa0:	2101      	movs	r1, #1
 8017aa2:	e7f4      	b.n	8017a8e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 8017aa4:	2103      	movs	r1, #3
 8017aa6:	e7f2      	b.n	8017a8e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 8017aa8:	2105      	movs	r1, #5
 8017aaa:	e7f0      	b.n	8017a8e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 8017aac:	2108      	movs	r1, #8
 8017aae:	e7ee      	b.n	8017a8e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>

08017ab0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>:
 8017ab0:	b538      	push	{r3, r4, r5, lr}
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	4615      	mov	r5, r2
 8017ab8:	7603      	strb	r3, [r0, #24]
 8017aba:	f7ff ffd7 	bl	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 8017abe:	7625      	strb	r5, [r4, #24]
 8017ac0:	bd38      	pop	{r3, r4, r5, pc}

08017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>:
 8017ac2:	b530      	push	{r4, r5, lr}
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	4401      	add	r1, r0
 8017ac8:	250a      	movs	r5, #10
 8017aca:	2000      	movs	r0, #0
 8017acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ad0:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8017ad4:	2c09      	cmp	r4, #9
 8017ad6:	d805      	bhi.n	8017ae4 <remoteconfig::timedate::atoi(char const*, unsigned long)+0x22>
 8017ad8:	fb05 2000 	mla	r0, r5, r0, r2
 8017adc:	428b      	cmp	r3, r1
 8017ade:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8017ae2:	d1f3      	bne.n	8017acc <remoteconfig::timedate::atoi(char const*, unsigned long)+0xa>
 8017ae4:	bd30      	pop	{r4, r5, pc}
	...

08017ae8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)>:
 8017ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aec:	b08a      	sub	sp, #40	@ 0x28
 8017aee:	4605      	mov	r5, r0
 8017af0:	460e      	mov	r6, r1
 8017af2:	a808      	add	r0, sp, #32
 8017af4:	2100      	movs	r1, #0
 8017af6:	f002 fed7 	bl	801a8a8 <gettimeofday>
 8017afa:	2800      	cmp	r0, #0
 8017afc:	db52      	blt.n	8017ba4 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xbc>
 8017afe:	a808      	add	r0, sp, #32
 8017b00:	f002 fe5a 	bl	801a7b8 <localtime>
 8017b04:	4b28      	ldr	r3, [pc, #160]	@ (8017ba8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc0>)
 8017b06:	4604      	mov	r4, r0
 8017b08:	6919      	ldr	r1, [r3, #16]
 8017b0a:	6827      	ldr	r7, [r4, #0]
 8017b0c:	6963      	ldr	r3, [r4, #20]
 8017b0e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8017b12:	fb91 fcf2 	sdiv	ip, r1, r2
 8017b16:	fa4f f08c 	sxtb.w	r0, ip
 8017b1a:	2800      	cmp	r0, #0
 8017b1c:	f04f 0e3c 	mov.w	lr, #60	@ 0x3c
 8017b20:	dd21      	ble.n	8017b66 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0x7e>
 8017b22:	f5a2 52e1 	sub.w	r2, r2, #7200	@ 0x1c20
 8017b26:	fb02 1100 	mla	r1, r2, r0, r1
 8017b2a:	fbb1 f1fe 	udiv	r1, r1, lr
 8017b2e:	b2ca      	uxtb	r2, r1
 8017b30:	e9d4 8e02 	ldrd	r8, lr, [r4, #8]
 8017b34:	6921      	ldr	r1, [r4, #16]
 8017b36:	6864      	ldr	r4, [r4, #4]
 8017b38:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8017bb8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xd0>
 8017b3c:	9403      	str	r4, [sp, #12]
 8017b3e:	4c1b      	ldr	r4, [pc, #108]	@ (8017bac <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc4>)
 8017b40:	3101      	adds	r1, #1
 8017b42:	2800      	cmp	r0, #0
 8017b44:	bfd8      	it	le
 8017b46:	4664      	movle	r4, ip
 8017b48:	e9cd 0206 	strd	r0, r2, [sp, #24]
 8017b4c:	9100      	str	r1, [sp, #0]
 8017b4e:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8017b52:	e9cd e801 	strd	lr, r8, [sp, #4]
 8017b56:	4a16      	ldr	r2, [pc, #88]	@ (8017bb0 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc8>)
 8017b58:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8017b5c:	4631      	mov	r1, r6
 8017b5e:	4628      	mov	r0, r5
 8017b60:	f002 fcf2 	bl	801a548 <snprintf>
 8017b64:	e01b      	b.n	8017b9e <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xb6>
 8017b66:	4342      	muls	r2, r0
 8017b68:	1a52      	subs	r2, r2, r1
 8017b6a:	fbb2 f2fe 	udiv	r2, r2, lr
 8017b6e:	b2d2      	uxtb	r2, r2
 8017b70:	ea42 0c0c 	orr.w	ip, r2, ip
 8017b74:	fa5f f18c 	uxtb.w	r1, ip
 8017b78:	2900      	cmp	r1, #0
 8017b7a:	d1d9      	bne.n	8017b30 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0x48>
 8017b7c:	9704      	str	r7, [sp, #16]
 8017b7e:	6862      	ldr	r2, [r4, #4]
 8017b80:	9203      	str	r2, [sp, #12]
 8017b82:	68a2      	ldr	r2, [r4, #8]
 8017b84:	9202      	str	r2, [sp, #8]
 8017b86:	68e2      	ldr	r2, [r4, #12]
 8017b88:	9201      	str	r2, [sp, #4]
 8017b8a:	6922      	ldr	r2, [r4, #16]
 8017b8c:	3201      	adds	r2, #1
 8017b8e:	9200      	str	r2, [sp, #0]
 8017b90:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8017b94:	4a07      	ldr	r2, [pc, #28]	@ (8017bb4 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xcc>)
 8017b96:	4631      	mov	r1, r6
 8017b98:	4628      	mov	r0, r5
 8017b9a:	f002 fcd5 	bl	801a548 <snprintf>
 8017b9e:	b00a      	add	sp, #40	@ 0x28
 8017ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ba4:	2000      	movs	r0, #0
 8017ba6:	e7fa      	b.n	8017b9e <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xb6>
 8017ba8:	40024000 	andmi	r4, r2, r0
 8017bac:	0801bd0e 	stmdaeq	r1, {r1, r2, r3, r8, sl, fp, ip, sp, pc}
 8017bb0:	0801bdba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp, pc}
 8017bb4:	0801bd91 	stmdaeq	r1, {r0, r4, r7, r8, sl, fp, ip, sp, pc}
 8017bb8:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}

08017bbc <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)>:
 8017bbc:	b570      	push	{r4, r5, r6, lr}
 8017bbe:	291a      	cmp	r1, #26
 8017bc0:	b08c      	sub	sp, #48	@ 0x30
 8017bc2:	4606      	mov	r6, r0
 8017bc4:	460c      	mov	r4, r1
 8017bc6:	d001      	beq.n	8017bcc <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x10>
 8017bc8:	291f      	cmp	r1, #31
 8017bca:	d174      	bne.n	8017cb6 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xfa>
 8017bcc:	2104      	movs	r1, #4
 8017bce:	1d70      	adds	r0, r6, #5
 8017bd0:	f7ff ff77 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017bd4:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 8017bd8:	9008      	str	r0, [sp, #32]
 8017bda:	2102      	movs	r1, #2
 8017bdc:	f106 000a 	add.w	r0, r6, #10
 8017be0:	f7ff ff6f 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017be4:	3801      	subs	r0, #1
 8017be6:	9007      	str	r0, [sp, #28]
 8017be8:	2102      	movs	r1, #2
 8017bea:	f106 000d 	add.w	r0, r6, #13
 8017bee:	f7ff ff68 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017bf2:	2102      	movs	r1, #2
 8017bf4:	9006      	str	r0, [sp, #24]
 8017bf6:	f106 0010 	add.w	r0, r6, #16
 8017bfa:	f7ff ff62 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017bfe:	2102      	movs	r1, #2
 8017c00:	9005      	str	r0, [sp, #20]
 8017c02:	f106 0013 	add.w	r0, r6, #19
 8017c06:	f7ff ff5c 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017c0a:	2102      	movs	r1, #2
 8017c0c:	9004      	str	r0, [sp, #16]
 8017c0e:	f106 0016 	add.w	r0, r6, #22
 8017c12:	f7ff ff56 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017c16:	9003      	str	r0, [sp, #12]
 8017c18:	a803      	add	r0, sp, #12
 8017c1a:	f002 fddd 	bl	801a7d8 <mktime>
 8017c1e:	2300      	movs	r3, #0
 8017c20:	2c1a      	cmp	r4, #26
 8017c22:	4605      	mov	r5, r0
 8017c24:	9001      	str	r0, [sp, #4]
 8017c26:	9302      	str	r3, [sp, #8]
 8017c28:	d041      	beq.n	8017cae <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xf2>
 8017c2a:	7e33      	ldrb	r3, [r6, #24]
 8017c2c:	2102      	movs	r1, #2
 8017c2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8017c30:	f106 0019 	add.w	r0, r6, #25
 8017c34:	bf14      	ite	ne
 8017c36:	2401      	movne	r4, #1
 8017c38:	f04f 34ff 	moveq.w	r4, #4294967295	@ 0xffffffff
 8017c3c:	f7ff ff41 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017c40:	4344      	muls	r4, r0
 8017c42:	f004 04ff 	and.w	r4, r4, #255	@ 0xff
 8017c46:	f104 030c 	add.w	r3, r4, #12
 8017c4a:	b2db      	uxtb	r3, r3
 8017c4c:	2b1a      	cmp	r3, #26
 8017c4e:	d82a      	bhi.n	8017ca6 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xea>
 8017c50:	2102      	movs	r1, #2
 8017c52:	f106 001c 	add.w	r0, r6, #28
 8017c56:	f7ff ff34 	bl	8017ac2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8017c5a:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 8017c5e:	b264      	sxtb	r4, r4
 8017c60:	d12b      	bne.n	8017cba <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xfe>
 8017c62:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8017c66:	4363      	muls	r3, r4
 8017c68:	4a15      	ldr	r2, [pc, #84]	@ (8017cc0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x104>)
 8017c6a:	6911      	ldr	r1, [r2, #16]
 8017c6c:	4299      	cmp	r1, r3
 8017c6e:	bf1f      	itttt	ne
 8017c70:	6113      	strne	r3, [r2, #16]
 8017c72:	4b14      	ldrne	r3, [pc, #80]	@ (8017cc4 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x108>)
 8017c74:	2201      	movne	r2, #1
 8017c76:	601a      	strne	r2, [r3, #0]
 8017c78:	e015      	b.n	8017ca6 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xea>
 8017c7a:	f993 1000 	ldrsb.w	r1, [r3]
 8017c7e:	42a1      	cmp	r1, r4
 8017c80:	d10e      	bne.n	8017ca0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe4>
 8017c82:	7859      	ldrb	r1, [r3, #1]
 8017c84:	4281      	cmp	r1, r0
 8017c86:	d10b      	bne.n	8017ca0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe4>
 8017c88:	2c00      	cmp	r4, #0
 8017c8a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8017c8e:	fb04 f303 	mul.w	r3, r4, r3
 8017c92:	bfcc      	ite	gt
 8017c94:	223c      	movgt	r2, #60	@ 0x3c
 8017c96:	f06f 023b 	mvnle.w	r2, #59	@ 0x3b
 8017c9a:	fb02 3300 	mla	r3, r2, r0, r3
 8017c9e:	e7e3      	b.n	8017c68 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xac>
 8017ca0:	3302      	adds	r3, #2
 8017ca2:	3a01      	subs	r2, #1
 8017ca4:	d1e9      	bne.n	8017c7a <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xbe>
 8017ca6:	4b06      	ldr	r3, [pc, #24]	@ (8017cc0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x104>)
 8017ca8:	691b      	ldr	r3, [r3, #16]
 8017caa:	1aed      	subs	r5, r5, r3
 8017cac:	9501      	str	r5, [sp, #4]
 8017cae:	2100      	movs	r1, #0
 8017cb0:	a801      	add	r0, sp, #4
 8017cb2:	f002 fe2b 	bl	801a90c <settimeofday>
 8017cb6:	b00c      	add	sp, #48	@ 0x30
 8017cb8:	bd70      	pop	{r4, r5, r6, pc}
 8017cba:	4b03      	ldr	r3, [pc, #12]	@ (8017cc8 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x10c>)
 8017cbc:	220c      	movs	r2, #12
 8017cbe:	e7f0      	b.n	8017ca2 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe6>
 8017cc0:	40024000 	andmi	r4, r2, r0
 8017cc4:	2000e2dc 	ldrdcs	lr, [r0], -ip
 8017cc8:	0801f204 	stmdaeq	r1, {r2, r9, ip, sp, lr, pc}

08017ccc <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>:
 8017ccc:	2900      	cmp	r1, #0
 8017cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cd0:	db10      	blt.n	8017cf4 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8017cd2:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8017cdc:	42ab      	cmp	r3, r5
 8017cde:	d009      	beq.n	8017cf4 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8017ce0:	011c      	lsls	r4, r3, #4
 8017ce2:	5937      	ldr	r7, [r6, r4]
 8017ce4:	42b9      	cmp	r1, r7
 8017ce6:	d106      	bne.n	8017cf6 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x2a>
 8017ce8:	4b04      	ldr	r3, [pc, #16]	@ (8017cfc <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x30>)
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4420      	add	r0, r4
 8017cee:	4413      	add	r3, r2
 8017cf0:	e9c0 3208 	strd	r3, r2, [r0, #32]
 8017cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cf6:	3301      	adds	r3, #1
 8017cf8:	e7f0      	b.n	8017cdc <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x10>
 8017cfa:	bf00      	nop
 8017cfc:	2001bcc0 	andcs	fp, r1, r0, asr #25

08017d00 <Hardware::Hardware()>:
 8017d00:	b570      	push	{r4, r5, r6, lr}
 8017d02:	2306      	movs	r3, #6
 8017d04:	6143      	str	r3, [r0, #20]
 8017d06:	2500      	movs	r5, #0
 8017d08:	4b5c      	ldr	r3, [pc, #368]	@ (8017e7c <Hardware::Hardware()+0x17c>)
 8017d0a:	7405      	strb	r5, [r0, #16]
 8017d0c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017d10:	b090      	sub	sp, #64	@ 0x40
 8017d12:	e9c0 5528 	strd	r5, r5, [r0, #160]	@ 0xa0
 8017d16:	4604      	mov	r4, r0
 8017d18:	7605      	strb	r5, [r0, #24]
 8017d1a:	61c6      	str	r6, [r0, #28]
 8017d1c:	6018      	str	r0, [r3, #0]
 8017d1e:	f7f0 fc3b 	bl	8008598 <console_init()>
 8017d22:	f001 fc71 	bl	8019608 <timer6_config()>
 8017d26:	f001 fcd5 	bl	80196d4 <systick_config>
 8017d2a:	f001 fca7 	bl	801967c <udelay_init()>
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f002 fd9e 	bl	801a870 <hal::uuid_init(unsigned char*)>
 8017d34:	f001 fcf4 	bl	8019720 <gd32_adc_init()>
 8017d38:	f001 fd7e 	bl	8019838 <gd32_i2c_begin>
 8017d3c:	f241 0004 	movw	r0, #4100	@ 0x1004
 8017d40:	f000 fe66 	bl	8018a10 <rcu_periph_clock_enable>
 8017d44:	484e      	ldr	r0, [pc, #312]	@ (8017e80 <Hardware::Hardware()+0x180>)
 8017d46:	f000 ff1f 	bl	8018b88 <timer_deinit>
 8017d4a:	a803      	add	r0, sp, #12
 8017d4c:	f000 ffc2 	bl	8018cd4 <timer_struct_para_init>
 8017d50:	23ef      	movs	r3, #239	@ 0xef
 8017d52:	a903      	add	r1, sp, #12
 8017d54:	484a      	ldr	r0, [pc, #296]	@ (8017e80 <Hardware::Hardware()+0x180>)
 8017d56:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017d5a:	9605      	str	r6, [sp, #20]
 8017d5c:	f000 ffc2 	bl	8018ce4 <timer_init>
 8017d60:	4847      	ldr	r0, [pc, #284]	@ (8017e80 <Hardware::Hardware()+0x180>)
 8017d62:	f000 fff3 	bl	8018d4c <timer_enable>
 8017d66:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8017d6a:	f000 fe7d 	bl	8018a68 <rcu_timer_clock_prescaler_config>
 8017d6e:	f641 400f 	movw	r0, #7183	@ 0x1c0f
 8017d72:	f000 fe4d 	bl	8018a10 <rcu_periph_clock_enable>
 8017d76:	f241 001c 	movw	r0, #4124	@ 0x101c
 8017d7a:	f000 fe49 	bl	8018a10 <rcu_periph_clock_enable>
 8017d7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8017d82:	f000 fe31 	bl	80189e8 <pmu_backup_ldo_config>
 8017d86:	f640 4012 	movw	r0, #3090	@ 0xc12
 8017d8a:	f000 fe41 	bl	8018a10 <rcu_periph_clock_enable>
 8017d8e:	f000 fe37 	bl	8018a00 <pmu_backup_write_enable>
 8017d92:	4629      	mov	r1, r5
 8017d94:	2001      	movs	r0, #1
 8017d96:	f001 fa3b 	bl	8019210 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 8017d9a:	4a3a      	ldr	r2, [pc, #232]	@ (8017e84 <Hardware::Hardware()+0x184>)
 8017d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8017e88 <Hardware::Hardware()+0x188>)
 8017d9e:	1a9b      	subs	r3, r3, r2
 8017da0:	3b01      	subs	r3, #1
 8017da2:	d245      	bcs.n	8017e30 <Hardware::Hardware()+0x130>
 8017da4:	4a39      	ldr	r2, [pc, #228]	@ (8017e8c <Hardware::Hardware()+0x18c>)
 8017da6:	4b3a      	ldr	r3, [pc, #232]	@ (8017e90 <Hardware::Hardware()+0x190>)
 8017da8:	2100      	movs	r1, #0
 8017daa:	1a9b      	subs	r3, r3, r2
 8017dac:	3b01      	subs	r3, #1
 8017dae:	d242      	bcs.n	8017e36 <Hardware::Hardware()+0x136>
 8017db0:	4a38      	ldr	r2, [pc, #224]	@ (8017e94 <Hardware::Hardware()+0x194>)
 8017db2:	4b39      	ldr	r3, [pc, #228]	@ (8017e98 <Hardware::Hardware()+0x198>)
 8017db4:	2100      	movs	r1, #0
 8017db6:	1a9b      	subs	r3, r3, r2
 8017db8:	3b01      	subs	r3, #1
 8017dba:	d23f      	bcs.n	8017e3c <Hardware::Hardware()+0x13c>
 8017dbc:	ab07      	add	r3, sp, #28
 8017dbe:	2524      	movs	r5, #36	@ 0x24
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	3d01      	subs	r5, #1
 8017dc6:	f803 2b01 	strb.w	r2, [r3], #1
 8017dca:	d1fb      	bne.n	8017dc4 <Hardware::Hardware()+0xc4>
 8017dcc:	2217      	movs	r2, #23
 8017dce:	2308      	movs	r3, #8
 8017dd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017dd4:	237c      	movs	r3, #124	@ 0x7c
 8017dd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8017dd8:	f002 fcfe 	bl	801a7d8 <mktime>
 8017ddc:	4629      	mov	r1, r5
 8017dde:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8017de2:	a801      	add	r0, sp, #4
 8017de4:	f002 fd92 	bl	801a90c <settimeofday>
 8017de8:	f640 4003 	movw	r0, #3075	@ 0xc03
 8017dec:	f000 fe10 	bl	8018a10 <rcu_periph_clock_enable>
 8017df0:	482a      	ldr	r0, [pc, #168]	@ (8017e9c <Hardware::Hardware()+0x19c>)
 8017df2:	2310      	movs	r3, #16
 8017df4:	462a      	mov	r2, r5
 8017df6:	2101      	movs	r1, #1
 8017df8:	f000 fd88 	bl	801890c <gpio_mode_set>
 8017dfc:	2310      	movs	r3, #16
 8017dfe:	2202      	movs	r2, #2
 8017e00:	4629      	mov	r1, r5
 8017e02:	4826      	ldr	r0, [pc, #152]	@ (8017e9c <Hardware::Hardware()+0x19c>)
 8017e04:	f000 fda4 	bl	8018950 <gpio_output_options_set>
 8017e08:	4b25      	ldr	r3, [pc, #148]	@ (8017ea0 <Hardware::Hardware()+0x1a0>)
 8017e0a:	2210      	movs	r2, #16
 8017e0c:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18
 8017e10:	69e1      	ldr	r1, [r4, #28]
 8017e12:	2900      	cmp	r1, #0
 8017e14:	da2b      	bge.n	8017e6e <Hardware::Hardware()+0x16e>
 8017e16:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8017e1a:	2b07      	cmp	r3, #7
 8017e1c:	d911      	bls.n	8017e42 <Hardware::Hardware()+0x142>
 8017e1e:	4821      	ldr	r0, [pc, #132]	@ (8017ea4 <Hardware::Hardware()+0x1a4>)
 8017e20:	f000 f872 	bl	8017f08 <console_error>
 8017e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e28:	61e2      	str	r2, [r4, #28]
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	b010      	add	sp, #64	@ 0x40
 8017e2e:	bd70      	pop	{r4, r5, r6, pc}
 8017e30:	f802 5b01 	strb.w	r5, [r2], #1
 8017e34:	e7b4      	b.n	8017da0 <Hardware::Hardware()+0xa0>
 8017e36:	f802 1b01 	strb.w	r1, [r2], #1
 8017e3a:	e7b7      	b.n	8017dac <Hardware::Hardware()+0xac>
 8017e3c:	f802 1b01 	strb.w	r1, [r2], #1
 8017e40:	e7ba      	b.n	8017db8 <Hardware::Hardware()+0xb8>
 8017e42:	4a19      	ldr	r2, [pc, #100]	@ (8017ea8 <Hardware::Hardware()+0x1a8>)
 8017e44:	6811      	ldr	r1, [r2, #0]
 8017e46:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8017e4a:	1c50      	adds	r0, r2, #1
 8017e4c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 8017e50:	1c58      	adds	r0, r3, #1
 8017e52:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8017e56:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8017e5a:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 8017e5e:	6219      	str	r1, [r3, #32]
 8017e60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017e64:	e9c3 1209 	strd	r1, r2, [r3, #36]	@ 0x24
 8017e68:	4910      	ldr	r1, [pc, #64]	@ (8017eac <Hardware::Hardware()+0x1ac>)
 8017e6a:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8017e6c:	e7dc      	b.n	8017e28 <Hardware::Hardware()+0x128>
 8017e6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017e72:	4620      	mov	r0, r4
 8017e74:	f7ff ff2a 	bl	8017ccc <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>
 8017e78:	e7d7      	b.n	8017e2a <Hardware::Hardware()+0x12a>
 8017e7a:	bf00      	nop
 8017e7c:	2000e3d0 	ldrdcs	lr, [r0], -r0
 8017e80:	40001000 	andmi	r1, r0, r0
 8017e84:	2001c000 	andcs	ip, r1, r0
 8017e88:	2001c428 	andcs	ip, r1, r8, lsr #8
 8017e8c:	10008000 	andne	r8, r0, r0
 8017e90:	1000cc88 	andne	ip, r0, r8, lsl #25
 8017e94:	20020000 	andcs	r0, r2, r0
 8017e98:	20030000 	andcs	r0, r3, r0
 8017e9c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8017ea0:	40020000 	andmi	r0, r2, r0
 8017ea4:	0801bb6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 8017ea8:	2001bcc0 	andcs	fp, r1, r0, asr #25
 8017eac:	08017911 	stmdaeq	r1, {r0, r4, r8, fp, ip, sp, lr}

08017eb0 <Hardware::Reboot()>:
 8017eb0:	4604      	mov	r4, r0
 8017eb2:	b508      	push	{r3, lr}
 8017eb4:	2500      	movs	r5, #0
 8017eb6:	480f      	ldr	r0, [pc, #60]	@ (8017ef4 <Hardware::Reboot()+0x44>)
 8017eb8:	f002 fb73 	bl	801a5a2 <puts>
 8017ebc:	2104      	movs	r1, #4
 8017ebe:	7425      	strb	r5, [r4, #16]
 8017ec0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017ec4:	f000 fcf8 	bl	80188b8 <fwdgt_config>
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f7f2 f8e1 	bl	800a090 <Hardware::RebootHandler()>
 8017ece:	f7fc fd91 	bl	80149f4 <net::net_shutdown()>
 8017ed2:	4629      	mov	r1, r5
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	f7ff fdc9 	bl	8017a6c <Hardware::SetMode(hardware::ledblink::Mode)>
 8017eda:	f3bf 8f4f 	dsb	sy
 8017ede:	4906      	ldr	r1, [pc, #24]	@ (8017ef8 <Hardware::Reboot()+0x48>)
 8017ee0:	4b06      	ldr	r3, [pc, #24]	@ (8017efc <Hardware::Reboot()+0x4c>)
 8017ee2:	68ca      	ldr	r2, [r1, #12]
 8017ee4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8017ee8:	4313      	orrs	r3, r2
 8017eea:	60cb      	str	r3, [r1, #12]
 8017eec:	f3bf 8f4f 	dsb	sy
 8017ef0:	bf00      	nop
 8017ef2:	e7fd      	b.n	8017ef0 <Hardware::Reboot()+0x40>
 8017ef4:	0801b2e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, ip, sp, pc}
 8017ef8:	e000ed00 	and	lr, r0, r0, lsl #26
 8017efc:	05fa0004 	ldrbeq	r0, [sl, #4]!

08017f00 <console_putc>:
 8017f00:	f001 be10 	b.w	8019b24 <uart0_putc>

08017f04 <console_puts>:
 8017f04:	f001 be28 	b.w	8019b58 <uart0_puts>

08017f08 <console_error>:
 8017f08:	b510      	push	{r4, lr}
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	4805      	ldr	r0, [pc, #20]	@ (8017f24 <console_error+0x1c>)
 8017f0e:	f001 fe23 	bl	8019b58 <uart0_puts>
 8017f12:	4620      	mov	r0, r4
 8017f14:	f001 fe20 	bl	8019b58 <uart0_puts>
 8017f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f1c:	4802      	ldr	r0, [pc, #8]	@ (8017f28 <console_error+0x20>)
 8017f1e:	f001 be1b 	b.w	8019b58 <uart0_puts>
 8017f22:	bf00      	nop
 8017f24:	0801bded 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 8017f28:	0801bdf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}

08017f2c <console_set_fg_color>:
 8017f2c:	2807      	cmp	r0, #7
 8017f2e:	d810      	bhi.n	8017f52 <console_set_fg_color+0x26>
 8017f30:	e8df f000 	tbb	[pc, r0]
 8017f34:	0b090704 	bleq	8259b4c <_sidata+0x23a37c>
 8017f38:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	@ 8017f04 <console_puts>
 8017f3c:	4806      	ldr	r0, [pc, #24]	@ (8017f58 <console_set_fg_color+0x2c>)
 8017f3e:	f001 be0b 	b.w	8019b58 <uart0_puts>
 8017f42:	4806      	ldr	r0, [pc, #24]	@ (8017f5c <console_set_fg_color+0x30>)
 8017f44:	e7fb      	b.n	8017f3e <console_set_fg_color+0x12>
 8017f46:	4806      	ldr	r0, [pc, #24]	@ (8017f60 <console_set_fg_color+0x34>)
 8017f48:	e7f9      	b.n	8017f3e <console_set_fg_color+0x12>
 8017f4a:	4806      	ldr	r0, [pc, #24]	@ (8017f64 <console_set_fg_color+0x38>)
 8017f4c:	e7f7      	b.n	8017f3e <console_set_fg_color+0x12>
 8017f4e:	4806      	ldr	r0, [pc, #24]	@ (8017f68 <console_set_fg_color+0x3c>)
 8017f50:	e7f5      	b.n	8017f3e <console_set_fg_color+0x12>
 8017f52:	4806      	ldr	r0, [pc, #24]	@ (8017f6c <console_set_fg_color+0x40>)
 8017f54:	e7f3      	b.n	8017f3e <console_set_fg_color+0x12>
 8017f56:	bf00      	nop
 8017f58:	0801bdf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 8017f5c:	0801bded 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 8017f60:	0801bdff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 8017f64:	0801be05 	stmdaeq	r1, {r0, r2, r9, sl, fp, ip, sp, pc}
 8017f68:	0801bdf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 8017f6c:	0801be0b 	stmdaeq	r1, {r0, r1, r3, r9, sl, fp, ip, sp, pc}

08017f70 <console_status>:
 8017f70:	b510      	push	{r4, lr}
 8017f72:	b280      	uxth	r0, r0
 8017f74:	460c      	mov	r4, r1
 8017f76:	f7ff ffd9 	bl	8017f2c <console_set_fg_color>
 8017f7a:	4807      	ldr	r0, [pc, #28]	@ (8017f98 <console_status+0x28>)
 8017f7c:	f001 fdec 	bl	8019b58 <uart0_puts>
 8017f80:	4620      	mov	r0, r4
 8017f82:	f001 fde9 	bl	8019b58 <uart0_puts>
 8017f86:	200a      	movs	r0, #10
 8017f88:	f001 fdcc 	bl	8019b24 <uart0_putc>
 8017f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f90:	4802      	ldr	r0, [pc, #8]	@ (8017f9c <console_status+0x2c>)
 8017f92:	f001 bde1 	b.w	8019b58 <uart0_puts>
 8017f96:	bf00      	nop
 8017f98:	0801be11 	stmdaeq	r1, {r0, r4, r9, sl, fp, ip, sp, pc}
 8017f9c:	0801bdf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}

08017fa0 <stack_debug_init>:
 8017fa0:	4b04      	ldr	r3, [pc, #16]	@ (8017fb4 <stack_debug_init+0x14>)
 8017fa2:	4a05      	ldr	r2, [pc, #20]	@ (8017fb8 <stack_debug_init+0x18>)
 8017fa4:	4905      	ldr	r1, [pc, #20]	@ (8017fbc <stack_debug_init+0x1c>)
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	d300      	bcc.n	8017fac <stack_debug_init+0xc>
 8017faa:	4770      	bx	lr
 8017fac:	f843 1b04 	str.w	r1, [r3], #4
 8017fb0:	e7f9      	b.n	8017fa6 <stack_debug_init+0x6>
 8017fb2:	bf00      	nop
 8017fb4:	10000000 	andne	r0, r0, r0
 8017fb8:	10008000 	andne	r8, r0, r0
 8017fbc:	abcdabcd 	blge	7382ef8 <__stack_size+0x737aef8>

08017fc0 <stack_debug_print()>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	4d18      	ldr	r5, [pc, #96]	@ (8018024 <stack_debug_print()+0x64>)
 8017fc4:	4c18      	ldr	r4, [pc, #96]	@ (8018028 <stack_debug_print()+0x68>)
 8017fc6:	4a19      	ldr	r2, [pc, #100]	@ (801802c <stack_debug_print()+0x6c>)
 8017fc8:	4629      	mov	r1, r5
 8017fca:	42a5      	cmp	r5, r4
 8017fcc:	d202      	bcs.n	8017fd4 <stack_debug_print()+0x14>
 8017fce:	6828      	ldr	r0, [r5, #0]
 8017fd0:	4290      	cmp	r0, r2
 8017fd2:	d005      	beq.n	8017fe0 <stack_debug_print()+0x20>
 8017fd4:	4a16      	ldr	r2, [pc, #88]	@ (8018030 <stack_debug_print()+0x70>)
 8017fd6:	6810      	ldr	r0, [r2, #0]
 8017fd8:	1b66      	subs	r6, r4, r5
 8017fda:	42b0      	cmp	r0, r6
 8017fdc:	d102      	bne.n	8017fe4 <stack_debug_print()+0x24>
 8017fde:	bd70      	pop	{r4, r5, r6, pc}
 8017fe0:	3504      	adds	r5, #4
 8017fe2:	e7f2      	b.n	8017fca <stack_debug_print()+0xa>
 8017fe4:	1a64      	subs	r4, r4, r1
 8017fe6:	1a6d      	subs	r5, r5, r1
 8017fe8:	2319      	movs	r3, #25
 8017fea:	10a4      	asrs	r4, r4, #2
 8017fec:	436b      	muls	r3, r5
 8017fee:	6016      	str	r6, [r2, #0]
 8017ff0:	fb93 f3f4 	sdiv	r3, r3, r4
 8017ff4:	b983      	cbnz	r3, 8018018 <stack_debug_print()+0x58>
 8017ff6:	480f      	ldr	r0, [pc, #60]	@ (8018034 <stack_debug_print()+0x74>)
 8017ff8:	f002 fa7e 	bl	801a4f8 <printf>
 8017ffc:	1e21      	subs	r1, r4, #0
 8017ffe:	bfb8      	it	lt
 8018000:	31ff      	addlt	r1, #255	@ 0xff
 8018002:	462b      	mov	r3, r5
 8018004:	4632      	mov	r2, r6
 8018006:	480c      	ldr	r0, [pc, #48]	@ (8018038 <stack_debug_print()+0x78>)
 8018008:	1209      	asrs	r1, r1, #8
 801800a:	f002 fa75 	bl	801a4f8 <printf>
 801800e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018012:	480a      	ldr	r0, [pc, #40]	@ (801803c <stack_debug_print()+0x7c>)
 8018014:	f002 ba70 	b.w	801a4f8 <printf>
 8018018:	2b01      	cmp	r3, #1
 801801a:	bf0c      	ite	eq
 801801c:	4808      	ldreq	r0, [pc, #32]	@ (8018040 <stack_debug_print()+0x80>)
 801801e:	4809      	ldrne	r0, [pc, #36]	@ (8018044 <stack_debug_print()+0x84>)
 8018020:	e7ea      	b.n	8017ff8 <stack_debug_print()+0x38>
 8018022:	bf00      	nop
 8018024:	10000000 	andne	r0, r0, r0
 8018028:	10008000 	andne	r8, r0, r0
 801802c:	abcdabcd 	blge	7382f68 <__stack_size+0x737af68>
 8018030:	2000e3d8 	ldrdcs	lr, [r0], -r8
 8018034:	0801bded 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 8018038:	0801be2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp, pc}
 801803c:	0801be54 	stmdaeq	r1, {r2, r4, r6, r9, sl, fp, ip, sp, pc}
 8018040:	0801be05 	stmdaeq	r1, {r0, r2, r9, sl, fp, ip, sp, pc}
 8018044:	0801be29 	stmdaeq	r1, {r0, r3, r5, r9, sl, fp, ip, sp, pc}

08018048 <stack_debug_run()>:
 8018048:	b508      	push	{r3, lr}
 801804a:	2000      	movs	r0, #0
 801804c:	f002 fc74 	bl	801a938 <time>
 8018050:	4b04      	ldr	r3, [pc, #16]	@ (8018064 <stack_debug_run()+0x1c>)
 8018052:	681a      	ldr	r2, [r3, #0]
 8018054:	4282      	cmp	r2, r0
 8018056:	d004      	beq.n	8018062 <stack_debug_run()+0x1a>
 8018058:	6018      	str	r0, [r3, #0]
 801805a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801805e:	f7ff bfaf 	b.w	8017fc0 <stack_debug_print()>
 8018062:	bd08      	pop	{r3, pc}
 8018064:	2000e3d4 	ldrdcs	lr, [r0], -r4

08018068 <SystemInit>:
 8018068:	4a56      	ldr	r2, [pc, #344]	@ (80181c4 <SystemInit+0x15c>)
 801806a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 801806e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018072:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8018076:	4b54      	ldr	r3, [pc, #336]	@ (80181c8 <SystemInit+0x160>)
 8018078:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801807c:	f042 0201 	orr.w	r2, r2, #1
 8018080:	b082      	sub	sp, #8
 8018082:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8018086:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801808a:	0790      	lsls	r0, r2, #30
 801808c:	d5fb      	bpl.n	8018086 <SystemInit+0x1e>
 801808e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8018092:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8018096:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 801809a:	2300      	movs	r3, #0
 801809c:	9301      	str	r3, [sp, #4]
 801809e:	9b01      	ldr	r3, [sp, #4]
 80180a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80180a2:	d93d      	bls.n	8018120 <SystemInit+0xb8>
 80180a4:	4b48      	ldr	r3, [pc, #288]	@ (80181c8 <SystemInit+0x160>)
 80180a6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80180aa:	f042 0290 	orr.w	r2, r2, #144	@ 0x90
 80180ae:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80180b2:	2200      	movs	r2, #0
 80180b4:	9201      	str	r2, [sp, #4]
 80180b6:	9a01      	ldr	r2, [sp, #4]
 80180b8:	2a4f      	cmp	r2, #79	@ 0x4f
 80180ba:	d934      	bls.n	8018126 <SystemInit+0xbe>
 80180bc:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80180c0:	f022 0203 	bic.w	r2, r2, #3
 80180c4:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80180c8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80180cc:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 80180d0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80180d4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 80180d8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80180dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80180e0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 80180e4:	2200      	movs	r2, #0
 80180e6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80180ea:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 80180ee:	4937      	ldr	r1, [pc, #220]	@ (80181cc <SystemInit+0x164>)
 80180f0:	f8c3 1804 	str.w	r1, [r3, #2052]	@ 0x804
 80180f4:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
 80180f8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80180fc:	f042 0201 	orr.w	r2, r2, #1
 8018100:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8018104:	4b30      	ldr	r3, [pc, #192]	@ (80181c8 <SystemInit+0x160>)
 8018106:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 801810a:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 801810e:	0789      	lsls	r1, r1, #30
 8018110:	d401      	bmi.n	8018116 <SystemInit+0xae>
 8018112:	3a01      	subs	r2, #1
 8018114:	d1f9      	bne.n	801810a <SystemInit+0xa2>
 8018116:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801811a:	0792      	lsls	r2, r2, #30
 801811c:	d406      	bmi.n	801812c <SystemInit+0xc4>
 801811e:	e7fe      	b.n	801811e <SystemInit+0xb6>
 8018120:	9b01      	ldr	r3, [sp, #4]
 8018122:	3301      	adds	r3, #1
 8018124:	e7ba      	b.n	801809c <SystemInit+0x34>
 8018126:	9a01      	ldr	r2, [sp, #4]
 8018128:	3201      	adds	r2, #1
 801812a:	e7c3      	b.n	80180b4 <SystemInit+0x4c>
 801812c:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
 8018130:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8018134:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
 8018138:	4a25      	ldr	r2, [pc, #148]	@ (80181d0 <SystemInit+0x168>)
 801813a:	6811      	ldr	r1, [r2, #0]
 801813c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8018140:	6011      	str	r1, [r2, #0]
 8018142:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 8018146:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 801814a:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801814e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8018152:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 8018156:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801815a:	f441 51a0 	orr.w	r1, r1, #5120	@ 0x1400
 801815e:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 8018162:	491c      	ldr	r1, [pc, #112]	@ (80181d4 <SystemInit+0x16c>)
 8018164:	f8c3 1804 	str.w	r1, [r3, #2052]	@ 0x804
 8018168:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 801816c:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8018170:	f8c3 1800 	str.w	r1, [r3, #2048]	@ 0x800
 8018174:	4914      	ldr	r1, [pc, #80]	@ (80181c8 <SystemInit+0x160>)
 8018176:	f8d1 3800 	ldr.w	r3, [r1, #2048]	@ 0x800
 801817a:	019b      	lsls	r3, r3, #6
 801817c:	d5fb      	bpl.n	8018176 <SystemInit+0x10e>
 801817e:	6813      	ldr	r3, [r2, #0]
 8018180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018184:	6013      	str	r3, [r2, #0]
 8018186:	4b12      	ldr	r3, [pc, #72]	@ (80181d0 <SystemInit+0x168>)
 8018188:	685a      	ldr	r2, [r3, #4]
 801818a:	03d0      	lsls	r0, r2, #15
 801818c:	d5fc      	bpl.n	8018188 <SystemInit+0x120>
 801818e:	681a      	ldr	r2, [r3, #0]
 8018190:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8018194:	601a      	str	r2, [r3, #0]
 8018196:	685a      	ldr	r2, [r3, #4]
 8018198:	0391      	lsls	r1, r2, #14
 801819a:	d5fc      	bpl.n	8018196 <SystemInit+0x12e>
 801819c:	4b0a      	ldr	r3, [pc, #40]	@ (80181c8 <SystemInit+0x160>)
 801819e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80181a2:	f022 0203 	bic.w	r2, r2, #3
 80181a6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80181aa:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80181ae:	f042 0202 	orr.w	r2, r2, #2
 80181b2:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80181b6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80181ba:	0712      	lsls	r2, r2, #28
 80181bc:	d5fb      	bpl.n	80181b6 <SystemInit+0x14e>
 80181be:	b002      	add	sp, #8
 80181c0:	4770      	bx	lr
 80181c2:	bf00      	nop
 80181c4:	e000ed00 	and	lr, r0, r0, lsl #26
 80181c8:	40023000 	andmi	r3, r2, r0
 80181cc:	24003010 	strcs	r3, [r0], #-16
 80181d0:	40007000 	andmi	r7, r0, r0
 80181d4:	0a007810 	beq	803621c <_sidata+0x16a4c>

080181d8 <dma_deinit>:
 80181d8:	2318      	movs	r3, #24
 80181da:	fb03 0301 	mla	r3, r3, r1, r0
 80181de:	b510      	push	{r4, lr}
 80181e0:	691a      	ldr	r2, [r3, #16]
 80181e2:	f022 0201 	bic.w	r2, r2, #1
 80181e6:	611a      	str	r2, [r3, #16]
 80181e8:	2200      	movs	r2, #0
 80181ea:	611a      	str	r2, [r3, #16]
 80181ec:	2903      	cmp	r1, #3
 80181ee:	615a      	str	r2, [r3, #20]
 80181f0:	619a      	str	r2, [r3, #24]
 80181f2:	61da      	str	r2, [r3, #28]
 80181f4:	621a      	str	r2, [r3, #32]
 80181f6:	f04f 0221 	mov.w	r2, #33	@ 0x21
 80181fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80181fc:	d80a      	bhi.n	8018214 <dma_deinit+0x3c>
 80181fe:	2406      	movs	r4, #6
 8018200:	084b      	lsrs	r3, r1, #1
 8018202:	4361      	muls	r1, r4
 8018204:	6882      	ldr	r2, [r0, #8]
 8018206:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801820a:	233d      	movs	r3, #61	@ 0x3d
 801820c:	408b      	lsls	r3, r1
 801820e:	4313      	orrs	r3, r2
 8018210:	6083      	str	r3, [r0, #8]
 8018212:	bd10      	pop	{r4, pc}
 8018214:	3904      	subs	r1, #4
 8018216:	b2ca      	uxtb	r2, r1
 8018218:	2306      	movs	r3, #6
 801821a:	435a      	muls	r2, r3
 801821c:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8018220:	68c4      	ldr	r4, [r0, #12]
 8018222:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018226:	233d      	movs	r3, #61	@ 0x3d
 8018228:	4093      	lsls	r3, r2
 801822a:	4323      	orrs	r3, r4
 801822c:	60c3      	str	r3, [r0, #12]
 801822e:	e7f0      	b.n	8018212 <dma_deinit+0x3a>

08018230 <dma_single_data_para_struct_init>:
 8018230:	2300      	movs	r3, #0
 8018232:	2201      	movs	r2, #1
 8018234:	e9c0 3200 	strd	r3, r2, [r0]
 8018238:	e9c0 3202 	strd	r3, r2, [r0, #8]
 801823c:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8018240:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018244:	6203      	str	r3, [r0, #32]
 8018246:	4770      	bx	lr

08018248 <dma_single_data_mode_init>:
 8018248:	2318      	movs	r3, #24
 801824a:	fb03 0101 	mla	r1, r3, r1, r0
 801824e:	b530      	push	{r4, r5, lr}
 8018250:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8018252:	f023 0304 	bic.w	r3, r3, #4
 8018256:	624b      	str	r3, [r1, #36]	@ 0x24
 8018258:	6813      	ldr	r3, [r2, #0]
 801825a:	618b      	str	r3, [r1, #24]
 801825c:	6893      	ldr	r3, [r2, #8]
 801825e:	61cb      	str	r3, [r1, #28]
 8018260:	69d3      	ldr	r3, [r2, #28]
 8018262:	614b      	str	r3, [r1, #20]
 8018264:	6914      	ldr	r4, [r2, #16]
 8018266:	6a13      	ldr	r3, [r2, #32]
 8018268:	6908      	ldr	r0, [r1, #16]
 801826a:	6995      	ldr	r5, [r2, #24]
 801826c:	4323      	orrs	r3, r4
 801826e:	f420 305e 	bic.w	r0, r0, #227328	@ 0x37800
 8018272:	432b      	orrs	r3, r5
 8018274:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8018278:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 801827c:	4303      	orrs	r3, r0
 801827e:	610b      	str	r3, [r1, #16]
 8018280:	6853      	ldr	r3, [r2, #4]
 8018282:	b983      	cbnz	r3, 80182a6 <dma_single_data_mode_init+0x5e>
 8018284:	690b      	ldr	r3, [r1, #16]
 8018286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801828a:	610b      	str	r3, [r1, #16]
 801828c:	68d3      	ldr	r3, [r2, #12]
 801828e:	b993      	cbnz	r3, 80182b6 <dma_single_data_mode_init+0x6e>
 8018290:	690b      	ldr	r3, [r1, #16]
 8018292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8018296:	610b      	str	r3, [r1, #16]
 8018298:	6953      	ldr	r3, [r2, #20]
 801829a:	b983      	cbnz	r3, 80182be <dma_single_data_mode_init+0x76>
 801829c:	690b      	ldr	r3, [r1, #16]
 801829e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80182a2:	610b      	str	r3, [r1, #16]
 80182a4:	bd30      	pop	{r4, r5, pc}
 80182a6:	2b01      	cmp	r3, #1
 80182a8:	690b      	ldr	r3, [r1, #16]
 80182aa:	bf0c      	ite	eq
 80182ac:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 80182b0:	f443 4300 	orrne.w	r3, r3, #32768	@ 0x8000
 80182b4:	e7e9      	b.n	801828a <dma_single_data_mode_init+0x42>
 80182b6:	690b      	ldr	r3, [r1, #16]
 80182b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80182bc:	e7eb      	b.n	8018296 <dma_single_data_mode_init+0x4e>
 80182be:	690b      	ldr	r3, [r1, #16]
 80182c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80182c4:	e7ed      	b.n	80182a2 <dma_single_data_mode_init+0x5a>
	...

080182c8 <dma_multi_data_mode_init>:
 80182c8:	2318      	movs	r3, #24
 80182ca:	fb03 0101 	mla	r1, r3, r1, r0
 80182ce:	6a10      	ldr	r0, [r2, #32]
 80182d0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80182d2:	4303      	orrs	r3, r0
 80182d4:	f043 0304 	orr.w	r3, r3, #4
 80182d8:	b510      	push	{r4, lr}
 80182da:	624b      	str	r3, [r1, #36]	@ 0x24
 80182dc:	6813      	ldr	r3, [r2, #0]
 80182de:	618b      	str	r3, [r1, #24]
 80182e0:	68d3      	ldr	r3, [r2, #12]
 80182e2:	61cb      	str	r3, [r1, #28]
 80182e4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80182e6:	614b      	str	r3, [r1, #20]
 80182e8:	690b      	ldr	r3, [r1, #16]
 80182ea:	4819      	ldr	r0, [pc, #100]	@ (8018350 <dma_multi_data_mode_init+0x88>)
 80182ec:	6914      	ldr	r4, [r2, #16]
 80182ee:	4018      	ands	r0, r3
 80182f0:	6853      	ldr	r3, [r2, #4]
 80182f2:	4323      	orrs	r3, r4
 80182f4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80182f6:	4323      	orrs	r3, r4
 80182f8:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80182fa:	4323      	orrs	r3, r4
 80182fc:	6994      	ldr	r4, [r2, #24]
 80182fe:	4323      	orrs	r3, r4
 8018300:	69d4      	ldr	r4, [r2, #28]
 8018302:	4323      	orrs	r3, r4
 8018304:	4303      	orrs	r3, r0
 8018306:	610b      	str	r3, [r1, #16]
 8018308:	6893      	ldr	r3, [r2, #8]
 801830a:	b983      	cbnz	r3, 801832e <dma_multi_data_mode_init+0x66>
 801830c:	690b      	ldr	r3, [r1, #16]
 801830e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8018312:	610b      	str	r3, [r1, #16]
 8018314:	6953      	ldr	r3, [r2, #20]
 8018316:	b993      	cbnz	r3, 801833e <dma_multi_data_mode_init+0x76>
 8018318:	690b      	ldr	r3, [r1, #16]
 801831a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801831e:	610b      	str	r3, [r1, #16]
 8018320:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8018322:	b983      	cbnz	r3, 8018346 <dma_multi_data_mode_init+0x7e>
 8018324:	690b      	ldr	r3, [r1, #16]
 8018326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801832a:	610b      	str	r3, [r1, #16]
 801832c:	bd10      	pop	{r4, pc}
 801832e:	2b01      	cmp	r3, #1
 8018330:	690b      	ldr	r3, [r1, #16]
 8018332:	bf0c      	ite	eq
 8018334:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 8018338:	f443 4300 	orrne.w	r3, r3, #32768	@ 0x8000
 801833c:	e7e9      	b.n	8018312 <dma_multi_data_mode_init+0x4a>
 801833e:	690b      	ldr	r3, [r1, #16]
 8018340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8018344:	e7eb      	b.n	801831e <dma_multi_data_mode_init+0x56>
 8018346:	690b      	ldr	r3, [r1, #16]
 8018348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801834c:	e7ed      	b.n	801832a <dma_multi_data_mode_init+0x62>
 801834e:	bf00      	nop
 8018350:	fe1c873f 	mrc2	7, 0, r8, cr12, cr15, {1}

08018354 <dma_circulation_disable>:
 8018354:	2318      	movs	r3, #24
 8018356:	4359      	muls	r1, r3
 8018358:	3010      	adds	r0, #16
 801835a:	580b      	ldr	r3, [r1, r0]
 801835c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018360:	500b      	str	r3, [r1, r0]
 8018362:	4770      	bx	lr

08018364 <dma_channel_subperipheral_select>:
 8018364:	2318      	movs	r3, #24
 8018366:	4359      	muls	r1, r3
 8018368:	3010      	adds	r0, #16
 801836a:	580b      	ldr	r3, [r1, r0]
 801836c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8018370:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8018374:	500b      	str	r3, [r1, r0]
 8018376:	4770      	bx	lr

08018378 <dma_flag_clear>:
 8018378:	2903      	cmp	r1, #3
 801837a:	b530      	push	{r4, r5, lr}
 801837c:	d80a      	bhi.n	8018394 <dma_flag_clear+0x1c>
 801837e:	2506      	movs	r5, #6
 8018380:	084c      	lsrs	r4, r1, #1
 8018382:	4369      	muls	r1, r5
 8018384:	6883      	ldr	r3, [r0, #8]
 8018386:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801838a:	fa02 f101 	lsl.w	r1, r2, r1
 801838e:	4319      	orrs	r1, r3
 8018390:	6081      	str	r1, [r0, #8]
 8018392:	bd30      	pop	{r4, r5, pc}
 8018394:	3904      	subs	r1, #4
 8018396:	b2cb      	uxtb	r3, r1
 8018398:	2506      	movs	r5, #6
 801839a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801839e:	436b      	muls	r3, r5
 80183a0:	68c4      	ldr	r4, [r0, #12]
 80183a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80183a6:	409a      	lsls	r2, r3
 80183a8:	4322      	orrs	r2, r4
 80183aa:	60c2      	str	r2, [r0, #12]
 80183ac:	e7f1      	b.n	8018392 <dma_flag_clear+0x1a>

080183ae <dma_interrupt_flag_clear>:
 80183ae:	f7ff bfe3 	b.w	8018378 <dma_flag_clear>
	...

080183b4 <enet_software_reset>:
 80183b4:	4b07      	ldr	r3, [pc, #28]	@ (80183d4 <enet_software_reset+0x20>)
 80183b6:	681a      	ldr	r2, [r3, #0]
 80183b8:	f042 0201 	orr.w	r2, r2, #1
 80183bc:	601a      	str	r2, [r3, #0]
 80183be:	4a06      	ldr	r2, [pc, #24]	@ (80183d8 <enet_software_reset+0x24>)
 80183c0:	6819      	ldr	r1, [r3, #0]
 80183c2:	07c9      	lsls	r1, r1, #31
 80183c4:	d501      	bpl.n	80183ca <enet_software_reset+0x16>
 80183c6:	3a01      	subs	r2, #1
 80183c8:	d1fa      	bne.n	80183c0 <enet_software_reset+0xc>
 80183ca:	6818      	ldr	r0, [r3, #0]
 80183cc:	43c0      	mvns	r0, r0
 80183ce:	f000 0001 	and.w	r0, r0, #1
 80183d2:	4770      	bx	lr
 80183d4:	40029000 	andmi	r9, r2, r0
 80183d8:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

080183dc <enet_descriptors_chain_init>:
 80183dc:	f5b0 0fe0 	cmp.w	r0, #7340032	@ 0x700000
 80183e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183e2:	4a19      	ldr	r2, [pc, #100]	@ (8018448 <enet_descriptors_chain_init+0x6c>)
 80183e4:	d125      	bne.n	8018432 <enet_descriptors_chain_init+0x56>
 80183e6:	4b19      	ldr	r3, [pc, #100]	@ (801844c <enet_descriptors_chain_init+0x70>)
 80183e8:	6113      	str	r3, [r2, #16]
 80183ea:	4a19      	ldr	r2, [pc, #100]	@ (8018450 <enet_descriptors_chain_init+0x74>)
 80183ec:	4c19      	ldr	r4, [pc, #100]	@ (8018454 <enet_descriptors_chain_init+0x78>)
 80183ee:	6013      	str	r3, [r2, #0]
 80183f0:	2500      	movs	r5, #0
 80183f2:	f44f 1680 	mov.w	r6, #1048576	@ 0x100000
 80183f6:	2002      	movs	r0, #2
 80183f8:	4917      	ldr	r1, [pc, #92]	@ (8018458 <enet_descriptors_chain_init+0x7c>)
 80183fa:	2200      	movs	r2, #0
 80183fc:	600a      	str	r2, [r1, #0]
 80183fe:	4917      	ldr	r1, [pc, #92]	@ (801845c <enet_descriptors_chain_init+0x80>)
 8018400:	f240 5ef4 	movw	lr, #1524	@ 0x5f4
 8018404:	600a      	str	r2, [r1, #0]
 8018406:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801840a:	f103 0110 	add.w	r1, r3, #16
 801840e:	fb0e 4702 	mla	r7, lr, r2, r4
 8018412:	f841 7c08 	str.w	r7, [r1, #-8]
 8018416:	4594      	cmp	ip, r2
 8018418:	bf94      	ite	ls
 801841a:	461f      	movls	r7, r3
 801841c:	460f      	movhi	r7, r1
 801841e:	3201      	adds	r2, #1
 8018420:	4290      	cmp	r0, r2
 8018422:	e941 6504 	strd	r6, r5, [r1, #-16]
 8018426:	f841 7c04 	str.w	r7, [r1, #-4]
 801842a:	f101 0110 	add.w	r1, r1, #16
 801842e:	d1ee      	bne.n	801840e <enet_descriptors_chain_init+0x32>
 8018430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018432:	4b0b      	ldr	r3, [pc, #44]	@ (8018460 <enet_descriptors_chain_init+0x84>)
 8018434:	60d3      	str	r3, [r2, #12]
 8018436:	4a0b      	ldr	r2, [pc, #44]	@ (8018464 <enet_descriptors_chain_init+0x88>)
 8018438:	4c0b      	ldr	r4, [pc, #44]	@ (8018468 <enet_descriptors_chain_init+0x8c>)
 801843a:	6013      	str	r3, [r2, #0]
 801843c:	f244 55f4 	movw	r5, #17908	@ 0x45f4
 8018440:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8018444:	2022      	movs	r0, #34	@ 0x22
 8018446:	e7d7      	b.n	80183f8 <enet_descriptors_chain_init+0x1c>
 8018448:	40029000 	andmi	r9, r2, r0
 801844c:	2001ba78 	andcs	fp, r1, r8, ror sl
 8018450:	2000e424 	andcs	lr, r0, r4, lsr #8
 8018454:	2000e428 	andcs	lr, r0, r8, lsr #8
 8018458:	2000e418 	andcs	lr, r0, r8, lsl r4
 801845c:	2000e41c 	andcs	lr, r0, ip, lsl r4
 8018460:	2001ba98 	mulcs	r1, r8, sl
 8018464:	2000e420 	andcs	lr, r0, r0, lsr #8
 8018468:	2000f010 	andcs	pc, r0, r0, lsl r0	@ <UNPREDICTABLE>

0801846c <enet_transmit_checksum_config>:
 801846c:	6803      	ldr	r3, [r0, #0]
 801846e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8018472:	430b      	orrs	r3, r1
 8018474:	6003      	str	r3, [r0, #0]
 8018476:	4770      	bx	lr

08018478 <enet_mac_address_set>:
 8018478:	4b03      	ldr	r3, [pc, #12]	@ (8018488 <enet_mac_address_set+0x10>)
 801847a:	888a      	ldrh	r2, [r1, #4]
 801847c:	50c2      	str	r2, [r0, r3]
 801847e:	3304      	adds	r3, #4
 8018480:	680a      	ldr	r2, [r1, #0]
 8018482:	50c2      	str	r2, [r0, r3]
 8018484:	4770      	bx	lr
 8018486:	bf00      	nop
 8018488:	40028040 	andmi	r8, r2, r0, asr #32

0801848c <enet_rx_enable>:
 801848c:	4a05      	ldr	r2, [pc, #20]	@ (80184a4 <enet_rx_enable+0x18>)
 801848e:	6813      	ldr	r3, [r2, #0]
 8018490:	f043 0304 	orr.w	r3, r3, #4
 8018494:	6013      	str	r3, [r2, #0]
 8018496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801849a:	6993      	ldr	r3, [r2, #24]
 801849c:	f043 0302 	orr.w	r3, r3, #2
 80184a0:	6193      	str	r3, [r2, #24]
 80184a2:	4770      	bx	lr
 80184a4:	40028000 	andmi	r8, r2, r0

080184a8 <enet_phy_write_read>:
 80184a8:	b530      	push	{r4, r5, lr}
 80184aa:	4d12      	ldr	r5, [pc, #72]	@ (80184f4 <enet_phy_write_read+0x4c>)
 80184ac:	4604      	mov	r4, r0
 80184ae:	6928      	ldr	r0, [r5, #16]
 80184b0:	0192      	lsls	r2, r2, #6
 80184b2:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 80184b6:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 80184ba:	f020 00c3 	bic.w	r0, r0, #195	@ 0xc3
 80184be:	4302      	orrs	r2, r0
 80184c0:	02c9      	lsls	r1, r1, #11
 80184c2:	b289      	uxth	r1, r1
 80184c4:	4322      	orrs	r2, r4
 80184c6:	430a      	orrs	r2, r1
 80184c8:	2c02      	cmp	r4, #2
 80184ca:	bf04      	itt	eq
 80184cc:	8819      	ldrheq	r1, [r3, #0]
 80184ce:	6169      	streq	r1, [r5, #20]
 80184d0:	f042 0201 	orr.w	r2, r2, #1
 80184d4:	612a      	str	r2, [r5, #16]
 80184d6:	4907      	ldr	r1, [pc, #28]	@ (80184f4 <enet_phy_write_read+0x4c>)
 80184d8:	4a07      	ldr	r2, [pc, #28]	@ (80184f8 <enet_phy_write_read+0x50>)
 80184da:	6908      	ldr	r0, [r1, #16]
 80184dc:	07c0      	lsls	r0, r0, #31
 80184de:	d501      	bpl.n	80184e4 <enet_phy_write_read+0x3c>
 80184e0:	3a01      	subs	r2, #1
 80184e2:	d1fa      	bne.n	80184da <enet_phy_write_read+0x32>
 80184e4:	690a      	ldr	r2, [r1, #16]
 80184e6:	43d2      	mvns	r2, r2
 80184e8:	f002 0001 	and.w	r0, r2, #1
 80184ec:	b90c      	cbnz	r4, 80184f2 <enet_phy_write_read+0x4a>
 80184ee:	694a      	ldr	r2, [r1, #20]
 80184f0:	801a      	strh	r2, [r3, #0]
 80184f2:	bd30      	pop	{r4, r5, pc}
 80184f4:	40028000 	andmi	r8, r2, r0
 80184f8:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

080184fc <enet_init>:
 80184fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80184fe:	4616      	mov	r6, r2
 8018500:	4a9d      	ldr	r2, [pc, #628]	@ (8018778 <enet_init+0x27c>)
 8018502:	460d      	mov	r5, r1
 8018504:	6814      	ldr	r4, [r2, #0]
 8018506:	499d      	ldr	r1, [pc, #628]	@ (801877c <enet_init+0x280>)
 8018508:	2300      	movs	r3, #0
 801850a:	4021      	ands	r1, r4
 801850c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018510:	6011      	str	r1, [r2, #0]
 8018512:	6053      	str	r3, [r2, #4]
 8018514:	6093      	str	r3, [r2, #8]
 8018516:	60d3      	str	r3, [r2, #12]
 8018518:	6991      	ldr	r1, [r2, #24]
 801851a:	f021 01be 	bic.w	r1, r1, #190	@ 0xbe
 801851e:	0409      	lsls	r1, r1, #16
 8018520:	0c09      	lsrs	r1, r1, #16
 8018522:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8018526:	6191      	str	r1, [r2, #24]
 8018528:	4995      	ldr	r1, [pc, #596]	@ (8018780 <enet_init+0x284>)
 801852a:	61d3      	str	r3, [r2, #28]
 801852c:	698c      	ldr	r4, [r1, #24]
 801852e:	4a95      	ldr	r2, [pc, #596]	@ (8018784 <enet_init+0x288>)
 8018530:	4022      	ands	r2, r4
 8018532:	f042 7208 	orr.w	r2, r2, #35651584	@ 0x2200000
 8018536:	618a      	str	r2, [r1, #24]
 8018538:	680a      	ldr	r2, [r1, #0]
 801853a:	4a93      	ldr	r2, [pc, #588]	@ (8018788 <enet_init+0x28c>)
 801853c:	600a      	str	r2, [r1, #0]
 801853e:	2801      	cmp	r0, #1
 8018540:	d146      	bne.n	80185d0 <enet_init+0xd4>
 8018542:	4f92      	ldr	r7, [pc, #584]	@ (801878c <enet_init+0x290>)
 8018544:	461c      	mov	r4, r3
 8018546:	2201      	movs	r2, #1
 8018548:	4611      	mov	r1, r2
 801854a:	f10d 0306 	add.w	r3, sp, #6
 801854e:	2000      	movs	r0, #0
 8018550:	f7ff ffaa 	bl	80184a8 <enet_phy_write_read>
 8018554:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018558:	f002 0204 	and.w	r2, r2, #4
 801855c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018560:	3401      	adds	r4, #1
 8018562:	b922      	cbnz	r2, 801856e <enet_init+0x72>
 8018564:	42bc      	cmp	r4, r7
 8018566:	d1ee      	bne.n	8018546 <enet_init+0x4a>
 8018568:	2000      	movs	r0, #0
 801856a:	b003      	add	sp, #12
 801856c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801856e:	42bc      	cmp	r4, r7
 8018570:	d0fa      	beq.n	8018568 <enet_init+0x6c>
 8018572:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8018576:	f8ad 2006 	strh.w	r2, [sp, #6]
 801857a:	2101      	movs	r1, #1
 801857c:	2200      	movs	r2, #0
 801857e:	2002      	movs	r0, #2
 8018580:	f7ff ff92 	bl	80184a8 <enet_phy_write_read>
 8018584:	2800      	cmp	r0, #0
 8018586:	d0ef      	beq.n	8018568 <enet_init+0x6c>
 8018588:	4f80      	ldr	r7, [pc, #512]	@ (801878c <enet_init+0x290>)
 801858a:	2400      	movs	r4, #0
 801858c:	2201      	movs	r2, #1
 801858e:	4611      	mov	r1, r2
 8018590:	f10d 0306 	add.w	r3, sp, #6
 8018594:	2000      	movs	r0, #0
 8018596:	f7ff ff87 	bl	80184a8 <enet_phy_write_read>
 801859a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801859e:	f002 0220 	and.w	r2, r2, #32
 80185a2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80185a6:	3401      	adds	r4, #1
 80185a8:	b912      	cbnz	r2, 80185b0 <enet_init+0xb4>
 80185aa:	42bc      	cmp	r4, r7
 80185ac:	d1ee      	bne.n	801858c <enet_init+0x90>
 80185ae:	e7db      	b.n	8018568 <enet_init+0x6c>
 80185b0:	42bc      	cmp	r4, r7
 80185b2:	d0d9      	beq.n	8018568 <enet_init+0x6c>
 80185b4:	2101      	movs	r1, #1
 80185b6:	2210      	movs	r2, #16
 80185b8:	2000      	movs	r0, #0
 80185ba:	f7ff ff75 	bl	80184a8 <enet_phy_write_read>
 80185be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80185c2:	f3c3 0080 	ubfx	r0, r3, #2, #1
 80185c6:	02c0      	lsls	r0, r0, #11
 80185c8:	0799      	lsls	r1, r3, #30
 80185ca:	bf58      	it	pl
 80185cc:	f440 4080 	orrpl.w	r0, r0, #16384	@ 0x4000
 80185d0:	4b69      	ldr	r3, [pc, #420]	@ (8018778 <enet_init+0x27c>)
 80185d2:	681a      	ldr	r2, [r3, #0]
 80185d4:	f422 42b0 	bic.w	r2, r2, #22528	@ 0x5800
 80185d8:	4310      	orrs	r0, r2
 80185da:	056a      	lsls	r2, r5, #21
 80185dc:	6018      	str	r0, [r3, #0]
 80185de:	d50b      	bpl.n	80185f8 <enet_init+0xfc>
 80185e0:	681a      	ldr	r2, [r3, #0]
 80185e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80185e6:	601a      	str	r2, [r3, #0]
 80185e8:	4a65      	ldr	r2, [pc, #404]	@ (8018780 <enet_init+0x284>)
 80185ea:	6993      	ldr	r3, [r2, #24]
 80185ec:	f005 6580 	and.w	r5, r5, #67108864	@ 0x4000000
 80185f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80185f4:	431d      	orrs	r5, r3
 80185f6:	6195      	str	r5, [r2, #24]
 80185f8:	485f      	ldr	r0, [pc, #380]	@ (8018778 <enet_init+0x27c>)
 80185fa:	6843      	ldr	r3, [r0, #4]
 80185fc:	431e      	orrs	r6, r3
 80185fe:	4b64      	ldr	r3, [pc, #400]	@ (8018790 <enet_init+0x294>)
 8018600:	6046      	str	r6, [r0, #4]
 8018602:	681a      	ldr	r2, [r3, #0]
 8018604:	07d7      	lsls	r7, r2, #31
 8018606:	d513      	bpl.n	8018630 <enet_init+0x134>
 8018608:	6801      	ldr	r1, [r0, #0]
 801860a:	685a      	ldr	r2, [r3, #4]
 801860c:	4c61      	ldr	r4, [pc, #388]	@ (8018794 <enet_init+0x298>)
 801860e:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 8018612:	4014      	ands	r4, r2
 8018614:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8018618:	4321      	orrs	r1, r4
 801861a:	6001      	str	r1, [r0, #0]
 801861c:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8018620:	0892      	lsrs	r2, r2, #2
 8018622:	6981      	ldr	r1, [r0, #24]
 8018624:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8018628:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 801862c:	430a      	orrs	r2, r1
 801862e:	6182      	str	r2, [r0, #24]
 8018630:	681a      	ldr	r2, [r3, #0]
 8018632:	0796      	lsls	r6, r2, #30
 8018634:	d508      	bpl.n	8018648 <enet_init+0x14c>
 8018636:	4952      	ldr	r1, [pc, #328]	@ (8018780 <enet_init+0x284>)
 8018638:	6898      	ldr	r0, [r3, #8]
 801863a:	680a      	ldr	r2, [r1, #0]
 801863c:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8018640:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8018644:	4302      	orrs	r2, r0
 8018646:	600a      	str	r2, [r1, #0]
 8018648:	681a      	ldr	r2, [r3, #0]
 801864a:	0755      	lsls	r5, r2, #29
 801864c:	d508      	bpl.n	8018660 <enet_init+0x164>
 801864e:	494c      	ldr	r1, [pc, #304]	@ (8018780 <enet_init+0x284>)
 8018650:	68d8      	ldr	r0, [r3, #12]
 8018652:	680a      	ldr	r2, [r1, #0]
 8018654:	f422 027e 	bic.w	r2, r2, #16646144	@ 0xfe0000
 8018658:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 801865c:	4302      	orrs	r2, r0
 801865e:	600a      	str	r2, [r1, #0]
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	0714      	lsls	r4, r2, #28
 8018664:	d508      	bpl.n	8018678 <enet_init+0x17c>
 8018666:	4946      	ldr	r1, [pc, #280]	@ (8018780 <enet_init+0x284>)
 8018668:	6918      	ldr	r0, [r3, #16]
 801866a:	680a      	ldr	r2, [r1, #0]
 801866c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8018670:	f022 0202 	bic.w	r2, r2, #2
 8018674:	4302      	orrs	r2, r0
 8018676:	600a      	str	r2, [r1, #0]
 8018678:	681a      	ldr	r2, [r3, #0]
 801867a:	06d0      	lsls	r0, r2, #27
 801867c:	d506      	bpl.n	801868c <enet_init+0x190>
 801867e:	4940      	ldr	r1, [pc, #256]	@ (8018780 <enet_init+0x284>)
 8018680:	4a45      	ldr	r2, [pc, #276]	@ (8018798 <enet_init+0x29c>)
 8018682:	6988      	ldr	r0, [r1, #24]
 8018684:	4002      	ands	r2, r0
 8018686:	6958      	ldr	r0, [r3, #20]
 8018688:	4302      	orrs	r2, r0
 801868a:	618a      	str	r2, [r1, #24]
 801868c:	681a      	ldr	r2, [r3, #0]
 801868e:	0691      	lsls	r1, r2, #26
 8018690:	d511      	bpl.n	80186b6 <enet_init+0x1ba>
 8018692:	483b      	ldr	r0, [pc, #236]	@ (8018780 <enet_init+0x284>)
 8018694:	699a      	ldr	r2, [r3, #24]
 8018696:	6981      	ldr	r1, [r0, #24]
 8018698:	4c40      	ldr	r4, [pc, #256]	@ (801879c <enet_init+0x2a0>)
 801869a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 801869e:	4014      	ands	r4, r2
 80186a0:	f021 0104 	bic.w	r1, r1, #4
 80186a4:	4321      	orrs	r1, r4
 80186a6:	6181      	str	r1, [r0, #24]
 80186a8:	6801      	ldr	r1, [r0, #0]
 80186aa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80186ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80186b2:	430a      	orrs	r2, r1
 80186b4:	6002      	str	r2, [r0, #0]
 80186b6:	681a      	ldr	r2, [r3, #0]
 80186b8:	0652      	lsls	r2, r2, #25
 80186ba:	d506      	bpl.n	80186ca <enet_init+0x1ce>
 80186bc:	492e      	ldr	r1, [pc, #184]	@ (8018778 <enet_init+0x27c>)
 80186be:	69d8      	ldr	r0, [r3, #28]
 80186c0:	69ca      	ldr	r2, [r1, #28]
 80186c2:	f36f 0210 	bfc	r2, #0, #17
 80186c6:	4302      	orrs	r2, r0
 80186c8:	61ca      	str	r2, [r1, #28]
 80186ca:	681a      	ldr	r2, [r3, #0]
 80186cc:	0617      	lsls	r7, r2, #24
 80186ce:	d517      	bpl.n	8018700 <enet_init+0x204>
 80186d0:	4c29      	ldr	r4, [pc, #164]	@ (8018778 <enet_init+0x27c>)
 80186d2:	6a1a      	ldr	r2, [r3, #32]
 80186d4:	69a0      	ldr	r0, [r4, #24]
 80186d6:	f020 00be 	bic.w	r0, r0, #190	@ 0xbe
 80186da:	f422 417f 	bic.w	r1, r2, #65280	@ 0xff00
 80186de:	0400      	lsls	r0, r0, #16
 80186e0:	0c00      	lsrs	r0, r0, #16
 80186e2:	f021 0141 	bic.w	r1, r1, #65	@ 0x41
 80186e6:	4301      	orrs	r1, r0
 80186e8:	4825      	ldr	r0, [pc, #148]	@ (8018780 <enet_init+0x284>)
 80186ea:	61a1      	str	r1, [r4, #24]
 80186ec:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
 80186f0:	0a12      	lsrs	r2, r2, #8
 80186f2:	f021 0177 	bic.w	r1, r1, #119	@ 0x77
 80186f6:	f002 0277 	and.w	r2, r2, #119	@ 0x77
 80186fa:	430a      	orrs	r2, r1
 80186fc:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 8018700:	681a      	ldr	r2, [r3, #0]
 8018702:	05d6      	lsls	r6, r2, #23
 8018704:	bf42      	ittt	mi
 8018706:	4a1c      	ldrmi	r2, [pc, #112]	@ (8018778 <enet_init+0x27c>)
 8018708:	6a59      	ldrmi	r1, [r3, #36]	@ 0x24
 801870a:	6091      	strmi	r1, [r2, #8]
 801870c:	681a      	ldr	r2, [r3, #0]
 801870e:	0595      	lsls	r5, r2, #22
 8018710:	bf42      	ittt	mi
 8018712:	4a19      	ldrmi	r2, [pc, #100]	@ (8018778 <enet_init+0x27c>)
 8018714:	6a99      	ldrmi	r1, [r3, #40]	@ 0x28
 8018716:	60d1      	strmi	r1, [r2, #12]
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	0554      	lsls	r4, r2, #21
 801871c:	d508      	bpl.n	8018730 <enet_init+0x234>
 801871e:	4916      	ldr	r1, [pc, #88]	@ (8018778 <enet_init+0x27c>)
 8018720:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8018722:	684a      	ldr	r2, [r1, #4]
 8018724:	f422 62fb 	bic.w	r2, r2, #2008	@ 0x7d8
 8018728:	f022 0206 	bic.w	r2, r2, #6
 801872c:	4302      	orrs	r2, r0
 801872e:	604a      	str	r2, [r1, #4]
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	0510      	lsls	r0, r2, #20
 8018734:	d508      	bpl.n	8018748 <enet_init+0x24c>
 8018736:	4910      	ldr	r1, [pc, #64]	@ (8018778 <enet_init+0x27c>)
 8018738:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801873a:	680a      	ldr	r2, [r1, #0]
 801873c:	f422 3291 	bic.w	r2, r2, #74240	@ 0x12200
 8018740:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8018744:	4302      	orrs	r2, r0
 8018746:	600a      	str	r2, [r1, #0]
 8018748:	681a      	ldr	r2, [r3, #0]
 801874a:	04d1      	lsls	r1, r2, #19
 801874c:	d506      	bpl.n	801875c <enet_init+0x260>
 801874e:	490a      	ldr	r1, [pc, #40]	@ (8018778 <enet_init+0x27c>)
 8018750:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8018752:	680a      	ldr	r2, [r1, #0]
 8018754:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8018758:	4302      	orrs	r2, r0
 801875a:	600a      	str	r2, [r1, #0]
 801875c:	681a      	ldr	r2, [r3, #0]
 801875e:	0492      	lsls	r2, r2, #18
 8018760:	d401      	bmi.n	8018766 <enet_init+0x26a>
 8018762:	2001      	movs	r0, #1
 8018764:	e701      	b.n	801856a <enet_init+0x6e>
 8018766:	4904      	ldr	r1, [pc, #16]	@ (8018778 <enet_init+0x27c>)
 8018768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801876a:	680a      	ldr	r2, [r1, #0]
 801876c:	f422 2260 	bic.w	r2, r2, #917504	@ 0xe0000
 8018770:	4313      	orrs	r3, r2
 8018772:	600b      	str	r3, [r1, #0]
 8018774:	e7f5      	b.n	8018762 <enet_init+0x266>
 8018776:	bf00      	nop
 8018778:	40028000 	andmi	r8, r2, r0
 801877c:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	@ 0xffffffc4
 8018780:	40029000 	andmi	r9, r2, r0
 8018784:	f8de3f23 			@ <UNDEFINED> instruction: 0xf8de3f23
 8018788:	02c16000 	sbceq	r6, r1, #0
 801878c:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>
 8018790:	2000e3dc 	ldrdcs	lr, [r0], -ip
 8018794:	02000080 	andeq	r0, r0, #128	@ 0x80
 8018798:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	@ 0x39c
 801879c:	01000004 	tsteq	r0, r4

080187a0 <enet_txfifo_flush>:
 80187a0:	4a08      	ldr	r2, [pc, #32]	@ (80187c4 <enet_txfifo_flush+0x24>)
 80187a2:	6993      	ldr	r3, [r2, #24]
 80187a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80187a8:	6193      	str	r3, [r2, #24]
 80187aa:	4b07      	ldr	r3, [pc, #28]	@ (80187c8 <enet_txfifo_flush+0x28>)
 80187ac:	6990      	ldr	r0, [r2, #24]
 80187ae:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 80187b2:	d003      	beq.n	80187bc <enet_txfifo_flush+0x1c>
 80187b4:	3b01      	subs	r3, #1
 80187b6:	d1f9      	bne.n	80187ac <enet_txfifo_flush+0xc>
 80187b8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80187bc:	fab0 f080 	clz	r0, r0
 80187c0:	0940      	lsrs	r0, r0, #5
 80187c2:	4770      	bx	lr
 80187c4:	40029000 	andmi	r9, r2, r0
 80187c8:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

080187cc <enet_tx_enable>:
 80187cc:	4a06      	ldr	r2, [pc, #24]	@ (80187e8 <enet_tx_enable+0x1c>)
 80187ce:	b508      	push	{r3, lr}
 80187d0:	6813      	ldr	r3, [r2, #0]
 80187d2:	f043 0308 	orr.w	r3, r3, #8
 80187d6:	6013      	str	r3, [r2, #0]
 80187d8:	f7ff ffe2 	bl	80187a0 <enet_txfifo_flush>
 80187dc:	4a03      	ldr	r2, [pc, #12]	@ (80187ec <enet_tx_enable+0x20>)
 80187de:	6993      	ldr	r3, [r2, #24]
 80187e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80187e4:	6193      	str	r3, [r2, #24]
 80187e6:	bd08      	pop	{r3, pc}
 80187e8:	40028000 	andmi	r8, r2, r0
 80187ec:	40029000 	andmi	r9, r2, r0

080187f0 <enet_enable>:
 80187f0:	b508      	push	{r3, lr}
 80187f2:	f7ff ffeb 	bl	80187cc <enet_tx_enable>
 80187f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80187fa:	f7ff be47 	b.w	801848c <enet_rx_enable>
	...

08018800 <enet_desc_information_get>:
 8018800:	2905      	cmp	r1, #5
 8018802:	d820      	bhi.n	8018846 <enet_desc_information_get+0x46>
 8018804:	e8df f001 	tbb	[pc, r1]
 8018808:	0309191b 	movweq	r1, #39195	@ 0x991b
 801880c:	68401907 	stmdavs	r0, {r0, r1, r2, r8, fp, ip}^
 8018810:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018814:	4770      	bx	lr
 8018816:	88c0      	ldrh	r0, [r0, #6]
 8018818:	e7fa      	b.n	8018810 <enet_desc_information_get+0x10>
 801881a:	6802      	ldr	r2, [r0, #0]
 801881c:	f3c2 430d 	ubfx	r3, r2, #16, #14
 8018820:	2b04      	cmp	r3, #4
 8018822:	d913      	bls.n	801884c <enet_desc_information_get+0x4c>
 8018824:	490a      	ldr	r1, [pc, #40]	@ (8018850 <enet_desc_information_get+0x50>)
 8018826:	6809      	ldr	r1, [r1, #0]
 8018828:	0189      	lsls	r1, r1, #6
 801882a:	f1a3 0004 	sub.w	r0, r3, #4
 801882e:	d50e      	bpl.n	801884e <enet_desc_information_get+0x4e>
 8018830:	f012 0f20 	tst.w	r2, #32
 8018834:	bf18      	it	ne
 8018836:	4618      	movne	r0, r3
 8018838:	4770      	bx	lr
 801883a:	6880      	ldr	r0, [r0, #8]
 801883c:	4770      	bx	lr
 801883e:	6800      	ldr	r0, [r0, #0]
 8018840:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8018844:	4770      	bx	lr
 8018846:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801884a:	4770      	bx	lr
 801884c:	2000      	movs	r0, #0
 801884e:	4770      	bx	lr
 8018850:	40028000 	andmi	r8, r2, r0

08018854 <enet_initpara_reset>:
 8018854:	4b08      	ldr	r3, [pc, #32]	@ (8018878 <enet_initpara_reset+0x24>)
 8018856:	2200      	movs	r2, #0
 8018858:	e9c3 2200 	strd	r2, r2, [r3]
 801885c:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8018860:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8018864:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8018868:	e9c3 2208 	strd	r2, r2, [r3, #32]
 801886c:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
 8018870:	e9c3 220c 	strd	r2, r2, [r3, #48]	@ 0x30
 8018874:	639a      	str	r2, [r3, #56]	@ 0x38
 8018876:	4770      	bx	lr
 8018878:	2000e3dc 	ldrdcs	lr, [r0], -ip

0801887c <enet_deinit>:
 801887c:	b508      	push	{r3, lr}
 801887e:	f240 4019 	movw	r0, #1049	@ 0x419
 8018882:	f000 f8e0 	bl	8018a46 <rcu_periph_reset_enable>
 8018886:	f240 4019 	movw	r0, #1049	@ 0x419
 801888a:	f000 f8de 	bl	8018a4a <rcu_periph_reset_disable>
 801888e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018892:	f7ff bfdf 	b.w	8018854 <enet_initpara_reset>
	...

08018898 <fwdgt_enable>:
 8018898:	4b02      	ldr	r3, [pc, #8]	@ (80188a4 <fwdgt_enable+0xc>)
 801889a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 801889e:	601a      	str	r2, [r3, #0]
 80188a0:	4770      	bx	lr
 80188a2:	bf00      	nop
 80188a4:	40003000 	andmi	r3, r0, r0

080188a8 <fwdgt_counter_reload>:
 80188a8:	4b02      	ldr	r3, [pc, #8]	@ (80188b4 <fwdgt_counter_reload+0xc>)
 80188aa:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80188ae:	601a      	str	r2, [r3, #0]
 80188b0:	4770      	bx	lr
 80188b2:	bf00      	nop
 80188b4:	40003000 	andmi	r3, r0, r0

080188b8 <fwdgt_config>:
 80188b8:	4a12      	ldr	r2, [pc, #72]	@ (8018904 <fwdgt_config+0x4c>)
 80188ba:	b510      	push	{r4, lr}
 80188bc:	f245 5355 	movw	r3, #21845	@ 0x5555
 80188c0:	4c11      	ldr	r4, [pc, #68]	@ (8018908 <fwdgt_config+0x50>)
 80188c2:	6013      	str	r3, [r2, #0]
 80188c4:	68d3      	ldr	r3, [r2, #12]
 80188c6:	3c01      	subs	r4, #1
 80188c8:	f003 0301 	and.w	r3, r3, #1
 80188cc:	d013      	beq.n	80188f6 <fwdgt_config+0x3e>
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d1f8      	bne.n	80188c4 <fwdgt_config+0xc>
 80188d2:	6051      	str	r1, [r2, #4]
 80188d4:	490c      	ldr	r1, [pc, #48]	@ (8018908 <fwdgt_config+0x50>)
 80188d6:	4a0b      	ldr	r2, [pc, #44]	@ (8018904 <fwdgt_config+0x4c>)
 80188d8:	68d3      	ldr	r3, [r2, #12]
 80188da:	3901      	subs	r1, #1
 80188dc:	f003 0302 	and.w	r3, r3, #2
 80188e0:	d00d      	beq.n	80188fe <fwdgt_config+0x46>
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d1f8      	bne.n	80188d8 <fwdgt_config+0x20>
 80188e6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80188ea:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 80188ee:	6090      	str	r0, [r2, #8]
 80188f0:	6013      	str	r3, [r2, #0]
 80188f2:	2001      	movs	r0, #1
 80188f4:	e002      	b.n	80188fc <fwdgt_config+0x44>
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d0eb      	beq.n	80188d2 <fwdgt_config+0x1a>
 80188fa:	2000      	movs	r0, #0
 80188fc:	bd10      	pop	{r4, pc}
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d1fb      	bne.n	80188fa <fwdgt_config+0x42>
 8018902:	e7f0      	b.n	80188e6 <fwdgt_config+0x2e>
 8018904:	40003000 	andmi	r3, r0, r0
 8018908:	000fffff 	strdeq	pc, [pc], -pc	@ <UNPREDICTABLE>

0801890c <gpio_mode_set>:
 801890c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018910:	6805      	ldr	r5, [r0, #0]
 8018912:	68c4      	ldr	r4, [r0, #12]
 8018914:	2600      	movs	r6, #0
 8018916:	f04f 0e01 	mov.w	lr, #1
 801891a:	f04f 0803 	mov.w	r8, #3
 801891e:	fa0e f706 	lsl.w	r7, lr, r6
 8018922:	421f      	tst	r7, r3
 8018924:	d00d      	beq.n	8018942 <gpio_mode_set+0x36>
 8018926:	0077      	lsls	r7, r6, #1
 8018928:	fa08 fc07 	lsl.w	ip, r8, r7
 801892c:	fa01 f907 	lsl.w	r9, r1, r7
 8018930:	ea25 050c 	bic.w	r5, r5, ip
 8018934:	ea24 040c 	bic.w	r4, r4, ip
 8018938:	fa02 f707 	lsl.w	r7, r2, r7
 801893c:	ea49 0505 	orr.w	r5, r9, r5
 8018940:	433c      	orrs	r4, r7
 8018942:	3601      	adds	r6, #1
 8018944:	2e10      	cmp	r6, #16
 8018946:	d1ea      	bne.n	801891e <gpio_mode_set+0x12>
 8018948:	6005      	str	r5, [r0, #0]
 801894a:	60c4      	str	r4, [r0, #12]
 801894c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018950 <gpio_output_options_set>:
 8018950:	2901      	cmp	r1, #1
 8018952:	6841      	ldr	r1, [r0, #4]
 8018954:	bf0c      	ite	eq
 8018956:	4319      	orreq	r1, r3
 8018958:	4399      	bicne	r1, r3
 801895a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801895c:	6041      	str	r1, [r0, #4]
 801895e:	6881      	ldr	r1, [r0, #8]
 8018960:	2400      	movs	r4, #0
 8018962:	2601      	movs	r6, #1
 8018964:	2703      	movs	r7, #3
 8018966:	fa06 f504 	lsl.w	r5, r6, r4
 801896a:	421d      	tst	r5, r3
 801896c:	d007      	beq.n	801897e <gpio_output_options_set+0x2e>
 801896e:	0065      	lsls	r5, r4, #1
 8018970:	fa07 fc05 	lsl.w	ip, r7, r5
 8018974:	ea21 010c 	bic.w	r1, r1, ip
 8018978:	fa02 f505 	lsl.w	r5, r2, r5
 801897c:	4329      	orrs	r1, r5
 801897e:	3401      	adds	r4, #1
 8018980:	2c10      	cmp	r4, #16
 8018982:	d1f0      	bne.n	8018966 <gpio_output_options_set+0x16>
 8018984:	6081      	str	r1, [r0, #8]
 8018986:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018988 <gpio_af_set>:
 8018988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801898a:	6a06      	ldr	r6, [r0, #32]
 801898c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 801898e:	2300      	movs	r3, #0
 8018990:	f04f 0c01 	mov.w	ip, #1
 8018994:	f04f 0e0f 	mov.w	lr, #15
 8018998:	fa0c f403 	lsl.w	r4, ip, r3
 801899c:	4214      	tst	r4, r2
 801899e:	d007      	beq.n	80189b0 <gpio_af_set+0x28>
 80189a0:	009c      	lsls	r4, r3, #2
 80189a2:	fa0e f704 	lsl.w	r7, lr, r4
 80189a6:	ea26 0607 	bic.w	r6, r6, r7
 80189aa:	fa01 f404 	lsl.w	r4, r1, r4
 80189ae:	4326      	orrs	r6, r4
 80189b0:	3301      	adds	r3, #1
 80189b2:	2b08      	cmp	r3, #8
 80189b4:	d1f0      	bne.n	8018998 <gpio_af_set+0x10>
 80189b6:	2300      	movs	r3, #0
 80189b8:	f04f 0c01 	mov.w	ip, #1
 80189bc:	f04f 0e0f 	mov.w	lr, #15
 80189c0:	f103 0408 	add.w	r4, r3, #8
 80189c4:	fa0c f404 	lsl.w	r4, ip, r4
 80189c8:	4214      	tst	r4, r2
 80189ca:	d007      	beq.n	80189dc <gpio_af_set+0x54>
 80189cc:	009c      	lsls	r4, r3, #2
 80189ce:	fa0e f704 	lsl.w	r7, lr, r4
 80189d2:	ea25 0507 	bic.w	r5, r5, r7
 80189d6:	fa01 f404 	lsl.w	r4, r1, r4
 80189da:	4325      	orrs	r5, r4
 80189dc:	3301      	adds	r3, #1
 80189de:	2b08      	cmp	r3, #8
 80189e0:	d1ee      	bne.n	80189c0 <gpio_af_set+0x38>
 80189e2:	6206      	str	r6, [r0, #32]
 80189e4:	6245      	str	r5, [r0, #36]	@ 0x24
 80189e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080189e8 <pmu_backup_ldo_config>:
 80189e8:	4b04      	ldr	r3, [pc, #16]	@ (80189fc <pmu_backup_ldo_config+0x14>)
 80189ea:	685a      	ldr	r2, [r3, #4]
 80189ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80189f0:	605a      	str	r2, [r3, #4]
 80189f2:	685a      	ldr	r2, [r3, #4]
 80189f4:	4302      	orrs	r2, r0
 80189f6:	605a      	str	r2, [r3, #4]
 80189f8:	4770      	bx	lr
 80189fa:	bf00      	nop
 80189fc:	40007000 	andmi	r7, r0, r0

08018a00 <pmu_backup_write_enable>:
 8018a00:	4a02      	ldr	r2, [pc, #8]	@ (8018a0c <pmu_backup_write_enable+0xc>)
 8018a02:	6813      	ldr	r3, [r2, #0]
 8018a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018a08:	6013      	str	r3, [r2, #0]
 8018a0a:	4770      	bx	lr
 8018a0c:	40007000 	andmi	r7, r0, r0

08018a10 <rcu_periph_clock_enable>:
 8018a10:	0983      	lsrs	r3, r0, #6
 8018a12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018a16:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8018a1a:	f000 001f 	and.w	r0, r0, #31
 8018a1e:	6819      	ldr	r1, [r3, #0]
 8018a20:	2201      	movs	r2, #1
 8018a22:	4082      	lsls	r2, r0
 8018a24:	430a      	orrs	r2, r1
 8018a26:	601a      	str	r2, [r3, #0]
 8018a28:	4770      	bx	lr

08018a2a <rcu_periph_clock_disable>:
 8018a2a:	0983      	lsrs	r3, r0, #6
 8018a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018a30:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8018a34:	f000 001f 	and.w	r0, r0, #31
 8018a38:	681a      	ldr	r2, [r3, #0]
 8018a3a:	2101      	movs	r1, #1
 8018a3c:	4081      	lsls	r1, r0
 8018a3e:	ea22 0201 	bic.w	r2, r2, r1
 8018a42:	601a      	str	r2, [r3, #0]
 8018a44:	4770      	bx	lr

08018a46 <rcu_periph_reset_enable>:
 8018a46:	f7ff bfe3 	b.w	8018a10 <rcu_periph_clock_enable>

08018a4a <rcu_periph_reset_disable>:
 8018a4a:	f7ff bfee 	b.w	8018a2a <rcu_periph_clock_disable>
	...

08018a50 <rcu_ckout0_config>:
 8018a50:	4a04      	ldr	r2, [pc, #16]	@ (8018a64 <rcu_ckout0_config+0x14>)
 8018a52:	f8d2 3808 	ldr.w	r3, [r2, #2056]	@ 0x808
 8018a56:	f023 63ec 	bic.w	r3, r3, #123731968	@ 0x7600000
 8018a5a:	430b      	orrs	r3, r1
 8018a5c:	4303      	orrs	r3, r0
 8018a5e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
 8018a62:	4770      	bx	lr
 8018a64:	40023000 	andmi	r3, r2, r0

08018a68 <rcu_timer_clock_prescaler_config>:
 8018a68:	f06f 7380 	mvn.w	r3, #16777216	@ 0x1000000
 8018a6c:	4298      	cmp	r0, r3
 8018a6e:	4b05      	ldr	r3, [pc, #20]	@ (8018a84 <rcu_timer_clock_prescaler_config+0x1c>)
 8018a70:	f8d3 288c 	ldr.w	r2, [r3, #2188]	@ 0x88c
 8018a74:	bf0c      	ite	eq
 8018a76:	f022 7280 	biceq.w	r2, r2, #16777216	@ 0x1000000
 8018a7a:	4302      	orrne	r2, r0
 8018a7c:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
 8018a80:	4770      	bx	lr
 8018a82:	bf00      	nop
 8018a84:	40023000 	andmi	r3, r2, r0

08018a88 <rcu_clock_freq_get>:
 8018a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a8a:	4b35      	ldr	r3, [pc, #212]	@ (8018b60 <rcu_clock_freq_get+0xd8>)
 8018a8c:	b089      	sub	sp, #36	@ 0x24
 8018a8e:	4604      	mov	r4, r0
 8018a90:	ad04      	add	r5, sp, #16
 8018a92:	f103 0610 	add.w	r6, r3, #16
 8018a96:	461f      	mov	r7, r3
 8018a98:	6818      	ldr	r0, [r3, #0]
 8018a9a:	6859      	ldr	r1, [r3, #4]
 8018a9c:	462a      	mov	r2, r5
 8018a9e:	c203      	stmia	r2!, {r0, r1}
 8018aa0:	3308      	adds	r3, #8
 8018aa2:	42b3      	cmp	r3, r6
 8018aa4:	4615      	mov	r5, r2
 8018aa6:	d1f7      	bne.n	8018a98 <rcu_clock_freq_get+0x10>
 8018aa8:	6938      	ldr	r0, [r7, #16]
 8018aaa:	6871      	ldr	r1, [r6, #4]
 8018aac:	4a2d      	ldr	r2, [pc, #180]	@ (8018b64 <rcu_clock_freq_get+0xdc>)
 8018aae:	466b      	mov	r3, sp
 8018ab0:	c303      	stmia	r3!, {r0, r1}
 8018ab2:	c303      	stmia	r3!, {r0, r1}
 8018ab4:	f8d2 3808 	ldr.w	r3, [r2, #2056]	@ 0x808
 8018ab8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018abc:	2b01      	cmp	r3, #1
 8018abe:	d03f      	beq.n	8018b40 <rcu_clock_freq_get+0xb8>
 8018ac0:	2b02      	cmp	r3, #2
 8018ac2:	d13f      	bne.n	8018b44 <rcu_clock_freq_get+0xbc>
 8018ac4:	f8d2 0804 	ldr.w	r0, [r2, #2052]	@ 0x804
 8018ac8:	f8d2 1804 	ldr.w	r1, [r2, #2052]	@ 0x804
 8018acc:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 8018ad0:	f8d2 2804 	ldr.w	r2, [r2, #2052]	@ 0x804
 8018ad4:	4d24      	ldr	r5, [pc, #144]	@ (8018b68 <rcu_clock_freq_get+0xe0>)
 8018ad6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8018ada:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8018ade:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8018ae2:	f103 0301 	add.w	r3, r3, #1
 8018ae6:	4a21      	ldr	r2, [pc, #132]	@ (8018b6c <rcu_clock_freq_get+0xe4>)
 8018ae8:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8018aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018af0:	bf18      	it	ne
 8018af2:	462a      	movne	r2, r5
 8018af4:	fbb2 f2f0 	udiv	r2, r2, r0
 8018af8:	434a      	muls	r2, r1
 8018afa:	fbb2 f0f3 	udiv	r0, r2, r3
 8018afe:	4919      	ldr	r1, [pc, #100]	@ (8018b64 <rcu_clock_freq_get+0xdc>)
 8018b00:	f8d1 3808 	ldr.w	r3, [r1, #2056]	@ 0x808
 8018b04:	f8d1 2808 	ldr.w	r2, [r1, #2056]	@ 0x808
 8018b08:	f3c2 2282 	ubfx	r2, r2, #10, #3
 8018b0c:	3220      	adds	r2, #32
 8018b0e:	446a      	add	r2, sp
 8018b10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8018b14:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 8018b18:	f8d1 2808 	ldr.w	r2, [r1, #2056]	@ 0x808
 8018b1c:	3320      	adds	r3, #32
 8018b1e:	446b      	add	r3, sp
 8018b20:	f3c2 3242 	ubfx	r2, r2, #13, #3
 8018b24:	3220      	adds	r2, #32
 8018b26:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8018b2a:	446a      	add	r2, sp
 8018b2c:	fa20 f303 	lsr.w	r3, r0, r3
 8018b30:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8018b34:	2c03      	cmp	r4, #3
 8018b36:	d807      	bhi.n	8018b48 <rcu_clock_freq_get+0xc0>
 8018b38:	e8df f004 	tbb	[pc, r4]
 8018b3c:	0e0b0907 	vmlaeq.f16	s0, s22, s14	@ <UNPREDICTABLE>
 8018b40:	4809      	ldr	r0, [pc, #36]	@ (8018b68 <rcu_clock_freq_get+0xe0>)
 8018b42:	e7dc      	b.n	8018afe <rcu_clock_freq_get+0x76>
 8018b44:	4809      	ldr	r0, [pc, #36]	@ (8018b6c <rcu_clock_freq_get+0xe4>)
 8018b46:	e7da      	b.n	8018afe <rcu_clock_freq_get+0x76>
 8018b48:	2000      	movs	r0, #0
 8018b4a:	b009      	add	sp, #36	@ 0x24
 8018b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b4e:	4618      	mov	r0, r3
 8018b50:	e7fb      	b.n	8018b4a <rcu_clock_freq_get+0xc2>
 8018b52:	fa23 f005 	lsr.w	r0, r3, r5
 8018b56:	e7f8      	b.n	8018b4a <rcu_clock_freq_get+0xc2>
 8018b58:	fa23 f002 	lsr.w	r0, r3, r2
 8018b5c:	e7f5      	b.n	8018b4a <rcu_clock_freq_get+0xc2>
 8018b5e:	bf00      	nop
 8018b60:	0801aab4 	stmdaeq	r1, {r2, r4, r5, r7, r9, fp, sp, pc}
 8018b64:	40023000 	andmi	r3, r2, r0
 8018b68:	017d7840 	cmneq	sp, r0, asr #16
 8018b6c:	00f42400 	rscseq	r2, r4, r0, lsl #8

08018b70 <syscfg_enet_phy_interface_config>:
 8018b70:	4a04      	ldr	r2, [pc, #16]	@ (8018b84 <syscfg_enet_phy_interface_config+0x14>)
 8018b72:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 8018b76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8018b7a:	4303      	orrs	r3, r0
 8018b7c:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
 8018b80:	4770      	bx	lr
 8018b82:	bf00      	nop
 8018b84:	40013000 	andmi	r3, r1, r0

08018b88 <timer_deinit>:
 8018b88:	b508      	push	{r3, lr}
 8018b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8018cc4 <timer_deinit+0x13c>)
 8018b8c:	4298      	cmp	r0, r3
 8018b8e:	f000 8092 	beq.w	8018cb6 <timer_deinit+0x12e>
 8018b92:	d822      	bhi.n	8018bda <timer_deinit+0x52>
 8018b94:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8018b98:	4298      	cmp	r0, r3
 8018b9a:	d062      	beq.n	8018c62 <timer_deinit+0xda>
 8018b9c:	d80b      	bhi.n	8018bb6 <timer_deinit+0x2e>
 8018b9e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8018ba2:	4298      	cmp	r0, r3
 8018ba4:	d04f      	beq.n	8018c46 <timer_deinit+0xbe>
 8018ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8018baa:	4298      	cmp	r0, r3
 8018bac:	d052      	beq.n	8018c54 <timer_deinit+0xcc>
 8018bae:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018bb2:	d041      	beq.n	8018c38 <timer_deinit+0xb0>
 8018bb4:	bd08      	pop	{r3, pc}
 8018bb6:	4b44      	ldr	r3, [pc, #272]	@ (8018cc8 <timer_deinit+0x140>)
 8018bb8:	4298      	cmp	r0, r3
 8018bba:	d059      	beq.n	8018c70 <timer_deinit+0xe8>
 8018bbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8018bc0:	4298      	cmp	r0, r3
 8018bc2:	d071      	beq.n	8018ca8 <timer_deinit+0x120>
 8018bc4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8018bc8:	4298      	cmp	r0, r3
 8018bca:	d1f3      	bne.n	8018bb4 <timer_deinit+0x2c>
 8018bcc:	f640 0004 	movw	r0, #2052	@ 0x804
 8018bd0:	f7ff ff39 	bl	8018a46 <rcu_periph_reset_enable>
 8018bd4:	f640 0004 	movw	r0, #2052	@ 0x804
 8018bd8:	e02a      	b.n	8018c30 <timer_deinit+0xa8>
 8018bda:	4b3c      	ldr	r3, [pc, #240]	@ (8018ccc <timer_deinit+0x144>)
 8018bdc:	4298      	cmp	r0, r3
 8018bde:	d055      	beq.n	8018c8c <timer_deinit+0x104>
 8018be0:	d812      	bhi.n	8018c08 <timer_deinit+0x80>
 8018be2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8018be6:	4298      	cmp	r0, r3
 8018be8:	d01c      	beq.n	8018c24 <timer_deinit+0x9c>
 8018bea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8018bee:	4298      	cmp	r0, r3
 8018bf0:	d045      	beq.n	8018c7e <timer_deinit+0xf6>
 8018bf2:	f5a3 4364 	sub.w	r3, r3, #58368	@ 0xe400
 8018bf6:	4298      	cmp	r0, r3
 8018bf8:	d1dc      	bne.n	8018bb4 <timer_deinit+0x2c>
 8018bfa:	f640 0008 	movw	r0, #2056	@ 0x808
 8018bfe:	f7ff ff22 	bl	8018a46 <rcu_periph_reset_enable>
 8018c02:	f640 0008 	movw	r0, #2056	@ 0x808
 8018c06:	e013      	b.n	8018c30 <timer_deinit+0xa8>
 8018c08:	4b31      	ldr	r3, [pc, #196]	@ (8018cd0 <timer_deinit+0x148>)
 8018c0a:	4298      	cmp	r0, r3
 8018c0c:	d045      	beq.n	8018c9a <timer_deinit+0x112>
 8018c0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8018c12:	4298      	cmp	r0, r3
 8018c14:	d1ce      	bne.n	8018bb4 <timer_deinit+0x2c>
 8018c16:	f640 1012 	movw	r0, #2322	@ 0x912
 8018c1a:	f7ff ff14 	bl	8018a46 <rcu_periph_reset_enable>
 8018c1e:	f640 1012 	movw	r0, #2322	@ 0x912
 8018c22:	e005      	b.n	8018c30 <timer_deinit+0xa8>
 8018c24:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8018c28:	f7ff ff0d 	bl	8018a46 <rcu_periph_reset_enable>
 8018c2c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8018c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018c34:	f7ff bf09 	b.w	8018a4a <rcu_periph_reset_disable>
 8018c38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8018c3c:	f7ff ff03 	bl	8018a46 <rcu_periph_reset_enable>
 8018c40:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8018c44:	e7f4      	b.n	8018c30 <timer_deinit+0xa8>
 8018c46:	f640 0001 	movw	r0, #2049	@ 0x801
 8018c4a:	f7ff fefc 	bl	8018a46 <rcu_periph_reset_enable>
 8018c4e:	f640 0001 	movw	r0, #2049	@ 0x801
 8018c52:	e7ed      	b.n	8018c30 <timer_deinit+0xa8>
 8018c54:	f640 0002 	movw	r0, #2050	@ 0x802
 8018c58:	f7ff fef5 	bl	8018a46 <rcu_periph_reset_enable>
 8018c5c:	f640 0002 	movw	r0, #2050	@ 0x802
 8018c60:	e7e6      	b.n	8018c30 <timer_deinit+0xa8>
 8018c62:	f640 0003 	movw	r0, #2051	@ 0x803
 8018c66:	f7ff feee 	bl	8018a46 <rcu_periph_reset_enable>
 8018c6a:	f640 0003 	movw	r0, #2051	@ 0x803
 8018c6e:	e7df      	b.n	8018c30 <timer_deinit+0xa8>
 8018c70:	f640 0005 	movw	r0, #2053	@ 0x805
 8018c74:	f7ff fee7 	bl	8018a46 <rcu_periph_reset_enable>
 8018c78:	f640 0005 	movw	r0, #2053	@ 0x805
 8018c7c:	e7d8      	b.n	8018c30 <timer_deinit+0xa8>
 8018c7e:	f640 1001 	movw	r0, #2305	@ 0x901
 8018c82:	f7ff fee0 	bl	8018a46 <rcu_periph_reset_enable>
 8018c86:	f640 1001 	movw	r0, #2305	@ 0x901
 8018c8a:	e7d1      	b.n	8018c30 <timer_deinit+0xa8>
 8018c8c:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 8018c90:	f7ff fed9 	bl	8018a46 <rcu_periph_reset_enable>
 8018c94:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 8018c98:	e7ca      	b.n	8018c30 <timer_deinit+0xa8>
 8018c9a:	f640 1011 	movw	r0, #2321	@ 0x911
 8018c9e:	f7ff fed2 	bl	8018a46 <rcu_periph_reset_enable>
 8018ca2:	f640 1011 	movw	r0, #2321	@ 0x911
 8018ca6:	e7c3      	b.n	8018c30 <timer_deinit+0xa8>
 8018ca8:	f640 0006 	movw	r0, #2054	@ 0x806
 8018cac:	f7ff fecb 	bl	8018a46 <rcu_periph_reset_enable>
 8018cb0:	f640 0006 	movw	r0, #2054	@ 0x806
 8018cb4:	e7bc      	b.n	8018c30 <timer_deinit+0xa8>
 8018cb6:	f640 0007 	movw	r0, #2055	@ 0x807
 8018cba:	f7ff fec4 	bl	8018a46 <rcu_periph_reset_enable>
 8018cbe:	f640 0007 	movw	r0, #2055	@ 0x807
 8018cc2:	e7b5      	b.n	8018c30 <timer_deinit+0xa8>
 8018cc4:	40001c00 	andmi	r1, r0, r0, lsl #24
 8018cc8:	40001400 	andmi	r1, r0, r0, lsl #8
 8018ccc:	40014000 	andmi	r4, r1, r0
 8018cd0:	40014400 	andmi	r4, r1, r0, lsl #8

08018cd4 <timer_struct_para_init>:
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018cda:	e9c0 3300 	strd	r3, r3, [r0]
 8018cde:	6082      	str	r2, [r0, #8]
 8018ce0:	7303      	strb	r3, [r0, #12]
 8018ce2:	4770      	bx	lr

08018ce4 <timer_init>:
 8018ce4:	880b      	ldrh	r3, [r1, #0]
 8018ce6:	4a17      	ldr	r2, [pc, #92]	@ (8018d44 <timer_init+0x60>)
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	6283      	str	r3, [r0, #40]	@ 0x28
 8018cec:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
 8018cf0:	4293      	cmp	r3, r2
 8018cf2:	d004      	beq.n	8018cfe <timer_init+0x1a>
 8018cf4:	f420 6240 	bic.w	r2, r0, #3072	@ 0xc00
 8018cf8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8018cfc:	d10b      	bne.n	8018d16 <timer_init+0x32>
 8018cfe:	6802      	ldr	r2, [r0, #0]
 8018d00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8018d04:	6002      	str	r2, [r0, #0]
 8018d06:	6804      	ldr	r4, [r0, #0]
 8018d08:	884a      	ldrh	r2, [r1, #2]
 8018d0a:	4322      	orrs	r2, r4
 8018d0c:	6002      	str	r2, [r0, #0]
 8018d0e:	6804      	ldr	r4, [r0, #0]
 8018d10:	888a      	ldrh	r2, [r1, #4]
 8018d12:	4322      	orrs	r2, r4
 8018d14:	6002      	str	r2, [r0, #0]
 8018d16:	688a      	ldr	r2, [r1, #8]
 8018d18:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8018d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8018d48 <timer_init+0x64>)
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	d00c      	beq.n	8018d3a <timer_init+0x56>
 8018d20:	6802      	ldr	r2, [r0, #0]
 8018d22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8018d26:	6002      	str	r2, [r0, #0]
 8018d28:	6804      	ldr	r4, [r0, #0]
 8018d2a:	88ca      	ldrh	r2, [r1, #6]
 8018d2c:	4322      	orrs	r2, r4
 8018d2e:	6002      	str	r2, [r0, #0]
 8018d30:	4a04      	ldr	r2, [pc, #16]	@ (8018d44 <timer_init+0x60>)
 8018d32:	4293      	cmp	r3, r2
 8018d34:	bf04      	itt	eq
 8018d36:	7b0b      	ldrbeq	r3, [r1, #12]
 8018d38:	6303      	streq	r3, [r0, #48]	@ 0x30
 8018d3a:	6943      	ldr	r3, [r0, #20]
 8018d3c:	f043 0301 	orr.w	r3, r3, #1
 8018d40:	6143      	str	r3, [r0, #20]
 8018d42:	bd10      	pop	{r4, pc}
 8018d44:	40010000 	andmi	r0, r1, r0
 8018d48:	40001000 	andmi	r1, r0, r0

08018d4c <timer_enable>:
 8018d4c:	6803      	ldr	r3, [r0, #0]
 8018d4e:	f043 0301 	orr.w	r3, r3, #1
 8018d52:	6003      	str	r3, [r0, #0]
 8018d54:	4770      	bx	lr

08018d56 <timer_counter_value_config>:
 8018d56:	6241      	str	r1, [r0, #36]	@ 0x24
 8018d58:	4770      	bx	lr

08018d5a <timer_dma_enable>:
 8018d5a:	68c3      	ldr	r3, [r0, #12]
 8018d5c:	4319      	orrs	r1, r3
 8018d5e:	60c1      	str	r1, [r0, #12]
 8018d60:	4770      	bx	lr
	...

08018d64 <timer_channel_output_config>:
 8018d64:	2903      	cmp	r1, #3
 8018d66:	d83e      	bhi.n	8018de6 <timer_channel_output_config+0x82>
 8018d68:	e8df f011 	tbh	[pc, r1, lsl #1]
 8018d6c:	003e0004 	eorseq	r0, lr, r4
 8018d70:	00bc007d 	adcseq	r0, ip, sp, ror r0
 8018d74:	6a03      	ldr	r3, [r0, #32]
 8018d76:	f023 0301 	bic.w	r3, r3, #1
 8018d7a:	6203      	str	r3, [r0, #32]
 8018d7c:	6983      	ldr	r3, [r0, #24]
 8018d7e:	f023 0303 	bic.w	r3, r3, #3
 8018d82:	6183      	str	r3, [r0, #24]
 8018d84:	6a01      	ldr	r1, [r0, #32]
 8018d86:	8813      	ldrh	r3, [r2, #0]
 8018d88:	430b      	orrs	r3, r1
 8018d8a:	6203      	str	r3, [r0, #32]
 8018d8c:	6a03      	ldr	r3, [r0, #32]
 8018d8e:	f023 0302 	bic.w	r3, r3, #2
 8018d92:	6203      	str	r3, [r0, #32]
 8018d94:	6a01      	ldr	r1, [r0, #32]
 8018d96:	8893      	ldrh	r3, [r2, #4]
 8018d98:	430b      	orrs	r3, r1
 8018d9a:	6203      	str	r3, [r0, #32]
 8018d9c:	4b64      	ldr	r3, [pc, #400]	@ (8018f30 <timer_channel_output_config+0x1cc>)
 8018d9e:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 8018da2:	4299      	cmp	r1, r3
 8018da4:	d11f      	bne.n	8018de6 <timer_channel_output_config+0x82>
 8018da6:	6a03      	ldr	r3, [r0, #32]
 8018da8:	f023 0304 	bic.w	r3, r3, #4
 8018dac:	6203      	str	r3, [r0, #32]
 8018dae:	6a01      	ldr	r1, [r0, #32]
 8018db0:	8853      	ldrh	r3, [r2, #2]
 8018db2:	430b      	orrs	r3, r1
 8018db4:	6203      	str	r3, [r0, #32]
 8018db6:	6a03      	ldr	r3, [r0, #32]
 8018db8:	f023 0308 	bic.w	r3, r3, #8
 8018dbc:	6203      	str	r3, [r0, #32]
 8018dbe:	6a01      	ldr	r1, [r0, #32]
 8018dc0:	88d3      	ldrh	r3, [r2, #6]
 8018dc2:	430b      	orrs	r3, r1
 8018dc4:	6203      	str	r3, [r0, #32]
 8018dc6:	6843      	ldr	r3, [r0, #4]
 8018dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018dcc:	6043      	str	r3, [r0, #4]
 8018dce:	6841      	ldr	r1, [r0, #4]
 8018dd0:	8913      	ldrh	r3, [r2, #8]
 8018dd2:	430b      	orrs	r3, r1
 8018dd4:	6043      	str	r3, [r0, #4]
 8018dd6:	6843      	ldr	r3, [r0, #4]
 8018dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8018ddc:	6043      	str	r3, [r0, #4]
 8018dde:	6841      	ldr	r1, [r0, #4]
 8018de0:	8953      	ldrh	r3, [r2, #10]
 8018de2:	430b      	orrs	r3, r1
 8018de4:	6043      	str	r3, [r0, #4]
 8018de6:	4770      	bx	lr
 8018de8:	6a03      	ldr	r3, [r0, #32]
 8018dea:	8811      	ldrh	r1, [r2, #0]
 8018dec:	f023 0310 	bic.w	r3, r3, #16
 8018df0:	6203      	str	r3, [r0, #32]
 8018df2:	6983      	ldr	r3, [r0, #24]
 8018df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018df8:	6183      	str	r3, [r0, #24]
 8018dfa:	6a03      	ldr	r3, [r0, #32]
 8018dfc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018e00:	6203      	str	r3, [r0, #32]
 8018e02:	6a03      	ldr	r3, [r0, #32]
 8018e04:	8891      	ldrh	r1, [r2, #4]
 8018e06:	f023 0320 	bic.w	r3, r3, #32
 8018e0a:	6203      	str	r3, [r0, #32]
 8018e0c:	6a03      	ldr	r3, [r0, #32]
 8018e0e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018e12:	6203      	str	r3, [r0, #32]
 8018e14:	4b46      	ldr	r3, [pc, #280]	@ (8018f30 <timer_channel_output_config+0x1cc>)
 8018e16:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 8018e1a:	4299      	cmp	r1, r3
 8018e1c:	d1e3      	bne.n	8018de6 <timer_channel_output_config+0x82>
 8018e1e:	6a03      	ldr	r3, [r0, #32]
 8018e20:	8851      	ldrh	r1, [r2, #2]
 8018e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018e26:	6203      	str	r3, [r0, #32]
 8018e28:	6a03      	ldr	r3, [r0, #32]
 8018e2a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018e2e:	6203      	str	r3, [r0, #32]
 8018e30:	6a03      	ldr	r3, [r0, #32]
 8018e32:	88d1      	ldrh	r1, [r2, #6]
 8018e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018e38:	6203      	str	r3, [r0, #32]
 8018e3a:	6a03      	ldr	r3, [r0, #32]
 8018e3c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018e40:	6203      	str	r3, [r0, #32]
 8018e42:	6843      	ldr	r3, [r0, #4]
 8018e44:	8911      	ldrh	r1, [r2, #8]
 8018e46:	8952      	ldrh	r2, [r2, #10]
 8018e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8018e4c:	6043      	str	r3, [r0, #4]
 8018e4e:	6843      	ldr	r3, [r0, #4]
 8018e50:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8018e54:	6043      	str	r3, [r0, #4]
 8018e56:	6843      	ldr	r3, [r0, #4]
 8018e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018e5c:	6043      	str	r3, [r0, #4]
 8018e5e:	6843      	ldr	r3, [r0, #4]
 8018e60:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8018e64:	e7be      	b.n	8018de4 <timer_channel_output_config+0x80>
 8018e66:	6a03      	ldr	r3, [r0, #32]
 8018e68:	8811      	ldrh	r1, [r2, #0]
 8018e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018e6e:	6203      	str	r3, [r0, #32]
 8018e70:	69c3      	ldr	r3, [r0, #28]
 8018e72:	f023 0303 	bic.w	r3, r3, #3
 8018e76:	61c3      	str	r3, [r0, #28]
 8018e78:	6a03      	ldr	r3, [r0, #32]
 8018e7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8018e7e:	6203      	str	r3, [r0, #32]
 8018e80:	6a03      	ldr	r3, [r0, #32]
 8018e82:	8891      	ldrh	r1, [r2, #4]
 8018e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8018e88:	6203      	str	r3, [r0, #32]
 8018e8a:	6a03      	ldr	r3, [r0, #32]
 8018e8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8018e90:	6203      	str	r3, [r0, #32]
 8018e92:	4b27      	ldr	r3, [pc, #156]	@ (8018f30 <timer_channel_output_config+0x1cc>)
 8018e94:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 8018e98:	4299      	cmp	r1, r3
 8018e9a:	d1a4      	bne.n	8018de6 <timer_channel_output_config+0x82>
 8018e9c:	6a03      	ldr	r3, [r0, #32]
 8018e9e:	8851      	ldrh	r1, [r2, #2]
 8018ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8018ea4:	6203      	str	r3, [r0, #32]
 8018ea6:	6a03      	ldr	r3, [r0, #32]
 8018ea8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8018eac:	6203      	str	r3, [r0, #32]
 8018eae:	6a03      	ldr	r3, [r0, #32]
 8018eb0:	88d1      	ldrh	r1, [r2, #6]
 8018eb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018eb6:	6203      	str	r3, [r0, #32]
 8018eb8:	6a03      	ldr	r3, [r0, #32]
 8018eba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8018ebe:	6203      	str	r3, [r0, #32]
 8018ec0:	6843      	ldr	r3, [r0, #4]
 8018ec2:	8911      	ldrh	r1, [r2, #8]
 8018ec4:	8952      	ldrh	r2, [r2, #10]
 8018ec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018eca:	6043      	str	r3, [r0, #4]
 8018ecc:	6843      	ldr	r3, [r0, #4]
 8018ece:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018ed2:	6043      	str	r3, [r0, #4]
 8018ed4:	6843      	ldr	r3, [r0, #4]
 8018ed6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8018eda:	6043      	str	r3, [r0, #4]
 8018edc:	6843      	ldr	r3, [r0, #4]
 8018ede:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8018ee2:	e77f      	b.n	8018de4 <timer_channel_output_config+0x80>
 8018ee4:	6a03      	ldr	r3, [r0, #32]
 8018ee6:	8811      	ldrh	r1, [r2, #0]
 8018ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018eec:	6203      	str	r3, [r0, #32]
 8018eee:	69c3      	ldr	r3, [r0, #28]
 8018ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018ef4:	61c3      	str	r3, [r0, #28]
 8018ef6:	6a03      	ldr	r3, [r0, #32]
 8018ef8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8018efc:	6203      	str	r3, [r0, #32]
 8018efe:	6a03      	ldr	r3, [r0, #32]
 8018f00:	8891      	ldrh	r1, [r2, #4]
 8018f02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8018f06:	6203      	str	r3, [r0, #32]
 8018f08:	6a03      	ldr	r3, [r0, #32]
 8018f0a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8018f0e:	6203      	str	r3, [r0, #32]
 8018f10:	4b07      	ldr	r3, [pc, #28]	@ (8018f30 <timer_channel_output_config+0x1cc>)
 8018f12:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 8018f16:	4299      	cmp	r1, r3
 8018f18:	f47f af65 	bne.w	8018de6 <timer_channel_output_config+0x82>
 8018f1c:	6843      	ldr	r3, [r0, #4]
 8018f1e:	8912      	ldrh	r2, [r2, #8]
 8018f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8018f24:	6043      	str	r3, [r0, #4]
 8018f26:	6843      	ldr	r3, [r0, #4]
 8018f28:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8018f2c:	e75a      	b.n	8018de4 <timer_channel_output_config+0x80>
 8018f2e:	bf00      	nop
 8018f30:	40010000 	andmi	r0, r1, r0

08018f34 <timer_channel_output_mode_config>:
 8018f34:	2903      	cmp	r1, #3
 8018f36:	d81a      	bhi.n	8018f6e <timer_channel_output_mode_config+0x3a>
 8018f38:	e8df f001 	tbb	[pc, r1]
 8018f3c:	1a120a02 	bne	849b74c <_sidata+0x47bf7c>
 8018f40:	6983      	ldr	r3, [r0, #24]
 8018f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018f46:	6183      	str	r3, [r0, #24]
 8018f48:	6983      	ldr	r3, [r0, #24]
 8018f4a:	4313      	orrs	r3, r2
 8018f4c:	6183      	str	r3, [r0, #24]
 8018f4e:	4770      	bx	lr
 8018f50:	6983      	ldr	r3, [r0, #24]
 8018f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8018f56:	6183      	str	r3, [r0, #24]
 8018f58:	6983      	ldr	r3, [r0, #24]
 8018f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018f5e:	e7f5      	b.n	8018f4c <timer_channel_output_mode_config+0x18>
 8018f60:	69c3      	ldr	r3, [r0, #28]
 8018f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018f66:	61c3      	str	r3, [r0, #28]
 8018f68:	69c3      	ldr	r3, [r0, #28]
 8018f6a:	4313      	orrs	r3, r2
 8018f6c:	61c3      	str	r3, [r0, #28]
 8018f6e:	4770      	bx	lr
 8018f70:	69c3      	ldr	r3, [r0, #28]
 8018f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8018f76:	61c3      	str	r3, [r0, #28]
 8018f78:	69c3      	ldr	r3, [r0, #28]
 8018f7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018f7e:	e7f5      	b.n	8018f6c <timer_channel_output_mode_config+0x38>

08018f80 <timer_channel_output_pulse_value_config>:
 8018f80:	2903      	cmp	r1, #3
 8018f82:	d80a      	bhi.n	8018f9a <timer_channel_output_pulse_value_config+0x1a>
 8018f84:	e8df f001 	tbb	[pc, r1]
 8018f88:	08060402 	stmdaeq	r6, {r1, sl}
 8018f8c:	6342      	str	r2, [r0, #52]	@ 0x34
 8018f8e:	4770      	bx	lr
 8018f90:	6382      	str	r2, [r0, #56]	@ 0x38
 8018f92:	4770      	bx	lr
 8018f94:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8018f96:	4770      	bx	lr
 8018f98:	6402      	str	r2, [r0, #64]	@ 0x40
 8018f9a:	4770      	bx	lr

08018f9c <timer_channel_output_shadow_config>:
 8018f9c:	2903      	cmp	r1, #3
 8018f9e:	d81a      	bhi.n	8018fd6 <timer_channel_output_shadow_config+0x3a>
 8018fa0:	e8df f001 	tbb	[pc, r1]
 8018fa4:	1a120a02 	bne	849b7b4 <_sidata+0x47bfe4>
 8018fa8:	6983      	ldr	r3, [r0, #24]
 8018faa:	f023 0308 	bic.w	r3, r3, #8
 8018fae:	6183      	str	r3, [r0, #24]
 8018fb0:	6983      	ldr	r3, [r0, #24]
 8018fb2:	4313      	orrs	r3, r2
 8018fb4:	6183      	str	r3, [r0, #24]
 8018fb6:	4770      	bx	lr
 8018fb8:	6983      	ldr	r3, [r0, #24]
 8018fba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018fbe:	6183      	str	r3, [r0, #24]
 8018fc0:	6983      	ldr	r3, [r0, #24]
 8018fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018fc6:	e7f5      	b.n	8018fb4 <timer_channel_output_shadow_config+0x18>
 8018fc8:	69c3      	ldr	r3, [r0, #28]
 8018fca:	f023 0308 	bic.w	r3, r3, #8
 8018fce:	61c3      	str	r3, [r0, #28]
 8018fd0:	69c3      	ldr	r3, [r0, #28]
 8018fd2:	4313      	orrs	r3, r2
 8018fd4:	61c3      	str	r3, [r0, #28]
 8018fd6:	4770      	bx	lr
 8018fd8:	69c3      	ldr	r3, [r0, #28]
 8018fda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018fde:	61c3      	str	r3, [r0, #28]
 8018fe0:	69c3      	ldr	r3, [r0, #28]
 8018fe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018fe6:	e7f5      	b.n	8018fd4 <timer_channel_output_shadow_config+0x38>

08018fe8 <timer_input_trigger_source_select>:
 8018fe8:	6883      	ldr	r3, [r0, #8]
 8018fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018fee:	6083      	str	r3, [r0, #8]
 8018ff0:	6883      	ldr	r3, [r0, #8]
 8018ff2:	430b      	orrs	r3, r1
 8018ff4:	6083      	str	r3, [r0, #8]
 8018ff6:	4770      	bx	lr

08018ff8 <timer_master_output_trigger_source_select>:
 8018ff8:	6843      	ldr	r3, [r0, #4]
 8018ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018ffe:	6043      	str	r3, [r0, #4]
 8019000:	6843      	ldr	r3, [r0, #4]
 8019002:	430b      	orrs	r3, r1
 8019004:	6043      	str	r3, [r0, #4]
 8019006:	4770      	bx	lr

08019008 <timer_slave_mode_select>:
 8019008:	6883      	ldr	r3, [r0, #8]
 801900a:	f023 0307 	bic.w	r3, r3, #7
 801900e:	6083      	str	r3, [r0, #8]
 8019010:	6883      	ldr	r3, [r0, #8]
 8019012:	430b      	orrs	r3, r1
 8019014:	6083      	str	r3, [r0, #8]
 8019016:	4770      	bx	lr

08019018 <timer_master_slave_mode_config>:
 8019018:	b921      	cbnz	r1, 8019024 <timer_master_slave_mode_config+0xc>
 801901a:	6883      	ldr	r3, [r0, #8]
 801901c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019020:	6083      	str	r3, [r0, #8]
 8019022:	4770      	bx	lr
 8019024:	2901      	cmp	r1, #1
 8019026:	d1fc      	bne.n	8019022 <timer_master_slave_mode_config+0xa>
 8019028:	6883      	ldr	r3, [r0, #8]
 801902a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801902e:	e7f7      	b.n	8019020 <timer_master_slave_mode_config+0x8>

08019030 <timer_flag_clear>:
 8019030:	43c9      	mvns	r1, r1
 8019032:	6101      	str	r1, [r0, #16]
 8019034:	4770      	bx	lr

08019036 <timer_interrupt_enable>:
 8019036:	68c3      	ldr	r3, [r0, #12]
 8019038:	430b      	orrs	r3, r1
 801903a:	60c3      	str	r3, [r0, #12]
 801903c:	4770      	bx	lr

0801903e <timer_interrupt_flag_clear>:
 801903e:	43c9      	mvns	r1, r1
 8019040:	6101      	str	r1, [r0, #16]
 8019042:	4770      	bx	lr

08019044 <usart_deinit>:
 8019044:	b508      	push	{r3, lr}
 8019046:	4b2d      	ldr	r3, [pc, #180]	@ (80190fc <usart_deinit+0xb8>)
 8019048:	4298      	cmp	r0, r3
 801904a:	d050      	beq.n	80190ee <usart_deinit+0xaa>
 801904c:	d817      	bhi.n	801907e <usart_deinit+0x3a>
 801904e:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 8019052:	4298      	cmp	r0, r3
 8019054:	d044      	beq.n	80190e0 <usart_deinit+0x9c>
 8019056:	d808      	bhi.n	801906a <usart_deinit+0x26>
 8019058:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801905c:	4298      	cmp	r0, r3
 801905e:	d02a      	beq.n	80190b6 <usart_deinit+0x72>
 8019060:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8019064:	4298      	cmp	r0, r3
 8019066:	d02d      	beq.n	80190c4 <usart_deinit+0x80>
 8019068:	bd08      	pop	{r3, pc}
 801906a:	4b25      	ldr	r3, [pc, #148]	@ (8019100 <usart_deinit+0xbc>)
 801906c:	4298      	cmp	r0, r3
 801906e:	d1fb      	bne.n	8019068 <usart_deinit+0x24>
 8019070:	f640 0014 	movw	r0, #2068	@ 0x814
 8019074:	f7ff fce7 	bl	8018a46 <rcu_periph_reset_enable>
 8019078:	f640 0014 	movw	r0, #2068	@ 0x814
 801907c:	e017      	b.n	80190ae <usart_deinit+0x6a>
 801907e:	4b21      	ldr	r3, [pc, #132]	@ (8019104 <usart_deinit+0xc0>)
 8019080:	4298      	cmp	r0, r3
 8019082:	d00e      	beq.n	80190a2 <usart_deinit+0x5e>
 8019084:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8019088:	4298      	cmp	r0, r3
 801908a:	d022      	beq.n	80190d2 <usart_deinit+0x8e>
 801908c:	f5a3 4318 	sub.w	r3, r3, #38912	@ 0x9800
 8019090:	4298      	cmp	r0, r3
 8019092:	d1e9      	bne.n	8019068 <usart_deinit+0x24>
 8019094:	f640 001f 	movw	r0, #2079	@ 0x81f
 8019098:	f7ff fcd5 	bl	8018a46 <rcu_periph_reset_enable>
 801909c:	f640 001f 	movw	r0, #2079	@ 0x81f
 80190a0:	e005      	b.n	80190ae <usart_deinit+0x6a>
 80190a2:	f640 1004 	movw	r0, #2308	@ 0x904
 80190a6:	f7ff fcce 	bl	8018a46 <rcu_periph_reset_enable>
 80190aa:	f640 1004 	movw	r0, #2308	@ 0x904
 80190ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80190b2:	f7ff bcca 	b.w	8018a4a <rcu_periph_reset_disable>
 80190b6:	f640 0011 	movw	r0, #2065	@ 0x811
 80190ba:	f7ff fcc4 	bl	8018a46 <rcu_periph_reset_enable>
 80190be:	f640 0011 	movw	r0, #2065	@ 0x811
 80190c2:	e7f4      	b.n	80190ae <usart_deinit+0x6a>
 80190c4:	f640 0012 	movw	r0, #2066	@ 0x812
 80190c8:	f7ff fcbd 	bl	8018a46 <rcu_periph_reset_enable>
 80190cc:	f640 0012 	movw	r0, #2066	@ 0x812
 80190d0:	e7ed      	b.n	80190ae <usart_deinit+0x6a>
 80190d2:	f640 1005 	movw	r0, #2309	@ 0x905
 80190d6:	f7ff fcb6 	bl	8018a46 <rcu_periph_reset_enable>
 80190da:	f640 1005 	movw	r0, #2309	@ 0x905
 80190de:	e7e6      	b.n	80190ae <usart_deinit+0x6a>
 80190e0:	f640 0013 	movw	r0, #2067	@ 0x813
 80190e4:	f7ff fcaf 	bl	8018a46 <rcu_periph_reset_enable>
 80190e8:	f640 0013 	movw	r0, #2067	@ 0x813
 80190ec:	e7df      	b.n	80190ae <usart_deinit+0x6a>
 80190ee:	f640 001e 	movw	r0, #2078	@ 0x81e
 80190f2:	f7ff fca8 	bl	8018a46 <rcu_periph_reset_enable>
 80190f6:	f640 001e 	movw	r0, #2078	@ 0x81e
 80190fa:	e7d8      	b.n	80190ae <usart_deinit+0x6a>
 80190fc:	40007800 	andmi	r7, r0, r0, lsl #16
 8019100:	40005000 	andmi	r5, r0, r0
 8019104:	40011000 	andmi	r1, r1, r0

08019108 <usart_baudrate_set>:
 8019108:	b538      	push	{r3, r4, r5, lr}
 801910a:	4b1e      	ldr	r3, [pc, #120]	@ (8019184 <usart_baudrate_set+0x7c>)
 801910c:	4298      	cmp	r0, r3
 801910e:	4604      	mov	r4, r0
 8019110:	460d      	mov	r5, r1
 8019112:	d02e      	beq.n	8019172 <usart_baudrate_set+0x6a>
 8019114:	d821      	bhi.n	801915a <usart_baudrate_set+0x52>
 8019116:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 801911a:	4298      	cmp	r0, r3
 801911c:	d029      	beq.n	8019172 <usart_baudrate_set+0x6a>
 801911e:	d81a      	bhi.n	8019156 <usart_baudrate_set+0x4e>
 8019120:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8019124:	4298      	cmp	r0, r3
 8019126:	d024      	beq.n	8019172 <usart_baudrate_set+0x6a>
 8019128:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801912c:	429c      	cmp	r4, r3
 801912e:	d020      	beq.n	8019172 <usart_baudrate_set+0x6a>
 8019130:	2000      	movs	r0, #0
 8019132:	68e2      	ldr	r2, [r4, #12]
 8019134:	0412      	lsls	r2, r2, #16
 8019136:	ea4f 0355 	mov.w	r3, r5, lsr #1
 801913a:	d51c      	bpl.n	8019176 <usart_baudrate_set+0x6e>
 801913c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8019140:	fbb3 f1f5 	udiv	r1, r3, r5
 8019144:	f3c1 0342 	ubfx	r3, r1, #1, #3
 8019148:	f021 010f 	bic.w	r1, r1, #15
 801914c:	0409      	lsls	r1, r1, #16
 801914e:	0c09      	lsrs	r1, r1, #16
 8019150:	430b      	orrs	r3, r1
 8019152:	60a3      	str	r3, [r4, #8]
 8019154:	bd38      	pop	{r3, r4, r5, pc}
 8019156:	4b0c      	ldr	r3, [pc, #48]	@ (8019188 <usart_baudrate_set+0x80>)
 8019158:	e7e8      	b.n	801912c <usart_baudrate_set+0x24>
 801915a:	4b0c      	ldr	r3, [pc, #48]	@ (801918c <usart_baudrate_set+0x84>)
 801915c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
 8019160:	429a      	cmp	r2, r3
 8019162:	d002      	beq.n	801916a <usart_baudrate_set+0x62>
 8019164:	f5a3 4314 	sub.w	r3, r3, #37888	@ 0x9400
 8019168:	e7e0      	b.n	801912c <usart_baudrate_set+0x24>
 801916a:	2003      	movs	r0, #3
 801916c:	f7ff fc8c 	bl	8018a88 <rcu_clock_freq_get>
 8019170:	e7df      	b.n	8019132 <usart_baudrate_set+0x2a>
 8019172:	2002      	movs	r0, #2
 8019174:	e7fa      	b.n	801916c <usart_baudrate_set+0x64>
 8019176:	18c1      	adds	r1, r0, r3
 8019178:	fbb1 f1f5 	udiv	r1, r1, r5
 801917c:	b289      	uxth	r1, r1
 801917e:	60a1      	str	r1, [r4, #8]
 8019180:	e7e8      	b.n	8019154 <usart_baudrate_set+0x4c>
 8019182:	bf00      	nop
 8019184:	40007800 	andmi	r7, r0, r0, lsl #16
 8019188:	40005000 	andmi	r5, r0, r0
 801918c:	40011000 	andmi	r1, r1, r0

08019190 <usart_parity_config>:
 8019190:	68c3      	ldr	r3, [r0, #12]
 8019192:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8019196:	60c3      	str	r3, [r0, #12]
 8019198:	68c3      	ldr	r3, [r0, #12]
 801919a:	430b      	orrs	r3, r1
 801919c:	60c3      	str	r3, [r0, #12]
 801919e:	4770      	bx	lr

080191a0 <usart_word_length_set>:
 80191a0:	68c3      	ldr	r3, [r0, #12]
 80191a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80191a6:	60c3      	str	r3, [r0, #12]
 80191a8:	68c3      	ldr	r3, [r0, #12]
 80191aa:	430b      	orrs	r3, r1
 80191ac:	60c3      	str	r3, [r0, #12]
 80191ae:	4770      	bx	lr

080191b0 <usart_stop_bit_set>:
 80191b0:	6903      	ldr	r3, [r0, #16]
 80191b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80191b6:	6103      	str	r3, [r0, #16]
 80191b8:	6903      	ldr	r3, [r0, #16]
 80191ba:	430b      	orrs	r3, r1
 80191bc:	6103      	str	r3, [r0, #16]
 80191be:	4770      	bx	lr

080191c0 <usart_transmit_config>:
 80191c0:	68c3      	ldr	r3, [r0, #12]
 80191c2:	f023 0308 	bic.w	r3, r3, #8
 80191c6:	430b      	orrs	r3, r1
 80191c8:	60c3      	str	r3, [r0, #12]
 80191ca:	4770      	bx	lr

080191cc <usart_receive_config>:
 80191cc:	68c3      	ldr	r3, [r0, #12]
 80191ce:	f023 0304 	bic.w	r3, r3, #4
 80191d2:	430b      	orrs	r3, r1
 80191d4:	60c3      	str	r3, [r0, #12]
 80191d6:	4770      	bx	lr

080191d8 <usart_hardware_flow_rts_config>:
 80191d8:	6943      	ldr	r3, [r0, #20]
 80191da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80191de:	6143      	str	r3, [r0, #20]
 80191e0:	6943      	ldr	r3, [r0, #20]
 80191e2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80191e6:	4319      	orrs	r1, r3
 80191e8:	6141      	str	r1, [r0, #20]
 80191ea:	4770      	bx	lr

080191ec <usart_hardware_flow_cts_config>:
 80191ec:	6943      	ldr	r3, [r0, #20]
 80191ee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80191f2:	6143      	str	r3, [r0, #20]
 80191f4:	6943      	ldr	r3, [r0, #20]
 80191f6:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 80191fa:	4319      	orrs	r1, r3
 80191fc:	6141      	str	r1, [r0, #20]
 80191fe:	4770      	bx	lr

08019200 <usart_flag_get>:
 8019200:	098b      	lsrs	r3, r1, #6
 8019202:	f001 011f 	and.w	r1, r1, #31
 8019206:	5818      	ldr	r0, [r3, r0]
 8019208:	40c8      	lsrs	r0, r1
 801920a:	f000 0001 	and.w	r0, r0, #1
 801920e:	4770      	bx	lr

08019210 <bkp_data_write(bkp_data_register_enum, unsigned short)>:
 8019210:	b110      	cbz	r0, 8019218 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x8>
 8019212:	2801      	cmp	r0, #1
 8019214:	d004      	beq.n	8019220 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x10>
 8019216:	4770      	bx	lr
 8019218:	4b03      	ldr	r3, [pc, #12]	@ (8019228 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x18>)
 801921a:	f8c3 1850 	str.w	r1, [r3, #2128]	@ 0x850
 801921e:	4770      	bx	lr
 8019220:	4b01      	ldr	r3, [pc, #4]	@ (8019228 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x18>)
 8019222:	f8c3 1854 	str.w	r1, [r3, #2132]	@ 0x854
 8019226:	4770      	bx	lr
 8019228:	40002000 	andmi	r2, r0, r0

0801922c <bkp_data_read(bkp_data_register_enum)>:
 801922c:	b118      	cbz	r0, 8019236 <bkp_data_read(bkp_data_register_enum)+0xa>
 801922e:	2801      	cmp	r0, #1
 8019230:	d006      	beq.n	8019240 <bkp_data_read(bkp_data_register_enum)+0x14>
 8019232:	2000      	movs	r0, #0
 8019234:	4770      	bx	lr
 8019236:	4b04      	ldr	r3, [pc, #16]	@ (8019248 <bkp_data_read(bkp_data_register_enum)+0x1c>)
 8019238:	f8d3 0850 	ldr.w	r0, [r3, #2128]	@ 0x850
 801923c:	b280      	uxth	r0, r0
 801923e:	4770      	bx	lr
 8019240:	4b01      	ldr	r3, [pc, #4]	@ (8019248 <bkp_data_read(bkp_data_register_enum)+0x1c>)
 8019242:	f8d3 0854 	ldr.w	r0, [r3, #2132]	@ 0x854
 8019246:	e7f9      	b.n	801923c <bkp_data_read(bkp_data_register_enum)+0x10>
 8019248:	40002000 	andmi	r2, r0, r0

0801924c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>:
 801924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801924e:	461e      	mov	r6, r3
 8019250:	4bc3      	ldr	r3, [pc, #780]	@ (8019560 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x314>)
 8019252:	4298      	cmp	r0, r3
 8019254:	4604      	mov	r4, r0
 8019256:	460f      	mov	r7, r1
 8019258:	4615      	mov	r5, r2
 801925a:	f000 818f 	beq.w	801957c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x330>
 801925e:	d83a      	bhi.n	80192d6 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x8a>
 8019260:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 8019264:	4298      	cmp	r0, r3
 8019266:	f000 80f5 	beq.w	8019454 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x208>
 801926a:	f200 8122 	bhi.w	80194b2 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x266>
 801926e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8019272:	4298      	cmp	r0, r3
 8019274:	f000 80c8 	beq.w	8019408 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x1bc>
 8019278:	f241 0012 	movw	r0, #4114	@ 0x1012
 801927c:	f7ff fbc8 	bl	8018a10 <rcu_periph_clock_enable>
 8019280:	f640 4001 	movw	r0, #3073	@ 0xc01
 8019284:	f7ff fbc4 	bl	8018a10 <rcu_periph_clock_enable>
 8019288:	48b6      	ldr	r0, [pc, #728]	@ (8019564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801928a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801928e:	2107      	movs	r1, #7
 8019290:	f7ff fb7a 	bl	8018988 <gpio_af_set>
 8019294:	48b3      	ldr	r0, [pc, #716]	@ (8019564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 8019296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801929a:	2201      	movs	r2, #1
 801929c:	2102      	movs	r1, #2
 801929e:	f7ff fb35 	bl	801890c <gpio_mode_set>
 80192a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80192a6:	48af      	ldr	r0, [pc, #700]	@ (8019564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 80192a8:	2202      	movs	r2, #2
 80192aa:	2100      	movs	r1, #0
 80192ac:	f7ff fb50 	bl	8018950 <gpio_output_options_set>
 80192b0:	48ac      	ldr	r0, [pc, #688]	@ (8019564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 80192b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80192b6:	2107      	movs	r1, #7
 80192b8:	f7ff fb66 	bl	8018988 <gpio_af_set>
 80192bc:	48a9      	ldr	r0, [pc, #676]	@ (8019564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 80192be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80192c2:	2201      	movs	r2, #1
 80192c4:	2102      	movs	r1, #2
 80192c6:	f7ff fb21 	bl	801890c <gpio_mode_set>
 80192ca:	48a6      	ldr	r0, [pc, #664]	@ (8019564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 80192cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80192d0:	2202      	movs	r2, #2
 80192d2:	2100      	movs	r1, #0
 80192d4:	e05b      	b.n	801938e <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 80192d6:	4ba4      	ldr	r3, [pc, #656]	@ (8019568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x31c>)
 80192d8:	4298      	cmp	r0, r3
 80192da:	d02a      	beq.n	8019332 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe6>
 80192dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80192e0:	4298      	cmp	r0, r3
 80192e2:	f000 8116 	beq.w	8019512 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x2c6>
 80192e6:	f241 001f 	movw	r0, #4127	@ 0x101f
 80192ea:	f7ff fb91 	bl	8018a10 <rcu_periph_clock_enable>
 80192ee:	f640 4004 	movw	r0, #3076	@ 0xc04
 80192f2:	f7ff fb8d 	bl	8018a10 <rcu_periph_clock_enable>
 80192f6:	489d      	ldr	r0, [pc, #628]	@ (801956c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 80192f8:	2202      	movs	r2, #2
 80192fa:	2108      	movs	r1, #8
 80192fc:	f7ff fb44 	bl	8018988 <gpio_af_set>
 8019300:	2302      	movs	r3, #2
 8019302:	4619      	mov	r1, r3
 8019304:	4899      	ldr	r0, [pc, #612]	@ (801956c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 8019306:	2201      	movs	r2, #1
 8019308:	f7ff fb00 	bl	801890c <gpio_mode_set>
 801930c:	2302      	movs	r3, #2
 801930e:	461a      	mov	r2, r3
 8019310:	4896      	ldr	r0, [pc, #600]	@ (801956c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 8019312:	2100      	movs	r1, #0
 8019314:	f7ff fb1c 	bl	8018950 <gpio_output_options_set>
 8019318:	4894      	ldr	r0, [pc, #592]	@ (801956c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801931a:	2201      	movs	r2, #1
 801931c:	2108      	movs	r1, #8
 801931e:	f7ff fb33 	bl	8018988 <gpio_af_set>
 8019322:	2301      	movs	r3, #1
 8019324:	461a      	mov	r2, r3
 8019326:	4891      	ldr	r0, [pc, #580]	@ (801956c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 8019328:	2102      	movs	r1, #2
 801932a:	f7ff faef 	bl	801890c <gpio_mode_set>
 801932e:	2301      	movs	r3, #1
 8019330:	e14c      	b.n	80195cc <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x380>
 8019332:	f241 1004 	movw	r0, #4356	@ 0x1104
 8019336:	f7ff fb6b 	bl	8018a10 <rcu_periph_clock_enable>
 801933a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801933e:	f7ff fb67 	bl	8018a10 <rcu_periph_clock_enable>
 8019342:	488b      	ldr	r0, [pc, #556]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 8019344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019348:	2107      	movs	r1, #7
 801934a:	f7ff fb1d 	bl	8018988 <gpio_af_set>
 801934e:	4888      	ldr	r0, [pc, #544]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 8019350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019354:	2201      	movs	r2, #1
 8019356:	2102      	movs	r1, #2
 8019358:	f7ff fad8 	bl	801890c <gpio_mode_set>
 801935c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019360:	4883      	ldr	r0, [pc, #524]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 8019362:	2202      	movs	r2, #2
 8019364:	2100      	movs	r1, #0
 8019366:	f7ff faf3 	bl	8018950 <gpio_output_options_set>
 801936a:	4881      	ldr	r0, [pc, #516]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801936c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019370:	2107      	movs	r1, #7
 8019372:	f7ff fb09 	bl	8018988 <gpio_af_set>
 8019376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801937a:	487d      	ldr	r0, [pc, #500]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801937c:	2201      	movs	r2, #1
 801937e:	2102      	movs	r1, #2
 8019380:	f7ff fac4 	bl	801890c <gpio_mode_set>
 8019384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019388:	4879      	ldr	r0, [pc, #484]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801938a:	2202      	movs	r2, #2
 801938c:	2100      	movs	r1, #0
 801938e:	f7ff fadf 	bl	8018950 <gpio_output_options_set>
 8019392:	4620      	mov	r0, r4
 8019394:	f7ff fe56 	bl	8019044 <usart_deinit>
 8019398:	68e3      	ldr	r3, [r4, #12]
 801939a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801939e:	60e3      	str	r3, [r4, #12]
 80193a0:	4639      	mov	r1, r7
 80193a2:	4620      	mov	r0, r4
 80193a4:	f7ff feb0 	bl	8019108 <usart_baudrate_set>
 80193a8:	f1a5 0309 	sub.w	r3, r5, #9
 80193ac:	4259      	negs	r1, r3
 80193ae:	4159      	adcs	r1, r3
 80193b0:	0309      	lsls	r1, r1, #12
 80193b2:	4620      	mov	r0, r4
 80193b4:	f7ff fef4 	bl	80191a0 <usart_word_length_set>
 80193b8:	9906      	ldr	r1, [sp, #24]
 80193ba:	1e8a      	subs	r2, r1, #2
 80193bc:	4251      	negs	r1, r2
 80193be:	4151      	adcs	r1, r2
 80193c0:	0349      	lsls	r1, r1, #13
 80193c2:	4620      	mov	r0, r4
 80193c4:	f7ff fef4 	bl	80191b0 <usart_stop_bit_set>
 80193c8:	2e01      	cmp	r6, #1
 80193ca:	f000 8103 	beq.w	80195d4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x388>
 80193ce:	2e02      	cmp	r6, #2
 80193d0:	f040 8103 	bne.w	80195da <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x38e>
 80193d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80193d8:	4620      	mov	r0, r4
 80193da:	f7ff fed9 	bl	8019190 <usart_parity_config>
 80193de:	2100      	movs	r1, #0
 80193e0:	4620      	mov	r0, r4
 80193e2:	f7ff fef9 	bl	80191d8 <usart_hardware_flow_rts_config>
 80193e6:	2100      	movs	r1, #0
 80193e8:	4620      	mov	r0, r4
 80193ea:	f7ff feff 	bl	80191ec <usart_hardware_flow_cts_config>
 80193ee:	2104      	movs	r1, #4
 80193f0:	4620      	mov	r0, r4
 80193f2:	f7ff feeb 	bl	80191cc <usart_receive_config>
 80193f6:	2108      	movs	r1, #8
 80193f8:	4620      	mov	r0, r4
 80193fa:	f7ff fee1 	bl	80191c0 <usart_transmit_config>
 80193fe:	68e3      	ldr	r3, [r4, #12]
 8019400:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019404:	60e3      	str	r3, [r4, #12]
 8019406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019408:	f241 0011 	movw	r0, #4113	@ 0x1011
 801940c:	f7ff fb00 	bl	8018a10 <rcu_periph_clock_enable>
 8019410:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8019414:	f7ff fafc 	bl	8018a10 <rcu_periph_clock_enable>
 8019418:	4855      	ldr	r0, [pc, #340]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801941a:	2204      	movs	r2, #4
 801941c:	2107      	movs	r1, #7
 801941e:	f7ff fab3 	bl	8018988 <gpio_af_set>
 8019422:	4853      	ldr	r0, [pc, #332]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 8019424:	2304      	movs	r3, #4
 8019426:	2201      	movs	r2, #1
 8019428:	2102      	movs	r1, #2
 801942a:	f7ff fa6f 	bl	801890c <gpio_mode_set>
 801942e:	2304      	movs	r3, #4
 8019430:	484f      	ldr	r0, [pc, #316]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 8019432:	2202      	movs	r2, #2
 8019434:	2100      	movs	r1, #0
 8019436:	f7ff fa8b 	bl	8018950 <gpio_output_options_set>
 801943a:	484d      	ldr	r0, [pc, #308]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801943c:	2208      	movs	r2, #8
 801943e:	2107      	movs	r1, #7
 8019440:	f7ff faa2 	bl	8018988 <gpio_af_set>
 8019444:	2308      	movs	r3, #8
 8019446:	484a      	ldr	r0, [pc, #296]	@ (8019570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 8019448:	2201      	movs	r2, #1
 801944a:	2102      	movs	r1, #2
 801944c:	f7ff fa5e 	bl	801890c <gpio_mode_set>
 8019450:	2308      	movs	r3, #8
 8019452:	e799      	b.n	8019388 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x13c>
 8019454:	f241 0013 	movw	r0, #4115	@ 0x1013
 8019458:	f7ff fada 	bl	8018a10 <rcu_periph_clock_enable>
 801945c:	f640 4002 	movw	r0, #3074	@ 0xc02
 8019460:	f7ff fad6 	bl	8018a10 <rcu_periph_clock_enable>
 8019464:	4843      	ldr	r0, [pc, #268]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 8019466:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801946a:	2108      	movs	r1, #8
 801946c:	f7ff fa8c 	bl	8018988 <gpio_af_set>
 8019470:	4840      	ldr	r0, [pc, #256]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 8019472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019476:	2201      	movs	r2, #1
 8019478:	2102      	movs	r1, #2
 801947a:	f7ff fa47 	bl	801890c <gpio_mode_set>
 801947e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019482:	483c      	ldr	r0, [pc, #240]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 8019484:	2202      	movs	r2, #2
 8019486:	2100      	movs	r1, #0
 8019488:	f7ff fa62 	bl	8018950 <gpio_output_options_set>
 801948c:	4839      	ldr	r0, [pc, #228]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801948e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019492:	2108      	movs	r1, #8
 8019494:	f7ff fa78 	bl	8018988 <gpio_af_set>
 8019498:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801949c:	4835      	ldr	r0, [pc, #212]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801949e:	2201      	movs	r2, #1
 80194a0:	2102      	movs	r1, #2
 80194a2:	f7ff fa33 	bl	801890c <gpio_mode_set>
 80194a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80194aa:	4832      	ldr	r0, [pc, #200]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 80194ac:	2202      	movs	r2, #2
 80194ae:	2100      	movs	r1, #0
 80194b0:	e76d      	b.n	801938e <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 80194b2:	f241 0014 	movw	r0, #4116	@ 0x1014
 80194b6:	f7ff faab 	bl	8018a10 <rcu_periph_clock_enable>
 80194ba:	f640 4002 	movw	r0, #3074	@ 0xc02
 80194be:	f7ff faa7 	bl	8018a10 <rcu_periph_clock_enable>
 80194c2:	f640 4003 	movw	r0, #3075	@ 0xc03
 80194c6:	f7ff faa3 	bl	8018a10 <rcu_periph_clock_enable>
 80194ca:	482a      	ldr	r0, [pc, #168]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 80194cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80194d0:	2108      	movs	r1, #8
 80194d2:	f7ff fa59 	bl	8018988 <gpio_af_set>
 80194d6:	4827      	ldr	r0, [pc, #156]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 80194d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80194dc:	2201      	movs	r2, #1
 80194de:	2102      	movs	r1, #2
 80194e0:	f7ff fa14 	bl	801890c <gpio_mode_set>
 80194e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80194e8:	4822      	ldr	r0, [pc, #136]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 80194ea:	2202      	movs	r2, #2
 80194ec:	2100      	movs	r1, #0
 80194ee:	f7ff fa2f 	bl	8018950 <gpio_output_options_set>
 80194f2:	4821      	ldr	r0, [pc, #132]	@ (8019578 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 80194f4:	2204      	movs	r2, #4
 80194f6:	2108      	movs	r1, #8
 80194f8:	f7ff fa46 	bl	8018988 <gpio_af_set>
 80194fc:	481e      	ldr	r0, [pc, #120]	@ (8019578 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 80194fe:	2304      	movs	r3, #4
 8019500:	2201      	movs	r2, #1
 8019502:	2102      	movs	r1, #2
 8019504:	f7ff fa02 	bl	801890c <gpio_mode_set>
 8019508:	481b      	ldr	r0, [pc, #108]	@ (8019578 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 801950a:	2304      	movs	r3, #4
 801950c:	2202      	movs	r2, #2
 801950e:	2100      	movs	r1, #0
 8019510:	e73d      	b.n	801938e <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 8019512:	f241 1005 	movw	r0, #4357	@ 0x1105
 8019516:	f7ff fa7b 	bl	8018a10 <rcu_periph_clock_enable>
 801951a:	f640 4002 	movw	r0, #3074	@ 0xc02
 801951e:	f7ff fa77 	bl	8018a10 <rcu_periph_clock_enable>
 8019522:	4814      	ldr	r0, [pc, #80]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 8019524:	2240      	movs	r2, #64	@ 0x40
 8019526:	2108      	movs	r1, #8
 8019528:	f7ff fa2e 	bl	8018988 <gpio_af_set>
 801952c:	4811      	ldr	r0, [pc, #68]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801952e:	2340      	movs	r3, #64	@ 0x40
 8019530:	2201      	movs	r2, #1
 8019532:	2102      	movs	r1, #2
 8019534:	f7ff f9ea 	bl	801890c <gpio_mode_set>
 8019538:	2340      	movs	r3, #64	@ 0x40
 801953a:	480e      	ldr	r0, [pc, #56]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801953c:	2202      	movs	r2, #2
 801953e:	2100      	movs	r1, #0
 8019540:	f7ff fa06 	bl	8018950 <gpio_output_options_set>
 8019544:	480b      	ldr	r0, [pc, #44]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 8019546:	2280      	movs	r2, #128	@ 0x80
 8019548:	2108      	movs	r1, #8
 801954a:	f7ff fa1d 	bl	8018988 <gpio_af_set>
 801954e:	2380      	movs	r3, #128	@ 0x80
 8019550:	4808      	ldr	r0, [pc, #32]	@ (8019574 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 8019552:	2201      	movs	r2, #1
 8019554:	2102      	movs	r1, #2
 8019556:	f7ff f9d9 	bl	801890c <gpio_mode_set>
 801955a:	2380      	movs	r3, #128	@ 0x80
 801955c:	e7a5      	b.n	80194aa <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x25e>
 801955e:	bf00      	nop
 8019560:	40007800 	andmi	r7, r0, r0, lsl #16
 8019564:	40020400 	andmi	r0, r2, r0, lsl #8
 8019568:	40011000 	andmi	r1, r1, r0
 801956c:	40021000 	andmi	r1, r2, r0
 8019570:	40020000 	andmi	r0, r2, r0
 8019574:	40020800 	andmi	r0, r2, r0, lsl #16
 8019578:	40020c00 	andmi	r0, r2, r0, lsl #24
 801957c:	f241 001e 	movw	r0, #4126	@ 0x101e
 8019580:	f7ff fa46 	bl	8018a10 <rcu_periph_clock_enable>
 8019584:	f640 4004 	movw	r0, #3076	@ 0xc04
 8019588:	f7ff fa42 	bl	8018a10 <rcu_periph_clock_enable>
 801958c:	4814      	ldr	r0, [pc, #80]	@ (80195e0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801958e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019592:	2108      	movs	r1, #8
 8019594:	f7ff f9f8 	bl	8018988 <gpio_af_set>
 8019598:	4811      	ldr	r0, [pc, #68]	@ (80195e0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801959a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801959e:	2201      	movs	r2, #1
 80195a0:	2102      	movs	r1, #2
 80195a2:	f7ff f9b3 	bl	801890c <gpio_mode_set>
 80195a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80195aa:	480d      	ldr	r0, [pc, #52]	@ (80195e0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 80195ac:	2202      	movs	r2, #2
 80195ae:	2100      	movs	r1, #0
 80195b0:	f7ff f9ce 	bl	8018950 <gpio_output_options_set>
 80195b4:	480a      	ldr	r0, [pc, #40]	@ (80195e0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 80195b6:	2280      	movs	r2, #128	@ 0x80
 80195b8:	2108      	movs	r1, #8
 80195ba:	f7ff f9e5 	bl	8018988 <gpio_af_set>
 80195be:	2380      	movs	r3, #128	@ 0x80
 80195c0:	4807      	ldr	r0, [pc, #28]	@ (80195e0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 80195c2:	2201      	movs	r2, #1
 80195c4:	2102      	movs	r1, #2
 80195c6:	f7ff f9a1 	bl	801890c <gpio_mode_set>
 80195ca:	2380      	movs	r3, #128	@ 0x80
 80195cc:	4804      	ldr	r0, [pc, #16]	@ (80195e0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 80195ce:	2202      	movs	r2, #2
 80195d0:	2100      	movs	r1, #0
 80195d2:	e6dc      	b.n	801938e <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 80195d4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80195d8:	e6fe      	b.n	80193d8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x18c>
 80195da:	2100      	movs	r1, #0
 80195dc:	e6fc      	b.n	80193d8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x18c>
 80195de:	bf00      	nop
 80195e0:	40021000 	andmi	r1, r2, r0

080195e4 <mac_address_get(unsigned char*)>:
 80195e4:	4a07      	ldr	r2, [pc, #28]	@ (8019604 <mac_address_get(unsigned char*)+0x20>)
 80195e6:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
 80195ea:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	@ 0xa14
 80195ee:	7042      	strb	r2, [r0, #1]
 80195f0:	0e1a      	lsrs	r2, r3, #24
 80195f2:	7082      	strb	r2, [r0, #2]
 80195f4:	0c1a      	lsrs	r2, r3, #16
 80195f6:	2102      	movs	r1, #2
 80195f8:	70c2      	strb	r2, [r0, #3]
 80195fa:	0a1a      	lsrs	r2, r3, #8
 80195fc:	7001      	strb	r1, [r0, #0]
 80195fe:	7102      	strb	r2, [r0, #4]
 8019600:	7143      	strb	r3, [r0, #5]
 8019602:	4770      	bx	lr
 8019604:	1fff7000 	svcne	0x00ff7000

08019608 <timer6_config()>:
 8019608:	b530      	push	{r4, r5, lr}
 801960a:	4b19      	ldr	r3, [pc, #100]	@ (8019670 <timer6_config()+0x68>)
 801960c:	4c19      	ldr	r4, [pc, #100]	@ (8019674 <timer6_config()+0x6c>)
 801960e:	b085      	sub	sp, #20
 8019610:	2500      	movs	r5, #0
 8019612:	f241 0005 	movw	r0, #4101	@ 0x1005
 8019616:	605d      	str	r5, [r3, #4]
 8019618:	f7ff f9fa 	bl	8018a10 <rcu_periph_clock_enable>
 801961c:	4620      	mov	r0, r4
 801961e:	f7ff fab3 	bl	8018b88 <timer_deinit>
 8019622:	4668      	mov	r0, sp
 8019624:	f7ff fb56 	bl	8018cd4 <timer_struct_para_init>
 8019628:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 801962c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019630:	4669      	mov	r1, sp
 8019632:	4620      	mov	r0, r4
 8019634:	f8ad 2000 	strh.w	r2, [sp]
 8019638:	9302      	str	r3, [sp, #8]
 801963a:	f7ff fb53 	bl	8018ce4 <timer_init>
 801963e:	4629      	mov	r1, r5
 8019640:	4620      	mov	r0, r4
 8019642:	f7ff fb88 	bl	8018d56 <timer_counter_value_config>
 8019646:	4620      	mov	r0, r4
 8019648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801964c:	f7ff fcf7 	bl	801903e <timer_interrupt_flag_clear>
 8019650:	2101      	movs	r1, #1
 8019652:	4620      	mov	r0, r4
 8019654:	f7ff fcef 	bl	8019036 <timer_interrupt_enable>
 8019658:	4b07      	ldr	r3, [pc, #28]	@ (8019678 <timer6_config()+0x70>)
 801965a:	22f0      	movs	r2, #240	@ 0xf0
 801965c:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
 8019660:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8019664:	605a      	str	r2, [r3, #4]
 8019666:	4620      	mov	r0, r4
 8019668:	f7ff fb70 	bl	8018d4c <timer_enable>
 801966c:	b005      	add	sp, #20
 801966e:	bd30      	pop	{r4, r5, pc}
 8019670:	2001bcb8 			@ <UNDEFINED> instruction: 0x2001bcb8
 8019674:	40001400 	andmi	r1, r0, r0, lsl #8
 8019678:	e000e100 	and	lr, r0, r0, lsl #2

0801967c <udelay_init()>:
 801967c:	4a07      	ldr	r2, [pc, #28]	@ (801969c <udelay_init()+0x20>)
 801967e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 8019682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019686:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
 801968a:	4b05      	ldr	r3, [pc, #20]	@ (80196a0 <udelay_init()+0x24>)
 801968c:	2200      	movs	r2, #0
 801968e:	605a      	str	r2, [r3, #4]
 8019690:	681a      	ldr	r2, [r3, #0]
 8019692:	f042 0201 	orr.w	r2, r2, #1
 8019696:	601a      	str	r2, [r3, #0]
 8019698:	4770      	bx	lr
 801969a:	bf00      	nop
 801969c:	e000ed00 	and	lr, r0, r0, lsl #26
 80196a0:	e0001000 	and	r1, r0, r0

080196a4 <udelay(unsigned long, unsigned long)>:
 80196a4:	23f0      	movs	r3, #240	@ 0xf0
 80196a6:	b530      	push	{r4, r5, lr}
 80196a8:	4358      	muls	r0, r3
 80196aa:	b909      	cbnz	r1, 80196b0 <udelay(unsigned long, unsigned long)+0xc>
 80196ac:	4b08      	ldr	r3, [pc, #32]	@ (80196d0 <udelay(unsigned long, unsigned long)+0x2c>)
 80196ae:	6859      	ldr	r1, [r3, #4]
 80196b0:	4c07      	ldr	r4, [pc, #28]	@ (80196d0 <udelay(unsigned long, unsigned long)+0x2c>)
 80196b2:	2300      	movs	r3, #0
 80196b4:	6862      	ldr	r2, [r4, #4]
 80196b6:	4291      	cmp	r1, r2
 80196b8:	d0fc      	beq.n	80196b4 <udelay(unsigned long, unsigned long)+0x10>
 80196ba:	bf2a      	itet	cs
 80196bc:	f102 35ff 	addcs.w	r5, r2, #4294967295	@ 0xffffffff
 80196c0:	189b      	addcc	r3, r3, r2
 80196c2:	195b      	addcs	r3, r3, r5
 80196c4:	1a5b      	subs	r3, r3, r1
 80196c6:	4283      	cmp	r3, r0
 80196c8:	d300      	bcc.n	80196cc <udelay(unsigned long, unsigned long)+0x28>
 80196ca:	bd30      	pop	{r4, r5, pc}
 80196cc:	4611      	mov	r1, r2
 80196ce:	e7f1      	b.n	80196b4 <udelay(unsigned long, unsigned long)+0x10>
 80196d0:	e0001000 	and	r1, r0, r0

080196d4 <systick_config>:
 80196d4:	4b0c      	ldr	r3, [pc, #48]	@ (8019708 <systick_config+0x34>)
 80196d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80196e0:	3b01      	subs	r3, #1
 80196e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80196e6:	d20d      	bcs.n	8019704 <systick_config+0x30>
 80196e8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80196ec:	21f0      	movs	r1, #240	@ 0xf0
 80196ee:	6153      	str	r3, [r2, #20]
 80196f0:	4b06      	ldr	r3, [pc, #24]	@ (801970c <systick_config+0x38>)
 80196f2:	2000      	movs	r0, #0
 80196f4:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
 80196f8:	6190      	str	r0, [r2, #24]
 80196fa:	2007      	movs	r0, #7
 80196fc:	6110      	str	r0, [r2, #16]
 80196fe:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
 8019702:	4770      	bx	lr
 8019704:	e7fe      	b.n	8019704 <systick_config+0x30>
 8019706:	bf00      	nop
 8019708:	20000004 	andcs	r0, r0, r4
 801970c:	e000ed00 	and	lr, r0, r0, lsl #26

08019710 <SysTick_Handler>:
 8019710:	4a02      	ldr	r2, [pc, #8]	@ (801971c <SysTick_Handler+0xc>)
 8019712:	6813      	ldr	r3, [r2, #0]
 8019714:	3301      	adds	r3, #1
 8019716:	6013      	str	r3, [r2, #0]
 8019718:	4770      	bx	lr
 801971a:	bf00      	nop
 801971c:	2001bcc0 	andcs	fp, r1, r0, asr #25

08019720 <gd32_adc_init()>:
 8019720:	b510      	push	{r4, lr}
 8019722:	f241 1008 	movw	r0, #4360	@ 0x1108
 8019726:	4c24      	ldr	r4, [pc, #144]	@ (80197b8 <gd32_adc_init()+0x98>)
 8019728:	f7ff f972 	bl	8018a10 <rcu_periph_clock_enable>
 801972c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8019730:	f000 fa22 	bl	8019b78 <adc_clock_config>
 8019734:	4620      	mov	r0, r4
 8019736:	2203      	movs	r2, #3
 8019738:	2102      	movs	r1, #2
 801973a:	f000 fa9f 	bl	8019c7c <adc_channel_length_config>
 801973e:	4620      	mov	r0, r4
 8019740:	2306      	movs	r3, #6
 8019742:	2210      	movs	r2, #16
 8019744:	2100      	movs	r1, #0
 8019746:	f000 fab6 	bl	8019cb6 <adc_inserted_channel_config>
 801974a:	4620      	mov	r0, r4
 801974c:	2306      	movs	r3, #6
 801974e:	2211      	movs	r2, #17
 8019750:	2101      	movs	r1, #1
 8019752:	f000 fab0 	bl	8019cb6 <adc_inserted_channel_config>
 8019756:	2306      	movs	r3, #6
 8019758:	4620      	mov	r0, r4
 801975a:	2212      	movs	r2, #18
 801975c:	2102      	movs	r1, #2
 801975e:	f000 faaa 	bl	8019cb6 <adc_inserted_channel_config>
 8019762:	2200      	movs	r2, #0
 8019764:	4620      	mov	r0, r4
 8019766:	2102      	movs	r1, #2
 8019768:	f000 fad5 	bl	8019d16 <adc_external_trigger_config>
 801976c:	4620      	mov	r0, r4
 801976e:	2100      	movs	r1, #0
 8019770:	f000 fa3a 	bl	8019be8 <adc_data_alignment_config>
 8019774:	2201      	movs	r2, #1
 8019776:	4620      	mov	r0, r4
 8019778:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801977c:	f000 fa0c 	bl	8019b98 <adc_special_function_config>
 8019780:	2101      	movs	r1, #1
 8019782:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8019786:	f000 fa51 	bl	8019c2c <adc_channel_16_to_18>
 801978a:	2101      	movs	r1, #1
 801978c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8019790:	f000 fa4c 	bl	8019c2c <adc_channel_16_to_18>
 8019794:	4620      	mov	r0, r4
 8019796:	f000 fa30 	bl	8019bfa <adc_enable>
 801979a:	2100      	movs	r1, #0
 801979c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80197a0:	f7ff ff80 	bl	80196a4 <udelay(unsigned long, unsigned long)>
 80197a4:	4620      	mov	r0, r4
 80197a6:	f000 fa30 	bl	8019c0a <adc_calibration_enable>
 80197aa:	4620      	mov	r0, r4
 80197ac:	2102      	movs	r1, #2
 80197ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197b2:	f000 bac6 	b.w	8019d42 <adc_software_trigger_enable>
 80197b6:	bf00      	nop
 80197b8:	40012000 	andmi	r2, r1, r0

080197bc <dma::memcpy32_init()>:
 80197bc:	b510      	push	{r4, lr}
 80197be:	4c14      	ldr	r4, [pc, #80]	@ (8019810 <dma::memcpy32_init()+0x54>)
 80197c0:	b08e      	sub	sp, #56	@ 0x38
 80197c2:	f640 4016 	movw	r0, #3094	@ 0xc16
 80197c6:	f7ff f923 	bl	8018a10 <rcu_periph_clock_enable>
 80197ca:	4620      	mov	r0, r4
 80197cc:	2100      	movs	r1, #0
 80197ce:	f7fe fd03 	bl	80181d8 <dma_deinit>
 80197d2:	2100      	movs	r1, #0
 80197d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80197d8:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80197dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80197e0:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80197e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80197e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80197ec:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80197f0:	2003      	movs	r0, #3
 80197f2:	2301      	movs	r3, #1
 80197f4:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
 80197f8:	2380      	movs	r3, #128	@ 0x80
 80197fa:	e9cd 310b 	strd	r3, r1, [sp, #44]	@ 0x2c
 80197fe:	aa01      	add	r2, sp, #4
 8019800:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8019804:	4620      	mov	r0, r4
 8019806:	930d      	str	r3, [sp, #52]	@ 0x34
 8019808:	f7fe fd5e 	bl	80182c8 <dma_multi_data_mode_init>
 801980c:	b00e      	add	sp, #56	@ 0x38
 801980e:	bd10      	pop	{r4, pc}
 8019810:	40026400 	andmi	r6, r2, r0, lsl #8

08019814 <send_stop() [clone .isra.0]>:
 8019814:	b508      	push	{r3, lr}
 8019816:	4806      	ldr	r0, [pc, #24]	@ (8019830 <send_stop() [clone .isra.0]+0x1c>)
 8019818:	f000 fb22 	bl	8019e60 <i2c_stop_on_bus>
 801981c:	4905      	ldr	r1, [pc, #20]	@ (8019834 <send_stop() [clone .isra.0]+0x20>)
 801981e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8019822:	f8d1 2400 	ldr.w	r2, [r1, #1024]	@ 0x400
 8019826:	0592      	lsls	r2, r2, #22
 8019828:	d501      	bpl.n	801982e <send_stop() [clone .isra.0]+0x1a>
 801982a:	3b01      	subs	r3, #1
 801982c:	d1f9      	bne.n	8019822 <send_stop() [clone .isra.0]+0xe>
 801982e:	bd08      	pop	{r3, pc}
 8019830:	40005400 	andmi	r5, r0, r0, lsl #8
 8019834:	40005000 	andmi	r5, r0, r0

08019838 <gd32_i2c_begin>:
 8019838:	b510      	push	{r4, lr}
 801983a:	f241 0015 	movw	r0, #4117	@ 0x1015
 801983e:	4c22      	ldr	r4, [pc, #136]	@ (80198c8 <gd32_i2c_begin+0x90>)
 8019840:	f7ff f8e6 	bl	8018a10 <rcu_periph_clock_enable>
 8019844:	f640 4001 	movw	r0, #3073	@ 0xc01
 8019848:	f7ff f8e2 	bl	8018a10 <rcu_periph_clock_enable>
 801984c:	f640 4001 	movw	r0, #3073	@ 0xc01
 8019850:	f7ff f8de 	bl	8018a10 <rcu_periph_clock_enable>
 8019854:	4620      	mov	r0, r4
 8019856:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801985a:	2104      	movs	r1, #4
 801985c:	f7ff f894 	bl	8018988 <gpio_af_set>
 8019860:	4620      	mov	r0, r4
 8019862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019866:	2201      	movs	r2, #1
 8019868:	2102      	movs	r1, #2
 801986a:	f7ff f84f 	bl	801890c <gpio_mode_set>
 801986e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019872:	4620      	mov	r0, r4
 8019874:	2202      	movs	r2, #2
 8019876:	2101      	movs	r1, #1
 8019878:	f7ff f86a 	bl	8018950 <gpio_output_options_set>
 801987c:	4620      	mov	r0, r4
 801987e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019882:	2104      	movs	r1, #4
 8019884:	f7ff f880 	bl	8018988 <gpio_af_set>
 8019888:	4620      	mov	r0, r4
 801988a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801988e:	2201      	movs	r2, #1
 8019890:	2102      	movs	r1, #2
 8019892:	f7ff f83b 	bl	801890c <gpio_mode_set>
 8019896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801989a:	4620      	mov	r0, r4
 801989c:	2202      	movs	r2, #2
 801989e:	f5a4 34d8 	sub.w	r4, r4, #110592	@ 0x1b000
 80198a2:	2101      	movs	r1, #1
 80198a4:	f7ff f854 	bl	8018950 <gpio_output_options_set>
 80198a8:	4908      	ldr	r1, [pc, #32]	@ (80198cc <gd32_i2c_begin+0x94>)
 80198aa:	4620      	mov	r0, r4
 80198ac:	2200      	movs	r2, #0
 80198ae:	f000 fa57 	bl	8019d60 <i2c_clock_config>
 80198b2:	4620      	mov	r0, r4
 80198b4:	f000 faca 	bl	8019e4c <i2c_enable>
 80198b8:	4620      	mov	r0, r4
 80198ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80198be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198c2:	f000 baaf 	b.w	8019e24 <i2c_ack_config>
 80198c6:	bf00      	nop
 80198c8:	40020400 	andmi	r0, r2, r0, lsl #8
 80198cc:	00061a80 	andeq	r1, r6, r0, lsl #21

080198d0 <gd32_i2c_set_baudrate>:
 80198d0:	4601      	mov	r1, r0
 80198d2:	2200      	movs	r2, #0
 80198d4:	4801      	ldr	r0, [pc, #4]	@ (80198dc <gd32_i2c_set_baudrate+0xc>)
 80198d6:	f000 ba43 	b.w	8019d60 <i2c_clock_config>
 80198da:	bf00      	nop
 80198dc:	40005400 	andmi	r5, r0, r0, lsl #8

080198e0 <gd32_i2c_set_address>:
 80198e0:	4b01      	ldr	r3, [pc, #4]	@ (80198e8 <gd32_i2c_set_address+0x8>)
 80198e2:	0040      	lsls	r0, r0, #1
 80198e4:	7018      	strb	r0, [r3, #0]
 80198e6:	4770      	bx	lr
 80198e8:	2001bcc4 	andcs	fp, r1, r4, asr #25

080198ec <gd32_i2c_write>:
 80198ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ee:	4f30      	ldr	r7, [pc, #192]	@ (80199b0 <gd32_i2c_write+0xc4>)
 80198f0:	4604      	mov	r4, r0
 80198f2:	460d      	mov	r5, r1
 80198f4:	f640 76ff 	movw	r6, #4095	@ 0xfff
 80198f8:	f240 6101 	movw	r1, #1537	@ 0x601
 80198fc:	4638      	mov	r0, r7
 80198fe:	f000 fab9 	bl	8019e74 <i2c_flag_get>
 8019902:	bb90      	cbnz	r0, 801996a <gd32_i2c_write+0x7e>
 8019904:	482a      	ldr	r0, [pc, #168]	@ (80199b0 <gd32_i2c_write+0xc4>)
 8019906:	4f2a      	ldr	r7, [pc, #168]	@ (80199b0 <gd32_i2c_write+0xc4>)
 8019908:	f000 faa5 	bl	8019e56 <i2c_start_on_bus>
 801990c:	f640 76ff 	movw	r6, #4095	@ 0xfff
 8019910:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8019914:	4638      	mov	r0, r7
 8019916:	f000 faad 	bl	8019e74 <i2c_flag_get>
 801991a:	b370      	cbz	r0, 801997a <gd32_i2c_write+0x8e>
 801991c:	4b25      	ldr	r3, [pc, #148]	@ (80199b4 <gd32_i2c_write+0xc8>)
 801991e:	4824      	ldr	r0, [pc, #144]	@ (80199b0 <gd32_i2c_write+0xc4>)
 8019920:	7819      	ldrb	r1, [r3, #0]
 8019922:	4f23      	ldr	r7, [pc, #140]	@ (80199b0 <gd32_i2c_write+0xc4>)
 8019924:	f06f 0201 	mvn.w	r2, #1
 8019928:	f000 fa88 	bl	8019e3c <i2c_master_addressing>
 801992c:	f640 76ff 	movw	r6, #4095	@ 0xfff
 8019930:	f240 5101 	movw	r1, #1281	@ 0x501
 8019934:	4638      	mov	r0, r7
 8019936:	f000 fa9d 	bl	8019e74 <i2c_flag_get>
 801993a:	b308      	cbz	r0, 8019980 <gd32_i2c_write+0x94>
 801993c:	481c      	ldr	r0, [pc, #112]	@ (80199b0 <gd32_i2c_write+0xc4>)
 801993e:	4f1c      	ldr	r7, [pc, #112]	@ (80199b0 <gd32_i2c_write+0xc4>)
 8019940:	f240 5101 	movw	r1, #1281	@ 0x501
 8019944:	f000 fa9e 	bl	8019e84 <i2c_flag_clear>
 8019948:	f640 76ff 	movw	r6, #4095	@ 0xfff
 801994c:	f240 5107 	movw	r1, #1287	@ 0x507
 8019950:	4638      	mov	r0, r7
 8019952:	f000 fa8f 	bl	8019e74 <i2c_flag_get>
 8019956:	2801      	cmp	r0, #1
 8019958:	d115      	bne.n	8019986 <gd32_i2c_write+0x9a>
 801995a:	4f15      	ldr	r7, [pc, #84]	@ (80199b0 <gd32_i2c_write+0xc4>)
 801995c:	4425      	add	r5, r4
 801995e:	42ac      	cmp	r4, r5
 8019960:	d114      	bne.n	801998c <gd32_i2c_write+0xa0>
 8019962:	f7ff ff57 	bl	8019814 <send_stop() [clone .isra.0]>
 8019966:	2000      	movs	r0, #0
 8019968:	e005      	b.n	8019976 <gd32_i2c_write+0x8a>
 801996a:	3e01      	subs	r6, #1
 801996c:	d1c4      	bne.n	80198f8 <gd32_i2c_write+0xc>
 801996e:	f7ff ff51 	bl	8019814 <send_stop() [clone .isra.0]>
 8019972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019976:	4240      	negs	r0, r0
 8019978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801997a:	3e01      	subs	r6, #1
 801997c:	d1c8      	bne.n	8019910 <gd32_i2c_write+0x24>
 801997e:	e7f6      	b.n	801996e <gd32_i2c_write+0x82>
 8019980:	3e01      	subs	r6, #1
 8019982:	d1d5      	bne.n	8019930 <gd32_i2c_write+0x44>
 8019984:	e7f3      	b.n	801996e <gd32_i2c_write+0x82>
 8019986:	3e01      	subs	r6, #1
 8019988:	d1e0      	bne.n	801994c <gd32_i2c_write+0x60>
 801998a:	e7f0      	b.n	801996e <gd32_i2c_write+0x82>
 801998c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019990:	4638      	mov	r0, r7
 8019992:	f000 fa6a 	bl	8019e6a <i2c_data_transmit>
 8019996:	f640 76ff 	movw	r6, #4095	@ 0xfff
 801999a:	f240 5102 	movw	r1, #1282	@ 0x502
 801999e:	4638      	mov	r0, r7
 80199a0:	f000 fa68 	bl	8019e74 <i2c_flag_get>
 80199a4:	2800      	cmp	r0, #0
 80199a6:	d1da      	bne.n	801995e <gd32_i2c_write+0x72>
 80199a8:	3e01      	subs	r6, #1
 80199aa:	d1f6      	bne.n	801999a <gd32_i2c_write+0xae>
 80199ac:	e7df      	b.n	801996e <gd32_i2c_write+0x82>
 80199ae:	bf00      	nop
 80199b0:	40005400 	andmi	r5, r0, r0, lsl #8
 80199b4:	2001bcc4 	andcs	fp, r1, r4, asr #25

080199b8 <gd32_i2c_read>:
 80199b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199bc:	4f4e      	ldr	r7, [pc, #312]	@ (8019af8 <gd32_i2c_read+0x140>)
 80199be:	4680      	mov	r8, r0
 80199c0:	460c      	mov	r4, r1
 80199c2:	f640 75ff 	movw	r5, #4095	@ 0xfff
 80199c6:	f240 6101 	movw	r1, #1537	@ 0x601
 80199ca:	4638      	mov	r0, r7
 80199cc:	f000 fa52 	bl	8019e74 <i2c_flag_get>
 80199d0:	4606      	mov	r6, r0
 80199d2:	bb10      	cbnz	r0, 8019a1a <gd32_i2c_read+0x62>
 80199d4:	2c02      	cmp	r4, #2
 80199d6:	d104      	bne.n	80199e2 <gd32_i2c_read+0x2a>
 80199d8:	4847      	ldr	r0, [pc, #284]	@ (8019af8 <gd32_i2c_read+0x140>)
 80199da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80199de:	f000 fa27 	bl	8019e30 <i2c_ackpos_config>
 80199e2:	4845      	ldr	r0, [pc, #276]	@ (8019af8 <gd32_i2c_read+0x140>)
 80199e4:	4f44      	ldr	r7, [pc, #272]	@ (8019af8 <gd32_i2c_read+0x140>)
 80199e6:	f000 fa36 	bl	8019e56 <i2c_start_on_bus>
 80199ea:	f640 75ff 	movw	r5, #4095	@ 0xfff
 80199ee:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80199f2:	4638      	mov	r0, r7
 80199f4:	f000 fa3e 	bl	8019e74 <i2c_flag_get>
 80199f8:	b1b8      	cbz	r0, 8019a2a <gd32_i2c_read+0x72>
 80199fa:	4b40      	ldr	r3, [pc, #256]	@ (8019afc <gd32_i2c_read+0x144>)
 80199fc:	483e      	ldr	r0, [pc, #248]	@ (8019af8 <gd32_i2c_read+0x140>)
 80199fe:	7819      	ldrb	r1, [r3, #0]
 8019a00:	2201      	movs	r2, #1
 8019a02:	f000 fa1b 	bl	8019e3c <i2c_master_addressing>
 8019a06:	2c02      	cmp	r4, #2
 8019a08:	d803      	bhi.n	8019a12 <gd32_i2c_read+0x5a>
 8019a0a:	483b      	ldr	r0, [pc, #236]	@ (8019af8 <gd32_i2c_read+0x140>)
 8019a0c:	2100      	movs	r1, #0
 8019a0e:	f000 fa09 	bl	8019e24 <i2c_ack_config>
 8019a12:	4f39      	ldr	r7, [pc, #228]	@ (8019af8 <gd32_i2c_read+0x140>)
 8019a14:	f640 75ff 	movw	r5, #4095	@ 0xfff
 8019a18:	e00c      	b.n	8019a34 <gd32_i2c_read+0x7c>
 8019a1a:	3d01      	subs	r5, #1
 8019a1c:	d1d3      	bne.n	80199c6 <gd32_i2c_read+0xe>
 8019a1e:	f7ff fef9 	bl	8019814 <send_stop() [clone .isra.0]>
 8019a22:	2604      	movs	r6, #4
 8019a24:	4630      	mov	r0, r6
 8019a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a2a:	3d01      	subs	r5, #1
 8019a2c:	d1df      	bne.n	80199ee <gd32_i2c_read+0x36>
 8019a2e:	e7f6      	b.n	8019a1e <gd32_i2c_read+0x66>
 8019a30:	3d01      	subs	r5, #1
 8019a32:	d0f4      	beq.n	8019a1e <gd32_i2c_read+0x66>
 8019a34:	f240 5101 	movw	r1, #1281	@ 0x501
 8019a38:	4638      	mov	r0, r7
 8019a3a:	f000 fa1b 	bl	8019e74 <i2c_flag_get>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	d0f6      	beq.n	8019a30 <gd32_i2c_read+0x78>
 8019a42:	482d      	ldr	r0, [pc, #180]	@ (8019af8 <gd32_i2c_read+0x140>)
 8019a44:	f240 5101 	movw	r1, #1281	@ 0x501
 8019a48:	f000 fa1c 	bl	8019e84 <i2c_flag_clear>
 8019a4c:	2c01      	cmp	r4, #1
 8019a4e:	d102      	bne.n	8019a56 <gd32_i2c_read+0x9e>
 8019a50:	4829      	ldr	r0, [pc, #164]	@ (8019af8 <gd32_i2c_read+0x140>)
 8019a52:	f000 fa05 	bl	8019e60 <i2c_stop_on_bus>
 8019a56:	4d28      	ldr	r5, [pc, #160]	@ (8019af8 <gd32_i2c_read+0x140>)
 8019a58:	f640 77ff 	movw	r7, #4095	@ 0xfff
 8019a5c:	e022      	b.n	8019aa4 <gd32_i2c_read+0xec>
 8019a5e:	2c03      	cmp	r4, #3
 8019a60:	d134      	bne.n	8019acc <gd32_i2c_read+0x114>
 8019a62:	f640 79ff 	movw	r9, #4095	@ 0xfff
 8019a66:	e002      	b.n	8019a6e <gd32_i2c_read+0xb6>
 8019a68:	f1b9 0901 	subs.w	r9, r9, #1
 8019a6c:	d0d7      	beq.n	8019a1e <gd32_i2c_read+0x66>
 8019a6e:	f240 5102 	movw	r1, #1282	@ 0x502
 8019a72:	4628      	mov	r0, r5
 8019a74:	f000 f9fe 	bl	8019e74 <i2c_flag_get>
 8019a78:	2800      	cmp	r0, #0
 8019a7a:	d0f5      	beq.n	8019a68 <gd32_i2c_read+0xb0>
 8019a7c:	2100      	movs	r1, #0
 8019a7e:	4628      	mov	r0, r5
 8019a80:	f000 f9d0 	bl	8019e24 <i2c_ack_config>
 8019a84:	f240 5106 	movw	r1, #1286	@ 0x506
 8019a88:	4628      	mov	r0, r5
 8019a8a:	f000 f9f3 	bl	8019e74 <i2c_flag_get>
 8019a8e:	b138      	cbz	r0, 8019aa0 <gd32_i2c_read+0xe8>
 8019a90:	4628      	mov	r0, r5
 8019a92:	f000 f9ec 	bl	8019e6e <i2c_data_receive>
 8019a96:	f808 0b01 	strb.w	r0, [r8], #1
 8019a9a:	3c01      	subs	r4, #1
 8019a9c:	f640 77ff 	movw	r7, #4095	@ 0xfff
 8019aa0:	3f01      	subs	r7, #1
 8019aa2:	d0bc      	beq.n	8019a1e <gd32_i2c_read+0x66>
 8019aa4:	2c00      	cmp	r4, #0
 8019aa6:	d1da      	bne.n	8019a5e <gd32_i2c_read+0xa6>
 8019aa8:	4a15      	ldr	r2, [pc, #84]	@ (8019b00 <gd32_i2c_read+0x148>)
 8019aaa:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8019aae:	f8d2 4400 	ldr.w	r4, [r2, #1024]	@ 0x400
 8019ab2:	f414 7400 	ands.w	r4, r4, #512	@ 0x200
 8019ab6:	d11c      	bne.n	8019af2 <gd32_i2c_read+0x13a>
 8019ab8:	480f      	ldr	r0, [pc, #60]	@ (8019af8 <gd32_i2c_read+0x140>)
 8019aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8019abe:	f000 f9b1 	bl	8019e24 <i2c_ack_config>
 8019ac2:	480d      	ldr	r0, [pc, #52]	@ (8019af8 <gd32_i2c_read+0x140>)
 8019ac4:	4621      	mov	r1, r4
 8019ac6:	f000 f9b3 	bl	8019e30 <i2c_ackpos_config>
 8019aca:	e7ab      	b.n	8019a24 <gd32_i2c_read+0x6c>
 8019acc:	2c02      	cmp	r4, #2
 8019ace:	d1d9      	bne.n	8019a84 <gd32_i2c_read+0xcc>
 8019ad0:	f640 79ff 	movw	r9, #4095	@ 0xfff
 8019ad4:	e002      	b.n	8019adc <gd32_i2c_read+0x124>
 8019ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8019ada:	d0a0      	beq.n	8019a1e <gd32_i2c_read+0x66>
 8019adc:	f240 5102 	movw	r1, #1282	@ 0x502
 8019ae0:	4628      	mov	r0, r5
 8019ae2:	f000 f9c7 	bl	8019e74 <i2c_flag_get>
 8019ae6:	2800      	cmp	r0, #0
 8019ae8:	d0f5      	beq.n	8019ad6 <gd32_i2c_read+0x11e>
 8019aea:	4628      	mov	r0, r5
 8019aec:	f000 f9b8 	bl	8019e60 <i2c_stop_on_bus>
 8019af0:	e7c8      	b.n	8019a84 <gd32_i2c_read+0xcc>
 8019af2:	3b01      	subs	r3, #1
 8019af4:	d1db      	bne.n	8019aae <gd32_i2c_read+0xf6>
 8019af6:	e794      	b.n	8019a22 <gd32_i2c_read+0x6a>
 8019af8:	40005400 	andmi	r5, r0, r0, lsl #8
 8019afc:	2001bcc4 	andcs	fp, r1, r4, asr #25
 8019b00:	40005000 	andmi	r5, r0, r0

08019b04 <uart0_init>:
 8019b04:	b507      	push	{r0, r1, r2, lr}
 8019b06:	2301      	movs	r3, #1
 8019b08:	9300      	str	r3, [sp, #0]
 8019b0a:	4805      	ldr	r0, [pc, #20]	@ (8019b20 <uart0_init+0x1c>)
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	2208      	movs	r2, #8
 8019b10:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8019b14:	f7ff fb9a 	bl	801924c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
 8019b18:	b003      	add	sp, #12
 8019b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b1e:	bf00      	nop
 8019b20:	40011000 	andmi	r1, r1, r0

08019b24 <uart0_putc>:
 8019b24:	280a      	cmp	r0, #10
 8019b26:	b570      	push	{r4, r5, r6, lr}
 8019b28:	4d0a      	ldr	r5, [pc, #40]	@ (8019b54 <uart0_putc+0x30>)
 8019b2a:	4604      	mov	r4, r0
 8019b2c:	d107      	bne.n	8019b3e <uart0_putc+0x1a>
 8019b2e:	2107      	movs	r1, #7
 8019b30:	4628      	mov	r0, r5
 8019b32:	f7ff fb65 	bl	8019200 <usart_flag_get>
 8019b36:	2800      	cmp	r0, #0
 8019b38:	d0f9      	beq.n	8019b2e <uart0_putc+0xa>
 8019b3a:	230d      	movs	r3, #13
 8019b3c:	606b      	str	r3, [r5, #4]
 8019b3e:	4e05      	ldr	r6, [pc, #20]	@ (8019b54 <uart0_putc+0x30>)
 8019b40:	2107      	movs	r1, #7
 8019b42:	4630      	mov	r0, r6
 8019b44:	f7ff fb5c 	bl	8019200 <usart_flag_get>
 8019b48:	2800      	cmp	r0, #0
 8019b4a:	d0f9      	beq.n	8019b40 <uart0_putc+0x1c>
 8019b4c:	b2e4      	uxtb	r4, r4
 8019b4e:	606c      	str	r4, [r5, #4]
 8019b50:	bd70      	pop	{r4, r5, r6, pc}
 8019b52:	bf00      	nop
 8019b54:	40011000 	andmi	r1, r1, r0

08019b58 <uart0_puts>:
 8019b58:	b510      	push	{r4, lr}
 8019b5a:	1e44      	subs	r4, r0, #1
 8019b5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019b60:	b903      	cbnz	r3, 8019b64 <uart0_puts+0xc>
 8019b62:	bd10      	pop	{r4, pc}
 8019b64:	2b0a      	cmp	r3, #10
 8019b66:	d102      	bne.n	8019b6e <uart0_puts+0x16>
 8019b68:	200d      	movs	r0, #13
 8019b6a:	f7ff ffdb 	bl	8019b24 <uart0_putc>
 8019b6e:	7820      	ldrb	r0, [r4, #0]
 8019b70:	f7ff ffd8 	bl	8019b24 <uart0_putc>
 8019b74:	e7f2      	b.n	8019b5c <uart0_puts+0x4>
	...

08019b78 <adc_clock_config>:
 8019b78:	4b06      	ldr	r3, [pc, #24]	@ (8019b94 <adc_clock_config+0x1c>)
 8019b7a:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 8019b7e:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8019b82:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
 8019b86:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 8019b8a:	4302      	orrs	r2, r0
 8019b8c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
 8019b90:	4770      	bx	lr
 8019b92:	bf00      	nop
 8019b94:	40012000 	andmi	r2, r1, r0

08019b98 <adc_special_function_config>:
 8019b98:	b510      	push	{r4, lr}
 8019b9a:	f401 7380 	and.w	r3, r1, #256	@ 0x100
 8019b9e:	f401 6480 	and.w	r4, r1, #1024	@ 0x400
 8019ba2:	f001 0102 	and.w	r1, r1, #2
 8019ba6:	b17a      	cbz	r2, 8019bc8 <adc_special_function_config+0x30>
 8019ba8:	b11b      	cbz	r3, 8019bb2 <adc_special_function_config+0x1a>
 8019baa:	6843      	ldr	r3, [r0, #4]
 8019bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019bb0:	6043      	str	r3, [r0, #4]
 8019bb2:	b11c      	cbz	r4, 8019bbc <adc_special_function_config+0x24>
 8019bb4:	6843      	ldr	r3, [r0, #4]
 8019bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019bba:	6043      	str	r3, [r0, #4]
 8019bbc:	b119      	cbz	r1, 8019bc6 <adc_special_function_config+0x2e>
 8019bbe:	6883      	ldr	r3, [r0, #8]
 8019bc0:	f043 0302 	orr.w	r3, r3, #2
 8019bc4:	6083      	str	r3, [r0, #8]
 8019bc6:	bd10      	pop	{r4, pc}
 8019bc8:	b11b      	cbz	r3, 8019bd2 <adc_special_function_config+0x3a>
 8019bca:	6843      	ldr	r3, [r0, #4]
 8019bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019bd0:	6043      	str	r3, [r0, #4]
 8019bd2:	b11c      	cbz	r4, 8019bdc <adc_special_function_config+0x44>
 8019bd4:	6843      	ldr	r3, [r0, #4]
 8019bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8019bda:	6043      	str	r3, [r0, #4]
 8019bdc:	2900      	cmp	r1, #0
 8019bde:	d0f2      	beq.n	8019bc6 <adc_special_function_config+0x2e>
 8019be0:	6883      	ldr	r3, [r0, #8]
 8019be2:	f023 0302 	bic.w	r3, r3, #2
 8019be6:	e7ed      	b.n	8019bc4 <adc_special_function_config+0x2c>

08019be8 <adc_data_alignment_config>:
 8019be8:	6883      	ldr	r3, [r0, #8]
 8019bea:	b119      	cbz	r1, 8019bf4 <adc_data_alignment_config+0xc>
 8019bec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8019bf0:	6083      	str	r3, [r0, #8]
 8019bf2:	4770      	bx	lr
 8019bf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8019bf8:	e7fa      	b.n	8019bf0 <adc_data_alignment_config+0x8>

08019bfa <adc_enable>:
 8019bfa:	6883      	ldr	r3, [r0, #8]
 8019bfc:	07db      	lsls	r3, r3, #31
 8019bfe:	bf5e      	ittt	pl
 8019c00:	6883      	ldrpl	r3, [r0, #8]
 8019c02:	f043 0301 	orrpl.w	r3, r3, #1
 8019c06:	6083      	strpl	r3, [r0, #8]
 8019c08:	4770      	bx	lr

08019c0a <adc_calibration_enable>:
 8019c0a:	6883      	ldr	r3, [r0, #8]
 8019c0c:	f043 0308 	orr.w	r3, r3, #8
 8019c10:	f100 0208 	add.w	r2, r0, #8
 8019c14:	6083      	str	r3, [r0, #8]
 8019c16:	6813      	ldr	r3, [r2, #0]
 8019c18:	0719      	lsls	r1, r3, #28
 8019c1a:	d4fc      	bmi.n	8019c16 <adc_calibration_enable+0xc>
 8019c1c:	6883      	ldr	r3, [r0, #8]
 8019c1e:	f043 0304 	orr.w	r3, r3, #4
 8019c22:	6083      	str	r3, [r0, #8]
 8019c24:	6813      	ldr	r3, [r2, #0]
 8019c26:	075b      	lsls	r3, r3, #29
 8019c28:	d4fc      	bmi.n	8019c24 <adc_calibration_enable+0x1a>
 8019c2a:	4770      	bx	lr

08019c2c <adc_channel_16_to_18>:
 8019c2c:	f400 0380 	and.w	r3, r0, #4194304	@ 0x400000
 8019c30:	f400 0000 	and.w	r0, r0, #8388608	@ 0x800000
 8019c34:	b181      	cbz	r1, 8019c58 <adc_channel_16_to_18+0x2c>
 8019c36:	b133      	cbz	r3, 8019c46 <adc_channel_16_to_18+0x1a>
 8019c38:	4a0f      	ldr	r2, [pc, #60]	@ (8019c78 <adc_channel_16_to_18+0x4c>)
 8019c3a:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019c3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8019c42:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8019c46:	b130      	cbz	r0, 8019c56 <adc_channel_16_to_18+0x2a>
 8019c48:	4a0b      	ldr	r2, [pc, #44]	@ (8019c78 <adc_channel_16_to_18+0x4c>)
 8019c4a:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019c4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019c52:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8019c56:	4770      	bx	lr
 8019c58:	b133      	cbz	r3, 8019c68 <adc_channel_16_to_18+0x3c>
 8019c5a:	4a07      	ldr	r2, [pc, #28]	@ (8019c78 <adc_channel_16_to_18+0x4c>)
 8019c5c:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019c60:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8019c64:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8019c68:	2800      	cmp	r0, #0
 8019c6a:	d0f4      	beq.n	8019c56 <adc_channel_16_to_18+0x2a>
 8019c6c:	4a02      	ldr	r2, [pc, #8]	@ (8019c78 <adc_channel_16_to_18+0x4c>)
 8019c6e:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019c72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019c76:	e7ec      	b.n	8019c52 <adc_channel_16_to_18+0x26>
 8019c78:	40012000 	andmi	r2, r1, r0

08019c7c <adc_channel_length_config>:
 8019c7c:	2901      	cmp	r1, #1
 8019c7e:	d002      	beq.n	8019c86 <adc_channel_length_config+0xa>
 8019c80:	2902      	cmp	r1, #2
 8019c82:	d00c      	beq.n	8019c9e <adc_channel_length_config+0x22>
 8019c84:	4770      	bx	lr
 8019c86:	3a01      	subs	r2, #1
 8019c88:	2a0f      	cmp	r2, #15
 8019c8a:	d813      	bhi.n	8019cb4 <adc_channel_length_config+0x38>
 8019c8c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019c8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8019c92:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8019c94:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019c96:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019c9a:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8019c9c:	4770      	bx	lr
 8019c9e:	3a01      	subs	r2, #1
 8019ca0:	2a03      	cmp	r2, #3
 8019ca2:	d807      	bhi.n	8019cb4 <adc_channel_length_config+0x38>
 8019ca4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019ca6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8019caa:	6383      	str	r3, [r0, #56]	@ 0x38
 8019cac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019cae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019cb2:	6383      	str	r3, [r0, #56]	@ 0x38
 8019cb4:	4770      	bx	lr

08019cb6 <adc_inserted_channel_config>:
 8019cb6:	2903      	cmp	r1, #3
 8019cb8:	b530      	push	{r4, r5, lr}
 8019cba:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8019cbc:	d80f      	bhi.n	8019cde <adc_inserted_channel_config+0x28>
 8019cbe:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8019cc2:	1a61      	subs	r1, r4, r1
 8019cc4:	f06f 0404 	mvn.w	r4, #4
 8019cc8:	4361      	muls	r1, r4
 8019cca:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8019ccc:	310f      	adds	r1, #15
 8019cce:	241f      	movs	r4, #31
 8019cd0:	408c      	lsls	r4, r1
 8019cd2:	ea25 0404 	bic.w	r4, r5, r4
 8019cd6:	fa02 f101 	lsl.w	r1, r2, r1
 8019cda:	4321      	orrs	r1, r4
 8019cdc:	6381      	str	r1, [r0, #56]	@ 0x38
 8019cde:	2a09      	cmp	r2, #9
 8019ce0:	d80b      	bhi.n	8019cfa <adc_inserted_channel_config+0x44>
 8019ce2:	6901      	ldr	r1, [r0, #16]
 8019ce4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019ce8:	2407      	movs	r4, #7
 8019cea:	4094      	lsls	r4, r2
 8019cec:	ea21 0104 	bic.w	r1, r1, r4
 8019cf0:	fa03 f202 	lsl.w	r2, r3, r2
 8019cf4:	430a      	orrs	r2, r1
 8019cf6:	6102      	str	r2, [r0, #16]
 8019cf8:	bd30      	pop	{r4, r5, pc}
 8019cfa:	2a12      	cmp	r2, #18
 8019cfc:	d8fc      	bhi.n	8019cf8 <adc_inserted_channel_config+0x42>
 8019cfe:	3a0a      	subs	r2, #10
 8019d00:	68c1      	ldr	r1, [r0, #12]
 8019d02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019d06:	2407      	movs	r4, #7
 8019d08:	4094      	lsls	r4, r2
 8019d0a:	ea21 0104 	bic.w	r1, r1, r4
 8019d0e:	4093      	lsls	r3, r2
 8019d10:	430b      	orrs	r3, r1
 8019d12:	60c3      	str	r3, [r0, #12]
 8019d14:	e7f0      	b.n	8019cf8 <adc_inserted_channel_config+0x42>

08019d16 <adc_external_trigger_config>:
 8019d16:	2901      	cmp	r1, #1
 8019d18:	d002      	beq.n	8019d20 <adc_external_trigger_config+0xa>
 8019d1a:	2902      	cmp	r1, #2
 8019d1c:	d009      	beq.n	8019d32 <adc_external_trigger_config+0x1c>
 8019d1e:	4770      	bx	lr
 8019d20:	6883      	ldr	r3, [r0, #8]
 8019d22:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8019d26:	6083      	str	r3, [r0, #8]
 8019d28:	6883      	ldr	r3, [r0, #8]
 8019d2a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8019d2e:	6083      	str	r3, [r0, #8]
 8019d30:	4770      	bx	lr
 8019d32:	6883      	ldr	r3, [r0, #8]
 8019d34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8019d38:	6083      	str	r3, [r0, #8]
 8019d3a:	6883      	ldr	r3, [r0, #8]
 8019d3c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019d40:	e7f5      	b.n	8019d2e <adc_external_trigger_config+0x18>

08019d42 <adc_software_trigger_enable>:
 8019d42:	2901      	cmp	r1, #1
 8019d44:	d002      	beq.n	8019d4c <adc_software_trigger_enable+0xa>
 8019d46:	2902      	cmp	r1, #2
 8019d48:	d005      	beq.n	8019d56 <adc_software_trigger_enable+0x14>
 8019d4a:	4770      	bx	lr
 8019d4c:	6883      	ldr	r3, [r0, #8]
 8019d4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019d52:	6083      	str	r3, [r0, #8]
 8019d54:	4770      	bx	lr
 8019d56:	6883      	ldr	r3, [r0, #8]
 8019d58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8019d5c:	e7f9      	b.n	8019d52 <adc_software_trigger_enable+0x10>
	...

08019d60 <i2c_clock_config>:
 8019d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d62:	4605      	mov	r5, r0
 8019d64:	2002      	movs	r0, #2
 8019d66:	460c      	mov	r4, r1
 8019d68:	4617      	mov	r7, r2
 8019d6a:	f7fe fe8d 	bl	8018a88 <rcu_clock_freq_get>
 8019d6e:	4a29      	ldr	r2, [pc, #164]	@ (8019e14 <i2c_clock_config+0xb4>)
 8019d70:	686e      	ldr	r6, [r5, #4]
 8019d72:	4603      	mov	r3, r0
 8019d74:	4828      	ldr	r0, [pc, #160]	@ (8019e18 <i2c_clock_config+0xb8>)
 8019d76:	fbb3 f0f0 	udiv	r0, r3, r0
 8019d7a:	4293      	cmp	r3, r2
 8019d7c:	bf34      	ite	cc
 8019d7e:	4601      	movcc	r1, r0
 8019d80:	213c      	movcs	r1, #60	@ 0x3c
 8019d82:	4a26      	ldr	r2, [pc, #152]	@ (8019e1c <i2c_clock_config+0xbc>)
 8019d84:	f026 063f 	bic.w	r6, r6, #63	@ 0x3f
 8019d88:	430e      	orrs	r6, r1
 8019d8a:	4294      	cmp	r4, r2
 8019d8c:	606e      	str	r6, [r5, #4]
 8019d8e:	d816      	bhi.n	8019dbe <i2c_clock_config+0x5e>
 8019d90:	3001      	adds	r0, #1
 8019d92:	283b      	cmp	r0, #59	@ 0x3b
 8019d94:	d90d      	bls.n	8019db2 <i2c_clock_config+0x52>
 8019d96:	223c      	movs	r2, #60	@ 0x3c
 8019d98:	622a      	str	r2, [r5, #32]
 8019d9a:	0064      	lsls	r4, r4, #1
 8019d9c:	fbb3 f4f4 	udiv	r4, r3, r4
 8019da0:	2c04      	cmp	r4, #4
 8019da2:	69ea      	ldr	r2, [r5, #28]
 8019da4:	bf38      	it	cc
 8019da6:	2404      	movcc	r4, #4
 8019da8:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8019dac:	4314      	orrs	r4, r2
 8019dae:	61ec      	str	r4, [r5, #28]
 8019db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019db2:	2802      	cmp	r0, #2
 8019db4:	d801      	bhi.n	8019dba <i2c_clock_config+0x5a>
 8019db6:	2202      	movs	r2, #2
 8019db8:	e7ee      	b.n	8019d98 <i2c_clock_config+0x38>
 8019dba:	6228      	str	r0, [r5, #32]
 8019dbc:	e7ed      	b.n	8019d9a <i2c_clock_config+0x3a>
 8019dbe:	4a18      	ldr	r2, [pc, #96]	@ (8019e20 <i2c_clock_config+0xc0>)
 8019dc0:	4294      	cmp	r4, r2
 8019dc2:	d8f5      	bhi.n	8019db0 <i2c_clock_config+0x50>
 8019dc4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8019dc8:	4351      	muls	r1, r2
 8019dca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019dce:	fbb1 f1f2 	udiv	r1, r1, r2
 8019dd2:	3101      	adds	r1, #1
 8019dd4:	6229      	str	r1, [r5, #32]
 8019dd6:	b9a7      	cbnz	r7, 8019e02 <i2c_clock_config+0xa2>
 8019dd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019ddc:	fbb3 f4f4 	udiv	r4, r3, r4
 8019de0:	69eb      	ldr	r3, [r5, #28]
 8019de2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8019de6:	61eb      	str	r3, [r5, #28]
 8019de8:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8019dec:	b90b      	cbnz	r3, 8019df2 <i2c_clock_config+0x92>
 8019dee:	f044 0401 	orr.w	r4, r4, #1
 8019df2:	69eb      	ldr	r3, [r5, #28]
 8019df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8019df8:	61eb      	str	r3, [r5, #28]
 8019dfa:	69eb      	ldr	r3, [r5, #28]
 8019dfc:	4323      	orrs	r3, r4
 8019dfe:	61eb      	str	r3, [r5, #28]
 8019e00:	e7d6      	b.n	8019db0 <i2c_clock_config+0x50>
 8019e02:	2219      	movs	r2, #25
 8019e04:	4354      	muls	r4, r2
 8019e06:	fbb3 f4f4 	udiv	r4, r3, r4
 8019e0a:	69eb      	ldr	r3, [r5, #28]
 8019e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8019e10:	e7e9      	b.n	8019de6 <i2c_clock_config+0x86>
 8019e12:	bf00      	nop
 8019e14:	03938700 	orrseq	r8, r3, #0, 14
 8019e18:	000f4240 	andeq	r4, pc, r0, asr #4
 8019e1c:	000186a0 	andeq	r8, r1, r0, lsr #13
 8019e20:	00061a80 	andeq	r1, r6, r0, lsl #21

08019e24 <i2c_ack_config>:
 8019e24:	6803      	ldr	r3, [r0, #0]
 8019e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8019e2a:	430b      	orrs	r3, r1
 8019e2c:	6003      	str	r3, [r0, #0]
 8019e2e:	4770      	bx	lr

08019e30 <i2c_ackpos_config>:
 8019e30:	6803      	ldr	r3, [r0, #0]
 8019e32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8019e36:	430b      	orrs	r3, r1
 8019e38:	6003      	str	r3, [r0, #0]
 8019e3a:	4770      	bx	lr

08019e3c <i2c_master_addressing>:
 8019e3c:	3202      	adds	r2, #2
 8019e3e:	bf0c      	ite	eq
 8019e40:	f021 0101 	biceq.w	r1, r1, #1
 8019e44:	f041 0101 	orrne.w	r1, r1, #1
 8019e48:	6101      	str	r1, [r0, #16]
 8019e4a:	4770      	bx	lr

08019e4c <i2c_enable>:
 8019e4c:	6803      	ldr	r3, [r0, #0]
 8019e4e:	f043 0301 	orr.w	r3, r3, #1
 8019e52:	6003      	str	r3, [r0, #0]
 8019e54:	4770      	bx	lr

08019e56 <i2c_start_on_bus>:
 8019e56:	6803      	ldr	r3, [r0, #0]
 8019e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019e5c:	6003      	str	r3, [r0, #0]
 8019e5e:	4770      	bx	lr

08019e60 <i2c_stop_on_bus>:
 8019e60:	6803      	ldr	r3, [r0, #0]
 8019e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019e66:	6003      	str	r3, [r0, #0]
 8019e68:	4770      	bx	lr

08019e6a <i2c_data_transmit>:
 8019e6a:	6101      	str	r1, [r0, #16]
 8019e6c:	4770      	bx	lr

08019e6e <i2c_data_receive>:
 8019e6e:	6900      	ldr	r0, [r0, #16]
 8019e70:	b2c0      	uxtb	r0, r0
 8019e72:	4770      	bx	lr

08019e74 <i2c_flag_get>:
 8019e74:	098b      	lsrs	r3, r1, #6
 8019e76:	f001 011f 	and.w	r1, r1, #31
 8019e7a:	5818      	ldr	r0, [r3, r0]
 8019e7c:	40c8      	lsrs	r0, r1
 8019e7e:	f000 0001 	and.w	r0, r0, #1
 8019e82:	4770      	bx	lr

08019e84 <i2c_flag_clear>:
 8019e84:	f240 5301 	movw	r3, #1281	@ 0x501
 8019e88:	4299      	cmp	r1, r3
 8019e8a:	b510      	push	{r4, lr}
 8019e8c:	d102      	bne.n	8019e94 <i2c_flag_clear+0x10>
 8019e8e:	6943      	ldr	r3, [r0, #20]
 8019e90:	6983      	ldr	r3, [r0, #24]
 8019e92:	bd10      	pop	{r4, pc}
 8019e94:	098c      	lsrs	r4, r1, #6
 8019e96:	2201      	movs	r2, #1
 8019e98:	5823      	ldr	r3, [r4, r0]
 8019e9a:	f001 011f 	and.w	r1, r1, #31
 8019e9e:	408a      	lsls	r2, r1
 8019ea0:	ea23 0302 	bic.w	r3, r3, r2
 8019ea4:	5023      	str	r3, [r4, r0]
 8019ea6:	e7f4      	b.n	8019e92 <i2c_flag_clear+0xe>

08019ea8 <__libc_init_array>:
 8019ea8:	b570      	push	{r4, r5, r6, lr}
 8019eaa:	4d0c      	ldr	r5, [pc, #48]	@ (8019edc <__libc_init_array+0x34>)
 8019eac:	4c0c      	ldr	r4, [pc, #48]	@ (8019ee0 <__libc_init_array+0x38>)
 8019eae:	1b64      	subs	r4, r4, r5
 8019eb0:	10a4      	asrs	r4, r4, #2
 8019eb2:	2600      	movs	r6, #0
 8019eb4:	42a6      	cmp	r6, r4
 8019eb6:	d107      	bne.n	8019ec8 <__libc_init_array+0x20>
 8019eb8:	4d0a      	ldr	r5, [pc, #40]	@ (8019ee4 <__libc_init_array+0x3c>)
 8019eba:	4c0b      	ldr	r4, [pc, #44]	@ (8019ee8 <__libc_init_array+0x40>)
 8019ebc:	1b64      	subs	r4, r4, r5
 8019ebe:	10a4      	asrs	r4, r4, #2
 8019ec0:	2600      	movs	r6, #0
 8019ec2:	42a6      	cmp	r6, r4
 8019ec4:	d105      	bne.n	8019ed2 <__libc_init_array+0x2a>
 8019ec6:	bd70      	pop	{r4, r5, r6, pc}
 8019ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ecc:	4798      	blx	r3
 8019ece:	3601      	adds	r6, #1
 8019ed0:	e7f0      	b.n	8019eb4 <__libc_init_array+0xc>
 8019ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ed6:	4798      	blx	r3
 8019ed8:	3601      	adds	r6, #1
 8019eda:	e7f2      	b.n	8019ec2 <__libc_init_array+0x1a>
 8019edc:	0801f7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, ip, sp, lr, pc}
 8019ee0:	0801f7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, ip, sp, lr, pc}
 8019ee4:	0801f7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, ip, sp, lr, pc}
 8019ee8:	0801f7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, ip, sp, lr, pc}

08019eec <memcpy>:
 8019eec:	b510      	push	{r4, lr}
 8019eee:	1e43      	subs	r3, r0, #1
 8019ef0:	440a      	add	r2, r1
 8019ef2:	4291      	cmp	r1, r2
 8019ef4:	d100      	bne.n	8019ef8 <memcpy+0xc>
 8019ef6:	bd10      	pop	{r4, pc}
 8019ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019f00:	e7f7      	b.n	8019ef2 <memcpy+0x6>

08019f02 <memmove>:
 8019f02:	4288      	cmp	r0, r1
 8019f04:	b510      	push	{r4, lr}
 8019f06:	eb01 0302 	add.w	r3, r1, r2
 8019f0a:	d208      	bcs.n	8019f1e <memmove+0x1c>
 8019f0c:	1e42      	subs	r2, r0, #1
 8019f0e:	4299      	cmp	r1, r3
 8019f10:	d100      	bne.n	8019f14 <memmove+0x12>
 8019f12:	bd10      	pop	{r4, pc}
 8019f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f18:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019f1c:	e7f7      	b.n	8019f0e <memmove+0xc>
 8019f1e:	4402      	add	r2, r0
 8019f20:	4601      	mov	r1, r0
 8019f22:	428a      	cmp	r2, r1
 8019f24:	d0f5      	beq.n	8019f12 <memmove+0x10>
 8019f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019f2e:	e7f8      	b.n	8019f22 <memmove+0x20>

08019f30 <memset>:
 8019f30:	b570      	push	{r4, r5, r6, lr}
 8019f32:	b1ca      	cbz	r2, 8019f68 <memset+0x38>
 8019f34:	b2c9      	uxtb	r1, r1
 8019f36:	4603      	mov	r3, r0
 8019f38:	075c      	lsls	r4, r3, #29
 8019f3a:	d111      	bne.n	8019f60 <memset+0x30>
 8019f3c:	f04f 3501 	mov.w	r5, #16843009	@ 0x1010101
 8019f40:	fba1 5605 	umull	r5, r6, r1, r5
 8019f44:	f022 0407 	bic.w	r4, r2, #7
 8019f48:	442e      	add	r6, r5
 8019f4a:	441c      	add	r4, r3
 8019f4c:	42a3      	cmp	r3, r4
 8019f4e:	d10c      	bne.n	8019f6a <memset+0x3a>
 8019f50:	f002 0207 	and.w	r2, r2, #7
 8019f54:	4422      	add	r2, r4
 8019f56:	4294      	cmp	r4, r2
 8019f58:	d006      	beq.n	8019f68 <memset+0x38>
 8019f5a:	f804 1b01 	strb.w	r1, [r4], #1
 8019f5e:	e7fa      	b.n	8019f56 <memset+0x26>
 8019f60:	3a01      	subs	r2, #1
 8019f62:	f803 1b01 	strb.w	r1, [r3], #1
 8019f66:	d1e7      	bne.n	8019f38 <memset+0x8>
 8019f68:	bd70      	pop	{r4, r5, r6, pc}
 8019f6a:	f843 5b08 	str.w	r5, [r3], #8
 8019f6e:	f843 6c04 	str.w	r6, [r3, #-4]
 8019f72:	e7eb      	b.n	8019f4c <memset+0x1c>

08019f74 <_itostr>:
 8019f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f76:	0fc7      	lsrs	r7, r0, #31
 8019f78:	b091      	sub	sp, #68	@ 0x44
 8019f7a:	f10d 043f 	add.w	r4, sp, #63	@ 0x3f
 8019f7e:	d01b      	beq.n	8019fb8 <_itostr+0x44>
 8019f80:	4240      	negs	r0, r0
 8019f82:	4623      	mov	r3, r4
 8019f84:	250a      	movs	r5, #10
 8019f86:	46ec      	mov	ip, sp
 8019f88:	fb90 f6f5 	sdiv	r6, r0, r5
 8019f8c:	fb05 0016 	mls	r0, r5, r6, r0
 8019f90:	3030      	adds	r0, #48	@ 0x30
 8019f92:	f803 0901 	strb.w	r0, [r3], #-1
 8019f96:	4630      	mov	r0, r6
 8019f98:	b10e      	cbz	r6, 8019f9e <_itostr+0x2a>
 8019f9a:	4563      	cmp	r3, ip
 8019f9c:	d1f4      	bne.n	8019f88 <_itostr+0x14>
 8019f9e:	b132      	cbz	r2, 8019fae <_itostr+0x3a>
 8019fa0:	4668      	mov	r0, sp
 8019fa2:	2530      	movs	r5, #48	@ 0x30
 8019fa4:	1ae6      	subs	r6, r4, r3
 8019fa6:	4296      	cmp	r6, r2
 8019fa8:	da01      	bge.n	8019fae <_itostr+0x3a>
 8019faa:	4283      	cmp	r3, r0
 8019fac:	d816      	bhi.n	8019fdc <_itostr+0x68>
 8019fae:	b167      	cbz	r7, 8019fca <_itostr+0x56>
 8019fb0:	222d      	movs	r2, #45	@ 0x2d
 8019fb2:	f803 2901 	strb.w	r2, [r3], #-1
 8019fb6:	e008      	b.n	8019fca <_itostr+0x56>
 8019fb8:	2800      	cmp	r0, #0
 8019fba:	d1e2      	bne.n	8019f82 <_itostr+0xe>
 8019fbc:	2330      	movs	r3, #48	@ 0x30
 8019fbe:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 8019fc2:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 8019fc6:	2a00      	cmp	r2, #0
 8019fc8:	d1ea      	bne.n	8019fa0 <_itostr+0x2c>
 8019fca:	3301      	adds	r3, #1
 8019fcc:	1ae0      	subs	r0, r4, r3
 8019fce:	3901      	subs	r1, #1
 8019fd0:	aa10      	add	r2, sp, #64	@ 0x40
 8019fd2:	4293      	cmp	r3, r2
 8019fd4:	d305      	bcc.n	8019fe2 <_itostr+0x6e>
 8019fd6:	3001      	adds	r0, #1
 8019fd8:	b011      	add	sp, #68	@ 0x44
 8019fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fdc:	f803 5901 	strb.w	r5, [r3], #-1
 8019fe0:	e7e0      	b.n	8019fa4 <_itostr+0x30>
 8019fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019fe6:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019fea:	e7f1      	b.n	8019fd0 <_itostr+0x5c>

08019fec <_xputch>:
 8019fec:	4603      	mov	r3, r0
 8019fee:	b410      	push	{r4}
 8019ff0:	4c09      	ldr	r4, [pc, #36]	@ (801a018 <_xputch+0x2c>)
 8019ff2:	68da      	ldr	r2, [r3, #12]
 8019ff4:	4608      	mov	r0, r1
 8019ff6:	6821      	ldr	r1, [r4, #0]
 8019ff8:	3201      	adds	r2, #1
 8019ffa:	60da      	str	r2, [r3, #12]
 8019ffc:	b141      	cbz	r1, 801a010 <_xputch+0x24>
 8019ffe:	691b      	ldr	r3, [r3, #16]
 801a000:	429a      	cmp	r2, r3
 801a002:	da02      	bge.n	801a00a <_xputch+0x1e>
 801a004:	1c4b      	adds	r3, r1, #1
 801a006:	6023      	str	r3, [r4, #0]
 801a008:	7008      	strb	r0, [r1, #0]
 801a00a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a00e:	4770      	bx	lr
 801a010:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a014:	f7fd bf74 	b.w	8017f00 <console_putc>
 801a018:	2001bcc8 	andcs	fp, r1, r8, asr #25

0801a01c <_format_int>:
 801a01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a01e:	b091      	sub	sp, #68	@ 0x44
 801a020:	4606      	mov	r6, r0
 801a022:	f10d 043f 	add.w	r4, sp, #63	@ 0x3f
 801a026:	bb91      	cbnz	r1, 801a08e <_format_int+0x72>
 801a028:	2330      	movs	r3, #48	@ 0x30
 801a02a:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801a02e:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801a032:	6832      	ldr	r2, [r6, #0]
 801a034:	07d5      	lsls	r5, r2, #31
 801a036:	d507      	bpl.n	801a048 <_format_int+0x2c>
 801a038:	6870      	ldr	r0, [r6, #4]
 801a03a:	4669      	mov	r1, sp
 801a03c:	2530      	movs	r5, #48	@ 0x30
 801a03e:	1ae7      	subs	r7, r4, r3
 801a040:	4287      	cmp	r7, r0
 801a042:	da01      	bge.n	801a048 <_format_int+0x2c>
 801a044:	428b      	cmp	r3, r1
 801a046:	d833      	bhi.n	801a0b0 <_format_int+0x94>
 801a048:	0690      	lsls	r0, r2, #26
 801a04a:	d507      	bpl.n	801a05c <_format_int+0x40>
 801a04c:	68b0      	ldr	r0, [r6, #8]
 801a04e:	4669      	mov	r1, sp
 801a050:	2530      	movs	r5, #48	@ 0x30
 801a052:	1ae7      	subs	r7, r4, r3
 801a054:	4287      	cmp	r7, r0
 801a056:	da01      	bge.n	801a05c <_format_int+0x40>
 801a058:	428b      	cmp	r3, r1
 801a05a:	d82c      	bhi.n	801a0b6 <_format_int+0x9a>
 801a05c:	0711      	lsls	r1, r2, #28
 801a05e:	bf44      	itt	mi
 801a060:	212d      	movmi	r1, #45	@ 0x2d
 801a062:	f803 1901 	strbmi.w	r1, [r3], #-1
 801a066:	0652      	lsls	r2, r2, #25
 801a068:	d407      	bmi.n	801a07a <_format_int+0x5e>
 801a06a:	68b1      	ldr	r1, [r6, #8]
 801a06c:	466a      	mov	r2, sp
 801a06e:	2020      	movs	r0, #32
 801a070:	1ae5      	subs	r5, r4, r3
 801a072:	428d      	cmp	r5, r1
 801a074:	da01      	bge.n	801a07a <_format_int+0x5e>
 801a076:	4293      	cmp	r3, r2
 801a078:	d820      	bhi.n	801a0bc <_format_int+0xa0>
 801a07a:	1ae5      	subs	r5, r4, r3
 801a07c:	1c5c      	adds	r4, r3, #1
 801a07e:	ab10      	add	r3, sp, #64	@ 0x40
 801a080:	429c      	cmp	r4, r3
 801a082:	d31e      	bcc.n	801a0c2 <_format_int+0xa6>
 801a084:	68b3      	ldr	r3, [r6, #8]
 801a086:	42ab      	cmp	r3, r5
 801a088:	dc21      	bgt.n	801a0ce <_format_int+0xb2>
 801a08a:	b011      	add	sp, #68	@ 0x44
 801a08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a08e:	4623      	mov	r3, r4
 801a090:	200a      	movs	r0, #10
 801a092:	466f      	mov	r7, sp
 801a094:	fbb1 f5f0 	udiv	r5, r1, r0
 801a098:	fb00 1215 	mls	r2, r0, r5, r1
 801a09c:	3230      	adds	r2, #48	@ 0x30
 801a09e:	f803 2901 	strb.w	r2, [r3], #-1
 801a0a2:	460a      	mov	r2, r1
 801a0a4:	2a09      	cmp	r2, #9
 801a0a6:	4629      	mov	r1, r5
 801a0a8:	d9c3      	bls.n	801a032 <_format_int+0x16>
 801a0aa:	42bb      	cmp	r3, r7
 801a0ac:	d1f2      	bne.n	801a094 <_format_int+0x78>
 801a0ae:	e7c0      	b.n	801a032 <_format_int+0x16>
 801a0b0:	f803 5901 	strb.w	r5, [r3], #-1
 801a0b4:	e7c3      	b.n	801a03e <_format_int+0x22>
 801a0b6:	f803 5901 	strb.w	r5, [r3], #-1
 801a0ba:	e7ca      	b.n	801a052 <_format_int+0x36>
 801a0bc:	f803 0901 	strb.w	r0, [r3], #-1
 801a0c0:	e7d6      	b.n	801a070 <_format_int+0x54>
 801a0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0c6:	4630      	mov	r0, r6
 801a0c8:	f7ff ff90 	bl	8019fec <_xputch>
 801a0cc:	e7d7      	b.n	801a07e <_format_int+0x62>
 801a0ce:	2120      	movs	r1, #32
 801a0d0:	4630      	mov	r0, r6
 801a0d2:	f7ff ff8b 	bl	8019fec <_xputch>
 801a0d6:	3501      	adds	r5, #1
 801a0d8:	e7d4      	b.n	801a084 <_format_int+0x68>

0801a0da <_format_hex>:
 801a0da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0dc:	b091      	sub	sp, #68	@ 0x44
 801a0de:	6804      	ldr	r4, [r0, #0]
 801a0e0:	4606      	mov	r6, r0
 801a0e2:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 801a0e6:	bb61      	cbnz	r1, 801a142 <_format_hex+0x68>
 801a0e8:	2330      	movs	r3, #48	@ 0x30
 801a0ea:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801a0ee:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801a0f2:	07e5      	lsls	r5, r4, #31
 801a0f4:	d507      	bpl.n	801a106 <_format_hex+0x2c>
 801a0f6:	6870      	ldr	r0, [r6, #4]
 801a0f8:	4669      	mov	r1, sp
 801a0fa:	2530      	movs	r5, #48	@ 0x30
 801a0fc:	1ad7      	subs	r7, r2, r3
 801a0fe:	4287      	cmp	r7, r0
 801a100:	da01      	bge.n	801a106 <_format_hex+0x2c>
 801a102:	428b      	cmp	r3, r1
 801a104:	d831      	bhi.n	801a16a <_format_hex+0x90>
 801a106:	06a0      	lsls	r0, r4, #26
 801a108:	d507      	bpl.n	801a11a <_format_hex+0x40>
 801a10a:	68b0      	ldr	r0, [r6, #8]
 801a10c:	4669      	mov	r1, sp
 801a10e:	2530      	movs	r5, #48	@ 0x30
 801a110:	1ad7      	subs	r7, r2, r3
 801a112:	4287      	cmp	r7, r0
 801a114:	da01      	bge.n	801a11a <_format_hex+0x40>
 801a116:	428b      	cmp	r3, r1
 801a118:	d82a      	bhi.n	801a170 <_format_hex+0x96>
 801a11a:	0661      	lsls	r1, r4, #25
 801a11c:	d407      	bmi.n	801a12e <_format_hex+0x54>
 801a11e:	68b0      	ldr	r0, [r6, #8]
 801a120:	4669      	mov	r1, sp
 801a122:	2420      	movs	r4, #32
 801a124:	1ad5      	subs	r5, r2, r3
 801a126:	4285      	cmp	r5, r0
 801a128:	da01      	bge.n	801a12e <_format_hex+0x54>
 801a12a:	428b      	cmp	r3, r1
 801a12c:	d823      	bhi.n	801a176 <_format_hex+0x9c>
 801a12e:	1ad5      	subs	r5, r2, r3
 801a130:	1c5c      	adds	r4, r3, #1
 801a132:	ab10      	add	r3, sp, #64	@ 0x40
 801a134:	429c      	cmp	r4, r3
 801a136:	d321      	bcc.n	801a17c <_format_hex+0xa2>
 801a138:	68b3      	ldr	r3, [r6, #8]
 801a13a:	42ab      	cmp	r3, r5
 801a13c:	dc24      	bgt.n	801a188 <_format_hex+0xae>
 801a13e:	b011      	add	sp, #68	@ 0x44
 801a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a142:	f014 0f02 	tst.w	r4, #2
 801a146:	bf0c      	ite	eq
 801a148:	2757      	moveq	r7, #87	@ 0x57
 801a14a:	2737      	movne	r7, #55	@ 0x37
 801a14c:	4613      	mov	r3, r2
 801a14e:	466d      	mov	r5, sp
 801a150:	f001 000f 	and.w	r0, r1, #15
 801a154:	2809      	cmp	r0, #9
 801a156:	bf94      	ite	ls
 801a158:	3030      	addls	r0, #48	@ 0x30
 801a15a:	19c0      	addhi	r0, r0, r7
 801a15c:	0909      	lsrs	r1, r1, #4
 801a15e:	f803 0901 	strb.w	r0, [r3], #-1
 801a162:	d0c6      	beq.n	801a0f2 <_format_hex+0x18>
 801a164:	42ab      	cmp	r3, r5
 801a166:	d1f3      	bne.n	801a150 <_format_hex+0x76>
 801a168:	e7c3      	b.n	801a0f2 <_format_hex+0x18>
 801a16a:	f803 5901 	strb.w	r5, [r3], #-1
 801a16e:	e7c5      	b.n	801a0fc <_format_hex+0x22>
 801a170:	f803 5901 	strb.w	r5, [r3], #-1
 801a174:	e7cc      	b.n	801a110 <_format_hex+0x36>
 801a176:	f803 4901 	strb.w	r4, [r3], #-1
 801a17a:	e7d3      	b.n	801a124 <_format_hex+0x4a>
 801a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a180:	4630      	mov	r0, r6
 801a182:	f7ff ff33 	bl	8019fec <_xputch>
 801a186:	e7d4      	b.n	801a132 <_format_hex+0x58>
 801a188:	2120      	movs	r1, #32
 801a18a:	4630      	mov	r0, r6
 801a18c:	f7ff ff2e 	bl	8019fec <_xputch>
 801a190:	3501      	adds	r5, #1
 801a192:	e7d1      	b.n	801a138 <_format_hex+0x5e>

0801a194 <_vprintf>:
 801a194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a198:	2700      	movs	r7, #0
 801a19a:	b096      	sub	sp, #88	@ 0x58
 801a19c:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801a1a0:	460b      	mov	r3, r1
 801a1a2:	4614      	mov	r4, r2
 801a1a4:	f04f 080a 	mov.w	r8, #10
 801a1a8:	7819      	ldrb	r1, [r3, #0]
 801a1aa:	b919      	cbnz	r1, 801a1b4 <_vprintf+0x20>
 801a1ac:	9804      	ldr	r0, [sp, #16]
 801a1ae:	b016      	add	sp, #88	@ 0x58
 801a1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1b4:	2925      	cmp	r1, #37	@ 0x25
 801a1b6:	f103 0501 	add.w	r5, r3, #1
 801a1ba:	d004      	beq.n	801a1c6 <_vprintf+0x32>
 801a1bc:	a801      	add	r0, sp, #4
 801a1be:	f7ff ff15 	bl	8019fec <_xputch>
 801a1c2:	462b      	mov	r3, r5
 801a1c4:	e7f0      	b.n	801a1a8 <_vprintf+0x14>
 801a1c6:	785a      	ldrb	r2, [r3, #1]
 801a1c8:	9703      	str	r7, [sp, #12]
 801a1ca:	2a30      	cmp	r2, #48	@ 0x30
 801a1cc:	e9cd 7701 	strd	r7, r7, [sp, #4]
 801a1d0:	d127      	bne.n	801a222 <_vprintf+0x8e>
 801a1d2:	2220      	movs	r2, #32
 801a1d4:	9201      	str	r2, [sp, #4]
 801a1d6:	1c9d      	adds	r5, r3, #2
 801a1d8:	2200      	movs	r2, #0
 801a1da:	462e      	mov	r6, r5
 801a1dc:	4613      	mov	r3, r2
 801a1de:	7831      	ldrb	r1, [r6, #0]
 801a1e0:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 801a1e4:	2809      	cmp	r0, #9
 801a1e6:	4635      	mov	r5, r6
 801a1e8:	f106 0601 	add.w	r6, r6, #1
 801a1ec:	d91d      	bls.n	801a22a <_vprintf+0x96>
 801a1ee:	b12a      	cbz	r2, 801a1fc <_vprintf+0x68>
 801a1f0:	9303      	str	r3, [sp, #12]
 801a1f2:	b11b      	cbz	r3, 801a1fc <_vprintf+0x68>
 801a1f4:	9b01      	ldr	r3, [sp, #4]
 801a1f6:	f043 0310 	orr.w	r3, r3, #16
 801a1fa:	9301      	str	r3, [sp, #4]
 801a1fc:	292e      	cmp	r1, #46	@ 0x2e
 801a1fe:	d123      	bne.n	801a248 <_vprintf+0xb4>
 801a200:	786b      	ldrb	r3, [r5, #1]
 801a202:	2b2a      	cmp	r3, #42	@ 0x2a
 801a204:	d015      	beq.n	801a232 <_vprintf+0x9e>
 801a206:	2100      	movs	r1, #0
 801a208:	1c68      	adds	r0, r5, #1
 801a20a:	460a      	mov	r2, r1
 801a20c:	260a      	movs	r6, #10
 801a20e:	7803      	ldrb	r3, [r0, #0]
 801a210:	3b30      	subs	r3, #48	@ 0x30
 801a212:	2b09      	cmp	r3, #9
 801a214:	4605      	mov	r5, r0
 801a216:	f100 0001 	add.w	r0, r0, #1
 801a21a:	d959      	bls.n	801a2d0 <_vprintf+0x13c>
 801a21c:	b181      	cbz	r1, 801a240 <_vprintf+0xac>
 801a21e:	9202      	str	r2, [sp, #8]
 801a220:	e00e      	b.n	801a240 <_vprintf+0xac>
 801a222:	2a2d      	cmp	r2, #45	@ 0x2d
 801a224:	d1d8      	bne.n	801a1d8 <_vprintf+0x44>
 801a226:	2240      	movs	r2, #64	@ 0x40
 801a228:	e7d4      	b.n	801a1d4 <_vprintf+0x40>
 801a22a:	fb08 0303 	mla	r3, r8, r3, r0
 801a22e:	2201      	movs	r2, #1
 801a230:	e7d5      	b.n	801a1de <_vprintf+0x4a>
 801a232:	f854 3b04 	ldr.w	r3, [r4], #4
 801a236:	2b00      	cmp	r3, #0
 801a238:	bfb8      	it	lt
 801a23a:	425b      	neglt	r3, r3
 801a23c:	3502      	adds	r5, #2
 801a23e:	9302      	str	r3, [sp, #8]
 801a240:	9b01      	ldr	r3, [sp, #4]
 801a242:	f043 0301 	orr.w	r3, r3, #1
 801a246:	9301      	str	r3, [sp, #4]
 801a248:	782b      	ldrb	r3, [r5, #0]
 801a24a:	2b6c      	cmp	r3, #108	@ 0x6c
 801a24c:	bf04      	itt	eq
 801a24e:	3501      	addeq	r5, #1
 801a250:	9b01      	ldreq	r3, [sp, #4]
 801a252:	7829      	ldrb	r1, [r5, #0]
 801a254:	bf04      	itt	eq
 801a256:	f043 0304 	orreq.w	r3, r3, #4
 801a25a:	9301      	streq	r3, [sp, #4]
 801a25c:	2958      	cmp	r1, #88	@ 0x58
 801a25e:	f000 8143 	beq.w	801a4e8 <_vprintf+0x354>
 801a262:	f1a1 0363 	sub.w	r3, r1, #99	@ 0x63
 801a266:	b2da      	uxtb	r2, r3
 801a268:	2a15      	cmp	r2, #21
 801a26a:	d8a7      	bhi.n	801a1bc <_vprintf+0x28>
 801a26c:	2b15      	cmp	r3, #21
 801a26e:	d8a5      	bhi.n	801a1bc <_vprintf+0x28>
 801a270:	a201      	add	r2, pc, #4	@ (adr r2, 801a278 <_vprintf+0xe4>)
 801a272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a276:	bf00      	nop
 801a278:	0801a2d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sp, pc}
 801a27c:	0801a2e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, sp, pc}
 801a280:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a284:	0801a301 	stmdaeq	r1, {r0, r8, r9, sp, pc}
 801a288:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a28c:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a290:	0801a2e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, sp, pc}
 801a294:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a298:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a29c:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2a0:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2a4:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2a8:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2ac:	0801a449 	stmdaeq	r1, {r0, r3, r6, sl, sp, pc}
 801a2b0:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2b4:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2b8:	0801a46f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, sl, sp, pc}
 801a2bc:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2c0:	0801a4e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, sl, sp, pc}
 801a2c4:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2c8:	0801a1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sp, pc}
 801a2cc:	0801a4f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, sl, sp, pc}
 801a2d0:	fb06 3202 	mla	r2, r6, r2, r3
 801a2d4:	2101      	movs	r1, #1
 801a2d6:	e79a      	b.n	801a20e <_vprintf+0x7a>
 801a2d8:	f854 1b04 	ldr.w	r1, [r4], #4
 801a2dc:	a801      	add	r0, sp, #4
 801a2de:	f7ff fe85 	bl	8019fec <_xputch>
 801a2e2:	3501      	adds	r5, #1
 801a2e4:	e76d      	b.n	801a1c2 <_vprintf+0x2e>
 801a2e6:	f854 1b04 	ldr.w	r1, [r4], #4
 801a2ea:	9b01      	ldr	r3, [sp, #4]
 801a2ec:	2900      	cmp	r1, #0
 801a2ee:	da03      	bge.n	801a2f8 <_vprintf+0x164>
 801a2f0:	f043 0308 	orr.w	r3, r3, #8
 801a2f4:	9301      	str	r3, [sp, #4]
 801a2f6:	4249      	negs	r1, r1
 801a2f8:	a801      	add	r0, sp, #4
 801a2fa:	f7ff fe8f 	bl	801a01c <_format_int>
 801a2fe:	e7f0      	b.n	801a2e2 <_vprintf+0x14e>
 801a300:	3407      	adds	r4, #7
 801a302:	f024 0407 	bic.w	r4, r4, #7
 801a306:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a30a:	f7ee ffef 	bl	80092ec <__aeabi_d2f>
 801a30e:	9b01      	ldr	r3, [sp, #4]
 801a310:	ee07 0a90 	vmov	s15, r0
 801a314:	07de      	lsls	r6, r3, #31
 801a316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a31a:	bf4c      	ite	mi
 801a31c:	9e02      	ldrmi	r6, [sp, #8]
 801a31e:	2606      	movpl	r6, #6
 801a320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a324:	bf48      	it	mi
 801a326:	eef1 7a67 	vnegmi.f32	s15, s15
 801a32a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a32e:	bf4a      	itet	mi
 801a330:	f10d 0a19 	addmi.w	sl, sp, #25
 801a334:	f10d 0a18 	addpl.w	sl, sp, #24
 801a338:	232d      	movmi	r3, #45	@ 0x2d
 801a33a:	ee17 0a10 	vmov	r0, s14
 801a33e:	f04f 0200 	mov.w	r2, #0
 801a342:	4651      	mov	r1, sl
 801a344:	bf48      	it	mi
 801a346:	f88d 3018 	strbmi.w	r3, [sp, #24]
 801a34a:	f7ff fe13 	bl	8019f74 <_itostr>
 801a34e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a352:	232e      	movs	r3, #46	@ 0x2e
 801a354:	f80a 3000 	strb.w	r3, [sl, r0]
 801a358:	eb0a 0900 	add.w	r9, sl, r0
 801a35c:	230a      	movs	r3, #10
 801a35e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a362:	1c72      	adds	r2, r6, #1
 801a364:	f109 0901 	add.w	r9, r9, #1
 801a368:	4619      	mov	r1, r3
 801a36a:	2e00      	cmp	r6, #0
 801a36c:	dc41      	bgt.n	801a3f2 <_vprintf+0x25e>
 801a36e:	ee07 3a10 	vmov	s14, r3
 801a372:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a376:	4649      	mov	r1, r9
 801a378:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a37c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a380:	ee17 0a90 	vmov	r0, s15
 801a384:	f7ff fdf6 	bl	8019f74 <_itostr>
 801a388:	4448      	add	r0, r9
 801a38a:	f10d 0918 	add.w	r9, sp, #24
 801a38e:	eba0 0009 	sub.w	r0, r0, r9
 801a392:	1e46      	subs	r6, r0, #1
 801a394:	eb09 0206 	add.w	r2, r9, r6
 801a398:	f819 3006 	ldrb.w	r3, [r9, r6]
 801a39c:	2b34      	cmp	r3, #52	@ 0x34
 801a39e:	d911      	bls.n	801a3c4 <_vprintf+0x230>
 801a3a0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801a3a4:	292e      	cmp	r1, #46	@ 0x2e
 801a3a6:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
 801a3aa:	d028      	beq.n	801a3fe <_vprintf+0x26a>
 801a3ac:	469c      	mov	ip, r3
 801a3ae:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 801a3b2:	4663      	mov	r3, ip
 801a3b4:	f81c 1901 	ldrb.w	r1, [ip], #-1
 801a3b8:	2939      	cmp	r1, #57	@ 0x39
 801a3ba:	d01d      	beq.n	801a3f8 <_vprintf+0x264>
 801a3bc:	292e      	cmp	r1, #46	@ 0x2e
 801a3be:	d01e      	beq.n	801a3fe <_vprintf+0x26a>
 801a3c0:	3101      	adds	r1, #1
 801a3c2:	7019      	strb	r1, [r3, #0]
 801a3c4:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801a3c8:	446b      	add	r3, sp
 801a3ca:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 801a3ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801a3d0:	bf08      	it	eq
 801a3d2:	f106 36ff 	addeq.w	r6, r6, #4294967295	@ 0xffffffff
 801a3d6:	46b2      	mov	sl, r6
 801a3d8:	9b03      	ldr	r3, [sp, #12]
 801a3da:	4553      	cmp	r3, sl
 801a3dc:	dc2d      	bgt.n	801a43a <_vprintf+0x2a6>
 801a3de:	2e00      	cmp	r6, #0
 801a3e0:	f77f af7f 	ble.w	801a2e2 <_vprintf+0x14e>
 801a3e4:	f819 1b01 	ldrb.w	r1, [r9], #1
 801a3e8:	a801      	add	r0, sp, #4
 801a3ea:	f7ff fdff 	bl	8019fec <_xputch>
 801a3ee:	3e01      	subs	r6, #1
 801a3f0:	e7f5      	b.n	801a3de <_vprintf+0x24a>
 801a3f2:	434b      	muls	r3, r1
 801a3f4:	3e01      	subs	r6, #1
 801a3f6:	e7b8      	b.n	801a36a <_vprintf+0x1d6>
 801a3f8:	f88c e001 	strb.w	lr, [ip, #1]
 801a3fc:	e7d9      	b.n	801a3b2 <_vprintf+0x21e>
 801a3fe:	3b01      	subs	r3, #1
 801a400:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801a404:	7819      	ldrb	r1, [r3, #0]
 801a406:	2939      	cmp	r1, #57	@ 0x39
 801a408:	d10d      	bne.n	801a426 <_vprintf+0x292>
 801a40a:	454b      	cmp	r3, r9
 801a40c:	d208      	bcs.n	801a420 <_vprintf+0x28c>
 801a40e:	1c51      	adds	r1, r2, #1
 801a410:	1c9e      	adds	r6, r3, #2
 801a412:	3202      	adds	r2, #2
 801a414:	4296      	cmp	r6, r2
 801a416:	d10b      	bne.n	801a430 <_vprintf+0x29c>
 801a418:	2231      	movs	r2, #49	@ 0x31
 801a41a:	705a      	strb	r2, [r3, #1]
 801a41c:	4606      	mov	r6, r0
 801a41e:	e7d1      	b.n	801a3c4 <_vprintf+0x230>
 801a420:	f803 c901 	strb.w	ip, [r3], #-1
 801a424:	e7ee      	b.n	801a404 <_vprintf+0x270>
 801a426:	454b      	cmp	r3, r9
 801a428:	d3f1      	bcc.n	801a40e <_vprintf+0x27a>
 801a42a:	292d      	cmp	r1, #45	@ 0x2d
 801a42c:	d1c8      	bne.n	801a3c0 <_vprintf+0x22c>
 801a42e:	e7ee      	b.n	801a40e <_vprintf+0x27a>
 801a430:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 801a434:	f802 cd01 	strb.w	ip, [r2, #-1]!
 801a438:	e7ec      	b.n	801a414 <_vprintf+0x280>
 801a43a:	2120      	movs	r1, #32
 801a43c:	a801      	add	r0, sp, #4
 801a43e:	f7ff fdd5 	bl	8019fec <_xputch>
 801a442:	f10a 0a01 	add.w	sl, sl, #1
 801a446:	e7c7      	b.n	801a3d8 <_vprintf+0x244>
 801a448:	2308      	movs	r3, #8
 801a44a:	f854 6b04 	ldr.w	r6, [r4], #4
 801a44e:	9303      	str	r3, [sp, #12]
 801a450:	2130      	movs	r1, #48	@ 0x30
 801a452:	2320      	movs	r3, #32
 801a454:	a801      	add	r0, sp, #4
 801a456:	9301      	str	r3, [sp, #4]
 801a458:	f7ff fdc8 	bl	8019fec <_xputch>
 801a45c:	2178      	movs	r1, #120	@ 0x78
 801a45e:	a801      	add	r0, sp, #4
 801a460:	f7ff fdc4 	bl	8019fec <_xputch>
 801a464:	4631      	mov	r1, r6
 801a466:	a801      	add	r0, sp, #4
 801a468:	f7ff fe37 	bl	801a0da <_format_hex>
 801a46c:	e739      	b.n	801a2e2 <_vprintf+0x14e>
 801a46e:	f854 9b04 	ldr.w	r9, [r4], #4
 801a472:	2600      	movs	r6, #0
 801a474:	f819 3006 	ldrb.w	r3, [r9, r6]
 801a478:	b993      	cbnz	r3, 801a4a0 <_vprintf+0x30c>
 801a47a:	9b01      	ldr	r3, [sp, #4]
 801a47c:	07d9      	lsls	r1, r3, #31
 801a47e:	d503      	bpl.n	801a488 <_vprintf+0x2f4>
 801a480:	9b02      	ldr	r3, [sp, #8]
 801a482:	429e      	cmp	r6, r3
 801a484:	bfa8      	it	ge
 801a486:	461e      	movge	r6, r3
 801a488:	9b01      	ldr	r3, [sp, #4]
 801a48a:	065a      	lsls	r2, r3, #25
 801a48c:	f106 0a01 	add.w	sl, r6, #1
 801a490:	d403      	bmi.n	801a49a <_vprintf+0x306>
 801a492:	9b03      	ldr	r3, [sp, #12]
 801a494:	429e      	cmp	r6, r3
 801a496:	db05      	blt.n	801a4a4 <_vprintf+0x310>
 801a498:	4656      	mov	r6, sl
 801a49a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801a49e:	e00d      	b.n	801a4bc <_vprintf+0x328>
 801a4a0:	3601      	adds	r6, #1
 801a4a2:	e7e7      	b.n	801a474 <_vprintf+0x2e0>
 801a4a4:	2120      	movs	r1, #32
 801a4a6:	a801      	add	r0, sp, #4
 801a4a8:	f7ff fda0 	bl	8019fec <_xputch>
 801a4ac:	4656      	mov	r6, sl
 801a4ae:	e7eb      	b.n	801a488 <_vprintf+0x2f4>
 801a4b0:	a801      	add	r0, sp, #4
 801a4b2:	f7ff fd9b 	bl	8019fec <_xputch>
 801a4b6:	9b02      	ldr	r3, [sp, #8]
 801a4b8:	3b01      	subs	r3, #1
 801a4ba:	9302      	str	r3, [sp, #8]
 801a4bc:	9b01      	ldr	r3, [sp, #4]
 801a4be:	07db      	lsls	r3, r3, #31
 801a4c0:	d501      	bpl.n	801a4c6 <_vprintf+0x332>
 801a4c2:	9b02      	ldr	r3, [sp, #8]
 801a4c4:	b11b      	cbz	r3, 801a4ce <_vprintf+0x33a>
 801a4c6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 801a4ca:	2900      	cmp	r1, #0
 801a4cc:	d1f0      	bne.n	801a4b0 <_vprintf+0x31c>
 801a4ce:	9b03      	ldr	r3, [sp, #12]
 801a4d0:	42b3      	cmp	r3, r6
 801a4d2:	f77f af06 	ble.w	801a2e2 <_vprintf+0x14e>
 801a4d6:	2120      	movs	r1, #32
 801a4d8:	a801      	add	r0, sp, #4
 801a4da:	f7ff fd87 	bl	8019fec <_xputch>
 801a4de:	3601      	adds	r6, #1
 801a4e0:	e7f5      	b.n	801a4ce <_vprintf+0x33a>
 801a4e2:	f854 1b04 	ldr.w	r1, [r4], #4
 801a4e6:	e707      	b.n	801a2f8 <_vprintf+0x164>
 801a4e8:	9b01      	ldr	r3, [sp, #4]
 801a4ea:	f043 0302 	orr.w	r3, r3, #2
 801a4ee:	9301      	str	r3, [sp, #4]
 801a4f0:	f854 1b04 	ldr.w	r1, [r4], #4
 801a4f4:	e7b7      	b.n	801a466 <_vprintf+0x2d2>
 801a4f6:	bf00      	nop

0801a4f8 <printf>:
 801a4f8:	b40f      	push	{r0, r1, r2, r3}
 801a4fa:	b507      	push	{r0, r1, r2, lr}
 801a4fc:	aa04      	add	r2, sp, #16
 801a4fe:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a502:	f852 1b04 	ldr.w	r1, [r2], #4
 801a506:	9201      	str	r2, [sp, #4]
 801a508:	f7ff fe44 	bl	801a194 <_vprintf>
 801a50c:	b003      	add	sp, #12
 801a50e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a512:	b004      	add	sp, #16
 801a514:	4770      	bx	lr
	...

0801a518 <sprintf>:
 801a518:	b40e      	push	{r1, r2, r3}
 801a51a:	b517      	push	{r0, r1, r2, r4, lr}
 801a51c:	4c09      	ldr	r4, [pc, #36]	@ (801a544 <sprintf+0x2c>)
 801a51e:	aa05      	add	r2, sp, #20
 801a520:	6020      	str	r0, [r4, #0]
 801a522:	f852 1b04 	ldr.w	r1, [r2], #4
 801a526:	9201      	str	r2, [sp, #4]
 801a528:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a52c:	f7ff fe32 	bl	801a194 <_vprintf>
 801a530:	6822      	ldr	r2, [r4, #0]
 801a532:	2300      	movs	r3, #0
 801a534:	7013      	strb	r3, [r2, #0]
 801a536:	6023      	str	r3, [r4, #0]
 801a538:	b003      	add	sp, #12
 801a53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a53e:	b003      	add	sp, #12
 801a540:	4770      	bx	lr
 801a542:	bf00      	nop
 801a544:	2001bcc8 	andcs	fp, r1, r8, asr #25

0801a548 <snprintf>:
 801a548:	b40c      	push	{r2, r3}
 801a54a:	b513      	push	{r0, r1, r4, lr}
 801a54c:	4c09      	ldr	r4, [pc, #36]	@ (801a574 <snprintf+0x2c>)
 801a54e:	aa04      	add	r2, sp, #16
 801a550:	460b      	mov	r3, r1
 801a552:	6020      	str	r0, [r4, #0]
 801a554:	f852 1b04 	ldr.w	r1, [r2], #4
 801a558:	9201      	str	r2, [sp, #4]
 801a55a:	4618      	mov	r0, r3
 801a55c:	f7ff fe1a 	bl	801a194 <_vprintf>
 801a560:	6822      	ldr	r2, [r4, #0]
 801a562:	2300      	movs	r3, #0
 801a564:	7013      	strb	r3, [r2, #0]
 801a566:	6023      	str	r3, [r4, #0]
 801a568:	b002      	add	sp, #8
 801a56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a56e:	b002      	add	sp, #8
 801a570:	4770      	bx	lr
 801a572:	bf00      	nop
 801a574:	2001bcc8 	andcs	fp, r1, r8, asr #25

0801a578 <vsnprintf>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	4c06      	ldr	r4, [pc, #24]	@ (801a594 <vsnprintf+0x1c>)
 801a57c:	4605      	mov	r5, r0
 801a57e:	4608      	mov	r0, r1
 801a580:	4611      	mov	r1, r2
 801a582:	461a      	mov	r2, r3
 801a584:	6025      	str	r5, [r4, #0]
 801a586:	f7ff fe05 	bl	801a194 <_vprintf>
 801a58a:	6822      	ldr	r2, [r4, #0]
 801a58c:	2300      	movs	r3, #0
 801a58e:	7013      	strb	r3, [r2, #0]
 801a590:	6023      	str	r3, [r4, #0]
 801a592:	bd38      	pop	{r3, r4, r5, pc}
 801a594:	2001bcc8 	andcs	fp, r1, r8, asr #25

0801a598 <putchar>:
 801a598:	b508      	push	{r3, lr}
 801a59a:	f7fd fcb1 	bl	8017f00 <console_putc>
 801a59e:	2001      	movs	r0, #1
 801a5a0:	bd08      	pop	{r3, pc}

0801a5a2 <puts>:
 801a5a2:	b508      	push	{r3, lr}
 801a5a4:	f7fd fcae 	bl	8017f04 <console_puts>
 801a5a8:	200a      	movs	r0, #10
 801a5aa:	f7fd fca9 	bl	8017f00 <console_putc>
 801a5ae:	2001      	movs	r0, #1
 801a5b0:	bd08      	pop	{r3, pc}
	...

0801a5b4 <random>:
 801a5b4:	4a06      	ldr	r2, [pc, #24]	@ (801a5d0 <random+0x1c>)
 801a5b6:	6813      	ldr	r3, [r2, #0]
 801a5b8:	10d8      	asrs	r0, r3, #3
 801a5ba:	ea80 00a3 	eor.w	r0, r0, r3, asr #2
 801a5be:	4058      	eors	r0, r3
 801a5c0:	ea80 1063 	eor.w	r0, r0, r3, asr #5
 801a5c4:	03c0      	lsls	r0, r0, #15
 801a5c6:	b280      	uxth	r0, r0
 801a5c8:	ea40 0063 	orr.w	r0, r0, r3, asr #1
 801a5cc:	6010      	str	r0, [r2, #0]
 801a5ce:	4770      	bx	lr
 801a5d0:	20000008 	andcs	r0, r0, r8

0801a5d4 <strtok>:
 801a5d4:	b570      	push	{r4, r5, r6, lr}
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	b910      	cbnz	r0, 801a5e0 <strtok+0xc>
 801a5da:	4b12      	ldr	r3, [pc, #72]	@ (801a624 <strtok+0x50>)
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	b14b      	cbz	r3, 801a5f4 <strtok+0x20>
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5e6:	460d      	mov	r5, r1
 801a5e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5ec:	b924      	cbnz	r4, 801a5f8 <strtok+0x24>
 801a5ee:	b94a      	cbnz	r2, 801a604 <strtok+0x30>
 801a5f0:	4b0c      	ldr	r3, [pc, #48]	@ (801a624 <strtok+0x50>)
 801a5f2:	601a      	str	r2, [r3, #0]
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	bd70      	pop	{r4, r5, r6, pc}
 801a5f8:	42a2      	cmp	r2, r4
 801a5fa:	d1f5      	bne.n	801a5e8 <strtok+0x14>
 801a5fc:	e7f0      	b.n	801a5e0 <strtok+0xc>
 801a5fe:	4613      	mov	r3, r2
 801a600:	e00c      	b.n	801a61c <strtok+0x48>
 801a602:	b91c      	cbnz	r4, 801a60c <strtok+0x38>
 801a604:	461e      	mov	r6, r3
 801a606:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a60a:	460d      	mov	r5, r1
 801a60c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a610:	42a2      	cmp	r2, r4
 801a612:	d1f6      	bne.n	801a602 <strtok+0x2e>
 801a614:	2a00      	cmp	r2, #0
 801a616:	d0f2      	beq.n	801a5fe <strtok+0x2a>
 801a618:	2200      	movs	r2, #0
 801a61a:	7032      	strb	r2, [r6, #0]
 801a61c:	4a01      	ldr	r2, [pc, #4]	@ (801a624 <strtok+0x50>)
 801a61e:	6013      	str	r3, [r2, #0]
 801a620:	e7e9      	b.n	801a5f6 <strtok+0x22>
 801a622:	bf00      	nop
 801a624:	2001bccc 	andcs	fp, r1, ip, asr #25

0801a628 <uuid_unparse_x>:
 801a628:	b530      	push	{r4, r5, lr}
 801a62a:	4603      	mov	r3, r0
 801a62c:	4608      	mov	r0, r1
 801a62e:	4611      	mov	r1, r2
 801a630:	681a      	ldr	r2, [r3, #0]
 801a632:	891c      	ldrh	r4, [r3, #8]
 801a634:	b08f      	sub	sp, #60	@ 0x3c
 801a636:	ba12      	rev	r2, r2
 801a638:	920a      	str	r2, [sp, #40]	@ 0x28
 801a63a:	889a      	ldrh	r2, [r3, #4]
 801a63c:	ba52      	rev16	r2, r2
 801a63e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801a642:	88da      	ldrh	r2, [r3, #6]
 801a644:	ba64      	rev16	r4, r4
 801a646:	ba52      	rev16	r2, r2
 801a648:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801a64c:	f8ad 4030 	strh.w	r4, [sp, #48]	@ 0x30
 801a650:	f103 020a 	add.w	r2, r3, #10
 801a654:	f10d 0431 	add.w	r4, sp, #49	@ 0x31
 801a658:	3310      	adds	r3, #16
 801a65a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a65e:	f804 5f01 	strb.w	r5, [r4, #1]!
 801a662:	4293      	cmp	r3, r2
 801a664:	d1f9      	bne.n	801a65a <uuid_unparse_x+0x32>
 801a666:	f89d 2037 	ldrb.w	r2, [sp, #55]	@ 0x37
 801a66a:	9208      	str	r2, [sp, #32]
 801a66c:	f89d 2036 	ldrb.w	r2, [sp, #54]	@ 0x36
 801a670:	9207      	str	r2, [sp, #28]
 801a672:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 801a676:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801a67a:	9206      	str	r2, [sp, #24]
 801a67c:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
 801a680:	9205      	str	r2, [sp, #20]
 801a682:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 801a686:	9204      	str	r2, [sp, #16]
 801a688:	0a1b      	lsrs	r3, r3, #8
 801a68a:	f89d 2032 	ldrb.w	r2, [sp, #50]	@ 0x32
 801a68e:	9203      	str	r2, [sp, #12]
 801a690:	9301      	str	r3, [sp, #4]
 801a692:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 801a696:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801a69a:	9202      	str	r2, [sp, #8]
 801a69c:	9300      	str	r3, [sp, #0]
 801a69e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a6a0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801a6a4:	f7ff ff38 	bl	801a518 <sprintf>
 801a6a8:	b00f      	add	sp, #60	@ 0x3c
 801a6aa:	bd30      	pop	{r4, r5, pc}

0801a6ac <uuid_unparse>:
 801a6ac:	4a01      	ldr	r2, [pc, #4]	@ (801a6b4 <uuid_unparse+0x8>)
 801a6ae:	f7ff bfbb 	b.w	801a628 <uuid_unparse_x>
 801a6b2:	bf00      	nop
 801a6b4:	0801be5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, fp, ip, sp, pc}

0801a6b8 <__assert_func>:
 801a6b8:	b507      	push	{r0, r1, r2, lr}
 801a6ba:	460c      	mov	r4, r1
 801a6bc:	4619      	mov	r1, r3
 801a6be:	b142      	cbz	r2, 801a6d2 <__assert_func+0x1a>
 801a6c0:	4b05      	ldr	r3, [pc, #20]	@ (801a6d8 <__assert_func+0x20>)
 801a6c2:	e9cd 3200 	strd	r3, r2, [sp]
 801a6c6:	4602      	mov	r2, r0
 801a6c8:	4623      	mov	r3, r4
 801a6ca:	4804      	ldr	r0, [pc, #16]	@ (801a6dc <__assert_func+0x24>)
 801a6cc:	f7ff ff14 	bl	801a4f8 <printf>
 801a6d0:	e7fe      	b.n	801a6d0 <__assert_func+0x18>
 801a6d2:	4b03      	ldr	r3, [pc, #12]	@ (801a6e0 <__assert_func+0x28>)
 801a6d4:	461a      	mov	r2, r3
 801a6d6:	e7f4      	b.n	801a6c2 <__assert_func+0xa>
 801a6d8:	0801be8c 	stmdaeq	r1, {r2, r3, r7, r9, sl, fp, ip, sp, pc}
 801a6dc:	0801be99 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, fp, ip, sp, pc}
 801a6e0:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}

0801a6e4 <isleapyear(int)>:
 801a6e4:	2264      	movs	r2, #100	@ 0x64
 801a6e6:	fb90 f3f2 	sdiv	r3, r0, r2
 801a6ea:	fb02 0313 	mls	r3, r2, r3, r0
 801a6ee:	b94b      	cbnz	r3, 801a704 <isleapyear(int)+0x20>
 801a6f0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801a6f4:	fb90 f2f3 	sdiv	r2, r0, r3
 801a6f8:	fb03 0012 	mls	r0, r3, r2, r0
 801a6fc:	fab0 f080 	clz	r0, r0
 801a700:	0940      	lsrs	r0, r0, #5
 801a702:	4770      	bx	lr
 801a704:	f010 0f03 	tst.w	r0, #3
 801a708:	bf0c      	ite	eq
 801a70a:	2001      	moveq	r0, #1
 801a70c:	2000      	movne	r0, #0
 801a70e:	4770      	bx	lr

0801a710 <getdaysofmonth(int, int)>:
 801a710:	b510      	push	{r4, lr}
 801a712:	4604      	mov	r4, r0
 801a714:	2c01      	cmp	r4, #1
 801a716:	4608      	mov	r0, r1
 801a718:	d102      	bne.n	801a720 <getdaysofmonth(int, int)+0x10>
 801a71a:	f7ff ffe3 	bl	801a6e4 <isleapyear(int)>
 801a71e:	b918      	cbnz	r0, 801a728 <getdaysofmonth(int, int)+0x18>
 801a720:	4b02      	ldr	r3, [pc, #8]	@ (801a72c <getdaysofmonth(int, int)+0x1c>)
 801a722:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a726:	bd10      	pop	{r4, pc}
 801a728:	201d      	movs	r0, #29
 801a72a:	e7fc      	b.n	801a726 <getdaysofmonth(int, int)+0x16>
 801a72c:	0801f7a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, ip, sp, lr, pc}

0801a730 <gmtime>:
 801a730:	b570      	push	{r4, r5, r6, lr}
 801a732:	2800      	cmp	r0, #0
 801a734:	d03c      	beq.n	801a7b0 <gmtime+0x80>
 801a736:	6803      	ldr	r3, [r0, #0]
 801a738:	4d1e      	ldr	r5, [pc, #120]	@ (801a7b4 <gmtime+0x84>)
 801a73a:	213c      	movs	r1, #60	@ 0x3c
 801a73c:	fb93 f2f1 	sdiv	r2, r3, r1
 801a740:	fb01 3312 	mls	r3, r1, r2, r3
 801a744:	602b      	str	r3, [r5, #0]
 801a746:	fb92 f3f1 	sdiv	r3, r2, r1
 801a74a:	fb01 2213 	mls	r2, r1, r3, r2
 801a74e:	606a      	str	r2, [r5, #4]
 801a750:	2218      	movs	r2, #24
 801a752:	fb93 f4f2 	sdiv	r4, r3, r2
 801a756:	fb02 3314 	mls	r3, r2, r4, r3
 801a75a:	60ab      	str	r3, [r5, #8]
 801a75c:	1d22      	adds	r2, r4, #4
 801a75e:	2307      	movs	r3, #7
 801a760:	fb92 f3f3 	sdiv	r3, r2, r3
 801a764:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a768:	1ad2      	subs	r2, r2, r3
 801a76a:	61aa      	str	r2, [r5, #24]
 801a76c:	f240 71b2 	movw	r1, #1970	@ 0x7b2
 801a770:	f240 166d 	movw	r6, #365	@ 0x16d
 801a774:	4608      	mov	r0, r1
 801a776:	f7ff ffb5 	bl	801a6e4 <isleapyear(int)>
 801a77a:	2800      	cmp	r0, #0
 801a77c:	bf0c      	ite	eq
 801a77e:	4633      	moveq	r3, r6
 801a780:	f44f 73b7 	movne.w	r3, #366	@ 0x16e
 801a784:	429c      	cmp	r4, r3
 801a786:	db02      	blt.n	801a78e <gmtime+0x5e>
 801a788:	1ae4      	subs	r4, r4, r3
 801a78a:	3101      	adds	r1, #1
 801a78c:	e7f2      	b.n	801a774 <gmtime+0x44>
 801a78e:	f2a1 736c 	subw	r3, r1, #1900	@ 0x76c
 801a792:	616b      	str	r3, [r5, #20]
 801a794:	61ec      	str	r4, [r5, #28]
 801a796:	2600      	movs	r6, #0
 801a798:	4630      	mov	r0, r6
 801a79a:	f7ff ffb9 	bl	801a710 <getdaysofmonth(int, int)>
 801a79e:	4284      	cmp	r4, r0
 801a7a0:	db02      	blt.n	801a7a8 <gmtime+0x78>
 801a7a2:	1a24      	subs	r4, r4, r0
 801a7a4:	3601      	adds	r6, #1
 801a7a6:	e7f7      	b.n	801a798 <gmtime+0x68>
 801a7a8:	3401      	adds	r4, #1
 801a7aa:	4802      	ldr	r0, [pc, #8]	@ (801a7b4 <gmtime+0x84>)
 801a7ac:	612e      	str	r6, [r5, #16]
 801a7ae:	60ec      	str	r4, [r5, #12]
 801a7b0:	bd70      	pop	{r4, r5, r6, pc}
 801a7b2:	bf00      	nop
 801a7b4:	2001bcd0 	ldrdcs	fp, [r1], -r0

0801a7b8 <localtime>:
 801a7b8:	b507      	push	{r0, r1, r2, lr}
 801a7ba:	b140      	cbz	r0, 801a7ce <localtime+0x16>
 801a7bc:	4b05      	ldr	r3, [pc, #20]	@ (801a7d4 <localtime+0x1c>)
 801a7be:	6802      	ldr	r2, [r0, #0]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	a801      	add	r0, sp, #4
 801a7c6:	4413      	add	r3, r2
 801a7c8:	9301      	str	r3, [sp, #4]
 801a7ca:	f7ff ffb1 	bl	801a730 <gmtime>
 801a7ce:	b003      	add	sp, #12
 801a7d0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a7d4:	2001bcf4 	strdcs	fp, [r1], -r4

0801a7d8 <mktime>:
 801a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7dc:	4604      	mov	r4, r0
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d043      	beq.n	801a86a <mktime+0x92>
 801a7e2:	6941      	ldr	r1, [r0, #20]
 801a7e4:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 801a7e8:	2b45      	cmp	r3, #69	@ 0x45
 801a7ea:	d83e      	bhi.n	801a86a <mktime+0x92>
 801a7ec:	f240 75b2 	movw	r5, #1970	@ 0x7b2
 801a7f0:	2600      	movs	r6, #0
 801a7f2:	f201 776b 	addw	r7, r1, #1899	@ 0x76b
 801a7f6:	f240 186d 	movw	r8, #365	@ 0x16d
 801a7fa:	42af      	cmp	r7, r5
 801a7fc:	da24      	bge.n	801a848 <mktime+0x70>
 801a7fe:	6927      	ldr	r7, [r4, #16]
 801a800:	2f0b      	cmp	r7, #11
 801a802:	d832      	bhi.n	801a86a <mktime+0x92>
 801a804:	2500      	movs	r5, #0
 801a806:	42af      	cmp	r7, r5
 801a808:	d129      	bne.n	801a85e <mktime+0x86>
 801a80a:	68e5      	ldr	r5, [r4, #12]
 801a80c:	2d00      	cmp	r5, #0
 801a80e:	dd2c      	ble.n	801a86a <mktime+0x92>
 801a810:	4638      	mov	r0, r7
 801a812:	f7ff ff7d 	bl	801a710 <getdaysofmonth(int, int)>
 801a816:	4285      	cmp	r5, r0
 801a818:	dc27      	bgt.n	801a86a <mktime+0x92>
 801a81a:	3d01      	subs	r5, #1
 801a81c:	2318      	movs	r3, #24
 801a81e:	4435      	add	r5, r6
 801a820:	435d      	muls	r5, r3
 801a822:	68a3      	ldr	r3, [r4, #8]
 801a824:	2b17      	cmp	r3, #23
 801a826:	d820      	bhi.n	801a86a <mktime+0x92>
 801a828:	442b      	add	r3, r5
 801a82a:	213c      	movs	r1, #60	@ 0x3c
 801a82c:	fb01 f203 	mul.w	r2, r1, r3
 801a830:	6863      	ldr	r3, [r4, #4]
 801a832:	2b3b      	cmp	r3, #59	@ 0x3b
 801a834:	d819      	bhi.n	801a86a <mktime+0x92>
 801a836:	6820      	ldr	r0, [r4, #0]
 801a838:	4413      	add	r3, r2
 801a83a:	283b      	cmp	r0, #59	@ 0x3b
 801a83c:	fb01 f303 	mul.w	r3, r1, r3
 801a840:	d813      	bhi.n	801a86a <mktime+0x92>
 801a842:	4418      	add	r0, r3
 801a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a848:	4628      	mov	r0, r5
 801a84a:	f7ff ff4b 	bl	801a6e4 <isleapyear(int)>
 801a84e:	2800      	cmp	r0, #0
 801a850:	bf0c      	ite	eq
 801a852:	4643      	moveq	r3, r8
 801a854:	f44f 73b7 	movne.w	r3, #366	@ 0x16e
 801a858:	441e      	add	r6, r3
 801a85a:	3501      	adds	r5, #1
 801a85c:	e7cd      	b.n	801a7fa <mktime+0x22>
 801a85e:	4628      	mov	r0, r5
 801a860:	f7ff ff56 	bl	801a710 <getdaysofmonth(int, int)>
 801a864:	3501      	adds	r5, #1
 801a866:	4406      	add	r6, r0
 801a868:	e7cd      	b.n	801a806 <mktime+0x2e>
 801a86a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a86e:	e7e9      	b.n	801a844 <mktime+0x6c>

0801a870 <hal::uuid_init(unsigned char*)>:
 801a870:	4a0c      	ldr	r2, [pc, #48]	@ (801a8a4 <hal::uuid_init(unsigned char*)+0x34>)
 801a872:	b084      	sub	sp, #16
 801a874:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
 801a878:	9300      	str	r3, [sp, #0]
 801a87a:	f8d2 1a14 	ldr.w	r1, [r2, #2580]	@ 0xa14
 801a87e:	9101      	str	r1, [sp, #4]
 801a880:	f8d2 2a18 	ldr.w	r2, [r2, #2584]	@ 0xa18
 801a884:	9202      	str	r2, [sp, #8]
 801a886:	440b      	add	r3, r1
 801a888:	4413      	add	r3, r2
 801a88a:	9303      	str	r3, [sp, #12]
 801a88c:	f100 0210 	add.w	r2, r0, #16
 801a890:	466b      	mov	r3, sp
 801a892:	f813 1b01 	ldrb.w	r1, [r3], #1
 801a896:	f800 1b01 	strb.w	r1, [r0], #1
 801a89a:	4282      	cmp	r2, r0
 801a89c:	d1f9      	bne.n	801a892 <hal::uuid_init(unsigned char*)+0x22>
 801a89e:	b004      	add	sp, #16
 801a8a0:	4770      	bx	lr
 801a8a2:	bf00      	nop
 801a8a4:	1fff7000 	svcne	0x00ff7000

0801a8a8 <gettimeofday>:
 801a8a8:	4b13      	ldr	r3, [pc, #76]	@ (801a8f8 <gettimeofday+0x50>)
 801a8aa:	4a14      	ldr	r2, [pc, #80]	@ (801a8fc <gettimeofday+0x54>)
 801a8ac:	6819      	ldr	r1, [r3, #0]
 801a8ae:	6812      	ldr	r2, [r2, #0]
 801a8b0:	b510      	push	{r4, lr}
 801a8b2:	4c13      	ldr	r4, [pc, #76]	@ (801a900 <gettimeofday+0x58>)
 801a8b4:	601a      	str	r2, [r3, #0]
 801a8b6:	4b13      	ldr	r3, [pc, #76]	@ (801a904 <gettimeofday+0x5c>)
 801a8b8:	1a51      	subs	r1, r2, r1
 801a8ba:	fba3 2301 	umull	r2, r3, r3, r1
 801a8be:	6822      	ldr	r2, [r4, #0]
 801a8c0:	ea4f 1e93 	mov.w	lr, r3, lsr #6
 801a8c4:	eb02 1293 	add.w	r2, r2, r3, lsr #6
 801a8c8:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 801a8cc:	6863      	ldr	r3, [r4, #4]
 801a8ce:	6022      	str	r2, [r4, #0]
 801a8d0:	fb0c 111e 	mls	r1, ip, lr, r1
 801a8d4:	fb0c 3301 	mla	r3, ip, r1, r3
 801a8d8:	490b      	ldr	r1, [pc, #44]	@ (801a908 <gettimeofday+0x60>)
 801a8da:	6063      	str	r3, [r4, #4]
 801a8dc:	428b      	cmp	r3, r1
 801a8de:	bfc2      	ittt	gt
 801a8e0:	f5a3 2374 	subgt.w	r3, r3, #999424	@ 0xf4000
 801a8e4:	3201      	addgt	r2, #1
 801a8e6:	f5a3 7310 	subgt.w	r3, r3, #576	@ 0x240
 801a8ea:	e9c0 2300 	strd	r2, r3, [r0]
 801a8ee:	bfc8      	it	gt
 801a8f0:	e9c4 2300 	strdgt	r2, r3, [r4]
 801a8f4:	2000      	movs	r0, #0
 801a8f6:	bd10      	pop	{r4, pc}
 801a8f8:	2001bd00 	andcs	fp, r1, r0, lsl #26
 801a8fc:	2001bcc0 	andcs	fp, r1, r0, asr #25
 801a900:	2001bcf8 	strdcs	fp, [r1], -r8
 801a904:	10624dd3 	ldrdne	r4, [r2], #-211	@ 0xffffff2d	@ <UNPREDICTABLE>
 801a908:	000f423f 	andeq	r4, pc, pc, lsr r2	@ <UNPREDICTABLE>

0801a90c <settimeofday>:
 801a90c:	4a07      	ldr	r2, [pc, #28]	@ (801a92c <settimeofday+0x20>)
 801a90e:	4b08      	ldr	r3, [pc, #32]	@ (801a930 <settimeofday+0x24>)
 801a910:	4908      	ldr	r1, [pc, #32]	@ (801a934 <settimeofday+0x28>)
 801a912:	b410      	push	{r4}
 801a914:	6814      	ldr	r4, [r2, #0]
 801a916:	6844      	ldr	r4, [r0, #4]
 801a918:	6812      	ldr	r2, [r2, #0]
 801a91a:	6800      	ldr	r0, [r0, #0]
 801a91c:	605c      	str	r4, [r3, #4]
 801a91e:	6018      	str	r0, [r3, #0]
 801a920:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a924:	600a      	str	r2, [r1, #0]
 801a926:	2000      	movs	r0, #0
 801a928:	4770      	bx	lr
 801a92a:	bf00      	nop
 801a92c:	2001bcc0 	andcs	fp, r1, r0, asr #25
 801a930:	2001bcf8 	strdcs	fp, [r1], -r8
 801a934:	2001bd00 	andcs	fp, r1, r0, lsl #26

0801a938 <time>:
 801a938:	4b13      	ldr	r3, [pc, #76]	@ (801a988 <time+0x50>)
 801a93a:	4914      	ldr	r1, [pc, #80]	@ (801a98c <time+0x54>)
 801a93c:	681a      	ldr	r2, [r3, #0]
 801a93e:	b430      	push	{r4, r5}
 801a940:	680d      	ldr	r5, [r1, #0]
 801a942:	601d      	str	r5, [r3, #0]
 801a944:	4912      	ldr	r1, [pc, #72]	@ (801a990 <time+0x58>)
 801a946:	4b13      	ldr	r3, [pc, #76]	@ (801a994 <time+0x5c>)
 801a948:	1aaa      	subs	r2, r5, r2
 801a94a:	fba3 3c02 	umull	r3, ip, r3, r2
 801a94e:	680b      	ldr	r3, [r1, #0]
 801a950:	ea4f 159c 	mov.w	r5, ip, lsr #6
 801a954:	4604      	mov	r4, r0
 801a956:	eb03 109c 	add.w	r0, r3, ip, lsr #6
 801a95a:	684b      	ldr	r3, [r1, #4]
 801a95c:	6008      	str	r0, [r1, #0]
 801a95e:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 801a962:	fb0c 2215 	mls	r2, ip, r5, r2
 801a966:	fb0c 3302 	mla	r3, ip, r2, r3
 801a96a:	4a0b      	ldr	r2, [pc, #44]	@ (801a998 <time+0x60>)
 801a96c:	604b      	str	r3, [r1, #4]
 801a96e:	4293      	cmp	r3, r2
 801a970:	bfc1      	itttt	gt
 801a972:	f5a3 2374 	subgt.w	r3, r3, #999424	@ 0xf4000
 801a976:	3001      	addgt	r0, #1
 801a978:	f5a3 7310 	subgt.w	r3, r3, #576	@ 0x240
 801a97c:	e9c1 0300 	strdgt	r0, r3, [r1]
 801a980:	b104      	cbz	r4, 801a984 <time+0x4c>
 801a982:	6020      	str	r0, [r4, #0]
 801a984:	bc30      	pop	{r4, r5}
 801a986:	4770      	bx	lr
 801a988:	2001bd00 	andcs	fp, r1, r0, lsl #26
 801a98c:	2001bcc0 	andcs	fp, r1, r0, asr #25
 801a990:	2001bcf8 	strdcs	fp, [r1], -r8
 801a994:	10624dd3 	ldrdne	r4, [r2], #-211	@ 0xffffff2d	@ <UNPREDICTABLE>
 801a998:	000f423f 	andeq	r4, pc, pc, lsr r2	@ <UNPREDICTABLE>

0801a99c <operator delete[](void*)>:
 801a99c:	f000 b838 	b.w	801aa10 <free>

0801a9a0 <operator delete(void*, unsigned int)>:
 801a9a0:	f000 b836 	b.w	801aa10 <free>

0801a9a4 <operator new(unsigned int)>:
 801a9a4:	f000 b802 	b.w	801a9ac <malloc>

0801a9a8 <operator new[](unsigned int)>:
 801a9a8:	f000 b800 	b.w	801a9ac <malloc>

0801a9ac <malloc>:
 801a9ac:	b510      	push	{r4, lr}
 801a9ae:	b180      	cbz	r0, 801a9d2 <malloc+0x26>
 801a9b0:	4b12      	ldr	r3, [pc, #72]	@ (801a9fc <malloc+0x50>)
 801a9b2:	681a      	ldr	r2, [r3, #0]
 801a9b4:	b97a      	cbnz	r2, 801a9d6 <malloc+0x2a>
 801a9b6:	4602      	mov	r2, r0
 801a9b8:	4911      	ldr	r1, [pc, #68]	@ (801aa00 <malloc+0x54>)
 801a9ba:	4c12      	ldr	r4, [pc, #72]	@ (801aa04 <malloc+0x58>)
 801a9bc:	6808      	ldr	r0, [r1, #0]
 801a9be:	f102 031b 	add.w	r3, r2, #27
 801a9c2:	f023 030f 	bic.w	r3, r3, #15
 801a9c6:	4403      	add	r3, r0
 801a9c8:	42a3      	cmp	r3, r4
 801a9ca:	d911      	bls.n	801a9f0 <malloc+0x44>
 801a9cc:	480e      	ldr	r0, [pc, #56]	@ (801aa08 <malloc+0x5c>)
 801a9ce:	f7fd fa9b 	bl	8017f08 <console_error>
 801a9d2:	2000      	movs	r0, #0
 801a9d4:	bd10      	pop	{r4, pc}
 801a9d6:	4282      	cmp	r2, r0
 801a9d8:	d201      	bcs.n	801a9de <malloc+0x32>
 801a9da:	3308      	adds	r3, #8
 801a9dc:	e7e9      	b.n	801a9b2 <malloc+0x6>
 801a9de:	6858      	ldr	r0, [r3, #4]
 801a9e0:	2800      	cmp	r0, #0
 801a9e2:	d0e9      	beq.n	801a9b8 <malloc+0xc>
 801a9e4:	6882      	ldr	r2, [r0, #8]
 801a9e6:	605a      	str	r2, [r3, #4]
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	6083      	str	r3, [r0, #8]
 801a9ec:	300c      	adds	r0, #12
 801a9ee:	e7f1      	b.n	801a9d4 <malloc+0x28>
 801a9f0:	600b      	str	r3, [r1, #0]
 801a9f2:	4b06      	ldr	r3, [pc, #24]	@ (801aa0c <malloc+0x60>)
 801a9f4:	e9c0 3200 	strd	r3, r2, [r0]
 801a9f8:	e7f6      	b.n	801a9e8 <malloc+0x3c>
 801a9fa:	bf00      	nop
 801a9fc:	2000000c 	andcs	r0, r0, ip
 801aa00:	20000074 	andcs	r0, r0, r4, ror r0
 801aa04:	1000ec88 	andne	lr, r0, r8, lsl #25
 801aa08:	0801bec8 	stmdaeq	r1, {r3, r6, r7, r9, sl, fp, ip, sp, pc}
 801aa0c:	424c4d43 	submi	r4, ip, #4288	@ 0x10c0

0801aa10 <free>:
 801aa10:	b138      	cbz	r0, 801aa22 <free+0x12>
 801aa12:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 801aa16:	4b09      	ldr	r3, [pc, #36]	@ (801aa3c <free+0x2c>)
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d102      	bne.n	801aa22 <free+0x12>
 801aa1c:	4b08      	ldr	r3, [pc, #32]	@ (801aa40 <free+0x30>)
 801aa1e:	681a      	ldr	r2, [r3, #0]
 801aa20:	b902      	cbnz	r2, 801aa24 <free+0x14>
 801aa22:	4770      	bx	lr
 801aa24:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801aa28:	4291      	cmp	r1, r2
 801aa2a:	d105      	bne.n	801aa38 <free+0x28>
 801aa2c:	685a      	ldr	r2, [r3, #4]
 801aa2e:	f840 2c04 	str.w	r2, [r0, #-4]
 801aa32:	380c      	subs	r0, #12
 801aa34:	6058      	str	r0, [r3, #4]
 801aa36:	4770      	bx	lr
 801aa38:	3308      	adds	r3, #8
 801aa3a:	e7f0      	b.n	801aa1e <free+0xe>
 801aa3c:	424c4d43 	submi	r4, ip, #4288	@ 0x10c0
 801aa40:	2000000c 	andcs	r0, r0, ip

0801aa44 <__popcountsi2>:
 801aa44:	0843      	lsrs	r3, r0, #1
 801aa46:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801aa4a:	1ac0      	subs	r0, r0, r3
 801aa4c:	0883      	lsrs	r3, r0, #2
 801aa4e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801aa52:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 801aa56:	4418      	add	r0, r3
 801aa58:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 801aa5c:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 801aa60:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801aa64:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801aa68:	0e00      	lsrs	r0, r0, #24
 801aa6a:	4770      	bx	lr

Disassembly of section .rodata:

0801aa6c <CSWTCH.152-0x1470>:
 801aa6c:	00000000 	andeq	r0, r0, r0
 801aa70:	00000001 	andeq	r0, r0, r1
 801aa74:	00000002 	andeq	r0, r0, r2
 801aa78:	00000000 	andeq	r0, r0, r0
 801aa7c:	00000002 	andeq	r0, r0, r2
 801aa80:	00000001 	andeq	r0, r0, r1
 801aa84:	00000001 	andeq	r0, r0, r1
 801aa88:	00000000 	andeq	r0, r0, r0
 801aa8c:	00000002 	andeq	r0, r0, r2
 801aa90:	00000002 	andeq	r0, r0, r2
 801aa94:	00000000 	andeq	r0, r0, r0
 801aa98:	00000001 	andeq	r0, r0, r1
 801aa9c:	00000001 	andeq	r0, r0, r1
 801aaa0:	00000002 	andeq	r0, r0, r2
 801aaa4:	00000000 	andeq	r0, r0, r0
 801aaa8:	00000002 	andeq	r0, r0, r2
 801aaac:	00000001 	andeq	r0, r0, r1
	...
 801aabc:	04030201 	streq	r0, [r3], #-513	@ 0xfffffdff
 801aac0:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
 801aac4:	00000000 	andeq	r0, r0, r0
 801aac8:	04030201 	streq	r0, [r3], #-513	@ 0xfffffdff
 801aacc:	7261485b 	rsbvc	r4, r1, #5963776	@ 0x5b0000
 801aad0:	75614664 	strbvc	r4, [r1, #-1636]!	@ 0xfffff99c
 801aad4:	0a5d746c 	beq	9777c8c <__init_array_end+0x17584bc>
 801aad8:	53202d00 	noppl	{0}	@ <UNPREDICTABLE>
 801aadc:	6b636174 	blvs	98f30b4 <__init_array_end+0x18d38e4>
 801aae0:	61726620 	cmnvs	r2, r0, lsr #12
 801aae4:	0a3a656d 	beq	8eb40a0 <__init_array_end+0xe948d0>
 801aae8:	30522000 	subscc	r2, r2, r0
 801aaec:	203d2020 	eorscs	r2, sp, r0, lsr #32
 801aaf0:	000a7825 	andeq	r7, sl, r5, lsr #16
 801aaf4:	20315220 	eorscs	r5, r1, r0, lsr #4
 801aaf8:	25203d20 	strcs	r3, [r0, #-3360]!	@ 0xfffff2e0
 801aafc:	20000a78 	andcs	r0, r0, r8, ror sl
 801ab00:	20203252 	eorcs	r3, r0, r2, asr r2
 801ab04:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801ab08:	5220000a 	eorpl	r0, r0, #10
 801ab0c:	3d202033 	stccc	0, cr2, [r0, #-204]!	@ 0xffffff34
 801ab10:	0a782520 	beq	9e23f98 <__init_array_end+0x1e047c8>
 801ab14:	31522000 	cmpcc	r2, r0
 801ab18:	203d2032 	eorscs	r2, sp, r2, lsr r0
 801ab1c:	000a7825 	andeq	r7, sl, r5, lsr #16
 801ab20:	20524c20 	subscs	r4, r2, r0, lsr #24
 801ab24:	25203d20 	strcs	r3, [r0, #-3360]!	@ 0xfffff2e0
 801ab28:	20000a78 	andcs	r0, r0, r8, ror sl
 801ab2c:	20204350 	eorcs	r4, r0, r0, asr r3
 801ab30:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801ab34:	5020000a 	eorpl	r0, r0, sl
 801ab38:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ab3c:	0a782520 	beq	9e23fc4 <__init_array_end+0x1e047f4>
 801ab40:	46202d00 	strtmi	r2, [r0], -r0, lsl #26
 801ab44:	462f5253 			@ <UNDEFINED> instruction: 0x462f5253
 801ab48:	0a3a5241 	beq	8eaf454 <__init_array_end+0xe8fc84>
 801ab4c:	46432000 	strbmi	r2, [r3], -r0
 801ab50:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ab54:	0a782520 	beq	9e23fdc <__init_array_end+0x1e0480c>
 801ab58:	46482000 	strbmi	r2, [r8], -r0
 801ab5c:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ab60:	0a782520 	beq	9e23fe8 <__init_array_end+0x1e04818>
 801ab64:	46442000 	strbmi	r2, [r4], -r0
 801ab68:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ab6c:	0a782520 	beq	9e23ff4 <__init_array_end+0x1e04824>
 801ab70:	46412000 	strbmi	r2, [r1], -r0
 801ab74:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ab78:	0a782520 	beq	9e24000 <__init_array_end+0x1e04830>
 801ab7c:	4d4d2000 	stclmi	0, cr2, [sp, #-0]
 801ab80:	20524146 	subscs	r4, r2, r6, asr #2
 801ab84:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801ab88:	4220000a 	eormi	r0, r0, #10
 801ab8c:	20524146 	subscs	r4, r2, r6, asr #2
 801ab90:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801ab94:	202d000a 	eorcs	r0, sp, sl
 801ab98:	6373694d 	cmnvs	r3, #1261568	@ 0x134000
 801ab9c:	4c20000a 	stcmi	0, cr0, [r0], #-40	@ 0xffffffd8
 801aba0:	58452f52 	stmdapl	r5, {r1, r4, r6, r8, r9, sl, fp, sp}^
 801aba4:	45525f43 	ldrbmi	r5, [r2, #-3907]	@ 0xfffff0bd
 801aba8:	4e525554 	mrcmi	5, 2, r5, cr2, cr4, {2}
 801abac:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801abb0:	4d44000a 	stclmi	0, cr0, [r4, #-40]	@ 0xffffffd8
 801abb4:	65532058 	ldrbvs	r2, [r3, #-88]	@ 0xffffffa8
 801abb8:	2000646e 	andcs	r6, r0, lr, ror #8
 801abbc:	61657242 	cmnvs	r5, r2, asr #4
 801abc0:	6974206b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, sp}^
 801abc4:	2020656d 	eorcs	r6, r0, sp, ror #10
 801abc8:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801abcc:	20000a75 	andcs	r0, r0, r5, ror sl
 801abd0:	2042414d 	subcs	r4, r2, sp, asr #2
 801abd4:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801abd8:	20202020 	eorcs	r2, r0, r0, lsr #32
 801abdc:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801abe0:	20000a75 	andcs	r0, r0, r5, ror sl
 801abe4:	72666552 	rsbvc	r6, r6, #343932928	@ 0x14800000
 801abe8:	20687365 	rsbcs	r7, r8, r5, ror #6
 801abec:	65746172 	ldrbvs	r6, [r4, #-370]!	@ 0xfffffe8e
 801abf0:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801abf4:	20000a75 	andcs	r0, r0, r5, ror sl
 801abf8:	746f6c53 	strbtvc	r6, [pc], #-3155	@ 801ac00 <_etext+0x194>
 801abfc:	20202073 	eorcs	r2, r0, r3, ror r0
 801ac00:	20202020 	eorcs	r2, r0, r0, lsr #32
 801ac04:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801ac08:	6c000a75 			@ <UNDEFINED> instruction: 0x6c000a75
 801ac0c:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801ac10:	3a746573 	bcc	9d341e4 <__init_array_end+0x1d14a14>
 801ac14:	7461443a 	strbtvc	r4, [r1], #-1082	@ 0xfffffbc6
 801ac18:	473a3a61 	ldrmi	r3, [sl, -r1, ror #20]!
 801ac1c:	654c7465 	strbvs	r7, [ip, #-1125]	@ 0xfffffb9b
 801ac20:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801ac24:	6f506e28 	svcvs	0x00506e28
 801ac28:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
 801ac2c:	29786564 	ldmdbcs	r8!, {r2, r5, r6, r8, sl, sp, lr}^
 801ac30:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801ac34:	79530030 	ldmdbvc	r3, {r4, r5}^
 801ac38:	2e00636e 	cdpcs	3, 0, cr6, cr0, cr14, {3}
 801ac3c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801ac40:	6d642d62 	stclvs	13, cr2, [r4, #-392]!	@ 0xfffffe78
 801ac44:	6e692f78 	mcrvs	15, 3, r2, cr9, cr8, {3}
 801ac48:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801ac4c:	6d642f65 	stclvs	15, cr2, [r4, #-404]!	@ 0xfffffe6c
 801ac50:	6e657378 	mcrvs	3, 3, r7, cr5, cr8, {3}
 801ac54:	00682e64 	rsbeq	r2, r8, r4, ror #28
 801ac58:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801ac5c:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801ac60:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801ac64:	524f5020 	subpl	r5, pc, #32
 801ac68:	49005354 	stmdbmi	r0, {r2, r4, r6, r8, r9, ip, lr}
 801ac6c:	6b636142 	blvs	98f317c <__init_array_end+0x18d39ac>
 801ac70:	2e007075 	mcrcs	0, 0, r7, cr0, cr5, {3}
 801ac74:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801ac78:	696c2d62 	stmdbvs	ip!, {r1, r5, r6, r8, sl, fp, sp}^
 801ac7c:	73746867 	cmnvc	r4, #6750208	@ 0x670000
 801ac80:	692f7465 	stmdbvs	pc!, {r0, r2, r5, r6, sl, ip, sp, lr}	@ <UNPREDICTABLE>
 801ac84:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801ac88:	6c2f6564 	cfstr32vs	mvfx6, [pc], #-400	@ 801ab00 <_etext+0x94>
 801ac8c:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801ac90:	64746573 	ldrbtvs	r6, [r4], #-1395	@ 0xfffffa8d
 801ac94:	2e617461 	cdpcs	4, 6, cr7, cr1, cr1, {3}
 801ac98:	506e0068 	rsbpl	r0, lr, r8, rrx
 801ac9c:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801aca0:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801aca4:	43203c20 			@ <UNDEFINED> instruction: 0x43203c20
 801aca8:	5f524148 	svcpl	0x00524148
 801acac:	00544942 	subseq	r4, r4, r2, asr #18
 801acb0:	44746553 	ldrbtmi	r6, [r4], #-1363	@ 0xfffffaad
 801acb4:	00617461 	rsbeq	r7, r1, r1, ror #8
 801acb8:	74614470 	strbtvc	r4, [r1], #-1136	@ 0xfffffb90
 801acbc:	3d212061 	stccc	0, cr2, [r1, #-388]!	@ 0xfffffe7c
 801acc0:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801acc4:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801acc8:	654c6e00 	strbvs	r6, [ip, #-3584]	@ 0xfffff200
 801accc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801acd0:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801acd4:	74530030 	ldrbvc	r0, [r3], #-48	@ 0xffffffd0
 801acd8:	2d00706f 	stccs	0, cr7, [r0, #-444]	@ 0xfffffe44
 801acdc:	25203e2d 	strcs	r3, [r0, #-3629]!	@ 0xfffff1d3
 801ace0:	73253a73 			@ <UNDEFINED> instruction: 0x73253a73
 801ace4:	0a64253a 	beq	99241d4 <__init_array_end+0x1904a04>
 801ace8:	28732500 	ldmdacs	r3!, {r8, sl, sp}^
 801acec:	73252029 			@ <UNDEFINED> instruction: 0x73252029
 801acf0:	696c202c 	stmdbvs	ip!, {r2, r3, r5, sp}^
 801acf4:	2520656e 	strcs	r6, [r0, #-1390]!	@ 0xfffffa92
 801acf8:	6e203a69 	vnmulvs.f32	s6, s0, s19
 801acfc:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
 801ad00:	65646e49 	strbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801ad04:	64253d78 	strtvs	r3, [r5], #-3448	@ 0xfffff288
 801ad08:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801ad0c:	000a7525 	andeq	r7, sl, r5, lsr #10
 801ad10:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 801ad14:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801ad18:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801ad1c:	7453000a 	ldrbvc	r0, [r3], #-10
 801ad20:	00747261 	rsbseq	r7, r4, r1, ror #4
 801ad24:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801ad28:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801ad2c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801ad30:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801ad34:	506e203a 	rsbpl	r2, lr, sl, lsr r0
 801ad38:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801ad3c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801ad40:	0a64253d 	beq	992423c <__init_array_end+0x1904a6c>
 801ad44:	2f2e2e00 	svccs	0x002e2e00
 801ad48:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801ad4c:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801ad50:	2f6b726f 	svccs	0x006b726f
 801ad54:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801ad58:	2f656475 	svccs	0x00656475
 801ad5c:	2f74656e 	svccs	0x0074656e
 801ad60:	70636864 	rsbvc	r6, r3, r4, ror #16
 801ad64:	6400682e 	strvs	r6, [r0], #-2094	@ 0xfffff7d2
 801ad68:	5f706368 	svcpl	0x00706368
 801ad6c:	006e7572 	rsbeq	r7, lr, r2, ror r5
 801ad70:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801ad74:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801ad78:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801ad7c:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801ad80:	4470203a 	ldrbtmi	r2, [r0], #-58	@ 0xffffffc6
 801ad84:	4d706368 	ldclmi	3, cr6, [r0, #-416]!	@ 0xfffffe60
 801ad88:	61737365 	cmnvs	r3, r5, ror #6
 801ad8c:	3e2d6567 	cfsh64cc	mvdx6, mvdx13, #55
 801ad90:	3d646978 			@ <UNDEFINED> instruction: 0x3d646978
 801ad94:	202c7525 	eorcs	r7, ip, r5, lsr #10
 801ad98:	70636864 	rsbvc	r6, r3, r4, ror #16
 801ad9c:	69783e2d 	ldmdbvs	r8!, {r0, r2, r3, r5, r9, sl, fp, ip, sp}^
 801ada0:	75253d64 	strvc	r3, [r5, #-3428]!	@ 0xfffff29c
 801ada4:	436e000a 	cmnmi	lr, #10
 801ada8:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	@ 0xfffffe44
 801adac:	3e20736e 	cdpcc	3, 2, cr7, cr0, cr14, {3}
 801adb0:	0031203d 	eorseq	r2, r1, sp, lsr r0
 801adb4:	74786554 	ldrbtvc	r6, [r8], #-1364	@ 0xfffffaac
 801adb8:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
 801adbc:	2e007375 	mcrcs	3, 0, r7, cr0, cr5, {3}
 801adc0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801adc4:	69642d62 	stmdbvs	r4!, {r1, r5, r6, r8, sl, fp, sp}^
 801adc8:	616c7073 	smcvs	50947	@ 0xc703
 801adcc:	6e692f79 	mcrvs	15, 3, r2, cr9, cr9, {3}
 801add0:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801add4:	32692f65 	rsbcc	r2, r9, #404	@ 0x194
 801add8:	69642f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 801addc:	616c7073 	smcvs	50947	@ 0xc703
 801ade0:	00682e79 	rsbeq	r2, r8, r9, ror lr
 801ade4:	776f526e 	strbvc	r5, [pc, -lr, ror #4]!
 801ade8:	3d3e2073 	ldccc	0, cr2, [lr, #-460]!	@ 0xfffffe34
 801adec:	73003120 	movwvc	r3, #288	@ 0x120
 801adf0:	6854705f 	ldmdavs	r4, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 801adf4:	21207369 			@ <UNDEFINED> instruction: 0x21207369
 801adf8:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801adfc:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801ae00:	65470072 	strbvs	r0, [r7, #-114]	@ 0xffffff8e
 801ae04:	2e2e0074 	mcrcs	0, 1, r0, cr14, cr4, {3}
 801ae08:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801ae0c:	3273772d 	rsbscc	r7, r3, #11796480	@ 0xb40000
 801ae10:	2f787838 	svccs	0x00787838
 801ae14:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801ae18:	2f656475 	svccs	0x00656475
 801ae1c:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801ae20:	6e6f636c 	cdpvs	3, 6, cr6, cr15, cr12, {3}
 801ae24:	75676966 	strbvc	r6, [r7, #-2406]!	@ 0xfffff69a
 801ae28:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801ae2c:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801ae30:	78695000 	stmdavc	r9!, {ip, lr}^
 801ae34:	6f436c65 	svcvs	0x00436c65
 801ae38:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801ae3c:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801ae40:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801ae44:	54705f73 	ldrbtpl	r5, [r0], #-3955	@ 0xfffff08d
 801ae48:	20736968 	rsbscs	r6, r3, r8, ror #18
 801ae4c:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
 801ae50:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801ae54:	50007274 	andpl	r7, r0, r4, ror r2
 801ae58:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801ae5c:	43786d44 	cmnmi	r8, #68, 26	@ 0x1100
 801ae60:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801ae64:	61727567 	cmnvs	r2, r7, ror #10
 801ae68:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801ae6c:	2f2e2e00 	svccs	0x002e2e00
 801ae70:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801ae74:	38327377 	ldmdacc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, ip, sp, lr}
 801ae78:	6d647878 	stclvs	8, cr7, [r4, #-480]!	@ 0xfffffe20
 801ae7c:	6e692f78 	mcrvs	15, 3, r2, cr9, cr8, {3}
 801ae80:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801ae84:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801ae88:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801ae8c:	6f63786d 	svcvs	0x0063786d
 801ae90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801ae94:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801ae98:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801ae9c:	69500068 	ldmdbvs	r0, {r3, r5, r6}^
 801aea0:	546c6578 	strbtpl	r6, [ip], #-1400	@ 0xfffffa88
 801aea4:	50747365 	rsbspl	r7, r4, r5, ror #6
 801aea8:	65747461 	ldrbvs	r7, [r4, #-1121]!	@ 0xfffffb9f
 801aeac:	2e006e72 	mcrcs	14, 0, r6, cr0, cr2, {3}
 801aeb0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801aeb4:	73772d62 	cmnvc	r7, #6272	@ 0x1880
 801aeb8:	78783832 	ldmdavc	r8!, {r1, r4, r5, fp, ip, sp}^
 801aebc:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801aec0:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801aec4:	7869702f 	stmdavc	r9!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 801aec8:	65746c65 	ldrbvs	r6, [r4, #-3173]!	@ 0xfffff39b
 801aecc:	61707473 	cmnvs	r0, r3, ror r4
 801aed0:	72657474 	rsbvc	r7, r5, #116, 8	@ 0x74000000
 801aed4:	00682e6e 	rsbeq	r2, r8, lr, ror #28
 801aed8:	50746553 	rsbspl	r6, r4, r3, asr r5
 801aedc:	65747461 	ldrbvs	r7, [r4, #-1121]!	@ 0xfffffb9f
 801aee0:	7e006e72 	mcrvc	14, 0, r6, cr0, cr2, {3}
 801aee4:	534d4452 	movtpl	r4, #54354	@ 0xd452
 801aee8:	65446275 	strbvs	r6, [r4, #-629]	@ 0xfffffd8b
 801aeec:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801aef0:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 801aef4:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801aef8:	6d64722d 	sfmvs	f7, 2, [r4, #-180]!	@ 0xffffff4c
 801aefc:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801af00:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801af04:	6d64722f 	sfmvs	f7, 2, [r4, #-188]!	@ 0xffffff44
 801af08:	64627573 	strbtvs	r7, [r2], #-1395	@ 0xfffffa8d
 801af0c:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801af10:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 801af14:	2f2e2e00 	svccs	0x002e2e00
 801af18:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801af1c:	2f6d6472 	svccs	0x006d6472
 801af20:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801af24:	2f656475 	svccs	0x00656475
 801af28:	70726c6c 	rsbsvc	r6, r2, ip, ror #24
 801af2c:	726c6c2f 	rsbvc	r6, ip, #12032	@ 0x2f00
 801af30:	76656470 			@ <UNDEFINED> instruction: 0x76656470
 801af34:	2e656369 	cdpcs	3, 6, cr6, cr5, cr9, {3}
 801af38:	496e0068 	stmdbmi	lr!, {r3, r5, r6}^
 801af3c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801af40:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801af44:	4200312d 	andmi	r3, r0, #1073741835	@ 0x4000000b
 801af48:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 801af4c:	2f2e2e00 	svccs	0x002e2e00
 801af50:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801af54:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801af58:	2f6b726f 	svccs	0x006b726f
 801af5c:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801af60:	2f656475 	svccs	0x00656475
 801af64:	63616d65 	cmnvs	r1, #6464	@ 0x1940
 801af68:	74656e2f 	strbtvc	r6, [r5], #-3631	@ 0xfffff1d1
 801af6c:	6b726f77 	blvs	9cb6d50 <__init_array_end+0x1c97580>
 801af70:	7300682e 	movwvc	r6, #2094	@ 0x82e
 801af74:	61486e5f 	cmpvs	r8, pc, asr lr
 801af78:	656c646e 	strbvs	r6, [ip, #-1134]!	@ 0xfffffb92
 801af7c:	50524c4c 	subspl	r4, r2, ip, asr #24
 801af80:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801af84:	7e00312d 	adfvcsp	f3, f0, #5.0
 801af88:	534d4452 	movtpl	r4, #54354	@ 0xd452
 801af8c:	6f736e65 	svcvs	0x00736e65
 801af90:	2e007372 	mcrcs	3, 0, r7, cr0, cr2, {3}
 801af94:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801af98:	64722d62 	ldrbtvs	r2, [r2], #-3426	@ 0xfffff29e
 801af9c:	6e692f6d 	cdpvs	15, 6, cr2, cr9, cr13, {3}
 801afa0:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801afa4:	64722f65 	ldrbtvs	r2, [r2], #-3941	@ 0xfffff09b
 801afa8:	6e65736d 	cdpvs	3, 6, cr7, cr5, cr13, {3}
 801afac:	73726f73 	cmnvc	r2, #460	@ 0x1cc
 801afb0:	7e00682e 	cdpvc	8, 0, cr6, cr0, cr14, {1}
 801afb4:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801afb8:	65447465 	strbvs	r7, [r4, #-1125]	@ 0xfffffb9b
 801afbc:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801afc0:	2f2e2e00 	svccs	0x002e2e00
 801afc4:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801afc8:	2f6d6472 	svccs	0x006d6472
 801afcc:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801afd0:	2f656475 	svccs	0x00656475
 801afd4:	6e6d6472 	mcrvs	4, 3, r6, cr13, cr2, {3}
 801afd8:	65647465 	strbvs	r7, [r4, #-1125]!	@ 0xfffffb9b
 801afdc:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801afe0:	7e00682e 	cdpvc	8, 0, cr6, cr0, cr14, {1}
 801afe4:	50524c4c 	subspl	r4, r2, ip, asr #24
 801afe8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801afec:	6e006563 	cfsh32vs	mvfx6, mvfx0, #51
 801aff0:	65646e49 	strbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801aff4:	3d3d2078 	ldccc	0, cr2, [sp, #-480]!	@ 0xfffffe20
 801aff8:	45003020 	strmi	r3, [r0, #-32]	@ 0xffffffe0
 801affc:	5200646e 	andpl	r6, r0, #1845493760	@ 0x6e000000
 801b000:	654e4d44 	strbvs	r4, [lr, #-3396]	@ 0xfffff2bc
 801b004:	20000a74 	andcs	r0, r0, r4, ror sl
 801b008:	20444943 	subcs	r4, r4, r3, asr #18
 801b00c:	7325203a 			@ <UNDEFINED> instruction: 0x7325203a
 801b010:	4c4c000a 	mcrrmi	0, 0, r0, ip, cr10
 801b014:	44205052 	strtmi	r5, [r0], #-82	@ 0xffffffae
 801b018:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801b01c:	20000a65 	andcs	r0, r0, r5, ror #20
 801b020:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
 801b024:	50445520 	subpl	r5, r4, r0, lsr #10
 801b028:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b02c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b030:	3a202020 	bcc	88230b8 <__init_array_end+0x8038e8>
 801b034:	0a642520 	beq	99244bc <__init_array_end+0x1904cec>
 801b038:	6f4a2000 	svcvs	0x004a2000
 801b03c:	52206e69 	eorpl	r6, r0, #1680	@ 0x690
 801b040:	65757165 	ldrbvs	r7, [r5, #-357]!	@ 0xfffffe9b
 801b044:	20207473 	eorcs	r7, r0, r3, ror r4
 801b048:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b04c:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b050:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801b054:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b058:	000a6425 	andeq	r6, sl, r5, lsr #8
 801b05c:	6c754d20 	ldclvs	13, cr4, [r5], #-128	@ 0xffffff80
 801b060:	61636974 	smcvs	13972	@ 0x3694
 801b064:	52207473 	eorpl	r7, r0, #1929379840	@ 0x73000000
 801b068:	6f707365 	svcvs	0x00707365
 801b06c:	2065736e 	rsbcs	r7, r5, lr, ror #6
 801b070:	6425203a 	strtvs	r2, [r5], #-58	@ 0xffffffc6
 801b074:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b078:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801b07c:	31000a64 	tstcc	r0, r4, ror #20
 801b080:	32333a38 	eorscc	r3, r3, #56, 20	@ 0x38000
 801b084:	0034323a 	eorseq	r3, r4, sl, lsr r2
 801b088:	20706553 	rsbscs	r6, r0, r3, asr r5
 801b08c:	32203332 	eorcc	r3, r0, #-939524096	@ 0xc8000000
 801b090:	00343230 	eorseq	r3, r4, r0, lsr r2
 801b094:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801b098:	2e314520 	cfabs64cs	mvdx4, mvdx1
 801b09c:	50203133 	eorpl	r3, r0, r3, lsr r1
 801b0a0:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b0a4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801b0a8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	@ 801aee0 <_etext+0x474>
 801b0ac:	2072656c 	rsbscs	r6, r2, ip, ror #10
 801b0b0:	2078387b 	rsbscs	r3, r8, fp, ror r8
 801b0b4:	6e552034 	mrcvs	0, 2, r2, cr5, cr4, {1}
 801b0b8:	72657669 	rsbvc	r7, r5, #110100480	@ 0x6900000
 801b0bc:	7d736573 	cfldr64vc	mvdx6, [r3, #-460]!	@ 0xfffffe34
 801b0c0:	32202f20 	eorcc	r2, r0, #32, 30	@ 0x80
 801b0c4:	4d442078 	stclmi	0, cr2, [r4, #-480]	@ 0xfffffe20
 801b0c8:	5b1b0058 	blpl	86db230 <__init_array_end+0x6bba60>
 801b0cc:	256d3233 	strbcs	r3, [sp, #-563]!	@ 0xfffffdcd
 801b0d0:	305b1b73 	subscc	r1, fp, r3, ror fp
 801b0d4:	2e000a6d 	vmlscs.f32	s0, s0, s27
 801b0d8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801b0dc:	696c2d62 	stmdbvs	ip!, {r1, r5, r6, r8, sl, fp, sp}^
 801b0e0:	73746867 	cmnvc	r4, #6750208	@ 0x670000
 801b0e4:	692f7465 	stmdbvs	pc!, {r0, r2, r5, r6, sl, ip, sp, lr}	@ <UNPREDICTABLE>
 801b0e8:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801b0ec:	6c2f6564 	cfstr32vs	mvfx6, [pc], #-400	@ 801af64 <_etext+0x4f8>
 801b0f0:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801b0f4:	77746573 			@ <UNDEFINED> instruction: 0x77746573
 801b0f8:	34687469 	strbtcc	r7, [r8], #-1129	@ 0xfffffb97
 801b0fc:	4c00682e 	stcmi	8, cr6, [r0], {46}	@ 0x2e
 801b100:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801b104:	57746553 			@ <UNDEFINED> instruction: 0x57746553
 801b108:	34687469 	strbtcc	r7, [r8], #-1129	@ 0xfffffb97
 801b10c:	28732500 	ldmdacs	r3!, {r8, sl, sp}^
 801b110:	73252029 			@ <UNDEFINED> instruction: 0x73252029
 801b114:	696c202c 	stmdbvs	ip!, {r2, r3, r5, sp}^
 801b118:	2520656e 	strcs	r6, [r0, #-1390]!	@ 0xfffffa92
 801b11c:	25203a69 	strcs	r3, [r0, #-2665]!	@ 0xfffff597
 801b120:	70252075 	eorvc	r2, r5, r5, ror r0
 801b124:	0a702520 	beq	9c245ac <__init_array_end+0x1c04ddc>
 801b128:	43417300 	movtmi	r7, #4864	@ 0x1300
 801b12c:	6950204e 	ldmdbvs	r0, {r1, r2, r3, r6, sp}^
 801b130:	206c6578 	rsbcs	r6, ip, r8, ror r5
 801b134:	252d7525 	strcs	r7, [sp, #-1317]!	@ 0xfffffadb
 801b138:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801b13c:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 801b140:	00752520 	rsbseq	r2, r5, r0, lsr #10
 801b144:	32334447 	eorscc	r4, r3, #1191182336	@ 0x47000000
 801b148:	30373446 	eorscc	r3, r7, r6, asr #8
 801b14c:	56455f5a 			@ <UNDEFINED> instruction: 0x56455f5a
 801b150:	50204c41 	eorpl	r4, r0, r1, asr #24
 801b154:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b158:	584d442d 	stmdapl	sp, {r0, r2, r3, r5, sl, lr}^
 801b15c:	43417300 	movtmi	r7, #4864	@ 0x1300
 801b160:	6950204e 	ldmdbvs	r0, {r1, r2, r3, r6, sp}^
 801b164:	206c6578 	rsbcs	r6, ip, r8, ror r5
 801b168:	25787525 	ldrbcs	r7, [r8, #-1317]!	@ 0xfffffadb
 801b16c:	73250075 			@ <UNDEFINED> instruction: 0x73250075
 801b170:	2064253a 	rsbcs	r2, r4, sl, lsr r5
 801b174:	20642547 	rsbcs	r2, r4, r7, asr #10
 801b178:	25007325 	strcs	r7, [r0, #-805]	@ 0xfffffcdb
 801b17c:	75253a73 	strvc	r3, [r5, #-2675]!	@ 0xfffff58d
 801b180:	2f2e2e00 	svccs	0x002e2e00
 801b184:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801b188:	6f6d6572 	svcvs	0x006d6572
 801b18c:	6f636574 	svcvs	0x00636574
 801b190:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b194:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801b198:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801b19c:	7474682f 	ldrbtvc	r6, [r4], #-2095	@ 0xfffff7d1
 801b1a0:	682f6470 	stmdavs	pc!, {r4, r5, r6, sl, sp, lr}	@ <UNPREDICTABLE>
 801b1a4:	64707474 	ldrbtvs	r7, [r0], #-1140	@ 0xfffffb8c
 801b1a8:	5200682e 	andpl	r6, r0, #3014656	@ 0x2e0000
 801b1ac:	25006e75 	strcs	r6, [r0, #-3701]	@ 0xfffff18b
 801b1b0:	20292873 	eorcs	r2, r9, r3, ror r8
 801b1b4:	202c7325 	eorcs	r7, ip, r5, lsr #6
 801b1b8:	656e696c 	strbvs	r6, [lr, #-2412]!	@ 0xfffff694
 801b1bc:	3a692520 	bcc	9a64644 <__init_array_end+0x1a44e74>
 801b1c0:	6f436e20 	svcvs	0x00436e20
 801b1c4:	63656e6e 	cmnvs	r5, #1760	@ 0x6e0
 801b1c8:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801b1cc:	646e6148 	strbtvs	r6, [lr], #-328	@ 0xfffffeb8
 801b1d0:	253d656c 	ldrcs	r6, [sp, #-1388]!	@ 0xfffffa94
 801b1d4:	25000a75 	strcs	r0, [r0, #-2677]	@ 0xfffff58b
 801b1d8:	20292873 	eorcs	r2, r9, r3, ror r8
 801b1dc:	202c7325 	eorcs	r7, ip, r5, lsr #6
 801b1e0:	656e696c 	strbvs	r6, [lr, #-2412]!	@ 0xfffff694
 801b1e4:	3a692520 	bcc	9a6466c <__init_array_end+0x1a44e9c>
 801b1e8:	0a732520 	beq	9ce4670 <__init_array_end+0x1cc4ea0>
 801b1ec:	43455600 	movtmi	r5, #22016	@ 0x5600
 801b1f0:	5f524f54 	svcpl	0x00524f54
 801b1f4:	50524c4c 	subspl	r4, r2, ip, asr #24
 801b1f8:	4f52505f 	svcmi	0x0052505f
 801b1fc:	525f4542 	subspl	r4, pc, #276824064	@ 0x10800000
 801b200:	594c5045 	stmdbpl	ip, {r0, r2, r6, ip, lr}^
 801b204:	006e4f00 	rsbeq	r4, lr, r0, lsl #30
 801b208:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b20c:	3a79616c 	bcc	9e737c4 <__init_array_end+0x1e53ff4>
 801b210:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b214:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 801b218:	203a656d 	eorscs	r6, sl, sp, ror #10
 801b21c:	0a737525 	beq	9cf86b8 <__init_array_end+0x1cd8ee8>
 801b220:	72657600 	rsbvc	r7, r5, #0, 12
 801b224:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801b228:	0073253a 	rsbseq	r2, r3, sl, lsr r5
 801b22c:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801b230:	0a73253a 	beq	9ce4720 <__init_array_end+0x1cc4f50>
 801b234:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 801b238:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801b23c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801b240:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	@ 0xffffff50
 801b244:	252c7325 	strcs	r7, [ip, #-805]!	@ 0xfffffcdb
 801b248:	73252c75 			@ <UNDEFINED> instruction: 0x73252c75
 801b24c:	6425000a 	strtvs	r0, [r5], #-10
 801b250:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b254:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801b258:	73252c64 			@ <UNDEFINED> instruction: 0x73252c64
 801b25c:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	@ 0xffffff50
 801b260:	000a7525 	andeq	r7, sl, r5, lsr #10
 801b264:	4f525245 	svcmi	0x00525245
 801b268:	673f2352 			@ <UNDEFINED> instruction: 0x673f2352
 801b26c:	000a7465 	andeq	r7, sl, r5, ror #8
 801b270:	4f525245 	svcmi	0x00525245
 801b274:	0a3f2352 	beq	8fe3fc4 <__init_array_end+0xfc47f4>
 801b278:	74667400 	strbtvc	r7, [r6], #-1024	@ 0xfffffc00
 801b27c:	64002370 	strvs	r2, [r0], #-880	@ 0xfffffc90
 801b280:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801b284:	00237961 	eoreq	r7, r3, r1, ror #18
 801b288:	4f525245 	svcmi	0x00525245
 801b28c:	0a212352 	beq	8863fdc <__init_array_end+0x84480c>
 801b290:	62657200 	rsbvs	r7, r5, #0, 4
 801b294:	23746f6f 	cmncs	r4, #444	@ 0x1bc
 801b298:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 801b29c:	00237473 	eoreq	r7, r3, r3, ror r4
 801b2a0:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801b2a4:	236e6f69 	cmncs	lr, #420	@ 0x1a4
 801b2a8:	74707500 	ldrbtvc	r7, [r0], #-1280	@ 0xfffffb00
 801b2ac:	23656d69 	cmncs	r5, #6720	@ 0x1a40
 801b2b0:	74656700 	strbtvc	r6, [r5], #-1792	@ 0xfffff900
 801b2b4:	61660023 	cmnvs	r6, r3, lsr #32
 801b2b8:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801b2bc:	00232379 	eoreq	r2, r3, r9, ror r3
 801b2c0:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801b2c4:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	@ 0xffffff18
 801b2c8:	73252300 			@ <UNDEFINED> instruction: 0x73252300
 801b2cc:	0a64253d 	beq	99247c8 <__init_array_end+0x1904ff8>
 801b2d0:	73252200 			@ <UNDEFINED> instruction: 0x73252200
 801b2d4:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b2d8:	002c2273 	eoreq	r2, ip, r3, ror r2
 801b2dc:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	@ 0xffffff74
 801b2e0:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b2e4:	6f626552 	svcvs	0x00626552
 801b2e8:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 801b2ec:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 801b2f0:	6372002e 	cmnvs	r2, #46	@ 0x2e
 801b2f4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b2f8:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 801b2fc:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
 801b300:	78742e76 	ldmdavc	r4!, {r1, r2, r4, r5, r6, r9, sl, fp, sp}^
 801b304:	656e0074 	strbvs	r0, [lr, #-116]!	@ 0xffffff8c
 801b308:	726f7774 	rsbvc	r7, pc, #116, 14	@ 0x1d00000
 801b30c:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 801b310:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
 801b314:	616c7073 	smcvs	50947	@ 0xc703
 801b318:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 801b31c:	31650074 	smccc	20484	@ 0x5004
 801b320:	742e3133 	strtvc	r3, [lr], #-307	@ 0xfffffecd
 801b324:	70007478 	andvc	r7, r0, r8, ror r4
 801b328:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	@ 0xfffffe7c
 801b32c:	78742e73 	ldmdavc	r4!, {r0, r1, r4, r5, r6, r9, sl, fp, sp}^
 801b330:	65640074 	strbvs	r0, [r4, #-116]!	@ 0xffffff8c
 801b334:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801b338:	78742e73 	ldmdavc	r4!, {r0, r1, r4, r5, r6, r9, sl, fp, sp}^
 801b33c:	46540074 			@ <UNDEFINED> instruction: 0x46540074
 801b340:	4f205054 	svcmi	0x00205054
 801b344:	5400206e 	strpl	r2, [r0], #-110	@ 0xffffff92
 801b348:	20505446 	subscs	r5, r0, r6, asr #8
 801b34c:	0066664f 	rsbeq	r6, r6, pc, asr #12
 801b350:	696c227b 	stmdbvs	ip!, {r0, r1, r3, r4, r5, r6, r9, sp}^
 801b354:	3a227473 	bcc	88b8528 <__init_array_end+0x898d58>
 801b358:	7069227b 	rsbvc	r2, r9, fp, ror r2
 801b35c:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b360:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801b364:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b368:	2c226425 	cfstrscs	mvf6, [r2], #-148	@ 0xffffff6c
 801b36c:	6d616e22 	stclvs	14, cr6, [r1, #-136]!	@ 0xffffff78
 801b370:	223a2265 	eorscs	r2, sl, #1342177286	@ 0x50000006
 801b374:	2c227325 	stccs	3, cr7, [r2], #-148	@ 0xffffff6c
 801b378:	646f6e22 	strbtvs	r6, [pc], #-3618	@ 801b380 <_etext+0x914>
 801b37c:	7b3a2265 	blvc	8ea3d18 <__init_array_end+0xe84548>
 801b380:	70797422 	rsbsvc	r7, r9, r2, lsr #8
 801b384:	223a2265 	eorscs	r2, sl, #1342177286	@ 0x50000006
 801b388:	2c227325 	stccs	3, cr7, [r2], #-148	@ 0xffffff6c
 801b38c:	726f7022 	rsbvc	r7, pc, #34	@ 0x22
 801b390:	7b3a2274 	blvc	8ea3d68 <__init_array_end+0xe84598>
 801b394:	70797422 	rsbsvc	r7, r9, r2, lsr #8
 801b398:	223a2265 	eorscs	r2, sl, #1342177286	@ 0x50000006
 801b39c:	2c227325 	stccs	3, cr7, [r2], #-148	@ 0xffffff6c
 801b3a0:	756f6322 	strbvc	r6, [pc, #-802]!	@ 801b086 <_etext+0x61a>
 801b3a4:	3a22746e 	bcc	88b8564 <__init_array_end+0x898d94>
 801b3a8:	7d7d6425 	cfldrdvc	mvd6, [sp, #-148]!	@ 0xffffff6c
 801b3ac:	7b007d7d 	blvc	803a9a8 <__init_array_end+0x1b1d8>
 801b3b0:	72657622 	rsbvc	r7, r5, #35651584	@ 0x2200000
 801b3b4:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801b3b8:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b3bc:	22732a2e 	rsbscs	r2, r3, #188416	@ 0x2e000
 801b3c0:	6f62222c 	svcvs	0x0062222c
 801b3c4:	22647261 	rsbcs	r7, r4, #268435462	@ 0x10000006
 801b3c8:	7325223a 			@ <UNDEFINED> instruction: 0x7325223a
 801b3cc:	62222c22 	eorvs	r2, r2, #8704	@ 0x2200
 801b3d0:	646c6975 	strbtvs	r6, [ip], #-2421	@ 0xfffff68b
 801b3d4:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801b3d8:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801b3dc:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b3e0:	22732a2e 	rsbscs	r2, r3, #188416	@ 0x2e000
 801b3e4:	6974222c 	ldmdbvs	r4!, {r2, r3, r5, r9, sp}^
 801b3e8:	3a22656d 	bcc	88b49a4 <__init_array_end+0x8951d4>
 801b3ec:	2a2e2522 	bcs	8ba487c <__init_array_end+0xb850ac>
 801b3f0:	7d7d2273 	lfmvc	f2, 2, [sp, #-460]!	@ 0xfffffe34
 801b3f4:	33444700 	movtcc	r4, #18176	@ 0x4700
 801b3f8:	37344632 			@ <UNDEFINED> instruction: 0x37344632
 801b3fc:	455f5a30 	ldrbmi	r5, [pc, #-2608]	@ 801a9d4 <malloc+0x28>
 801b400:	004c4156 	subeq	r4, ip, r6, asr r1
 801b404:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 801b408:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801b40c:	75253a22 	strvc	r3, [r5, #-2594]!	@ 0xfffff5de
 801b410:	7b000a7d 	blvc	801de0c <index_js+0x408>
 801b414:	73696422 	cmnvc	r9, #570425344	@ 0x22000000
 801b418:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b41c:	64253a22 	strtvs	r3, [r5], #-2594	@ 0xfffff5de
 801b420:	227b007d 	rsbscs	r0, fp, #125	@ 0x7d
 801b424:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
 801b428:	7b3a2273 	blvc	8ea3dfc <__init_array_end+0xe8462c>
 801b42c:	33316522 	teqcc	r1, #142606336	@ 0x8800000
 801b430:	78742e31 	ldmdavc	r4!, {r0, r4, r5, r9, sl, fp, sp}^
 801b434:	223a2274 	eorscs	r2, sl, #116, 4	@ 0x40000007
 801b438:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801b43c:	2e314520 	cfabs64cs	mvdx4, mvdx1
 801b440:	2c223133 	stfcss	f3, [r2], #-204	@ 0xffffff34
 801b444:	72617022 	rsbvc	r7, r1, #34	@ 0x22
 801b448:	2e736d61 	cdpcs	13, 7, cr6, cr3, cr1, {3}
 801b44c:	22747874 	rsbscs	r7, r4, #116, 16	@ 0x740000
 801b450:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	@ 0xffffff18
 801b454:	72542058 	subsvc	r2, r4, #88	@ 0x58
 801b458:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	@ 0xfffffe7c
 801b45c:	2c227469 	cfstrscs	mvf7, [r2], #-420	@ 0xfffffe5c
 801b460:	76656422 	strbtvc	r6, [r5], -r2, lsr #8
 801b464:	73656369 	cmnvc	r5, #-1543503871	@ 0xa4000001
 801b468:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801b46c:	44223a22 	strtmi	r3, [r2], #-2594	@ 0xfffff5de
 801b470:	5020584d 	eorpl	r5, r0, sp, asr #16
 801b474:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b478:	64222c22 	strtvs	r2, [r2], #-3106	@ 0xfffff3de
 801b47c:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801b480:	742e7961 	strtvc	r7, [lr], #-2401	@ 0xfffff69f
 801b484:	3a227478 	bcc	88b866c <__init_array_end+0x898e9c>
 801b488:	73694422 	cmnvc	r9, #570425344	@ 0x22000000
 801b48c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b490:	46445520 	strbmi	r5, [r4], -r0, lsr #10
 801b494:	6e222c22 	cdpvs	12, 2, cr2, cr2, cr2, {1}
 801b498:	6f777465 	svcvs	0x00777465
 801b49c:	742e6b72 	strtvc	r6, [lr], #-2930	@ 0xfffff48e
 801b4a0:	3a227478 	bcc	88b8688 <__init_array_end+0x898eb8>
 801b4a4:	74654e22 	strbtvc	r4, [r5], #-3618	@ 0xfffff1de
 801b4a8:	6b726f77 	blvs	9cb728c <__init_array_end+0x1c97abc>
 801b4ac:	65222c22 	strvs	r2, [r2, #-3106]!	@ 0xfffff3de
 801b4b0:	742e766e 	strtvc	r7, [lr], #-1646	@ 0xfffff992
 801b4b4:	3a227478 	bcc	88b869c <__init_array_end+0x898ecc>
 801b4b8:	766e4522 	strbtvc	r4, [lr], -r2, lsr #10
 801b4bc:	6e6f7269 	cdpvs	2, 6, cr7, cr15, cr9, {3}
 801b4c0:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801b4c4:	72222c22 	eorvc	r2, r2, #8704	@ 0x2200
 801b4c8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801b4cc:	742e6769 	strtvc	r6, [lr], #-1897	@ 0xfffff897
 801b4d0:	3a227478 	bcc	88b86b8 <__init_array_end+0x898ee8>
 801b4d4:	6d655222 	sfmvs	f5, 2, [r5, #-136]!	@ 0xffffff78
 801b4d8:	2065746f 	rsbcs	r7, r5, pc, ror #8
 801b4dc:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801b4e0:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801b4e4:	6f697461 	svcvs	0x00697461
 801b4e8:	7d7d226e 	lfmvc	f2, 2, [sp, #-440]!	@ 0xfffffe48
 801b4ec:	786d6400 	stmdavc	sp!, {sl, sp, lr}^
 801b4f0:	00736a2e 	rsbseq	r6, r3, lr, lsr #20
 801b4f4:	74617473 	strbtvc	r7, [r1], #-1139	@ 0xfffffb8d
 801b4f8:	6a2e6369 	bvs	8bb42a4 <__init_array_end+0xb94ad4>
 801b4fc:	74730073 	ldrbtvc	r0, [r3], #-115	@ 0xffffff8d
 801b500:	73656c79 	cmnvc	r5, #30976	@ 0x7900
 801b504:	7373632e 	cmnvc	r3, #-1207959552	@ 0xb8000000
 801b508:	646e6900 	strbtvs	r6, [lr], #-2304	@ 0xfffff700
 801b50c:	6a2e7865 	bvs	8bb96a8 <__init_array_end+0xb99ed8>
 801b510:	61640073 	smcvs	16387	@ 0x4003
 801b514:	6a2e6574 	bvs	8bb4aec <__init_array_end+0xb9531c>
 801b518:	65640073 	strbvs	r0, [r4, #-115]!	@ 0xffffff8d
 801b51c:	6c756166 	ldfvse	f6, [r5], #-408	@ 0xfffffe68
 801b520:	736a2e74 	cmnvc	sl, #116, 28	@ 0x740
 801b524:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 801b528:	736a2e65 	cmnvc	sl, #1616	@ 0x650
 801b52c:	646e6900 	strbtvs	r6, [lr], #-2304	@ 0xfffff700
 801b530:	682e7865 	stmdavs	lr!, {r0, r2, r5, r6, fp, ip, sp, lr}
 801b534:	006c6d74 	rsbeq	r6, ip, r4, ror sp
 801b538:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801b53c:	6d74682e 	ldclvs	8, cr6, [r4, #-184]!	@ 0xffffff48
 801b540:	6d64006c 	stclvs	0, cr0, [r4, #-432]!	@ 0xfffffe50
 801b544:	74682e78 	strbtvc	r2, [r8], #-3704	@ 0xfffff188
 801b548:	48006c6d 	stmdami	r0, {r0, r2, r3, r5, r6, sl, fp, sp, lr}
 801b54c:	4c005054 	stcmi	0, cr5, [r0], {84}	@ 0x54
 801b550:	73005054 	movwvc	r5, #84	@ 0x54
 801b554:	204e4341 	subcs	r4, lr, r1, asr #6
 801b558:	332e3145 			@ <UNDEFINED> instruction: 0x332e3145
 801b55c:	25562031 	ldrbcs	r2, [r6, #-49]	@ 0xffffffcf
 801b560:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801b564:	4f20000a 	svcmi	0x0020000a
 801b568:	75707475 	ldrbvc	r7, [r0, #-1141]!	@ 0xfffffb8b
 801b56c:	20000a74 	andcs	r0, r0, r4, ror sl
 801b570:	726f5020 	rsbvc	r5, pc, #32
 801b574:	2d252074 	stccs	0, cr2, [r5, #-464]!	@ 0xfffffe30
 801b578:	25207532 	strcs	r7, [r0, #-1330]!	@ 0xffffface
 801b57c:	2075342d 	rsbscs	r3, r5, sp, lsr #8
 801b580:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b584:	6e795320 	cdpvs	3, 7, cr5, cr9, cr0, {1}
 801b588:	6f726863 	svcvs	0x00726863
 801b58c:	657a696e 	ldrbvs	r6, [sl, #-2414]!	@ 0xfffff692
 801b590:	20736920 	rsbscs	r6, r3, r0, lsr #18
 801b594:	61736964 	cmnvs	r3, r4, ror #18
 801b598:	64656c62 	strbtvs	r6, [r5], #-3170	@ 0xfffff39e
 801b59c:	6f68000a 	svcvs	0x0068000a
 801b5a0:	6f00646c 	svcvs	0x0000646c
 801b5a4:	70006666 	andvc	r6, r0, r6, ror #12
 801b5a8:	6279616c 	rsbsvs	r6, r9, #108, 2
 801b5ac:	006b6361 	rsbeq	r6, fp, r1, ror #6
 801b5b0:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
 801b5b4:	00752520 	rsbseq	r2, r5, r0, lsr #10
 801b5b8:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801b5bc:	756f0074 	strbvc	r0, [pc, #-116]!	@ 801b550 <_etext+0xae4>
 801b5c0:	74757074 	ldrbtvc	r7, [r5], #-116	@ 0xffffff8c
 801b5c4:	73696400 	cmnvc	r9, #0, 8
 801b5c8:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
 801b5cc:	70746c00 	rsbsvc	r6, r4, r0, lsl #24
 801b5d0:	70746800 	rsbsvc	r6, r4, r0, lsl #16
 801b5d4:	584d4400 	stmdapl	sp, {sl, lr}^
 801b5d8:	74754f20 	ldrbtvc	r4, [r5], #-3872	@ 0xfffff0e0
 801b5dc:	00747570 	rsbseq	r7, r4, r0, ror r5
 801b5e0:	204d4452 	subcs	r4, sp, r2, asr r4
 801b5e4:	70736552 	rsbsvc	r6, r3, r2, asr r5
 801b5e8:	65646e6f 	strbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801b5ec:	6f632072 	svcvs	0x00632072
 801b5f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b5f4:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801b5f8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801b5fc:	6f725020 	svcvs	0x00725020
 801b600:	6f636f74 	svcvs	0x00636f74
 801b604:	6556206c 	ldrbvs	r2, [r6, #-108]	@ 0xffffff94
 801b608:	6f697372 	svcvs	0x00697372
 801b60c:	6425206e 	strtvs	r2, [r5], #-110	@ 0xffffff92
 801b610:	0a64252e 	beq	9924ad0 <__init_array_end+0x1905300>
 801b614:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801b618:	64412058 	strbvs	r2, [r1], #-88	@ 0xffffffa8
 801b61c:	73657264 	cmnvc	r5, #100, 4	@ 0x40000006
 801b620:	20202073 	eorcs	r2, r0, r3, ror r0
 801b624:	3a202020 	bcc	88236ac <__init_array_end+0x803edc>
 801b628:	0a642520 	beq	9924ab0 <__init_array_end+0x19052e0>
 801b62c:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801b630:	6f462058 	svcvs	0x00462058
 801b634:	7270746f 	rsbsvc	r7, r0, #1862270976	@ 0x6f000000
 801b638:	20746e69 	rsbscs	r6, r4, r9, ror #28
 801b63c:	3a202020 	bcc	88236c4 <__init_array_end+0x803ef4>
 801b640:	0a642520 	beq	9924ac8 <__init_array_end+0x19052f8>
 801b644:	65502000 	ldrbvs	r2, [r0, #-0]
 801b648:	6e6f7372 	mcrvs	3, 3, r7, cr15, cr2, {3}
 801b64c:	74696c61 	strbtvc	r6, [r9], #-3169	@ 0xfffff39f
 801b650:	64252079 	strtvs	r2, [r5], #-121	@ 0xffffff87
 801b654:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 801b658:	5b206425 	blpl	88346f4 <__init_array_end+0x814f24>
 801b65c:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801b660:	20000a5d 	andcs	r0, r0, sp, asr sl
 801b664:	20627553 	rsbcs	r7, r2, r3, asr r5
 801b668:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801b66c:	20736563 	rsbscs	r6, r3, r3, ror #10
 801b670:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b674:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b678:	20000a64 	andcs	r0, r0, r4, ror #20
 801b67c:	736e6553 	cmnvc	lr, #348127232	@ 0x14c00000
 801b680:	2073726f 	rsbscs	r7, r3, pc, ror #4
 801b684:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b688:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b68c:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b690:	52000a64 	andpl	r0, r0, #100, 20	@ 0x64000
 801b694:	44204d44 	strtmi	r4, [r0], #-3396	@ 0xfffff2bc
 801b698:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801b69c:	6f632065 	svcvs	0x00632065
 801b6a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b6a4:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801b6a8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801b6ac:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 801b6b0:	63616675 	cmnvs	r1, #122683392	@ 0x7500000
 801b6b4:	65727574 	ldrbvs	r7, [r2, #-1396]!	@ 0xfffffa8c
 801b6b8:	614e2072 	hvcvs	57858	@ 0xe202
 801b6bc:	3a20656d 	bcc	8834c78 <__init_array_end+0x8154a8>
 801b6c0:	2a2e2520 	bcs	8ba4b48 <__init_array_end+0xb85378>
 801b6c4:	20000a73 	andcs	r0, r0, r3, ror sl
 801b6c8:	756e614d 	strbvc	r6, [lr, #-333]!	@ 0xfffffeb3
 801b6cc:	74636166 	strbtvc	r6, [r3], #-358	@ 0xfffffe9a
 801b6d0:	72657275 	rsbvc	r7, r5, #1342177287	@ 0x50000007
 801b6d4:	20444920 	subcs	r4, r4, r0, lsr #18
 801b6d8:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801b6dc:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801b6e0:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801b6e4:	5320000a 			@ <UNDEFINED> instruction: 0x5320000a
 801b6e8:	61697265 	cmnvs	r9, r5, ror #4
 801b6ec:	754e206c 	strbvc	r2, [lr, #-108]	@ 0xffffff94
 801b6f0:	7265626d 	rsbvc	r6, r5, #-805306362	@ 0xd0000006
 801b6f4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b6f8:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b6fc:	2558322e 	ldrbcs	r3, [r8, #-558]	@ 0xfffffdd2
 801b700:	2558322e 	ldrbcs	r3, [r8, #-558]	@ 0xfffffdd2
 801b704:	2558322e 	ldrbcs	r3, [r8, #-558]	@ 0xfffffdd2
 801b708:	0a58322e 	beq	9627fc8 <__init_array_end+0x16087f8>
 801b70c:	6f522000 	svcvs	0x00522000
 801b710:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	@ 0xfffffe44
 801b714:	6c656261 	sfmvs	f6, 2, [r5], #-388	@ 0xfffffe7c
 801b718:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b71c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b720:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801b724:	000a732a 	andeq	r7, sl, sl, lsr #6
 801b728:	6f725020 	svcvs	0x00725020
 801b72c:	74637564 	strbtvc	r7, [r3], #-1380	@ 0xfffffa9c
 801b730:	74614320 	strbtvc	r4, [r1], #-800	@ 0xfffffce0
 801b734:	726f6765 	rsbvc	r6, pc, #26476544	@ 0x1940000
 801b738:	3a202079 	bcc	8823924 <__init_array_end+0x804154>
 801b73c:	322e2520 	eorcc	r2, lr, #32, 10	@ 0x8000000
 801b740:	322e2558 	eorcc	r2, lr, #88, 10	@ 0x16000000
 801b744:	20000a58 	andcs	r0, r0, r8, asr sl
 801b748:	646f7250 	strbtvs	r7, [pc], #-592	@ 801b750 <_etext+0xce4>
 801b74c:	20746375 	rsbscs	r6, r4, r5, ror r3
 801b750:	61746544 	cmnvs	r4, r4, asr #10
 801b754:	20206c69 	eorcs	r6, r0, r9, ror #24
 801b758:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801b75c:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801b760:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801b764:	227b000a 	rsbscs	r0, fp, #10
 801b768:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801b76c:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b770:	222c2263 	eorcs	r2, ip, #805306374	@ 0x30000006
 801b774:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801b778:	6f697463 	svcvs	0x00697463
 801b77c:	223a226e 	eorscs	r2, sl, #-536870906	@ 0xe0000006
 801b780:	7d227325 	stcvc	3, cr7, [r2, #-148]!	@ 0xffffff6c
 801b784:	227b002c 	rsbscs	r0, fp, #44	@ 0x2c
 801b788:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801b78c:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b790:	222c2263 	eorcs	r2, ip, #805306374	@ 0x30000006
 801b794:	22786d64 	rsbscs	r6, r8, #100, 26	@ 0x1900
 801b798:	73227b3a 			@ <UNDEFINED> instruction: 0x73227b3a
 801b79c:	22746e65 	rsbscs	r6, r4, #1616	@ 0x650
 801b7a0:	7525223a 	strvc	r2, [r5, #-570]!	@ 0xfffffdc6
 801b7a4:	72222c22 	eorvc	r2, r2, #8704	@ 0x2200
 801b7a8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801b7ac:	22646576 	rsbcs	r6, r4, #494927872	@ 0x1d800000
 801b7b0:	7525223a 	strvc	r2, [r5, #-570]!	@ 0xfffffdc6
 801b7b4:	222c7d22 	eorcs	r7, ip, #2176	@ 0x880
 801b7b8:	226d6472 	rsbcs	r6, sp, #1912602624	@ 0x72000000
 801b7bc:	73227b3a 			@ <UNDEFINED> instruction: 0x73227b3a
 801b7c0:	22746e65 	rsbscs	r6, r4, #1616	@ 0x650
 801b7c4:	63227b3a 			@ <UNDEFINED> instruction: 0x63227b3a
 801b7c8:	7373616c 	cmnvc	r3, #108, 2
 801b7cc:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b7d0:	222c2275 	eorcs	r2, ip, #1342177287	@ 0x50000007
 801b7d4:	63736964 	cmnvs	r3, #100, 18	@ 0x190000
 801b7d8:	7265766f 	rsbvc	r7, r5, #116391936	@ 0x6f00000
 801b7dc:	223a2279 	eorscs	r2, sl, #-1879048185	@ 0x90000007
 801b7e0:	7d227525 	cfstr32vc	mvfx7, [r2, #-148]!	@ 0xffffff6c
 801b7e4:	6572222c 	ldrbvs	r2, [r2, #-556]!	@ 0xfffffdd4
 801b7e8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 801b7ec:	3a226465 	bcc	88b4988 <__init_array_end+0x8951b8>
 801b7f0:	6f67227b 	svcvs	0x0067227b
 801b7f4:	3a22646f 	bcc	88b49b8 <__init_array_end+0x8951e8>
 801b7f8:	22752522 	rsbscs	r2, r5, #142606336	@ 0x8800000
 801b7fc:	6162222c 	cmnvs	r2, ip, lsr #4
 801b800:	223a2264 	eorscs	r2, sl, #100, 4	@ 0x40000006
 801b804:	2c227525 	cfstr32cs	mvfx7, [r2], #-148	@ 0xffffff6c
 801b808:	73696422 	cmnvc	r9, #570425344	@ 0x22000000
 801b80c:	65766f63 	ldrbvs	r6, [r6, #-3939]!	@ 0xfffff09d
 801b810:	3a227972 	bcc	88b9de0 <__init_array_end+0x89a610>
 801b814:	22752522 	rsbscs	r2, r5, #142606336	@ 0x8800000
 801b818:	007d7d7d 	rsbseq	r7, sp, sp, ror sp
 801b81c:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801b820:	2a2e253a 	bcs	8ba4d10 <__init_array_end+0xb85540>
 801b824:	23002c66 	movwcs	r2, #3174	@ 0xc66
 801b828:	253d7325 	ldrcs	r7, [sp, #-805]!	@ 0xfffffcdb
 801b82c:	0a662a2e 	beq	99a60ec <__init_array_end+0x198691c>
 801b830:	694c7000 	stmdbvs	ip, {ip, sp, lr}^
 801b834:	2120656e 			@ <UNDEFINED> instruction: 0x2120656e
 801b838:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801b83c:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801b840:	61630072 	smcvs	12290	@ 0x3002
 801b844:	61626c6c 	cmnvs	r2, ip, ror #24
 801b848:	75466b63 	strbvc	r6, [r6, #-2915]	@ 0xfffff49d
 801b84c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801b850:	73006e6f 	movwvc	r6, #3695	@ 0xe6f
 801b854:	702f6372 	eorvc	r6, pc, r2, ror r3	@ <UNPREDICTABLE>
 801b858:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	@ 0xfffffe7c
 801b85c:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 801b860:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801b864:	6170786d 	cmnvs	r0, sp, ror #16
 801b868:	736d6172 	cmnvc	sp, #-2147483620	@ 0x8000001c
 801b86c:	7070632e 	rsbsvc	r6, r0, lr, lsr #6
 801b870:	21207000 			@ <UNDEFINED> instruction: 0x21207000
 801b874:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801b878:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801b87c:	74730072 	ldrbtvc	r0, [r3], #-114	@ 0xffffff8e
 801b880:	63697461 	cmnvs	r9, #1627389952	@ 0x61000000
 801b884:	6c6c6143 	stfvse	f6, [ip], #-268	@ 0xfffffef4
 801b888:	6b636162 	blvs	98f3e18 <__init_array_end+0x18d4648>
 801b88c:	636e7546 	cmnvs	lr, #293601280	@ 0x11800000
 801b890:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801b894:	75427000 	strbvc	r7, [r2, #-0]
 801b898:	72656666 	rsbvc	r6, r5, #106954752	@ 0x6600000
 801b89c:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801b8a0:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	@ 0xfffffe48
 801b8a4:	00727470 	rsbseq	r7, r2, r0, ror r4
 801b8a8:	6c697542 	cfstr64vs	mvdx7, [r9], #-264	@ 0xfffffef8
 801b8ac:	00726564 	rsbseq	r6, r2, r4, ror #10
 801b8b0:	7265764f 	rsbvc	r7, r5, #82837504	@ 0x4f00000
 801b8b4:	74697277 	strbtvc	r7, [r9], #-631	@ 0xfffffd89
 801b8b8:	61642065 	cmnvs	r4, r5, rrx
 801b8bc:	68736174 	ldmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
 801b8c0:	00746565 	rsbseq	r6, r4, r5, ror #10
 801b8c4:	7265764f 	rsbvc	r7, r5, #82837504	@ 0x4f00000
 801b8c8:	74697277 	strbtvc	r7, [r9], #-631	@ 0xfffffd89
 801b8cc:	69742065 	ldmdbvs	r4!, {r0, r2, r5, r6, sp}^
 801b8d0:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
 801b8d4:	73752820 	cmnvc	r5, #32, 16	@ 0x200000
 801b8d8:	72470029 	subvc	r0, r7, #41	@ 0x29
 801b8dc:	6970756f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
 801b8e0:	4300676e 	movwmi	r6, #1902	@ 0x76e
 801b8e4:	6b636f6c 	blvs	98f769c <__init_array_end+0x18d7ecc>
 801b8e8:	73616220 	cmnvc	r1, #32, 4
 801b8ec:	63206465 			@ <UNDEFINED> instruction: 0x63206465
 801b8f0:	73706968 	cmnvc	r0, #104, 18	@ 0x1a0000
 801b8f4:	41504100 	cmpmi	r0, r0, lsl #2
 801b8f8:	2f323031 	svccs	0x00323031
 801b8fc:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801b900:	54003232 	strpl	r3, [r0], #-562	@ 0xfffffdce
 801b904:	20747365 	rsbscs	r7, r4, r5, ror #6
 801b908:	74746170 	ldrbtvc	r6, [r4], #-368	@ 0xfffffe90
 801b90c:	006e7265 	rsbeq	r7, lr, r5, ror #4
 801b910:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801b914:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801b918:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801b91c:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801b920:	536e203a 	cmnpl	lr, #58	@ 0x3a
 801b924:	3d657a69 	vstmdbcc	r5!, {s15-s119}
 801b928:	000a6425 	andeq	r6, sl, r5, lsr #8
 801b92c:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801b930:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801b934:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801b938:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801b93c:	6f63786d 	svcvs	0x0063786d
 801b940:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b944:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801b948:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801b94c:	75440068 	strbvc	r0, [r4, #-104]	@ 0xffffff98
 801b950:	2500706d 	strcs	r7, [r0, #-109]	@ 0xffffff93
 801b954:	253a3a73 	ldrcs	r3, [sl, #-2675]!	@ 0xfffff58d
 801b958:	25272073 	strcs	r2, [r7, #-115]!	@ 0xffffff8d
 801b95c:	0a3a2773 	beq	8ea5730 <__init_array_end+0xe85f60>
 801b960:	73252000 			@ <UNDEFINED> instruction: 0x73252000
 801b964:	2073253d 	rsbscs	r2, r3, sp, lsr r5
 801b968:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	@ 0xfffffe94
 801b96c:	2520000a 	strcs	r0, [r0, #-10]!
 801b970:	64253d73 	strtvs	r3, [r5], #-3443	@ 0xfffff28d
 801b974:	73255b20 			@ <UNDEFINED> instruction: 0x73255b20
 801b978:	20000a5d 	andcs	r0, r0, sp, asr sl
 801b97c:	253d7325 	ldrcs	r7, [sp, #-805]!	@ 0xfffffcdb
 801b980:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801b984:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801b988:	000a5d58 	andeq	r5, sl, r8, asr sp
 801b98c:	3d732520 	cfldr64cc	mvdx2, [r3, #-128]!	@ 0xffffff80
 801b990:	000a6425 	andeq	r6, sl, r5, lsr #8
 801b994:	3d732520 	cfldr64cc	mvdx2, [r3, #-128]!	@ 0xffffff80
 801b998:	000a7525 	andeq	r7, sl, r5, lsr #10
 801b99c:	64616f4c 	strbtvs	r6, [r1], #-3916	@ 0xfffff0b4
 801b9a0:	692f2e00 	stmdbvs	pc!, {r9, sl, fp, sp}	@ <UNPREDICTABLE>
 801b9a4:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801b9a8:	702f6564 	eorvc	r6, pc, r4, ror #10
 801b9ac:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b9b0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801b9b4:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801b9b8:	6f697461 	svcvs	0x00697461
 801b9bc:	00682e6e 	rsbeq	r2, r8, lr, ror #28
 801b9c0:	6572227b 	ldrbvs	r2, [r2, #-635]!	@ 0xfffffd85
 801b9c4:	73657266 	cmnvc	r5, #1610612742	@ 0x60000006
 801b9c8:	61725f68 	cmnvs	r2, r8, ror #30
 801b9cc:	3a226574 	bcc	88b4fa4 <__init_array_end+0x8957d4>
 801b9d0:	22752522 	rsbscs	r2, r5, #142606336	@ 0x8800000
 801b9d4:	6e55007d 	mrcvs	0, 2, r0, cr5, cr13, {3}
 801b9d8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 801b9dc:	5370006e 	cmnpl	r0, #110	@ 0x6e
 801b9e0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 801b9e4:	3d212067 	stccc	0, cr2, [r1, #-412]!	@ 0xfffffe64
 801b9e8:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801b9ec:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801b9f0:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 801b9f4:	675f6c65 	ldrbvs	r6, [pc, -r5, ror #24]
 801b9f8:	745f7465 	ldrbvc	r7, [pc], #-1125	@ 801ba00 <_etext+0xf94>
 801b9fc:	00657079 	rsbeq	r7, r5, r9, ror r0
 801ba00:	2f637273 	svccs	0x00637273
 801ba04:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801ba08:	7079746c 	rsbsvc	r7, r9, ip, ror #8
 801ba0c:	70632e65 	rsbvc	r2, r3, r5, ror #28
 801ba10:	69700070 	ldmdbvs	r0!, {r4, r5, r6}^
 801ba14:	5f6c6578 	svcpl	0x006c6578
 801ba18:	5f746567 	svcpl	0x00746567
 801ba1c:	0070616d 	rsbseq	r6, r0, sp, ror #2
 801ba20:	65646e55 	strbvs	r6, [r4, #-3669]!	@ 0xfffff1ab
 801ba24:	656e6966 	strbvs	r6, [lr, #-2406]!	@ 0xfffff69a
 801ba28:	227b0064 	rsbscs	r0, fp, #100	@ 0x64
 801ba2c:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801ba30:	5b3a2273 	blpl	8ea4404 <__init_array_end+0xe84c34>
 801ba34:	654c6e00 	strbvs	r6, [ip, #-3584]	@ 0xfffff200
 801ba38:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801ba3c:	203d3c20 	eorscs	r3, sp, r0, lsr #24
 801ba40:	74754f6e 	ldrbtvc	r4, [r5], #-3950	@ 0xfffff092
 801ba44:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 801ba48:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801ba4c:	6a00657a 	bvs	803503c <__init_array_end+0x1586c>
 801ba50:	5f6e6f73 	svcpl	0x006e6f73
 801ba54:	5f746567 	svcpl	0x00746567
 801ba58:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801ba5c:	69500073 	ldmdbvs	r0, {r0, r1, r4, r5, r6}^
 801ba60:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801ba64:	65747461 	ldrbvs	r7, [r4, #-1121]!	@ 0xfffffb9f
 801ba68:	00736e72 	rsbseq	r6, r3, r2, ror lr
 801ba6c:	2f637273 	svccs	0x00637273
 801ba70:	74746170 	ldrbtvc	r6, [r4], #-368	@ 0xfffffe90
 801ba74:	736e7265 	cmnvc	lr, #1342177286	@ 0x50000006
 801ba78:	7869702f 	stmdavc	r9!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 801ba7c:	61706c65 	cmnvs	r0, r5, ror #24
 801ba80:	72657474 	rsbvc	r7, r5, #116, 8	@ 0x74000000
 801ba84:	632e736e 			@ <UNDEFINED> instruction: 0x632e736e
 801ba88:	25007070 	strcs	r7, [r0, #-112]	@ 0xffffff90
 801ba8c:	20292873 	eorcs	r2, r9, r3, ror r8
 801ba90:	202c7325 	eorcs	r7, ip, r5, lsr #6
 801ba94:	656e696c 	strbvs	r6, [lr, #-2412]!	@ 0xfffff694
 801ba98:	3a692520 	bcc	9a64f20 <__init_array_end+0x1a45750>
 801ba9c:	63416e20 	movtvs	r6, #7712	@ 0x1e20
 801baa0:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801baa4:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
 801baa8:	75253d73 	strvc	r3, [r5, #-3443]!	@ 0xfffff28d
 801baac:	5f73000a 	svcpl	0x0073000a
 801bab0:	74754f70 	ldrbtvc	r4, [r5], #-3952	@ 0xfffff090
 801bab4:	20747570 	rsbscs	r7, r4, r0, ror r5
 801bab8:	6e203d21 	cdpvs	13, 2, cr3, cr0, cr1, {1}
 801babc:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801bac0:	25007274 	strcs	r7, [r0, #-628]	@ 0xfffffd8c
 801bac4:	2e732a2e 	vaddcs.f32	s5, s6, s29
 801bac8:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 801bacc:	20000a53 	andcs	r0, r0, r3, asr sl
 801bad0:	25206425 	strcs	r6, [r0, #-1061]!	@ 0xfffffbdb
 801bad4:	0a732a2e 	beq	9ce6394 <__init_array_end+0x1cc6bc4>
 801bad8:	3a706900 	bcc	9c35ee0 <__init_array_end+0x1c16710>
 801badc:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801bae0:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bae4:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801bae8:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801baec:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801baf0:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801baf4:	0a64252e 	beq	9924fb4 <__init_array_end+0x19057e4>
 801baf8:	74656e00 	strbtvc	r6, [r5], #-3584	@ 0xfffff200
 801bafc:	6b73616d 	blvs	9cf40b8 <__init_array_end+0x1cd48e8>
 801bb00:	6425203a 	strtvs	r2, [r5], #-58	@ 0xffffffc6
 801bb04:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bb08:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bb0c:	3e2d2064 	cdpcc	0, 2, cr2, cr13, cr4, {3}
 801bb10:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801bb14:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bb18:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801bb1c:	7767000a 	strbvc	r0, [r7, -sl]!
 801bb20:	6425203a 	strtvs	r2, [r5], #-58	@ 0xffffffc6
 801bb24:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bb28:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bb2c:	3e2d2064 	cdpcc	0, 2, cr2, cr13, cr4, {3}
 801bb30:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801bb34:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bb38:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801bb3c:	7465000a 	strbtvc	r0, [r5], #-10
 801bb40:	25003068 	strcs	r3, [r0, #-104]	@ 0xffffff98
 801bb44:	3a78322e 	bcc	9e28404 <__init_array_end+0x1e08c34>
 801bb48:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801bb4c:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801bb50:	2e253a78 			@ <UNDEFINED> instruction: 0x2e253a78
 801bb54:	253a7832 	ldrcs	r7, [sl, #-2098]!	@ 0xfffff7ce
 801bb58:	3a78322e 	bcc	9e28418 <__init_array_end+0x1e08c48>
 801bb5c:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801bb60:	6967000a 	stmdbvs	r7!, {r1, r3}^
 801bb64:	65646167 	strbvs	r6, [r4, #-359]!	@ 0xfffffe99
 801bb68:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801bb6c:	6f53005f 	svcvs	0x0053005f
 801bb70:	61777466 	cmnvs	r7, r6, ror #8
 801bb74:	69546572 	ldmdbvs	r4, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801bb78:	4172656d 	cmnmi	r2, sp, ror #10
 801bb7c:	000a6464 	andeq	r6, sl, r4, ror #8
 801bb80:	6f636573 	svcvs	0x00636573
 801bb84:	7261646e 	rsbvc	r6, r1, #1845493760	@ 0x6e000000
 801bb88:	70695f79 	rsbvc	r5, r9, r9, ror pc
 801bb8c:	61745300 	cmnvs	r4, r0, lsl #6
 801bb90:	20636974 	rsbcs	r6, r3, r4, ror r9
 801bb94:	4e005049 	cdpmi	0, 0, cr5, cr0, cr9, {2}
 801bb98:	53205054 			@ <UNDEFINED> instruction: 0x53205054
 801bb9c:	65767265 	ldrbvs	r7, [r6, #-613]!	@ 0xfffffd9b
 801bba0:	50440072 	subpl	r0, r4, r2, ror r0
 801bba4:	34383338 	ldrtcc	r3, [r8], #-824	@ 0xfffffcc8
 801bba8:	656e0038 	strbvs	r0, [lr, #-56]!	@ 0xffffffc8
 801bbac:	703a3a74 	eorsvc	r3, sl, r4, ror sl
 801bbb0:	635f7968 	cmpvs	pc, #104, 18	@ 0x1a0000
 801bbb4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801bbb8:	48502867 	ldmdami	r0, {r0, r1, r2, r5, r6, fp, sp}^
 801bbbc:	44415f59 	strbmi	r5, [r1], #-3929	@ 0xfffff0a7
 801bbc0:	53455244 	movtpl	r5, #21060	@ 0x5244
 801bbc4:	55002953 	strpl	r2, [r0, #-2387]	@ 0xfffff6ad
 801bbc8:	6f440070 	svcvs	0x00440070
 801bbcc:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
 801bbd0:	00464c41 	subeq	r4, r6, r1, asr #24
 801bbd4:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	@ 0x46
 801bbd8:	6e694c00 	cdpvs	12, 6, cr4, cr9, cr0, {0}
 801bbdc:	7325206b 			@ <UNDEFINED> instruction: 0x7325206b
 801bbe0:	6425202c 	strtvs	r2, [r5], #-44	@ 0xffffffd4
 801bbe4:	7325202c 			@ <UNDEFINED> instruction: 0x7325202c
 801bbe8:	6157000a 	cmpvs	r7, sl
 801bbec:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
 801bbf0:	6f662067 	svcvs	0x00662067
 801bbf4:	48502072 	ldmdami	r0, {r1, r4, r5, r6, sp}^
 801bbf8:	75612059 	strbvc	r2, [r1, #-89]!	@ 0xffffffa7
 801bbfc:	6e206f74 	mcrvs	15, 1, r6, cr0, cr4, {3}
 801bc00:	746f6765 	strbtvc	r6, [pc], #-1893	@ 801bc08 <_etext+0x119c>
 801bc04:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
 801bc08:	74206e6f 	strtvc	r6, [r0], #-3695	@ 0xfffff191
 801bc0c:	6f63206f 	svcvs	0x0063206f
 801bc10:	656c706d 	strbvs	r7, [ip, #-109]!	@ 0xffffff93
 801bc14:	25006574 	strcs	r6, [r0, #-1396]	@ 0xfffffa8c
 801bc18:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801bc1c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bc20:	252f6425 	strcs	r6, [pc, #-1061]!	@ 801b803 <_etext+0xd97>
 801bc24:	63252064 			@ <UNDEFINED> instruction: 0x63252064
 801bc28:	72694600 	rsbvc	r4, r9, #0, 12
 801bc2c:	7261776d 	rsbvc	r7, r1, #28573696	@ 0x1b40000
 801bc30:	25562065 	ldrbcs	r2, [r6, #-101]	@ 0xffffff9b
 801bc34:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801bc38:	25203a47 	strcs	r3, [r0, #-2631]!	@ 0xfffff5b9
 801bc3c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801bc40:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bc44:	4e006425 	cdpmi	4, 0, cr6, cr0, cr5, {1}
 801bc48:	6425203a 	strtvs	r2, [r5], #-58	@ 0xffffffc6
 801bc4c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bc50:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bc54:	6e490064 	cdpvs	0, 4, cr0, cr9, cr4, {3}
 801bc58:	00747570 	rsbseq	r7, r4, r0, ror r5
 801bc5c:	203a5041 	eorscs	r5, sl, r1, asr #32
 801bc60:	50006425 	andpl	r6, r0, r5, lsr #8
 801bc64:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801bc68:	203a6325 	eorscs	r6, sl, r5, lsr #6
 801bc6c:	25206425 	strcs	r6, [r0, #-1061]!	@ 0xfffffbdb
 801bc70:	6f4e0073 	svcvs	0x004e0073
 801bc74:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 801bc78:	584d4400 	stmdapl	sp, {sl, lr}^
 801bc7c:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801bc80:	45006425 	strmi	r6, [r0, #-1061]	@ 0xfffffbdb
 801bc84:	72656874 	rsbvc	r6, r5, #116, 16	@ 0x740000
 801bc88:	2074656e 	rsbscs	r6, r4, lr, ror #10
 801bc8c:	74696e69 	strbtvc	r6, [r9], #-3689	@ 0xfffff197
 801bc90:	68744500 	ldmdavs	r4!, {r8, sl, lr}^
 801bc94:	656e7265 	strbvs	r7, [lr, #-613]!	@ 0xfffffd9b
 801bc98:	74732074 	ldrbtvc	r2, [r3], #-116	@ 0xffffff8c
 801bc9c:	00747261 	rsbseq	r7, r4, r1, ror #4
 801bca0:	44005055 	strmi	r5, [r0], #-85	@ 0xffffffab
 801bca4:	004e574f 	subeq	r5, lr, pc, asr #14
 801bca8:	65687445 	strbvs	r7, [r8, #-1093]!	@ 0xfffffbbb
 801bcac:	74656e72 	strbtvc	r6, [r5], #-3698	@ 0xfffff18e
 801bcb0:	6e694c20 	cdpvs	12, 6, cr4, cr9, cr0, {1}
 801bcb4:	7325206b 			@ <UNDEFINED> instruction: 0x7325206b
 801bcb8:	6f745300 	svcvs	0x00745300
 801bcbc:	65446572 	strbvs	r6, [r4, #-1394]	@ 0xfffffa8e
 801bcc0:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801bcc4:	5342203a 	movtpl	r2, #8250	@ 0x203a
 801bcc8:	204d4152 	subcs	r4, sp, r2, asr r1
 801bccc:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 801bcd0:	746f7420 	strbtvc	r7, [pc], #-1056	@ 801bcd8 <_etext+0x126c>
 801bcd4:	25206c61 	strcs	r6, [r0, #-3169]!	@ 0xfffff39f
 801bcd8:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 801bcdc:	20736574 	rsbscs	r6, r3, r4, ror r5
 801bce0:	2064255b 	rsbcs	r2, r4, fp, asr r5
 801bce4:	0a5d426b 	beq	976c698 <__init_array_end+0x174cec8>
 801bce8:	73252200 			@ <UNDEFINED> instruction: 0x73252200
 801bcec:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801bcf0:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801bcf4:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bcf8:	2c226425 	cfstrscs	mvf6, [r2], #-148	@ 0xffffff6c
 801bcfc:	73252300 			@ <UNDEFINED> instruction: 0x73252300
 801bd00:	2e64253d 	mcrcs	5, 3, r2, cr4, cr13, {1}
 801bd04:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bd08:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801bd0c:	002b000a 	eoreq	r0, fp, sl
 801bd10:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801bd14:	7325223a 			@ <UNDEFINED> instruction: 0x7325223a
 801bd18:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801bd1c:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801bd20:	002c2275 	eoreq	r2, ip, r5, ror r2
 801bd24:	253d7325 	ldrcs	r7, [sp, #-805]!	@ 0xfffffcdb
 801bd28:	322e2573 	eorcc	r2, lr, #482344960	@ 0x1cc00000
 801bd2c:	2e253a64 	vnmulcs.f32	s6, s10, s9
 801bd30:	23007532 	movwcs	r7, #1330	@ 0x532
 801bd34:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801bd38:	4e000a23 	vmlami.f32	s0, s0, s7
 801bd3c:	6964206f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, sp}^
 801bd40:	616c7073 	smcvs	50947	@ 0xc703
 801bd44:	6f662079 	svcvs	0x00662079
 801bd48:	00646e75 	rsbeq	r6, r4, r5, ror lr
 801bd4c:	31314853 	teqcc	r1, r3, asr r8
 801bd50:	53003630 	movwpl	r3, #1584	@ 0x630
 801bd54:	33314453 	teqcc	r1, #1392508928	@ 0x53000000
 801bd58:	25003630 	strcs	r3, [r0, #-1584]	@ 0xfffff9d0
 801bd5c:	25282073 	strcs	r2, [r8, #-115]!	@ 0xffffff8d
 801bd60:	75252c75 	strvc	r2, [r5, #-3189]!	@ 0xfffff38b
 801bd64:	40000a29 	andmi	r0, r0, r9, lsr #20
 801bd68:	eeaaeeaa 	cdp	14, 10, cr14, cr10, cr10, {5}
 801bd6c:	25565b00 	ldrbcs	r5, [r6, #-2816]	@ 0xfffff500
 801bd70:	5d732a2e 	vldmdbpl	r3!, {s5-s50}
 801bd74:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801bd78:	706d6f43 	rsbvc	r6, sp, r3, asr #30
 801bd7c:	64656c69 	strbtvs	r6, [r5], #-3177	@ 0xfffff397
 801bd80:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
 801bd84:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801bd88:	20746120 	rsbscs	r6, r4, r0, lsr #2
 801bd8c:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801bd90:	64227b00 	strtvs	r7, [r2], #-2816	@ 0xfffff500
 801bd94:	22657461 	rsbcs	r7, r5, #1627389952	@ 0x61000000
 801bd98:	6425223a 	strtvs	r2, [r5], #-570	@ 0xfffffdc6
 801bd9c:	322e252d 	eorcc	r2, lr, #188743680	@ 0xb400000
 801bda0:	2e252d64 	cdpcs	13, 2, cr2, cr5, cr4, {3}
 801bda4:	25546432 	ldrbcs	r6, [r4, #-1074]	@ 0xfffffbce
 801bda8:	3a64322e 	bcc	9928668 <__init_array_end+0x1908e98>
 801bdac:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801bdb0:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801bdb4:	7d225a64 	vstmdbvc	r2!, {s10-s109}
 801bdb8:	227b000a 	rsbscs	r0, fp, #10
 801bdbc:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801bdc0:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801bdc4:	2e252d64 	cdpcs	13, 2, cr2, cr5, cr4, {3}
 801bdc8:	252d6432 	strcs	r6, [sp, #-1074]!	@ 0xfffffbce
 801bdcc:	5464322e 	strbtpl	r3, [r4], #-558	@ 0xfffffdd2
 801bdd0:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801bdd4:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801bdd8:	2e253a64 	vnmulcs.f32	s6, s10, s9
 801bddc:	73256432 			@ <UNDEFINED> instruction: 0x73256432
 801bde0:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801bde4:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801bde8:	0a7d2275 	beq	9f647c4 <__init_array_end+0x1f44ff4>
 801bdec:	335b1b00 	cmpcc	fp, #0, 22
 801bdf0:	1b006d31 	blne	80372bc <__init_array_end+0x17aec>
 801bdf4:	6d37335b 	ldcvs	3, cr3, [r7, #-364]!	@ 0xfffffe94
 801bdf8:	335b1b00 	cmpcc	fp, #0, 22
 801bdfc:	1b006d30 	blne	80372c4 <__init_array_end+0x17af4>
 801be00:	6d32335b 	ldcvs	3, cr3, [r2, #-364]!	@ 0xfffffe94
 801be04:	335b1b00 	cmpcc	fp, #0, 22
 801be08:	1b006d33 	blne	80372dc <__init_array_end+0x17b0c>
 801be0c:	6d39335b 	ldcvs	3, cr3, [r9, #-364]!	@ 0xfffffe94
 801be10:	345b1b00 	ldrbcc	r1, [fp], #-2816	@ 0xfffff500
 801be14:	1b006d30 	blne	80372dc <__init_array_end+0x17b0c>
 801be18:	6d31345b 	cfldrsvs	mvf3, [r1, #-364]!	@ 0xfffffe94
 801be1c:	345b1b00 	ldrbcc	r1, [fp], #-2816	@ 0xfffff500
 801be20:	1b006d37 	blne	8037304 <__init_array_end+0x17b34>
 801be24:	6d39345b 	cfldrsvs	mvf3, [r9, #-364]!	@ 0xfffffe94
 801be28:	335b1b00 	cmpcc	fp, #0, 22
 801be2c:	53006d34 	movwpl	r6, #3380	@ 0xd34
 801be30:	6b636174 	blvs	98f4408 <__init_array_end+0x18d4c38>
 801be34:	6953203a 	ldmdbvs	r3, {r1, r3, r4, r5, sp}^
 801be38:	2520657a 	strcs	r6, [r0, #-1402]!	@ 0xfffffa86
 801be3c:	2c424b75 	mcrrcs	11, 7, r4, r2, cr5
 801be40:	65735520 	ldrbvs	r5, [r3, #-1312]!	@ 0xfffffae0
 801be44:	25203a64 	strcs	r3, [r0, #-2660]!	@ 0xfffff59c
 801be48:	46202c75 			@ <UNDEFINED> instruction: 0x46202c75
 801be4c:	3a656572 	bcc	997541c <__init_array_end+0x1955c4c>
 801be50:	00752520 	rsbseq	r2, r5, r0, lsr #10
 801be54:	39335b1b 	ldmdbcc	r3!, {r0, r1, r3, r4, r8, r9, fp, ip, lr}
 801be58:	25000a6d 	strcs	r0, [r0, #-2669]	@ 0xfffff593
 801be5c:	2d783830 	ldclcs	8, cr3, [r8, #-192]!	@ 0xffffff40
 801be60:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 801be64:	3430252d 	ldrtcc	r2, [r0], #-1325	@ 0xfffffad3
 801be68:	30252d78 	eorcc	r2, r5, r8, ror sp
 801be6c:	30257832 	eorcc	r7, r5, r2, lsr r8
 801be70:	252d7832 	strcs	r7, [sp, #-2098]!	@ 0xfffff7ce
 801be74:	25783230 	ldrbcs	r3, [r8, #-560]!	@ 0xfffffdd0
 801be78:	25783230 	ldrbcs	r3, [r8, #-560]!	@ 0xfffffdd0
 801be7c:	25783230 	ldrbcs	r3, [r8, #-560]!	@ 0xfffffdd0
 801be80:	25783230 	ldrbcs	r3, [r8, #-560]!	@ 0xfffffdd0
 801be84:	25783230 	ldrbcs	r3, [r8, #-560]!	@ 0xfffffdd0
 801be88:	00783230 	rsbseq	r3, r8, r0, lsr r2
 801be8c:	7566202c 	strbvc	r2, [r6, #-44]!	@ 0xffffffd4
 801be90:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801be94:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 801be98:	73736100 	cmnvc	r3, #0, 2
 801be9c:	69747265 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801bea0:	22206e6f 	eorcs	r6, r0, #1776	@ 0x6f0
 801bea4:	20227325 	eorcs	r7, r2, r5, lsr #6
 801bea8:	6c696166 	stfvse	f6, [r9], #-408	@ 0xfffffe68
 801beac:	203a6465 	eorscs	r6, sl, r5, ror #8
 801beb0:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
 801beb4:	73252220 			@ <UNDEFINED> instruction: 0x73252220
 801beb8:	6c202c22 	stcvs	12, cr2, [r0], #-136	@ 0xffffff78
 801bebc:	20656e69 	rsbcs	r6, r5, r9, ror #28
 801bec0:	73256425 			@ <UNDEFINED> instruction: 0x73256425
 801bec4:	000a7325 	andeq	r7, sl, r5, lsr #6
 801bec8:	7478656e 	ldrbtvc	r6, [r8], #-1390	@ 0xfffffa92
 801becc:	62203e20 	eorvs	r3, r0, #32, 28	@ 0x200
 801bed0:	6b636f6c 	blvs	98f7c88 <__init_array_end+0x18d84b8>
 801bed4:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	@ 0xfffffe84
 801bed8:	000a7469 	andeq	r7, sl, r9, ror #8

0801bedc <CSWTCH.152>:
 801bedc:	444e4f4f 	strbmi	r4, [lr], #-3919	@ 0xfffff0b1
 801bee0:	00005246 	andeq	r5, r0, r6, asr #4

0801bee4 <vtable for DmxSend>:
	...
 801beec:	08009545 	stmdaeq	r0, {r0, r2, r6, r8, sl, ip, pc}
 801bef0:	0800974d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, ip, pc}
 801bef4:	0800986d 	stmdaeq	r0, {r0, r2, r3, r5, r6, fp, ip, pc}
 801bef8:	080097d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, ip, pc}
 801befc:	08009769 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, ip, pc}
 801bf00:	080096d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, ip, pc}
 801bf04:	080098f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, fp, ip, pc}
 801bf08:	0800952d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, ip, pc}
 801bf0c:	08009661 	stmdaeq	r0, {r0, r5, r6, r9, sl, ip, pc}
 801bf10:	080096cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, ip, pc}
 801bf14:	0800966d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, ip, pc}
 801bf18:	08009513 	stmdaeq	r0, {r0, r1, r4, r8, sl, ip, pc}
 801bf1c:	08009517 	stmdaeq	r0, {r0, r1, r2, r4, r8, sl, ip, pc}
 801bf20:	0800951b 	stmdaeq	r0, {r0, r1, r3, r4, r8, sl, ip, pc}
 801bf24:	08009521 	stmdaeq	r0, {r0, r5, r8, sl, ip, pc}

0801bf28 <vtable for RDMNetDevice>:
	...
 801bf30:	08009f4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, fp, ip, pc}
 801bf34:	08009fd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, fp, ip, pc}
 801bf38:	0800d1f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, ip, lr, pc}
 801bf3c:	0800d1fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr, pc}

0801bf40 <vtable for LightSetWith4<64ul>>:
	...
 801bf48:	08009547 	stmdaeq	r0, {r0, r1, r2, r6, r8, sl, ip, pc}
 801bf4c:	0800975b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r8, r9, sl, ip, pc}
 801bf50:	08009567 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, sl, ip, pc}
 801bf54:	08009589 	stmdaeq	r0, {r0, r3, r7, r8, sl, ip, pc}
 801bf58:	080095ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, sl, ip, pc}
 801bf5c:	080095eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, sl, ip, pc}
 801bf60:	0800960d 	stmdaeq	r0, {r0, r2, r3, r9, sl, ip, pc}
 801bf64:	0800950d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip, pc}
 801bf68:	0800962b 	stmdaeq	r0, {r0, r1, r3, r5, r9, sl, ip, pc}
 801bf6c:	08009511 	stmdaeq	r0, {r0, r4, r8, sl, ip, pc}
 801bf70:	08009549 	stmdaeq	r0, {r0, r3, r6, r8, sl, ip, pc}
 801bf74:	0800964d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, pc}
 801bf78:	08009651 	stmdaeq	r0, {r0, r4, r6, r9, sl, ip, pc}
 801bf7c:	08009657 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, sl, ip, pc}
 801bf80:	0800965b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, sl, ip, pc}

0801bf84 <SOFTWARE_VERSION>:
 801bf84:	00302e31 	eorseq	r2, r0, r1, lsr lr

0801bf88 <SOFTWARE_VERSION>:
 801bf88:	00302e31 	eorseq	r2, r0, r1, lsr lr

0801bf8c <s_Output>:
 801bf8c:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 801bf98:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801bfa4:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 801bfa8:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801bfac:	00000000 	andeq	r0, r0, r0
 801bfb0:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801bfb4:	0000006c 	andeq	r0, r0, ip, rrx
 801bfb8:	00000000 	andeq	r0, r0, r0
 801bfbc:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801bfc0:	65646f43 	strbvs	r6, [r4, #-3907]!	@ 0xfffff0bd
 801bfc4:	00000000 	andeq	r0, r0, r0
 801bfc8:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801bfd4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801bfd8:	00006769 	andeq	r6, r0, r9, ror #14
 801bfdc:	00000000 	andeq	r0, r0, r0
 801bfe0:	70657453 	rsbvc	r7, r5, r3, asr r4
 801bfe4:	00726570 	rsbseq	r6, r2, r0, ror r5
 801bfe8:	00000000 	andeq	r0, r0, r0
 801bfec:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801bff0:	00007265 	andeq	r7, r0, r5, ror #4
 801bff4:	00000000 	andeq	r0, r0, r0
 801bff8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801bffc:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801c000:	00000000 	andeq	r0, r0, r0
 801c004:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801c008:	00006c61 	andeq	r6, r0, r1, ror #24
 801c00c:	00000000 	andeq	r0, r0, r0
 801c010:	20424752 	subcs	r4, r2, r2, asr r7
 801c014:	656e6150 	strbvs	r6, [lr, #-336]!	@ 0xfffffeb0
 801c018:	0000006c 	andeq	r0, r0, ip, rrx
 801c01c:	004d5750 	subeq	r5, sp, r0, asr r7
	...

0801c028 <s_Node>:
 801c028:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801c02c:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801c038:	41730000 	cmnmi	r3, r0
 801c03c:	45204e43 	strmi	r4, [r0, #-3651]!	@ 0xfffff1bd
 801c040:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801c04c:	2043534f 	subcs	r5, r3, pc, asr #6
 801c050:	76726553 			@ <UNDEFINED> instruction: 0x76726553
 801c054:	00007265 	andeq	r7, r0, r5, ror #4
 801c058:	00000000 	andeq	r0, r0, r0
 801c05c:	544c0000 	strbpl	r0, [ip], #-0
 801c060:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801c070:	2043534f 	subcs	r5, r3, pc, asr #6
 801c074:	65696c43 	strbvs	r6, [r9, #-3139]!	@ 0xfffff3bd
 801c078:	0000746e 	andeq	r7, r0, lr, ror #8
 801c07c:	00000000 	andeq	r0, r0, r0
 801c080:	44520000 	ldrbmi	r0, [r2], #-0
 801c084:	74654e4d 	strbtvc	r4, [r5], #-3661	@ 0xfffff1b3
 801c088:	524c4c20 	subpl	r4, ip, #32, 24	@ 0x2000
 801c08c:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801c090:	0000796c 	andeq	r7, r0, ip, ror #18
 801c094:	776f6853 			@ <UNDEFINED> instruction: 0x776f6853
 801c098:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
	...
 801c0a4:	494d0000 	stmdbmi	sp, {}^	@ <UNPREDICTABLE>
 801c0a8:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801c0b8:	00504444 	subseq	r4, r0, r4, asr #8
	...
 801c0c8:	69500000 	ldmdbvs	r0, {}^	@ <UNPREDICTABLE>
 801c0cc:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801c0d0:	65687375 	strbvs	r7, [r8, #-885]!	@ 0xfffffc8b
 801c0d4:	00000072 	andeq	r0, r0, r2, ror r0
 801c0d8:	00000000 	andeq	r0, r0, r0
 801c0dc:	65646f4e 	strbvs	r6, [r4, #-3918]!	@ 0xfffff0b2
	...
 801c0ec:	6f420000 	svcvs	0x00420000
 801c0f0:	6f6c746f 	svcvs	0x006c746f
 801c0f4:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801c0f8:	54465420 	strbpl	r5, [r6], #-1056	@ 0xfffffbe0
 801c0fc:	00000050 	andeq	r0, r0, r0, asr r0
 801c100:	204d4452 	subcs	r4, sp, r2, asr r4
 801c104:	70736552 	rsbsvc	r6, r3, r2, asr r5
 801c108:	65646e6f 	strbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801c10c:	00000072 	andeq	r0, r0, r2, ror r0
 801c110:	00000000 	andeq	r0, r0, r0

0801c114 <RemoteConfig::s_SET>:
 801c114:	0800a999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp, sp, pc}
 801c118:	00000000 	andeq	r0, r0, r0
 801c11c:	0801b279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, ip, sp, pc}
 801c120:	00010005 	andeq	r0, r1, r5
 801c124:	0800a971 	stmdaeq	r0, {r0, r4, r5, r6, r8, fp, sp, pc}
 801c128:	00000000 	andeq	r0, r0, r0
 801c12c:	0801b27f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, ip, sp, pc}
 801c130:	00010008 	andeq	r0, r1, r8

0801c134 <RemoteConfig::s_GET>:
 801c134:	0800b209 	stmdaeq	r0, {r0, r3, r9, ip, sp, pc}
 801c138:	00000000 	andeq	r0, r0, r0
 801c13c:	0801b291 	stmdaeq	r1, {r0, r4, r7, r9, ip, sp, pc}
 801c140:	00000008 	andeq	r0, r0, r8
 801c144:	0800a8c1 	stmdaeq	r0, {r0, r6, r7, fp, sp, pc}
 801c148:	00000000 	andeq	r0, r0, r0
 801c14c:	0801b29a 	stmdaeq	r1, {r1, r3, r4, r7, r9, ip, sp, pc}
 801c150:	00000005 	andeq	r0, r0, r5
 801c154:	0800a83d 	stmdaeq	r0, {r0, r2, r3, r4, r5, fp, sp, pc}
 801c158:	00000000 	andeq	r0, r0, r0
 801c15c:	0801b2a0 	stmdaeq	r1, {r5, r7, r9, ip, sp, pc}
 801c160:	00000008 	andeq	r0, r0, r8
 801c164:	0800a7b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, sp, pc}
 801c168:	00000000 	andeq	r0, r0, r0
 801c16c:	0801b27f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, ip, sp, pc}
 801c170:	00000008 	andeq	r0, r0, r8
 801c174:	0800a7fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, pc}
 801c178:	00000000 	andeq	r0, r0, r0
 801c17c:	0801b2a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, ip, sp, pc}
 801c180:	00000007 	andeq	r0, r0, r7
 801c184:	0800abb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, sp, pc}
 801c188:	00000000 	andeq	r0, r0, r0
 801c18c:	0801b2b1 	stmdaeq	r1, {r0, r4, r5, r7, r9, ip, sp, pc}
 801c190:	00010004 	andeq	r0, r1, r4
 801c194:	0800a875 	stmdaeq	r0, {r0, r2, r4, r5, r6, fp, sp, pc}
 801c198:	00000000 	andeq	r0, r0, r0
 801c19c:	0801b279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, ip, sp, pc}
 801c1a0:	00000005 	andeq	r0, r0, r5
 801c1a4:	0800af5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, sp, pc}
 801c1a8:	00000000 	andeq	r0, r0, r0
 801c1ac:	0801b2b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, ip, sp, pc}
 801c1b0:	00000009 	andeq	r0, r0, r9

0801c1b4 <paramMasks>:
 801c1b4:	0801ccea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sl, fp, lr, pc}
 801c1b8:	00000001 	andeq	r0, r0, r1
 801c1bc:	0801ccdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sl, fp, lr, pc}
 801c1c0:	00000002 	andeq	r0, r0, r2
 801c1c4:	0801ccce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, fp, lr, pc}
 801c1c8:	00000004 	andeq	r0, r0, r4
 801c1cc:	0801ccc0 	stmdaeq	r1, {r6, r7, sl, fp, lr, pc}
 801c1d0:	00000008 	andeq	r0, r0, r8
 801c1d4:	0801ccb1 	stmdaeq	r1, {r0, r4, r5, r7, sl, fp, lr, pc}
 801c1d8:	00000020 	andeq	r0, r0, r0, lsr #32

0801c1dc <RemoteConfig::s_TXT>:
 801c1dc:	0800abbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, fp, sp, pc}
 801c1e0:	00000000 	andeq	r0, r0, r0
 801c1e4:	0800ae75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sl, fp, sp, pc}
 801c1e8:	00000000 	andeq	r0, r0, r0
 801c1ec:	0801b2f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, ip, sp, pc}
 801c1f0:	0000000b 	andeq	r0, r0, fp
 801c1f4:	0800abe5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, fp, sp, pc}
 801c1f8:	00000000 	andeq	r0, r0, r0
 801c1fc:	0800ae9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, fp, sp, pc}
 801c200:	00000000 	andeq	r0, r0, r0
 801c204:	0801b2fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, ip, sp, pc}
 801c208:	00000007 	andeq	r0, r0, r7
 801c20c:	0800ac09 	stmdaeq	r0, {r0, r3, sl, fp, sp, pc}
 801c210:	00000000 	andeq	r0, r0, r0
 801c214:	0800aebd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, sp, pc}
 801c218:	00000000 	andeq	r0, r0, r0
 801c21c:	0801b306 	stmdaeq	r1, {r1, r2, r8, r9, ip, sp, pc}
 801c220:	0000000b 	andeq	r0, r0, fp
 801c224:	0800aca9 	stmdaeq	r0, {r0, r3, r5, r7, sl, fp, sp, pc}
 801c228:	00000000 	andeq	r0, r0, r0
 801c22c:	0800af3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp, pc}
 801c230:	00000000 	andeq	r0, r0, r0
 801c234:	0801b312 	stmdaeq	r1, {r1, r4, r8, r9, ip, sp, pc}
 801c238:	0000000b 	andeq	r0, r0, fp
 801c23c:	0800ac31 	stmdaeq	r0, {r0, r4, r5, sl, fp, sp, pc}
 801c240:	00000000 	andeq	r0, r0, r0
 801c244:	0800aedd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, sp, pc}
 801c248:	00000000 	andeq	r0, r0, r0
 801c24c:	0801b31e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, ip, sp, pc}
 801c250:	00000008 	andeq	r0, r0, r8
 801c254:	0800ac59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, sp, pc}
 801c258:	00000000 	andeq	r0, r0, r0
 801c25c:	0800aefd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 801c260:	00000000 	andeq	r0, r0, r0
 801c264:	0801b327 	stmdaeq	r1, {r0, r1, r2, r5, r8, r9, ip, sp, pc}
 801c268:	0000000a 	andeq	r0, r0, sl
 801c26c:	0800ac81 	stmdaeq	r0, {r0, r7, sl, fp, sp, pc}
 801c270:	00000000 	andeq	r0, r0, r0
 801c274:	0800af1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, sp, pc}
 801c278:	00000000 	andeq	r0, r0, r0
 801c27c:	0801b332 	stmdaeq	r1, {r1, r4, r5, r8, r9, ip, sp, pc}
 801c280:	0000000b 	andeq	r0, r0, fp
 801c284:	00000020 	andeq	r0, r0, r0, lsr #32
 801c288:	00544547 	subseq	r4, r4, r7, asr #10
 801c28c:	54534f50 	ldrbpl	r4, [r3], #-3920	@ 0xfffff0b0
 801c290:	00000000 	andeq	r0, r0, r0
 801c294:	0000002f 	andeq	r0, r0, pc, lsr #32
 801c298:	50545448 	subspl	r5, r4, r8, asr #8
 801c29c:	00000000 	andeq	r0, r0, r0
 801c2a0:	00000a20 	andeq	r0, r0, r0, lsr #20
 801c2a4:	00312e31 	eorseq	r2, r1, r1, lsr lr
 801c2a8:	0000003a 	andeq	r0, r0, sl, lsr r0
 801c2ac:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801c2b0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801c2b4:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801c2b8:	00000000 	andeq	r0, r0, r0
 801c2bc:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801c2c0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801c2c4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801c2c8:	00006874 	andeq	r6, r0, r4, ror r8
 801c2cc:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801c2d0:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801c2d4:	2f6e6f69 	svccs	0x006e6f69
 801c2d8:	00000000 	andeq	r0, r0, r0
 801c2dc:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801c2e0:	00000000 	andeq	r0, r0, r0
 801c2e4:	6574636f 	ldrbvs	r6, [r4, #-879]!	@ 0xfffffc91
 801c2e8:	74732d74 	ldrbtvc	r2, [r3], #-3444	@ 0xfffff28c
 801c2ec:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	@ 0xfffffe38
 801c2f0:	00000000 	andeq	r0, r0, r0
 801c2f4:	00003b20 	andeq	r3, r0, r0, lsr #22
 801c2f8:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801c2fc:	00000000 	andeq	r0, r0, r0
 801c300:	6f736a2f 	svcvs	0x00736a2f
 801c304:	00002f6e 	andeq	r2, r0, lr, ror #30
 801c308:	2f786d64 	svccs	0x00786d64
 801c30c:	00000000 	andeq	r0, r0, r0
 801c310:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801c314:	00002f6c 	andeq	r2, r0, ip, ror #30
 801c318:	65646e69 	strbvs	r6, [r4, #-3689]!	@ 0xfffff197
 801c31c:	74682e78 	strbtvc	r2, [r8], #-3704	@ 0xfffff188
 801c320:	00006c6d 	andeq	r6, r0, sp, ror #24
 801c324:	786d642f 	stmdavc	sp!, {r0, r1, r2, r3, r5, sl, sp, lr}^
 801c328:	00000000 	andeq	r0, r0, r0
 801c32c:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801c330:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	@ 0xfffffe60
 801c334:	00000000 	andeq	r0, r0, r0
 801c338:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	@ 0xffffff44
 801c33c:	00000065 	andeq	r0, r0, r5, rrx
 801c340:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801c344:	6d74682e 	ldclvs	8, cr6, [r4, #-184]!	@ 0xffffff48
 801c348:	0000006c 	andeq	r0, r0, ip, rrx
 801c34c:	6f736a2f 	svcvs	0x00736a2f
 801c350:	63612f6e 	cmnvs	r1, #440	@ 0x1b8
 801c354:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801c358:	00000000 	andeq	r0, r0, r0
 801c35c:	6f736a2f 	svcvs	0x00736a2f
 801c360:	0000006e 	andeq	r0, r0, lr, rrx
 801c364:	6f626572 	svcvs	0x00626572
 801c368:	0000746f 	andeq	r7, r0, pc, ror #8
 801c36c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801c370:	0079616c 	rsbseq	r6, r9, ip, ror #2
 801c374:	6e656469 	cdpvs	4, 6, cr6, cr5, cr9, {3}
 801c378:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
 801c37c:	00000000 	andeq	r0, r0, r0
 801c380:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801c384:	0000003d 	andeq	r0, r0, sp, lsr r0
 801c388:	4f44213c 	svcmi	0x0044213c
 801c38c:	50595443 	subspl	r5, r9, r3, asr #8
 801c390:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801c394:	0a3e6c6d 	beq	8fb7550 <__init_array_end+0xf97d80>
 801c398:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801c39c:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801c3a0:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801c3a4:	69743c3e 	ldmdbvs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801c3a8:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801c3ac:	6d627553 	cfstr64vs	mvdx7, [r2, #-332]!	@ 0xfffffeb4
 801c3b0:	2f3c7469 	svccs	0x003c7469
 801c3b4:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 801c3b8:	2f3c3e65 	svccs	0x003c3e65
 801c3bc:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801c3c0:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801c3c4:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801c3c8:	3e31683c 	mrccc	8, 1, r6, cr1, cr12, {1}
 801c3cc:	2f3c4b4f 	svccs	0x003c4b4f
 801c3d0:	3c3e3168 	ldfccs	f3, [lr], #-416	@ 0xfffffe60
 801c3d4:	646f622f 	strbtvs	r6, [pc], #-559	@ 801c3dc <RemoteConfig::s_TXT+0x200>
 801c3d8:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801c3dc:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801c3e0:	000a3e6c 	andeq	r3, sl, ip, ror #28
 801c3e4:	20646142 	rsbcs	r6, r4, r2, asr #2
 801c3e8:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801c3ec:	00747365 	rsbseq	r7, r4, r5, ror #6
 801c3f0:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801c3f4:	206e776f 	rsbcs	r7, lr, pc, ror #14
 801c3f8:	6f727245 	svcvs	0x00727245
 801c3fc:	00000072 	andeq	r0, r0, r2, ror r0
 801c400:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801c404:	20747365 	rsbscs	r7, r4, r5, ror #6
 801c408:	69746e45 	ldmdbvs	r4!, {r0, r2, r6, r9, sl, fp, sp, lr}^
 801c40c:	54207974 	strtpl	r7, [r0], #-2420	@ 0xfffff68c
 801c410:	4c206f6f 	stcmi	15, cr6, [r0], #-444	@ 0xfffffe44
 801c414:	65677261 	strbvs	r7, [r7, #-609]!	@ 0xfffffd9f
 801c418:	00000000 	andeq	r0, r0, r0
 801c41c:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801c420:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	@ 0xfffffe6c
 801c424:	20495255 	subcs	r5, r9, r5, asr r2
 801c428:	206f6f54 	rsbcs	r6, pc, r4, asr pc	@ <UNPREDICTABLE>
 801c42c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 801c430:	00000000 	andeq	r0, r0, r0
 801c434:	65746e49 	ldrbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801c438:	6c616e72 	stclvs	14, cr6, [r1], #-456	@ 0xfffffe38
 801c43c:	72655320 	rsbvc	r5, r5, #32, 6	@ 0x80000000
 801c440:	20726576 	rsbscs	r6, r2, r6, ror r5
 801c444:	6f727245 	svcvs	0x00727245
 801c448:	00000072 	andeq	r0, r0, r2, ror r0
 801c44c:	6874654d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
 801c450:	4e20646f 	cdpmi	4, 2, cr6, cr0, cr15, {3}
 801c454:	4920746f 	stmdbmi	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
 801c458:	656c706d 	strbvs	r7, [ip, #-109]!	@ 0xffffff93
 801c45c:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801c460:	00006465 	andeq	r6, r0, r5, ror #8
 801c464:	73726556 	cmnvc	r2, #360710144	@ 0x15800000
 801c468:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801c46c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801c470:	70707553 	rsbsvc	r7, r0, r3, asr r5
 801c474:	6574726f 	ldrbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801c478:	00000064 	andeq	r0, r0, r4, rrx
 801c47c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801c480:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 801c484:	00000064 	andeq	r0, r0, r4, rrx
 801c488:	00004b4f 	andeq	r4, r0, pc, asr #22
 801c48c:	4f44213c 	svcmi	0x0044213c
 801c490:	50595443 	subspl	r5, r9, r3, asr #8
 801c494:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801c498:	0a3e6c6d 	beq	8fb7654 <__init_array_end+0xf97e84>
 801c49c:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801c4a0:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801c4a4:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801c4a8:	69743c3e 	ldmdbvs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801c4ac:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801c4b0:	25207525 	strcs	r7, [r0, #-1317]!	@ 0xfffffadb
 801c4b4:	742f3c73 	strtvc	r3, [pc], #-3187	@ 801c4bc <RemoteConfig::s_TXT+0x2e0>
 801c4b8:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801c4bc:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801c4c0:	3e646165 	powccsz	f6, f4, f5
 801c4c4:	6f623c0a 	svcvs	0x00623c0a
 801c4c8:	3c3e7964 			@ <UNDEFINED> instruction: 0x3c3e7964
 801c4cc:	253e3168 	ldrcs	r3, [lr, #-360]!	@ 0xfffffe98
 801c4d0:	682f3c73 	stmdavs	pc!, {r0, r1, r4, r5, r6, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801c4d4:	2f3c3e31 	svccs	0x003c3e31
 801c4d8:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801c4dc:	2f3c0a3e 	svccs	0x003c0a3e
 801c4e0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	@ 0xfffffe60
 801c4e4:	00000a3e 	andeq	r0, r0, lr, lsr sl
 801c4e8:	50545448 	subspl	r5, r4, r8, asr #8
 801c4ec:	312e312f 			@ <UNDEFINED> instruction: 0x312e312f
 801c4f0:	20752520 	rsbscs	r2, r5, r0, lsr #10
 801c4f4:	0a0d7325 	beq	8379190 <__init_array_end+0x3599c0>
 801c4f8:	76726553 			@ <UNDEFINED> instruction: 0x76726553
 801c4fc:	203a7265 	eorscs	r7, sl, r5, ror #4
 801c500:	0a0d7325 	beq	837919c <__init_array_end+0x3599cc>
 801c504:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801c508:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801c50c:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801c510:	7325203a 			@ <UNDEFINED> instruction: 0x7325203a
 801c514:	6f430a0d 	svcvs	0x00430a0d
 801c518:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801c51c:	654c2d74 	strbvs	r2, [ip, #-3444]	@ 0xfffff28c
 801c520:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801c524:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801c528:	6f430a0d 	svcvs	0x00430a0d
 801c52c:	63656e6e 	cmnvs	r5, #1760	@ 0x6e0
 801c530:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801c534:	6c63203a 	stclvs	0, cr2, [r3], #-232	@ 0xffffff18
 801c538:	0d65736f 	stcleq	3, cr7, [r5, #-444]!	@ 0xfffffe44
 801c53c:	000a0d0a 	andeq	r0, sl, sl, lsl #26
 801c540:	54705f73 	ldrbtpl	r5, [r0], #-3955	@ 0xfffff08d
 801c544:	20736968 	rsbscs	r6, r3, r8, ror #18
 801c548:	6e203d21 	cdpvs	13, 2, cr3, cr0, cr1, {1}
 801c54c:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801c550:	00007274 	andeq	r7, r0, r4, ror r2
 801c554:	00746547 	rsbseq	r6, r4, r7, asr #10
 801c558:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801c55c:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801c560:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801c564:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801c568:	6f63786d 	svcvs	0x0063786d
 801c56c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801c570:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801c574:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801c578:	00000068 	andeq	r0, r0, r8, rrx
 801c57c:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801c580:	6f63206c 	svcvs	0x0063206c
 801c584:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801c588:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801c58c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801c590:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 801c594:	20202065 	eorcs	r2, r0, r5, rrx
 801c598:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c59c:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801c5a0:	3c205d64 	stccc	13, cr5, [r0], #-400	@ 0xfffffe70
 801c5a4:	6c206425 	cfstrsvs	mvf6, [r0], #-148	@ 0xffffff6c
 801c5a8:	2f736465 	svccs	0x00736465
 801c5ac:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801c5b0:	000a3e6c 	andeq	r3, sl, ip, ror #28
 801c5b4:	756f4320 	strbvc	r4, [pc, #-800]!	@ 801c29c <RemoteConfig::s_TXT+0xc0>
 801c5b8:	2020746e 	eorcs	r7, r0, lr, ror #8
 801c5bc:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c5c0:	00000a64 	andeq	r0, r0, r4, ror #20
 801c5c4:	70614d20 	rsbvc	r4, r1, r0, lsr #26
 801c5c8:	676e6970 			@ <UNDEFINED> instruction: 0x676e6970
 801c5cc:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c5d0:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801c5d4:	000a5d64 	andeq	r5, sl, r4, ror #26
 801c5d8:	48305420 	ldmdami	r0!, {r5, sl, ip, lr}
 801c5dc:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c5e0:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c5e4:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801c5e8:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801c5ec:	000a5d58 	andeq	r5, sl, r8, asr sp
 801c5f0:	48315420 	ldmdami	r1!, {r5, sl, ip, lr}
 801c5f4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c5f8:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c5fc:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801c600:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801c604:	000a5d58 	andeq	r5, sl, r8, asr sp
 801c608:	6f6c4720 	svcvs	0x006c4720
 801c60c:	426c6162 	rsbmi	r6, ip, #-2147483624	@ 0x80000018
 801c610:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801c614:	73656e74 	cmnvc	r5, #116, 28	@ 0x740
 801c618:	25203a73 	strcs	r3, [r0, #-2675]!	@ 0xfffff58d
 801c61c:	00000a75 	andeq	r0, r0, r5, ror sl
 801c620:	6f6c4320 	svcvs	0x006c4320
 801c624:	20206b63 	eorcs	r6, r0, r3, ror #22
 801c628:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c62c:	7a482075 	bvc	9224808 <__init_array_end+0x1205038>
 801c630:	0000000a 	andeq	r0, r0, sl
 801c634:	66655220 	strbtvs	r5, [r5], -r0, lsr #4
 801c638:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801c63c:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c640:	7a482075 	bvc	922481c <__init_array_end+0x120504c>
 801c644:	0000000a 	andeq	r0, r0, sl
 801c648:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801c64c:	4d44206c 	stclmi	0, cr2, [r4, #-432]	@ 0xfffffe50
 801c650:	6f632058 	svcvs	0x00632058
 801c654:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801c658:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801c65c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801c660:	74754f20 	ldrbtvc	r4, [r5], #-3872	@ 0xfffff0e0
 801c664:	73747570 	cmnvc	r4, #112, 10	@ 0x1c000000
 801c668:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c66c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c670:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801c674:	0000000a 	andeq	r0, r0, sl
 801c678:	6f724720 	svcvs	0x00724720
 801c67c:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 801c680:	6f632067 	svcvs	0x00632067
 801c684:	20746e75 	rsbscs	r6, r4, r5, ror lr
 801c688:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801c68c:	72475b20 	subvc	r5, r7, #32, 22	@ 0x8000
 801c690:	7370756f 	cmnvc	r0, #465567744	@ 0x1bc00000
 801c694:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801c698:	000a5d75 	andeq	r5, sl, r5, ror sp
 801c69c:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801c6a0:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801c6a4:	20207365 	eorcs	r7, r0, r5, ror #6
 801c6a8:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c6ac:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801c6b0:	0000000a 	andeq	r0, r0, sl
 801c6b4:	786d4420 	stmdavc	sp!, {r5, sl, lr}^
 801c6b8:	746f6f46 	strbtvc	r6, [pc], #-3910	@ 801c6c0 <RemoteConfig::s_TXT+0x4e4>
 801c6bc:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 801c6c0:	20202074 	eorcs	r2, r0, r4, ror r0
 801c6c4:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801c6c8:	0000000a 	andeq	r0, r0, sl
 801c6cc:	3a752520 	bcc	9d65b54 <__init_array_end+0x1d46384>
 801c6d0:	253a7525 	ldrcs	r7, [sl, #-1317]!	@ 0xfffffadb
 801c6d4:	75253a75 	strvc	r3, [r5, #-2677]!	@ 0xfffff58b
 801c6d8:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801c6dc:	000a7525 	andeq	r7, sl, r5, lsr #10
 801c6e0:	2f637273 	svccs	0x00637273
 801c6e4:	6d786d64 	ldclvs	13, cr6, [r8, #-400]!	@ 0xfffffe70
 801c6e8:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801c6ec:	3273772f 	rsbscc	r7, r3, #12320768	@ 0xbc0000
 801c6f0:	64787838 	ldrbtvs	r7, [r8], #-2104	@ 0xfffff7c8
 801c6f4:	756d786d 	strbvc	r7, [sp, #-2157]!	@ 0xfffff793
 801c6f8:	2e69746c 	cdpcs	4, 6, cr7, cr9, cr12, {3}
 801c6fc:	00707063 	rsbseq	r7, r0, r3, rrx
 801c700:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
 801c704:	00000074 	andeq	r0, r0, r4, ror r0
 801c708:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801c70c:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801c710:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801c714:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801c718:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801c71c:	0000000a 	andeq	r0, r0, sl
 801c720:	706f7453 	rsbvc	r7, pc, r3, asr r4	@ <UNPREDICTABLE>
 801c724:	00000000 	andeq	r0, r0, r0
 801c728:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801c72c:	6d447878 	stclvs	8, cr7, [r4, #-480]	@ 0xfffffe20
 801c730:	6c754d78 	ldclvs	13, cr4, [r5], #-480	@ 0xfffffe20
 801c734:	00006974 	andeq	r6, r0, r4, ror r9
 801c738:	203e2d2d 	eorscs	r2, lr, sp, lsr #26
 801c73c:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801c740:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801c744:	0000000a 	andeq	r0, r0, sl
 801c748:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
 801c74c:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801c750:	00000000 	andeq	r0, r0, r0
 801c754:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801c6a4 <RemoteConfig::s_TXT+0x4c8>
 801c758:	772d6269 	strvc	r6, [sp, -r9, ror #4]!
 801c75c:	78383273 	ldmdavc	r8!, {r0, r1, r4, r5, r6, r9, ip, sp}
 801c760:	6e692f78 	mcrvs	15, 3, r2, cr9, cr8, {3}
 801c764:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801c768:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801c76c:	636c6578 	cmnvs	ip, #120, 10	@ 0x1e000000
 801c770:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801c774:	61727567 	cmnvs	r2, r7, ror #10
 801c778:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801c77c:	0000682e 	andeq	r6, r0, lr, lsr #16
 801c780:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 801c784:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801c788:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801c78c:	0000000a 	andeq	r0, r0, sl
 801c790:	74614470 	strbtvc	r4, [r1], #-1136	@ 0xfffffb90
 801c794:	3d212061 	stccc	0, cr2, [r1, #-388]!	@ 0xfffffe7c
 801c798:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801c79c:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801c7a0:	00000000 	andeq	r0, r0, r0
 801c7a4:	44746553 	ldrbtmi	r6, [r4], #-1363	@ 0xfffffaad
 801c7a8:	00617461 	rsbeq	r7, r1, r1, ror #8
 801c7ac:	6e654c6e 	cdpvs	12, 6, cr4, cr5, cr14, {3}
 801c7b0:	20687467 	rsbcs	r7, r8, r7, ror #8
 801c7b4:	6c203d3c 	stcvs	13, cr3, [r0], #-240	@ 0xffffff10
 801c7b8:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801c7bc:	3a746573 	bcc	9d35d90 <__init_array_end+0x1d165c0>
 801c7c0:	786d643a 	stmdavc	sp!, {r1, r3, r4, r5, sl, sp, lr}^
 801c7c4:	4e553a3a 			@ <UNDEFINED> instruction: 0x4e553a3a
 801c7c8:	52455649 	subpl	r5, r5, #76546048	@ 0x4900000
 801c7cc:	535f4553 	cmppl	pc, #348127232	@ 0x14c00000
 801c7d0:	00455a49 	subeq	r5, r5, r9, asr #20
 801c7d4:	4970616d 	ldmdbmi	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 801c7d8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801c7dc:	73203c20 			@ <UNDEFINED> instruction: 0x73203c20
 801c7e0:	6f657a69 	svcvs	0x00657a69
 801c7e4:	68632866 	stmdavs	r3!, {r1, r2, r5, r6, fp, sp}^
 801c7e8:	656e6e61 	strbvs	r6, [lr, #-3681]!	@ 0xfffff19f
 801c7ec:	70614d6c 	rsbvc	r4, r1, ip, ror #26
 801c7f0:	202f2029 	eorcs	r2, pc, r9, lsr #32
 801c7f4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	@ 0xfffff68d
 801c7f8:	6328666f 			@ <UNDEFINED> instruction: 0x6328666f
 801c7fc:	6e6e6168 	powvsez	f6, f6, #0.0
 801c800:	614d6c65 	cmpvs	sp, r5, ror #24
 801c804:	5d305b70 	vldmdbpl	r0!, {d5-<overflow reg d60>}
 801c808:	00000029 	andeq	r0, r0, r9, lsr #32
 801c80c:	00000030 	andeq	r0, r0, r0, lsr r0
 801c810:	7265706f 	rsbvc	r7, r5, #111	@ 0x6f
 801c814:	726f7461 	rsbvc	r7, pc, #1627389952	@ 0x61000000
 801c818:	00002928 	andeq	r2, r0, r8, lsr #18
 801c81c:	6168436e 	cmnvs	r8, lr, ror #6
 801c820:	6c656e6e 	stclvs	14, cr6, [r5], #-440	@ 0xfffffe48
 801c824:	72655073 	rsbvc	r5, r5, #115	@ 0x73
 801c828:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801c82c:	3d3d206c 	ldccc	0, cr2, [sp, #-432]!	@ 0xfffffe50
 801c830:	00003420 	andeq	r3, r0, r0, lsr #8
 801c834:	54527369 	ldrbpl	r7, [r2], #-873	@ 0xfffffc97
 801c838:	6f72505a 	svcvs	0x0072505a
 801c83c:	6f636f74 	svcvs	0x00636f74
 801c840:	0000006c 	andeq	r0, r0, ip, rrx
 801c844:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801c848:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801c84c:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801c850:	524f5020 	subpl	r5, pc, #32
 801c854:	00005354 	andeq	r5, r0, r4, asr r3
 801c858:	63614249 	cmnvs	r1, #-1879048188	@ 0x90000004
 801c85c:	0070756b 	rsbseq	r7, r0, fp, ror #10
 801c860:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801c7b0 <RemoteConfig::s_TXT+0x5d4>
 801c864:	6c2d6269 	sfmvs	f6, 4, [sp], #-420	@ 0xfffffe5c
 801c868:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801c86c:	2f746573 	svccs	0x00746573
 801c870:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801c874:	2f656475 	svccs	0x00656475
 801c878:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 801c87c:	74657374 	strbtvc	r7, [r5], #-884	@ 0xfffffc8c
 801c880:	61746164 	cmnvs	r4, r4, ror #2
 801c884:	0000682e 	andeq	r6, r0, lr, lsr #16
 801c888:	3253577e 	subscc	r5, r3, #33030144	@ 0x1f80000
 801c88c:	4d787838 	ldclmi	8, cr7, [r8, #-224]!	@ 0xffffff20
 801c890:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801c894:	00000000 	andeq	r0, r0, r0
 801c898:	2f637273 	svccs	0x00637273
 801c89c:	32336467 	eorscc	r6, r3, #1728053248	@ 0x67000000
 801c8a0:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 801c8a4:	73772f6f 	cmnvc	r7, #444	@ 0x1bc
 801c8a8:	78783832 	ldmdavc	r8!, {r1, r4, r5, fp, ip, sp}^
 801c8ac:	746c756d 	strbtvc	r7, [ip], #-1389	@ 0xfffffa93
 801c8b0:	70632e69 	rsbvc	r2, r3, r9, ror #28
 801c8b4:	00000070 	andeq	r0, r0, r0, ror r0
 801c8b8:	75746553 	ldrbvc	r6, [r4, #-1363]!	@ 0xfffffaad
 801c8bc:	00000070 	andeq	r0, r0, r0, ror r0
 801c8c0:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801c8c4:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801c8c8:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801c8cc:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801c8d0:	5452203a 	ldrbpl	r2, [r2], #-58	@ 0xffffffc6
 801c8d4:	49545f5a 	ldmdbmi	r4, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 801c8d8:	5f52454d 	svcpl	0x0052454d
 801c8dc:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
 801c8e0:	253d444f 	ldrcs	r4, [sp, #-1103]!	@ 0xfffffbb1
 801c8e4:	6e202c75 	mcrvs	12, 1, r2, cr0, cr5, {3}
 801c8e8:	3d483054 	stclcc	0, cr3, [r8, #-336]	@ 0xfffffeb0
 801c8ec:	202c7525 	eorcs	r7, ip, r5, lsr #10
 801c8f0:	4831546e 	ldmdami	r1!, {r1, r2, r3, r5, r6, sl, ip, lr}
 801c8f4:	0a75253d 	beq	9d65df0 <__init_array_end+0x1d46620>
 801c8f8:	00000000 	andeq	r0, r0, r0
 801c8fc:	2b203128 	blcs	8828da4 <__init_array_end+0x8095d4>
 801c900:	6e5f6d20 	cdpvs	13, 5, cr6, cr15, cr0, {1}
 801c904:	53667542 	cmnpl	r6, #276824064	@ 0x10800000
 801c908:	29657a69 	stmdbcs	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 801c90c:	55203c20 	strpl	r3, [r0, #-3104]!	@ 0xfffff3e0
 801c910:	31544e49 	cmpcc	r4, r9, asr #28
 801c914:	414d5f36 	cmpmi	sp, r6, lsr pc
 801c918:	00000058 	andeq	r0, r0, r8, asr r0
 801c91c:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801c920:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801c924:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801c928:	636c6578 	cmnvs	ip, #120, 10	@ 0x1e000000
 801c92c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801c930:	61727567 	cmnvs	r2, r7, ror #10
 801c934:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801c938:	0000682e 	andeq	r6, r0, lr, lsr #16
 801c93c:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801c940:	00000a6c 	andeq	r0, r0, ip, ror #20
 801c944:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 801c948:	3a202065 	bcc	8824ae4 <__init_array_end+0x805314>
 801c94c:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801c950:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	@ 0xfffffe94
 801c954:	0000000a 	andeq	r0, r0, sl
 801c958:	756f4320 	strbvc	r4, [pc, #-800]!	@ 801c640 <RemoteConfig::s_TXT+0x464>
 801c95c:	3a20746e 	bcc	8839b1c <__init_array_end+0x81a34c>
 801c960:	0a642520 	beq	9925de8 <__init_array_end+0x1906618>
 801c964:	00000000 	andeq	r0, r0, r0
 801c968:	6f6c4320 	svcvs	0x006c4320
 801c96c:	3a206b63 	bcc	8837700 <__init_array_end+0x817f30>
 801c970:	20752520 	rsbscs	r2, r5, r0, lsr #10
 801c974:	000a7a48 	andeq	r7, sl, r8, asr #20
 801c978:	5f767321 	svcpl	0x00767321
 801c97c:	75527369 	ldrbvc	r7, [r2, #-873]	@ 0xfffffc97
 801c980:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 801c984:	00000067 	andeq	r0, r0, r7, rrx
 801c988:	61647055 	qdsubvs	r7, r5, r4
 801c98c:	00006574 	andeq	r6, r0, r4, ror r5
 801c990:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801c994:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801c998:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801c99c:	78697020 	stmdavc	r9!, {r5, ip, sp, lr}^
 801c9a0:	3a3a6c65 	bcc	8eb7b3c <__init_array_end+0xe9836c>
 801c9a4:	54524f50 	ldrbpl	r4, [r2], #-3920	@ 0xfffff0b0
 801c9a8:	554f435f 	strbpl	r4, [pc, #-863]	@ 801c651 <RemoteConfig::s_TXT+0x475>
 801c9ac:	0000544e 	andeq	r5, r0, lr, asr #8
 801c9b0:	43746553 	cmnmi	r4, #348127232	@ 0x14c00000
 801c9b4:	756f6c6f 	strbvc	r6, [pc, #-3183]!	@ 801bd4d <_etext+0x12e1>
 801c9b8:	5a545272 	bpl	9531388 <__init_array_end+0x1511bb8>
 801c9bc:	00000000 	andeq	r0, r0, r0
 801c9c0:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801c9c4:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801c9c8:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801c9cc:	00363120 	eorseq	r3, r6, r0, lsr #2
 801c9d0:	43746553 	cmnmi	r4, #348127232	@ 0x14c00000
 801c9d4:	756f6c6f 	strbvc	r6, [pc, #-3183]!	@ 801bd6d <_etext+0x1301>
 801c9d8:	32535772 	subscc	r5, r3, #29884416	@ 0x1c80000
 801c9dc:	00313038 	eorseq	r3, r1, r8, lsr r0
 801c9e0:	7869506e 	stmdavc	r9!, {r1, r2, r3, r5, r6, ip, lr}^
 801c9e4:	6e496c65 	cdpvs	12, 4, cr6, cr9, cr5, {3}
 801c9e8:	20786564 	rsbscs	r6, r8, r4, ror #10
 801c9ec:	5f6d203c 	svcpl	0x006d203c
 801c9f0:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
 801c9f4:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801c9f8:	38202f20 	stmdacc	r0!, {r5, r8, r9, sl, fp, sp}
 801c9fc:	00000000 	andeq	r0, r0, r0
 801ca00:	50746553 	rsbspl	r6, r4, r3, asr r5
 801ca04:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801ca08:	74794234 	ldrbtvc	r4, [r9], #-564	@ 0xfffffdcc
 801ca0c:	00007365 	andeq	r7, r0, r5, ror #6
 801ca10:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801ca14:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801ca18:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801ca1c:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801ca20:	466e203a 			@ <UNDEFINED> instruction: 0x466e203a
 801ca24:	75716572 	ldrbvc	r6, [r1, #-1394]!	@ 0xfffffa8e
 801ca28:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801ca2c:	2c75253d 	cfldr64cs	mvdx2, [r5], #-244	@ 0xffffff0c
 801ca30:	69546e20 	ldmdbvs	r4, {r5, r9, sl, fp, sp, lr}^
 801ca34:	72656b63 	rsbvc	r6, r5, #101376	@ 0x18c00
 801ca38:	0a75253d 	beq	9d65f34 <__init_array_end+0x1d46764>
 801ca3c:	00000000 	andeq	r0, r0, r0
 801ca40:	546e2828 	strbtpl	r2, [lr], #-2088	@ 0xfffff7d8
 801ca44:	656b6369 	strbvs	r6, [fp, #-873]!	@ 0xfffffc97
 801ca48:	202f2072 	eorcs	r2, pc, r2, ror r0	@ <UNPREDICTABLE>
 801ca4c:	2d202932 			@ <UNDEFINED> instruction: 0x2d202932
 801ca50:	20293120 	eorcs	r3, r9, r0, lsr #2
 801ca54:	4955203c 	ldmdbmi	r5, {r2, r3, r4, r5, sp}^
 801ca58:	3631544e 	ldrtcc	r5, [r1], -lr, asr #8
 801ca5c:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
 801ca60:	00000000 	andeq	r0, r0, r0
 801ca64:	546e2828 	strbtpl	r2, [lr], #-2088	@ 0xfffff7d8
 801ca68:	656b6369 	strbvs	r6, [fp, #-873]!	@ 0xfffffc97
 801ca6c:	202f2072 	eorcs	r2, pc, r2, ror r0	@ <UNPREDICTABLE>
 801ca70:	2d202934 			@ <UNDEFINED> instruction: 0x2d202934
 801ca74:	20293120 	eorcs	r3, r9, r0, lsr #2
 801ca78:	4955203c 	ldmdbmi	r5, {r2, r3, r4, r5, sp}^
 801ca7c:	3631544e 	ldrtcc	r5, [r1], -lr, asr #8
 801ca80:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
 801ca84:	00000000 	andeq	r0, r0, r0
 801ca88:	426e5f6d 	rsbmi	r5, lr, #436	@ 0x1b4
 801ca8c:	69536675 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
 801ca90:	3c20657a 	cfstr32cc	mvfx6, [r0], #-488	@ 0xfffffe18
 801ca94:	4e495520 	cdpmi	5, 4, cr5, cr9, cr0, {1}
 801ca98:	5f363154 	svcpl	0x00363154
 801ca9c:	0058414d 	subseq	r4, r8, sp, asr #2
 801caa0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801caa4:	754d7878 	strbvc	r7, [sp, #-2168]	@ 0xfffff788
 801caa8:	0069746c 	rsbeq	r7, r9, ip, ror #8
 801caac:	54705f73 	ldrbtpl	r5, [r0], #-3955	@ 0xfffff08d
 801cab0:	20736968 	rsbscs	r6, r3, r8, ror #18
 801cab4:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
 801cab8:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801cabc:	00007274 	andeq	r7, r0, r4, ror r2
 801cac0:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cac4:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801cac8:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801cacc:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801cad0:	4f50203a 	svcmi	0x0050203a
 801cad4:	435f5452 	cmpmi	pc, #1375731712	@ 0x52000000
 801cad8:	544e554f 	strbpl	r5, [lr], #-1359	@ 0xfffffab1
 801cadc:	0a75253d 	beq	9d65fd8 <__init_array_end+0x1d46808>
 801cae0:	00000000 	andeq	r0, r0, r0
 801cae4:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cae8:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801caec:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801caf0:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801caf4:	414d203a 	cmpmi	sp, sl, lsr r0
 801caf8:	50415f58 	subpl	r5, r1, r8, asr pc
 801cafc:	32303141 	eorscc	r3, r0, #1073741840	@ 0x40000010
 801cb00:	0a75253d 	beq	9d65ffc <__init_array_end+0x1d4682c>
 801cb04:	00000000 	andeq	r0, r0, r0
 801cb08:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cb0c:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801cb10:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801cb14:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801cb18:	5f73203a 	svcpl	0x0073203a
 801cb1c:	42616d44 	rsbmi	r6, r1, #68, 26	@ 0x1100
 801cb20:	65666675 	strbvs	r6, [r6, #-1653]!	@ 0xfffff98b
 801cb24:	70253d72 	eorvc	r3, r5, r2, ror sp
 801cb28:	5f73202c 	svcpl	0x0073202c
 801cb2c:	66754270 			@ <UNDEFINED> instruction: 0x66754270
 801cb30:	3d726566 	cfldr64cc	mvdx6, [r2, #-408]!	@ 0xfffffe68
 801cb34:	000a7025 	andeq	r7, sl, r5, lsr #32
 801cb38:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cb3c:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801cb40:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801cb44:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801cb48:	5f6d203a 	svcpl	0x006d203a
 801cb4c:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
 801cb50:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801cb54:	2075253d 	rsbscs	r2, r5, sp, lsr r5
 801cb58:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	@ 0xfffffe94
 801cb5c:	0000000a 	andeq	r0, r0, sl
 801cb60:	426e5f6d 	rsbmi	r5, lr, #436	@ 0x1b4
 801cb64:	69536675 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
 801cb68:	3c20657a 	cfstr32cc	mvfx6, [r0], #-488	@ 0xfffffe18
 801cb6c:	6970203d 	ldmdbvs	r0!, {r0, r2, r3, r4, r5, sp}^
 801cb70:	3a6c6578 	bcc	9b36158 <__init_array_end+0x1b16988>
 801cb74:	414d443a 	cmpmi	sp, sl, lsr r4
 801cb78:	4655425f 			@ <UNDEFINED> instruction: 0x4655425f
 801cb7c:	5f524546 	svcpl	0x00524546
 801cb80:	455a4953 	ldrbmi	r4, [sl, #-2387]	@ 0xfffff6ad
 801cb84:	00000000 	andeq	r0, r0, r0
 801cb88:	63616c42 	cmnvs	r1, #16896	@ 0x4200
 801cb8c:	74756f6b 	ldrbtvc	r6, [r5], #-3947	@ 0xfffff095
 801cb90:	00000000 	andeq	r0, r0, r0
 801cb94:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801cb98:	203d3d20 	eorscs	r3, sp, r0, lsr #26
 801cb9c:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801cba0:	543a3a6c 	ldrtpl	r3, [sl], #-2668	@ 0xfffff594
 801cba4:	3a657079 	bcc	9978d90 <__init_array_end+0x19595c0>
 801cba8:	3253573a 	subscc	r5, r3, #15204352	@ 0xe80000
 801cbac:	00313038 	eorseq	r3, r1, r8, lsr r0
 801cbb0:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	@ 0xfffffee8
 801cbb4:	00006e4f 	andeq	r6, r0, pc, asr #28
 801cbb8:	74666f53 	strbtvc	r6, [r6], #-3923	@ 0xfffff0ad
 801cbbc:	65726177 	ldrbvs	r6, [r2, #-375]!	@ 0xfffffe89
 801cbc0:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801cbc4:	64644172 	strbtvs	r4, [r4], #-370	@ 0xfffffe8e
 801cbc8:	0000000a 	andeq	r0, r0, sl
 801cbcc:	72746552 	rsbsvc	r6, r4, #343932928	@ 0x14800000
 801cbd0:	726f2079 	rsbvc	r2, pc, #121	@ 0x79
 801cbd4:	65757120 	ldrbvs	r7, [r5, #-288]!	@ 0xfffffee0
 801cbd8:	74206575 	strtvc	r6, [r0], #-1397	@ 0xfffffa8b
 801cbdc:	64206568 	strtvs	r6, [r0], #-1384	@ 0xfffffa98
 801cbe0:	20617461 	rsbcs	r7, r1, r1, ror #8
 801cbe4:	20726f66 	rsbscs	r6, r2, r6, ror #30
 801cbe8:	6574616c 	ldrbvs	r6, [r4, #-364]!	@ 0xfffffe94
 801cbec:	72742072 	rsbsvc	r2, r4, #114	@ 0x72
 801cbf0:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	@ 0xfffffe7c
 801cbf4:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 801cbf8:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801cbfc:	69626e75 	stmdbvs	r2!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 801cc00:	000a646e 	andeq	r6, sl, lr, ror #8

0801cc04 <s_contentType>:
 801cc04:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801cc08:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801cc0c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801cc24:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801cc28:	7373632f 	cmnvc	r3, #-1140850688	@ 0xbc000000
	...
 801cc44:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801cc48:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801cc4c:	72637361 	rsbvc	r7, r3, #-2080374783	@ 0x84000001
 801cc50:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801cc64:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801cc68:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801cc6c:	2f6e6f69 	svccs	0x006e6f69
 801cc70:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...
 801cc84:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801cc88:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801cc8c:	2f6e6f69 	svccs	0x006e6f69
 801cc90:	6574636f 	ldrbvs	r6, [r4, #-879]!	@ 0xfffffc91
 801cc94:	74732d74 	ldrbtvc	r2, [r3], #-3444	@ 0xfffff28c
 801cc98:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	@ 0xfffffe38
	...

0801cca4 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801cca4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801cca8:	5f79616c 	svcpl	0x0079616c
 801ccac:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
	...

0801ccb1 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 801ccb1:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801ccb5:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801ccb9:	6f746361 	svcvs	0x00746361
 801ccbd:	 	strvs	r7, [r0, #-2418]	@ 0xfffff68e

0801ccc0 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801ccc0:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801ccc4:	755f656c 	ldrbvc	r6, [pc, #-1388]	@ 801c760 <RemoteConfig::s_TXT+0x584>
 801ccc8:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	@ 0xfffffe40
 801cccc:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801ccce <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 801ccce:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801ccd2:	725f656c 	subsvc	r6, pc, #108, 10	@ 0x1b000000
 801ccd6:	6f6f6265 	svcvs	0x006f6265
 801ccda:	 	stmdbvs	r4!, {r2, r4, r5, r6}^

0801ccdc <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 801ccdc:	61736964 	cmnvs	r3, r4, ror #18
 801cce0:	5f656c62 	svcpl	0x00656c62
 801cce4:	74697277 	strbtvc	r7, [r9], #-631	@ 0xfffffd89
 801cce8:	 	stmdbvs	r4!, {r0, r2, r5, r6}^

0801ccea <RemoteConfigConst::PARAMS_DISABLE>:
 801ccea:	61736964 	cmnvs	r3, r4, ror #18
 801ccee:	00656c62 	rsbeq	r6, r5, r2, ror #24

0801ccf2 <RemoteConfigConst::PARAMS_FILE_NAME>:
 801ccf2:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 801ccf6:	2e676966 	vnmulcs.f16	s13, s14, s13	@ <UNPREDICTABLE>
 801ccfa:	00747874 	rsbseq	r7, r4, r4, ror r8
	...

0801cd00 <HttpContent>:
 801cd00:	0801b4ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, ip, sp, pc}
 801cd04:	0801e4d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, sp, lr, pc}
 801cd08:	00000551 	andeq	r0, r0, r1, asr r5
 801cd0c:	00000002 	andeq	r0, r0, r2
 801cd10:	0801b4f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, sl, ip, sp, pc}
 801cd14:	0801e013 	stmdaeq	r1, {r0, r1, r4, sp, lr, pc}
 801cd18:	000004c3 	andeq	r0, r0, r3, asr #9
 801cd1c:	00000002 	andeq	r0, r0, r2
 801cd20:	0801b4fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl, ip, sp, pc}
 801cd24:	0801de79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl, fp, ip, lr, pc}
 801cd28:	00000199 	muleq	r0, r9, r1
 801cd2c:	00000001 	andeq	r0, r0, r1
 801cd30:	0801b509 	stmdaeq	r1, {r0, r3, r8, sl, ip, sp, pc}
 801cd34:	0801da04 	stmdaeq	r1, {r2, r9, fp, ip, lr, pc}
 801cd38:	00000474 	andeq	r0, r0, r4, ror r4
 801cd3c:	00000002 	andeq	r0, r0, r2
 801cd40:	0801b512 	stmdaeq	r1, {r1, r4, r8, sl, ip, sp, pc}
 801cd44:	0801d737 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, sl, ip, lr, pc}
 801cd48:	000002cc 	andeq	r0, r0, ip, asr #5
 801cd4c:	00000002 	andeq	r0, r0, r2
 801cd50:	0801b51a 	stmdaeq	r1, {r1, r3, r4, r8, sl, ip, sp, pc}
 801cd54:	0801d638 	stmdaeq	r1, {r3, r4, r5, r9, sl, ip, lr, pc}
 801cd58:	000000fe 	strdeq	r0, [r0], -lr
 801cd5c:	00000002 	andeq	r0, r0, r2
 801cd60:	0801b525 	stmdaeq	r1, {r0, r2, r5, r8, sl, ip, sp, pc}
 801cd64:	0801d4b1 	stmdaeq	r1, {r0, r4, r5, r7, sl, ip, lr, pc}
 801cd68:	00000186 	andeq	r0, r0, r6, lsl #3
 801cd6c:	00000002 	andeq	r0, r0, r2
 801cd70:	0801b52d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, ip, sp, pc}
 801cd74:	0801d213 	stmdaeq	r1, {r0, r1, r4, r9, ip, lr, pc}
 801cd78:	0000029d 	muleq	r0, sp, r2
 801cd7c:	00000000 	andeq	r0, r0, r0
 801cd80:	0801b538 	stmdaeq	r1, {r3, r4, r5, r8, sl, ip, sp, pc}
 801cd84:	0801cfbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, sl, fp, lr, pc}
 801cd88:	00000257 	andeq	r0, r0, r7, asr r2
 801cd8c:	00000000 	andeq	r0, r0, r0
 801cd90:	0801b542 	stmdaeq	r1, {r1, r6, r8, sl, ip, sp, pc}
 801cd94:	0801cda0 	stmdaeq	r1, {r5, r7, r8, sl, fp, lr, pc}
 801cd98:	0000021a 	andeq	r0, r0, sl, lsl r2
 801cd9c:	00000000 	andeq	r0, r0, r0

0801cda0 <dmx_html>:
 801cda0:	4f44213c 	svcmi	0x0044213c
 801cda4:	50595443 	subspl	r5, r9, r3, asr #8
 801cda8:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801cdac:	0a3e6c6d 	beq	8fb7f68 <__init_array_end+0xf98798>
 801cdb0:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801cdb4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801cdb8:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801cdbc:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801cdc0:	72206b6e 	eorvc	r6, r0, #112640	@ 0x1b800
 801cdc4:	223d6c65 	eorscs	r6, sp, #25856	@ 0x6500
 801cdc8:	6c797473 	cfldrdvs	mvd7, [r9], #-460	@ 0xfffffe34
 801cdcc:	65687365 	strbvs	r7, [r8, #-869]!	@ 0xfffffc9b
 801cdd0:	20227465 	eorcs	r7, r2, r5, ror #8
 801cdd4:	66657268 	strbtvs	r7, [r5], -r8, ror #4
 801cdd8:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801cddc:	73656c79 	cmnvc	r5, #30976	@ 0x7900
 801cde0:	7373632e 	cmnvc	r3, #-1207959552	@ 0xb8000000
 801cde4:	3e2f2022 	cdpcc	0, 2, cr2, cr15, cr2, {1}
 801cde8:	7469743c 	strbtvc	r7, [r9], #-1084	@ 0xfffffbc4
 801cdec:	443e656c 	ldrtmi	r6, [lr], #-1388	@ 0xfffffa94
 801cdf0:	2f3c584d 	svccs	0x003c584d
 801cdf4:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 801cdf8:	2f3c3e65 	svccs	0x003c3e65
 801cdfc:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801ce00:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801ce04:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801ce08:	65683c0a 	strbvs	r3, [r8, #-3082]!	@ 0xfffff3f6
 801ce0c:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801ce10:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	@ 0xffffff08
 801ce14:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801ce18:	4c646922 			@ <UNDEFINED> instruction: 0x4c646922
 801ce1c:	22747369 	rsbscs	r7, r4, #-1543503871	@ 0xa4000001
 801ce20:	752f3c3e 	strvc	r3, [pc, #-3134]!	@ 801c1ea <RemoteConfig::s_TXT+0xe>
 801ce24:	2f3c3e6c 	svccs	0x003c3e6c
 801ce28:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801ce2c:	0a3e7265 	beq	8fb97c8 <__init_array_end+0xf99ff8>
 801ce30:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801ce34:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801ce38:	6f206e6f 	svcvs	0x00206e6f
 801ce3c:	696c636e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801ce40:	223d6b63 	eorscs	r6, sp, #101376	@ 0x18c00
 801ce44:	72666572 	rsbvc	r6, r6, #478150656	@ 0x1c800000
 801ce48:	28687365 	stmdacs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
 801ce4c:	523e2229 	eorspl	r2, lr, #-1879048190	@ 0x90000002
 801ce50:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801ce54:	2f3c6873 	svccs	0x003c6873
 801ce58:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801ce5c:	3c3e6e6f 	ldccc	14, cr6, [lr], #-444	@ 0xfffffe44
 801ce60:	0a3e702f 	beq	8fb8f24 <__init_array_end+0xf99754>
 801ce64:	7669643c 			@ <UNDEFINED> instruction: 0x7669643c
 801ce68:	616c6320 	cmnvs	ip, r0, lsr #6
 801ce6c:	223d7373 	eorscs	r7, sp, #-872415231	@ 0xcc000001
 801ce70:	74617473 	strbtvc	r7, [r1], #-1139	@ 0xfffffb8d
 801ce74:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	@ 0xfffffe34
 801ce78:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
 801ce7c:	64692065 	strbtvs	r2, [r9], #-101	@ 0xffffff9b
 801ce80:	6469223d 	strbtvs	r2, [r9], #-573	@ 0xfffffdc3
 801ce84:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
 801ce88:	62202273 	eorvs	r2, r0, #805306375	@ 0x30000007
 801ce8c:	6564726f 	strbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801ce90:	31273d72 			@ <UNDEFINED> instruction: 0x31273d72
 801ce94:	2f3c3e27 	svccs	0x003c3e27
 801ce98:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
 801ce9c:	2f3c3e65 	svccs	0x003c3e65
 801cea0:	3e766964 	vsubcc.f16	s13, s12, s9	@ <UNPREDICTABLE>
 801cea4:	69643c0a 	stmdbvs	r4!, {r1, r3, sl, fp, ip, sp}^
 801cea8:	6c632076 	stclvs	0, cr2, [r3], #-472	@ 0xfffffe28
 801ceac:	3d737361 	ldclcc	3, cr7, [r3, #-388]!	@ 0xfffffe7c
 801ceb0:	726f7022 	rsbvc	r7, pc, #34	@ 0x22
 801ceb4:	3e227374 	mcrcc	3, 1, r7, cr2, cr4, {3}
 801ceb8:	6261743c 	rsbvs	r7, r1, #60, 8	@ 0x3c000000
 801cebc:	6920656c 	stmdbvs	r0!, {r2, r3, r5, r6, r8, sl, sp, lr}
 801cec0:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801cec4:	726f5064 	rsbvc	r5, pc, #100	@ 0x64
 801cec8:	20227374 	eorcs	r7, r2, r4, ror r3
 801cecc:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 801ced0:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 801ced4:	3c3e2731 	ldccc	7, cr2, [lr], #-196	@ 0xffffff3c
 801ced8:	6261742f 	rsbvs	r7, r1, #788529152	@ 0x2f000000
 801cedc:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	@ 0xfffffe50
 801cee0:	7669642f 	strbtvc	r6, [r9], -pc, lsr #8
 801cee4:	663c0a3e 			@ <UNDEFINED> instruction: 0x663c0a3e
 801cee8:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	@ 0xfffff091
 801ceec:	753c3e72 	ldrvc	r3, [ip, #-3698]!	@ 0xfffff18e
 801cef0:	6469206c 	strbtvs	r2, [r9], #-108	@ 0xffffff94
 801cef4:	6469223d 	strbtvs	r2, [r9], #-573	@ 0xfffffdc3
 801cef8:	73726556 	cmnvc	r2, #360710144	@ 0x15800000
 801cefc:	226e6f69 	rsbcs	r6, lr, #420	@ 0x1a4
 801cf00:	752f3c3e 	strvc	r3, [pc, #-3134]!	@ 801c2ca <RemoteConfig::s_TXT+0xee>
 801cf04:	2f3c3e6c 	svccs	0x003c3e6c
 801cf08:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801cf10 <dmx_html+0x170>
 801cf0c:	0a3e7265 	beq	8fb98a8 <__init_array_end+0xf9a0d8>
 801cf10:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801cf14:	20747069 	rsbscs	r7, r4, r9, rrx
 801cf18:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801cf1c:	61747322 	cmnvs	r4, r2, lsr #6
 801cf20:	2e636974 			@ <UNDEFINED> instruction: 0x2e636974
 801cf24:	2022736a 	eorcs	r7, r2, sl, ror #6
 801cf28:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801cf2c:	6574223d 	ldrbvs	r2, [r4, #-573]!	@ 0xfffffdc3
 801cf30:	6a2f7478 	bvs	8bfa118 <__init_array_end+0xbda948>
 801cf34:	73617661 	cmnvc	r1, #101711872	@ 0x6100000
 801cf38:	70697263 	rsbvc	r7, r9, r3, ror #4
 801cf3c:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801cf40:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801cf44:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801cf48:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801cf4c:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801cf50:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801cf54:	6d64223d 	sfmvs	f2, 2, [r4, #-244]!	@ 0xffffff0c
 801cf58:	736a2e78 	cmnvc	sl, #120, 28	@ 0x780
 801cf5c:	79742022 	ldmdbvc	r4!, {r1, r5, sp}^
 801cf60:	223d6570 	eorscs	r6, sp, #112, 10	@ 0x1c000000
 801cf64:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801cf68:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801cf6c:	72637361 	rsbvc	r7, r3, #-2080374783	@ 0x84000001
 801cf70:	22747069 	rsbscs	r7, r4, #105	@ 0x69
 801cf74:	732f3c3e 			@ <UNDEFINED> instruction: 0x732f3c3e
 801cf78:	70697263 	rsbvc	r7, r9, r3, ror #4
 801cf7c:	3c0a3e74 	stccc	14, cr3, [sl], {116}	@ 0x74
 801cf80:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801cf84:	6c3e7470 	cfldrsvs	mvf7, [lr], #-448	@ 0xfffffe40
 801cf88:	28747369 	ldmdacs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 801cf8c:	65763b29 	ldrbvs	r3, [r6, #-2857]!	@ 0xfffff4d7
 801cf90:	6f697372 	svcvs	0x00697372
 801cf94:	3b29286e 	blcc	8a67154 <__init_array_end+0xa47984>
 801cf98:	72666572 	rsbvc	r6, r6, #478150656	@ 0x1c800000
 801cf9c:	28687365 	stmdacs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
 801cfa0:	732f3c29 			@ <UNDEFINED> instruction: 0x732f3c29
 801cfa4:	70697263 	rsbvc	r7, r9, r3, ror #4
 801cfa8:	3c0a3e74 	stccc	14, cr3, [sl], {116}	@ 0x74
 801cfac:	646f622f 	strbtvs	r6, [pc], #-559	@ 801cfb4 <dmx_html+0x214>
 801cfb0:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801cfb4:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801cfb8:	 	stccc	14, cr3, [r0], {108}	@ 0x6c

0801cfbb <time_html>:
 801cfbb:	4f44213c 	svcmi	0x0044213c
 801cfbf:	50595443 	subspl	r5, r9, r3, asr #8
 801cfc3:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801cfc7:	0a3e6c6d 	beq	8fb8183 <__init_array_end+0xf989b3>
 801cfcb:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801cfcf:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801cfd3:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801cfd7:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801cfdb:	72206b6e 	eorvc	r6, r0, #112640	@ 0x1b800
 801cfdf:	223d6c65 	eorscs	r6, sp, #25856	@ 0x6500
 801cfe3:	6c797473 	cfldrdvs	mvd7, [r9], #-460	@ 0xfffffe34
 801cfe7:	65687365 	strbvs	r7, [r8, #-869]!	@ 0xfffffc9b
 801cfeb:	20227465 	eorcs	r7, r2, r5, ror #8
 801cfef:	66657268 	strbtvs	r7, [r5], -r8, ror #4
 801cff3:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801cff7:	73656c79 	cmnvc	r5, #30976	@ 0x7900
 801cffb:	7373632e 	cmnvc	r3, #-1207959552	@ 0xb8000000
 801cfff:	3e2f2022 	cdpcc	0, 2, cr2, cr15, cr2, {1}
 801d003:	7469743c 	strbtvc	r7, [r9], #-1084	@ 0xfffffbc4
 801d007:	4e3e656c 	cdpmi	5, 3, cr6, cr14, cr12, {3}
 801d00b:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801d00f:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801d013:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801d017:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801d01b:	65682f3c 	strbvs	r2, [r8, #-3900]!	@ 0xfffff0c4
 801d01f:	0a3e6461 	beq	8fb61ab <__init_array_end+0xf969db>
 801d023:	646f623c 	strbtvs	r6, [pc], #-572	@ 801d02b <time_html+0x70>
 801d027:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801d02b:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d02f:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801d033:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801d037:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d03b:	73694c64 	cmnvc	r9, #100, 24	@ 0x6400
 801d03f:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801d043:	3e6c752f 	cdpcc	5, 6, cr7, cr12, cr15, {1}
 801d047:	65682f3c 	strbvs	r2, [r8, #-3900]!	@ 0xfffff0c4
 801d04b:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801d04f:	703c0a3e 	eorsvc	r0, ip, lr, lsr sl
 801d053:	75623c3e 	strbvc	r3, [r2, #-3134]!	@ 0xfffff3c2
 801d057:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801d05b:	636e6f20 	cmnvs	lr, #32, 30	@ 0x80
 801d05f:	6b63696c 	blvs	98f7617 <__init_array_end+0x18d7e47>
 801d063:	6572223d 	ldrbvs	r2, [r2, #-573]!	@ 0xfffffdc3
 801d067:	73657266 	cmnvc	r5, #1610612742	@ 0x60000006
 801d06b:	22292868 	eorcs	r2, r9, #104, 16	@ 0x680000
 801d06f:	6665523e 			@ <UNDEFINED> instruction: 0x6665523e
 801d073:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801d077:	75622f3c 	strbvc	r2, [r2, #-3900]!	@ 0xfffff0c4
 801d07b:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801d07f:	702f3c3e 	eorvc	r3, pc, lr, lsr ip	@ <UNPREDICTABLE>
 801d083:	703c0a3e 	eorsvc	r0, ip, lr, lsr sl
 801d087:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801d08b:	646f6e22 	strbtvs	r6, [pc], #-3618	@ 801d093 <time_html+0xd8>
 801d08f:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	@ 0xfffffe6c
 801d093:	4e3e2265 	cdpmi	2, 3, cr2, cr14, cr5, {3}
 801d097:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801d09b:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801d09f:	6c697720 	stclvs	7, cr7, [r9], #-128	@ 0xffffff80
 801d0a3:	6562206c 	strbvs	r2, [r2, #-108]!	@ 0xffffff94
 801d0a7:	73696420 	cmnvc	r9, #32, 8	@ 0x20000000
 801d0ab:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801d0af:	68206465 	stmdavs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 801d0b3:	3c657265 	sfmcc	f7, 2, [r5], #-404	@ 0xfffffe6c
 801d0b7:	0a3e702f 	beq	8fb917b <__init_array_end+0xf999ab>
 801d0bb:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801d0bf:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801d0c3:	6f206e6f 	svcvs	0x00206e6f
 801d0c7:	696c636e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801d0cb:	223d6b63 	eorscs	r6, sp, #101376	@ 0x18c00
 801d0cf:	636e7973 	cmnvs	lr, #1884160	@ 0x1cc000
 801d0d3:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 801d0d7:	61636f4c 	cmnvs	r3, ip, asr #30
 801d0db:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	@ 0xfffffe50
 801d0df:	22292865 	eorcs	r2, r9, #6619136	@ 0x650000
 801d0e3:	6e79533e 	mrcvs	3, 3, r5, cr9, cr14, {1}
 801d0e7:	69772063 	ldmdbvs	r7!, {r0, r1, r5, r6, sp}^
 801d0eb:	4c206874 	stcmi	8, cr6, [r0], #-464	@ 0xfffffe30
 801d0ef:	6c61636f 	stclvs	3, cr6, [r1], #-444	@ 0xfffffe44
 801d0f3:	6d695420 	cfstrdvs	mvd5, [r9, #-128]!	@ 0xffffff80
 801d0f7:	622f3c65 	eorvs	r3, pc, #25856	@ 0x6500
 801d0fb:	6f747475 	svcvs	0x00747475
 801d0ff:	2f3c3e6e 	svccs	0x003c3e6e
 801d103:	3c0a3e70 	stccc	14, cr3, [sl], {112}	@ 0x70
 801d107:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801d10f <time_html+0x154>
 801d10b:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801d10f:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801d113:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d117:	72655664 	rsbvc	r5, r5, #100, 12	@ 0x6400000
 801d11b:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801d11f:	2f3c3e22 	svccs	0x003c3e22
 801d123:	3c3e6c75 	ldccc	12, cr6, [lr], #-468	@ 0xfffffe2c
 801d127:	6f6f662f 	svcvs	0x006f662f
 801d12b:	3e726574 	mrccc	5, 3, r6, cr2, cr4, {3}
 801d12f:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801d133:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d137:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801d13b:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801d13f:	63697461 	cmnvs	r9, #1627389952	@ 0x61000000
 801d143:	22736a2e 	rsbscs	r6, r3, #188416	@ 0x2e000
 801d147:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801d14b:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801d14f:	2f747865 	svccs	0x00747865
 801d153:	6176616a 	cmnvs	r6, sl, ror #2
 801d157:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d15b:	3e227470 	mcrcc	4, 1, r7, cr2, cr0, {3}
 801d15f:	63732f3c 	cmnvs	r3, #60, 30	@ 0xf0
 801d163:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d167:	733c0a3e 	teqvc	ip, #253952	@ 0x3e000
 801d16b:	70697263 	rsbvc	r7, r9, r3, ror #4
 801d16f:	72732074 	rsbsvc	r2, r3, #116	@ 0x74
 801d173:	64223d63 	strtvs	r3, [r2], #-3427	@ 0xfffff29d
 801d177:	2e657461 	cdpcs	4, 6, cr7, cr5, cr1, {3}
 801d17b:	2022736a 	eorcs	r7, r2, sl, ror #6
 801d17f:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801d183:	6574223d 	ldrbvs	r2, [r4, #-573]!	@ 0xfffffdc3
 801d187:	6a2f7478 	bvs	8bfa36f <__init_array_end+0xbdab9f>
 801d18b:	73617661 	cmnvc	r1, #101711872	@ 0x6100000
 801d18f:	70697263 	rsbvc	r7, r9, r3, ror #4
 801d193:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801d197:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801d19b:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801d19f:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801d1a3:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d1a7:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801d1ab:	6974223d 	ldmdbvs	r4!, {r0, r2, r3, r4, r5, r9, sp}^
 801d1af:	6a2e656d 	bvs	8bb676b <__init_array_end+0xb96f9b>
 801d1b3:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801d1b7:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801d1bb:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801d1bf:	616a2f74 	smcvs	41716	@ 0xa2f4
 801d1c3:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801d1c7:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d1cb:	2f3c3e22 	svccs	0x003c3e22
 801d1cf:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d1d3:	0a3e7470 	beq	8fba39b <__init_array_end+0xf9abcb>
 801d1d7:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801d1db:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801d1df:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801d1e3:	763b2928 	ldrtvc	r2, [fp], -r8, lsr #18
 801d1e7:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801d1eb:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801d1ef:	6665723b 			@ <UNDEFINED> instruction: 0x6665723b
 801d1f3:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801d1f7:	2f3c2928 	svccs	0x003c2928
 801d1fb:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d1ff:	0a3e7470 	beq	8fba3c7 <__init_array_end+0xf9abf7>
 801d203:	6f622f3c 	svcvs	0x00622f3c
 801d207:	0a3e7964 	beq	8fbb79f <__init_array_end+0xf9bfcf>
 801d20b:	74682f3c 	strbtvc	r2, [r8], #-3900	@ 0xfffff0c4
 801d20f:	003e6c6d 	eorseq	r6, lr, sp, ror #24

0801d213 <index_html>:
 801d213:	4f44213c 	svcmi	0x0044213c
 801d217:	50595443 	subspl	r5, r9, r3, asr #8
 801d21b:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801d21f:	0a3e6c6d 	beq	8fb83db <__init_array_end+0xf98c0b>
 801d223:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801d227:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801d22b:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d22f:	6c3c0a3e 			@ <UNDEFINED> instruction: 0x6c3c0a3e
 801d233:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 801d237:	3d6c6572 	cfstr64cc	mvdx6, [ip, #-456]!	@ 0xfffffe38
 801d23b:	79747322 	ldmdbvc	r4!, {r1, r5, r8, r9, ip, sp, lr}^
 801d23f:	6873656c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, sp, lr}^
 801d243:	22746565 	rsbscs	r6, r4, #423624704	@ 0x19400000
 801d247:	65726820 	ldrbvs	r6, [r2, #-2080]!	@ 0xfffff7e0
 801d24b:	73223d66 			@ <UNDEFINED> instruction: 0x73223d66
 801d24f:	656c7974 	strbvs	r7, [ip, #-2420]!	@ 0xfffff68c
 801d253:	73632e73 	cmnvc	r3, #1840	@ 0x730
 801d257:	2f202273 	svccs	0x00202273
 801d25b:	743c0a3e 	ldrtvc	r0, [ip], #-2622	@ 0xfffff5c2
 801d25f:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801d263:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801d26b <index_html+0x58>
 801d267:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801d26b:	2f3c0a3e 	svccs	0x003c0a3e
 801d26f:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d273:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801d277:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801d27b:	65683c0a 	strbvs	r3, [r8, #-3082]!	@ 0xfffff3f6
 801d27f:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801d283:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	@ 0xffffff08
 801d287:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801d28b:	4c646922 			@ <UNDEFINED> instruction: 0x4c646922
 801d28f:	22747369 	rsbscs	r7, r4, #-1543503871	@ 0xa4000001
 801d293:	752f3c3e 	strvc	r3, [pc, #-3134]!	@ 801c65d <RemoteConfig::s_TXT+0x481>
 801d297:	2f3c3e6c 	svccs	0x003c3e6c
 801d29b:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d29f:	0a3e7265 	beq	8fb9c3b <__init_array_end+0xf9a46b>
 801d2a3:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801d2a7:	656c6573 	strbvs	r6, [ip, #-1395]!	@ 0xfffffa8d
 801d2ab:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801d2af:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d2b3:	72694464 	rsbvc	r4, r9, #100, 8	@ 0x64000000
 801d2b7:	6f746365 	svcvs	0x00746365
 801d2bb:	20227972 	eorcs	r7, r2, r2, ror r9
 801d2bf:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801d2c3:	65676e61 	strbvs	r6, [r7, #-3681]!	@ 0xfffff19f
 801d2c7:	6567223d 	strbvs	r2, [r7, #-573]!	@ 0xfffffdc3
 801d2cb:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801d2cf:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801d2d3:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801d2d7:	65756c61 	ldrbvs	r6, [r5, #-3169]!	@ 0xfffff39f
 801d2db:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	@ 0xffffff5c
 801d2df:	6c65732f 	stclvs	3, cr7, [r5], #-188	@ 0xffffff44
 801d2e3:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801d2e7:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801d2eb:	61743c0a 	cmnvs	r4, sl, lsl #24
 801d2ef:	20656c62 	rsbcs	r6, r5, r2, ror #24
 801d2f3:	223d6469 	eorscs	r6, sp, #1761607680	@ 0x69000000
 801d2f7:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801d2fb:	62202274 	eorvs	r2, r0, #116, 4	@ 0x40000007
 801d2ff:	6564726f 	strbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801d303:	31273d72 			@ <UNDEFINED> instruction: 0x31273d72
 801d307:	2f3c3e27 	svccs	0x003c3e27
 801d30b:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
 801d30f:	3c0a3e65 	stccc	14, cr3, [sl], {101}	@ 0x65
 801d313:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801d31b <index_html+0x108>
 801d317:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801d31b:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801d31f:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d323:	72655664 	rsbvc	r5, r5, #100, 12	@ 0x6400000
 801d327:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801d32b:	2f3c3e22 	svccs	0x003c3e22
 801d32f:	3c3e6c75 	ldccc	12, cr6, [lr], #-468	@ 0xfffffe2c
 801d333:	6f6f662f 	svcvs	0x006f662f
 801d337:	3e726574 	mrccc	5, 3, r6, cr2, cr4, {3}
 801d33b:	69643c0a 	stmdbvs	r4!, {r1, r3, sl, fp, ip, sp}^
 801d33f:	3c0a3e76 	stccc	14, cr3, [sl], {118}	@ 0x76
 801d343:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801d347:	69206e6f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801d34b:	6c223d64 	stcvs	13, cr3, [r2], #-400	@ 0xfffffe70
 801d34f:	7461636f 	strbtvc	r6, [r1], #-879	@ 0xfffffc91
 801d353:	74754265 	ldrbtvc	r4, [r5], #-613	@ 0xfffffd9b
 801d357:	226e6f74 	rsbcs	r6, lr, #116, 30	@ 0x1d0
 801d35b:	616c6320 	cmnvs	ip, r0, lsr #6
 801d35f:	223d7373 	eorscs	r7, sp, #-872415231	@ 0xcc000001
 801d363:	63616e69 	cmnvs	r1, #1680	@ 0x690
 801d367:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801d36b:	6e6f2022 	cdpvs	0, 6, cr2, cr15, cr2, {1}
 801d36f:	63696c63 	cmnvs	r9, #25344	@ 0x6300
 801d373:	6c223d6b 	stcvs	13, cr3, [r2], #-428	@ 0xfffffe54
 801d377:	7461636f 	strbtvc	r6, [r1], #-879	@ 0xfffffc91
 801d37b:	22292865 	eorcs	r2, r9, #6619136	@ 0x650000
 801d37f:	636f4c3e 	cmnvs	pc, #15872	@ 0x3e00
 801d383:	20657461 	rsbcs	r7, r5, r1, ror #8
 801d387:	3c66664f 	stclcc	6, cr6, [r6], #-316	@ 0xfffffec4
 801d38b:	7475622f 	ldrbtvc	r6, [r5], #-559	@ 0xfffffdd1
 801d38f:	3e6e6f74 	mcrcc	15, 3, r6, cr14, cr4, {3}
 801d393:	75623c0a 	strbvc	r3, [r2, #-3082]!	@ 0xfffff3f6
 801d397:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801d39b:	636e6f20 	cmnvs	lr, #32, 30	@ 0x80
 801d39f:	6b63696c 	blvs	98f7957 <__init_array_end+0x18d8187>
 801d3a3:	6572223d 	ldrbvs	r2, [r2, #-573]!	@ 0xfffffdc3
 801d3a7:	746f6f62 	strbtvc	r6, [pc], #-3938	@ 801d3af <index_html+0x19c>
 801d3ab:	3e222928 	vmulcc.f16	s4, s4, s17	@ <UNPREDICTABLE>
 801d3af:	6f626552 	svcvs	0x00626552
 801d3b3:	2f3c746f 	svccs	0x003c746f
 801d3b7:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801d3bb:	0a3e6e6f 	beq	8fb8d7f <__init_array_end+0xf995af>
 801d3bf:	69642f3c 	stmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801d3c3:	3c0a3e76 	stccc	14, cr3, [sl], {118}	@ 0x76
 801d3c7:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d3cb:	73207470 			@ <UNDEFINED> instruction: 0x73207470
 801d3cf:	223d6372 	eorscs	r6, sp, #-939524095	@ 0xc8000001
 801d3d3:	74617473 	strbtvc	r7, [r1], #-1139	@ 0xfffffb8d
 801d3d7:	6a2e6369 	bvs	8bb6183 <__init_array_end+0xb969b3>
 801d3db:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801d3df:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801d3e3:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801d3e7:	616a2f74 	smcvs	41716	@ 0xa2f4
 801d3eb:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801d3ef:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d3f3:	2f3c3e22 	svccs	0x003c3e22
 801d3f7:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d3fb:	0a3e7470 	beq	8fba5c3 <__init_array_end+0xf9adf3>
 801d3ff:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801d403:	20747069 	rsbscs	r7, r4, r9, rrx
 801d407:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801d40b:	646e6922 	strbtvs	r6, [lr], #-2338	@ 0xfffff6de
 801d40f:	6a2e7865 	bvs	8bbb5ab <__init_array_end+0xb9bddb>
 801d413:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801d417:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801d41b:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801d41f:	616a2f74 	smcvs	41716	@ 0xa2f4
 801d423:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801d427:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d42b:	2f3c3e22 	svccs	0x003c3e22
 801d42f:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d433:	0a3e7470 	beq	8fba5fb <__init_array_end+0xf9ae2b>
 801d437:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801d43b:	20747069 	rsbscs	r7, r4, r9, rrx
 801d43f:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801d443:	66656422 	strbtvs	r6, [r5], -r2, lsr #8
 801d447:	746c7561 	strbtvc	r7, [ip], #-1377	@ 0xfffffa9f
 801d44b:	22736a2e 	rsbscs	r6, r3, #188416	@ 0x2e000
 801d44f:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801d453:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801d457:	2f747865 	svccs	0x00747865
 801d45b:	6176616a 	cmnvs	r6, sl, ror #2
 801d45f:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d463:	3e227470 	mcrcc	4, 1, r7, cr2, cr0, {3}
 801d467:	63732f3c 	cmnvs	r3, #60, 30	@ 0xf0
 801d46b:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d46f:	733c0a3e 	teqvc	ip, #253952	@ 0x3e000
 801d473:	70697263 	rsbvc	r7, r9, r3, ror #4
 801d477:	696c3e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, ip, sp}^
 801d47b:	29287473 	stmdbcs	r8!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 801d47f:	7265763b 	rsbvc	r7, r5, #61865984	@ 0x3b00000
 801d483:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801d487:	643b2928 	ldrtvs	r2, [fp], #-2344	@ 0xfffff6d8
 801d48b:	63657269 	cmnvs	r5, #-1879048186	@ 0x90000006
 801d48f:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801d493:	3c3b2928 			@ <UNDEFINED> instruction: 0x3c3b2928
 801d497:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801d49b:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801d49f:	622f3c0a 	eorvs	r3, pc, #2560	@ 0xa00
 801d4a3:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801d4a7:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801d4ab:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801d4af:	 	cmnvc	r1, #10

0801d4b1 <time_js>:
 801d4b1:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801d4b5:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801d4b9:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801d4bd:	72206e6f 	eorvc	r6, r0, #1776	@ 0x6f0
 801d4c1:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801d4c5:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 801d4c9:	6c0a7b20 			@ <UNDEFINED> instruction: 0x6c0a7b20
 801d4cd:	64207465 	strtvs	r7, [r0], #-1125	@ 0xfffffb9b
 801d4d1:	20617461 	rsbcs	r7, r1, r1, ror #8
 801d4d5:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801d4d9:	20746961 	rsbscs	r6, r4, r1, ror #18
 801d4dd:	4a746567 	bmi	9d36a81 <__init_array_end+0x1d172b1>
 801d4e1:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801d4e5:	6d697427 	cfstrdvs	mvd7, [r9, #-156]!	@ 0xffffff64
 801d4e9:	74616465 	strbtvc	r6, [r1], #-1125	@ 0xfffffb9b
 801d4ed:	0a292765 	beq	8a67289 <__init_array_end+0xa47ab9>
 801d4f1:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801d4f5:	6f6e2074 	svcvs	0x006e2074
 801d4f9:	3d206564 	cfstr32cc	mvfx6, [r0, #-400]!	@ 0xfffffe70
 801d4fd:	726f6620 	rsbvc	r6, pc, #32, 12	@ 0x2000000
 801d501:	4474616d 	ldrbtmi	r6, [r4], #-365	@ 0xfffffe93
 801d505:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
 801d509:	28656d69 	stmdacs	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
 801d50d:	2077656e 	rsbscs	r6, r7, lr, ror #10
 801d511:	65746144 	ldrbvs	r6, [r4, #-324]!	@ 0xfffffebc
 801d515:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801d519:	61642e61 	cmnvs	r4, r1, ror #28
 801d51d:	29296574 	stmdbcs	r9!, {r2, r4, r5, r6, r8, sl, sp, lr}
 801d521:	636f640a 	cmnvs	pc, #167772160	@ 0xa000000
 801d525:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801d529:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801d52d:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801d531:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801d535:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801d539:	6f6e2728 	svcvs	0x006e2728
 801d53d:	69546564 	ldmdbvs	r4, {r2, r5, r6, r8, sl, sp, lr}^
 801d541:	2927656d 	stmdbcs	r7!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 801d545:	7865742e 	stmdavc	r5!, {r1, r2, r3, r5, sl, ip, sp, lr}^
 801d549:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
 801d54d:	746e6574 	strbtvc	r6, [lr], #-1396	@ 0xfffffa8c
 801d551:	60203d20 	eorvs	r3, r0, r0, lsr #26
 801d555:	65646f4e 	strbvs	r6, [r4, #-3918]!	@ 0xfffff0b2
 801d559:	6d695420 	cfstrdvs	mvd5, [r9, #-128]!	@ 0xffffff80
 801d55d:	24203a65 	strtcs	r3, [r0], #-2661	@ 0xfffff59b
 801d561:	646f6e7b 	strbtvs	r6, [pc], #-3707	@ 801d569 <time_js+0xb8>
 801d565:	0a607d65 	beq	983cb01 <__init_array_end+0x181d331>
 801d569:	73610a7d 	cmnvc	r1, #512000	@ 0x7d000
 801d56d:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801d571:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801d575:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801d579:	6e797320 	cdpvs	3, 7, cr7, cr9, cr0, {1}
 801d57d:	74695763 	strbtvc	r5, [r9], #-1891	@ 0xfffff89d
 801d581:	636f4c68 	cmnvs	pc, #104, 24	@ 0x6800
 801d585:	69546c61 	ldmdbvs	r4, {r0, r5, r6, sl, fp, sp, lr}^
 801d589:	2928656d 	stmdbcs	r8!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 801d58d:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 801d591:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801d595:	646f6e20 	strbtvs	r6, [pc], #-3616	@ 801d59d <time_js+0xec>
 801d599:	203d2065 	eorscs	r2, sp, r5, rrx
 801d59d:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	@ 0xfffffe68
 801d5a1:	61447461 	cmpvs	r4, r1, ror #8
 801d5a5:	69546574 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
 801d5a9:	6e28656d 	cfsh64vs	mvdx6, mvdx8, #61
 801d5ad:	44207765 	strtmi	r7, [r0], #-1893	@ 0xfffff89b
 801d5b1:	28657461 	stmdacs	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 801d5b5:	640a2929 	strvs	r2, [sl], #-2345	@ 0xfffff6d7
 801d5b9:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801d5bd:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801d5c1:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801d5c5:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801d5c9:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801d5cd:	27286449 	strcs	r6, [r8, -r9, asr #8]!
 801d5d1:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 801d5d5:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801d5d9:	742e2927 	strtvc	r2, [lr], #-2343	@ 0xfffff6d9
 801d5dd:	43747865 	cmnmi	r4, #6619136	@ 0x650000
 801d5e1:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801d5e5:	3d20746e 	cfstrscc	mvf7, [r0, #-440]!	@ 0xfffffe48
 801d5e9:	6f4e6020 	svcvs	0x004e6020
 801d5ed:	54206564 	strtpl	r6, [r0], #-1380	@ 0xfffffa9c
 801d5f1:	3a656d69 	bcc	9978b9d <__init_array_end+0x19593cd>
 801d5f5:	6e7b2420 	cdpvs	4, 7, cr2, cr11, cr0, {1}
 801d5f9:	7d65646f 	cfstrdvc	mvd6, [r5, #-444]!	@ 0xfffffe44
 801d5fd:	6f630a60 	svcvs	0x00630a60
 801d601:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801d605:	61746164 	cmnvs	r4, r4, ror #2
 801d609:	7b203d20 	blvc	882ca91 <__init_array_end+0x80d2c1>
 801d60d:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801d611:	6e203a65 	vnmulvs.f32	s6, s0, s11
 801d615:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801d619:	77610a7d 			@ <UNDEFINED> instruction: 0x77610a7d
 801d61d:	20746961 	rsbscs	r6, r4, r1, ror #18
 801d621:	74736f70 	ldrbtvc	r6, [r3], #-3952	@ 0xfffff090
 801d625:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801d629:	720a2961 	andvc	r2, sl, #1589248	@ 0x184000
 801d62d:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801d631:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 801d635:	 	strvs	r7, [r0], -sl, lsl #26

0801d638 <default_js>:
 801d638:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801d63c:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801d640:	73657220 	cmnvc	r5, #32, 4
 801d644:	73287465 			@ <UNDEFINED> instruction: 0x73287465
 801d648:	20296c65 	eorcs	r6, r9, r5, ror #24
 801d64c:	61760a7b 	cmnvs	r6, fp, ror sl
 801d650:	20642072 	rsbcs	r2, r4, r2, ror r0
 801d654:	7d7b203d 	ldclvc	0, cr2, [fp, #-244]!	@ 0xffffff0c
 801d658:	61760a3b 	cmnvs	r6, fp, lsr sl
 801d65c:	756f2072 	strbvc	r2, [pc, #-114]!	@ 801d5f2 <time_js+0x141>
 801d660:	203d2074 	eorscs	r2, sp, r4, ror r0
 801d664:	0a3b7d7b 	beq	8efcc58 <__init_array_end+0xedd488>
 801d668:	5b74756f 	blpl	9d3ac2c <__init_array_end+0x1d1b45c>
 801d66c:	5d6c6573 	cfstr64pl	mvdx6, [ip, #-460]!	@ 0xfffffe34
 801d670:	64203d20 	strtvs	r3, [r0], #-3360	@ 0xfffff2e0
 801d674:	61760a3b 	cmnvs	r6, fp, lsr sl
 801d678:	61702072 	cmnvs	r0, r2, ror r0
 801d67c:	616f6c79 	smcvs	63177	@ 0xf6c9
 801d680:	203d2064 	eorscs	r2, sp, r4, rrx
 801d684:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801d688:	7274732e 	rsbsvc	r7, r4, #-1207959552	@ 0xb8000000
 801d68c:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 801d690:	6f287966 	svcvs	0x00287966
 801d694:	3b297475 	blcc	8a7a870 <__init_array_end+0xa5b0a0>
 801d698:	7465660a 	strbtvc	r6, [r5], #-1546	@ 0xfffff9f6
 801d69c:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 801d6a0:	6f736a2f 	svcvs	0x00736a2f
 801d6a4:	202c276e 	eorcs	r2, ip, lr, ror #14
 801d6a8:	656d0a7b 	strbvs	r0, [sp, #-2683]!	@ 0xfffff585
 801d6ac:	646f6874 	strbtvs	r6, [pc], #-2164	@ 801d6b4 <default_js+0x7c>
 801d6b0:	5027203a 	eorpl	r2, r7, sl, lsr r0
 801d6b4:	2754534f 	ldrbcs	r5, [r4, -pc, asr #6]
 801d6b8:	65680a2c 	strbvs	r0, [r8, #-2604]!	@ 0xfffff5d4
 801d6bc:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801d6c0:	7b203a73 	blvc	882c094 <__init_array_end+0x80c8c4>
 801d6c4:	6f43270a 	svcvs	0x0043270a
 801d6c8:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801d6cc:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801d6d0:	3a276570 	bcc	89f6c98 <__init_array_end+0x9d74c8>
 801d6d4:	70612720 	rsbvc	r2, r1, r0, lsr #14
 801d6d8:	63696c70 	cmnvs	r9, #112, 24	@ 0x7000
 801d6dc:	6f697461 	svcvs	0x00697461
 801d6e0:	736a2f6e 	cmnvc	sl, #440	@ 0x1b8
 801d6e4:	0a276e6f 	beq	89f90a8 <__init_array_end+0x9d98d8>
 801d6e8:	620a2c7d 	andvs	r2, sl, #32000	@ 0x7d00
 801d6ec:	3a79646f 	bcc	9e768b0 <__init_array_end+0x1e570e0>
 801d6f0:	79617020 	stmdbvc	r1!, {r5, ip, sp, lr}^
 801d6f4:	64616f6c 	strbtvs	r6, [r1], #-3948	@ 0xfffff094
 801d6f8:	20297d0a 	eorcs	r7, r9, sl, lsl #26
 801d6fc:	6568742e 	strbvs	r7, [r8, #-1070]!	@ 0xfffffbd2
 801d700:	6572286e 	ldrbvs	r2, [r2, #-2158]!	@ 0xfffff792
 801d704:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 801d708:	3d206573 	cfstr32cc	mvfx6, [r0, #-460]!	@ 0xfffffe34
 801d70c:	697b203e 	ldmdbvs	fp!, {r1, r2, r3, r4, r5, sp}^
 801d710:	72282066 	eorvc	r2, r8, #102	@ 0x66
 801d714:	6f707365 	svcvs	0x00707365
 801d718:	2e65736e 	cdpcs	3, 6, cr7, cr5, cr14, {3}
 801d71c:	20296b6f 	eorcs	r6, r9, pc, ror #22
 801d720:	6567207b 	strbvs	r2, [r7, #-123]!	@ 0xffffff85
 801d724:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801d728:	65732874 	ldrbvs	r2, [r3, #-2164]!	@ 0xfffff78c
 801d72c:	203b296c 	eorscs	r2, fp, ip, ror #18
 801d730:	3b297d7d 	blcc	8a7cd2c <__init_array_end+0xa5d55c>
 801d734:	 	strvs	r7, [r0], -sl, lsl #26

0801d737 <date_js>:
 801d737:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801d73b:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801d73f:	726f6620 	rsbvc	r6, pc, #32, 12	@ 0x2000000
 801d743:	4474616d 	ldrbtmi	r6, [r4], #-365	@ 0xfffffe93
 801d747:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
 801d74b:	28656d69 	stmdacs	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
 801d74f:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801d753:	0a7b2029 	beq	9ee57ff <__init_array_end+0x1ec602f>
 801d757:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801d75b:	65792074 	ldrbvs	r2, [r9, #-116]!	@ 0xffffff8c
 801d75f:	3d207261 	sfmcc	f7, 4, [r0, #-388]!	@ 0xfffffe7c
 801d763:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801d767:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801d76b:	6c754674 	ldclvs	6, cr4, [r5], #-464	@ 0xfffffe30
 801d76f:	6165596c 	cmnvs	r5, ip, ror #18
 801d773:	3b292872 	blcc	8a67943 <__init_array_end+0xa48173>
 801d777:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801d77b:	6d207473 	cfstrsvs	mvf7, [r0, #-460]!	@ 0xfffffe34
 801d77f:	3d206e6f 	stccc	14, cr6, [r0, #-444]!	@ 0xfffffe44
 801d783:	30272820 	eorcc	r2, r7, r0, lsr #16
 801d787:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801d78b:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801d78f:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801d793:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
 801d797:	29286874 	stmdbcs	r8!, {r2, r4, r5, r6, fp, sp, lr}
 801d79b:	31202b20 			@ <UNDEFINED> instruction: 0x31202b20
 801d79f:	732e2929 			@ <UNDEFINED> instruction: 0x732e2929
 801d7a3:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801d7a7:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801d7ab:	6f630a3b 	svcvs	0x00630a3b
 801d7af:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801d7b3:	20796164 	rsbscs	r6, r9, r4, ror #2
 801d7b7:	2728203d 			@ <UNDEFINED> instruction: 0x2728203d
 801d7bb:	2b202730 	blcs	8827483 <__init_array_end+0x807cb3>
 801d7bf:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801d7c3:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801d7c7:	74614474 	strbtvc	r4, [r1], #-1140	@ 0xfffffb8c
 801d7cb:	29292865 	stmdbcs	r9!, {r0, r2, r5, r6, fp, sp}
 801d7cf:	696c732e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 801d7d3:	2d286563 	cfstr32cs	mvfx6, [r8, #-396]!	@ 0xfffffe74
 801d7d7:	0a3b2932 	beq	8ee7ca7 <__init_array_end+0xec84d7>
 801d7db:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801d7df:	6f682074 	svcvs	0x00682074
 801d7e3:	3d207275 	sfmcc	f7, 4, [r0, #-468]!	@ 0xfffffe2c
 801d7e7:	30272820 	eorcc	r2, r7, r0, lsr #16
 801d7eb:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801d7ef:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801d7f3:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 801d7f7:	72756f48 	rsbsvc	r6, r5, #72, 30	@ 0x120
 801d7fb:	29292873 	stmdbcs	r9!, {r0, r1, r4, r5, r6, fp, sp}
 801d7ff:	696c732e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 801d803:	2d286563 	cfstr32cs	mvfx6, [r8, #-396]!	@ 0xfffffe74
 801d807:	0a3b2932 	beq	8ee7cd7 <__init_array_end+0xec8507>
 801d80b:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801d80f:	696d2074 	stmdbvs	sp!, {r2, r4, r5, r6, sp}^
 801d813:	203d206e 	eorscs	r2, sp, lr, rrx
 801d817:	27302728 	ldrcs	r2, [r0, -r8, lsr #14]!
 801d81b:	64202b20 	strtvs	r2, [r0], #-2848	@ 0xfffff4e0
 801d81f:	2e657461 	cdpcs	4, 6, cr7, cr5, cr1, {3}
 801d823:	4d746567 	cfldr64mi	mvdx6, [r4, #-412]!	@ 0xfffffe64
 801d827:	74756e69 	ldrbtvc	r6, [r5], #-3689	@ 0xfffff197
 801d82b:	29287365 	stmdbcs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 801d82f:	6c732e29 	ldclvs	14, cr2, [r3], #-164	@ 0xffffff5c
 801d833:	28656369 	stmdacs	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 801d837:	3b29322d 	blcc	8a6a0f3 <__init_array_end+0xa4a923>
 801d83b:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801d83f:	73207473 			@ <UNDEFINED> instruction: 0x73207473
 801d843:	3d206365 	stccc	3, cr6, [r0, #-404]!	@ 0xfffffe6c
 801d847:	30272820 	eorcc	r2, r7, r0, lsr #16
 801d84b:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801d84f:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801d853:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 801d857:	6f636553 	svcvs	0x00636553
 801d85b:	2873646e 	ldmdacs	r3!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801d85f:	732e2929 			@ <UNDEFINED> instruction: 0x732e2929
 801d863:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801d867:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801d86b:	6f630a3b 	svcvs	0x00630a3b
 801d86f:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801d873:	7366666f 	cmnvc	r6, #116391936	@ 0x6f00000
 801d877:	3d207465 	cfstrscc	mvf7, [r0, #-404]!	@ 0xfffffe6c
 801d87b:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801d87f:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801d883:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	@ 0xfffffe30
 801d887:	6e6f7a65 	vnmulvs.f32	s15, s30, s11
 801d88b:	66664f65 	strbtvs	r4, [r6], -r5, ror #30
 801d88f:	28746573 	ldmdacs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801d893:	630a3b29 	movwvs	r3, #43817	@ 0xab29
 801d897:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801d89b:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 801d89f:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801d8a3:	2072756f 	rsbscs	r7, r2, pc, ror #10
 801d8a7:	2728203d 			@ <UNDEFINED> instruction: 0x2728203d
 801d8ab:	2b202730 	blcs	8827573 <__init_array_end+0x807da3>
 801d8af:	74614d20 	strbtvc	r4, [r1], #-3360	@ 0xfffff2e0
 801d8b3:	6c662e68 	stclvs	14, cr2, [r6], #-416	@ 0xfffffe60
 801d8b7:	28726f6f 	ldmdacs	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801d8bb:	6874614d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sp, lr}^
 801d8bf:	7362612e 	cmnvc	r2, #-2147483637	@ 0x8000000b
 801d8c3:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801d8c7:	29746573 	ldmdbcs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801d8cb:	36202f20 	strtcc	r2, [r0], -r0, lsr #30
 801d8cf:	2e292930 			@ <UNDEFINED> instruction: 0x2e292930
 801d8d3:	63696c73 	cmnvs	r9, #29440	@ 0x7300
 801d8d7:	322d2865 	eorcc	r2, sp, #6619136	@ 0x650000
 801d8db:	630a3b29 	movwvs	r3, #43817	@ 0xab29
 801d8df:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801d8e3:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 801d8e7:	4d746573 	cfldr64mi	mvdx6, [r4, #-460]!	@ 0xfffffe34
 801d8eb:	3d206e69 	stccc	14, cr6, [r0, #-420]!	@ 0xfffffe5c
 801d8ef:	30272820 	eorcc	r2, r7, r0, lsr #16
 801d8f3:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801d8f7:	6874614d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sp, lr}^
 801d8fb:	7362612e 	cmnvc	r2, #-2147483637	@ 0x8000000b
 801d8ff:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801d903:	29746573 	ldmdbcs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801d907:	36202520 	strtcc	r2, [r0], -r0, lsr #10
 801d90b:	732e2930 			@ <UNDEFINED> instruction: 0x732e2930
 801d90f:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801d913:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801d917:	6f630a3b 	svcvs	0x00630a3b
 801d91b:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801d91f:	6e676973 			@ <UNDEFINED> instruction: 0x6e676973
 801d923:	6f203d20 	svcvs	0x00203d20
 801d927:	65736666 	ldrbvs	r6, [r3, #-1638]!	@ 0xfffff99a
 801d92b:	3d3c2074 	ldccc	0, cr2, [ip, #-464]!	@ 0xfffffe30
 801d92f:	3f203020 	svccc	0x00203020
 801d933:	272b2720 	strcs	r2, [fp, -r0, lsr #14]!
 801d937:	27203a20 	strcs	r3, [r0, -r0, lsr #20]!
 801d93b:	0a3b272d 	beq	8ee75f7 <__init_array_end+0xec7e27>
 801d93f:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801d943:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801d947:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801d94b:	2072756f 	rsbscs	r7, r2, pc, ror #10
 801d94f:	30203d3d 	eorcc	r3, r0, sp, lsr sp
 801d953:	26262029 	strtcs	r2, [r6], -r9, lsr #32
 801d957:	666f2820 	strbtvs	r2, [pc], -r0, lsr #16
 801d95b:	74657366 	strbtvc	r7, [r5], #-870	@ 0xfffffc9a
 801d95f:	206e694d 	rsbcs	r6, lr, sp, asr #18
 801d963:	30203d3d 	eorcc	r3, r0, sp, lsr sp
 801d967:	7b202929 	blvc	8827e13 <__init_array_end+0x808643>
 801d96b:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801d96f:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801d973:	797b2460 	ldmdbvc	fp!, {r5, r6, sl, sp}^
 801d977:	7d726165 	ldfvce	f6, [r2, #-404]!	@ 0xfffffe6c
 801d97b:	6d7b242d 	cfldrdvs	mvd2, [fp, #-180]!	@ 0xffffff4c
 801d97f:	2d7d6e6f 	ldclcs	14, cr6, [sp, #-444]!	@ 0xfffffe44
 801d983:	61647b24 	cmnvs	r4, r4, lsr #22
 801d987:	24547d79 	ldrbcs	r7, [r4], #-3449	@ 0xfffff287
 801d98b:	756f687b 	strbvc	r6, [pc, #-2171]!	@ 801d118 <time_html+0x15d>
 801d98f:	243a7d72 	ldrtcs	r7, [sl], #-3442	@ 0xfffff28e
 801d993:	6e696d7b 	mcrvs	13, 3, r6, cr9, cr11, {3}
 801d997:	7b243a7d 	blvc	892c393 <__init_array_end+0x90cbc3>
 801d99b:	7d636573 	cfstr64vc	mvdx6, [r3, #-460]!	@ 0xfffffe34
 801d99f:	203b605a 	eorscs	r6, fp, sl, asr r0
 801d9a3:	207d0a20 	rsbscs	r0, sp, r0, lsr #20
 801d9a7:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801d9ab:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801d9af:	797b2460 	ldmdbvc	fp!, {r5, r6, sl, sp}^
 801d9b3:	7d726165 	ldfvce	f6, [r2, #-404]!	@ 0xfffffe6c
 801d9b7:	6d7b242d 	cfldrdvs	mvd2, [fp, #-180]!	@ 0xffffff4c
 801d9bb:	2d7d6e6f 	ldclcs	14, cr6, [sp, #-444]!	@ 0xfffffe44
 801d9bf:	61647b24 	cmnvs	r4, r4, lsr #22
 801d9c3:	24547d79 	ldrbcs	r7, [r4], #-3449	@ 0xfffff287
 801d9c7:	756f687b 	strbvc	r6, [pc, #-2171]!	@ 801d154 <time_html+0x199>
 801d9cb:	243a7d72 	ldrtcs	r7, [sl], #-3442	@ 0xfffff28e
 801d9cf:	6e696d7b 	mcrvs	13, 3, r6, cr9, cr11, {3}
 801d9d3:	7b243a7d 	blvc	892c3cf <__init_array_end+0x90cbff>
 801d9d7:	7d636573 	cfstr64vc	mvdx6, [r3, #-460]!	@ 0xfffffe34
 801d9db:	69737b24 	ldmdbvs	r3!, {r2, r5, r8, r9, fp, ip, sp, lr}^
 801d9df:	247d6e67 	ldrbtcs	r6, [sp], #-3687	@ 0xfffff199
 801d9e3:	66666f7b 	uqsub16vs	r6, r6, fp
 801d9e7:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801d9eb:	7d72756f 	cfldr64vc	mvdx7, [r2, #-444]!	@ 0xfffffe44
 801d9ef:	6f7b243a 	svcvs	0x007b243a
 801d9f3:	65736666 	ldrbvs	r6, [r3, #-1638]!	@ 0xfffff99a
 801d9f7:	6e694d74 	mcrvs	13, 3, r4, cr9, cr4, {3}
 801d9fb:	203b607d 	eorscs	r6, fp, sp, ror r0
 801d9ff:	7d0a2020 	stcvc	0, cr2, [sl, #-128]	@ 0xffffff80
	...

0801da04 <index_js>:
 801da04:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801da08:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801da0c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801da10:	64206e6f 	strtvs	r6, [r0], #-3695	@ 0xfffff191
 801da14:	63657269 	cmnvs	r5, #-1879048186	@ 0x90000006
 801da18:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801da1c:	7b202928 	blvc	8827ec4 <__init_array_end+0x8086f4>
 801da20:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 801da24:	3d206420 	cfstrscc	mvf6, [r0, #-128]!	@ 0xffffff80
 801da28:	61776120 	cmnvs	r7, r0, lsr #2
 801da2c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801da30:	534a7465 	movtpl	r7, #42085	@ 0xa465
 801da34:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801da38:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801da3c:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801da40:	0a292779 	beq	8a6782c <__init_array_end+0xa4805c>
 801da44:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801da48:	203d2068 	eorscs	r2, sp, r8, rrx
 801da4c:	6c0a2222 	sfmvs	f2, 4, [sl], {34}	@ 0x22
 801da50:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801da54:	4f203d20 	svcmi	0x00203d20
 801da58:	63656a62 	cmnvs	r5, #401408	@ 0x62000
 801da5c:	656b2e74 	strbvs	r2, [fp, #-3700]!	@ 0xfffff18c
 801da60:	64287379 	strtvs	r7, [r8], #-889	@ 0xfffffc87
 801da64:	6966225b 	stmdbvs	r6!, {r0, r1, r3, r4, r6, r9, sp}^
 801da68:	2273656c 	rsbscs	r6, r3, #108, 10	@ 0x1b000000
 801da6c:	660a295d 			@ <UNDEFINED> instruction: 0x660a295d
 801da70:	726f662e 	rsbvc	r6, pc, #48234496	@ 0x2e00000
 801da74:	68636145 	stmdavs	r3!, {r0, r2, r6, r8, sp, lr}^
 801da78:	6e756628 	cdpvs	6, 7, cr6, cr5, cr8, {1}
 801da7c:	6f697463 	svcvs	0x00697463
 801da80:	656b286e 	strbvs	r2, [fp, #-2158]!	@ 0xfffff792
 801da84:	7b202979 	blvc	8828070 <__init_array_end+0x8088a0>
 801da88:	7261760a 	rsbvc	r7, r1, #10485760	@ 0xa00000
 801da8c:	3d207620 	stccc	6, cr7, [r0, #-128]!	@ 0xffffff80
 801da90:	225b6420 	subscs	r6, fp, #32, 8	@ 0x20000000
 801da94:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
 801da98:	5b5d2273 	blpl	976646c <__init_array_end+0x1746c9c>
 801da9c:	5d79656b 	cfldr64pl	mvdx6, [r9, #-428]!	@ 0xfffffe54
 801daa0:	2b20680a 	blcs	8837ad0 <__init_array_end+0x818300>
 801daa4:	3c22203d 	stccc	0, cr2, [r2], #-244	@ 0xffffff0c
 801daa8:	6974706f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 801daac:	76206e6f 	strtvc	r6, [r0], -pc, ror #28
 801dab0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	@ 0xfffff39f
 801dab4:	6b2b223d 	blvs	8ae63b0 <__init_array_end+0xac6be0>
 801dab8:	222b7965 	eorcs	r7, fp, #1654784	@ 0x194000
 801dabc:	762b223e 			@ <UNDEFINED> instruction: 0x762b223e
 801dac0:	2f3c222b 	svccs	0x003c222b
 801dac4:	6974706f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 801dac8:	223e6e6f 	eorscs	r6, lr, #1776	@ 0x6f0
 801dacc:	3b297d0a 	blcc	8a7cefc <__init_array_end+0xa5d72c>
 801dad0:	636f640a 	cmnvs	pc, #167772160	@ 0xa000000
 801dad4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801dad8:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801dadc:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801dae0:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801dae4:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801dae8:	64692228 	strbtvs	r2, [r9], #-552	@ 0xfffffdd8
 801daec:	65726944 	ldrbvs	r6, [r2, #-2372]!	@ 0xfffff6bc
 801daf0:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801daf4:	2e292279 	mcrcs	2, 1, r2, cr9, cr9, {3}
 801daf8:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801dafc:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801db00:	203d204c 	eorscs	r2, sp, ip, asr #32
 801db04:	65670a68 	strbvs	r0, [r7, #-2664]!	@ 0xfffff598
 801db08:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801db0c:	5b662874 	blpl	99a7ce4 <__init_array_end+0x1988514>
 801db10:	0a295d30 	beq	8a74fd8 <__init_array_end+0xa55808>
 801db14:	73610a7d 	cmnvc	r1, #512000	@ 0x7d000
 801db18:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801db1c:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801db20:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801db24:	74656720 	strbtvc	r6, [r5], #-1824	@ 0xfffff8e0
 801db28:	7478745f 	ldrbtvc	r7, [r8], #-1119	@ 0xfffffba1
 801db2c:	6c657328 	stclvs	3, cr7, [r5], #-160	@ 0xffffff60
 801db30:	0a7b2029 	beq	9ee5bdc <__init_array_end+0x1ec640c>
 801db34:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801db38:	20747874 	rsbscs	r7, r4, r4, ror r8
 801db3c:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801db40:	20746961 	rsbscs	r6, r4, r1, ror #18
 801db44:	4a746567 	bmi	9d370e8 <__init_array_end+0x1d17918>
 801db48:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801db4c:	296c6573 	stmdbcs	ip!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801db50:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 801db54:	3d206820 	stccc	8, cr6, [r0, #-128]!	@ 0xffffff80
 801db58:	0a222220 	beq	88a63e0 <__init_array_end+0x886c10>
 801db5c:	656a624f 	strbvs	r6, [sl, #-591]!	@ 0xfffffdb1
 801db60:	6b2e7463 	blvs	8bbacf4 <__init_array_end+0xb9b524>
 801db64:	28737965 	ldmdacs	r3!, {r0, r2, r5, r6, r8, fp, ip, sp, lr}^
 801db68:	5b747874 	blpl	9d3bd40 <__init_array_end+0x1d1c570>
 801db6c:	5d6c6573 	cfstr64pl	mvdx6, [ip, #-460]!	@ 0xfffffe34
 801db70:	6f662e29 	svcvs	0x00662e29
 801db74:	63614572 	cmnvs	r1, #478150656	@ 0x1c800000
 801db78:	75662868 	strbvc	r2, [r6, #-2152]!	@ 0xfffff798
 801db7c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801db80:	6b286e6f 	blvs	8a39544 <__init_array_end+0xa19d74>
 801db84:	20297965 	eorcs	r7, r9, r5, ror #18
 801db88:	61760a7b 	cmnvs	r6, fp, ror sl
 801db8c:	20762072 	rsbscs	r2, r6, r2, ror r0
 801db90:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801db94:	65735b74 	ldrbvs	r5, [r3, #-2932]!	@ 0xfffff48c
 801db98:	6b5b5d6c 	blvs	96f5150 <__init_array_end+0x16d5980>
 801db9c:	0a5d7965 	beq	977c138 <__init_array_end+0x175c968>
 801dba0:	3d2b2068 	stccc	0, cr2, [fp, #-416]!	@ 0xfffffe60
 801dba4:	743c2220 	ldrtvc	r2, [ip], #-544	@ 0xfffffde0
 801dba8:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801dbac:	2b223e64 	blcs	88ad544 <__init_array_end+0x88dd74>
 801dbb0:	2b79656b 	blcs	9e77164 <__init_array_end+0x1e57994>
 801dbb4:	742f3c27 	strtvc	r3, [pc], #-3111	@ 801dbbc <index_js+0x1b8>
 801dbb8:	743c3e64 	ldrtvc	r3, [ip], #-3684	@ 0xfffff19c
 801dbbc:	693c3e64 	ldmdbvs	ip!, {r2, r5, r6, r9, sl, fp, ip, sp}
 801dbc0:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 801dbc4:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801dbc8:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801dbcc:	22747865 	rsbscs	r7, r4, #6619136	@ 0x650000
 801dbd0:	6c617620 	stclvs	6, cr7, [r1], #-128	@ 0xffffff80
 801dbd4:	223d6575 	eorscs	r6, sp, #490733568	@ 0x1d400000
 801dbd8:	2b762b27 	blcs	9da887c <__init_array_end+0x1d890ac>
 801dbdc:	69202227 	stmdbvs	r0!, {r0, r1, r2, r5, r9, sp}
 801dbe0:	27223d64 	strcs	r3, [r2, -r4, ror #26]!
 801dbe4:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801dbe8:	3e22272b 	cdpcc	7, 2, cr2, cr2, cr11, {1}
 801dbec:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 801dbf0:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801dbf8 <index_js+0x1f4>
 801dbf4:	0a273e72 	beq	89ed5c4 <__init_array_end+0x9cddf4>
 801dbf8:	0a3b297d 	beq	8ee81f4 <__init_array_end+0xec8a24>
 801dbfc:	3d2b2068 	stccc	0, cr2, [fp, #-416]!	@ 0xfffffe60
 801dc00:	743c2720 	ldrtvc	r2, [ip], #-1824	@ 0xfffff8e0
 801dc04:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801dc08:	6f632064 	svcvs	0x00632064
 801dc0c:	6170736c 	cmnvs	r0, ip, ror #6
 801dc10:	32223d6e 	eorcc	r3, r2, #7040	@ 0x1b80
 801dc14:	623c3e22 	eorsvs	r3, ip, #544	@ 0x220
 801dc18:	6f747475 	svcvs	0x00747475
 801dc1c:	6e6f206e 	cdpvs	0, 6, cr2, cr15, cr14, {3}
 801dc20:	63696c63 	cmnvs	r9, #25344	@ 0x6300
 801dc24:	73223d6b 			@ <UNDEFINED> instruction: 0x73223d6b
 801dc28:	28657661 	stmdacs	r5!, {r0, r5, r6, r9, sl, ip, sp, lr}^
 801dc2c:	2b27275c 	blcs	89e79a4 <__init_array_end+0x9c81d4>
 801dc30:	2b6c6573 	blcs	9b37204 <__init_array_end+0x1b17a34>
 801dc34:	29275c27 	stmdbcs	r7!, {r0, r1, r2, r5, sl, fp, ip, lr}
 801dc38:	61533e22 	cmpvs	r3, r2, lsr #28
 801dc3c:	2f3c6576 	svccs	0x003c6576
 801dc40:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801dc44:	273e6e6f 	ldrcs	r6, [lr, -pc, ror #28]!
 801dc48:	20680a3b 	rsbcs	r0, r8, fp, lsr sl
 801dc4c:	27203d2b 	strcs	r3, [r0, -fp, lsr #26]!
 801dc50:	7475623c 	ldrbtvc	r6, [r5], #-572	@ 0xfffffdc4
 801dc54:	206e6f74 	rsbcs	r6, lr, r4, ror pc
 801dc58:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 801dc5c:	62223d73 	eorvs	r3, r2, #7360	@ 0x1cc0
 801dc60:	20226e74 	eorcs	r6, r2, r4, ror lr
 801dc64:	6c636e6f 	stclvs	14, cr6, [r3], #-444	@ 0xfffffe44
 801dc68:	3d6b6369 	stclcc	3, cr6, [fp, #-420]!	@ 0xfffffe5c
 801dc6c:	73657222 	cmnvc	r5, #536870914	@ 0x20000002
 801dc70:	5c287465 	cfstrspl	mvf7, [r8], #-404	@ 0xfffffe6c
 801dc74:	732b2727 			@ <UNDEFINED> instruction: 0x732b2727
 801dc78:	272b6c65 	strcs	r6, [fp, -r5, ror #24]!
 801dc7c:	2229275c 	eorcs	r2, r9, #92, 14	@ 0x1700000
 801dc80:	6665443e 			@ <UNDEFINED> instruction: 0x6665443e
 801dc84:	746c7561 	strbtvc	r7, [ip], #-1377	@ 0xfffffa9f
 801dc88:	622f3c73 	eorvs	r3, pc, #29440	@ 0x7300
 801dc8c:	6f747475 	svcvs	0x00747475
 801dc90:	2f3c3e6e 	svccs	0x003c3e6e
 801dc94:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	@ 0xfffffe30
 801dc98:	3e72742f 	cdpcc	4, 7, cr7, cr2, cr15, {1}
 801dc9c:	640a3b27 	strvs	r3, [sl], #-2855	@ 0xfffff4d9
 801dca0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801dca4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801dca8:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801dcac:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801dcb0:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801dcb4:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 801dcb8:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801dcbc:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801dcc0:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801dcc4:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801dcc8:	203d204c 	eorscs	r2, sp, ip, asr #32
 801dccc:	0a7d0a68 	beq	9f60674 <__init_array_end+0x1f40ea4>
 801dcd0:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801dcd4:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801dcd8:	76617320 	strbtvc	r7, [r1], -r0, lsr #6
 801dcdc:	65732865 	ldrbvs	r2, [r3, #-2149]!	@ 0xfffff79b
 801dce0:	7b20296c 	blvc	8828298 <__init_array_end+0x808ac8>
 801dce4:	7261760a 	rsbvc	r7, r1, #10485760	@ 0xa00000
 801dce8:	3d206420 	cfstrscc	mvf6, [r0, #-128]!	@ 0xffffff80
 801dcec:	0a7d7b20 	beq	9f7c974 <__init_array_end+0x1f5d1a4>
 801dcf0:	20726176 	rsbscs	r6, r2, r6, ror r1
 801dcf4:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801dcf8:	3d207374 	stccc	3, cr7, [r0, #-464]!	@ 0xfffffe30
 801dcfc:	636f6420 	cmnvs	pc, #32, 8	@ 0x20000000
 801dd00:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801dd04:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801dd08:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801dd0c:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801dd10:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801dd14:	64692228 	strbtvs	r2, [r9], #-552	@ 0xfffffdd8
 801dd18:	22747854 	rsbscs	r7, r4, #84, 16	@ 0x540000
 801dd1c:	65672e29 	strbvs	r2, [r7, #-3625]!	@ 0xfffff1d7
 801dd20:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801dd24:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801dd28:	54794273 	ldrbtpl	r4, [r9], #-627	@ 0xfffffd8d
 801dd2c:	614e6761 	cmpvs	lr, r1, ror #14
 801dd30:	2228656d 	eorcs	r6, r8, #457179136	@ 0x1b400000
 801dd34:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801dd38:	0a292274 	beq	8a66710 <__init_array_end+0xa46f40>
 801dd3c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 801dd40:	72617628 	rsbvc	r7, r1, #40, 12	@ 0x2800000
 801dd44:	3d206920 			@ <UNDEFINED> instruction: 0x3d206920
 801dd48:	203b3020 	eorscs	r3, fp, r0, lsr #32
 801dd4c:	203c2069 	eorscs	r2, ip, r9, rrx
 801dd50:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801dd54:	6c2e7374 	stcvs	3, cr7, [lr], #-464	@ 0xfffffe30
 801dd58:	74676e65 	strbtvc	r6, [r7], #-3685	@ 0xfffff19b
 801dd5c:	69203b68 	stmdbvs	r0!, {r3, r5, r6, r8, r9, fp, ip, sp}
 801dd60:	20292b2b 	eorcs	r2, r9, fp, lsr #22
 801dd64:	61760a7b 	cmnvs	r6, fp, ror sl
 801dd68:	206b2072 	rsbcs	r2, fp, r2, ror r0
 801dd6c:	6e69203d 	mcrvs	0, 3, r2, cr9, cr13, {1}
 801dd70:	73747570 	cmnvc	r4, #112, 10	@ 0x1c000000
 801dd74:	2e5d695b 			@ <UNDEFINED> instruction: 0x2e5d695b
 801dd78:	760a6469 	strvc	r6, [sl], -r9, ror #8
 801dd7c:	76207261 	strtvc	r7, [r0], -r1, ror #4
 801dd80:	69203d20 	stmdbvs	r0!, {r5, r8, sl, fp, ip, sp}
 801dd84:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 801dd88:	5d695b73 	fstmdbxpl	r9!, {d21-d77}	@ Deprecated
 801dd8c:	6c61762e 	stclvs	6, cr7, [r1], #-184	@ 0xffffff48
 801dd90:	640a6575 	strvs	r6, [sl], #-1397	@ 0xfffffa8b
 801dd94:	205d6b5b 	subscs	r6, sp, fp, asr fp
 801dd98:	0a76203d 	beq	9da5e94 <__init_array_end+0x1d866c4>
 801dd9c:	61760a7d 	cmnvs	r6, sp, ror sl
 801dda0:	756f2072 	strbvc	r2, [pc, #-114]!	@ 801dd36 <index_js+0x332>
 801dda4:	203d2074 	eorscs	r2, sp, r4, ror r0
 801dda8:	6f0a7d7b 	svcvs	0x000a7d7b
 801ddac:	735b7475 	cmpvc	fp, #1962934272	@ 0x75000000
 801ddb0:	205d6c65 	subscs	r6, sp, r5, ror #24
 801ddb4:	0a64203d 	beq	9925eb0 <__init_array_end+0x19066e0>
 801ddb8:	20726176 	rsbscs	r6, r2, r6, ror r1
 801ddbc:	6c796170 	ldfvse	f6, [r9], #-448	@ 0xfffffe40
 801ddc0:	2064616f 	rsbcs	r6, r4, pc, ror #2
 801ddc4:	534a203d 	movtpl	r2, #41021	@ 0xa03d
 801ddc8:	732e4e4f 			@ <UNDEFINED> instruction: 0x732e4e4f
 801ddcc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 801ddd0:	79666967 	stmdbvc	r6!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
 801ddd4:	74756f28 	ldrbtvc	r6, [r5], #-3880	@ 0xfffff0d8
 801ddd8:	65660a29 	strbvs	r0, [r6, #-2601]!	@ 0xfffff5d7
 801dddc:	28686374 	stmdacs	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
 801dde0:	736a2f27 	cmnvc	sl, #39, 30	@ 0x9c
 801dde4:	2c276e6f 	stccs	14, cr6, [r7], #-444	@ 0xfffffe44
 801dde8:	6d0a7b20 	vstrvs	d7, [sl, #-128]	@ 0xffffff80
 801ddec:	6f687465 	svcvs	0x00687465
 801ddf0:	27203a64 	strcs	r3, [r0, -r4, ror #20]!
 801ddf4:	54534f50 	ldrbpl	r4, [r3], #-3920	@ 0xfffff0b0
 801ddf8:	680a2c27 	stmdavs	sl, {r0, r1, r2, r5, sl, fp, sp}
 801ddfc:	65646165 	strbvs	r6, [r4, #-357]!	@ 0xfffffe9b
 801de00:	203a7372 	eorscs	r7, sl, r2, ror r3
 801de04:	43270a7b 			@ <UNDEFINED> instruction: 0x43270a7b
 801de08:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801de0c:	542d746e 	strtpl	r7, [sp], #-1134	@ 0xfffffb92
 801de10:	27657079 			@ <UNDEFINED> instruction: 0x27657079
 801de14:	6127203a 			@ <UNDEFINED> instruction: 0x6127203a
 801de18:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801de1c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801de20:	6a2f6e6f 	bvs	8bf97e4 <__init_array_end+0xbda014>
 801de24:	276e6f73 			@ <UNDEFINED> instruction: 0x276e6f73
 801de28:	0a2c7d0a 	beq	8b3d258 <__init_array_end+0xb1da88>
 801de2c:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801de30:	6170203a 	cmnvs	r0, sl, lsr r0
 801de34:	616f6c79 	smcvs	63177	@ 0xf6c9
 801de38:	297d0a64 	ldmdbcs	sp!, {r2, r5, r6, r9, fp}^
 801de3c:	68742e20 	ldmdavs	r4!, {r5, r9, sl, fp, sp}^
 801de40:	72286e65 	eorvc	r6, r8, #1616	@ 0x650
 801de44:	6f707365 	svcvs	0x00707365
 801de48:	2065736e 	rsbcs	r7, r5, lr, ror #6
 801de4c:	7b203e3d 	blvc	882d748 <__init_array_end+0x80df78>
 801de50:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801de54:	70736572 	rsbsvc	r6, r3, r2, ror r5
 801de58:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	@ 0xfffff191
 801de5c:	296b6f2e 	stmdbcs	fp!, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}^
 801de60:	67207b20 	strvs	r7, [r0, -r0, lsr #22]!
 801de64:	745f7465 	ldrbvc	r7, [pc], #-1125	@ 801de6c <index_js+0x468>
 801de68:	73287478 			@ <UNDEFINED> instruction: 0x73287478
 801de6c:	3b296c65 	blcc	8a79008 <__init_array_end+0xa59838>
 801de70:	297d7d20 	ldmdbcs	sp!, {r5, r8, sl, fp, ip, sp, lr}^
 801de74:	0a7d0a3b 	beq	9f60768 <__init_array_end+0x1f40f98>
	...

0801de79 <styles_css>:
 801de79:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801de7d:	620a7b20 	andvs	r7, sl, #32, 22	@ 0x8000
 801de81:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
 801de85:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 801de89:	6f632d64 	svcvs	0x00632d64
 801de8d:	3a726f6c 	bcc	9cb9c45 <__init_array_end+0x1c9a475>
 801de91:	62677220 	rsbvs	r7, r7, #32, 4
 801de95:	2c303228 	lfmcs	f3, 4, [r0], #-160	@ 0xffffff60
 801de99:	322c3032 	eorcc	r3, ip, #50	@ 0x32
 801de9d:	0a3b2930 	beq	8ee8365 <__init_array_end+0xec8b95>
 801dea1:	6f6c6f63 	svcvs	0x006c6f63
 801dea5:	72203a72 	eorvc	r3, r0, #466944	@ 0x72000
 801dea9:	32286267 	eorcc	r6, r8, #1879048198	@ 0x70000006
 801dead:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801deb1:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	@ 0xffffff38
 801deb5:	35353220 	ldrcc	r3, [r5, #-544]!	@ 0xfffffde0
 801deb9:	7d0a3b29 	vstrvc	d3, [sl, #-164]	@ 0xffffff5c
 801debd:	206c750a 	rsbcs	r7, ip, sl, lsl #10
 801dec1:	69640a7b 	stmdbvs	r4!, {r0, r1, r3, r4, r5, r6, r9, fp}^
 801dec5:	616c7073 	smcvs	50947	@ 0xc703
 801dec9:	66203a79 			@ <UNDEFINED> instruction: 0x66203a79
 801decd:	3b78656c 	blcc	9e37485 <__init_array_end+0x1e17cb5>
 801ded1:	6c0a7d0a 	stcvs	13, cr7, [sl], {10}
 801ded5:	0a7b2069 	beq	9ee6081 <__init_array_end+0x1ec68b1>
 801ded9:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801dedd:	7974732d 	ldmdbvc	r4!, {r0, r2, r3, r5, r8, r9, ip, sp, lr}^
 801dee1:	203a656c 	eorscs	r6, sl, ip, ror #10
 801dee5:	656e6f6e 	strbvs	r6, [lr, #-3950]!	@ 0xfffff092
 801dee9:	616d0a3b 	cmnvs	sp, fp, lsr sl
 801deed:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 801def1:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801def5:	70352078 	eorsvc	r2, r5, r8, ror r0
 801def9:	7d0a3b78 	vstrvc	d3, [sl, #-480]	@ 0xfffffe20
 801defd:	6165680a 	cmnvs	r5, sl, lsl #16
 801df01:	20726564 	rsbscs	r6, r2, r4, ror #10
 801df05:	69640a7b 	stmdbvs	r4!, {r0, r1, r3, r4, r5, r6, r9, fp}^
 801df09:	616c7073 	smcvs	50947	@ 0xc703
 801df0d:	66203a79 			@ <UNDEFINED> instruction: 0x66203a79
 801df11:	3b78656c 	blcc	9e374c9 <__init_array_end+0x1e17cf9>
 801df15:	726f620a 	rsbvc	r6, pc, #-1610612736	@ 0xa0000000
 801df19:	2d726564 	cfldr64cs	mvdx6, [r2, #-400]!	@ 0xfffffe70
 801df1d:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801df21:	203a7375 	eorscs	r7, sl, r5, ror r3
 801df25:	3b787034 	blcc	9e39ffd <__init_array_end+0x1e1a82d>
 801df29:	726f620a 	rsbvc	r6, pc, #-1610612736	@ 0xa0000000
 801df2d:	3a726564 	bcc	9cb74c5 <__init_array_end+0x1c97cf5>
 801df31:	6c6f7320 	stclvs	3, cr7, [pc], #-128	@ 801deb8 <styles_css+0x3f>
 801df35:	67206469 	strvs	r6, [r0, -r9, ror #8]!
 801df39:	20796572 	rsbscs	r6, r9, r2, ror r5
 801df3d:	3b787031 	blcc	9e3a009 <__init_array_end+0x1e1a839>
 801df41:	660a7d0a 	strvs	r7, [sl], -sl, lsl #26
 801df45:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	@ 0xfffff091
 801df49:	0a7b2072 	beq	9ee6119 <__init_array_end+0x1ec6949>
 801df4d:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801df51:	3a79616c 	bcc	9e76509 <__init_array_end+0x1e56d39>
 801df55:	656c6620 	strbvs	r6, [ip, #-1568]!	@ 0xfffff9e0
 801df59:	6a0a3b78 	bvs	82acd41 <__init_array_end+0x28d571>
 801df5d:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801df61:	632d7966 			@ <UNDEFINED> instruction: 0x632d7966
 801df65:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801df69:	203a746e 	eorscs	r7, sl, lr, ror #8
 801df6d:	746e6563 	strbtvc	r6, [lr], #-1379	@ 0xfffffa9d
 801df71:	0a3b7265 	beq	8efa90d <__init_array_end+0xedb13d>
 801df75:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 801df79:	722d7265 	eorvc	r7, sp, #1342177286	@ 0x50000006
 801df7d:	75696461 	strbvc	r6, [r9, #-1121]!	@ 0xfffffb9f
 801df81:	34203a73 	strtcc	r3, [r0], #-2675	@ 0xfffff58d
 801df85:	0a3b7870 	beq	8efc14d <__init_array_end+0xedc97d>
 801df89:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 801df8d:	203a7265 	eorscs	r7, sl, r5, ror #4
 801df91:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801df95:	72672064 	rsbvc	r2, r7, #100	@ 0x64
 801df99:	31207965 			@ <UNDEFINED> instruction: 0x31207965
 801df9d:	0a3b7870 	beq	8efc165 <__init_array_end+0xedc995>
 801dfa1:	75620a7d 	strbvc	r0, [r2, #-2685]!	@ 0xfffff583
 801dfa5:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801dfa9:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 801dfad:	6f737275 	svcvs	0x00737275
 801dfb1:	70203a72 	eorvc	r3, r0, r2, ror sl
 801dfb5:	746e696f 	strbtvc	r6, [lr], #-2415	@ 0xfffff691
 801dfb9:	0a3b7265 	beq	8efa955 <__init_array_end+0xedb185>
 801dfbd:	75620a7d 	strbvc	r0, [r2, #-2685]!	@ 0xfffff583
 801dfc1:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801dfc5:	7463613a 	strbtvc	r6, [r3], #-314	@ 0xfffffec6
 801dfc9:	20657669 	rsbcs	r7, r5, r9, ror #12
 801dfcd:	61620a7b 	smcvs	8363	@ 0x20ab
 801dfd1:	72676b63 	rsbvc	r6, r7, #101376	@ 0x18c00
 801dfd5:	646e756f 	strbtvs	r7, [lr], #-1391	@ 0xfffffa91
 801dfd9:	6c6f632d 	stclvs	3, cr6, [pc], #-180	@ 801df2c <styles_css+0xb3>
 801dfdd:	203a726f 	eorscs	r7, sl, pc, ror #4
 801dfe1:	30303023 	eorscc	r3, r0, r3, lsr #32
 801dfe5:	6f630a3b 	svcvs	0x00630a3b
 801dfe9:	3a726f6c 	bcc	9cb9da1 <__init_array_end+0x1c9a5d1>
 801dfed:	66662320 	strbtvs	r2, [r6], -r0, lsr #6
 801dff1:	7d0a3b66 	vstrvc	d3, [sl, #-408]	@ 0xfffffe68
 801dff5:	74622e0a 	strbtvc	r2, [r2], #-3594	@ 0xfffff1f6
 801dff9:	0a7b206e 	beq	9ee61b9 <__init_array_end+0x1ec69e9>
 801dffd:	6772616d 	ldrbvs	r6, [r2, -sp, ror #2]!
 801e001:	6c2d6e69 	stcvs	14, cr6, [sp], #-420	@ 0xfffffe5c
 801e005:	3a746665 	bcc	9d379a1 <__init_array_end+0x1d181d1>
 801e009:	70303520 	eorsvc	r3, r0, r0, lsr #10
 801e00d:	7d0a3b78 	vstrvc	d3, [sl, #-480]	@ 0xfffffe20
 801e011:	 	cmnvc	r1, #10

0801e013 <static_js>:
 801e013:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801e017:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801e01b:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801e01f:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801e023:	534a7465 	movtpl	r7, #42085	@ 0xa465
 801e027:	6a284e4f 	bvs	8a3196b <__init_array_end+0xa1219b>
 801e02b:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e02f:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 801e033:	7b207972 	blvc	883c603 <__init_array_end+0x81ce33>
 801e037:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801e03b:	72207473 	eorvc	r7, r0, #1929379840	@ 0x73000000
 801e03f:	61203d20 			@ <UNDEFINED> instruction: 0x61203d20
 801e043:	74696177 	strbtvc	r6, [r9], #-375	@ 0xfffffe89
 801e047:	74656620 	strbtvc	r6, [r5], #-1568	@ 0xfffff9e0
 801e04b:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 801e04f:	6f736a2f 	svcvs	0x00736a2f
 801e053:	2b272f6e 	blcs	89e9e13 <__init_array_end+0x9ca643>
 801e057:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801e05b:	66690a29 	strbtvs	r0, [r9], -r9, lsr #20
 801e05f:	72212820 	eorvc	r2, r1, #32, 16	@ 0x200000
 801e063:	296b6f2e 	stmdbcs	fp!, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}^
 801e067:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 801e06b:	776f7268 	strbvc	r7, [pc, -r8, ror #4]!
 801e06f:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
 801e073:	72724520 	rsbsvc	r4, r2, #32, 10	@ 0x8000000
 801e077:	2728726f 	strcs	r7, [r8, -pc, ror #4]!
 801e07b:	6f727245 	svcvs	0x00727245
 801e07f:	0a292772 	beq	8a67e4f <__init_array_end+0xa4867f>
 801e083:	65720a7d 	ldrbvs	r0, [r2, #-2685]!	@ 0xfffff583
 801e087:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 801e08b:	6a2e7220 	bvs	8bba913 <__init_array_end+0xb9b143>
 801e08f:	286e6f73 	stmdacs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e093:	207d0a29 	rsbscs	r0, sp, r9, lsr #20
 801e097:	63746163 	cmnvs	r4, #-1073741800	@ 0xc0000018
 801e09b:	65282068 	strvs	r2, [r8, #-104]!	@ 0xffffff98
 801e09f:	726f7272 	rsbvc	r7, pc, #536870919	@ 0x20000007
 801e0a3:	7d7b2029 	ldclvc	0, cr2, [fp, #-164]!	@ 0xffffff5c
 801e0a7:	610a7d0a 	tstvs	sl, sl, lsl #26
 801e0ab:	636e7973 	cmnvs	lr, #1884160	@ 0x1cc000
 801e0af:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 801e0b3:	6f697463 	svcvs	0x00697463
 801e0b7:	696c206e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, sp}^
 801e0bb:	29287473 	stmdbcs	r8!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 801e0bf:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 801e0c3:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801e0c7:	3d206c20 	stccc	12, cr6, [r0, #-128]!	@ 0xffffff80
 801e0cb:	61776120 	cmnvs	r7, r0, lsr #2
 801e0cf:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801e0d3:	534a7465 	movtpl	r7, #42085	@ 0xa465
 801e0d7:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801e0db:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801e0df:	640a2927 	strvs	r2, [sl], #-2343	@ 0xfffff6d9
 801e0e3:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801e0e7:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e0eb:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801e0ef:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801e0f3:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801e0f7:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 801e0fb:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801e0ff:	29227473 	stmdbcs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 801e103:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 801e107:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 801e10b:	3d204c4d 	stccc	12, cr4, [r0, #-308]!	@ 0xfffffecc
 801e10f:	6c3c2220 	lfmvs	f2, 4, [ip], #-128	@ 0xffffff80
 801e113:	2b223e69 	blcs	88adabf <__init_array_end+0x88e2ef>
 801e117:	696c2e6c 	stmdbvs	ip!, {r2, r3, r5, r6, r9, sl, fp, sp}^
 801e11b:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801e11f:	2b656d61 	blcs	99796ab <__init_array_end+0x1959edb>
 801e123:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 801e0a0 <static_js+0x8d>
 801e127:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	@ 0xfffffe5c
 801e12b:	2b223e69 	blcs	88adad7 <__init_array_end+0x88e307>
 801e12f:	696c2e6c 	stmdbvs	ip!, {r2, r3, r5, r6, r9, sl, fp, sp}^
 801e133:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801e137:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
 801e13b:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801e13f:	2f3c222b 	svccs	0x003c222b
 801e143:	3c3e696c 			@ <UNDEFINED> instruction: 0x3c3e696c
 801e147:	223e696c 	eorscs	r6, lr, #108, 18	@ 0x1b0000
 801e14b:	6c2e6c2b 	stcvs	12, cr6, [lr], #-172	@ 0xffffff54
 801e14f:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 801e153:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 801e157:	726f702e 	rsbvc	r7, pc, #46	@ 0x2e
 801e15b:	79742e74 	ldmdbvc	r4!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801e15f:	222b6570 	eorcs	r6, fp, #112, 10	@ 0x1c000000
 801e163:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801e167:	7d0a223e 	sfmvc	f2, 4, [sl, #-248]	@ 0xffffff08
 801e16b:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 801e16f:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801e173:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
 801e177:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801e17b:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801e17f:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e183:	0a7b2029 	beq	9ee622f <__init_array_end+0x1ec6a5f>
 801e187:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801e18b:	20762074 	rsbscs	r2, r6, r4, ror r0
 801e18f:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801e193:	20746961 	rsbscs	r6, r4, r1, ror #18
 801e197:	4a746567 	bmi	9d3773b <__init_array_end+0x1d17f6b>
 801e19b:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801e19f:	72657627 	rsbvc	r7, r5, #40894464	@ 0x2700000
 801e1a3:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801e1a7:	640a2927 	strvs	r2, [sl], #-2343	@ 0xfffff6d9
 801e1ab:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801e1af:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e1b3:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801e1b7:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801e1bb:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801e1bf:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 801e1c3:	65566469 	ldrbvs	r6, [r6, #-1129]	@ 0xfffffb97
 801e1c7:	6f697372 	svcvs	0x00697372
 801e1cb:	2e29226e 	cdpcs	2, 2, cr2, cr9, cr14, {3}
 801e1cf:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801e1d3:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801e1d7:	203d204c 	eorscs	r2, sp, ip, asr #32
 801e1db:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 801e1df:	2b22563e 	blcs	88b3adf <__init_array_end+0x89430f>
 801e1e3:	65762e76 	ldrbvs	r2, [r6, #-3702]!	@ 0xfffff18a
 801e1e7:	6f697372 	svcvs	0x00697372
 801e1eb:	3c222b6e 			@ <UNDEFINED> instruction: 0x3c222b6e
 801e1ef:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801e1f3:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801e1f7:	2e762b22 	vaddcs.f64	d18, d6, d18
 801e1fb:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	@ 0xfffffe78
 801e1ff:	61642e64 	cmnvs	r4, r4, ror #28
 801e203:	222b6574 	eorcs	r6, fp, #116, 10	@ 0x1d000000
 801e207:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801e20b:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801e20f:	762b223e 			@ <UNDEFINED> instruction: 0x762b223e
 801e213:	6975622e 	ldmdbvs	r5!, {r1, r2, r3, r5, r9, sp, lr}^
 801e217:	742e646c 	strtvc	r6, [lr], #-1132	@ 0xfffffb94
 801e21b:	2b656d69 	blcs	99797c7 <__init_array_end+0x1959ff7>
 801e21f:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 801e19c <static_js+0x189>
 801e223:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	@ 0xfffffe5c
 801e227:	2b223e69 	blcs	88adbd3 <__init_array_end+0x88e403>
 801e22b:	6f622e76 	svcvs	0x00622e76
 801e22f:	2b647261 	blcs	993abbb <__init_array_end+0x191b3eb>
 801e233:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 801e1b0 <static_js+0x19d>
 801e237:	0a223e69 	beq	88adbe3 <__init_array_end+0x88e413>
 801e23b:	75660a7d 	strbvc	r0, [r6, #-2685]!	@ 0xfffff583
 801e23f:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801e243:	70206e6f 	eorvc	r6, r0, pc, ror #28
 801e247:	2874736f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 801e24b:	7b202973 	blvc	882881f <__init_array_end+0x80904f>
 801e24f:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801e253:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801e257:	63746566 	cmnvs	r4, #427819008	@ 0x19800000
 801e25b:	2f272868 	svccs	0x00272868
 801e25f:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801e263:	7463612f 	strbtvc	r6, [r3], #-303	@ 0xfffffed1
 801e267:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 801e26b:	0a7b202c 	beq	9ee6323 <__init_array_end+0x1ec6b53>
 801e26f:	6874656d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 801e273:	203a646f 	eorscs	r6, sl, pc, ror #8
 801e277:	534f5027 	movtpl	r5, #61479	@ 0xf027
 801e27b:	0a2c2754 	beq	8b27fd3 <__init_array_end+0xb08803>
 801e27f:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801e283:	3a737265 	bcc	9cfac1f <__init_array_end+0x1cdb44f>
 801e287:	270a7b20 	strcs	r7, [sl, -r0, lsr #22]
 801e28b:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801e28f:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801e293:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801e297:	27203a27 	strcs	r3, [r0, -r7, lsr #20]!
 801e29b:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801e29f:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801e2a3:	2f6e6f69 	svccs	0x006e6f69
 801e2a7:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801e2ab:	2c7d0a27 			@ <UNDEFINED> instruction: 0x2c7d0a27
 801e2af:	646f620a 	strbtvs	r6, [pc], #-522	@ 801e2b7 <static_js+0x2a4>
 801e2b3:	4a203a79 	bmi	882cc9f <__init_array_end+0x80d4cf>
 801e2b7:	2e4e4f53 	mcrcs	15, 2, r4, cr14, cr3, {2}
 801e2bb:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 801e2bf:	6669676e 	strbtvs	r6, [r9], -lr, ror #14
 801e2c3:	29732879 	ldmdbcs	r3!, {r0, r3, r4, r5, r6, fp, sp}^
 801e2c7:	0a297d0a 	beq	8a7d6f7 <__init_array_end+0xa5df27>
 801e2cb:	75660a7d 	strbvc	r0, [r6, #-2685]!	@ 0xfffff583
 801e2cf:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801e2d3:	64206e6f 	strtvs	r6, [r0], #-3695	@ 0xfffff191
 801e2d7:	74656c65 	strbtvc	r6, [r5], #-3173	@ 0xfffff39b
 801e2db:	20297328 	eorcs	r7, r9, r8, lsr #6
 801e2df:	65720a7b 	ldrbvs	r0, [r2, #-2683]!	@ 0xfffff585
 801e2e3:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 801e2e7:	74656620 	strbtvc	r6, [r5], #-1568	@ 0xfffff9e0
 801e2eb:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 801e2ef:	6f736a2f 	svcvs	0x00736a2f
 801e2f3:	63612f6e 	cmnvs	r1, #440	@ 0x1b8
 801e2f7:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801e2fb:	7b202c27 	blvc	882939f <__init_array_end+0x809bcf>
 801e2ff:	74656d0a 	strbtvc	r6, [r5], #-3338	@ 0xfffff2f6
 801e303:	3a646f68 	bcc	993a0ab <__init_array_end+0x191a8db>
 801e307:	45442720 	strbmi	r2, [r4, #-1824]	@ 0xfffff8e0
 801e30b:	4554454c 	ldrbmi	r4, [r4, #-1356]	@ 0xfffffab4
 801e30f:	680a2c27 	stmdavs	sl, {r0, r1, r2, r5, sl, fp, sp}
 801e313:	65646165 	strbvs	r6, [r4, #-357]!	@ 0xfffffe9b
 801e317:	203a7372 	eorscs	r7, sl, r2, ror r3
 801e31b:	43270a7b 			@ <UNDEFINED> instruction: 0x43270a7b
 801e31f:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801e323:	542d746e 	strtpl	r7, [sp], #-1134	@ 0xfffffb92
 801e327:	27657079 			@ <UNDEFINED> instruction: 0x27657079
 801e32b:	6127203a 			@ <UNDEFINED> instruction: 0x6127203a
 801e32f:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801e333:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801e337:	6a2f6e6f 	bvs	8bf9cfb <__init_array_end+0xbda52b>
 801e33b:	276e6f73 			@ <UNDEFINED> instruction: 0x276e6f73
 801e33f:	0a2c7d0a 	beq	8b3d76f <__init_array_end+0xb1df9f>
 801e343:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e347:	534a203a 	movtpl	r2, #41018	@ 0xa03a
 801e34b:	732e4e4f 			@ <UNDEFINED> instruction: 0x732e4e4f
 801e34f:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 801e353:	79666967 	stmdbvc	r6!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
 801e357:	0a297328 	beq	8a7afff <__init_array_end+0xa5b82f>
 801e35b:	7d0a297d 	vstrvc.16	s4, [sl, #-250]	@ 0xffffff06	@ <UNPREDICTABLE>
 801e35f:	6e75660a 	cdpvs	6, 7, cr6, cr5, cr10, {0}
 801e363:	6f697463 	svcvs	0x00697463
 801e367:	6572206e 	ldrbvs	r2, [r2, #-110]!	@ 0xffffff92
 801e36b:	746f6f62 	strbtvc	r6, [pc], #-3938	@ 801e373 <static_js+0x360>
 801e36f:	7b202928 	blvc	8828817 <__init_array_end+0x809047>
 801e373:	736f700a 	cmnvc	pc, #10
 801e377:	207b2874 	rsbscs	r2, fp, r4, ror r8
 801e37b:	6f626572 	svcvs	0x00626572
 801e37f:	203a746f 	eorscs	r7, sl, pc, ror #8
 801e383:	297d2031 	ldmdbcs	sp!, {r0, r4, r5, sp}^
 801e387:	660a7d0a 	strvs	r7, [sl], -sl, lsl #26
 801e38b:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
 801e38f:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801e393:	61636f6c 	cmnvs	r3, ip, ror #30
 801e397:	29286574 	stmdbcs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}
 801e39b:	760a7b20 	strvc	r7, [sl], -r0, lsr #22
 801e39f:	62207261 	eorvs	r7, r0, #268435462	@ 0x10000006
 801e3a3:	64203d20 	strtvs	r3, [r0], #-3360	@ 0xfffff2e0
 801e3a7:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801e3ab:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e3af:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801e3b3:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801e3b7:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801e3bb:	27286449 	strcs	r6, [r8, -r9, asr #8]!
 801e3bf:	61636f6c 	cmnvs	r3, ip, ror #30
 801e3c3:	75426574 	strbvc	r6, [r2, #-1396]	@ 0xfffffa8c
 801e3c7:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801e3cb:	0a3b2927 	beq	8ee886f <__init_array_end+0xec909f>
 801e3cf:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801e3d3:	6c632e62 	stclvs	14, cr2, [r3], #-392	@ 0xfffffe78
 801e3d7:	4c737361 	ldclmi	3, cr7, [r3], #-388	@ 0xfffffe7c
 801e3db:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 801e3df:	746e6f63 	strbtvc	r6, [lr], #-3939	@ 0xfffff09d
 801e3e3:	736e6961 	cmnvc	lr, #1589248	@ 0x184000
 801e3e7:	6e692728 	cdpvs	7, 6, cr2, cr9, cr8, {1}
 801e3eb:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801e3ef:	29276576 	stmdbcs	r7!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 801e3f3:	0a7b2029 	beq	9ee649f <__init_array_end+0x1ec6ccf>
 801e3f7:	6c632e62 	stclvs	14, cr2, [r3], #-392	@ 0xfffffe78
 801e3fb:	4c737361 	ldclmi	3, cr7, [r3], #-388	@ 0xfffffe7c
 801e3ff:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 801e403:	6f6d6572 	svcvs	0x006d6572
 801e407:	27286576 			@ <UNDEFINED> instruction: 0x27286576
 801e40b:	63616e69 	cmnvs	r1, #1680	@ 0x690
 801e40f:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801e413:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 801e417:	616c632e 	cmnvs	ip, lr, lsr #6
 801e41b:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 801e41f:	612e7473 			@ <UNDEFINED> instruction: 0x612e7473
 801e423:	27286464 	strcs	r6, [r8, -r4, ror #8]!
 801e427:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801e42b:	29276576 	stmdbcs	r7!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 801e42f:	692e620a 	stmdbvs	lr!, {r1, r3, r9, sp, lr}
 801e433:	72656e6e 	rsbvc	r6, r5, #1760	@ 0x6e0
 801e437:	4c4d5448 	cfstrdmi	mvd5, [sp], {72}	@ 0x48
 801e43b:	27203d20 	strcs	r3, [r0, -r0, lsr #26]!
 801e43f:	61636f4c 	cmnvs	r3, ip, asr #30
 801e443:	4f206574 	svcmi	0x00206574
 801e447:	700a276e 	andvc	r2, sl, lr, ror #14
 801e44b:	2874736f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 801e44f:	6469207b 	strbtvs	r2, [r9], #-123	@ 0xffffff85
 801e453:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801e457:	203a7966 	eorscs	r7, sl, r6, ror #18
 801e45b:	297d2031 	ldmdbcs	sp!, {r0, r4, r5, sp}^
 801e45f:	65207d0a 	strvs	r7, [r0, #-3338]!	@ 0xfffff2f6
 801e463:	2065736c 	rsbcs	r7, r5, ip, ror #6
 801e467:	2e620a7b 			@ <UNDEFINED> instruction: 0x2e620a7b
 801e46b:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 801e46f:	73694c73 	cmnvc	r9, #29440	@ 0x7300
 801e473:	65722e74 	ldrbvs	r2, [r2, #-3700]!	@ 0xfffff18c
 801e477:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	@ 0xfffff093
 801e47b:	63612728 	cmnvs	r1, #40, 14	@ 0xa00000
 801e47f:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801e483:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 801e487:	616c632e 	cmnvs	ip, lr, lsr #6
 801e48b:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 801e48f:	612e7473 			@ <UNDEFINED> instruction: 0x612e7473
 801e493:	27286464 	strcs	r6, [r8, -r4, ror #8]!
 801e497:	63616e69 	cmnvs	r1, #1680	@ 0x690
 801e49b:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801e49f:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 801e4a3:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 801e4a7:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 801e4ab:	3d204c4d 	stccc	12, cr4, [r0, #-308]!	@ 0xfffffecc
 801e4af:	6f4c2720 	svcvs	0x004c2720
 801e4b3:	65746163 	ldrbvs	r6, [r4, #-355]!	@ 0xfffffe9d
 801e4b7:	66664f20 	strbtvs	r4, [r6], -r0, lsr #30
 801e4bb:	6f700a27 	svcvs	0x00700a27
 801e4bf:	7b287473 	blvc	8a3b693 <__init_array_end+0xa1bec3>
 801e4c3:	65646920 	strbvs	r6, [r4, #-2336]!	@ 0xfffff6e0
 801e4c7:	6669746e 	strbtvs	r7, [r9], -lr, ror #8
 801e4cb:	30203a79 	eorcc	r3, r0, r9, ror sl
 801e4cf:	0a297d20 	beq	8a7d957 <__init_array_end+0xa5e187>
 801e4d3:	007d0a7d 	rsbseq	r0, sp, sp, ror sl

0801e4d7 <dmx_js>:
 801e4d7:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801e4db:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801e4df:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801e4e3:	72206e6f 	eorvc	r6, r0, #1776	@ 0x6f0
 801e4e7:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801e4eb:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 801e4ef:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 801e4f3:	7b207972 	blvc	883cac3 <__init_array_end+0x81d2f3>
 801e4f7:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 801e4fb:	613d6420 	teqvs	sp, r0, lsr #8
 801e4ff:	74696177 	strbtvc	r6, [r9], #-375	@ 0xfffffe89
 801e503:	74656720 	strbtvc	r6, [r5], #-1824	@ 0xfffff8e0
 801e507:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801e50b:	6d642728 	stclvs	7, cr2, [r4, #-160]!	@ 0xffffff60
 801e50f:	6f702f78 	svcvs	0x00702f78
 801e513:	74737472 	ldrbtvc	r7, [r3], #-1138	@ 0xfffffb8e
 801e517:	73757461 	cmnvc	r5, #1627389952	@ 0x61000000
 801e51b:	6c0a2927 			@ <UNDEFINED> instruction: 0x6c0a2927
 801e51f:	68207465 	stmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
 801e523:	3d737264 	lfmcc	f7, 2, [r3, #-400]!	@ 0xfffffe70
 801e527:	72743c27 	rsbsvc	r3, r4, #9984	@ 0x2700
 801e52b:	6c0a273e 	stcvs	7, cr2, [sl], {62}	@ 0x3e
 801e52f:	74207465 	strtvc	r7, [r0], #-1125	@ 0xfffffb9b
 801e533:	273d6464 	ldrcs	r6, [sp, -r4, ror #8]!
 801e537:	3e72743c 	mrccc	4, 3, r7, cr2, cr12, {1}
 801e53b:	2e640a27 	vmulcs.f32	s1, s8, s15
 801e53f:	45726f66 	ldrbmi	r6, [r2, #-3942]!	@ 0xfffff09a
 801e543:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 801e547:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	@ 0xfffffe5c
 801e54b:	203e3d20 	eorscs	r3, lr, r0, lsr #26
 801e54f:	64680a7b 	strbtvs	r0, [r8], #-2683	@ 0xfffff585
 801e553:	3d2b7372 	stccc	3, cr7, [fp, #-456]!	@ 0xfffffe38
 801e557:	68743c60 	ldmdavs	r4!, {r5, r6, sl, fp, ip, sp}^
 801e55b:	697b243e 	ldmdbvs	fp!, {r1, r2, r3, r4, r5, sl, sp}^
 801e55f:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 801e563:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801e567:	742f3c7d 	strtvc	r3, [pc], #-3197	@ 801e56f <dmx_js+0x98>
 801e56b:	0a603e68 	beq	982df13 <__init_array_end+0x180e743>
 801e56f:	2b646474 	blcs	9937747 <__init_array_end+0x1917f77>
 801e573:	743c603d 	ldrtvc	r6, [ip], #-61	@ 0xffffffc3
 801e577:	7b243e64 	blvc	892df0f <__init_array_end+0x90e73f>
 801e57b:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	@ 0xfffffe5c
 801e57f:	7269642e 	rsbvc	r6, r9, #771751936	@ 0x2e000000
 801e583:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801e587:	3c7d6e6f 	ldclcc	14, cr6, [sp], #-444	@ 0xfffffe44
 801e58b:	3e64742f 	cdpcc	4, 6, cr7, cr4, cr15, {1}
 801e58f:	297d0a60 	ldmdbcs	sp!, {r5, r6, r9, fp}^
 801e593:	6f640a3b 	svcvs	0x00640a3b
 801e597:	656d7563 	strbvs	r7, [sp, #-1379]!	@ 0xfffffa9d
 801e59b:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801e59f:	6c457465 	cfstrdvs	mvd7, [r5], {101}	@ 0x65
 801e5a3:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801e5a7:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801e5ab:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801e5af:	61745364 	cmnvs	r4, r4, ror #6
 801e5b3:	29227374 	stmdbcs	r2!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
 801e5b7:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 801e5bb:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 801e5bf:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 801e5c3:	2b737264 	blcs	9cfaf5b <__init_array_end+0x1cdb78b>
 801e5c7:	742f3c27 	strtvc	r3, [pc], #-3111	@ 801e5cf <dmx_js+0xf8>
 801e5cb:	2b273e72 	blcs	89edf9b <__init_array_end+0x9ce7cb>
 801e5cf:	2b646474 	blcs	99377a7 <__init_array_end+0x1917fd7>
 801e5d3:	742f3c27 	strtvc	r3, [pc], #-3111	@ 801e5db <dmx_js+0x104>
 801e5d7:	0a273e72 	beq	89edfa7 <__init_array_end+0x9ce7d7>
 801e5db:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801e5df:	3d207274 	sfmcc	f7, 4, [r0, #-464]!	@ 0xfffffe30
 801e5e3:	61776120 	cmnvs	r7, r0, lsr #2
 801e5e7:	50207469 	eorpl	r7, r0, r9, ror #8
 801e5eb:	696d6f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e5ef:	612e6573 			@ <UNDEFINED> instruction: 0x612e6573
 801e5f3:	0a286c6c 	beq	8a397ab <__init_array_end+0xa19fdb>
 801e5f7:	616d2e64 	cmnvs	sp, r4, ror #28
 801e5fb:	74692870 	strbtvc	r2, [r9], #-2160	@ 0xfffff790
 801e5ff:	3d206d65 	stccc	13, cr6, [r0, #-404]!	@ 0xfffffe6c
 801e603:	6567203e 	strbvs	r2, [r7, #-62]!	@ 0xffffffc2
 801e607:	4f534a74 	svcmi	0x00534a74
 801e60b:	6427284e 	strtvs	r2, [r7], #-2126	@ 0xfffff7b2
 801e60f:	732f786d 			@ <UNDEFINED> instruction: 0x732f786d
 801e613:	75746174 	ldrbvc	r6, [r4, #-372]!	@ 0xfffffe8c
 801e617:	20273f73 	eorcs	r3, r7, r3, ror pc
 801e61b:	7469202b 	strbtvc	r2, [r9], #-43	@ 0xffffffd5
 801e61f:	702e6d65 	eorvc	r6, lr, r5, ror #26
 801e623:	2974726f 	ldmdbcs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801e627:	6568742e 	strbvs	r7, [r8, #-1070]!	@ 0xfffffbd2
 801e62b:	6572286e 	ldrbvs	r2, [r2, #-2158]!	@ 0xfffff792
 801e62f:	3d207073 	stccc	0, cr7, [r0, #-460]!	@ 0xfffffe34
 801e633:	7b28203e 	blvc	8a26733 <__init_array_end+0xa06f63>
 801e637:	726f700a 	rsbvc	r7, pc, #10
 801e63b:	69203a74 	stmdbvs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
 801e63f:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 801e643:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801e647:	3a640a2c 	bcc	9920eff <__init_array_end+0x190172f>
 801e64b:	73207b20 			@ <UNDEFINED> instruction: 0x73207b20
 801e64f:	3a746e65 	bcc	9d39feb <__init_array_end+0x1d1a81b>
 801e653:	73657220 	cmnvc	r5, #32, 4
 801e657:	6d642e70 	stclvs	14, cr2, [r4, #-448]!	@ 0xfffffe40
 801e65b:	65732e78 	ldrbvs	r2, [r3, #-3704]!	@ 0xfffff188
 801e65f:	202c746e 	eorcs	r7, ip, lr, ror #8
 801e663:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 801e667:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 801e66b:	6572203a 	ldrbvs	r2, [r2, #-58]!	@ 0xffffffc6
 801e66f:	642e7073 	strtvs	r7, [lr], #-115	@ 0xffffff8d
 801e673:	722e786d 	eorvc	r7, lr, #7143424	@ 0x6d0000
 801e677:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801e67b:	20646576 	rsbcs	r6, r4, r6, ror r5
 801e67f:	720a2c7d 	andvc	r2, sl, #32000	@ 0x7d00
 801e683:	0a7b203a 	beq	9ee6773 <__init_array_end+0x1ec6fa3>
 801e687:	746e6573 	strbtvc	r6, [lr], #-1395	@ 0xfffffa8d
 801e68b:	207b203a 	rsbscs	r2, fp, sl, lsr r0
 801e68f:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 801e693:	72203a73 	eorvc	r3, r0, #471040	@ 0x73000
 801e697:	2e707365 	cdpcs	3, 7, cr7, cr0, cr5, {3}
 801e69b:	2e6d6472 	mcrcs	4, 3, r6, cr13, cr2, {3}
 801e69f:	746e6573 	strbtvc	r6, [lr], #-1395	@ 0xfffffa8d
 801e6a3:	616c632e 	cmnvs	ip, lr, lsr #6
 801e6a7:	202c7373 	eorcs	r7, ip, r3, ror r3
 801e6ab:	63736964 	cmnvs	r3, #100, 18	@ 0x190000
 801e6af:	7265766f 	rsbvc	r7, r5, #116391936	@ 0x6f00000
 801e6b3:	72203a79 	eorvc	r3, r0, #495616	@ 0x79000
 801e6b7:	2e707365 	cdpcs	3, 7, cr7, cr0, cr5, {3}
 801e6bb:	2e6d6472 	mcrcs	4, 3, r6, cr13, cr2, {3}
 801e6bf:	746e6573 	strbtvc	r6, [lr], #-1395	@ 0xfffffa8d
 801e6c3:	7369642e 	cmnvc	r9, #771751936	@ 0x2e000000
 801e6c7:	65766f63 	ldrbvs	r6, [r6, #-3939]!	@ 0xfffff09d
 801e6cb:	7d207972 			@ <UNDEFINED> instruction: 0x7d207972
 801e6cf:	65720a2c 	ldrbvs	r0, [r2, #-2604]!	@ 0xfffff5d4
 801e6d3:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 801e6d7:	203a6465 	eorscs	r6, sl, r5, ror #8
 801e6db:	6f67207b 	svcvs	0x0067207b
 801e6df:	203a646f 	eorscs	r6, sl, pc, ror #8
 801e6e3:	70736572 	rsbsvc	r6, r3, r2, ror r5
 801e6e7:	6d64722e 	sfmvs	f7, 2, [r4, #-184]!	@ 0xffffff48
 801e6eb:	6365722e 	cmnvs	r5, #-536870910	@ 0xe0000002
 801e6ef:	65766965 	ldrbvs	r6, [r6, #-2405]!	@ 0xfffff69b
 801e6f3:	6f672e64 	svcvs	0x00672e64
 801e6f7:	202c646f 	eorcs	r6, ip, pc, ror #8
 801e6fb:	3a646162 	bcc	9936c8b <__init_array_end+0x19174bb>
 801e6ff:	73657220 	cmnvc	r5, #32, 4
 801e703:	64722e70 	ldrbtvs	r2, [r2], #-3696	@ 0xfffff190
 801e707:	65722e6d 	ldrbvs	r2, [r2, #-3693]!	@ 0xfffff193
 801e70b:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 801e70f:	622e6465 	eorvs	r6, lr, #1694498816	@ 0x65000000
 801e713:	202c6461 	eorcs	r6, ip, r1, ror #8
 801e717:	63736964 	cmnvs	r3, #100, 18	@ 0x190000
 801e71b:	7265766f 	rsbvc	r7, r5, #116391936	@ 0x6f00000
 801e71f:	72203a79 	eorvc	r3, r0, #495616	@ 0x79000
 801e723:	2e707365 	cdpcs	3, 7, cr7, cr0, cr5, {3}
 801e727:	2e6d6472 	mcrcs	4, 3, r6, cr13, cr2, {3}
 801e72b:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 801e72f:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 801e733:	7369642e 	cmnvc	r9, #771751936	@ 0x2e000000
 801e737:	65766f63 	ldrbvs	r6, [r6, #-3939]!	@ 0xfffff09d
 801e73b:	7d0a7972 	vstrvc.16	s14, [sl, #-228]	@ 0xffffff1c	@ <UNPREDICTABLE>
 801e73f:	29297d7d 	stmdbcs	r9!, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 801e743:	0a3b2929 	beq	8ee8bef <__init_array_end+0xec941f>
 801e747:	732e7274 			@ <UNDEFINED> instruction: 0x732e7274
 801e74b:	2874726f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801e74f:	202c6128 	eorcs	r6, ip, r8, lsr #2
 801e753:	3d202962 			@ <UNDEFINED> instruction: 0x3d202962
 801e757:	0a7b203e 	beq	9ee6857 <__init_array_end+0x1ec7087>
 801e75b:	75746572 	ldrbvc	r6, [r4, #-1394]!	@ 0xfffffa8e
 801e75f:	64206e72 	strtvs	r6, [r0], #-3698	@ 0xfffff18e
 801e763:	6e69662e 	cdpvs	6, 6, cr6, cr9, cr14, {1}
 801e767:	646e4964 	strbtvs	r4, [lr], #-2404	@ 0xfffff69c
 801e76b:	69287865 	stmdbvs	r8!, {r0, r2, r5, r6, fp, ip, sp, lr}
 801e76f:	206d6574 	rsbcs	r6, sp, r4, ror r5
 801e773:	69203e3d 	stmdbvs	r0!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 801e777:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 801e77b:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801e77f:	3d3d3d20 	ldccc	13, cr3, [sp, #-128]!	@ 0xffffff80
 801e783:	702e6120 	eorvc	r6, lr, r0, lsr #2
 801e787:	2974726f 	ldmdbcs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801e78b:	64202d20 	strtvs	r2, [r0], #-3360	@ 0xfffff2e0
 801e78f:	6e69662e 	cdpvs	6, 6, cr6, cr9, cr14, {1}
 801e793:	646e4964 	strbtvs	r4, [lr], #-2404	@ 0xfffff69c
 801e797:	69287865 	stmdbvs	r8!, {r0, r2, r5, r6, fp, ip, sp, lr}
 801e79b:	206d6574 	rsbcs	r6, sp, r4, ror r5
 801e79f:	69203e3d 	stmdbvs	r0!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 801e7a3:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 801e7a7:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801e7ab:	3d3d3d20 	ldccc	13, cr3, [sp, #-128]!	@ 0xffffff80
 801e7af:	702e6220 	eorvc	r6, lr, r0, lsr #4
 801e7b3:	2974726f 	ldmdbcs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801e7b7:	3b297d0a 	blcc	8a7dbe7 <__init_array_end+0xa5e417>
 801e7bb:	7264680a 	rsbvc	r6, r4, #655360	@ 0xa0000
 801e7bf:	3c273d73 	stccc	13, cr3, [r7], #-460	@ 0xfffffe34
 801e7c3:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	@ 0xfffffe30
 801e7c7:	72206874 	eorvc	r6, r0, #116, 16	@ 0x740000
 801e7cb:	7073776f 	rsbsvc	r7, r3, pc, ror #14
 801e7cf:	223d6e61 	eorscs	r6, sp, #1552	@ 0x610
 801e7d3:	503e2233 	eorspl	r2, lr, r3, lsr r2
 801e7d7:	3c74726f 	lfmcc	f7, 2, [r4], #-444	@ 0xfffffe44
 801e7db:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 801e7df:	2068743c 	rsbcs	r7, r8, ip, lsr r4
 801e7e3:	736c6f63 	cmnvc	ip, #396	@ 0x18c
 801e7e7:	3d6e6170 	stfcce	f6, [lr, #-448]!	@ 0xfffffe40
 801e7eb:	3e223222 	cdpcc	2, 2, cr3, cr2, cr2, {1}
 801e7ef:	3c584d44 	mrrccc	13, 4, r4, r8, cr4
 801e7f3:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 801e7f7:	2068743c 	rsbcs	r7, r8, ip, lsr r4
 801e7fb:	736c6f63 	cmnvc	ip, #396	@ 0x18c
 801e7ff:	3d6e6170 	stfcce	f6, [lr, #-448]!	@ 0xfffffe40
 801e803:	3e223522 	cfsh64cc	mvdx3, mvdx2, #18
 801e807:	3c4d4452 	cfstrdcc	mvd4, [sp], {82}	@ 0x52
 801e80b:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 801e80f:	72742f3c 	rsbsvc	r2, r4, #60, 30	@ 0xf0
 801e813:	72743c3e 	rsbsvc	r3, r4, #15872	@ 0x3e00
 801e817:	68743c3e 	ldmdavs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801e81b:	776f7220 	strbvc	r7, [pc, -r0, lsr #4]!
 801e81f:	6e617073 	mcrvs	0, 3, r7, cr1, cr3, {3}
 801e823:	2232223d 	eorscs	r2, r2, #-805306365	@ 0xd0000003
 801e827:	6e65533e 	mcrvs	3, 3, r5, cr5, cr14, {1}
 801e82b:	742f3c74 	strtvc	r3, [pc], #-3188	@ 801e833 <dmx_js+0x35c>
 801e82f:	743c3e68 	ldrtvc	r3, [ip], #-3688	@ 0xfffff198
 801e833:	6f722068 	svcvs	0x00722068
 801e837:	61707377 	cmnvs	r0, r7, ror r3
 801e83b:	32223d6e 	eorcc	r3, r2, #7040	@ 0x1b80
 801e83f:	65523e22 	ldrbvs	r3, [r2, #-3618]	@ 0xfffff1de
 801e843:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 801e847:	2f3c6465 	svccs	0x003c6465
 801e84b:	3c3e6874 	ldccc	8, cr6, [lr], #-464	@ 0xfffffe30
 801e84f:	63206874 			@ <UNDEFINED> instruction: 0x63206874
 801e853:	70736c6f 	rsbsvc	r6, r3, pc, ror #24
 801e857:	223d6e61 	eorscs	r6, sp, #1552	@ 0x610
 801e85b:	533e2232 	teqpl	lr, #536870915	@ 0x20000003
 801e85f:	3c746e65 	ldclcc	14, cr6, [r4], #-404	@ 0xfffffe6c
 801e863:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 801e867:	2068743c 	rsbcs	r7, r8, ip, lsr r4
 801e86b:	736c6f63 	cmnvc	ip, #396	@ 0x18c
 801e86f:	3d6e6170 	stfcce	f6, [lr, #-448]!	@ 0xfffffe40
 801e873:	3e223322 	cdpcc	3, 2, cr3, cr2, cr2, {1}
 801e877:	65636552 	strbvs	r6, [r3, #-1362]!	@ 0xfffffaae
 801e87b:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 801e87f:	68742f3c 	ldmdavs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801e883:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801e88b <dmx_js+0x3b4>
 801e887:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801e88b:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801e88f:	6c433e68 	mcrrvs	14, 6, r3, r3, cr8
 801e893:	3c737361 	ldclcc	3, cr7, [r3], #-388	@ 0xfffffe7c
 801e897:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 801e89b:	3e68743c 	mcrcc	4, 3, r7, cr8, cr12, {1}
 801e89f:	63736944 	cmnvs	r3, #68, 18	@ 0x110000
 801e8a3:	7265766f 	rsbvc	r7, r5, #116391936	@ 0x6f00000
 801e8a7:	742f3c79 	strtvc	r3, [pc], #-3193	@ 801e8af <dmx_js+0x3d8>
 801e8ab:	743c3e68 	ldrtvc	r3, [ip], #-3688	@ 0xfffff198
 801e8af:	6f473e68 	svcvs	0x00473e68
 801e8b3:	2f3c646f 	svccs	0x003c646f
 801e8b7:	3c3e6874 	ldccc	8, cr6, [lr], #-464	@ 0xfffffe30
 801e8bb:	423e6874 	eorsmi	r6, lr, #116, 16	@ 0x740000
 801e8bf:	2f3c6461 	svccs	0x003c6461
 801e8c3:	3c3e6874 	ldccc	8, cr6, [lr], #-464	@ 0xfffffe30
 801e8c7:	443e6874 	ldrtmi	r6, [lr], #-2164	@ 0xfffff78c
 801e8cb:	6f637369 	svcvs	0x00637369
 801e8cf:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 801e8d3:	68742f3c 	ldmdavs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801e8d7:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801e8df <dmx_js+0x408>
 801e8db:	0a273e72 	beq	89ee2ab <__init_array_end+0x9ceadb>
 801e8df:	3d646474 	cfstrdcc	mvd6, [r4, #-464]!	@ 0xfffffe30
 801e8e3:	740a2727 	strvc	r2, [sl], #-1831	@ 0xfffff8d9
 801e8e7:	6f662e72 	svcvs	0x00662e72
 801e8eb:	63614572 	cmnvs	r1, #478150656	@ 0x1c800000
 801e8ef:	20702868 	rsbscs	r2, r0, r8, ror #16
 801e8f3:	7b203e3d 	blvc	882e1ef <__init_array_end+0x80ea1f>
 801e8f7:	6464740a 	strbtvs	r7, [r4], #-1034	@ 0xfffffbf6
 801e8fb:	3c603d2b 	stclcc	13, cr3, [r0], #-172	@ 0xffffff54
 801e8ff:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	@ 0xfffffe30
 801e903:	243e6474 	ldrtcs	r6, [lr], #-1140	@ 0xfffffb8c
 801e907:	702e707b 	eorvc	r7, lr, fp, ror r0
 801e90b:	7d74726f 	lfmvc	f7, 2, [r4, #-444]!	@ 0xfffffe44
 801e90f:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 801e913:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 801e917:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 801e91b:	732e642e 			@ <UNDEFINED> instruction: 0x732e642e
 801e91f:	7d746e65 	ldclvc	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801e923:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 801e927:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 801e92b:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 801e92f:	722e642e 	eorvc	r6, lr, #771751936	@ 0x2e000000
 801e933:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801e937:	7d646576 	cfstr64vc	mvdx6, [r4, #-472]!	@ 0xfffffe28
 801e93b:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 801e93f:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 801e943:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 801e947:	732e722e 			@ <UNDEFINED> instruction: 0x732e722e
 801e94b:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e94f:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 801e953:	2f3c7d73 	svccs	0x003c7d73
 801e957:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	@ 0xfffffe30
 801e95b:	243e6474 	ldrtcs	r6, [lr], #-1140	@ 0xfffffb8c
 801e95f:	722e707b 	eorvc	r7, lr, #123	@ 0x7b
 801e963:	6e65732e 	cdpvs	3, 6, cr7, cr5, cr14, {1}
 801e967:	69642e74 	stmdbvs	r4!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801e96b:	766f6373 			@ <UNDEFINED> instruction: 0x766f6373
 801e96f:	7d797265 	lfmvc	f7, 2, [r9, #-404]!	@ 0xfffffe6c
 801e973:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 801e977:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 801e97b:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 801e97f:	722e722e 	eorvc	r7, lr, #-536870910	@ 0xe0000002
 801e983:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801e987:	2e646576 	mcrcs	5, 3, r6, cr4, cr6, {3}
 801e98b:	646f6f67 	strbtvs	r6, [pc], #-3943	@ 801e993 <dmx_js+0x4bc>
 801e98f:	742f3c7d 	strtvc	r3, [pc], #-3197	@ 801e997 <dmx_js+0x4c0>
 801e993:	743c3e64 	ldrtvc	r3, [ip], #-3684	@ 0xfffff19c
 801e997:	7b243e64 	blvc	892e32f <__init_array_end+0x90eb5f>
 801e99b:	2e722e70 	mrccs	14, 3, r2, cr2, cr0, {3}
 801e99f:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 801e9a3:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 801e9a7:	6461622e 	strbtvs	r6, [r1], #-558	@ 0xfffffdd2
 801e9ab:	742f3c7d 	strtvc	r3, [pc], #-3197	@ 801e9b3 <dmx_js+0x4dc>
 801e9af:	743c3e64 	ldrtvc	r3, [ip], #-3684	@ 0xfffff19c
 801e9b3:	7b243e64 	blvc	892e34b <__init_array_end+0x90eb7b>
 801e9b7:	2e722e70 	mrccs	14, 3, r2, cr2, cr0, {3}
 801e9bb:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 801e9bf:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 801e9c3:	7369642e 	cmnvc	r9, #771751936	@ 0x2e000000
 801e9c7:	65766f63 	ldrbvs	r6, [r6, #-3939]!	@ 0xfffff09d
 801e9cb:	3c7d7972 			@ <UNDEFINED> instruction: 0x3c7d7972
 801e9cf:	3e64742f 	cdpcc	4, 6, cr7, cr4, cr15, {1}
 801e9d3:	72742f3c 	rsbsvc	r2, r4, #60, 30	@ 0xf0
 801e9d7:	0a3b603e 	beq	8ef6ad7 <__init_array_end+0xed7307>
 801e9db:	0a3b297d 	beq	8ee8fd7 <__init_array_end+0xec9807>
 801e9df:	75636f64 	strbvc	r6, [r3, #-3940]!	@ 0xfffff09c
 801e9e3:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801e9e7:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 801e9eb:	6d656c45 	stclvs	12, cr6, [r5, #-276]!	@ 0xfffffeec
 801e9ef:	42746e65 	rsbsmi	r6, r4, #1616	@ 0x650
 801e9f3:	28644979 	stmdacs	r4!, {r0, r3, r4, r5, r6, r8, fp, lr}^
 801e9f7:	50646922 	rsbpl	r6, r4, r2, lsr #18
 801e9fb:	7374726f 	cmnvc	r4, #-268435450	@ 0xf0000006
 801e9ff:	692e2922 	stmdbvs	lr!, {r1, r5, r8, fp, sp}
 801ea03:	72656e6e 	rsbvc	r6, r5, #1760	@ 0x6e0
 801ea07:	4c4d5448 	cfstrdmi	mvd5, [sp], {72}	@ 0x48
 801ea0b:	7264683d 	rsbvc	r6, r4, #3997696	@ 0x3d0000
 801ea0f:	64742b73 	ldrbtvs	r2, [r4], #-2931	@ 0xfffff48d
 801ea13:	207d0a64 	rsbscs	r0, sp, r4, ror #20
 801ea17:	63746163 	cmnvs	r4, #-1073741800	@ 0xc0000018
 801ea1b:	65282068 	strvs	r2, [r8, #-104]!	@ 0xffffff98
 801ea1f:	726f7272 	rsbvc	r7, pc, #536870919	@ 0x20000007
 801ea23:	0a7d7b29 	beq	9f7d6cf <__init_array_end+0x1f5deff>
 801ea27:	 	cmnmi	r3, sp, ror r0

0801ea29 <E131MsgConst::STARTED>:
 801ea29:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801ea2d:	2e314520 	cfabs64cs	mvdx4, mvdx1
 801ea31:	73203133 			@ <UNDEFINED> instruction: 0x73203133
 801ea35:	74726174 	ldrbtvc	r6, [r2], #-372	@ 0xfffffe8c
 801ea39:	 	movwpl	r6, #1125	@ 0x465

0801ea3c <E131MsgConst::START>:
 801ea3c:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
 801ea40:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
 801ea44:	43417320 	movtmi	r7, #4896	@ 0x1320
 801ea48:	3145204e 	cmpcc	r5, lr, asr #32
 801ea4c:	0031332e 	eorseq	r3, r1, lr, lsr #6

0801ea50 <E131ParamsConst::FILE_NAME>:
 801ea50:	31333165 	teqcc	r3, r5, ror #2
 801ea54:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
	...

0801ea59 <E117Const::ACN_PACKET_IDENTIFIER>:
 801ea59:	2d435341 	stclcs	3, cr5, [r3, #-260]	@ 0xfffffefc
 801ea5d:	312e3145 			@ <UNDEFINED> instruction: 0x312e3145
 801ea61:	00000037 	andeq	r0, r0, r7, lsr r0

0801ea65 <E131Const::VERSION>:
 801ea65:	 	andeq	r1, r0, r1, lsl #22

0801ea68 <vtable for RDMDeviceResponder>:
	...
 801ea70:	08009ee5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, fp, ip, pc}
 801ea74:	08009fed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 801ea78:	0800d1f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, ip, lr, pc}
 801ea7c:	0800d1fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr, pc}

0801ea80 <RDMHandler::PID_DEFINITIONS>:
 801ea80:	00000060 	andeq	r0, r0, r0, rrx
 801ea84:	0800d719 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, ip, lr, pc}
	...
 801ea94:	01010000 	mrseq	r0, (UNDEF: 1)
 801ea98:	00000080 	andeq	r0, r0, r0, lsl #1
 801ea9c:	0800d851 	stmdaeq	r0, {r0, r4, r6, fp, ip, lr, pc}
	...
 801eaac:	01010100 	mrseq	r0, (UNDEF: 17)
 801eab0:	00000081 	andeq	r0, r0, r1, lsl #1
 801eab4:	0800d8bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, fp, ip, lr, pc}
	...
 801eac4:	01010100 	mrseq	r0, (UNDEF: 17)
 801eac8:	00000082 	andeq	r0, r0, r2, lsl #1
 801eacc:	0800d86d 	stmdaeq	r0, {r0, r2, r3, r5, r6, fp, ip, lr, pc}
 801ead0:	00000000 	andeq	r0, r0, r0
 801ead4:	0800d9ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, fp, ip, lr, pc}
 801ead8:	00000000 	andeq	r0, r0, r0
 801eadc:	01010100 	mrseq	r0, (UNDEF: 17)
 801eae0:	00000090 	muleq	r0, r0, r0
 801eae4:	0800d791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, lr, pc}
 801eae8:	00000000 	andeq	r0, r0, r0
 801eaec:	0800d9b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, ip, lr, pc}
 801eaf0:	00000000 	andeq	r0, r0, r0
 801eaf4:	01010100 	mrseq	r0, (UNDEF: 17)
 801eaf8:	00001000 	andeq	r1, r0, r0
 801eafc:	0800d8a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, ip, lr, pc}
 801eb00:	00000000 	andeq	r0, r0, r0
 801eb04:	0800d93d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, fp, ip, lr, pc}
 801eb08:	00000000 	andeq	r0, r0, r0
 801eb0c:	01010000 	mrseq	r0, (UNDEF: 1)
 801eb10:	00001001 	andeq	r1, r0, r1
	...
 801eb1c:	0800d8f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, fp, ip, lr, pc}
 801eb20:	00000000 	andeq	r0, r0, r0
 801eb24:	01010100 	mrseq	r0, (UNDEF: 17)
 801eb28:	00000700 	andeq	r0, r0, r0, lsl #14
 801eb2c:	0800dec9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, fp, ip, lr, pc}
	...
 801eb3c:	01000000 	mrseq	r0, (UNDEF: 0)
 801eb40:	00000701 	andeq	r0, r0, r1, lsl #14
 801eb44:	0800dee5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, fp, ip, lr, pc}
	...
 801eb54:	01000004 	tsteq	r0, r4
 801eb58:	00000702 	andeq	r0, r0, r2, lsl #14
 801eb5c:	0800df35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr, pc}
	...
 801eb6c:	01000004 	tsteq	r0, r4
 801eb70:	00000703 	andeq	r0, r0, r3, lsl #14
 801eb74:	0800df69 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr, pc}
 801eb78:	00000000 	andeq	r0, r0, r0
 801eb7c:	0800df99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, sl, fp, ip, lr, pc}
 801eb80:	00000000 	andeq	r0, r0, r0
 801eb84:	01000004 	tsteq	r0, r4
 801eb88:	00000704 	andeq	r0, r0, r4, lsl #14
 801eb8c:	0800e019 	stmdaeq	r0, {r0, r3, r4, sp, lr, pc}
 801eb90:	00000000 	andeq	r0, r0, r0
 801eb94:	0800e055 	stmdaeq	r0, {r0, r2, r4, r6, sp, lr, pc}
 801eb98:	00000000 	andeq	r0, r0, r0
 801eb9c:	01000004 	tsteq	r0, r4
 801eba0:	00000705 	andeq	r0, r0, r5, lsl #14
 801eba4:	0800e0cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sp, lr, pc}
	...
 801ebb4:	01000004 	tsteq	r0, r4
 801ebb8:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 801ebc4:	0800e09d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sp, lr, pc}
 801ebc8:	00000000 	andeq	r0, r0, r0
 801ebcc:	01000004 	tsteq	r0, r4
 801ebd0:	00000706 	andeq	r0, r0, r6, lsl #14
 801ebd4:	0800e11d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sp, lr, pc}
 801ebd8:	00000000 	andeq	r0, r0, r0
 801ebdc:	0800e165 	stmdaeq	r0, {r0, r2, r5, r6, r8, sp, lr, pc}
 801ebe0:	00000000 	andeq	r0, r0, r0
 801ebe4:	01000004 	tsteq	r0, r4
 801ebe8:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 801ebf4:	0800e1b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sp, lr, pc}
 801ebf8:	00000000 	andeq	r0, r0, r0
 801ebfc:	01000004 	tsteq	r0, r4
 801ec00:	0000070b 	andeq	r0, r0, fp, lsl #14
 801ec04:	0800dfcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, lr, pc}
	...
 801ec14:	01000001 	tsteq	r0, r1
 801ec18:	0000070a 	andeq	r0, r0, sl, lsl #14
 801ec1c:	0800e1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, lr, pc}
 801ec20:	00000000 	andeq	r0, r0, r0
 801ec24:	0800e219 	stmdaeq	r0, {r0, r3, r4, r9, sp, lr, pc}
 801ec28:	00000000 	andeq	r0, r0, r0
 801ec2c:	01000004 	tsteq	r0, r4
 801ec30:	0000070c 	andeq	r0, r0, ip, lsl #14
 801ec34:	0800e259 	stmdaeq	r0, {r0, r3, r4, r6, r9, sp, lr, pc}
 801ec38:	00000000 	andeq	r0, r0, r0
 801ec3c:	0800e285 	stmdaeq	r0, {r0, r2, r7, r9, sp, lr, pc}
 801ec40:	00000000 	andeq	r0, r0, r0
 801ec44:	01000000 	mrseq	r0, (UNDEF: 0)
 801ec48:	0000070d 	andeq	r0, r0, sp, lsl #14
 801ec4c:	0800e2b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sp, lr, pc}
 801ec50:	00000000 	andeq	r0, r0, r0
 801ec54:	0800e2e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sp, lr, pc}
 801ec58:	00000000 	andeq	r0, r0, r0
 801ec5c:	01000000 	mrseq	r0, (UNDEF: 0)

0801ec60 <UID_ALL>:
 801ec60:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 801ec64:	 	svcvs	0x0043ffff

0801ec66 <RDMNetConst::MSG_CONFIG>:
 801ec66:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801ec6a:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801ec6e:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801ec72:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801ec76:	 	andpl	r7, r0, r5, ror #8

0801ec79 <RDMConst::MANUFACTURER_ID>:
 801ec79:	 	strbtvc	r0, [r8], #-80	@ 0xffffffb0

0801ec7b <RDMConst::MANUFACTURER_NAME>:
 801ec7b:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801ec7f:	772f2f3a 			@ <UNDEFINED> instruction: 0x772f2f3a
 801ec83:	6f2e7777 	svcvs	0x002e7777
 801ec87:	676e6172 			@ <UNDEFINED> instruction: 0x676e6172
 801ec8b:	2d697065 	stclcs	0, cr7, [r9, #-404]!	@ 0xfffffe6c
 801ec8f:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801ec93:	0067726f 	rsbeq	r7, r7, pc, ror #4

0801ec97 <DEVICE_LABEL>:
 801ec97:	32334447 	eorscc	r4, r3, #1191182336	@ 0x47000000
 801ec9b:	30373446 	eorscc	r3, r7, r6, asr #8
 801ec9f:	56455f5a 			@ <UNDEFINED> instruction: 0x56455f5a
 801eca3:	52204c41 	eorpl	r4, r0, #16640	@ 0x4100
 801eca7:	44204d44 	strtmi	r4, [r0], #-3396	@ 0xfffff2bc
 801ecab:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801ecaf:	 	ldclvs	0, cr0, [r3], #-404	@ 0xfffffe6c

0801ecb1 <DmxParamsConst::SLOTS_COUNT>:
 801ecb1:	746f6c73 	strbtvc	r6, [pc], #-3187	@ 801ecb9 <DmxParamsConst::SLOTS_COUNT+0x8>
 801ecb5:	6f635f73 	svcvs	0x00635f73
 801ecb9:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801ecbd <DmxParamsConst::REFRESH_RATE>:
 801ecbd:	72666572 	rsbvc	r6, r6, #478150656	@ 0x1c800000
 801ecc1:	5f687365 	svcpl	0x00687365
 801ecc5:	65746172 	ldrbvs	r6, [r4, #-370]!	@ 0xfffffe8e
	...

0801ecca <DmxParamsConst::MAB_TIME>:
 801ecca:	5f62616d 	svcpl	0x0062616d
 801ecce:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
	...

0801ecd3 <DmxParamsConst::BREAK_TIME>:
 801ecd3:	61657262 	cmnvs	r5, r2, ror #4
 801ecd7:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 801ecdb:	 	andvc	r6, r0, sp, ror #10

0801ecde <DmxParamsConst::FILE_NAME>:
 801ecde:	61726170 	cmnvs	r2, r0, ror r1
 801ece2:	742e736d 	strtvc	r7, [lr], #-877	@ 0xfffffc93
 801ece6:	00007478 	andeq	r7, r0, r8, ror r4
	...

0801ecec <s_DirGpio>:
 801ecec:	40020c00 	andmi	r0, r2, r0, lsl #24
 801ecf0:	00000001 	andeq	r0, r0, r1
 801ecf4:	40020c00 	andmi	r0, r2, r0, lsl #24
 801ecf8:	00000002 	andeq	r0, r0, r2

0801ecfc <CSWTCH.81>:
 801ecfc:	02020200 	andeq	r0, r2, #0, 4
 801ed00:	04020202 	streq	r0, [r2], #-514	@ 0xfffffdfe
 801ed04:	00000500 	andeq	r0, r0, r0, lsl #10

0801ed08 <CSWTCH.49>:
 801ed08:	00000000 	andeq	r0, r0, r0
 801ed0c:	00000002 	andeq	r0, r0, r2
 801ed10:	00000002 	andeq	r0, r0, r2
 801ed14:	00000002 	andeq	r0, r0, r2
 801ed18:	00000002 	andeq	r0, r0, r2
 801ed1c:	00000002 	andeq	r0, r0, r2
 801ed20:	00000002 	andeq	r0, r0, r2
 801ed24:	00000004 	andeq	r0, r0, r4
 801ed28:	00000000 	andeq	r0, r0, r0
 801ed2c:	00000005 	andeq	r0, r0, r5

0801ed30 <vtable for WS28xxDmxMulti>:
	...
 801ed38:	08010071 	stmdaeq	r1, {r0, r4, r5, r6}
 801ed3c:	08010389 	stmdaeq	r1, {r0, r3, r7, r8, r9}
 801ed40:	080102d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9}
 801ed44:	08010341 	stmdaeq	r1, {r0, r6, r8, r9}
 801ed48:	08011079 	stmdaeq	r1, {r0, r3, r4, r5, r6, ip}
 801ed4c:	0801102d 	stmdaeq	r1, {r0, r2, r3, r5, ip}
 801ed50:	08010095 	stmdaeq	r1, {r0, r2, r4, r7}
 801ed54:	0800950d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip, pc}
 801ed58:	08010319 	stmdaeq	r1, {r0, r3, r4, r8, r9}
 801ed5c:	080100ad 	stmdaeq	r1, {r0, r2, r3, r5, r7}
 801ed60:	080100c5 	stmdaeq	r1, {r0, r2, r6, r7}
 801ed64:	08010061 	stmdaeq	r1, {r0, r5, r6}
 801ed68:	08010065 	stmdaeq	r1, {r0, r2, r5, r6}
 801ed6c:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
 801ed70:	08009521 	stmdaeq	r0, {r0, r5, r8, sl, ip, pc}

0801ed74 <pixel::MAPS>:
 801ed74:	00424752 	subeq	r4, r2, r2, asr r7
 801ed78:	00474252 	subeq	r4, r7, r2, asr r2
 801ed7c:	00425247 	subeq	r5, r2, r7, asr #4
 801ed80:	00524247 	subseq	r4, r2, r7, asr #4
 801ed84:	00475242 	subeq	r5, r7, r2, asr #4
 801ed88:	00524742 	subseq	r4, r2, r2, asr #14

0801ed8c <pixel::TYPES>:
 801ed8c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801ed90:	00003130 	andeq	r3, r0, r0, lsr r1
 801ed94:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801ed98:	00003131 	andeq	r3, r0, r1, lsr r1
 801ed9c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801eda0:	00003231 	andeq	r3, r0, r1, lsr r2
 801eda4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801eda8:	00423231 	subeq	r3, r2, r1, lsr r2
 801edac:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801edb0:	00003331 	andeq	r3, r0, r1, lsr r3
 801edb4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801edb8:	00003531 	andeq	r3, r0, r1, lsr r5
 801edbc:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801edc0:	00003231 	andeq	r3, r0, r1, lsr r2
 801edc4:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801edc8:	00573231 	subseq	r3, r7, r1, lsr r2
 801edcc:	31534355 	cmpcc	r3, r5, asr r3
 801edd0:	00333039 	eorseq	r3, r3, r9, lsr r0
 801edd4:	32534355 	subscc	r4, r3, #1409286145	@ 0x54000001
 801edd8:	00333039 	eorseq	r3, r3, r9, lsr r0
 801eddc:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 801ede0:	00003231 	andeq	r3, r0, r1, lsr r2
 801ede4:	31415041 	cmpcc	r1, r1, asr #32
 801ede8:	00003230 	andeq	r3, r0, r0, lsr r2
 801edec:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801edf0:	00003232 	andeq	r3, r0, r2, lsr r2
 801edf4:	31383950 	teqcc	r8, r0, asr r9
 801edf8:	00000033 	andeq	r0, r0, r3, lsr r0

0801edfc <s_patternName>:
 801edfc:	656e6f4e 	strbvs	r6, [lr, #-3918]!	@ 0xfffff0b2
	...
 801ee08:	61520000 	cmpvs	r2, r0
 801ee0c:	6f626e69 	svcvs	0x00626e69
 801ee10:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801ee14:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801ee18:	61656854 	cmnvs	r5, r4, asr r8
 801ee1c:	20726574 	rsbscs	r6, r2, r4, ror r5
 801ee20:	73616863 	cmnvc	r1, #6488064	@ 0x630000
 801ee24:	6f430065 	svcvs	0x00430065
 801ee28:	72756f6c 	rsbsvc	r6, r5, #108, 30	@ 0x1b0
 801ee2c:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801ee30:	00000065 	andeq	r0, r0, r5, rrx
 801ee34:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801ee38:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801ee3c:	00000000 	andeq	r0, r0, r0
 801ee40:	61460000 	mrsvs	r0, (UNDEF: 70)
 801ee44:	00006564 	andeq	r6, r0, r4, ror #10
	...

0801ee50 <CSWTCH.69>:
 801ee50:	00000000 	andeq	r0, r0, r0
 801ee54:	00000002 	andeq	r0, r0, r2
 801ee58:	00000002 	andeq	r0, r0, r2
 801ee5c:	00000002 	andeq	r0, r0, r2
 801ee60:	00000002 	andeq	r0, r0, r2
 801ee64:	00000002 	andeq	r0, r0, r2
 801ee68:	00000002 	andeq	r0, r0, r2
 801ee6c:	00000004 	andeq	r0, r0, r4
 801ee70:	00000000 	andeq	r0, r0, r0
 801ee74:	00000005 	andeq	r0, r0, r5

0801ee78 <pixel::s_GPIO_PINs>:
 801ee78:	 	strbvs	r3, [lr, #-4032]	@ 0xfffff040

0801ee7a <NetworkConst::MSG_NETWORK_STARTED>:
 801ee7a:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801ee7e:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801ee82:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801ee86:	00646574 	rsbeq	r6, r4, r4, ror r5

0801ee8a <NetworkConst::MSG_NETWORK_INIT>:
 801ee8a:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801ee8e:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801ee92:	74696e69 	strbtvc	r6, [r9], #-3689	@ 0xfffff197
	...

0801ee98 <mdns::DOMAIN_DNSSD>:
 801ee98:	65735f09 	ldrbvs	r5, [r3, #-3849]!	@ 0xfffff0f7
 801ee9c:	63697672 	cmnvs	r9, #119537664	@ 0x7200000
 801eea0:	5f077365 	svcpl	0x00077365
 801eea4:	2d736e64 	ldclcs	14, cr6, [r3, #-400]!	@ 0xfffffe70
 801eea8:	5f046473 	svcpl	0x00046473
 801eeac:	05706475 	ldrbeq	r6, [r0, #-1141]!	@ 0xfffffb8b
 801eeb0:	61636f6c 	cmnvs	r3, ip, ror #30
 801eeb4:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801ef98:	0000001e 	andeq	r0, r0, lr, lsl r0

0801ef9c <mdns::s_Services>:
 801ef9c:	0801f064 	stmdaeq	r1, {r2, r5, r6, ip, sp, lr, pc}
 801efa0:	00000008 	andeq	r0, r0, r8
 801efa4:	00000000 	andeq	r0, r0, r0
 801efa8:	00002905 	andeq	r2, r0, r5, lsl #18
 801efac:	0801f05e 	stmdaeq	r1, {r1, r2, r3, r4, r6, ip, sp, lr, pc}
 801efb0:	00000006 	andeq	r0, r0, r6
 801efb4:	00000000 	andeq	r0, r0, r0
 801efb8:	00000045 	andeq	r0, r0, r5, asr #32
 801efbc:	0801f058 	stmdaeq	r1, {r3, r4, r6, ip, sp, lr, pc}
 801efc0:	00000006 	andeq	r0, r0, r6
 801efc4:	00000001 	andeq	r0, r0, r1
 801efc8:	00000050 	andeq	r0, r0, r0, asr r0
 801efcc:	0801f04b 	stmdaeq	r1, {r0, r1, r3, r6, ip, sp, lr, pc}
 801efd0:	0000000d 	andeq	r0, r0, sp
 801efd4:	00000000 	andeq	r0, r0, r0
 801efd8:	000015c1 	andeq	r1, r0, r1, asr #11
 801efdc:	0801f046 	stmdaeq	r1, {r1, r2, r6, ip, sp, lr, pc}
 801efe0:	00000005 	andeq	r0, r0, r5
 801efe4:	00000000 	andeq	r0, r0, r0
 801efe8:	0000007b 	andeq	r0, r0, fp, ror r0
 801efec:	0801f03a 	stmdaeq	r1, {r1, r3, r4, r5, ip, sp, lr, pc}
 801eff0:	0000000c 	andeq	r0, r0, ip
 801eff4:	00000000 	andeq	r0, r0, r0
 801eff8:	0000138c 	andeq	r1, r0, ip, lsl #7
 801effc:	0801f035 	stmdaeq	r1, {r0, r2, r4, r5, ip, sp, lr, pc}
 801f000:	00000005 	andeq	r0, r0, r5
	...
 801f00c:	0801f030 	stmdaeq	r1, {r4, r5, ip, sp, lr, pc}
 801f010:	00000005 	andeq	r0, r0, r5
 801f014:	00000000 	andeq	r0, r0, r0
 801f018:	00000fd0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 801f01c:	0801f02c 	stmdaeq	r1, {r2, r3, r5, ip, sp, lr, pc}
 801f020:	00000004 	andeq	r0, r0, r4
 801f024:	00000000 	andeq	r0, r0, r0
 801f028:	000013d6 	ldrdeq	r1, [r0], -r6

0801f02c <mdns::DOMAIN_PP>:
 801f02c:	70705f03 	rsbsvc	r5, r0, r3, lsl #30

0801f030 <mdns::DOMAIN_DDP>:
 801f030:	64645f04 	strbtvs	r5, [r4], #-3844	@ 0xfffff0fc
 801f034:	 	svcvs	0x005f0470

0801f035 <mdns::DOMAIN_OSC>:
 801f035:	736f5f04 	cmnvc	pc, #4, 30
 801f039:	 	cmpvs	pc, r3, ror #22

0801f03a <mdns::DOMAIN_MIDI>:
 801f03a:	70615f0b 	rsbvc	r5, r1, fp, lsl #30
 801f03e:	2d656c70 	stclcs	12, cr6, [r5, #-448]!	@ 0xfffffe40
 801f042:	6964696d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^

0801f046 <mdns::DOMAIN_NTP>:
 801f046:	746e5f04 	strbtvc	r5, [lr], #-3844	@ 0xfffff0fc
 801f04a:	 	subsvc	r0, pc, #112, 24	@ 0x7000

0801f04b <mdns::DOMAIN_RDMNET_LLRP>:
 801f04b:	64725f0c 	ldrbtvs	r5, [r2], #-3852	@ 0xfffff0f4
 801f04f:	74656e6d 	strbtvc	r6, [r5], #-3693	@ 0xfffff193
 801f053:	726c6c2d 	rsbvc	r6, ip, #11520	@ 0x2d00
 801f057:	 	ldmdavs	pc, {r4, r5, r6, r8, sl}^	@ <UNPREDICTABLE>

0801f058 <mdns::DOMAIN_HTTP>:
 801f058:	74685f05 	strbtvc	r5, [r8], #-3845	@ 0xfffff0fb
 801f05c:	 	svcpl	0x00057074

0801f05e <mdns::DOMAIN_TFTP>:
 801f05e:	66745f05 	ldrbtvs	r5, [r4], -r5, lsl #30
 801f062:	 	svcpl	0x00077074

0801f064 <mdns::DOMAIN_CONFIG>:
 801f064:	6f635f07 	svcvs	0x00635f07
 801f068:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!

0801f06c <mdns::DOMAIN_TCP>:
 801f06c:	63745f04 	cmnvs	r4, #4, 30
 801f070:	 	ldrbvc	r0, [pc, #-1136]	@ 801ec08 <RDMHandler::PID_DEFINITIONS+0x188>

0801f071 <mdns::DOMAIN_UDP>:
 801f071:	64755f04 	ldrbtvs	r5, [r5], #-3844	@ 0xfffff0fc
 801f075:	 	svcvs	0x006c0570

0801f076 <mdns::DOMAIN_LOCAL>:
 801f076:	636f6c05 	cmnvs	pc, #1280	@ 0x500
 801f07a:	 	cdpvs	12, 0, cr6, cr0, cr1, {3}

0801f07d <NetworkParamsConst::NTP_SERVER>:
 801f07d:	5f70746e 	svcpl	0x0070746e
 801f081:	76726573 			@ <UNDEFINED> instruction: 0x76726573
 801f085:	 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}

0801f088 <NetworkParamsConst::HOSTNAME>:
 801f088:	74736f68 	ldrbtvc	r6, [r3], #-3944	@ 0xfffff098
 801f08c:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
	...

0801f091 <NetworkParamsConst::DEFAULT_GATEWAY>:
 801f091:	61666564 	cmnvs	r6, r4, ror #10
 801f095:	5f746c75 	svcpl	0x00746c75
 801f099:	65746167 	ldrbvs	r6, [r4, #-359]!	@ 0xfffffe99
 801f09d:	00796177 	rsbseq	r6, r9, r7, ror r1

0801f0a1 <NetworkParamsConst::NET_MASK>:
 801f0a1:	5f74656e 	svcpl	0x0074656e
 801f0a5:	6b73616d 	blvs	9cf7661 <__init_array_end+0x1cd7e91>
	...

0801f0aa <NetworkParamsConst::IP_ADDRESS>:
 801f0aa:	615f7069 	cmpvs	pc, r9, rrx
 801f0ae:	65726464 	ldrbvs	r6, [r2, #-1124]!	@ 0xfffffb9c
 801f0b2:	 	strvs	r7, [r0], #-883	@ 0xfffffc8d

0801f0b5 <NetworkParamsConst::DHCP_RETRY_TIME>:
 801f0b5:	70636864 	rsbvc	r6, r3, r4, ror #16
 801f0b9:	7465725f 	strbtvc	r7, [r5], #-607	@ 0xfffffda1
 801f0bd:	745f7972 	ldrbvc	r7, [pc], #-2418	@ 801f0c5 <NetworkParamsConst::USE_DHCP>
 801f0c1:	00656d69 	rsbeq	r6, r5, r9, ror #26

0801f0c5 <NetworkParamsConst::USE_DHCP>:
 801f0c5:	5f657375 	svcpl	0x00657375
 801f0c9:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

0801f0ce <NetworkParamsConst::FILE_NAME>:
 801f0ce:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801f0d2:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801f0d6:	00747874 	rsbseq	r7, r4, r4, ror r8
	...

0801f0dc <pArray>:
 801f0dc:	0801f15a 	stmdaeq	r1, {r1, r3, r4, r6, r8, ip, sp, lr, pc}
 801f0e0:	0801f14f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, ip, sp, lr, pc}
 801f0e4:	0801f0aa 	stmdaeq	r1, {r1, r3, r5, r7, ip, sp, lr, pc}
 801f0e8:	0801f147 	stmdaeq	r1, {r0, r1, r2, r6, r8, ip, sp, lr, pc}
 801f0ec:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 801f0f0:	0801f13a 	stmdaeq	r1, {r1, r3, r4, r5, r8, ip, sp, lr, pc}
 801f0f4:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 801f0f8:	0801f088 	stmdaeq	r1, {r3, r7, ip, sp, lr, pc}
 801f0fc:	0801f44e 	stmdaeq	r1, {r1, r2, r3, r6, sl, ip, sp, lr, pc}
 801f100:	0801f45e 	stmdaeq	r1, {r1, r2, r3, r4, r6, sl, ip, sp, lr, pc}
 801f104:	0801f46e 	stmdaeq	r1, {r1, r2, r3, r5, r6, sl, ip, sp, lr, pc}
 801f108:	0801f47e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, sp, lr, pc}
 801f10c:	0801f0a1 	stmdaeq	r1, {r0, r5, r7, ip, sp, lr, pc}
 801f110:	0801f374 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, ip, sp, lr, pc}
 801f114:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 801f118:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 801f11c:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 801f120:	0801b290 	stmdaeq	r1, {r4, r7, r9, ip, sp, pc}
 801f124:	0801f091 	stmdaeq	r1, {r0, r4, r7, ip, sp, lr, pc}
 801f128:	0801f12c 	stmdaeq	r1, {r2, r3, r5, r8, ip, sp, lr, pc}

0801f12c <DisplayUdfParamsConst::DMX_DIRECTION>:
 801f12c:	5f786d64 	svcpl	0x00786d64
 801f130:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801f134:	6f697463 	svcvs	0x00697463
 801f138:	 	cmnvs	r1, #110	@ 0x6e

0801f13a <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801f13a:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801f13e:	705f6576 	subsvc	r6, pc, r6, ror r5	@ <UNPREDICTABLE>
 801f142:	7374726f 	cmnvc	r4, #-268435450	@ 0xf0000006
	...

0801f147 <DisplayUdfParamsConst::VERSION>:
 801f147:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801f14b:	006e6f69 	rsbeq	r6, lr, r9, ror #30

0801f14f <DisplayUdfParamsConst::BOARD_NAME>:
 801f14f:	72616f62 	rsbvc	r6, r1, #392	@ 0x188
 801f153:	616e5f64 	cmnvs	lr, r4, ror #30
 801f157:	 	strvc	r6, [r0], #-1389	@ 0xfffffa93

0801f15a <DisplayUdfParamsConst::TITLE>:
 801f15a:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 801f15e:	 	stclvs	0, cr0, [r6], #-404	@ 0xfffffe6c

0801f160 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 801f160:	70696c66 	rsbvc	r6, r9, r6, ror #24
 801f164:	7265765f 	rsbvc	r7, r5, #99614720	@ 0x5f00000
 801f168:	61636974 	smcvs	13972	@ 0x3694
 801f16c:	00796c6c 	rsbseq	r6, r9, ip, ror #24

0801f170 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 801f170:	65656c73 	strbvs	r6, [r5, #-3187]!	@ 0xfffff38d
 801f174:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801f178:	756f656d 	strbvc	r6, [pc, #-1389]!	@ 801ec13 <RDMHandler::PID_DEFINITIONS+0x193>
 801f17c:	 	mcrvs	0, 3, r0, cr9, cr4, {3}

0801f17e <DisplayUdfParamsConst::INTENSITY>:
 801f17e:	65746e69 	ldrbvs	r6, [r4, #-3689]!	@ 0xfffff197
 801f182:	7469736e 	strbtvc	r7, [r9], #-878	@ 0xfffffc92
 801f186:	 	stmdbvs	r4!, {r0, r3, r4, r5, r6}^

0801f188 <DisplayUdfParamsConst::FILE_NAME>:
 801f188:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801f18c:	2e79616c 	rpwcsez	f6, f1, #4.0
 801f190:	00747874 	rsbseq	r7, r4, r4, ror r8

0801f194 <s_aStorSize>:
 801f194:	00000060 	andeq	r0, r0, r0, rrx
 801f198:	00000020 	andeq	r0, r0, r0, lsr #32
 801f19c:	00000040 	andeq	r0, r0, r0, asr #32
 801f1a0:	00000040 	andeq	r0, r0, r0, asr #32
 801f1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1a8:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1ac:	000001e0 	andeq	r0, r0, r0, ror #3
 801f1b0:	00000040 	andeq	r0, r0, r0, asr #32
 801f1b4:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1b8:	00000060 	andeq	r0, r0, r0, rrx
 801f1bc:	00000030 	andeq	r0, r0, r0, lsr r0
 801f1c0:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1c4:	000003b0 			@ <UNDEFINED> instruction: 0x000003b0
 801f1c8:	00000030 	andeq	r0, r0, r0, lsr r0
 801f1cc:	00000040 	andeq	r0, r0, r0, asr #32
 801f1d0:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1d4:	00000060 	andeq	r0, r0, r0, rrx
 801f1d8:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1dc:	00000400 	andeq	r0, r0, r0, lsl #8
 801f1e0:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1e4:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1e8:	00000040 	andeq	r0, r0, r0, asr #32
 801f1ec:	00000060 	andeq	r0, r0, r0, rrx
 801f1f0:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 801f1f8:	00000140 	andeq	r0, r0, r0, asr #2
 801f1fc:	00000020 	andeq	r0, r0, r0, lsr #32

0801f200 <s_aSignature>:
 801f200:	01567641 	cmpeq	r6, r1, asr #12

0801f204 <hal::utc_validate(signed char, unsigned char, long&)::s_ValidOffsets>:
 801f204:	1efd1ef7 	mrcne	14, 7, r1, cr13, cr7, {7}
 801f208:	1e041e03 	cdpne	14, 0, cr1, cr4, cr3, {0}
 801f20c:	2d051e05 	stccs	14, cr1, [r5, #-20]	@ 0xffffffec
 801f210:	2d081e06 	stccs	14, cr1, [r8, #-24]	@ 0xffffffe8
 801f214:	1e0a1e09 	cdpne	14, 0, cr1, cr10, cr9, {0}
 801f218:	 	ldrbtvc	r2, [r5], #-3340	@ 0xfffff2f4

0801f21a <EnvParamsConst::UTC_OFFSET>:
 801f21a:	5f637475 	svcpl	0x00637475
 801f21e:	7366666f 	cmnvc	r6, #116391936	@ 0x6f00000
 801f222:	 	strvs	r7, [r0, #-1125]	@ 0xfffffb9b

0801f225 <EnvParamsConst::FILE_NAME>:
 801f225:	2e766e65 	cdpcs	14, 7, cr6, cr6, cr5, {3}
 801f229:	00747874 	rsbseq	r7, r4, r4, ror r8

0801f22d <DevicesParamsConst::TEST_PATTERN>:
 801f22d:	74736574 	ldrbtvc	r6, [r3], #-1396	@ 0xfffffa8c
 801f231:	7461705f 	strbtvc	r7, [r1], #-95	@ 0xffffffa1
 801f235:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0801f23a <DevicesParamsConst::ACTIVE_OUT>:
 801f23a:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801f23e:	6f5f6576 	svcvs	0x005f6576
 801f242:	 	smlsdxvs	r0, r5, r4, r7

0801f245 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801f245:	626f6c67 	rsbvs	r6, pc, #26368	@ 0x6700
 801f249:	625f6c61 	subsvs	r6, pc, #24832	@ 0x6100
 801f24d:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801f251:	73656e74 	cmnvc	r5, #116, 28	@ 0x740
 801f255:	 	stclvs	0, cr0, [r3], #-460	@ 0xfffffe34

0801f257 <DevicesParamsConst::SPI_SPEED_HZ>:
 801f257:	636f6c63 	cmnvs	pc, #25344	@ 0x6300
 801f25b:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801f25f:	5f646565 	svcpl	0x00646565
 801f263:	 			@ <UNDEFINED> instruction: 0x6c007a68

0801f266 <DevicesParamsConst::GROUPING_COUNT>:
 801f266:	5f64656c 	svcpl	0x0064656c
 801f26a:	756f7267 	strbvc	r7, [pc, #-615]!	@ 801f00b <mdns::s_Services+0x6f>
 801f26e:	6f635f70 	svcvs	0x00635f70
 801f272:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801f276 <DevicesParamsConst::COUNT>:
 801f276:	5f64656c 	svcpl	0x0064656c
 801f27a:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801f27e:	 	strbvs	r0, [ip, #-116]!	@ 0xffffff8c

0801f280 <DevicesParamsConst::LED_T1H>:
 801f280:	5f64656c 	svcpl	0x0064656c
 801f284:	00683174 	rsbeq	r3, r8, r4, ror r1

0801f288 <DevicesParamsConst::LED_T0H>:
 801f288:	5f64656c 	svcpl	0x0064656c
 801f28c:	00683074 	rsbeq	r3, r8, r4, ror r0

0801f290 <DevicesParamsConst::MAP>:
 801f290:	5f64656c 	svcpl	0x0064656c
 801f294:	5f626772 	svcpl	0x00626772
 801f298:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801f29c:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801f2a0 <DevicesParamsConst::TYPE>:
 801f2a0:	5f64656c 	svcpl	0x0064656c
 801f2a4:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
	...

0801f2a9 <DevicesParamsConst::FILE_NAME>:
 801f2a9:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801f2ad:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801f2b1:	00747874 	rsbseq	r7, r4, r4, ror r8

0801f2b5 <LightSetParamsConst::START_UNI_PORT>:
 801f2b5:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f2b9:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f2bd:	6f705f69 	svcvs	0x00705f69
 801f2c1:	315f7472 	cmpcc	pc, r2, ror r4	@ <UNPREDICTABLE>
 801f2c5:	00000000 	andeq	r0, r0, r0
 801f2c9:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f2cd:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f2d1:	6f705f69 	svcvs	0x00705f69
 801f2d5:	325f7472 	subscc	r7, pc, #1912602624	@ 0x72000000
 801f2d9:	00000000 	andeq	r0, r0, r0
 801f2dd:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f2e1:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f2e5:	6f705f69 	svcvs	0x00705f69
 801f2e9:	335f7472 	cmpcc	pc, #1912602624	@ 0x72000000
 801f2ed:	00000000 	andeq	r0, r0, r0
 801f2f1:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f2f5:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f2f9:	6f705f69 	svcvs	0x00705f69
 801f2fd:	345f7472 	ldrbcc	r7, [pc], #-1138	@ 801f305 <LightSetParamsConst::START_UNI_PORT+0x50>
 801f301:	00000000 	andeq	r0, r0, r0
 801f305:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f309:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f30d:	6f705f69 	svcvs	0x00705f69
 801f311:	355f7472 	ldrbcc	r7, [pc, #-1138]	@ 801eea7 <mdns::DOMAIN_DNSSD+0xf>
 801f315:	00000000 	andeq	r0, r0, r0
 801f319:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f31d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f321:	6f705f69 	svcvs	0x00705f69
 801f325:	365f7472 			@ <UNDEFINED> instruction: 0x365f7472
 801f329:	00000000 	andeq	r0, r0, r0
 801f32d:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f331:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f335:	6f705f69 	svcvs	0x00705f69
 801f339:	375f7472 			@ <UNDEFINED> instruction: 0x375f7472
 801f33d:	00000000 	andeq	r0, r0, r0
 801f341:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f345:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f349:	6f705f69 	svcvs	0x00705f69
 801f34d:	385f7472 	ldmdacc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	@ <UNPREDICTABLE>
 801f351:	00000000 	andeq	r0, r0, r0

0801f355 <LightSetParamsConst::FAILSAFE>:
 801f355:	6c696166 	stfvse	f6, [r9], #-408	@ 0xfffffe68
 801f359:	65666173 	strbvs	r6, [r6, #-371]!	@ 0xfffffe8d
	...

0801f35e <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 801f35e:	61736964 	cmnvs	r3, r4, ror #18
 801f362:	5f656c62 	svcpl	0x00656c62
 801f366:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801f36a:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 801f36e:	756f656d 	strbvc	r6, [pc, #-1389]!	@ 801ee09 <s_patternName+0xd>
 801f372:	 	stclvs	0, cr0, [r4, #-464]!	@ 0xfffffe30

0801f374 <LightSetParamsConst::DMX_START_ADDRESS>:
 801f374:	5f786d64 	svcpl	0x00786d64
 801f378:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f37c:	64615f74 	strbtvs	r5, [r1], #-3956	@ 0xfffff08c
 801f380:	73657264 	cmnvc	r5, #100, 4	@ 0x40000006
 801f384:	 	smcvs	49155	@ 0xc003

0801f386 <LightSetParamsConst::NODE_LABEL>:
 801f386:	6562616c 	strbvs	r6, [r2, #-364]!	@ 0xfffffe94
 801f38a:	6f705f6c 	svcvs	0x00705f6c
 801f38e:	615f7472 	cmpvs	pc, r2, ror r4	@ <UNPREDICTABLE>
 801f392:	616c0000 	cmnvs	ip, r0
 801f396:	5f6c6562 	svcpl	0x006c6562
 801f39a:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f39e:	0000625f 	andeq	r6, r0, pc, asr r2
 801f3a2:	6562616c 	strbvs	r6, [r2, #-364]!	@ 0xfffffe94
 801f3a6:	6f705f6c 	svcvs	0x00705f6c
 801f3aa:	635f7472 	cmpvs	pc, #1912602624	@ 0x72000000
 801f3ae:	616c0000 	cmnvs	ip, r0
 801f3b2:	5f6c6562 	svcpl	0x006c6562
 801f3b6:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f3ba:	0000645f 	andeq	r6, r0, pc, asr r4

0801f3be <LightSetParamsConst::DIRECTION>:
 801f3be:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801f3c2:	6f697463 	svcvs	0x00697463
 801f3c6:	6f705f6e 	svcvs	0x00705f6e
 801f3ca:	615f7472 	cmpvs	pc, r2, ror r4	@ <UNPREDICTABLE>
 801f3ce:	69640000 	stmdbvs	r4!, {}^	@ <UNPREDICTABLE>
 801f3d2:	74636572 	strbtvc	r6, [r3], #-1394	@ 0xfffffa8e
 801f3d6:	5f6e6f69 	svcpl	0x006e6f69
 801f3da:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f3de:	0000625f 	andeq	r6, r0, pc, asr r2
 801f3e2:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801f3e6:	6f697463 	svcvs	0x00697463
 801f3ea:	6f705f6e 	svcvs	0x00705f6e
 801f3ee:	635f7472 	cmpvs	pc, #1912602624	@ 0x72000000
 801f3f2:	69640000 	stmdbvs	r4!, {}^	@ <UNPREDICTABLE>
 801f3f6:	74636572 	strbtvc	r6, [r3], #-1394	@ 0xfffffa8e
 801f3fa:	5f6e6f69 	svcpl	0x006e6f69
 801f3fe:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f402:	0000645f 	andeq	r6, r0, pc, asr r4

0801f406 <LightSetParamsConst::MERGE_MODE_PORT>:
 801f406:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801f40a:	6f6d5f65 	svcvs	0x006d5f65
 801f40e:	705f6564 	subsvc	r6, pc, r4, ror #10
 801f412:	5f74726f 	svcpl	0x0074726f
 801f416:	656d0061 	strbvs	r0, [sp, #-97]!	@ 0xffffff9f
 801f41a:	5f656772 	svcpl	0x00656772
 801f41e:	65646f6d 	strbvs	r6, [r4, #-3949]!	@ 0xfffff093
 801f422:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f426:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801f42a:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801f42e:	6f6d5f65 	svcvs	0x006d5f65
 801f432:	705f6564 	subsvc	r6, pc, r4, ror #10
 801f436:	5f74726f 	svcpl	0x0074726f
 801f43a:	656d0063 	strbvs	r0, [sp, #-99]!	@ 0xffffff9d
 801f43e:	5f656772 	svcpl	0x00656772
 801f442:	65646f6d 	strbvs	r6, [r4, #-3949]!	@ 0xfffff093
 801f446:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f44a:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801f44e <LightSetParamsConst::UNIVERSE_PORT>:
 801f44e:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f452:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f456:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f45a:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801f45e:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f462:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f466:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f46a:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801f46e:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f472:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f476:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f47a:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801f47e:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f482:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f486:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f48a:	00645f74 	rsbeq	r5, r4, r4, ror pc
	...

0801f490 <vtable for Ssd1306>:
	...
 801f498:	0801748d 	stmdaeq	r1, {r0, r2, r3, r7, sl, ip, sp, lr}
 801f49c:	080174b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, ip, sp, lr}
 801f4a0:	080177f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 801f4a4:	08017785 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, ip, sp, lr}
 801f4a8:	08017659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, ip, sp, lr}
 801f4ac:	080174dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, ip, sp, lr}
 801f4b0:	08017509 	stmdaeq	r1, {r0, r3, r8, sl, ip, sp, lr}
 801f4b4:	08017631 	stmdaeq	r1, {r0, r4, r5, r9, sl, ip, sp, lr}
 801f4b8:	080175e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, ip, sp, lr}
 801f4bc:	0801748f 	stmdaeq	r1, {r0, r1, r2, r3, r7, sl, ip, sp, lr}
 801f4c0:	08017695 	stmdaeq	r1, {r0, r2, r4, r7, r9, sl, ip, sp, lr}
 801f4c4:	080176a1 	stmdaeq	r1, {r0, r5, r7, r9, sl, ip, sp, lr}
 801f4c8:	080176b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl, ip, sp, lr}
 801f4cc:	08017491 	stmdaeq	r1, {r0, r4, r7, sl, ip, sp, lr}

0801f4d0 <oled_128x32_init>:
 801f4d0:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801f4d4:	4000d31f 	andmi	sp, r0, pc, lsl r3
 801f4d8:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801f4dc:	02dac8a1 	sbcseq	ip, sl, #10551296	@ 0xa10000
 801f4e0:	f1d97f81 			@ <UNDEFINED> instruction: 0xf1d97f81
 801f4e4:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801f4e8 <oled_128x64_init>:
 801f4e8:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801f4ec:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801f4f0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801f4f4:	12dac8a1 	sbcsne	ip, sl, #10551296	@ 0xa10000
 801f4f8:	f1d97f81 			@ <UNDEFINED> instruction: 0xf1d97f81
 801f4fc:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801f500 <_OledFont8x6>:
 801f500:	00000040 	andeq	r0, r0, r0, asr #32
 801f504:	40000000 	andmi	r0, r0, r0
 801f508:	005f0000 	subseq	r0, pc, r0
 801f50c:	00400000 	subeq	r0, r0, r0
 801f510:	00070007 	andeq	r0, r7, r7
 801f514:	7f144000 	svcvc	0x00144000
 801f518:	00147f14 	andseq	r7, r4, r4, lsl pc
 801f51c:	7f2a2440 	svcvc	0x002a2440
 801f520:	4000122a 	andmi	r1, r0, sl, lsr #4
 801f524:	64081323 	strvs	r1, [r8], #-803	@ 0xfffffcdd
 801f528:	36400062 	strbcc	r0, [r0], -r2, rrx
 801f52c:	50205649 	eorpl	r5, r0, r9, asr #12
 801f530:	08004000 	stmdaeq	r0, {lr}
 801f534:	00000307 	andeq	r0, r0, r7, lsl #6
 801f538:	221c0040 	andscs	r0, ip, #64	@ 0x40
 801f53c:	40000041 	andmi	r0, r0, r1, asr #32
 801f540:	1c224100 	stfnes	f4, [r2], #-0
 801f544:	2a400000 	bcs	901f54c <__init_array_end+0xfffd7c>
 801f548:	2a1c7f1c 	bcs	873f1c0 <__init_array_end+0x71f9f0>
 801f54c:	08084000 	stmdaeq	r8, {lr}
 801f550:	0008083e 	andeq	r0, r8, lr, lsr r8
 801f554:	70800040 	addvc	r0, r0, r0, asr #32
 801f558:	40000030 	andmi	r0, r0, r0, lsr r0
 801f55c:	08080808 	stmdaeq	r8, {r3, fp}
 801f560:	00400008 	subeq	r0, r0, r8
 801f564:	00606000 	rsbeq	r6, r0, r0
 801f568:	10204000 	eorne	r4, r0, r0
 801f56c:	00020408 	andeq	r0, r2, r8, lsl #8
 801f570:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801f574:	40003e45 	andmi	r3, r0, r5, asr #28
 801f578:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 801f57c:	72400000 	subvc	r0, r0, #0
 801f580:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801f584:	41214000 			@ <UNDEFINED> instruction: 0x41214000
 801f588:	00334d49 	eorseq	r4, r3, r9, asr #26
 801f58c:	12141840 	andsne	r1, r4, #64, 16	@ 0x400000
 801f590:	4000107f 	andmi	r1, r0, pc, ror r0
 801f594:	45454527 	strbmi	r4, [r5, #-1319]	@ 0xfffffad9
 801f598:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 801f59c:	3149494a 	cmpcc	r9, sl, asr #18
 801f5a0:	21414000 	mrscs	r4, (UNDEF: 65)
 801f5a4:	00070911 	andeq	r0, r7, r1, lsl r9
 801f5a8:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 801f5ac:	40003649 	andmi	r3, r0, r9, asr #12
 801f5b0:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801f5b4:	0040001e 	subeq	r0, r0, lr, lsl r0
 801f5b8:	00001400 	andeq	r1, r0, r0, lsl #8
 801f5bc:	40004000 	andmi	r4, r0, r0
 801f5c0:	00000034 	andeq	r0, r0, r4, lsr r0
 801f5c4:	14080040 	strne	r0, [r8], #-64	@ 0xffffffc0
 801f5c8:	40004122 	andmi	r4, r0, r2, lsr #2
 801f5cc:	14141414 	ldrne	r1, [r4], #-1044	@ 0xfffffbec
 801f5d0:	00400014 	subeq	r0, r0, r4, lsl r0
 801f5d4:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801f5d8:	01024000 	mrseq	r4, (UNDEF: 2)
 801f5dc:	00060959 	andeq	r0, r6, r9, asr r9
 801f5e0:	5d413e40 	stclpl	14, cr3, [r1, #-256]	@ 0xffffff00
 801f5e4:	40004e59 	andmi	r4, r0, r9, asr lr
 801f5e8:	1211127c 	andsne	r1, r1, #124, 4	@ 0xc0000007
 801f5ec:	7f40007c 	svcvc	0x0040007c
 801f5f0:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801f5f4:	413e4000 	teqmi	lr, r0
 801f5f8:	00224141 	eoreq	r4, r2, r1, asr #2
 801f5fc:	41417f40 	cmpmi	r1, r0, asr #30
 801f600:	40003e41 	andmi	r3, r0, r1, asr #28
 801f604:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 801f608:	7f400041 	svcvc	0x00400041
 801f60c:	01090909 	tsteq	r9, r9, lsl #18
 801f610:	413e4000 	teqmi	lr, r0
 801f614:	00735141 	rsbseq	r5, r3, r1, asr #2
 801f618:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 801f61c:	40007f08 	andmi	r7, r0, r8, lsl #30
 801f620:	417f4100 	cmnmi	pc, r0, lsl #2
 801f624:	20400000 	subcs	r0, r0, r0
 801f628:	013f4140 	teqeq	pc, r0, asr #2
 801f62c:	087f4000 	ldmdaeq	pc!, {lr}^	@ <UNPREDICTABLE>
 801f630:	00412214 	subeq	r2, r1, r4, lsl r2
 801f634:	40407f40 	submi	r7, r0, r0, asr #30
 801f638:	40004040 	andmi	r4, r0, r0, asr #32
 801f63c:	021c027f 	andseq	r0, ip, #-268435449	@ 0xf0000007
 801f640:	7f40007f 	svcvc	0x0040007f
 801f644:	7f100804 	svcvc	0x00100804
 801f648:	413e4000 	teqmi	lr, r0
 801f64c:	003e4141 	eorseq	r4, lr, r1, asr #2
 801f650:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801f654:	40000609 	andmi	r0, r0, r9, lsl #12
 801f658:	2151413e 	cmpcs	r1, lr, lsr r1
 801f65c:	7f40005e 	svcvc	0x0040005e
 801f660:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801f664:	49264000 	stmdbmi	r6!, {lr}
 801f668:	00324949 	eorseq	r4, r2, r9, asr #18
 801f66c:	7f010340 	svcvc	0x00010340
 801f670:	40000301 	andmi	r0, r0, r1, lsl #6
 801f674:	4040403f 	submi	r4, r0, pc, lsr r0
 801f678:	1f40003f 	svcne	0x0040003f
 801f67c:	1f204020 	svcne	0x00204020
 801f680:	403f4000 	eorsmi	r4, pc, r0
 801f684:	003f4038 	eorseq	r4, pc, r8, lsr r0	@ <UNPREDICTABLE>
 801f688:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 801f68c:	40006314 	andmi	r6, r0, r4, lsl r3
 801f690:	04780403 	ldrbteq	r0, [r8], #-1027	@ 0xfffffbfd
 801f694:	61400003 	cmpvs	r0, r3
 801f698:	434d4959 	movtmi	r4, #55641	@ 0xd959
 801f69c:	7f004000 	svcvc	0x00004000
 801f6a0:	00414141 	subeq	r4, r1, r1, asr #2
 801f6a4:	08040240 	stmdaeq	r4, {r6, r9}
 801f6a8:	40002010 	andmi	r2, r0, r0, lsl r0
 801f6ac:	41414100 	mrsmi	r4, (UNDEF: 81)
 801f6b0:	0440007f 	strbeq	r0, [r0], #-127	@ 0xffffff81
 801f6b4:	04020102 	streq	r0, [r2], #-258	@ 0xfffffefe
 801f6b8:	40404000 	submi	r4, r0, r0
 801f6bc:	00404040 	subeq	r4, r0, r0, asr #32
 801f6c0:	07030040 	streq	r0, [r3, -r0, asr #32]
 801f6c4:	40000008 	andmi	r0, r0, r8
 801f6c8:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 801f6cc:	7f400040 	svcvc	0x00400040
 801f6d0:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 801f6d4:	44384000 	ldrtmi	r4, [r8], #-0
 801f6d8:	00284444 	eoreq	r4, r8, r4, asr #8
 801f6dc:	44443840 	strbmi	r3, [r4], #-2112	@ 0xfffff7c0
 801f6e0:	40007f28 	andmi	r7, r0, r8, lsr #30
 801f6e4:	54545438 	ldrbpl	r5, [r4], #-1080	@ 0xfffffbc8
 801f6e8:	00400018 	subeq	r0, r0, r8, lsl r0
 801f6ec:	02097e08 	andeq	r7, r9, #8, 28	@ 0x80
 801f6f0:	a4184000 	ldrge	r4, [r8], #-0
 801f6f4:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801f6f8:	04087f40 	streq	r7, [r8], #-3904	@ 0xfffff0c0
 801f6fc:	40007804 	andmi	r7, r0, r4, lsl #16
 801f700:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801f704:	20400000 	subcs	r0, r0, r0
 801f708:	003d4040 	eorseq	r4, sp, r0, asr #32
 801f70c:	107f4000 	rsbsne	r4, pc, r0
 801f710:	00004428 	andeq	r4, r0, r8, lsr #8
 801f714:	7f410040 	svcvc	0x00410040
 801f718:	40000040 	andmi	r0, r0, r0, asr #32
 801f71c:	0478047c 	ldrbteq	r0, [r8], #-1148	@ 0xfffffb84
 801f720:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801f724:	78040408 	stmdavc	r4, {r3, sl}
 801f728:	44384000 	ldrtmi	r4, [r8], #-0
 801f72c:	00384444 	eorseq	r4, r8, r4, asr #8
 801f730:	2418fc40 	ldrcs	pc, [r8], #-3136	@ 0xfffff3c0
 801f734:	40001824 	andmi	r1, r0, r4, lsr #16
 801f738:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 801f73c:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801f740:	08040408 	stmdaeq	r4, {r3, sl}
 801f744:	54484000 	strbpl	r4, [r8], #-0
 801f748:	00245454 	eoreq	r5, r4, r4, asr r4
 801f74c:	3f040440 	svccc	0x00040440
 801f750:	40002444 	andmi	r2, r0, r4, asr #8
 801f754:	2040403c 	subcs	r4, r0, ip, lsr r0
 801f758:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 801f75c:	1c204020 	stcne	0, cr4, [r0], #-128	@ 0xffffff80
 801f760:	403c4000 	eorsmi	r4, ip, r0
 801f764:	003c4030 	eorseq	r4, ip, r0, lsr r0
 801f768:	10284440 	eorne	r4, r8, r0, asr #8
 801f76c:	40004428 	andmi	r4, r0, r8, lsr #8
 801f770:	9090904c 	addsls	r9, r0, ip, asr #32
 801f774:	4440007c 	strbmi	r0, [r0], #-124	@ 0xffffff84
 801f778:	444c5464 	strbmi	r5, [ip], #-1124	@ 0xfffffb9c
 801f77c:	08004000 	stmdaeq	r0, {lr}
 801f780:	00004136 	andeq	r4, r0, r6, lsr r1
 801f784:	77000040 	strvc	r0, [r0, -r0, asr #32]
 801f788:	40000000 	andmi	r0, r0, r0
 801f78c:	08364100 	ldmdaeq	r6!, {r8, lr}
 801f790:	02400000 	subeq	r0, r0, #0
 801f794:	02040201 	andeq	r0, r4, #268435456	@ 0x10000000
 801f798:	263c4000 	ldrtcs	r4, [ip], -r0
 801f79c:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801f7a0 <days_of_month>:
 801f7a0:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f7a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 801f7a8:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f7ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f7b0:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f7b4:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f7b8:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f7bc:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f7c0:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f7c4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f7c8:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f7cc:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .tcmsram:

10008000 <net::s_dhcp_message>:
	...

10008224 <net::s_id>:
10008224:	00000000 	andeq	r0, r0, r0

10008228 <net::s_groups>:
	...

10008340 <net::s_multicast_mac>:
	...

10008348 <net::s_leave>:
	...

10008378 <net::s_report>:
	...

100083a8 <net::s_tcp>:
	...

10008994 <net::s_id>:
10008994:	00000000 	andeq	r0, r0, r0

10008998 <net::s_Port>:
	...

100096a0 <net::s_multicast_mac>:
	...

100096a8 <net::s_id>:
100096a8:	00000000 	andeq	r0, r0, r0

100096ac <net::s_send_packet>:
	...

10009c98 <net::s_data>:
	...

1000caf8 <net::s_Port>:
	...

1000cb08 <net::s_ArpRecords>:
	...

Disassembly of section .data:

20000000 <e131bridge::configstore::DMXPORT_OFFSET>:
20000000:	00000040 	andeq	r0, r0, r0, asr #32

20000004 <SystemCoreClock>:
20000004:	0e4e1c00 	cdpeq	12, 4, cr1, cr14, cr0, {0}

20000008 <lfsr>:
20000008:	0000ace1 	andeq	sl, r0, r1, ror #25

2000000c <s_block_bucket>:
2000000c:	00000010 	andeq	r0, r0, r0, lsl r0
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000020 	andeq	r0, r0, r0, lsr #32
20000018:	00000000 	andeq	r0, r0, r0
2000001c:	00000040 	andeq	r0, r0, r0, asr #32
20000020:	00000000 	andeq	r0, r0, r0
20000024:	00000060 	andeq	r0, r0, r0, rrx
20000028:	00000000 	andeq	r0, r0, r0
2000002c:	00000080 	andeq	r0, r0, r0, lsl #1
20000030:	00000000 	andeq	r0, r0, r0
20000034:	00000100 	andeq	r0, r0, r0, lsl #2
20000038:	00000000 	andeq	r0, r0, r0
2000003c:	00000140 	andeq	r0, r0, r0, asr #2
20000040:	00000000 	andeq	r0, r0, r0
20000044:	00000180 	andeq	r0, r0, r0, lsl #3
20000048:	00000000 	andeq	r0, r0, r0
2000004c:	00000200 	andeq	r0, r0, r0, lsl #4
20000050:	00000000 	andeq	r0, r0, r0
20000054:	00000300 	andeq	r0, r0, r0, lsl #6
20000058:	00000000 	andeq	r0, r0, r0
2000005c:	00000400 	andeq	r0, r0, r0, lsl #8
20000060:	00000000 	andeq	r0, r0, r0
20000064:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20000074 <next_block>:
20000074:	1000cc88 	andne	ip, r0, r8, lsl #25

Disassembly of section .sram1:

2001c000 <s_TxBuffer>:
	...

Disassembly of section .sram2:

20020000 <pixel::s_DmaBuffer>:
	...

Disassembly of section .bkpsram:

40024000 <ConfigStore::s_SpiFlashData>:
	...
