
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08008000 <__gVectors>:
 8008000:	10008000 	andne	r8, r0, r0
 8008004:	0800938d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip, pc}
 8008008:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800800c:	080093e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, r9, ip, pc}
 8008010:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008014:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008018:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
	...
 800802c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008030:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008034:	00000000 	andeq	r0, r0, r0
 8008038:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800803c:	080198dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, fp, ip, pc}
 8008040:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008044:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008048:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800804c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008050:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008054:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008058:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800805c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008060:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008064:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008068:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800806c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008070:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008074:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008078:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800807c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008080:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008084:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008088:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800808c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008090:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008094:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008098:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800809c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080ac:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080b0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080b4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080b8:	08011ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, ip}
 80080bc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080cc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080dc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080ec:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080fc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008100:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008104:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008108:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800810c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008110:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008114:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008118:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800811c:	080197b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, ip, pc}
 8008120:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008124:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008128:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800812c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008130:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008134:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008138:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800813c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008140:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008144:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008148:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800814c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008150:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008154:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008158:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800815c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008160:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008164:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008168:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800816c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008170:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008174:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008178:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800817c:	00000000 	andeq	r0, r0, r0
 8008180:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008184:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008188:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800818c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008190:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008194:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008198:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800819c:	00000000 	andeq	r0, r0, r0
 80081a0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80081a4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80081a8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}

Disassembly of section .text:

080081ac <net::igmp_init()>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	f00c feb3 	bl	8014f18 <net::igmp_set_ip()>
 80081b2:	492c      	ldr	r1, [pc, #176]	@ (8008264 <net::igmp_init()+0xb8>)
 80081b4:	4b2c      	ldr	r3, [pc, #176]	@ (8008268 <net::igmp_init()+0xbc>)
 80081b6:	4a2d      	ldr	r2, [pc, #180]	@ (800826c <net::igmp_init()+0xc0>)
 80081b8:	2401      	movs	r4, #1
 80081ba:	205e      	movs	r0, #94	@ 0x5e
 80081bc:	800c      	strh	r4, [r1, #0]
 80081be:	7088      	strb	r0, [r1, #2]
 80081c0:	2106      	movs	r1, #6
 80081c2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80081c6:	f803 0b01 	strb.w	r0, [r3], #1
 80081ca:	3901      	subs	r1, #1
 80081cc:	d1f9      	bne.n	80081c2 <net::igmp_init()+0x16>
 80081ce:	4a28      	ldr	r2, [pc, #160]	@ (8008270 <net::igmp_init()+0xc4>)
 80081d0:	4828      	ldr	r0, [pc, #160]	@ (8008274 <net::igmp_init()+0xc8>)
 80081d2:	60d0      	str	r0, [r2, #12]
 80081d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80081d8:	4b27      	ldr	r3, [pc, #156]	@ (8008278 <net::igmp_init()+0xcc>)
 80081da:	8210      	strh	r0, [r2, #16]
 80081dc:	f240 4094 	movw	r0, #1172	@ 0x494
 80081e0:	8450      	strh	r0, [r2, #34]	@ 0x22
 80081e2:	4c26      	ldr	r4, [pc, #152]	@ (800827c <net::igmp_init()+0xd0>)
 80081e4:	4826      	ldr	r0, [pc, #152]	@ (8008280 <net::igmp_init()+0xd4>)
 80081e6:	8491      	strh	r1, [r2, #36]	@ 0x24
 80081e8:	2516      	movs	r5, #22
 80081ea:	6154      	str	r4, [r2, #20]
 80081ec:	84d5      	strh	r5, [r2, #38]	@ 0x26
 80081ee:	6018      	str	r0, [r3, #0]
 80081f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081f4:	2006      	movs	r0, #6
 80081f6:	491d      	ldr	r1, [pc, #116]	@ (800826c <net::igmp_init()+0xc0>)
 80081f8:	809a      	strh	r2, [r3, #4]
 80081fa:	181a      	adds	r2, r3, r0
 80081fc:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008200:	f802 5b01 	strb.w	r5, [r2], #1
 8008204:	3801      	subs	r0, #1
 8008206:	d1f9      	bne.n	80081fc <net::igmp_init()+0x50>
 8008208:	4a1e      	ldr	r2, [pc, #120]	@ (8008284 <net::igmp_init()+0xd8>)
 800820a:	615c      	str	r4, [r3, #20]
 800820c:	6811      	ldr	r1, [r2, #0]
 800820e:	4c1e      	ldr	r4, [pc, #120]	@ (8008288 <net::igmp_init()+0xdc>)
 8008210:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8008214:	8498      	strh	r0, [r3, #36]	@ 0x24
 8008216:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800821a:	4d16      	ldr	r5, [pc, #88]	@ (8008274 <net::igmp_init()+0xc8>)
 800821c:	f8c3 401e 	str.w	r4, [r3, #30]
 8008220:	8218      	strh	r0, [r3, #16]
 8008222:	2417      	movs	r4, #23
 8008224:	f240 4094 	movw	r0, #1172	@ 0x494
 8008228:	2a07      	cmp	r2, #7
 800822a:	84dc      	strh	r4, [r3, #38]	@ 0x26
 800822c:	60dd      	str	r5, [r3, #12]
 800822e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8008230:	d904      	bls.n	800823c <net::igmp_init()+0x90>
 8008232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008236:	4815      	ldr	r0, [pc, #84]	@ (800828c <net::igmp_init()+0xe0>)
 8008238:	f010 b9ee 	b.w	8018618 <console_error>
 800823c:	4b14      	ldr	r3, [pc, #80]	@ (8008290 <net::igmp_init()+0xe4>)
 800823e:	f8d1 40a4 	ldr.w	r4, [r1, #164]	@ 0xa4
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	1c55      	adds	r5, r2, #1
 8008246:	1c63      	adds	r3, r4, #1
 8008248:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
 800824c:	f8c1 50a0 	str.w	r5, [r1, #160]	@ 0xa0
 8008250:	eb01 1302 	add.w	r3, r1, r2, lsl #4
 8008254:	3064      	adds	r0, #100	@ 0x64
 8008256:	2164      	movs	r1, #100	@ 0x64
 8008258:	e9c3 0108 	strd	r0, r1, [r3, #32]
 800825c:	4a0d      	ldr	r2, [pc, #52]	@ (8008294 <net::igmp_init()+0xe8>)
 800825e:	e9c3 420a 	strd	r4, r2, [r3, #40]	@ 0x28
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	10008348 	andne	r8, r0, r8, asr #6
 8008268:	10008386 	andne	r8, r0, r6, lsl #7
 800826c:	2000cb9c 	mulcs	r0, ip, fp
 8008270:	10008380 	andne	r8, r0, r0, lsl #7
 8008274:	00460008 	subeq	r0, r6, r8
 8008278:	10008350 	andne	r8, r0, r0, asr r3
 800827c:	02010040 	andeq	r0, r1, #64	@ 0x40
 8008280:	005e0001 	subseq	r0, lr, r1
 8008284:	2000cd38 	andcs	ip, r0, r8, lsr sp
 8008288:	020000e0 	andeq	r0, r0, #224	@ 0xe0
 800828c:	0801d204 	stmdaeq	r1, {r2, r9, ip, lr, pc}
 8008290:	2001a628 	andcs	sl, r1, r8, lsr #12
 8008294:	08014ec5 	stmdaeq	r1, {r0, r2, r6, r7, r9, sl, fp, lr}

08008298 <net::igmp_shutdown()>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d05      	ldr	r5, [pc, #20]	@ (80082b0 <net::igmp_shutdown()+0x18>)
 800829c:	2400      	movs	r4, #0
 800829e:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 80082a2:	b108      	cbz	r0, 80082a8 <net::igmp_shutdown()+0x10>
 80082a4:	f00c fe66 	bl	8014f74 <net::igmp_leave(unsigned long)>
 80082a8:	3401      	adds	r4, #1
 80082aa:	2c24      	cmp	r4, #36	@ 0x24
 80082ac:	d1f7      	bne.n	800829e <net::igmp_shutdown()+0x6>
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	10008228 	andne	r8, r0, r8, lsr #4

080082b4 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)>:
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	4d19      	ldr	r5, [pc, #100]	@ (8008320 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x6c>)
 80082ba:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082be:	7e2c      	ldrb	r4, [r5, #24]
 80082c0:	461f      	mov	r7, r3
 80082c2:	7deb      	ldrb	r3, [r5, #23]
 80082c4:	0424      	lsls	r4, r4, #16
 80082c6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 80082ca:	7e6b      	ldrb	r3, [r5, #25]
 80082cc:	3402      	adds	r4, #2
 80082ce:	eb04 6403 	add.w	r4, r4, r3, lsl #24
 80082d2:	4682      	mov	sl, r0
 80082d4:	460e      	mov	r6, r1
 80082d6:	4690      	mov	r8, r2
 80082d8:	612c      	str	r4, [r5, #16]
 80082da:	f000 f8b5 	bl	8008448 <net::arp_init()>
 80082de:	f000 f951 	bl	8008584 <net::ip_init()>
 80082e2:	f1ba 0f01 	cmp.w	sl, #1
 80082e6:	7eab      	ldrb	r3, [r5, #26]
 80082e8:	d115      	bne.n	8008316 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x62>
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	76ab      	strb	r3, [r5, #26]
 80082f0:	f899 3000 	ldrb.w	r3, [r9]
 80082f4:	b11b      	cbz	r3, 80082fe <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x4a>
 80082f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fa:	f00c bc15 	b.w	8014b28 <net::dhcp_start()>
 80082fe:	b12e      	cbz	r6, 800830c <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x58>
 8008300:	4640      	mov	r0, r8
 8008302:	f00c ff71 	bl	80151e8 <net::netif_set_netmask(net::ip_addr)>
 8008306:	4638      	mov	r0, r7
 8008308:	f00c ff82 	bl	8015210 <net::netif_set_gw(net::ip_addr)>
 800830c:	4630      	mov	r0, r6
 800830e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008312:	f00c beaf 	b.w	8015074 <net::net_set_primary_ip(net::ip_addr)>
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	76ab      	strb	r3, [r5, #26]
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	2000cb88 	andcs	ip, r0, r8, lsl #23

08008324 <net::tcp_init()>:
 8008324:	4a07      	ldr	r2, [pc, #28]	@ (8008344 <net::tcp_init()+0x20>)
 8008326:	4908      	ldr	r1, [pc, #32]	@ (8008348 <net::tcp_init()+0x24>)
 8008328:	2306      	movs	r3, #6
 800832a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800832e:	f802 0b01 	strb.w	r0, [r2], #1
 8008332:	3b01      	subs	r3, #1
 8008334:	d1f9      	bne.n	800832a <net::tcp_init()+0x6>
 8008336:	4b05      	ldr	r3, [pc, #20]	@ (800834c <net::tcp_init()+0x28>)
 8008338:	4905      	ldr	r1, [pc, #20]	@ (8008350 <net::tcp_init()+0x2c>)
 800833a:	4a06      	ldr	r2, [pc, #24]	@ (8008354 <net::tcp_init()+0x30>)
 800833c:	60d9      	str	r1, [r3, #12]
 800833e:	615a      	str	r2, [r3, #20]
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	100083b6 			@ <UNDEFINED> instruction: 0x100083b6
 8008348:	2000cb9c 	mulcs	r0, ip, fp
 800834c:	100083b0 			@ <UNDEFINED> instruction: 0x100083b0
 8008350:	00450008 	subeq	r0, r5, r8
 8008354:	06400040 	strbeq	r0, [r0], -r0, asr #32

08008358 <net::udp_init()>:
 8008358:	490b      	ldr	r1, [pc, #44]	@ (8008388 <net::udp_init()+0x30>)
 800835a:	4b0c      	ldr	r3, [pc, #48]	@ (800838c <net::udp_init()+0x34>)
 800835c:	4a0c      	ldr	r2, [pc, #48]	@ (8008390 <net::udp_init()+0x38>)
 800835e:	b510      	push	{r4, lr}
 8008360:	205e      	movs	r0, #94	@ 0x5e
 8008362:	2401      	movs	r4, #1
 8008364:	800c      	strh	r4, [r1, #0]
 8008366:	7088      	strb	r0, [r1, #2]
 8008368:	2106      	movs	r1, #6
 800836a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800836e:	f803 0b01 	strb.w	r0, [r3], #1
 8008372:	3901      	subs	r1, #1
 8008374:	d1f9      	bne.n	800836a <net::udp_init()+0x12>
 8008376:	4807      	ldr	r0, [pc, #28]	@ (8008394 <net::udp_init()+0x3c>)
 8008378:	4a07      	ldr	r2, [pc, #28]	@ (8008398 <net::udp_init()+0x40>)
 800837a:	4b08      	ldr	r3, [pc, #32]	@ (800839c <net::udp_init()+0x44>)
 800837c:	60c2      	str	r2, [r0, #12]
 800837e:	6143      	str	r3, [r0, #20]
 8008380:	f00d f9e8 	bl	8015754 <net::udp_set_ip()>
 8008384:	8501      	strh	r1, [r0, #40]	@ 0x28
 8008386:	bd10      	pop	{r4, pc}
 8008388:	100096a8 	andne	r9, r0, r8, lsr #13
 800838c:	100096ba 			@ <UNDEFINED> instruction: 0x100096ba
 8008390:	2000cb9c 	mulcs	r0, ip, fp
 8008394:	100096b4 			@ <UNDEFINED> instruction: 0x100096b4
 8008398:	00450008 	subeq	r0, r5, r8
 800839c:	11400040 	cmpne	r0, r0, asr #32

080083a0 <emac_config()>:
 80083a0:	b508      	push	{r3, lr}
 80083a2:	480f      	ldr	r0, [pc, #60]	@ (80083e0 <emac_config()+0x40>)
 80083a4:	f012 fc95 	bl	801acd2 <puts>
 80083a8:	f00d fd98 	bl	8015edc <enet_gpio_config()>
 80083ac:	f640 4019 	movw	r0, #3097	@ 0xc19
 80083b0:	f010 feb6 	bl	8019120 <rcu_periph_clock_enable>
 80083b4:	f640 401a 	movw	r0, #3098	@ 0xc1a
 80083b8:	f010 feb2 	bl	8019120 <rcu_periph_clock_enable>
 80083bc:	f640 401b 	movw	r0, #3099	@ 0xc1b
 80083c0:	f010 feae 	bl	8019120 <rcu_periph_clock_enable>
 80083c4:	f010 fde2 	bl	8018f8c <enet_deinit>
 80083c8:	f010 fb7c 	bl	8018ac4 <enet_software_reset>
 80083cc:	2001      	movs	r0, #1
 80083ce:	f00d fd1b 	bl	8015e08 <net::phy_config(unsigned long)>
 80083d2:	b920      	cbnz	r0, 80083de <emac_config()+0x3e>
 80083d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083d8:	4802      	ldr	r0, [pc, #8]	@ (80083e4 <emac_config()+0x44>)
 80083da:	f010 b91d 	b.w	8018618 <console_error>
 80083de:	bd08      	pop	{r3, pc}
 80083e0:	0801c233 	stmdaeq	r1, {r0, r1, r4, r5, r9, lr, pc}
 80083e4:	0801c23b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r9, lr, pc}

080083e8 <emac_start(unsigned char*, net::Link&)>:
 80083e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083ea:	466c      	mov	r4, sp
 80083ec:	4605      	mov	r5, r0
 80083ee:	460e      	mov	r6, r1
 80083f0:	2001      	movs	r0, #1
 80083f2:	4621      	mov	r1, r4
 80083f4:	f00e f968 	bl	80166c8 <net::phy_start(unsigned long, net::PhyStatus&)>
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	6033      	str	r3, [r6, #0]
 80083fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008400:	f00d fcae 	bl	8015d60 <emac_adjust_link(net::PhyStatus)>
 8008404:	4628      	mov	r0, r5
 8008406:	f011 f9c1 	bl	801978c <mac_address_get(unsigned char*)>
 800840a:	4629      	mov	r1, r5
 800840c:	2000      	movs	r0, #0
 800840e:	f010 fbbb 	bl	8018b88 <enet_mac_address_set>
 8008412:	4c0c      	ldr	r4, [pc, #48]	@ (8008444 <emac_start(unsigned char*, net::Link&)+0x5c>)
 8008414:	f44f 00e0 	mov.w	r0, #7340032	@ 0x700000
 8008418:	f010 fb68 	bl	8018aec <enet_descriptors_chain_init>
 800841c:	f44f 2060 	mov.w	r0, #917504	@ 0xe0000
 8008420:	f010 fb64 	bl	8018aec <enet_descriptors_chain_init>
 8008424:	4620      	mov	r0, r4
 8008426:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800842a:	f010 fba7 	bl	8018b7c <enet_transmit_checksum_config>
 800842e:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8008432:	f104 0010 	add.w	r0, r4, #16
 8008436:	f010 fba1 	bl	8018b7c <enet_transmit_checksum_config>
 800843a:	f010 fd61 	bl	8018f00 <enet_enable>
 800843e:	b004      	add	sp, #16
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	bf00      	nop
 8008444:	2001a3e0 	andcs	sl, r1, r0, ror #7

08008448 <net::arp_init()>:
 8008448:	b410      	push	{r4}
 800844a:	4b3e      	ldr	r3, [pc, #248]	@ (8008544 <net::arp_init()+0xfc>)
 800844c:	b083      	sub	sp, #12
 800844e:	2210      	movs	r2, #16
 8008450:	2000      	movs	r0, #0
 8008452:	f103 0118 	add.w	r1, r3, #24
 8008456:	f803 0b01 	strb.w	r0, [r3], #1
 800845a:	428b      	cmp	r3, r1
 800845c:	d1fb      	bne.n	8008456 <net::arp_init()+0xe>
 800845e:	3a01      	subs	r2, #1
 8008460:	d1f7      	bne.n	8008452 <net::arp_init()+0xa>
 8008462:	4a39      	ldr	r2, [pc, #228]	@ (8008548 <net::arp_init()+0x100>)
 8008464:	4939      	ldr	r1, [pc, #228]	@ (800854c <net::arp_init()+0x104>)
 8008466:	2306      	movs	r3, #6
 8008468:	f811 0b01 	ldrb.w	r0, [r1], #1
 800846c:	f802 0b01 	strb.w	r0, [r2], #1
 8008470:	3b01      	subs	r3, #1
 8008472:	d1f9      	bne.n	8008468 <net::arp_init()+0x20>
 8008474:	4936      	ldr	r1, [pc, #216]	@ (8008550 <net::arp_init()+0x108>)
 8008476:	2206      	movs	r2, #6
 8008478:	460b      	mov	r3, r1
 800847a:	20ff      	movs	r0, #255	@ 0xff
 800847c:	3a01      	subs	r2, #1
 800847e:	f801 0b01 	strb.w	r0, [r1], #1
 8008482:	d1fb      	bne.n	800847c <net::arp_init()+0x34>
 8008484:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008488:	4c32      	ldr	r4, [pc, #200]	@ (8008554 <net::arp_init()+0x10c>)
 800848a:	4933      	ldr	r1, [pc, #204]	@ (8008558 <net::arp_init()+0x110>)
 800848c:	8298      	strh	r0, [r3, #20]
 800848e:	4a33      	ldr	r2, [pc, #204]	@ (800855c <net::arp_init()+0x114>)
 8008490:	482e      	ldr	r0, [pc, #184]	@ (800854c <net::arp_init()+0x104>)
 8008492:	e9c3 4103 	strd	r4, r1, [r3, #12]
 8008496:	2306      	movs	r3, #6
 8008498:	f810 4b01 	ldrb.w	r4, [r0], #1
 800849c:	f802 4b01 	strb.w	r4, [r2], #1
 80084a0:	3b01      	subs	r3, #1
 80084a2:	d1f9      	bne.n	8008498 <net::arp_init()+0x50>
 80084a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008560 <net::arp_init()+0x118>)
 80084a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008564 <net::arp_init()+0x11c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	a801      	add	r0, sp, #4
 80084ae:	2304      	movs	r3, #4
 80084b0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80084b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80084b8:	3b01      	subs	r3, #1
 80084ba:	d1f9      	bne.n	80084b0 <net::arp_init()+0x68>
 80084bc:	482a      	ldr	r0, [pc, #168]	@ (8008568 <net::arp_init()+0x120>)
 80084be:	2206      	movs	r2, #6
 80084c0:	3a01      	subs	r2, #1
 80084c2:	f800 3b01 	strb.w	r3, [r0], #1
 80084c6:	d1fb      	bne.n	80084c0 <net::arp_init()+0x78>
 80084c8:	4a28      	ldr	r2, [pc, #160]	@ (800856c <net::arp_init()+0x124>)
 80084ca:	4820      	ldr	r0, [pc, #128]	@ (800854c <net::arp_init()+0x104>)
 80084cc:	2306      	movs	r3, #6
 80084ce:	f810 4b01 	ldrb.w	r4, [r0], #1
 80084d2:	f802 4b01 	strb.w	r4, [r2], #1
 80084d6:	3b01      	subs	r3, #1
 80084d8:	d1f9      	bne.n	80084ce <net::arp_init()+0x86>
 80084da:	4b25      	ldr	r3, [pc, #148]	@ (8008570 <net::arp_init()+0x128>)
 80084dc:	481d      	ldr	r0, [pc, #116]	@ (8008554 <net::arp_init()+0x10c>)
 80084de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084e2:	e9c3 0103 	strd	r0, r1, [r3, #12]
 80084e6:	4919      	ldr	r1, [pc, #100]	@ (800854c <net::arp_init()+0x104>)
 80084e8:	829a      	strh	r2, [r3, #20]
 80084ea:	2206      	movs	r2, #6
 80084ec:	3316      	adds	r3, #22
 80084ee:	f811 0b01 	ldrb.w	r0, [r1], #1
 80084f2:	f803 0b01 	strb.w	r0, [r3], #1
 80084f6:	3a01      	subs	r2, #1
 80084f8:	d1f9      	bne.n	80084ee <net::arp_init()+0xa6>
 80084fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008574 <net::arp_init()+0x12c>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8008502:	2b07      	cmp	r3, #7
 8008504:	d905      	bls.n	8008512 <net::arp_init()+0xca>
 8008506:	481c      	ldr	r0, [pc, #112]	@ (8008578 <net::arp_init()+0x130>)
 8008508:	b003      	add	sp, #12
 800850a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850e:	f010 b883 	b.w	8018618 <console_error>
 8008512:	f8d2 00a4 	ldr.w	r0, [r2, #164]	@ 0xa4
 8008516:	4919      	ldr	r1, [pc, #100]	@ (800857c <net::arp_init()+0x134>)
 8008518:	1c44      	adds	r4, r0, #1
 800851a:	f8c2 40a4 	str.w	r4, [r2, #164]	@ 0xa4
 800851e:	6809      	ldr	r1, [r1, #0]
 8008520:	1c5c      	adds	r4, r3, #1
 8008522:	f8c2 40a0 	str.w	r4, [r2, #160]	@ 0xa0
 8008526:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800852a:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <net::arp_init()+0x138>)
 800852c:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8008530:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8008534:	e9c3 1408 	strd	r1, r4, [r3, #32]
 8008538:	e9c3 020a 	strd	r0, r2, [r3, #40]	@ 0x28
 800853c:	b003      	add	sp, #12
 800853e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	1000cb10 	andne	ip, r0, r0, lsl fp
 8008548:	2000cbfa 	strdcs	ip, [r0], -sl
 800854c:	2000cb9c 	mulcs	r0, ip, fp
 8008550:	2000cbf4 	strdcs	ip, [r0], -r4
 8008554:	01000608 	tsteq	r0, r8, lsl #12
 8008558:	04060008 	streq	r0, [r6], #-8
 800855c:	2000cc0a 	andcs	ip, r0, sl, lsl #24
 8008560:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8008564:	2000cc0f 	andcs	ip, r0, pc, lsl #24
 8008568:	2000cc14 	andcs	ip, r0, r4, lsl ip
 800856c:	2000cbbe 			@ <UNDEFINED> instruction: 0x2000cbbe
 8008570:	2000cbb8 			@ <UNDEFINED> instruction: 0x2000cbb8
 8008574:	2000cd38 	andcs	ip, r0, r8, lsr sp
 8008578:	0801d204 	stmdaeq	r1, {r2, r9, ip, lr, pc}
 800857c:	2001a628 	andcs	sl, r1, r8, lsr #12
 8008580:	080164b1 	stmdaeq	r1, {r0, r4, r5, r7, sl, sp, lr}

08008584 <net::ip_init()>:
 8008584:	b508      	push	{r3, lr}
 8008586:	f7ff fee7 	bl	8008358 <net::udp_init()>
 800858a:	f7ff fe0f 	bl	80081ac <net::igmp_init()>
 800858e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008592:	f7ff bec7 	b.w	8008324 <net::tcp_init()>
	...

08008598 <console_init()>:
 8008598:	b508      	push	{r3, lr}
 800859a:	f011 fb99 	bl	8019cd0 <uart0_init>
 800859e:	4804      	ldr	r0, [pc, #16]	@ (80085b0 <console_init()+0x18>)
 80085a0:	f011 fbc0 	bl	8019d24 <uart0_puts>
 80085a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085a8:	4802      	ldr	r0, [pc, #8]	@ (80085b4 <console_init()+0x1c>)
 80085aa:	f011 bbbb 	b.w	8019d24 <uart0_puts>
 80085ae:	bf00      	nop
 80085b0:	0801c484 	stmdaeq	r1, {r2, r7, sl, lr, pc}
 80085b4:	0801c4a2 	stmdaeq	r1, {r1, r5, r7, sl, lr, pc}

080085b8 <net::igmp_handle(t_igmp*)>:
 80085b8:	7b83      	ldrb	r3, [r0, #14]
 80085ba:	2b45      	cmp	r3, #69	@ 0x45
 80085bc:	d000      	beq.n	80085c0 <net::igmp_handle(t_igmp*)+0x8>
 80085be:	4770      	bx	lr
 80085c0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80085c4:	2b11      	cmp	r3, #17
 80085c6:	d1fa      	bne.n	80085be <net::igmp_handle(t_igmp*)+0x6>
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	4b23      	ldr	r3, [pc, #140]	@ (800865c <net::igmp_handle(t_igmp*)+0xa4>)
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f100 081d 	add.w	r8, r0, #29
 80085d6:	466a      	mov	r2, sp
 80085d8:	f100 0421 	add.w	r4, r0, #33	@ 0x21
 80085dc:	4643      	mov	r3, r8
 80085de:	e001      	b.n	80085e4 <net::igmp_handle(t_igmp*)+0x2c>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d038      	beq.n	8008656 <net::igmp_handle(t_igmp*)+0x9e>
 80085e4:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 80085e8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80085ec:	428d      	cmp	r5, r1
 80085ee:	d0f7      	beq.n	80085e0 <net::igmp_handle(t_igmp*)+0x28>
 80085f0:	1a6d      	subs	r5, r5, r1
 80085f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008660 <net::igmp_handle(t_igmp*)+0xa8>)
 80085f4:	2701      	movs	r7, #1
 80085f6:	f503 7690 	add.w	r6, r3, #288	@ 0x120
 80085fa:	e00a      	b.n	8008612 <net::igmp_handle(t_igmp*)+0x5a>
 80085fc:	f803 7c02 	strb.w	r7, [r3, #-2]
 8008600:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 8008604:	0852      	lsrs	r2, r2, #1
 8008606:	3201      	adds	r2, #1
 8008608:	f823 2c04 	strh.w	r2, [r3, #-4]
 800860c:	3308      	adds	r3, #8
 800860e:	42b3      	cmp	r3, r6
 8008610:	d012      	beq.n	8008638 <net::igmp_handle(t_igmp*)+0x80>
 8008612:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8008616:	2a00      	cmp	r2, #0
 8008618:	d0f8      	beq.n	800860c <net::igmp_handle(t_igmp*)+0x54>
 800861a:	9201      	str	r2, [sp, #4]
 800861c:	b97d      	cbnz	r5, 800863e <net::igmp_handle(t_igmp*)+0x86>
 800861e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8008622:	2a01      	cmp	r2, #1
 8008624:	d1ea      	bne.n	80085fc <net::igmp_handle(t_igmp*)+0x44>
 8008626:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 800862a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800862e:	428a      	cmp	r2, r1
 8008630:	dbe8      	blt.n	8008604 <net::igmp_handle(t_igmp*)+0x4c>
 8008632:	3308      	adds	r3, #8
 8008634:	42b3      	cmp	r3, r6
 8008636:	d1ec      	bne.n	8008612 <net::igmp_handle(t_igmp*)+0x5a>
 8008638:	b002      	add	sp, #8
 800863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863e:	a901      	add	r1, sp, #4
 8008640:	4642      	mov	r2, r8
 8008642:	e001      	b.n	8008648 <net::igmp_handle(t_igmp*)+0x90>
 8008644:	42a2      	cmp	r2, r4
 8008646:	d0ea      	beq.n	800861e <net::igmp_handle(t_igmp*)+0x66>
 8008648:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 800864c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008650:	45e6      	cmp	lr, ip
 8008652:	d0f7      	beq.n	8008644 <net::igmp_handle(t_igmp*)+0x8c>
 8008654:	e7da      	b.n	800860c <net::igmp_handle(t_igmp*)+0x54>
 8008656:	2500      	movs	r5, #0
 8008658:	e7cb      	b.n	80085f2 <net::igmp_handle(t_igmp*)+0x3a>
 800865a:	bf00      	nop
 800865c:	010000e0 	smlatteq	r0, r0, r0, r0
 8008660:	10008230 	andne	r8, r0, r0, lsr r2

08008664 <net::net_handle()>:
 8008664:	b500      	push	{lr}
 8008666:	b083      	sub	sp, #12
 8008668:	a801      	add	r0, sp, #4
 800866a:	f00d fd11 	bl	8016090 <emac_eth_recv(unsigned char**)>
 800866e:	2800      	cmp	r0, #0
 8008670:	dc02      	bgt.n	8008678 <net::net_handle()+0x14>
 8008672:	b003      	add	sp, #12
 8008674:	f85d fb04 	ldr.w	pc, [sp], #4
 8008678:	9801      	ldr	r0, [sp, #4]
 800867a:	8983      	ldrh	r3, [r0, #12]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d007      	beq.n	8008690 <net::net_handle()+0x2c>
 8008680:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8008684:	d007      	beq.n	8008696 <net::net_handle()+0x32>
 8008686:	f00d fd15 	bl	80160b4 <emac_free_pkt()>
 800868a:	b003      	add	sp, #12
 800868c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008690:	f000 fc06 	bl	8008ea0 <net::ip_handle(t_ip4*)>
 8008694:	e7f7      	b.n	8008686 <net::net_handle()+0x22>
 8008696:	f000 fb79 	bl	8008d8c <net::arp_handle(t_arp*)>
 800869a:	e7f4      	b.n	8008686 <net::net_handle()+0x22>

0800869c <net::tcp_run()>:
 800869c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800869e:	4c11      	ldr	r4, [pc, #68]	@ (80086e4 <net::tcp_run()+0x48>)
 80086a0:	b085      	sub	sp, #20
 80086a2:	2711      	movs	r7, #17
 80086a4:	f504 75f0 	add.w	r5, r4, #480	@ 0x1e0
 80086a8:	2609      	movs	r6, #9
 80086aa:	e002      	b.n	80086b2 <net::tcp_run()+0x16>
 80086ac:	3450      	adds	r4, #80	@ 0x50
 80086ae:	42ac      	cmp	r4, r5
 80086b0:	d015      	beq.n	80086de <net::tcp_run()+0x42>
 80086b2:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	d1f8      	bne.n	80086ac <net::tcp_run()+0x10>
 80086ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086bc:	69a2      	ldr	r2, [r4, #24]
 80086be:	f88d 700c 	strb.w	r7, [sp, #12]
 80086c2:	4620      	mov	r0, r4
 80086c4:	a901      	add	r1, sp, #4
 80086c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80086ca:	f00c fe41 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 80086ce:	69a3      	ldr	r3, [r4, #24]
 80086d0:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
 80086d4:	3301      	adds	r3, #1
 80086d6:	61a3      	str	r3, [r4, #24]
 80086d8:	3450      	adds	r4, #80	@ 0x50
 80086da:	42ac      	cmp	r4, r5
 80086dc:	d1e9      	bne.n	80086b2 <net::tcp_run()+0x16>
 80086de:	b005      	add	sp, #20
 80086e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e2:	bf00      	nop
 80086e4:	100089a0 	andne	r8, r0, r0, lsr #19

080086e8 <net::tcp_handle(t_tcp*)>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	4605      	mov	r5, r0
 80086ee:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80086f0:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
 80086f2:	4fb3      	ldr	r7, [pc, #716]	@ (80089c0 <net::tcp_handle(t_tcp*)+0x2d8>)
 80086f4:	f8b5 9010 	ldrh.w	r9, [r5, #16]
 80086f8:	ba49      	rev16	r1, r1
 80086fa:	ba40      	rev16	r0, r0
 80086fc:	8468      	strh	r0, [r5, #34]	@ 0x22
 80086fe:	84a9      	strh	r1, [r5, #36]	@ 0x24
 8008700:	f8b7 2d04 	ldrh.w	r2, [r7, #3332]	@ 0xd04
 8008704:	b28b      	uxth	r3, r1
 8008706:	429a      	cmp	r2, r3
 8008708:	b099      	sub	sp, #100	@ 0x64
 800870a:	d029      	beq.n	8008760 <net::tcp_handle(t_tcp*)+0x78>
 800870c:	f895 602e 	ldrb.w	r6, [r5, #46]	@ 0x2e
 8008710:	ab04      	add	r3, sp, #16
 8008712:	2400      	movs	r4, #0
 8008714:	f843 4b04 	str.w	r4, [r3], #4
 8008718:	aa18      	add	r2, sp, #96	@ 0x60
 800871a:	4293      	cmp	r3, r2
 800871c:	d1fa      	bne.n	8008714 <net::tcp_handle(t_tcp*)+0x2c>
 800871e:	f8d5 301a 	ldr.w	r3, [r5, #26]
 8008722:	f8d5 201e 	ldr.w	r2, [r5, #30]
 8008726:	f8ad 1018 	strh.w	r1, [sp, #24]
 800872a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800872e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8008732:	1dab      	adds	r3, r5, #6
 8008734:	f105 040c 	add.w	r4, r5, #12
 8008738:	a907      	add	r1, sp, #28
 800873a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800873e:	f801 0b01 	strb.w	r0, [r1], #1
 8008742:	42a3      	cmp	r3, r4
 8008744:	d1f9      	bne.n	800873a <net::tcp_handle(t_tcp*)+0x52>
 8008746:	4628      	mov	r0, r5
 8008748:	f00c fde2 	bl	8015310 <net::_bswap32(t_tcp*)>
 800874c:	0932      	lsrs	r2, r6, #4
 800874e:	0092      	lsls	r2, r2, #2
 8008750:	a904      	add	r1, sp, #16
 8008752:	f00c fee9 	bl	8015528 <net::scan_options(t_tcp*, net::tcb*, long)>
 8008756:	f00c feb3 	bl	80154c0 <net::send_reset(t_tcp*, net::tcb const*)>
 800875a:	b019      	add	sp, #100	@ 0x64
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	f107 0a04 	add.w	sl, r7, #4
 8008764:	fa1f fe80 	uxth.w	lr, r0
 8008768:	4653      	mov	r3, sl
 800876a:	2400      	movs	r4, #0
 800876c:	e005      	b.n	800877a <net::tcp_handle(t_tcp*)+0x92>
 800876e:	3401      	adds	r4, #1
 8008770:	2c06      	cmp	r4, #6
 8008772:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8008776:	f000 8088 	beq.w	800888a <net::tcp_handle(t_tcp*)+0x1a2>
 800877a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800877e:	2a01      	cmp	r2, #1
 8008780:	d0f5      	beq.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 8008782:	88da      	ldrh	r2, [r3, #6]
 8008784:	4572      	cmp	r2, lr
 8008786:	d1f2      	bne.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 8008788:	1e5a      	subs	r2, r3, #1
 800878a:	f105 0119 	add.w	r1, r5, #25
 800878e:	f103 0c03 	add.w	ip, r3, #3
 8008792:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8008796:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800879a:	4286      	cmp	r6, r0
 800879c:	d1e7      	bne.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 800879e:	4562      	cmp	r2, ip
 80087a0:	d1f7      	bne.n	8008792 <net::tcp_handle(t_tcp*)+0xaa>
 80087a2:	f895 802e 	ldrb.w	r8, [r5, #46]	@ 0x2e
 80087a6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80087aa:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80087ae:	4628      	mov	r0, r5
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	f00c fdad 	bl	8015310 <net::_bswap32(t_tcp*)>
 80087b6:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80087b8:	9a00      	ldr	r2, [sp, #0]
 80087ba:	ba5b      	rev16	r3, r3
 80087bc:	862b      	strh	r3, [r5, #48]	@ 0x30
 80087be:	b29b      	uxth	r3, r3
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 80087c4:	ba5b      	rev16	r3, r3
 80087c6:	86ab      	strh	r3, [r5, #52]	@ 0x34
 80087c8:	f105 032a 	add.w	r3, r5, #42	@ 0x2a
 80087cc:	079b      	lsls	r3, r3, #30
 80087ce:	bf0c      	ite	eq
 80087d0:	f8d5 302a 	ldreq.w	r3, [r5, #42]	@ 0x2a
 80087d4:	f8d5 302a 	ldrne.w	r3, [r5, #42]	@ 0x2a
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	f105 0326 	add.w	r3, r5, #38	@ 0x26
 80087de:	079e      	lsls	r6, r3, #30
 80087e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80087e4:	eb07 1603 	add.w	r6, r7, r3, lsl #4
 80087e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087ec:	4631      	mov	r1, r6
 80087ee:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80087f2:	bf0c      	ite	eq
 80087f4:	f8d5 b026 	ldreq.w	fp, [r5, #38]	@ 0x26
 80087f8:	f8d5 b026 	ldrne.w	fp, [r5, #38]	@ 0x26
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	f00c fe93 	bl	8015528 <net::scan_options(t_tcp*, net::tcb*, long)>
 8008802:	f896 204c 	ldrb.w	r2, [r6, #76]	@ 0x4c
 8008806:	2a01      	cmp	r2, #1
 8008808:	d04c      	beq.n	80088a4 <net::tcp_handle(t_tcp*)+0x1bc>
 800880a:	1ed3      	subs	r3, r2, #3
 800880c:	2b07      	cmp	r3, #7
 800880e:	d8a4      	bhi.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008810:	9b00      	ldr	r3, [sp, #0]
 8008812:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8008816:	33ec      	adds	r3, #236	@ 0xec
 8008818:	fa99 f999 	rev16.w	r9, r9
 800881c:	fa13 f989 	uxtah	r9, r3, r9
 8008820:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 8008824:	fa1f f989 	uxth.w	r9, r9
 8008828:	2b00      	cmp	r3, #0
 800882a:	d077      	beq.n	800891c <net::tcp_handle(t_tcp*)+0x234>
 800882c:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800882e:	eba1 000b 	sub.w	r0, r1, fp
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	f040 8085 	bne.w	8008944 <net::tcp_handle(t_tcp*)+0x25c>
 800883a:	2800      	cmp	r0, #0
 800883c:	f340 80b8 	ble.w	80089b0 <net::tcp_handle(t_tcp*)+0x2c8>
 8008840:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 8008844:	f013 0f04 	tst.w	r3, #4
 8008848:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800884c:	4423      	add	r3, r4
 800884e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008852:	d06a      	beq.n	800892a <net::tcp_handle(t_tcp*)+0x242>
 8008854:	891d      	ldrh	r5, [r3, #8]
 8008856:	2200      	movs	r2, #0
 8008858:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 800885c:	f846 2b04 	str.w	r2, [r6], #4
 8008860:	42b3      	cmp	r3, r6
 8008862:	d1fb      	bne.n	800885c <net::tcp_handle(t_tcp*)+0x174>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	4a57      	ldr	r2, [pc, #348]	@ (80089c4 <net::tcp_handle(t_tcp*)+0x2dc>)
 8008868:	4423      	add	r3, r4
 800886a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	811d      	strh	r5, [r3, #8]
 8008872:	f640 3018 	movw	r0, #2840	@ 0xb18
 8008876:	2101      	movs	r1, #1
 8008878:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800887c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800887e:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
 8008882:	629a      	str	r2, [r3, #40]	@ 0x28
 8008884:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
 8008888:	e767      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 800888a:	4b4d      	ldr	r3, [pc, #308]	@ (80089c0 <net::tcp_handle(t_tcp*)+0x2d8>)
 800888c:	2400      	movs	r4, #0
 800888e:	e002      	b.n	8008896 <net::tcp_handle(t_tcp*)+0x1ae>
 8008890:	3401      	adds	r4, #1
 8008892:	2c06      	cmp	r4, #6
 8008894:	d085      	beq.n	80087a2 <net::tcp_handle(t_tcp*)+0xba>
 8008896:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800889a:	2a01      	cmp	r2, #1
 800889c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80088a0:	d1f6      	bne.n	8008890 <net::tcp_handle(t_tcp*)+0x1a8>
 80088a2:	e77e      	b.n	80087a2 <net::tcp_handle(t_tcp*)+0xba>
 80088a4:	f8d5 201e 	ldr.w	r2, [r5, #30]
 80088a8:	f847 2008 	str.w	r2, [r7, r8]
 80088ac:	8c69      	ldrh	r1, [r5, #34]	@ 0x22
 80088ae:	8171      	strh	r1, [r6, #10]
 80088b0:	f8d5 101a 	ldr.w	r1, [r5, #26]
 80088b4:	f84a 1008 	str.w	r1, [sl, r8]
 80088b8:	f108 020c 	add.w	r2, r8, #12
 80088bc:	443a      	add	r2, r7
 80088be:	1dab      	adds	r3, r5, #6
 80088c0:	f105 000c 	add.w	r0, r5, #12
 80088c4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80088c8:	f802 1b01 	strb.w	r1, [r2], #1
 80088cc:	4283      	cmp	r3, r0
 80088ce:	d1f9      	bne.n	80088c4 <net::tcp_handle(t_tcp*)+0x1dc>
 80088d0:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 80088d4:	0758      	lsls	r0, r3, #29
 80088d6:	f53f af40 	bmi.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 80088da:	06d9      	lsls	r1, r3, #27
 80088dc:	f100 8135 	bmi.w	8008b4a <net::tcp_handle(t_tcp*)+0x462>
 80088e0:	079a      	lsls	r2, r3, #30
 80088e2:	f57f af3a 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	4423      	add	r3, r4
 80088ea:	eb07 1403 	add.w	r4, r7, r3, lsl #4
 80088ee:	2212      	movs	r2, #18
 80088f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088f2:	9104      	str	r1, [sp, #16]
 80088f4:	f10b 0301 	add.w	r3, fp, #1
 80088f8:	4630      	mov	r0, r6
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	f88d 2018 	strb.w	r2, [sp, #24]
 8008904:	f8c4 b048 	str.w	fp, [r4, #72]	@ 0x48
 8008908:	f00c fd22 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 800890c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800890e:	6163      	str	r3, [r4, #20]
 8008910:	2203      	movs	r2, #3
 8008912:	3301      	adds	r3, #1
 8008914:	61a3      	str	r3, [r4, #24]
 8008916:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
 800891a:	e71e      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	d18e      	bne.n	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008922:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8008924:	455b      	cmp	r3, fp
 8008926:	d18b      	bne.n	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008928:	e01f      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 800892a:	6999      	ldr	r1, [r3, #24]
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	2210      	movs	r2, #16
 8008932:	9104      	str	r1, [sp, #16]
 8008934:	4630      	mov	r0, r6
 8008936:	eb0d 0102 	add.w	r1, sp, r2
 800893a:	f88d 2018 	strb.w	r2, [sp, #24]
 800893e:	f00c fd07 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008942:	e70a      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008944:	2800      	cmp	r0, #0
 8008946:	440b      	add	r3, r1
 8008948:	dd0b      	ble.n	8008962 <net::tcp_handle(t_tcp*)+0x27a>
 800894a:	f10b 30ff 	add.w	r0, fp, #4294967295	@ 0xffffffff
 800894e:	4448      	add	r0, r9
 8008950:	1a09      	subs	r1, r1, r0
 8008952:	2900      	cmp	r1, #0
 8008954:	f73f af74 	bgt.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008958:	1ac0      	subs	r0, r0, r3
 800895a:	2800      	cmp	r0, #0
 800895c:	f6bf af70 	bge.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008960:	e003      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 8008962:	ebab 0003 	sub.w	r0, fp, r3
 8008966:	2800      	cmp	r0, #0
 8008968:	daef      	bge.n	800894a <net::tcp_handle(t_tcp*)+0x262>
 800896a:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 800896e:	f011 0004 	ands.w	r0, r1, #4
 8008972:	f040 80f1 	bne.w	8008b58 <net::tcp_handle(t_tcp*)+0x470>
 8008976:	078b      	lsls	r3, r1, #30
 8008978:	d508      	bpl.n	800898c <net::tcp_handle(t_tcp*)+0x2a4>
 800897a:	2a03      	cmp	r2, #3
 800897c:	f000 811f 	beq.w	8008bbe <net::tcp_handle(t_tcp*)+0x4d6>
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	f00c fd9c 	bl	80154c0 <net::send_reset(t_tcp*, net::tcb const*)>
 8008988:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 800898c:	06c8      	lsls	r0, r1, #27
 800898e:	f57f aee4 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008992:	00a3      	lsls	r3, r4, #2
 8008994:	4423      	add	r3, r4
 8008996:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800899a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800899e:	1eda      	subs	r2, r3, #3
 80089a0:	2a07      	cmp	r2, #7
 80089a2:	d87f      	bhi.n	8008aa4 <net::tcp_handle(t_tcp*)+0x3bc>
 80089a4:	e8df f002 	tbb	[pc, r2]
 80089a8:	10101066 	andsne	r1, r0, r6, rrx
 80089ac:	b8a71010 	stmialt	r7!, {r4, ip}
 80089b0:	440b      	add	r3, r1
 80089b2:	ebab 0303 	sub.w	r3, fp, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f6bf af42 	bge.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 80089bc:	e7d5      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 80089be:	bf00      	nop
 80089c0:	100089a0 	andne	r8, r0, r0, lsr #19
 80089c4:	2001a628 	andcs	sl, r1, r8, lsr #12
 80089c8:	00a2      	lsls	r2, r4, #2
 80089ca:	1911      	adds	r1, r2, r4
 80089cc:	eb07 1101 	add.w	r1, r7, r1, lsl #4
 80089d0:	e9d1 c205 	ldrd	ip, r2, [r1, #20]
 80089d4:	9801      	ldr	r0, [sp, #4]
 80089d6:	ebbc 0e00 	subs.w	lr, ip, r0
 80089da:	f100 80fc 	bmi.w	8008bd6 <net::tcp_handle(t_tcp*)+0x4ee>
 80089de:	9801      	ldr	r0, [sp, #4]
 80089e0:	eba0 0c0c 	sub.w	ip, r0, ip
 80089e4:	f1bc 0f00 	cmp.w	ip, #0
 80089e8:	f340 810d 	ble.w	8008c06 <net::tcp_handle(t_tcp*)+0x51e>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	1a89      	subs	r1, r1, r2
 80089f0:	2900      	cmp	r1, #0
 80089f2:	f300 80fa 	bgt.w	8008bea <net::tcp_handle(t_tcp*)+0x502>
 80089f6:	3b04      	subs	r3, #4
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d856      	bhi.n	8008aaa <net::tcp_handle(t_tcp*)+0x3c2>
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	d053      	beq.n	8008aaa <net::tcp_handle(t_tcp*)+0x3c2>
 8008a02:	00a3      	lsls	r3, r4, #2
 8008a04:	4423      	add	r3, r4
 8008a06:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a0c:	455a      	cmp	r2, fp
 8008a0e:	f040 816c 	bne.w	8008cea <net::tcp_handle(t_tcp*)+0x602>
 8008a12:	f8b7 01e0 	ldrh.w	r0, [r7, #480]	@ 0x1e0
 8008a16:	9900      	ldr	r1, [sp, #0]
 8008a18:	f44f 63b2 	mov.w	r3, #1424	@ 0x590
 8008a1c:	fb00 f303 	mul.w	r3, r0, r3
 8008a20:	18fa      	adds	r2, r7, r3
 8008a22:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008a26:	f8a2 4772 	strh.w	r4, [r2, #1906]	@ 0x772
 8008a2a:	19da      	adds	r2, r3, r7
 8008a2c:	f105 0322 	add.w	r3, r5, #34	@ 0x22
 8008a30:	4419      	add	r1, r3
 8008a32:	079b      	lsls	r3, r3, #30
 8008a34:	4688      	mov	r8, r1
 8008a36:	f040 8122 	bne.w	8008c7e <net::tcp_handle(t_tcp*)+0x596>
 8008a3a:	f1b9 0f03 	cmp.w	r9, #3
 8008a3e:	f240 811e 	bls.w	8008c7e <net::tcp_handle(t_tcp*)+0x596>
 8008a42:	f1a9 0304 	sub.w	r3, r9, #4
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	1c59      	adds	r1, r3, #1
 8008a4a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8008a4e:	4694      	mov	ip, r2
 8008a50:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8008a54:	f858 eb04 	ldr.w	lr, [r8], #4
 8008a58:	f84c eb04 	str.w	lr, [ip], #4
 8008a5c:	4588      	cmp	r8, r1
 8008a5e:	d1f9      	bne.n	8008a54 <net::tcp_handle(t_tcp*)+0x36c>
 8008a60:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8008a64:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	f000 8112 	beq.w	8008c92 <net::tcp_handle(t_tcp*)+0x5aa>
 8008a6e:	4452      	add	r2, sl
 8008a70:	3b05      	subs	r3, #5
 8008a72:	e106      	b.n	8008c82 <net::tcp_handle(t_tcp*)+0x59a>
 8008a74:	00a3      	lsls	r3, r4, #2
 8008a76:	4423      	add	r3, r4
 8008a78:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a7c:	9801      	ldr	r0, [sp, #4]
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	1a11      	subs	r1, r2, r0
 8008a82:	2900      	cmp	r1, #0
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	f340 80eb 	ble.w	8008c60 <net::tcp_handle(t_tcp*)+0x578>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f00c fd17 	bl	80154c0 <net::send_reset(t_tcp*, net::tcb const*)>
 8008a92:	00a3      	lsls	r3, r4, #2
 8008a94:	4423      	add	r3, r4
 8008a96:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a9a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a9e:	1f1a      	subs	r2, r3, #4
 8008aa0:	2a02      	cmp	r2, #2
 8008aa2:	d9ab      	bls.n	80089fc <net::tcp_handle(t_tcp*)+0x314>
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	f67f ae58 	bls.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008aaa:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 8008aae:	07ca      	lsls	r2, r1, #31
 8008ab0:	f57f ae53 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	4423      	add	r3, r4
 8008ab8:	eb07 1403 	add.w	r4, r7, r3, lsl #4
 8008abc:	4630      	mov	r0, r6
 8008abe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ac0:	69a2      	ldr	r2, [r4, #24]
 8008ac2:	9204      	str	r2, [sp, #16]
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	eb0d 0102 	add.w	r1, sp, r2
 8008acc:	6423      	str	r3, [r4, #64]	@ 0x40
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	f88d 2018 	strb.w	r2, [sp, #24]
 8008ad4:	f00c fc3c 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008ad8:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8008adc:	2b05      	cmp	r3, #5
 8008ade:	f000 80b9 	beq.w	8008c54 <net::tcp_handle(t_tcp*)+0x56c>
 8008ae2:	f200 80b2 	bhi.w	8008c4a <net::tcp_handle(t_tcp*)+0x562>
 8008ae6:	3b03      	subs	r3, #3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	f63f ae36 	bhi.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008aee:	2307      	movs	r3, #7
 8008af0:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
 8008af4:	e631      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008af6:	00a3      	lsls	r3, r4, #2
 8008af8:	4423      	add	r3, r4
 8008afa:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008afe:	9801      	ldr	r0, [sp, #4]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	4282      	cmp	r2, r0
 8008b04:	d1d3      	bne.n	8008aae <net::tcp_handle(t_tcp*)+0x3c6>
 8008b06:	891d      	ldrh	r5, [r3, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008b0e:	f846 2b04 	str.w	r2, [r6], #4
 8008b12:	42b3      	cmp	r3, r6
 8008b14:	d1fb      	bne.n	8008b0e <net::tcp_handle(t_tcp*)+0x426>
 8008b16:	e6a5      	b.n	8008864 <net::tcp_handle(t_tcp*)+0x17c>
 8008b18:	00a3      	lsls	r3, r4, #2
 8008b1a:	eb03 0a04 	add.w	sl, r3, r4
 8008b1e:	eb07 1a0a 	add.w	sl, r7, sl, lsl #4
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d1c0      	bne.n	8008aae <net::tcp_handle(t_tcp*)+0x3c6>
 8008b2c:	f8da 3040 	ldr.w	r3, [sl, #64]	@ 0x40
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	2310      	movs	r3, #16
 8008b34:	eb0d 0103 	add.w	r1, sp, r3
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f88d 3018 	strb.w	r3, [sp, #24]
 8008b3e:	9204      	str	r2, [sp, #16]
 8008b40:	f00c fc06 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008b44:	f89a 304c 	ldrb.w	r3, [sl, #76]	@ 0x4c
 8008b48:	e7a9      	b.n	8008a9e <net::tcp_handle(t_tcp*)+0x3b6>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	b019      	add	sp, #100	@ 0x64
 8008b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	f00c bcb4 	b.w	80154c0 <net::send_reset(t_tcp*, net::tcb const*)>
 8008b58:	00a3      	lsls	r3, r4, #2
 8008b5a:	4423      	add	r3, r4
 8008b5c:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008b60:	2a07      	cmp	r2, #7
 8008b62:	8919      	ldrh	r1, [r3, #8]
 8008b64:	d81b      	bhi.n	8008b9e <net::tcp_handle(t_tcp*)+0x4b6>
 8008b66:	2a03      	cmp	r2, #3
 8008b68:	d021      	beq.n	8008bae <net::tcp_handle(t_tcp*)+0x4c6>
 8008b6a:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f846 2b04 	str.w	r2, [r6], #4
 8008b74:	42b3      	cmp	r3, r6
 8008b76:	d1fb      	bne.n	8008b70 <net::tcp_handle(t_tcp*)+0x488>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	4a62      	ldr	r2, [pc, #392]	@ (8008d04 <net::tcp_handle(t_tcp*)+0x61c>)
 8008b7c:	4423      	add	r3, r4
 8008b7e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	8119      	strh	r1, [r3, #8]
 8008b86:	f640 3418 	movw	r4, #2840	@ 0xb18
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008b90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008b92:	f8a3 4044 	strh.w	r4, [r3, #68]	@ 0x44
 8008b96:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b98:	f883 004c 	strb.w	r0, [r3, #76]	@ 0x4c
 8008b9c:	e5dd      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008b9e:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f846 2b04 	str.w	r2, [r6], #4
 8008ba8:	429e      	cmp	r6, r3
 8008baa:	d1fb      	bne.n	8008ba4 <net::tcp_handle(t_tcp*)+0x4bc>
 8008bac:	e7e4      	b.n	8008b78 <net::tcp_handle(t_tcp*)+0x490>
 8008bae:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f846 2b04 	str.w	r2, [r6], #4
 8008bb8:	42b3      	cmp	r3, r6
 8008bba:	d1fb      	bne.n	8008bb4 <net::tcp_handle(t_tcp*)+0x4cc>
 8008bbc:	e7dc      	b.n	8008b78 <net::tcp_handle(t_tcp*)+0x490>
 8008bbe:	00a3      	lsls	r3, r4, #2
 8008bc0:	4423      	add	r3, r4
 8008bc2:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008bc6:	891d      	ldrh	r5, [r3, #8]
 8008bc8:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008bcc:	f846 0b04 	str.w	r0, [r6], #4
 8008bd0:	429e      	cmp	r6, r3
 8008bd2:	d1fb      	bne.n	8008bcc <net::tcp_handle(t_tcp*)+0x4e4>
 8008bd4:	e646      	b.n	8008864 <net::tcp_handle(t_tcp*)+0x17c>
 8008bd6:	1a80      	subs	r0, r0, r2
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f340 8090 	ble.w	8008cfe <net::tcp_handle(t_tcp*)+0x616>
 8008bde:	9801      	ldr	r0, [sp, #4]
 8008be0:	eba0 010c 	sub.w	r1, r0, ip
 8008be4:	2900      	cmp	r1, #0
 8008be6:	f77f af06 	ble.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008bea:	00a3      	lsls	r3, r4, #2
 8008bec:	4423      	add	r3, r4
 8008bee:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008bf2:	2410      	movs	r4, #16
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	f88d 4018 	strb.w	r4, [sp, #24]
 8008bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bfe:	eb0d 0104 	add.w	r1, sp, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	e69b      	b.n	800893e <net::tcp_handle(t_tcp*)+0x256>
 8008c06:	f1be 0f00 	cmp.w	lr, #0
 8008c0a:	f47f aef4 	bne.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c0e:	9801      	ldr	r0, [sp, #4]
 8008c10:	1a82      	subs	r2, r0, r2
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	f73f aeef 	bgt.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c18:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8008c1a:	eba2 000b 	sub.w	r0, r2, fp
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	db08      	blt.n	8008c34 <net::tcp_handle(t_tcp*)+0x54c>
 8008c22:	455a      	cmp	r2, fp
 8008c24:	f47f aee7 	bne.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c28:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8008c2a:	9901      	ldr	r1, [sp, #4]
 8008c2c:	1a52      	subs	r2, r2, r1
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	f73f aee1 	bgt.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c34:	00a2      	lsls	r2, r4, #2
 8008c36:	4422      	add	r2, r4
 8008c38:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8008c3c:	9903      	ldr	r1, [sp, #12]
 8008c3e:	61d1      	str	r1, [r2, #28]
 8008c40:	9901      	ldr	r1, [sp, #4]
 8008c42:	f8c2 b024 	str.w	fp, [r2, #36]	@ 0x24
 8008c46:	6291      	str	r1, [r2, #40]	@ 0x28
 8008c48:	e6d5      	b.n	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c4a:	2b06      	cmp	r3, #6
 8008c4c:	f47f ad85 	bne.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008c50:	230a      	movs	r3, #10
 8008c52:	e74d      	b.n	8008af0 <net::tcp_handle(t_tcp*)+0x408>
 8008c54:	69a3      	ldr	r3, [r4, #24]
 8008c56:	9a01      	ldr	r2, [sp, #4]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d0f9      	beq.n	8008c50 <net::tcp_handle(t_tcp*)+0x568>
 8008c5c:	2308      	movs	r3, #8
 8008c5e:	e747      	b.n	8008af0 <net::tcp_handle(t_tcp*)+0x408>
 8008c60:	1a82      	subs	r2, r0, r2
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	f73f af11 	bgt.w	8008a8a <net::tcp_handle(t_tcp*)+0x3a2>
 8008c68:	9903      	ldr	r1, [sp, #12]
 8008c6a:	61d9      	str	r1, [r3, #28]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	9901      	ldr	r1, [sp, #4]
 8008c70:	f8c3 b024 	str.w	fp, [r3, #36]	@ 0x24
 8008c74:	6299      	str	r1, [r3, #40]	@ 0x28
 8008c76:	6159      	str	r1, [r3, #20]
 8008c78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8008c7c:	e56d      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008c7e:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 8008c82:	3301      	adds	r3, #1
 8008c84:	4443      	add	r3, r8
 8008c86:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c8a:	f802 1b01 	strb.w	r1, [r2], #1
 8008c8e:	4543      	cmp	r3, r8
 8008c90:	d1f9      	bne.n	8008c86 <net::tcp_handle(t_tcp*)+0x59e>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	eb03 0804 	add.w	r8, r3, r4
 8008c98:	f44f 63b2 	mov.w	r3, #1424	@ 0x590
 8008c9c:	eb07 1808 	add.w	r8, r7, r8, lsl #4
 8008ca0:	fb03 7300 	mla	r3, r3, r0, r7
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f8a3 9770 	strh.w	r9, [r3, #1904]	@ 0x770
 8008caa:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
 8008cae:	444b      	add	r3, r9
 8008cb0:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	f8b8 3044 	ldrh.w	r3, [r8, #68]	@ 0x44
 8008cba:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
 8008cbe:	f8a8 3044 	strh.w	r3, [r8, #68]	@ 0x44
 8008cc2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	2310      	movs	r3, #16
 8008cca:	eb0d 0103 	add.w	r1, sp, r3
 8008cce:	f88d 3018 	strb.w	r3, [sp, #24]
 8008cd2:	f00c fb3d 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008cd6:	f8b7 21e0 	ldrh.w	r2, [r7, #480]	@ 0x1e0
 8008cda:	f898 304c 	ldrb.w	r3, [r8, #76]	@ 0x4c
 8008cde:	3201      	adds	r2, #1
 8008ce0:	f002 0201 	and.w	r2, r2, #1
 8008ce4:	f8a7 21e0 	strh.w	r2, [r7, #480]	@ 0x1e0
 8008ce8:	e6dc      	b.n	8008aa4 <net::tcp_handle(t_tcp*)+0x3bc>
 8008cea:	699c      	ldr	r4, [r3, #24]
 8008cec:	2310      	movs	r3, #16
 8008cee:	e9cd 4204 	strd	r4, r2, [sp, #16]
 8008cf2:	eb0d 0103 	add.w	r1, sp, r3
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f88d 3018 	strb.w	r3, [sp, #24]
 8008cfc:	e61f      	b.n	800893e <net::tcp_handle(t_tcp*)+0x256>
 8008cfe:	9a01      	ldr	r2, [sp, #4]
 8008d00:	614a      	str	r2, [r1, #20]
 8008d02:	e789      	b.n	8008c18 <net::tcp_handle(t_tcp*)+0x530>
 8008d04:	2001a628 	andcs	sl, r1, r8, lsr #12

08008d08 <net::udp_handle(t_udp*)>:
 8008d08:	f8b0 c024 	ldrh.w	ip, [r0, #36]	@ 0x24
 8008d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d84 <net::udp_handle(t_udp*)+0x7c>)
 8008d0e:	fa9c fc9c 	rev16.w	ip, ip
 8008d12:	2300      	movs	r3, #0
 8008d14:	fa1f fc8c 	uxth.w	ip, ip
 8008d18:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8008d1c:	4561      	cmp	r1, ip
 8008d1e:	d003      	beq.n	8008d28 <net::udp_handle(t_udp*)+0x20>
 8008d20:	3301      	adds	r3, #1
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d1f8      	bne.n	8008d18 <net::udp_handle(t_udp*)+0x10>
 8008d26:	4770      	bx	lr
 8008d28:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8008d2a:	b530      	push	{r4, r5, lr}
 8008d2c:	ba4c      	rev16	r4, r1
 8008d2e:	3c08      	subs	r4, #8
 8008d30:	b2a4      	uxth	r4, r4
 8008d32:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8008d36:	fa1f fc81 	uxth.w	ip, r1
 8008d3a:	f5b4 6fb8 	cmp.w	r4, #1472	@ 0x5c0
 8008d3e:	4d12      	ldr	r5, [pc, #72]	@ (8008d88 <net::udp_handle(t_udp*)+0x80>)
 8008d40:	fb03 f202 	mul.w	r2, r3, r2
 8008d44:	f102 020a 	add.w	r2, r2, #10
 8008d48:	bf28      	it	cs
 8008d4a:	f44f 64b8 	movcs.w	r4, #1472	@ 0x5c0
 8008d4e:	f5bc 6f00 	cmp.w	ip, #2048	@ 0x800
 8008d52:	442a      	add	r2, r5
 8008d54:	f100 012a 	add.w	r1, r0, #42	@ 0x2a
 8008d58:	d007      	beq.n	8008d6a <net::udp_handle(t_udp*)+0x62>
 8008d5a:	eb02 0e04 	add.w	lr, r2, r4
 8008d5e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008d62:	f802 cb01 	strb.w	ip, [r2], #1
 8008d66:	4572      	cmp	r2, lr
 8008d68:	d1f9      	bne.n	8008d5e <net::udp_handle(t_udp*)+0x56>
 8008d6a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	f8d0 101a 	ldr.w	r1, [r0, #26]
 8008d76:	50e9      	str	r1, [r5, r3]
 8008d78:	18ea      	adds	r2, r5, r3
 8008d7a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008d7c:	6054      	str	r4, [r2, #4]
 8008d7e:	ba5b      	rev16	r3, r3
 8008d80:	8113      	strh	r3, [r2, #8]
 8008d82:	bd30      	pop	{r4, r5, pc}
 8008d84:	1000cafe 	strdne	ip, [r0], -lr
 8008d88:	10009ca0 	andne	r9, r0, r0, lsr #25

08008d8c <net::arp_handle(t_arp*)>:
 8008d8c:	89c3      	ldrh	r3, [r0, #14]
 8008d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d92:	d17e      	bne.n	8008e92 <net::arp_handle(t_arp*)+0x106>
 8008d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	8a03      	ldrh	r3, [r0, #16]
 8008d9a:	2b08      	cmp	r3, #8
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	d172      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008da0:	7c83      	ldrb	r3, [r0, #18]
 8008da2:	2b06      	cmp	r3, #6
 8008da4:	d16f      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008da6:	7cc3      	ldrb	r3, [r0, #19]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d16c      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008dac:	f00d fac8 	bl	8016340 <net::acd_arp_reply(t_arp*)>
 8008db0:	4a38      	ldr	r2, [pc, #224]	@ (8008e94 <net::arp_handle(t_arp*)+0x108>)
 8008db2:	f8d4 3026 	ldr.w	r3, [r4, #38]	@ 0x26
 8008db6:	6817      	ldr	r7, [r2, #0]
 8008db8:	429f      	cmp	r7, r3
 8008dba:	d066      	beq.n	8008e8a <net::arp_handle(t_arp*)+0xfe>
 8008dbc:	6912      	ldr	r2, [r2, #16]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	bf0d      	iteet	eq
 8008dc2:	f04f 0801 	moveq.w	r8, #1
 8008dc6:	f04f 0800 	movne.w	r8, #0
 8008dca:	2101      	movne	r1, #1
 8008dcc:	2100      	moveq	r1, #0
 8008dce:	69e6      	ldr	r6, [r4, #28]
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f00d fb3b 	bl	801644c <net::arp_find_record(unsigned long, net::arp::Flags)>
 8008dd6:	f104 091c 	add.w	r9, r4, #28
 8008dda:	f104 0a16 	add.w	sl, r4, #22
 8008dde:	4605      	mov	r5, r0
 8008de0:	b350      	cbz	r0, 8008e38 <net::arp_handle(t_arp*)+0xac>
 8008de2:	2302      	movs	r3, #2
 8008de4:	6143      	str	r3, [r0, #20]
 8008de6:	f100 020c 	add.w	r2, r0, #12
 8008dea:	2300      	movs	r3, #0
 8008dec:	8243      	strh	r3, [r0, #18]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4653      	mov	r3, sl
 8008df2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008df6:	f801 0b01 	strb.w	r0, [r1], #1
 8008dfa:	4599      	cmp	r9, r3
 8008dfc:	d1f9      	bne.n	8008df2 <net::arp_handle(t_arp*)+0x66>
 8008dfe:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008e02:	f1bc 0f00 	cmp.w	ip, #0
 8008e06:	d017      	beq.n	8008e38 <net::arp_handle(t_arp*)+0xac>
 8008e08:	4663      	mov	r3, ip
 8008e0a:	f105 0012 	add.w	r0, r5, #18
 8008e0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008e12:	f803 1b01 	strb.w	r1, [r3], #1
 8008e16:	4282      	cmp	r2, r0
 8008e18:	d1f9      	bne.n	8008e0e <net::arp_handle(t_arp*)+0x82>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8008e20:	f88c 3018 	strb.w	r3, [ip, #24]
 8008e24:	f88c 3019 	strb.w	r3, [ip, #25]
 8008e28:	f00d f964 	bl	80160f4 <emac_eth_send(void*, unsigned long)>
 8008e2c:	6868      	ldr	r0, [r5, #4]
 8008e2e:	b108      	cbz	r0, 8008e34 <net::arp_handle(t_arp*)+0xa8>
 8008e30:	f012 f94c 	bl	801b0cc <operator delete[](void*)>
 8008e34:	2300      	movs	r3, #0
 8008e36:	606b      	str	r3, [r5, #4]
 8008e38:	8aa3      	ldrh	r3, [r4, #20]
 8008e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e3e:	d122      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d01f      	beq.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e46:	42b7      	cmp	r7, r6
 8008e48:	d01d      	beq.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e4a:	4d13      	ldr	r5, [pc, #76]	@ (8008e98 <net::arp_handle(t_arp*)+0x10c>)
 8008e4c:	1da3      	adds	r3, r4, #6
 8008e4e:	f104 000c 	add.w	r0, r4, #12
 8008e52:	462a      	mov	r2, r5
 8008e54:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008e58:	f802 1b01 	strb.w	r1, [r2], #1
 8008e5c:	4283      	cmp	r3, r0
 8008e5e:	d1f9      	bne.n	8008e54 <net::arp_handle(t_arp*)+0xc8>
 8008e60:	f8d4 6026 	ldr.w	r6, [r4, #38]	@ 0x26
 8008e64:	4b0d      	ldr	r3, [pc, #52]	@ (8008e9c <net::arp_handle(t_arp*)+0x110>)
 8008e66:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8008e6a:	f803 2b01 	strb.w	r2, [r3], #1
 8008e6e:	45d1      	cmp	r9, sl
 8008e70:	d1f9      	bne.n	8008e66 <net::arp_handle(t_arp*)+0xda>
 8008e72:	69e3      	ldr	r3, [r4, #28]
 8008e74:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
 8008e78:	61ee      	str	r6, [r5, #28]
 8008e7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7e:	4806      	ldr	r0, [pc, #24]	@ (8008e98 <net::arp_handle(t_arp*)+0x10c>)
 8008e80:	213c      	movs	r1, #60	@ 0x3c
 8008e82:	f00d b937 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	f04f 0801 	mov.w	r8, #1
 8008e90:	e79d      	b.n	8008dce <net::arp_handle(t_arp*)+0x42>
 8008e92:	4770      	bx	lr
 8008e94:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8008e98:	2000cbb8 			@ <UNDEFINED> instruction: 0x2000cbb8
 8008e9c:	2000cbd8 	ldrdcs	ip, [r0], -r8

08008ea0 <net::ip_handle(t_ip4*)>:
 8008ea0:	7b81      	ldrb	r1, [r0, #14]
 8008ea2:	7dc2      	ldrb	r2, [r0, #23]
 8008ea4:	2945      	cmp	r1, #69	@ 0x45
 8008ea6:	d121      	bne.n	8008eec <net::ip_handle(t_ip4*)+0x4c>
 8008ea8:	3a01      	subs	r2, #1
 8008eaa:	b508      	push	{r3, lr}
 8008eac:	2a10      	cmp	r2, #16
 8008eae:	d80a      	bhi.n	8008ec6 <net::ip_handle(t_ip4*)+0x26>
 8008eb0:	e8df f002 	tbb	[pc, r2]
 8008eb4:	0909120e 	stmdbeq	r9, {r1, r2, r3, r9, ip}
 8008eb8:	09091609 	stmdbeq	r9, {r0, r3, r9, sl, ip}
 8008ebc:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8008ec0:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8008ec4:	bd08000a 	stclt	0, cr0, [r8, #-40]	@ 0xffffffd8
 8008ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ecc:	f7ff bf1c 	b.w	8008d08 <net::udp_handle(t_udp*)>
 8008ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ed4:	f000 b80e 	b.w	8008ef4 <net::icmp_handle(t_icmp*)>
 8008ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008edc:	f7ff bb6c 	b.w	80085b8 <net::igmp_handle(t_igmp*)>
 8008ee0:	f7ff fc02 	bl	80086e8 <net::tcp_handle(t_tcp*)>
 8008ee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ee8:	f7ff bbd8 	b.w	800869c <net::tcp_run()>
 8008eec:	2a02      	cmp	r2, #2
 8008eee:	d0f5      	beq.n	8008edc <net::ip_handle(t_ip4*)+0x3c>
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop

08008ef4 <net::icmp_handle(t_icmp*)>:
 8008ef4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d000      	beq.n	8008efe <net::icmp_handle(t_icmp*)+0xa>
 8008efc:	4770      	bx	lr
 8008efe:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1fa      	bne.n	8008efc <net::icmp_handle(t_icmp*)+0x8>
 8008f06:	f100 0c06 	add.w	ip, r0, #6
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4662      	mov	r2, ip
 8008f0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	459c      	cmp	ip, r3
 8008f18:	d1f9      	bne.n	8008f0e <net::icmp_handle(t_icmp*)+0x1a>
 8008f1a:	4a14      	ldr	r2, [pc, #80]	@ (8008f6c <net::icmp_handle(t_icmp*)+0x78>)
 8008f1c:	f100 0c0c 	add.w	ip, r0, #12
 8008f20:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f24:	f803 1b01 	strb.w	r1, [r3], #1
 8008f28:	4563      	cmp	r3, ip
 8008f2a:	d1f9      	bne.n	8008f20 <net::icmp_handle(t_icmp*)+0x2c>
 8008f2c:	8a43      	ldrh	r3, [r0, #18]
 8008f2e:	4a10      	ldr	r2, [pc, #64]	@ (8008f70 <net::icmp_handle(t_icmp*)+0x7c>)
 8008f30:	f8d0 101e 	ldr.w	r1, [r0, #30]
 8008f34:	f8d0 c01a 	ldr.w	ip, [r0, #26]
 8008f38:	f8c0 c01e 	str.w	ip, [r0, #30]
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	8243      	strh	r3, [r0, #18]
 8008f40:	6913      	ldr	r3, [r2, #16]
 8008f42:	428b      	cmp	r3, r1
 8008f44:	8a01      	ldrh	r1, [r0, #16]
 8008f46:	bf18      	it	ne
 8008f48:	6813      	ldrne	r3, [r2, #0]
 8008f4a:	f8c0 301a 	str.w	r3, [r0, #26]
 8008f4e:	ba49      	rev16	r1, r1
 8008f50:	2300      	movs	r3, #0
 8008f52:	b289      	uxth	r1, r1
 8008f54:	7603      	strb	r3, [r0, #24]
 8008f56:	7643      	strb	r3, [r0, #25]
 8008f58:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8008f5c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8008f60:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 8008f64:	310e      	adds	r1, #14
 8008f66:	f00d b8c5 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 8008f6a:	bf00      	nop
 8008f6c:	2000cb9c 	mulcs	r0, ip, fp
 8008f70:	2000cb88 	andcs	ip, r0, r8, lsl #23

08008f74 <__aeabi_drsub>:
 8008f74:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008f78:	e002      	b.n	8008f80 <__adddf3>
 8008f7a:	bf00      	nop

08008f7c <__aeabi_dsub>:
 8008f7c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08008f80 <__adddf3>:
 8008f80:	b530      	push	{r4, r5, lr}
 8008f82:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008f86:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008f8a:	ea94 0f05 	teq	r4, r5
 8008f8e:	bf08      	it	eq
 8008f90:	ea90 0f02 	teqeq	r0, r2
 8008f94:	bf1f      	itttt	ne
 8008f96:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008f9a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008f9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008fa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008fa6:	f000 80e2 	beq.w	800916e <__adddf3+0x1ee>
 8008faa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008fae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008fb2:	bfb8      	it	lt
 8008fb4:	426d      	neglt	r5, r5
 8008fb6:	dd0c      	ble.n	8008fd2 <__adddf3+0x52>
 8008fb8:	442c      	add	r4, r5
 8008fba:	ea80 0202 	eor.w	r2, r0, r2
 8008fbe:	ea81 0303 	eor.w	r3, r1, r3
 8008fc2:	ea82 0000 	eor.w	r0, r2, r0
 8008fc6:	ea83 0101 	eor.w	r1, r3, r1
 8008fca:	ea80 0202 	eor.w	r2, r0, r2
 8008fce:	ea81 0303 	eor.w	r3, r1, r3
 8008fd2:	2d36      	cmp	r5, #54	@ 0x36
 8008fd4:	bf88      	it	hi
 8008fd6:	bd30      	pophi	{r4, r5, pc}
 8008fd8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008fe0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008fe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008fe8:	d002      	beq.n	8008ff0 <__adddf3+0x70>
 8008fea:	4240      	negs	r0, r0
 8008fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ff0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008ff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008ffc:	d002      	beq.n	8009004 <__adddf3+0x84>
 8008ffe:	4252      	negs	r2, r2
 8009000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009004:	ea94 0f05 	teq	r4, r5
 8009008:	f000 80a7 	beq.w	800915a <__adddf3+0x1da>
 800900c:	f1a4 0401 	sub.w	r4, r4, #1
 8009010:	f1d5 0e20 	rsbs	lr, r5, #32
 8009014:	db0d      	blt.n	8009032 <__adddf3+0xb2>
 8009016:	fa02 fc0e 	lsl.w	ip, r2, lr
 800901a:	fa22 f205 	lsr.w	r2, r2, r5
 800901e:	1880      	adds	r0, r0, r2
 8009020:	f141 0100 	adc.w	r1, r1, #0
 8009024:	fa03 f20e 	lsl.w	r2, r3, lr
 8009028:	1880      	adds	r0, r0, r2
 800902a:	fa43 f305 	asr.w	r3, r3, r5
 800902e:	4159      	adcs	r1, r3
 8009030:	e00e      	b.n	8009050 <__adddf3+0xd0>
 8009032:	f1a5 0520 	sub.w	r5, r5, #32
 8009036:	f10e 0e20 	add.w	lr, lr, #32
 800903a:	2a01      	cmp	r2, #1
 800903c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8009040:	bf28      	it	cs
 8009042:	f04c 0c02 	orrcs.w	ip, ip, #2
 8009046:	fa43 f305 	asr.w	r3, r3, r5
 800904a:	18c0      	adds	r0, r0, r3
 800904c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8009050:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009054:	d507      	bpl.n	8009066 <__adddf3+0xe6>
 8009056:	f04f 0e00 	mov.w	lr, #0
 800905a:	f1dc 0c00 	rsbs	ip, ip, #0
 800905e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8009062:	eb6e 0101 	sbc.w	r1, lr, r1
 8009066:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800906a:	d31b      	bcc.n	80090a4 <__adddf3+0x124>
 800906c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8009070:	d30c      	bcc.n	800908c <__adddf3+0x10c>
 8009072:	0849      	lsrs	r1, r1, #1
 8009074:	ea5f 0030 	movs.w	r0, r0, rrx
 8009078:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800907c:	f104 0401 	add.w	r4, r4, #1
 8009080:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8009084:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8009088:	f080 809a 	bcs.w	80091c0 <__adddf3+0x240>
 800908c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8009090:	bf08      	it	eq
 8009092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009096:	f150 0000 	adcs.w	r0, r0, #0
 800909a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800909e:	ea41 0105 	orr.w	r1, r1, r5
 80090a2:	bd30      	pop	{r4, r5, pc}
 80090a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80090a8:	4140      	adcs	r0, r0
 80090aa:	eb41 0101 	adc.w	r1, r1, r1
 80090ae:	3c01      	subs	r4, #1
 80090b0:	bf28      	it	cs
 80090b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80090b6:	d2e9      	bcs.n	800908c <__adddf3+0x10c>
 80090b8:	f091 0f00 	teq	r1, #0
 80090bc:	bf04      	itt	eq
 80090be:	4601      	moveq	r1, r0
 80090c0:	2000      	moveq	r0, #0
 80090c2:	fab1 f381 	clz	r3, r1
 80090c6:	bf08      	it	eq
 80090c8:	3320      	addeq	r3, #32
 80090ca:	f1a3 030b 	sub.w	r3, r3, #11
 80090ce:	f1b3 0220 	subs.w	r2, r3, #32
 80090d2:	da0c      	bge.n	80090ee <__adddf3+0x16e>
 80090d4:	320c      	adds	r2, #12
 80090d6:	dd08      	ble.n	80090ea <__adddf3+0x16a>
 80090d8:	f102 0c14 	add.w	ip, r2, #20
 80090dc:	f1c2 020c 	rsb	r2, r2, #12
 80090e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80090e4:	fa21 f102 	lsr.w	r1, r1, r2
 80090e8:	e00c      	b.n	8009104 <__adddf3+0x184>
 80090ea:	f102 0214 	add.w	r2, r2, #20
 80090ee:	bfd8      	it	le
 80090f0:	f1c2 0c20 	rsble	ip, r2, #32
 80090f4:	fa01 f102 	lsl.w	r1, r1, r2
 80090f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80090fc:	bfdc      	itt	le
 80090fe:	ea41 010c 	orrle.w	r1, r1, ip
 8009102:	4090      	lslle	r0, r2
 8009104:	1ae4      	subs	r4, r4, r3
 8009106:	bfa2      	ittt	ge
 8009108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800910c:	4329      	orrge	r1, r5
 800910e:	bd30      	popge	{r4, r5, pc}
 8009110:	ea6f 0404 	mvn.w	r4, r4
 8009114:	3c1f      	subs	r4, #31
 8009116:	da1c      	bge.n	8009152 <__adddf3+0x1d2>
 8009118:	340c      	adds	r4, #12
 800911a:	dc0e      	bgt.n	800913a <__adddf3+0x1ba>
 800911c:	f104 0414 	add.w	r4, r4, #20
 8009120:	f1c4 0220 	rsb	r2, r4, #32
 8009124:	fa20 f004 	lsr.w	r0, r0, r4
 8009128:	fa01 f302 	lsl.w	r3, r1, r2
 800912c:	ea40 0003 	orr.w	r0, r0, r3
 8009130:	fa21 f304 	lsr.w	r3, r1, r4
 8009134:	ea45 0103 	orr.w	r1, r5, r3
 8009138:	bd30      	pop	{r4, r5, pc}
 800913a:	f1c4 040c 	rsb	r4, r4, #12
 800913e:	f1c4 0220 	rsb	r2, r4, #32
 8009142:	fa20 f002 	lsr.w	r0, r0, r2
 8009146:	fa01 f304 	lsl.w	r3, r1, r4
 800914a:	ea40 0003 	orr.w	r0, r0, r3
 800914e:	4629      	mov	r1, r5
 8009150:	bd30      	pop	{r4, r5, pc}
 8009152:	fa21 f004 	lsr.w	r0, r1, r4
 8009156:	4629      	mov	r1, r5
 8009158:	bd30      	pop	{r4, r5, pc}
 800915a:	f094 0f00 	teq	r4, #0
 800915e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8009162:	bf06      	itte	eq
 8009164:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8009168:	3401      	addeq	r4, #1
 800916a:	3d01      	subne	r5, #1
 800916c:	e74e      	b.n	800900c <__adddf3+0x8c>
 800916e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009172:	bf18      	it	ne
 8009174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009178:	d029      	beq.n	80091ce <__adddf3+0x24e>
 800917a:	ea94 0f05 	teq	r4, r5
 800917e:	bf08      	it	eq
 8009180:	ea90 0f02 	teqeq	r0, r2
 8009184:	d005      	beq.n	8009192 <__adddf3+0x212>
 8009186:	ea54 0c00 	orrs.w	ip, r4, r0
 800918a:	bf04      	itt	eq
 800918c:	4619      	moveq	r1, r3
 800918e:	4610      	moveq	r0, r2
 8009190:	bd30      	pop	{r4, r5, pc}
 8009192:	ea91 0f03 	teq	r1, r3
 8009196:	bf1e      	ittt	ne
 8009198:	2100      	movne	r1, #0
 800919a:	2000      	movne	r0, #0
 800919c:	bd30      	popne	{r4, r5, pc}
 800919e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80091a2:	d105      	bne.n	80091b0 <__adddf3+0x230>
 80091a4:	0040      	lsls	r0, r0, #1
 80091a6:	4149      	adcs	r1, r1
 80091a8:	bf28      	it	cs
 80091aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80091b4:	bf3c      	itt	cc
 80091b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80091ba:	bd30      	popcc	{r4, r5, pc}
 80091bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80091c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80091c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091c8:	f04f 0000 	mov.w	r0, #0
 80091cc:	bd30      	pop	{r4, r5, pc}
 80091ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80091d2:	bf1a      	itte	ne
 80091d4:	4619      	movne	r1, r3
 80091d6:	4610      	movne	r0, r2
 80091d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80091dc:	bf1c      	itt	ne
 80091de:	460b      	movne	r3, r1
 80091e0:	4602      	movne	r2, r0
 80091e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80091e6:	bf06      	itte	eq
 80091e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80091ec:	ea91 0f03 	teqeq	r1, r3
 80091f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80091f4:	bd30      	pop	{r4, r5, pc}
 80091f6:	bf00      	nop

080091f8 <__aeabi_ui2d>:
 80091f8:	f090 0f00 	teq	r0, #0
 80091fc:	bf04      	itt	eq
 80091fe:	2100      	moveq	r1, #0
 8009200:	4770      	bxeq	lr
 8009202:	b530      	push	{r4, r5, lr}
 8009204:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8009208:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800920c:	f04f 0500 	mov.w	r5, #0
 8009210:	f04f 0100 	mov.w	r1, #0
 8009214:	e750      	b.n	80090b8 <__adddf3+0x138>
 8009216:	bf00      	nop

08009218 <__aeabi_i2d>:
 8009218:	f090 0f00 	teq	r0, #0
 800921c:	bf04      	itt	eq
 800921e:	2100      	moveq	r1, #0
 8009220:	4770      	bxeq	lr
 8009222:	b530      	push	{r4, r5, lr}
 8009224:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8009228:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800922c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8009230:	bf48      	it	mi
 8009232:	4240      	negmi	r0, r0
 8009234:	f04f 0100 	mov.w	r1, #0
 8009238:	e73e      	b.n	80090b8 <__adddf3+0x138>
 800923a:	bf00      	nop

0800923c <__aeabi_f2d>:
 800923c:	0042      	lsls	r2, r0, #1
 800923e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8009242:	ea4f 0131 	mov.w	r1, r1, rrx
 8009246:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800924a:	bf1f      	itttt	ne
 800924c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8009250:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8009254:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8009258:	4770      	bxne	lr
 800925a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800925e:	bf08      	it	eq
 8009260:	4770      	bxeq	lr
 8009262:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8009266:	bf04      	itt	eq
 8009268:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800926c:	4770      	bxeq	lr
 800926e:	b530      	push	{r4, r5, lr}
 8009270:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8009274:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800927c:	e71c      	b.n	80090b8 <__adddf3+0x138>
 800927e:	bf00      	nop

08009280 <__aeabi_ul2d>:
 8009280:	ea50 0201 	orrs.w	r2, r0, r1
 8009284:	bf08      	it	eq
 8009286:	4770      	bxeq	lr
 8009288:	b530      	push	{r4, r5, lr}
 800928a:	f04f 0500 	mov.w	r5, #0
 800928e:	e00a      	b.n	80092a6 <__aeabi_l2d+0x16>

08009290 <__aeabi_l2d>:
 8009290:	ea50 0201 	orrs.w	r2, r0, r1
 8009294:	bf08      	it	eq
 8009296:	4770      	bxeq	lr
 8009298:	b530      	push	{r4, r5, lr}
 800929a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800929e:	d502      	bpl.n	80092a6 <__aeabi_l2d+0x16>
 80092a0:	4240      	negs	r0, r0
 80092a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80092a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80092aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80092ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80092b2:	f43f aed8 	beq.w	8009066 <__adddf3+0xe6>
 80092b6:	f04f 0203 	mov.w	r2, #3
 80092ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092be:	bf18      	it	ne
 80092c0:	3203      	addne	r2, #3
 80092c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092c6:	bf18      	it	ne
 80092c8:	3203      	addne	r2, #3
 80092ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80092ce:	f1c2 0320 	rsb	r3, r2, #32
 80092d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80092d6:	fa20 f002 	lsr.w	r0, r0, r2
 80092da:	fa01 fe03 	lsl.w	lr, r1, r3
 80092de:	ea40 000e 	orr.w	r0, r0, lr
 80092e2:	fa21 f102 	lsr.w	r1, r1, r2
 80092e6:	4414      	add	r4, r2
 80092e8:	e6bd      	b.n	8009066 <__adddf3+0xe6>
 80092ea:	bf00      	nop

080092ec <__aeabi_d2f>:
 80092ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80092f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80092f4:	bf24      	itt	cs
 80092f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80092fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80092fe:	d90d      	bls.n	800931c <__aeabi_d2f+0x30>
 8009300:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8009304:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009308:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800930c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8009310:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8009314:	bf08      	it	eq
 8009316:	f020 0001 	biceq.w	r0, r0, #1
 800931a:	4770      	bx	lr
 800931c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8009320:	d121      	bne.n	8009366 <__aeabi_d2f+0x7a>
 8009322:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8009326:	bfbc      	itt	lt
 8009328:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800932c:	4770      	bxlt	lr
 800932e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8009332:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8009336:	f1c2 0218 	rsb	r2, r2, #24
 800933a:	f1c2 0c20 	rsb	ip, r2, #32
 800933e:	fa10 f30c 	lsls.w	r3, r0, ip
 8009342:	fa20 f002 	lsr.w	r0, r0, r2
 8009346:	bf18      	it	ne
 8009348:	f040 0001 	orrne.w	r0, r0, #1
 800934c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009350:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8009354:	fa03 fc0c 	lsl.w	ip, r3, ip
 8009358:	ea40 000c 	orr.w	r0, r0, ip
 800935c:	fa23 f302 	lsr.w	r3, r3, r2
 8009360:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009364:	e7cc      	b.n	8009300 <__aeabi_d2f+0x14>
 8009366:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800936a:	d107      	bne.n	800937c <__aeabi_d2f+0x90>
 800936c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8009370:	bf1e      	ittt	ne
 8009372:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8009376:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800937a:	4770      	bxne	lr
 800937c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8009380:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8009384:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop

0800938c <Reset_Handler>:
 800938c:	490f      	ldr	r1, [pc, #60]	@ (80093cc <ZeroBSSLoop+0x1e>)
 800938e:	4a10      	ldr	r2, [pc, #64]	@ (80093d0 <ZeroBSSLoop+0x22>)
 8009390:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <ZeroBSSLoop+0x26>)
 8009392:	1a5b      	subs	r3, r3, r1
 8009394:	d005      	beq.n	80093a2 <ZeroBSS>

08009396 <CopyDataLoop>:
 8009396:	f812 4b01 	ldrb.w	r4, [r2], #1
 800939a:	f801 4b01 	strb.w	r4, [r1], #1
 800939e:	3b01      	subs	r3, #1
 80093a0:	dcf9      	bgt.n	8009396 <CopyDataLoop>

080093a2 <ZeroBSS>:
 80093a2:	4a0d      	ldr	r2, [pc, #52]	@ (80093d8 <ZeroBSSLoop+0x2a>)
 80093a4:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <ZeroBSSLoop+0x2e>)
 80093a6:	eba3 0302 	sub.w	r3, r3, r2
 80093aa:	f04f 0400 	mov.w	r4, #0

080093ae <ZeroBSSLoop>:
 80093ae:	f842 4b04 	str.w	r4, [r2], #4
 80093b2:	3b04      	subs	r3, #4
 80093b4:	dcfb      	bgt.n	80093ae <ZeroBSSLoop>
 80093b6:	f00f f97b 	bl	80186b0 <stack_debug_init>
 80093ba:	f00f f9dd 	bl	8018778 <SystemInit>
 80093be:	f011 f90b 	bl	801a5d8 <__libc_init_array>
 80093c2:	f000 fd67 	bl	8009e94 <main>
 80093c6:	4770      	bx	lr
 80093c8:	bf00      	nop
 80093ca:	00000000 	andeq	r0, r0, r0
 80093ce:	f7042000 			@ <UNDEFINED> instruction: 0xf7042000
 80093d2:	00780801 	rsbseq	r0, r8, r1, lsl #16
 80093d6:	00782000 	rsbseq	r2, r8, r0
 80093da:	a66c2000 	strbtge	r2, [ip], -r0
 80093de:	 	ldrb	r2, [lr, r1]!

080093e0 <ADC_IRQHandler>:
 80093e0:	e7fe      	b.n	80093e0 <ADC_IRQHandler>

080093e2 <HardFault_Handler>:
 80093e2:	f01e 0f04 	tst.w	lr, #4
 80093e6:	bf0c      	ite	eq
 80093e8:	f3ef 8008 	mrseq	r0, MSP
 80093ec:	f3ef 8009 	mrsne	r0, PSP
 80093f0:	4671      	mov	r1, lr
 80093f2:	f000 b801 	b.w	80093f8 <hardfault_handler>
 80093f6:	4770      	bx	lr

080093f8 <hardfault_handler>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	4d2f      	ldr	r5, [pc, #188]	@ (80094bc <hardfault_handler+0xc4>)
 80093fe:	b087      	sub	sp, #28
 8009400:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	e9d0 9303 	ldrd	r9, r3, [r0, #12]
 800940c:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800940e:	9303      	str	r3, [sp, #12]
 8009410:	e9d0 ba01 	ldrd	fp, sl, [r0, #4]
 8009414:	69c3      	ldr	r3, [r0, #28]
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	e9d0 7605 	ldrd	r7, r6, [r0, #20]
 800941c:	4688      	mov	r8, r1
 800941e:	6801      	ldr	r1, [r0, #0]
 8009420:	4827      	ldr	r0, [pc, #156]	@ (80094c0 <hardfault_handler+0xc8>)
 8009422:	9105      	str	r1, [sp, #20]
 8009424:	f011 fc00 	bl	801ac28 <printf>
 8009428:	4826      	ldr	r0, [pc, #152]	@ (80094c4 <hardfault_handler+0xcc>)
 800942a:	f011 fbfd 	bl	801ac28 <printf>
 800942e:	9905      	ldr	r1, [sp, #20]
 8009430:	4825      	ldr	r0, [pc, #148]	@ (80094c8 <hardfault_handler+0xd0>)
 8009432:	f011 fbf9 	bl	801ac28 <printf>
 8009436:	4659      	mov	r1, fp
 8009438:	4824      	ldr	r0, [pc, #144]	@ (80094cc <hardfault_handler+0xd4>)
 800943a:	f011 fbf5 	bl	801ac28 <printf>
 800943e:	4651      	mov	r1, sl
 8009440:	4823      	ldr	r0, [pc, #140]	@ (80094d0 <hardfault_handler+0xd8>)
 8009442:	f011 fbf1 	bl	801ac28 <printf>
 8009446:	4649      	mov	r1, r9
 8009448:	4822      	ldr	r0, [pc, #136]	@ (80094d4 <hardfault_handler+0xdc>)
 800944a:	f011 fbed 	bl	801ac28 <printf>
 800944e:	9903      	ldr	r1, [sp, #12]
 8009450:	4821      	ldr	r0, [pc, #132]	@ (80094d8 <hardfault_handler+0xe0>)
 8009452:	f011 fbe9 	bl	801ac28 <printf>
 8009456:	4639      	mov	r1, r7
 8009458:	4820      	ldr	r0, [pc, #128]	@ (80094dc <hardfault_handler+0xe4>)
 800945a:	f011 fbe5 	bl	801ac28 <printf>
 800945e:	4631      	mov	r1, r6
 8009460:	481f      	ldr	r0, [pc, #124]	@ (80094e0 <hardfault_handler+0xe8>)
 8009462:	f011 fbe1 	bl	801ac28 <printf>
 8009466:	9904      	ldr	r1, [sp, #16]
 8009468:	481e      	ldr	r0, [pc, #120]	@ (80094e4 <hardfault_handler+0xec>)
 800946a:	f011 fbdd 	bl	801ac28 <printf>
 800946e:	481e      	ldr	r0, [pc, #120]	@ (80094e8 <hardfault_handler+0xf0>)
 8009470:	f011 fbda 	bl	801ac28 <printf>
 8009474:	4621      	mov	r1, r4
 8009476:	481d      	ldr	r0, [pc, #116]	@ (80094ec <hardfault_handler+0xf4>)
 8009478:	f011 fbd6 	bl	801ac28 <printf>
 800947c:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800947e:	481c      	ldr	r0, [pc, #112]	@ (80094f0 <hardfault_handler+0xf8>)
 8009480:	f011 fbd2 	bl	801ac28 <printf>
 8009484:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8009486:	481b      	ldr	r0, [pc, #108]	@ (80094f4 <hardfault_handler+0xfc>)
 8009488:	f011 fbce 	bl	801ac28 <printf>
 800948c:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 800948e:	481a      	ldr	r0, [pc, #104]	@ (80094f8 <hardfault_handler+0x100>)
 8009490:	f011 fbca 	bl	801ac28 <printf>
 8009494:	0622      	lsls	r2, r4, #24
 8009496:	d503      	bpl.n	80094a0 <hardfault_handler+0xa8>
 8009498:	9902      	ldr	r1, [sp, #8]
 800949a:	4818      	ldr	r0, [pc, #96]	@ (80094fc <hardfault_handler+0x104>)
 800949c:	f011 fbc4 	bl	801ac28 <printf>
 80094a0:	0423      	lsls	r3, r4, #16
 80094a2:	d503      	bpl.n	80094ac <hardfault_handler+0xb4>
 80094a4:	9901      	ldr	r1, [sp, #4]
 80094a6:	4816      	ldr	r0, [pc, #88]	@ (8009500 <hardfault_handler+0x108>)
 80094a8:	f011 fbbe 	bl	801ac28 <printf>
 80094ac:	4815      	ldr	r0, [pc, #84]	@ (8009504 <hardfault_handler+0x10c>)
 80094ae:	f011 fbbb 	bl	801ac28 <printf>
 80094b2:	4815      	ldr	r0, [pc, #84]	@ (8009508 <hardfault_handler+0x110>)
 80094b4:	4641      	mov	r1, r8
 80094b6:	f011 fbb7 	bl	801ac28 <printf>
 80094ba:	e7fe      	b.n	80094ba <hardfault_handler+0xc2>
 80094bc:	e000ed00 	and	lr, r0, r0, lsl #26
 80094c0:	0801b1fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, ip, sp, pc}
 80094c4:	0801b209 	stmdaeq	r1, {r0, r3, r9, ip, sp, pc}
 80094c8:	0801b219 	stmdaeq	r1, {r0, r3, r4, r9, ip, sp, pc}
 80094cc:	0801b224 	stmdaeq	r1, {r2, r5, r9, ip, sp, pc}
 80094d0:	0801b22f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, ip, sp, pc}
 80094d4:	0801b23a 	stmdaeq	r1, {r1, r3, r4, r5, r9, ip, sp, pc}
 80094d8:	0801b245 	stmdaeq	r1, {r0, r2, r6, r9, ip, sp, pc}
 80094dc:	0801b250 	stmdaeq	r1, {r4, r6, r9, ip, sp, pc}
 80094e0:	0801b25b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, ip, sp, pc}
 80094e4:	0801b266 	stmdaeq	r1, {r1, r2, r5, r6, r9, ip, sp, pc}
 80094e8:	0801b271 	stmdaeq	r1, {r0, r4, r5, r6, r9, ip, sp, pc}
 80094ec:	0801b27d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, ip, sp, pc}
 80094f0:	0801b289 	stmdaeq	r1, {r0, r3, r7, r9, ip, sp, pc}
 80094f4:	0801b295 	stmdaeq	r1, {r0, r2, r4, r7, r9, ip, sp, pc}
 80094f8:	0801b2a1 	stmdaeq	r1, {r0, r5, r7, r9, ip, sp, pc}
 80094fc:	0801b2ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, ip, sp, pc}
 8009500:	0801b2ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, ip, sp, pc}
 8009504:	0801b2c6 	stmdaeq	r1, {r1, r2, r6, r7, r9, ip, sp, pc}
 8009508:	0801b2ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, sp, pc}

0800950c <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 800950c:	4770      	bx	lr

0800950e <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 800950e:	b510      	push	{r4, lr}
 8009510:	2108      	movs	r1, #8
 8009512:	4604      	mov	r4, r0
 8009514:	f011 fddc 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8009518:	4620      	mov	r0, r4
 800951a:	bd10      	pop	{r4, pc}

0800951c <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>:
 800951c:	b110      	cbz	r0, 8009524 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]+0x8>
 800951e:	6803      	ldr	r3, [r0, #0]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	4718      	bx	r3
 8009524:	4770      	bx	lr

08009526 <Display::PutChar(int) [clone .isra.0]>:
 8009526:	b110      	cbz	r0, 800952e <Display::PutChar(int) [clone .isra.0]+0x8>
 8009528:	6803      	ldr	r3, [r0, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	4718      	bx	r3
 800952e:	4770      	bx	lr

08009530 <Display::ClearLine(unsigned long) [clone .isra.0]>:
 8009530:	b110      	cbz	r0, 8009538 <Display::ClearLine(unsigned long) [clone .isra.0]+0x8>
 8009532:	6803      	ldr	r3, [r0, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	4718      	bx	r3
 8009538:	4770      	bx	lr

0800953a <memcpy.isra.0>:
 800953a:	440a      	add	r2, r1
 800953c:	4291      	cmp	r1, r2
 800953e:	d100      	bne.n	8009542 <memcpy.isra.0+0x8>
 8009540:	4770      	bx	lr
 8009542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009546:	f800 3b01 	strb.w	r3, [r0], #1
 800954a:	e7f7      	b.n	800953c <memcpy.isra.0+0x2>

0800954c <net::dhcp_run()>:
 800954c:	b510      	push	{r4, lr}
 800954e:	4b11      	ldr	r3, [pc, #68]	@ (8009594 <net::dhcp_run()+0x48>)
 8009550:	6a1c      	ldr	r4, [r3, #32]
 8009552:	b086      	sub	sp, #24
 8009554:	b1cc      	cbz	r4, 800958a <net::dhcp_run()+0x3e>
 8009556:	a904      	add	r1, sp, #16
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	f10d 030e 	add.w	r3, sp, #14
 800955e:	aa05      	add	r2, sp, #20
 8009560:	f00c f93c 	bl	80157dc <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 8009564:	4601      	mov	r1, r0
 8009566:	b180      	cbz	r0, 800958a <net::dhcp_run()+0x3e>
 8009568:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800956c:	2b43      	cmp	r3, #67	@ 0x43
 800956e:	d10c      	bne.n	800958a <net::dhcp_run()+0x3e>
 8009570:	9804      	ldr	r0, [sp, #16]
 8009572:	6862      	ldr	r2, [r4, #4]
 8009574:	6843      	ldr	r3, [r0, #4]
 8009576:	4293      	cmp	r3, r2
 8009578:	d009      	beq.n	800958e <net::dhcp_run()+0x42>
 800957a:	e9cd 3200 	strd	r3, r2, [sp]
 800957e:	4906      	ldr	r1, [pc, #24]	@ (8009598 <net::dhcp_run()+0x4c>)
 8009580:	4a06      	ldr	r2, [pc, #24]	@ (800959c <net::dhcp_run()+0x50>)
 8009582:	4807      	ldr	r0, [pc, #28]	@ (80095a0 <net::dhcp_run()+0x54>)
 8009584:	2379      	movs	r3, #121	@ 0x79
 8009586:	f011 fb4f 	bl	801ac28 <printf>
 800958a:	b006      	add	sp, #24
 800958c:	bd10      	pop	{r4, pc}
 800958e:	f00b fbaf 	bl	8014cf0 <net::dhcp_process(net::dhcp::Message const*, unsigned long)>
 8009592:	e7fa      	b.n	800958a <net::dhcp_run()+0x3e>
 8009594:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8009598:	0801b304 	stmdaeq	r1, {r2, r8, r9, ip, sp, pc}
 800959c:	0801b2e2 	stmdaeq	r1, {r1, r5, r6, r7, r9, ip, sp, pc}
 80095a0:	0801b30d 	stmdaeq	r1, {r0, r2, r3, r8, r9, ip, sp, pc}

080095a4 <Display::Printf(unsigned long, char const*, ...)>:
 80095a4:	b40c      	push	{r2, r3}
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	6984      	ldr	r4, [r0, #24]
 80095aa:	b08a      	sub	sp, #40	@ 0x28
 80095ac:	4605      	mov	r5, r0
 80095ae:	460e      	mov	r6, r1
 80095b0:	b174      	cbz	r4, 80095d0 <Display::Printf(unsigned long, char const*, ...)+0x2c>
 80095b2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80095b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	2120      	movs	r1, #32
 80095ba:	a802      	add	r0, sp, #8
 80095bc:	f011 fb74 	bl	801aca8 <vsnprintf>
 80095c0:	4604      	mov	r4, r0
 80095c2:	69a8      	ldr	r0, [r5, #24]
 80095c4:	6803      	ldr	r3, [r0, #0]
 80095c6:	aa02      	add	r2, sp, #8
 80095c8:	69dd      	ldr	r5, [r3, #28]
 80095ca:	4631      	mov	r1, r6
 80095cc:	4623      	mov	r3, r4
 80095ce:	47a8      	blx	r5
 80095d0:	4620      	mov	r0, r4
 80095d2:	b00a      	add	sp, #40	@ 0x28
 80095d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095d8:	b002      	add	sp, #8
 80095da:	4770      	bx	lr

080095dc <Display::TextStatus(char const*)>:
 80095dc:	6983      	ldr	r3, [r0, #24]
 80095de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e2:	4604      	mov	r4, r0
 80095e4:	460d      	mov	r5, r1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d038      	beq.n	800965c <Display::TextStatus(char const*)+0x80>
 80095ea:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
 80095ee:	b92e      	cbnz	r6, 80095fc <Display::TextStatus(char const*)+0x20>
 80095f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009660 <Display::TextStatus(char const*)+0x84>)
 80095f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009664 <Display::TextStatus(char const*)+0x88>)
 80095f4:	481c      	ldr	r0, [pc, #112]	@ (8009668 <Display::TextStatus(char const*)+0x8c>)
 80095f6:	21ae      	movs	r1, #174	@ 0xae
 80095f8:	f011 fbf6 	bl	801ade8 <__assert_func>
 80095fc:	b92f      	cbnz	r7, 800960a <Display::TextStatus(char const*)+0x2e>
 80095fe:	4b1b      	ldr	r3, [pc, #108]	@ (800966c <Display::TextStatus(char const*)+0x90>)
 8009600:	4a18      	ldr	r2, [pc, #96]	@ (8009664 <Display::TextStatus(char const*)+0x88>)
 8009602:	4819      	ldr	r0, [pc, #100]	@ (8009668 <Display::TextStatus(char const*)+0x8c>)
 8009604:	21af      	movs	r1, #175	@ 0xaf
 8009606:	f011 fbef 	bl	801ade8 <__assert_func>
 800960a:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 800960e:	69a0      	ldr	r0, [r4, #24]
 8009610:	464a      	mov	r2, r9
 8009612:	2100      	movs	r1, #0
 8009614:	f7ff ff82 	bl	800951c <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009618:	f04f 0800 	mov.w	r8, #0
 800961c:	3e01      	subs	r6, #1
 800961e:	4546      	cmp	r6, r8
 8009620:	69a0      	ldr	r0, [r4, #24]
 8009622:	d815      	bhi.n	8009650 <Display::TextStatus(char const*)+0x74>
 8009624:	464a      	mov	r2, r9
 8009626:	2100      	movs	r1, #0
 8009628:	f7ff ff78 	bl	800951c <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 800962c:	69a0      	ldr	r0, [r4, #24]
 800962e:	b1a8      	cbz	r0, 800965c <Display::TextStatus(char const*)+0x80>
 8009630:	6841      	ldr	r1, [r0, #4]
 8009632:	2300      	movs	r3, #0
 8009634:	5cea      	ldrb	r2, [r5, r3]
 8009636:	b11a      	cbz	r2, 8009640 <Display::TextStatus(char const*)+0x64>
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	4299      	cmp	r1, r3
 800963c:	4613      	mov	r3, r2
 800963e:	d8f9      	bhi.n	8009634 <Display::TextStatus(char const*)+0x58>
 8009640:	6802      	ldr	r2, [r0, #0]
 8009642:	69d4      	ldr	r4, [r2, #28]
 8009644:	4639      	mov	r1, r7
 8009646:	462a      	mov	r2, r5
 8009648:	46a4      	mov	ip, r4
 800964a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800964e:	4760      	bx	ip
 8009650:	2120      	movs	r1, #32
 8009652:	f7ff ff68 	bl	8009526 <Display::PutChar(int) [clone .isra.0]>
 8009656:	f108 0801 	add.w	r8, r8, #1
 800965a:	e7e0      	b.n	800961e <Display::TextStatus(char const*)+0x42>
 800965c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009660:	0801b343 	stmdaeq	r1, {r0, r1, r6, r8, r9, ip, sp, pc}
 8009664:	0801b351 	stmdaeq	r1, {r0, r4, r6, r8, r9, ip, sp, pc}
 8009668:	0801b35c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, ip, sp, pc}
 800966c:	0801b381 	stmdaeq	r1, {r0, r7, r8, r9, ip, sp, pc}

08009670 <Display::TextStatus(char const*, unsigned long)>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4614      	mov	r4, r2
 8009674:	460d      	mov	r5, r1
 8009676:	f7ff ffb1 	bl	80095dc <Display::TextStatus(char const*)>
 800967a:	1c63      	adds	r3, r4, #1
 800967c:	d005      	beq.n	800968a <Display::TextStatus(char const*, unsigned long)+0x1a>
 800967e:	4629      	mov	r1, r5
 8009680:	4620      	mov	r0, r4
 8009682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009686:	f00e bffb 	b.w	8018680 <console_status>
 800968a:	bd38      	pop	{r3, r4, r5, pc}

0800968c <Display::SetSleep(bool)>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4604      	mov	r4, r0
 8009690:	6980      	ldr	r0, [r0, #24]
 8009692:	460d      	mov	r5, r1
 8009694:	b138      	cbz	r0, 80096a6 <Display::SetSleep(bool)+0x1a>
 8009696:	6803      	ldr	r3, [r0, #0]
 8009698:	7561      	strb	r1, [r4, #21]
 800969a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969c:	4798      	blx	r3
 800969e:	b915      	cbnz	r5, 80096a6 <Display::SetSleep(bool)+0x1a>
 80096a0:	4b01      	ldr	r3, [pc, #4]	@ (80096a8 <Display::SetSleep(bool)+0x1c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6063      	str	r3, [r4, #4]
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	2001a628 	andcs	sl, r1, r8, lsr #12

080096ac <E131Bridge::Run()>:
 80096ac:	b513      	push	{r0, r1, r4, lr}
 80096ae:	f600 32b8 	addw	r2, r0, #3000	@ 0xbb8
 80096b2:	4604      	mov	r4, r0
 80096b4:	f10d 0306 	add.w	r3, sp, #6
 80096b8:	f600 31b4 	addw	r1, r0, #2996	@ 0xbb4
 80096bc:	6800      	ldr	r0, [r0, #0]
 80096be:	f00c f88d 	bl	80157dc <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 80096c2:	4b20      	ldr	r3, [pc, #128]	@ (8009744 <E131Bridge::Run()+0x98>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	bb90      	cbnz	r0, 8009730 <E131Bridge::Run()+0x84>
 80096ca:	7fe2      	ldrb	r2, [r4, #31]
 80096cc:	b172      	cbz	r2, 80096ec <E131Bridge::Run()+0x40>
 80096ce:	68a2      	ldr	r2, [r4, #8]
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d921      	bls.n	800971e <E131Bridge::Run()+0x72>
 80096da:	f8d4 3bbc 	ldr.w	r3, [r4, #3004]	@ 0xbbc
 80096de:	b9ab      	cbnz	r3, 800970c <E131Bridge::Run()+0x60>
 80096e0:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80096e4:	f023 0302 	bic.w	r3, r3, #2
 80096e8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 80096ec:	f894 3bb0 	ldrb.w	r3, [r4, #2992]	@ 0xbb0
 80096f0:	b153      	cbz	r3, 8009708 <E131Bridge::Run()+0x5c>
 80096f2:	4b15      	ldr	r3, [pc, #84]	@ (8009748 <E131Bridge::Run()+0x9c>)
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	6943      	ldr	r3, [r0, #20]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d005      	beq.n	8009708 <E131Bridge::Run()+0x5c>
 80096fc:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8009700:	b1a3      	cbz	r3, 800972c <E131Bridge::Run()+0x80>
 8009702:	2103      	movs	r1, #3
 8009704:	f00e fd3a 	bl	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 8009708:	b002      	add	sp, #8
 800970a:	bd10      	pop	{r4, pc}
 800970c:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e5      	bne.n	80096e0 <E131Bridge::Run()+0x34>
 8009714:	2201      	movs	r2, #1
 8009716:	4611      	mov	r1, r2
 8009718:	4620      	mov	r0, r4
 800971a:	f004 fd0b 	bl	800e134 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800971e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8009722:	1a9b      	subs	r3, r3, r2
 8009724:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009728:	d3e0      	bcc.n	80096ec <E131Bridge::Run()+0x40>
 800972a:	e7d9      	b.n	80096e0 <E131Bridge::Run()+0x34>
 800972c:	2102      	movs	r1, #2
 800972e:	e7e9      	b.n	8009704 <E131Bridge::Run()+0x58>
 8009730:	4620      	mov	r0, r4
 8009732:	f005 f8bf 	bl	800e8b4 <E131Bridge::IsValidRoot()>
 8009736:	2800      	cmp	r0, #0
 8009738:	d0e6      	beq.n	8009708 <E131Bridge::Run()+0x5c>
 800973a:	4620      	mov	r0, r4
 800973c:	f005 f8e2 	bl	800e904 <E131Bridge::Process()>
 8009740:	e7e2      	b.n	8009708 <E131Bridge::Run()+0x5c>
 8009742:	bf00      	nop
 8009744:	2001a628 	andcs	sl, r1, r8, lsr #12
 8009748:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800974c <hardware::ledblink::display(unsigned long)>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d0d      	ldr	r5, [pc, #52]	@ (8009784 <hardware::ledblink::display(unsigned long)+0x38>)
 8009750:	682a      	ldr	r2, [r5, #0]
 8009752:	4603      	mov	r3, r0
 8009754:	6990      	ldr	r0, [r2, #24]
 8009756:	b1a0      	cbz	r0, 8009782 <hardware::ledblink::display(unsigned long)+0x36>
 8009758:	2b05      	cmp	r3, #5
 800975a:	bf9c      	itt	ls
 800975c:	4a0a      	ldrls	r2, [pc, #40]	@ (8009788 <hardware::ledblink::display(unsigned long)+0x3c>)
 800975e:	5cd4      	ldrbls	r4, [r2, r3]
 8009760:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009764:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8009768:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 800976c:	bf88      	it	hi
 800976e:	2455      	movhi	r4, #85	@ 0x55
 8009770:	f7ff fed4 	bl	800951c <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	4621      	mov	r1, r4
 8009778:	6998      	ldr	r0, [r3, #24]
 800977a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800977e:	f7ff bed2 	b.w	8009526 <Display::PutChar(int) [clone .isra.0]>
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	2000cc4c 	andcs	ip, r0, ip, asr #24
 8009788:	0801c56d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl, lr, pc}

0800978c <pixel::pixel_convert_TxH(unsigned char)>:
 800978c:	28f0      	cmp	r0, #240	@ 0xf0
 800978e:	d017      	beq.n	80097c0 <pixel::pixel_convert_TxH(unsigned char)+0x34>
 8009790:	d80c      	bhi.n	80097ac <pixel::pixel_convert_TxH(unsigned char)+0x20>
 8009792:	28c0      	cmp	r0, #192	@ 0xc0
 8009794:	d017      	beq.n	80097c6 <pixel::pixel_convert_TxH(unsigned char)+0x3a>
 8009796:	28e0      	cmp	r0, #224	@ 0xe0
 8009798:	d018      	beq.n	80097cc <pixel::pixel_convert_TxH(unsigned char)+0x40>
 800979a:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80097e0 <pixel::pixel_convert_TxH(unsigned char)+0x54>
 800979e:	2880      	cmp	r0, #128	@ 0x80
 80097a0:	eef4 7a04 	vmov.f32	s15, #68	@ 0x3e200000  0.1562500
 80097a4:	bf08      	it	eq
 80097a6:	eeb0 0a67 	vmoveq.f32	s0, s15
 80097aa:	4770      	bx	lr
 80097ac:	28fc      	cmp	r0, #252	@ 0xfc
 80097ae:	d010      	beq.n	80097d2 <pixel::pixel_convert_TxH(unsigned char)+0x46>
 80097b0:	28fe      	cmp	r0, #254	@ 0xfe
 80097b2:	d011      	beq.n	80097d8 <pixel::pixel_convert_TxH(unsigned char)+0x4c>
 80097b4:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80097e0 <pixel::pixel_convert_TxH(unsigned char)+0x54>
 80097b8:	28f8      	cmp	r0, #248	@ 0xf8
 80097ba:	eef6 7a09 	vmov.f32	s15, #105	@ 0x3f480000  0.7812500
 80097be:	e7f1      	b.n	80097a4 <pixel::pixel_convert_TxH(unsigned char)+0x18>
 80097c0:	eeb6 0a04 	vmov.f32	s0, #100	@ 0x3f200000  0.625
 80097c4:	4770      	bx	lr
 80097c6:	eeb5 0a04 	vmov.f32	s0, #84	@ 0x3ea00000  0.3125000
 80097ca:	4770      	bx	lr
 80097cc:	eeb5 0a0e 	vmov.f32	s0, #94	@ 0x3ef00000  0.4687500
 80097d0:	4770      	bx	lr
 80097d2:	eeb6 0a0e 	vmov.f32	s0, #110	@ 0x3f700000  0.9375000
 80097d6:	4770      	bx	lr
 80097d8:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80097e4 <pixel::pixel_convert_TxH(unsigned char)+0x58>
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	00000000 	andeq	r0, r0, r0
 80097e4:	3f8c0000 	svccc	0x008c0000

080097e8 <PixelConfiguration::Print()>:
 80097e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	4824      	ldr	r0, [pc, #144]	@ (8009880 <PixelConfiguration::Print()+0x98>)
 80097ee:	f011 fa70 	bl	801acd2 <puts>
 80097f2:	68e0      	ldr	r0, [r4, #12]
 80097f4:	f007 fffa 	bl	80117ec <pixel::pixel_get_type(pixel::Type)>
 80097f8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80097fc:	4601      	mov	r1, r0
 80097fe:	4821      	ldr	r0, [pc, #132]	@ (8009884 <PixelConfiguration::Print()+0x9c>)
 8009800:	f011 fa12 	bl	801ac28 <printf>
 8009804:	6821      	ldr	r1, [r4, #0]
 8009806:	4820      	ldr	r0, [pc, #128]	@ (8009888 <PixelConfiguration::Print()+0xa0>)
 8009808:	f011 fa0e 	bl	801ac28 <printf>
 800980c:	7d23      	ldrb	r3, [r4, #20]
 800980e:	b373      	cbz	r3, 800986e <PixelConfiguration::Print()+0x86>
 8009810:	6920      	ldr	r0, [r4, #16]
 8009812:	f008 f85d 	bl	80118d0 <pixel::pixel_get_map(pixel::Map)>
 8009816:	6922      	ldr	r2, [r4, #16]
 8009818:	4601      	mov	r1, r0
 800981a:	481c      	ldr	r0, [pc, #112]	@ (800988c <PixelConfiguration::Print()+0xa4>)
 800981c:	f011 fa04 	bl	801ac28 <printf>
 8009820:	7d65      	ldrb	r5, [r4, #21]
 8009822:	4628      	mov	r0, r5
 8009824:	f7ff ffb2 	bl	800978c <pixel::pixel_convert_TxH(unsigned char)>
 8009828:	ee10 0a10 	vmov	r0, s0
 800982c:	f7ff fd06 	bl	800923c <__aeabi_f2d>
 8009830:	9500      	str	r5, [sp, #0]
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4816      	ldr	r0, [pc, #88]	@ (8009890 <PixelConfiguration::Print()+0xa8>)
 8009838:	f011 f9f6 	bl	801ac28 <printf>
 800983c:	7da5      	ldrb	r5, [r4, #22]
 800983e:	4628      	mov	r0, r5
 8009840:	f7ff ffa4 	bl	800978c <pixel::pixel_convert_TxH(unsigned char)>
 8009844:	ee10 0a10 	vmov	r0, s0
 8009848:	f7ff fcf8 	bl	800923c <__aeabi_f2d>
 800984c:	9500      	str	r5, [sp, #0]
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4810      	ldr	r0, [pc, #64]	@ (8009894 <PixelConfiguration::Print()+0xac>)
 8009854:	f011 f9e8 	bl	801ac28 <printf>
 8009858:	6861      	ldr	r1, [r4, #4]
 800985a:	480f      	ldr	r0, [pc, #60]	@ (8009898 <PixelConfiguration::Print()+0xb0>)
 800985c:	f011 f9e4 	bl	801ac28 <printf>
 8009860:	69a1      	ldr	r1, [r4, #24]
 8009862:	480e      	ldr	r0, [pc, #56]	@ (800989c <PixelConfiguration::Print()+0xb4>)
 8009864:	b003      	add	sp, #12
 8009866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800986a:	f011 b9dd 	b.w	801ac28 <printf>
 800986e:	68e3      	ldr	r3, [r4, #12]
 8009870:	3b0b      	subs	r3, #11
 8009872:	2b01      	cmp	r3, #1
 8009874:	d8f0      	bhi.n	8009858 <PixelConfiguration::Print()+0x70>
 8009876:	7de1      	ldrb	r1, [r4, #23]
 8009878:	4809      	ldr	r0, [pc, #36]	@ (80098a0 <PixelConfiguration::Print()+0xb8>)
 800987a:	f011 f9d5 	bl	801ac28 <printf>
 800987e:	e7eb      	b.n	8009858 <PixelConfiguration::Print()+0x70>
 8009880:	0801b38c 	stmdaeq	r1, {r2, r3, r7, r8, r9, ip, sp, pc}
 8009884:	0801b3a0 	stmdaeq	r1, {r5, r7, r8, r9, ip, sp, pc}
 8009888:	0801b3c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, ip, sp, pc}
 800988c:	0801b3d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, ip, sp, pc}
 8009890:	0801b3e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, ip, sp, pc}
 8009894:	0801b3ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp, pc}
 8009898:	0801b42e 	stmdaeq	r1, {r1, r2, r3, r5, sl, ip, sp, pc}
 800989c:	0801b440 	stmdaeq	r1, {r6, sl, ip, sp, pc}
 80098a0:	0801b417 	stmdaeq	r1, {r0, r1, r2, r4, sl, ip, sp, pc}

080098a4 <PixelConfiguration::Get()>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4c06      	ldr	r4, [pc, #24]	@ (80098c0 <PixelConfiguration::Get()+0x1c>)
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	b933      	cbnz	r3, 80098ba <PixelConfiguration::Get()+0x16>
 80098ac:	4b05      	ldr	r3, [pc, #20]	@ (80098c4 <PixelConfiguration::Get()+0x20>)
 80098ae:	4a06      	ldr	r2, [pc, #24]	@ (80098c8 <PixelConfiguration::Get()+0x24>)
 80098b0:	4806      	ldr	r0, [pc, #24]	@ (80098cc <PixelConfiguration::Get()+0x28>)
 80098b2:	f240 110d 	movw	r1, #269	@ 0x10d
 80098b6:	f011 fa97 	bl	801ade8 <__assert_func>
 80098ba:	6820      	ldr	r0, [r4, #0]
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	2000007c 	andcs	r0, r0, ip, ror r0
 80098c4:	0801b452 	stmdaeq	r1, {r1, r4, r6, sl, ip, sp, pc}
 80098c8:	0801b465 	stmdaeq	r1, {r0, r2, r5, r6, sl, ip, sp, pc}
 80098cc:	0801b469 	stmdaeq	r1, {r0, r3, r5, r6, sl, ip, sp, pc}

080098d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 80098d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d4:	2905      	cmp	r1, #5
 80098d6:	b085      	sub	sp, #20
 80098d8:	4606      	mov	r6, r0
 80098da:	4689      	mov	r9, r1
 80098dc:	f300 8099 	bgt.w	8009a12 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x142>
 80098e0:	2500      	movs	r5, #0
 80098e2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8009a28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x158>
 80098e6:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8009a2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x15c>
 80098ea:	6001      	str	r1, [r0, #0]
 80098ec:	46ab      	mov	fp, r5
 80098ee:	462c      	mov	r4, r5
 80098f0:	f1b9 0f05 	cmp.w	r9, #5
 80098f4:	f200 8086 	bhi.w	8009a04 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x134>
 80098f8:	e8df f009 	tbb	[pc, r9]
 80098fc:	1c120338 	ldcne	3, cr0, [r2], {56}	@ 0x38
 8009900:	23002c24 	movwcs	r2, #3108	@ 0xc24
 8009904:	2264      	movs	r2, #100	@ 0x64
 8009906:	4629      	mov	r1, r5
 8009908:	4630      	mov	r0, r6
 800990a:	f008 f8f3 	bl	8011af4 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>
 800990e:	3501      	adds	r5, #1
 8009910:	2d08      	cmp	r5, #8
 8009912:	f10a 0a20 	add.w	sl, sl, #32
 8009916:	d1eb      	bne.n	80098f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x20>
 8009918:	2001      	movs	r0, #1
 800991a:	b005      	add	sp, #20
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	2364      	movs	r3, #100	@ 0x64
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	9401      	str	r4, [sp, #4]
 8009926:	4b3c      	ldr	r3, [pc, #240]	@ (8009a18 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x148>)
 8009928:	2200      	movs	r2, #0
 800992a:	4629      	mov	r1, r5
 800992c:	4630      	mov	r0, r6
 800992e:	f008 f8f7 	bl	8011b20 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009932:	e7ec      	b.n	800990e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009934:	4a38      	ldr	r2, [pc, #224]	@ (8009a18 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x148>)
 8009936:	9400      	str	r4, [sp, #0]
 8009938:	2364      	movs	r3, #100	@ 0x64
 800993a:	4629      	mov	r1, r5
 800993c:	4630      	mov	r0, r6
 800993e:	f008 f90b 	bl	8011b58 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009942:	e7e4      	b.n	800990e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009944:	2364      	movs	r3, #100	@ 0x64
 8009946:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800994a:	4629      	mov	r1, r5
 800994c:	4630      	mov	r0, r6
 800994e:	f008 f91d 	bl	8011b8c <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>
 8009952:	e7dc      	b.n	800990e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009954:	230a      	movs	r3, #10
 8009956:	2264      	movs	r2, #100	@ 0x64
 8009958:	e9cd 3200 	strd	r3, r2, [sp]
 800995c:	9402      	str	r4, [sp, #8]
 800995e:	4b2e      	ldr	r3, [pc, #184]	@ (8009a18 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x148>)
 8009960:	2200      	movs	r2, #0
 8009962:	4629      	mov	r1, r5
 8009964:	4630      	mov	r0, r6
 8009966:	f008 f941 	bl	8011bec <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 800996a:	e7d0      	b.n	800990e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 800996c:	f8ca b01c 	str.w	fp, [sl, #28]
 8009970:	2700      	movs	r7, #0
 8009972:	f7ff ff97 	bl	80098a4 <PixelConfiguration::Get()>
 8009976:	6803      	ldr	r3, [r0, #0]
 8009978:	429f      	cmp	r7, r3
 800997a:	d30a      	bcc.n	8009992 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc2>
 800997c:	f8d8 0000 	ldr.w	r0, [r8]
 8009980:	f008 fd2e 	bl	80123e0 <WS28xxMulti::IsUpdating()>
 8009984:	2800      	cmp	r0, #0
 8009986:	d1f9      	bne.n	800997c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>
 8009988:	f8d8 0000 	ldr.w	r0, [r8]
 800998c:	f008 fc36 	bl	80121fc <WS28xxMulti::Update()>
 8009990:	e7bd      	b.n	800990e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009992:	f7ff ff87 	bl	80098a4 <PixelConfiguration::Get()>
 8009996:	68c3      	ldr	r3, [r0, #12]
 8009998:	2b0d      	cmp	r3, #13
 800999a:	d829      	bhi.n	80099f0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x120>
 800999c:	e8df f003 	tbb	[pc, r3]
 80099a0:	28282807 	stmdacs	r8!, {r0, r1, r2, fp, sp}
 80099a4:	1d282828 	stcne	8, cr2, [r8, #-160]!	@ 0xffffff60
 80099a8:	12282828 	eorne	r2, r8, #40, 16	@ 0x280000
 80099ac:	e9cd1212 	stmib	sp, {r1, r4, r9, ip}^
 80099b0:	4400      	add	r0, r0
 80099b2:	2300      	movs	r3, #0
 80099b4:	f8d8 0000 	ldr.w	r0, [r8]
 80099b8:	463a      	mov	r2, r7
 80099ba:	4629      	mov	r1, r5
 80099bc:	f008 fe26 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80099c0:	3701      	adds	r7, #1
 80099c2:	e7d6      	b.n	8009972 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa2>
 80099c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80099c8:	9400      	str	r4, [sp, #0]
 80099ca:	f8d8 0000 	ldr.w	r0, [r8]
 80099ce:	23ff      	movs	r3, #255	@ 0xff
 80099d0:	463a      	mov	r2, r7
 80099d2:	4629      	mov	r1, r5
 80099d4:	f008 ff3e 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80099d8:	e7f2      	b.n	80099c0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>
 80099da:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80099de:	9400      	str	r4, [sp, #0]
 80099e0:	f8d8 0000 	ldr.w	r0, [r8]
 80099e4:	2300      	movs	r3, #0
 80099e6:	463a      	mov	r2, r7
 80099e8:	4629      	mov	r1, r5
 80099ea:	f009 fe0f 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80099ee:	e7e7      	b.n	80099c0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>
 80099f0:	e9cd 4400 	strd	r4, r4, [sp]
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8d8 0000 	ldr.w	r0, [r8]
 80099fa:	463a      	mov	r2, r7
 80099fc:	4629      	mov	r1, r5
 80099fe:	f008 fcf7 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8009a02:	e7dd      	b.n	80099c0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>
 8009a04:	4b05      	ldr	r3, [pc, #20]	@ (8009a1c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x14c>)
 8009a06:	4a06      	ldr	r2, [pc, #24]	@ (8009a20 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x150>)
 8009a08:	4806      	ldr	r0, [pc, #24]	@ (8009a24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x154>)
 8009a0a:	214b      	movs	r1, #75	@ 0x4b
 8009a0c:	f011 f9ec 	bl	801ade8 <__assert_func>
 8009a10:	e77d      	b.n	800990e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009a12:	2000      	movs	r0, #0
 8009a14:	e781      	b.n	800991a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x4a>
 8009a16:	bf00      	nop
 8009a18:	00646464 	rsbeq	r6, r4, r4, ror #8
 8009a1c:	0801c030 	stmdaeq	r1, {r4, r5, lr, pc}
 8009a20:	0801b494 	stmdaeq	r1, {r2, r4, r7, sl, ip, sp, pc}
 8009a24:	0801b49f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, sl, ip, sp, pc}
 8009a28:	2000c810 	andcs	ip, r0, r0, lsl r8
 8009a2c:	2000c914 	andcs	ip, r0, r4, lsl r9

08009a30 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8009a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a32:	780b      	ldrb	r3, [r1, #0]
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	4605      	mov	r5, r0
 8009a38:	d122      	bne.n	8009a80 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x50>
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa8 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8009a3c:	784c      	ldrb	r4, [r1, #1]
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	6803      	ldr	r3, [r0, #0]
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d01c      	beq.n	8009a80 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x50>
 8009a46:	4621      	mov	r1, r4
 8009a48:	f7ff ff42 	bl	80098d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8009a4c:	b1c0      	cbz	r0, 8009a80 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x50>
 8009a4e:	4e17      	ldr	r6, [pc, #92]	@ (8009aac <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 8009a50:	b1c4      	cbz	r4, 8009a84 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x54>
 8009a52:	6833      	ldr	r3, [r6, #0]
 8009a54:	4d16      	ldr	r5, [pc, #88]	@ (8009ab0 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x80>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2bdc 	str.w	r2, [r3, #3036]	@ 0xbdc
 8009a5c:	f8c3 2bbc 	str.w	r2, [r3, #3004]	@ 0xbbc
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	2106      	movs	r1, #6
 8009a64:	6998      	ldr	r0, [r3, #24]
 8009a66:	f7ff fd63 	bl	8009530 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	682d      	ldr	r5, [r5, #0]
 8009a6e:	f008 f835 	bl	8011adc <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8009a72:	4a10      	ldr	r2, [pc, #64]	@ (8009ab4 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x84>)
 8009a74:	9400      	str	r4, [sp, #0]
 8009a76:	4603      	mov	r3, r0
 8009a78:	2106      	movs	r1, #6
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f7ff fd92 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8009a80:	b002      	add	sp, #8
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	6868      	ldr	r0, [r5, #4]
 8009a86:	6803      	ldr	r3, [r0, #0]
 8009a88:	2101      	movs	r1, #1
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	4798      	blx	r3
 8009a8e:	6833      	ldr	r3, [r6, #0]
 8009a90:	686a      	ldr	r2, [r5, #4]
 8009a92:	f8c3 2bdc 	str.w	r2, [r3, #3036]	@ 0xbdc
 8009a96:	f8c3 2bbc 	str.w	r2, [r3, #3004]	@ 0xbbc
 8009a9a:	4b07      	ldr	r3, [pc, #28]	@ (8009ab8 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x88>)
 8009a9c:	6818      	ldr	r0, [r3, #0]
 8009a9e:	b002      	add	sp, #8
 8009aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009aa4:	f00c bf40 	b.w	8016928 <DisplayUdf::Show()>
 8009aa8:	2000c918 	andcs	ip, r0, r8, lsl r9
 8009aac:	2000064c 	andcs	r0, r0, ip, asr #12
 8009ab0:	2000cc4c 	andcs	ip, r0, ip, asr #24
 8009ab4:	0801b4c8 	stmdaeq	r1, {r3, r6, r7, sl, ip, sp, pc}
 8009ab8:	2000cc30 	andcs	ip, r0, r0, lsr ip

08009abc <PixelDmxConfiguration::PixelDmxConfiguration()>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	2203      	movs	r2, #3
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	e9c4 2202 	strd	r2, r2, [r4, #8]
 8009ac6:	4a20      	ldr	r2, [pc, #128]	@ (8009b48 <PixelDmxConfiguration::PixelDmxConfiguration()+0x8c>)
 8009ac8:	4920      	ldr	r1, [pc, #128]	@ (8009b4c <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009aca:	2506      	movs	r5, #6
 8009acc:	e9c4 5204 	strd	r5, r2, [r4, #16]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	20aa      	movs	r0, #170	@ 0xaa
 8009ad4:	4d1e      	ldr	r5, [pc, #120]	@ (8009b50 <PixelDmxConfiguration::PixelDmxConfiguration()+0x94>)
 8009ad6:	61a3      	str	r3, [r4, #24]
 8009ad8:	e9c4 0300 	strd	r0, r3, [r4]
 8009adc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b54 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009ade:	481e      	ldr	r0, [pc, #120]	@ (8009b58 <PixelDmxConfiguration::PixelDmxConfiguration()+0x9c>)
 8009ae0:	2332      	movs	r3, #50	@ 0x32
 8009ae2:	f011 f8a1 	bl	801ac28 <printf>
 8009ae6:	682b      	ldr	r3, [r5, #0]
 8009ae8:	b12b      	cbz	r3, 8009af6 <PixelDmxConfiguration::PixelDmxConfiguration()+0x3a>
 8009aea:	4b1c      	ldr	r3, [pc, #112]	@ (8009b5c <PixelDmxConfiguration::PixelDmxConfiguration()+0xa0>)
 8009aec:	4a19      	ldr	r2, [pc, #100]	@ (8009b54 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009aee:	4817      	ldr	r0, [pc, #92]	@ (8009b4c <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009af0:	2134      	movs	r1, #52	@ 0x34
 8009af2:	f011 f979 	bl	801ade8 <__assert_func>
 8009af6:	4a17      	ldr	r2, [pc, #92]	@ (8009b54 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009af8:	4914      	ldr	r1, [pc, #80]	@ (8009b4c <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009afa:	4819      	ldr	r0, [pc, #100]	@ (8009b60 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa4>)
 8009afc:	602c      	str	r4, [r5, #0]
 8009afe:	2337      	movs	r3, #55	@ 0x37
 8009b00:	f011 f892 	bl	801ac28 <printf>
 8009b04:	4d17      	ldr	r5, [pc, #92]	@ (8009b64 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa8>)
 8009b06:	4814      	ldr	r0, [pc, #80]	@ (8009b58 <PixelDmxConfiguration::PixelDmxConfiguration()+0x9c>)
 8009b08:	2301      	movs	r3, #1
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	21aa      	movs	r1, #170	@ 0xaa
 8009b0e:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
 8009b12:	e9c4 320b 	strd	r3, r2, [r4, #44]	@ 0x2c
 8009b16:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009b1a:	4a13      	ldr	r2, [pc, #76]	@ (8009b68 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009b1c:	4913      	ldr	r1, [pc, #76]	@ (8009b6c <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009b1e:	2336      	movs	r3, #54	@ 0x36
 8009b20:	f011 f882 	bl	801ac28 <printf>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b12b      	cbz	r3, 8009b34 <PixelDmxConfiguration::PixelDmxConfiguration()+0x78>
 8009b28:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <PixelDmxConfiguration::PixelDmxConfiguration()+0xa0>)
 8009b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b68 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009b2c:	480f      	ldr	r0, [pc, #60]	@ (8009b6c <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009b2e:	2138      	movs	r1, #56	@ 0x38
 8009b30:	f011 f95a 	bl	801ade8 <__assert_func>
 8009b34:	4a0c      	ldr	r2, [pc, #48]	@ (8009b68 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009b36:	490d      	ldr	r1, [pc, #52]	@ (8009b6c <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009b38:	4809      	ldr	r0, [pc, #36]	@ (8009b60 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa4>)
 8009b3a:	602c      	str	r4, [r5, #0]
 8009b3c:	233b      	movs	r3, #59	@ 0x3b
 8009b3e:	f011 f873 	bl	801ac28 <printf>
 8009b42:	4620      	mov	r0, r4
 8009b44:	bd38      	pop	{r3, r4, r5, pc}
 8009b46:	bf00      	nop
 8009b48:	ff000001 			@ <UNDEFINED> instruction: 0xff000001
 8009b4c:	0801b469 	stmdaeq	r1, {r0, r3, r5, r6, sl, ip, sp, pc}
 8009b50:	2000007c 	andcs	r0, r0, ip, ror r0
 8009b54:	0801b4ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, ip, sp, pc}
 8009b58:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 8009b5c:	0801b4ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, ip, sp, pc}
 8009b60:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}
 8009b64:	20000078 	andcs	r0, r0, r8, ror r0
 8009b68:	0801b510 	stmdaeq	r1, {r4, r8, sl, ip, sp, pc}
 8009b6c:	0801b526 	stmdaeq	r1, {r1, r2, r5, r8, sl, ip, sp, pc}

08009b70 <WS28xxDmxMulti::Print()>:
 8009b70:	b513      	push	{r0, r1, r4, lr}
 8009b72:	4c16      	ldr	r4, [pc, #88]	@ (8009bcc <WS28xxDmxMulti::Print()+0x5c>)
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	b92b      	cbnz	r3, 8009b84 <WS28xxDmxMulti::Print()+0x14>
 8009b78:	4b15      	ldr	r3, [pc, #84]	@ (8009bd0 <WS28xxDmxMulti::Print()+0x60>)
 8009b7a:	4a16      	ldr	r2, [pc, #88]	@ (8009bd4 <WS28xxDmxMulti::Print()+0x64>)
 8009b7c:	4816      	ldr	r0, [pc, #88]	@ (8009bd8 <WS28xxDmxMulti::Print()+0x68>)
 8009b7e:	21a4      	movs	r1, #164	@ 0xa4
 8009b80:	f011 f932 	bl	801ade8 <__assert_func>
 8009b84:	6824      	ldr	r4, [r4, #0]
 8009b86:	4620      	mov	r0, r4
 8009b88:	f7ff fe2e 	bl	80097e8 <PixelConfiguration::Print()>
 8009b8c:	4813      	ldr	r0, [pc, #76]	@ (8009bdc <WS28xxDmxMulti::Print()+0x6c>)
 8009b8e:	f011 f8a0 	bl	801acd2 <puts>
 8009b92:	69e1      	ldr	r1, [r4, #28]
 8009b94:	4812      	ldr	r0, [pc, #72]	@ (8009be0 <WS28xxDmxMulti::Print()+0x70>)
 8009b96:	f011 f847 	bl	801ac28 <printf>
 8009b9a:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8009b9e:	4811      	ldr	r0, [pc, #68]	@ (8009be4 <WS28xxDmxMulti::Print()+0x74>)
 8009ba0:	f011 f842 	bl	801ac28 <printf>
 8009ba4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009ba6:	4810      	ldr	r0, [pc, #64]	@ (8009be8 <WS28xxDmxMulti::Print()+0x78>)
 8009ba8:	f011 f83e 	bl	801ac28 <printf>
 8009bac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009bae:	480f      	ldr	r0, [pc, #60]	@ (8009bec <WS28xxDmxMulti::Print()+0x7c>)
 8009bb0:	f011 f83a 	bl	801ac28 <printf>
 8009bb4:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 8009bb6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8009bb8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8009bba:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8009bbc:	9001      	str	r0, [sp, #4]
 8009bbe:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
 8009bc0:	9000      	str	r0, [sp, #0]
 8009bc2:	480b      	ldr	r0, [pc, #44]	@ (8009bf0 <WS28xxDmxMulti::Print()+0x80>)
 8009bc4:	f011 f830 	bl	801ac28 <printf>
 8009bc8:	b002      	add	sp, #8
 8009bca:	bd10      	pop	{r4, pc}
 8009bcc:	20000078 	andcs	r0, r0, r8, ror r0
 8009bd0:	0801b452 	stmdaeq	r1, {r1, r4, r6, sl, ip, sp, pc}
 8009bd4:	0801b465 	stmdaeq	r1, {r0, r2, r5, r6, sl, ip, sp, pc}
 8009bd8:	0801b526 	stmdaeq	r1, {r1, r2, r5, r8, sl, ip, sp, pc}
 8009bdc:	0801b557 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, sl, ip, sp, pc}
 8009be0:	0801b56f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, pc}
 8009be4:	0801b585 	stmdaeq	r1, {r0, r2, r7, r8, sl, ip, sp, pc}
 8009be8:	0801b5a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, ip, sp, pc}
 8009bec:	0801b5bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, sl, ip, sp, pc}
 8009bf0:	0801b5d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl, ip, sp, pc}

08009bf4 <RDMSubDevices::~RDMSubDevices()>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	4a12      	ldr	r2, [pc, #72]	@ (8009c40 <RDMSubDevices::~RDMSubDevices()+0x4c>)
 8009bf8:	4912      	ldr	r1, [pc, #72]	@ (8009c44 <RDMSubDevices::~RDMSubDevices()+0x50>)
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	2348      	movs	r3, #72	@ 0x48
 8009bfe:	4812      	ldr	r0, [pc, #72]	@ (8009c48 <RDMSubDevices::~RDMSubDevices()+0x54>)
 8009c00:	f011 f812 	bl	801ac28 <printf>
 8009c04:	2500      	movs	r5, #0
 8009c06:	462e      	mov	r6, r5
 8009c08:	88a3      	ldrh	r3, [r4, #4]
 8009c0a:	6820      	ldr	r0, [r4, #0]
 8009c0c:	42ab      	cmp	r3, r5
 8009c0e:	d80c      	bhi.n	8009c2a <RDMSubDevices::~RDMSubDevices()+0x36>
 8009c10:	b108      	cbz	r0, 8009c16 <RDMSubDevices::~RDMSubDevices()+0x22>
 8009c12:	f011 fa5b 	bl	801b0cc <operator delete[](void*)>
 8009c16:	2300      	movs	r3, #0
 8009c18:	80a3      	strh	r3, [r4, #4]
 8009c1a:	4a09      	ldr	r2, [pc, #36]	@ (8009c40 <RDMSubDevices::~RDMSubDevices()+0x4c>)
 8009c1c:	4909      	ldr	r1, [pc, #36]	@ (8009c44 <RDMSubDevices::~RDMSubDevices()+0x50>)
 8009c1e:	480b      	ldr	r0, [pc, #44]	@ (8009c4c <RDMSubDevices::~RDMSubDevices()+0x58>)
 8009c20:	2351      	movs	r3, #81	@ 0x51
 8009c22:	f011 f801 	bl	801ac28 <printf>
 8009c26:	4620      	mov	r0, r4
 8009c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8009c2e:	00af      	lsls	r7, r5, #2
 8009c30:	b110      	cbz	r0, 8009c38 <RDMSubDevices::~RDMSubDevices()+0x44>
 8009c32:	6803      	ldr	r3, [r0, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	4798      	blx	r3
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	3501      	adds	r5, #1
 8009c3c:	51de      	str	r6, [r3, r7]
 8009c3e:	e7e3      	b.n	8009c08 <RDMSubDevices::~RDMSubDevices()+0x14>
 8009c40:	0801b5e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, ip, sp, pc}
 8009c44:	0801b5f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, sl, ip, sp, pc}
 8009c48:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 8009c4c:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}

08009c50 <LLRPDevice::LLRPDevice()>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	2100      	movs	r1, #0
 8009c54:	4605      	mov	r5, r0
 8009c56:	f005 f9ea 	bl	800f02e <RDMHandler::RDMHandler(bool)>
 8009c5a:	2335      	movs	r3, #53	@ 0x35
 8009c5c:	4a13      	ldr	r2, [pc, #76]	@ (8009cac <LLRPDevice::LLRPDevice()+0x5c>)
 8009c5e:	4914      	ldr	r1, [pc, #80]	@ (8009cb0 <LLRPDevice::LLRPDevice()+0x60>)
 8009c60:	4814      	ldr	r0, [pc, #80]	@ (8009cb4 <LLRPDevice::LLRPDevice()+0x64>)
 8009c62:	4e15      	ldr	r6, [pc, #84]	@ (8009cb8 <LLRPDevice::LLRPDevice()+0x68>)
 8009c64:	f010 ffe0 	bl	801ac28 <printf>
 8009c68:	f241 50c1 	movw	r0, #5569	@ 0x15c1
 8009c6c:	f00b fd7c 	bl	8015768 <net::udp_begin(unsigned short)>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	4604      	mov	r4, r0
 8009c74:	d00b      	beq.n	8009c8e <LLRPDevice::LLRPDevice()+0x3e>
 8009c76:	6030      	str	r0, [r6, #0]
 8009c78:	4810      	ldr	r0, [pc, #64]	@ (8009cbc <LLRPDevice::LLRPDevice()+0x6c>)
 8009c7a:	f00b f95d 	bl	8014f38 <net::igmp_join(unsigned long)>
 8009c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8009cac <LLRPDevice::LLRPDevice()+0x5c>)
 8009c80:	490b      	ldr	r1, [pc, #44]	@ (8009cb0 <LLRPDevice::LLRPDevice()+0x60>)
 8009c82:	480f      	ldr	r0, [pc, #60]	@ (8009cc0 <LLRPDevice::LLRPDevice()+0x70>)
 8009c84:	233b      	movs	r3, #59	@ 0x3b
 8009c86:	f010 ffcf 	bl	801ac28 <printf>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
 8009c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cc4 <LLRPDevice::LLRPDevice()+0x74>)
 8009c90:	4a0d      	ldr	r2, [pc, #52]	@ (8009cc8 <LLRPDevice::LLRPDevice()+0x78>)
 8009c92:	480e      	ldr	r0, [pc, #56]	@ (8009ccc <LLRPDevice::LLRPDevice()+0x7c>)
 8009c94:	21b9      	movs	r1, #185	@ 0xb9
 8009c96:	f011 f8a7 	bl	801ade8 <__assert_func>
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <LLRPDevice::LLRPDevice()+0x80>)
 8009c9c:	4a03      	ldr	r2, [pc, #12]	@ (8009cac <LLRPDevice::LLRPDevice()+0x5c>)
 8009c9e:	4804      	ldr	r0, [pc, #16]	@ (8009cb0 <LLRPDevice::LLRPDevice()+0x60>)
 8009ca0:	6034      	str	r4, [r6, #0]
 8009ca2:	2138      	movs	r1, #56	@ 0x38
 8009ca4:	f011 f8a0 	bl	801ade8 <__assert_func>
 8009ca8:	e7e6      	b.n	8009c78 <LLRPDevice::LLRPDevice()+0x28>
 8009caa:	bf00      	nop
 8009cac:	0801b6ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, sl, ip, sp, pc}
 8009cb0:	0801b61b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, sp, pc}
 8009cb4:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 8009cb8:	2000c804 	andcs	ip, r0, r4, lsl #16
 8009cbc:	85faffef 	ldrbhi	pc, [sl, #4079]!	@ 0xfef	@ <UNPREDICTABLE>
 8009cc0:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}
 8009cc4:	0801b640 	stmdaeq	r1, {r6, r9, sl, ip, sp, pc}
 8009cc8:	0801b64d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sl, ip, sp, pc}
 8009ccc:	0801b653 	stmdaeq	r1, {r0, r1, r4, r6, r9, sl, ip, sp, pc}
 8009cd0:	0801b679 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl, ip, sp, pc}

08009cd4 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8009cd4:	4b14      	ldr	r3, [pc, #80]	@ (8009d28 <RDMDeviceResponder::~RDMDeviceResponder()+0x54>)
 8009cd6:	b570      	push	{r4, r5, r6, lr}
 8009cd8:	4604      	mov	r4, r0
 8009cda:	f840 3b60 	str.w	r3, [r0], #96
 8009cde:	f7ff ff89 	bl	8009bf4 <RDMSubDevices::~RDMSubDevices()>
 8009ce2:	4a12      	ldr	r2, [pc, #72]	@ (8009d2c <RDMDeviceResponder::~RDMDeviceResponder()+0x58>)
 8009ce4:	4912      	ldr	r1, [pc, #72]	@ (8009d30 <RDMDeviceResponder::~RDMDeviceResponder()+0x5c>)
 8009ce6:	4813      	ldr	r0, [pc, #76]	@ (8009d34 <RDMDeviceResponder::~RDMDeviceResponder()+0x60>)
 8009ce8:	2353      	movs	r3, #83	@ 0x53
 8009cea:	f010 ff9d 	bl	801ac28 <printf>
 8009cee:	2500      	movs	r5, #0
 8009cf0:	462e      	mov	r6, r5
 8009cf2:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8009cf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cf8:	429d      	cmp	r5, r3
 8009cfa:	d30a      	bcc.n	8009d12 <RDMDeviceResponder::~RDMDeviceResponder()+0x3e>
 8009cfc:	b108      	cbz	r0, 8009d02 <RDMDeviceResponder::~RDMDeviceResponder()+0x2e>
 8009cfe:	f011 f9e5 	bl	801b0cc <operator delete[](void*)>
 8009d02:	4a0a      	ldr	r2, [pc, #40]	@ (8009d2c <RDMDeviceResponder::~RDMDeviceResponder()+0x58>)
 8009d04:	490a      	ldr	r1, [pc, #40]	@ (8009d30 <RDMDeviceResponder::~RDMDeviceResponder()+0x5c>)
 8009d06:	480c      	ldr	r0, [pc, #48]	@ (8009d38 <RDMDeviceResponder::~RDMDeviceResponder()+0x64>)
 8009d08:	235c      	movs	r3, #92	@ 0x5c
 8009d0a:	f010 ff8d 	bl	801ac28 <printf>
 8009d0e:	4620      	mov	r0, r4
 8009d10:	bd70      	pop	{r4, r5, r6, pc}
 8009d12:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8009d16:	b128      	cbz	r0, 8009d24 <RDMDeviceResponder::~RDMDeviceResponder()+0x50>
 8009d18:	6803      	ldr	r3, [r0, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4798      	blx	r3
 8009d1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d20:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8009d24:	3501      	adds	r5, #1
 8009d26:	e7e4      	b.n	8009cf2 <RDMDeviceResponder::~RDMDeviceResponder()+0x1e>
 8009d28:	0801e9e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, fp, sp, lr, pc}
 8009d2c:	0801b68d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sl, ip, sp, pc}
 8009d30:	0801b699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, ip, sp, pc}
 8009d34:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 8009d38:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}

08009d3c <RDMNetDevice::~RDMNetDevice()>:
 8009d3c:	4b17      	ldr	r3, [pc, #92]	@ (8009d9c <RDMNetDevice::~RDMNetDevice()+0x60>)
 8009d3e:	4a18      	ldr	r2, [pc, #96]	@ (8009da0 <RDMNetDevice::~RDMNetDevice()+0x64>)
 8009d40:	4918      	ldr	r1, [pc, #96]	@ (8009da4 <RDMNetDevice::~RDMNetDevice()+0x68>)
 8009d42:	b510      	push	{r4, lr}
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	4604      	mov	r4, r0
 8009d48:	2337      	movs	r3, #55	@ 0x37
 8009d4a:	4817      	ldr	r0, [pc, #92]	@ (8009da8 <RDMNetDevice::~RDMNetDevice()+0x6c>)
 8009d4c:	f010 ff6c 	bl	801ac28 <printf>
 8009d50:	4a13      	ldr	r2, [pc, #76]	@ (8009da0 <RDMNetDevice::~RDMNetDevice()+0x64>)
 8009d52:	4914      	ldr	r1, [pc, #80]	@ (8009da4 <RDMNetDevice::~RDMNetDevice()+0x68>)
 8009d54:	4815      	ldr	r0, [pc, #84]	@ (8009dac <RDMNetDevice::~RDMNetDevice()+0x70>)
 8009d56:	2339      	movs	r3, #57	@ 0x39
 8009d58:	f010 ff66 	bl	801ac28 <printf>
 8009d5c:	4a14      	ldr	r2, [pc, #80]	@ (8009db0 <RDMNetDevice::~RDMNetDevice()+0x74>)
 8009d5e:	4915      	ldr	r1, [pc, #84]	@ (8009db4 <RDMNetDevice::~RDMNetDevice()+0x78>)
 8009d60:	4811      	ldr	r0, [pc, #68]	@ (8009da8 <RDMNetDevice::~RDMNetDevice()+0x6c>)
 8009d62:	233f      	movs	r3, #63	@ 0x3f
 8009d64:	f010 ff60 	bl	801ac28 <printf>
 8009d68:	4813      	ldr	r0, [pc, #76]	@ (8009db8 <RDMNetDevice::~RDMNetDevice()+0x7c>)
 8009d6a:	f00b f903 	bl	8014f74 <net::igmp_leave(unsigned long)>
 8009d6e:	f241 50c1 	movw	r0, #5569	@ 0x15c1
 8009d72:	f00b fd0f 	bl	8015794 <net::udp_end(unsigned short)>
 8009d76:	b128      	cbz	r0, 8009d84 <RDMNetDevice::~RDMNetDevice()+0x48>
 8009d78:	4b10      	ldr	r3, [pc, #64]	@ (8009dbc <RDMNetDevice::~RDMNetDevice()+0x80>)
 8009d7a:	4a11      	ldr	r2, [pc, #68]	@ (8009dc0 <RDMNetDevice::~RDMNetDevice()+0x84>)
 8009d7c:	4811      	ldr	r0, [pc, #68]	@ (8009dc4 <RDMNetDevice::~RDMNetDevice()+0x88>)
 8009d7e:	21bf      	movs	r1, #191	@ 0xbf
 8009d80:	f011 f832 	bl	801ade8 <__assert_func>
 8009d84:	4a0a      	ldr	r2, [pc, #40]	@ (8009db0 <RDMNetDevice::~RDMNetDevice()+0x74>)
 8009d86:	490b      	ldr	r1, [pc, #44]	@ (8009db4 <RDMNetDevice::~RDMNetDevice()+0x78>)
 8009d88:	4808      	ldr	r0, [pc, #32]	@ (8009dac <RDMNetDevice::~RDMNetDevice()+0x70>)
 8009d8a:	2344      	movs	r3, #68	@ 0x44
 8009d8c:	f010 ff4c 	bl	801ac28 <printf>
 8009d90:	4620      	mov	r0, r4
 8009d92:	f7ff ff9f 	bl	8009cd4 <RDMDeviceResponder::~RDMDeviceResponder()>
 8009d96:	4620      	mov	r0, r4
 8009d98:	bd10      	pop	{r4, pc}
 8009d9a:	bf00      	nop
 8009d9c:	0801c590 	stmdaeq	r1, {r4, r7, r8, sl, lr, pc}
 8009da0:	0801b6b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl, ip, sp, pc}
 8009da4:	0801b6c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, ip, sp, pc}
 8009da8:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 8009dac:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}
 8009db0:	0801b6e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, ip, sp, pc}
 8009db4:	0801b61b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, sp, pc}
 8009db8:	85faffef 	ldrbhi	pc, [sl, #4079]!	@ 0xfef	@ <UNPREDICTABLE>
 8009dbc:	0801b6f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, ip, sp, pc}
 8009dc0:	0801b701 	stmdaeq	r1, {r0, r8, r9, sl, ip, sp, pc}
 8009dc4:	0801b653 	stmdaeq	r1, {r0, r1, r4, r6, r9, sl, ip, sp, pc}

08009dc8 <RDMNetDevice::~RDMNetDevice()>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	4604      	mov	r4, r0
 8009dcc:	f7ff ffb6 	bl	8009d3c <RDMNetDevice::~RDMNetDevice()>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	21ac      	movs	r1, #172	@ 0xac
 8009dd4:	f011 f97c 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	bd10      	pop	{r4, pc}

08009ddc <RDMDeviceResponder::~RDMDeviceResponder()>:
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	4604      	mov	r4, r0
 8009de0:	f7ff ff78 	bl	8009cd4 <RDMDeviceResponder::~RDMDeviceResponder()>
 8009de4:	4620      	mov	r0, r4
 8009de6:	21a0      	movs	r1, #160	@ 0xa0
 8009de8:	f011 f972 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8009dec:	4620      	mov	r0, r4
 8009dee:	bd10      	pop	{r4, pc}

08009df0 <RDMNetDevice::Print()>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	b090      	sub	sp, #64	@ 0x40
 8009df4:	2300      	movs	r3, #0
 8009df6:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8009dfa:	4b17      	ldr	r3, [pc, #92]	@ (8009e58 <RDMNetDevice::Print()+0x68>)
 8009dfc:	2210      	movs	r2, #16
 8009dfe:	6819      	ldr	r1, [r3, #0]
 8009e00:	4604      	mov	r4, r0
 8009e02:	a802      	add	r0, sp, #8
 8009e04:	f7ff fb99 	bl	800953a <memcpy.isra.0>
 8009e08:	a906      	add	r1, sp, #24
 8009e0a:	a802      	add	r0, sp, #8
 8009e0c:	f010 ffe6 	bl	801addc <uuid_unparse>
 8009e10:	4812      	ldr	r0, [pc, #72]	@ (8009e5c <RDMNetDevice::Print()+0x6c>)
 8009e12:	f010 ff09 	bl	801ac28 <printf>
 8009e16:	a906      	add	r1, sp, #24
 8009e18:	4811      	ldr	r0, [pc, #68]	@ (8009e60 <RDMNetDevice::Print()+0x70>)
 8009e1a:	f010 ff05 	bl	801ac28 <printf>
 8009e1e:	4811      	ldr	r0, [pc, #68]	@ (8009e64 <RDMNetDevice::Print()+0x74>)
 8009e20:	f010 ff02 	bl	801ac28 <printf>
 8009e24:	f241 51c1 	movw	r1, #5569	@ 0x15c1
 8009e28:	480f      	ldr	r0, [pc, #60]	@ (8009e68 <RDMNetDevice::Print()+0x78>)
 8009e2a:	f010 fefd 	bl	801ac28 <printf>
 8009e2e:	2385      	movs	r3, #133	@ 0x85
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	22ff      	movs	r2, #255	@ 0xff
 8009e34:	23fa      	movs	r3, #250	@ 0xfa
 8009e36:	21ef      	movs	r1, #239	@ 0xef
 8009e38:	480c      	ldr	r0, [pc, #48]	@ (8009e6c <RDMNetDevice::Print()+0x7c>)
 8009e3a:	f010 fef5 	bl	801ac28 <printf>
 8009e3e:	2386      	movs	r3, #134	@ 0x86
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	22ff      	movs	r2, #255	@ 0xff
 8009e44:	23fa      	movs	r3, #250	@ 0xfa
 8009e46:	21ef      	movs	r1, #239	@ 0xef
 8009e48:	4809      	ldr	r0, [pc, #36]	@ (8009e70 <RDMNetDevice::Print()+0x80>)
 8009e4a:	f010 feed 	bl	801ac28 <printf>
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f004 ffc6 	bl	800ede0 <RDMDeviceResponder::Print()>
 8009e54:	b010      	add	sp, #64	@ 0x40
 8009e56:	bd10      	pop	{r4, pc}
 8009e58:	2000cd38 	andcs	ip, r0, r8, lsr sp
 8009e5c:	0801b705 	stmdaeq	r1, {r0, r2, r8, r9, sl, ip, sp, pc}
 8009e60:	0801b70d 	stmdaeq	r1, {r0, r2, r3, r8, r9, sl, ip, sp, pc}
 8009e64:	0801b718 	stmdaeq	r1, {r3, r4, r8, r9, sl, ip, sp, pc}
 8009e68:	0801b725 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, ip, sp, pc}
 8009e6c:	0801b73f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, sl, ip, sp, pc}
 8009e70:	0801b762 	stmdaeq	r1, {r1, r5, r6, r8, r9, sl, ip, sp, pc}

08009e74 <Hardware::RebootHandler()>:
 8009e74:	b508      	push	{r3, lr}
 8009e76:	4b05      	ldr	r3, [pc, #20]	@ (8009e8c <Hardware::RebootHandler()+0x18>)
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f009 f9bd 	bl	80131f8 <WS28xxMulti::Blackout()>
 8009e7e:	4b04      	ldr	r3, [pc, #16]	@ (8009e90 <Hardware::RebootHandler()+0x1c>)
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e86:	f001 be31 	b.w	800baec <ArtNetNode::Stop()>
 8009e8a:	bf00      	nop
 8009e8c:	2000c91c 	andcs	ip, r0, ip, lsl r9
 8009e90:	2000064c 	andcs	r0, r0, ip, asr #12

08009e94 <main>:
 8009e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e98:	f5ad 5de8 	sub.w	sp, sp, #7424	@ 0x1d00
 8009e9c:	b087      	sub	sp, #28
 8009e9e:	a87b      	add	r0, sp, #492	@ 0x1ec
 8009ea0:	f00e fab6 	bl	8018410 <Hardware::Hardware()>
 8009ea4:	a865      	add	r0, sp, #404	@ 0x194
 8009ea6:	f00c fcfb 	bl	80168a0 <DisplayUdf::DisplayUdf()>
 8009eaa:	a807      	add	r0, sp, #28
 8009eac:	f00d f8ce 	bl	801704c <ConfigStore::ConfigStore()>
 8009eb0:	49c4      	ldr	r1, [pc, #784]	@ (800a1c4 <main+0x330>)
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	a865      	add	r0, sp, #404	@ 0x194
 8009eb6:	f7ff fbdb 	bl	8009670 <Display::TextStatus(char const*, unsigned long)>
 8009eba:	a8d0      	add	r0, sp, #832	@ 0x340
 8009ebc:	f00a fa10 	bl	80142e0 <Network::Network()>
 8009ec0:	a808      	add	r0, sp, #32
 8009ec2:	f009 ffbf 	bl	8013e44 <MDNS::MDNS()>
 8009ec6:	49c0      	ldr	r1, [pc, #768]	@ (800a1c8 <main+0x334>)
 8009ec8:	2202      	movs	r2, #2
 8009eca:	a865      	add	r0, sp, #404	@ 0x194
 8009ecc:	f7ff fbd0 	bl	8009670 <Display::TextStatus(char const*, unsigned long)>
 8009ed0:	4bbe      	ldr	r3, [pc, #760]	@ (800a1cc <main+0x338>)
 8009ed2:	4abf      	ldr	r2, [pc, #764]	@ (800a1d0 <main+0x33c>)
 8009ed4:	49bf      	ldr	r1, [pc, #764]	@ (800a1d4 <main+0x340>)
 8009ed6:	a809      	add	r0, sp, #36	@ 0x24
 8009ed8:	f00e f86a 	bl	8017fb0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8009edc:	48be      	ldr	r0, [pc, #760]	@ (800a1d8 <main+0x344>)
 8009ede:	f010 fef8 	bl	801acd2 <puts>
 8009ee2:	49be      	ldr	r1, [pc, #760]	@ (800a1dc <main+0x348>)
 8009ee4:	48be      	ldr	r0, [pc, #760]	@ (800a1e0 <main+0x34c>)
 8009ee6:	f010 fe9f 	bl	801ac28 <printf>
 8009eea:	f20d 40d4 	addw	r0, sp, #1236	@ 0x4d4
 8009eee:	f001 febd 	bl	800bc6c <ArtNetNode::ArtNetNode()>
 8009ef2:	a8fe      	add	r0, sp, #1016	@ 0x3f8
 8009ef4:	f003 fa9c 	bl	800d430 <ArtNetParams::ArtNetParams()>
 8009ef8:	a8fe      	add	r0, sp, #1016	@ 0x3f8
 8009efa:	f003 fabb 	bl	800d474 <ArtNetParams::Load()>
 8009efe:	a8fe      	add	r0, sp, #1016	@ 0x3f8
 8009f00:	f003 fe20 	bl	800db44 <ArtNetParams::Set()>
 8009f04:	a855      	add	r0, sp, #340	@ 0x154
 8009f06:	f7ff fdd9 	bl	8009abc <PixelDmxConfiguration::PixelDmxConfiguration()>
 8009f0a:	a836      	add	r0, sp, #216	@ 0xd8
 8009f0c:	f006 f89e 	bl	801004c <PixelDmxParams::PixelDmxParams()>
 8009f10:	a836      	add	r0, sp, #216	@ 0xd8
 8009f12:	f006 fc6b 	bl	80107ec <PixelDmxParams::Load()>
 8009f16:	f10d 093c 	add.w	r9, sp, #60	@ 0x3c
 8009f1a:	a836      	add	r0, sp, #216	@ 0xd8
 8009f1c:	f006 fb80 	bl	8010620 <PixelDmxParams::Set()>
 8009f20:	f60d 5418 	addw	r4, sp, #3352	@ 0xd18
 8009f24:	4648      	mov	r0, r9
 8009f26:	f006 fd83 	bl	8010a30 <WS28xxDmxMulti::WS28xxDmxMulti()>
 8009f2a:	f6a4 33c4 	subw	r3, r4, #3012	@ 0xbc4
 8009f2e:	2500      	movs	r5, #0
 8009f30:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f36:	9305      	str	r3, [sp, #20]
 8009f38:	46aa      	mov	sl, r5
 8009f3a:	4545      	cmp	r5, r8
 8009f3c:	f040 824a 	bne.w	800a3d4 <main+0x540>
 8009f40:	4fa8      	ldr	r7, [pc, #672]	@ (800a1e4 <main+0x350>)
 8009f42:	f89d 60e8 	ldrb.w	r6, [sp, #232]	@ 0xe8
 8009f46:	ad0a      	add	r5, sp, #40	@ 0x28
 8009f48:	4641      	mov	r1, r8
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f007 fd7a 	bl	8011a44 <PixelPatterns::PixelPatterns(unsigned long)>
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	b12b      	cbz	r3, 8009f60 <main+0xcc>
 8009f54:	4ba4      	ldr	r3, [pc, #656]	@ (800a1e8 <main+0x354>)
 8009f56:	4aa5      	ldr	r2, [pc, #660]	@ (800a1ec <main+0x358>)
 8009f58:	48a5      	ldr	r0, [pc, #660]	@ (800a1f0 <main+0x35c>)
 8009f5a:	2125      	movs	r1, #37	@ 0x25
 8009f5c:	f010 ff44 	bl	801ade8 <__assert_func>
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	603d      	str	r5, [r7, #0]
 8009f66:	f7ff fcb3 	bl	80098d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	49a1      	ldr	r1, [pc, #644]	@ (800a1f4 <main+0x360>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bf0c      	ite	eq
 8009f74:	464a      	moveq	r2, r9
 8009f76:	2200      	movne	r2, #0
 8009f78:	f8c4 2398 	str.w	r2, [r4, #920]	@ 0x398
 8009f7c:	f8c4 2378 	str.w	r2, [r4, #888]	@ 0x378
 8009f80:	4a9d      	ldr	r2, [pc, #628]	@ (800a1f8 <main+0x364>)
 8009f82:	f6a4 43e4 	subw	r3, r4, #3300	@ 0xce4
 8009f86:	e9c3 2900 	strd	r2, r9, [r3]
 8009f8a:	4b9c      	ldr	r3, [pc, #624]	@ (800a1fc <main+0x368>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f6a4 37c4 	subw	r7, r4, #3012	@ 0xbc4
 8009f92:	aa0d      	add	r2, sp, #52	@ 0x34
 8009f94:	f8c3 2be4 	str.w	r2, [r3, #3044]	@ 0xbe4
 8009f98:	a865      	add	r0, sp, #404	@ 0x194
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	f7ff fb68 	bl	8009670 <Display::TextStatus(char const*, unsigned long)>
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f007 fc23 	bl	80117ec <pixel::pixel_get_type(pixel::Type)>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	4a95      	ldr	r2, [pc, #596]	@ (800a200 <main+0x36c>)
 8009faa:	e9cd 0300 	strd	r0, r3, [sp]
 8009fae:	2120      	movs	r1, #32
 8009fb0:	4643      	mov	r3, r8
 8009fb2:	a81b      	add	r0, sp, #108	@ 0x6c
 8009fb4:	f010 fe60 	bl	801ac78 <snprintf>
 8009fb8:	4a92      	ldr	r2, [pc, #584]	@ (800a204 <main+0x370>)
 8009fba:	2120      	movs	r1, #32
 8009fbc:	a824      	add	r0, sp, #144	@ 0x90
 8009fbe:	f010 fe5b 	bl	801ac78 <snprintf>
 8009fc2:	4607      	mov	r7, r0
 8009fc4:	202c      	movs	r0, #44	@ 0x2c
 8009fc6:	f011 f885 	bl	801b0d4 <operator new(unsigned int)>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2200      	movs	r2, #0
 8009fce:	6042      	str	r2, [r0, #4]
 8009fd0:	6282      	str	r2, [r0, #40]	@ 0x28
 8009fd2:	f100 0c28 	add.w	ip, r0, #40	@ 0x28
 8009fd6:	f823 2b08 	strh.w	r2, [r3], #8
 8009fda:	aa1b      	add	r2, sp, #108	@ 0x6c
 8009fdc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009fe0:	b111      	cbz	r1, 8009fe8 <main+0x154>
 8009fe2:	4563      	cmp	r3, ip
 8009fe4:	f040 822e 	bne.w	800a444 <main+0x5b0>
 8009fe8:	f6a4 43ec 	subw	r3, r4, #3308	@ 0xcec
 8009fec:	a90b      	add	r1, sp, #44	@ 0x2c
 8009fee:	6018      	str	r0, [r3, #0]
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	a8a5      	add	r0, sp, #660	@ 0x294
 8009ff6:	f004 fded 	bl	800ebd4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)>
 8009ffa:	f6a4 2a84 	subw	sl, r4, #2692	@ 0xa84
 8009ffe:	a8cd      	add	r0, sp, #820	@ 0x334
 800a000:	f7ff fe26 	bl	8009c50 <LLRPDevice::LLRPDevice()>
 800a004:	4b80      	ldr	r3, [pc, #512]	@ (800a208 <main+0x374>)
 800a006:	4a81      	ldr	r2, [pc, #516]	@ (800a20c <main+0x378>)
 800a008:	4981      	ldr	r1, [pc, #516]	@ (800a210 <main+0x37c>)
 800a00a:	f8ca 3000 	str.w	r3, [sl]
 800a00e:	4881      	ldr	r0, [pc, #516]	@ (800a214 <main+0x380>)
 800a010:	2331      	movs	r3, #49	@ 0x31
 800a012:	f010 fe09 	bl	801ac28 <printf>
 800a016:	4a7d      	ldr	r2, [pc, #500]	@ (800a20c <main+0x378>)
 800a018:	497d      	ldr	r1, [pc, #500]	@ (800a210 <main+0x37c>)
 800a01a:	487f      	ldr	r0, [pc, #508]	@ (800a218 <main+0x384>)
 800a01c:	2333      	movs	r3, #51	@ 0x33
 800a01e:	f010 fe03 	bl	801ac28 <printf>
 800a022:	b2fa      	uxtb	r2, r7
 800a024:	2a20      	cmp	r2, #32
 800a026:	f89a 3056 	ldrb.w	r3, [sl, #86]	@ 0x56
 800a02a:	bf28      	it	cs
 800a02c:	2220      	movcs	r2, #32
 800a02e:	4693      	mov	fp, r2
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 820d 	beq.w	800a450 <main+0x5bc>
 800a036:	a924      	add	r1, sp, #144	@ 0x90
 800a038:	a8ae      	add	r0, sp, #696	@ 0x2b8
 800a03a:	f7ff fa7e 	bl	800953a <memcpy.isra.0>
 800a03e:	f5a4 633f 	sub.w	r3, r4, #3056	@ 0xbf0
 800a042:	2701      	movs	r7, #1
 800a044:	f883 b000 	strb.w	fp, [r3]
 800a048:	2300      	movs	r3, #0
 800a04a:	f88a b054 	strb.w	fp, [sl, #84]	@ 0x54
 800a04e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800a052:	f8df a1dc 	ldr.w	sl, [pc, #476]	@ 800a230 <main+0x39c>
 800a056:	f8cd b000 	str.w	fp, [sp]
 800a05a:	f8da 0000 	ldr.w	r0, [sl]
 800a05e:	abae      	add	r3, sp, #696	@ 0x2b8
 800a060:	2204      	movs	r2, #4
 800a062:	2109      	movs	r1, #9
 800a064:	f00d f880 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a068:	2300      	movs	r3, #0
 800a06a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800a06e:	9700      	str	r7, [sp, #0]
 800a070:	f8da 0000 	ldr.w	r0, [sl]
 800a074:	ab4a      	add	r3, sp, #296	@ 0x128
 800a076:	2224      	movs	r2, #36	@ 0x24
 800a078:	2109      	movs	r1, #9
 800a07a:	f00d f875 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a07e:	f6a4 2384 	subw	r3, r4, #2692	@ 0xa84
 800a082:	4a66      	ldr	r2, [pc, #408]	@ (800a21c <main+0x388>)
 800a084:	645a      	str	r2, [r3, #68]	@ 0x44
 800a086:	f20d 43d4 	addw	r3, sp, #1236	@ 0x4d4
 800a08a:	f503 50c1 	add.w	r0, r3, #6176	@ 0x1820
 800a08e:	2206      	movs	r2, #6
 800a090:	f20d 21de 	addw	r1, sp, #734	@ 0x2de
 800a094:	300e      	adds	r0, #14
 800a096:	f7ff fa50 	bl	800953a <memcpy.isra.0>
 800a09a:	f894 3fe9 	ldrb.w	r3, [r4, #4073]	@ 0xfe9
 800a09e:	a8a5      	add	r0, sp, #660	@ 0x294
 800a0a0:	f043 0310 	orr.w	r3, r3, #16
 800a0a4:	f884 3fe9 	strb.w	r3, [r4, #4073]	@ 0xfe9
 800a0a8:	f004 fdee 	bl	800ec88 <RDMDeviceResponder::Init()>
 800a0ac:	a84a      	add	r0, sp, #296	@ 0x128
 800a0ae:	f004 fd27 	bl	800eb00 <RDMDeviceParams::RDMDeviceParams()>
 800a0b2:	a84a      	add	r0, sp, #296	@ 0x128
 800a0b4:	f004 fd37 	bl	800eb26 <RDMDeviceParams::Load()>
 800a0b8:	a9a6      	add	r1, sp, #664	@ 0x298
 800a0ba:	a84a      	add	r0, sp, #296	@ 0x128
 800a0bc:	f004 fd38 	bl	800eb30 <RDMDeviceParams::Set(RDMDevice*)>
 800a0c0:	a8a5      	add	r0, sp, #660	@ 0x294
 800a0c2:	f7ff fe95 	bl	8009df0 <RDMNetDevice::Print()>
 800a0c6:	f20d 40d4 	addw	r0, sp, #1236	@ 0x4d4
 800a0ca:	f003 f8d5 	bl	800d278 <ArtNetNode::Print()>
 800a0ce:	4648      	mov	r0, r9
 800a0d0:	f6a4 39c4 	subw	r9, r4, #3012	@ 0xbc4
 800a0d4:	f7ff fd4c 	bl	8009b70 <WS28xxDmxMulti::Print()>
 800a0d8:	f8d9 3000 	ldr.w	r3, [r9]
 800a0dc:	4950      	ldr	r1, [pc, #320]	@ (800a220 <main+0x38c>)
 800a0de:	4642      	mov	r2, r8
 800a0e0:	a865      	add	r0, sp, #404	@ 0x194
 800a0e2:	f00c fbf3 	bl	80168cc <DisplayUdf::SetTitle(char const*, ...)>
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	4611      	mov	r1, r2
 800a0ea:	a865      	add	r0, sp, #404	@ 0x194
 800a0ec:	f00c fc01 	bl	80168f2 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a0f0:	2207      	movs	r2, #7
 800a0f2:	2103      	movs	r1, #3
 800a0f4:	a865      	add	r0, sp, #404	@ 0x194
 800a0f6:	f00c fbfc 	bl	80168f2 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a0fa:	2203      	movs	r2, #3
 800a0fc:	2104      	movs	r1, #4
 800a0fe:	a865      	add	r0, sp, #404	@ 0x194
 800a100:	f00c fbf7 	bl	80168f2 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a104:	2201      	movs	r2, #1
 800a106:	2105      	movs	r1, #5
 800a108:	a865      	add	r0, sp, #404	@ 0x194
 800a10a:	f00c fbf2 	bl	80168f2 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a10e:	a82d      	add	r0, sp, #180	@ 0xb4
 800a110:	f00c fcba 	bl	8016a88 <DisplayUdfParams::DisplayUdfParams()>
 800a114:	a82d      	add	r0, sp, #180	@ 0xb4
 800a116:	f00c fcc5 	bl	8016aa4 <DisplayUdfParams::Load()>
 800a11a:	a965      	add	r1, sp, #404	@ 0x194
 800a11c:	a82d      	add	r0, sp, #180	@ 0xb4
 800a11e:	f00c fde9 	bl	8016cf4 <DisplayUdfParams::Set(DisplayUdf*)>
 800a122:	a865      	add	r0, sp, #404	@ 0x194
 800a124:	f00c fc00 	bl	8016928 <DisplayUdf::Show()>
 800a128:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800a12c:	f007 fb5e 	bl	80117ec <pixel::pixel_get_type(pixel::Type)>
 800a130:	4607      	mov	r7, r0
 800a132:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a136:	f8d9 8000 	ldr.w	r8, [r9]
 800a13a:	f8d9 a020 	ldr.w	sl, [r9, #32]
 800a13e:	f007 fbc7 	bl	80118d0 <pixel::pixel_get_map(pixel::Map)>
 800a142:	4a38      	ldr	r2, [pc, #224]	@ (800a224 <main+0x390>)
 800a144:	f8cd 8000 	str.w	r8, [sp]
 800a148:	e9cd a001 	strd	sl, r0, [sp, #4]
 800a14c:	463b      	mov	r3, r7
 800a14e:	2107      	movs	r1, #7
 800a150:	a865      	add	r0, sp, #404	@ 0x194
 800a152:	f7ff fa27 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 800a156:	b17e      	cbz	r6, 800a178 <main+0x2e4>
 800a158:	f6a4 3384 	subw	r3, r4, #2948	@ 0xb84
 800a15c:	2106      	movs	r1, #6
 800a15e:	6998      	ldr	r0, [r3, #24]
 800a160:	f7ff f9e6 	bl	8009530 <Display::ClearLine(unsigned long) [clone .isra.0]>
 800a164:	4630      	mov	r0, r6
 800a166:	f007 fcb9 	bl	8011adc <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800a16a:	4a2f      	ldr	r2, [pc, #188]	@ (800a228 <main+0x394>)
 800a16c:	9600      	str	r6, [sp, #0]
 800a16e:	4603      	mov	r3, r0
 800a170:	2106      	movs	r1, #6
 800a172:	a865      	add	r0, sp, #404	@ 0x194
 800a174:	f7ff fa16 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 800a178:	2100      	movs	r1, #0
 800a17a:	2203      	movs	r2, #3
 800a17c:	f894 38ff 	ldrb.w	r3, [r4, #2303]	@ 0x8ff
 800a180:	a840      	add	r0, sp, #256	@ 0x100
 800a182:	f000 fb19 	bl	800a7b8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)>
 800a186:	ab13      	add	r3, sp, #76	@ 0x4c
 800a188:	4618      	mov	r0, r3
 800a18a:	9305      	str	r3, [sp, #20]
 800a18c:	f000 fdd4 	bl	800ad38 <RemoteConfigParams::RemoteConfigParams()>
 800a190:	9805      	ldr	r0, [sp, #20]
 800a192:	f000 fdd9 	bl	800ad48 <RemoteConfigParams::Load()>
 800a196:	9805      	ldr	r0, [sp, #20]
 800a198:	a940      	add	r1, sp, #256	@ 0x100
 800a19a:	f000 fee3 	bl	800af64 <RemoteConfigParams::Set(RemoteConfig*)>
 800a19e:	a807      	add	r0, sp, #28
 800a1a0:	f00d f838 	bl	8017214 <ConfigStore::Flash()>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d1fa      	bne.n	800a19e <main+0x30a>
 800a1a8:	a808      	add	r0, sp, #32
 800a1aa:	f009 ffcf 	bl	801414c <MDNS::Print()>
 800a1ae:	491f      	ldr	r1, [pc, #124]	@ (800a22c <main+0x398>)
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	a865      	add	r0, sp, #404	@ 0x194
 800a1b4:	f7ff fa5c 	bl	8009670 <Display::TextStatus(char const*, unsigned long)>
 800a1b8:	f20d 40d4 	addw	r0, sp, #1236	@ 0x4d4
 800a1bc:	f001 fc5a 	bl	800ba74 <ArtNetNode::Start()>
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	e037      	b.n	800a234 <main+0x3a0>
 800a1c4:	0801edb6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, sl, fp, sp, lr, pc}
 800a1c8:	0801eda6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, fp, sp, lr, pc}
 800a1cc:	0801b785 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, ip, sp, pc}
 800a1d0:	0801b78e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, sl, ip, sp, pc}
 800a1d4:	0801c5a0 	stmdaeq	r1, {r5, r7, r8, sl, lr, pc}
 800a1d8:	2000cce0 	andcs	ip, r0, r0, ror #25
 800a1dc:	0801b79a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, ip, sp, pc}
 800a1e0:	0801b7b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, ip, sp, pc}
 800a1e4:	2000c918 	andcs	ip, r0, r8, lsl r9
 800a1e8:	0801b4ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, ip, sp, pc}
 800a1ec:	0801b7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, ip, sp, pc}
 800a1f0:	0801b49f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, sl, ip, sp, pc}
 800a1f4:	0801ebde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, fp, sp, lr, pc}
 800a1f8:	0801c57c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, lr, pc}
 800a1fc:	2000064c 	andcs	r0, r0, ip, asr #12
 800a200:	0801b7e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 800a204:	0801b7fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}
 800a208:	0801c590 	stmdaeq	r1, {r4, r7, r8, sl, lr, pc}
 800a20c:	0801b6ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sl, ip, sp, pc}
 800a210:	0801b6c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, ip, sp, pc}
 800a214:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 800a218:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}
 800a21c:	00040100 	andeq	r0, r4, r0, lsl #2
 800a220:	0801b80f 	stmdaeq	r1, {r0, r1, r2, r3, fp, ip, sp, pc}
 800a224:	0801b824 	stmdaeq	r1, {r2, r5, fp, ip, sp, pc}
 800a228:	0801b4c8 	stmdaeq	r1, {r3, r6, r7, sl, ip, sp, pc}
 800a22c:	0801e8f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, fp, sp, lr, pc}
 800a230:	2000cc34 	andcs	ip, r0, r4, lsr ip
 800a234:	49a6      	ldr	r1, [pc, #664]	@ (800a4d0 <main+0x63c>)
 800a236:	a865      	add	r0, sp, #404	@ 0x194
 800a238:	f7ff fa1a 	bl	8009670 <Display::TextStatus(char const*, unsigned long)>
 800a23c:	2102      	movs	r1, #2
 800a23e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a242:	f00e fec1 	bl	8018fc8 <fwdgt_config>
 800a246:	f6a4 332c 	subw	r3, r4, #2860	@ 0xb2c
 800a24a:	2801      	cmp	r0, #1
 800a24c:	bf0c      	ite	eq
 800a24e:	2201      	moveq	r2, #1
 800a250:	2200      	movne	r2, #0
 800a252:	741a      	strb	r2, [r3, #16]
 800a254:	d101      	bne.n	800a25a <main+0x3c6>
 800a256:	f00e fea7 	bl	8018fa8 <fwdgt_enable>
 800a25a:	4f9e      	ldr	r7, [pc, #632]	@ (800a4d4 <main+0x640>)
 800a25c:	f8df 82b4 	ldr.w	r8, [pc, #692]	@ 800a514 <main+0x680>
 800a260:	f00e feaa 	bl	8018fb8 <fwdgt_counter_reload>
 800a264:	f7fe f9fe 	bl	8008664 <net::net_handle()>
 800a268:	f7ff f970 	bl	800954c <net::dhcp_run()>
 800a26c:	f50d 619b 	add.w	r1, sp, #1240	@ 0x4d8
 800a270:	f50d 5285 	add.w	r2, sp, #4256	@ 0x10a0
 800a274:	ab0c      	add	r3, sp, #48	@ 0x30
 800a276:	f601 31c4 	addw	r1, r1, #3012	@ 0xbc4
 800a27a:	f8d4 0380 	ldr.w	r0, [r4, #896]	@ 0x380
 800a27e:	f00b faad 	bl	80157dc <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	f8c4 338c 	str.w	r3, [r4, #908]	@ 0x38c
 800a288:	4601      	mov	r1, r0
 800a28a:	f20d 40d4 	addw	r0, sp, #1236	@ 0x4d4
 800a28e:	f001 fdfb 	bl	800be88 <ArtNetNode::Process(unsigned long)>
 800a292:	f20d 40d4 	addw	r0, sp, #1236	@ 0x4d4
 800a296:	f7ff fa09 	bl	80096ac <E131Bridge::Run()>
 800a29a:	f8d4 238c 	ldr.w	r2, [r4, #908]	@ 0x38c
 800a29e:	f8d4 3394 	ldr.w	r3, [r4, #916]	@ 0x394
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	2bc8      	cmp	r3, #200	@ 0xc8
 800a2a6:	f6a4 4318 	subw	r3, r4, #3096	@ 0xc18
 800a2aa:	bf88      	it	hi
 800a2ac:	f8c4 2394 	strhi.w	r2, [r4, #916]	@ 0x394
 800a2b0:	7b1a      	ldrb	r2, [r3, #12]
 800a2b2:	bb4a      	cbnz	r2, 800a308 <main+0x474>
 800a2b4:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800a2b6:	aa0c      	add	r2, sp, #48	@ 0x30
 800a2b8:	69b0      	ldr	r0, [r6, #24]
 800a2ba:	f106 011c 	add.w	r1, r6, #28
 800a2be:	f00b f9c1 	bl	8015644 <net::tcp_read(long, unsigned char const**, unsigned long&)>
 800a2c2:	4681      	mov	r9, r0
 800a2c4:	b190      	cbz	r0, 800a2ec <main+0x458>
 800a2c6:	f6a4 4ae8 	subw	sl, r4, #3304	@ 0xce8
 800a2ca:	4a83      	ldr	r2, [pc, #524]	@ (800a4d8 <main+0x644>)
 800a2cc:	f8da 3000 	ldr.w	r3, [sl]
 800a2d0:	4982      	ldr	r1, [pc, #520]	@ (800a4dc <main+0x648>)
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	4882      	ldr	r0, [pc, #520]	@ (800a4e0 <main+0x64c>)
 800a2d6:	2333      	movs	r3, #51	@ 0x33
 800a2d8:	f010 fca6 	bl	801ac28 <printf>
 800a2dc:	f8da 3000 	ldr.w	r3, [sl]
 800a2e0:	69f2      	ldr	r2, [r6, #28]
 800a2e2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	f001 fa70 	bl	800b7cc <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)>
 800a2ec:	f6a4 4618 	subw	r6, r4, #3096	@ 0xc18
 800a2f0:	ab0c      	add	r3, sp, #48	@ 0x30
 800a2f2:	6970      	ldr	r0, [r6, #20]
 800a2f4:	aa46      	add	r2, sp, #280	@ 0x118
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	f00b fa70 	bl	80157dc <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a2fc:	2803      	cmp	r0, #3
 800a2fe:	61f0      	str	r0, [r6, #28]
 800a300:	d902      	bls.n	800a308 <main+0x474>
 800a302:	a840      	add	r0, sp, #256	@ 0x100
 800a304:	f000 fc04 	bl	800ab10 <RemoteConfig::HandleRequest()>
 800a308:	a807      	add	r0, sp, #28
 800a30a:	f00c ff83 	bl	8017214 <ConfigStore::Flash()>
 800a30e:	f5a4 634f 	sub.w	r3, r4, #3312	@ 0xcf0
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	b1ab      	cbz	r3, 800a342 <main+0x4ae>
 800a316:	f8df a200 	ldr.w	sl, [pc, #512]	@ 800a518 <main+0x684>
 800a31a:	f8da 0000 	ldr.w	r0, [sl]
 800a31e:	f008 f85f 	bl	80123e0 <WS28xxMulti::IsUpdating()>
 800a322:	4606      	mov	r6, r0
 800a324:	b968      	cbnz	r0, 800a342 <main+0x4ae>
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	f8df b1f0 	ldr.w	fp, [pc, #496]	@ 800a51c <main+0x688>
 800a32c:	4681      	mov	r9, r0
 800a32e:	f8db 3000 	ldr.w	r3, [fp]
 800a332:	4599      	cmp	r9, r3
 800a334:	f0c0 8093 	bcc.w	800a45e <main+0x5ca>
 800a338:	b11e      	cbz	r6, 800a342 <main+0x4ae>
 800a33a:	f8da 0000 	ldr.w	r0, [sl]
 800a33e:	f007 ff5d 	bl	80121fc <WS28xxMulti::Update()>
 800a342:	4e68      	ldr	r6, [pc, #416]	@ (800a4e4 <main+0x650>)
 800a344:	4868      	ldr	r0, [pc, #416]	@ (800a4e8 <main+0x654>)
 800a346:	4b69      	ldr	r3, [pc, #420]	@ (800a4ec <main+0x658>)
 800a348:	4a69      	ldr	r2, [pc, #420]	@ (800a4f0 <main+0x65c>)
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	4631      	mov	r1, r6
 800a34e:	f00b fa45 	bl	80157dc <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a352:	4b68      	ldr	r3, [pc, #416]	@ (800a4f4 <main+0x660>)
 800a354:	280b      	cmp	r0, #11
 800a356:	6018      	str	r0, [r3, #0]
 800a358:	d90a      	bls.n	800a370 <main+0x4dc>
 800a35a:	6833      	ldr	r3, [r6, #0]
 800a35c:	789a      	ldrb	r2, [r3, #2]
 800a35e:	f012 0f78 	tst.w	r2, #120	@ 0x78
 800a362:	d105      	bne.n	800a370 <main+0x4dc>
 800a364:	8899      	ldrh	r1, [r3, #4]
 800a366:	ba49      	rev16	r1, r1
 800a368:	b289      	uxth	r1, r1
 800a36a:	a808      	add	r0, sp, #32
 800a36c:	f009 fe20 	bl	8013fb0 <MDNS::HandleQuestions(unsigned long)>
 800a370:	f8df 91ac 	ldr.w	r9, [pc, #428]	@ 800a520 <main+0x68c>
 800a374:	4860      	ldr	r0, [pc, #384]	@ (800a4f8 <main+0x664>)
 800a376:	4a61      	ldr	r2, [pc, #388]	@ (800a4fc <main+0x668>)
 800a378:	6800      	ldr	r0, [r0, #0]
 800a37a:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800a37e:	4649      	mov	r1, r9
 800a380:	f00b fa2c 	bl	80157dc <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a384:	2841      	cmp	r0, #65	@ 0x41
 800a386:	d913      	bls.n	800a3b0 <main+0x51c>
 800a388:	aecd      	add	r6, sp, #820	@ 0x334
 800a38a:	4630      	mov	r0, r6
 800a38c:	f005 fa7e 	bl	800f88c <LLRPDevice::DumpCommon()>
 800a390:	f8d9 3000 	ldr.w	r3, [r9]
 800a394:	f8d3 302a 	ldr.w	r3, [r3, #42]	@ 0x2a
 800a398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a39c:	d06a      	beq.n	800a474 <main+0x5e0>
 800a39e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a3a2:	d070      	beq.n	800a486 <main+0x5f2>
 800a3a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3a8:	d102      	bne.n	800a3b0 <main+0x51c>
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f005 f986 	bl	800f6bc <LLRPDevice::HandleRequestMessage()>
 800a3b0:	f6a4 3284 	subw	r2, r4, #2948	@ 0xb84
 800a3b4:	6911      	ldr	r1, [r2, #16]
 800a3b6:	2900      	cmp	r1, #0
 800a3b8:	d06f      	beq.n	800a49a <main+0x606>
 800a3ba:	7d53      	ldrb	r3, [r2, #21]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d166      	bne.n	800a48e <main+0x5fa>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	6852      	ldr	r2, [r2, #4]
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	4299      	cmp	r1, r3
 800a3c8:	d267      	bcs.n	800a49a <main+0x606>
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	a865      	add	r0, sp, #404	@ 0x194
 800a3ce:	f7ff f95d 	bl	800968c <Display::SetSleep(bool)>
 800a3d2:	e062      	b.n	800a49a <main+0x606>
 800a3d4:	2d07      	cmp	r5, #7
 800a3d6:	d816      	bhi.n	800a406 <main+0x572>
 800a3d8:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 800a3da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3de:	40ab      	lsls	r3, r5
 800a3e0:	4393      	bics	r3, r2
 800a3e2:	ab36      	add	r3, sp, #216	@ 0xd8
 800a3e4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800a3e8:	bf08      	it	eq
 800a3ea:	f04f 0b01 	moveq.w	fp, #1
 800a3ee:	8ade      	ldrh	r6, [r3, #22]
 800a3f0:	bf18      	it	ne
 800a3f2:	f04f 0b00 	movne.w	fp, #0
 800a3f6:	4657      	mov	r7, sl
 800a3f8:	9b05      	ldr	r3, [sp, #20]
 800a3fa:	4453      	add	r3, sl
 800a3fc:	429f      	cmp	r7, r3
 800a3fe:	d106      	bne.n	800a40e <main+0x57a>
 800a400:	3501      	adds	r5, #1
 800a402:	46ba      	mov	sl, r7
 800a404:	e599      	b.n	8009f3a <main+0xa6>
 800a406:	f04f 0b00 	mov.w	fp, #0
 800a40a:	465e      	mov	r6, fp
 800a40c:	e7f3      	b.n	800a3f6 <main+0x562>
 800a40e:	f1bb 0f00 	cmp.w	fp, #0
 800a412:	d014      	beq.n	800a43e <main+0x5aa>
 800a414:	b2b3      	uxth	r3, r6
 800a416:	2201      	movs	r2, #1
 800a418:	4639      	mov	r1, r7
 800a41a:	f20d 40d4 	addw	r0, sp, #1236	@ 0x4d4
 800a41e:	f001 ff19 	bl	800c254 <ArtNetNode::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800a422:	4a37      	ldr	r2, [pc, #220]	@ (800a500 <main+0x66c>)
 800a424:	9600      	str	r6, [sp, #0]
 800a426:	2111      	movs	r1, #17
 800a428:	f105 0341 	add.w	r3, r5, #65	@ 0x41
 800a42c:	a8a5      	add	r0, sp, #660	@ 0x294
 800a42e:	f010 fc23 	bl	801ac78 <snprintf>
 800a432:	aaa5      	add	r2, sp, #660	@ 0x294
 800a434:	4639      	mov	r1, r7
 800a436:	f20d 40d4 	addw	r0, sp, #1236	@ 0x4d4
 800a43a:	f001 fb93 	bl	800bb64 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800a43e:	3701      	adds	r7, #1
 800a440:	3601      	adds	r6, #1
 800a442:	e7d9      	b.n	800a3f8 <main+0x564>
 800a444:	f803 1b01 	strb.w	r1, [r3], #1
 800a448:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a44a:	3101      	adds	r1, #1
 800a44c:	6281      	str	r1, [r0, #40]	@ 0x28
 800a44e:	e5c5      	b.n	8009fdc <main+0x148>
 800a450:	a924      	add	r1, sp, #144	@ 0x90
 800a452:	a8a6      	add	r0, sp, #664	@ 0x298
 800a454:	f7ff f871 	bl	800953a <memcpy.isra.0>
 800a458:	f88a b055 	strb.w	fp, [sl, #85]	@ 0x55
 800a45c:	e60f      	b.n	800a07e <main+0x1ea>
 800a45e:	4649      	mov	r1, r9
 800a460:	4628      	mov	r0, r5
 800a462:	9205      	str	r2, [sp, #20]
 800a464:	f007 fd1c 	bl	8011ea0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>
 800a468:	4330      	orrs	r0, r6
 800a46a:	9a05      	ldr	r2, [sp, #20]
 800a46c:	b2c6      	uxtb	r6, r0
 800a46e:	f109 0901 	add.w	r9, r9, #1
 800a472:	e75c      	b.n	800a32e <main+0x49a>
 800a474:	4b23      	ldr	r3, [pc, #140]	@ (800a504 <main+0x670>)
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	4a23      	ldr	r2, [pc, #140]	@ (800a508 <main+0x674>)
 800a47a:	4918      	ldr	r1, [pc, #96]	@ (800a4dc <main+0x648>)
 800a47c:	4823      	ldr	r0, [pc, #140]	@ (800a50c <main+0x678>)
 800a47e:	2360      	movs	r3, #96	@ 0x60
 800a480:	f010 fbd2 	bl	801ac28 <printf>
 800a484:	e794      	b.n	800a3b0 <main+0x51c>
 800a486:	4630      	mov	r0, r6
 800a488:	f005 f9ae 	bl	800f7e8 <LLRPDevice::HandleRdmCommand()>
 800a48c:	e790      	b.n	800a3b0 <main+0x51c>
 800a48e:	4b20      	ldr	r3, [pc, #128]	@ (800a510 <main+0x67c>)
 800a490:	f8d3 1810 	ldr.w	r1, [r3, #2064]	@ 0x810
 800a494:	f411 5100 	ands.w	r1, r1, #8192	@ 0x2000
 800a498:	d098      	beq.n	800a3cc <main+0x538>
 800a49a:	f8d7 a000 	ldr.w	sl, [r7]
 800a49e:	ae7b      	add	r6, sp, #492	@ 0x1ec
 800a4a0:	f04f 0900 	mov.w	r9, #0
 800a4a4:	f6a4 3b2c 	subw	fp, r4, #2860	@ 0xb2c
 800a4a8:	f8db 30a0 	ldr.w	r3, [fp, #160]	@ 0xa0
 800a4ac:	4599      	cmp	r9, r3
 800a4ae:	d302      	bcc.n	800a4b6 <main+0x622>
 800a4b0:	f00e f952 	bl	8018758 <stack_debug_run()>
 800a4b4:	e6d4      	b.n	800a260 <main+0x3cc>
 800a4b6:	6a33      	ldr	r3, [r6, #32]
 800a4b8:	459a      	cmp	sl, r3
 800a4ba:	d304      	bcc.n	800a4c6 <main+0x632>
 800a4bc:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800a4be:	4798      	blx	r3
 800a4c0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800a4c2:	4453      	add	r3, sl
 800a4c4:	6233      	str	r3, [r6, #32]
 800a4c6:	f109 0901 	add.w	r9, r9, #1
 800a4ca:	3610      	adds	r6, #16
 800a4cc:	e7ec      	b.n	800a4a8 <main+0x614>
 800a4ce:	bf00      	nop
 800a4d0:	0801e8e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, sp, lr, pc}
 800a4d4:	2001a628 	andcs	sl, r1, r8, lsr #12
 800a4d8:	0801b831 	stmdaeq	r1, {r0, r4, r5, fp, ip, sp, pc}
 800a4dc:	0801b85b 	stmdaeq	r1, {r0, r1, r3, r4, r6, fp, ip, sp, pc}
 800a4e0:	0801b85f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, fp, ip, sp, pc}
 800a4e4:	2000c928 	andcs	ip, r0, r8, lsr #18
 800a4e8:	2000c938 	andcs	ip, r0, r8, lsr r9
 800a4ec:	2000c930 	andcs	ip, r0, r0, lsr r9
 800a4f0:	2000c934 	andcs	ip, r0, r4, lsr r9
 800a4f4:	2000c92c 	andcs	ip, r0, ip, lsr #18
 800a4f8:	2000c804 	andcs	ip, r0, r4, lsl #16
 800a4fc:	2000c800 	andcs	ip, r0, r0, lsl #16
 800a500:	0801b7c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, sp, pc}
 800a504:	0801b89d 	stmdaeq	r1, {r0, r2, r3, r4, r7, fp, ip, sp, pc}
 800a508:	0801b61b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, sp, pc}
 800a50c:	0801b887 	stmdaeq	r1, {r0, r1, r2, r7, fp, ip, sp, pc}
 800a510:	40020000 	andmi	r0, r2, r0
 800a514:	20000080 	andcs	r0, r0, r0, lsl #1
 800a518:	2000c914 	andcs	ip, r0, r4, lsl r9
 800a51c:	2000c910 	andcs	ip, r0, r0, lsl r9
 800a520:	2000c7fc 	strdcs	ip, [r0], -ip	@ <UNPREDICTABLE>

0800a524 <rdm::device::responder::factorydefaults()>:
 800a524:	b510      	push	{r4, lr}
 800a526:	4b0d      	ldr	r3, [pc, #52]	@ (800a55c <rdm::device::responder::factorydefaults()+0x38>)
 800a528:	4c0d      	ldr	r4, [pc, #52]	@ (800a560 <rdm::device::responder::factorydefaults()+0x3c>)
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	b086      	sub	sp, #24
 800a52e:	2100      	movs	r1, #0
 800a530:	f000 f996 	bl	800a860 <RemoteConfig::SetDisable(bool)>
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	2109      	movs	r1, #9
 800a538:	f00c fe04 	bl	8017144 <ConfigStore::ResetSetList(configstore::Store)>
 800a53c:	2301      	movs	r3, #1
 800a53e:	2100      	movs	r1, #0
 800a540:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	f88d 3017 	strb.w	r3, [sp, #23]
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	f10d 0317 	add.w	r3, sp, #23
 800a550:	2214      	movs	r2, #20
 800a552:	f00c fe09 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a556:	b006      	add	sp, #24
 800a558:	bd10      	pop	{r4, pc}
 800a55a:	bf00      	nop
 800a55c:	200000a8 	andcs	r0, r0, r8, lsr #1
 800a560:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800a564 <RDMSoftwareVersion::GetVersion()>:
 800a564:	4800      	ldr	r0, [pc, #0]	@ (800a568 <RDMSoftwareVersion::GetVersion()+0x4>)
 800a566:	4770      	bx	lr
 800a568:	0801c5a4 	stmdaeq	r1, {r2, r5, r7, r8, sl, lr, pc}

0800a56c <RDMSoftwareVersion::GetVersionLength()>:
 800a56c:	2003      	movs	r0, #3
 800a56e:	4770      	bx	lr

0800a570 <RDMSoftwareVersion::GetVersionId()>:
 800a570:	4800      	ldr	r0, [pc, #0]	@ (800a574 <RDMSoftwareVersion::GetVersionId()+0x4>)
 800a572:	4770      	bx	lr
 800a574:	66f19808 	ldrbtvs	r9, [r1], r8, lsl #16

0800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>:
 800a578:	b430      	push	{r4, r5}
 800a57a:	4d05      	ldr	r5, [pc, #20]	@ (800a590 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]+0x18>)
 800a57c:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800a580:	682d      	ldr	r5, [r5, #0]
 800a582:	b11d      	cbz	r5, 800a58c <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]+0x14>
 800a584:	9402      	str	r4, [sp, #8]
 800a586:	bc30      	pop	{r4, r5}
 800a588:	f00b b946 	b.w	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800a58c:	bc30      	pop	{r4, r5}
 800a58e:	4770      	bx	lr
 800a590:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800a594 <RemoteConfig::HandleDisplayGet()>:
 800a594:	4b0d      	ldr	r3, [pc, #52]	@ (800a5cc <RemoteConfig::HandleDisplayGet()+0x38>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a59a:	7d59      	ldrb	r1, [r3, #21]
 800a59c:	4d0c      	ldr	r5, [pc, #48]	@ (800a5d0 <RemoteConfig::HandleDisplayGet()+0x3c>)
 800a59e:	4a0d      	ldr	r2, [pc, #52]	@ (800a5d4 <RemoteConfig::HandleDisplayGet()+0x40>)
 800a5a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d8 <RemoteConfig::HandleDisplayGet()+0x44>)
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	bf08      	it	eq
 800a5a8:	4613      	moveq	r3, r2
 800a5aa:	6828      	ldr	r0, [r5, #0]
 800a5ac:	4a0b      	ldr	r2, [pc, #44]	@ (800a5dc <RemoteConfig::HandleDisplayGet()+0x48>)
 800a5ae:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a5b2:	f010 fb61 	bl	801ac78 <snprintf>
 800a5b6:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	4602      	mov	r2, r0
 800a5be:	69a3      	ldr	r3, [r4, #24]
 800a5c0:	6829      	ldr	r1, [r5, #0]
 800a5c2:	6960      	ldr	r0, [r4, #20]
 800a5c4:	f7ff ffd8 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a5c8:	b003      	add	sp, #12
 800a5ca:	bd30      	pop	{r4, r5, pc}
 800a5cc:	2000cc4c 	andcs	ip, r0, ip, asr #24
 800a5d0:	20000080 	andcs	r0, r0, r0, lsl #1
 800a5d4:	0801b8b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, fp, ip, sp, pc}
 800a5d8:	0801b9f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, fp, ip, sp, pc}
 800a5dc:	0801b8b8 	stmdaeq	r1, {r3, r4, r5, r7, fp, ip, sp, pc}

0800a5e0 <RemoteConfig::HandleUptime()>:
 800a5e0:	7bc3      	ldrb	r3, [r0, #15]
 800a5e2:	b1ab      	cbz	r3, 800a610 <RemoteConfig::HandleUptime()+0x30>
 800a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a614 <RemoteConfig::HandleUptime()+0x34>)
 800a5e8:	4d0b      	ldr	r5, [pc, #44]	@ (800a618 <RemoteConfig::HandleUptime()+0x38>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	4a0b      	ldr	r2, [pc, #44]	@ (800a61c <RemoteConfig::HandleUptime()+0x3c>)
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a5f4:	6828      	ldr	r0, [r5, #0]
 800a5f6:	f010 fb3f 	bl	801ac78 <snprintf>
 800a5fa:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	4602      	mov	r2, r0
 800a602:	69a3      	ldr	r3, [r4, #24]
 800a604:	6829      	ldr	r1, [r5, #0]
 800a606:	6960      	ldr	r0, [r4, #20]
 800a608:	f7ff ffb6 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a60c:	b003      	add	sp, #12
 800a60e:	bd30      	pop	{r4, r5, pc}
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	2001a620 	andcs	sl, r1, r0, lsr #12
 800a618:	20000080 	andcs	r0, r0, r0, lsl #1
 800a61c:	0801b8c4 	stmdaeq	r1, {r2, r6, r7, fp, ip, sp, pc}

0800a620 <RemoteConfig::HandleVersion()>:
 800a620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a622:	4d0a      	ldr	r5, [pc, #40]	@ (800a64c <RemoteConfig::HandleVersion()+0x2c>)
 800a624:	4b0a      	ldr	r3, [pc, #40]	@ (800a650 <RemoteConfig::HandleVersion()+0x30>)
 800a626:	4a0b      	ldr	r2, [pc, #44]	@ (800a654 <RemoteConfig::HandleVersion()+0x34>)
 800a628:	4604      	mov	r4, r0
 800a62a:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a62e:	6828      	ldr	r0, [r5, #0]
 800a630:	f010 fb22 	bl	801ac78 <snprintf>
 800a634:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	4602      	mov	r2, r0
 800a63c:	69a3      	ldr	r3, [r4, #24]
 800a63e:	6829      	ldr	r1, [r5, #0]
 800a640:	6960      	ldr	r0, [r4, #20]
 800a642:	f7ff ff99 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a646:	b003      	add	sp, #12
 800a648:	bd30      	pop	{r4, r5, pc}
 800a64a:	bf00      	nop
 800a64c:	20000080 	andcs	r0, r0, r0, lsl #1
 800a650:	2000cce0 	andcs	ip, r0, r0, ror #25
 800a654:	0801b8d1 	stmdaeq	r1, {r0, r4, r6, r7, fp, ip, sp, pc}

0800a658 <RemoteConfig::HandleTftpGet()>:
 800a658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a65a:	4604      	mov	r4, r0
 800a65c:	4d0d      	ldr	r5, [pc, #52]	@ (800a694 <RemoteConfig::HandleTftpGet()+0x3c>)
 800a65e:	f000 fd21 	bl	800b0a4 <RemoteConfig::PlatformHandleTftpGet()>
 800a662:	f894 1020 	ldrb.w	r1, [r4, #32]
 800a666:	4a0c      	ldr	r2, [pc, #48]	@ (800a698 <RemoteConfig::HandleTftpGet()+0x40>)
 800a668:	4b0c      	ldr	r3, [pc, #48]	@ (800a69c <RemoteConfig::HandleTftpGet()+0x44>)
 800a66a:	6828      	ldr	r0, [r5, #0]
 800a66c:	2900      	cmp	r1, #0
 800a66e:	bf18      	it	ne
 800a670:	4613      	movne	r3, r2
 800a672:	4a0b      	ldr	r2, [pc, #44]	@ (800a6a0 <RemoteConfig::HandleTftpGet()+0x48>)
 800a674:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a678:	f010 fafe 	bl	801ac78 <snprintf>
 800a67c:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	4602      	mov	r2, r0
 800a684:	69a3      	ldr	r3, [r4, #24]
 800a686:	6829      	ldr	r1, [r5, #0]
 800a688:	6960      	ldr	r0, [r4, #20]
 800a68a:	f7ff ff75 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a68e:	b003      	add	sp, #12
 800a690:	bd30      	pop	{r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	20000080 	andcs	r0, r0, r0, lsl #1
 800a698:	0801b8b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, fp, ip, sp, pc}
 800a69c:	0801b9f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, fp, ip, sp, pc}
 800a6a0:	0801b8dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, fp, ip, sp, pc}

0800a6a4 <RemoteConfig::HandleList()>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	6801      	ldr	r1, [r0, #0]
 800a6aa:	4a23      	ldr	r2, [pc, #140]	@ (800a738 <RemoteConfig::HandleList()+0x94>)
 800a6ac:	4b23      	ldr	r3, [pc, #140]	@ (800a73c <RemoteConfig::HandleList()+0x98>)
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	2012      	movs	r0, #18
 800a6b2:	fb00 2201 	mla	r2, r0, r1, r2
 800a6b6:	6860      	ldr	r0, [r4, #4]
 800a6b8:	4921      	ldr	r1, [pc, #132]	@ (800a740 <RemoteConfig::HandleList()+0x9c>)
 800a6ba:	681d      	ldr	r5, [r3, #0]
 800a6bc:	4b21      	ldr	r3, [pc, #132]	@ (800a744 <RemoteConfig::HandleList()+0xa0>)
 800a6be:	f04f 0e0c 	mov.w	lr, #12
 800a6c2:	fb0e 1100 	mla	r1, lr, r0, r1
 800a6c6:	4820      	ldr	r0, [pc, #128]	@ (800a748 <RemoteConfig::HandleList()+0xa4>)
 800a6c8:	681e      	ldr	r6, [r3, #0]
 800a6ca:	f890 8009 	ldrb.w	r8, [r0, #9]
 800a6ce:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800a6d2:	b2f3      	uxtb	r3, r6
 800a6d4:	f3c6 2707 	ubfx	r7, r6, #8, #8
 800a6d8:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800a6dc:	b088      	sub	sp, #32
 800a6de:	3507      	adds	r5, #7
 800a6e0:	0e36      	lsrs	r6, r6, #24
 800a6e2:	f1b8 0f00 	cmp.w	r8, #0
 800a6e6:	d019      	beq.n	800a71c <RemoteConfig::HandleList()+0x78>
 800a6e8:	3009      	adds	r0, #9
 800a6ea:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800a6ee:	e9cd e005 	strd	lr, r0, [sp, #20]
 800a6f2:	e9cd c601 	strd	ip, r6, [sp, #4]
 800a6f6:	4a15      	ldr	r2, [pc, #84]	@ (800a74c <RemoteConfig::HandleList()+0xa8>)
 800a6f8:	9700      	str	r7, [sp, #0]
 800a6fa:	f240 5184 	movw	r1, #1412	@ 0x584
 800a6fe:	4628      	mov	r0, r5
 800a700:	f010 faba 	bl	801ac78 <snprintf>
 800a704:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a708:	9300      	str	r3, [sp, #0]
 800a70a:	4602      	mov	r2, r0
 800a70c:	69a3      	ldr	r3, [r4, #24]
 800a70e:	6960      	ldr	r0, [r4, #20]
 800a710:	4629      	mov	r1, r5
 800a712:	f7ff ff31 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a716:	b008      	add	sp, #32
 800a718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a71c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 800a720:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800a724:	e9cd 7c00 	strd	r7, ip, [sp]
 800a728:	4a09      	ldr	r2, [pc, #36]	@ (800a750 <RemoteConfig::HandleList()+0xac>)
 800a72a:	f240 5184 	movw	r1, #1412	@ 0x584
 800a72e:	4628      	mov	r0, r5
 800a730:	f010 faa2 	bl	801ac78 <snprintf>
 800a734:	e7e6      	b.n	800a704 <RemoteConfig::HandleList()+0x60>
 800a736:	bf00      	nop
 800a738:	0801c644 	stmdaeq	r1, {r2, r6, r9, sl, lr, pc}
 800a73c:	20000080 	andcs	r0, r0, r0, lsl #1
 800a740:	0801c5a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, lr, pc}
 800a744:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800a748:	20000084 	andcs	r0, r0, r4, lsl #1
 800a74c:	0801b8e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, fp, ip, sp, pc}
 800a750:	0801b8fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, fp, ip, sp, pc}

0800a754 <RemoteConfig::HandleDisplaySet()>:
 800a754:	b508      	push	{r3, lr}
 800a756:	69c3      	ldr	r3, [r0, #28]
 800a758:	2b09      	cmp	r3, #9
 800a75a:	d10a      	bne.n	800a772 <RemoteConfig::HandleDisplaySet()+0x1e>
 800a75c:	4b05      	ldr	r3, [pc, #20]	@ (800a774 <RemoteConfig::HandleDisplaySet()+0x20>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	7a59      	ldrb	r1, [r3, #9]
 800a762:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a766:	4259      	negs	r1, r3
 800a768:	4159      	adcs	r1, r3
 800a76a:	4b03      	ldr	r3, [pc, #12]	@ (800a778 <RemoteConfig::HandleDisplaySet()+0x24>)
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	f7fe ff8d 	bl	800968c <Display::SetSleep(bool)>
 800a772:	bd08      	pop	{r3, pc}
 800a774:	20000080 	andcs	r0, r0, r0, lsl #1
 800a778:	2000cc4c 	andcs	ip, r0, ip, asr #24

0800a77c <RemoteConfig::HandleTftpSet()>:
 800a77c:	69c3      	ldr	r3, [r0, #28]
 800a77e:	2b06      	cmp	r3, #6
 800a780:	d115      	bne.n	800a7ae <RemoteConfig::HandleTftpSet()+0x32>
 800a782:	b510      	push	{r4, lr}
 800a784:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <RemoteConfig::HandleTftpSet()+0x34>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	799b      	ldrb	r3, [r3, #6]
 800a78a:	2b30      	cmp	r3, #48	@ 0x30
 800a78c:	bf14      	ite	ne
 800a78e:	2301      	movne	r3, #1
 800a790:	2300      	moveq	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	f880 3020 	strb.w	r3, [r0, #32]
 800a798:	d004      	beq.n	800a7a4 <RemoteConfig::HandleTftpSet()+0x28>
 800a79a:	4b06      	ldr	r3, [pc, #24]	@ (800a7b4 <RemoteConfig::HandleTftpSet()+0x38>)
 800a79c:	2100      	movs	r1, #0
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	f7fe ff74 	bl	800968c <Display::SetSleep(bool)>
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7aa:	f000 bc57 	b.w	800b05c <RemoteConfig::PlatformHandleTftpSet()>
 800a7ae:	4770      	bx	lr
 800a7b0:	20000080 	andcs	r0, r0, r0, lsl #1
 800a7b4:	2000cc4c 	andcs	ip, r0, ip, asr #24

0800a7b8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)>:
 800a7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	4604      	mov	r4, r0
 800a7be:	e9c0 1200 	strd	r1, r2, [r0]
 800a7c2:	6083      	str	r3, [r0, #8]
 800a7c4:	60c5      	str	r5, [r0, #12]
 800a7c6:	8205      	strh	r5, [r0, #16]
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7cc:	e9c4 0505 	strd	r0, r5, [r4, #20]
 800a7d0:	4f13      	ldr	r7, [pc, #76]	@ (800a820 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x68>)
 800a7d2:	4814      	ldr	r0, [pc, #80]	@ (800a824 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x6c>)
 800a7d4:	4e14      	ldr	r6, [pc, #80]	@ (800a828 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x70>)
 800a7d6:	6004      	str	r4, [r0, #0]
 800a7d8:	6978      	ldr	r0, [r7, #20]
 800a7da:	6030      	str	r0, [r6, #0]
 800a7dc:	8b38      	ldrh	r0, [r7, #24]
 800a7de:	61e5      	str	r5, [r4, #28]
 800a7e0:	f884 5020 	strb.w	r5, [r4, #32]
 800a7e4:	6265      	str	r5, [r4, #36]	@ 0x24
 800a7e6:	80b0      	strh	r0, [r6, #4]
 800a7e8:	f642 1005 	movw	r0, #10501	@ 0x2905
 800a7ec:	71b1      	strb	r1, [r6, #6]
 800a7ee:	71f2      	strb	r2, [r6, #7]
 800a7f0:	7233      	strb	r3, [r6, #8]
 800a7f2:	7275      	strb	r5, [r6, #9]
 800a7f4:	f00a ffb8 	bl	8015768 <net::udp_begin(unsigned short)>
 800a7f8:	6160      	str	r0, [r4, #20]
 800a7fa:	480c      	ldr	r0, [pc, #48]	@ (800a82c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x74>)
 800a7fc:	9500      	str	r5, [sp, #0]
 800a7fe:	462b      	mov	r3, r5
 800a800:	462a      	mov	r2, r5
 800a802:	4629      	mov	r1, r5
 800a804:	6800      	ldr	r0, [r0, #0]
 800a806:	f009 fb73 	bl	8013ef0 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800a80a:	2020      	movs	r0, #32
 800a80c:	f010 fc62 	bl	801b0d4 <operator new(unsigned int)>
 800a810:	4605      	mov	r5, r0
 800a812:	f000 fc55 	bl	800b0c0 <HttpDaemon::HttpDaemon()>
 800a816:	4620      	mov	r0, r4
 800a818:	6265      	str	r5, [r4, #36]	@ 0x24
 800a81a:	b003      	add	sp, #12
 800a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a81e:	bf00      	nop
 800a820:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800a824:	200000a8 	andcs	r0, r0, r8, lsr #1
 800a828:	20000084 	andcs	r0, r0, r4, lsl #1
 800a82c:	2000c924 	andcs	ip, r0, r4, lsr #18

0800a830 <RemoteConfig::GetStringNode() const>:
 800a830:	4b03      	ldr	r3, [pc, #12]	@ (800a840 <RemoteConfig::GetStringNode() const+0x10>)
 800a832:	7998      	ldrb	r0, [r3, #6]
 800a834:	4b03      	ldr	r3, [pc, #12]	@ (800a844 <RemoteConfig::GetStringNode() const+0x14>)
 800a836:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800a83a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a83e:	4770      	bx	lr
 800a840:	20000084 	andcs	r0, r0, r4, lsl #1
 800a844:	0801c644 	stmdaeq	r1, {r2, r6, r9, sl, lr, pc}

0800a848 <RemoteConfig::GetStringOutput() const>:
 800a848:	4b03      	ldr	r3, [pc, #12]	@ (800a858 <RemoteConfig::GetStringOutput() const+0x10>)
 800a84a:	79d8      	ldrb	r0, [r3, #7]
 800a84c:	4b03      	ldr	r3, [pc, #12]	@ (800a85c <RemoteConfig::GetStringOutput() const+0x14>)
 800a84e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a852:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a856:	4770      	bx	lr
 800a858:	20000084 	andcs	r0, r0, r4, lsl #1
 800a85c:	0801c5a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, lr, pc}

0800a860 <RemoteConfig::SetDisable(bool)>:
 800a860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a862:	7b06      	ldrb	r6, [r0, #12]
 800a864:	4605      	mov	r5, r0
 800a866:	b181      	cbz	r1, 800a88a <RemoteConfig::SetDisable(bool)+0x2a>
 800a868:	b96e      	cbnz	r6, 800a886 <RemoteConfig::SetDisable(bool)+0x26>
 800a86a:	f642 1005 	movw	r0, #10501	@ 0x2905
 800a86e:	f00a ff91 	bl	8015794 <net::udp_end(unsigned short)>
 800a872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a876:	616b      	str	r3, [r5, #20]
 800a878:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b0 <RemoteConfig::SetDisable(bool)+0x50>)
 800a87a:	4631      	mov	r1, r6
 800a87c:	6818      	ldr	r0, [r3, #0]
 800a87e:	f009 fb1b 	bl	8013eb8 <MDNS::ServiceRecordDelete(mdns::Services)>
 800a882:	2301      	movs	r3, #1
 800a884:	732b      	strb	r3, [r5, #12]
 800a886:	b002      	add	sp, #8
 800a888:	bd70      	pop	{r4, r5, r6, pc}
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	d0fb      	beq.n	800a886 <RemoteConfig::SetDisable(bool)+0x26>
 800a88e:	f642 1005 	movw	r0, #10501	@ 0x2905
 800a892:	460c      	mov	r4, r1
 800a894:	f00a ff68 	bl	8015768 <net::udp_begin(unsigned short)>
 800a898:	6168      	str	r0, [r5, #20]
 800a89a:	4805      	ldr	r0, [pc, #20]	@ (800a8b0 <RemoteConfig::SetDisable(bool)+0x50>)
 800a89c:	9400      	str	r4, [sp, #0]
 800a89e:	6800      	ldr	r0, [r0, #0]
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	f009 fb23 	bl	8013ef0 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800a8aa:	732c      	strb	r4, [r5, #12]
 800a8ac:	e7eb      	b.n	800a886 <RemoteConfig::SetDisable(bool)+0x26>
 800a8ae:	bf00      	nop
 800a8b0:	2000c924 	andcs	ip, r0, r4, lsr #18

0800a8b4 <RemoteConfig::SetDisplayName(char const*)>:
 800a8b4:	b508      	push	{r3, lr}
 800a8b6:	4809      	ldr	r0, [pc, #36]	@ (800a8dc <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800a8b8:	3901      	subs	r1, #1
 800a8ba:	2217      	movs	r2, #23
 800a8bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a8c0:	b11b      	cbz	r3, 800a8ca <RemoteConfig::SetDisplayName(char const*)+0x16>
 800a8c2:	3a01      	subs	r2, #1
 800a8c4:	f800 3b01 	strb.w	r3, [r0], #1
 800a8c8:	d1f8      	bne.n	800a8bc <RemoteConfig::SetDisplayName(char const*)+0x8>
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	f00f fec8 	bl	801a660 <memset>
 800a8d0:	4b03      	ldr	r3, [pc, #12]	@ (800a8e0 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2020 	strb.w	r2, [r3, #32]
 800a8d8:	bd08      	pop	{r3, pc}
 800a8da:	bf00      	nop
 800a8dc:	2000008d 	andcs	r0, r0, sp, lsl #1
 800a8e0:	20000084 	andcs	r0, r0, r4, lsl #1

0800a8e4 <RemoteConfig::HandleGet(void*, unsigned long)>:
 800a8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8e6:	4f29      	ldr	r7, [pc, #164]	@ (800a98c <RemoteConfig::HandleGet(void*, unsigned long)+0xa8>)
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	b9a9      	cbnz	r1, 800a91e <RemoteConfig::HandleGet(void*, unsigned long)+0x3a>
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
 800a8f8:	aa03      	add	r2, sp, #12
 800a8fa:	3105      	adds	r1, #5
 800a8fc:	9303      	str	r3, [sp, #12]
 800a8fe:	f000 fb81 	bl	800b004 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800a902:	1e03      	subs	r3, r0, #0
 800a904:	da1b      	bge.n	800a93e <RemoteConfig::HandleGet(void*, unsigned long)+0x5a>
 800a906:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	69a3      	ldr	r3, [r4, #24]
 800a90e:	4920      	ldr	r1, [pc, #128]	@ (800a990 <RemoteConfig::HandleGet(void*, unsigned long)+0xac>)
 800a910:	6960      	ldr	r0, [r4, #20]
 800a912:	220b      	movs	r2, #11
 800a914:	f7ff fe30 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a918:	200c      	movs	r0, #12
 800a91a:	b005      	add	sp, #20
 800a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91e:	9203      	str	r2, [sp, #12]
 800a920:	aa03      	add	r2, sp, #12
 800a922:	6039      	str	r1, [r7, #0]
 800a924:	f000 fb6e 	bl	800b004 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800a928:	1e03      	subs	r3, r0, #0
 800a92a:	da08      	bge.n	800a93e <RemoteConfig::HandleGet(void*, unsigned long)+0x5a>
 800a92c:	2e0b      	cmp	r6, #11
 800a92e:	4632      	mov	r2, r6
 800a930:	4917      	ldr	r1, [pc, #92]	@ (800a990 <RemoteConfig::HandleGet(void*, unsigned long)+0xac>)
 800a932:	bf28      	it	cs
 800a934:	220b      	movcs	r2, #11
 800a936:	4628      	mov	r0, r5
 800a938:	f00f fe70 	bl	801a61c <memcpy>
 800a93c:	e7ec      	b.n	800a918 <RemoteConfig::HandleGet(void*, unsigned long)+0x34>
 800a93e:	4915      	ldr	r1, [pc, #84]	@ (800a994 <RemoteConfig::HandleGet(void*, unsigned long)+0xb0>)
 800a940:	2218      	movs	r2, #24
 800a942:	4353      	muls	r3, r2
 800a944:	18ca      	adds	r2, r1, r3
 800a946:	58cb      	ldr	r3, [r1, r3]
 800a948:	6852      	ldr	r2, [r2, #4]
 800a94a:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800a94e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800a952:	07d2      	lsls	r2, r2, #31
 800a954:	bf48      	it	mi
 800a956:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800a95a:	a903      	add	r1, sp, #12
 800a95c:	bf48      	it	mi
 800a95e:	58d3      	ldrmi	r3, [r2, r3]
 800a960:	4798      	blx	r3
 800a962:	b955      	cbnz	r5, 800a97a <RemoteConfig::HandleGet(void*, unsigned long)+0x96>
 800a964:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	69a3      	ldr	r3, [r4, #24]
 800a96c:	9a03      	ldr	r2, [sp, #12]
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6960      	ldr	r0, [r4, #20]
 800a972:	f7ff fe01 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a976:	9803      	ldr	r0, [sp, #12]
 800a978:	e7cf      	b.n	800a91a <RemoteConfig::HandleGet(void*, unsigned long)+0x36>
 800a97a:	9a03      	ldr	r2, [sp, #12]
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	42b2      	cmp	r2, r6
 800a980:	bf28      	it	cs
 800a982:	4632      	movcs	r2, r6
 800a984:	4628      	mov	r0, r5
 800a986:	f00f fe54 	bl	801a632 <memmove>
 800a98a:	e7f4      	b.n	800a976 <RemoteConfig::HandleGet(void*, unsigned long)+0x92>
 800a98c:	20000080 	andcs	r0, r0, r0, lsl #1
 800a990:	0801b914 	stmdaeq	r1, {r2, r4, r8, fp, ip, sp, pc}
 800a994:	0801c7f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sl, lr, pc}

0800a998 <RemoteConfig::HandleGetNoParams()>:
 800a998:	2200      	movs	r2, #0
 800a99a:	4611      	mov	r1, r2
 800a99c:	f7ff bfa2 	b.w	800a8e4 <RemoteConfig::HandleGet(void*, unsigned long)>

0800a9a0 <RemoteConfig::HandleGetRconfigTxt(unsigned long&)>:
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	b08a      	sub	sp, #40	@ 0x28
 800a9a4:	a802      	add	r0, sp, #8
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	f000 f9c6 	bl	800ad38 <RemoteConfigParams::RemoteConfigParams()>
 800a9ac:	4a05      	ldr	r2, [pc, #20]	@ (800a9c4 <RemoteConfig::HandleGetRconfigTxt(unsigned long&)+0x24>)
 800a9ae:	9400      	str	r4, [sp, #0]
 800a9b0:	6812      	ldr	r2, [r2, #0]
 800a9b2:	f240 538c 	movw	r3, #1420	@ 0x58c
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	a802      	add	r0, sp, #8
 800a9ba:	f000 fa35 	bl	800ae28 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)>
 800a9be:	b00a      	add	sp, #40	@ 0x28
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20000080 	andcs	r0, r0, r0, lsl #1

0800a9c8 <RemoteConfig::HandleGetEnvTxt(unsigned long&)>:
 800a9c8:	b513      	push	{r0, r1, r4, lr}
 800a9ca:	a801      	add	r0, sp, #4
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	f00c fc97 	bl	8017300 <EnvParams::EnvParams()>
 800a9d2:	4905      	ldr	r1, [pc, #20]	@ (800a9e8 <RemoteConfig::HandleGetEnvTxt(unsigned long&)+0x20>)
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	6809      	ldr	r1, [r1, #0]
 800a9d8:	f240 528c 	movw	r2, #1420	@ 0x58c
 800a9dc:	a801      	add	r0, sp, #4
 800a9de:	f00c fced 	bl	80173bc <EnvParams::Builder(char*, unsigned long, unsigned long&)>
 800a9e2:	b002      	add	sp, #8
 800a9e4:	bd10      	pop	{r4, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20000080 	andcs	r0, r0, r0, lsl #1

0800a9ec <RemoteConfig::HandleGetNetworkTxt(unsigned long&)>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	b09a      	sub	sp, #104	@ 0x68
 800a9f0:	a802      	add	r0, sp, #8
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f00a ffa8 	bl	8015948 <NetworkParams::NetworkParams()>
 800a9f8:	4a05      	ldr	r2, [pc, #20]	@ (800aa10 <RemoteConfig::HandleGetNetworkTxt(unsigned long&)+0x24>)
 800a9fa:	9400      	str	r4, [sp, #0]
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	f240 538c 	movw	r3, #1420	@ 0x58c
 800aa02:	2100      	movs	r1, #0
 800aa04:	a802      	add	r0, sp, #8
 800aa06:	f00b f88b 	bl	8015b20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)>
 800aa0a:	b01a      	add	sp, #104	@ 0x68
 800aa0c:	bd10      	pop	{r4, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000080 	andcs	r0, r0, r0, lsl #1

0800aa14 <RemoteConfig::HandleGetArtnetTxt(unsigned long&)>:
 800aa14:	b510      	push	{r4, lr}
 800aa16:	b0ba      	sub	sp, #232	@ 0xe8
 800aa18:	a803      	add	r0, sp, #12
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	f002 fd08 	bl	800d430 <ArtNetParams::ArtNetParams()>
 800aa20:	4a05      	ldr	r2, [pc, #20]	@ (800aa38 <RemoteConfig::HandleGetArtnetTxt(unsigned long&)+0x24>)
 800aa22:	9400      	str	r4, [sp, #0]
 800aa24:	6812      	ldr	r2, [r2, #0]
 800aa26:	f240 538c 	movw	r3, #1420	@ 0x58c
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	a803      	add	r0, sp, #12
 800aa2e:	f002 ff23 	bl	800d878 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)>
 800aa32:	b03a      	add	sp, #232	@ 0xe8
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	20000080 	andcs	r0, r0, r0, lsl #1

0800aa3c <RemoteConfig::HandleGetDevicesTxt(unsigned long&)>:
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	b08c      	sub	sp, #48	@ 0x30
 800aa40:	a802      	add	r0, sp, #8
 800aa42:	460c      	mov	r4, r1
 800aa44:	f005 fb02 	bl	801004c <PixelDmxParams::PixelDmxParams()>
 800aa48:	4a05      	ldr	r2, [pc, #20]	@ (800aa60 <RemoteConfig::HandleGetDevicesTxt(unsigned long&)+0x24>)
 800aa4a:	9400      	str	r4, [sp, #0]
 800aa4c:	6812      	ldr	r2, [r2, #0]
 800aa4e:	f240 538c 	movw	r3, #1420	@ 0x58c
 800aa52:	2100      	movs	r1, #0
 800aa54:	a802      	add	r0, sp, #8
 800aa56:	f005 fc99 	bl	801038c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)>
 800aa5a:	b00c      	add	sp, #48	@ 0x30
 800aa5c:	bd10      	pop	{r4, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000080 	andcs	r0, r0, r0, lsl #1

0800aa64 <RemoteConfig::HandleGetDisplayTxt(unsigned long&)>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	b08c      	sub	sp, #48	@ 0x30
 800aa68:	a803      	add	r0, sp, #12
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	f00c f80c 	bl	8016a88 <DisplayUdfParams::DisplayUdfParams()>
 800aa70:	4a05      	ldr	r2, [pc, #20]	@ (800aa88 <RemoteConfig::HandleGetDisplayTxt(unsigned long&)+0x24>)
 800aa72:	9400      	str	r4, [sp, #0]
 800aa74:	6812      	ldr	r2, [r2, #0]
 800aa76:	f240 538c 	movw	r3, #1420	@ 0x58c
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	a803      	add	r0, sp, #12
 800aa7e:	f00c f8a5 	bl	8016bcc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)>
 800aa82:	b00c      	add	sp, #48	@ 0x30
 800aa84:	bd10      	pop	{r4, pc}
 800aa86:	bf00      	nop
 800aa88:	20000080 	andcs	r0, r0, r0, lsl #1

0800aa8c <RemoteConfig::HandleSet(void*, unsigned long)>:
 800aa8c:	b530      	push	{r4, r5, lr}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	4604      	mov	r4, r0
 800aa92:	9201      	str	r2, [sp, #4]
 800aa94:	b9d1      	cbnz	r1, 800aacc <RemoteConfig::HandleSet(void*, unsigned long)+0x40>
 800aa96:	f240 538b 	movw	r3, #1419	@ 0x58b
 800aa9a:	9303      	str	r3, [sp, #12]
 800aa9c:	4b19      	ldr	r3, [pc, #100]	@ (800ab04 <RemoteConfig::HandleSet(void*, unsigned long)+0x78>)
 800aa9e:	6819      	ldr	r1, [r3, #0]
 800aaa0:	aa03      	add	r2, sp, #12
 800aaa2:	3101      	adds	r1, #1
 800aaa4:	f000 faae 	bl	800b004 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	db0d      	blt.n	800aac8 <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800aaac:	4b16      	ldr	r3, [pc, #88]	@ (800ab08 <RemoteConfig::HandleSet(void*, unsigned long)+0x7c>)
 800aaae:	2218      	movs	r2, #24
 800aab0:	fb02 3300 	mla	r3, r2, r0, r3
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	1051      	asrs	r1, r2, #1
 800aaba:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800aabe:	07d2      	lsls	r2, r2, #31
 800aac0:	bf44      	itt	mi
 800aac2:	5862      	ldrmi	r2, [r4, r1]
 800aac4:	58d3      	ldrmi	r3, [r2, r3]
 800aac6:	4798      	blx	r3
 800aac8:	b005      	add	sp, #20
 800aaca:	bd30      	pop	{r4, r5, pc}
 800aacc:	f240 538c 	movw	r3, #1420	@ 0x58c
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d8f9      	bhi.n	800aac8 <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800aad4:	4b0d      	ldr	r3, [pc, #52]	@ (800ab0c <RemoteConfig::HandleSet(void*, unsigned long)+0x80>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	460d      	mov	r5, r1
 800aada:	07d9      	lsls	r1, r3, #31
 800aadc:	d50b      	bpl.n	800aaf6 <RemoteConfig::HandleSet(void*, unsigned long)+0x6a>
 800aade:	782b      	ldrb	r3, [r5, #0]
 800aae0:	2b7b      	cmp	r3, #123	@ 0x7b
 800aae2:	d108      	bne.n	800aaf6 <RemoteConfig::HandleSet(void*, unsigned long)+0x6a>
 800aae4:	1e51      	subs	r1, r2, #1
 800aae6:	b289      	uxth	r1, r1
 800aae8:	2200      	movs	r2, #0
 800aaea:	4628      	mov	r0, r5
 800aaec:	f00c fcba 	bl	8017464 <properties::convert_json_file(char*, unsigned long, bool)>
 800aaf0:	1e02      	subs	r2, r0, #0
 800aaf2:	dde9      	ble.n	800aac8 <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	4b03      	ldr	r3, [pc, #12]	@ (800ab04 <RemoteConfig::HandleSet(void*, unsigned long)+0x78>)
 800aaf8:	61e2      	str	r2, [r4, #28]
 800aafa:	601d      	str	r5, [r3, #0]
 800aafc:	aa01      	add	r2, sp, #4
 800aafe:	1c69      	adds	r1, r5, #1
 800ab00:	4620      	mov	r0, r4
 800ab02:	e7cf      	b.n	800aaa4 <RemoteConfig::HandleSet(void*, unsigned long)+0x18>
 800ab04:	20000080 	andcs	r0, r0, r0, lsl #1
 800ab08:	0801c7f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sl, lr, pc}
 800ab0c:	2000cc49 	andcs	ip, r0, r9, asr #24

0800ab10 <RemoteConfig::HandleRequest()>:
 800ab10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ab14:	69c2      	ldr	r2, [r0, #28]
 800ab16:	4b3f      	ldr	r3, [pc, #252]	@ (800ac14 <RemoteConfig::HandleRequest()+0x104>)
 800ab18:	3a01      	subs	r2, #1
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	5c99      	ldrb	r1, [r3, r2]
 800ab1e:	290a      	cmp	r1, #10
 800ab20:	bf08      	it	eq
 800ab22:	61c2      	streq	r2, [r0, #28]
 800ab24:	7819      	ldrb	r1, [r3, #0]
 800ab26:	293f      	cmp	r1, #63	@ 0x3f
 800ab28:	d13c      	bne.n	800aba4 <RemoteConfig::HandleRequest()+0x94>
 800ab2a:	69c4      	ldr	r4, [r0, #28]
 800ab2c:	493a      	ldr	r1, [pc, #232]	@ (800ac18 <RemoteConfig::HandleRequest()+0x108>)
 800ab2e:	3c01      	subs	r4, #1
 800ab30:	61c4      	str	r4, [r0, #28]
 800ab32:	2200      	movs	r2, #0
 800ab34:	468c      	mov	ip, r1
 800ab36:	7b8e      	ldrb	r6, [r1, #14]
 800ab38:	898d      	ldrh	r5, [r1, #12]
 800ab3a:	b18e      	cbz	r6, 800ab60 <RemoteConfig::HandleRequest()+0x50>
 800ab3c:	42ac      	cmp	r4, r5
 800ab3e:	d811      	bhi.n	800ab64 <RemoteConfig::HandleRequest()+0x54>
 800ab40:	3201      	adds	r2, #1
 800ab42:	2a08      	cmp	r2, #8
 800ab44:	f101 0110 	add.w	r1, r1, #16
 800ab48:	d1f5      	bne.n	800ab36 <RemoteConfig::HandleRequest()+0x26>
 800ab4a:	f642 1305 	movw	r3, #10501	@ 0x2905
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	6983      	ldr	r3, [r0, #24]
 800ab52:	4932      	ldr	r1, [pc, #200]	@ (800ac1c <RemoteConfig::HandleRequest()+0x10c>)
 800ab54:	6940      	ldr	r0, [r0, #20]
 800ab56:	f7ff fd0f 	bl	800a578 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800ab5a:	b002      	add	sp, #8
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	42ac      	cmp	r4, r5
 800ab62:	d1ed      	bne.n	800ab40 <RemoteConfig::HandleRequest()+0x30>
 800ab64:	688e      	ldr	r6, [r1, #8]
 800ab66:	461f      	mov	r7, r3
 800ab68:	3e01      	subs	r6, #1
 800ab6a:	441d      	add	r5, r3
 800ab6c:	42af      	cmp	r7, r5
 800ab6e:	d10f      	bne.n	800ab90 <RemoteConfig::HandleRequest()+0x80>
 800ab70:	0113      	lsls	r3, r2, #4
 800ab72:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 800ab76:	f85c 3003 	ldr.w	r3, [ip, r3]
 800ab7a:	6852      	ldr	r2, [r2, #4]
 800ab7c:	1054      	asrs	r4, r2, #1
 800ab7e:	eb00 0162 	add.w	r1, r0, r2, asr #1
 800ab82:	07d2      	lsls	r2, r2, #31
 800ab84:	d40b      	bmi.n	800ab9e <RemoteConfig::HandleRequest()+0x8e>
 800ab86:	4608      	mov	r0, r1
 800ab88:	b002      	add	sp, #8
 800ab8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8e:	4718      	bx	r3
 800ab90:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800ab94:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800ab98:	45f0      	cmp	r8, lr
 800ab9a:	d0e7      	beq.n	800ab6c <RemoteConfig::HandleRequest()+0x5c>
 800ab9c:	e7d0      	b.n	800ab40 <RemoteConfig::HandleRequest()+0x30>
 800ab9e:	5902      	ldr	r2, [r0, r4]
 800aba0:	58d3      	ldr	r3, [r2, r3]
 800aba2:	e7f0      	b.n	800ab86 <RemoteConfig::HandleRequest()+0x76>
 800aba4:	7b42      	ldrb	r2, [r0, #13]
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	d1d7      	bne.n	800ab5a <RemoteConfig::HandleRequest()+0x4a>
 800abaa:	2923      	cmp	r1, #35	@ 0x23
 800abac:	d105      	bne.n	800abba <RemoteConfig::HandleRequest()+0xaa>
 800abae:	4611      	mov	r1, r2
 800abb0:	b002      	add	sp, #8
 800abb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abb6:	f7ff bf69 	b.w	800aa8c <RemoteConfig::HandleSet(void*, unsigned long)>
 800abba:	2921      	cmp	r1, #33	@ 0x21
 800abbc:	d1cd      	bne.n	800ab5a <RemoteConfig::HandleRequest()+0x4a>
 800abbe:	69c2      	ldr	r2, [r0, #28]
 800abc0:	3a01      	subs	r2, #1
 800abc2:	2a05      	cmp	r2, #5
 800abc4:	61c2      	str	r2, [r0, #28]
 800abc6:	d91e      	bls.n	800ac06 <RemoteConfig::HandleRequest()+0xf6>
 800abc8:	4d15      	ldr	r5, [pc, #84]	@ (800ac20 <RemoteConfig::HandleRequest()+0x110>)
 800abca:	4619      	mov	r1, r3
 800abcc:	1d5e      	adds	r6, r3, #5
 800abce:	461c      	mov	r4, r3
 800abd0:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800abd4:	f815 7b01 	ldrb.w	r7, [r5], #1
 800abd8:	45bc      	cmp	ip, r7
 800abda:	d112      	bne.n	800ac02 <RemoteConfig::HandleRequest()+0xf2>
 800abdc:	42b4      	cmp	r4, r6
 800abde:	d1f7      	bne.n	800abd0 <RemoteConfig::HandleRequest()+0xc0>
 800abe0:	2300      	movs	r3, #0
 800abe2:	4a10      	ldr	r2, [pc, #64]	@ (800ac24 <RemoteConfig::HandleRequest()+0x114>)
 800abe4:	011b      	lsls	r3, r3, #4
 800abe6:	58d3      	ldr	r3, [r2, r3]
 800abe8:	e7ce      	b.n	800ab88 <RemoteConfig::HandleRequest()+0x78>
 800abea:	4a0f      	ldr	r2, [pc, #60]	@ (800ac28 <RemoteConfig::HandleRequest()+0x118>)
 800abec:	3308      	adds	r3, #8
 800abee:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800abf2:	f812 4b01 	ldrb.w	r4, [r2], #1
 800abf6:	42a5      	cmp	r5, r4
 800abf8:	d105      	bne.n	800ac06 <RemoteConfig::HandleRequest()+0xf6>
 800abfa:	4299      	cmp	r1, r3
 800abfc:	d1f7      	bne.n	800abee <RemoteConfig::HandleRequest()+0xde>
 800abfe:	2301      	movs	r3, #1
 800ac00:	e7ef      	b.n	800abe2 <RemoteConfig::HandleRequest()+0xd2>
 800ac02:	2a08      	cmp	r2, #8
 800ac04:	d8f1      	bhi.n	800abea <RemoteConfig::HandleRequest()+0xda>
 800ac06:	f642 1305 	movw	r3, #10501	@ 0x2905
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	6983      	ldr	r3, [r0, #24]
 800ac0e:	4907      	ldr	r1, [pc, #28]	@ (800ac2c <RemoteConfig::HandleRequest()+0x11c>)
 800ac10:	2208      	movs	r2, #8
 800ac12:	e79f      	b.n	800ab54 <RemoteConfig::HandleRequest()+0x44>
 800ac14:	20000080 	andcs	r0, r0, r0, lsl #1
 800ac18:	0801c750 	stmdaeq	r1, {r4, r6, r8, r9, sl, lr, pc}
 800ac1c:	0801b920 	stmdaeq	r1, {r5, r8, fp, ip, sp, pc}
 800ac20:	0801b929 	stmdaeq	r1, {r0, r3, r5, r8, fp, ip, sp, pc}
 800ac24:	0801c730 	stmdaeq	r1, {r4, r5, r8, r9, sl, lr, pc}
 800ac28:	0801b92f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 800ac2c:	0801b938 	stmdaeq	r1, {r3, r4, r5, r8, fp, ip, sp, pc}

0800ac30 <RemoteConfig::HandleSetRconfigTxt()>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	b088      	sub	sp, #32
 800ac34:	4604      	mov	r4, r0
 800ac36:	4668      	mov	r0, sp
 800ac38:	f000 f87e 	bl	800ad38 <RemoteConfigParams::RemoteConfigParams()>
 800ac3c:	4b05      	ldr	r3, [pc, #20]	@ (800ac54 <RemoteConfig::HandleSetRconfigTxt()+0x24>)
 800ac3e:	69e2      	ldr	r2, [r4, #28]
 800ac40:	6819      	ldr	r1, [r3, #0]
 800ac42:	4668      	mov	r0, sp
 800ac44:	f000 f88a 	bl	800ad5c <RemoteConfigParams::Load(char const*, unsigned long)>
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4668      	mov	r0, sp
 800ac4c:	f000 f98a 	bl	800af64 <RemoteConfigParams::Set(RemoteConfig*)>
 800ac50:	b008      	add	sp, #32
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	20000080 	andcs	r0, r0, r0, lsl #1

0800ac58 <RemoteConfig::HandleSetEnvTxt()>:
 800ac58:	b513      	push	{r0, r1, r4, lr}
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	a801      	add	r0, sp, #4
 800ac5e:	f00c fb4f 	bl	8017300 <EnvParams::EnvParams()>
 800ac62:	4b04      	ldr	r3, [pc, #16]	@ (800ac74 <RemoteConfig::HandleSetEnvTxt()+0x1c>)
 800ac64:	69e2      	ldr	r2, [r4, #28]
 800ac66:	6819      	ldr	r1, [r3, #0]
 800ac68:	a801      	add	r0, sp, #4
 800ac6a:	f00c fb4b 	bl	8017304 <EnvParams::LoadAndSet(char const*, unsigned long)>
 800ac6e:	b002      	add	sp, #8
 800ac70:	bd10      	pop	{r4, pc}
 800ac72:	bf00      	nop
 800ac74:	20000080 	andcs	r0, r0, r0, lsl #1

0800ac78 <RemoteConfig::HandleSetNetworkTxt()>:
 800ac78:	b510      	push	{r4, lr}
 800ac7a:	b098      	sub	sp, #96	@ 0x60
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	4668      	mov	r0, sp
 800ac80:	f00a fe62 	bl	8015948 <NetworkParams::NetworkParams()>
 800ac84:	4b03      	ldr	r3, [pc, #12]	@ (800ac94 <RemoteConfig::HandleSetNetworkTxt()+0x1c>)
 800ac86:	69e2      	ldr	r2, [r4, #28]
 800ac88:	6819      	ldr	r1, [r3, #0]
 800ac8a:	4668      	mov	r0, sp
 800ac8c:	f00a fe70 	bl	8015970 <NetworkParams::Load(char const*, unsigned long)>
 800ac90:	b018      	add	sp, #96	@ 0x60
 800ac92:	bd10      	pop	{r4, pc}
 800ac94:	20000080 	andcs	r0, r0, r0, lsl #1

0800ac98 <RemoteConfig::HandleSetArtnetTxt()>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	b0b8      	sub	sp, #224	@ 0xe0
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	a801      	add	r0, sp, #4
 800aca0:	f002 fbc6 	bl	800d430 <ArtNetParams::ArtNetParams()>
 800aca4:	4b03      	ldr	r3, [pc, #12]	@ (800acb4 <RemoteConfig::HandleSetArtnetTxt()+0x1c>)
 800aca6:	69e2      	ldr	r2, [r4, #28]
 800aca8:	6819      	ldr	r1, [r3, #0]
 800acaa:	a801      	add	r0, sp, #4
 800acac:	f002 fbec 	bl	800d488 <ArtNetParams::Load(char const*, unsigned long)>
 800acb0:	b038      	add	sp, #224	@ 0xe0
 800acb2:	bd10      	pop	{r4, pc}
 800acb4:	20000080 	andcs	r0, r0, r0, lsl #1

0800acb8 <RemoteConfig::HandleSetDevicesTxt()>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	b08a      	sub	sp, #40	@ 0x28
 800acbc:	4604      	mov	r4, r0
 800acbe:	4668      	mov	r0, sp
 800acc0:	f005 f9c4 	bl	801004c <PixelDmxParams::PixelDmxParams()>
 800acc4:	4b03      	ldr	r3, [pc, #12]	@ (800acd4 <RemoteConfig::HandleSetDevicesTxt()+0x1c>)
 800acc6:	69e2      	ldr	r2, [r4, #28]
 800acc8:	6819      	ldr	r1, [r3, #0]
 800acca:	4668      	mov	r0, sp
 800accc:	f005 fdb4 	bl	8010838 <PixelDmxParams::Load(char const*, unsigned long)>
 800acd0:	b00a      	add	sp, #40	@ 0x28
 800acd2:	bd10      	pop	{r4, pc}
 800acd4:	20000080 	andcs	r0, r0, r0, lsl #1

0800acd8 <RemoteConfig::HandleSetDisplayTxt()>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	b08a      	sub	sp, #40	@ 0x28
 800acdc:	4604      	mov	r4, r0
 800acde:	a801      	add	r0, sp, #4
 800ace0:	f00b fed2 	bl	8016a88 <DisplayUdfParams::DisplayUdfParams()>
 800ace4:	4b03      	ldr	r3, [pc, #12]	@ (800acf4 <RemoteConfig::HandleSetDisplayTxt()+0x1c>)
 800ace6:	69e2      	ldr	r2, [r4, #28]
 800ace8:	6819      	ldr	r1, [r3, #0]
 800acea:	a801      	add	r0, sp, #4
 800acec:	f00b fee4 	bl	8016ab8 <DisplayUdfParams::Load(char const*, unsigned long)>
 800acf0:	b00a      	add	sp, #40	@ 0x28
 800acf2:	bd10      	pop	{r4, pc}
 800acf4:	20000080 	andcs	r0, r0, r0, lsl #1

0800acf8 <RemoteConfig::HandleFactory()>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4b05      	ldr	r3, [pc, #20]	@ (800ad10 <RemoteConfig::HandleFactory()+0x18>)
 800acfc:	681d      	ldr	r5, [r3, #0]
 800acfe:	2400      	movs	r4, #0
 800ad00:	4621      	mov	r1, r4
 800ad02:	4628      	mov	r0, r5
 800ad04:	3401      	adds	r4, #1
 800ad06:	f00c fa1d 	bl	8017144 <ConfigStore::ResetSetList(configstore::Store)>
 800ad0a:	2c1b      	cmp	r4, #27
 800ad0c:	d1f8      	bne.n	800ad00 <RemoteConfig::HandleFactory()+0x8>
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800ad14 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>:
 800ad14:	b507      	push	{r0, r1, r2, lr}
 800ad16:	2300      	movs	r3, #0
 800ad18:	2101      	movs	r1, #1
 800ad1a:	e9cd 3100 	strd	r3, r1, [sp]
 800ad1e:	4602      	mov	r2, r0
 800ad20:	4804      	ldr	r0, [pc, #16]	@ (800ad34 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)+0x20>)
 800ad22:	2320      	movs	r3, #32
 800ad24:	6800      	ldr	r0, [r0, #0]
 800ad26:	210a      	movs	r1, #10
 800ad28:	f00c fa44 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800ad2c:	b003      	add	sp, #12
 800ad2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad32:	bf00      	nop
 800ad34:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800ad38 <RemoteConfigParams::RemoteConfigParams()>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	2100      	movs	r1, #0
 800ad40:	f00f fc8e 	bl	801a660 <memset>
 800ad44:	4620      	mov	r0, r4
 800ad46:	bd10      	pop	{r4, pc}

0800ad48 <RemoteConfigParams::Load()>:
 800ad48:	b508      	push	{r3, lr}
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	7002      	strb	r2, [r0, #0]
 800ad4e:	7042      	strb	r2, [r0, #1]
 800ad50:	7082      	strb	r2, [r0, #2]
 800ad52:	70c2      	strb	r2, [r0, #3]
 800ad54:	f7ff ffde 	bl	800ad14 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>
 800ad58:	bd08      	pop	{r3, pc}
	...

0800ad5c <RemoteConfigParams::Load(char const*, unsigned long)>:
 800ad5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad5e:	2500      	movs	r5, #0
 800ad60:	b087      	sub	sp, #28
 800ad62:	4604      	mov	r4, r0
 800ad64:	460e      	mov	r6, r1
 800ad66:	4617      	mov	r7, r2
 800ad68:	7005      	strb	r5, [r0, #0]
 800ad6a:	7045      	strb	r5, [r0, #1]
 800ad6c:	7085      	strb	r5, [r0, #2]
 800ad6e:	70c5      	strb	r5, [r0, #3]
 800ad70:	4602      	mov	r2, r0
 800ad72:	490c      	ldr	r1, [pc, #48]	@ (800ada4 <RemoteConfigParams::Load(char const*, unsigned long)+0x48>)
 800ad74:	a804      	add	r0, sp, #16
 800ad76:	f00c fcf7 	bl	8017768 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800ad7a:	463a      	mov	r2, r7
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	a804      	add	r0, sp, #16
 800ad80:	f00c fcf6 	bl	8017770 <ReadConfigFile::Read(char const*, unsigned int)>
 800ad84:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800ad88:	2320      	movs	r3, #32
 800ad8a:	4807      	ldr	r0, [pc, #28]	@ (800ada8 <RemoteConfigParams::Load(char const*, unsigned long)+0x4c>)
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	462a      	mov	r2, r5
 800ad90:	4623      	mov	r3, r4
 800ad92:	210a      	movs	r1, #10
 800ad94:	6800      	ldr	r0, [r0, #0]
 800ad96:	f00c f9e7 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800ad9a:	a804      	add	r0, sp, #16
 800ad9c:	f00c fce7 	bl	801776e <ReadConfigFile::~ReadConfigFile()>
 800ada0:	b007      	add	sp, #28
 800ada2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada4:	0800ae25 	stmdaeq	r0, {r0, r2, r5, r9, sl, fp, sp, pc}
 800ada8:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800adac <RemoteConfigParams::SetBool(unsigned char, unsigned long)>:
 800adac:	6803      	ldr	r3, [r0, #0]
 800adae:	b111      	cbz	r1, 800adb6 <RemoteConfigParams::SetBool(unsigned char, unsigned long)+0xa>
 800adb0:	4313      	orrs	r3, r2
 800adb2:	6003      	str	r3, [r0, #0]
 800adb4:	4770      	bx	lr
 800adb6:	ea23 0302 	bic.w	r3, r3, r2
 800adba:	e7fa      	b.n	800adb2 <RemoteConfigParams::SetBool(unsigned char, unsigned long)+0x6>

0800adbc <RemoteConfigParams::callbackFunction(char const*)>:
 800adbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800adc0:	4f16      	ldr	r7, [pc, #88]	@ (800ae1c <RemoteConfigParams::callbackFunction(char const*)+0x60>)
 800adc2:	4604      	mov	r4, r0
 800adc4:	460e      	mov	r6, r1
 800adc6:	2506      	movs	r5, #6
 800adc8:	3d01      	subs	r5, #1
 800adca:	d113      	bne.n	800adf4 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800adcc:	2317      	movs	r3, #23
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	4913      	ldr	r1, [pc, #76]	@ (800ae20 <RemoteConfigParams::callbackFunction(char const*)+0x64>)
 800add2:	ab01      	add	r3, sp, #4
 800add4:	f104 0208 	add.w	r2, r4, #8
 800add8:	4630      	mov	r0, r6
 800adda:	f00c fcff 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800adde:	b930      	cbnz	r0, 800adee <RemoteConfigParams::callbackFunction(char const*)+0x32>
 800ade0:	9b01      	ldr	r3, [sp, #4]
 800ade2:	4423      	add	r3, r4
 800ade4:	721d      	strb	r5, [r3, #8]
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	f043 0310 	orr.w	r3, r3, #16
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	b002      	add	sp, #8
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800adfa:	aa01      	add	r2, sp, #4
 800adfc:	4630      	mov	r0, r6
 800adfe:	f00c fddd 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ae02:	b108      	cbz	r0, 800ae08 <RemoteConfigParams::callbackFunction(char const*)+0x4c>
 800ae04:	3708      	adds	r7, #8
 800ae06:	e7df      	b.n	800adc8 <RemoteConfigParams::callbackFunction(char const*)+0xc>
 800ae08:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	4620      	mov	r0, r4
 800ae10:	b002      	add	sp, #8
 800ae12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	f7ff bfc9 	b.w	800adac <RemoteConfigParams::SetBool(unsigned char, unsigned long)>
 800ae1a:	bf00      	nop
 800ae1c:	0801c7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, lr, pc}
 800ae20:	0801d2f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, ip, lr, pc}

0800ae24 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800ae24:	f7ff bfca 	b.w	800adbc <RemoteConfigParams::callbackFunction(char const*)>

0800ae28 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	b087      	sub	sp, #28
 800ae30:	4614      	mov	r4, r2
 800ae32:	461e      	mov	r6, r3
 800ae34:	b361      	cbz	r1, 800ae90 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x68>
 800ae36:	2220      	movs	r2, #32
 800ae38:	f00f fbfb 	bl	801a632 <memmove>
 800ae3c:	4940      	ldr	r1, [pc, #256]	@ (800af40 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x118>)
 800ae3e:	4f41      	ldr	r7, [pc, #260]	@ (800af44 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x11c>)
 800ae40:	f8df b118 	ldr.w	fp, [pc, #280]	@ 800af5c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x134>
 800ae44:	f8df a118 	ldr.w	sl, [pc, #280]	@ 800af60 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x138>
 800ae48:	4633      	mov	r3, r6
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	a803      	add	r0, sp, #12
 800ae4e:	f00c fbb5 	bl	80175bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800ae52:	f04f 0806 	mov.w	r8, #6
 800ae56:	f04f 0901 	mov.w	r9, #1
 800ae5a:	f1b8 0801 	subs.w	r8, r8, #1
 800ae5e:	f8d5 c000 	ldr.w	ip, [r5]
 800ae62:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ae66:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800ae6a:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800ae6e:	d112      	bne.n	800ae96 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 800ae70:	42a2      	cmp	r2, r4
 800ae72:	d246      	bcs.n	800af02 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xda>
 800ae74:	9803      	ldr	r0, [sp, #12]
 800ae76:	f01c 0f10 	tst.w	ip, #16
 800ae7a:	f105 0508 	add.w	r5, r5, #8
 800ae7e:	4410      	add	r0, r2
 800ae80:	eba4 0402 	sub.w	r4, r4, r2
 800ae84:	d12f      	bne.n	800aee6 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xbe>
 800ae86:	bb7e      	cbnz	r6, 800aee8 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc0>
 800ae88:	4b2f      	ldr	r3, [pc, #188]	@ (800af48 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800ae8a:	4a30      	ldr	r2, [pc, #192]	@ (800af4c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x124>)
 800ae8c:	9500      	str	r5, [sp, #0]
 800ae8e:	e02e      	b.n	800aeee <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc6>
 800ae90:	f7ff ff40 	bl	800ad14 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>
 800ae94:	e7d2      	b.n	800ae3c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 800ae96:	42a2      	cmp	r2, r4
 800ae98:	e9d7 3100 	ldrd	r3, r1, [r7]
 800ae9c:	d21d      	bcs.n	800aeda <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xb2>
 800ae9e:	9803      	ldr	r0, [sp, #12]
 800aea0:	ea01 0e0c 	and.w	lr, r1, ip
 800aea4:	ea31 0c0c 	bics.w	ip, r1, ip
 800aea8:	4410      	add	r0, r2
 800aeaa:	eba4 0402 	sub.w	r4, r4, r2
 800aeae:	d003      	beq.n	800aeb8 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x90>
 800aeb0:	b91e      	cbnz	r6, 800aeba <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x92>
 800aeb2:	4a27      	ldr	r2, [pc, #156]	@ (800af50 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x128>)
 800aeb4:	9600      	str	r6, [sp, #0]
 800aeb6:	e006      	b.n	800aec6 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x9e>
 800aeb8:	b18e      	cbz	r6, 800aede <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xb6>
 800aeba:	eba1 020e 	sub.w	r2, r1, lr
 800aebe:	4251      	negs	r1, r2
 800aec0:	4151      	adcs	r1, r2
 800aec2:	9100      	str	r1, [sp, #0]
 800aec4:	465a      	mov	r2, fp
 800aec6:	4621      	mov	r1, r4
 800aec8:	f00f fed6 	bl	801ac78 <snprintf>
 800aecc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800aed0:	4284      	cmp	r4, r0
 800aed2:	bfa4      	itt	ge
 800aed4:	181b      	addge	r3, r3, r0
 800aed6:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800aeda:	3708      	adds	r7, #8
 800aedc:	e7bd      	b.n	800ae5a <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x32>
 800aede:	f8cd 9000 	str.w	r9, [sp]
 800aee2:	4652      	mov	r2, sl
 800aee4:	e7ef      	b.n	800aec6 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x9e>
 800aee6:	b336      	cbz	r6, 800af36 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x10e>
 800aee8:	4b17      	ldr	r3, [pc, #92]	@ (800af48 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800aeea:	4a1a      	ldr	r2, [pc, #104]	@ (800af54 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x12c>)
 800aeec:	9500      	str	r5, [sp, #0]
 800aeee:	4621      	mov	r1, r4
 800aef0:	f00f fec2 	bl	801ac78 <snprintf>
 800aef4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800aef8:	4284      	cmp	r4, r0
 800aefa:	bfa4      	itt	ge
 800aefc:	181b      	addge	r3, r3, r0
 800aefe:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800af02:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800af06:	b17b      	cbz	r3, 800af28 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x100>
 800af08:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800af0c:	9b03      	ldr	r3, [sp, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	227d      	movs	r2, #125	@ 0x7d
 800af12:	f803 2c01 	strb.w	r2, [r3, #-1]
 800af16:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800af1a:	9903      	ldr	r1, [sp, #12]
 800af1c:	54ca      	strb	r2, [r1, r3]
 800af1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800af22:	3301      	adds	r3, #1
 800af24:	f8ad 3012 	strh.w	r3, [sp, #18]
 800af28:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800af2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	b007      	add	sp, #28
 800af32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af36:	4b04      	ldr	r3, [pc, #16]	@ (800af48 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800af38:	4a07      	ldr	r2, [pc, #28]	@ (800af58 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x130>)
 800af3a:	9500      	str	r5, [sp, #0]
 800af3c:	e7d7      	b.n	800aeee <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc6>
 800af3e:	bf00      	nop
 800af40:	0801d33e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, ip, lr, pc}
 800af44:	0801c7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, lr, pc}
 800af48:	0801d2f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, ip, lr, pc}
 800af4c:	0801b98c 	stmdaeq	r1, {r2, r3, r7, r8, fp, ip, sp, pc}
 800af50:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 800af54:	0801b981 	stmdaeq	r1, {r0, r7, r8, fp, ip, sp, pc}
 800af58:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}
 800af5c:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 800af60:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}

0800af64 <RemoteConfigParams::Set(RemoteConfig*)>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	460c      	mov	r4, r1
 800af68:	6801      	ldr	r1, [r0, #0]
 800af6a:	4605      	mov	r5, r0
 800af6c:	f001 0101 	and.w	r1, r1, #1
 800af70:	4620      	mov	r0, r4
 800af72:	f7ff fc75 	bl	800a860 <RemoteConfig::SetDisable(bool)>
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800af7c:	7362      	strb	r2, [r4, #13]
 800af7e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800af82:	73a2      	strb	r2, [r4, #14]
 800af84:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800af88:	73e2      	strb	r2, [r4, #15]
 800af8a:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800af8e:	06db      	lsls	r3, r3, #27
 800af90:	7422      	strb	r2, [r4, #16]
 800af92:	d506      	bpl.n	800afa2 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800af94:	f105 0108 	add.w	r1, r5, #8
 800af98:	4620      	mov	r0, r4
 800af9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af9e:	f7ff bc89 	b.w	800a8b4 <RemoteConfig::SetDisplayName(char const*)>
 800afa2:	bd38      	pop	{r3, r4, r5, pc}

0800afa4 <RemoteConfig::HandleReboot()>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	7b83      	ldrb	r3, [r0, #14]
 800afa8:	b30b      	cbz	r3, 800afee <RemoteConfig::HandleReboot()+0x4a>
 800afaa:	4c11      	ldr	r4, [pc, #68]	@ (800aff0 <RemoteConfig::HandleReboot()+0x4c>)
 800afac:	6825      	ldr	r5, [r4, #0]
 800afae:	2301      	movs	r3, #1
 800afb0:	7443      	strb	r3, [r0, #17]
 800afb2:	69a8      	ldr	r0, [r5, #24]
 800afb4:	b138      	cbz	r0, 800afc6 <RemoteConfig::HandleReboot()+0x22>
 800afb6:	6803      	ldr	r3, [r0, #0]
 800afb8:	2100      	movs	r1, #0
 800afba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afbc:	7569      	strb	r1, [r5, #21]
 800afbe:	4798      	blx	r3
 800afc0:	4b0c      	ldr	r3, [pc, #48]	@ (800aff4 <RemoteConfig::HandleReboot()+0x50>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	606b      	str	r3, [r5, #4]
 800afc6:	4d0c      	ldr	r5, [pc, #48]	@ (800aff8 <RemoteConfig::HandleReboot()+0x54>)
 800afc8:	6828      	ldr	r0, [r5, #0]
 800afca:	f00c f923 	bl	8017214 <ConfigStore::Flash()>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1fa      	bne.n	800afc8 <RemoteConfig::HandleReboot()+0x24>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	6998      	ldr	r0, [r3, #24]
 800afd6:	b110      	cbz	r0, 800afde <RemoteConfig::HandleReboot()+0x3a>
 800afd8:	6803      	ldr	r3, [r0, #0]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	4798      	blx	r3
 800afde:	6820      	ldr	r0, [r4, #0]
 800afe0:	4906      	ldr	r1, [pc, #24]	@ (800affc <RemoteConfig::HandleReboot()+0x58>)
 800afe2:	f7fe fafb 	bl	80095dc <Display::TextStatus(char const*)>
 800afe6:	4b06      	ldr	r3, [pc, #24]	@ (800b000 <RemoteConfig::HandleReboot()+0x5c>)
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f00d fae9 	bl	80185c0 <Hardware::Reboot()>
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	2000cc4c 	andcs	ip, r0, ip, asr #24
 800aff4:	2001a628 	andcs	sl, r1, r8, lsr #12
 800aff8:	2000cc34 	andcs	ip, r0, r4, lsr ip
 800affc:	0801b994 	stmdaeq	r1, {r2, r4, r7, r8, fp, ip, sp, pc}
 800b000:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800b004 <RemoteConfig::GetIndex(void const*, unsigned long&)>:
 800b004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b008:	f8d2 c000 	ldr.w	ip, [r2]
 800b00c:	4e12      	ldr	r6, [pc, #72]	@ (800b058 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x54>)
 800b00e:	2000      	movs	r0, #0
 800b010:	f10d 0e04 	add.w	lr, sp, #4
 800b014:	7d33      	ldrb	r3, [r6, #20]
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	4563      	cmp	r3, ip
 800b01a:	bf2c      	ite	cs
 800b01c:	4614      	movcs	r4, r2
 800b01e:	4674      	movcc	r4, lr
 800b020:	6935      	ldr	r5, [r6, #16]
 800b022:	6827      	ldr	r7, [r4, #0]
 800b024:	3d01      	subs	r5, #1
 800b026:	440f      	add	r7, r1
 800b028:	460c      	mov	r4, r1
 800b02a:	42bc      	cmp	r4, r7
 800b02c:	d101      	bne.n	800b032 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x2e>
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	e00c      	b.n	800b04c <RemoteConfig::GetIndex(void const*, unsigned long&)+0x48>
 800b032:	f894 9000 	ldrb.w	r9, [r4]
 800b036:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 800b03a:	45c1      	cmp	r9, r8
 800b03c:	d009      	beq.n	800b052 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x4e>
 800b03e:	3001      	adds	r0, #1
 800b040:	2806      	cmp	r0, #6
 800b042:	f106 0618 	add.w	r6, r6, #24
 800b046:	d1e5      	bne.n	800b014 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x10>
 800b048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b04c:	b003      	add	sp, #12
 800b04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b052:	3401      	adds	r4, #1
 800b054:	e7e9      	b.n	800b02a <RemoteConfig::GetIndex(void const*, unsigned long&)+0x26>
 800b056:	bf00      	nop
 800b058:	0801c7f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sl, lr, pc}

0800b05c <RemoteConfig::PlatformHandleTftpSet()>:
 800b05c:	f890 1020 	ldrb.w	r1, [r0, #32]
 800b060:	b510      	push	{r4, lr}
 800b062:	4c0d      	ldr	r4, [pc, #52]	@ (800b098 <RemoteConfig::PlatformHandleTftpSet()+0x3c>)
 800b064:	b171      	cbz	r1, 800b084 <RemoteConfig::PlatformHandleTftpSet()+0x28>
 800b066:	f24a 51a5 	movw	r1, #42405	@ 0xa5a5
 800b06a:	2001      	movs	r0, #1
 800b06c:	f00e fb70 	bl	8019750 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 800b070:	490a      	ldr	r1, [pc, #40]	@ (800b09c <RemoteConfig::PlatformHandleTftpSet()+0x40>)
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	f7fe fab2 	bl	80095dc <Display::TextStatus(char const*)>
 800b078:	4908      	ldr	r1, [pc, #32]	@ (800b09c <RemoteConfig::PlatformHandleTftpSet()+0x40>)
 800b07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b07e:	2002      	movs	r0, #2
 800b080:	f00d bafe 	b.w	8018680 <console_status>
 800b084:	2001      	movs	r0, #1
 800b086:	f00e fb63 	bl	8019750 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 800b08a:	4905      	ldr	r1, [pc, #20]	@ (800b0a0 <RemoteConfig::PlatformHandleTftpSet()+0x44>)
 800b08c:	6820      	ldr	r0, [r4, #0]
 800b08e:	f7fe faa5 	bl	80095dc <Display::TextStatus(char const*)>
 800b092:	4903      	ldr	r1, [pc, #12]	@ (800b0a0 <RemoteConfig::PlatformHandleTftpSet()+0x44>)
 800b094:	e7f1      	b.n	800b07a <RemoteConfig::PlatformHandleTftpSet()+0x1e>
 800b096:	bf00      	nop
 800b098:	2000cc4c 	andcs	ip, r0, ip, asr #24
 800b09c:	0801b9e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, fp, ip, sp, pc}
 800b0a0:	0801b9ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, pc}

0800b0a4 <RemoteConfig::PlatformHandleTftpGet()>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	f00e fb5f 	bl	801976c <bkp_data_read(bkp_data_register_enum)>
 800b0ae:	f24a 53a5 	movw	r3, #42405	@ 0xa5a5
 800b0b2:	1ac3      	subs	r3, r0, r3
 800b0b4:	4258      	negs	r0, r3
 800b0b6:	4158      	adcs	r0, r3
 800b0b8:	f884 0020 	strb.w	r0, [r4, #32]
 800b0bc:	bd10      	pop	{r4, pc}
	...

0800b0c0 <HttpDaemon::HttpDaemon()>:
 800b0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0c6:	2500      	movs	r5, #0
 800b0c8:	e9c0 3506 	strd	r3, r5, [r0, #24]
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	2050      	movs	r0, #80	@ 0x50
 800b0d0:	f00a fa86 	bl	80155e0 <net::tcp_begin(unsigned short)>
 800b0d4:	462c      	mov	r4, r5
 800b0d6:	61b0      	str	r0, [r6, #24]
 800b0d8:	f44f 7702 	mov.w	r7, #520	@ 0x208
 800b0dc:	2038      	movs	r0, #56	@ 0x38
 800b0de:	f00f fff9 	bl	801b0d4 <operator new(unsigned int)>
 800b0e2:	69b3      	ldr	r3, [r6, #24]
 800b0e4:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800b0e8:	e9c0 5300 	strd	r5, r3, [r0]
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	2305      	movs	r3, #5
 800b0f2:	2d06      	cmp	r5, #6
 800b0f4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b0f8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b0fc:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800b100:	e9c0 4408 	strd	r4, r4, [r0, #32]
 800b104:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
 800b108:	6287      	str	r7, [r0, #40]	@ 0x28
 800b10a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
 800b10e:	d1e5      	bne.n	800b0dc <HttpDaemon::HttpDaemon()+0x1c>
 800b110:	4805      	ldr	r0, [pc, #20]	@ (800b128 <HttpDaemon::HttpDaemon()+0x68>)
 800b112:	9400      	str	r4, [sp, #0]
 800b114:	2300      	movs	r3, #0
 800b116:	2202      	movs	r2, #2
 800b118:	4619      	mov	r1, r3
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	f008 fee8 	bl	8013ef0 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800b120:	4630      	mov	r0, r6
 800b122:	b003      	add	sp, #12
 800b124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b126:	bf00      	nop
 800b128:	2000c924 	andcs	ip, r0, r4, lsr #18

0800b12c <DisplaySet::SetSleep(bool)>:
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop

0800b130 <HttpDeamonHandleRequest::ParseMethod(char*)>:
 800b130:	460b      	mov	r3, r1
 800b132:	b510      	push	{r4, lr}
 800b134:	4929      	ldr	r1, [pc, #164]	@ (800b1dc <HttpDeamonHandleRequest::ParseMethod(char*)+0xac>)
 800b136:	4604      	mov	r4, r0
 800b138:	4618      	mov	r0, r3
 800b13a:	f00f fde3 	bl	801ad04 <strtok>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d039      	beq.n	800b1b6 <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b142:	7803      	ldrb	r3, [r0, #0]
 800b144:	2b47      	cmp	r3, #71	@ 0x47
 800b146:	d139      	bne.n	800b1bc <HttpDeamonHandleRequest::ParseMethod(char*)+0x8c>
 800b148:	4a25      	ldr	r2, [pc, #148]	@ (800b1e0 <HttpDeamonHandleRequest::ParseMethod(char*)+0xb0>)
 800b14a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b14e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b152:	428b      	cmp	r3, r1
 800b154:	d12f      	bne.n	800b1b6 <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1f7      	bne.n	800b14a <HttpDeamonHandleRequest::ParseMethod(char*)+0x1a>
 800b15a:	4920      	ldr	r1, [pc, #128]	@ (800b1dc <HttpDeamonHandleRequest::ParseMethod(char*)+0xac>)
 800b15c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b15e:	2000      	movs	r0, #0
 800b160:	f00f fdd0 	bl	801ad04 <strtok>
 800b164:	b320      	cbz	r0, 800b1b0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b166:	61a0      	str	r0, [r4, #24]
 800b168:	491e      	ldr	r1, [pc, #120]	@ (800b1e4 <HttpDeamonHandleRequest::ParseMethod(char*)+0xb4>)
 800b16a:	2000      	movs	r0, #0
 800b16c:	f00f fdca 	bl	801ad04 <strtok>
 800b170:	4603      	mov	r3, r0
 800b172:	b1e8      	cbz	r0, 800b1b0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b174:	7802      	ldrb	r2, [r0, #0]
 800b176:	2a48      	cmp	r2, #72	@ 0x48
 800b178:	d11a      	bne.n	800b1b0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b17a:	4a1b      	ldr	r2, [pc, #108]	@ (800b1e8 <HttpDeamonHandleRequest::ParseMethod(char*)+0xb8>)
 800b17c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b180:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b184:	4288      	cmp	r0, r1
 800b186:	d113      	bne.n	800b1b0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d1f7      	bne.n	800b17c <HttpDeamonHandleRequest::ParseMethod(char*)+0x4c>
 800b18c:	4917      	ldr	r1, [pc, #92]	@ (800b1ec <HttpDeamonHandleRequest::ParseMethod(char*)+0xbc>)
 800b18e:	f00f fdb9 	bl	801ad04 <strtok>
 800b192:	b168      	cbz	r0, 800b1b0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b194:	7803      	ldrb	r3, [r0, #0]
 800b196:	2b31      	cmp	r3, #49	@ 0x31
 800b198:	d11d      	bne.n	800b1d6 <HttpDeamonHandleRequest::ParseMethod(char*)+0xa6>
 800b19a:	4a15      	ldr	r2, [pc, #84]	@ (800b1f0 <HttpDeamonHandleRequest::ParseMethod(char*)+0xc0>)
 800b19c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b1a0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	d116      	bne.n	800b1d6 <HttpDeamonHandleRequest::ParseMethod(char*)+0xa6>
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1f7      	bne.n	800b19c <HttpDeamonHandleRequest::ParseMethod(char*)+0x6c>
 800b1ac:	20c8      	movs	r0, #200	@ 0xc8
 800b1ae:	bd10      	pop	{r4, pc}
 800b1b0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b1b4:	bd10      	pop	{r4, pc}
 800b1b6:	f240 10f5 	movw	r0, #501	@ 0x1f5
 800b1ba:	bd10      	pop	{r4, pc}
 800b1bc:	2b50      	cmp	r3, #80	@ 0x50
 800b1be:	d1fa      	bne.n	800b1b6 <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b1c0:	4a0c      	ldr	r2, [pc, #48]	@ (800b1f4 <HttpDeamonHandleRequest::ParseMethod(char*)+0xc4>)
 800b1c2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b1c6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b1ca:	428b      	cmp	r3, r1
 800b1cc:	d1f3      	bne.n	800b1b6 <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1f7      	bne.n	800b1c2 <HttpDeamonHandleRequest::ParseMethod(char*)+0x92>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e7c1      	b.n	800b15a <HttpDeamonHandleRequest::ParseMethod(char*)+0x2a>
 800b1d6:	f240 10f9 	movw	r0, #505	@ 0x1f9
 800b1da:	bd10      	pop	{r4, pc}
 800b1dc:	0801c888 	stmdaeq	r1, {r3, r7, fp, lr, pc}
 800b1e0:	0801c88c 	stmdaeq	r1, {r2, r3, r7, fp, lr, pc}
 800b1e4:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 800b1e8:	0801c89c 	stmdaeq	r1, {r2, r3, r4, r7, fp, lr, pc}
 800b1ec:	0801c8a4 	stmdaeq	r1, {r2, r5, r7, fp, lr, pc}
 800b1f0:	0801c8a8 	stmdaeq	r1, {r3, r5, r7, fp, lr, pc}
 800b1f4:	0801c890 	stmdaeq	r1, {r4, r7, fp, lr, pc}

0800b1f8 <HttpDeamonHandleRequest::ParseHeaderField(char*)>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	493f      	ldr	r1, [pc, #252]	@ (800b2fc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x104>)
 800b200:	4618      	mov	r0, r3
 800b202:	f00f fd7f 	bl	801ad04 <strtok>
 800b206:	b370      	cbz	r0, 800b266 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b208:	1e41      	subs	r1, r0, #1
 800b20a:	4c3d      	ldr	r4, [pc, #244]	@ (800b300 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x108>)
 800b20c:	468c      	mov	ip, r1
 800b20e:	e000      	b.n	800b212 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x1a>
 800b210:	b360      	cbz	r0, 800b26c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x74>
 800b212:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 800b216:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b21a:	2b19      	cmp	r3, #25
 800b21c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b220:	f1a3 0e41 	sub.w	lr, r3, #65	@ 0x41
 800b224:	4602      	mov	r2, r0
 800b226:	bf98      	it	ls
 800b228:	f100 0220 	addls.w	r2, r0, #32
 800b22c:	f1be 0f19 	cmp.w	lr, #25
 800b230:	bf98      	it	ls
 800b232:	3320      	addls	r3, #32
 800b234:	4293      	cmp	r3, r2
 800b236:	d0eb      	beq.n	800b210 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x18>
 800b238:	4832      	ldr	r0, [pc, #200]	@ (800b304 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x10c>)
 800b23a:	e000      	b.n	800b23e <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x46>
 800b23c:	b34c      	cbz	r4, 800b292 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x9a>
 800b23e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b242:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800b246:	2b19      	cmp	r3, #25
 800b248:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b24c:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 800b250:	4622      	mov	r2, r4
 800b252:	bf98      	it	ls
 800b254:	f104 0220 	addls.w	r2, r4, #32
 800b258:	f1bc 0f19 	cmp.w	ip, #25
 800b25c:	bf98      	it	ls
 800b25e:	3320      	addls	r3, #32
 800b260:	4293      	cmp	r3, r2
 800b262:	d0eb      	beq.n	800b23c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x44>
 800b264:	e03a      	b.n	800b2dc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b266:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	4926      	ldr	r1, [pc, #152]	@ (800b308 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x110>)
 800b26e:	f00f fd49 	bl	801ad04 <strtok>
 800b272:	2800      	cmp	r0, #0
 800b274:	d0f7      	beq.n	800b266 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b276:	4a25      	ldr	r2, [pc, #148]	@ (800b30c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x114>)
 800b278:	1e43      	subs	r3, r0, #1
 800b27a:	f100 0c0b 	add.w	ip, r0, #11
 800b27e:	e001      	b.n	800b284 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x8c>
 800b280:	459c      	cmp	ip, r3
 800b282:	d019      	beq.n	800b2b8 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xc0>
 800b284:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b288:	f812 4b01 	ldrb.w	r4, [r2], #1
 800b28c:	428c      	cmp	r4, r1
 800b28e:	d0f7      	beq.n	800b280 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x88>
 800b290:	e024      	b.n	800b2dc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b292:	491f      	ldr	r1, [pc, #124]	@ (800b310 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x118>)
 800b294:	4620      	mov	r0, r4
 800b296:	f00f fd35 	bl	801ad04 <strtok>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d0e3      	beq.n	800b266 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b29e:	7803      	ldrb	r3, [r0, #0]
 800b2a0:	b1db      	cbz	r3, 800b2da <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe2>
 800b2a2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800b2a6:	2a09      	cmp	r2, #9
 800b2a8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b2ac:	d8db      	bhi.n	800b266 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b2ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b2b2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b2b6:	e7f3      	b.n	800b2a0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xa8>
 800b2b8:	7b02      	ldrb	r2, [r0, #12]
 800b2ba:	2a6a      	cmp	r2, #106	@ 0x6a
 800b2bc:	f100 030c 	add.w	r3, r0, #12
 800b2c0:	d10e      	bne.n	800b2e0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe8>
 800b2c2:	4914      	ldr	r1, [pc, #80]	@ (800b314 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x11c>)
 800b2c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b2c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2cc:	4282      	cmp	r2, r0
 800b2ce:	d105      	bne.n	800b2dc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	d1f7      	bne.n	800b2c4 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xcc>
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	632b      	str	r3, [r5, #48]	@ 0x30
 800b2d8:	e000      	b.n	800b2dc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b2da:	612c      	str	r4, [r5, #16]
 800b2dc:	20c8      	movs	r0, #200	@ 0xc8
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	2a6f      	cmp	r2, #111	@ 0x6f
 800b2e2:	d1fb      	bne.n	800b2dc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b2e4:	490c      	ldr	r1, [pc, #48]	@ (800b318 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x120>)
 800b2e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b2ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2ee:	4282      	cmp	r2, r0
 800b2f0:	d1f4      	bne.n	800b2dc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b2f2:	2a00      	cmp	r2, #0
 800b2f4:	d1f7      	bne.n	800b2e6 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xee>
 800b2f6:	2304      	movs	r3, #4
 800b2f8:	e7ed      	b.n	800b2d6 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xde>
 800b2fa:	bf00      	nop
 800b2fc:	0801c8ac 	stmdaeq	r1, {r2, r3, r5, r7, fp, lr, pc}
 800b300:	0801c8b0 	stmdaeq	r1, {r4, r5, r7, fp, lr, pc}
 800b304:	0801c8c0 	stmdaeq	r1, {r6, r7, fp, lr, pc}
 800b308:	0801c8f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, fp, lr, pc}
 800b30c:	0801c8d0 	stmdaeq	r1, {r4, r6, r7, fp, lr, pc}
 800b310:	0801c888 	stmdaeq	r1, {r3, r7, fp, lr, pc}
 800b314:	0801c8e0 	stmdaeq	r1, {r5, r6, r7, fp, lr, pc}
 800b318:	0801c8e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, lr, pc}

0800b31c <HttpDeamonHandleRequest::ParseRequest()>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b320:	4605      	mov	r5, r0
 800b322:	6940      	ldr	r0, [r0, #20]
 800b324:	2400      	movs	r4, #0
 800b326:	2205      	movs	r2, #5
 800b328:	e9c5 4403 	strd	r4, r4, [r5, #12]
 800b32c:	632a      	str	r2, [r5, #48]	@ 0x30
 800b32e:	b300      	cbz	r0, 800b372 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b330:	4619      	mov	r1, r3
 800b332:	46a4      	mov	ip, r4
 800b334:	4626      	mov	r6, r4
 800b336:	e002      	b.n	800b33e <HttpDeamonHandleRequest::ParseRequest()+0x22>
 800b338:	3401      	adds	r4, #1
 800b33a:	42a0      	cmp	r0, r4
 800b33c:	d919      	bls.n	800b372 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b33e:	5d1a      	ldrb	r2, [r3, r4]
 800b340:	2a0a      	cmp	r2, #10
 800b342:	d1f9      	bne.n	800b338 <HttpDeamonHandleRequest::ParseRequest()+0x1c>
 800b344:	4423      	add	r3, r4
 800b346:	f10c 0701 	add.w	r7, ip, #1
 800b34a:	f803 6c01 	strb.w	r6, [r3, #-1]
 800b34e:	f1bc 0f00 	cmp.w	ip, #0
 800b352:	d010      	beq.n	800b376 <HttpDeamonHandleRequest::ParseRequest()+0x5a>
 800b354:	780b      	ldrb	r3, [r1, #0]
 800b356:	b193      	cbz	r3, 800b37e <HttpDeamonHandleRequest::ParseRequest()+0x62>
 800b358:	4628      	mov	r0, r5
 800b35a:	f7ff ff4d 	bl	800b1f8 <HttpDeamonHandleRequest::ParseHeaderField(char*)>
 800b35e:	28c8      	cmp	r0, #200	@ 0xc8
 800b360:	d108      	bne.n	800b374 <HttpDeamonHandleRequest::ParseRequest()+0x58>
 800b362:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b364:	6968      	ldr	r0, [r5, #20]
 800b366:	3401      	adds	r4, #1
 800b368:	1919      	adds	r1, r3, r4
 800b36a:	3401      	adds	r4, #1
 800b36c:	42a0      	cmp	r0, r4
 800b36e:	46bc      	mov	ip, r7
 800b370:	d8e5      	bhi.n	800b33e <HttpDeamonHandleRequest::ParseRequest()+0x22>
 800b372:	20c8      	movs	r0, #200	@ 0xc8
 800b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b376:	4628      	mov	r0, r5
 800b378:	f7ff feda 	bl	800b130 <HttpDeamonHandleRequest::ParseMethod(char*)>
 800b37c:	e7ef      	b.n	800b35e <HttpDeamonHandleRequest::ParseRequest()+0x42>
 800b37e:	696a      	ldr	r2, [r5, #20]
 800b380:	3a01      	subs	r2, #1
 800b382:	1b12      	subs	r2, r2, r4
 800b384:	b292      	uxth	r2, r2
 800b386:	60ea      	str	r2, [r5, #12]
 800b388:	2a00      	cmp	r2, #0
 800b38a:	d0f2      	beq.n	800b372 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b38c:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800b38e:	3401      	adds	r4, #1
 800b390:	4421      	add	r1, r4
 800b392:	61e9      	str	r1, [r5, #28]
 800b394:	548b      	strb	r3, [r1, r2]
 800b396:	e7ec      	b.n	800b372 <HttpDeamonHandleRequest::ParseRequest()+0x56>

0800b398 <HttpDeamonHandleRequest::HandleGetTxt()>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	4605      	mov	r5, r0
 800b39c:	6980      	ldr	r0, [r0, #24]
 800b39e:	7983      	ldrb	r3, [r0, #6]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d039      	beq.n	800b418 <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b3a4:	1d84      	adds	r4, r0, #6
 800b3a6:	4623      	mov	r3, r4
 800b3a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d1fb      	bne.n	800b3a8 <HttpDeamonHandleRequest::HandleGetTxt()+0x10>
 800b3b0:	1b1a      	subs	r2, r3, r4
 800b3b2:	2a04      	cmp	r2, #4
 800b3b4:	d930      	bls.n	800b418 <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b3b6:	1f13      	subs	r3, r2, #4
 800b3b8:	18e1      	adds	r1, r4, r3
 800b3ba:	5ce3      	ldrb	r3, [r4, r3]
 800b3bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3be:	d12b      	bne.n	800b418 <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b3c0:	4c18      	ldr	r4, [pc, #96]	@ (800b424 <HttpDeamonHandleRequest::HandleGetTxt()+0x8c>)
 800b3c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3c6:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800b3ca:	4563      	cmp	r3, ip
 800b3cc:	d124      	bne.n	800b418 <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1f7      	bne.n	800b3c2 <HttpDeamonHandleRequest::HandleGetTxt()+0x2a>
 800b3d2:	4c15      	ldr	r4, [pc, #84]	@ (800b428 <HttpDeamonHandleRequest::HandleGetTxt()+0x90>)
 800b3d4:	7821      	ldrb	r1, [r4, #0]
 800b3d6:	f041 0601 	orr.w	r6, r1, #1
 800b3da:	1d43      	adds	r3, r0, #5
 800b3dc:	7026      	strb	r6, [r4, #0]
 800b3de:	4813      	ldr	r0, [pc, #76]	@ (800b42c <HttpDeamonHandleRequest::HandleGetTxt()+0x94>)
 800b3e0:	f001 0601 	and.w	r6, r1, #1
 800b3e4:	e003      	b.n	800b3ee <HttpDeamonHandleRequest::HandleGetTxt()+0x56>
 800b3e6:	3a01      	subs	r2, #1
 800b3e8:	f800 1b01 	strb.w	r1, [r0], #1
 800b3ec:	d005      	beq.n	800b3fa <HttpDeamonHandleRequest::HandleGetTxt()+0x62>
 800b3ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	d1f7      	bne.n	800b3e6 <HttpDeamonHandleRequest::HandleGetTxt()+0x4e>
 800b3f6:	f00f f933 	bl	801a660 <memset>
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <HttpDeamonHandleRequest::HandleGetTxt()+0x98>)
 800b3fc:	490b      	ldr	r1, [pc, #44]	@ (800b42c <HttpDeamonHandleRequest::HandleGetTxt()+0x94>)
 800b3fe:	6818      	ldr	r0, [r3, #0]
 800b400:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800b404:	f7ff fa6e 	bl	800a8e4 <RemoteConfig::HandleGet(void*, unsigned long)>
 800b408:	7823      	ldrb	r3, [r4, #0]
 800b40a:	60a8      	str	r0, [r5, #8]
 800b40c:	b93e      	cbnz	r6, 800b41e <HttpDeamonHandleRequest::HandleGetTxt()+0x86>
 800b40e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b412:	7023      	strb	r3, [r4, #0]
 800b414:	20c8      	movs	r0, #200	@ 0xc8
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b41c:	bd70      	pop	{r4, r5, r6, pc}
 800b41e:	f043 0301 	orr.w	r3, r3, #1
 800b422:	e7f6      	b.n	800b412 <HttpDeamonHandleRequest::HandleGetTxt()+0x7a>
 800b424:	0801c8fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, fp, lr, pc}
 800b428:	2000cc49 	andcs	ip, r0, r9, asr #24
 800b42c:	200000ac 	andcs	r0, r0, ip, lsr #1
 800b430:	200000a8 	andcs	r0, r0, r8, lsr #1

0800b434 <HttpDeamonHandleRequest::HandleGet()>:
 800b434:	b510      	push	{r4, lr}
 800b436:	4604      	mov	r4, r0
 800b438:	b082      	sub	sp, #8
 800b43a:	6980      	ldr	r0, [r0, #24]
 800b43c:	4b68      	ldr	r3, [pc, #416]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b43e:	6223      	str	r3, [r4, #32]
 800b440:	2100      	movs	r1, #0
 800b442:	4a68      	ldr	r2, [pc, #416]	@ (800b5e4 <HttpDeamonHandleRequest::HandleGet()+0x1b0>)
 800b444:	9101      	str	r1, [sp, #4]
 800b446:	1e43      	subs	r3, r0, #1
 800b448:	f100 0e05 	add.w	lr, r0, #5
 800b44c:	e001      	b.n	800b452 <HttpDeamonHandleRequest::HandleGet()+0x1e>
 800b44e:	459e      	cmp	lr, r3
 800b450:	d01f      	beq.n	800b492 <HttpDeamonHandleRequest::HandleGet()+0x5e>
 800b452:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 800b456:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b45a:	458c      	cmp	ip, r1
 800b45c:	d0f7      	beq.n	800b44e <HttpDeamonHandleRequest::HandleGet()+0x1a>
 800b45e:	7803      	ldrb	r3, [r0, #0]
 800b460:	2b2f      	cmp	r3, #47	@ 0x2f
 800b462:	d167      	bne.n	800b534 <HttpDeamonHandleRequest::HandleGet()+0x100>
 800b464:	4a60      	ldr	r2, [pc, #384]	@ (800b5e8 <HttpDeamonHandleRequest::HandleGet()+0x1b4>)
 800b466:	4601      	mov	r1, r0
 800b468:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b46c:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b470:	4563      	cmp	r3, ip
 800b472:	d13c      	bne.n	800b4ee <HttpDeamonHandleRequest::HandleGet()+0xba>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f7      	bne.n	800b468 <HttpDeamonHandleRequest::HandleGet()+0x34>
 800b478:	485c      	ldr	r0, [pc, #368]	@ (800b5ec <HttpDeamonHandleRequest::HandleGet()+0x1b8>)
 800b47a:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 800b47e:	a901      	add	r1, sp, #4
 800b480:	f000 fac6 	bl	800ba10 <get_file_content(char const*, unsigned long&, http::contentTypes&)>
 800b484:	9b01      	ldr	r3, [sp, #4]
 800b486:	6220      	str	r0, [r4, #32]
 800b488:	b36b      	cbz	r3, 800b4e6 <HttpDeamonHandleRequest::HandleGet()+0xb2>
 800b48a:	60a3      	str	r3, [r4, #8]
 800b48c:	20c8      	movs	r0, #200	@ 0xc8
 800b48e:	b002      	add	sp, #8
 800b490:	bd10      	pop	{r4, pc}
 800b492:	2303      	movs	r3, #3
 800b494:	6323      	str	r3, [r4, #48]	@ 0x30
 800b496:	7982      	ldrb	r2, [r0, #6]
 800b498:	1dc1      	adds	r1, r0, #7
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	d03a      	beq.n	800b514 <HttpDeamonHandleRequest::HandleGet()+0xe0>
 800b49e:	f241 5305 	movw	r3, #5381	@ 0x1505
 800b4a2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800b4a6:	fa12 f383 	uxtah	r3, r2, r3
 800b4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	d1f6      	bne.n	800b4a2 <HttpDeamonHandleRequest::HandleGet()+0x6e>
 800b4b4:	f244 729b 	movw	r2, #18331	@ 0x479b
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d05a      	beq.n	800b572 <HttpDeamonHandleRequest::HandleGet()+0x13e>
 800b4bc:	d83f      	bhi.n	800b53e <HttpDeamonHandleRequest::HandleGet()+0x10a>
 800b4be:	f241 6261 	movw	r2, #5729	@ 0x1661
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d01f      	beq.n	800b506 <HttpDeamonHandleRequest::HandleGet()+0xd2>
 800b4c6:	f242 4272 	movw	r2, #9330	@ 0x2472
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d04a      	beq.n	800b564 <HttpDeamonHandleRequest::HandleGet()+0x130>
 800b4ce:	f241 12fa 	movw	r2, #4602	@ 0x11fa
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d11e      	bne.n	800b514 <HttpDeamonHandleRequest::HandleGet()+0xe0>
 800b4d6:	4842      	ldr	r0, [pc, #264]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b4d8:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b4dc:	f000 fa92 	bl	800ba04 <remoteconfig::json_get_directory(char*, unsigned long)>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1d1      	bne.n	800b48a <HttpDeamonHandleRequest::HandleGet()+0x56>
 800b4e6:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 800b4ea:	b002      	add	sp, #8
 800b4ec:	bd10      	pop	{r4, pc}
 800b4ee:	4a40      	ldr	r2, [pc, #256]	@ (800b5f0 <HttpDeamonHandleRequest::HandleGet()+0x1bc>)
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4f6:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b4fa:	4563      	cmp	r3, ip
 800b4fc:	d11a      	bne.n	800b534 <HttpDeamonHandleRequest::HandleGet()+0x100>
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1f7      	bne.n	800b4f2 <HttpDeamonHandleRequest::HandleGet()+0xbe>
 800b502:	483c      	ldr	r0, [pc, #240]	@ (800b5f4 <HttpDeamonHandleRequest::HandleGet()+0x1c0>)
 800b504:	e7b9      	b.n	800b47a <HttpDeamonHandleRequest::HandleGet()+0x46>
 800b506:	4836      	ldr	r0, [pc, #216]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b508:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b50c:	f000 fa16 	bl	800b93c <remoteconfig::json_get_list(char*, unsigned long)>
 800b510:	4603      	mov	r3, r0
 800b512:	e7e6      	b.n	800b4e2 <HttpDeamonHandleRequest::HandleGet()+0xae>
 800b514:	4b38      	ldr	r3, [pc, #224]	@ (800b5f8 <HttpDeamonHandleRequest::HandleGet()+0x1c4>)
 800b516:	f100 0c0b 	add.w	ip, r0, #11
 800b51a:	e001      	b.n	800b520 <HttpDeamonHandleRequest::HandleGet()+0xec>
 800b51c:	45f4      	cmp	ip, lr
 800b51e:	d039      	beq.n	800b594 <HttpDeamonHandleRequest::HandleGet()+0x160>
 800b520:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 800b524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b528:	4291      	cmp	r1, r2
 800b52a:	d0f7      	beq.n	800b51c <HttpDeamonHandleRequest::HandleGet()+0xe8>
 800b52c:	4620      	mov	r0, r4
 800b52e:	f7ff ff33 	bl	800b398 <HttpDeamonHandleRequest::HandleGetTxt()>
 800b532:	e7ac      	b.n	800b48e <HttpDeamonHandleRequest::HandleGet()+0x5a>
 800b534:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 800b538:	a901      	add	r1, sp, #4
 800b53a:	3001      	adds	r0, #1
 800b53c:	e7a0      	b.n	800b480 <HttpDeamonHandleRequest::HandleGet()+0x4c>
 800b53e:	f646 424b 	movw	r2, #27723	@ 0x6c4b
 800b542:	4293      	cmp	r3, r2
 800b544:	d01c      	beq.n	800b580 <HttpDeamonHandleRequest::HandleGet()+0x14c>
 800b546:	f24b 72d9 	movw	r2, #47065	@ 0xb7d9
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d1e2      	bne.n	800b514 <HttpDeamonHandleRequest::HandleGet()+0xe0>
 800b54e:	4b2b      	ldr	r3, [pc, #172]	@ (800b5fc <HttpDeamonHandleRequest::HandleGet()+0x1c8>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	7bdb      	ldrb	r3, [r3, #15]
 800b554:	b1db      	cbz	r3, 800b58e <HttpDeamonHandleRequest::HandleGet()+0x15a>
 800b556:	4822      	ldr	r0, [pc, #136]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b558:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b55c:	f000 fa3c 	bl	800b9d8 <remoteconfig::json_get_uptime(char*, unsigned long)>
 800b560:	4603      	mov	r3, r0
 800b562:	e7be      	b.n	800b4e2 <HttpDeamonHandleRequest::HandleGet()+0xae>
 800b564:	481e      	ldr	r0, [pc, #120]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b566:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b56a:	f00c fe45 	bl	80181f8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)>
 800b56e:	4603      	mov	r3, r0
 800b570:	e7b7      	b.n	800b4e2 <HttpDeamonHandleRequest::HandleGet()+0xae>
 800b572:	481b      	ldr	r0, [pc, #108]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b574:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b578:	f000 fa38 	bl	800b9ec <remoteconfig::json_get_display(char*, unsigned long)>
 800b57c:	4603      	mov	r3, r0
 800b57e:	e7b0      	b.n	800b4e2 <HttpDeamonHandleRequest::HandleGet()+0xae>
 800b580:	4817      	ldr	r0, [pc, #92]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b582:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b586:	f000 fa0b 	bl	800b9a0 <remoteconfig::json_get_version(char*, unsigned long)>
 800b58a:	4603      	mov	r3, r0
 800b58c:	e7a9      	b.n	800b4e2 <HttpDeamonHandleRequest::HandleGet()+0xae>
 800b58e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b592:	e77c      	b.n	800b48e <HttpDeamonHandleRequest::HandleGet()+0x5a>
 800b594:	7b02      	ldrb	r2, [r0, #12]
 800b596:	f241 5305 	movw	r3, #5381	@ 0x1505
 800b59a:	300d      	adds	r0, #13
 800b59c:	2a00      	cmp	r2, #0
 800b59e:	d0a2      	beq.n	800b4e6 <HttpDeamonHandleRequest::HandleGet()+0xb2>
 800b5a0:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800b5a4:	fa12 f383 	uxtah	r3, r2, r3
 800b5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	d1f6      	bne.n	800b5a0 <HttpDeamonHandleRequest::HandleGet()+0x16c>
 800b5b2:	f645 625a 	movw	r2, #24154	@ 0x5e5a
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d00a      	beq.n	800b5d0 <HttpDeamonHandleRequest::HandleGet()+0x19c>
 800b5ba:	f648 5249 	movw	r2, #36169	@ 0x8d49
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d191      	bne.n	800b4e6 <HttpDeamonHandleRequest::HandleGet()+0xb2>
 800b5c2:	4807      	ldr	r0, [pc, #28]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b5c4:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b5c8:	f006 f8f0 	bl	80117ac <remoteconfig::pixel::json_get_status(char*, unsigned long)>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	e788      	b.n	800b4e2 <HttpDeamonHandleRequest::HandleGet()+0xae>
 800b5d0:	4803      	ldr	r0, [pc, #12]	@ (800b5e0 <HttpDeamonHandleRequest::HandleGet()+0x1ac>)
 800b5d2:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b5d6:	f006 f987 	bl	80118e8 <remoteconfig::pixel::json_get_types(char*, unsigned long)>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	e781      	b.n	800b4e2 <HttpDeamonHandleRequest::HandleGet()+0xae>
 800b5de:	bf00      	nop
 800b5e0:	200000ac 	andcs	r0, r0, ip, lsr #1
 800b5e4:	0801c904 	stmdaeq	r1, {r2, r8, fp, lr, pc}
 800b5e8:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}
 800b5ec:	0801c914 	stmdaeq	r1, {r2, r4, r8, fp, lr, pc}
 800b5f0:	0801c920 	stmdaeq	r1, {r5, r8, fp, lr, pc}
 800b5f4:	0801c928 	stmdaeq	r1, {r3, r5, r8, fp, lr, pc}
 800b5f8:	0801c90c 	stmdaeq	r1, {r2, r3, r8, fp, lr, pc}
 800b5fc:	200000a8 	andcs	r0, r0, r8, lsr #1

0800b600 <HttpDeamonHandleRequest::HandlePost(bool)>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	4604      	mov	r4, r0
 800b604:	b082      	sub	sp, #8
 800b606:	b331      	cbz	r1, 800b656 <HttpDeamonHandleRequest::HandlePost(bool)+0x56>
 800b608:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b60a:	8aa1      	ldrh	r1, [r4, #20]
 800b60c:	61e0      	str	r0, [r4, #28]
 800b60e:	60e1      	str	r1, [r4, #12]
 800b610:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800b614:	2b00      	cmp	r3, #0
 800b616:	d13c      	bne.n	800b692 <HttpDeamonHandleRequest::HandlePost(bool)+0x92>
 800b618:	4d5e      	ldr	r5, [pc, #376]	@ (800b794 <HttpDeamonHandleRequest::HandlePost(bool)+0x194>)
 800b61a:	4b5f      	ldr	r3, [pc, #380]	@ (800b798 <HttpDeamonHandleRequest::HandlePost(bool)+0x198>)
 800b61c:	782e      	ldrb	r6, [r5, #0]
 800b61e:	460a      	mov	r2, r1
 800b620:	4601      	mov	r1, r0
 800b622:	6818      	ldr	r0, [r3, #0]
 800b624:	f046 0301 	orr.w	r3, r6, #1
 800b628:	702b      	strb	r3, [r5, #0]
 800b62a:	f7ff fa2f 	bl	800aa8c <RemoteConfig::HandleSet(void*, unsigned long)>
 800b62e:	782b      	ldrb	r3, [r5, #0]
 800b630:	07f2      	lsls	r2, r6, #31
 800b632:	bf4c      	ite	mi
 800b634:	f043 0301 	orrmi.w	r3, r3, #1
 800b638:	f023 0301 	bicpl.w	r3, r3, #1
 800b63c:	702b      	strb	r3, [r5, #0]
 800b63e:	2300      	movs	r3, #0
 800b640:	4a56      	ldr	r2, [pc, #344]	@ (800b79c <HttpDeamonHandleRequest::HandlePost(bool)+0x19c>)
 800b642:	4857      	ldr	r0, [pc, #348]	@ (800b7a0 <HttpDeamonHandleRequest::HandlePost(bool)+0x1a0>)
 800b644:	6323      	str	r3, [r4, #48]	@ 0x30
 800b646:	f240 519f 	movw	r1, #1439	@ 0x59f
 800b64a:	f00f fb15 	bl	801ac78 <snprintf>
 800b64e:	60a0      	str	r0, [r4, #8]
 800b650:	20c8      	movs	r0, #200	@ 0xc8
 800b652:	b002      	add	sp, #8
 800b654:	bd70      	pop	{r4, r5, r6, pc}
 800b656:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b658:	2b03      	cmp	r3, #3
 800b65a:	d134      	bne.n	800b6c6 <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800b65c:	6985      	ldr	r5, [r0, #24]
 800b65e:	782b      	ldrb	r3, [r5, #0]
 800b660:	2b2f      	cmp	r3, #47	@ 0x2f
 800b662:	f040 808c 	bne.w	800b77e <HttpDeamonHandleRequest::HandlePost(bool)+0x17e>
 800b666:	4a4f      	ldr	r2, [pc, #316]	@ (800b7a4 <HttpDeamonHandleRequest::HandlePost(bool)+0x1a4>)
 800b668:	4629      	mov	r1, r5
 800b66a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b66e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b672:	4283      	cmp	r3, r0
 800b674:	d12b      	bne.n	800b6ce <HttpDeamonHandleRequest::HandlePost(bool)+0xce>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1f7      	bne.n	800b66a <HttpDeamonHandleRequest::HandlePost(bool)+0x6a>
 800b67a:	2301      	movs	r3, #1
 800b67c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800b680:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b684:	429a      	cmp	r2, r3
 800b686:	d3e3      	bcc.n	800b650 <HttpDeamonHandleRequest::HandlePost(bool)+0x50>
 800b688:	68e1      	ldr	r1, [r4, #12]
 800b68a:	2900      	cmp	r1, #0
 800b68c:	d0e0      	beq.n	800b650 <HttpDeamonHandleRequest::HandlePost(bool)+0x50>
 800b68e:	69e0      	ldr	r0, [r4, #28]
 800b690:	e7be      	b.n	800b610 <HttpDeamonHandleRequest::HandlePost(bool)+0x10>
 800b692:	2201      	movs	r2, #1
 800b694:	f00b fee6 	bl	8017464 <properties::convert_json_file(char*, unsigned long, bool)>
 800b698:	1e05      	subs	r5, r0, #0
 800b69a:	dd14      	ble.n	800b6c6 <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800b69c:	69e3      	ldr	r3, [r4, #28]
 800b69e:	4942      	ldr	r1, [pc, #264]	@ (800b7a8 <HttpDeamonHandleRequest::HandlePost(bool)+0x1a8>)
 800b6a0:	442b      	add	r3, r5
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b6a8:	69e0      	ldr	r0, [r4, #28]
 800b6aa:	f10d 0207 	add.w	r2, sp, #7
 800b6ae:	f00c f985 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b6b2:	bb20      	cbnz	r0, 800b6fe <HttpDeamonHandleRequest::HandlePost(bool)+0xfe>
 800b6b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0c0      	beq.n	800b63e <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800b6bc:	4b36      	ldr	r3, [pc, #216]	@ (800b798 <HttpDeamonHandleRequest::HandlePost(bool)+0x198>)
 800b6be:	6818      	ldr	r0, [r3, #0]
 800b6c0:	7b83      	ldrb	r3, [r0, #14]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d164      	bne.n	800b790 <HttpDeamonHandleRequest::HandlePost(bool)+0x190>
 800b6c6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b6ca:	b002      	add	sp, #8
 800b6cc:	bd70      	pop	{r4, r5, r6, pc}
 800b6ce:	1a1b      	subs	r3, r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	bf0c      	ite	eq
 800b6d4:	2301      	moveq	r3, #1
 800b6d6:	2300      	movne	r3, #0
 800b6d8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800b6dc:	d0d0      	beq.n	800b680 <HttpDeamonHandleRequest::HandlePost(bool)+0x80>
 800b6de:	782b      	ldrb	r3, [r5, #0]
 800b6e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6e2:	d109      	bne.n	800b6f8 <HttpDeamonHandleRequest::HandlePost(bool)+0xf8>
 800b6e4:	4a31      	ldr	r2, [pc, #196]	@ (800b7ac <HttpDeamonHandleRequest::HandlePost(bool)+0x1ac>)
 800b6e6:	e001      	b.n	800b6ec <HttpDeamonHandleRequest::HandlePost(bool)+0xec>
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d0c9      	beq.n	800b680 <HttpDeamonHandleRequest::HandlePost(bool)+0x80>
 800b6ec:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800b6f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b6f4:	428b      	cmp	r3, r1
 800b6f6:	d0f7      	beq.n	800b6e8 <HttpDeamonHandleRequest::HandlePost(bool)+0xe8>
 800b6f8:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 800b6fc:	e7a9      	b.n	800b652 <HttpDeamonHandleRequest::HandlePost(bool)+0x52>
 800b6fe:	492c      	ldr	r1, [pc, #176]	@ (800b7b0 <HttpDeamonHandleRequest::HandlePost(bool)+0x1b0>)
 800b700:	69e0      	ldr	r0, [r4, #28]
 800b702:	f10d 0207 	add.w	r2, sp, #7
 800b706:	f00c f959 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b70a:	b178      	cbz	r0, 800b72c <HttpDeamonHandleRequest::HandlePost(bool)+0x12c>
 800b70c:	4929      	ldr	r1, [pc, #164]	@ (800b7b4 <HttpDeamonHandleRequest::HandlePost(bool)+0x1b4>)
 800b70e:	69e0      	ldr	r0, [r4, #28]
 800b710:	f10d 0207 	add.w	r2, sp, #7
 800b714:	f00c f952 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b718:	bb10      	cbnz	r0, 800b760 <HttpDeamonHandleRequest::HandlePost(bool)+0x160>
 800b71a:	4a27      	ldr	r2, [pc, #156]	@ (800b7b8 <HttpDeamonHandleRequest::HandlePost(bool)+0x1b8>)
 800b71c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b720:	6810      	ldr	r0, [r2, #0]
 800b722:	b37b      	cbz	r3, 800b784 <HttpDeamonHandleRequest::HandlePost(bool)+0x184>
 800b724:	2104      	movs	r1, #4
 800b726:	f00c fd29 	bl	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800b72a:	e788      	b.n	800b63e <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800b72c:	4b23      	ldr	r3, [pc, #140]	@ (800b7bc <HttpDeamonHandleRequest::HandlePost(bool)+0x1bc>)
 800b72e:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800b732:	681d      	ldr	r5, [r3, #0]
 800b734:	69a8      	ldr	r0, [r5, #24]
 800b736:	fab6 f186 	clz	r1, r6
 800b73a:	0949      	lsrs	r1, r1, #5
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f43f af7e 	beq.w	800b63e <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800b742:	6803      	ldr	r3, [r0, #0]
 800b744:	4a1e      	ldr	r2, [pc, #120]	@ (800b7c0 <HttpDeamonHandleRequest::HandlePost(bool)+0x1c0>)
 800b746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b748:	7569      	strb	r1, [r5, #21]
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d106      	bne.n	800b75c <HttpDeamonHandleRequest::HandlePost(bool)+0x15c>
 800b74e:	2e00      	cmp	r6, #0
 800b750:	f43f af75 	beq.w	800b63e <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800b754:	4b1b      	ldr	r3, [pc, #108]	@ (800b7c4 <HttpDeamonHandleRequest::HandlePost(bool)+0x1c4>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	606b      	str	r3, [r5, #4]
 800b75a:	e770      	b.n	800b63e <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800b75c:	4798      	blx	r3
 800b75e:	e7f6      	b.n	800b74e <HttpDeamonHandleRequest::HandlePost(bool)+0x14e>
 800b760:	69e0      	ldr	r0, [r4, #28]
 800b762:	4a19      	ldr	r2, [pc, #100]	@ (800b7c8 <HttpDeamonHandleRequest::HandlePost(bool)+0x1c8>)
 800b764:	1e43      	subs	r3, r0, #1
 800b766:	f100 0c04 	add.w	ip, r0, #4
 800b76a:	e001      	b.n	800b770 <HttpDeamonHandleRequest::HandlePost(bool)+0x170>
 800b76c:	4563      	cmp	r3, ip
 800b76e:	d00b      	beq.n	800b788 <HttpDeamonHandleRequest::HandlePost(bool)+0x188>
 800b770:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800b774:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b778:	428e      	cmp	r6, r1
 800b77a:	d0f7      	beq.n	800b76c <HttpDeamonHandleRequest::HandlePost(bool)+0x16c>
 800b77c:	e7a3      	b.n	800b6c6 <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800b77e:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 800b782:	e7ac      	b.n	800b6de <HttpDeamonHandleRequest::HandlePost(bool)+0xde>
 800b784:	2102      	movs	r1, #2
 800b786:	e7ce      	b.n	800b726 <HttpDeamonHandleRequest::HandlePost(bool)+0x126>
 800b788:	4629      	mov	r1, r5
 800b78a:	f00c fd9f 	bl	80182cc <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)>
 800b78e:	e756      	b.n	800b63e <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800b790:	f7ff fc08 	bl	800afa4 <RemoteConfig::HandleReboot()>
 800b794:	2000cc49 	andcs	ip, r0, r9, asr #24
 800b798:	200000a8 	andcs	r0, r0, r8, lsr #1
 800b79c:	0801c970 	stmdaeq	r1, {r4, r5, r6, r8, fp, lr, pc}
 800b7a0:	200000ac 	andcs	r0, r0, ip, lsr #1
 800b7a4:	0801c934 	stmdaeq	r1, {r2, r4, r5, r8, fp, lr, pc}
 800b7a8:	0801c94c 	stmdaeq	r1, {r2, r3, r6, r8, fp, lr, pc}
 800b7ac:	0801c944 	stmdaeq	r1, {r2, r6, r8, fp, lr, pc}
 800b7b0:	0801c954 	stmdaeq	r1, {r2, r4, r6, r8, fp, lr, pc}
 800b7b4:	0801c95c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, lr, pc}
 800b7b8:	2000cd38 	andcs	ip, r0, r8, lsr sp
 800b7bc:	2000cc4c 	andcs	ip, r0, ip, asr #24
 800b7c0:	0800b12d 	stmdaeq	r0, {r0, r2, r3, r5, r8, ip, sp, pc}
 800b7c4:	2001a628 	andcs	sl, r1, r8, lsr #12
 800b7c8:	0801c968 	stmdaeq	r1, {r3, r5, r6, r8, fp, lr, pc}

0800b7cc <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b7d0:	6141      	str	r1, [r0, #20]
 800b7d2:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	4604      	mov	r4, r0
 800b7da:	6242      	str	r2, [r0, #36]	@ 0x24
 800b7dc:	d05f      	beq.n	800b89e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xd2>
 800b7de:	2bc8      	cmp	r3, #200	@ 0xc8
 800b7e0:	d055      	beq.n	800b88e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xc2>
 800b7e2:	f5b3 7fcf 	cmp.w	r3, #414	@ 0x19e
 800b7e6:	dc10      	bgt.n	800b80a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x3e>
 800b7e8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800b7ec:	db1c      	blt.n	800b828 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5c>
 800b7ee:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800b7f2:	2a0e      	cmp	r2, #14
 800b7f4:	d818      	bhi.n	800b828 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5c>
 800b7f6:	e8df f002 	tbb	[pc, r2]
 800b7fa:	17171772 			@ <UNDEFINED> instruction: 0x17171772
 800b7fe:	17171770 			@ <UNDEFINED> instruction: 0x17171770
 800b802:	17171717 			@ <UNDEFINED> instruction: 0x17171717
 800b806:	00606217 	rsbeq	r6, r0, r7, lsl r2
 800b80a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800b80e:	4293      	cmp	r3, r2
 800b810:	d057      	beq.n	800b8c2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xf6>
 800b812:	f240 12f9 	movw	r2, #505	@ 0x1f9
 800b816:	4293      	cmp	r3, r2
 800b818:	d04d      	beq.n	800b8b6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xea>
 800b81a:	4e3a      	ldr	r6, [pc, #232]	@ (800b904 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x138>)
 800b81c:	4a3a      	ldr	r2, [pc, #232]	@ (800b908 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x13c>)
 800b81e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800b822:	bf08      	it	eq
 800b824:	4616      	moveq	r6, r2
 800b826:	e000      	b.n	800b82a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800b828:	4e36      	ldr	r6, [pc, #216]	@ (800b904 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x138>)
 800b82a:	4838      	ldr	r0, [pc, #224]	@ (800b90c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x140>)
 800b82c:	6220      	str	r0, [r4, #32]
 800b82e:	2200      	movs	r2, #0
 800b830:	6322      	str	r2, [r4, #48]	@ 0x30
 800b832:	f240 519f 	movw	r1, #1439	@ 0x59f
 800b836:	e9cd 6600 	strd	r6, r6, [sp]
 800b83a:	4a35      	ldr	r2, [pc, #212]	@ (800b910 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x144>)
 800b83c:	f00f fa1c 	bl	801ac78 <snprintf>
 800b840:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	@ 0x24
 800b844:	60a0      	str	r0, [r4, #8]
 800b846:	4933      	ldr	r1, [pc, #204]	@ (800b914 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x148>)
 800b848:	9003      	str	r0, [sp, #12]
 800b84a:	9600      	str	r6, [sp, #0]
 800b84c:	6809      	ldr	r1, [r1, #0]
 800b84e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800b850:	4a31      	ldr	r2, [pc, #196]	@ (800b918 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x14c>)
 800b852:	3116      	adds	r1, #22
 800b854:	9101      	str	r1, [sp, #4]
 800b856:	4931      	ldr	r1, [pc, #196]	@ (800b91c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x150>)
 800b858:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b85c:	9102      	str	r1, [sp, #8]
 800b85e:	4628      	mov	r0, r5
 800b860:	f240 519f 	movw	r1, #1439	@ 0x59f
 800b864:	f00f fa08 	bl	801ac78 <snprintf>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b86c:	4602      	mov	r2, r0
 800b86e:	6860      	ldr	r0, [r4, #4]
 800b870:	f009 ff20 	bl	80156b4 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	68a2      	ldr	r2, [r4, #8]
 800b878:	6a21      	ldr	r1, [r4, #32]
 800b87a:	6860      	ldr	r0, [r4, #4]
 800b87c:	f009 ff1a 	bl	80156b4 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>
 800b880:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800b884:	2303      	movs	r3, #3
 800b886:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
 800b88a:	b004      	add	sp, #16
 800b88c:	bd70      	pop	{r4, r5, r6, pc}
 800b88e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b890:	2901      	cmp	r1, #1
 800b892:	4615      	mov	r5, r2
 800b894:	d017      	beq.n	800b8c6 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xfa>
 800b896:	68a0      	ldr	r0, [r4, #8]
 800b898:	4e21      	ldr	r6, [pc, #132]	@ (800b920 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x154>)
 800b89a:	23c8      	movs	r3, #200	@ 0xc8
 800b89c:	e7d3      	b.n	800b846 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x7a>
 800b89e:	f7ff fd3d 	bl	800b31c <HttpDeamonHandleRequest::ParseRequest()>
 800b8a2:	28c8      	cmp	r0, #200	@ 0xc8
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b8a8:	d19b      	bne.n	800b7e2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800b8aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b8ac:	b1cb      	cbz	r3, 800b8e2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x116>
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d01b      	beq.n	800b8ea <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x11e>
 800b8b2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b8b4:	e7ef      	b.n	800b896 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xca>
 800b8b6:	4e1b      	ldr	r6, [pc, #108]	@ (800b924 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x158>)
 800b8b8:	e7b7      	b.n	800b82a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800b8ba:	4e1b      	ldr	r6, [pc, #108]	@ (800b928 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x15c>)
 800b8bc:	e7b5      	b.n	800b82a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800b8be:	4e1b      	ldr	r6, [pc, #108]	@ (800b92c <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x160>)
 800b8c0:	e7b3      	b.n	800b82a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800b8c2:	4e1b      	ldr	r6, [pc, #108]	@ (800b930 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x164>)
 800b8c4:	e7b1      	b.n	800b82a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800b8c6:	f7ff fe9b 	bl	800b600 <HttpDeamonHandleRequest::HandlePost(bool)>
 800b8ca:	28c8      	cmp	r0, #200	@ 0xc8
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b8d0:	d187      	bne.n	800b7e2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800b8d2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b8d4:	68a0      	ldr	r0, [r4, #8]
 800b8d6:	4e12      	ldr	r6, [pc, #72]	@ (800b920 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x154>)
 800b8d8:	e7b5      	b.n	800b846 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x7a>
 800b8da:	4e16      	ldr	r6, [pc, #88]	@ (800b934 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x168>)
 800b8dc:	e7a5      	b.n	800b82a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800b8de:	4e16      	ldr	r6, [pc, #88]	@ (800b938 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16c>)
 800b8e0:	e7a3      	b.n	800b82a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f7ff fda6 	bl	800b434 <HttpDeamonHandleRequest::HandleGet()>
 800b8e8:	e7ef      	b.n	800b8ca <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xfe>
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f7ff fe87 	bl	800b600 <HttpDeamonHandleRequest::HandlePost(bool)>
 800b8f2:	28c8      	cmp	r0, #200	@ 0xc8
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b8f8:	f47f af73 	bne.w	800b7e2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800b8fc:	68e3      	ldr	r3, [r4, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1d7      	bne.n	800b8b2 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xe6>
 800b902:	e7c2      	b.n	800b88a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xbe>
 800b904:	0801c9d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, fp, lr, pc}
 800b908:	0801ca1c 	stmdaeq	r1, {r2, r3, r4, r9, fp, lr, pc}
 800b90c:	200000ac 	andcs	r0, r0, ip, lsr #1
 800b910:	0801ca74 	stmdaeq	r1, {r2, r4, r5, r6, r9, fp, lr, pc}
 800b914:	2000cb68 	andcs	ip, r0, r8, ror #22
 800b918:	0801cad0 	stmdaeq	r1, {r4, r6, r7, r9, fp, lr, pc}
 800b91c:	0801d250 	stmdaeq	r1, {r4, r6, r9, ip, lr, pc}
 800b920:	0801ca70 	stmdaeq	r1, {r4, r5, r6, r9, fp, lr, pc}
 800b924:	0801ca4c 	stmdaeq	r1, {r2, r3, r6, r9, fp, lr, pc}
 800b928:	0801ca04 	stmdaeq	r1, {r2, r9, fp, lr, pc}
 800b92c:	0801c9e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, fp, lr, pc}
 800b930:	0801ca34 	stmdaeq	r1, {r2, r4, r5, r9, fp, lr, pc}
 800b934:	0801ca64 	stmdaeq	r1, {r2, r5, r6, r9, fp, lr, pc}
 800b938:	0801c9cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, fp, lr, pc}

0800b93c <remoteconfig::json_get_list(char*, unsigned long)>:
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800b99c <remoteconfig::json_get_list(char*, unsigned long)+0x60>
 800b944:	4b12      	ldr	r3, [pc, #72]	@ (800b990 <remoteconfig::json_get_list(char*, unsigned long)+0x54>)
 800b946:	b088      	sub	sp, #32
 800b948:	4605      	mov	r5, r0
 800b94a:	f8d8 0000 	ldr.w	r0, [r8]
 800b94e:	681c      	ldr	r4, [r3, #0]
 800b950:	460e      	mov	r6, r1
 800b952:	f7fe ff6d 	bl	800a830 <RemoteConfig::GetStringNode() const>
 800b956:	4607      	mov	r7, r0
 800b958:	f8d8 0000 	ldr.w	r0, [r8]
 800b95c:	f7fe ff74 	bl	800a848 <RemoteConfig::GetStringOutput() const>
 800b960:	4b0c      	ldr	r3, [pc, #48]	@ (800b994 <remoteconfig::json_get_list(char*, unsigned long)+0x58>)
 800b962:	7a1a      	ldrb	r2, [r3, #8]
 800b964:	9704      	str	r7, [sp, #16]
 800b966:	3309      	adds	r3, #9
 800b968:	9303      	str	r3, [sp, #12]
 800b96a:	0e23      	lsrs	r3, r4, #24
 800b96c:	9302      	str	r3, [sp, #8]
 800b96e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b978:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	4a06      	ldr	r2, [pc, #24]	@ (800b998 <remoteconfig::json_get_list(char*, unsigned long)+0x5c>)
 800b980:	b2e3      	uxtb	r3, r4
 800b982:	4631      	mov	r1, r6
 800b984:	4628      	mov	r0, r5
 800b986:	f00f f977 	bl	801ac78 <snprintf>
 800b98a:	b008      	add	sp, #32
 800b98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b990:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800b994:	20000084 	andcs	r0, r0, r4, lsl #1
 800b998:	0801b9f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, fp, ip, sp, pc}
 800b99c:	200000a8 	andcs	r0, r0, r8, lsr #1

0800b9a0 <remoteconfig::json_get_version(char*, unsigned long)>:
 800b9a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <remoteconfig::json_get_version(char*, unsigned long)+0x2c>)
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	2208      	movs	r2, #8
 800b9a8:	9204      	str	r2, [sp, #16]
 800b9aa:	f1a3 020b 	sub.w	r2, r3, #11
 800b9ae:	9203      	str	r2, [sp, #12]
 800b9b0:	220b      	movs	r2, #11
 800b9b2:	9202      	str	r2, [sp, #8]
 800b9b4:	3b0e      	subs	r3, #14
 800b9b6:	4a06      	ldr	r2, [pc, #24]	@ (800b9d0 <remoteconfig::json_get_version(char*, unsigned long)+0x30>)
 800b9b8:	9201      	str	r2, [sp, #4]
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	4a05      	ldr	r2, [pc, #20]	@ (800b9d4 <remoteconfig::json_get_version(char*, unsigned long)+0x34>)
 800b9be:	2303      	movs	r3, #3
 800b9c0:	f00f f95a 	bl	801ac78 <snprintf>
 800b9c4:	b007      	add	sp, #28
 800b9c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9ca:	bf00      	nop
 800b9cc:	2000cd2e 	andcs	ip, r0, lr, lsr #26
 800b9d0:	0801ba9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, fp, ip, sp, pc}
 800b9d4:	0801ba56 	stmdaeq	r1, {r1, r2, r4, r6, r9, fp, ip, sp, pc}

0800b9d8 <remoteconfig::json_get_uptime(char*, unsigned long)>:
 800b9d8:	4b02      	ldr	r3, [pc, #8]	@ (800b9e4 <remoteconfig::json_get_uptime(char*, unsigned long)+0xc>)
 800b9da:	4a03      	ldr	r2, [pc, #12]	@ (800b9e8 <remoteconfig::json_get_uptime(char*, unsigned long)+0x10>)
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	f00f b94b 	b.w	801ac78 <snprintf>
 800b9e2:	bf00      	nop
 800b9e4:	2001a620 	andcs	sl, r1, r0, lsr #12
 800b9e8:	0801baab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, fp, ip, sp, pc}

0800b9ec <remoteconfig::json_get_display(char*, unsigned long)>:
 800b9ec:	4b03      	ldr	r3, [pc, #12]	@ (800b9fc <remoteconfig::json_get_display(char*, unsigned long)+0x10>)
 800b9ee:	4a04      	ldr	r2, [pc, #16]	@ (800ba00 <remoteconfig::json_get_display(char*, unsigned long)+0x14>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	7d5b      	ldrb	r3, [r3, #21]
 800b9f4:	f083 0301 	eor.w	r3, r3, #1
 800b9f8:	f00f b93e 	b.w	801ac78 <snprintf>
 800b9fc:	2000cc4c 	andcs	ip, r0, ip, asr #24
 800ba00:	0801baba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, ip, sp, pc}

0800ba04 <remoteconfig::json_get_directory(char*, unsigned long)>:
 800ba04:	4a01      	ldr	r2, [pc, #4]	@ (800ba0c <remoteconfig::json_get_directory(char*, unsigned long)+0x8>)
 800ba06:	f00f b937 	b.w	801ac78 <snprintf>
 800ba0a:	bf00      	nop
 800ba0c:	0801bac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp, ip, sp, pc}

0800ba10 <get_file_content(char const*, unsigned long&, http::contentTypes&)>:
 800ba10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba12:	4c0e      	ldr	r4, [pc, #56]	@ (800ba4c <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x3c>)
 800ba14:	2309      	movs	r3, #9
 800ba16:	3b01      	subs	r3, #1
 800ba18:	d104      	bne.n	800ba24 <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x14>
 800ba1a:	600b      	str	r3, [r1, #0]
 800ba1c:	2105      	movs	r1, #5
 800ba1e:	6011      	str	r1, [r2, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	e011      	b.n	800ba48 <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x38>
 800ba24:	6825      	ldr	r5, [r4, #0]
 800ba26:	1e47      	subs	r7, r0, #1
 800ba28:	3d01      	subs	r5, #1
 800ba2a:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800ba2e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ba32:	4566      	cmp	r6, ip
 800ba34:	d001      	beq.n	800ba3a <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x2a>
 800ba36:	3410      	adds	r4, #16
 800ba38:	e7ed      	b.n	800ba16 <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x6>
 800ba3a:	2e00      	cmp	r6, #0
 800ba3c:	d1f5      	bne.n	800ba2a <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x1a>
 800ba3e:	68a3      	ldr	r3, [r4, #8]
 800ba40:	600b      	str	r3, [r1, #0]
 800ba42:	6860      	ldr	r0, [r4, #4]
 800ba44:	68e3      	ldr	r3, [r4, #12]
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0801d34c 	stmdaeq	r1, {r2, r3, r6, r8, r9, ip, lr, pc}

0800ba50 <strncpy.isra.0>:
 800ba50:	3901      	subs	r1, #1
 800ba52:	b112      	cbz	r2, 800ba5a <strncpy.isra.0+0xa>
 800ba54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba58:	b913      	cbnz	r3, 800ba60 <strncpy.isra.0+0x10>
 800ba5a:	4402      	add	r2, r0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e005      	b.n	800ba6c <strncpy.isra.0+0x1c>
 800ba60:	f800 3b01 	strb.w	r3, [r0], #1
 800ba64:	3a01      	subs	r2, #1
 800ba66:	e7f4      	b.n	800ba52 <strncpy.isra.0+0x2>
 800ba68:	f800 3b01 	strb.w	r3, [r0], #1
 800ba6c:	4290      	cmp	r0, r2
 800ba6e:	d1fb      	bne.n	800ba68 <strncpy.isra.0+0x18>
 800ba70:	4770      	bx	lr
	...

0800ba74 <ArtNetNode::Start()>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	f894 376b 	ldrb.w	r3, [r4, #1899]	@ 0x76b
 800ba80:	f063 031f 	orn	r3, r3, #31
 800ba84:	f884 376b 	strb.w	r3, [r4, #1899]	@ 0x76b
 800ba88:	4b15      	ldr	r3, [pc, #84]	@ (800bae0 <ArtNetNode::Start()+0x6c>)
 800ba8a:	7e9a      	ldrb	r2, [r3, #26]
 800ba8c:	f894 3828 	ldrb.w	r3, [r4, #2088]	@ 0x828
 800ba90:	f002 0202 	and.w	r2, r2, #2
 800ba94:	f003 03e9 	and.w	r3, r3, #233	@ 0xe9
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	4a12      	ldr	r2, [pc, #72]	@ (800bae4 <ArtNetNode::Start()+0x70>)
 800ba9c:	f043 0318 	orr.w	r3, r3, #24
 800baa0:	6812      	ldr	r2, [r2, #0]
 800baa2:	f884 3828 	strb.w	r3, [r4, #2088]	@ 0x828
 800baa6:	7912      	ldrb	r2, [r2, #4]
 800baa8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800baac:	f043 0301 	orr.w	r3, r3, #1
 800bab0:	f884 3828 	strb.w	r3, [r4, #2088]	@ 0x828
 800bab4:	2321      	movs	r3, #33	@ 0x21
 800bab6:	f884 382d 	strb.w	r3, [r4, #2093]	@ 0x82d
 800baba:	f641 1036 	movw	r0, #6454	@ 0x1936
 800babe:	f009 fe53 	bl	8015768 <net::udp_begin(unsigned short)>
 800bac2:	f8c5 0bc4 	str.w	r0, [r5, #3012]	@ 0xbc4
 800bac6:	4628      	mov	r0, r5
 800bac8:	f002 fa04 	bl	800ded4 <E131Bridge::Start()>
 800bacc:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <ArtNetNode::Start()+0x74>)
 800bace:	2102      	movs	r1, #2
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f884 1139 	strb.w	r1, [r4, #313]	@ 0x139
 800bad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bada:	f00c bb4f 	b.w	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800bade:	bf00      	nop
 800bae0:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800bae4:	2000cb68 	andcs	ip, r0, r8, ror #22
 800bae8:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800baec <ArtNetNode::Stop()>:
 800baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf0:	4604      	mov	r4, r0
 800baf2:	f002 f9f9 	bl	800dee8 <E131Bridge::Stop()>
 800baf6:	f504 578b 	add.w	r7, r4, #4448	@ 0x1160
 800bafa:	4e18      	ldr	r6, [pc, #96]	@ (800bb5c <ArtNetNode::Stop()+0x70>)
 800bafc:	2500      	movs	r5, #0
 800bafe:	f604 38f4 	addw	r8, r4, #3060	@ 0xbf4
 800bb02:	3713      	adds	r7, #19
 800bb04:	2328      	movs	r3, #40	@ 0x28
 800bb06:	436b      	muls	r3, r5
 800bb08:	f858 3003 	ldr.w	r3, [r8, r3]
 800bb0c:	b963      	cbnz	r3, 800bb28 <ArtNetNode::Stop()+0x3c>
 800bb0e:	f8d4 0bdc 	ldr.w	r0, [r4, #3036]	@ 0xbdc
 800bb12:	b118      	cbz	r0, 800bb1c <ArtNetNode::Stop()+0x30>
 800bb14:	6803      	ldr	r3, [r0, #0]
 800bb16:	4629      	mov	r1, r5
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	4798      	blx	r3
 800bb1c:	2324      	movs	r3, #36	@ 0x24
 800bb1e:	436b      	muls	r3, r5
 800bb20:	2200      	movs	r2, #0
 800bb22:	f8c6 2600 	str.w	r2, [r6, #1536]	@ 0x600
 800bb26:	54fa      	strb	r2, [r7, r3]
 800bb28:	3501      	adds	r5, #1
 800bb2a:	2d20      	cmp	r5, #32
 800bb2c:	f206 6604 	addw	r6, r6, #1540	@ 0x604
 800bb30:	d1e8      	bne.n	800bb04 <ArtNetNode::Stop()+0x18>
 800bb32:	4b0b      	ldr	r3, [pc, #44]	@ (800bb60 <ArtNetNode::Stop()+0x74>)
 800bb34:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800bb38:	6818      	ldr	r0, [r3, #0]
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	f00c fb1e 	bl	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800bb40:	f894 376b 	ldrb.w	r3, [r4, #1899]	@ 0x76b
 800bb44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bb4c:	f884 376b 	strb.w	r3, [r4, #1899]	@ 0x76b
 800bb50:	2301      	movs	r3, #1
 800bb52:	f884 3139 	strb.w	r3, [r4, #313]	@ 0x139
 800bb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000650 	andcs	r0, r0, r0, asr r6
 800bb60:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800bb64 <ArtNetNode::SetShortName(unsigned long, char const*)>:
 800bb64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bb66:	2528      	movs	r5, #40	@ 0x28
 800bb68:	fb05 0501 	mla	r5, r5, r1, r0
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	4606      	mov	r6, r0
 800bb70:	f605 35fc 	addw	r5, r5, #3068	@ 0xbfc
 800bb74:	4611      	mov	r1, r2
 800bb76:	bb4a      	cbnz	r2, 800bbcc <ArtNetNode::SetShortName(unsigned long, char const*)+0x68>
 800bb78:	4a17      	ldr	r2, [pc, #92]	@ (800bbd8 <ArtNetNode::SetShortName(unsigned long, char const*)+0x74>)
 800bb7a:	1c63      	adds	r3, r4, #1
 800bb7c:	2111      	movs	r1, #17
 800bb7e:	4628      	mov	r0, r5
 800bb80:	f00f f87a 	bl	801ac78 <snprintf>
 800bb84:	2328      	movs	r3, #40	@ 0x28
 800bb86:	fb03 6304 	mla	r3, r3, r4, r6
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800bb90:	f883 0c0d 	strb.w	r0, [r3, #3085]	@ 0xc0d
 800bb94:	f896 3139 	ldrb.w	r3, [r6, #313]	@ 0x139
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d115      	bne.n	800bbc8 <ArtNetNode::SetShortName(unsigned long, char const*)+0x64>
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbdc <ArtNetNode::SetShortName(unsigned long, char const*)+0x78>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	429c      	cmp	r4, r3
 800bba2:	d311      	bcc.n	800bbc8 <ArtNetNode::SetShortName(unsigned long, char const*)+0x64>
 800bba4:	1ae4      	subs	r4, r4, r3
 800bba6:	2c03      	cmp	r4, #3
 800bba8:	d80e      	bhi.n	800bbc8 <ArtNetNode::SetShortName(unsigned long, char const*)+0x64>
 800bbaa:	2380      	movs	r3, #128	@ 0x80
 800bbac:	2112      	movs	r1, #18
 800bbae:	40a3      	lsls	r3, r4
 800bbb0:	e9cd 1300 	strd	r1, r3, [sp]
 800bbb4:	9002      	str	r0, [sp, #8]
 800bbb6:	480a      	ldr	r0, [pc, #40]	@ (800bbe0 <ArtNetNode::SetShortName(unsigned long, char const*)+0x7c>)
 800bbb8:	fb01 f204 	mul.w	r2, r1, r4
 800bbbc:	6800      	ldr	r0, [r0, #0]
 800bbbe:	462b      	mov	r3, r5
 800bbc0:	3253      	adds	r2, #83	@ 0x53
 800bbc2:	2119      	movs	r1, #25
 800bbc4:	f00b fad0 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800bbc8:	b004      	add	sp, #16
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	2211      	movs	r2, #17
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff ff3e 	bl	800ba50 <strncpy.isra.0>
 800bbd4:	e7d6      	b.n	800bb84 <ArtNetNode::SetShortName(unsigned long, char const*)+0x20>
 800bbd6:	bf00      	nop
 800bbd8:	0801bbc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, fp, ip, sp, pc}
 800bbdc:	20000000 	andcs	r0, r0, r0
 800bbe0:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800bbe4 <ArtNetNode::GetLongNameDefault(char*)>:
 800bbe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbe6:	4b07      	ldr	r3, [pc, #28]	@ (800bc04 <ArtNetNode::GetLongNameDefault(char*)+0x20>)
 800bbe8:	9302      	str	r3, [sp, #8]
 800bbea:	2304      	movs	r3, #4
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	4b06      	ldr	r3, [pc, #24]	@ (800bc08 <ArtNetNode::GetLongNameDefault(char*)+0x24>)
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	4a06      	ldr	r2, [pc, #24]	@ (800bc0c <ArtNetNode::GetLongNameDefault(char*)+0x28>)
 800bbf4:	4b06      	ldr	r3, [pc, #24]	@ (800bc10 <ArtNetNode::GetLongNameDefault(char*)+0x2c>)
 800bbf6:	4608      	mov	r0, r1
 800bbf8:	213f      	movs	r1, #63	@ 0x3f
 800bbfa:	f00f f83d 	bl	801ac78 <snprintf>
 800bbfe:	b005      	add	sp, #20
 800bc00:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc04:	0801bbd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, ip, sp, pc}
 800bc08:	0801e909 	stmdaeq	r1, {r0, r3, r8, fp, sp, lr, pc}
 800bc0c:	0801bbcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, ip, sp, pc}
 800bc10:	0801ba9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, fp, ip, sp, pc}

0800bc14 <ArtNetNode::SetLongName(char const*)>:
 800bc14:	b530      	push	{r4, r5, lr}
 800bc16:	4604      	mov	r4, r0
 800bc18:	b085      	sub	sp, #20
 800bc1a:	f500 55bc 	add.w	r5, r0, #6016	@ 0x1780
 800bc1e:	b9e1      	cbnz	r1, 800bc5a <ArtNetNode::SetLongName(char const*)+0x46>
 800bc20:	4629      	mov	r1, r5
 800bc22:	f7ff ffdf 	bl	800bbe4 <ArtNetNode::GetLongNameDefault(char*)>
 800bc26:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f894 2139 	ldrb.w	r2, [r4, #313]	@ 0x139
 800bc30:	f884 37bf 	strb.w	r3, [r4, #1983]	@ 0x7bf
 800bc34:	2a02      	cmp	r2, #2
 800bc36:	d115      	bne.n	800bc64 <ArtNetNode::SetLongName(char const*)+0x50>
 800bc38:	9302      	str	r3, [sp, #8]
 800bc3a:	2340      	movs	r3, #64	@ 0x40
 800bc3c:	e9cd 3300 	strd	r3, r3, [sp]
 800bc40:	4809      	ldr	r0, [pc, #36]	@ (800bc68 <ArtNetNode::SetLongName(char const*)+0x54>)
 800bc42:	462b      	mov	r3, r5
 800bc44:	6800      	ldr	r0, [r0, #0]
 800bc46:	2213      	movs	r2, #19
 800bc48:	2119      	movs	r1, #25
 800bc4a:	f00b fa8d 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800bc4e:	4628      	mov	r0, r5
 800bc50:	b005      	add	sp, #20
 800bc52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc56:	f00b b882 	b.w	8016d5e <artnet::display_longname(char const*)>
 800bc5a:	223f      	movs	r2, #63	@ 0x3f
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	f7ff fef7 	bl	800ba50 <strncpy.isra.0>
 800bc62:	e7e0      	b.n	800bc26 <ArtNetNode::SetLongName(char const*)+0x12>
 800bc64:	b005      	add	sp, #20
 800bc66:	bd30      	pop	{r4, r5, pc}
 800bc68:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800bc6c <ArtNetNode::ArtNetNode()>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	4604      	mov	r4, r0
 800bc70:	f002 f8da 	bl	800de28 <E131Bridge::E131Bridge()>
 800bc74:	4a5f      	ldr	r2, [pc, #380]	@ (800bdf4 <ArtNetNode::ArtNetNode()+0x188>)
 800bc76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc7a:	6014      	str	r4, [r2, #0]
 800bc7c:	f504 52ba 	add.w	r2, r4, #5952	@ 0x1740
 800bc80:	f8c4 3bc4 	str.w	r3, [r4, #3012]	@ 0xbc4
 800bc84:	3214      	adds	r2, #20
 800bc86:	2300      	movs	r3, #0
 800bc88:	f504 51c2 	add.w	r1, r4, #6208	@ 0x1840
 800bc8c:	f8c4 3bc8 	str.w	r3, [r4, #3016]	@ 0xbc8
 800bc90:	f8c4 3bd0 	str.w	r3, [r4, #3024]	@ 0xbd0
 800bc94:	f8c4 3bd4 	str.w	r3, [r4, #3028]	@ 0xbd4
 800bc98:	f8c4 3bd8 	str.w	r3, [r4, #3032]	@ 0xbd8
 800bc9c:	f8c4 3bdc 	str.w	r3, [r4, #3036]	@ 0xbdc
 800bca0:	f8c4 3be0 	str.w	r3, [r4, #3040]	@ 0xbe0
 800bca4:	f8c4 3be4 	str.w	r3, [r4, #3044]	@ 0xbe4
 800bca8:	3103      	adds	r1, #3
 800bcaa:	4610      	mov	r0, r2
 800bcac:	f800 3b01 	strb.w	r3, [r0], #1
 800bcb0:	4288      	cmp	r0, r1
 800bcb2:	d1fb      	bne.n	800bcac <ArtNetNode::ArtNetNode()+0x40>
 800bcb4:	f504 53ba 	add.w	r3, r4, #5952	@ 0x1740
 800bcb8:	494f      	ldr	r1, [pc, #316]	@ (800bdf8 <ArtNetNode::ArtNetNode()+0x18c>)
 800bcba:	331c      	adds	r3, #28
 800bcbc:	f811 0b01 	ldrb.w	r0, [r1], #1
 800bcc0:	f802 0b01 	strb.w	r0, [r2], #1
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d1f9      	bne.n	800bcbc <ArtNetNode::ArtNetNode()+0x50>
 800bcc8:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 800bccc:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800bcd0:	f8a5 375c 	strh.w	r3, [r5, #1884]	@ 0x75c
 800bcd4:	f641 1336 	movw	r3, #6454	@ 0x1936
 800bcd8:	f8a5 3762 	strh.w	r3, [r5, #1890]	@ 0x762
 800bcdc:	4b47      	ldr	r3, [pc, #284]	@ (800bdfc <ArtNetNode::ArtNetNode()+0x190>)
 800bcde:	4948      	ldr	r1, [pc, #288]	@ (800be00 <ArtNetNode::ArtNetNode()+0x194>)
 800bce0:	781a      	ldrb	r2, [r3, #0]
 800bce2:	f885 2764 	strb.w	r2, [r5, #1892]	@ 0x764
 800bce6:	785b      	ldrb	r3, [r3, #1]
 800bce8:	f885 3765 	strb.w	r3, [r5, #1893]	@ 0x765
 800bcec:	4b45      	ldr	r3, [pc, #276]	@ (800be04 <ArtNetNode::ArtNetNode()+0x198>)
 800bcee:	781a      	ldrb	r2, [r3, #0]
 800bcf0:	f885 2768 	strb.w	r2, [r5, #1896]	@ 0x768
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	f885 3769 	strb.w	r3, [r5, #1897]	@ 0x769
 800bcfa:	4b43      	ldr	r3, [pc, #268]	@ (800be08 <ArtNetNode::ArtNetNode()+0x19c>)
 800bcfc:	785a      	ldrb	r2, [r3, #1]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	f885 276c 	strb.w	r2, [r5, #1900]	@ 0x76c
 800bd04:	f885 376d 	strb.w	r3, [r5, #1901]	@ 0x76d
 800bd08:	f504 52c1 	add.w	r2, r4, #6176	@ 0x1820
 800bd0c:	f504 53c0 	add.w	r3, r4, #6144	@ 0x1800
 800bd10:	331d      	adds	r3, #29
 800bd12:	3203      	adds	r2, #3
 800bd14:	f811 0b01 	ldrb.w	r0, [r1], #1
 800bd18:	f803 0b01 	strb.w	r0, [r3], #1
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d1f9      	bne.n	800bd14 <ArtNetNode::ArtNetNode()+0xa8>
 800bd20:	f504 5787 	add.w	r7, r4, #4320	@ 0x10e0
 800bd24:	2364      	movs	r3, #100	@ 0x64
 800bd26:	3710      	adds	r7, #16
 800bd28:	f504 568a 	add.w	r6, r4, #4416	@ 0x1140
 800bd2c:	f885 3816 	strb.w	r3, [r5, #2070]	@ 0x816
 800bd30:	3614      	adds	r6, #20
 800bd32:	463b      	mov	r3, r7
 800bd34:	2200      	movs	r2, #0
 800bd36:	f803 2b01 	strb.w	r2, [r3], #1
 800bd3a:	42b3      	cmp	r3, r6
 800bd3c:	d1fb      	bne.n	800bd36 <ArtNetNode::ArtNetNode()+0xca>
 800bd3e:	f240 1301 	movw	r3, #257	@ 0x101
 800bd42:	f8a5 3138 	strh.w	r3, [r5, #312]	@ 0x138
 800bd46:	f8b5 3821 	ldrh.w	r3, [r5, #2081]	@ 0x821
 800bd4a:	ba5b      	rev16	r3, r3
 800bd4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd56:	fb02 3311 	mls	r3, r2, r1, r3
 800bd5a:	f8c5 30fc 	str.w	r3, [r5, #252]	@ 0xfc
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4620      	mov	r0, r4
 800bd62:	f7ff ff57 	bl	800bc14 <ArtNetNode::SetLongName(char const*)>
 800bd66:	f604 33e8 	addw	r3, r4, #3048	@ 0xbe8
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	f802 1b01 	strb.w	r1, [r2], #1
 800bd72:	4297      	cmp	r7, r2
 800bd74:	d1fb      	bne.n	800bd6e <ArtNetNode::ArtNetNode()+0x102>
 800bd76:	4f25      	ldr	r7, [pc, #148]	@ (800be0c <ArtNetNode::ArtNetNode()+0x1a0>)
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	f8c5 20e8 	str.w	r2, [r5, #232]	@ 0xe8
 800bd7e:	f504 5287 	add.w	r2, r4, #4320	@ 0x10e0
 800bd82:	3208      	adds	r2, #8
 800bd84:	2102      	movs	r1, #2
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d12e      	bne.n	800bde8 <ArtNetNode::ArtNetNode()+0x17c>
 800bd8a:	2500      	movs	r5, #0
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	2200      	movs	r2, #0
 800bd90:	4620      	mov	r0, r4
 800bd92:	3501      	adds	r5, #1
 800bd94:	f7ff fee6 	bl	800bb64 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800bd98:	2d20      	cmp	r5, #32
 800bd9a:	d1f7      	bne.n	800bd8c <ArtNetNode::ArtNetNode()+0x120>
 800bd9c:	f504 52ae 	add.w	r2, r4, #5568	@ 0x15c0
 800bda0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800bda4:	4633      	mov	r3, r6
 800bda6:	f504 50af 	add.w	r0, r4, #5600	@ 0x15e0
 800bdaa:	3214      	adds	r2, #20
 800bdac:	2600      	movs	r6, #0
 800bdae:	f44f 7780 	mov.w	r7, #256	@ 0x100
 800bdb2:	f04f 0ea0 	mov.w	lr, #160	@ 0xa0
 800bdb6:	461d      	mov	r5, r3
 800bdb8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800bdbc:	f805 6b01 	strb.w	r6, [r5], #1
 800bdc0:	428d      	cmp	r5, r1
 800bdc2:	d1fb      	bne.n	800bdbc <ArtNetNode::ArtNetNode()+0x150>
 800bdc4:	811f      	strh	r7, [r3, #8]
 800bdc6:	829f      	strh	r7, [r3, #20]
 800bdc8:	f883 e01d 	strb.w	lr, [r3, #29]
 800bdcc:	f1a0 030c 	sub.w	r3, r0, #12
 800bdd0:	f803 6b01 	strb.w	r6, [r3], #1
 800bdd4:	4283      	cmp	r3, r0
 800bdd6:	d1fb      	bne.n	800bdd0 <ArtNetNode::ArtNetNode()+0x164>
 800bdd8:	4291      	cmp	r1, r2
 800bdda:	f843 cc0c 	str.w	ip, [r3, #-12]
 800bdde:	f103 000c 	add.w	r0, r3, #12
 800bde2:	d104      	bne.n	800bdee <ArtNetNode::ArtNetNode()+0x182>
 800bde4:	4620      	mov	r0, r4
 800bde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde8:	6099      	str	r1, [r3, #8]
 800bdea:	3328      	adds	r3, #40	@ 0x28
 800bdec:	e7cb      	b.n	800bd86 <ArtNetNode::ArtNetNode()+0x11a>
 800bdee:	460b      	mov	r3, r1
 800bdf0:	e7e1      	b.n	800bdb6 <ArtNetNode::ArtNetNode()+0x14a>
 800bdf2:	bf00      	nop
 800bdf4:	2000064c 	andcs	r0, r0, ip, asr #12
 800bdf8:	0801e909 	stmdaeq	r1, {r0, r3, r8, fp, sp, lr, pc}
 800bdfc:	0801e9ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, fp, sp, lr, pc}
 800be00:	2000cb9c 	mulcs	r0, ip, fp
 800be04:	0801e9ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, fp, sp, lr, pc}
 800be08:	0801e9cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, fp, sp, lr, pc}
 800be0c:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800be10 <ArtNetNode::SetNetworkDataLossCondition()>:
 800be10:	b570      	push	{r4, r5, r6, lr}
 800be12:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 800be16:	f500 548a 	add.w	r4, r0, #4416	@ 0x1140
 800be1a:	2300      	movs	r3, #0
 800be1c:	3418      	adds	r4, #24
 800be1e:	f500 55ae 	add.w	r5, r0, #5568	@ 0x15c0
 800be22:	f882 313e 	strb.w	r3, [r2, #318]	@ 0x13e
 800be26:	f882 313d 	strb.w	r3, [r2, #317]	@ 0x13d
 800be2a:	3518      	adds	r5, #24
 800be2c:	4623      	mov	r3, r4
 800be2e:	6819      	ldr	r1, [r3, #0]
 800be30:	68de      	ldr	r6, [r3, #12]
 800be32:	42f1      	cmn	r1, r6
 800be34:	d103      	bne.n	800be3e <ArtNetNode::SetNetworkDataLossCondition()+0x2e>
 800be36:	3324      	adds	r3, #36	@ 0x24
 800be38:	42ab      	cmp	r3, r5
 800be3a:	d1f8      	bne.n	800be2e <ArtNetNode::SetNetworkDataLossCondition()+0x1e>
 800be3c:	bd70      	pop	{r4, r5, r6, pc}
 800be3e:	f892 382d 	ldrb.w	r3, [r2, #2093]	@ 0x82d
 800be42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800be46:	2b40      	cmp	r3, #64	@ 0x40
 800be48:	d00e      	beq.n	800be68 <ArtNetNode::SetNetworkDataLossCondition()+0x58>
 800be4a:	d901      	bls.n	800be50 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 800be4c:	2b80      	cmp	r3, #128	@ 0x80
 800be4e:	d012      	beq.n	800be76 <ArtNetNode::SetNetworkDataLossCondition()+0x66>
 800be50:	4b0c      	ldr	r3, [pc, #48]	@ (800be84 <ArtNetNode::SetNetworkDataLossCondition()+0x74>)
 800be52:	2200      	movs	r2, #0
 800be54:	6022      	str	r2, [r4, #0]
 800be56:	60e2      	str	r2, [r4, #12]
 800be58:	3424      	adds	r4, #36	@ 0x24
 800be5a:	42ac      	cmp	r4, r5
 800be5c:	f8c3 2600 	str.w	r2, [r3, #1536]	@ 0x600
 800be60:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 800be64:	d1f6      	bne.n	800be54 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 800be66:	e7e9      	b.n	800be3c <ArtNetNode::SetNetworkDataLossCondition()+0x2c>
 800be68:	f8d0 0bdc 	ldr.w	r0, [r0, #3036]	@ 0xbdc
 800be6c:	6803      	ldr	r3, [r0, #0]
 800be6e:	2101      	movs	r1, #1
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	4798      	blx	r3
 800be74:	e7ec      	b.n	800be50 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 800be76:	f8d0 0bdc 	ldr.w	r0, [r0, #3036]	@ 0xbdc
 800be7a:	6803      	ldr	r3, [r0, #0]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be7e:	4798      	blx	r3
 800be80:	e7e6      	b.n	800be50 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 800be82:	bf00      	nop
 800be84:	20000650 	andcs	r0, r0, r0, asr r6

0800be88 <ArtNetNode::Process(unsigned long)>:
 800be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8a:	f8d0 3bd0 	ldr.w	r3, [r0, #3024]	@ 0xbd0
 800be8e:	4604      	mov	r4, r0
 800be90:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 800be94:	2900      	cmp	r1, #0
 800be96:	d144      	bne.n	800bf22 <ArtNetNode::Process(unsigned long)+0x9a>
 800be98:	f8d0 2bd4 	ldr.w	r2, [r0, #3028]	@ 0xbd4
 800be9c:	1a9b      	subs	r3, r3, r2
 800be9e:	f242 720f 	movw	r2, #9999	@ 0x270f
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d908      	bls.n	800beb8 <ArtNetNode::Process(unsigned long)+0x30>
 800bea6:	f7ff ffb3 	bl	800be10 <ArtNetNode::SetNetworkDataLossCondition()>
 800beaa:	f895 3142 	ldrb.w	r3, [r5, #322]	@ 0x142
 800beae:	f023 0302 	bic.w	r3, r3, #2
 800beb2:	f885 3142 	strb.w	r3, [r5, #322]	@ 0x142
 800beb6:	e002      	b.n	800bebe <ArtNetNode::Process(unsigned long)+0x36>
 800beb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bebc:	d2f5      	bcs.n	800beaa <ArtNetNode::Process(unsigned long)+0x22>
 800bebe:	f895 376b 	ldrb.w	r3, [r5, #1899]	@ 0x76b
 800bec2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bec6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bec8:	d10b      	bne.n	800bee2 <ArtNetNode::Process(unsigned long)+0x5a>
 800beca:	4b66      	ldr	r3, [pc, #408]	@ (800c064 <ArtNetNode::Process(unsigned long)+0x1dc>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	2b04      	cmp	r3, #4
 800bed2:	d006      	beq.n	800bee2 <ArtNetNode::Process(unsigned long)+0x5a>
 800bed4:	f895 3142 	ldrb.w	r3, [r5, #322]	@ 0x142
 800bed8:	b163      	cbz	r3, 800bef4 <ArtNetNode::Process(unsigned long)+0x6c>
 800beda:	2103      	movs	r1, #3
 800bedc:	4620      	mov	r0, r4
 800bede:	f001 ff6d 	bl	800ddbc <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)>
 800bee2:	f504 5688 	add.w	r6, r4, #4352	@ 0x1100
 800bee6:	f504 578a 	add.w	r7, r4, #4416	@ 0x1140
 800beea:	3614      	adds	r6, #20
 800beec:	3704      	adds	r7, #4
 800beee:	42b7      	cmp	r7, r6
 800bef0:	d102      	bne.n	800bef8 <ArtNetNode::Process(unsigned long)+0x70>
 800bef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef4:	2102      	movs	r1, #2
 800bef6:	e7f1      	b.n	800bedc <ArtNetNode::Process(unsigned long)+0x54>
 800bef8:	f856 2c0c 	ldr.w	r2, [r6, #-12]
 800befc:	b17a      	cbz	r2, 800bf1e <ArtNetNode::Process(unsigned long)+0x96>
 800befe:	f8d4 3bd0 	ldr.w	r3, [r4, #3024]	@ 0xbd0
 800bf02:	1a9b      	subs	r3, r3, r2
 800bf04:	f8d5 20fc 	ldr.w	r2, [r5, #252]	@ 0xfc
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d908      	bls.n	800bf1e <ArtNetNode::Process(unsigned long)+0x96>
 800bf0c:	4633      	mov	r3, r6
 800bf0e:	2100      	movs	r1, #0
 800bf10:	f843 1d0c 	str.w	r1, [r3, #-12]!
 800bf14:	4620      	mov	r0, r4
 800bf16:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800bf1a:	f001 f85f 	bl	800cfdc <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800bf1e:	360c      	adds	r6, #12
 800bf20:	e7e5      	b.n	800beee <ArtNetNode::Process(unsigned long)+0x66>
 800bf22:	f895 213d 	ldrb.w	r2, [r5, #317]	@ 0x13d
 800bf26:	f8c0 3bd4 	str.w	r3, [r0, #3028]	@ 0xbd4
 800bf2a:	b142      	cbz	r2, 800bf3e <ArtNetNode::Process(unsigned long)+0xb6>
 800bf2c:	f8d5 2104 	ldr.w	r2, [r5, #260]	@ 0x104
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800bf36:	bf24      	itt	cs
 800bf38:	2300      	movcs	r3, #0
 800bf3a:	f885 313d 	strbcs.w	r3, [r5, #317]	@ 0x13d
 800bf3e:	290b      	cmp	r1, #11
 800bf40:	d91f      	bls.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800bf42:	f8d4 3bc8 	ldr.w	r3, [r4, #3016]	@ 0xbc8
 800bf46:	7a9a      	ldrb	r2, [r3, #10]
 800bf48:	b9da      	cbnz	r2, 800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800bf4a:	7ada      	ldrb	r2, [r3, #11]
 800bf4c:	2a0e      	cmp	r2, #14
 800bf4e:	d118      	bne.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800bf50:	4945      	ldr	r1, [pc, #276]	@ (800c068 <ArtNetNode::Process(unsigned long)+0x1e0>)
 800bf52:	1e5a      	subs	r2, r3, #1
 800bf54:	1dd8      	adds	r0, r3, #7
 800bf56:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800bf5a:	f811 6b01 	ldrb.w	r6, [r1], #1
 800bf5e:	42b7      	cmp	r7, r6
 800bf60:	d10f      	bne.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800bf62:	4282      	cmp	r2, r0
 800bf64:	d1f7      	bne.n	800bf56 <ArtNetNode::Process(unsigned long)+0xce>
 800bf66:	891b      	ldrh	r3, [r3, #8]
 800bf68:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bf6c:	d068      	beq.n	800c040 <ArtNetNode::Process(unsigned long)+0x1b8>
 800bf6e:	d838      	bhi.n	800bfe2 <ArtNetNode::Process(unsigned long)+0x15a>
 800bf70:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bf74:	d042      	beq.n	800bffc <ArtNetNode::Process(unsigned long)+0x174>
 800bf76:	f5b3 4fa4 	cmp.w	r3, #20992	@ 0x5200
 800bf7a:	d04b      	beq.n	800c014 <ArtNetNode::Process(unsigned long)+0x18c>
 800bf7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf80:	d06a      	beq.n	800c058 <ArtNetNode::Process(unsigned long)+0x1d0>
 800bf82:	f895 376b 	ldrb.w	r3, [r5, #1899]	@ 0x76b
 800bf86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bf8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bf8c:	d10c      	bne.n	800bfa8 <ArtNetNode::Process(unsigned long)+0x120>
 800bf8e:	4b35      	ldr	r3, [pc, #212]	@ (800c064 <ArtNetNode::Process(unsigned long)+0x1dc>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	2b04      	cmp	r3, #4
 800bf96:	d007      	beq.n	800bfa8 <ArtNetNode::Process(unsigned long)+0x120>
 800bf98:	f895 3142 	ldrb.w	r3, [r5, #322]	@ 0x142
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d05f      	beq.n	800c060 <ArtNetNode::Process(unsigned long)+0x1d8>
 800bfa0:	2103      	movs	r1, #3
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f001 ff0a 	bl	800ddbc <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)>
 800bfa8:	f504 5688 	add.w	r6, r4, #4352	@ 0x1100
 800bfac:	f504 578a 	add.w	r7, r4, #4416	@ 0x1140
 800bfb0:	3614      	adds	r6, #20
 800bfb2:	3704      	adds	r7, #4
 800bfb4:	42b7      	cmp	r7, r6
 800bfb6:	d09c      	beq.n	800bef2 <ArtNetNode::Process(unsigned long)+0x6a>
 800bfb8:	f856 2c0c 	ldr.w	r2, [r6, #-12]
 800bfbc:	b17a      	cbz	r2, 800bfde <ArtNetNode::Process(unsigned long)+0x156>
 800bfbe:	f8d4 3bd0 	ldr.w	r3, [r4, #3024]	@ 0xbd0
 800bfc2:	1a9b      	subs	r3, r3, r2
 800bfc4:	f8d5 20fc 	ldr.w	r2, [r5, #252]	@ 0xfc
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d908      	bls.n	800bfde <ArtNetNode::Process(unsigned long)+0x156>
 800bfcc:	4633      	mov	r3, r6
 800bfce:	2100      	movs	r1, #0
 800bfd0:	f843 1d0c 	str.w	r1, [r3, #-12]!
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800bfda:	f000 ffff 	bl	800cfdc <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800bfde:	360c      	adds	r6, #12
 800bfe0:	e7e8      	b.n	800bfb4 <ArtNetNode::Process(unsigned long)+0x12c>
 800bfe2:	f5b3 4f19 	cmp.w	r3, #39168	@ 0x9900
 800bfe6:	d033      	beq.n	800c050 <ArtNetNode::Process(unsigned long)+0x1c8>
 800bfe8:	f5b3 4f78 	cmp.w	r3, #63488	@ 0xf800
 800bfec:	d02c      	beq.n	800c048 <ArtNetNode::Process(unsigned long)+0x1c0>
 800bfee:	f5b3 4f18 	cmp.w	r3, #38912	@ 0x9800
 800bff2:	d1c6      	bne.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800bff4:	4620      	mov	r0, r4
 800bff6:	f001 f93e 	bl	800d276 <ArtNetNode::HandleTimeSync()>
 800bffa:	e7c2      	b.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800bffc:	f8d4 3bdc 	ldr.w	r3, [r4, #3036]	@ 0xbdc
 800c000:	2b00      	cmp	r3, #0
 800c002:	d0be      	beq.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c004:	4620      	mov	r0, r4
 800c006:	f000 fb53 	bl	800c6b0 <ArtNetNode::HandleDmx()>
 800c00a:	f8d4 3bcc 	ldr.w	r3, [r4, #3020]	@ 0xbcc
 800c00e:	f8c5 3100 	str.w	r3, [r5, #256]	@ 0x100
 800c012:	e7b6      	b.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c014:	f8d4 3bdc 	ldr.w	r3, [r4, #3036]	@ 0xbdc
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0b2      	beq.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c01c:	f8d5 2100 	ldr.w	r2, [r5, #256]	@ 0x100
 800c020:	f8d4 3bcc 	ldr.w	r3, [r4, #3020]	@ 0xbcc
 800c024:	429a      	cmp	r2, r3
 800c026:	d1ac      	bne.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c028:	f895 313e 	ldrb.w	r3, [r5, #318]	@ 0x13e
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1a8      	bne.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c030:	4b0e      	ldr	r3, [pc, #56]	@ (800c06c <ArtNetNode::Process(unsigned long)+0x1e4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f8c5 3104 	str.w	r3, [r5, #260]	@ 0x104
 800c038:	4620      	mov	r0, r4
 800c03a:	f001 f8e1 	bl	800d200 <ArtNetNode::HandleSync()>
 800c03e:	e7a0      	b.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c040:	4620      	mov	r0, r4
 800c042:	f000 f9af 	bl	800c3a4 <ArtNetNode::HandleAddress()>
 800c046:	e79c      	b.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 fe9f 	bl	800cd8c <ArtNetNode::HandleIpProg()>
 800c04e:	e798      	b.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c050:	4620      	mov	r0, r4
 800c052:	f001 fe01 	bl	800dc58 <ArtNetNode::HandleTrigger()>
 800c056:	e794      	b.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c058:	4620      	mov	r0, r4
 800c05a:	f001 f86d 	bl	800d138 <ArtNetNode::HandlePoll()>
 800c05e:	e790      	b.n	800bf82 <ArtNetNode::Process(unsigned long)+0xfa>
 800c060:	2102      	movs	r1, #2
 800c062:	e79e      	b.n	800bfa2 <ArtNetNode::Process(unsigned long)+0x11a>
 800c064:	2000cd38 	andcs	ip, r0, r8, lsr sp
 800c068:	0801e909 	stmdaeq	r1, {r0, r3, r8, fp, sp, lr, pc}
 800c06c:	2001a628 	andcs	sl, r1, r8, lsr #12

0800c070 <lightset::Data::IOutputClear(LightSet*, unsigned long)>:
 800c070:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c072:	4603      	mov	r3, r0
 800c074:	f240 6404 	movw	r4, #1540	@ 0x604
 800c078:	fb04 3402 	mla	r4, r4, r2, r3
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	f504 6280 	add.w	r2, r4, #1024	@ 0x400
 800c084:	4615      	mov	r5, r2
 800c086:	f504 64c0 	add.w	r4, r4, #1536	@ 0x600
 800c08a:	2600      	movs	r6, #0
 800c08c:	f805 6b01 	strb.w	r6, [r5], #1
 800c090:	42ac      	cmp	r4, r5
 800c092:	d1fb      	bne.n	800c08c <lightset::Data::IOutputClear(LightSet*, unsigned long)+0x1c>
 800c094:	f240 6404 	movw	r4, #1540	@ 0x604
 800c098:	fb04 3401 	mla	r4, r4, r1, r3
 800c09c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c0a0:	f8c4 3600 	str.w	r3, [r4, #1536]	@ 0x600
 800c0a4:	2501      	movs	r5, #1
 800c0a6:	6804      	ldr	r4, [r0, #0]
 800c0a8:	9500      	str	r5, [sp, #0]
 800c0aa:	6924      	ldr	r4, [r4, #16]
 800c0ac:	47a0      	blx	r4
 800c0ae:	b002      	add	sp, #8
 800c0b0:	bd70      	pop	{r4, r5, r6, pc}

0800c0b2 <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>:
 800c0b2:	2328      	movs	r3, #40	@ 0x28
 800c0b4:	fb03 0202 	mla	r2, r3, r2, r0
 800c0b8:	f001 010f 	and.w	r1, r1, #15
 800c0bc:	f892 3beb 	ldrb.w	r3, [r2, #3051]	@ 0xbeb
 800c0c0:	f892 2bec 	ldrb.w	r2, [r2, #3052]	@ 0xbec
 800c0c4:	021b      	lsls	r3, r3, #8
 800c0c6:	0112      	lsls	r2, r2, #4
 800c0c8:	b2d2      	uxtb	r2, r2
 800c0ca:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	ea43 0001 	orr.w	r0, r3, r1
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)>:
 800c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	4b18      	ldr	r3, [pc, #96]	@ (800c140 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x68>)
 800c0de:	681c      	ldr	r4, [r3, #0]
 800c0e0:	4284      	cmp	r4, r0
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	d827      	bhi.n	800c138 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x60>
 800c0e8:	1b04      	subs	r4, r0, r4
 800c0ea:	2c03      	cmp	r4, #3
 800c0ec:	d824      	bhi.n	800c138 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x60>
 800c0ee:	f04f 080f 	mov.w	r8, #15
 800c0f2:	2600      	movs	r6, #0
 800c0f4:	e9cd 8600 	strd	r8, r6, [sp]
 800c0f8:	4f12      	ldr	r7, [pc, #72]	@ (800c144 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x6c>)
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	6838      	ldr	r0, [r7, #0]
 800c0fe:	f10d 0216 	add.w	r2, sp, #22
 800c102:	2119      	movs	r1, #25
 800c104:	f00b f856 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800c108:	0064      	lsls	r4, r4, #1
 800c10a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800c10e:	2203      	movs	r2, #3
 800c110:	40a2      	lsls	r2, r4
 800c112:	f005 0503 	and.w	r5, r5, #3
 800c116:	ea23 0302 	bic.w	r3, r3, r2
 800c11a:	40a5      	lsls	r5, r4
 800c11c:	432b      	orrs	r3, r5
 800c11e:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800c122:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c126:	2302      	movs	r3, #2
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	6838      	ldr	r0, [r7, #0]
 800c12c:	f10d 0316 	add.w	r3, sp, #22
 800c130:	4642      	mov	r2, r8
 800c132:	2119      	movs	r1, #25
 800c134:	f00b f818 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c138:	b006      	add	sp, #24
 800c13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13e:	bf00      	nop
 800c140:	20000000 	andcs	r0, r0, r0
 800c144:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800c148 <ArtNetStore::SaveUniverse(unsigned long)>:
 800c148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c14a:	4b13      	ldr	r3, [pc, #76]	@ (800c198 <ArtNetStore::SaveUniverse(unsigned long)+0x50>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2228      	movs	r2, #40	@ 0x28
 800c150:	fb02 3300 	mla	r3, r2, r0, r3
 800c154:	f8d3 2bf0 	ldr.w	r2, [r3, #3056]	@ 0xbf0
 800c158:	2a02      	cmp	r2, #2
 800c15a:	d01a      	beq.n	800c192 <ArtNetStore::SaveUniverse(unsigned long)+0x4a>
 800c15c:	f8b3 3be8 	ldrh.w	r3, [r3, #3048]	@ 0xbe8
 800c160:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c164:	4b0d      	ldr	r3, [pc, #52]	@ (800c19c <ArtNetStore::SaveUniverse(unsigned long)+0x54>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4283      	cmp	r3, r0
 800c16a:	d812      	bhi.n	800c192 <ArtNetStore::SaveUniverse(unsigned long)+0x4a>
 800c16c:	1ac0      	subs	r0, r0, r3
 800c16e:	2803      	cmp	r0, #3
 800c170:	d80f      	bhi.n	800c192 <ArtNetStore::SaveUniverse(unsigned long)+0x4a>
 800c172:	2300      	movs	r3, #0
 800c174:	9302      	str	r3, [sp, #8]
 800c176:	2302      	movs	r3, #2
 800c178:	0042      	lsls	r2, r0, #1
 800c17a:	fa03 f000 	lsl.w	r0, r3, r0
 800c17e:	e9cd 3000 	strd	r3, r0, [sp]
 800c182:	4807      	ldr	r0, [pc, #28]	@ (800c1a0 <ArtNetStore::SaveUniverse(unsigned long)+0x58>)
 800c184:	f10d 0316 	add.w	r3, sp, #22
 800c188:	6800      	ldr	r0, [r0, #0]
 800c18a:	3205      	adds	r2, #5
 800c18c:	2119      	movs	r1, #25
 800c18e:	f00a ffeb 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c192:	b007      	add	sp, #28
 800c194:	f85d fb04 	ldr.w	pc, [sp], #4
 800c198:	2000064c 	andcs	r0, r0, ip, asr #12
 800c19c:	20000000 	andcs	r0, r0, r0
 800c1a0:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800c1a4 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>:
 800c1a4:	2a02      	cmp	r2, #2
 800c1a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	460c      	mov	r4, r1
 800c1ae:	4690      	mov	r8, r2
 800c1b0:	461f      	mov	r7, r3
 800c1b2:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 800c1b6:	d124      	bne.n	800c202 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x5e>
 800c1b8:	2328      	movs	r3, #40	@ 0x28
 800c1ba:	fb03 0301 	mla	r3, r3, r1, r0
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f8d3 3bf0 	ldr.w	r3, [r3, #3056]	@ 0xbf0
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	bf02      	ittt	eq
 800c1c8:	f896 3143 	ldrbeq.w	r3, [r6, #323]	@ 0x143
 800c1cc:	f103 33ff 	addeq.w	r3, r3, #4294967295	@ 0xffffffff
 800c1d0:	f886 3143 	strbeq.w	r3, [r6, #323]	@ 0x143
 800c1d4:	2328      	movs	r3, #40	@ 0x28
 800c1d6:	fb03 0301 	mla	r3, r3, r1, r0
 800c1da:	f8c3 2bf0 	str.w	r2, [r3, #3056]	@ 0xbf0
 800c1de:	4642      	mov	r2, r8
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f001 fdbb 	bl	800dd5e <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)>
 800c1e8:	f896 3139 	ldrb.w	r3, [r6, #313]	@ 0x139
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d12f      	bne.n	800c250 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0xac>
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f7ff ffa9 	bl	800c148 <ArtNetStore::SaveUniverse(unsigned long)>
 800c1f6:	4639      	mov	r1, r7
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1fe:	f00a bdaf 	b.w	8016d60 <artnet::display_universe_switch(unsigned long, unsigned char)>
 800c202:	2a01      	cmp	r2, #1
 800c204:	d1eb      	bne.n	800c1de <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x3a>
 800c206:	2328      	movs	r3, #40	@ 0x28
 800c208:	fb03 0301 	mla	r3, r3, r1, r0
 800c20c:	f8d3 2bf0 	ldr.w	r2, [r3, #3056]	@ 0xbf0
 800c210:	2a01      	cmp	r2, #1
 800c212:	d00a      	beq.n	800c22a <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x86>
 800c214:	f896 3143 	ldrb.w	r3, [r6, #323]	@ 0x143
 800c218:	3301      	adds	r3, #1
 800c21a:	f886 3143 	strb.w	r3, [r6, #323]	@ 0x143
 800c21e:	b922      	cbnz	r2, 800c22a <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x86>
 800c220:	f896 3144 	ldrb.w	r3, [r6, #324]	@ 0x144
 800c224:	3b01      	subs	r3, #1
 800c226:	f886 3144 	strb.w	r3, [r6, #324]	@ 0x144
 800c22a:	f04f 0928 	mov.w	r9, #40	@ 0x28
 800c22e:	fb09 5904 	mla	r9, r9, r4, r5
 800c232:	f007 030f 	and.w	r3, r7, #15
 800c236:	f889 3bea 	strb.w	r3, [r9, #3050]	@ 0xbea
 800c23a:	4622      	mov	r2, r4
 800c23c:	4639      	mov	r1, r7
 800c23e:	4628      	mov	r0, r5
 800c240:	f7ff ff37 	bl	800c0b2 <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>
 800c244:	2301      	movs	r3, #1
 800c246:	f8a9 0be8 	strh.w	r0, [r9, #3048]	@ 0xbe8
 800c24a:	f8c9 3bf0 	str.w	r3, [r9, #3056]	@ 0xbf0
 800c24e:	e7c6      	b.n	800c1de <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x3a>
 800c250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c254 <ArtNetNode::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>:
 800c254:	b430      	push	{r4, r5}
 800c256:	2428      	movs	r4, #40	@ 0x28
 800c258:	fb04 0401 	mla	r4, r4, r1, r0
 800c25c:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800c260:	f884 5beb 	strb.w	r5, [r4, #3051]	@ 0xbeb
 800c264:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800c268:	f884 5bec 	strb.w	r5, [r4, #3052]	@ 0xbec
 800c26c:	bc30      	pop	{r4, r5}
 800c26e:	f003 030f 	and.w	r3, r3, #15
 800c272:	f7ff bf97 	b.w	800c1a4 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>

0800c276 <ArtNetNode::SetSubnetSwitch(unsigned long, unsigned char)>:
 800c276:	b570      	push	{r4, r5, r6, lr}
 800c278:	2628      	movs	r6, #40	@ 0x28
 800c27a:	fb06 0601 	mla	r6, r6, r1, r0
 800c27e:	4604      	mov	r4, r0
 800c280:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800c284:	f886 2bec 	strb.w	r2, [r6, #3052]	@ 0xbec
 800c288:	460d      	mov	r5, r1
 800c28a:	460a      	mov	r2, r1
 800c28c:	f8b6 1be8 	ldrh.w	r1, [r6, #3048]	@ 0xbe8
 800c290:	f7ff ff0f 	bl	800c0b2 <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>
 800c294:	f894 3139 	ldrb.w	r3, [r4, #313]	@ 0x139
 800c298:	f8a6 0be8 	strh.w	r0, [r6, #3048]	@ 0xbe8
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d102      	bne.n	800c2a6 <ArtNetNode::SetSubnetSwitch(unsigned long, unsigned char)+0x30>
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f7ff ff51 	bl	800c148 <ArtNetStore::SaveUniverse(unsigned long)>
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}

0800c2a8 <ArtNetNode::SetNetSwitch(unsigned long, unsigned char)>:
 800c2a8:	b570      	push	{r4, r5, r6, lr}
 800c2aa:	2628      	movs	r6, #40	@ 0x28
 800c2ac:	fb06 0601 	mla	r6, r6, r1, r0
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800c2b6:	f886 2beb 	strb.w	r2, [r6, #3051]	@ 0xbeb
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	460a      	mov	r2, r1
 800c2be:	f8b6 1be8 	ldrh.w	r1, [r6, #3048]	@ 0xbe8
 800c2c2:	f7ff fef6 	bl	800c0b2 <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>
 800c2c6:	f894 3139 	ldrb.w	r3, [r4, #313]	@ 0x139
 800c2ca:	f8a6 0be8 	strh.w	r0, [r6, #3048]	@ 0xbe8
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d102      	bne.n	800c2d8 <ArtNetNode::SetNetSwitch(unsigned long, unsigned char)+0x30>
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7ff ff38 	bl	800c148 <ArtNetStore::SaveUniverse(unsigned long)>
 800c2d8:	bd70      	pop	{r4, r5, r6, pc}

0800c2da <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>:
 800c2da:	b538      	push	{r3, r4, r5, lr}
 800c2dc:	460c      	mov	r4, r1
 800c2de:	2124      	movs	r1, #36	@ 0x24
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	4615      	mov	r5, r2
 800c2e4:	fb01 0004 	mla	r0, r1, r4, r0
 800c2e8:	f241 1270 	movw	r2, #4464	@ 0x1170
 800c2ec:	2d01      	cmp	r5, #1
 800c2ee:	5c82      	ldrb	r2, [r0, r2]
 800c2f0:	fb01 3104 	mla	r1, r1, r4, r3
 800c2f4:	f241 1070 	movw	r0, #4464	@ 0x1170
 800c2f8:	bf0c      	ite	eq
 800c2fa:	f042 0202 	orreq.w	r2, r2, #2
 800c2fe:	f002 02fd 	andne.w	r2, r2, #253	@ 0xfd
 800c302:	540a      	strb	r2, [r1, r0]
 800c304:	2244      	movs	r2, #68	@ 0x44
 800c306:	fb02 3204 	mla	r2, r2, r4, r3
 800c30a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c30e:	f8c2 51e8 	str.w	r5, [r2, #488]	@ 0x1e8
 800c312:	f893 3139 	ldrb.w	r3, [r3, #313]	@ 0x139
 800c316:	2b02      	cmp	r3, #2
 800c318:	d109      	bne.n	800c32e <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)+0x54>
 800c31a:	4629      	mov	r1, r5
 800c31c:	4620      	mov	r0, r4
 800c31e:	f7ff fedb 	bl	800c0d8 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)>
 800c322:	4629      	mov	r1, r5
 800c324:	4620      	mov	r0, r4
 800c326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c32a:	f00a bd1f 	b.w	8016d6c <artnet::display_merge_mode(unsigned long, lightset::MergeMode)>
 800c32e:	bd38      	pop	{r3, r4, r5, pc}

0800c330 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800c330:	b530      	push	{r4, r5, lr}
 800c332:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 800c336:	f1a1 0408 	sub.w	r4, r1, #8
 800c33a:	f892 382d 	ldrb.w	r3, [r2, #2093]	@ 0x82d
 800c33e:	b087      	sub	sp, #28
 800c340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c344:	2c04      	cmp	r4, #4
 800c346:	d806      	bhi.n	800c356 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800c348:	e8df f004 	tbb	[pc, r4]
 800c34c:	05240305 	streq	r0, [r4, #-773]!	@ 0xfffffcfb
 800c350:	f0430005 			@ <UNDEFINED> instruction: 0xf0430005
 800c354:	0340      	lsls	r0, r0, #13
 800c356:	f882 382d 	strb.w	r3, [r2, #2093]	@ 0x82d
 800c35a:	f892 3139 	ldrb.w	r3, [r2, #313]	@ 0x139
 800c35e:	f001 0403 	and.w	r4, r1, #3
 800c362:	2b02      	cmp	r3, #2
 800c364:	6244      	str	r4, [r0, #36]	@ 0x24
 800c366:	d118      	bne.n	800c39a <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x6a>
 800c368:	2320      	movs	r3, #32
 800c36a:	2200      	movs	r2, #0
 800c36c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c370:	480b      	ldr	r0, [pc, #44]	@ (800c3a0 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x70>)
 800c372:	f88d 4017 	strb.w	r4, [sp, #23]
 800c376:	2301      	movs	r3, #1
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	6800      	ldr	r0, [r0, #0]
 800c37c:	f10d 0317 	add.w	r3, sp, #23
 800c380:	2212      	movs	r2, #18
 800c382:	2119      	movs	r1, #25
 800c384:	f00a fef0 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c388:	4620      	mov	r0, r4
 800c38a:	b007      	add	sp, #28
 800c38c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c390:	f00a bcf8 	b.w	8016d84 <artnet::display_failsafe(unsigned char)>
 800c394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c398:	e7dd      	b.n	800c356 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800c39a:	b007      	add	sp, #28
 800c39c:	bd30      	pop	{r4, r5, pc}
 800c39e:	bf00      	nop
 800c3a0:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800c3a4 <ArtNetNode::HandleAddress()>:
 800c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a8:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
 800c3ac:	f8d0 6bc8 	ldr.w	r6, [r0, #3016]	@ 0xbc8
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 800c3b6:	7b75      	ldrb	r5, [r6, #13]
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	b105      	cbz	r5, 800c3be <ArtNetNode::HandleAddress()+0x1a>
 800c3bc:	3d01      	subs	r5, #1
 800c3be:	7bb3      	ldrb	r3, [r6, #14]
 800c3c0:	b143      	cbz	r3, 800c3d4 <ArtNetNode::HandleAddress()+0x30>
 800c3c2:	f106 020e 	add.w	r2, r6, #14
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff fbcb 	bl	800bb64 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800c3ce:	2306      	movs	r3, #6
 800c3d0:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 800c3d4:	f896 3020 	ldrb.w	r3, [r6, #32]
 800c3d8:	b13b      	cbz	r3, 800c3ea <ArtNetNode::HandleAddress()+0x46>
 800c3da:	f106 0120 	add.w	r1, r6, #32
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f7ff fc18 	bl	800bc14 <ArtNetNode::SetLongName(char const*)>
 800c3e4:	2307      	movs	r3, #7
 800c3e6:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 800c3ea:	f896 2068 	ldrb.w	r2, [r6, #104]	@ 0x68
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	d13f      	bne.n	800c472 <ArtNetNode::HandleAddress()+0xce>
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f7ff ff3e 	bl	800c276 <ArtNetNode::SetSubnetSwitch(unsigned long, unsigned char)>
 800c3fa:	7b32      	ldrb	r2, [r6, #12]
 800c3fc:	2a00      	cmp	r2, #0
 800c3fe:	d13d      	bne.n	800c47c <ArtNetNode::HandleAddress()+0xd8>
 800c400:	4629      	mov	r1, r5
 800c402:	4620      	mov	r0, r4
 800c404:	f7ff ff50 	bl	800c2a8 <ArtNetNode::SetNetSwitch(unsigned long, unsigned char)>
 800c408:	f896 3064 	ldrb.w	r3, [r6, #100]	@ 0x64
 800c40c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c40e:	d00c      	beq.n	800c42a <ArtNetNode::HandleAddress()+0x86>
 800c410:	2228      	movs	r2, #40	@ 0x28
 800c412:	fb02 4205 	mla	r2, r2, r5, r4
 800c416:	f8d2 2bf0 	ldr.w	r2, [r2, #3056]	@ 0xbf0
 800c41a:	2a01      	cmp	r2, #1
 800c41c:	d105      	bne.n	800c42a <ArtNetNode::HandleAddress()+0x86>
 800c41e:	bb93      	cbnz	r3, 800c486 <ArtNetNode::HandleAddress()+0xe2>
 800c420:	4613      	mov	r3, r2
 800c422:	4629      	mov	r1, r5
 800c424:	4620      	mov	r0, r4
 800c426:	f7ff febd 	bl	800c1a4 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>
 800c42a:	f896 2060 	ldrb.w	r2, [r6, #96]	@ 0x60
 800c42e:	2a7f      	cmp	r2, #127	@ 0x7f
 800c430:	d00b      	beq.n	800c44a <ArtNetNode::HandleAddress()+0xa6>
 800c432:	2328      	movs	r3, #40	@ 0x28
 800c434:	fb03 4305 	mla	r3, r3, r5, r4
 800c438:	f8d3 1bf0 	ldr.w	r1, [r3, #3056]	@ 0xbf0
 800c43c:	b929      	cbnz	r1, 800c44a <ArtNetNode::HandleAddress()+0xa6>
 800c43e:	bb3a      	cbnz	r2, 800c490 <ArtNetNode::HandleAddress()+0xec>
 800c440:	2301      	movs	r3, #1
 800c442:	4629      	mov	r1, r5
 800c444:	4620      	mov	r0, r4
 800c446:	f7ff fead 	bl	800c1a4 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>
 800c44a:	f896 106a 	ldrb.w	r1, [r6, #106]	@ 0x6a
 800c44e:	2913      	cmp	r1, #19
 800c450:	d824      	bhi.n	800c49c <ArtNetNode::HandleAddress()+0xf8>
 800c452:	b369      	cbz	r1, 800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c454:	1e4b      	subs	r3, r1, #1
 800c456:	2b12      	cmp	r3, #18
 800c458:	d82a      	bhi.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c45a:	e8df f003 	tbb	[pc, r3]
 800c45e:	aa9a8a77 	bge	66aee42 <__stack_size+0x66a6e42>
 800c462:	b7292929 	strlt	r2, [r9, -r9, lsr #18]!
 800c466:	b7b7b7b7 			@ <UNDEFINED> instruction: 0xb7b7b7b7
 800c46a:	bb292929 	bllt	8a56916 <_sidata+0xa37212>
 800c46e:	00bbbbbb 	ldrhteq	fp, [fp], fp
 800c472:	0613      	lsls	r3, r2, #24
 800c474:	d5c1      	bpl.n	800c3fa <ArtNetNode::HandleAddress()+0x56>
 800c476:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c47a:	e7ba      	b.n	800c3f2 <ArtNetNode::HandleAddress()+0x4e>
 800c47c:	0610      	lsls	r0, r2, #24
 800c47e:	d5c3      	bpl.n	800c408 <ArtNetNode::HandleAddress()+0x64>
 800c480:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c484:	e7bc      	b.n	800c400 <ArtNetNode::HandleAddress()+0x5c>
 800c486:	0619      	lsls	r1, r3, #24
 800c488:	d5cf      	bpl.n	800c42a <ArtNetNode::HandleAddress()+0x86>
 800c48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c48e:	e7c8      	b.n	800c422 <ArtNetNode::HandleAddress()+0x7e>
 800c490:	0613      	lsls	r3, r2, #24
 800c492:	d5da      	bpl.n	800c44a <ArtNetNode::HandleAddress()+0xa6>
 800c494:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 800c498:	460a      	mov	r2, r1
 800c49a:	e7d2      	b.n	800c442 <ArtNetNode::HandleAddress()+0x9e>
 800c49c:	2973      	cmp	r1, #115	@ 0x73
 800c49e:	d81e      	bhi.n	800c4de <ArtNetNode::HandleAddress()+0x13a>
 800c4a0:	296f      	cmp	r1, #111	@ 0x6f
 800c4a2:	f200 80ad 	bhi.w	800c600 <ArtNetNode::HandleAddress()+0x25c>
 800c4a6:	2953      	cmp	r1, #83	@ 0x53
 800c4a8:	d80b      	bhi.n	800c4c2 <ArtNetNode::HandleAddress()+0x11e>
 800c4aa:	294f      	cmp	r1, #79	@ 0x4f
 800c4ac:	f200 809e 	bhi.w	800c5ec <ArtNetNode::HandleAddress()+0x248>
 800c4b0:	f8d4 2bcc 	ldr.w	r2, [r4, #3020]	@ 0xbcc
 800c4b4:	7b71      	ldrb	r1, [r6, #13]
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4be:	f000 bd8d 	b.w	800cfdc <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800c4c2:	3960      	subs	r1, #96	@ 0x60
 800c4c4:	2903      	cmp	r1, #3
 800c4c6:	d8f3      	bhi.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f001 fc19 	bl	800dd04 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f001 fc41 	bl	800dd5e <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)>
 800c4dc:	e7e8      	b.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c4de:	3170      	adds	r1, #112	@ 0x70
 800c4e0:	b2c9      	uxtb	r1, r1
 800c4e2:	2903      	cmp	r1, #3
 800c4e4:	d8e4      	bhi.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c4e6:	2328      	movs	r3, #40	@ 0x28
 800c4e8:	fb03 4305 	mla	r3, r3, r5, r4
 800c4ec:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	@ 0xbf4
 800c4f0:	b92b      	cbnz	r3, 800c4fe <ArtNetNode::HandleAddress()+0x15a>
 800c4f2:	f8d4 1bdc 	ldr.w	r1, [r4, #3036]	@ 0xbdc
 800c4f6:	4846      	ldr	r0, [pc, #280]	@ (800c610 <ArtNetNode::HandleAddress()+0x26c>)
 800c4f8:	462a      	mov	r2, r5
 800c4fa:	f7ff fdb9 	bl	800c070 <lightset::Data::IOutputClear(LightSet*, unsigned long)>
 800c4fe:	2328      	movs	r3, #40	@ 0x28
 800c500:	fb03 4305 	mla	r3, r3, r5, r4
 800c504:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	@ 0xbf4
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d1d1      	bne.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c50c:	f8d4 1bbc 	ldr.w	r1, [r4, #3004]	@ 0xbbc
 800c510:	483f      	ldr	r0, [pc, #252]	@ (800c610 <ArtNetNode::HandleAddress()+0x26c>)
 800c512:	462a      	mov	r2, r5
 800c514:	f7ff fdac 	bl	800c070 <lightset::Data::IOutputClear(LightSet*, unsigned long)>
 800c518:	230c      	movs	r3, #12
 800c51a:	fb03 4305 	mla	r3, r3, r5, r4
 800c51e:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 800c522:	f1b8 0f01 	cmp.w	r8, #1
 800c526:	d10d      	bne.n	800c544 <ArtNetNode::HandleAddress()+0x1a0>
 800c528:	2744      	movs	r7, #68	@ 0x44
 800c52a:	fb07 4705 	mla	r7, r7, r5, r4
 800c52e:	f897 31f1 	ldrb.w	r3, [r7, #497]	@ 0x1f1
 800c532:	b93b      	cbnz	r3, 800c544 <ArtNetNode::HandleAddress()+0x1a0>
 800c534:	f8d4 0bbc 	ldr.w	r0, [r4, #3004]	@ 0xbbc
 800c538:	6803      	ldr	r3, [r0, #0]
 800c53a:	4629      	mov	r1, r5
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	4798      	blx	r3
 800c540:	f887 81f1 	strb.w	r8, [r7, #497]	@ 0x1f1
 800c544:	2300      	movs	r3, #0
 800c546:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800c54a:	e7b1      	b.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c54c:	2000      	movs	r0, #0
 800c54e:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 800c552:	f504 52ae 	add.w	r2, r4, #5568	@ 0x15c0
 800c556:	f887 013e 	strb.w	r0, [r7, #318]	@ 0x13e
 800c55a:	3318      	adds	r3, #24
 800c55c:	3218      	adds	r2, #24
 800c55e:	7e19      	ldrb	r1, [r3, #24]
 800c560:	6018      	str	r0, [r3, #0]
 800c562:	f021 0108 	bic.w	r1, r1, #8
 800c566:	60d8      	str	r0, [r3, #12]
 800c568:	7619      	strb	r1, [r3, #24]
 800c56a:	3324      	adds	r3, #36	@ 0x24
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d1f6      	bne.n	800c55e <ArtNetNode::HandleAddress()+0x1ba>
 800c570:	e79e      	b.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c572:	4b28      	ldr	r3, [pc, #160]	@ (800c614 <ArtNetNode::HandleAddress()+0x270>)
 800c574:	2200      	movs	r2, #0
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	2102      	movs	r1, #2
 800c57a:	f00b fe21 	bl	80181c0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800c57e:	f897 376b 	ldrb.w	r3, [r7, #1899]	@ 0x76b
 800c582:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800c586:	f887 376b 	strb.w	r3, [r7, #1899]	@ 0x76b
 800c58a:	2301      	movs	r3, #1
 800c58c:	f884 3bb0 	strb.w	r3, [r4, #2992]	@ 0xbb0
 800c590:	e78e      	b.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c592:	4b20      	ldr	r3, [pc, #128]	@ (800c614 <ArtNetNode::HandleAddress()+0x270>)
 800c594:	2201      	movs	r2, #1
 800c596:	6818      	ldr	r0, [r3, #0]
 800c598:	2100      	movs	r1, #0
 800c59a:	f00b fe11 	bl	80181c0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800c59e:	f897 376b 	ldrb.w	r3, [r7, #1899]	@ 0x76b
 800c5a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c5a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c5aa:	f887 376b 	strb.w	r3, [r7, #1899]	@ 0x76b
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	e7ec      	b.n	800c58c <ArtNetNode::HandleAddress()+0x1e8>
 800c5b2:	4b18      	ldr	r3, [pc, #96]	@ (800c614 <ArtNetNode::HandleAddress()+0x270>)
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	2104      	movs	r1, #4
 800c5ba:	f00b fe01 	bl	80181c0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800c5be:	f897 376b 	ldrb.w	r3, [r7, #1899]	@ 0x76b
 800c5c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ca:	e7ee      	b.n	800c5aa <ArtNetNode::HandleAddress()+0x206>
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f7ff feaf 	bl	800c330 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800c5d2:	e76d      	b.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f7ff fe7e 	bl	800c2da <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>
 800c5de:	2344      	movs	r3, #68	@ 0x44
 800c5e0:	fb03 4305 	mla	r3, r3, r5, r4
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
 800c5ea:	e761      	b.n	800c4b0 <ArtNetNode::HandleAddress()+0x10c>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f7ff fe72 	bl	800c2da <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>
 800c5f6:	2344      	movs	r3, #68	@ 0x44
 800c5f8:	fb03 4305 	mla	r3, r3, r5, r4
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	e7f2      	b.n	800c5e6 <ArtNetNode::HandleAddress()+0x242>
 800c600:	2201      	movs	r2, #1
 800c602:	4629      	mov	r1, r5
 800c604:	4620      	mov	r0, r4
 800c606:	f001 fb7d 	bl	800dd04 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>
 800c60a:	2201      	movs	r2, #1
 800c60c:	e762      	b.n	800c4d4 <ArtNetNode::HandleAddress()+0x130>
 800c60e:	bf00      	nop
 800c610:	20000650 	andcs	r0, r0, r0, asr r6
 800c614:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800c618 <ArtNetNode::CheckMergeTimeouts(unsigned long)>:
 800c618:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800c61c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c620:	f241 1354 	movw	r3, #4436	@ 0x1154
 800c624:	b570      	push	{r4, r5, r6, lr}
 800c626:	58d3      	ldr	r3, [r2, r3]
 800c628:	f8d0 4bd0 	ldr.w	r4, [r0, #3024]	@ 0xbd0
 800c62c:	f242 7e10 	movw	lr, #10000	@ 0x2710
 800c630:	eba4 0c03 	sub.w	ip, r4, r3
 800c634:	45f4      	cmp	ip, lr
 800c636:	ea4f 03c1 	mov.w	r3, r1, lsl #3
 800c63a:	d90b      	bls.n	800c654 <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x3c>
 800c63c:	f241 1e70 	movw	lr, #4464	@ 0x1170
 800c640:	f241 1558 	movw	r5, #4440	@ 0x1158
 800c644:	f812 c00e 	ldrb.w	ip, [r2, lr]
 800c648:	2600      	movs	r6, #0
 800c64a:	f02c 0c08 	bic.w	ip, ip, #8
 800c64e:	f802 c00e 	strb.w	ip, [r2, lr]
 800c652:	5156      	str	r6, [r2, r5]
 800c654:	440b      	add	r3, r1
 800c656:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c65a:	f503 518b 	add.w	r1, r3, #4448	@ 0x1160
 800c65e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c662:	6809      	ldr	r1, [r1, #0]
 800c664:	1a64      	subs	r4, r4, r1
 800c666:	4294      	cmp	r4, r2
 800c668:	d909      	bls.n	800c67e <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x66>
 800c66a:	f241 1264 	movw	r2, #4452	@ 0x1164
 800c66e:	2400      	movs	r4, #0
 800c670:	509c      	str	r4, [r3, r2]
 800c672:	f241 1170 	movw	r1, #4464	@ 0x1170
 800c676:	5c5a      	ldrb	r2, [r3, r1]
 800c678:	f022 0208 	bic.w	r2, r2, #8
 800c67c:	545a      	strb	r2, [r3, r1]
 800c67e:	2300      	movs	r3, #0
 800c680:	f500 5c8b 	add.w	ip, r0, #4448	@ 0x1160
 800c684:	4619      	mov	r1, r3
 800c686:	f10c 0c10 	add.w	ip, ip, #16
 800c68a:	f81c 2003 	ldrb.w	r2, [ip, r3]
 800c68e:	3324      	adds	r3, #36	@ 0x24
 800c690:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800c694:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800c698:	ea41 0102 	orr.w	r1, r1, r2
 800c69c:	d1f5      	bne.n	800c68a <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x72>
 800c69e:	b929      	cbnz	r1, 800c6ac <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x94>
 800c6a0:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800c6a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c6a8:	f8a0 313e 	strh.w	r3, [r0, #318]	@ 0x13e
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
 800c6ae:	bf00      	nop

0800c6b0 <ArtNetNode::HandleDmx()>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	f8d0 abc8 	ldr.w	sl, [r0, #3016]	@ 0xbc8
 800c6b8:	4abc      	ldr	r2, [pc, #752]	@ (800c9ac <ArtNetNode::HandleDmx()+0x2fc>)
 800c6ba:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 800c6be:	ba5b      	rev16	r3, r3
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	b089      	sub	sp, #36	@ 0x24
 800c6c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6c8:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
 800c6cc:	bf28      	it	cs
 800c6ce:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800c6d2:	1856      	adds	r6, r2, r1
 800c6d4:	f500 558a 	add.w	r5, r0, #4416	@ 0x1140
 800c6d8:	9305      	str	r3, [sp, #20]
 800c6da:	18f7      	adds	r7, r6, r3
 800c6dc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	3514      	adds	r5, #20
 800c6e6:	f500 68a0 	add.w	r8, r0, #1280	@ 0x500
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	9303      	str	r3, [sp, #12]
 800c6ee:	e00d      	b.n	800c70c <ArtNetNode::HandleDmx()+0x5c>
 800c6f0:	3428      	adds	r4, #40	@ 0x28
 800c6f2:	4544      	cmp	r4, r8
 800c6f4:	f101 0101 	add.w	r1, r1, #1
 800c6f8:	f105 0524 	add.w	r5, r5, #36	@ 0x24
 800c6fc:	f202 6204 	addw	r2, r2, #1540	@ 0x604
 800c700:	f206 6604 	addw	r6, r6, #1540	@ 0x604
 800c704:	f207 6704 	addw	r7, r7, #1540	@ 0x604
 800c708:	f000 809e 	beq.w	800c848 <ArtNetNode::HandleDmx()+0x198>
 800c70c:	f8d4 3bf0 	ldr.w	r3, [r4, #3056]	@ 0xbf0
 800c710:	2b01      	cmp	r3, #1
 800c712:	d1ed      	bne.n	800c6f0 <ArtNetNode::HandleDmx()+0x40>
 800c714:	f8d4 3bf4 	ldr.w	r3, [r4, #3060]	@ 0xbf4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1e9      	bne.n	800c6f0 <ArtNetNode::HandleDmx()+0x40>
 800c71c:	f8b4 0be8 	ldrh.w	r0, [r4, #3048]	@ 0xbe8
 800c720:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 800c724:	4298      	cmp	r0, r3
 800c726:	d1e3      	bne.n	800c6f0 <ArtNetNode::HandleDmx()+0x40>
 800c728:	7f2b      	ldrb	r3, [r5, #28]
 800c72a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c72e:	772b      	strb	r3, [r5, #28]
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	f893 013e 	ldrb.w	r0, [r3, #318]	@ 0x13e
 800c738:	b158      	cbz	r0, 800c752 <ArtNetNode::HandleDmx()+0xa2>
 800c73a:	f893 0140 	ldrb.w	r0, [r3, #320]	@ 0x140
 800c73e:	b940      	cbnz	r0, 800c752 <ArtNetNode::HandleDmx()+0xa2>
 800c740:	4648      	mov	r0, r9
 800c742:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c746:	f7ff ff67 	bl	800c618 <ArtNetNode::CheckMergeTimeouts(unsigned long)>
 800c74a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c74e:	7f2b      	ldrb	r3, [r5, #28]
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	9b04      	ldr	r3, [sp, #16]
 800c754:	6868      	ldr	r0, [r5, #4]
 800c756:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800c75a:	f8d9 ebcc 	ldr.w	lr, [r9, #3020]	@ 0xbcc
 800c75e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c762:	9306      	str	r3, [sp, #24]
 800c764:	2800      	cmp	r0, #0
 800c766:	f000 8185 	beq.w	800ca74 <ArtNetNode::HandleDmx()+0x3c4>
 800c76a:	4570      	cmp	r0, lr
 800c76c:	d06f      	beq.n	800c84e <ArtNetNode::HandleDmx()+0x19e>
 800c76e:	f1bc 0f00 	cmp.w	ip, #0
 800c772:	d166      	bne.n	800c842 <ArtNetNode::HandleDmx()+0x192>
 800c774:	f8c5 e010 	str.w	lr, [r5, #16]
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800c77e:	60e8      	str	r0, [r5, #12]
 800c780:	f893 013e 	ldrb.w	r0, [r3, #318]	@ 0x13e
 800c784:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800c788:	f8a5 c014 	strh.w	ip, [r5, #20]
 800c78c:	b918      	cbnz	r0, 800c796 <ArtNetNode::HandleDmx()+0xe6>
 800c78e:	f240 1001 	movw	r0, #257	@ 0x101
 800c792:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	f043 0308 	orr.w	r3, r3, #8
 800c79c:	772b      	strb	r3, [r5, #28]
 800c79e:	9b05      	ldr	r3, [sp, #20]
 800c7a0:	f10a 0012 	add.w	r0, sl, #18
 800c7a4:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 815e 	beq.w	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800c7ae:	f103 0b12 	add.w	fp, r3, #18
 800c7b2:	44d3      	add	fp, sl
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	f813 eb01 	ldrb.w	lr, [r3], #1
 800c7ba:	f80c eb01 	strb.w	lr, [ip], #1
 800c7be:	459b      	cmp	fp, r3
 800c7c0:	d1f9      	bne.n	800c7b6 <ArtNetNode::HandleDmx()+0x106>
 800c7c2:	9b05      	ldr	r3, [sp, #20]
 800c7c4:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800c7c8:	9b06      	ldr	r3, [sp, #24]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 81cc 	beq.w	800cb68 <ArtNetNode::HandleDmx()+0x4b8>
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	f810 cb01 	ldrb.w	ip, [r0], #1
 800c7d6:	f803 cb01 	strb.w	ip, [r3], #1
 800c7da:	4583      	cmp	fp, r0
 800c7dc:	d1f9      	bne.n	800c7d2 <ArtNetNode::HandleDmx()+0x122>
 800c7de:	f8d6 e601 	ldr.w	lr, [r6, #1537]	@ 0x601
 800c7e2:	9b03      	ldr	r3, [sp, #12]
 800c7e4:	f8d9 0bdc 	ldr.w	r0, [r9, #3036]	@ 0xbdc
 800c7e8:	f893 c13d 	ldrb.w	ip, [r3, #317]	@ 0x13d
 800c7ec:	6803      	ldr	r3, [r0, #0]
 800c7ee:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c7f2:	f1bc 0f00 	cmp.w	ip, #0
 800c7f6:	d005      	beq.n	800c804 <ArtNetNode::HandleDmx()+0x154>
 800c7f8:	f895 c01c 	ldrb.w	ip, [r5, #28]
 800c7fc:	f01c 0c08 	ands.w	ip, ip, #8
 800c800:	f000 80d6 	beq.w	800c9b0 <ArtNetNode::HandleDmx()+0x300>
 800c804:	2301      	movs	r3, #1
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	9206      	str	r2, [sp, #24]
 800c80a:	4673      	mov	r3, lr
 800c80c:	9104      	str	r1, [sp, #16]
 800c80e:	47d8      	blx	fp
 800c810:	7feb      	ldrb	r3, [r5, #31]
 800c812:	9904      	ldr	r1, [sp, #16]
 800c814:	9a06      	ldr	r2, [sp, #24]
 800c816:	b963      	cbnz	r3, 800c832 <ArtNetNode::HandleDmx()+0x182>
 800c818:	f8d9 0bdc 	ldr.w	r0, [r9, #3036]	@ 0xbdc
 800c81c:	6803      	ldr	r3, [r0, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	4798      	blx	r3
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	9904      	ldr	r1, [sp, #16]
 800c826:	f04f 0201 	mov.w	r2, #1
 800c82a:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
 800c82e:	77ea      	strb	r2, [r5, #31]
 800c830:	9a06      	ldr	r2, [sp, #24]
 800c832:	9803      	ldr	r0, [sp, #12]
 800c834:	f890 3142 	ldrb.w	r3, [r0, #322]	@ 0x142
 800c838:	f043 0302 	orr.w	r3, r3, #2
 800c83c:	f880 3142 	strb.w	r3, [r0, #322]	@ 0x142
 800c840:	e756      	b.n	800c6f0 <ArtNetNode::HandleDmx()+0x40>
 800c842:	45f4      	cmp	ip, lr
 800c844:	f000 80c5 	beq.w	800c9d2 <ArtNetNode::HandleDmx()+0x322>
 800c848:	b009      	add	sp, #36	@ 0x24
 800c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	f89a e00d 	ldrb.w	lr, [sl, #13]
 800c852:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800c856:	f1bc 0f00 	cmp.w	ip, #0
 800c85a:	d139      	bne.n	800c8d0 <ArtNetNode::HandleDmx()+0x220>
 800c85c:	45de      	cmp	lr, fp
 800c85e:	f000 81db 	beq.w	800cc18 <ArtNetNode::HandleDmx()+0x568>
 800c862:	f8b5 c014 	ldrh.w	ip, [r5, #20]
 800c866:	45f4      	cmp	ip, lr
 800c868:	d0ee      	beq.n	800c848 <ArtNetNode::HandleDmx()+0x198>
 800c86a:	6128      	str	r0, [r5, #16]
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800c872:	60e8      	str	r0, [r5, #12]
 800c874:	f893 013e 	ldrb.w	r0, [r3, #318]	@ 0x13e
 800c878:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800c87c:	f8a5 c014 	strh.w	ip, [r5, #20]
 800c880:	2800      	cmp	r0, #0
 800c882:	f000 80a1 	beq.w	800c9c8 <ArtNetNode::HandleDmx()+0x318>
 800c886:	9b04      	ldr	r3, [sp, #16]
 800c888:	f043 0308 	orr.w	r3, r3, #8
 800c88c:	772b      	strb	r3, [r5, #28]
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	f10a 0012 	add.w	r0, sl, #18
 800c894:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80e6 	beq.w	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800c89e:	f103 0b12 	add.w	fp, r3, #18
 800c8a2:	44d3      	add	fp, sl
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	f813 eb01 	ldrb.w	lr, [r3], #1
 800c8aa:	f80c eb01 	strb.w	lr, [ip], #1
 800c8ae:	459b      	cmp	fp, r3
 800c8b0:	d1f9      	bne.n	800c8a6 <ArtNetNode::HandleDmx()+0x1f6>
 800c8b2:	9b05      	ldr	r3, [sp, #20]
 800c8b4:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800c8b8:	9b06      	ldr	r3, [sp, #24]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f000 80bd 	beq.w	800ca3a <ArtNetNode::HandleDmx()+0x38a>
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	f810 cb01 	ldrb.w	ip, [r0], #1
 800c8c6:	f803 cb01 	strb.w	ip, [r3], #1
 800c8ca:	4583      	cmp	fp, r0
 800c8cc:	d1f9      	bne.n	800c8c2 <ArtNetNode::HandleDmx()+0x212>
 800c8ce:	e786      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800c8d0:	4584      	cmp	ip, r0
 800c8d2:	d033      	beq.n	800c93c <ArtNetNode::HandleDmx()+0x28c>
 800c8d4:	45de      	cmp	lr, fp
 800c8d6:	d1b7      	bne.n	800c848 <ArtNetNode::HandleDmx()+0x198>
 800c8d8:	9b03      	ldr	r3, [sp, #12]
 800c8da:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800c8de:	f893 c13e 	ldrb.w	ip, [r3, #318]	@ 0x13e
 800c8e2:	6028      	str	r0, [r5, #0]
 800c8e4:	f1bc 0f00 	cmp.w	ip, #0
 800c8e8:	d103      	bne.n	800c8f2 <ArtNetNode::HandleDmx()+0x242>
 800c8ea:	f240 1001 	movw	r0, #257	@ 0x101
 800c8ee:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800c8f2:	9b04      	ldr	r3, [sp, #16]
 800c8f4:	f043 0308 	orr.w	r3, r3, #8
 800c8f8:	772b      	strb	r3, [r5, #28]
 800c8fa:	9b05      	ldr	r3, [sp, #20]
 800c8fc:	f10a 0012 	add.w	r0, sl, #18
 800c900:	f106 0c01 	add.w	ip, r6, #1
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 80b0 	beq.w	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800c90a:	f103 0b12 	add.w	fp, r3, #18
 800c90e:	44d3      	add	fp, sl
 800c910:	4603      	mov	r3, r0
 800c912:	f813 eb01 	ldrb.w	lr, [r3], #1
 800c916:	f80c eb01 	strb.w	lr, [ip], #1
 800c91a:	455b      	cmp	r3, fp
 800c91c:	d1f9      	bne.n	800c912 <ArtNetNode::HandleDmx()+0x262>
 800c91e:	9b05      	ldr	r3, [sp, #20]
 800c920:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800c924:	9b06      	ldr	r3, [sp, #24]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 81bd 	beq.w	800cca6 <ArtNetNode::HandleDmx()+0x5f6>
 800c92c:	4613      	mov	r3, r2
 800c92e:	f810 cb01 	ldrb.w	ip, [r0], #1
 800c932:	f803 cb01 	strb.w	ip, [r3], #1
 800c936:	4558      	cmp	r0, fp
 800c938:	d1f9      	bne.n	800c92e <ArtNetNode::HandleDmx()+0x27e>
 800c93a:	e750      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800c93c:	45de      	cmp	lr, fp
 800c93e:	f000 8120 	beq.w	800cb82 <ArtNetNode::HandleDmx()+0x4d2>
 800c942:	8aa8      	ldrh	r0, [r5, #20]
 800c944:	4570      	cmp	r0, lr
 800c946:	f040 81fa 	bne.w	800cd3e <ArtNetNode::HandleDmx()+0x68e>
 800c94a:	9b03      	ldr	r3, [sp, #12]
 800c94c:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800c950:	f893 c13e 	ldrb.w	ip, [r3, #318]	@ 0x13e
 800c954:	60e8      	str	r0, [r5, #12]
 800c956:	f1bc 0f00 	cmp.w	ip, #0
 800c95a:	d103      	bne.n	800c964 <ArtNetNode::HandleDmx()+0x2b4>
 800c95c:	f240 1001 	movw	r0, #257	@ 0x101
 800c960:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800c964:	9b04      	ldr	r3, [sp, #16]
 800c966:	f043 0308 	orr.w	r3, r3, #8
 800c96a:	772b      	strb	r3, [r5, #28]
 800c96c:	9b05      	ldr	r3, [sp, #20]
 800c96e:	f10a 0012 	add.w	r0, sl, #18
 800c972:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800c976:	2b00      	cmp	r3, #0
 800c978:	d077      	beq.n	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800c97a:	f103 0b12 	add.w	fp, r3, #18
 800c97e:	44d3      	add	fp, sl
 800c980:	4603      	mov	r3, r0
 800c982:	f813 eb01 	ldrb.w	lr, [r3], #1
 800c986:	f80c eb01 	strb.w	lr, [ip], #1
 800c98a:	459b      	cmp	fp, r3
 800c98c:	d1f9      	bne.n	800c982 <ArtNetNode::HandleDmx()+0x2d2>
 800c98e:	9b05      	ldr	r3, [sp, #20]
 800c990:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800c994:	9b06      	ldr	r3, [sp, #24]
 800c996:	2b00      	cmp	r3, #0
 800c998:	f000 8131 	beq.w	800cbfe <ArtNetNode::HandleDmx()+0x54e>
 800c99c:	4613      	mov	r3, r2
 800c99e:	f810 cb01 	ldrb.w	ip, [r0], #1
 800c9a2:	f803 cb01 	strb.w	ip, [r3], #1
 800c9a6:	4583      	cmp	fp, r0
 800c9a8:	d1f9      	bne.n	800c99e <ArtNetNode::HandleDmx()+0x2ee>
 800c9aa:	e718      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800c9ac:	20000a50 	andcs	r0, r0, r0, asr sl
 800c9b0:	4673      	mov	r3, lr
 800c9b2:	9206      	str	r2, [sp, #24]
 800c9b4:	9104      	str	r1, [sp, #16]
 800c9b6:	f8cd c000 	str.w	ip, [sp]
 800c9ba:	47d8      	blx	fp
 800c9bc:	2301      	movs	r3, #1
 800c9be:	9904      	ldr	r1, [sp, #16]
 800c9c0:	9a06      	ldr	r2, [sp, #24]
 800c9c2:	f885 3020 	strb.w	r3, [r5, #32]
 800c9c6:	e734      	b.n	800c832 <ArtNetNode::HandleDmx()+0x182>
 800c9c8:	f240 1001 	movw	r0, #257	@ 0x101
 800c9cc:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800c9d0:	e759      	b.n	800c886 <ArtNetNode::HandleDmx()+0x1d6>
 800c9d2:	f8b5 c014 	ldrh.w	ip, [r5, #20]
 800c9d6:	f89a 000d 	ldrb.w	r0, [sl, #13]
 800c9da:	4584      	cmp	ip, r0
 800c9dc:	f040 81b5 	bne.w	800cd4a <ArtNetNode::HandleDmx()+0x69a>
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800c9e6:	f893 c13e 	ldrb.w	ip, [r3, #318]	@ 0x13e
 800c9ea:	60e8      	str	r0, [r5, #12]
 800c9ec:	f1bc 0f00 	cmp.w	ip, #0
 800c9f0:	f000 813f 	beq.w	800cc72 <ArtNetNode::HandleDmx()+0x5c2>
 800c9f4:	9b04      	ldr	r3, [sp, #16]
 800c9f6:	f043 0308 	orr.w	r3, r3, #8
 800c9fa:	772b      	strb	r3, [r5, #28]
 800c9fc:	9b05      	ldr	r3, [sp, #20]
 800c9fe:	f10a 0012 	add.w	r0, sl, #18
 800ca02:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800ca06:	b383      	cbz	r3, 800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800ca08:	f103 0b12 	add.w	fp, r3, #18
 800ca0c:	44d3      	add	fp, sl
 800ca0e:	4603      	mov	r3, r0
 800ca10:	f813 eb01 	ldrb.w	lr, [r3], #1
 800ca14:	f80c eb01 	strb.w	lr, [ip], #1
 800ca18:	459b      	cmp	fp, r3
 800ca1a:	d1f9      	bne.n	800ca10 <ArtNetNode::HandleDmx()+0x360>
 800ca1c:	9b05      	ldr	r3, [sp, #20]
 800ca1e:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800ca22:	9b06      	ldr	r3, [sp, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 8158 	beq.w	800ccda <ArtNetNode::HandleDmx()+0x62a>
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	f810 cb01 	ldrb.w	ip, [r0], #1
 800ca30:	f803 cb01 	strb.w	ip, [r3], #1
 800ca34:	4583      	cmp	fp, r0
 800ca36:	d1f9      	bne.n	800ca2c <ArtNetNode::HandleDmx()+0x37c>
 800ca38:	e6d1      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800ca3a:	4633      	mov	r3, r6
 800ca3c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ca40:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800ca44:	4560      	cmp	r0, ip
 800ca46:	bf38      	it	cc
 800ca48:	4660      	movcc	r0, ip
 800ca4a:	42bb      	cmp	r3, r7
 800ca4c:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800ca50:	d1f4      	bne.n	800ca3c <ArtNetNode::HandleDmx()+0x38c>
 800ca52:	e6c4      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800ca54:	9805      	ldr	r0, [sp, #20]
 800ca56:	f8d9 3bd0 	ldr.w	r3, [r9, #3024]	@ 0xbd0
 800ca5a:	60eb      	str	r3, [r5, #12]
 800ca5c:	f206 2e01 	addw	lr, r6, #513	@ 0x201
 800ca60:	f10a 0312 	add.w	r3, sl, #18
 800ca64:	2800      	cmp	r0, #0
 800ca66:	f040 8109 	bne.w	800cc7c <ArtNetNode::HandleDmx()+0x5cc>
 800ca6a:	9b05      	ldr	r3, [sp, #20]
 800ca6c:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800ca70:	469e      	mov	lr, r3
 800ca72:	e6b6      	b.n	800c7e2 <ArtNetNode::HandleDmx()+0x132>
 800ca74:	f1bc 0f00 	cmp.w	ip, #0
 800ca78:	f000 813c 	beq.w	800ccf4 <ArtNetNode::HandleDmx()+0x644>
 800ca7c:	45f4      	cmp	ip, lr
 800ca7e:	d034      	beq.n	800caea <ArtNetNode::HandleDmx()+0x43a>
 800ca80:	f8c5 e004 	str.w	lr, [r5, #4]
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800ca8a:	6028      	str	r0, [r5, #0]
 800ca8c:	f893 013e 	ldrb.w	r0, [r3, #318]	@ 0x13e
 800ca90:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800ca94:	f8a5 c008 	strh.w	ip, [r5, #8]
 800ca98:	b918      	cbnz	r0, 800caa2 <ArtNetNode::HandleDmx()+0x3f2>
 800ca9a:	f240 1001 	movw	r0, #257	@ 0x101
 800ca9e:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800caa2:	9b04      	ldr	r3, [sp, #16]
 800caa4:	f043 0308 	orr.w	r3, r3, #8
 800caa8:	772b      	strb	r3, [r5, #28]
 800caaa:	9b05      	ldr	r3, [sp, #20]
 800caac:	f10a 0012 	add.w	r0, sl, #18
 800cab0:	f106 0c01 	add.w	ip, r6, #1
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d0d8      	beq.n	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800cab8:	f103 0b12 	add.w	fp, r3, #18
 800cabc:	44d3      	add	fp, sl
 800cabe:	4603      	mov	r3, r0
 800cac0:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cac4:	f80c eb01 	strb.w	lr, [ip], #1
 800cac8:	459b      	cmp	fp, r3
 800caca:	d1f9      	bne.n	800cac0 <ArtNetNode::HandleDmx()+0x410>
 800cacc:	9b05      	ldr	r3, [sp, #20]
 800cace:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cad2:	9b06      	ldr	r3, [sp, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8085 	beq.w	800cbe4 <ArtNetNode::HandleDmx()+0x534>
 800cada:	4613      	mov	r3, r2
 800cadc:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cae0:	f803 cb01 	strb.w	ip, [r3], #1
 800cae4:	4583      	cmp	fp, r0
 800cae6:	d1f9      	bne.n	800cadc <ArtNetNode::HandleDmx()+0x42c>
 800cae8:	e679      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800caea:	f89a 000d 	ldrb.w	r0, [sl, #13]
 800caee:	f8b5 e014 	ldrh.w	lr, [r5, #20]
 800caf2:	4586      	cmp	lr, r0
 800caf4:	d0ae      	beq.n	800ca54 <ArtNetNode::HandleDmx()+0x3a4>
 800caf6:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800cafa:	4586      	cmp	lr, r0
 800cafc:	f43f aea4 	beq.w	800c848 <ArtNetNode::HandleDmx()+0x198>
 800cb00:	f8c5 c004 	str.w	ip, [r5, #4]
 800cb04:	9b03      	ldr	r3, [sp, #12]
 800cb06:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800cb0a:	6028      	str	r0, [r5, #0]
 800cb0c:	f893 013e 	ldrb.w	r0, [r3, #318]	@ 0x13e
 800cb10:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800cb14:	f8a5 c008 	strh.w	ip, [r5, #8]
 800cb18:	b918      	cbnz	r0, 800cb22 <ArtNetNode::HandleDmx()+0x472>
 800cb1a:	f240 1001 	movw	r0, #257	@ 0x101
 800cb1e:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800cb22:	9b04      	ldr	r3, [sp, #16]
 800cb24:	f043 0308 	orr.w	r3, r3, #8
 800cb28:	772b      	strb	r3, [r5, #28]
 800cb2a:	9b05      	ldr	r3, [sp, #20]
 800cb2c:	f10a 0012 	add.w	r0, sl, #18
 800cb30:	f106 0c01 	add.w	ip, r6, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d098      	beq.n	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800cb38:	f103 0b12 	add.w	fp, r3, #18
 800cb3c:	44d3      	add	fp, sl
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cb44:	f80c eb01 	strb.w	lr, [ip], #1
 800cb48:	455b      	cmp	r3, fp
 800cb4a:	d1f9      	bne.n	800cb40 <ArtNetNode::HandleDmx()+0x490>
 800cb4c:	9b05      	ldr	r3, [sp, #20]
 800cb4e:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cb52:	9b06      	ldr	r3, [sp, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d07f      	beq.n	800cc58 <ArtNetNode::HandleDmx()+0x5a8>
 800cb58:	4613      	mov	r3, r2
 800cb5a:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cb5e:	f803 cb01 	strb.w	ip, [r3], #1
 800cb62:	4558      	cmp	r0, fp
 800cb64:	d1f9      	bne.n	800cb5a <ArtNetNode::HandleDmx()+0x4aa>
 800cb66:	e63a      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cb68:	4633      	mov	r3, r6
 800cb6a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cb6e:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800cb72:	4560      	cmp	r0, ip
 800cb74:	bf38      	it	cc
 800cb76:	4660      	movcc	r0, ip
 800cb78:	429f      	cmp	r7, r3
 800cb7a:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800cb7e:	d1f4      	bne.n	800cb6a <ArtNetNode::HandleDmx()+0x4ba>
 800cb80:	e62d      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	f8d9 0bd0 	ldr.w	r0, [r9, #3024]	@ 0xbd0
 800cb88:	f893 c13e 	ldrb.w	ip, [r3, #318]	@ 0x13e
 800cb8c:	6028      	str	r0, [r5, #0]
 800cb8e:	f1bc 0f00 	cmp.w	ip, #0
 800cb92:	d103      	bne.n	800cb9c <ArtNetNode::HandleDmx()+0x4ec>
 800cb94:	f240 1001 	movw	r0, #257	@ 0x101
 800cb98:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800cb9c:	9b04      	ldr	r3, [sp, #16]
 800cb9e:	f043 0308 	orr.w	r3, r3, #8
 800cba2:	772b      	strb	r3, [r5, #28]
 800cba4:	9b05      	ldr	r3, [sp, #20]
 800cba6:	f10a 0012 	add.w	r0, sl, #18
 800cbaa:	f106 0c01 	add.w	ip, r6, #1
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	f43f af5b 	beq.w	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800cbb4:	f103 0e12 	add.w	lr, r3, #18
 800cbb8:	44d6      	add	lr, sl
 800cbba:	4603      	mov	r3, r0
 800cbbc:	f813 bb01 	ldrb.w	fp, [r3], #1
 800cbc0:	f80c bb01 	strb.w	fp, [ip], #1
 800cbc4:	4573      	cmp	r3, lr
 800cbc6:	d1f9      	bne.n	800cbbc <ArtNetNode::HandleDmx()+0x50c>
 800cbc8:	9b05      	ldr	r3, [sp, #20]
 800cbca:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cbce:	9b06      	ldr	r3, [sp, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d075      	beq.n	800ccc0 <ArtNetNode::HandleDmx()+0x610>
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cbda:	f803 cb01 	strb.w	ip, [r3], #1
 800cbde:	4570      	cmp	r0, lr
 800cbe0:	d1f9      	bne.n	800cbd6 <ArtNetNode::HandleDmx()+0x526>
 800cbe2:	e5fc      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cbe4:	4633      	mov	r3, r6
 800cbe6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cbea:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800cbee:	4560      	cmp	r0, ip
 800cbf0:	bf38      	it	cc
 800cbf2:	4660      	movcc	r0, ip
 800cbf4:	429f      	cmp	r7, r3
 800cbf6:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800cbfa:	d1f4      	bne.n	800cbe6 <ArtNetNode::HandleDmx()+0x536>
 800cbfc:	e5ef      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cbfe:	4633      	mov	r3, r6
 800cc00:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cc04:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800cc08:	4560      	cmp	r0, ip
 800cc0a:	bf38      	it	cc
 800cc0c:	4660      	movcc	r0, ip
 800cc0e:	429f      	cmp	r7, r3
 800cc10:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800cc14:	d1f4      	bne.n	800cc00 <ArtNetNode::HandleDmx()+0x550>
 800cc16:	e5e2      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cc18:	9805      	ldr	r0, [sp, #20]
 800cc1a:	f8d9 3bd0 	ldr.w	r3, [r9, #3024]	@ 0xbd0
 800cc1e:	602b      	str	r3, [r5, #0]
 800cc20:	f106 0e01 	add.w	lr, r6, #1
 800cc24:	f10a 0312 	add.w	r3, sl, #18
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f43f af1e 	beq.w	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800cc2e:	f100 0c12 	add.w	ip, r0, #18
 800cc32:	44d4      	add	ip, sl
 800cc34:	4618      	mov	r0, r3
 800cc36:	f810 bb01 	ldrb.w	fp, [r0], #1
 800cc3a:	f80e bb01 	strb.w	fp, [lr], #1
 800cc3e:	4560      	cmp	r0, ip
 800cc40:	d1f9      	bne.n	800cc36 <ArtNetNode::HandleDmx()+0x586>
 800cc42:	9805      	ldr	r0, [sp, #20]
 800cc44:	f8c6 0601 	str.w	r0, [r6, #1537]	@ 0x601
 800cc48:	4610      	mov	r0, r2
 800cc4a:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cc4e:	f800 eb01 	strb.w	lr, [r0], #1
 800cc52:	4563      	cmp	r3, ip
 800cc54:	d1f9      	bne.n	800cc4a <ArtNetNode::HandleDmx()+0x59a>
 800cc56:	e5c2      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cc58:	4633      	mov	r3, r6
 800cc5a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cc5e:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800cc62:	4560      	cmp	r0, ip
 800cc64:	bf38      	it	cc
 800cc66:	4660      	movcc	r0, ip
 800cc68:	42bb      	cmp	r3, r7
 800cc6a:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800cc6e:	d1f4      	bne.n	800cc5a <ArtNetNode::HandleDmx()+0x5aa>
 800cc70:	e5b5      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cc72:	f240 1001 	movw	r0, #257	@ 0x101
 800cc76:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800cc7a:	e6bb      	b.n	800c9f4 <ArtNetNode::HandleDmx()+0x344>
 800cc7c:	f100 0c12 	add.w	ip, r0, #18
 800cc80:	44d4      	add	ip, sl
 800cc82:	4618      	mov	r0, r3
 800cc84:	f810 bb01 	ldrb.w	fp, [r0], #1
 800cc88:	f80e bb01 	strb.w	fp, [lr], #1
 800cc8c:	4584      	cmp	ip, r0
 800cc8e:	d1f9      	bne.n	800cc84 <ArtNetNode::HandleDmx()+0x5d4>
 800cc90:	9805      	ldr	r0, [sp, #20]
 800cc92:	f8c6 0601 	str.w	r0, [r6, #1537]	@ 0x601
 800cc96:	4610      	mov	r0, r2
 800cc98:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cc9c:	f800 eb01 	strb.w	lr, [r0], #1
 800cca0:	459c      	cmp	ip, r3
 800cca2:	d1f9      	bne.n	800cc98 <ArtNetNode::HandleDmx()+0x5e8>
 800cca4:	e59b      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cca6:	4633      	mov	r3, r6
 800cca8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ccac:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800ccb0:	4560      	cmp	r0, ip
 800ccb2:	bf38      	it	cc
 800ccb4:	4660      	movcc	r0, ip
 800ccb6:	42bb      	cmp	r3, r7
 800ccb8:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800ccbc:	d1f4      	bne.n	800cca8 <ArtNetNode::HandleDmx()+0x5f8>
 800ccbe:	e58e      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800ccc0:	4633      	mov	r3, r6
 800ccc2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ccc6:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800ccca:	4560      	cmp	r0, ip
 800cccc:	bf38      	it	cc
 800ccce:	4660      	movcc	r0, ip
 800ccd0:	429f      	cmp	r7, r3
 800ccd2:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800ccd6:	d1f4      	bne.n	800ccc2 <ArtNetNode::HandleDmx()+0x612>
 800ccd8:	e581      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800ccda:	4633      	mov	r3, r6
 800ccdc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cce0:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800cce4:	4560      	cmp	r0, ip
 800cce6:	bf38      	it	cc
 800cce8:	4660      	movcc	r0, ip
 800ccea:	42bb      	cmp	r3, r7
 800ccec:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800ccf0:	d1f4      	bne.n	800ccdc <ArtNetNode::HandleDmx()+0x62c>
 800ccf2:	e574      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800ccf4:	f8c5 e004 	str.w	lr, [r5, #4]
 800ccf8:	f8d9 3bd0 	ldr.w	r3, [r9, #3024]	@ 0xbd0
 800ccfc:	602b      	str	r3, [r5, #0]
 800ccfe:	9805      	ldr	r0, [sp, #20]
 800cd00:	f89a 300d 	ldrb.w	r3, [sl, #13]
 800cd04:	812b      	strh	r3, [r5, #8]
 800cd06:	f106 0c01 	add.w	ip, r6, #1
 800cd0a:	f10a 0312 	add.w	r3, sl, #18
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f43f aeab 	beq.w	800ca6a <ArtNetNode::HandleDmx()+0x3ba>
 800cd14:	3012      	adds	r0, #18
 800cd16:	eb0a 0b00 	add.w	fp, sl, r0
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f810 eb01 	ldrb.w	lr, [r0], #1
 800cd20:	f80c eb01 	strb.w	lr, [ip], #1
 800cd24:	4583      	cmp	fp, r0
 800cd26:	d1f9      	bne.n	800cd1c <ArtNetNode::HandleDmx()+0x66c>
 800cd28:	9805      	ldr	r0, [sp, #20]
 800cd2a:	f8c6 0601 	str.w	r0, [r6, #1537]	@ 0x601
 800cd2e:	4610      	mov	r0, r2
 800cd30:	f813 cb01 	ldrb.w	ip, [r3], #1
 800cd34:	f800 cb01 	strb.w	ip, [r0], #1
 800cd38:	459b      	cmp	fp, r3
 800cd3a:	d1f9      	bne.n	800cd30 <ArtNetNode::HandleDmx()+0x680>
 800cd3c:	e54f      	b.n	800c7de <ArtNetNode::HandleDmx()+0x12e>
 800cd3e:	4804      	ldr	r0, [pc, #16]	@ (800cd50 <ArtNetNode::HandleDmx()+0x6a0>)
 800cd40:	b009      	add	sp, #36	@ 0x24
 800cd42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd46:	f00d bfc4 	b.w	801acd2 <puts>
 800cd4a:	4802      	ldr	r0, [pc, #8]	@ (800cd54 <ArtNetNode::HandleDmx()+0x6a4>)
 800cd4c:	e7f8      	b.n	800cd40 <ArtNetNode::HandleDmx()+0x690>
 800cd4e:	bf00      	nop
 800cd50:	0801cb58 	stmdaeq	r1, {r3, r4, r6, r8, r9, fp, lr, pc}
 800cd54:	0801cb28 	stmdaeq	r1, {r3, r5, r8, r9, fp, lr, pc}

0800cd58 <memcpy.isra.0>:
 800cd58:	440a      	add	r2, r1
 800cd5a:	4291      	cmp	r1, r2
 800cd5c:	d100      	bne.n	800cd60 <memcpy.isra.0+0x8>
 800cd5e:	4770      	bx	lr
 800cd60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd64:	f800 3b01 	strb.w	r3, [r0], #1
 800cd68:	e7f7      	b.n	800cd5a <memcpy.isra.0+0x2>

0800cd6a <memcmp>:
 800cd6a:	b510      	push	{r4, lr}
 800cd6c:	3901      	subs	r1, #1
 800cd6e:	4402      	add	r2, r0
 800cd70:	4290      	cmp	r0, r2
 800cd72:	d101      	bne.n	800cd78 <memcmp+0xe>
 800cd74:	2000      	movs	r0, #0
 800cd76:	e005      	b.n	800cd84 <memcmp+0x1a>
 800cd78:	7803      	ldrb	r3, [r0, #0]
 800cd7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd7e:	42a3      	cmp	r3, r4
 800cd80:	d001      	beq.n	800cd86 <memcmp+0x1c>
 800cd82:	1b18      	subs	r0, r3, r4
 800cd84:	bd10      	pop	{r4, pc}
 800cd86:	3001      	adds	r0, #1
 800cd88:	e7f2      	b.n	800cd70 <memcmp+0x6>
	...

0800cd8c <ArtNetNode::HandleIpProg()>:
 800cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	f8d0 4bc8 	ldr.w	r4, [r0, #3016]	@ 0xbc8
 800cd94:	4e6a      	ldr	r6, [pc, #424]	@ (800cf40 <ArtNetNode::HandleIpProg()+0x1b4>)
 800cd96:	f894 800e 	ldrb.w	r8, [r4, #14]
 800cd9a:	7eb7      	ldrb	r7, [r6, #26]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	7223      	strb	r3, [r4, #8]
 800cda0:	f06f 0306 	mvn.w	r3, #6
 800cda4:	7263      	strb	r3, [r4, #9]
 800cda6:	f008 03c0 	and.w	r3, r8, #192	@ 0xc0
 800cdaa:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdac:	b085      	sub	sp, #20
 800cdae:	4605      	mov	r5, r0
 800cdb0:	f3c7 0740 	ubfx	r7, r7, #1, #1
 800cdb4:	d103      	bne.n	800cdbe <ArtNetNode::HandleIpProg()+0x32>
 800cdb6:	4b63      	ldr	r3, [pc, #396]	@ (800cf44 <ArtNetNode::HandleIpProg()+0x1b8>)
 800cdb8:	6818      	ldr	r0, [r3, #0]
 800cdba:	f007 fbd8 	bl	801456e <Network::EnableDhcp()>
 800cdbe:	f008 0388 	and.w	r3, r8, #136	@ 0x88
 800cdc2:	2b88      	cmp	r3, #136	@ 0x88
 800cdc4:	d104      	bne.n	800cdd0 <ArtNetNode::HandleIpProg()+0x44>
 800cdc6:	4b5f      	ldr	r3, [pc, #380]	@ (800cf44 <ArtNetNode::HandleIpProg()+0x1b8>)
 800cdc8:	2100      	movs	r1, #0
 800cdca:	6818      	ldr	r0, [r3, #0]
 800cdcc:	f007 fb44 	bl	8014458 <Network::SetIp(unsigned long)>
 800cdd0:	f008 0384 	and.w	r3, r8, #132	@ 0x84
 800cdd4:	2b84      	cmp	r3, #132	@ 0x84
 800cdd6:	f8df a170 	ldr.w	sl, [pc, #368]	@ 800cf48 <ArtNetNode::HandleIpProg()+0x1bc>
 800cdda:	f104 0910 	add.w	r9, r4, #16
 800cdde:	d10a      	bne.n	800cdf6 <ArtNetNode::HandleIpProg()+0x6a>
 800cde0:	4649      	mov	r1, r9
 800cde2:	4650      	mov	r0, sl
 800cde4:	2204      	movs	r2, #4
 800cde6:	f7ff ffb7 	bl	800cd58 <memcpy.isra.0>
 800cdea:	4b56      	ldr	r3, [pc, #344]	@ (800cf44 <ArtNetNode::HandleIpProg()+0x1b8>)
 800cdec:	f8da 1000 	ldr.w	r1, [sl]
 800cdf0:	6818      	ldr	r0, [r3, #0]
 800cdf2:	f007 fb31 	bl	8014458 <Network::SetIp(unsigned long)>
 800cdf6:	f008 0382 	and.w	r3, r8, #130	@ 0x82
 800cdfa:	2b82      	cmp	r3, #130	@ 0x82
 800cdfc:	d10b      	bne.n	800ce16 <ArtNetNode::HandleIpProg()+0x8a>
 800cdfe:	4852      	ldr	r0, [pc, #328]	@ (800cf48 <ArtNetNode::HandleIpProg()+0x1bc>)
 800ce00:	f104 0114 	add.w	r1, r4, #20
 800ce04:	2204      	movs	r2, #4
 800ce06:	f7ff ffa7 	bl	800cd58 <memcpy.isra.0>
 800ce0a:	4b4e      	ldr	r3, [pc, #312]	@ (800cf44 <ArtNetNode::HandleIpProg()+0x1b8>)
 800ce0c:	f8da 1000 	ldr.w	r1, [sl]
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	f007 fb41 	bl	8014498 <Network::SetNetmask(unsigned long)>
 800ce16:	f008 0890 	and.w	r8, r8, #144	@ 0x90
 800ce1a:	f1b8 0f90 	cmp.w	r8, #144	@ 0x90
 800ce1e:	d10b      	bne.n	800ce38 <ArtNetNode::HandleIpProg()+0xac>
 800ce20:	4849      	ldr	r0, [pc, #292]	@ (800cf48 <ArtNetNode::HandleIpProg()+0x1bc>)
 800ce22:	f104 011a 	add.w	r1, r4, #26
 800ce26:	2204      	movs	r2, #4
 800ce28:	f7ff ff96 	bl	800cd58 <memcpy.isra.0>
 800ce2c:	4b45      	ldr	r3, [pc, #276]	@ (800cf44 <ArtNetNode::HandleIpProg()+0x1b8>)
 800ce2e:	f8da 1000 	ldr.w	r1, [sl]
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	f007 fb4c 	bl	80144d0 <Network::SetGatewayIp(unsigned long)>
 800ce38:	7eb3      	ldrb	r3, [r6, #26]
 800ce3a:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cf48 <ArtNetNode::HandleIpProg()+0x1bc>
 800ce3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ce42:	019b      	lsls	r3, r3, #6
 800ce44:	76a3      	strb	r3, [r4, #26]
 800ce46:	7eb3      	ldrb	r3, [r6, #26]
 800ce48:	f04f 0a00 	mov.w	sl, #0
 800ce4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ce50:	405f      	eors	r7, r3
 800ce52:	2204      	movs	r2, #4
 800ce54:	6833      	ldr	r3, [r6, #0]
 800ce56:	f884 a01b 	strb.w	sl, [r4, #27]
 800ce5a:	4659      	mov	r1, fp
 800ce5c:	4648      	mov	r0, r9
 800ce5e:	f8cb 3000 	str.w	r3, [fp]
 800ce62:	f7ff ff82 	bl	800cd6a <memcmp>
 800ce66:	2204      	movs	r2, #4
 800ce68:	4680      	mov	r8, r0
 800ce6a:	4659      	mov	r1, fp
 800ce6c:	4648      	mov	r0, r9
 800ce6e:	f7ff ff73 	bl	800cd58 <memcpy.isra.0>
 800ce72:	6873      	ldr	r3, [r6, #4]
 800ce74:	f8cb 3000 	str.w	r3, [fp]
 800ce78:	f104 0314 	add.w	r3, r4, #20
 800ce7c:	2204      	movs	r2, #4
 800ce7e:	4659      	mov	r1, fp
 800ce80:	4618      	mov	r0, r3
 800ce82:	9303      	str	r3, [sp, #12]
 800ce84:	f7ff ff71 	bl	800cd6a <memcmp>
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	9002      	str	r0, [sp, #8]
 800ce8c:	2204      	movs	r2, #4
 800ce8e:	4618      	mov	r0, r3
 800ce90:	4659      	mov	r1, fp
 800ce92:	f7ff ff61 	bl	800cd58 <memcpy.isra.0>
 800ce96:	68b3      	ldr	r3, [r6, #8]
 800ce98:	f8cb 3000 	str.w	r3, [fp]
 800ce9c:	2204      	movs	r2, #4
 800ce9e:	4659      	mov	r1, fp
 800cea0:	f104 001a 	add.w	r0, r4, #26
 800cea4:	f7ff ff61 	bl	800cd6a <memcmp>
 800cea8:	9b02      	ldr	r3, [sp, #8]
 800ceaa:	ea48 0803 	orr.w	r8, r8, r3
 800ceae:	ea58 0800 	orrs.w	r8, r8, r0
 800ceb2:	f04f 0204 	mov.w	r2, #4
 800ceb6:	4659      	mov	r1, fp
 800ceb8:	f104 001c 	add.w	r0, r4, #28
 800cebc:	bf18      	it	ne
 800cebe:	f047 0701 	orrne.w	r7, r7, #1
 800cec2:	f7ff ff49 	bl	800cd58 <memcpy.isra.0>
 800cec6:	6832      	ldr	r2, [r6, #0]
 800cec8:	f884 a020 	strb.w	sl, [r4, #32]
 800cecc:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
 800ced0:	f8d5 0bc4 	ldr.w	r0, [r5, #3012]	@ 0xbc4
 800ced4:	f8d5 1bc8 	ldr.w	r1, [r5, #3016]	@ 0xbc8
 800ced8:	f8d5 3bcc 	ldr.w	r3, [r5, #3020]	@ 0xbcc
 800cedc:	b12a      	cbz	r2, 800ceea <ArtNetNode::HandleIpProg()+0x15e>
 800cede:	f641 1236 	movw	r2, #6454	@ 0x1936
 800cee2:	9200      	str	r2, [sp, #0]
 800cee4:	2222      	movs	r2, #34	@ 0x22
 800cee6:	f008 fc97 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800ceea:	b337      	cbz	r7, 800cf3a <ArtNetNode::HandleIpProg()+0x1ae>
 800ceec:	f505 5480 	add.w	r4, r5, #4096	@ 0x1000
 800cef0:	7eb3      	ldrb	r3, [r6, #26]
 800cef2:	f894 2828 	ldrb.w	r2, [r4, #2088]	@ 0x828
 800cef6:	f003 0302 	and.w	r3, r3, #2
 800cefa:	f022 0202 	bic.w	r2, r2, #2
 800cefe:	4313      	orrs	r3, r2
 800cf00:	f505 50ba 	add.w	r0, r5, #5952	@ 0x1740
 800cf04:	f884 3828 	strb.w	r3, [r4, #2088]	@ 0x828
 800cf08:	2204      	movs	r2, #4
 800cf0a:	4649      	mov	r1, r9
 800cf0c:	301e      	adds	r0, #30
 800cf0e:	f7ff ff23 	bl	800cd58 <memcpy.isra.0>
 800cf12:	f505 50c1 	add.w	r0, r5, #6176	@ 0x1820
 800cf16:	2204      	movs	r2, #4
 800cf18:	4649      	mov	r1, r9
 800cf1a:	3003      	adds	r0, #3
 800cf1c:	f7ff ff1c 	bl	800cd58 <memcpy.isra.0>
 800cf20:	f894 313a 	ldrb.w	r3, [r4, #314]	@ 0x13a
 800cf24:	b14b      	cbz	r3, 800cf3a <ArtNetNode::HandleIpProg()+0x1ae>
 800cf26:	2300      	movs	r3, #0
 800cf28:	f8d5 2bcc 	ldr.w	r2, [r5, #3020]	@ 0xbcc
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	4628      	mov	r0, r5
 800cf30:	b005      	add	sp, #20
 800cf32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf36:	f000 b851 	b.w	800cfdc <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800cf3a:	b005      	add	sp, #20
 800cf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf40:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800cf44:	2000cb68 	andcs	ip, r0, r8, ror #22
 800cf48:	2000c6d0 	ldrdcs	ip, [r0], -r0

0800cf4c <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)>:
 800cf4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf50:	461f      	mov	r7, r3
 800cf52:	2328      	movs	r3, #40	@ 0x28
 800cf54:	fb03 0301 	mla	r3, r3, r1, r0
 800cf58:	4604      	mov	r4, r0
 800cf5a:	f8d3 2bf0 	ldr.w	r2, [r3, #3056]	@ 0xbf0
 800cf5e:	2a01      	cmp	r2, #1
 800cf60:	460d      	mov	r5, r1
 800cf62:	d138      	bne.n	800cfd6 <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)+0x8a>
 800cf64:	f8d3 3bf4 	ldr.w	r3, [r3, #3060]	@ 0xbf4
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d110      	bne.n	800cf8e <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)+0x42>
 800cf6c:	f04f 0824 	mov.w	r8, #36	@ 0x24
 800cf70:	fb08 0801 	mla	r8, r8, r1, r0
 800cf74:	f241 1970 	movw	r9, #4464	@ 0x1170
 800cf78:	f818 6009 	ldrb.w	r6, [r8, r9]
 800cf7c:	f000 ff3a 	bl	800ddf4 <ArtNetNode::GetGoodOutput4(unsigned long)>
 800cf80:	f006 0676 	and.w	r6, r6, #118	@ 0x76
 800cf84:	f020 0076 	bic.w	r0, r0, #118	@ 0x76
 800cf88:	4306      	orrs	r6, r0
 800cf8a:	f808 6009 	strb.w	r6, [r8, r9]
 800cf8e:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800cf92:	f241 1170 	movw	r1, #4464	@ 0x1170
 800cf96:	f892 3802 	ldrb.w	r3, [r2, #2050]	@ 0x802
 800cf9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cf9e:	f882 3802 	strb.w	r3, [r2, #2050]	@ 0x802
 800cfa2:	2324      	movs	r3, #36	@ 0x24
 800cfa4:	fb03 4305 	mla	r3, r3, r5, r4
 800cfa8:	5c59      	ldrb	r1, [r3, r1]
 800cfaa:	f882 180a 	strb.w	r1, [r2, #2058]	@ 0x80a
 800cfae:	f241 1171 	movw	r1, #4465	@ 0x1171
 800cfb2:	5c5b      	ldrb	r3, [r3, r1]
 800cfb4:	f882 3829 	strb.w	r3, [r2, #2089]	@ 0x829
 800cfb8:	2128      	movs	r1, #40	@ 0x28
 800cfba:	2300      	movs	r3, #0
 800cfbc:	fb01 4405 	mla	r4, r1, r5, r4
 800cfc0:	f882 3806 	strb.w	r3, [r2, #2054]	@ 0x806
 800cfc4:	f894 1bea 	ldrb.w	r1, [r4, #3050]	@ 0xbea
 800cfc8:	f882 1812 	strb.w	r1, [r2, #2066]	@ 0x812
 800cfcc:	f882 380e 	strb.w	r3, [r2, #2062]	@ 0x80e
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	603b      	str	r3, [r7, #0]
 800cfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800cfdc <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>:
 800cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	b089      	sub	sp, #36	@ 0x24
 800cfe2:	f8df b150 	ldr.w	fp, [pc, #336]	@ 800d134 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x158>
 800cfe6:	9205      	str	r2, [sp, #20]
 800cfe8:	4a4f      	ldr	r2, [pc, #316]	@ (800d128 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x14c>)
 800cfea:	4699      	mov	r9, r3
 800cfec:	f8db 3000 	ldr.w	r3, [fp]
 800cff0:	6013      	str	r3, [r2, #0]
 800cff2:	4688      	mov	r8, r1
 800cff4:	f500 53ba 	add.w	r3, r0, #5952	@ 0x1740
 800cff8:	f500 51bb 	add.w	r1, r0, #5984	@ 0x1760
 800cffc:	4604      	mov	r4, r0
 800cffe:	331e      	adds	r3, #30
 800d000:	3102      	adds	r1, #2
 800d002:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d006:	f803 0b01 	strb.w	r0, [r3], #1
 800d00a:	428b      	cmp	r3, r1
 800d00c:	d1f9      	bne.n	800d002 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x26>
 800d00e:	f504 53c1 	add.w	r3, r4, #6176	@ 0x1820
 800d012:	f504 52c1 	add.w	r2, r4, #6176	@ 0x1820
 800d016:	4944      	ldr	r1, [pc, #272]	@ (800d128 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x14c>)
 800d018:	3303      	adds	r3, #3
 800d01a:	3207      	adds	r2, #7
 800d01c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d020:	f803 0b01 	strb.w	r0, [r3], #1
 800d024:	4293      	cmp	r3, r2
 800d026:	d1f9      	bne.n	800d01c <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x40>
 800d028:	f504 5ac0 	add.w	sl, r4, #6144	@ 0x1800
 800d02c:	f604 36fc 	addw	r6, r4, #3068	@ 0xbfc
 800d030:	2700      	movs	r7, #0
 800d032:	f10a 0a05 	add.w	sl, sl, #5
 800d036:	4639      	mov	r1, r7
 800d038:	3701      	adds	r7, #1
 800d03a:	f1b8 0f00 	cmp.w	r8, #0
 800d03e:	d001      	beq.n	800d044 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x68>
 800d040:	45b8      	cmp	r8, r7
 800d042:	d165      	bne.n	800d110 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x134>
 800d044:	f504 53c0 	add.w	r3, r4, #6144	@ 0x1800
 800d048:	3301      	adds	r3, #1
 800d04a:	2200      	movs	r2, #0
 800d04c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d050:	4553      	cmp	r3, sl
 800d052:	731a      	strb	r2, [r3, #12]
 800d054:	741a      	strb	r2, [r3, #16]
 800d056:	d1f9      	bne.n	800d04c <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x70>
 800d058:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 800d05c:	f816 3c11 	ldrb.w	r3, [r6, #-17]
 800d060:	f885 3766 	strb.w	r3, [r5, #1894]	@ 0x766
 800d064:	f816 3c10 	ldrb.w	r3, [r6, #-16]
 800d068:	f885 3767 	strb.w	r3, [r5, #1895]	@ 0x767
 800d06c:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800d070:	4630      	mov	r0, r6
 800d072:	f885 7827 	strb.w	r7, [r5, #2087]	@ 0x827
 800d076:	f1b8 0f00 	cmp.w	r8, #0
 800d07a:	d10c      	bne.n	800d096 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xba>
 800d07c:	f1b9 0f00 	cmp.w	r9, #0
 800d080:	d009      	beq.n	800d096 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xba>
 800d082:	f836 3c14 	ldrh.w	r3, [r6, #-20]
 800d086:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d840      	bhi.n	800d110 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x134>
 800d08e:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800d092:	429a      	cmp	r2, r3
 800d094:	d33c      	bcc.n	800d110 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x134>
 800d096:	f504 53bb 	add.w	r3, r4, #5984	@ 0x1760
 800d09a:	330e      	adds	r3, #14
 800d09c:	f106 0212 	add.w	r2, r6, #18
 800d0a0:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d0a4:	f803 cb01 	strb.w	ip, [r3], #1
 800d0a8:	4290      	cmp	r0, r2
 800d0aa:	d1f9      	bne.n	800d0a0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xc4>
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	ab06      	add	r3, sp, #24
 800d0b0:	aa07      	add	r2, sp, #28
 800d0b2:	f7ff ff4b 	bl	800cf4c <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)>
 800d0b6:	f8d4 0bdc 	ldr.w	r0, [r4, #3036]	@ 0xbdc
 800d0ba:	b128      	cbz	r0, 800d0c8 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xec>
 800d0bc:	6803      	ldr	r3, [r0, #0]
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	4798      	blx	r3
 800d0c2:	ba40      	rev16	r0, r0
 800d0c4:	f8a5 0836 	strh.w	r0, [r5, #2102]	@ 0x836
 800d0c8:	9b06      	ldr	r3, [sp, #24]
 800d0ca:	f885 3801 	strb.w	r3, [r5, #2049]	@ 0x801
 800d0ce:	f8d5 30f8 	ldr.w	r3, [r5, #248]	@ 0xf8
 800d0d2:	4a16      	ldr	r2, [pc, #88]	@ (800d12c <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x150>)
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	f8c5 30f8 	str.w	r3, [r5, #248]	@ 0xf8
 800d0da:	9202      	str	r2, [sp, #8]
 800d0dc:	2208      	movs	r2, #8
 800d0de:	e9cd 3200 	strd	r3, r2, [sp]
 800d0e2:	2140      	movs	r1, #64	@ 0x40
 800d0e4:	f895 3138 	ldrb.w	r3, [r5, #312]	@ 0x138
 800d0e8:	4a11      	ldr	r2, [pc, #68]	@ (800d130 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x154>)
 800d0ea:	f504 50be 	add.w	r0, r4, #6080	@ 0x17c0
 800d0ee:	f00d fdc3 	bl	801ac78 <snprintf>
 800d0f2:	f8db 3000 	ldr.w	r3, [fp]
 800d0f6:	f8d4 0bc4 	ldr.w	r0, [r4, #3012]	@ 0xbc4
 800d0fa:	f504 51ba 	add.w	r1, r4, #5952	@ 0x1740
 800d0fe:	3114      	adds	r1, #20
 800d100:	b133      	cbz	r3, 800d110 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x134>
 800d102:	f641 1336 	movw	r3, #6454	@ 0x1936
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	22ef      	movs	r2, #239	@ 0xef
 800d10a:	9b05      	ldr	r3, [sp, #20]
 800d10c:	f008 fb84 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800d110:	2f20      	cmp	r7, #32
 800d112:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800d116:	d18e      	bne.n	800d036 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x5a>
 800d118:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800d11c:	2300      	movs	r3, #0
 800d11e:	f884 313f 	strb.w	r3, [r4, #319]	@ 0x13f
 800d122:	b009      	add	sp, #36	@ 0x24
 800d124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d128:	2000c6d4 	ldrdcs	ip, [r0], -r4
 800d12c:	0801bc04 	stmdaeq	r1, {r2, sl, fp, ip, sp, pc}
 800d130:	0801bbee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, sp, pc}
 800d134:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800d138 <ArtNetNode::HandlePoll()>:
 800d138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d13a:	f8d0 1bc8 	ldr.w	r1, [r0, #3016]	@ 0xbc8
 800d13e:	7b0a      	ldrb	r2, [r1, #12]
 800d140:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800d144:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800d148:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
 800d14c:	7b0a      	ldrb	r2, [r1, #12]
 800d14e:	f012 0204 	ands.w	r2, r2, #4
 800d152:	d04c      	beq.n	800d1ee <ArtNetNode::HandlePoll()+0xb6>
 800d154:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
 800d158:	f893 513c 	ldrb.w	r5, [r3, #316]	@ 0x13c
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 213b 	strb.w	r2, [r3, #315]	@ 0x13b
 800d162:	b97c      	cbnz	r4, 800d184 <ArtNetNode::HandlePoll()+0x4c>
 800d164:	f8d0 2bcc 	ldr.w	r2, [r0, #3020]	@ 0xbcc
 800d168:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800d16c:	b1bd      	cbz	r5, 800d19e <ArtNetNode::HandlePoll()+0x66>
 800d16e:	7b4a      	ldrb	r2, [r1, #13]
 800d170:	f893 4145 	ldrb.w	r4, [r3, #325]	@ 0x145
 800d174:	42a2      	cmp	r2, r4
 800d176:	bf28      	it	cs
 800d178:	4622      	movcs	r2, r4
 800d17a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 800d17e:	4a1e      	ldr	r2, [pc, #120]	@ (800d1f8 <ArtNetNode::HandlePoll()+0xc0>)
 800d180:	68d2      	ldr	r2, [r2, #12]
 800d182:	e014      	b.n	800d1ae <ArtNetNode::HandlePoll()+0x76>
 800d184:	2d00      	cmp	r5, #0
 800d186:	d1f2      	bne.n	800d16e <ArtNetNode::HandlePoll()+0x36>
 800d188:	f8d0 5bcc 	ldr.w	r5, [r0, #3020]	@ 0xbcc
 800d18c:	42ac      	cmp	r4, r5
 800d18e:	d006      	beq.n	800d19e <ArtNetNode::HandlePoll()+0x66>
 800d190:	4c19      	ldr	r4, [pc, #100]	@ (800d1f8 <ArtNetNode::HandlePoll()+0xc0>)
 800d192:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 800d196:	68e4      	ldr	r4, [r4, #12]
 800d198:	f8c3 40f0 	str.w	r4, [r3, #240]	@ 0xf0
 800d19c:	e7e7      	b.n	800d16e <ArtNetNode::HandlePoll()+0x36>
 800d19e:	7b4a      	ldrb	r2, [r1, #13]
 800d1a0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 800d1a4:	7b0a      	ldrb	r2, [r1, #12]
 800d1a6:	0712      	lsls	r2, r2, #28
 800d1a8:	d5e9      	bpl.n	800d17e <ArtNetNode::HandlePoll()+0x46>
 800d1aa:	f8d0 2bcc 	ldr.w	r2, [r0, #3020]	@ 0xbcc
 800d1ae:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800d1b2:	7b0b      	ldrb	r3, [r1, #12]
 800d1b4:	f013 0301 	ands.w	r3, r3, #1
 800d1b8:	bf1a      	itte	ne
 800d1ba:	7bcc      	ldrbne	r4, [r1, #15]
 800d1bc:	7c4b      	ldrbne	r3, [r1, #17]
 800d1be:	f647 74ff 	movweq	r4, #32767	@ 0x7fff
 800d1c2:	f241 1208 	movw	r2, #4360	@ 0x1108
 800d1c6:	f241 1538 	movw	r5, #4408	@ 0x1138
 800d1ca:	f1a0 060c 	sub.w	r6, r0, #12
 800d1ce:	42aa      	cmp	r2, r5
 800d1d0:	d00c      	beq.n	800d1ec <ArtNetNode::HandlePoll()+0xb4>
 800d1d2:	f102 010c 	add.w	r1, r2, #12
 800d1d6:	5877      	ldr	r7, [r6, r1]
 800d1d8:	b967      	cbnz	r7, 800d1f4 <ArtNetNode::HandlePoll()+0xbc>
 800d1da:	4d08      	ldr	r5, [pc, #32]	@ (800d1fc <ArtNetNode::HandlePoll()+0xc4>)
 800d1dc:	682d      	ldr	r5, [r5, #0]
 800d1de:	5085      	str	r5, [r0, r2]
 800d1e0:	1881      	adds	r1, r0, r2
 800d1e2:	f8d0 2bcc 	ldr.w	r2, [r0, #3020]	@ 0xbcc
 800d1e6:	604a      	str	r2, [r1, #4]
 800d1e8:	810c      	strh	r4, [r1, #8]
 800d1ea:	814b      	strh	r3, [r1, #10]
 800d1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ee:	f883 213b 	strb.w	r2, [r3, #315]	@ 0x13b
 800d1f2:	e7dc      	b.n	800d1ae <ArtNetNode::HandlePoll()+0x76>
 800d1f4:	460a      	mov	r2, r1
 800d1f6:	e7ea      	b.n	800d1ce <ArtNetNode::HandlePoll()+0x96>
 800d1f8:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800d1fc:	2001a628 	andcs	sl, r1, r8, lsr #12

0800d200 <ArtNetNode::HandleSync()>:
 800d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d204:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 800d208:	4604      	mov	r4, r0
 800d20a:	f896 313d 	ldrb.w	r3, [r6, #317]	@ 0x13d
 800d20e:	b923      	cbnz	r3, 800d21a <ArtNetNode::HandleSync()+0x1a>
 800d210:	2301      	movs	r3, #1
 800d212:	f886 313d 	strb.w	r3, [r6, #317]	@ 0x13d
 800d216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21a:	f500 578b 	add.w	r7, r0, #4448	@ 0x1160
 800d21e:	2500      	movs	r5, #0
 800d220:	3714      	adds	r7, #20
 800d222:	f04f 0824 	mov.w	r8, #36	@ 0x24
 800d226:	fb08 f305 	mul.w	r3, r8, r5
 800d22a:	5cfb      	ldrb	r3, [r7, r3]
 800d22c:	b12b      	cbz	r3, 800d23a <ArtNetNode::HandleSync()+0x3a>
 800d22e:	f8d4 0bdc 	ldr.w	r0, [r4, #3036]	@ 0xbdc
 800d232:	6803      	ldr	r3, [r0, #0]
 800d234:	4629      	mov	r1, r5
 800d236:	695b      	ldr	r3, [r3, #20]
 800d238:	4798      	blx	r3
 800d23a:	3501      	adds	r5, #1
 800d23c:	2d20      	cmp	r5, #32
 800d23e:	d1f2      	bne.n	800d226 <ArtNetNode::HandleSync()+0x26>
 800d240:	f8d4 0bdc 	ldr.w	r0, [r4, #3036]	@ 0xbdc
 800d244:	6803      	ldr	r3, [r0, #0]
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	4798      	blx	r3
 800d24a:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 800d24e:	f504 54ae 	add.w	r4, r4, #5568	@ 0x15c0
 800d252:	3314      	adds	r3, #20
 800d254:	3414      	adds	r4, #20
 800d256:	2100      	movs	r1, #0
 800d258:	2201      	movs	r2, #1
 800d25a:	42a3      	cmp	r3, r4
 800d25c:	d0db      	beq.n	800d216 <ArtNetNode::HandleSync()+0x16>
 800d25e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d262:	b130      	cbz	r0, 800d272 <ArtNetNode::HandleSync()+0x72>
 800d264:	7fd8      	ldrb	r0, [r3, #31]
 800d266:	f883 1020 	strb.w	r1, [r3, #32]
 800d26a:	b910      	cbnz	r0, 800d272 <ArtNetNode::HandleSync()+0x72>
 800d26c:	77da      	strb	r2, [r3, #31]
 800d26e:	f886 213f 	strb.w	r2, [r6, #319]	@ 0x13f
 800d272:	3324      	adds	r3, #36	@ 0x24
 800d274:	e7f1      	b.n	800d25a <ArtNetNode::HandleSync()+0x5a>

0800d276 <ArtNetNode::HandleTimeSync()>:
 800d276:	4770      	bx	lr

0800d278 <ArtNetNode::Print()>:
 800d278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	4a2d      	ldr	r2, [pc, #180]	@ (800d334 <ArtNetNode::Print()+0xbc>)
 800d27e:	4604      	mov	r4, r0
 800d280:	7853      	ldrb	r3, [r2, #1]
 800d282:	482d      	ldr	r0, [pc, #180]	@ (800d338 <ArtNetNode::Print()+0xc0>)
 800d284:	7812      	ldrb	r2, [r2, #0]
 800d286:	2104      	movs	r1, #4
 800d288:	f504 5880 	add.w	r8, r4, #4096	@ 0x1000
 800d28c:	f00d fccc 	bl	801ac28 <printf>
 800d290:	482a      	ldr	r0, [pc, #168]	@ (800d33c <ArtNetNode::Print()+0xc4>)
 800d292:	f504 51bc 	add.w	r1, r4, #6016	@ 0x1780
 800d296:	f00d fcc7 	bl	801ac28 <printf>
 800d29a:	f898 3143 	ldrb.w	r3, [r8, #323]	@ 0x143
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d043      	beq.n	800d32a <ArtNetNode::Print()+0xb2>
 800d2a2:	4827      	ldr	r0, [pc, #156]	@ (800d340 <ArtNetNode::Print()+0xc8>)
 800d2a4:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 800d360 <ArtNetNode::Print()+0xe8>
 800d2a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	@ 800d364 <ArtNetNode::Print()+0xec>
 800d2ac:	f8df b0b8 	ldr.w	fp, [pc, #184]	@ 800d368 <ArtNetNode::Print()+0xf0>
 800d2b0:	f00d fcba 	bl	801ac28 <printf>
 800d2b4:	f504 558b 	add.w	r5, r4, #4448	@ 0x1160
 800d2b8:	4626      	mov	r6, r4
 800d2ba:	3510      	adds	r5, #16
 800d2bc:	2700      	movs	r7, #0
 800d2be:	f8d6 3bf0 	ldr.w	r3, [r6, #3056]	@ 0xbf0
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d121      	bne.n	800d30a <ArtNetNode::Print()+0x92>
 800d2c6:	782b      	ldrb	r3, [r5, #0]
 800d2c8:	f8b6 2be8 	ldrh.w	r2, [r6, #3048]	@ 0xbe8
 800d2cc:	f013 0f02 	tst.w	r3, #2
 800d2d0:	bf14      	ite	ne
 800d2d2:	464b      	movne	r3, r9
 800d2d4:	4653      	moveq	r3, sl
 800d2d6:	4639      	mov	r1, r7
 800d2d8:	4658      	mov	r0, fp
 800d2da:	f00d fca5 	bl	801ac28 <printf>
 800d2de:	4a19      	ldr	r2, [pc, #100]	@ (800d344 <ArtNetNode::Print()+0xcc>)
 800d2e0:	4b19      	ldr	r3, [pc, #100]	@ (800d348 <ArtNetNode::Print()+0xd0>)
 800d2e2:	f8d6 1bf4 	ldr.w	r1, [r6, #3060]	@ 0xbf4
 800d2e6:	4819      	ldr	r0, [pc, #100]	@ (800d34c <ArtNetNode::Print()+0xd4>)
 800d2e8:	2900      	cmp	r1, #0
 800d2ea:	bf14      	ite	ne
 800d2ec:	4611      	movne	r1, r2
 800d2ee:	4619      	moveq	r1, r3
 800d2f0:	f00d fc9a 	bl	801ac28 <printf>
 800d2f4:	f995 1001 	ldrsb.w	r1, [r5, #1]
 800d2f8:	4a15      	ldr	r2, [pc, #84]	@ (800d350 <ArtNetNode::Print()+0xd8>)
 800d2fa:	4b16      	ldr	r3, [pc, #88]	@ (800d354 <ArtNetNode::Print()+0xdc>)
 800d2fc:	4816      	ldr	r0, [pc, #88]	@ (800d358 <ArtNetNode::Print()+0xe0>)
 800d2fe:	ea12 0121 	ands.w	r1, r2, r1, asr #32
 800d302:	bf38      	it	cc
 800d304:	4619      	movcc	r1, r3
 800d306:	f00d fc8f 	bl	801ac28 <printf>
 800d30a:	3701      	adds	r7, #1
 800d30c:	2f20      	cmp	r7, #32
 800d30e:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800d312:	f105 0524 	add.w	r5, r5, #36	@ 0x24
 800d316:	d1d2      	bne.n	800d2be <ArtNetNode::Print()+0x46>
 800d318:	f898 3143 	ldrb.w	r3, [r8, #323]	@ 0x143
 800d31c:	b12b      	cbz	r3, 800d32a <ArtNetNode::Print()+0xb2>
 800d31e:	f898 30ec 	ldrb.w	r3, [r8, #236]	@ 0xec
 800d322:	b113      	cbz	r3, 800d32a <ArtNetNode::Print()+0xb2>
 800d324:	480d      	ldr	r0, [pc, #52]	@ (800d35c <ArtNetNode::Print()+0xe4>)
 800d326:	f00d fc7f 	bl	801ac28 <printf>
 800d32a:	4620      	mov	r0, r4
 800d32c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	f001 bb90 	b.w	800ea54 <E131Bridge::Print()>
 800d334:	0801e9ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, fp, sp, lr, pc}
 800d338:	0801bc2a 	stmdaeq	r1, {r1, r3, r5, sl, fp, ip, sp, pc}
 800d33c:	0801bc3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, fp, ip, sp, pc}
 800d340:	0801bc4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, sl, fp, ip, sp, pc}
 800d344:	0801bc1d 	stmdaeq	r1, {r0, r2, r3, r4, sl, fp, ip, sp, pc}
 800d348:	0801bc15 	stmdaeq	r1, {r0, r2, r4, sl, fp, ip, sp, pc}
 800d34c:	0801b82d 	stmdaeq	r1, {r0, r2, r3, r5, fp, ip, sp, pc}
 800d350:	0801bc26 	stmdaeq	r1, {r1, r2, r5, sl, fp, ip, sp, pc}
 800d354:	0801bc22 	stmdaeq	r1, {r1, r5, sl, fp, ip, sp, pc}
 800d358:	0801c276 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, lr, pc}
 800d35c:	0801bc6c 	stmdaeq	r1, {r2, r3, r5, r6, sl, fp, ip, sp, pc}
 800d360:	0801bc11 	stmdaeq	r1, {r0, r4, sl, fp, ip, sp, pc}
 800d364:	0801bc0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, ip, sp, pc}
 800d368:	0801bc58 	stmdaeq	r1, {r3, r4, r6, sl, fp, ip, sp, pc}

0800d36c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>:
 800d36c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d36e:	88c6      	ldrh	r6, [r0, #6]
 800d370:	8885      	ldrh	r5, [r0, #4]
 800d372:	42ae      	cmp	r6, r5
 800d374:	d216      	bcs.n	800d3a4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x38>
 800d376:	4604      	mov	r4, r0
 800d378:	6800      	ldr	r0, [r0, #0]
 800d37a:	1bad      	subs	r5, r5, r6
 800d37c:	4430      	add	r0, r6
 800d37e:	7a26      	ldrb	r6, [r4, #8]
 800d380:	b923      	cbnz	r3, 800d38c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x20>
 800d382:	b926      	cbnz	r6, 800d38e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x22>
 800d384:	9200      	str	r2, [sp, #0]
 800d386:	460b      	mov	r3, r1
 800d388:	4a09      	ldr	r2, [pc, #36]	@ (800d3b0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x44>)
 800d38a:	e003      	b.n	800d394 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800d38c:	b166      	cbz	r6, 800d3a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x3c>
 800d38e:	9200      	str	r2, [sp, #0]
 800d390:	4a08      	ldr	r2, [pc, #32]	@ (800d3b4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x48>)
 800d392:	460b      	mov	r3, r1
 800d394:	4629      	mov	r1, r5
 800d396:	f00d fc6f 	bl	801ac78 <snprintf>
 800d39a:	4285      	cmp	r5, r0
 800d39c:	bfa2      	ittt	ge
 800d39e:	88e3      	ldrhge	r3, [r4, #6]
 800d3a0:	181b      	addge	r3, r3, r0
 800d3a2:	80e3      	strhge	r3, [r4, #6]
 800d3a4:	b002      	add	sp, #8
 800d3a6:	bd70      	pop	{r4, r5, r6, pc}
 800d3a8:	9200      	str	r2, [sp, #0]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	4a02      	ldr	r2, [pc, #8]	@ (800d3b8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x4c>)
 800d3ae:	e7f1      	b.n	800d394 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800d3b0:	0801b98c 	stmdaeq	r1, {r2, r3, r7, r8, fp, ip, sp, pc}
 800d3b4:	0801b981 	stmdaeq	r1, {r0, r7, r8, fp, ip, sp, pc}
 800d3b8:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800d3bc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800d3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3be:	460b      	mov	r3, r1
 800d3c0:	8885      	ldrh	r5, [r0, #4]
 800d3c2:	88c1      	ldrh	r1, [r0, #6]
 800d3c4:	42a9      	cmp	r1, r5
 800d3c6:	d214      	bcs.n	800d3f2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	6800      	ldr	r0, [r0, #0]
 800d3cc:	1a6d      	subs	r5, r5, r1
 800d3ce:	4408      	add	r0, r1
 800d3d0:	7a21      	ldrb	r1, [r4, #8]
 800d3d2:	b91a      	cbnz	r2, 800d3dc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800d3d4:	b919      	cbnz	r1, 800d3de <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800d3d6:	4a0a      	ldr	r2, [pc, #40]	@ (800d400 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800d3d8:	9100      	str	r1, [sp, #0]
 800d3da:	e002      	b.n	800d3e2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d3dc:	b159      	cbz	r1, 800d3f6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800d3de:	9200      	str	r2, [sp, #0]
 800d3e0:	4a08      	ldr	r2, [pc, #32]	@ (800d404 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f00d fc48 	bl	801ac78 <snprintf>
 800d3e8:	4285      	cmp	r5, r0
 800d3ea:	bfa2      	ittt	ge
 800d3ec:	88e3      	ldrhge	r3, [r4, #6]
 800d3ee:	181b      	addge	r3, r3, r0
 800d3f0:	80e3      	strhge	r3, [r4, #6]
 800d3f2:	b003      	add	sp, #12
 800d3f4:	bd30      	pop	{r4, r5, pc}
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	9200      	str	r2, [sp, #0]
 800d3fa:	4a03      	ldr	r2, [pc, #12]	@ (800d408 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800d3fc:	e7f1      	b.n	800d3e2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d3fe:	bf00      	nop
 800d400:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 800d404:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 800d408:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}

0800d40c <ArtNetParamsStore::Copy(artnetparams::Params*)>:
 800d40c:	b507      	push	{r0, r1, r2, lr}
 800d40e:	2300      	movs	r3, #0
 800d410:	2101      	movs	r1, #1
 800d412:	e9cd 3100 	strd	r3, r1, [sp]
 800d416:	4602      	mov	r2, r0
 800d418:	4804      	ldr	r0, [pc, #16]	@ (800d42c <ArtNetParamsStore::Copy(artnetparams::Params*)+0x20>)
 800d41a:	23dc      	movs	r3, #220	@ 0xdc
 800d41c:	6800      	ldr	r0, [r0, #0]
 800d41e:	2119      	movs	r1, #25
 800d420:	f009 fec8 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800d424:	b003      	add	sp, #12
 800d426:	f85d fb04 	ldr.w	pc, [sp], #4
 800d42a:	bf00      	nop
 800d42c:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800d430 <ArtNetParams::ArtNetParams()>:
 800d430:	4b0f      	ldr	r3, [pc, #60]	@ (800d470 <ArtNetParams::ArtNetParams()+0x40>)
 800d432:	b570      	push	{r4, r5, r6, lr}
 800d434:	22dc      	movs	r2, #220	@ 0xdc
 800d436:	4604      	mov	r4, r0
 800d438:	2100      	movs	r1, #0
 800d43a:	681e      	ldr	r6, [r3, #0]
 800d43c:	f00d f910 	bl	801a660 <memset>
 800d440:	2301      	movs	r3, #1
 800d442:	7163      	strb	r3, [r4, #5]
 800d444:	2302      	movs	r3, #2
 800d446:	71e3      	strb	r3, [r4, #7]
 800d448:	2303      	movs	r3, #3
 800d44a:	7263      	strb	r3, [r4, #9]
 800d44c:	2304      	movs	r3, #4
 800d44e:	2500      	movs	r5, #0
 800d450:	72e3      	strb	r3, [r4, #11]
 800d452:	2355      	movs	r3, #85	@ 0x55
 800d454:	4630      	mov	r0, r6
 800d456:	71a5      	strb	r5, [r4, #6]
 800d458:	7225      	strb	r5, [r4, #8]
 800d45a:	72a5      	strb	r5, [r4, #10]
 800d45c:	7325      	strb	r5, [r4, #12]
 800d45e:	7363      	strb	r3, [r4, #13]
 800d460:	73a5      	strb	r5, [r4, #14]
 800d462:	f104 0113 	add.w	r1, r4, #19
 800d466:	f7fe fbbd 	bl	800bbe4 <ArtNetNode::GetLongNameDefault(char*)>
 800d46a:	74a5      	strb	r5, [r4, #18]
 800d46c:	4620      	mov	r0, r4
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	2000064c 	andcs	r0, r0, ip, asr #12

0800d474 <ArtNetParams::Load()>:
 800d474:	b508      	push	{r3, lr}
 800d476:	2200      	movs	r2, #0
 800d478:	7002      	strb	r2, [r0, #0]
 800d47a:	7042      	strb	r2, [r0, #1]
 800d47c:	7082      	strb	r2, [r0, #2]
 800d47e:	70c2      	strb	r2, [r0, #3]
 800d480:	f7ff ffc4 	bl	800d40c <ArtNetParamsStore::Copy(artnetparams::Params*)>
 800d484:	2001      	movs	r0, #1
 800d486:	bd08      	pop	{r3, pc}

0800d488 <ArtNetParams::Load(char const*, unsigned long)>:
 800d488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d48a:	2500      	movs	r5, #0
 800d48c:	b087      	sub	sp, #28
 800d48e:	4604      	mov	r4, r0
 800d490:	460e      	mov	r6, r1
 800d492:	4617      	mov	r7, r2
 800d494:	7005      	strb	r5, [r0, #0]
 800d496:	7045      	strb	r5, [r0, #1]
 800d498:	7085      	strb	r5, [r0, #2]
 800d49a:	70c5      	strb	r5, [r0, #3]
 800d49c:	4602      	mov	r2, r0
 800d49e:	490c      	ldr	r1, [pc, #48]	@ (800d4d0 <ArtNetParams::Load(char const*, unsigned long)+0x48>)
 800d4a0:	a804      	add	r0, sp, #16
 800d4a2:	f00a f961 	bl	8017768 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d4a6:	463a      	mov	r2, r7
 800d4a8:	4631      	mov	r1, r6
 800d4aa:	a804      	add	r0, sp, #16
 800d4ac:	f00a f960 	bl	8017770 <ReadConfigFile::Read(char const*, unsigned int)>
 800d4b0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800d4b4:	23dc      	movs	r3, #220	@ 0xdc
 800d4b6:	4807      	ldr	r0, [pc, #28]	@ (800d4d4 <ArtNetParams::Load(char const*, unsigned long)+0x4c>)
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	462a      	mov	r2, r5
 800d4bc:	4623      	mov	r3, r4
 800d4be:	2119      	movs	r1, #25
 800d4c0:	6800      	ldr	r0, [r0, #0]
 800d4c2:	f009 fe51 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d4c6:	a804      	add	r0, sp, #16
 800d4c8:	f00a f951 	bl	801776e <ReadConfigFile::~ReadConfigFile()>
 800d4cc:	b007      	add	sp, #28
 800d4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4d0:	0800d875 	stmdaeq	r0, {r0, r2, r4, r5, r6, fp, ip, lr, pc}
 800d4d4:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800d4d8 <ArtNetParams::SetBool(unsigned char, unsigned long)>:
 800d4d8:	6803      	ldr	r3, [r0, #0]
 800d4da:	b111      	cbz	r1, 800d4e2 <ArtNetParams::SetBool(unsigned char, unsigned long)+0xa>
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	6003      	str	r3, [r0, #0]
 800d4e0:	4770      	bx	lr
 800d4e2:	ea23 0302 	bic.w	r3, r3, r2
 800d4e6:	e7fa      	b.n	800d4de <ArtNetParams::SetBool(unsigned char, unsigned long)+0x6>

0800d4e8 <ArtNetParams::callbackFunction(char const*)>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	f8df b338 	ldr.w	fp, [pc, #824]	@ 800d828 <ArtNetParams::callbackFunction(char const*)+0x340>
 800d4f0:	b093      	sub	sp, #76	@ 0x4c
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	460e      	mov	r6, r1
 800d4f6:	f100 0853 	add.w	r8, r0, #83	@ 0x53
 800d4fa:	2500      	movs	r5, #0
 800d4fc:	466a      	mov	r2, sp
 800d4fe:	4659      	mov	r1, fp
 800d500:	4630      	mov	r0, r6
 800d502:	f00a fa16 	bl	8017932 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d506:	b9c0      	cbnz	r0, 800d53a <ArtNetParams::callbackFunction(char const*)+0x52>
 800d508:	f8bd 1000 	ldrh.w	r1, [sp]
 800d50c:	b161      	cbz	r1, 800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d50e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800d512:	f8a3 1005 	strh.w	r1, [r3, #5]
 800d516:	2302      	movs	r3, #2
 800d518:	40ab      	lsls	r3, r5
 800d51a:	3501      	adds	r5, #1
 800d51c:	b2ad      	uxth	r5, r5
 800d51e:	42a9      	cmp	r1, r5
 800d520:	6822      	ldr	r2, [r4, #0]
 800d522:	d006      	beq.n	800d532 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800d524:	4313      	orrs	r3, r2
 800d526:	6023      	str	r3, [r4, #0]
 800d528:	b013      	add	sp, #76	@ 0x4c
 800d52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52e:	464d      	mov	r5, r9
 800d530:	e7e4      	b.n	800d4fc <ArtNetParams::callbackFunction(char const*)+0x14>
 800d532:	ea22 0203 	bic.w	r2, r2, r3
 800d536:	6022      	str	r2, [r4, #0]
 800d538:	e7f6      	b.n	800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d53a:	49af      	ldr	r1, [pc, #700]	@ (800d7f8 <ArtNetParams::callbackFunction(char const*)+0x310>)
 800d53c:	2712      	movs	r7, #18
 800d53e:	2307      	movs	r3, #7
 800d540:	436f      	muls	r7, r5
 800d542:	9301      	str	r3, [sp, #4]
 800d544:	aa02      	add	r2, sp, #8
 800d546:	ab01      	add	r3, sp, #4
 800d548:	4439      	add	r1, r7
 800d54a:	4630      	mov	r0, r6
 800d54c:	f00a f946 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800d550:	2800      	cmp	r0, #0
 800d552:	d15f      	bne.n	800d614 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800d554:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d558:	f043 0320 	orr.w	r3, r3, #32
 800d55c:	2b69      	cmp	r3, #105	@ 0x69
 800d55e:	d12e      	bne.n	800d5be <ArtNetParams::callbackFunction(char const*)+0xd6>
 800d560:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d564:	f043 0320 	orr.w	r3, r3, #32
 800d568:	2b6e      	cmp	r3, #110	@ 0x6e
 800d56a:	d151      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d56c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d570:	f043 0320 	orr.w	r3, r3, #32
 800d574:	2b70      	cmp	r3, #112	@ 0x70
 800d576:	d14b      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d578:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d57c:	f043 0320 	orr.w	r3, r3, #32
 800d580:	2b75      	cmp	r3, #117	@ 0x75
 800d582:	d145      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d584:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d588:	f043 0320 	orr.w	r3, r3, #32
 800d58c:	3b74      	subs	r3, #116	@ 0x74
 800d58e:	bf18      	it	ne
 800d590:	2301      	movne	r3, #1
 800d592:	2b02      	cmp	r3, #2
 800d594:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800d598:	f8b4 200d 	ldrh.w	r2, [r4, #13]
 800d59c:	f04f 0103 	mov.w	r1, #3
 800d5a0:	fa01 f105 	lsl.w	r1, r1, r5
 800d5a4:	bf18      	it	ne
 800d5a6:	2301      	movne	r3, #1
 800d5a8:	ea22 0201 	bic.w	r2, r2, r1
 800d5ac:	bf0b      	itete	eq
 800d5ae:	40ab      	lsleq	r3, r5
 800d5b0:	fa03 f505 	lslne.w	r5, r3, r5
 800d5b4:	431a      	orreq	r2, r3
 800d5b6:	432a      	orrne	r2, r5
 800d5b8:	f8a4 200d 	strh.w	r2, [r4, #13]
 800d5bc:	e7b4      	b.n	800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d5be:	2b64      	cmp	r3, #100	@ 0x64
 800d5c0:	d126      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d5c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d5c6:	f043 0320 	orr.w	r3, r3, #32
 800d5ca:	2b69      	cmp	r3, #105	@ 0x69
 800d5cc:	d120      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d5ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d5d2:	f043 0320 	orr.w	r3, r3, #32
 800d5d6:	2b73      	cmp	r3, #115	@ 0x73
 800d5d8:	d11a      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d5da:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d5de:	f043 0320 	orr.w	r3, r3, #32
 800d5e2:	2b61      	cmp	r3, #97	@ 0x61
 800d5e4:	d114      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d5e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d5ea:	f043 0320 	orr.w	r3, r3, #32
 800d5ee:	2b62      	cmp	r3, #98	@ 0x62
 800d5f0:	d10e      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d5f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d5f6:	f043 0320 	orr.w	r3, r3, #32
 800d5fa:	2b6c      	cmp	r3, #108	@ 0x6c
 800d5fc:	d108      	bne.n	800d610 <ArtNetParams::callbackFunction(char const*)+0x128>
 800d5fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d602:	f043 0320 	orr.w	r3, r3, #32
 800d606:	2b65      	cmp	r3, #101	@ 0x65
 800d608:	bf0c      	ite	eq
 800d60a:	2302      	moveq	r3, #2
 800d60c:	2301      	movne	r3, #1
 800d60e:	e7c0      	b.n	800d592 <ArtNetParams::callbackFunction(char const*)+0xaa>
 800d610:	2301      	movs	r3, #1
 800d612:	e7be      	b.n	800d592 <ArtNetParams::callbackFunction(char const*)+0xaa>
 800d614:	4979      	ldr	r1, [pc, #484]	@ (800d7fc <ArtNetParams::callbackFunction(char const*)+0x314>)
 800d616:	f04f 0a03 	mov.w	sl, #3
 800d61a:	ab01      	add	r3, sp, #4
 800d61c:	aa02      	add	r2, sp, #8
 800d61e:	4439      	add	r1, r7
 800d620:	4630      	mov	r0, r6
 800d622:	f8cd a004 	str.w	sl, [sp, #4]
 800d626:	f00a f8d9 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800d62a:	b9f8      	cbnz	r0, 800d66c <ArtNetParams::callbackFunction(char const*)+0x184>
 800d62c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d630:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 800d634:	006d      	lsls	r5, r5, #1
 800d636:	f042 0220 	orr.w	r2, r2, #32
 800d63a:	fa0a fa05 	lsl.w	sl, sl, r5
 800d63e:	2a6c      	cmp	r2, #108	@ 0x6c
 800d640:	ea23 030a 	bic.w	r3, r3, sl
 800d644:	d10d      	bne.n	800d662 <ArtNetParams::callbackFunction(char const*)+0x17a>
 800d646:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800d64a:	f042 0220 	orr.w	r2, r2, #32
 800d64e:	2a74      	cmp	r2, #116	@ 0x74
 800d650:	d107      	bne.n	800d662 <ArtNetParams::callbackFunction(char const*)+0x17a>
 800d652:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800d656:	f040 0020 	orr.w	r0, r0, #32
 800d65a:	f1a0 0170 	sub.w	r1, r0, #112	@ 0x70
 800d65e:	4248      	negs	r0, r1
 800d660:	4148      	adcs	r0, r1
 800d662:	40a8      	lsls	r0, r5
 800d664:	4303      	orrs	r3, r0
 800d666:	f8a4 300f 	strh.w	r3, [r4, #15]
 800d66a:	e75d      	b.n	800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d66c:	4864      	ldr	r0, [pc, #400]	@ (800d800 <ArtNetParams::callbackFunction(char const*)+0x318>)
 800d66e:	2311      	movs	r3, #17
 800d670:	210e      	movs	r1, #14
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	fb01 0105 	mla	r1, r1, r5, r0
 800d678:	ab01      	add	r3, sp, #4
 800d67a:	4642      	mov	r2, r8
 800d67c:	4630      	mov	r0, r6
 800d67e:	f00a f8ad 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800d682:	f105 0901 	add.w	r9, r5, #1
 800d686:	bb08      	cbnz	r0, 800d6cc <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800d688:	9b01      	ldr	r3, [sp, #4]
 800d68a:	4a5e      	ldr	r2, [pc, #376]	@ (800d804 <ArtNetParams::callbackFunction(char const*)+0x31c>)
 800d68c:	4427      	add	r7, r4
 800d68e:	441f      	add	r7, r3
 800d690:	2111      	movs	r1, #17
 800d692:	f887 0053 	strb.w	r0, [r7, #83]	@ 0x53
 800d696:	464b      	mov	r3, r9
 800d698:	a802      	add	r0, sp, #8
 800d69a:	f00d faed 	bl	801ac78 <snprintf>
 800d69e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d6a2:	a902      	add	r1, sp, #8
 800d6a4:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800d6a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d001      	beq.n	800d6b4 <ArtNetParams::callbackFunction(char const*)+0x1cc>
 800d6b0:	1a9b      	subs	r3, r3, r2
 800d6b2:	e001      	b.n	800d6b8 <ArtNetParams::callbackFunction(char const*)+0x1d0>
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1f5      	bne.n	800d6a4 <ArtNetParams::callbackFunction(char const*)+0x1bc>
 800d6b8:	2280      	movs	r2, #128	@ 0x80
 800d6ba:	6821      	ldr	r1, [r4, #0]
 800d6bc:	40aa      	lsls	r2, r5
 800d6be:	b91b      	cbnz	r3, 800d6c8 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800d6c0:	ea21 0102 	bic.w	r1, r1, r2
 800d6c4:	6021      	str	r1, [r4, #0]
 800d6c6:	e72f      	b.n	800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d6c8:	430a      	orrs	r2, r1
 800d6ca:	e734      	b.n	800d536 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800d6cc:	f1b9 0f04 	cmp.w	r9, #4
 800d6d0:	f10b 0b10 	add.w	fp, fp, #16
 800d6d4:	f108 0812 	add.w	r8, r8, #18
 800d6d8:	f47f af29 	bne.w	800d52e <ArtNetParams::callbackFunction(char const*)+0x46>
 800d6dc:	2708      	movs	r7, #8
 800d6de:	494a      	ldr	r1, [pc, #296]	@ (800d808 <ArtNetParams::callbackFunction(char const*)+0x320>)
 800d6e0:	9700      	str	r7, [sp, #0]
 800d6e2:	466b      	mov	r3, sp
 800d6e4:	eb0d 0207 	add.w	r2, sp, r7
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f00a f877 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800d6ee:	bb50      	cbnz	r0, 800d746 <ArtNetParams::callbackFunction(char const*)+0x25e>
 800d6f0:	4946      	ldr	r1, [pc, #280]	@ (800d80c <ArtNetParams::callbackFunction(char const*)+0x324>)
 800d6f2:	464a      	mov	r2, r9
 800d6f4:	eb0d 0007 	add.w	r0, sp, r7
 800d6f8:	f7ff fb37 	bl	800cd6a <memcmp>
 800d6fc:	6825      	ldr	r5, [r4, #0]
 800d6fe:	b1a0      	cbz	r0, 800d72a <ArtNetParams::callbackFunction(char const*)+0x242>
 800d700:	4943      	ldr	r1, [pc, #268]	@ (800d810 <ArtNetParams::callbackFunction(char const*)+0x328>)
 800d702:	4652      	mov	r2, sl
 800d704:	eb0d 0007 	add.w	r0, sp, r7
 800d708:	f7ff fb2f 	bl	800cd6a <memcmp>
 800d70c:	b198      	cbz	r0, 800d736 <ArtNetParams::callbackFunction(char const*)+0x24e>
 800d70e:	4941      	ldr	r1, [pc, #260]	@ (800d814 <ArtNetParams::callbackFunction(char const*)+0x32c>)
 800d710:	2202      	movs	r2, #2
 800d712:	eb0d 0007 	add.w	r0, sp, r7
 800d716:	f7ff fb28 	bl	800cd6a <memcmp>
 800d71a:	b180      	cbz	r0, 800d73e <ArtNetParams::callbackFunction(char const*)+0x256>
 800d71c:	493e      	ldr	r1, [pc, #248]	@ (800d818 <ArtNetParams::callbackFunction(char const*)+0x330>)
 800d71e:	463a      	mov	r2, r7
 800d720:	eb0d 0007 	add.w	r0, sp, r7
 800d724:	f7ff fb21 	bl	800cd6a <memcmp>
 800d728:	b158      	cbz	r0, 800d742 <ArtNetParams::callbackFunction(char const*)+0x25a>
 800d72a:	f025 0520 	bic.w	r5, r5, #32
 800d72e:	2300      	movs	r3, #0
 800d730:	6025      	str	r5, [r4, #0]
 800d732:	74a3      	strb	r3, [r4, #18]
 800d734:	e6f8      	b.n	800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d736:	2301      	movs	r3, #1
 800d738:	f045 0520 	orr.w	r5, r5, #32
 800d73c:	e7f8      	b.n	800d730 <ArtNetParams::callbackFunction(char const*)+0x248>
 800d73e:	2302      	movs	r3, #2
 800d740:	e7fa      	b.n	800d738 <ArtNetParams::callbackFunction(char const*)+0x250>
 800d742:	2303      	movs	r3, #3
 800d744:	e7f8      	b.n	800d738 <ArtNetParams::callbackFunction(char const*)+0x250>
 800d746:	233f      	movs	r3, #63	@ 0x3f
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	4934      	ldr	r1, [pc, #208]	@ (800d81c <ArtNetParams::callbackFunction(char const*)+0x334>)
 800d74c:	466b      	mov	r3, sp
 800d74e:	f104 0213 	add.w	r2, r4, #19
 800d752:	4630      	mov	r0, r6
 800d754:	f00a f842 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800d758:	b9e0      	cbnz	r0, 800d794 <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800d75a:	9b00      	ldr	r3, [sp, #0]
 800d75c:	4423      	add	r3, r4
 800d75e:	a902      	add	r1, sp, #8
 800d760:	74d8      	strb	r0, [r3, #19]
 800d762:	4b2f      	ldr	r3, [pc, #188]	@ (800d820 <ArtNetParams::callbackFunction(char const*)+0x338>)
 800d764:	6818      	ldr	r0, [r3, #0]
 800d766:	f7fe fa3d 	bl	800bbe4 <ArtNetNode::GetLongNameDefault(char*)>
 800d76a:	f104 0012 	add.w	r0, r4, #18
 800d76e:	a902      	add	r1, sp, #8
 800d770:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d774:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d778:	4293      	cmp	r3, r2
 800d77a:	d001      	beq.n	800d780 <ArtNetParams::callbackFunction(char const*)+0x298>
 800d77c:	1a9b      	subs	r3, r3, r2
 800d77e:	e001      	b.n	800d784 <ArtNetParams::callbackFunction(char const*)+0x29c>
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1f5      	bne.n	800d770 <ArtNetParams::callbackFunction(char const*)+0x288>
 800d784:	6822      	ldr	r2, [r4, #0]
 800d786:	b913      	cbnz	r3, 800d78e <ArtNetParams::callbackFunction(char const*)+0x2a6>
 800d788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d78c:	e6d3      	b.n	800d536 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800d78e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d792:	e6d0      	b.n	800d536 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800d794:	4f23      	ldr	r7, [pc, #140]	@ (800d824 <ArtNetParams::callbackFunction(char const*)+0x33c>)
 800d796:	2500      	movs	r5, #0
 800d798:	ab01      	add	r3, sp, #4
 800d79a:	aa02      	add	r2, sp, #8
 800d79c:	4639      	mov	r1, r7
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d7a4:	f00a f81a 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d13f      	bne.n	800d82c <ArtNetParams::callbackFunction(char const*)+0x344>
 800d7ac:	f8b4 309c 	ldrh.w	r3, [r4, #156]	@ 0x9c
 800d7b0:	006d      	lsls	r5, r5, #1
 800d7b2:	2203      	movs	r2, #3
 800d7b4:	40aa      	lsls	r2, r5
 800d7b6:	ea23 0302 	bic.w	r3, r3, r2
 800d7ba:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d7be:	f042 0220 	orr.w	r2, r2, #32
 800d7c2:	2a73      	cmp	r2, #115	@ 0x73
 800d7c4:	d113      	bne.n	800d7ee <ArtNetParams::callbackFunction(char const*)+0x306>
 800d7c6:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800d7ca:	f042 0220 	orr.w	r2, r2, #32
 800d7ce:	2a61      	cmp	r2, #97	@ 0x61
 800d7d0:	d10d      	bne.n	800d7ee <ArtNetParams::callbackFunction(char const*)+0x306>
 800d7d2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800d7d6:	f042 0220 	orr.w	r2, r2, #32
 800d7da:	2a63      	cmp	r2, #99	@ 0x63
 800d7dc:	d107      	bne.n	800d7ee <ArtNetParams::callbackFunction(char const*)+0x306>
 800d7de:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800d7e2:	f040 0020 	orr.w	r0, r0, #32
 800d7e6:	f1a0 026e 	sub.w	r2, r0, #110	@ 0x6e
 800d7ea:	4250      	negs	r0, r2
 800d7ec:	4150      	adcs	r0, r2
 800d7ee:	40a8      	lsls	r0, r5
 800d7f0:	4303      	orrs	r3, r0
 800d7f2:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 800d7f6:	e697      	b.n	800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d7f8:	0801f2f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, ip, sp, lr, pc}
 800d7fc:	0801f33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, ip, sp, lr, pc}
 800d800:	0801f2bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, ip, sp, lr, pc}
 800d804:	0801bbc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, fp, ip, sp, pc}
 800d808:	0801f281 	stmdaeq	r1, {r0, r7, r9, ip, sp, lr, pc}
 800d80c:	0801bc88 	stmdaeq	r1, {r3, r7, sl, fp, ip, sp, pc}
 800d810:	0801bc8d 	stmdaeq	r1, {r0, r2, r3, r7, sl, fp, ip, sp, pc}
 800d814:	0801b4de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, sl, ip, sp, pc}
 800d818:	0801bc91 	stmdaeq	r1, {r0, r4, r7, sl, fp, ip, sp, pc}
 800d81c:	0801f2b2 	stmdaeq	r1, {r1, r4, r5, r7, r9, ip, sp, lr, pc}
 800d820:	2000064c 	andcs	r0, r0, ip, asr #12
 800d824:	0801e91f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, fp, sp, lr, pc}
 800d828:	0801f384 	stmdaeq	r1, {r2, r7, r8, r9, ip, sp, lr, pc}
 800d82c:	3501      	adds	r5, #1
 800d82e:	2d04      	cmp	r5, #4
 800d830:	f107 0710 	add.w	r7, r7, #16
 800d834:	d1b0      	bne.n	800d798 <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800d836:	490d      	ldr	r1, [pc, #52]	@ (800d86c <ArtNetParams::callbackFunction(char const*)+0x384>)
 800d838:	aa01      	add	r2, sp, #4
 800d83a:	4630      	mov	r0, r6
 800d83c:	f00a f8be 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d840:	b948      	cbnz	r0, 800d856 <ArtNetParams::callbackFunction(char const*)+0x36e>
 800d842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d846:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d84a:	4620      	mov	r0, r4
 800d84c:	b013      	add	sp, #76	@ 0x4c
 800d84e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d852:	f7ff be41 	b.w	800d4d8 <ArtNetParams::SetBool(unsigned char, unsigned long)>
 800d856:	4906      	ldr	r1, [pc, #24]	@ (800d870 <ArtNetParams::callbackFunction(char const*)+0x388>)
 800d858:	aa01      	add	r2, sp, #4
 800d85a:	4630      	mov	r0, r6
 800d85c:	f00a f8ae 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d860:	2800      	cmp	r0, #0
 800d862:	f47f ae61 	bne.w	800d528 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d86a:	e7ec      	b.n	800d846 <ArtNetParams::callbackFunction(char const*)+0x35e>
 800d86c:	0801e911 	stmdaeq	r1, {r0, r4, r8, fp, sp, lr, pc}
 800d870:	0801f28a 	stmdaeq	r1, {r1, r3, r7, r9, ip, sp, lr, pc}

0800d874 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800d874:	f7ff be38 	b.w	800d4e8 <ArtNetParams::callbackFunction(char const*)>

0800d878 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	4604      	mov	r4, r0
 800d87e:	b089      	sub	sp, #36	@ 0x24
 800d880:	4615      	mov	r5, r2
 800d882:	461e      	mov	r6, r3
 800d884:	2900      	cmp	r1, #0
 800d886:	f000 8081 	beq.w	800d98c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x114>
 800d88a:	22dc      	movs	r2, #220	@ 0xdc
 800d88c:	f00c fed1 	bl	801a632 <memmove>
 800d890:	462a      	mov	r2, r5
 800d892:	4625      	mov	r5, r4
 800d894:	4633      	mov	r3, r6
 800d896:	498d      	ldr	r1, [pc, #564]	@ (800dacc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x254>)
 800d898:	a805      	add	r0, sp, #20
 800d89a:	f009 fe8f 	bl	80175bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800d89e:	f855 3b13 	ldr.w	r3, [r5], #19
 800d8a2:	065b      	lsls	r3, r3, #25
 800d8a4:	d404      	bmi.n	800d8b0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x38>
 800d8a6:	4b8a      	ldr	r3, [pc, #552]	@ (800dad0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	f7fe f99a 	bl	800bbe4 <ArtNetNode::GetLongNameDefault(char*)>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	4988      	ldr	r1, [pc, #544]	@ (800dad4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x25c>)
 800d8b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d8b8:	462a      	mov	r2, r5
 800d8ba:	a805      	add	r0, sp, #20
 800d8bc:	f7ff fd56 	bl	800d36c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800d8c0:	7ca3      	ldrb	r3, [r4, #18]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d065      	beq.n	800d992 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x11a>
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d065      	beq.n	800d996 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x11e>
 800d8ca:	4a83      	ldr	r2, [pc, #524]	@ (800dad8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x260>)
 800d8cc:	4983      	ldr	r1, [pc, #524]	@ (800dadc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x264>)
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	bf18      	it	ne
 800d8d2:	460a      	movne	r2, r1
 800d8d4:	46a0      	mov	r8, r4
 800d8d6:	4982      	ldr	r1, [pc, #520]	@ (800dae0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x268>)
 800d8d8:	f858 3b53 	ldr.w	r3, [r8], #83
 800d8dc:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800db30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2b8>
 800d8e0:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 800db34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2bc>
 800d8e4:	f8df b250 	ldr.w	fp, [pc, #592]	@ 800db38 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2c0>
 800d8e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d8ec:	a805      	add	r0, sp, #20
 800d8ee:	f7ff fd3d 	bl	800d36c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800d8f2:	2500      	movs	r5, #0
 800d8f4:	f8d9 3000 	ldr.w	r3, [r9]
 800d8f8:	42ab      	cmp	r3, r5
 800d8fa:	d84e      	bhi.n	800d99a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x122>
 800d8fc:	4979      	ldr	r1, [pc, #484]	@ (800dae4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 800d8fe:	f8df 823c 	ldr.w	r8, [pc, #572]	@ 800db3c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2c4>
 800d902:	4e79      	ldr	r6, [pc, #484]	@ (800dae8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x270>)
 800d904:	4f79      	ldr	r7, [pc, #484]	@ (800daec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x274>)
 800d906:	a805      	add	r0, sp, #20
 800d908:	f009 ff14 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 800d90c:	2500      	movs	r5, #0
 800d90e:	f8d9 3000 	ldr.w	r3, [r9]
 800d912:	42ab      	cmp	r3, r5
 800d914:	f200 80b2 	bhi.w	800da7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x204>
 800d918:	4975      	ldr	r1, [pc, #468]	@ (800daf0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x278>)
 800d91a:	f8df 8224 	ldr.w	r8, [pc, #548]	@ 800db40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2c8>
 800d91e:	4e75      	ldr	r6, [pc, #468]	@ (800daf4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x27c>)
 800d920:	4f75      	ldr	r7, [pc, #468]	@ (800daf8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x280>)
 800d922:	a805      	add	r0, sp, #20
 800d924:	f009 ff06 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 800d928:	2500      	movs	r5, #0
 800d92a:	f8d9 3000 	ldr.w	r3, [r9]
 800d92e:	42ab      	cmp	r3, r5
 800d930:	f200 80b8 	bhi.w	800daa4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>
 800d934:	6822      	ldr	r2, [r4, #0]
 800d936:	4971      	ldr	r1, [pc, #452]	@ (800dafc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x284>)
 800d938:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800d93c:	a805      	add	r0, sp, #20
 800d93e:	f7ff fd3d 	bl	800d3bc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d942:	496f      	ldr	r1, [pc, #444]	@ (800db00 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x288>)
 800d944:	a805      	add	r0, sp, #20
 800d946:	f009 fef5 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 800d94a:	6822      	ldr	r2, [r4, #0]
 800d94c:	496d      	ldr	r1, [pc, #436]	@ (800db04 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x28c>)
 800d94e:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 800d952:	a805      	add	r0, sp, #20
 800d954:	f7ff fd32 	bl	800d3bc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d958:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800d95c:	b17b      	cbz	r3, 800d97e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x106>
 800d95e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d962:	9b05      	ldr	r3, [sp, #20]
 800d964:	4413      	add	r3, r2
 800d966:	227d      	movs	r2, #125	@ 0x7d
 800d968:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d96c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d970:	9905      	ldr	r1, [sp, #20]
 800d972:	54ca      	strb	r2, [r1, r3]
 800d974:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d978:	3301      	adds	r3, #1
 800d97a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d97e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d982:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	b009      	add	sp, #36	@ 0x24
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98c:	f7ff fd3e 	bl	800d40c <ArtNetParamsStore::Copy(artnetparams::Params*)>
 800d990:	e77e      	b.n	800d890 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x18>
 800d992:	4a5d      	ldr	r2, [pc, #372]	@ (800db08 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x290>)
 800d994:	e79e      	b.n	800d8d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x5c>
 800d996:	4a5d      	ldr	r2, [pc, #372]	@ (800db0c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x294>)
 800d998:	e79c      	b.n	800d8d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x5c>
 800d99a:	f8db 6000 	ldr.w	r6, [fp]
 800d99e:	442e      	add	r6, r5
 800d9a0:	2e1f      	cmp	r6, #31
 800d9a2:	d8ab      	bhi.n	800d8fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 800d9a4:	006b      	lsls	r3, r5, #1
 800d9a6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800d9aa:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800d9ae:	9303      	str	r3, [sp, #12]
 800d9b0:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800d9b4:	42b9      	cmp	r1, r7
 800d9b6:	f8b3 2005 	ldrh.w	r2, [r3, #5]
 800d9ba:	f8d4 c000 	ldr.w	ip, [r4]
 800d9be:	d220      	bcs.n	800da02 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x18a>
 800d9c0:	2002      	movs	r0, #2
 800d9c2:	fa00 fe05 	lsl.w	lr, r0, r5
 800d9c6:	4b52      	ldr	r3, [pc, #328]	@ (800db10 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x298>)
 800d9c8:	9805      	ldr	r0, [sp, #20]
 800d9ca:	ea3e 0c0c 	bics.w	ip, lr, ip
 800d9ce:	4408      	add	r0, r1
 800d9d0:	eba7 0701 	sub.w	r7, r7, r1
 800d9d4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800d9d8:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800d9dc:	d003      	beq.n	800d9e6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x16e>
 800d9de:	b921      	cbnz	r1, 800d9ea <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x172>
 800d9e0:	9200      	str	r2, [sp, #0]
 800d9e2:	4a4c      	ldr	r2, [pc, #304]	@ (800db14 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x29c>)
 800d9e4:	e003      	b.n	800d9ee <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x176>
 800d9e6:	2900      	cmp	r1, #0
 800d9e8:	d037      	beq.n	800da5a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1e2>
 800d9ea:	9200      	str	r2, [sp, #0]
 800d9ec:	4a4a      	ldr	r2, [pc, #296]	@ (800db18 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2a0>)
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	f00d f942 	bl	801ac78 <snprintf>
 800d9f4:	4287      	cmp	r7, r0
 800d9f6:	bfa2      	ittt	ge
 800d9f8:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 800d9fc:	18c0      	addge	r0, r0, r3
 800d9fe:	f8ad 001a 	strhge.w	r0, [sp, #26]
 800da02:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 800da06:	4945      	ldr	r1, [pc, #276]	@ (800db1c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2a4>)
 800da08:	006a      	lsls	r2, r5, #1
 800da0a:	4113      	asrs	r3, r2
 800da0c:	f013 0303 	ands.w	r3, r3, #3
 800da10:	f04f 0212 	mov.w	r2, #18
 800da14:	fb02 1105 	mla	r1, r2, r5, r1
 800da18:	d022      	beq.n	800da60 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1e8>
 800da1a:	4a41      	ldr	r2, [pc, #260]	@ (800db20 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2a8>)
 800da1c:	4841      	ldr	r0, [pc, #260]	@ (800db24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2ac>)
 800da1e:	2b02      	cmp	r3, #2
 800da20:	bf18      	it	ne
 800da22:	4602      	movne	r2, r0
 800da24:	3b01      	subs	r3, #1
 800da26:	bf18      	it	ne
 800da28:	2301      	movne	r3, #1
 800da2a:	a805      	add	r0, sp, #20
 800da2c:	f7ff fc9e 	bl	800d36c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800da30:	6822      	ldr	r2, [r4, #0]
 800da32:	2380      	movs	r3, #128	@ 0x80
 800da34:	40ab      	lsls	r3, r5
 800da36:	401a      	ands	r2, r3
 800da38:	4293      	cmp	r3, r2
 800da3a:	bf0c      	ite	eq
 800da3c:	2701      	moveq	r7, #1
 800da3e:	2700      	movne	r7, #0
 800da40:	d110      	bne.n	800da64 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1ec>
 800da42:	4642      	mov	r2, r8
 800da44:	4651      	mov	r1, sl
 800da46:	463b      	mov	r3, r7
 800da48:	a805      	add	r0, sp, #20
 800da4a:	f7ff fc8f 	bl	800d36c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800da4e:	3501      	adds	r5, #1
 800da50:	f10a 0a0e 	add.w	sl, sl, #14
 800da54:	f108 0812 	add.w	r8, r8, #18
 800da58:	e74c      	b.n	800d8f4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x7c>
 800da5a:	9200      	str	r2, [sp, #0]
 800da5c:	4a32      	ldr	r2, [pc, #200]	@ (800db28 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2b0>)
 800da5e:	e7c6      	b.n	800d9ee <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x176>
 800da60:	4a32      	ldr	r2, [pc, #200]	@ (800db2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2b4>)
 800da62:	e7df      	b.n	800da24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1ac>
 800da64:	2328      	movs	r3, #40	@ 0x28
 800da66:	435e      	muls	r6, r3
 800da68:	4b19      	ldr	r3, [pc, #100]	@ (800dad0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 800da6a:	6819      	ldr	r1, [r3, #0]
 800da6c:	f606 36fc 	addw	r6, r6, #3068	@ 0xbfc
 800da70:	2212      	movs	r2, #18
 800da72:	4431      	add	r1, r6
 800da74:	4640      	mov	r0, r8
 800da76:	f00c fddc 	bl	801a632 <memmove>
 800da7a:	e7e2      	b.n	800da42 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1ca>
 800da7c:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 800da80:	006a      	lsls	r2, r5, #1
 800da82:	4113      	asrs	r3, r2
 800da84:	f003 0303 	and.w	r3, r3, #3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	4641      	mov	r1, r8
 800da8c:	bf15      	itete	ne
 800da8e:	2301      	movne	r3, #1
 800da90:	2300      	moveq	r3, #0
 800da92:	4632      	movne	r2, r6
 800da94:	463a      	moveq	r2, r7
 800da96:	a805      	add	r0, sp, #20
 800da98:	f7ff fc68 	bl	800d36c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800da9c:	3501      	adds	r5, #1
 800da9e:	f108 0812 	add.w	r8, r8, #18
 800daa2:	e734      	b.n	800d90e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x96>
 800daa4:	f8b4 309c 	ldrh.w	r3, [r4, #156]	@ 0x9c
 800daa8:	006a      	lsls	r2, r5, #1
 800daaa:	4113      	asrs	r3, r2
 800daac:	f003 0303 	and.w	r3, r3, #3
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	4641      	mov	r1, r8
 800dab4:	bf15      	itete	ne
 800dab6:	2301      	movne	r3, #1
 800dab8:	2300      	moveq	r3, #0
 800daba:	4632      	movne	r2, r6
 800dabc:	463a      	moveq	r2, r7
 800dabe:	a805      	add	r0, sp, #20
 800dac0:	f7ff fc54 	bl	800d36c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800dac4:	3501      	adds	r5, #1
 800dac6:	f108 0810 	add.w	r8, r8, #16
 800daca:	e72e      	b.n	800d92a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0xb2>
 800dacc:	0801e9bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, fp, sp, lr, pc}
 800dad0:	2000064c 	andcs	r0, r0, ip, asr #12
 800dad4:	0801f2b2 	stmdaeq	r1, {r1, r4, r5, r7, r9, ip, sp, lr, pc}
 800dad8:	0801bc91 	stmdaeq	r1, {r0, r4, r7, sl, fp, ip, sp, pc}
 800dadc:	0801bc88 	stmdaeq	r1, {r3, r7, sl, fp, ip, sp, pc}
 800dae0:	0801f281 	stmdaeq	r1, {r0, r7, r9, ip, sp, lr, pc}
 800dae4:	0801bcc3 	stmdaeq	r1, {r0, r1, r6, r7, sl, fp, ip, sp, pc}
 800dae8:	0801bcaf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sl, fp, ip, sp, pc}
 800daec:	0801bcb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, fp, ip, sp, pc}
 800daf0:	0801bcce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, fp, ip, sp, pc}
 800daf4:	0801bcb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, sl, fp, ip, sp, pc}
 800daf8:	0801bcbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, sl, fp, ip, sp, pc}
 800dafc:	0801e911 	stmdaeq	r1, {r0, r4, r8, fp, sp, lr, pc}
 800db00:	0801b948 	stmdaeq	r1, {r3, r6, r8, fp, ip, sp, pc}
 800db04:	0801f28a 	stmdaeq	r1, {r1, r3, r7, r9, ip, sp, lr, pc}
 800db08:	0801bc8d 	stmdaeq	r1, {r0, r2, r3, r7, sl, fp, ip, sp, pc}
 800db0c:	0801b4de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, sl, ip, sp, pc}
 800db10:	0801f384 	stmdaeq	r1, {r2, r7, r8, r9, ip, sp, lr, pc}
 800db14:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 800db18:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 800db1c:	0801f2f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, ip, sp, lr, pc}
 800db20:	0801bca7 	stmdaeq	r1, {r0, r1, r2, r5, r7, sl, fp, ip, sp, pc}
 800db24:	0801bca0 	stmdaeq	r1, {r5, r7, sl, fp, ip, sp, pc}
 800db28:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}
 800db2c:	0801bc9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, ip, sp, pc}
 800db30:	0801f2bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, ip, sp, lr, pc}
 800db34:	2000c6d8 	ldrdcs	ip, [r0], -r8
 800db38:	20000000 	andcs	r0, r0, r0
 800db3c:	0801f33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, ip, sp, lr, pc}
 800db40:	0801e91f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, fp, sp, lr, pc}

0800db44 <ArtNetParams::Set()>:
 800db44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db48:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800dc50 <ArtNetParams::Set()+0x10c>
 800db4c:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800dc54 <ArtNetParams::Set()+0x110>
 800db50:	f8da 3000 	ldr.w	r3, [sl]
 800db54:	2b20      	cmp	r3, #32
 800db56:	4605      	mov	r5, r0
 800db58:	d806      	bhi.n	800db68 <ArtNetParams::Set()+0x24>
 800db5a:	f1c3 0320 	rsb	r3, r3, #32
 800db5e:	2b04      	cmp	r3, #4
 800db60:	bf28      	it	cs
 800db62:	2304      	movcs	r3, #4
 800db64:	f8c9 3000 	str.w	r3, [r9]
 800db68:	4b38      	ldr	r3, [pc, #224]	@ (800dc4c <ArtNetParams::Set()+0x108>)
 800db6a:	681c      	ldr	r4, [r3, #0]
 800db6c:	682b      	ldr	r3, [r5, #0]
 800db6e:	0658      	lsls	r0, r3, #25
 800db70:	d504      	bpl.n	800db7c <ArtNetParams::Set()+0x38>
 800db72:	f105 0113 	add.w	r1, r5, #19
 800db76:	4620      	mov	r0, r4
 800db78:	f7fe f84c 	bl	800bc14 <ArtNetNode::SetLongName(char const*)>
 800db7c:	f105 0853 	add.w	r8, r5, #83	@ 0x53
 800db80:	2700      	movs	r7, #0
 800db82:	f44f 0b80 	mov.w	fp, #4194304	@ 0x400000
 800db86:	e03f      	b.n	800dc08 <ArtNetParams::Set()+0xc4>
 800db88:	f8da 6000 	ldr.w	r6, [sl]
 800db8c:	443e      	add	r6, r7
 800db8e:	2e1f      	cmp	r6, #31
 800db90:	d83e      	bhi.n	800dc10 <ArtNetParams::Set()+0xcc>
 800db92:	682a      	ldr	r2, [r5, #0]
 800db94:	2380      	movs	r3, #128	@ 0x80
 800db96:	40bb      	lsls	r3, r7
 800db98:	4393      	bics	r3, r2
 800db9a:	bf0c      	ite	eq
 800db9c:	4642      	moveq	r2, r8
 800db9e:	2200      	movne	r2, #0
 800dba0:	4631      	mov	r1, r6
 800dba2:	4620      	mov	r0, r4
 800dba4:	f7fd ffde 	bl	800bb64 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800dba8:	f8b5 200f 	ldrh.w	r2, [r5, #15]
 800dbac:	007b      	lsls	r3, r7, #1
 800dbae:	411a      	asrs	r2, r3
 800dbb0:	f002 0203 	and.w	r2, r2, #3
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	f7fe fb8e 	bl	800c2da <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>
 800dbbe:	9b01      	ldr	r3, [sp, #4]
 800dbc0:	f8b5 209c 	ldrh.w	r2, [r5, #156]	@ 0x9c
 800dbc4:	411a      	asrs	r2, r3
 800dbc6:	f002 0203 	and.w	r2, r2, #3
 800dbca:	4631      	mov	r1, r6
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f000 f899 	bl	800dd04 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>
 800dbd2:	682a      	ldr	r2, [r5, #0]
 800dbd4:	fa0b f307 	lsl.w	r3, fp, r7
 800dbd8:	4393      	bics	r3, r2
 800dbda:	d112      	bne.n	800dc02 <ArtNetParams::Set()+0xbe>
 800dbdc:	442e      	add	r6, r5
 800dbde:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800dbe2:	f896 20b0 	ldrb.w	r2, [r6, #176]	@ 0xb0
 800dbe6:	f883 2816 	strb.w	r2, [r3, #2070]	@ 0x816
 800dbea:	1e51      	subs	r1, r2, #1
 800dbec:	4623      	mov	r3, r4
 800dbee:	f504 70c0 	add.w	r0, r4, #384	@ 0x180
 800dbf2:	b2c9      	uxtb	r1, r1
 800dbf4:	29c7      	cmp	r1, #199	@ 0xc7
 800dbf6:	bf98      	it	ls
 800dbf8:	f883 2a39 	strbls.w	r2, [r3, #2617]	@ 0xa39
 800dbfc:	330c      	adds	r3, #12
 800dbfe:	4283      	cmp	r3, r0
 800dc00:	d1f8      	bne.n	800dbf4 <ArtNetParams::Set()+0xb0>
 800dc02:	3701      	adds	r7, #1
 800dc04:	f108 0812 	add.w	r8, r8, #18
 800dc08:	f8d9 3000 	ldr.w	r3, [r9]
 800dc0c:	42bb      	cmp	r3, r7
 800dc0e:	d8bb      	bhi.n	800db88 <ArtNetParams::Set()+0x44>
 800dc10:	7ca9      	ldrb	r1, [r5, #18]
 800dc12:	2903      	cmp	r1, #3
 800dc14:	bf9a      	itte	ls
 800dc16:	3108      	addls	r1, #8
 800dc18:	b2c9      	uxtbls	r1, r1
 800dc1a:	2108      	movhi	r1, #8
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f7fe fb87 	bl	800c330 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800dc22:	682a      	ldr	r2, [r5, #0]
 800dc24:	0391      	lsls	r1, r2, #14
 800dc26:	bf42      	ittt	mi
 800dc28:	f504 5380 	addmi.w	r3, r4, #4096	@ 0x1000
 800dc2c:	2101      	movmi	r1, #1
 800dc2e:	f883 10ec 	strbmi.w	r1, [r3, #236]	@ 0xec
 800dc32:	0513      	lsls	r3, r2, #20
 800dc34:	bf41      	itttt	mi
 800dc36:	f504 5280 	addmi.w	r2, r4, #4096	@ 0x1000
 800dc3a:	2301      	movmi	r3, #1
 800dc3c:	f882 3140 	strbmi.w	r3, [r2, #320]	@ 0x140
 800dc40:	f884 302e 	strbmi.w	r3, [r4, #46]	@ 0x2e
 800dc44:	b003      	add	sp, #12
 800dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4a:	bf00      	nop
 800dc4c:	2000064c 	andcs	r0, r0, ip, asr #12
 800dc50:	20000000 	andcs	r0, r0, r0
 800dc54:	2000c6d8 	ldrdcs	ip, [r0], -r8

0800dc58 <ArtNetNode::HandleTrigger()>:
 800dc58:	b410      	push	{r4}
 800dc5a:	f8d0 1bc8 	ldr.w	r1, [r0, #3016]	@ 0xbc8
 800dc5e:	7b8a      	ldrb	r2, [r1, #14]
 800dc60:	2aff      	cmp	r2, #255	@ 0xff
 800dc62:	d102      	bne.n	800dc6a <ArtNetNode::HandleTrigger()+0x12>
 800dc64:	7bcb      	ldrb	r3, [r1, #15]
 800dc66:	2bff      	cmp	r3, #255	@ 0xff
 800dc68:	d007      	beq.n	800dc7a <ArtNetNode::HandleTrigger()+0x22>
 800dc6a:	4b09      	ldr	r3, [pc, #36]	@ (800dc90 <ArtNetNode::HandleTrigger()+0x38>)
 800dc6c:	781c      	ldrb	r4, [r3, #0]
 800dc6e:	4294      	cmp	r4, r2
 800dc70:	d10b      	bne.n	800dc8a <ArtNetNode::HandleTrigger()+0x32>
 800dc72:	7bca      	ldrb	r2, [r1, #15]
 800dc74:	785b      	ldrb	r3, [r3, #1]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d107      	bne.n	800dc8a <ArtNetNode::HandleTrigger()+0x32>
 800dc7a:	f8d0 0be4 	ldr.w	r0, [r0, #3044]	@ 0xbe4
 800dc7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc82:	6803      	ldr	r3, [r0, #0]
 800dc84:	3110      	adds	r1, #16
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	4718      	bx	r3
 800dc8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	0801e9ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, fp, sp, lr, pc}

0800dc94 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	4b18      	ldr	r3, [pc, #96]	@ (800dcfc <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x68>)
 800dc9a:	681c      	ldr	r4, [r3, #0]
 800dc9c:	4284      	cmp	r4, r0
 800dc9e:	b086      	sub	sp, #24
 800dca0:	460d      	mov	r5, r1
 800dca2:	d827      	bhi.n	800dcf4 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x60>
 800dca4:	1b04      	subs	r4, r0, r4
 800dca6:	2c03      	cmp	r4, #3
 800dca8:	d824      	bhi.n	800dcf4 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x60>
 800dcaa:	f04f 089c 	mov.w	r8, #156	@ 0x9c
 800dcae:	2600      	movs	r6, #0
 800dcb0:	e9cd 8600 	strd	r8, r6, [sp]
 800dcb4:	4f12      	ldr	r7, [pc, #72]	@ (800dd00 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x6c>)
 800dcb6:	2302      	movs	r3, #2
 800dcb8:	6838      	ldr	r0, [r7, #0]
 800dcba:	f10d 0216 	add.w	r2, sp, #22
 800dcbe:	2119      	movs	r1, #25
 800dcc0:	f009 fa78 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800dcc4:	0064      	lsls	r4, r4, #1
 800dcc6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800dcca:	2203      	movs	r2, #3
 800dccc:	40a2      	lsls	r2, r4
 800dcce:	f005 0503 	and.w	r5, r5, #3
 800dcd2:	ea23 0302 	bic.w	r3, r3, r2
 800dcd6:	40a5      	lsls	r5, r4
 800dcd8:	432b      	orrs	r3, r5
 800dcda:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800dcde:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dce2:	2302      	movs	r3, #2
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	6838      	ldr	r0, [r7, #0]
 800dce8:	f10d 0316 	add.w	r3, sp, #22
 800dcec:	4642      	mov	r2, r8
 800dcee:	2119      	movs	r1, #25
 800dcf0:	f009 fa3a 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800dcf4:	b006      	add	sp, #24
 800dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000000 	andcs	r0, r0, r0
 800dd00:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800dd04 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>:
 800dd04:	291f      	cmp	r1, #31
 800dd06:	b538      	push	{r3, r4, r5, lr}
 800dd08:	460c      	mov	r4, r1
 800dd0a:	4615      	mov	r5, r2
 800dd0c:	d826      	bhi.n	800dd5c <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)+0x58>
 800dd0e:	2328      	movs	r3, #40	@ 0x28
 800dd10:	fb03 0301 	mla	r3, r3, r1, r0
 800dd14:	2d01      	cmp	r5, #1
 800dd16:	f8c3 2bf4 	str.w	r2, [r3, #3060]	@ 0xbf4
 800dd1a:	f04f 0224 	mov.w	r2, #36	@ 0x24
 800dd1e:	fb02 0101 	mla	r1, r2, r1, r0
 800dd22:	f241 1370 	movw	r3, #4464	@ 0x1170
 800dd26:	fb02 0204 	mla	r2, r2, r4, r0
 800dd2a:	5ccb      	ldrb	r3, [r1, r3]
 800dd2c:	f241 1170 	movw	r1, #4464	@ 0x1170
 800dd30:	bf0c      	ite	eq
 800dd32:	f043 0301 	orreq.w	r3, r3, #1
 800dd36:	f003 03fe 	andne.w	r3, r3, #254	@ 0xfe
 800dd3a:	5453      	strb	r3, [r2, r1]
 800dd3c:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800dd40:	f890 3139 	ldrb.w	r3, [r0, #313]	@ 0x139
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d109      	bne.n	800dd5c <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)+0x58>
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f7ff ffa2 	bl	800dc94 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)>
 800dd50:	4629      	mov	r1, r5
 800dd52:	4620      	mov	r0, r4
 800dd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd58:	f009 b80e 	b.w	8016d78 <artnet::display_port_protocol(unsigned long, artnet::PortProtocol)>
 800dd5c:	bd38      	pop	{r3, r4, r5, pc}

0800dd5e <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)>:
 800dd5e:	2a02      	cmp	r2, #2
 800dd60:	b430      	push	{r4, r5}
 800dd62:	d01c      	beq.n	800dd9e <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x40>
 800dd64:	2428      	movs	r4, #40	@ 0x28
 800dd66:	fb04 0401 	mla	r4, r4, r1, r0
 800dd6a:	f8b4 3be8 	ldrh.w	r3, [r4, #3048]	@ 0xbe8
 800dd6e:	f8d4 4bf0 	ldr.w	r4, [r4, #3056]	@ 0xbf0
 800dd72:	1aa5      	subs	r5, r4, r2
 800dd74:	426c      	negs	r4, r5
 800dd76:	416c      	adcs	r4, r5
 800dd78:	2528      	movs	r5, #40	@ 0x28
 800dd7a:	fb05 0501 	mla	r5, r5, r1, r0
 800dd7e:	f8d5 5bf4 	ldr.w	r5, [r5, #3060]	@ 0xbf4
 800dd82:	2d01      	cmp	r5, #1
 800dd84:	d117      	bne.n	800ddb6 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x58>
 800dd86:	b96c      	cbnz	r4, 800dda4 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x46>
 800dd88:	230c      	movs	r3, #12
 800dd8a:	fb03 0301 	mla	r3, r3, r1, r0
 800dd8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd90:	2a01      	cmp	r2, #1
 800dd92:	d810      	bhi.n	800ddb6 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x58>
 800dd94:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800dd96:	2202      	movs	r2, #2
 800dd98:	bc30      	pop	{r4, r5}
 800dd9a:	f000 b8f7 	b.w	800df8c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	461c      	mov	r4, r3
 800dda2:	e7e9      	b.n	800dd78 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x1a>
 800dda4:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 800dda8:	f894 40ec 	ldrb.w	r4, [r4, #236]	@ 0xec
 800ddac:	b10c      	cbz	r4, 800ddb2 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x54>
 800ddae:	3301      	adds	r3, #1
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1f0      	bne.n	800dd98 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x3a>
 800ddb6:	bc30      	pop	{r4, r5}
 800ddb8:	4770      	bx	lr
	...

0800ddbc <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)>:
 800ddbc:	4b0b      	ldr	r3, [pc, #44]	@ (800ddec <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x30>)
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	428a      	cmp	r2, r1
 800ddc2:	f1a1 0202 	sub.w	r2, r1, #2
 800ddc6:	bf18      	it	ne
 800ddc8:	6019      	strne	r1, [r3, #0]
 800ddca:	4253      	negs	r3, r2
 800ddcc:	4153      	adcs	r3, r2
 800ddce:	f880 3bb0 	strb.w	r3, [r0, #2992]	@ 0xbb0
 800ddd2:	f500 6308 	add.w	r3, r0, #2176	@ 0x880
 800ddd6:	f890 21f1 	ldrb.w	r2, [r0, #497]	@ 0x1f1
 800ddda:	b932      	cbnz	r2, 800ddea <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x2e>
 800dddc:	3044      	adds	r0, #68	@ 0x44
 800ddde:	4298      	cmp	r0, r3
 800dde0:	d1f9      	bne.n	800ddd6 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x1a>
 800dde2:	4b03      	ldr	r3, [pc, #12]	@ (800ddf0 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x34>)
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f00a b9c9 	b.w	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800ddea:	4770      	bx	lr
 800ddec:	2000c6dc 	ldrdcs	ip, [r0], -ip	@ <UNPREDICTABLE>
 800ddf0:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800ddf4 <ArtNetNode::GetGoodOutput4(unsigned long)>:
 800ddf4:	230c      	movs	r3, #12
 800ddf6:	fb03 0301 	mla	r3, r3, r1, r0
 800ddfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d10d      	bne.n	800de1c <ArtNetNode::GetGoodOutput4(unsigned long)+0x28>
 800de00:	2344      	movs	r3, #68	@ 0x44
 800de02:	fb03 0001 	mla	r0, r3, r1, r0
 800de06:	f890 31f0 	ldrb.w	r3, [r0, #496]	@ 0x1f0
 800de0a:	f890 01f1 	ldrb.w	r0, [r0, #497]	@ 0x1f1
 800de0e:	01c0      	lsls	r0, r0, #7
 800de10:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800de14:	f040 0001 	orr.w	r0, r0, #1
 800de18:	b2c0      	uxtb	r0, r0
 800de1a:	4770      	bx	lr
 800de1c:	2000      	movs	r0, #0
 800de1e:	4770      	bx	lr

0800de20 <LightSet::Blackout(bool)>:
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop

0800de24 <LightSet::FullOn()>:
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop

0800de28 <E131Bridge::E131Bridge()>:
 800de28:	b510      	push	{r4, lr}
 800de2a:	4604      	mov	r4, r0
 800de2c:	2200      	movs	r2, #0
 800de2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de32:	4b27      	ldr	r3, [pc, #156]	@ (800ded0 <E131Bridge::E131Bridge()+0xa8>)
 800de34:	6020      	str	r0, [r4, #0]
 800de36:	e9c4 2201 	strd	r2, r2, [r4, #4]
 800de3a:	2001      	movs	r0, #1
 800de3c:	f884 0bb0 	strb.w	r0, [r4, #2992]	@ 0xbb0
 800de40:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800de44:	601c      	str	r4, [r3, #0]
 800de46:	60e2      	str	r2, [r4, #12]
 800de48:	f8c4 2bbc 	str.w	r2, [r4, #3004]	@ 0xbbc
 800de4c:	f8c4 2bc0 	str.w	r2, [r4, #3008]	@ 0xbc0
 800de50:	4603      	mov	r3, r0
 800de52:	f504 71d8 	add.w	r1, r4, #432	@ 0x1b0
 800de56:	f843 2b04 	str.w	r2, [r3], #4
 800de5a:	428b      	cmp	r3, r1
 800de5c:	d1fb      	bne.n	800de56 <E131Bridge::E131Bridge()+0x2e>
 800de5e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800de62:	f504 72de 	add.w	r2, r4, #444	@ 0x1bc
 800de66:	2102      	movs	r1, #2
 800de68:	f843 1c08 	str.w	r1, [r3, #-8]
 800de6c:	330c      	adds	r3, #12
 800de6e:	429a      	cmp	r2, r3
 800de70:	d1fa      	bne.n	800de68 <E131Bridge::E131Bridge()+0x40>
 800de72:	f104 0310 	add.w	r3, r4, #16
 800de76:	2200      	movs	r2, #0
 800de78:	f843 2b04 	str.w	r2, [r3], #4
 800de7c:	4298      	cmp	r0, r3
 800de7e:	d1fb      	bne.n	800de78 <E131Bridge::E131Bridge()+0x50>
 800de80:	2301      	movs	r3, #1
 800de82:	6262      	str	r2, [r4, #36]	@ 0x24
 800de84:	f884 3020 	strb.w	r3, [r4, #32]
 800de88:	f504 6c23 	add.w	ip, r4, #2608	@ 0xa30
 800de8c:	f504 72fa 	add.w	r2, r4, #500	@ 0x1f4
 800de90:	f604 2e74 	addw	lr, r4, #2676	@ 0xa74
 800de94:	2100      	movs	r1, #0
 800de96:	2064      	movs	r0, #100	@ 0x64
 800de98:	f1a2 0344 	sub.w	r3, r2, #68	@ 0x44
 800de9c:	f843 1b04 	str.w	r1, [r3], #4
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d1fb      	bne.n	800de9c <E131Bridge::E131Bridge()+0x74>
 800dea4:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800dea8:	4572      	cmp	r2, lr
 800deaa:	f8cc 1008 	str.w	r1, [ip, #8]
 800deae:	f8cc 1000 	str.w	r1, [ip]
 800deb2:	f8cc 1004 	str.w	r1, [ip, #4]
 800deb6:	f88c 0009 	strb.w	r0, [ip, #9]
 800deba:	f10c 0c0c 	add.w	ip, ip, #12
 800debe:	d1eb      	bne.n	800de98 <E131Bridge::E131Bridge()+0x70>
 800dec0:	f44f 50ae 	mov.w	r0, #5568	@ 0x15c0
 800dec4:	f007 fc50 	bl	8015768 <net::udp_begin(unsigned short)>
 800dec8:	6020      	str	r0, [r4, #0]
 800deca:	4620      	mov	r0, r4
 800decc:	bd10      	pop	{r4, pc}
 800dece:	bf00      	nop
 800ded0:	2000c6e0 	andcs	ip, r0, r0, ror #13

0800ded4 <E131Bridge::Start()>:
 800ded4:	4603      	mov	r3, r0
 800ded6:	4a03      	ldr	r2, [pc, #12]	@ (800dee4 <E131Bridge::Start()+0x10>)
 800ded8:	2102      	movs	r1, #2
 800deda:	6810      	ldr	r0, [r2, #0]
 800dedc:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
 800dee0:	f00a b94c 	b.w	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800dee4:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800dee8 <E131Bridge::Stop()>:
 800dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deea:	2301      	movs	r3, #1
 800deec:	2400      	movs	r4, #0
 800deee:	4d0e      	ldr	r5, [pc, #56]	@ (800df28 <E131Bridge::Stop()+0x40>)
 800def0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
 800def4:	4606      	mov	r6, r0
 800def6:	4627      	mov	r7, r4
 800def8:	f8d6 3bbc 	ldr.w	r3, [r6, #3004]	@ 0xbbc
 800defc:	4621      	mov	r1, r4
 800defe:	4618      	mov	r0, r3
 800df00:	b113      	cbz	r3, 800df08 <E131Bridge::Stop()+0x20>
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	4798      	blx	r3
 800df08:	3401      	adds	r4, #1
 800df0a:	2c20      	cmp	r4, #32
 800df0c:	f8c5 7600 	str.w	r7, [r5, #1536]	@ 0x600
 800df10:	f205 6504 	addw	r5, r5, #1540	@ 0x604
 800df14:	d1f0      	bne.n	800def8 <E131Bridge::Stop()+0x10>
 800df16:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <E131Bridge::Stop()+0x44>)
 800df18:	f886 7028 	strb.w	r7, [r6, #40]	@ 0x28
 800df1c:	6818      	ldr	r0, [r3, #0]
 800df1e:	2100      	movs	r1, #0
 800df20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800df24:	f00a b92a 	b.w	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800df28:	20000650 	andcs	r0, r0, r0, asr r6
 800df2c:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800df30 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	461c      	mov	r4, r3
 800df34:	b1c9      	cbz	r1, 800df6a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800df36:	8b41      	ldrh	r1, [r0, #26]
 800df38:	f100 051a 	add.w	r5, r0, #26
 800df3c:	b159      	cbz	r1, 800df56 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800df3e:	42a1      	cmp	r1, r4
 800df40:	d01a      	beq.n	800df78 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800df42:	f500 73c0 	add.w	r3, r0, #384	@ 0x180
 800df46:	e001      	b.n	800df4c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1c>
 800df48:	4283      	cmp	r3, r0
 800df4a:	d016      	beq.n	800df7a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800df4c:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 800df4e:	428a      	cmp	r2, r1
 800df50:	f100 000c 	add.w	r0, r0, #12
 800df54:	d1f8      	bne.n	800df48 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x18>
 800df56:	ba20      	rev	r0, r4
 800df58:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800df5c:	802c      	strh	r4, [r5, #0]
 800df5e:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800df62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df66:	f006 bfe7 	b.w	8014f38 <net::igmp_join(unsigned long)>
 800df6a:	b12a      	cbz	r2, 800df78 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800df6c:	8b81      	ldrh	r1, [r0, #28]
 800df6e:	f100 051c 	add.w	r5, r0, #28
 800df72:	2900      	cmp	r1, #0
 800df74:	d0ef      	beq.n	800df56 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800df76:	e7e2      	b.n	800df3e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xe>
 800df78:	bd38      	pop	{r3, r4, r5, pc}
 800df7a:	ba08      	rev	r0, r1
 800df7c:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800df80:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800df84:	f006 fff6 	bl	8014f74 <net::igmp_leave(unsigned long)>
 800df88:	e7e5      	b.n	800df56 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800df8a:	bf00      	nop

0800df8c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>:
 800df8c:	2a02      	cmp	r2, #2
 800df8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df90:	4606      	mov	r6, r0
 800df92:	460c      	mov	r4, r1
 800df94:	461f      	mov	r7, r3
 800df96:	d01b      	beq.n	800dfd0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x44>
 800df98:	2a01      	cmp	r2, #1
 800df9a:	d000      	beq.n	800df9e <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x12>
 800df9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df9e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800dfa2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800dfa6:	004d      	lsls	r5, r1, #1
 800dfa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dfaa:	2a01      	cmp	r2, #1
 800dfac:	d01e      	beq.n	800dfec <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x60>
 800dfae:	7fc3      	ldrb	r3, [r0, #31]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	77c3      	strb	r3, [r0, #31]
 800dfb4:	ba38      	rev	r0, r7
 800dfb6:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800dfba:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800dfbe:	4425      	add	r5, r4
 800dfc0:	f006 ffba 	bl	8014f38 <net::igmp_join(unsigned long)>
 800dfc4:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800dfc8:	2301      	movs	r3, #1
 800dfca:	6343      	str	r3, [r0, #52]	@ 0x34
 800dfcc:	8607      	strh	r7, [r0, #48]	@ 0x30
 800dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800dfd4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800dfd8:	004d      	lsls	r5, r1, #1
 800dfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d023      	beq.n	800e028 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x9c>
 800dfe0:	4425      	add	r5, r4
 800dfe2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	636b      	str	r3, [r5, #52]	@ 0x34
 800dfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfec:	f8b3 c030 	ldrh.w	ip, [r3, #48]	@ 0x30
 800dff0:	45bc      	cmp	ip, r7
 800dff2:	d0d3      	beq.n	800df9c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x10>
 800dff4:	4601      	mov	r1, r0
 800dff6:	2200      	movs	r2, #0
 800dff8:	4294      	cmp	r4, r2
 800dffa:	f102 0201 	add.w	r2, r2, #1
 800dffe:	d002      	beq.n	800e006 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x7a>
 800e000:	8e0b      	ldrh	r3, [r1, #48]	@ 0x30
 800e002:	4563      	cmp	r3, ip
 800e004:	d0d6      	beq.n	800dfb4 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x28>
 800e006:	2a20      	cmp	r2, #32
 800e008:	f101 010c 	add.w	r1, r1, #12
 800e00c:	d1f4      	bne.n	800dff8 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x6c>
 800e00e:	ea4f 200c 	mov.w	r0, ip, lsl #8
 800e012:	f400 007f 	and.w	r0, r0, #16711680	@ 0xff0000
 800e016:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
 800e01a:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800e01e:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800e022:	f006 ffa7 	bl	8014f74 <net::igmp_leave(unsigned long)>
 800e026:	e7c5      	b.n	800dfb4 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x28>
 800e028:	7fc3      	ldrb	r3, [r0, #31]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	77c3      	strb	r3, [r0, #31]
 800e02e:	2200      	movs	r2, #0
 800e030:	4603      	mov	r3, r0
 800e032:	e003      	b.n	800e03c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xb0>
 800e034:	2a20      	cmp	r2, #32
 800e036:	f103 030c 	add.w	r3, r3, #12
 800e03a:	d007      	beq.n	800e04c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xc0>
 800e03c:	4294      	cmp	r4, r2
 800e03e:	f102 0201 	add.w	r2, r2, #1
 800e042:	d0f7      	beq.n	800e034 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xa8>
 800e044:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 800e046:	42b9      	cmp	r1, r7
 800e048:	d1f4      	bne.n	800e034 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xa8>
 800e04a:	e7c9      	b.n	800dfe0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x54>
 800e04c:	ba38      	rev	r0, r7
 800e04e:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800e052:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800e056:	f006 ff8d 	bl	8014f74 <net::igmp_leave(unsigned long)>
 800e05a:	e7c1      	b.n	800dfe0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x54>

0800e05c <E131Bridge::CheckMergeTimeouts(unsigned long)>:
 800e05c:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 800e060:	b530      	push	{r4, r5, lr}
 800e062:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
 800e066:	6844      	ldr	r4, [r0, #4]
 800e068:	009a      	lsls	r2, r3, #2
 800e06a:	f8de 31b0 	ldr.w	r3, [lr, #432]	@ 0x1b0
 800e06e:	f242 7510 	movw	r5, #10000	@ 0x2710
 800e072:	eba4 0c03 	sub.w	ip, r4, r3
 800e076:	45ac      	cmp	ip, r5
 800e078:	ea4f 1301 	mov.w	r3, r1, lsl #4
 800e07c:	d90c      	bls.n	800e098 <E131Bridge::CheckMergeTimeouts(unsigned long)+0x3c>
 800e07e:	f502 72dc 	add.w	r2, r2, #440	@ 0x1b8
 800e082:	2400      	movs	r4, #0
 800e084:	f8ce 41b4 	str.w	r4, [lr, #436]	@ 0x1b4
 800e088:	5084      	str	r4, [r0, r2]
 800e08a:	4402      	add	r2, r0
 800e08c:	6054      	str	r4, [r2, #4]
 800e08e:	6094      	str	r4, [r2, #8]
 800e090:	60d4      	str	r4, [r2, #12]
 800e092:	f88e 41f0 	strb.w	r4, [lr, #496]	@ 0x1f0
 800e096:	6844      	ldr	r4, [r0, #4]
 800e098:	4419      	add	r1, r3
 800e09a:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800e09e:	0089      	lsls	r1, r1, #2
 800e0a0:	f8dc 31cc 	ldr.w	r3, [ip, #460]	@ 0x1cc
 800e0a4:	1ae4      	subs	r4, r4, r3
 800e0a6:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d90b      	bls.n	800e0c6 <E131Bridge::CheckMergeTimeouts(unsigned long)+0x6a>
 800e0ae:	f501 73ea 	add.w	r3, r1, #468	@ 0x1d4
 800e0b2:	18c1      	adds	r1, r0, r3
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f8cc 21d0 	str.w	r2, [ip, #464]	@ 0x1d0
 800e0ba:	50c2      	str	r2, [r0, r3]
 800e0bc:	604a      	str	r2, [r1, #4]
 800e0be:	608a      	str	r2, [r1, #8]
 800e0c0:	60ca      	str	r2, [r1, #12]
 800e0c2:	f88c 21f0 	strb.w	r2, [ip, #496]	@ 0x1f0
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	f500 6c08 	add.w	ip, r0, #2176	@ 0x880
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f893 11f0 	ldrb.w	r1, [r3, #496]	@ 0x1f0
 800e0d2:	3344      	adds	r3, #68	@ 0x44
 800e0d4:	459c      	cmp	ip, r3
 800e0d6:	ea42 0201 	orr.w	r2, r2, r1
 800e0da:	d1f8      	bne.n	800e0ce <E131Bridge::CheckMergeTimeouts(unsigned long)+0x72>
 800e0dc:	b922      	cbnz	r2, 800e0e8 <E131Bridge::CheckMergeTimeouts(unsigned long)+0x8c>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 800e0e4:	f880 202a 	strb.w	r2, [r0, #42]	@ 0x2a
 800e0e8:	bd30      	pop	{r4, r5, pc}
 800e0ea:	bf00      	nop

0800e0ec <E131Bridge::IsPriorityTimeOut(unsigned long) const>:
 800e0ec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800e0f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e0f4:	6843      	ldr	r3, [r0, #4]
 800e0f6:	e9d1 2073 	ldrd	r2, r0, [r1, #460]	@ 0x1cc
 800e0fa:	b410      	push	{r4}
 800e0fc:	f8d1 41b4 	ldr.w	r4, [r1, #436]	@ 0x1b4
 800e100:	1a9a      	subs	r2, r3, r2
 800e102:	b94c      	cbnz	r4, 800e118 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x2c>
 800e104:	b128      	cbz	r0, 800e112 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x26>
 800e106:	f242 7010 	movw	r0, #10000	@ 0x2710
 800e10a:	4282      	cmp	r2, r0
 800e10c:	bf94      	ite	ls
 800e10e:	2000      	movls	r0, #0
 800e110:	2001      	movhi	r0, #1
 800e112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	f8d1 11b0 	ldr.w	r1, [r1, #432]	@ 0x1b0
 800e11c:	1a5b      	subs	r3, r3, r1
 800e11e:	b128      	cbz	r0, 800e12c <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x40>
 800e120:	f242 700f 	movw	r0, #9999	@ 0x270f
 800e124:	4283      	cmp	r3, r0
 800e126:	d8f0      	bhi.n	800e10a <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x1e>
 800e128:	2000      	movs	r0, #0
 800e12a:	e7f2      	b.n	800e112 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x26>
 800e12c:	f242 7010 	movw	r0, #10000	@ 0x2710
 800e130:	4283      	cmp	r3, r0
 800e132:	e7eb      	b.n	800e10c <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x20>

0800e134 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e136:	2301      	movs	r3, #1
 800e138:	4607      	mov	r7, r0
 800e13a:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 800e13e:	b109      	cbz	r1, 800e144 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10>
 800e140:	2a00      	cmp	r2, #0
 800e142:	d14c      	bne.n	800e1de <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xaa>
 800e144:	f04f 0e00 	mov.w	lr, #0
 800e148:	4c3e      	ldr	r4, [pc, #248]	@ (800e244 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x110>)
 800e14a:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800e14e:	f607 2c54 	addw	ip, r7, #2644	@ 0xa54
 800e152:	4670      	mov	r0, lr
 800e154:	7f5d      	ldrb	r5, [r3, #29]
 800e156:	b175      	cbz	r5, 800e176 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x42>
 800e158:	b111      	cbz	r1, 800e160 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800e15a:	f853 6c20 	ldr.w	r6, [r3, #-32]
 800e15e:	bb56      	cbnz	r6, 800e1b6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800e160:	b112      	cbz	r2, 800e168 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x34>
 800e162:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800e166:	bb96      	cbnz	r6, 800e1ce <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9a>
 800e168:	f897 602a 	ldrb.w	r6, [r7, #42]	@ 0x2a
 800e16c:	b91e      	cbnz	r6, 800e176 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x42>
 800e16e:	f8c4 6600 	str.w	r6, [r4, #1536]	@ 0x600
 800e172:	46ae      	mov	lr, r5
 800e174:	775e      	strb	r6, [r3, #29]
 800e176:	3344      	adds	r3, #68	@ 0x44
 800e178:	459c      	cmp	ip, r3
 800e17a:	f204 6404 	addw	r4, r4, #1540	@ 0x604
 800e17e:	d1e9      	bne.n	800e154 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x20>
 800e180:	f1be 0f00 	cmp.w	lr, #0
 800e184:	d00b      	beq.n	800e19e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e186:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e188:	2901      	cmp	r1, #1
 800e18a:	d04f      	beq.n	800e22c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xf8>
 800e18c:	2902      	cmp	r1, #2
 800e18e:	d106      	bne.n	800e19e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e190:	f8d7 0bbc 	ldr.w	r0, [r7, #3004]	@ 0xbbc
 800e194:	4a2c      	ldr	r2, [pc, #176]	@ (800e248 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>)
 800e196:	6803      	ldr	r3, [r0, #0]
 800e198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d14f      	bne.n	800e23e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10a>
 800e19e:	4b2b      	ldr	r3, [pc, #172]	@ (800e24c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x118>)
 800e1a0:	2102      	movs	r1, #2
 800e1a2:	6818      	ldr	r0, [r3, #0]
 800e1a4:	f009 ffea 	bl	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800e1a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e1ac:	f023 0302 	bic.w	r3, r3, #2
 800e1b0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800e1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b6:	7718      	strb	r0, [r3, #28]
 800e1b8:	f843 0c20 	str.w	r0, [r3, #-32]
 800e1bc:	f843 0c1c 	str.w	r0, [r3, #-28]
 800e1c0:	f843 0c18 	str.w	r0, [r3, #-24]
 800e1c4:	f843 0c14 	str.w	r0, [r3, #-20]
 800e1c8:	f843 0c10 	str.w	r0, [r3, #-16]
 800e1cc:	e7c8      	b.n	800e160 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800e1ce:	f843 0c04 	str.w	r0, [r3, #-4]
 800e1d2:	6018      	str	r0, [r3, #0]
 800e1d4:	6058      	str	r0, [r3, #4]
 800e1d6:	6098      	str	r0, [r3, #8]
 800e1d8:	60d8      	str	r0, [r3, #12]
 800e1da:	7718      	strb	r0, [r3, #28]
 800e1dc:	e7c4      	b.n	800e168 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x34>
 800e1de:	f04f 0e00 	mov.w	lr, #0
 800e1e2:	f8c0 3029 	str.w	r3, [r0, #41]	@ 0x29
 800e1e6:	f880 3020 	strb.w	r3, [r0, #32]
 800e1ea:	4a16      	ldr	r2, [pc, #88]	@ (800e244 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x110>)
 800e1ec:	4c18      	ldr	r4, [pc, #96]	@ (800e250 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11c>)
 800e1ee:	f500 73de 	add.w	r3, r0, #444	@ 0x1bc
 800e1f2:	4671      	mov	r1, lr
 800e1f4:	e005      	b.n	800e202 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xce>
 800e1f6:	f202 6204 	addw	r2, r2, #1540	@ 0x604
 800e1fa:	42a2      	cmp	r2, r4
 800e1fc:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 800e200:	d0be      	beq.n	800e180 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x4c>
 800e202:	f893 0035 	ldrb.w	r0, [r3, #53]	@ 0x35
 800e206:	2800      	cmp	r0, #0
 800e208:	d0f5      	beq.n	800e1f6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xc2>
 800e20a:	f843 1c08 	str.w	r1, [r3, #-8]
 800e20e:	f843 1c04 	str.w	r1, [r3, #-4]
 800e212:	6019      	str	r1, [r3, #0]
 800e214:	6059      	str	r1, [r3, #4]
 800e216:	6099      	str	r1, [r3, #8]
 800e218:	6159      	str	r1, [r3, #20]
 800e21a:	6199      	str	r1, [r3, #24]
 800e21c:	61d9      	str	r1, [r3, #28]
 800e21e:	6219      	str	r1, [r3, #32]
 800e220:	6259      	str	r1, [r3, #36]	@ 0x24
 800e222:	4686      	mov	lr, r0
 800e224:	f8c2 1600 	str.w	r1, [r2, #1536]	@ 0x600
 800e228:	8699      	strh	r1, [r3, #52]	@ 0x34
 800e22a:	e7e4      	b.n	800e1f6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xc2>
 800e22c:	f8d7 0bbc 	ldr.w	r0, [r7, #3004]	@ 0xbbc
 800e230:	4a08      	ldr	r2, [pc, #32]	@ (800e254 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x120>)
 800e232:	6803      	ldr	r3, [r0, #0]
 800e234:	6a1b      	ldr	r3, [r3, #32]
 800e236:	4293      	cmp	r3, r2
 800e238:	d0b1      	beq.n	800e19e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e23a:	4798      	blx	r3
 800e23c:	e7af      	b.n	800e19e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e23e:	4798      	blx	r3
 800e240:	e7ad      	b.n	800e19e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e242:	bf00      	nop
 800e244:	20000650 	andcs	r0, r0, r0, asr r6
 800e248:	0800de25 	stmdaeq	r0, {r0, r2, r5, r9, sl, fp, ip, lr, pc}
 800e24c:	2000cd38 	andcs	ip, r0, r8, lsr sp
 800e250:	2000c6d0 	ldrdcs	ip, [r0], -r0
 800e254:	0800de21 	stmdaeq	r0, {r0, r5, r9, sl, fp, ip, lr, pc}

0800e258 <E131Bridge::HandleDmx()>:
 800e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25c:	f8d0 abb4 	ldr.w	sl, [r0, #2996]	@ 0xbb4
 800e260:	4fa3      	ldr	r7, [pc, #652]	@ (800e4f0 <E131Bridge::HandleDmx()+0x298>)
 800e262:	f8ba 307b 	ldrh.w	r3, [sl, #123]	@ 0x7b
 800e266:	b08b      	sub	sp, #44	@ 0x2c
 800e268:	ba5b      	rev16	r3, r3
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	f10a 027e 	add.w	r2, sl, #126	@ 0x7e
 800e270:	9208      	str	r2, [sp, #32]
 800e272:	f1a7 0802 	sub.w	r8, r7, #2
 800e276:	1e5a      	subs	r2, r3, #1
 800e278:	4681      	mov	r9, r0
 800e27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e27c:	9207      	str	r2, [sp, #28]
 800e27e:	4604      	mov	r4, r0
 800e280:	4498      	add	r8, r3
 800e282:	f500 75dc 	add.w	r5, r0, #440	@ 0x1b8
 800e286:	2600      	movs	r6, #0
 800e288:	e00b      	b.n	800e2a2 <E131Bridge::HandleDmx()+0x4a>
 800e28a:	3601      	adds	r6, #1
 800e28c:	2e20      	cmp	r6, #32
 800e28e:	f104 040c 	add.w	r4, r4, #12
 800e292:	f207 6704 	addw	r7, r7, #1540	@ 0x604
 800e296:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 800e29a:	f208 6804 	addw	r8, r8, #1540	@ 0x604
 800e29e:	f000 81b4 	beq.w	800e60a <E131Bridge::HandleDmx()+0x3b2>
 800e2a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d1f0      	bne.n	800e28a <E131Bridge::HandleDmx()+0x32>
 800e2a8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e2aa:	f8ba 2071 	ldrh.w	r2, [sl, #113]	@ 0x71
 800e2ae:	ba5b      	rev16	r3, r3
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d1e9      	bne.n	800e28a <E131Bridge::HandleDmx()+0x32>
 800e2b6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800e2ba:	f8d9 bbb8 	ldr.w	fp, [r9, #3000]	@ 0xbb8
 800e2be:	69aa      	ldr	r2, [r5, #24]
 800e2c0:	9304      	str	r3, [sp, #16]
 800e2c2:	455b      	cmp	r3, fp
 800e2c4:	9203      	str	r2, [sp, #12]
 800e2c6:	f000 80c2 	beq.w	800e44e <E131Bridge::HandleDmx()+0x1f6>
 800e2ca:	455a      	cmp	r2, fp
 800e2cc:	f040 80da 	bne.w	800e484 <E131Bridge::HandleDmx()+0x22c>
 800e2d0:	f8d9 2bb4 	ldr.w	r2, [r9, #2996]	@ 0xbb4
 800e2d4:	f04f 0b00 	mov.w	fp, #0
 800e2d8:	3215      	adds	r2, #21
 800e2da:	f105 031b 	add.w	r3, r5, #27
 800e2de:	f105 0c2b 	add.w	ip, r5, #43	@ 0x2b
 800e2e2:	e002      	b.n	800e2ea <E131Bridge::HandleDmx()+0x92>
 800e2e4:	4563      	cmp	r3, ip
 800e2e6:	f000 80db 	beq.w	800e4a0 <E131Bridge::HandleDmx()+0x248>
 800e2ea:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e2ee:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e2f2:	4288      	cmp	r0, r1
 800e2f4:	d0f6      	beq.n	800e2e4 <E131Bridge::HandleDmx()+0x8c>
 800e2f6:	f1bb 0f00 	cmp.w	fp, #0
 800e2fa:	f000 80c3 	beq.w	800e484 <E131Bridge::HandleDmx()+0x22c>
 800e2fe:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e302:	f04f 0b00 	mov.w	fp, #0
 800e306:	7c2a      	ldrb	r2, [r5, #16]
 800e308:	742b      	strb	r3, [r5, #16]
 800e30a:	3313      	adds	r3, #19
 800e30c:	1a9b      	subs	r3, r3, r2
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b13      	cmp	r3, #19
 800e312:	d9ba      	bls.n	800e28a <E131Bridge::HandleDmx()+0x32>
 800e314:	f99a 3070 	ldrsb.w	r3, [sl, #112]	@ 0x70
 800e318:	f89a 2070 	ldrb.w	r2, [sl, #112]	@ 0x70
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dbb4      	blt.n	800e28a <E131Bridge::HandleDmx()+0x32>
 800e320:	0652      	lsls	r2, r2, #25
 800e322:	f100 81d3 	bmi.w	800e6cc <E131Bridge::HandleDmx()+0x474>
 800e326:	2301      	movs	r3, #1
 800e328:	9306      	str	r3, [sp, #24]
 800e32a:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800e32e:	b133      	cbz	r3, 800e33e <E131Bridge::HandleDmx()+0xe6>
 800e330:	f899 302e 	ldrb.w	r3, [r9, #46]	@ 0x2e
 800e334:	b91b      	cbnz	r3, 800e33e <E131Bridge::HandleDmx()+0xe6>
 800e336:	4631      	mov	r1, r6
 800e338:	4648      	mov	r0, r9
 800e33a:	f7ff fe8f 	bl	800e05c <E131Bridge::CheckMergeTimeouts(unsigned long)>
 800e33e:	f89a 206c 	ldrb.w	r2, [sl, #108]	@ 0x6c
 800e342:	f899 3020 	ldrb.w	r3, [r9, #32]
 800e346:	9205      	str	r2, [sp, #20]
 800e348:	429a      	cmp	r2, r3
 800e34a:	f080 80d3 	bcs.w	800e4f4 <E131Bridge::HandleDmx()+0x29c>
 800e34e:	4631      	mov	r1, r6
 800e350:	4648      	mov	r0, r9
 800e352:	f7ff fecb 	bl	800e0ec <E131Bridge::IsPriorityTimeOut(unsigned long) const>
 800e356:	2800      	cmp	r0, #0
 800e358:	d097      	beq.n	800e28a <E131Bridge::HandleDmx()+0x32>
 800e35a:	9a05      	ldr	r2, [sp, #20]
 800e35c:	f889 2020 	strb.w	r2, [r9, #32]
 800e360:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800e364:	9305      	str	r3, [sp, #20]
 800e366:	9b04      	ldr	r3, [sp, #16]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f040 80d6 	bne.w	800e51a <E131Bridge::HandleDmx()+0x2c2>
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 81b5 	beq.w	800e6e0 <E131Bridge::HandleDmx()+0x488>
 800e376:	9b06      	ldr	r3, [sp, #24]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f000 8175 	beq.w	800e668 <E131Bridge::HandleDmx()+0x410>
 800e37e:	f1bb 0f00 	cmp.w	fp, #0
 800e382:	f040 8175 	bne.w	800e670 <E131Bridge::HandleDmx()+0x418>
 800e386:	f8d9 3bb8 	ldr.w	r3, [r9, #3000]	@ 0xbb8
 800e38a:	f845 3c04 	str.w	r3, [r5, #-4]
 800e38e:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e392:	742b      	strb	r3, [r5, #16]
 800e394:	f10a 0216 	add.w	r2, sl, #22
 800e398:	462b      	mov	r3, r5
 800e39a:	f105 0010 	add.w	r0, r5, #16
 800e39e:	f852 1b04 	ldr.w	r1, [r2], #4
 800e3a2:	f843 1b04 	str.w	r1, [r3], #4
 800e3a6:	4283      	cmp	r3, r0
 800e3a8:	d1f9      	bne.n	800e39e <E131Bridge::HandleDmx()+0x146>
 800e3aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e3ae:	f845 3c08 	str.w	r3, [r5, #-8]
 800e3b2:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800e3b6:	b923      	cbnz	r3, 800e3c2 <E131Bridge::HandleDmx()+0x16a>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800e3be:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e3c8:	9b07      	ldr	r3, [sp, #28]
 800e3ca:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f000 81b6 	beq.w	800e740 <E131Bridge::HandleDmx()+0x4e8>
 800e3d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3d6:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800e3da:	9b08      	ldr	r3, [sp, #32]
 800e3dc:	4450      	add	r0, sl
 800e3de:	463a      	mov	r2, r7
 800e3e0:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e3e4:	f802 1b01 	strb.w	r1, [r2], #1
 800e3e8:	4298      	cmp	r0, r3
 800e3ea:	d1f9      	bne.n	800e3e0 <E131Bridge::HandleDmx()+0x188>
 800e3ec:	9b07      	ldr	r3, [sp, #28]
 800e3ee:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e3f2:	f1bc 0f00 	cmp.w	ip, #0
 800e3f6:	f000 8250 	beq.w	800e89a <E131Bridge::HandleDmx()+0x642>
 800e3fa:	9a05      	ldr	r2, [sp, #20]
 800e3fc:	9b08      	ldr	r3, [sp, #32]
 800e3fe:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e402:	f802 1b01 	strb.w	r1, [r2], #1
 800e406:	4298      	cmp	r0, r3
 800e408:	d1f9      	bne.n	800e3fe <E131Bridge::HandleDmx()+0x1a6>
 800e40a:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800e40e:	069b      	lsls	r3, r3, #26
 800e410:	f100 80c7 	bmi.w	800e5a2 <E131Bridge::HandleDmx()+0x34a>
 800e414:	f8ba 306d 	ldrh.w	r3, [sl, #109]	@ 0x6d
 800e418:	b29a      	uxth	r2, r3
 800e41a:	2a00      	cmp	r2, #0
 800e41c:	f000 80c4 	beq.w	800e5a8 <E131Bridge::HandleDmx()+0x350>
 800e420:	f899 202c 	ldrb.w	r2, [r9, #44]	@ 0x2c
 800e424:	2a00      	cmp	r2, #0
 800e426:	f040 80bf 	bne.w	800e5a8 <E131Bridge::HandleDmx()+0x350>
 800e42a:	9a06      	ldr	r2, [sp, #24]
 800e42c:	ba5b      	rev16	r3, r3
 800e42e:	b29b      	uxth	r3, r3
 800e430:	b91a      	cbnz	r2, 800e43a <E131Bridge::HandleDmx()+0x1e2>
 800e432:	f1bb 0f00 	cmp.w	fp, #0
 800e436:	f000 8219 	beq.w	800e86c <E131Bridge::HandleDmx()+0x614>
 800e43a:	9906      	ldr	r1, [sp, #24]
 800e43c:	465a      	mov	r2, fp
 800e43e:	4648      	mov	r0, r9
 800e440:	f7ff fd76 	bl	800df30 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800e444:	f240 1301 	movw	r3, #257	@ 0x101
 800e448:	f8a9 302b 	strh.w	r3, [r9, #43]	@ 0x2b
 800e44c:	e0b1      	b.n	800e5b2 <E131Bridge::HandleDmx()+0x35a>
 800e44e:	f8d9 2bb4 	ldr.w	r2, [r9, #2996]	@ 0xbb4
 800e452:	3215      	adds	r2, #21
 800e454:	1e6b      	subs	r3, r5, #1
 800e456:	4610      	mov	r0, r2
 800e458:	f105 0e0f 	add.w	lr, r5, #15
 800e45c:	e001      	b.n	800e462 <E131Bridge::HandleDmx()+0x20a>
 800e45e:	4573      	cmp	r3, lr
 800e460:	d03f      	beq.n	800e4e2 <E131Bridge::HandleDmx()+0x28a>
 800e462:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e466:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 800e46a:	4561      	cmp	r1, ip
 800e46c:	d0f7      	beq.n	800e45e <E131Bridge::HandleDmx()+0x206>
 800e46e:	9b03      	ldr	r3, [sp, #12]
 800e470:	455b      	cmp	r3, fp
 800e472:	eba1 010c 	sub.w	r1, r1, ip
 800e476:	f000 80cb 	beq.w	800e610 <E131Bridge::HandleDmx()+0x3b8>
 800e47a:	b919      	cbnz	r1, 800e484 <E131Bridge::HandleDmx()+0x22c>
 800e47c:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e480:	468b      	mov	fp, r1
 800e482:	e740      	b.n	800e306 <E131Bridge::HandleDmx()+0xae>
 800e484:	f99a 2070 	ldrsb.w	r2, [sl, #112]	@ 0x70
 800e488:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800e48c:	2a00      	cmp	r2, #0
 800e48e:	f6ff aefc 	blt.w	800e28a <E131Bridge::HandleDmx()+0x32>
 800e492:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800e496:	f47f aef8 	bne.w	800e28a <E131Bridge::HandleDmx()+0x32>
 800e49a:	9306      	str	r3, [sp, #24]
 800e49c:	469b      	mov	fp, r3
 800e49e:	e744      	b.n	800e32a <E131Bridge::HandleDmx()+0xd2>
 800e4a0:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e4a4:	f103 0213 	add.w	r2, r3, #19
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	f1bb 0f00 	cmp.w	fp, #0
 800e4ae:	f47f af2a 	bne.w	800e306 <E131Bridge::HandleDmx()+0xae>
 800e4b2:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800e4b6:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800e4ba:	1a52      	subs	r2, r2, r1
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	2a13      	cmp	r2, #19
 800e4c0:	f67f aee3 	bls.w	800e28a <E131Bridge::HandleDmx()+0x32>
 800e4c4:	f99a 3070 	ldrsb.w	r3, [sl, #112]	@ 0x70
 800e4c8:	f89a 2070 	ldrb.w	r2, [sl, #112]	@ 0x70
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f6ff aedc 	blt.w	800e28a <E131Bridge::HandleDmx()+0x32>
 800e4d2:	0651      	lsls	r1, r2, #25
 800e4d4:	f100 80ef 	bmi.w	800e6b6 <E131Bridge::HandleDmx()+0x45e>
 800e4d8:	f8cd b018 	str.w	fp, [sp, #24]
 800e4dc:	f04f 0b01 	mov.w	fp, #1
 800e4e0:	e723      	b.n	800e32a <E131Bridge::HandleDmx()+0xd2>
 800e4e2:	9b03      	ldr	r3, [sp, #12]
 800e4e4:	455b      	cmp	r3, fp
 800e4e6:	f47f af0a 	bne.w	800e2fe <E131Bridge::HandleDmx()+0xa6>
 800e4ea:	f04f 0b01 	mov.w	fp, #1
 800e4ee:	e6f4      	b.n	800e2da <E131Bridge::HandleDmx()+0x82>
 800e4f0:	20000650 	andcs	r0, r0, r0, asr r6
 800e4f4:	f67f af34 	bls.w	800e360 <E131Bridge::HandleDmx()+0x108>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f845 3c04 	str.w	r3, [r5, #-4]
 800e4fe:	61ab      	str	r3, [r5, #24]
 800e500:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800e504:	f89a 306c 	ldrb.w	r3, [sl, #108]	@ 0x6c
 800e508:	f889 3020 	strb.w	r3, [r9, #32]
 800e50c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800e510:	9305      	str	r3, [sp, #20]
 800e512:	9b04      	ldr	r3, [sp, #16]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f43f af2a 	beq.w	800e36e <E131Bridge::HandleDmx()+0x116>
 800e51a:	9b06      	ldr	r3, [sp, #24]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d17c      	bne.n	800e61a <E131Bridge::HandleDmx()+0x3c2>
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	2b00      	cmp	r3, #0
 800e524:	f000 8146 	beq.w	800e7b4 <E131Bridge::HandleDmx()+0x55c>
 800e528:	f1bb 0f00 	cmp.w	fp, #0
 800e52c:	f43f af6d 	beq.w	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e530:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e534:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800e538:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e53c:	616b      	str	r3, [r5, #20]
 800e53e:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800e542:	b923      	cbnz	r3, 800e54e <E131Bridge::HandleDmx()+0x2f6>
 800e544:	2301      	movs	r3, #1
 800e546:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800e54a:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800e54e:	2301      	movs	r3, #1
 800e550:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e554:	9b07      	ldr	r3, [sp, #28]
 800e556:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800e55a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 80ee 	beq.w	800e740 <E131Bridge::HandleDmx()+0x4e8>
 800e564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e566:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800e56a:	9b08      	ldr	r3, [sp, #32]
 800e56c:	4450      	add	r0, sl
 800e56e:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e572:	f802 1b01 	strb.w	r1, [r2], #1
 800e576:	4283      	cmp	r3, r0
 800e578:	d1f9      	bne.n	800e56e <E131Bridge::HandleDmx()+0x316>
 800e57a:	9b07      	ldr	r3, [sp, #28]
 800e57c:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e580:	f1bc 0f00 	cmp.w	ip, #0
 800e584:	f000 8158 	beq.w	800e838 <E131Bridge::HandleDmx()+0x5e0>
 800e588:	9a05      	ldr	r2, [sp, #20]
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e590:	f802 1b01 	strb.w	r1, [r2], #1
 800e594:	4283      	cmp	r3, r0
 800e596:	d1f9      	bne.n	800e58c <E131Bridge::HandleDmx()+0x334>
 800e598:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800e59c:	069b      	lsls	r3, r3, #26
 800e59e:	f57f af39 	bpl.w	800e414 <E131Bridge::HandleDmx()+0x1bc>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f889 302c 	strb.w	r3, [r9, #44]	@ 0x2c
 800e5a8:	f899 302b 	ldrb.w	r3, [r9, #43]	@ 0x2b
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 808a 	beq.w	800e6c6 <E131Bridge::HandleDmx()+0x46e>
 800e5b2:	f8d9 0bbc 	ldr.w	r0, [r9, #3004]	@ 0xbbc
 800e5b6:	f899 202f 	ldrb.w	r2, [r9, #47]	@ 0x2f
 800e5ba:	6803      	ldr	r3, [r0, #0]
 800e5bc:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800e5c0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 800e5c4:	2a00      	cmp	r2, #0
 800e5c6:	f000 8083 	beq.w	800e6d0 <E131Bridge::HandleDmx()+0x478>
 800e5ca:	6803      	ldr	r3, [r0, #0]
 800e5cc:	9a05      	ldr	r2, [sp, #20]
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	9100      	str	r1, [sp, #0]
 800e5d2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800e5d6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 800e5da:	4631      	mov	r1, r6
 800e5dc:	47d8      	blx	fp
 800e5de:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 800e5e2:	b95b      	cbnz	r3, 800e5fc <E131Bridge::HandleDmx()+0x3a4>
 800e5e4:	f8d9 0bbc 	ldr.w	r0, [r9, #3004]	@ 0xbbc
 800e5e8:	6803      	ldr	r3, [r0, #0]
 800e5ea:	4631      	mov	r1, r6
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	4798      	blx	r3
 800e5f0:	f04f 0301 	mov.w	r3, #1
 800e5f4:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
 800e5f8:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800e5fc:	f899 3021 	ldrb.w	r3, [r9, #33]	@ 0x21
 800e600:	f043 0302 	orr.w	r3, r3, #2
 800e604:	f889 3021 	strb.w	r3, [r9, #33]	@ 0x21
 800e608:	e63f      	b.n	800e28a <E131Bridge::HandleDmx()+0x32>
 800e60a:	b00b      	add	sp, #44	@ 0x2c
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	fab1 fb81 	clz	fp, r1
 800e614:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800e618:	e65f      	b.n	800e2da <E131Bridge::HandleDmx()+0x82>
 800e61a:	9b03      	ldr	r3, [sp, #12]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f040 8093 	bne.w	800e748 <E131Bridge::HandleDmx()+0x4f0>
 800e622:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e626:	742b      	strb	r3, [r5, #16]
 800e628:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e62c:	f845 3c08 	str.w	r3, [r5, #-8]
 800e630:	9b07      	ldr	r3, [sp, #28]
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 8084 	beq.w	800e740 <E131Bridge::HandleDmx()+0x4e8>
 800e638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63a:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800e63e:	9b08      	ldr	r3, [sp, #32]
 800e640:	4452      	add	r2, sl
 800e642:	4639      	mov	r1, r7
 800e644:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e648:	f801 0b01 	strb.w	r0, [r1], #1
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d1f9      	bne.n	800e644 <E131Bridge::HandleDmx()+0x3ec>
 800e650:	9b07      	ldr	r3, [sp, #28]
 800e652:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e656:	9905      	ldr	r1, [sp, #20]
 800e658:	9b08      	ldr	r3, [sp, #32]
 800e65a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e65e:	f801 0b01 	strb.w	r0, [r1], #1
 800e662:	4293      	cmp	r3, r2
 800e664:	d1f9      	bne.n	800e65a <E131Bridge::HandleDmx()+0x402>
 800e666:	e6d0      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e668:	f1bb 0f00 	cmp.w	fp, #0
 800e66c:	f43f ae8b 	beq.w	800e386 <E131Bridge::HandleDmx()+0x12e>
 800e670:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e674:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800e678:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e67c:	616b      	str	r3, [r5, #20]
 800e67e:	9b07      	ldr	r3, [sp, #28]
 800e680:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800e684:	2b00      	cmp	r3, #0
 800e686:	d05b      	beq.n	800e740 <E131Bridge::HandleDmx()+0x4e8>
 800e688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e68a:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800e68e:	9b08      	ldr	r3, [sp, #32]
 800e690:	4452      	add	r2, sl
 800e692:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e696:	f801 0b01 	strb.w	r0, [r1], #1
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d1f9      	bne.n	800e692 <E131Bridge::HandleDmx()+0x43a>
 800e69e:	9b07      	ldr	r3, [sp, #28]
 800e6a0:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e6a4:	9905      	ldr	r1, [sp, #20]
 800e6a6:	9b08      	ldr	r3, [sp, #32]
 800e6a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e6ac:	f801 0b01 	strb.w	r0, [r1], #1
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d1f9      	bne.n	800e6a8 <E131Bridge::HandleDmx()+0x450>
 800e6b4:	e6a9      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e6b6:	4659      	mov	r1, fp
 800e6b8:	f04f 0b01 	mov.w	fp, #1
 800e6bc:	465a      	mov	r2, fp
 800e6be:	4648      	mov	r0, r9
 800e6c0:	f7ff fd38 	bl	800e134 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800e6c4:	e5e1      	b.n	800e28a <E131Bridge::HandleDmx()+0x32>
 800e6c6:	f8d9 0bbc 	ldr.w	r0, [r9, #3004]	@ 0xbbc
 800e6ca:	e77e      	b.n	800e5ca <E131Bridge::HandleDmx()+0x372>
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	e7f5      	b.n	800e6bc <E131Bridge::HandleDmx()+0x464>
 800e6d0:	9200      	str	r2, [sp, #0]
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	9a05      	ldr	r2, [sp, #20]
 800e6d6:	47d8      	blx	fp
 800e6d8:	2301      	movs	r3, #1
 800e6da:	f885 303a 	strb.w	r3, [r5, #58]	@ 0x3a
 800e6de:	e78d      	b.n	800e5fc <E131Bridge::HandleDmx()+0x3a4>
 800e6e0:	f8d9 3bb8 	ldr.w	r3, [r9, #3000]	@ 0xbb8
 800e6e4:	f845 3c04 	str.w	r3, [r5, #-4]
 800e6e8:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e6ec:	742b      	strb	r3, [r5, #16]
 800e6ee:	f10a 0216 	add.w	r2, sl, #22
 800e6f2:	462b      	mov	r3, r5
 800e6f4:	f105 0010 	add.w	r0, r5, #16
 800e6f8:	f852 1b04 	ldr.w	r1, [r2], #4
 800e6fc:	f843 1b04 	str.w	r1, [r3], #4
 800e700:	4283      	cmp	r3, r0
 800e702:	d1f9      	bne.n	800e6f8 <E131Bridge::HandleDmx()+0x4a0>
 800e704:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e708:	f845 3c08 	str.w	r3, [r5, #-8]
 800e70c:	9b07      	ldr	r3, [sp, #28]
 800e70e:	b1bb      	cbz	r3, 800e740 <E131Bridge::HandleDmx()+0x4e8>
 800e710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e712:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800e716:	9b08      	ldr	r3, [sp, #32]
 800e718:	4452      	add	r2, sl
 800e71a:	4639      	mov	r1, r7
 800e71c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e720:	f801 0b01 	strb.w	r0, [r1], #1
 800e724:	4293      	cmp	r3, r2
 800e726:	d1f9      	bne.n	800e71c <E131Bridge::HandleDmx()+0x4c4>
 800e728:	9b07      	ldr	r3, [sp, #28]
 800e72a:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e72e:	9905      	ldr	r1, [sp, #20]
 800e730:	9b08      	ldr	r3, [sp, #32]
 800e732:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e736:	f801 0b01 	strb.w	r0, [r1], #1
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d1f9      	bne.n	800e732 <E131Bridge::HandleDmx()+0x4da>
 800e73e:	e664      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e740:	9b07      	ldr	r3, [sp, #28]
 800e742:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e746:	e660      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e748:	f1bb 0f00 	cmp.w	fp, #0
 800e74c:	f47f ae5d 	bne.w	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e750:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e754:	742b      	strb	r3, [r5, #16]
 800e756:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e75a:	f845 3c08 	str.w	r3, [r5, #-8]
 800e75e:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800e762:	b923      	cbnz	r3, 800e76e <E131Bridge::HandleDmx()+0x516>
 800e764:	2301      	movs	r3, #1
 800e766:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800e76a:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800e76e:	2301      	movs	r3, #1
 800e770:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e774:	9b07      	ldr	r3, [sp, #28]
 800e776:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d0e0      	beq.n	800e740 <E131Bridge::HandleDmx()+0x4e8>
 800e77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e780:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800e784:	9b08      	ldr	r3, [sp, #32]
 800e786:	4450      	add	r0, sl
 800e788:	463a      	mov	r2, r7
 800e78a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e78e:	f802 1b01 	strb.w	r1, [r2], #1
 800e792:	4283      	cmp	r3, r0
 800e794:	d1f9      	bne.n	800e78a <E131Bridge::HandleDmx()+0x532>
 800e796:	9b07      	ldr	r3, [sp, #28]
 800e798:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e79c:	f1bc 0f00 	cmp.w	ip, #0
 800e7a0:	d057      	beq.n	800e852 <E131Bridge::HandleDmx()+0x5fa>
 800e7a2:	9a05      	ldr	r2, [sp, #20]
 800e7a4:	9b08      	ldr	r3, [sp, #32]
 800e7a6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e7aa:	f802 1b01 	strb.w	r1, [r2], #1
 800e7ae:	4283      	cmp	r3, r0
 800e7b0:	d1f9      	bne.n	800e7a6 <E131Bridge::HandleDmx()+0x54e>
 800e7b2:	e62a      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e7b4:	f8d9 3bb8 	ldr.w	r3, [r9, #3000]	@ 0xbb8
 800e7b8:	61ab      	str	r3, [r5, #24]
 800e7ba:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e7be:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800e7c2:	f105 021c 	add.w	r2, r5, #28
 800e7c6:	f10a 0316 	add.w	r3, sl, #22
 800e7ca:	f10a 0026 	add.w	r0, sl, #38	@ 0x26
 800e7ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800e7d2:	f842 1b04 	str.w	r1, [r2], #4
 800e7d6:	4298      	cmp	r0, r3
 800e7d8:	d1f9      	bne.n	800e7ce <E131Bridge::HandleDmx()+0x576>
 800e7da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e7de:	616b      	str	r3, [r5, #20]
 800e7e0:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800e7e4:	b923      	cbnz	r3, 800e7f0 <E131Bridge::HandleDmx()+0x598>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800e7ec:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e7f6:	9b07      	ldr	r3, [sp, #28]
 800e7f8:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800e7fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800e800:	2b00      	cmp	r3, #0
 800e802:	d09d      	beq.n	800e740 <E131Bridge::HandleDmx()+0x4e8>
 800e804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e806:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800e80a:	9b08      	ldr	r3, [sp, #32]
 800e80c:	4450      	add	r0, sl
 800e80e:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e812:	f802 1b01 	strb.w	r1, [r2], #1
 800e816:	4283      	cmp	r3, r0
 800e818:	d1f9      	bne.n	800e80e <E131Bridge::HandleDmx()+0x5b6>
 800e81a:	9b07      	ldr	r3, [sp, #28]
 800e81c:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e820:	f1bc 0f00 	cmp.w	ip, #0
 800e824:	d02c      	beq.n	800e880 <E131Bridge::HandleDmx()+0x628>
 800e826:	9a05      	ldr	r2, [sp, #20]
 800e828:	9b08      	ldr	r3, [sp, #32]
 800e82a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e82e:	f802 1b01 	strb.w	r1, [r2], #1
 800e832:	4283      	cmp	r3, r0
 800e834:	d1f9      	bne.n	800e82a <E131Bridge::HandleDmx()+0x5d2>
 800e836:	e5e8      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e838:	1e7b      	subs	r3, r7, #1
 800e83a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e83e:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800e842:	428a      	cmp	r2, r1
 800e844:	bf38      	it	cc
 800e846:	460a      	movcc	r2, r1
 800e848:	4543      	cmp	r3, r8
 800e84a:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800e84e:	d1f4      	bne.n	800e83a <E131Bridge::HandleDmx()+0x5e2>
 800e850:	e5db      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e852:	1e7b      	subs	r3, r7, #1
 800e854:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e858:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800e85c:	428a      	cmp	r2, r1
 800e85e:	bf38      	it	cc
 800e860:	460a      	movcc	r2, r1
 800e862:	4598      	cmp	r8, r3
 800e864:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800e868:	d1f4      	bne.n	800e854 <E131Bridge::HandleDmx()+0x5fc>
 800e86a:	e5ce      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e86c:	69aa      	ldr	r2, [r5, #24]
 800e86e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800e872:	3a00      	subs	r2, #0
 800e874:	bf18      	it	ne
 800e876:	2201      	movne	r2, #1
 800e878:	3900      	subs	r1, #0
 800e87a:	bf18      	it	ne
 800e87c:	2101      	movne	r1, #1
 800e87e:	e5de      	b.n	800e43e <E131Bridge::HandleDmx()+0x1e6>
 800e880:	1e7b      	subs	r3, r7, #1
 800e882:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e886:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800e88a:	428a      	cmp	r2, r1
 800e88c:	bf38      	it	cc
 800e88e:	460a      	movcc	r2, r1
 800e890:	4543      	cmp	r3, r8
 800e892:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800e896:	d1f4      	bne.n	800e882 <E131Bridge::HandleDmx()+0x62a>
 800e898:	e5b7      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>
 800e89a:	1e7b      	subs	r3, r7, #1
 800e89c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e8a0:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800e8a4:	428a      	cmp	r2, r1
 800e8a6:	bf38      	it	cc
 800e8a8:	460a      	movcc	r2, r1
 800e8aa:	4543      	cmp	r3, r8
 800e8ac:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800e8b0:	d1f4      	bne.n	800e89c <E131Bridge::HandleDmx()+0x644>
 800e8b2:	e5aa      	b.n	800e40a <E131Bridge::HandleDmx()+0x1b2>

0800e8b4 <E131Bridge::IsValidRoot()>:
 800e8b4:	b410      	push	{r4}
 800e8b6:	f8d0 4bb4 	ldr.w	r4, [r0, #2996]	@ 0xbb4
 800e8ba:	4a11      	ldr	r2, [pc, #68]	@ (800e900 <E131Bridge::IsValidRoot()+0x4c>)
 800e8bc:	1ce3      	adds	r3, r4, #3
 800e8be:	f104 0c0f 	add.w	ip, r4, #15
 800e8c2:	e001      	b.n	800e8c8 <E131Bridge::IsValidRoot()+0x14>
 800e8c4:	4563      	cmp	r3, ip
 800e8c6:	d009      	beq.n	800e8dc <E131Bridge::IsValidRoot()+0x28>
 800e8c8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e8cc:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e8d0:	4288      	cmp	r0, r1
 800e8d2:	d0f7      	beq.n	800e8c4 <E131Bridge::IsValidRoot()+0x10>
 800e8d4:	2000      	movs	r0, #0
 800e8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8da:	4770      	bx	lr
 800e8dc:	f8d4 0012 	ldr.w	r0, [r4, #18]
 800e8e0:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800e8e4:	d007      	beq.n	800e8f6 <E131Bridge::IsValidRoot()+0x42>
 800e8e6:	f1a0 6000 	sub.w	r0, r0, #134217728	@ 0x8000000
 800e8ea:	fab0 f080 	clz	r0, r0
 800e8ee:	0940      	lsrs	r0, r0, #5
 800e8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8f4:	4770      	bx	lr
 800e8f6:	2001      	movs	r0, #1
 800e8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	0801e9d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, sp, lr, pc}

0800e904 <E131Bridge::Process()>:
 800e904:	f890 202b 	ldrb.w	r2, [r0, #43]	@ 0x2b
 800e908:	6843      	ldr	r3, [r0, #4]
 800e90a:	2100      	movs	r1, #0
 800e90c:	b510      	push	{r4, lr}
 800e90e:	4604      	mov	r4, r0
 800e910:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e914:	6083      	str	r3, [r0, #8]
 800e916:	b112      	cbz	r2, 800e91e <E131Bridge::Process()+0x1a>
 800e918:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800e91c:	b1ea      	cbz	r2, 800e95a <E131Bridge::Process()+0x56>
 800e91e:	f8d4 3bbc 	ldr.w	r3, [r4, #3004]	@ 0xbbc
 800e922:	b14b      	cbz	r3, 800e938 <E131Bridge::Process()+0x34>
 800e924:	f8d4 3bb4 	ldr.w	r3, [r4, #2996]	@ 0xbb4
 800e928:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800e92c:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800e930:	d01c      	beq.n	800e96c <E131Bridge::Process()+0x68>
 800e932:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 800e936:	d033      	beq.n	800e9a0 <E131Bridge::Process()+0x9c>
 800e938:	f894 3bb0 	ldrb.w	r3, [r4, #2992]	@ 0xbb0
 800e93c:	b163      	cbz	r3, 800e958 <E131Bridge::Process()+0x54>
 800e93e:	4b1c      	ldr	r3, [pc, #112]	@ (800e9b0 <E131Bridge::Process()+0xac>)
 800e940:	6818      	ldr	r0, [r3, #0]
 800e942:	6943      	ldr	r3, [r0, #20]
 800e944:	2b04      	cmp	r3, #4
 800e946:	d007      	beq.n	800e958 <E131Bridge::Process()+0x54>
 800e948:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800e94c:	bb1b      	cbnz	r3, 800e996 <E131Bridge::Process()+0x92>
 800e94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e952:	2102      	movs	r1, #2
 800e954:	f009 bc12 	b.w	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800e958:	bd10      	pop	{r4, pc}
 800e95a:	6900      	ldr	r0, [r0, #16]
 800e95c:	f640 11c3 	movw	r1, #2499	@ 0x9c3
 800e960:	1a1b      	subs	r3, r3, r0
 800e962:	428b      	cmp	r3, r1
 800e964:	bf88      	it	hi
 800e966:	f884 202b 	strbhi.w	r2, [r4, #43]	@ 0x2b
 800e96a:	e7d8      	b.n	800e91e <E131Bridge::Process()+0x1a>
 800e96c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800e970:	2a02      	cmp	r2, #2
 800e972:	d1e1      	bne.n	800e938 <E131Bridge::Process()+0x34>
 800e974:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 800e978:	2aa1      	cmp	r2, #161	@ 0xa1
 800e97a:	d1dd      	bne.n	800e938 <E131Bridge::Process()+0x34>
 800e97c:	f8b3 2077 	ldrh.w	r2, [r3, #119]	@ 0x77
 800e980:	2a00      	cmp	r2, #0
 800e982:	d1d9      	bne.n	800e938 <E131Bridge::Process()+0x34>
 800e984:	f8b3 3079 	ldrh.w	r3, [r3, #121]	@ 0x79
 800e988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e98c:	d1d4      	bne.n	800e938 <E131Bridge::Process()+0x34>
 800e98e:	4620      	mov	r0, r4
 800e990:	f7ff fc62 	bl	800e258 <E131Bridge::HandleDmx()>
 800e994:	e7d0      	b.n	800e938 <E131Bridge::Process()+0x34>
 800e996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e99a:	2103      	movs	r1, #3
 800e99c:	f009 bbee 	b.w	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800e9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e9a6:	d1c7      	bne.n	800e938 <E131Bridge::Process()+0x34>
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	f000 f803 	bl	800e9b4 <E131Bridge::HandleSynchronization()>
 800e9ae:	e7c3      	b.n	800e938 <E131Bridge::Process()+0x34>
 800e9b0:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800e9b4 <E131Bridge::HandleSynchronization()>:
 800e9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b8:	f8d0 3bb4 	ldr.w	r3, [r0, #2996]	@ 0xbb4
 800e9bc:	8b42      	ldrh	r2, [r0, #26]
 800e9be:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 800e9c2:	ba5b      	rev16	r3, r3
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	4604      	mov	r4, r0
 800e9ca:	d009      	beq.n	800e9e0 <E131Bridge::HandleSynchronization()+0x2c>
 800e9cc:	8b82      	ldrh	r2, [r0, #28]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d006      	beq.n	800e9e0 <E131Bridge::HandleSynchronization()+0x2c>
 800e9d2:	4b1f      	ldr	r3, [pc, #124]	@ (800ea50 <E131Bridge::HandleSynchronization()+0x9c>)
 800e9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d8:	6818      	ldr	r0, [r3, #0]
 800e9da:	2102      	movs	r1, #2
 800e9dc:	f009 bbce 	b.w	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 800e9e0:	6863      	ldr	r3, [r4, #4]
 800e9e2:	6123      	str	r3, [r4, #16]
 800e9e4:	2500      	movs	r5, #0
 800e9e6:	f504 76f9 	add.w	r6, r4, #498	@ 0x1f2
 800e9ea:	2744      	movs	r7, #68	@ 0x44
 800e9ec:	fb07 f305 	mul.w	r3, r7, r5
 800e9f0:	5cf3      	ldrb	r3, [r6, r3]
 800e9f2:	b12b      	cbz	r3, 800ea00 <E131Bridge::HandleSynchronization()+0x4c>
 800e9f4:	f8d4 0bbc 	ldr.w	r0, [r4, #3004]	@ 0xbbc
 800e9f8:	6803      	ldr	r3, [r0, #0]
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	4798      	blx	r3
 800ea00:	3501      	adds	r5, #1
 800ea02:	2d20      	cmp	r5, #32
 800ea04:	d1f2      	bne.n	800e9ec <E131Bridge::HandleSynchronization()+0x38>
 800ea06:	f8d4 0bbc 	ldr.w	r0, [r4, #3004]	@ 0xbbc
 800ea0a:	6803      	ldr	r3, [r0, #0]
 800ea0c:	699b      	ldr	r3, [r3, #24]
 800ea0e:	4798      	blx	r3
 800ea10:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 800ea14:	f504 6123 	add.w	r1, r4, #2608	@ 0xa30
 800ea18:	2000      	movs	r0, #0
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	428b      	cmp	r3, r1
 800ea1e:	d107      	bne.n	800ea30 <E131Bridge::HandleSynchronization()+0x7c>
 800ea20:	f8d4 0bc0 	ldr.w	r0, [r4, #3008]	@ 0xbc0
 800ea24:	b190      	cbz	r0, 800ea4c <E131Bridge::HandleSynchronization()+0x98>
 800ea26:	6803      	ldr	r3, [r0, #0]
 800ea28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	4718      	bx	r3
 800ea30:	f893 5042 	ldrb.w	r5, [r3, #66]	@ 0x42
 800ea34:	b145      	cbz	r5, 800ea48 <E131Bridge::HandleSynchronization()+0x94>
 800ea36:	f893 5041 	ldrb.w	r5, [r3, #65]	@ 0x41
 800ea3a:	f883 0042 	strb.w	r0, [r3, #66]	@ 0x42
 800ea3e:	b91d      	cbnz	r5, 800ea48 <E131Bridge::HandleSynchronization()+0x94>
 800ea40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea44:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ea48:	3344      	adds	r3, #68	@ 0x44
 800ea4a:	e7e7      	b.n	800ea1c <E131Bridge::HandleSynchronization()+0x68>
 800ea4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea50:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800ea54 <E131Bridge::Print()>:
 800ea54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea58:	4b19      	ldr	r3, [pc, #100]	@ (800eac0 <E131Bridge::Print()+0x6c>)
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	785a      	ldrb	r2, [r3, #1]
 800ea5e:	7819      	ldrb	r1, [r3, #0]
 800ea60:	4818      	ldr	r0, [pc, #96]	@ (800eac4 <E131Bridge::Print()+0x70>)
 800ea62:	f00c f8e1 	bl	801ac28 <printf>
 800ea66:	7fe3      	ldrb	r3, [r4, #31]
 800ea68:	b1fb      	cbz	r3, 800eaaa <E131Bridge::Print()+0x56>
 800ea6a:	4817      	ldr	r0, [pc, #92]	@ (800eac8 <E131Bridge::Print()+0x74>)
 800ea6c:	4f17      	ldr	r7, [pc, #92]	@ (800eacc <E131Bridge::Print()+0x78>)
 800ea6e:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800ead4 <E131Bridge::Print()+0x80>
 800ea72:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800ead8 <E131Bridge::Print()+0x84>
 800ea76:	f00c f8d7 	bl	801ac28 <printf>
 800ea7a:	4626      	mov	r6, r4
 800ea7c:	2500      	movs	r5, #0
 800ea7e:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d10d      	bne.n	800eaa0 <E131Bridge::Print()+0x4c>
 800ea84:	2344      	movs	r3, #68	@ 0x44
 800ea86:	f504 72f4 	add.w	r2, r4, #488	@ 0x1e8
 800ea8a:	436b      	muls	r3, r5
 800ea8c:	4629      	mov	r1, r5
 800ea8e:	58d3      	ldr	r3, [r2, r3]
 800ea90:	8e32      	ldrh	r2, [r6, #48]	@ 0x30
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	bf14      	ite	ne
 800ea96:	463b      	movne	r3, r7
 800ea98:	4643      	moveq	r3, r8
 800ea9a:	4648      	mov	r0, r9
 800ea9c:	f00c f8c4 	bl	801ac28 <printf>
 800eaa0:	3501      	adds	r5, #1
 800eaa2:	2d20      	cmp	r5, #32
 800eaa4:	f106 060c 	add.w	r6, r6, #12
 800eaa8:	d1e9      	bne.n	800ea7e <E131Bridge::Print()+0x2a>
 800eaaa:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800eaae:	b123      	cbz	r3, 800eaba <E131Bridge::Print()+0x66>
 800eab0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eab4:	4806      	ldr	r0, [pc, #24]	@ (800ead0 <E131Bridge::Print()+0x7c>)
 800eab6:	f00c b8b7 	b.w	801ac28 <printf>
 800eaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eabe:	bf00      	nop
 800eac0:	0801e9dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, sp, lr, pc}
 800eac4:	0801bcd8 	stmdaeq	r1, {r3, r4, r6, r7, sl, fp, ip, sp, pc}
 800eac8:	0801bc4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, sl, fp, ip, sp, pc}
 800eacc:	0801bc11 	stmdaeq	r1, {r0, r4, sl, fp, ip, sp, pc}
 800ead0:	0801bd00 	stmdaeq	r1, {r8, sl, fp, ip, sp, pc}
 800ead4:	0801bc0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, ip, sp, pc}
 800ead8:	0801bceb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, sl, fp, ip, sp, pc}

0800eadc <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)>:
 800eadc:	b507      	push	{r0, r1, r2, lr}
 800eade:	2300      	movs	r3, #0
 800eae0:	2101      	movs	r1, #1
 800eae2:	e9cd 3100 	strd	r3, r1, [sp]
 800eae6:	4602      	mov	r2, r0
 800eae8:	4804      	ldr	r0, [pc, #16]	@ (800eafc <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)+0x20>)
 800eaea:	2329      	movs	r3, #41	@ 0x29
 800eaec:	6800      	ldr	r0, [r0, #0]
 800eaee:	2109      	movs	r1, #9
 800eaf0:	f008 fb60 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800eaf4:	b003      	add	sp, #12
 800eaf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800eafa:	bf00      	nop
 800eafc:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800eb00 <RDMDeviceParams::RDMDeviceParams()>:
 800eb00:	b510      	push	{r4, lr}
 800eb02:	2225      	movs	r2, #37	@ 0x25
 800eb04:	4604      	mov	r4, r0
 800eb06:	2100      	movs	r1, #0
 800eb08:	f00b fdaa 	bl	801a660 <memset>
 800eb0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb10:	237f      	movs	r3, #127	@ 0x7f
 800eb12:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 800eb16:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 800eb1a:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
 800eb1e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800eb22:	4620      	mov	r0, r4
 800eb24:	bd10      	pop	{r4, pc}

0800eb26 <RDMDeviceParams::Load()>:
 800eb26:	b508      	push	{r3, lr}
 800eb28:	f7ff ffd8 	bl	800eadc <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)>
 800eb2c:	bd08      	pop	{r3, pc}
	...

0800eb30 <RDMDeviceParams::Set(RDMDevice*)>:
 800eb30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb34:	6803      	ldr	r3, [r0, #0]
 800eb36:	460c      	mov	r4, r1
 800eb38:	07d9      	lsls	r1, r3, #31
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	d52d      	bpl.n	800eb9c <RDMDeviceParams::Set(RDMDevice*)+0x6c>
 800eb40:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 800eb44:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800eb48:	2e20      	cmp	r6, #32
 800eb4a:	f100 0104 	add.w	r1, r0, #4
 800eb4e:	bf28      	it	cs
 800eb50:	2620      	movcs	r6, #32
 800eb52:	b39b      	cbz	r3, 800ebbc <RDMDeviceParams::Set(RDMDevice*)+0x8c>
 800eb54:	f104 0320 	add.w	r3, r4, #32
 800eb58:	2701      	movs	r7, #1
 800eb5a:	4632      	mov	r2, r6
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f04f 0900 	mov.w	r9, #0
 800eb62:	f00b fd66 	bl	801a632 <memmove>
 800eb66:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
 800eb6a:	e9cd 7901 	strd	r7, r9, [sp, #4]
 800eb6e:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800ebcc <RDMDeviceParams::Set(RDMDevice*)+0x9c>
 800eb72:	9600      	str	r6, [sp, #0]
 800eb74:	4603      	mov	r3, r0
 800eb76:	2204      	movs	r2, #4
 800eb78:	f8d8 0000 	ldr.w	r0, [r8]
 800eb7c:	f88d 6017 	strb.w	r6, [sp, #23]
 800eb80:	2109      	movs	r1, #9
 800eb82:	f008 faf1 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800eb86:	e9cd 7901 	strd	r7, r9, [sp, #4]
 800eb8a:	9700      	str	r7, [sp, #0]
 800eb8c:	f8d8 0000 	ldr.w	r0, [r8]
 800eb90:	f10d 0317 	add.w	r3, sp, #23
 800eb94:	2224      	movs	r2, #36	@ 0x24
 800eb96:	2109      	movs	r1, #9
 800eb98:	f008 fae6 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800eb9c:	682b      	ldr	r3, [r5, #0]
 800eb9e:	079a      	lsls	r2, r3, #30
 800eba0:	bf44      	itt	mi
 800eba2:	f8b5 2025 	ldrhmi.w	r2, [r5, #37]	@ 0x25
 800eba6:	f8a4 2040 	strhmi.w	r2, [r4, #64]	@ 0x40
 800ebaa:	075b      	lsls	r3, r3, #29
 800ebac:	bf44      	itt	mi
 800ebae:	f8b5 3027 	ldrhmi.w	r3, [r5, #39]	@ 0x27
 800ebb2:	f8a4 3042 	strhmi.w	r3, [r4, #66]	@ 0x42
 800ebb6:	b007      	add	sp, #28
 800ebb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebbc:	4632      	mov	r2, r6
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f00b fd37 	bl	801a632 <memmove>
 800ebc4:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
 800ebc8:	e7e8      	b.n	800eb9c <RDMDeviceParams::Set(RDMDevice*)+0x6c>
 800ebca:	bf00      	nop
 800ebcc:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800ebd0 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 800ebd0:	4770      	bx	lr

0800ebd2 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 800ebd2:	4770      	bx	lr

0800ebd4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)>:
 800ebd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	3004      	adds	r0, #4
 800ebda:	460f      	mov	r7, r1
 800ebdc:	4616      	mov	r6, r2
 800ebde:	461d      	mov	r5, r3
 800ebe0:	f001 f870 	bl	800fcc4 <RDMDevice::RDMDevice()>
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	4b24      	ldr	r3, [pc, #144]	@ (800ec78 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa4>)
 800ebe8:	f840 3b57 	str.w	r3, [r0], #87
 800ebec:	f000 fd54 	bl	800f698 <RDMIdentify::RDMIdentify()>
 800ebf0:	4a22      	ldr	r2, [pc, #136]	@ (800ec7c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa8>)
 800ebf2:	66a7      	str	r7, [r4, #104]	@ 0x68
 800ebf4:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800ebf8:	6011      	str	r1, [r2, #0]
 800ebfa:	4a21      	ldr	r2, [pc, #132]	@ (800ec80 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xac>)
 800ebfc:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 800ec00:	6011      	str	r1, [r2, #0]
 800ec02:	4a20      	ldr	r2, [pc, #128]	@ (800ec84 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xb0>)
 800ec04:	6014      	str	r4, [r2, #0]
 800ec06:	2265      	movs	r2, #101	@ 0x65
 800ec08:	f884 2097 	strb.w	r2, [r4, #151]	@ 0x97
 800ec0c:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ec10:	2300      	movs	r3, #0
 800ec12:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ec16:	2201      	movs	r2, #1
 800ec18:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 800ec1c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ec1e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 800ec22:	6623      	str	r3, [r4, #96]	@ 0x60
 800ec24:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 800ec28:	f104 0271 	add.w	r2, r4, #113	@ 0x71
 800ec2c:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 800ec30:	f802 3b01 	strb.w	r3, [r2], #1
 800ec34:	428a      	cmp	r2, r1
 800ec36:	d1fb      	bne.n	800ec30 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0x5c>
 800ec38:	f104 0397 	add.w	r3, r4, #151	@ 0x97
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f801 2b01 	strb.w	r2, [r1], #1
 800ec42:	428b      	cmp	r3, r1
 800ec44:	d1fb      	bne.n	800ec3e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0x6a>
 800ec46:	f884 607e 	strb.w	r6, [r4, #126]	@ 0x7e
 800ec4a:	f884 507d 	strb.w	r5, [r4, #125]	@ 0x7d
 800ec4e:	f7fb fc89 	bl	800a564 <RDMSoftwareVersion::GetVersion()>
 800ec52:	66e0      	str	r0, [r4, #108]	@ 0x6c
 800ec54:	f7fb fc8a 	bl	800a56c <RDMSoftwareVersion::GetVersionLength()>
 800ec58:	f105 4380 	add.w	r3, r5, #1073741824	@ 0x40000000
 800ec5c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800ec5e:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 800ec62:	3b01      	subs	r3, #1
 800ec64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	b91b      	cbnz	r3, 800ec74 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa0>
 800ec6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ec70:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 800ec74:	4620      	mov	r0, r4
 800ec76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec78:	0801e9e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, fp, sp, lr, pc}
 800ec7c:	2000c6f0 	strdcs	ip, [r0], -r0
 800ec80:	2000c6f4 	strdcs	ip, [r0], -r4
 800ec84:	2000c6e4 	andcs	ip, r0, r4, ror #13

0800ec88 <RDMDeviceResponder::Init()>:
 800ec88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
 800ec92:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
 800ec96:	2a20      	cmp	r2, #32
 800ec98:	bf28      	it	cs
 800ec9a:	2220      	movcs	r2, #32
 800ec9c:	b087      	sub	sp, #28
 800ec9e:	3004      	adds	r0, #4
 800eca0:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 800eca4:	4611      	mov	r1, r2
 800eca6:	3901      	subs	r1, #1
 800eca8:	d275      	bcs.n	800ed96 <RDMDeviceResponder::Init()+0x10e>
 800ecaa:	2501      	movs	r5, #1
 800ecac:	2700      	movs	r7, #0
 800ecae:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800ecb2:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800ecb6:	4e49      	ldr	r6, [pc, #292]	@ (800eddc <RDMDeviceResponder::Init()+0x154>)
 800ecb8:	9200      	str	r2, [sp, #0]
 800ecba:	6830      	ldr	r0, [r6, #0]
 800ecbc:	f88d 2017 	strb.w	r2, [sp, #23]
 800ecc0:	2109      	movs	r1, #9
 800ecc2:	2204      	movs	r2, #4
 800ecc4:	f008 fa50 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800ecc8:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800eccc:	9500      	str	r5, [sp, #0]
 800ecce:	6830      	ldr	r0, [r6, #0]
 800ecd0:	f10d 0317 	add.w	r3, sp, #23
 800ecd4:	2224      	movs	r2, #36	@ 0x24
 800ecd6:	2109      	movs	r1, #9
 800ecd8:	f008 fa46 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800ecdc:	f06f 0522 	mvn.w	r5, #34	@ 0x22
 800ece0:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800ece4:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 800ece8:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800ecec:	1b2d      	subs	r5, r5, r4
 800ecee:	18a9      	adds	r1, r5, r2
 800ecf0:	4288      	cmp	r0, r1
 800ecf2:	d854      	bhi.n	800ed9e <RDMDeviceResponder::Init()+0x116>
 800ecf4:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800ecf8:	f7fb fc3a 	bl	800a570 <RDMSoftwareVersion::GetVersionId()>
 800ecfc:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 800ed00:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
 800ed04:	2201      	movs	r2, #1
 800ed06:	f884 2071 	strb.w	r2, [r4, #113]	@ 0x71
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
 800ed10:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
 800ed14:	0a1a      	lsrs	r2, r3, #8
 800ed16:	0e03      	lsrs	r3, r0, #24
 800ed18:	f884 3077 	strb.w	r3, [r4, #119]	@ 0x77
 800ed1c:	0c03      	lsrs	r3, r0, #16
 800ed1e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
 800ed22:	0a03      	lsrs	r3, r0, #8
 800ed24:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
 800ed28:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800ed2c:	f884 2075 	strb.w	r2, [r4, #117]	@ 0x75
 800ed30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed34:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800ed36:	f884 007a 	strb.w	r0, [r4, #122]	@ 0x7a
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	f8b4 6064 	ldrh.w	r6, [r4, #100]	@ 0x64
 800ed40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed44:	685d      	ldr	r5, [r3, #4]
 800ed46:	bb7d      	cbnz	r5, 800eda8 <RDMDeviceResponder::Init()+0x120>
 800ed48:	f8b4 009c 	ldrh.w	r0, [r4, #156]	@ 0x9c
 800ed4c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800ed50:	0a03      	lsrs	r3, r0, #8
 800ed52:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
 800ed56:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
 800ed5a:	0a33      	lsrs	r3, r6, #8
 800ed5c:	b2c0      	uxtb	r0, r0
 800ed5e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
 800ed62:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800ed66:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
 800ed6a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
 800ed6e:	f884 6082 	strb.w	r6, [r4, #130]	@ 0x82
 800ed72:	f104 0371 	add.w	r3, r4, #113	@ 0x71
 800ed76:	f104 0284 	add.w	r2, r4, #132	@ 0x84
 800ed7a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ed7e:	7499      	strb	r1, [r3, #18]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d1fa      	bne.n	800ed7a <RDMDeviceResponder::Init()+0xf2>
 800ed84:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800ed88:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800ed8c:	4413      	add	r3, r2
 800ed8e:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800ed92:	b007      	add	sp, #28
 800ed94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed96:	f810 5b01 	ldrb.w	r5, [r0], #1
 800ed9a:	77c5      	strb	r5, [r0, #31]
 800ed9c:	e783      	b.n	800eca6 <RDMDeviceResponder::Init()+0x1e>
 800ed9e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800eda2:	440b      	add	r3, r1
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	e7a2      	b.n	800ecee <RDMDeviceResponder::Init()+0x66>
 800eda8:	682b      	ldr	r3, [r5, #0]
 800edaa:	4628      	mov	r0, r5
 800edac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edae:	4798      	blx	r3
 800edb0:	0a00      	lsrs	r0, r0, #8
 800edb2:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 800edb6:	682b      	ldr	r3, [r5, #0]
 800edb8:	4628      	mov	r0, r5
 800edba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edbc:	4798      	blx	r3
 800edbe:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 800edc2:	682b      	ldr	r3, [r5, #0]
 800edc4:	4628      	mov	r0, r5
 800edc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edc8:	4798      	blx	r3
 800edca:	0a00      	lsrs	r0, r0, #8
 800edcc:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
 800edd0:	682b      	ldr	r3, [r5, #0]
 800edd2:	4628      	mov	r0, r5
 800edd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edd6:	4798      	blx	r3
 800edd8:	e7bf      	b.n	800ed5a <RDMDeviceResponder::Init()+0xd2>
 800edda:	bf00      	nop
 800eddc:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800ede0 <RDMDeviceResponder::Print()>:
 800ede0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ede2:	4604      	mov	r4, r0
 800ede4:	3004      	adds	r0, #4
 800ede6:	f000 ffbd 	bl	800fd64 <RDMDevice::Print()>
 800edea:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800edee:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800edf0:	481b      	ldr	r0, [pc, #108]	@ (800ee60 <RDMDeviceResponder::Print()+0x80>)
 800edf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edf6:	3b01      	subs	r3, #1
 800edf8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800edfc:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 800edfe:	f00b ff68 	bl	801acd2 <puts>
 800ee02:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 800ee06:	f894 1071 	ldrb.w	r1, [r4, #113]	@ 0x71
 800ee0a:	4816      	ldr	r0, [pc, #88]	@ (800ee64 <RDMDeviceResponder::Print()+0x84>)
 800ee0c:	f00b ff0c 	bl	801ac28 <printf>
 800ee10:	f8b4 107f 	ldrh.w	r1, [r4, #127]	@ 0x7f
 800ee14:	4814      	ldr	r0, [pc, #80]	@ (800ee68 <RDMDeviceResponder::Print()+0x88>)
 800ee16:	ba49      	rev16	r1, r1
 800ee18:	b289      	uxth	r1, r1
 800ee1a:	f00b ff05 	bl	801ac28 <printf>
 800ee1e:	f8b4 107b 	ldrh.w	r1, [r4, #123]	@ 0x7b
 800ee22:	4812      	ldr	r0, [pc, #72]	@ (800ee6c <RDMDeviceResponder::Print()+0x8c>)
 800ee24:	ba49      	rev16	r1, r1
 800ee26:	b289      	uxth	r1, r1
 800ee28:	3508      	adds	r5, #8
 800ee2a:	f00b fefd 	bl	801ac28 <printf>
 800ee2e:	9500      	str	r5, [sp, #0]
 800ee30:	f894 207e 	ldrb.w	r2, [r4, #126]	@ 0x7e
 800ee34:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 800ee38:	480d      	ldr	r0, [pc, #52]	@ (800ee70 <RDMDeviceResponder::Print()+0x90>)
 800ee3a:	b2f3      	uxtb	r3, r6
 800ee3c:	f00b fef4 	bl	801ac28 <printf>
 800ee40:	f8b4 1081 	ldrh.w	r1, [r4, #129]	@ 0x81
 800ee44:	480b      	ldr	r0, [pc, #44]	@ (800ee74 <RDMDeviceResponder::Print()+0x94>)
 800ee46:	ba49      	rev16	r1, r1
 800ee48:	b289      	uxth	r1, r1
 800ee4a:	f00b feed 	bl	801ac28 <printf>
 800ee4e:	f894 1083 	ldrb.w	r1, [r4, #131]	@ 0x83
 800ee52:	4809      	ldr	r0, [pc, #36]	@ (800ee78 <RDMDeviceResponder::Print()+0x98>)
 800ee54:	b002      	add	sp, #8
 800ee56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee5a:	f00b bee5 	b.w	801ac28 <printf>
 800ee5e:	bf00      	nop
 800ee60:	0801bd1a 	stmdaeq	r1, {r1, r3, r4, r8, sl, fp, ip, sp, pc}
 800ee64:	0801bd36 	stmdaeq	r1, {r1, r2, r4, r5, r8, sl, fp, ip, sp, pc}
 800ee68:	0801bd4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, fp, ip, sp, pc}
 800ee6c:	0801bd67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp, pc}
 800ee70:	0801bd7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp, pc}
 800ee74:	0801bd9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, fp, ip, sp, pc}
 800ee78:	0801bdb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, ip, sp, pc}

0800ee7c <memcpy.isra.0>:
 800ee7c:	440a      	add	r2, r1
 800ee7e:	4291      	cmp	r1, r2
 800ee80:	d100      	bne.n	800ee84 <memcpy.isra.0+0x8>
 800ee82:	4770      	bx	lr
 800ee84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee88:	f800 3b01 	strb.w	r3, [r0], #1
 800ee8c:	e7f7      	b.n	800ee7e <memcpy.isra.0+0x2>
	...

0800ee90 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee94:	790c      	ldrb	r4, [r1, #4]
 800ee96:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 800ee9a:	6809      	ldr	r1, [r1, #0]
 800ee9c:	2c20      	cmp	r4, #32
 800ee9e:	b086      	sub	sp, #24
 800eea0:	4605      	mov	r5, r0
 800eea2:	bf28      	it	cs
 800eea4:	2420      	movcs	r4, #32
 800eea6:	b313      	cbz	r3, 800eeee <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x5e>
 800eea8:	f100 0820 	add.w	r8, r0, #32
 800eeac:	4622      	mov	r2, r4
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f7ff ffe4 	bl	800ee7c <memcpy.isra.0>
 800eeb4:	2700      	movs	r7, #0
 800eeb6:	f885 4050 	strb.w	r4, [r5, #80]	@ 0x50
 800eeba:	2501      	movs	r5, #1
 800eebc:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800eec0:	4e0e      	ldr	r6, [pc, #56]	@ (800eefc <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x6c>)
 800eec2:	9400      	str	r4, [sp, #0]
 800eec4:	6830      	ldr	r0, [r6, #0]
 800eec6:	f88d 4017 	strb.w	r4, [sp, #23]
 800eeca:	4643      	mov	r3, r8
 800eecc:	2204      	movs	r2, #4
 800eece:	2109      	movs	r1, #9
 800eed0:	f008 f94a 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800eed4:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800eed8:	9500      	str	r5, [sp, #0]
 800eeda:	6830      	ldr	r0, [r6, #0]
 800eedc:	f10d 0317 	add.w	r3, sp, #23
 800eee0:	2224      	movs	r2, #36	@ 0x24
 800eee2:	2109      	movs	r1, #9
 800eee4:	f008 f940 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800eee8:	b006      	add	sp, #24
 800eeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeee:	4622      	mov	r2, r4
 800eef0:	f7ff ffc4 	bl	800ee7c <memcpy.isra.0>
 800eef4:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
 800eef8:	e7f6      	b.n	800eee8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x58>
 800eefa:	bf00      	nop
 800eefc:	2000cc34 	andcs	ip, r0, r4, lsr ip

0800ef00 <RDMDeviceResponder::SetFactoryDefaults()>:
 800ef00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef02:	4604      	mov	r4, r0
 800ef04:	4669      	mov	r1, sp
 800ef06:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800ef0a:	f88d 3004 	strb.w	r3, [sp, #4]
 800ef0e:	3004      	adds	r0, #4
 800ef10:	9000      	str	r0, [sp, #0]
 800ef12:	f06f 0522 	mvn.w	r5, #34	@ 0x22
 800ef16:	f7ff ffbb 	bl	800ee90 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800ef1a:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800ef1e:	f894 1054 	ldrb.w	r1, [r4, #84]	@ 0x54
 800ef22:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800ef26:	1b2d      	subs	r5, r5, r4
 800ef28:	18a8      	adds	r0, r5, r2
 800ef2a:	4288      	cmp	r0, r1
 800ef2c:	d361      	bcc.n	800eff2 <RDMDeviceResponder::SetFactoryDefaults()+0xf2>
 800ef2e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800ef32:	2301      	movs	r3, #1
 800ef34:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
 800ef38:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	685d      	ldr	r5, [r3, #4]
 800ef3e:	b1f5      	cbz	r5, 800ef7e <RDMDeviceResponder::SetFactoryDefaults()+0x7e>
 800ef40:	682b      	ldr	r3, [r5, #0]
 800ef42:	4628      	mov	r0, r5
 800ef44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef46:	4798      	blx	r3
 800ef48:	0a00      	lsrs	r0, r0, #8
 800ef4a:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 800ef4e:	682b      	ldr	r3, [r5, #0]
 800ef50:	4628      	mov	r0, r5
 800ef52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef54:	4798      	blx	r3
 800ef56:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 800ef5a:	682b      	ldr	r3, [r5, #0]
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef60:	4798      	blx	r3
 800ef62:	0a00      	lsrs	r0, r0, #8
 800ef64:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
 800ef68:	682b      	ldr	r3, [r5, #0]
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef6e:	4798      	blx	r3
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	4629      	mov	r1, r5
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	4798      	blx	r3
 800ef7e:	f8b4 509c 	ldrh.w	r5, [r4, #156]	@ 0x9c
 800ef82:	1e6b      	subs	r3, r5, #1
 800ef84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef88:	d217      	bcs.n	800efba <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800ef8a:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800ef8e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800ef90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef94:	3b01      	subs	r3, #1
 800ef96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef9a:	6858      	ldr	r0, [r3, #4]
 800ef9c:	b168      	cbz	r0, 800efba <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800ef9e:	6803      	ldr	r3, [r0, #0]
 800efa0:	4629      	mov	r1, r5
 800efa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efa4:	4798      	blx	r3
 800efa6:	b120      	cbz	r0, 800efb2 <RDMDeviceResponder::SetFactoryDefaults()+0xb2>
 800efa8:	0a2b      	lsrs	r3, r5, #8
 800efaa:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
 800efae:	f884 5080 	strb.w	r5, [r4, #128]	@ 0x80
 800efb2:	6823      	ldr	r3, [r4, #0]
 800efb4:	4620      	mov	r0, r4
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	4798      	blx	r3
 800efba:	f104 0171 	add.w	r1, r4, #113	@ 0x71
 800efbe:	2213      	movs	r2, #19
 800efc0:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 800efc4:	f7ff ff5a 	bl	800ee7c <memcpy.isra.0>
 800efc8:	2601      	movs	r6, #1
 800efca:	2100      	movs	r1, #0
 800efcc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800efd0:	4299      	cmp	r1, r3
 800efd2:	d313      	bcc.n	800effc <RDMDeviceResponder::SetFactoryDefaults()+0xfc>
 800efd4:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800efd8:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800efdc:	4413      	add	r3, r2
 800efde:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800efe2:	2301      	movs	r3, #1
 800efe4:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
 800efe8:	b002      	add	sp, #8
 800efea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efee:	f7fb ba99 	b.w	800a524 <rdm::device::responder::factorydefaults()>
 800eff2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800eff6:	4403      	add	r3, r0
 800eff8:	b29b      	uxth	r3, r3
 800effa:	e795      	b.n	800ef28 <RDMDeviceResponder::SetFactoryDefaults()+0x28>
 800effc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800effe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f002:	b193      	cbz	r3, 800f02a <RDMDeviceResponder::SetFactoryDefaults()+0x12a>
 800f004:	7a1a      	ldrb	r2, [r3, #8]
 800f006:	b982      	cbnz	r2, 800f02a <RDMDeviceResponder::SetFactoryDefaults()+0x12a>
 800f008:	f103 0015 	add.w	r0, r3, #21
 800f00c:	f890 5023 	ldrb.w	r5, [r0, #35]	@ 0x23
 800f010:	b125      	cbz	r5, 800f01c <RDMDeviceResponder::SetFactoryDefaults()+0x11c>
 800f012:	3201      	adds	r2, #1
 800f014:	2a20      	cmp	r2, #32
 800f016:	f800 5f01 	strb.w	r5, [r0, #1]!
 800f01a:	d1f7      	bne.n	800f00c <RDMDeviceResponder::SetFactoryDefaults()+0x10c>
 800f01c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800f020:	899a      	ldrh	r2, [r3, #12]
 800f022:	825a      	strh	r2, [r3, #18]
 800f024:	7b9a      	ldrb	r2, [r3, #14]
 800f026:	751a      	strb	r2, [r3, #20]
 800f028:	721e      	strb	r6, [r3, #8]
 800f02a:	3101      	adds	r1, #1
 800f02c:	e7ce      	b.n	800efcc <RDMDeviceResponder::SetFactoryDefaults()+0xcc>

0800f02e <RDMHandler::RDMHandler(bool)>:
 800f02e:	2200      	movs	r2, #0
 800f030:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800f034:	7001      	strb	r1, [r0, #0]
 800f036:	7042      	strb	r2, [r0, #1]
 800f038:	4770      	bx	lr

0800f03a <RDMHandler::HandleString(char const*, unsigned long)>:
 800f03a:	6883      	ldr	r3, [r0, #8]
 800f03c:	f803 2f17 	strb.w	r2, [r3, #23]!
 800f040:	440a      	add	r2, r1
 800f042:	4291      	cmp	r1, r2
 800f044:	d100      	bne.n	800f048 <RDMHandler::HandleString(char const*, unsigned long)+0xe>
 800f046:	4770      	bx	lr
 800f048:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f04c:	f803 0f01 	strb.w	r0, [r3, #1]!
 800f050:	e7f7      	b.n	800f042 <RDMHandler::HandleString(char const*, unsigned long)+0x8>
	...

0800f054 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 800f054:	b570      	push	{r4, r5, r6, lr}
 800f056:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 800f05a:	25cc      	movs	r5, #204	@ 0xcc
 800f05c:	701d      	strb	r5, [r3, #0]
 800f05e:	7825      	ldrb	r5, [r4, #0]
 800f060:	705d      	strb	r5, [r3, #1]
 800f062:	7ba5      	ldrb	r5, [r4, #14]
 800f064:	73dd      	strb	r5, [r3, #15]
 800f066:	2500      	movs	r5, #0
 800f068:	745d      	strb	r5, [r3, #17]
 800f06a:	7c65      	ldrb	r5, [r4, #17]
 800f06c:	749d      	strb	r5, [r3, #18]
 800f06e:	7ca5      	ldrb	r5, [r4, #18]
 800f070:	74dd      	strb	r5, [r3, #19]
 800f072:	7ce5      	ldrb	r5, [r4, #19]
 800f074:	3501      	adds	r5, #1
 800f076:	751d      	strb	r5, [r3, #20]
 800f078:	7d25      	ldrb	r5, [r4, #20]
 800f07a:	755d      	strb	r5, [r3, #21]
 800f07c:	7d65      	ldrb	r5, [r4, #21]
 800f07e:	759d      	strb	r5, [r3, #22]
 800f080:	b119      	cbz	r1, 800f08a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800f082:	1e4d      	subs	r5, r1, #1
 800f084:	2d01      	cmp	r5, #1
 800f086:	d91f      	bls.n	800f0c8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x74>
 800f088:	bd70      	pop	{r4, r5, r6, pc}
 800f08a:	7dda      	ldrb	r2, [r3, #23]
 800f08c:	7419      	strb	r1, [r3, #16]
 800f08e:	3218      	adds	r2, #24
 800f090:	709a      	strb	r2, [r3, #2]
 800f092:	4a14      	ldr	r2, [pc, #80]	@ (800f0e4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x90>)
 800f094:	6812      	ldr	r2, [r2, #0]
 800f096:	1de1      	adds	r1, r4, #7
 800f098:	1c9d      	adds	r5, r3, #2
 800f09a:	3249      	adds	r2, #73	@ 0x49
 800f09c:	340d      	adds	r4, #13
 800f09e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800f0a2:	f805 6f01 	strb.w	r6, [r5, #1]!
 800f0a6:	42a1      	cmp	r1, r4
 800f0a8:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800f0ac:	71ae      	strb	r6, [r5, #6]
 800f0ae:	d1f6      	bne.n	800f09e <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	6884      	ldr	r4, [r0, #8]
 800f0b4:	7899      	ldrb	r1, [r3, #2]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	4291      	cmp	r1, r2
 800f0ba:	d80e      	bhi.n	800f0da <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x86>
 800f0bc:	0a1d      	lsrs	r5, r3, #8
 800f0be:	54a5      	strb	r5, [r4, r2]
 800f0c0:	6882      	ldr	r2, [r0, #8]
 800f0c2:	440a      	add	r2, r1
 800f0c4:	7053      	strb	r3, [r2, #1]
 800f0c6:	e7df      	b.n	800f088 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 800f0c8:	7419      	strb	r1, [r3, #16]
 800f0ca:	2102      	movs	r1, #2
 800f0cc:	251a      	movs	r5, #26
 800f0ce:	75d9      	strb	r1, [r3, #23]
 800f0d0:	0a11      	lsrs	r1, r2, #8
 800f0d2:	709d      	strb	r5, [r3, #2]
 800f0d4:	7619      	strb	r1, [r3, #24]
 800f0d6:	765a      	strb	r2, [r3, #25]
 800f0d8:	e7db      	b.n	800f092 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 800f0da:	5ca5      	ldrb	r5, [r4, r2]
 800f0dc:	442b      	add	r3, r5
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	3201      	adds	r2, #1
 800f0e2:	e7e9      	b.n	800f0b8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 800f0e4:	2000c6e4 	andcs	ip, r0, r4, ror #13

0800f0e8 <RDMHandler::RespondMessageAck()>:
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	f7ff bfb2 	b.w	800f054 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800f0f0 <RDMHandler::GetDeviceInfo(unsigned short)>:
 800f0f0:	4b1c      	ldr	r3, [pc, #112]	@ (800f164 <RDMHandler::GetDeviceInfo(unsigned short)+0x74>)
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	b351      	cbz	r1, 800f150 <RDMHandler::GetDeviceInfo(unsigned short)+0x60>
 800f0fa:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800f0fe:	3901      	subs	r1, #1
 800f100:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f102:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f106:	8a11      	ldrh	r1, [r2, #16]
 800f108:	0a09      	lsrs	r1, r1, #8
 800f10a:	f883 108e 	strb.w	r1, [r3, #142]	@ 0x8e
 800f10e:	8a11      	ldrh	r1, [r2, #16]
 800f110:	f883 108f 	strb.w	r1, [r3, #143]	@ 0x8f
 800f114:	7d11      	ldrb	r1, [r2, #20]
 800f116:	f883 1090 	strb.w	r1, [r3, #144]	@ 0x90
 800f11a:	7d51      	ldrb	r1, [r2, #21]
 800f11c:	f883 1091 	strb.w	r1, [r3, #145]	@ 0x91
 800f120:	8a51      	ldrh	r1, [r2, #18]
 800f122:	0a09      	lsrs	r1, r1, #8
 800f124:	f883 1092 	strb.w	r1, [r3, #146]	@ 0x92
 800f128:	8a51      	ldrh	r1, [r2, #18]
 800f12a:	f883 1093 	strb.w	r1, [r3, #147]	@ 0x93
 800f12e:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 800f132:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
 800f136:	f103 0184 	add.w	r1, r3, #132	@ 0x84
 800f13a:	68a0      	ldr	r0, [r4, #8]
 800f13c:	2213      	movs	r2, #19
 800f13e:	75c2      	strb	r2, [r0, #23]
 800f140:	3018      	adds	r0, #24
 800f142:	f7ff fe9b 	bl	800ee7c <memcpy.isra.0>
 800f146:	4620      	mov	r0, r4
 800f148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f14c:	f7ff bfcc 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f150:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800f154:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 800f158:	0a11      	lsrs	r1, r2, #8
 800f15a:	f883 1075 	strb.w	r1, [r3, #117]	@ 0x75
 800f15e:	f103 0171 	add.w	r1, r3, #113	@ 0x71
 800f162:	e7ea      	b.n	800f13a <RDMHandler::GetDeviceInfo(unsigned short)+0x4a>
 800f164:	2000c6e4 	andcs	ip, r0, r4, ror #13

0800f168 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 800f168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16c:	6887      	ldr	r7, [r0, #8]
 800f16e:	2301      	movs	r3, #1
 800f170:	75fb      	strb	r3, [r7, #23]
 800f172:	4b2c      	ldr	r3, [pc, #176]	@ (800f224 <RDMHandler::GetFactoryDefaults(unsigned short)+0xbc>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f893 1099 	ldrb.w	r1, [r3, #153]	@ 0x99
 800f17a:	b309      	cbz	r1, 800f1c0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x58>
 800f17c:	f06f 0e22 	mvn.w	lr, #34	@ 0x22
 800f180:	f8b3 5048 	ldrh.w	r5, [r3, #72]	@ 0x48
 800f184:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800f188:	f893 c054 	ldrb.w	ip, [r3, #84]	@ 0x54
 800f18c:	f103 0423 	add.w	r4, r3, #35	@ 0x23
 800f190:	ebae 0e03 	sub.w	lr, lr, r3
 800f194:	eb0e 0604 	add.w	r6, lr, r4
 800f198:	45b4      	cmp	ip, r6
 800f19a:	d813      	bhi.n	800f1c4 <RDMHandler::GetFactoryDefaults(unsigned short)+0x5c>
 800f19c:	4295      	cmp	r5, r2
 800f19e:	d130      	bne.n	800f202 <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800f1a0:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f1a4:	f893 507d 	ldrb.w	r5, [r3, #125]	@ 0x7d
 800f1a8:	f8b3 409a 	ldrh.w	r4, [r3, #154]	@ 0x9a
 800f1ac:	442a      	add	r2, r5
 800f1ae:	4294      	cmp	r4, r2
 800f1b0:	d127      	bne.n	800f202 <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800f1b2:	f8b3 c064 	ldrh.w	ip, [r3, #100]	@ 0x64
 800f1b6:	2500      	movs	r5, #0
 800f1b8:	f06f 0e14 	mvn.w	lr, #20
 800f1bc:	4565      	cmp	r5, ip
 800f1be:	d306      	bcc.n	800f1ce <RDMHandler::GetFactoryDefaults(unsigned short)+0x66>
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	e022      	b.n	800f20a <RDMHandler::GetFactoryDefaults(unsigned short)+0xa2>
 800f1c4:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800f1c8:	4432      	add	r2, r6
 800f1ca:	b292      	uxth	r2, r2
 800f1cc:	e7e2      	b.n	800f194 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800f1ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f1d0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800f1d4:	b31a      	cbz	r2, 800f21e <RDMHandler::GetFactoryDefaults(unsigned short)+0xb6>
 800f1d6:	7a14      	ldrb	r4, [r2, #8]
 800f1d8:	b19c      	cbz	r4, 800f202 <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800f1da:	7d16      	ldrb	r6, [r2, #20]
 800f1dc:	8a54      	ldrh	r4, [r2, #18]
 800f1de:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 800f1e2:	f892 9036 	ldrb.w	r9, [r2, #54]	@ 0x36
 800f1e6:	4434      	add	r4, r6
 800f1e8:	b2a4      	uxth	r4, r4
 800f1ea:	f102 0615 	add.w	r6, r2, #21
 800f1ee:	ebae 0a02 	sub.w	sl, lr, r2
 800f1f2:	eb0a 0b06 	add.w	fp, sl, r6
 800f1f6:	45cb      	cmp	fp, r9
 800f1f8:	d30c      	bcc.n	800f214 <RDMHandler::GetFactoryDefaults(unsigned short)+0xac>
 800f1fa:	45a0      	cmp	r8, r4
 800f1fc:	d00f      	beq.n	800f21e <RDMHandler::GetFactoryDefaults(unsigned short)+0xb6>
 800f1fe:	2100      	movs	r1, #0
 800f200:	7211      	strb	r1, [r2, #8]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f208:	4613      	mov	r3, r2
 800f20a:	763b      	strb	r3, [r7, #24]
 800f20c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f210:	f7ff bf6a 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f214:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 800f218:	445c      	add	r4, fp
 800f21a:	b2a4      	uxth	r4, r4
 800f21c:	e7e9      	b.n	800f1f2 <RDMHandler::GetFactoryDefaults(unsigned short)+0x8a>
 800f21e:	3501      	adds	r5, #1
 800f220:	e7cc      	b.n	800f1bc <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 800f222:	bf00      	nop
 800f224:	2000c6e4 	andcs	ip, r0, r4, ror #13

0800f228 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 800f228:	b510      	push	{r4, lr}
 800f22a:	4905      	ldr	r1, [pc, #20]	@ (800f240 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 800f22c:	4604      	mov	r4, r0
 800f22e:	220e      	movs	r2, #14
 800f230:	f7ff ff03 	bl	800f03a <RDMHandler::HandleString(char const*, unsigned long)>
 800f234:	4620      	mov	r0, r4
 800f236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f23a:	f7ff bf55 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f23e:	bf00      	nop
 800f240:	0801ba9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, fp, ip, sp, pc}

0800f244 <RDMHandler::GetDeviceLabel(unsigned short)>:
 800f244:	4b0d      	ldr	r3, [pc, #52]	@ (800f27c <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800f246:	b510      	push	{r4, lr}
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4604      	mov	r4, r0
 800f24c:	b189      	cbz	r1, 800f272 <RDMHandler::GetDeviceLabel(unsigned short)+0x2e>
 800f24e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800f252:	3901      	subs	r1, #1
 800f254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f256:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f25a:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 800f25e:	f103 0116 	add.w	r1, r3, #22
 800f262:	4620      	mov	r0, r4
 800f264:	f7ff fee9 	bl	800f03a <RDMHandler::HandleString(char const*, unsigned long)>
 800f268:	4620      	mov	r0, r4
 800f26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f26e:	f7ff bf3b 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f272:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800f276:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800f27a:	e7f2      	b.n	800f262 <RDMHandler::GetDeviceLabel(unsigned short)+0x1e>
 800f27c:	2000c6e4 	andcs	ip, r0, r4, ror #13

0800f280 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 800f280:	6883      	ldr	r3, [r0, #8]
 800f282:	2201      	movs	r2, #1
 800f284:	75da      	strb	r2, [r3, #23]
 800f286:	4a02      	ldr	r2, [pc, #8]	@ (800f290 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 800f288:	7812      	ldrb	r2, [r2, #0]
 800f28a:	761a      	strb	r2, [r3, #24]
 800f28c:	f7ff bf2c 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f290:	2000c6ed 	andcs	ip, r0, sp, ror #13

0800f294 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 800f294:	4b0a      	ldr	r3, [pc, #40]	@ (800f2c0 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 800f296:	b510      	push	{r4, lr}
 800f298:	4619      	mov	r1, r3
 800f29a:	4604      	mov	r4, r0
 800f29c:	461a      	mov	r2, r3
 800f29e:	3301      	adds	r3, #1
 800f2a0:	7810      	ldrb	r0, [r2, #0]
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	d1fa      	bne.n	800f29c <RDMHandler::GetManufacturerLabel(unsigned short)+0x8>
 800f2a6:	1a52      	subs	r2, r2, r1
 800f2a8:	2a20      	cmp	r2, #32
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	4904      	ldr	r1, [pc, #16]	@ (800f2c0 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 800f2ae:	bf28      	it	cs
 800f2b0:	2220      	movcs	r2, #32
 800f2b2:	f7ff fec2 	bl	800f03a <RDMHandler::HandleString(char const*, unsigned long)>
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2bc:	f7ff bf14 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f2c0:	0801ebf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}

0800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>:
 800f2c4:	460a      	mov	r2, r1
 800f2c6:	2102      	movs	r1, #2
 800f2c8:	f7ff bec4 	b.w	800f054 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800f2cc <RDMHandler::SetResetDevice(bool, unsigned short)>:
 800f2cc:	b510      	push	{r4, lr}
 800f2ce:	6843      	ldr	r3, [r0, #4]
 800f2d0:	7d9a      	ldrb	r2, [r3, #22]
 800f2d2:	2a01      	cmp	r2, #1
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	d004      	beq.n	800f2e2 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 800f2d8:	2101      	movs	r1, #1
 800f2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2de:	f7ff bff1 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800f2e2:	7ddb      	ldrb	r3, [r3, #23]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d003      	beq.n	800f2f0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800f2e8:	2bff      	cmp	r3, #255	@ 0xff
 800f2ea:	d001      	beq.n	800f2f0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800f2ec:	2106      	movs	r1, #6
 800f2ee:	e7f4      	b.n	800f2da <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800f2f0:	68a2      	ldr	r2, [r4, #8]
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	2bff      	cmp	r3, #255	@ 0xff
 800f2f6:	75d1      	strb	r1, [r2, #23]
 800f2f8:	d102      	bne.n	800f300 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 800f2fa:	2104      	movs	r1, #4
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	e7ec      	b.n	800f2da <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800f300:	4b03      	ldr	r3, [pc, #12]	@ (800f310 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 800f302:	6818      	ldr	r0, [r3, #0]
 800f304:	f009 f95c 	bl	80185c0 <Hardware::Reboot()>
 800f308:	2800      	cmp	r0, #0
 800f30a:	d0f6      	beq.n	800f2fa <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 800f30c:	bd10      	pop	{r4, pc}
 800f30e:	bf00      	nop
 800f310:	2000cd38 	andcs	ip, r0, r8, lsr sp

0800f314 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 800f314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f316:	6843      	ldr	r3, [r0, #4]
 800f318:	7d9a      	ldrb	r2, [r3, #22]
 800f31a:	2a01      	cmp	r2, #1
 800f31c:	4604      	mov	r4, r0
 800f31e:	460d      	mov	r5, r1
 800f320:	d004      	beq.n	800f32c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 800f322:	2101      	movs	r1, #1
 800f324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f328:	f7ff bfcc 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800f32c:	7ddb      	ldrb	r3, [r3, #23]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d901      	bls.n	800f336 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800f332:	2106      	movs	r1, #6
 800f334:	e7f6      	b.n	800f324 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 800f336:	4912      	ldr	r1, [pc, #72]	@ (800f380 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 800f338:	4f12      	ldr	r7, [pc, #72]	@ (800f384 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 800f33a:	680e      	ldr	r6, [r1, #0]
 800f33c:	4912      	ldr	r1, [pc, #72]	@ (800f388 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 800f33e:	6808      	ldr	r0, [r1, #0]
 800f340:	4912      	ldr	r1, [pc, #72]	@ (800f38c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800f342:	b98b      	cbnz	r3, 800f368 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x54>
 800f344:	700b      	strb	r3, [r1, #0]
 800f346:	461a      	mov	r2, r3
 800f348:	2102      	movs	r1, #2
 800f34a:	f008 ff39 	bl	80181c0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800f34e:	7839      	ldrb	r1, [r7, #0]
 800f350:	b111      	cbz	r1, 800f358 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800f352:	4630      	mov	r0, r6
 800f354:	f000 f9a7 	bl	800f6a6 <RDMIdentify::Off(rdm::identify::Mode)>
 800f358:	b98d      	cbnz	r5, 800f37e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6a>
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	75dd      	strb	r5, [r3, #23]
 800f35e:	4620      	mov	r0, r4
 800f360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f364:	f7ff bec0 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f368:	700a      	strb	r2, [r1, #0]
 800f36a:	2104      	movs	r1, #4
 800f36c:	f008 ff28 	bl	80181c0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800f370:	7839      	ldrb	r1, [r7, #0]
 800f372:	2900      	cmp	r1, #0
 800f374:	d0f0      	beq.n	800f358 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800f376:	4630      	mov	r0, r6
 800f378:	f000 f994 	bl	800f6a4 <RDMIdentify::On(rdm::identify::Mode)>
 800f37c:	e7ec      	b.n	800f358 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800f37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f380:	2000c6e8 	andcs	ip, r0, r8, ror #13
 800f384:	2000c6ec 	andcs	ip, r0, ip, ror #13
 800f388:	2000cd38 	andcs	ip, r0, r8, lsr sp
 800f38c:	2000c6ed 	andcs	ip, r0, sp, ror #13

0800f390 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	6843      	ldr	r3, [r0, #4]
 800f394:	7d9b      	ldrb	r3, [r3, #22]
 800f396:	4604      	mov	r4, r0
 800f398:	460d      	mov	r5, r1
 800f39a:	b123      	cbz	r3, 800f3a6 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 800f39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3a0:	2101      	movs	r1, #1
 800f3a2:	f7ff bf8f 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800f3a6:	4b06      	ldr	r3, [pc, #24]	@ (800f3c0 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f7ff fda9 	bl	800ef00 <RDMDeviceResponder::SetFactoryDefaults()>
 800f3ae:	b935      	cbnz	r5, 800f3be <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 800f3b0:	68a3      	ldr	r3, [r4, #8]
 800f3b2:	75dd      	strb	r5, [r3, #23]
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3ba:	f7ff be95 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f3be:	bd38      	pop	{r3, r4, r5, pc}
 800f3c0:	2000c6e4 	andcs	ip, r0, r4, ror #13

0800f3c4 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 800f3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3c6:	6843      	ldr	r3, [r0, #4]
 800f3c8:	460d      	mov	r5, r1
 800f3ca:	7d99      	ldrb	r1, [r3, #22]
 800f3cc:	2920      	cmp	r1, #32
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	d905      	bls.n	800f3de <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1a>
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	b003      	add	sp, #12
 800f3d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f3da:	f7ff bf73 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800f3de:	4817      	ldr	r0, [pc, #92]	@ (800f43c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x78>)
 800f3e0:	6800      	ldr	r0, [r0, #0]
 800f3e2:	b302      	cbz	r2, 800f426 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x62>
 800f3e4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800f3e8:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 800f3ea:	3a01      	subs	r2, #1
 800f3ec:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f3f0:	b1b9      	cbz	r1, 800f422 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x5e>
 800f3f2:	3316      	adds	r3, #22
 800f3f4:	f100 0615 	add.w	r6, r0, #21
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	3201      	adds	r2, #1
 800f3fc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f400:	f806 7f01 	strb.w	r7, [r6, #1]!
 800f404:	2a20      	cmp	r2, #32
 800f406:	d001      	beq.n	800f40c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x48>
 800f408:	4291      	cmp	r1, r2
 800f40a:	d8f6      	bhi.n	800f3fa <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x36>
 800f40c:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
 800f410:	b995      	cbnz	r5, 800f438 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x74>
 800f412:	68a3      	ldr	r3, [r4, #8]
 800f414:	4620      	mov	r0, r4
 800f416:	75dd      	strb	r5, [r3, #23]
 800f418:	b003      	add	sp, #12
 800f41a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f41e:	f7ff be63 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f422:	460a      	mov	r2, r1
 800f424:	e7f2      	b.n	800f40c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x48>
 800f426:	3317      	adds	r3, #23
 800f428:	f88d 1004 	strb.w	r1, [sp, #4]
 800f42c:	3004      	adds	r0, #4
 800f42e:	4669      	mov	r1, sp
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	f7ff fd2d 	bl	800ee90 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800f436:	e7eb      	b.n	800f410 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4c>
 800f438:	b003      	add	sp, #12
 800f43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f43c:	2000c6e4 	andcs	ip, r0, r4, ror #13

0800f440 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 800f440:	b4f0      	push	{r4, r5, r6, r7}
 800f442:	4615      	mov	r5, r2
 800f444:	f005 04ef 	and.w	r4, r5, #239	@ 0xef
 800f448:	2c20      	cmp	r4, #32
 800f44a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800f44e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f452:	d003      	beq.n	800f45c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800f454:	2105      	movs	r1, #5
 800f456:	bcf0      	pop	{r4, r5, r6, r7}
 800f458:	f7ff bf34 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800f45c:	4c28      	ldr	r4, [pc, #160]	@ (800f500 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>)
 800f45e:	6824      	ldr	r4, [r4, #0]
 800f460:	88a4      	ldrh	r4, [r4, #4]
 800f462:	4294      	cmp	r4, r2
 800f464:	d205      	bcs.n	800f472 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x32>
 800f466:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800f46a:	42a2      	cmp	r2, r4
 800f46c:	d001      	beq.n	800f472 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x32>
 800f46e:	2109      	movs	r1, #9
 800f470:	e7f1      	b.n	800f456 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800f472:	4c24      	ldr	r4, [pc, #144]	@ (800f504 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc4>)
 800f474:	4f24      	ldr	r7, [pc, #144]	@ (800f508 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc8>)
 800f476:	f8b4 c000 	ldrh.w	ip, [r4]
 800f47a:	459c      	cmp	ip, r3
 800f47c:	d108      	bne.n	800f490 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x50>
 800f47e:	f890 c000 	ldrb.w	ip, [r0]
 800f482:	7da7      	ldrb	r7, [r4, #22]
 800f484:	7de3      	ldrb	r3, [r4, #23]
 800f486:	f1bc 0f00 	cmp.w	ip, #0
 800f48a:	d106      	bne.n	800f49a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5a>
 800f48c:	b93b      	cbnz	r3, 800f49e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800f48e:	e002      	b.n	800f496 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x56>
 800f490:	3418      	adds	r4, #24
 800f492:	42bc      	cmp	r4, r7
 800f494:	d1ef      	bne.n	800f476 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 800f496:	2100      	movs	r1, #0
 800f498:	e7dd      	b.n	800f456 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800f49a:	2f00      	cmp	r7, #0
 800f49c:	d0fb      	beq.n	800f496 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x56>
 800f49e:	2d20      	cmp	r5, #32
 800f4a0:	d11b      	bne.n	800f4da <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x9a>
 800f4a2:	bb59      	cbnz	r1, 800f4fc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xbc>
 800f4a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d0e0      	beq.n	800f46e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2e>
 800f4ac:	6863      	ldr	r3, [r4, #4]
 800f4ae:	b913      	cbnz	r3, 800f4b6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x76>
 800f4b0:	68a1      	ldr	r1, [r4, #8]
 800f4b2:	07cd      	lsls	r5, r1, #31
 800f4b4:	d5ce      	bpl.n	800f454 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x14>
 800f4b6:	7d21      	ldrb	r1, [r4, #20]
 800f4b8:	42b1      	cmp	r1, r6
 800f4ba:	d001      	beq.n	800f4c0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x80>
 800f4bc:	2101      	movs	r1, #1
 800f4be:	e7ca      	b.n	800f456 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800f4c0:	68a1      	ldr	r1, [r4, #8]
 800f4c2:	104d      	asrs	r5, r1, #1
 800f4c4:	eb00 0461 	add.w	r4, r0, r1, asr #1
 800f4c8:	07c9      	lsls	r1, r1, #31
 800f4ca:	bf48      	it	mi
 800f4cc:	5941      	ldrmi	r1, [r0, r5]
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	bf48      	it	mi
 800f4d2:	58cb      	ldrmi	r3, [r1, r3]
 800f4d4:	bcf0      	pop	{r4, r5, r6, r7}
 800f4d6:	4611      	mov	r1, r2
 800f4d8:	4718      	bx	r3
 800f4da:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800f4de:	f003 0401 	and.w	r4, r3, #1
 800f4e2:	b90d      	cbnz	r5, 800f4e8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xa8>
 800f4e4:	2c00      	cmp	r4, #0
 800f4e6:	d0b5      	beq.n	800f454 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x14>
 800f4e8:	105e      	asrs	r6, r3, #1
 800f4ea:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800f4ee:	b10c      	cbz	r4, 800f4f4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb4>
 800f4f0:	5980      	ldr	r0, [r0, r6]
 800f4f2:	5945      	ldr	r5, [r0, r5]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	462b      	mov	r3, r5
 800f4f8:	bcf0      	pop	{r4, r5, r6, r7}
 800f4fa:	4718      	bx	r3
 800f4fc:	bcf0      	pop	{r4, r5, r6, r7}
 800f4fe:	4770      	bx	lr
 800f500:	2000c6f4 	strdcs	ip, [r0], -r4
 800f504:	0801e9f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, fp, sp, lr, pc}
 800f508:	0801ebd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, fp, sp, lr, pc}

0800f50c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 800f50c:	23ff      	movs	r3, #255	@ 0xff
 800f50e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f512:	7013      	strb	r3, [r2, #0]
 800f514:	7bcb      	ldrb	r3, [r1, #15]
 800f516:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800f51a:	4607      	mov	r7, r0
 800f51c:	468a      	mov	sl, r1
 800f51e:	4614      	mov	r4, r2
 800f520:	2b00      	cmp	r3, #0
 800f522:	d079      	beq.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f524:	7c0b      	ldrb	r3, [r1, #16]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d176      	bne.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f52a:	4b58      	ldr	r3, [pc, #352]	@ (800f68c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x180>)
 800f52c:	1c8e      	adds	r6, r1, #2
 800f52e:	2206      	movs	r2, #6
 800f530:	4957      	ldr	r1, [pc, #348]	@ (800f690 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x184>)
 800f532:	f8d3 8000 	ldr.w	r8, [r3]
 800f536:	4630      	mov	r0, r6
 800f538:	f7fd fc17 	bl	800cd6a <memcmp>
 800f53c:	f108 094a 	add.w	r9, r8, #74	@ 0x4a
 800f540:	4605      	mov	r5, r0
 800f542:	2800      	cmp	r0, #0
 800f544:	d06b      	beq.n	800f61e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x112>
 800f546:	4630      	mov	r0, r6
 800f548:	2202      	movs	r2, #2
 800f54a:	4649      	mov	r1, r9
 800f54c:	f7fd fc0d 	bl	800cd6a <memcmp>
 800f550:	4606      	mov	r6, r0
 800f552:	2800      	cmp	r0, #0
 800f554:	d160      	bne.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f556:	f10a 0b04 	add.w	fp, sl, #4
 800f55a:	494d      	ldr	r1, [pc, #308]	@ (800f690 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x184>)
 800f55c:	2204      	movs	r2, #4
 800f55e:	4658      	mov	r0, fp
 800f560:	f7fd fc03 	bl	800cd6a <memcmp>
 800f564:	4605      	mov	r5, r0
 800f566:	2800      	cmp	r0, #0
 800f568:	d059      	beq.n	800f61e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x112>
 800f56a:	f108 014c 	add.w	r1, r8, #76	@ 0x4c
 800f56e:	2204      	movs	r2, #4
 800f570:	4658      	mov	r0, fp
 800f572:	f7fd fbfa 	bl	800cd6a <memcmp>
 800f576:	fab0 f580 	clz	r5, r0
 800f57a:	096d      	lsrs	r5, r5, #5
 800f57c:	4631      	mov	r1, r6
 800f57e:	f89a 2013 	ldrb.w	r2, [sl, #19]
 800f582:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 800f586:	b90d      	cbnz	r5, 800f58c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x80>
 800f588:	2900      	cmp	r1, #0
 800f58a:	d045      	beq.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f58c:	2a10      	cmp	r2, #16
 800f58e:	d16f      	bne.n	800f670 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x164>
 800f590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f594:	d145      	bne.n	800f622 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x116>
 800f596:	787b      	ldrb	r3, [r7, #1]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d13d      	bne.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f59c:	2206      	movs	r2, #6
 800f59e:	4649      	mov	r1, r9
 800f5a0:	f10a 0017 	add.w	r0, sl, #23
 800f5a4:	f7fd fbe1 	bl	800cd6a <memcmp>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	dc35      	bgt.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f5ac:	2206      	movs	r2, #6
 800f5ae:	f10a 011d 	add.w	r1, sl, #29
 800f5b2:	4648      	mov	r0, r9
 800f5b4:	f7fd fbd9 	bl	800cd6a <memcmp>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	dc2d      	bgt.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f5bc:	23fe      	movs	r3, #254	@ 0xfe
 800f5be:	7023      	strb	r3, [r4, #0]
 800f5c0:	7063      	strb	r3, [r4, #1]
 800f5c2:	70a3      	strb	r3, [r4, #2]
 800f5c4:	70e3      	strb	r3, [r4, #3]
 800f5c6:	7123      	strb	r3, [r4, #4]
 800f5c8:	7163      	strb	r3, [r4, #5]
 800f5ca:	71a3      	strb	r3, [r4, #6]
 800f5cc:	23aa      	movs	r3, #170	@ 0xaa
 800f5ce:	71e3      	strb	r3, [r4, #7]
 800f5d0:	f108 0249 	add.w	r2, r8, #73	@ 0x49
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	f108 084f 	add.w	r8, r8, #79	@ 0x4f
 800f5da:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 800f5de:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f5e2:	f060 0055 	orn	r0, r0, #85	@ 0x55
 800f5e6:	7208      	strb	r0, [r1, #8]
 800f5e8:	7810      	ldrb	r0, [r2, #0]
 800f5ea:	f040 0055 	orr.w	r0, r0, #85	@ 0x55
 800f5ee:	7248      	strb	r0, [r1, #9]
 800f5f0:	7810      	ldrb	r0, [r2, #0]
 800f5f2:	4542      	cmp	r2, r8
 800f5f4:	4403      	add	r3, r0
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	f101 0102 	add.w	r1, r1, #2
 800f5fc:	d1ef      	bne.n	800f5de <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xd2>
 800f5fe:	0a1a      	lsrs	r2, r3, #8
 800f600:	f062 0155 	orn	r1, r2, #85	@ 0x55
 800f604:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 800f608:	7562      	strb	r2, [r4, #21]
 800f60a:	f063 0255 	orn	r2, r3, #85	@ 0x55
 800f60e:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800f612:	7521      	strb	r1, [r4, #20]
 800f614:	75a2      	strb	r2, [r4, #22]
 800f616:	75e3      	strb	r3, [r4, #23]
 800f618:	b003      	add	sp, #12
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	2101      	movs	r1, #1
 800f620:	e7ad      	b.n	800f57e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 800f622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f626:	d11a      	bne.n	800f65e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x152>
 800f628:	f89a 3016 	ldrb.w	r3, [sl, #22]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1f3      	bne.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f630:	707b      	strb	r3, [r7, #1]
 800f632:	2900      	cmp	r1, #0
 800f634:	d1f0      	bne.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f636:	2d00      	cmp	r5, #0
 800f638:	d0ee      	beq.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f63a:	2302      	movs	r3, #2
 800f63c:	75e3      	strb	r3, [r4, #23]
 800f63e:	4b15      	ldr	r3, [pc, #84]	@ (800f694 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x188>)
 800f640:	7661      	strb	r1, [r4, #25]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	7621      	strb	r1, [r4, #24]
 800f646:	889b      	ldrh	r3, [r3, #4]
 800f648:	3b00      	subs	r3, #0
 800f64a:	bf18      	it	ne
 800f64c:	2301      	movne	r3, #1
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	4638      	mov	r0, r7
 800f652:	7663      	strb	r3, [r4, #25]
 800f654:	b003      	add	sp, #12
 800f656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65a:	f7ff bd45 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f65e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f662:	d1d9      	bne.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f664:	f89a 3016 	ldrb.w	r3, [sl, #22]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1d5      	bne.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e7df      	b.n	800f630 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x124>
 800f670:	f8ba 0011 	ldrh.w	r0, [sl, #17]
 800f674:	ba40      	rev16	r0, r0
 800f676:	b280      	uxth	r0, r0
 800f678:	9001      	str	r0, [sp, #4]
 800f67a:	f89a 0016 	ldrb.w	r0, [sl, #22]
 800f67e:	9000      	str	r0, [sp, #0]
 800f680:	ba5b      	rev16	r3, r3
 800f682:	b29b      	uxth	r3, r3
 800f684:	4638      	mov	r0, r7
 800f686:	f7ff fedb 	bl	800f440 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800f68a:	e7c5      	b.n	800f618 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f68c:	2000c6e4 	andcs	ip, r0, r4, ror #13
 800f690:	0801ebd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, fp, sp, lr, pc}
 800f694:	2000c6f4 	strdcs	ip, [r0], -r4

0800f698 <RDMIdentify::RDMIdentify()>:
 800f698:	4b01      	ldr	r3, [pc, #4]	@ (800f6a0 <RDMIdentify::RDMIdentify()+0x8>)
 800f69a:	6018      	str	r0, [r3, #0]
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	2000c6e8 	andcs	ip, r0, r8, ror #13

0800f6a4 <RDMIdentify::On(rdm::identify::Mode)>:
 800f6a4:	4770      	bx	lr

0800f6a6 <RDMIdentify::Off(rdm::identify::Mode)>:
 800f6a6:	4770      	bx	lr

0800f6a8 <memcpy.isra.0>:
 800f6a8:	440a      	add	r2, r1
 800f6aa:	4291      	cmp	r1, r2
 800f6ac:	d100      	bne.n	800f6b0 <memcpy.isra.0+0x8>
 800f6ae:	4770      	bx	lr
 800f6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6b4:	f800 3b01 	strb.w	r3, [r0], #1
 800f6b8:	e7f7      	b.n	800f6aa <memcpy.isra.0+0x2>
	...

0800f6bc <LLRPDevice::HandleRequestMessage()>:
 800f6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6c0:	4e43      	ldr	r6, [pc, #268]	@ (800f7d0 <LLRPDevice::HandleRequestMessage()+0x114>)
 800f6c2:	4f44      	ldr	r7, [pc, #272]	@ (800f7d4 <LLRPDevice::HandleRequestMessage()+0x118>)
 800f6c4:	6835      	ldr	r5, [r6, #0]
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	f895 4042 	ldrb.w	r4, [r5, #66]	@ 0x42
 800f6cc:	f8b5 3043 	ldrh.w	r3, [r5, #67]	@ 0x43
 800f6d0:	0424      	lsls	r4, r4, #16
 800f6d2:	ba5b      	rev16	r3, r3
 800f6d4:	b089      	sub	sp, #36	@ 0x24
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 800f6dc:	431c      	orrs	r4, r3
 800f6de:	2206      	movs	r2, #6
 800f6e0:	314a      	adds	r1, #74	@ 0x4a
 800f6e2:	a802      	add	r0, sp, #8
 800f6e4:	f7ff ffe0 	bl	800f6a8 <memcpy.isra.0>
 800f6e8:	2c12      	cmp	r4, #18
 800f6ea:	d909      	bls.n	800f700 <LLRPDevice::HandleRequestMessage()+0x44>
 800f6ec:	f105 0954 	add.w	r9, r5, #84	@ 0x54
 800f6f0:	f04f 0800 	mov.w	r8, #0
 800f6f4:	3c12      	subs	r4, #18
 800f6f6:	2306      	movs	r3, #6
 800f6f8:	fbb4 f4f3 	udiv	r4, r4, r3
 800f6fc:	45a0      	cmp	r8, r4
 800f6fe:	d15b      	bne.n	800f7b8 <LLRPDevice::HandleRequestMessage()+0xfc>
 800f700:	2206      	movs	r2, #6
 800f702:	a902      	add	r1, sp, #8
 800f704:	f105 0046 	add.w	r0, r5, #70	@ 0x46
 800f708:	f7fd fb2f 	bl	800cd6a <memcmp>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	dc50      	bgt.n	800f7b2 <LLRPDevice::HandleRequestMessage()+0xf6>
 800f710:	2206      	movs	r2, #6
 800f712:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
 800f716:	a802      	add	r0, sp, #8
 800f718:	f7fd fb27 	bl	800cd6a <memcmp>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	dc48      	bgt.n	800f7b2 <LLRPDevice::HandleRequestMessage()+0xf6>
 800f720:	6834      	ldr	r4, [r6, #0]
 800f722:	2210      	movs	r2, #16
 800f724:	f104 0517 	add.w	r5, r4, #23
 800f728:	4629      	mov	r1, r5
 800f72a:	eb0d 0002 	add.w	r0, sp, r2
 800f72e:	f7ff ffbb 	bl	800f6a8 <memcpy.isra.0>
 800f732:	2343      	movs	r3, #67	@ 0x43
 800f734:	74a3      	strb	r3, [r4, #18]
 800f736:	4b28      	ldr	r3, [pc, #160]	@ (800f7d8 <LLRPDevice::HandleRequestMessage()+0x11c>)
 800f738:	4628      	mov	r0, r5
 800f73a:	6819      	ldr	r1, [r3, #0]
 800f73c:	4d27      	ldr	r5, [pc, #156]	@ (800f7dc <LLRPDevice::HandleRequestMessage()+0x120>)
 800f73e:	2210      	movs	r2, #16
 800f740:	f7ff ffb2 	bl	800f6a8 <memcpy.isra.0>
 800f744:	232c      	movs	r3, #44	@ 0x2c
 800f746:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800f74a:	2300      	movs	r3, #0
 800f74c:	2210      	movs	r2, #16
 800f74e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 800f752:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
 800f756:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f75a:	2302      	movs	r3, #2
 800f75c:	eb0d 0102 	add.w	r1, sp, r2
 800f760:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f764:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 800f768:	f7ff ff9e 	bl	800f6a8 <memcpy.isra.0>
 800f76c:	6839      	ldr	r1, [r7, #0]
 800f76e:	2311      	movs	r3, #17
 800f770:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f774:	2301      	movs	r3, #1
 800f776:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f77a:	2206      	movs	r2, #6
 800f77c:	314a      	adds	r1, #74	@ 0x4a
 800f77e:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 800f782:	f7ff ff91 	bl	800f6a8 <memcpy.isra.0>
 800f786:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800f78a:	2206      	movs	r2, #6
 800f78c:	4629      	mov	r1, r5
 800f78e:	f7ff ff8b 	bl	800f6a8 <memcpy.isra.0>
 800f792:	23ff      	movs	r3, #255	@ 0xff
 800f794:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
 800f798:	4b11      	ldr	r3, [pc, #68]	@ (800f7e0 <LLRPDevice::HandleRequestMessage()+0x124>)
 800f79a:	6818      	ldr	r0, [r3, #0]
 800f79c:	f855 3c14 	ldr.w	r3, [r5, #-20]
 800f7a0:	b13b      	cbz	r3, 800f7b2 <LLRPDevice::HandleRequestMessage()+0xf6>
 800f7a2:	f241 53c1 	movw	r3, #5569	@ 0x15c1
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	2253      	movs	r2, #83	@ 0x53
 800f7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f7e4 <LLRPDevice::HandleRequestMessage()+0x128>)
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	f006 f833 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800f7b2:	b009      	add	sp, #36	@ 0x24
 800f7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b8:	2206      	movs	r2, #6
 800f7ba:	a902      	add	r1, sp, #8
 800f7bc:	4648      	mov	r0, r9
 800f7be:	f7fd fad4 	bl	800cd6a <memcmp>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d0f5      	beq.n	800f7b2 <LLRPDevice::HandleRequestMessage()+0xf6>
 800f7c6:	f109 0906 	add.w	r9, r9, #6
 800f7ca:	f108 0801 	add.w	r8, r8, #1
 800f7ce:	e795      	b.n	800f6fc <LLRPDevice::HandleRequestMessage()+0x40>
 800f7d0:	2000c7fc 	strdcs	ip, [r0], -ip	@ <UNPREDICTABLE>
 800f7d4:	2000c6e4 	andcs	ip, r0, r4, ror #13
 800f7d8:	2000cd38 	andcs	ip, r0, r8, lsr sp
 800f7dc:	2000cb9c 	mulcs	r0, ip, fp
 800f7e0:	2000c804 	andcs	ip, r0, r4, lsl #16
 800f7e4:	86faffef 	ldrbthi	pc, [sl], pc, ror #31	@ <UNPREDICTABLE>

0800f7e8 <LLRPDevice::HandleRdmCommand()>:
 800f7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7ec:	4b21      	ldr	r3, [pc, #132]	@ (800f874 <LLRPDevice::HandleRdmCommand()+0x8c>)
 800f7ee:	4f22      	ldr	r7, [pc, #136]	@ (800f878 <LLRPDevice::HandleRdmCommand()+0x90>)
 800f7f0:	681c      	ldr	r4, [r3, #0]
 800f7f2:	f104 0946 	add.w	r9, r4, #70	@ 0x46
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	463a      	mov	r2, r7
 800f7fa:	4649      	mov	r1, r9
 800f7fc:	f7ff fe86 	bl	800f50c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 800f800:	783b      	ldrb	r3, [r7, #0]
 800f802:	2bcc      	cmp	r3, #204	@ 0xcc
 800f804:	d132      	bne.n	800f86c <LLRPDevice::HandleRdmCommand()+0x84>
 800f806:	f104 0817 	add.w	r8, r4, #23
 800f80a:	2210      	movs	r2, #16
 800f80c:	4641      	mov	r1, r8
 800f80e:	a802      	add	r0, sp, #8
 800f810:	f7ff ff4a 	bl	800f6a8 <memcpy.isra.0>
 800f814:	78be      	ldrb	r6, [r7, #2]
 800f816:	4b19      	ldr	r3, [pc, #100]	@ (800f87c <LLRPDevice::HandleRdmCommand()+0x94>)
 800f818:	f106 0537 	add.w	r5, r6, #55	@ 0x37
 800f81c:	b2ed      	uxtb	r5, r5
 800f81e:	6819      	ldr	r1, [r3, #0]
 800f820:	74a5      	strb	r5, [r4, #18]
 800f822:	2210      	movs	r2, #16
 800f824:	4640      	mov	r0, r8
 800f826:	f7ff ff3f 	bl	800f6a8 <memcpy.isra.0>
 800f82a:	f106 0320 	add.w	r3, r6, #32
 800f82e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800f832:	2210      	movs	r2, #16
 800f834:	a902      	add	r1, sp, #8
 800f836:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 800f83a:	f7ff ff35 	bl	800f6a8 <memcpy.isra.0>
 800f83e:	1d73      	adds	r3, r6, #5
 800f840:	1c72      	adds	r2, r6, #1
 800f842:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f846:	b2d2      	uxtb	r2, r2
 800f848:	4648      	mov	r0, r9
 800f84a:	1c79      	adds	r1, r7, #1
 800f84c:	f7ff ff2c 	bl	800f6a8 <memcpy.isra.0>
 800f850:	4b0b      	ldr	r3, [pc, #44]	@ (800f880 <LLRPDevice::HandleRdmCommand()+0x98>)
 800f852:	6818      	ldr	r0, [r3, #0]
 800f854:	4b0b      	ldr	r3, [pc, #44]	@ (800f884 <LLRPDevice::HandleRdmCommand()+0x9c>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f105 0210 	add.w	r2, r5, #16
 800f85c:	b133      	cbz	r3, 800f86c <LLRPDevice::HandleRdmCommand()+0x84>
 800f85e:	f241 53c1 	movw	r3, #5569	@ 0x15c1
 800f862:	9300      	str	r3, [sp, #0]
 800f864:	4621      	mov	r1, r4
 800f866:	4b08      	ldr	r3, [pc, #32]	@ (800f888 <LLRPDevice::HandleRdmCommand()+0xa0>)
 800f868:	f005 ffd6 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800f86c:	b007      	add	sp, #28
 800f86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f872:	bf00      	nop
 800f874:	2000c7fc 	strdcs	ip, [r0], -ip	@ <UNPREDICTABLE>
 800f878:	2000c6f8 	strdcs	ip, [r0], -r8
 800f87c:	2000cd38 	andcs	ip, r0, r8, lsr sp
 800f880:	2000c804 	andcs	ip, r0, r4, lsl #16
 800f884:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800f888:	86faffef 	ldrbthi	pc, [sl], pc, ror #31	@ <UNPREDICTABLE>

0800f88c <LLRPDevice::DumpCommon()>:
 800f88c:	4770      	bx	lr

0800f88e <memcpy.isra.0>:
 800f88e:	440a      	add	r2, r1
 800f890:	4291      	cmp	r1, r2
 800f892:	d100      	bne.n	800f896 <memcpy.isra.0+0x8>
 800f894:	4770      	bx	lr
 800f896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f89a:	f800 3b01 	strb.w	r3, [r0], #1
 800f89e:	e7f7      	b.n	800f890 <memcpy.isra.0+0x2>

0800f8a0 <RDMHandler::GetInterfaceList(unsigned short)>:
 800f8a0:	6883      	ldr	r3, [r0, #8]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	761a      	strb	r2, [r3, #24]
 800f8a6:	765a      	strb	r2, [r3, #25]
 800f8a8:	769a      	strb	r2, [r3, #26]
 800f8aa:	2101      	movs	r1, #1
 800f8ac:	771a      	strb	r2, [r3, #28]
 800f8ae:	2206      	movs	r2, #6
 800f8b0:	76d9      	strb	r1, [r3, #27]
 800f8b2:	775a      	strb	r2, [r3, #29]
 800f8b4:	75da      	strb	r2, [r3, #23]
 800f8b6:	f7ff bc17 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
	...

0800f8bc <RDMHandler::GetInterfaceName(unsigned short)>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800f8c2:	2204      	movs	r2, #4
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	3117      	adds	r1, #23
 800f8c8:	f105 0018 	add.w	r0, r5, #24
 800f8cc:	f7ff ffdf 	bl	800f88e <memcpy.isra.0>
 800f8d0:	4a0d      	ldr	r2, [pc, #52]	@ (800f908 <RDMHandler::GetInterfaceName(unsigned short)+0x4c>)
 800f8d2:	6813      	ldr	r3, [r2, #0]
 800f8d4:	f105 001c 	add.w	r0, r5, #28
 800f8d8:	3306      	adds	r3, #6
 800f8da:	f813 1b01 	ldrb.w	r1, [r3], #1
 800f8de:	f800 1b01 	strb.w	r1, [r0], #1
 800f8e2:	2900      	cmp	r1, #0
 800f8e4:	d1f9      	bne.n	800f8da <RDMHandler::GetInterfaceName(unsigned short)+0x1e>
 800f8e6:	6812      	ldr	r2, [r2, #0]
 800f8e8:	3206      	adds	r2, #6
 800f8ea:	4611      	mov	r1, r2
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	3101      	adds	r1, #1
 800f8f0:	7818      	ldrb	r0, [r3, #0]
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d1fa      	bne.n	800f8ec <RDMHandler::GetInterfaceName(unsigned short)+0x30>
 800f8f6:	1a9b      	subs	r3, r3, r2
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	75eb      	strb	r3, [r5, #23]
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f902:	f7ff bbf1 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f906:	bf00      	nop
 800f908:	2000cb68 	andcs	ip, r0, r8, ror #22

0800f90c <RDMHandler::GetHardwareAddress(unsigned short)>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800f912:	4604      	mov	r4, r0
 800f914:	2204      	movs	r2, #4
 800f916:	f105 0018 	add.w	r0, r5, #24
 800f91a:	3117      	adds	r1, #23
 800f91c:	f7ff ffb7 	bl	800f88e <memcpy.isra.0>
 800f920:	f105 001c 	add.w	r0, r5, #28
 800f924:	4905      	ldr	r1, [pc, #20]	@ (800f93c <RDMHandler::GetHardwareAddress(unsigned short)+0x30>)
 800f926:	2206      	movs	r2, #6
 800f928:	f7ff ffb1 	bl	800f88e <memcpy.isra.0>
 800f92c:	230a      	movs	r3, #10
 800f92e:	75eb      	strb	r3, [r5, #23]
 800f930:	4620      	mov	r0, r4
 800f932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f936:	f7ff bbd7 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f93a:	bf00      	nop
 800f93c:	2000cb9c 	mulcs	r0, ip, fp

0800f940 <RDMHandler::GetDHCPMode(unsigned short)>:
 800f940:	b538      	push	{r3, r4, r5, lr}
 800f942:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800f946:	4604      	mov	r4, r0
 800f948:	2204      	movs	r2, #4
 800f94a:	f105 0018 	add.w	r0, r5, #24
 800f94e:	3117      	adds	r1, #23
 800f950:	f7ff ff9d 	bl	800f88e <memcpy.isra.0>
 800f954:	4b05      	ldr	r3, [pc, #20]	@ (800f96c <RDMHandler::GetDHCPMode(unsigned short)+0x2c>)
 800f956:	7e9b      	ldrb	r3, [r3, #26]
 800f958:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f95c:	772b      	strb	r3, [r5, #28]
 800f95e:	2305      	movs	r3, #5
 800f960:	75eb      	strb	r3, [r5, #23]
 800f962:	4620      	mov	r0, r4
 800f964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f968:	f7ff bbbe 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f96c:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800f970 <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 800f970:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a0 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x30>)
 800f972:	6842      	ldr	r2, [r0, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	7919      	ldrb	r1, [r3, #4]
 800f978:	b911      	cbnz	r1, 800f980 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 800f97a:	210b      	movs	r1, #11
 800f97c:	f7ff bca2 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800f980:	7ed2      	ldrb	r2, [r2, #27]
 800f982:	2a01      	cmp	r2, #1
 800f984:	d809      	bhi.n	800f99a <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 800f986:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 800f98a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800f98e:	f042 0208 	orr.w	r2, r2, #8
 800f992:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800f996:	f7ff bba7 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f99a:	2106      	movs	r1, #6
 800f99c:	e7ee      	b.n	800f97c <RDMHandler::SetDHCPMode(bool, unsigned short)+0xc>
 800f99e:	bf00      	nop
 800f9a0:	2000cb68 	andcs	ip, r0, r8, ror #22

0800f9a4 <RDMHandler::GetNameServers(unsigned short)>:
 800f9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9a6:	6843      	ldr	r3, [r0, #4]
 800f9a8:	7ddb      	ldrb	r3, [r3, #23]
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	d905      	bls.n	800f9bc <RDMHandler::GetNameServers(unsigned short)+0x18>
 800f9b0:	2106      	movs	r1, #6
 800f9b2:	b003      	add	sp, #12
 800f9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9b8:	f7ff bc84 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800f9bc:	4a0b      	ldr	r2, [pc, #44]	@ (800f9ec <RDMHandler::GetNameServers(unsigned short)+0x48>)
 800f9be:	6885      	ldr	r5, [r0, #8]
 800f9c0:	6812      	ldr	r2, [r2, #0]
 800f9c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f9c6:	f105 0019 	add.w	r0, r5, #25
 800f9ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f9ce:	9201      	str	r2, [sp, #4]
 800f9d0:	2204      	movs	r2, #4
 800f9d2:	762b      	strb	r3, [r5, #24]
 800f9d4:	eb0d 0102 	add.w	r1, sp, r2
 800f9d8:	f7ff ff59 	bl	800f88e <memcpy.isra.0>
 800f9dc:	2305      	movs	r3, #5
 800f9de:	4620      	mov	r0, r4
 800f9e0:	75eb      	strb	r3, [r5, #23]
 800f9e2:	b003      	add	sp, #12
 800f9e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9e8:	f7ff bb7e 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800f9ec:	2000cb68 	andcs	ip, r0, r8, ror #22

0800f9f0 <RDMHandler::GetZeroconf(unsigned short)>:
 800f9f0:	b538      	push	{r3, r4, r5, lr}
 800f9f2:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	3117      	adds	r1, #23
 800f9fc:	f105 0018 	add.w	r0, r5, #24
 800fa00:	f7ff ff45 	bl	800f88e <memcpy.isra.0>
 800fa04:	4b07      	ldr	r3, [pc, #28]	@ (800fa24 <RDMHandler::GetZeroconf(unsigned short)+0x34>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	795b      	ldrb	r3, [r3, #5]
 800fa0a:	b11b      	cbz	r3, 800fa14 <RDMHandler::GetZeroconf(unsigned short)+0x24>
 800fa0c:	4b06      	ldr	r3, [pc, #24]	@ (800fa28 <RDMHandler::GetZeroconf(unsigned short)+0x38>)
 800fa0e:	7e9b      	ldrb	r3, [r3, #26]
 800fa10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fa14:	772b      	strb	r3, [r5, #28]
 800fa16:	2305      	movs	r3, #5
 800fa18:	75eb      	strb	r3, [r5, #23]
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa20:	f7ff bb62 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fa24:	2000cb68 	andcs	ip, r0, r8, ror #22
 800fa28:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800fa2c <RDMHandler::SetZeroconf(bool, unsigned short)>:
 800fa2c:	4b10      	ldr	r3, [pc, #64]	@ (800fa70 <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 800fa2e:	6842      	ldr	r2, [r0, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	7959      	ldrb	r1, [r3, #5]
 800fa34:	b510      	push	{r4, lr}
 800fa36:	4604      	mov	r4, r0
 800fa38:	b921      	cbnz	r1, 800fa44 <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 800fa3a:	210b      	movs	r1, #11
 800fa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa40:	f7ff bc40 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800fa44:	7ed2      	ldrb	r2, [r2, #27]
 800fa46:	2a01      	cmp	r2, #1
 800fa48:	d109      	bne.n	800fa5e <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 800fa4a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800fa4e:	f042 0210 	orr.w	r2, r2, #16
 800fa52:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800fa56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa5a:	f7ff bb45 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fa5e:	b92a      	cbnz	r2, 800fa6c <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 800fa60:	4618      	mov	r0, r3
 800fa62:	4611      	mov	r1, r2
 800fa64:	f004 fd8a 	bl	801457c <Network::SetQueuedStaticIp(unsigned long, unsigned long)>
 800fa68:	4620      	mov	r0, r4
 800fa6a:	e7f4      	b.n	800fa56 <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 800fa6c:	2106      	movs	r1, #6
 800fa6e:	e7e5      	b.n	800fa3c <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 800fa70:	2000cb68 	andcs	ip, r0, r8, ror #22

0800fa74 <RDMHandler::RenewDhcp(bool, unsigned short)>:
 800fa74:	b510      	push	{r4, lr}
 800fa76:	4b09      	ldr	r3, [pc, #36]	@ (800fa9c <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 800fa78:	7e9b      	ldrb	r3, [r3, #26]
 800fa7a:	079b      	lsls	r3, r3, #30
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	d404      	bmi.n	800fa8a <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 800fa80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa84:	210b      	movs	r1, #11
 800fa86:	f7ff bc1d 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800fa8a:	4b05      	ldr	r3, [pc, #20]	@ (800faa0 <RDMHandler::RenewDhcp(bool, unsigned short)+0x2c>)
 800fa8c:	6818      	ldr	r0, [r3, #0]
 800fa8e:	f004 fd6e 	bl	801456e <Network::EnableDhcp()>
 800fa92:	4620      	mov	r0, r4
 800fa94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa98:	f7ff bb26 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fa9c:	2000cb88 	andcs	ip, r0, r8, lsl #23
 800faa0:	2000cb68 	andcs	ip, r0, r8, ror #22

0800faa4 <RDMHandler::GetAddressNetmask(unsigned short)>:
 800faa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faa6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800faaa:	4e11      	ldr	r6, [pc, #68]	@ (800faf0 <RDMHandler::GetAddressNetmask(unsigned short)+0x4c>)
 800faac:	4604      	mov	r4, r0
 800faae:	6833      	ldr	r3, [r6, #0]
 800fab0:	9301      	str	r3, [sp, #4]
 800fab2:	f105 0018 	add.w	r0, r5, #24
 800fab6:	2204      	movs	r2, #4
 800fab8:	3117      	adds	r1, #23
 800faba:	f7ff fee8 	bl	800f88e <memcpy.isra.0>
 800fabe:	2204      	movs	r2, #4
 800fac0:	eb0d 0102 	add.w	r1, sp, r2
 800fac4:	f105 001c 	add.w	r0, r5, #28
 800fac8:	f7ff fee1 	bl	800f88e <memcpy.isra.0>
 800facc:	6870      	ldr	r0, [r6, #4]
 800face:	f00b fb51 	bl	801b174 <__popcountsi2>
 800fad2:	7eb3      	ldrb	r3, [r6, #26]
 800fad4:	f885 0020 	strb.w	r0, [r5, #32]
 800fad8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fadc:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
 800fae0:	4620      	mov	r0, r4
 800fae2:	230a      	movs	r3, #10
 800fae4:	75eb      	strb	r3, [r5, #23]
 800fae6:	b002      	add	sp, #8
 800fae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800faec:	f7ff bafc 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800faf0:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800faf4 <RDMHandler::GetStaticAddress(unsigned short)>:
 800faf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faf6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fafa:	4e0f      	ldr	r6, [pc, #60]	@ (800fb38 <RDMHandler::GetStaticAddress(unsigned short)+0x44>)
 800fafc:	4604      	mov	r4, r0
 800fafe:	6833      	ldr	r3, [r6, #0]
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	f105 0018 	add.w	r0, r5, #24
 800fb06:	2204      	movs	r2, #4
 800fb08:	3117      	adds	r1, #23
 800fb0a:	f7ff fec0 	bl	800f88e <memcpy.isra.0>
 800fb0e:	2204      	movs	r2, #4
 800fb10:	eb0d 0102 	add.w	r1, sp, r2
 800fb14:	f105 001c 	add.w	r0, r5, #28
 800fb18:	f7ff feb9 	bl	800f88e <memcpy.isra.0>
 800fb1c:	6870      	ldr	r0, [r6, #4]
 800fb1e:	f00b fb29 	bl	801b174 <__popcountsi2>
 800fb22:	2309      	movs	r3, #9
 800fb24:	f885 0020 	strb.w	r0, [r5, #32]
 800fb28:	4620      	mov	r0, r4
 800fb2a:	75eb      	strb	r3, [r5, #23]
 800fb2c:	b002      	add	sp, #8
 800fb2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb32:	f7ff bad9 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fb36:	bf00      	nop
 800fb38:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800fb3c <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 800fb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb3e:	6845      	ldr	r5, [r0, #4]
 800fb40:	7dab      	ldrb	r3, [r5, #22]
 800fb42:	2b09      	cmp	r3, #9
 800fb44:	4604      	mov	r4, r0
 800fb46:	d005      	beq.n	800fb54 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 800fb48:	2101      	movs	r1, #1
 800fb4a:	b003      	add	sp, #12
 800fb4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb50:	f7ff bbb8 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800fb54:	2204      	movs	r2, #4
 800fb56:	eb0d 0002 	add.w	r0, sp, r2
 800fb5a:	f105 011b 	add.w	r1, r5, #27
 800fb5e:	f7ff fe96 	bl	800f88e <memcpy.isra.0>
 800fb62:	4b09      	ldr	r3, [pc, #36]	@ (800fb88 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x4c>)
 800fb64:	7fea      	ldrb	r2, [r5, #31]
 800fb66:	6818      	ldr	r0, [r3, #0]
 800fb68:	9901      	ldr	r1, [sp, #4]
 800fb6a:	b12a      	cbz	r2, 800fb78 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x3c>
 800fb6c:	f1c2 0220 	rsb	r2, r2, #32
 800fb70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb74:	4093      	lsls	r3, r2
 800fb76:	ba1a      	rev	r2, r3
 800fb78:	f004 fd00 	bl	801457c <Network::SetQueuedStaticIp(unsigned long, unsigned long)>
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	b003      	add	sp, #12
 800fb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb84:	f7ff bab0 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fb88:	2000cb68 	andcs	ip, r0, r8, ror #22

0800fb8c <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 800fb8c:	4b08      	ldr	r3, [pc, #32]	@ (800fbb0 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 800fb8e:	b510      	push	{r4, lr}
 800fb90:	4604      	mov	r4, r0
 800fb92:	6818      	ldr	r0, [r3, #0]
 800fb94:	f004 fd14 	bl	80145c0 <Network::ApplyQueuedConfig()>
 800fb98:	b120      	cbz	r0, 800fba4 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fba0:	f7ff baa2 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fba4:	4620      	mov	r0, r4
 800fba6:	2101      	movs	r1, #1
 800fba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbac:	f7ff bb8a 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800fbb0:	2000cb68 	andcs	ip, r0, r8, ror #22

0800fbb4 <RDMHandler::GetDefaultRoute(unsigned short)>:
 800fbb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbb6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fbba:	4b0c      	ldr	r3, [pc, #48]	@ (800fbec <RDMHandler::GetDefaultRoute(unsigned short)+0x38>)
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	9301      	str	r3, [sp, #4]
 800fbc2:	f105 0018 	add.w	r0, r5, #24
 800fbc6:	2204      	movs	r2, #4
 800fbc8:	3117      	adds	r1, #23
 800fbca:	f7ff fe60 	bl	800f88e <memcpy.isra.0>
 800fbce:	2204      	movs	r2, #4
 800fbd0:	f105 001c 	add.w	r0, r5, #28
 800fbd4:	eb0d 0102 	add.w	r1, sp, r2
 800fbd8:	f7ff fe59 	bl	800f88e <memcpy.isra.0>
 800fbdc:	2308      	movs	r3, #8
 800fbde:	4620      	mov	r0, r4
 800fbe0:	75eb      	strb	r3, [r5, #23]
 800fbe2:	b003      	add	sp, #12
 800fbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe8:	f7ff ba7e 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fbec:	2000cb88 	andcs	ip, r0, r8, lsl #23

0800fbf0 <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 800fbf0:	b513      	push	{r0, r1, r4, lr}
 800fbf2:	6841      	ldr	r1, [r0, #4]
 800fbf4:	7d8b      	ldrb	r3, [r1, #22]
 800fbf6:	2b08      	cmp	r3, #8
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	d005      	beq.n	800fc08 <RDMHandler::SetDefaultRoute(bool, unsigned short)+0x18>
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	b002      	add	sp, #8
 800fc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc04:	f7ff bb5e 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800fc08:	2204      	movs	r2, #4
 800fc0a:	eb0d 0002 	add.w	r0, sp, r2
 800fc0e:	311b      	adds	r1, #27
 800fc10:	f7ff fe3d 	bl	800f88e <memcpy.isra.0>
 800fc14:	4b05      	ldr	r3, [pc, #20]	@ (800fc2c <RDMHandler::SetDefaultRoute(bool, unsigned short)+0x3c>)
 800fc16:	9901      	ldr	r1, [sp, #4]
 800fc18:	6818      	ldr	r0, [r3, #0]
 800fc1a:	f004 fcc3 	bl	80145a4 <Network::SetQueuedDefaultRoute(unsigned long)>
 800fc1e:	4620      	mov	r0, r4
 800fc20:	b002      	add	sp, #8
 800fc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc26:	f7ff ba5f 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fc2a:	bf00      	nop
 800fc2c:	2000cb68 	andcs	ip, r0, r8, ror #22

0800fc30 <RDMHandler::GetHostName(unsigned short)>:
 800fc30:	4b09      	ldr	r3, [pc, #36]	@ (800fc58 <RDMHandler::GetHostName(unsigned short)+0x28>)
 800fc32:	6819      	ldr	r1, [r3, #0]
 800fc34:	3116      	adds	r1, #22
 800fc36:	b510      	push	{r4, lr}
 800fc38:	460b      	mov	r3, r1
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	3301      	adds	r3, #1
 800fc40:	7810      	ldrb	r0, [r2, #0]
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d1fa      	bne.n	800fc3c <RDMHandler::GetHostName(unsigned short)+0xc>
 800fc46:	4620      	mov	r0, r4
 800fc48:	1a52      	subs	r2, r2, r1
 800fc4a:	f7ff f9f6 	bl	800f03a <RDMHandler::HandleString(char const*, unsigned long)>
 800fc4e:	4620      	mov	r0, r4
 800fc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc54:	f7ff ba48 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fc58:	2000cb68 	andcs	ip, r0, r8, ror #22

0800fc5c <RDMHandler::SetHostName(bool, unsigned short)>:
 800fc5c:	b510      	push	{r4, lr}
 800fc5e:	6841      	ldr	r1, [r0, #4]
 800fc60:	7d8b      	ldrb	r3, [r1, #22]
 800fc62:	2b3f      	cmp	r3, #63	@ 0x3f
 800fc64:	4604      	mov	r4, r0
 800fc66:	d904      	bls.n	800fc72 <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 800fc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6c:	2102      	movs	r1, #2
 800fc6e:	f7ff bb29 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
 800fc72:	440b      	add	r3, r1
 800fc74:	2200      	movs	r2, #0
 800fc76:	75da      	strb	r2, [r3, #23]
 800fc78:	4b04      	ldr	r3, [pc, #16]	@ (800fc8c <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 800fc7a:	3117      	adds	r1, #23
 800fc7c:	6818      	ldr	r0, [r3, #0]
 800fc7e:	f004 fc45 	bl	801450c <Network::SetHostName(char const*)>
 800fc82:	4620      	mov	r0, r4
 800fc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc88:	f7ff ba2e 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fc8c:	2000cb68 	andcs	ip, r0, r8, ror #22

0800fc90 <RDMHandler::GetDomainName(unsigned short)>:
 800fc90:	4b09      	ldr	r3, [pc, #36]	@ (800fcb8 <RDMHandler::GetDomainName(unsigned short)+0x28>)
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	3156      	adds	r1, #86	@ 0x56
 800fc96:	b510      	push	{r4, lr}
 800fc98:	460b      	mov	r3, r1
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	3301      	adds	r3, #1
 800fca0:	7810      	ldrb	r0, [r2, #0]
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d1fa      	bne.n	800fc9c <RDMHandler::GetDomainName(unsigned short)+0xc>
 800fca6:	4620      	mov	r0, r4
 800fca8:	1a52      	subs	r2, r2, r1
 800fcaa:	f7ff f9c6 	bl	800f03a <RDMHandler::HandleString(char const*, unsigned long)>
 800fcae:	4620      	mov	r0, r4
 800fcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcb4:	f7ff ba18 	b.w	800f0e8 <RDMHandler::RespondMessageAck()>
 800fcb8:	2000cb68 	andcs	ip, r0, r8, ror #22

0800fcbc <RDMHandler::SetDomainName(bool, unsigned short)>:
 800fcbc:	210b      	movs	r1, #11
 800fcbe:	f7ff bb01 	b.w	800f2c4 <RDMHandler::RespondMessageNack(unsigned short)>
	...

0800fcc4 <RDMDevice::RDMDevice()>:
 800fcc4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800fcc8:	b513      	push	{r0, r1, r4, lr}
 800fcca:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800fcce:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 800fcd8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 800fcdc:	f880 3052 	strb.w	r3, [r0, #82]	@ 0x52
 800fce0:	4b1c      	ldr	r3, [pc, #112]	@ (800fd54 <RDMDevice::RDMDevice()+0x90>)
 800fce2:	491d      	ldr	r1, [pc, #116]	@ (800fd58 <RDMDevice::RDMDevice()+0x94>)
 800fce4:	6018      	str	r0, [r3, #0]
 800fce6:	4b1d      	ldr	r3, [pc, #116]	@ (800fd5c <RDMDevice::RDMDevice()+0x98>)
 800fce8:	781a      	ldrb	r2, [r3, #0]
 800fcea:	f880 2046 	strb.w	r2, [r0, #70]	@ 0x46
 800fcee:	785b      	ldrb	r3, [r3, #1]
 800fcf0:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 800fcf4:	466a      	mov	r2, sp
 800fcf6:	2306      	movs	r3, #6
 800fcf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcfc:	f802 4b01 	strb.w	r4, [r2], #1
 800fd00:	3b01      	subs	r3, #1
 800fd02:	d1f9      	bne.n	800fcf8 <RDMDevice::RDMDevice()+0x34>
 800fd04:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fd08:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fd0c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fd10:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800fd14:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 800fd18:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 800fd1c:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 800fd20:	f880 304f 	strb.w	r3, [r0, #79]	@ 0x4f
 800fd24:	4a0e      	ldr	r2, [pc, #56]	@ (800fd60 <RDMDevice::RDMDevice()+0x9c>)
 800fd26:	f880 104a 	strb.w	r1, [r0, #74]	@ 0x4a
 800fd2a:	2319      	movs	r3, #25
 800fd2c:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
 800fd30:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 800fd34:	f880 404b 	strb.w	r4, [r0, #75]	@ 0x4b
 800fd38:	f880 404c 	strb.w	r4, [r0, #76]	@ 0x4c
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	f100 0119 	add.w	r1, r0, #25
 800fd42:	f812 4b01 	ldrb.w	r4, [r2], #1
 800fd46:	f803 4b01 	strb.w	r4, [r3], #1
 800fd4a:	4299      	cmp	r1, r3
 800fd4c:	d1f9      	bne.n	800fd42 <RDMDevice::RDMDevice()+0x7e>
 800fd4e:	b002      	add	sp, #8
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	2000c808 	andcs	ip, r0, r8, lsl #16
 800fd58:	2000cb9c 	mulcs	r0, ip, fp
 800fd5c:	0801ebf1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}
 800fd60:	0801ec0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, sp, lr, pc}

0800fd64 <RDMDevice::Print()>:
 800fd64:	b513      	push	{r0, r1, r4, lr}
 800fd66:	4604      	mov	r4, r0
 800fd68:	481f      	ldr	r0, [pc, #124]	@ (800fde8 <RDMDevice::Print()+0x84>)
 800fd6a:	f00a ffb2 	bl	801acd2 <puts>
 800fd6e:	4b1f      	ldr	r3, [pc, #124]	@ (800fdec <RDMDevice::Print()+0x88>)
 800fd70:	461a      	mov	r2, r3
 800fd72:	4619      	mov	r1, r3
 800fd74:	3301      	adds	r3, #1
 800fd76:	7808      	ldrb	r0, [r1, #0]
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	d1fa      	bne.n	800fd72 <RDMDevice::Print()+0xe>
 800fd7c:	1a89      	subs	r1, r1, r2
 800fd7e:	2920      	cmp	r1, #32
 800fd80:	bf28      	it	cs
 800fd82:	2120      	movcs	r1, #32
 800fd84:	4a19      	ldr	r2, [pc, #100]	@ (800fdec <RDMDevice::Print()+0x88>)
 800fd86:	481a      	ldr	r0, [pc, #104]	@ (800fdf0 <RDMDevice::Print()+0x8c>)
 800fd88:	f00a ff4e 	bl	801ac28 <printf>
 800fd8c:	f894 2047 	ldrb.w	r2, [r4, #71]	@ 0x47
 800fd90:	f894 1046 	ldrb.w	r1, [r4, #70]	@ 0x46
 800fd94:	4817      	ldr	r0, [pc, #92]	@ (800fdf4 <RDMDevice::Print()+0x90>)
 800fd96:	f00a ff47 	bl	801ac28 <printf>
 800fd9a:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 800fd9e:	9300      	str	r3, [sp, #0]
 800fda0:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 800fda4:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 800fda8:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 800fdac:	4812      	ldr	r0, [pc, #72]	@ (800fdf8 <RDMDevice::Print()+0x94>)
 800fdae:	f00a ff3b 	bl	801ac28 <printf>
 800fdb2:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 800fdb6:	4811      	ldr	r0, [pc, #68]	@ (800fdfc <RDMDevice::Print()+0x98>)
 800fdb8:	f104 0220 	add.w	r2, r4, #32
 800fdbc:	f00a ff34 	bl	801ac28 <printf>
 800fdc0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800fdc4:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800fdc8:	480d      	ldr	r0, [pc, #52]	@ (800fe00 <RDMDevice::Print()+0x9c>)
 800fdca:	0a09      	lsrs	r1, r1, #8
 800fdcc:	f00a ff2c 	bl	801ac28 <printf>
 800fdd0:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 800fdd4:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800fdd8:	480a      	ldr	r0, [pc, #40]	@ (800fe04 <RDMDevice::Print()+0xa0>)
 800fdda:	0a09      	lsrs	r1, r1, #8
 800fddc:	b002      	add	sp, #8
 800fdde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fde2:	f00a bf21 	b.w	801ac28 <printf>
 800fde6:	bf00      	nop
 800fde8:	0801bdcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, sl, fp, ip, sp, pc}
 800fdec:	0801ebf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}
 800fdf0:	0801bde6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 800fdf4:	0801be01 	stmdaeq	r1, {r0, r9, sl, fp, ip, sp, pc}
 800fdf8:	0801be20 	stmdaeq	r1, {r5, r9, sl, fp, ip, sp, pc}
 800fdfc:	0801be47 	stmdaeq	r1, {r0, r1, r2, r6, r9, sl, fp, ip, sp, pc}
 800fe00:	0801be62 	stmdaeq	r1, {r1, r5, r6, r9, sl, fp, ip, sp, pc}
 800fe04:	0801be81 	stmdaeq	r1, {r0, r7, r9, sl, fp, ip, sp, pc}

0800fe08 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>:
 800fe08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe0a:	88c6      	ldrh	r6, [r0, #6]
 800fe0c:	8885      	ldrh	r5, [r0, #4]
 800fe0e:	42ae      	cmp	r6, r5
 800fe10:	d216      	bcs.n	800fe40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x38>
 800fe12:	4604      	mov	r4, r0
 800fe14:	6800      	ldr	r0, [r0, #0]
 800fe16:	1bad      	subs	r5, r5, r6
 800fe18:	4430      	add	r0, r6
 800fe1a:	7a26      	ldrb	r6, [r4, #8]
 800fe1c:	b923      	cbnz	r3, 800fe28 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x20>
 800fe1e:	b926      	cbnz	r6, 800fe2a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x22>
 800fe20:	9200      	str	r2, [sp, #0]
 800fe22:	460b      	mov	r3, r1
 800fe24:	4a09      	ldr	r2, [pc, #36]	@ (800fe4c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x44>)
 800fe26:	e003      	b.n	800fe30 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 800fe28:	b166      	cbz	r6, 800fe44 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x3c>
 800fe2a:	9200      	str	r2, [sp, #0]
 800fe2c:	4a08      	ldr	r2, [pc, #32]	@ (800fe50 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x48>)
 800fe2e:	460b      	mov	r3, r1
 800fe30:	4629      	mov	r1, r5
 800fe32:	f00a ff21 	bl	801ac78 <snprintf>
 800fe36:	4285      	cmp	r5, r0
 800fe38:	bfa2      	ittt	ge
 800fe3a:	88e3      	ldrhge	r3, [r4, #6]
 800fe3c:	181b      	addge	r3, r3, r0
 800fe3e:	80e3      	strhge	r3, [r4, #6]
 800fe40:	b002      	add	sp, #8
 800fe42:	bd70      	pop	{r4, r5, r6, pc}
 800fe44:	9200      	str	r2, [sp, #0]
 800fe46:	460b      	mov	r3, r1
 800fe48:	4a02      	ldr	r2, [pc, #8]	@ (800fe54 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x4c>)
 800fe4a:	e7f1      	b.n	800fe30 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 800fe4c:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 800fe50:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 800fe54:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}

0800fe58 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>:
 800fe58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe5a:	88c6      	ldrh	r6, [r0, #6]
 800fe5c:	8885      	ldrh	r5, [r0, #4]
 800fe5e:	42ae      	cmp	r6, r5
 800fe60:	d216      	bcs.n	800fe90 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x38>
 800fe62:	4604      	mov	r4, r0
 800fe64:	6800      	ldr	r0, [r0, #0]
 800fe66:	1bad      	subs	r5, r5, r6
 800fe68:	4430      	add	r0, r6
 800fe6a:	7a26      	ldrb	r6, [r4, #8]
 800fe6c:	b923      	cbnz	r3, 800fe78 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x20>
 800fe6e:	b926      	cbnz	r6, 800fe7a <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x22>
 800fe70:	9200      	str	r2, [sp, #0]
 800fe72:	460b      	mov	r3, r1
 800fe74:	4a09      	ldr	r2, [pc, #36]	@ (800fe9c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x44>)
 800fe76:	e003      	b.n	800fe80 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 800fe78:	b166      	cbz	r6, 800fe94 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x3c>
 800fe7a:	9200      	str	r2, [sp, #0]
 800fe7c:	4a08      	ldr	r2, [pc, #32]	@ (800fea0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x48>)
 800fe7e:	460b      	mov	r3, r1
 800fe80:	4629      	mov	r1, r5
 800fe82:	f00a fef9 	bl	801ac78 <snprintf>
 800fe86:	4285      	cmp	r5, r0
 800fe88:	bfa2      	ittt	ge
 800fe8a:	88e3      	ldrhge	r3, [r4, #6]
 800fe8c:	181b      	addge	r3, r3, r0
 800fe8e:	80e3      	strhge	r3, [r4, #6]
 800fe90:	b002      	add	sp, #8
 800fe92:	bd70      	pop	{r4, r5, r6, pc}
 800fe94:	9200      	str	r2, [sp, #0]
 800fe96:	460b      	mov	r3, r1
 800fe98:	4a02      	ldr	r2, [pc, #8]	@ (800fea4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x4c>)
 800fe9a:	e7f1      	b.n	800fe80 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 800fe9c:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 800fea0:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 800fea4:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}

0800fea8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>:
 800fea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800feaa:	88c6      	ldrh	r6, [r0, #6]
 800feac:	8885      	ldrh	r5, [r0, #4]
 800feae:	42ae      	cmp	r6, r5
 800feb0:	d216      	bcs.n	800fee0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x38>
 800feb2:	4604      	mov	r4, r0
 800feb4:	6800      	ldr	r0, [r0, #0]
 800feb6:	1bad      	subs	r5, r5, r6
 800feb8:	4430      	add	r0, r6
 800feba:	7a26      	ldrb	r6, [r4, #8]
 800febc:	b923      	cbnz	r3, 800fec8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x20>
 800febe:	b926      	cbnz	r6, 800feca <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x22>
 800fec0:	9200      	str	r2, [sp, #0]
 800fec2:	460b      	mov	r3, r1
 800fec4:	4a09      	ldr	r2, [pc, #36]	@ (800feec <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x44>)
 800fec6:	e003      	b.n	800fed0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800fec8:	b166      	cbz	r6, 800fee4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x3c>
 800feca:	9200      	str	r2, [sp, #0]
 800fecc:	4a08      	ldr	r2, [pc, #32]	@ (800fef0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x48>)
 800fece:	460b      	mov	r3, r1
 800fed0:	4629      	mov	r1, r5
 800fed2:	f00a fed1 	bl	801ac78 <snprintf>
 800fed6:	4285      	cmp	r5, r0
 800fed8:	bfa2      	ittt	ge
 800feda:	88e3      	ldrhge	r3, [r4, #6]
 800fedc:	181b      	addge	r3, r3, r0
 800fede:	80e3      	strhge	r3, [r4, #6]
 800fee0:	b002      	add	sp, #8
 800fee2:	bd70      	pop	{r4, r5, r6, pc}
 800fee4:	9200      	str	r2, [sp, #0]
 800fee6:	460b      	mov	r3, r1
 800fee8:	4a02      	ldr	r2, [pc, #8]	@ (800fef4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x4c>)
 800feea:	e7f1      	b.n	800fed0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800feec:	0801b98c 	stmdaeq	r1, {r2, r3, r7, r8, fp, ip, sp, pc}
 800fef0:	0801b981 	stmdaeq	r1, {r0, r7, r8, fp, ip, sp, pc}
 800fef4:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

0800fef8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>:
 800fef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fefc:	8885      	ldrh	r5, [r0, #4]
 800fefe:	4698      	mov	r8, r3
 800ff00:	88c3      	ldrh	r3, [r0, #6]
 800ff02:	42ab      	cmp	r3, r5
 800ff04:	4604      	mov	r4, r0
 800ff06:	d229      	bcs.n	800ff5c <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x64>
 800ff08:	6826      	ldr	r6, [r4, #0]
 800ff0a:	f894 a008 	ldrb.w	sl, [r4, #8]
 800ff0e:	4691      	mov	r9, r2
 800ff10:	ee10 0a10 	vmov	r0, s0
 800ff14:	460f      	mov	r7, r1
 800ff16:	441e      	add	r6, r3
 800ff18:	1aed      	subs	r5, r5, r3
 800ff1a:	f7f9 f98f 	bl	800923c <__aeabi_f2d>
 800ff1e:	f1b9 0f00 	cmp.w	r9, #0
 800ff22:	d109      	bne.n	800ff38 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x40>
 800ff24:	f1ba 0f00 	cmp.w	sl, #0
 800ff28:	d109      	bne.n	800ff3e <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x46>
 800ff2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff2e:	4a10      	ldr	r2, [pc, #64]	@ (800ff70 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x78>)
 800ff30:	f8cd 8000 	str.w	r8, [sp]
 800ff34:	463b      	mov	r3, r7
 800ff36:	e008      	b.n	800ff4a <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x52>
 800ff38:	f1ba 0f00 	cmp.w	sl, #0
 800ff3c:	d011      	beq.n	800ff62 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x6a>
 800ff3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff42:	4a0c      	ldr	r2, [pc, #48]	@ (800ff74 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x7c>)
 800ff44:	f8cd 8000 	str.w	r8, [sp]
 800ff48:	463b      	mov	r3, r7
 800ff4a:	4629      	mov	r1, r5
 800ff4c:	4630      	mov	r0, r6
 800ff4e:	f00a fe93 	bl	801ac78 <snprintf>
 800ff52:	4285      	cmp	r5, r0
 800ff54:	bfa2      	ittt	ge
 800ff56:	88e3      	ldrhge	r3, [r4, #6]
 800ff58:	181b      	addge	r3, r3, r0
 800ff5a:	80e3      	strhge	r3, [r4, #6]
 800ff5c:	b004      	add	sp, #16
 800ff5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff66:	4a04      	ldr	r2, [pc, #16]	@ (800ff78 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x80>)
 800ff68:	f8cd 8000 	str.w	r8, [sp]
 800ff6c:	463b      	mov	r3, r7
 800ff6e:	e7ec      	b.n	800ff4a <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x52>
 800ff70:	0801beab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, sl, fp, ip, sp, pc}
 800ff74:	0801bea0 	stmdaeq	r1, {r5, r7, r9, sl, fp, ip, sp, pc}
 800ff78:	0801beac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, fp, ip, sp, pc}

0800ff7c <pixel::pixel_convert_TxH(float)>:
 800ff7c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8010010 <pixel::pixel_convert_TxH(float)+0x94>
 800ff80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ff84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff88:	d433      	bmi.n	800fff2 <pixel::pixel_convert_TxH(float)+0x76>
 800ff8a:	eef4 7a0e 	vmov.f32	s15, #78	@ 0x3e700000  0.2343750
 800ff8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ff92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff96:	d42e      	bmi.n	800fff6 <pixel::pixel_convert_TxH(float)+0x7a>
 800ff98:	eef5 7a09 	vmov.f32	s15, #89	@ 0x3ec80000  0.3906250
 800ff9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa4:	d429      	bmi.n	800fffa <pixel::pixel_convert_TxH(float)+0x7e>
 800ffa6:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8010014 <pixel::pixel_convert_TxH(float)+0x98>
 800ffaa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb2:	d424      	bmi.n	800fffe <pixel::pixel_convert_TxH(float)+0x82>
 800ffb4:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8010018 <pixel::pixel_convert_TxH(float)+0x9c>
 800ffb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc0:	d41f      	bmi.n	8010002 <pixel::pixel_convert_TxH(float)+0x86>
 800ffc2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801001c <pixel::pixel_convert_TxH(float)+0xa0>
 800ffc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffce:	d41a      	bmi.n	8010006 <pixel::pixel_convert_TxH(float)+0x8a>
 800ffd0:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8010020 <pixel::pixel_convert_TxH(float)+0xa4>
 800ffd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffdc:	d415      	bmi.n	801000a <pixel::pixel_convert_TxH(float)+0x8e>
 800ffde:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8010024 <pixel::pixel_convert_TxH(float)+0xa8>
 800ffe2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ffe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffea:	bf4c      	ite	mi
 800ffec:	20fe      	movmi	r0, #254	@ 0xfe
 800ffee:	2000      	movpl	r0, #0
 800fff0:	4770      	bx	lr
 800fff2:	2000      	movs	r0, #0
 800fff4:	4770      	bx	lr
 800fff6:	2080      	movs	r0, #128	@ 0x80
 800fff8:	4770      	bx	lr
 800fffa:	20c0      	movs	r0, #192	@ 0xc0
 800fffc:	4770      	bx	lr
 800fffe:	20e0      	movs	r0, #224	@ 0xe0
 8010000:	4770      	bx	lr
 8010002:	20f0      	movs	r0, #240	@ 0xf0
 8010004:	4770      	bx	lr
 8010006:	20f8      	movs	r0, #248	@ 0xf8
 8010008:	4770      	bx	lr
 801000a:	20fc      	movs	r0, #252	@ 0xfc
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	3da00000 	stccc	0, cr0, [r0]
 8010014:	3f0c0000 	svccc	0x000c0000
 8010018:	3f340000 	svccc	0x00340000
 801001c:	3f5c0000 	svccc	0x005c0000
 8010020:	3f820000 	svccc	0x00820000
 8010024:	3f960000 	svccc	0x00960000

08010028 <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>:
 8010028:	b507      	push	{r0, r1, r2, lr}
 801002a:	2300      	movs	r3, #0
 801002c:	2101      	movs	r1, #1
 801002e:	e9cd 3100 	strd	r3, r1, [sp]
 8010032:	4602      	mov	r2, r0
 8010034:	4804      	ldr	r0, [pc, #16]	@ (8010048 <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)+0x20>)
 8010036:	2326      	movs	r3, #38	@ 0x26
 8010038:	6800      	ldr	r0, [r0, #0]
 801003a:	2102      	movs	r1, #2
 801003c:	f007 f8ba 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 8010040:	b003      	add	sp, #12
 8010042:	f85d fb04 	ldr.w	pc, [sp], #4
 8010046:	bf00      	nop
 8010048:	2000cc34 	andcs	ip, r0, r4, lsr ip

0801004c <PixelDmxParams::PixelDmxParams()>:
 801004c:	2103      	movs	r1, #3
 801004e:	7101      	strb	r1, [r0, #4]
 8010050:	f06f 0155 	mvn.w	r1, #85	@ 0x55
 8010054:	7141      	strb	r1, [r0, #5]
 8010056:	2101      	movs	r1, #1
 8010058:	71c1      	strb	r1, [r0, #7]
 801005a:	73c1      	strb	r1, [r0, #15]
 801005c:	7441      	strb	r1, [r0, #17]
 801005e:	7581      	strb	r1, [r0, #22]
 8010060:	2105      	movs	r1, #5
 8010062:	b530      	push	{r4, r5, lr}
 8010064:	7601      	strb	r1, [r0, #24]
 8010066:	253d      	movs	r5, #61	@ 0x3d
 8010068:	210d      	movs	r1, #13
 801006a:	7305      	strb	r5, [r0, #12]
 801006c:	7701      	strb	r1, [r0, #28]
 801006e:	25ff      	movs	r5, #255	@ 0xff
 8010070:	2111      	movs	r1, #17
 8010072:	2200      	movs	r2, #0
 8010074:	2409      	movs	r4, #9
 8010076:	7385      	strb	r5, [r0, #14]
 8010078:	7781      	strb	r1, [r0, #30]
 801007a:	2506      	movs	r5, #6
 801007c:	2115      	movs	r1, #21
 801007e:	7002      	strb	r2, [r0, #0]
 8010080:	7042      	strb	r2, [r0, #1]
 8010082:	7082      	strb	r2, [r0, #2]
 8010084:	70c2      	strb	r2, [r0, #3]
 8010086:	7182      	strb	r2, [r0, #6]
 8010088:	7202      	strb	r2, [r0, #8]
 801008a:	7282      	strb	r2, [r0, #10]
 801008c:	72c4      	strb	r4, [r0, #11]
 801008e:	7342      	strb	r2, [r0, #13]
 8010090:	7482      	strb	r2, [r0, #18]
 8010092:	74c5      	strb	r5, [r0, #19]
 8010094:	7502      	strb	r2, [r0, #20]
 8010096:	7542      	strb	r2, [r0, #21]
 8010098:	7242      	strb	r2, [r0, #9]
 801009a:	7402      	strb	r2, [r0, #16]
 801009c:	75c2      	strb	r2, [r0, #23]
 801009e:	7642      	strb	r2, [r0, #25]
 80100a0:	7684      	strb	r4, [r0, #26]
 80100a2:	76c2      	strb	r2, [r0, #27]
 80100a4:	7742      	strb	r2, [r0, #29]
 80100a6:	77c2      	strb	r2, [r0, #31]
 80100a8:	f880 1020 	strb.w	r1, [r0, #32]
 80100ac:	2119      	movs	r1, #25
 80100ae:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22
 80100b2:	211d      	movs	r1, #29
 80100b4:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 80100b8:	f880 2023 	strb.w	r2, [r0, #35]	@ 0x23
 80100bc:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80100c0:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 80100c4:	bd30      	pop	{r4, r5, pc}
	...

080100c8 <PixelDmxParams::callbackFunction(char const*)>:
 80100c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100cc:	4604      	mov	r4, r0
 80100ce:	b088      	sub	sp, #32
 80100d0:	460d      	mov	r5, r1
 80100d2:	b929      	cbnz	r1, 80100e0 <PixelDmxParams::callbackFunction(char const*)+0x18>
 80100d4:	4b8d      	ldr	r3, [pc, #564]	@ (801030c <PixelDmxParams::callbackFunction(char const*)+0x244>)
 80100d6:	4a8e      	ldr	r2, [pc, #568]	@ (8010310 <PixelDmxParams::callbackFunction(char const*)+0x248>)
 80100d8:	488e      	ldr	r0, [pc, #568]	@ (8010314 <PixelDmxParams::callbackFunction(char const*)+0x24c>)
 80100da:	217a      	movs	r1, #122	@ 0x7a
 80100dc:	f00a fe84 	bl	801ade8 <__assert_func>
 80100e0:	2308      	movs	r3, #8
 80100e2:	9302      	str	r3, [sp, #8]
 80100e4:	498c      	ldr	r1, [pc, #560]	@ (8010318 <PixelDmxParams::callbackFunction(char const*)+0x250>)
 80100e6:	446b      	add	r3, sp
 80100e8:	aa04      	add	r2, sp, #16
 80100ea:	4628      	mov	r0, r5
 80100ec:	f007 fb76 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 80100f0:	b9a0      	cbnz	r0, 801011c <PixelDmxParams::callbackFunction(char const*)+0x54>
 80100f2:	9b02      	ldr	r3, [sp, #8]
 80100f4:	3320      	adds	r3, #32
 80100f6:	446b      	add	r3, sp
 80100f8:	f803 0c10 	strb.w	r0, [r3, #-16]
 80100fc:	a804      	add	r0, sp, #16
 80100fe:	f001 fb81 	bl	8011804 <pixel::pixel_get_type(char const*)>
 8010102:	6823      	ldr	r3, [r4, #0]
 8010104:	280e      	cmp	r0, #14
 8010106:	bf0d      	iteet	eq
 8010108:	2203      	moveq	r2, #3
 801010a:	7120      	strbne	r0, [r4, #4]
 801010c:	f043 0301 	orrne.w	r3, r3, #1
 8010110:	7122      	strbeq	r2, [r4, #4]
 8010112:	bf08      	it	eq
 8010114:	f023 0301 	biceq.w	r3, r3, #1
 8010118:	6023      	str	r3, [r4, #0]
 801011a:	e033      	b.n	8010184 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 801011c:	497f      	ldr	r1, [pc, #508]	@ (801031c <PixelDmxParams::callbackFunction(char const*)+0x254>)
 801011e:	f10d 0202 	add.w	r2, sp, #2
 8010122:	4628      	mov	r0, r5
 8010124:	f007 fc05 	bl	8017932 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8010128:	b990      	cbnz	r0, 8010150 <PixelDmxParams::callbackFunction(char const*)+0x88>
 801012a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801012e:	6823      	ldr	r3, [r4, #0]
 8010130:	1e51      	subs	r1, r2, #1
 8010132:	f5b1 7f2a 	cmp.w	r1, #680	@ 0x2a8
 8010136:	bf2d      	iteet	cs
 8010138:	f06f 0255 	mvncs.w	r2, #85	@ 0x55
 801013c:	f8a4 2005 	strhcc.w	r2, [r4, #5]
 8010140:	f043 0302 	orrcc.w	r3, r3, #2
 8010144:	7162      	strbcs	r2, [r4, #5]
 8010146:	bf24      	itt	cs
 8010148:	71a0      	strbcs	r0, [r4, #6]
 801014a:	f023 0302 	biccs.w	r3, r3, #2
 801014e:	e7e3      	b.n	8010118 <PixelDmxParams::callbackFunction(char const*)+0x50>
 8010150:	2303      	movs	r3, #3
 8010152:	9302      	str	r3, [sp, #8]
 8010154:	4972      	ldr	r1, [pc, #456]	@ (8010320 <PixelDmxParams::callbackFunction(char const*)+0x258>)
 8010156:	ab02      	add	r3, sp, #8
 8010158:	aa04      	add	r2, sp, #16
 801015a:	4628      	mov	r0, r5
 801015c:	f007 fb3e 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 8010160:	b998      	cbnz	r0, 801018a <PixelDmxParams::callbackFunction(char const*)+0xc2>
 8010162:	9b02      	ldr	r3, [sp, #8]
 8010164:	3320      	adds	r3, #32
 8010166:	446b      	add	r3, sp
 8010168:	f803 0c10 	strb.w	r0, [r3, #-16]
 801016c:	a804      	add	r0, sp, #16
 801016e:	f001 fb79 	bl	8011864 <pixel::pixel_get_map(char const*)>
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	74e0      	strb	r0, [r4, #19]
 8010176:	2806      	cmp	r0, #6
 8010178:	bf14      	ite	ne
 801017a:	f443 7300 	orrne.w	r3, r3, #512	@ 0x200
 801017e:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 8010182:	6023      	str	r3, [r4, #0]
 8010184:	b008      	add	sp, #32
 8010186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801018a:	4966      	ldr	r1, [pc, #408]	@ (8010324 <PixelDmxParams::callbackFunction(char const*)+0x25c>)
 801018c:	aa01      	add	r2, sp, #4
 801018e:	4628      	mov	r0, r5
 8010190:	f007 fb3d 	bl	801780e <Sscan::Float(char const*, char const*, float&)>
 8010194:	b968      	cbnz	r0, 80101b2 <PixelDmxParams::callbackFunction(char const*)+0xea>
 8010196:	ed9d 0a01 	vldr	s0, [sp, #4]
 801019a:	f7ff feef 	bl	800ff7c <pixel::pixel_convert_TxH(float)>
 801019e:	6823      	ldr	r3, [r4, #0]
 80101a0:	b120      	cbz	r0, 80101ac <PixelDmxParams::callbackFunction(char const*)+0xe4>
 80101a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80101a6:	6023      	str	r3, [r4, #0]
 80101a8:	7520      	strb	r0, [r4, #20]
 80101aa:	e7eb      	b.n	8010184 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 80101ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80101b0:	e7f9      	b.n	80101a6 <PixelDmxParams::callbackFunction(char const*)+0xde>
 80101b2:	495d      	ldr	r1, [pc, #372]	@ (8010328 <PixelDmxParams::callbackFunction(char const*)+0x260>)
 80101b4:	aa01      	add	r2, sp, #4
 80101b6:	4628      	mov	r0, r5
 80101b8:	f007 fb29 	bl	801780e <Sscan::Float(char const*, char const*, float&)>
 80101bc:	b968      	cbnz	r0, 80101da <PixelDmxParams::callbackFunction(char const*)+0x112>
 80101be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80101c2:	f7ff fedb 	bl	800ff7c <pixel::pixel_convert_TxH(float)>
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	b120      	cbz	r0, 80101d4 <PixelDmxParams::callbackFunction(char const*)+0x10c>
 80101ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	7560      	strb	r0, [r4, #21]
 80101d2:	e7d7      	b.n	8010184 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 80101d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80101d8:	e7f9      	b.n	80101ce <PixelDmxParams::callbackFunction(char const*)+0x106>
 80101da:	4954      	ldr	r1, [pc, #336]	@ (801032c <PixelDmxParams::callbackFunction(char const*)+0x264>)
 80101dc:	f10d 0202 	add.w	r2, sp, #2
 80101e0:	4628      	mov	r0, r5
 80101e2:	f007 fba6 	bl	8017932 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80101e6:	b998      	cbnz	r0, 8010210 <PixelDmxParams::callbackFunction(char const*)+0x148>
 80101e8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	1e8a      	subs	r2, r1, #2
 80101f0:	b292      	uxth	r2, r2
 80101f2:	f240 25a6 	movw	r5, #678	@ 0x2a6
 80101f6:	42aa      	cmp	r2, r5
 80101f8:	bf81      	itttt	hi
 80101fa:	2201      	movhi	r2, #1
 80101fc:	7462      	strbhi	r2, [r4, #17]
 80101fe:	74a0      	strbhi	r0, [r4, #18]
 8010200:	f423 7380 	bichi.w	r3, r3, #256	@ 0x100
 8010204:	bf9c      	itt	ls
 8010206:	f8a4 1011 	strhls.w	r1, [r4, #17]
 801020a:	f443 7380 	orrls.w	r3, r3, #256	@ 0x100
 801020e:	e783      	b.n	8010118 <PixelDmxParams::callbackFunction(char const*)+0x50>
 8010210:	4947      	ldr	r1, [pc, #284]	@ (8010330 <PixelDmxParams::callbackFunction(char const*)+0x268>)
 8010212:	aa03      	add	r2, sp, #12
 8010214:	4628      	mov	r0, r5
 8010216:	f007 fba8 	bl	801796a <Sscan::Uint32(char const*, char const*, unsigned long&)>
 801021a:	b960      	cbnz	r0, 8010236 <PixelDmxParams::callbackFunction(char const*)+0x16e>
 801021c:	9a03      	ldr	r2, [sp, #12]
 801021e:	4945      	ldr	r1, [pc, #276]	@ (8010334 <PixelDmxParams::callbackFunction(char const*)+0x26c>)
 8010220:	6823      	ldr	r3, [r4, #0]
 8010222:	f8c4 200a 	str.w	r2, [r4, #10]
 8010226:	428a      	cmp	r2, r1
 8010228:	bf14      	ite	ne
 801022a:	f043 0310 	orrne.w	r3, r3, #16
 801022e:	f023 0310 	biceq.w	r3, r3, #16
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	e7a6      	b.n	8010184 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 8010236:	4940      	ldr	r1, [pc, #256]	@ (8010338 <PixelDmxParams::callbackFunction(char const*)+0x270>)
 8010238:	f10d 0201 	add.w	r2, sp, #1
 801023c:	4628      	mov	r0, r5
 801023e:	f007 fbbd 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010242:	b988      	cbnz	r0, 8010268 <PixelDmxParams::callbackFunction(char const*)+0x1a0>
 8010244:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010248:	6823      	ldr	r3, [r4, #0]
 801024a:	1e4a      	subs	r2, r1, #1
 801024c:	b2d2      	uxtb	r2, r2
 801024e:	2afd      	cmp	r2, #253	@ 0xfd
 8010250:	bf89      	itett	hi
 8010252:	f023 0320 	bichi.w	r3, r3, #32
 8010256:	f043 0320 	orrls.w	r3, r3, #32
 801025a:	6023      	strhi	r3, [r4, #0]
 801025c:	23ff      	movhi	r3, #255	@ 0xff
 801025e:	bf9a      	itte	ls
 8010260:	6023      	strls	r3, [r4, #0]
 8010262:	73a1      	strbls	r1, [r4, #14]
 8010264:	73a3      	strbhi	r3, [r4, #14]
 8010266:	e78d      	b.n	8010184 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 8010268:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8010344 <PixelDmxParams::callbackFunction(char const*)+0x27c>
 801026c:	2600      	movs	r6, #0
 801026e:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8010272:	f10d 0202 	add.w	r2, sp, #2
 8010276:	4641      	mov	r1, r8
 8010278:	4628      	mov	r0, r5
 801027a:	f007 fb5a 	bl	8017932 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801027e:	b960      	cbnz	r0, 801029a <PixelDmxParams::callbackFunction(char const*)+0x1d2>
 8010280:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8010284:	6823      	ldr	r3, [r4, #0]
 8010286:	fa07 f006 	lsl.w	r0, r7, r6
 801028a:	f106 0208 	add.w	r2, r6, #8
 801028e:	b1f9      	cbz	r1, 80102d0 <PixelDmxParams::callbackFunction(char const*)+0x208>
 8010290:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8010294:	4303      	orrs	r3, r0
 8010296:	80d1      	strh	r1, [r2, #6]
 8010298:	6023      	str	r3, [r4, #0]
 801029a:	3601      	adds	r6, #1
 801029c:	2e08      	cmp	r6, #8
 801029e:	f108 0814 	add.w	r8, r8, #20
 80102a2:	d1e6      	bne.n	8010272 <PixelDmxParams::callbackFunction(char const*)+0x1aa>
 80102a4:	4925      	ldr	r1, [pc, #148]	@ (801033c <PixelDmxParams::callbackFunction(char const*)+0x274>)
 80102a6:	f10d 0201 	add.w	r2, sp, #1
 80102aa:	4628      	mov	r0, r5
 80102ac:	f007 fb86 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80102b0:	b9b0      	cbnz	r0, 80102e0 <PixelDmxParams::callbackFunction(char const*)+0x218>
 80102b2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80102b6:	6823      	ldr	r3, [r4, #0]
 80102b8:	1e91      	subs	r1, r2, #2
 80102ba:	2906      	cmp	r1, #6
 80102bc:	bf8d      	iteet	hi
 80102be:	2201      	movhi	r2, #1
 80102c0:	73e2      	strbls	r2, [r4, #15]
 80102c2:	f043 0340 	orrls.w	r3, r3, #64	@ 0x40
 80102c6:	73e2      	strbhi	r2, [r4, #15]
 80102c8:	bf88      	it	hi
 80102ca:	f023 0340 	bichi.w	r3, r3, #64	@ 0x40
 80102ce:	e723      	b.n	8010118 <PixelDmxParams::callbackFunction(char const*)+0x50>
 80102d0:	00b1      	lsls	r1, r6, #2
 80102d2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80102d6:	3101      	adds	r1, #1
 80102d8:	80d1      	strh	r1, [r2, #6]
 80102da:	ea23 0300 	bic.w	r3, r3, r0
 80102de:	e7db      	b.n	8010298 <PixelDmxParams::callbackFunction(char const*)+0x1d0>
 80102e0:	4917      	ldr	r1, [pc, #92]	@ (8010340 <PixelDmxParams::callbackFunction(char const*)+0x278>)
 80102e2:	f10d 0201 	add.w	r2, sp, #1
 80102e6:	4628      	mov	r0, r5
 80102e8:	f007 fb68 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80102ec:	2800      	cmp	r0, #0
 80102ee:	f47f af49 	bne.w	8010184 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 80102f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80102f6:	6823      	ldr	r3, [r4, #0]
 80102f8:	1e51      	subs	r1, r2, #1
 80102fa:	2904      	cmp	r1, #4
 80102fc:	bf99      	ittee	ls
 80102fe:	7422      	strbls	r2, [r4, #16]
 8010300:	f043 0308 	orrls.w	r3, r3, #8
 8010304:	7420      	strbhi	r0, [r4, #16]
 8010306:	f023 0308 	bichi.w	r3, r3, #8
 801030a:	e705      	b.n	8010118 <PixelDmxParams::callbackFunction(char const*)+0x50>
 801030c:	0801beb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 8010310:	0801bec6 	stmdaeq	r1, {r1, r2, r6, r7, r9, sl, fp, ip, sp, pc}
 8010314:	0801bed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 8010318:	0801f1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, ip, sp, lr, pc}
 801031c:	0801f1a2 	stmdaeq	r1, {r1, r5, r7, r8, ip, sp, lr, pc}
 8010320:	0801f1bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, ip, sp, lr, pc}
 8010324:	0801f1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, ip, sp, lr, pc}
 8010328:	0801f1ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, ip, sp, lr, pc}
 801032c:	0801f192 	stmdaeq	r1, {r1, r4, r7, r8, ip, sp, lr, pc}
 8010330:	0801f183 	stmdaeq	r1, {r0, r1, r7, r8, ip, sp, lr, pc}
 8010334:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8010338:	0801f171 	stmdaeq	r1, {r0, r4, r5, r6, r8, ip, sp, lr, pc}
 801033c:	0801f166 	stmdaeq	r1, {r1, r2, r5, r6, r8, ip, sp, lr, pc}
 8010340:	0801f159 	stmdaeq	r1, {r0, r3, r4, r6, r8, ip, sp, lr, pc}
 8010344:	0801f1e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, ip, sp, lr, pc}

08010348 <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	460d      	mov	r5, r1
 801034c:	4604      	mov	r4, r0
 801034e:	b930      	cbnz	r0, 801035e <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x16>
 8010350:	4b0a      	ldr	r3, [pc, #40]	@ (801037c <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x34>)
 8010352:	4a0b      	ldr	r2, [pc, #44]	@ (8010380 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x38>)
 8010354:	480b      	ldr	r0, [pc, #44]	@ (8010384 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x3c>)
 8010356:	f240 11b5 	movw	r1, #437	@ 0x1b5
 801035a:	f00a fd45 	bl	801ade8 <__assert_func>
 801035e:	b935      	cbnz	r5, 801036e <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x26>
 8010360:	4b09      	ldr	r3, [pc, #36]	@ (8010388 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x40>)
 8010362:	4a07      	ldr	r2, [pc, #28]	@ (8010380 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x38>)
 8010364:	4807      	ldr	r0, [pc, #28]	@ (8010384 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x3c>)
 8010366:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 801036a:	f00a fd3d 	bl	801ade8 <__assert_func>
 801036e:	4629      	mov	r1, r5
 8010370:	4620      	mov	r0, r4
 8010372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010376:	f7ff bea7 	b.w	80100c8 <PixelDmxParams::callbackFunction(char const*)>
 801037a:	bf00      	nop
 801037c:	0801bef5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 8010380:	0801bf02 	stmdaeq	r1, {r1, r8, r9, sl, fp, ip, sp, pc}
 8010384:	0801bed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 8010388:	0801b458 	stmdaeq	r1, {r3, r4, r6, sl, ip, sp, pc}

0801038c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)>:
 801038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801038e:	4604      	mov	r4, r0
 8010390:	b087      	sub	sp, #28
 8010392:	460e      	mov	r6, r1
 8010394:	461f      	mov	r7, r3
 8010396:	4615      	mov	r5, r2
 8010398:	b932      	cbnz	r2, 80103a8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x1c>
 801039a:	4b87      	ldr	r3, [pc, #540]	@ (80105b8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>)
 801039c:	4a87      	ldr	r2, [pc, #540]	@ (80105bc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 801039e:	4888      	ldr	r0, [pc, #544]	@ (80105c0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 80103a0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80103a4:	f00a fd20 	bl	801ade8 <__assert_func>
 80103a8:	2e00      	cmp	r6, #0
 80103aa:	f000 8092 	beq.w	80104d2 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x146>
 80103ae:	2226      	movs	r2, #38	@ 0x26
 80103b0:	4631      	mov	r1, r6
 80103b2:	4620      	mov	r0, r4
 80103b4:	f00a f93d 	bl	801a632 <memmove>
 80103b8:	4982      	ldr	r1, [pc, #520]	@ (80105c4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x238>)
 80103ba:	463b      	mov	r3, r7
 80103bc:	462a      	mov	r2, r5
 80103be:	a803      	add	r0, sp, #12
 80103c0:	f007 f8fc 	bl	80175bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 80103c4:	7920      	ldrb	r0, [r4, #4]
 80103c6:	f001 fa11 	bl	80117ec <pixel::pixel_get_type(pixel::Type)>
 80103ca:	6823      	ldr	r3, [r4, #0]
 80103cc:	497e      	ldr	r1, [pc, #504]	@ (80105c8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x23c>)
 80103ce:	4602      	mov	r2, r0
 80103d0:	f003 0301 	and.w	r3, r3, #1
 80103d4:	a803      	add	r0, sp, #12
 80103d6:	f7ff fd67 	bl	800fea8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 80103e0:	497a      	ldr	r1, [pc, #488]	@ (80105cc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x240>)
 80103e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80103e6:	a803      	add	r0, sp, #12
 80103e8:	f7ff fd36 	bl	800fe58 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 80103ec:	4978      	ldr	r1, [pc, #480]	@ (80105d0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x244>)
 80103ee:	a803      	add	r0, sp, #12
 80103f0:	f007 f9a0 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	059e      	lsls	r6, r3, #22
 80103f8:	d407      	bmi.n	801040a <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x7e>
 80103fa:	7923      	ldrb	r3, [r4, #4]
 80103fc:	3b01      	subs	r3, #1
 80103fe:	2b09      	cmp	r3, #9
 8010400:	bf96      	itet	ls
 8010402:	4a74      	ldrls	r2, [pc, #464]	@ (80105d4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x248>)
 8010404:	2302      	movhi	r3, #2
 8010406:	56d3      	ldrsbls	r3, [r2, r3]
 8010408:	74e3      	strb	r3, [r4, #19]
 801040a:	7ce0      	ldrb	r0, [r4, #19]
 801040c:	f001 fa60 	bl	80118d0 <pixel::pixel_get_map(pixel::Map)>
 8010410:	6823      	ldr	r3, [r4, #0]
 8010412:	4971      	ldr	r1, [pc, #452]	@ (80105d8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x24c>)
 8010414:	4602      	mov	r2, r0
 8010416:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801041a:	a803      	add	r0, sp, #12
 801041c:	f7ff fd44 	bl	800fea8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 8010420:	6823      	ldr	r3, [r4, #0]
 8010422:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010426:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801042a:	d011      	beq.n	8010450 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 801042c:	f7f9 fa3a 	bl	80098a4 <PixelConfiguration::Get()>
 8010430:	7923      	ldrb	r3, [r4, #4]
 8010432:	2b03      	cmp	r3, #3
 8010434:	d051      	beq.n	80104da <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x14e>
 8010436:	3b08      	subs	r3, #8
 8010438:	2b02      	cmp	r3, #2
 801043a:	bf8c      	ite	hi
 801043c:	23f0      	movhi	r3, #240	@ 0xf0
 801043e:	23fc      	movls	r3, #252	@ 0xfc
 8010440:	6822      	ldr	r2, [r4, #0]
 8010442:	0555      	lsls	r5, r2, #21
 8010444:	bf5c      	itt	pl
 8010446:	21c0      	movpl	r1, #192	@ 0xc0
 8010448:	7521      	strbpl	r1, [r4, #20]
 801044a:	0510      	lsls	r0, r2, #20
 801044c:	bf58      	it	pl
 801044e:	7563      	strbpl	r3, [r4, #21]
 8010450:	4962      	ldr	r1, [pc, #392]	@ (80105dc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x250>)
 8010452:	a803      	add	r0, sp, #12
 8010454:	f007 f96e 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 8010458:	7d20      	ldrb	r0, [r4, #20]
 801045a:	f7f9 f997 	bl	800978c <pixel::pixel_convert_TxH(unsigned char)>
 801045e:	6822      	ldr	r2, [r4, #0]
 8010460:	495f      	ldr	r1, [pc, #380]	@ (80105e0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x254>)
 8010462:	2302      	movs	r3, #2
 8010464:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8010468:	a803      	add	r0, sp, #12
 801046a:	f7ff fd45 	bl	800fef8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>
 801046e:	7d60      	ldrb	r0, [r4, #21]
 8010470:	f7f9 f98c 	bl	800978c <pixel::pixel_convert_TxH(unsigned char)>
 8010474:	6822      	ldr	r2, [r4, #0]
 8010476:	495b      	ldr	r1, [pc, #364]	@ (80105e4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 8010478:	2302      	movs	r3, #2
 801047a:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 801047e:	a803      	add	r0, sp, #12
 8010480:	f7ff fd3a 	bl	800fef8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>
 8010484:	4958      	ldr	r1, [pc, #352]	@ (80105e8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x25c>)
 8010486:	a803      	add	r0, sp, #12
 8010488:	f007 f954 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 801048c:	6823      	ldr	r3, [r4, #0]
 801048e:	f8b4 2011 	ldrh.w	r2, [r4, #17]
 8010492:	4956      	ldr	r1, [pc, #344]	@ (80105ec <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x260>)
 8010494:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8010498:	a803      	add	r0, sp, #12
 801049a:	f7ff fcdd 	bl	800fe58 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 801049e:	4954      	ldr	r1, [pc, #336]	@ (80105f0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x264>)
 80104a0:	a803      	add	r0, sp, #12
 80104a2:	f007 f947 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 80104a6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80104aa:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80104ae:	f8d4 300a 	ldr.w	r3, [r4, #10]
 80104b2:	6821      	ldr	r1, [r4, #0]
 80104b4:	42aa      	cmp	r2, r5
 80104b6:	d221      	bcs.n	80104fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x170>
 80104b8:	9803      	ldr	r0, [sp, #12]
 80104ba:	06c9      	lsls	r1, r1, #27
 80104bc:	4410      	add	r0, r2
 80104be:	eba5 0502 	sub.w	r5, r5, r2
 80104c2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80104c6:	d40a      	bmi.n	80104de <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x152>
 80104c8:	b95a      	cbnz	r2, 80104e2 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x156>
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	4a49      	ldr	r2, [pc, #292]	@ (80105f4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x268>)
 80104ce:	4b4a      	ldr	r3, [pc, #296]	@ (80105f8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 80104d0:	e00a      	b.n	80104e8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x15c>
 80104d2:	4620      	mov	r0, r4
 80104d4:	f7ff fda8 	bl	8010028 <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>
 80104d8:	e76e      	b.n	80103b8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x2c>
 80104da:	23f8      	movs	r3, #248	@ 0xf8
 80104dc:	e7b0      	b.n	8010440 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0xb4>
 80104de:	2a00      	cmp	r2, #0
 80104e0:	d066      	beq.n	80105b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x224>
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	4a45      	ldr	r2, [pc, #276]	@ (80105fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x270>)
 80104e6:	4b44      	ldr	r3, [pc, #272]	@ (80105f8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 80104e8:	4629      	mov	r1, r5
 80104ea:	f00a fbc5 	bl	801ac78 <snprintf>
 80104ee:	4285      	cmp	r5, r0
 80104f0:	bfa2      	ittt	ge
 80104f2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80104f6:	18c0      	addge	r0, r0, r3
 80104f8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80104fc:	4940      	ldr	r1, [pc, #256]	@ (8010600 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x274>)
 80104fe:	4e41      	ldr	r6, [pc, #260]	@ (8010604 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x278>)
 8010500:	a803      	add	r0, sp, #12
 8010502:	f007 f917 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 8010506:	6823      	ldr	r3, [r4, #0]
 8010508:	7ba2      	ldrb	r2, [r4, #14]
 801050a:	493f      	ldr	r1, [pc, #252]	@ (8010608 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x27c>)
 801050c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010510:	a803      	add	r0, sp, #12
 8010512:	f7ff fc79 	bl	800fe08 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8010516:	2500      	movs	r5, #0
 8010518:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 801051c:	6822      	ldr	r2, [r4, #0]
 801051e:	fa07 f305 	lsl.w	r3, r7, r5
 8010522:	4393      	bics	r3, r2
 8010524:	f105 0208 	add.w	r2, r5, #8
 8010528:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801052c:	bf0c      	ite	eq
 801052e:	2301      	moveq	r3, #1
 8010530:	2300      	movne	r3, #0
 8010532:	4631      	mov	r1, r6
 8010534:	88d2      	ldrh	r2, [r2, #6]
 8010536:	a803      	add	r0, sp, #12
 8010538:	3501      	adds	r5, #1
 801053a:	f7ff fc8d 	bl	800fe58 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 801053e:	2d08      	cmp	r5, #8
 8010540:	f106 0614 	add.w	r6, r6, #20
 8010544:	d1ea      	bne.n	801051c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x190>
 8010546:	6823      	ldr	r3, [r4, #0]
 8010548:	7be2      	ldrb	r2, [r4, #15]
 801054a:	4930      	ldr	r1, [pc, #192]	@ (801060c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x280>)
 801054c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010550:	a803      	add	r0, sp, #12
 8010552:	f7ff fc59 	bl	800fe08 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8010556:	492e      	ldr	r1, [pc, #184]	@ (8010610 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x284>)
 8010558:	a803      	add	r0, sp, #12
 801055a:	f007 f8eb 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 801055e:	6823      	ldr	r3, [r4, #0]
 8010560:	7c22      	ldrb	r2, [r4, #16]
 8010562:	492c      	ldr	r1, [pc, #176]	@ (8010614 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x288>)
 8010564:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010568:	a803      	add	r0, sp, #12
 801056a:	f7ff fc4d 	bl	800fe08 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 801056e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010572:	b17b      	cbz	r3, 8010594 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x208>
 8010574:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010578:	9b03      	ldr	r3, [sp, #12]
 801057a:	4413      	add	r3, r2
 801057c:	227d      	movs	r2, #125	@ 0x7d
 801057e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010582:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010586:	9903      	ldr	r1, [sp, #12]
 8010588:	54ca      	strb	r2, [r1, r3]
 801058a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801058e:	3301      	adds	r3, #1
 8010590:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010594:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010596:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801059a:	6013      	str	r3, [r2, #0]
 801059c:	4907      	ldr	r1, [pc, #28]	@ (80105bc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	4a07      	ldr	r2, [pc, #28]	@ (80105c0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 80105a2:	481d      	ldr	r0, [pc, #116]	@ (8010618 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x28c>)
 80105a4:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 80105a8:	f00a fb3e 	bl	801ac28 <printf>
 80105ac:	b007      	add	sp, #28
 80105ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105b0:	9300      	str	r3, [sp, #0]
 80105b2:	4a1a      	ldr	r2, [pc, #104]	@ (801061c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x290>)
 80105b4:	4b10      	ldr	r3, [pc, #64]	@ (80105f8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 80105b6:	e797      	b.n	80104e8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x15c>
 80105b8:	0801bf19 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, fp, ip, sp, pc}
 80105bc:	0801bf2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, fp, ip, sp, pc}
 80105c0:	0801bed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 80105c4:	0801f1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, sp, lr, pc}
 80105c8:	0801f1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, ip, sp, lr, pc}
 80105cc:	0801f1a2 	stmdaeq	r1, {r1, r5, r7, r8, ip, sp, lr, pc}
 80105d0:	0801bf34 	stmdaeq	r1, {r2, r4, r5, r8, r9, sl, fp, ip, sp, pc}
 80105d4:	0801ec29 	stmdaeq	r1, {r0, r3, r5, sl, fp, sp, lr, pc}
 80105d8:	0801f1bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, ip, sp, lr, pc}
 80105dc:	0801bf48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, ip, sp, pc}
 80105e0:	0801f1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, ip, sp, lr, pc}
 80105e4:	0801f1ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, ip, sp, lr, pc}
 80105e8:	0801bf5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, sp, pc}
 80105ec:	0801f192 	stmdaeq	r1, {r1, r4, r7, r8, ip, sp, lr, pc}
 80105f0:	0801bf67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 80105f4:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 80105f8:	0801f183 	stmdaeq	r1, {r0, r1, r7, r8, ip, sp, lr, pc}
 80105fc:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 8010600:	0801bf79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 8010604:	0801f1e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, ip, sp, lr, pc}
 8010608:	0801f171 	stmdaeq	r1, {r0, r4, r5, r6, r8, ip, sp, lr, pc}
 801060c:	0801f166 	stmdaeq	r1, {r1, r2, r5, r6, r8, ip, sp, lr, pc}
 8010610:	0801bf87 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, fp, ip, sp, pc}
 8010614:	0801f159 	stmdaeq	r1, {r0, r3, r4, r6, r8, ip, sp, lr, pc}
 8010618:	0801bf94 	stmdaeq	r1, {r2, r4, r7, r8, r9, sl, fp, ip, sp, pc}
 801061c:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}

08010620 <PixelDmxParams::Set()>:
 8010620:	b538      	push	{r3, r4, r5, lr}
 8010622:	4604      	mov	r4, r0
 8010624:	f7f9 f93e 	bl	80098a4 <PixelConfiguration::Get()>
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	07dd      	lsls	r5, r3, #31
 801062c:	bf44      	itt	mi
 801062e:	7922      	ldrbmi	r2, [r4, #4]
 8010630:	60c2      	strmi	r2, [r0, #12]
 8010632:	0799      	lsls	r1, r3, #30
 8010634:	d505      	bpl.n	8010642 <PixelDmxParams::Set()+0x22>
 8010636:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 801063a:	2a00      	cmp	r2, #0
 801063c:	bf08      	it	eq
 801063e:	22aa      	moveq	r2, #170	@ 0xaa
 8010640:	6002      	str	r2, [r0, #0]
 8010642:	059a      	lsls	r2, r3, #22
 8010644:	bf44      	itt	mi
 8010646:	7ce2      	ldrbmi	r2, [r4, #19]
 8010648:	6102      	strmi	r2, [r0, #16]
 801064a:	055d      	lsls	r5, r3, #21
 801064c:	bf44      	itt	mi
 801064e:	7d22      	ldrbmi	r2, [r4, #20]
 8010650:	7542      	strbmi	r2, [r0, #21]
 8010652:	0519      	lsls	r1, r3, #20
 8010654:	bf44      	itt	mi
 8010656:	7d62      	ldrbmi	r2, [r4, #21]
 8010658:	7582      	strbmi	r2, [r0, #22]
 801065a:	06da      	lsls	r2, r3, #27
 801065c:	bf44      	itt	mi
 801065e:	f8d4 200a 	ldrmi.w	r2, [r4, #10]
 8010662:	6042      	strmi	r2, [r0, #4]
 8010664:	069d      	lsls	r5, r3, #26
 8010666:	4d0e      	ldr	r5, [pc, #56]	@ (80106a0 <PixelDmxParams::Set()+0x80>)
 8010668:	bf44      	itt	mi
 801066a:	7ba3      	ldrbmi	r3, [r4, #14]
 801066c:	75c3      	strbmi	r3, [r0, #23]
 801066e:	682b      	ldr	r3, [r5, #0]
 8010670:	b92b      	cbnz	r3, 801067e <PixelDmxParams::Set()+0x5e>
 8010672:	4b0c      	ldr	r3, [pc, #48]	@ (80106a4 <PixelDmxParams::Set()+0x84>)
 8010674:	4a0c      	ldr	r2, [pc, #48]	@ (80106a8 <PixelDmxParams::Set()+0x88>)
 8010676:	480d      	ldr	r0, [pc, #52]	@ (80106ac <PixelDmxParams::Set()+0x8c>)
 8010678:	21a4      	movs	r1, #164	@ 0xa4
 801067a:	f00a fbb5 	bl	801ade8 <__assert_func>
 801067e:	6822      	ldr	r2, [r4, #0]
 8010680:	682b      	ldr	r3, [r5, #0]
 8010682:	0750      	lsls	r0, r2, #29
 8010684:	bf44      	itt	mi
 8010686:	f8b4 1007 	ldrhmi.w	r1, [r4, #7]
 801068a:	62d9      	strmi	r1, [r3, #44]	@ 0x2c
 801068c:	05d1      	lsls	r1, r2, #23
 801068e:	bf44      	itt	mi
 8010690:	f8b4 1011 	ldrhmi.w	r1, [r4, #17]
 8010694:	6219      	strmi	r1, [r3, #32]
 8010696:	0652      	lsls	r2, r2, #25
 8010698:	bf44      	itt	mi
 801069a:	7be2      	ldrbmi	r2, [r4, #15]
 801069c:	61da      	strmi	r2, [r3, #28]
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	20000078 	andcs	r0, r0, r8, ror r0
 80106a4:	0801b452 	stmdaeq	r1, {r1, r4, r6, sl, ip, sp, pc}
 80106a8:	0801b465 	stmdaeq	r1, {r0, r2, r5, r6, sl, ip, sp, pc}
 80106ac:	0801bfb0 	stmdaeq	r1, {r4, r5, r7, r8, r9, sl, fp, ip, sp, pc}

080106b0 <PixelDmxParams::Dump()>:
 80106b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106b2:	4604      	mov	r4, r0
 80106b4:	4b38      	ldr	r3, [pc, #224]	@ (8010798 <PixelDmxParams::Dump()+0xe8>)
 80106b6:	4a39      	ldr	r2, [pc, #228]	@ (801079c <PixelDmxParams::Dump()+0xec>)
 80106b8:	4939      	ldr	r1, [pc, #228]	@ (80107a0 <PixelDmxParams::Dump()+0xf0>)
 80106ba:	483a      	ldr	r0, [pc, #232]	@ (80107a4 <PixelDmxParams::Dump()+0xf4>)
 80106bc:	4e3a      	ldr	r6, [pc, #232]	@ (80107a8 <PixelDmxParams::Dump()+0xf8>)
 80106be:	f00a fab3 	bl	801ac28 <printf>
 80106c2:	7920      	ldrb	r0, [r4, #4]
 80106c4:	f001 f892 	bl	80117ec <pixel::pixel_get_type(pixel::Type)>
 80106c8:	7923      	ldrb	r3, [r4, #4]
 80106ca:	4938      	ldr	r1, [pc, #224]	@ (80107ac <PixelDmxParams::Dump()+0xfc>)
 80106cc:	4602      	mov	r2, r0
 80106ce:	4838      	ldr	r0, [pc, #224]	@ (80107b0 <PixelDmxParams::Dump()+0x100>)
 80106d0:	f00a faaa 	bl	801ac28 <printf>
 80106d4:	7ce5      	ldrb	r5, [r4, #19]
 80106d6:	4628      	mov	r0, r5
 80106d8:	f001 f8fa 	bl	80118d0 <pixel::pixel_get_map(pixel::Map)>
 80106dc:	462a      	mov	r2, r5
 80106de:	4603      	mov	r3, r0
 80106e0:	4934      	ldr	r1, [pc, #208]	@ (80107b4 <PixelDmxParams::Dump()+0x104>)
 80106e2:	4835      	ldr	r0, [pc, #212]	@ (80107b8 <PixelDmxParams::Dump()+0x108>)
 80106e4:	f00a faa0 	bl	801ac28 <printf>
 80106e8:	7d25      	ldrb	r5, [r4, #20]
 80106ea:	4628      	mov	r0, r5
 80106ec:	f7f9 f84e 	bl	800978c <pixel::pixel_convert_TxH(unsigned char)>
 80106f0:	ee10 0a10 	vmov	r0, s0
 80106f4:	f7f8 fda2 	bl	800923c <__aeabi_f2d>
 80106f8:	9500      	str	r5, [sp, #0]
 80106fa:	4602      	mov	r2, r0
 80106fc:	460b      	mov	r3, r1
 80106fe:	482f      	ldr	r0, [pc, #188]	@ (80107bc <PixelDmxParams::Dump()+0x10c>)
 8010700:	492f      	ldr	r1, [pc, #188]	@ (80107c0 <PixelDmxParams::Dump()+0x110>)
 8010702:	f00a fa91 	bl	801ac28 <printf>
 8010706:	7d65      	ldrb	r5, [r4, #21]
 8010708:	4628      	mov	r0, r5
 801070a:	f7f9 f83f 	bl	800978c <pixel::pixel_convert_TxH(unsigned char)>
 801070e:	ee10 0a10 	vmov	r0, s0
 8010712:	f7f8 fd93 	bl	800923c <__aeabi_f2d>
 8010716:	9500      	str	r5, [sp, #0]
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4827      	ldr	r0, [pc, #156]	@ (80107bc <PixelDmxParams::Dump()+0x10c>)
 801071e:	4929      	ldr	r1, [pc, #164]	@ (80107c4 <PixelDmxParams::Dump()+0x114>)
 8010720:	f00a fa82 	bl	801ac28 <printf>
 8010724:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8010728:	4927      	ldr	r1, [pc, #156]	@ (80107c8 <PixelDmxParams::Dump()+0x118>)
 801072a:	4828      	ldr	r0, [pc, #160]	@ (80107cc <PixelDmxParams::Dump()+0x11c>)
 801072c:	f00a fa7c 	bl	801ac28 <printf>
 8010730:	2500      	movs	r5, #0
 8010732:	f105 0308 	add.w	r3, r5, #8
 8010736:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801073a:	4631      	mov	r1, r6
 801073c:	88da      	ldrh	r2, [r3, #6]
 801073e:	4823      	ldr	r0, [pc, #140]	@ (80107cc <PixelDmxParams::Dump()+0x11c>)
 8010740:	3501      	adds	r5, #1
 8010742:	f00a fa71 	bl	801ac28 <printf>
 8010746:	2d08      	cmp	r5, #8
 8010748:	f106 0614 	add.w	r6, r6, #20
 801074c:	d1f1      	bne.n	8010732 <PixelDmxParams::Dump()+0x82>
 801074e:	7be2      	ldrb	r2, [r4, #15]
 8010750:	491f      	ldr	r1, [pc, #124]	@ (80107d0 <PixelDmxParams::Dump()+0x120>)
 8010752:	481e      	ldr	r0, [pc, #120]	@ (80107cc <PixelDmxParams::Dump()+0x11c>)
 8010754:	f00a fa68 	bl	801ac28 <printf>
 8010758:	f8b4 2011 	ldrh.w	r2, [r4, #17]
 801075c:	491d      	ldr	r1, [pc, #116]	@ (80107d4 <PixelDmxParams::Dump()+0x124>)
 801075e:	481b      	ldr	r0, [pc, #108]	@ (80107cc <PixelDmxParams::Dump()+0x11c>)
 8010760:	f00a fa62 	bl	801ac28 <printf>
 8010764:	f8d4 200a 	ldr.w	r2, [r4, #10]
 8010768:	491b      	ldr	r1, [pc, #108]	@ (80107d8 <PixelDmxParams::Dump()+0x128>)
 801076a:	481c      	ldr	r0, [pc, #112]	@ (80107dc <PixelDmxParams::Dump()+0x12c>)
 801076c:	f00a fa5c 	bl	801ac28 <printf>
 8010770:	7ba2      	ldrb	r2, [r4, #14]
 8010772:	491b      	ldr	r1, [pc, #108]	@ (80107e0 <PixelDmxParams::Dump()+0x130>)
 8010774:	4815      	ldr	r0, [pc, #84]	@ (80107cc <PixelDmxParams::Dump()+0x11c>)
 8010776:	f00a fa57 	bl	801ac28 <printf>
 801077a:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 801077e:	4919      	ldr	r1, [pc, #100]	@ (80107e4 <PixelDmxParams::Dump()+0x134>)
 8010780:	4812      	ldr	r0, [pc, #72]	@ (80107cc <PixelDmxParams::Dump()+0x11c>)
 8010782:	f00a fa51 	bl	801ac28 <printf>
 8010786:	7c22      	ldrb	r2, [r4, #16]
 8010788:	4917      	ldr	r1, [pc, #92]	@ (80107e8 <PixelDmxParams::Dump()+0x138>)
 801078a:	4810      	ldr	r0, [pc, #64]	@ (80107cc <PixelDmxParams::Dump()+0x11c>)
 801078c:	b002      	add	sp, #8
 801078e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010792:	f00a ba49 	b.w	801ac28 <printf>
 8010796:	bf00      	nop
 8010798:	0801f1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, sp, lr, pc}
 801079c:	0801bfd2 	stmdaeq	r1, {r1, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 80107a0:	0801bed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 80107a4:	0801bfd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 80107a8:	0801f1e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, ip, sp, lr, pc}
 80107ac:	0801f1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, ip, sp, lr, pc}
 80107b0:	0801bfe5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 80107b4:	0801f1bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, ip, sp, lr, pc}
 80107b8:	0801bff2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 80107bc:	0801bfff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 80107c0:	0801f1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, ip, sp, lr, pc}
 80107c4:	0801f1ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, ip, sp, lr, pc}
 80107c8:	0801f1a2 	stmdaeq	r1, {r1, r5, r7, r8, ip, sp, lr, pc}
 80107cc:	0801c010 	stmdaeq	r1, {r4, lr, pc}
 80107d0:	0801f166 	stmdaeq	r1, {r1, r2, r5, r6, r8, ip, sp, lr, pc}
 80107d4:	0801f192 	stmdaeq	r1, {r1, r4, r7, r8, ip, sp, lr, pc}
 80107d8:	0801f183 	stmdaeq	r1, {r0, r1, r7, r8, ip, sp, lr, pc}
 80107dc:	0801c018 	stmdaeq	r1, {r3, r4, lr, pc}
 80107e0:	0801f171 	stmdaeq	r1, {r0, r4, r5, r6, r8, ip, sp, lr, pc}
 80107e4:	0801f2a0 	stmdaeq	r1, {r5, r7, r9, ip, sp, lr, pc}
 80107e8:	0801f159 	stmdaeq	r1, {r0, r3, r4, r6, r8, ip, sp, lr, pc}

080107ec <PixelDmxParams::Load()>:
 80107ec:	b570      	push	{r4, r5, r6, lr}
 80107ee:	4e0e      	ldr	r6, [pc, #56]	@ (8010828 <PixelDmxParams::Load()+0x3c>)
 80107f0:	4d0e      	ldr	r5, [pc, #56]	@ (801082c <PixelDmxParams::Load()+0x40>)
 80107f2:	4604      	mov	r4, r0
 80107f4:	4632      	mov	r2, r6
 80107f6:	4629      	mov	r1, r5
 80107f8:	2352      	movs	r3, #82	@ 0x52
 80107fa:	480d      	ldr	r0, [pc, #52]	@ (8010830 <PixelDmxParams::Load()+0x44>)
 80107fc:	f00a fa14 	bl	801ac28 <printf>
 8010800:	2300      	movs	r3, #0
 8010802:	7023      	strb	r3, [r4, #0]
 8010804:	7063      	strb	r3, [r4, #1]
 8010806:	70a3      	strb	r3, [r4, #2]
 8010808:	70e3      	strb	r3, [r4, #3]
 801080a:	4620      	mov	r0, r4
 801080c:	f7ff fc0c 	bl	8010028 <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>
 8010810:	4620      	mov	r0, r4
 8010812:	f7ff ff4d 	bl	80106b0 <PixelDmxParams::Dump()>
 8010816:	4632      	mov	r2, r6
 8010818:	4629      	mov	r1, r5
 801081a:	4806      	ldr	r0, [pc, #24]	@ (8010834 <PixelDmxParams::Load()+0x48>)
 801081c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010820:	2362      	movs	r3, #98	@ 0x62
 8010822:	f00a ba01 	b.w	801ac28 <printf>
 8010826:	bf00      	nop
 8010828:	0801c020 	stmdaeq	r1, {r5, lr, pc}
 801082c:	0801bed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 8010830:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 8010834:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}

08010838 <PixelDmxParams::Load(char const*, unsigned long)>:
 8010838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801083a:	2366      	movs	r3, #102	@ 0x66
 801083c:	460e      	mov	r6, r1
 801083e:	b087      	sub	sp, #28
 8010840:	4604      	mov	r4, r0
 8010842:	4617      	mov	r7, r2
 8010844:	491d      	ldr	r1, [pc, #116]	@ (80108bc <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 8010846:	4a1e      	ldr	r2, [pc, #120]	@ (80108c0 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 8010848:	481e      	ldr	r0, [pc, #120]	@ (80108c4 <PixelDmxParams::Load(char const*, unsigned long)+0x8c>)
 801084a:	f00a f9ed 	bl	801ac28 <printf>
 801084e:	b92e      	cbnz	r6, 801085c <PixelDmxParams::Load(char const*, unsigned long)+0x24>
 8010850:	4b1d      	ldr	r3, [pc, #116]	@ (80108c8 <PixelDmxParams::Load(char const*, unsigned long)+0x90>)
 8010852:	4a1b      	ldr	r2, [pc, #108]	@ (80108c0 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 8010854:	4819      	ldr	r0, [pc, #100]	@ (80108bc <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 8010856:	2168      	movs	r1, #104	@ 0x68
 8010858:	f00a fac6 	bl	801ade8 <__assert_func>
 801085c:	b92f      	cbnz	r7, 801086a <PixelDmxParams::Load(char const*, unsigned long)+0x32>
 801085e:	4b1b      	ldr	r3, [pc, #108]	@ (80108cc <PixelDmxParams::Load(char const*, unsigned long)+0x94>)
 8010860:	4a17      	ldr	r2, [pc, #92]	@ (80108c0 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 8010862:	4816      	ldr	r0, [pc, #88]	@ (80108bc <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 8010864:	2169      	movs	r1, #105	@ 0x69
 8010866:	f00a fabf 	bl	801ade8 <__assert_func>
 801086a:	2500      	movs	r5, #0
 801086c:	4622      	mov	r2, r4
 801086e:	4918      	ldr	r1, [pc, #96]	@ (80108d0 <PixelDmxParams::Load(char const*, unsigned long)+0x98>)
 8010870:	7025      	strb	r5, [r4, #0]
 8010872:	7065      	strb	r5, [r4, #1]
 8010874:	70a5      	strb	r5, [r4, #2]
 8010876:	70e5      	strb	r5, [r4, #3]
 8010878:	a804      	add	r0, sp, #16
 801087a:	f006 ff75 	bl	8017768 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801087e:	463a      	mov	r2, r7
 8010880:	4631      	mov	r1, r6
 8010882:	a804      	add	r0, sp, #16
 8010884:	f006 ff74 	bl	8017770 <ReadConfigFile::Read(char const*, unsigned int)>
 8010888:	e9cd 5501 	strd	r5, r5, [sp, #4]
 801088c:	2326      	movs	r3, #38	@ 0x26
 801088e:	4811      	ldr	r0, [pc, #68]	@ (80108d4 <PixelDmxParams::Load(char const*, unsigned long)+0x9c>)
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	462a      	mov	r2, r5
 8010894:	4623      	mov	r3, r4
 8010896:	2102      	movs	r1, #2
 8010898:	6800      	ldr	r0, [r0, #0]
 801089a:	f006 fc65 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 801089e:	4620      	mov	r0, r4
 80108a0:	f7ff ff06 	bl	80106b0 <PixelDmxParams::Dump()>
 80108a4:	4a06      	ldr	r2, [pc, #24]	@ (80108c0 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 80108a6:	4905      	ldr	r1, [pc, #20]	@ (80108bc <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 80108a8:	480b      	ldr	r0, [pc, #44]	@ (80108d8 <PixelDmxParams::Load(char const*, unsigned long)+0xa0>)
 80108aa:	2376      	movs	r3, #118	@ 0x76
 80108ac:	f00a f9bc 	bl	801ac28 <printf>
 80108b0:	a804      	add	r0, sp, #16
 80108b2:	f006 ff5c 	bl	801776e <ReadConfigFile::~ReadConfigFile()>
 80108b6:	b007      	add	sp, #28
 80108b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108ba:	bf00      	nop
 80108bc:	0801bed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 80108c0:	0801c020 	stmdaeq	r1, {r5, lr, pc}
 80108c4:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 80108c8:	0801bf19 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, fp, ip, sp, pc}
 80108cc:	0801c025 	stmdaeq	r1, {r0, r2, r5, lr, pc}
 80108d0:	08010349 	stmdaeq	r1, {r0, r3, r6, r8, r9}
 80108d4:	2000cc34 	andcs	ip, r0, r4, lsr ip
 80108d8:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}

080108dc <LightSet::GetRefreshRate()>:
 80108dc:	2000      	movs	r0, #0
 80108de:	4770      	bx	lr

080108e0 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80108e0:	2001      	movs	r0, #1
 80108e2:	2300      	movs	r3, #0
 80108e4:	7093      	strb	r3, [r2, #2]
 80108e6:	8010      	strh	r0, [r2, #0]
 80108e8:	4770      	bx	lr
 80108ea:	bf00      	nop

080108ec <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 80108ec:	2000      	movs	r0, #0
 80108ee:	4770      	bx	lr

080108f0 <WS28xxDmxMulti::GetDmxStartAddress()>:
 80108f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop

080108f8 <WS28xxDmxMulti::GetDmxFootprint()>:
 80108f8:	2000      	movs	r0, #0
 80108fa:	4770      	bx	lr

080108fc <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 80108fc:	b538      	push	{r3, r4, r5, lr}
 80108fe:	6845      	ldr	r5, [r0, #4]
 8010900:	4b06      	ldr	r3, [pc, #24]	@ (801091c <WS28xxDmxMulti::~WS28xxDmxMulti()+0x20>)
 8010902:	6003      	str	r3, [r0, #0]
 8010904:	4604      	mov	r4, r0
 8010906:	b135      	cbz	r5, 8010916 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1a>
 8010908:	4628      	mov	r0, r5
 801090a:	f001 fb2d 	bl	8011f68 <WS28xxMulti::~WS28xxMulti()>
 801090e:	2104      	movs	r1, #4
 8010910:	4628      	mov	r0, r5
 8010912:	f00a fbdd 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8010916:	4620      	mov	r0, r4
 8010918:	bd38      	pop	{r3, r4, r5, pc}
 801091a:	bf00      	nop
 801091c:	0801ec64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr, pc}

08010920 <WS28xxDmxMulti::Sync()>:
 8010920:	b510      	push	{r4, lr}
 8010922:	4604      	mov	r4, r0
 8010924:	6860      	ldr	r0, [r4, #4]
 8010926:	f001 fd5b 	bl	80123e0 <WS28xxMulti::IsUpdating()>
 801092a:	2800      	cmp	r0, #0
 801092c:	d1fa      	bne.n	8010924 <WS28xxDmxMulti::Sync()+0x4>
 801092e:	6860      	ldr	r0, [r4, #4]
 8010930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010934:	f001 bc62 	b.w	80121fc <WS28xxMulti::Update()>

08010938 <WS28xxDmxMulti::FullOn()>:
 8010938:	b510      	push	{r4, lr}
 801093a:	4604      	mov	r4, r0
 801093c:	6860      	ldr	r0, [r4, #4]
 801093e:	f001 fd4f 	bl	80123e0 <WS28xxMulti::IsUpdating()>
 8010942:	2800      	cmp	r0, #0
 8010944:	d1fa      	bne.n	801093c <WS28xxDmxMulti::FullOn()+0x4>
 8010946:	6860      	ldr	r0, [r4, #4]
 8010948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801094c:	f002 bd5a 	b.w	8013404 <WS28xxMulti::FullOn()>

08010950 <WS28xxDmxMulti::Start(unsigned long)>:
 8010950:	b530      	push	{r4, r5, lr}
 8010952:	b083      	sub	sp, #12
 8010954:	460d      	mov	r5, r1
 8010956:	4604      	mov	r4, r0
 8010958:	4a0a      	ldr	r2, [pc, #40]	@ (8010984 <WS28xxDmxMulti::Start(unsigned long)+0x34>)
 801095a:	490b      	ldr	r1, [pc, #44]	@ (8010988 <WS28xxDmxMulti::Start(unsigned long)+0x38>)
 801095c:	480b      	ldr	r0, [pc, #44]	@ (801098c <WS28xxDmxMulti::Start(unsigned long)+0x3c>)
 801095e:	9500      	str	r5, [sp, #0]
 8010960:	234b      	movs	r3, #75	@ 0x4b
 8010962:	f00a f961 	bl	801ac28 <printf>
 8010966:	68a0      	ldr	r0, [r4, #8]
 8010968:	b128      	cbz	r0, 8010976 <WS28xxDmxMulti::Start(unsigned long)+0x26>
 801096a:	2101      	movs	r1, #1
 801096c:	40a9      	lsls	r1, r5
 801096e:	4301      	orrs	r1, r0
 8010970:	60a1      	str	r1, [r4, #8]
 8010972:	b003      	add	sp, #12
 8010974:	bd30      	pop	{r4, r5, pc}
 8010976:	4b06      	ldr	r3, [pc, #24]	@ (8010990 <WS28xxDmxMulti::Start(unsigned long)+0x40>)
 8010978:	2204      	movs	r2, #4
 801097a:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
 801097e:	68a0      	ldr	r0, [r4, #8]
 8010980:	e7f3      	b.n	801096a <WS28xxDmxMulti::Start(unsigned long)+0x1a>
 8010982:	bf00      	nop
 8010984:	0801cd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, lr, pc}
 8010988:	0801cd4c 	stmdaeq	r1, {r2, r3, r6, r8, sl, fp, lr, pc}
 801098c:	0801cd54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, lr, pc}
 8010990:	40020000 	andmi	r0, r2, r0

08010994 <WS28xxDmxMulti::Blackout(bool)>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	4604      	mov	r4, r0
 8010998:	460d      	mov	r5, r1
 801099a:	7301      	strb	r1, [r0, #12]
 801099c:	6860      	ldr	r0, [r4, #4]
 801099e:	f001 fd1f 	bl	80123e0 <WS28xxMulti::IsUpdating()>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d1fa      	bne.n	801099c <WS28xxDmxMulti::Blackout(bool)+0x8>
 80109a6:	6860      	ldr	r0, [r4, #4]
 80109a8:	b11d      	cbz	r5, 80109b2 <WS28xxDmxMulti::Blackout(bool)+0x1e>
 80109aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ae:	f002 bc23 	b.w	80131f8 <WS28xxMulti::Blackout()>
 80109b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109b6:	f001 bc21 	b.w	80121fc <WS28xxMulti::Update()>
 80109ba:	bf00      	nop

080109bc <WS28xxDmxMulti::Stop(unsigned long)>:
 80109bc:	b530      	push	{r4, r5, lr}
 80109be:	b083      	sub	sp, #12
 80109c0:	460c      	mov	r4, r1
 80109c2:	4605      	mov	r5, r0
 80109c4:	4a0b      	ldr	r2, [pc, #44]	@ (80109f4 <WS28xxDmxMulti::Stop(unsigned long)+0x38>)
 80109c6:	490c      	ldr	r1, [pc, #48]	@ (80109f8 <WS28xxDmxMulti::Stop(unsigned long)+0x3c>)
 80109c8:	480c      	ldr	r0, [pc, #48]	@ (80109fc <WS28xxDmxMulti::Stop(unsigned long)+0x40>)
 80109ca:	9400      	str	r4, [sp, #0]
 80109cc:	2357      	movs	r3, #87	@ 0x57
 80109ce:	f00a f92b 	bl	801ac28 <printf>
 80109d2:	68ab      	ldr	r3, [r5, #8]
 80109d4:	2201      	movs	r2, #1
 80109d6:	40a2      	lsls	r2, r4
 80109d8:	4213      	tst	r3, r2
 80109da:	bf1c      	itt	ne
 80109dc:	4393      	bicne	r3, r2
 80109de:	60ab      	strne	r3, [r5, #8]
 80109e0:	b10b      	cbz	r3, 80109e6 <WS28xxDmxMulti::Stop(unsigned long)+0x2a>
 80109e2:	b003      	add	sp, #12
 80109e4:	bd30      	pop	{r4, r5, pc}
 80109e6:	4806      	ldr	r0, [pc, #24]	@ (8010a00 <WS28xxDmxMulti::Stop(unsigned long)+0x44>)
 80109e8:	2104      	movs	r1, #4
 80109ea:	f8c0 1828 	str.w	r1, [r0, #2088]	@ 0x828
 80109ee:	b003      	add	sp, #12
 80109f0:	bd30      	pop	{r4, r5, pc}
 80109f2:	bf00      	nop
 80109f4:	0801cd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, lr, pc}
 80109f8:	0801cd6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, fp, lr, pc}
 80109fc:	0801cd54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, lr, pc}
 8010a00:	40020000 	andmi	r0, r2, r0

08010a04 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8010a04:	b538      	push	{r3, r4, r5, lr}
 8010a06:	6845      	ldr	r5, [r0, #4]
 8010a08:	4b08      	ldr	r3, [pc, #32]	@ (8010a2c <WS28xxDmxMulti::~WS28xxDmxMulti()+0x28>)
 8010a0a:	6003      	str	r3, [r0, #0]
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	b135      	cbz	r5, 8010a1e <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1a>
 8010a10:	4628      	mov	r0, r5
 8010a12:	f001 faa9 	bl	8011f68 <WS28xxMulti::~WS28xxMulti()>
 8010a16:	2104      	movs	r1, #4
 8010a18:	4628      	mov	r0, r5
 8010a1a:	f00a fb59 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8010a1e:	4620      	mov	r0, r4
 8010a20:	2110      	movs	r1, #16
 8010a22:	f00a fb55 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8010a26:	4620      	mov	r0, r4
 8010a28:	bd38      	pop	{r3, r4, r5, pc}
 8010a2a:	bf00      	nop
 8010a2c:	0801ec64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr, pc}

08010a30 <WS28xxDmxMulti::WS28xxDmxMulti()>:
 8010a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a32:	4605      	mov	r5, r0
 8010a34:	48b4      	ldr	r0, [pc, #720]	@ (8010d08 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2d8>)
 8010a36:	4eb5      	ldr	r6, [pc, #724]	@ (8010d0c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2dc>)
 8010a38:	4ab5      	ldr	r2, [pc, #724]	@ (8010d10 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e0>)
 8010a3a:	49b6      	ldr	r1, [pc, #728]	@ (8010d14 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e4>)
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	e9c5 0300 	strd	r0, r3, [r5]
 8010a42:	60ab      	str	r3, [r5, #8]
 8010a44:	732b      	strb	r3, [r5, #12]
 8010a46:	48b4      	ldr	r0, [pc, #720]	@ (8010d18 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 8010a48:	2335      	movs	r3, #53	@ 0x35
 8010a4a:	f00a f8ed 	bl	801ac28 <printf>
 8010a4e:	6834      	ldr	r4, [r6, #0]
 8010a50:	2c00      	cmp	r4, #0
 8010a52:	f000 8199 	beq.w	8010d88 <WS28xxDmxMulti::WS28xxDmxMulti()+0x358>
 8010a56:	4ab1      	ldr	r2, [pc, #708]	@ (8010d1c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8010a58:	49b1      	ldr	r1, [pc, #708]	@ (8010d20 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f0>)
 8010a5a:	48af      	ldr	r0, [pc, #700]	@ (8010d18 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 8010a5c:	2367      	movs	r3, #103	@ 0x67
 8010a5e:	f00a f8e3 	bl	801ac28 <printf>
 8010a62:	4aae      	ldr	r2, [pc, #696]	@ (8010d1c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8010a64:	49af      	ldr	r1, [pc, #700]	@ (8010d24 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 8010a66:	48ac      	ldr	r0, [pc, #688]	@ (8010d18 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 8010a68:	2397      	movs	r3, #151	@ 0x97
 8010a6a:	f00a f8dd 	bl	801ac28 <printf>
 8010a6e:	68e2      	ldr	r2, [r4, #12]
 8010a70:	6827      	ldr	r7, [r4, #0]
 8010a72:	2a07      	cmp	r2, #7
 8010a74:	f000 80dd 	beq.w	8010c32 <WS28xxDmxMulti::WS28xxDmxMulti()+0x202>
 8010a78:	f5b7 7f2a 	cmp.w	r7, #680	@ 0x2a8
 8010a7c:	f1a2 030b 	sub.w	r3, r2, #11
 8010a80:	bf28      	it	cs
 8010a82:	f44f 772a 	movcs.w	r7, #680	@ 0x2a8
 8010a86:	2103      	movs	r1, #3
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	6926      	ldr	r6, [r4, #16]
 8010a8c:	6027      	str	r7, [r4, #0]
 8010a8e:	60a1      	str	r1, [r4, #8]
 8010a90:	f200 8161 	bhi.w	8010d56 <WS28xxDmxMulti::WS28xxDmxMulti()+0x326>
 8010a94:	7de2      	ldrb	r2, [r4, #23]
 8010a96:	2a1f      	cmp	r2, #31
 8010a98:	bf8c      	ite	hi
 8010a9a:	22ff      	movhi	r2, #255	@ 0xff
 8010a9c:	f062 021f 	ornls	r2, r2, #31
 8010aa0:	75e2      	strb	r2, [r4, #23]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	2e06      	cmp	r6, #6
 8010aa6:	7522      	strb	r2, [r4, #20]
 8010aa8:	f000 80e5 	beq.w	8010c76 <WS28xxDmxMulti::WS28xxDmxMulti()+0x246>
 8010aac:	6866      	ldr	r6, [r4, #4]
 8010aae:	2e00      	cmp	r6, #0
 8010ab0:	f040 80ae 	bne.w	8010c10 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1e0>
 8010ab4:	4e9c      	ldr	r6, [pc, #624]	@ (8010d28 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f8>)
 8010ab6:	6066      	str	r6, [r4, #4]
 8010ab8:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8010abc:	0057      	lsls	r7, r2, #1
 8010abe:	489b      	ldr	r0, [pc, #620]	@ (8010d2c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 8010ac0:	fbb0 f3f7 	udiv	r3, r0, r7
 8010ac4:	61a3      	str	r3, [r4, #24]
 8010ac6:	4a95      	ldr	r2, [pc, #596]	@ (8010d1c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8010ac8:	4996      	ldr	r1, [pc, #600]	@ (8010d24 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 8010aca:	4899      	ldr	r0, [pc, #612]	@ (8010d30 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 8010acc:	23f2      	movs	r3, #242	@ 0xf2
 8010ace:	f00a f8ab 	bl	801ac28 <printf>
 8010ad2:	7d20      	ldrb	r0, [r4, #20]
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d13f      	bne.n	8010b58 <WS28xxDmxMulti::WS28xxDmxMulti()+0x128>
 8010ad8:	68e6      	ldr	r6, [r4, #12]
 8010ada:	b126      	cbz	r6, 8010ae6 <WS28xxDmxMulti::WS28xxDmxMulti()+0xb6>
 8010adc:	f1a6 010b 	sub.w	r1, r6, #11
 8010ae0:	2901      	cmp	r1, #1
 8010ae2:	bf88      	it	hi
 8010ae4:	60e0      	strhi	r0, [r4, #12]
 8010ae6:	4a8d      	ldr	r2, [pc, #564]	@ (8010d1c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8010ae8:	498e      	ldr	r1, [pc, #568]	@ (8010d24 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 8010aea:	488b      	ldr	r0, [pc, #556]	@ (8010d18 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 8010aec:	2397      	movs	r3, #151	@ 0x97
 8010aee:	f00a f89b 	bl	801ac28 <printf>
 8010af2:	68e0      	ldr	r0, [r4, #12]
 8010af4:	6827      	ldr	r7, [r4, #0]
 8010af6:	2807      	cmp	r0, #7
 8010af8:	f000 80da 	beq.w	8010cb0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x280>
 8010afc:	f5b7 7f2a 	cmp.w	r7, #680	@ 0x2a8
 8010b00:	f1a0 020b 	sub.w	r2, r0, #11
 8010b04:	bf28      	it	cs
 8010b06:	f44f 772a 	movcs.w	r7, #680	@ 0x2a8
 8010b0a:	2603      	movs	r6, #3
 8010b0c:	2a01      	cmp	r2, #1
 8010b0e:	4639      	mov	r1, r7
 8010b10:	6027      	str	r7, [r4, #0]
 8010b12:	60a6      	str	r6, [r4, #8]
 8010b14:	6927      	ldr	r7, [r4, #16]
 8010b16:	f200 80ee 	bhi.w	8010cf6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2c6>
 8010b1a:	7de0      	ldrb	r0, [r4, #23]
 8010b1c:	281f      	cmp	r0, #31
 8010b1e:	bf8c      	ite	hi
 8010b20:	20ff      	movhi	r0, #255	@ 0xff
 8010b22:	f060 001f 	ornls	r0, r0, #31
 8010b26:	2200      	movs	r2, #0
 8010b28:	2f06      	cmp	r7, #6
 8010b2a:	75e0      	strb	r0, [r4, #23]
 8010b2c:	7522      	strb	r2, [r4, #20]
 8010b2e:	f000 813d 	beq.w	8010dac <WS28xxDmxMulti::WS28xxDmxMulti()+0x37c>
 8010b32:	6867      	ldr	r7, [r4, #4]
 8010b34:	2f00      	cmp	r7, #0
 8010b36:	f040 80a3 	bne.w	8010c80 <WS28xxDmxMulti::WS28xxDmxMulti()+0x250>
 8010b3a:	4f7b      	ldr	r7, [pc, #492]	@ (8010d28 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f8>)
 8010b3c:	6067      	str	r7, [r4, #4]
 8010b3e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010b42:	0051      	lsls	r1, r2, #1
 8010b44:	4e79      	ldr	r6, [pc, #484]	@ (8010d2c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 8010b46:	fbb6 f7f1 	udiv	r7, r6, r1
 8010b4a:	4a74      	ldr	r2, [pc, #464]	@ (8010d1c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8010b4c:	4975      	ldr	r1, [pc, #468]	@ (8010d24 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 8010b4e:	4878      	ldr	r0, [pc, #480]	@ (8010d30 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 8010b50:	61a7      	str	r7, [r4, #24]
 8010b52:	23f2      	movs	r3, #242	@ 0xf2
 8010b54:	f00a f868 	bl	801ac28 <printf>
 8010b58:	68e1      	ldr	r1, [r4, #12]
 8010b5a:	4a76      	ldr	r2, [pc, #472]	@ (8010d34 <WS28xxDmxMulti::WS28xxDmxMulti()+0x304>)
 8010b5c:	6a20      	ldr	r0, [r4, #32]
 8010b5e:	4b76      	ldr	r3, [pc, #472]	@ (8010d38 <WS28xxDmxMulti::WS28xxDmxMulti()+0x308>)
 8010b60:	6827      	ldr	r7, [r4, #0]
 8010b62:	2907      	cmp	r1, #7
 8010b64:	bf16      	itet	ne
 8010b66:	4613      	movne	r3, r2
 8010b68:	f44f 72c0 	moveq.w	r2, #384	@ 0x180
 8010b6c:	f44f 72ff 	movne.w	r2, #510	@ 0x1fe
 8010b70:	f04f 0600 	mov.w	r6, #0
 8010b74:	8762      	strh	r2, [r4, #58]	@ 0x3a
 8010b76:	f8c4 3036 	str.w	r3, [r4, #54]	@ 0x36
 8010b7a:	86a6      	strh	r6, [r4, #52]	@ 0x34
 8010b7c:	bf0c      	ite	eq
 8010b7e:	2281      	moveq	r2, #129	@ 0x81
 8010b80:	22ab      	movne	r2, #171	@ 0xab
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d04f      	beq.n	8010c26 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1f6>
 8010b86:	42b8      	cmp	r0, r7
 8010b88:	d84d      	bhi.n	8010c26 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1f6>
 8010b8a:	fbb7 f3f0 	udiv	r3, r7, r0
 8010b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b92:	3101      	adds	r1, #1
 8010b94:	fa1f fe81 	uxth.w	lr, r1
 8010b98:	69e6      	ldr	r6, [r4, #28]
 8010b9a:	68a2      	ldr	r2, [r4, #8]
 8010b9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b9e:	2e08      	cmp	r6, #8
 8010ba0:	bf28      	it	cs
 8010ba2:	2608      	movcs	r6, #8
 8010ba4:	fb16 fc0e 	smulbb	ip, r6, lr
 8010ba8:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8010bac:	fb02 f303 	mul.w	r3, r2, r3
 8010bb0:	62a1      	str	r1, [r4, #40]	@ 0x28
 8010bb2:	4a5a      	ldr	r2, [pc, #360]	@ (8010d1c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8010bb4:	495a      	ldr	r1, [pc, #360]	@ (8010d20 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f0>)
 8010bb6:	6323      	str	r3, [r4, #48]	@ 0x30
 8010bb8:	61e6      	str	r6, [r4, #28]
 8010bba:	2392      	movs	r3, #146	@ 0x92
 8010bbc:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8010bbe:	485c      	ldr	r0, [pc, #368]	@ (8010d30 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 8010bc0:	4f5e      	ldr	r7, [pc, #376]	@ (8010d3c <WS28xxDmxMulti::WS28xxDmxMulti()+0x30c>)
 8010bc2:	f00a f831 	bl	801ac28 <printf>
 8010bc6:	2004      	movs	r0, #4
 8010bc8:	f00a fa84 	bl	801b0d4 <operator new(unsigned int)>
 8010bcc:	4604      	mov	r4, r0
 8010bce:	f002 f8b9 	bl	8012d44 <WS28xxMulti::WS28xxMulti()>
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	606c      	str	r4, [r5, #4]
 8010bd6:	f002 fb0f 	bl	80131f8 <WS28xxMulti::Blackout()>
 8010bda:	f640 4002 	movw	r0, #3074	@ 0xc02
 8010bde:	f008 fa9f 	bl	8019120 <rcu_periph_clock_enable>
 8010be2:	4857      	ldr	r0, [pc, #348]	@ (8010d40 <WS28xxDmxMulti::WS28xxDmxMulti()+0x310>)
 8010be4:	2304      	movs	r3, #4
 8010be6:	2200      	movs	r2, #0
 8010be8:	2101      	movs	r1, #1
 8010bea:	f008 fa17 	bl	801901c <gpio_mode_set>
 8010bee:	4854      	ldr	r0, [pc, #336]	@ (8010d40 <WS28xxDmxMulti::WS28xxDmxMulti()+0x310>)
 8010bf0:	2304      	movs	r3, #4
 8010bf2:	2202      	movs	r2, #2
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	f008 fa33 	bl	8019060 <gpio_output_options_set>
 8010bfa:	2304      	movs	r3, #4
 8010bfc:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8010c00:	4a43      	ldr	r2, [pc, #268]	@ (8010d10 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e0>)
 8010c02:	4944      	ldr	r1, [pc, #272]	@ (8010d14 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e4>)
 8010c04:	484a      	ldr	r0, [pc, #296]	@ (8010d30 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 8010c06:	2342      	movs	r3, #66	@ 0x42
 8010c08:	f00a f80e 	bl	801ac28 <printf>
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c10:	484c      	ldr	r0, [pc, #304]	@ (8010d44 <WS28xxDmxMulti::WS28xxDmxMulti()+0x314>)
 8010c12:	4286      	cmp	r6, r0
 8010c14:	d831      	bhi.n	8010c7a <WS28xxDmxMulti::WS28xxDmxMulti()+0x24a>
 8010c16:	4b4c      	ldr	r3, [pc, #304]	@ (8010d48 <WS28xxDmxMulti::WS28xxDmxMulti()+0x318>)
 8010c18:	fbb3 f1f6 	udiv	r1, r3, r6
 8010c1c:	fb07 f101 	mul.w	r1, r7, r1
 8010c20:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8010c24:	e74b      	b.n	8010abe <WS28xxDmxMulti::WS28xxDmxMulti()+0x8e>
 8010c26:	f04f 0e01 	mov.w	lr, #1
 8010c2a:	6227      	str	r7, [r4, #32]
 8010c2c:	4671      	mov	r1, lr
 8010c2e:	4673      	mov	r3, lr
 8010c30:	e7b2      	b.n	8010b98 <WS28xxDmxMulti::WS28xxDmxMulti()+0x168>
 8010c32:	6923      	ldr	r3, [r4, #16]
 8010c34:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 8010c38:	bf28      	it	cs
 8010c3a:	f44f 7700 	movcs.w	r7, #512	@ 0x200
 8010c3e:	2104      	movs	r1, #4
 8010c40:	2601      	movs	r6, #1
 8010c42:	2b06      	cmp	r3, #6
 8010c44:	6027      	str	r7, [r4, #0]
 8010c46:	60a1      	str	r1, [r4, #8]
 8010c48:	7526      	strb	r6, [r4, #20]
 8010c4a:	f000 8106 	beq.w	8010e5a <WS28xxDmxMulti::WS28xxDmxMulti()+0x42a>
 8010c4e:	7d60      	ldrb	r0, [r4, #21]
 8010c50:	f894 e016 	ldrb.w	lr, [r4, #22]
 8010c54:	4586      	cmp	lr, r0
 8010c56:	d81e      	bhi.n	8010c96 <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 8010c58:	2600      	movs	r6, #0
 8010c5a:	2a03      	cmp	r2, #3
 8010c5c:	f8a4 6015 	strh.w	r6, [r4, #21]
 8010c60:	f000 808f 	beq.w	8010d82 <WS28xxDmxMulti::WS28xxDmxMulti()+0x352>
 8010c64:	3a08      	subs	r2, #8
 8010c66:	2a02      	cmp	r2, #2
 8010c68:	f200 80cf 	bhi.w	8010e0a <WS28xxDmxMulti::WS28xxDmxMulti()+0x3da>
 8010c6c:	23fc      	movs	r3, #252	@ 0xfc
 8010c6e:	75a3      	strb	r3, [r4, #22]
 8010c70:	20c0      	movs	r0, #192	@ 0xc0
 8010c72:	7560      	strb	r0, [r4, #21]
 8010c74:	e011      	b.n	8010c9a <WS28xxDmxMulti::WS28xxDmxMulti()+0x26a>
 8010c76:	6122      	str	r2, [r4, #16]
 8010c78:	e718      	b.n	8010aac <WS28xxDmxMulti::WS28xxDmxMulti()+0x7c>
 8010c7a:	6060      	str	r0, [r4, #4]
 8010c7c:	2700      	movs	r7, #0
 8010c7e:	e71e      	b.n	8010abe <WS28xxDmxMulti::WS28xxDmxMulti()+0x8e>
 8010c80:	4e30      	ldr	r6, [pc, #192]	@ (8010d44 <WS28xxDmxMulti::WS28xxDmxMulti()+0x314>)
 8010c82:	42b7      	cmp	r7, r6
 8010c84:	d864      	bhi.n	8010d50 <WS28xxDmxMulti::WS28xxDmxMulti()+0x320>
 8010c86:	4b30      	ldr	r3, [pc, #192]	@ (8010d48 <WS28xxDmxMulti::WS28xxDmxMulti()+0x318>)
 8010c88:	fbb3 f0f7 	udiv	r0, r3, r7
 8010c8c:	fb01 f000 	mul.w	r0, r1, r0
 8010c90:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8010c94:	e756      	b.n	8010b44 <WS28xxDmxMulti::WS28xxDmxMulti()+0x114>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d0ea      	beq.n	8010c70 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 8010c9a:	fb07 f101 	mul.w	r1, r7, r1
 8010c9e:	4e2b      	ldr	r6, [pc, #172]	@ (8010d4c <WS28xxDmxMulti::WS28xxDmxMulti()+0x31c>)
 8010ca0:	4f22      	ldr	r7, [pc, #136]	@ (8010d2c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 8010ca2:	6066      	str	r6, [r4, #4]
 8010ca4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010ca8:	004a      	lsls	r2, r1, #1
 8010caa:	fbb7 f3f2 	udiv	r3, r7, r2
 8010cae:	e709      	b.n	8010ac4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x94>
 8010cb0:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 8010cb4:	bf28      	it	cs
 8010cb6:	f44f 7700 	movcs.w	r7, #512	@ 0x200
 8010cba:	4639      	mov	r1, r7
 8010cbc:	6027      	str	r7, [r4, #0]
 8010cbe:	6927      	ldr	r7, [r4, #16]
 8010cc0:	2604      	movs	r6, #4
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	2f06      	cmp	r7, #6
 8010cc6:	60a6      	str	r6, [r4, #8]
 8010cc8:	7523      	strb	r3, [r4, #20]
 8010cca:	f000 80cb 	beq.w	8010e64 <WS28xxDmxMulti::WS28xxDmxMulti()+0x434>
 8010cce:	7d63      	ldrb	r3, [r4, #21]
 8010cd0:	f894 e016 	ldrb.w	lr, [r4, #22]
 8010cd4:	459e      	cmp	lr, r3
 8010cd6:	d86d      	bhi.n	8010db4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 8010cd8:	2200      	movs	r2, #0
 8010cda:	2803      	cmp	r0, #3
 8010cdc:	f8a4 2015 	strh.w	r2, [r4, #21]
 8010ce0:	f000 80a7 	beq.w	8010e32 <WS28xxDmxMulti::WS28xxDmxMulti()+0x402>
 8010ce4:	3808      	subs	r0, #8
 8010ce6:	2802      	cmp	r0, #2
 8010ce8:	f200 80b5 	bhi.w	8010e56 <WS28xxDmxMulti::WS28xxDmxMulti()+0x426>
 8010cec:	27fc      	movs	r7, #252	@ 0xfc
 8010cee:	75a7      	strb	r7, [r4, #22]
 8010cf0:	23c0      	movs	r3, #192	@ 0xc0
 8010cf2:	7563      	strb	r3, [r4, #21]
 8010cf4:	e060      	b.n	8010db8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x388>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d169      	bne.n	8010dce <WS28xxDmxMulti::WS28xxDmxMulti()+0x39e>
 8010cfa:	2f06      	cmp	r7, #6
 8010cfc:	7520      	strb	r0, [r4, #20]
 8010cfe:	f47f af18 	bne.w	8010b32 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 8010d02:	6120      	str	r0, [r4, #16]
 8010d04:	e715      	b.n	8010b32 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 8010d06:	bf00      	nop
 8010d08:	0801ec64 	stmdaeq	r1, {r2, r5, r6, sl, fp, sp, lr, pc}
 8010d0c:	20000078 	andcs	r0, r0, r8, ror r0
 8010d10:	0801cd74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, lr, pc}
 8010d14:	0801cd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, lr, pc}
 8010d18:	0801cd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, lr, pc}
 8010d1c:	0801cd94 	stmdaeq	r1, {r2, r4, r7, r8, sl, fp, lr, pc}
 8010d20:	0801cba4 	stmdaeq	r1, {r2, r5, r7, r8, r9, fp, lr, pc}
 8010d24:	0801cda0 	stmdaeq	r1, {r5, r7, r8, sl, fp, lr, pc}
 8010d28:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8010d2c:	000f4240 	andeq	r4, pc, r0, asr #4
 8010d30:	0801cdcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, lr, pc}
 8010d34:	015400aa 	cmpeq	r4, sl, lsr #1
 8010d38:	01000080 	smlabbeq	r0, r0, r0, r0
 8010d3c:	40020000 	andmi	r0, r2, r0
 8010d40:	40020800 	andmi	r0, r2, r0, lsl #16
 8010d44:	017d7840 	cmneq	sp, r0, asr #16
 8010d48:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8010d4c:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8010d50:	6066      	str	r6, [r4, #4]
 8010d52:	2100      	movs	r1, #0
 8010d54:	e6f6      	b.n	8010b44 <WS28xxDmxMulti::WS28xxDmxMulti()+0x114>
 8010d56:	2a00      	cmp	r2, #0
 8010d58:	f43f aea4 	beq.w	8010aa4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x74>
 8010d5c:	2a0d      	cmp	r2, #13
 8010d5e:	d01b      	beq.n	8010d98 <WS28xxDmxMulti::WS28xxDmxMulti()+0x368>
 8010d60:	2001      	movs	r0, #1
 8010d62:	2a0e      	cmp	r2, #14
 8010d64:	7520      	strb	r0, [r4, #20]
 8010d66:	d140      	bne.n	8010dea <WS28xxDmxMulti::WS28xxDmxMulti()+0x3ba>
 8010d68:	2e06      	cmp	r6, #6
 8010d6a:	7d60      	ldrb	r0, [r4, #21]
 8010d6c:	7da3      	ldrb	r3, [r4, #22]
 8010d6e:	60e1      	str	r1, [r4, #12]
 8010d70:	bf04      	itt	eq
 8010d72:	2202      	moveq	r2, #2
 8010d74:	6122      	streq	r2, [r4, #16]
 8010d76:	4283      	cmp	r3, r0
 8010d78:	d88d      	bhi.n	8010c96 <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 8010d7a:	f04f 0c00 	mov.w	ip, #0
 8010d7e:	f8a4 c015 	strh.w	ip, [r4, #21]
 8010d82:	23f8      	movs	r3, #248	@ 0xf8
 8010d84:	75a3      	strb	r3, [r4, #22]
 8010d86:	e773      	b.n	8010c70 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 8010d88:	4b39      	ldr	r3, [pc, #228]	@ (8010e70 <WS28xxDmxMulti::WS28xxDmxMulti()+0x440>)
 8010d8a:	4a3a      	ldr	r2, [pc, #232]	@ (8010e74 <WS28xxDmxMulti::WS28xxDmxMulti()+0x444>)
 8010d8c:	483a      	ldr	r0, [pc, #232]	@ (8010e78 <WS28xxDmxMulti::WS28xxDmxMulti()+0x448>)
 8010d8e:	21a4      	movs	r1, #164	@ 0xa4
 8010d90:	f00a f82a 	bl	801ade8 <__assert_func>
 8010d94:	6834      	ldr	r4, [r6, #0]
 8010d96:	e65e      	b.n	8010a56 <WS28xxDmxMulti::WS28xxDmxMulti()+0x26>
 8010d98:	2100      	movs	r1, #0
 8010d9a:	2e06      	cmp	r6, #6
 8010d9c:	7521      	strb	r1, [r4, #20]
 8010d9e:	d007      	beq.n	8010db0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x380>
 8010da0:	6866      	ldr	r6, [r4, #4]
 8010da2:	2e00      	cmp	r6, #0
 8010da4:	f43f ae86 	beq.w	8010ab4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x84>
 8010da8:	4834      	ldr	r0, [pc, #208]	@ (8010e7c <WS28xxDmxMulti::WS28xxDmxMulti()+0x44c>)
 8010daa:	e732      	b.n	8010c12 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1e2>
 8010dac:	6122      	str	r2, [r4, #16]
 8010dae:	e6c0      	b.n	8010b32 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 8010db0:	6121      	str	r1, [r4, #16]
 8010db2:	e7f5      	b.n	8010da0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x370>
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d09b      	beq.n	8010cf0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2c0>
 8010db8:	fb06 fc01 	mul.w	ip, r6, r1
 8010dbc:	4a30      	ldr	r2, [pc, #192]	@ (8010e80 <WS28xxDmxMulti::WS28xxDmxMulti()+0x450>)
 8010dbe:	4e31      	ldr	r6, [pc, #196]	@ (8010e84 <WS28xxDmxMulti::WS28xxDmxMulti()+0x454>)
 8010dc0:	6062      	str	r2, [r4, #4]
 8010dc2:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8010dc6:	0048      	lsls	r0, r1, #1
 8010dc8:	fbb6 f7f0 	udiv	r7, r6, r0
 8010dcc:	e6bd      	b.n	8010b4a <WS28xxDmxMulti::WS28xxDmxMulti()+0x11a>
 8010dce:	280d      	cmp	r0, #13
 8010dd0:	d11e      	bne.n	8010e10 <WS28xxDmxMulti::WS28xxDmxMulti()+0x3e0>
 8010dd2:	2f06      	cmp	r7, #6
 8010dd4:	6867      	ldr	r7, [r4, #4]
 8010dd6:	f04f 0300 	mov.w	r3, #0
 8010dda:	7523      	strb	r3, [r4, #20]
 8010ddc:	bf08      	it	eq
 8010dde:	6123      	streq	r3, [r4, #16]
 8010de0:	2f00      	cmp	r7, #0
 8010de2:	f43f aeaa 	beq.w	8010b3a <WS28xxDmxMulti::WS28xxDmxMulti()+0x10a>
 8010de6:	4e25      	ldr	r6, [pc, #148]	@ (8010e7c <WS28xxDmxMulti::WS28xxDmxMulti()+0x44c>)
 8010de8:	e74b      	b.n	8010c82 <WS28xxDmxMulti::WS28xxDmxMulti()+0x252>
 8010dea:	2e06      	cmp	r6, #6
 8010dec:	f47f af2f 	bne.w	8010c4e <WS28xxDmxMulti::WS28xxDmxMulti()+0x21e>
 8010df0:	1e53      	subs	r3, r2, #1
 8010df2:	2b09      	cmp	r3, #9
 8010df4:	d931      	bls.n	8010e5a <WS28xxDmxMulti::WS28xxDmxMulti()+0x42a>
 8010df6:	7d60      	ldrb	r0, [r4, #21]
 8010df8:	7da6      	ldrb	r6, [r4, #22]
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	4286      	cmp	r6, r0
 8010dfe:	6122      	str	r2, [r4, #16]
 8010e00:	f63f af49 	bhi.w	8010c96 <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 8010e04:	2000      	movs	r0, #0
 8010e06:	f8a4 0015 	strh.w	r0, [r4, #21]
 8010e0a:	23f0      	movs	r3, #240	@ 0xf0
 8010e0c:	75a3      	strb	r3, [r4, #22]
 8010e0e:	e72f      	b.n	8010c70 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 8010e10:	2301      	movs	r3, #1
 8010e12:	280e      	cmp	r0, #14
 8010e14:	7523      	strb	r3, [r4, #20]
 8010e16:	d10e      	bne.n	8010e36 <WS28xxDmxMulti::WS28xxDmxMulti()+0x406>
 8010e18:	2f06      	cmp	r7, #6
 8010e1a:	bf04      	itt	eq
 8010e1c:	2302      	moveq	r3, #2
 8010e1e:	6123      	streq	r3, [r4, #16]
 8010e20:	7da7      	ldrb	r7, [r4, #22]
 8010e22:	7d63      	ldrb	r3, [r4, #21]
 8010e24:	60e6      	str	r6, [r4, #12]
 8010e26:	429f      	cmp	r7, r3
 8010e28:	d8c4      	bhi.n	8010db4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 8010e2a:	2600      	movs	r6, #0
 8010e2c:	f8a4 6015 	strh.w	r6, [r4, #21]
 8010e30:	2603      	movs	r6, #3
 8010e32:	27f8      	movs	r7, #248	@ 0xf8
 8010e34:	e75b      	b.n	8010cee <WS28xxDmxMulti::WS28xxDmxMulti()+0x2be>
 8010e36:	2f06      	cmp	r7, #6
 8010e38:	f47f af49 	bne.w	8010cce <WS28xxDmxMulti::WS28xxDmxMulti()+0x29e>
 8010e3c:	1e47      	subs	r7, r0, #1
 8010e3e:	2f09      	cmp	r7, #9
 8010e40:	d910      	bls.n	8010e64 <WS28xxDmxMulti::WS28xxDmxMulti()+0x434>
 8010e42:	7d63      	ldrb	r3, [r4, #21]
 8010e44:	f894 c016 	ldrb.w	ip, [r4, #22]
 8010e48:	2002      	movs	r0, #2
 8010e4a:	459c      	cmp	ip, r3
 8010e4c:	6120      	str	r0, [r4, #16]
 8010e4e:	d8b1      	bhi.n	8010db4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 8010e50:	2200      	movs	r2, #0
 8010e52:	f8a4 2015 	strh.w	r2, [r4, #21]
 8010e56:	27f0      	movs	r7, #240	@ 0xf0
 8010e58:	e749      	b.n	8010cee <WS28xxDmxMulti::WS28xxDmxMulti()+0x2be>
 8010e5a:	480b      	ldr	r0, [pc, #44]	@ (8010e88 <WS28xxDmxMulti::WS28xxDmxMulti()+0x458>)
 8010e5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010e60:	6123      	str	r3, [r4, #16]
 8010e62:	e6f4      	b.n	8010c4e <WS28xxDmxMulti::WS28xxDmxMulti()+0x21e>
 8010e64:	4a08      	ldr	r2, [pc, #32]	@ (8010e88 <WS28xxDmxMulti::WS28xxDmxMulti()+0x458>)
 8010e66:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 8010e6a:	6127      	str	r7, [r4, #16]
 8010e6c:	e72f      	b.n	8010cce <WS28xxDmxMulti::WS28xxDmxMulti()+0x29e>
 8010e6e:	bf00      	nop
 8010e70:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 8010e74:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}
 8010e78:	0801cba4 	stmdaeq	r1, {r2, r5, r7, r8, r9, fp, lr, pc}
 8010e7c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8010e80:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8010e84:	000f4240 	andeq	r4, pc, r0, asr #4
 8010e88:	0801ec34 	stmdaeq	r1, {r2, r4, r5, sl, fp, sp, lr, pc}

08010e8c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>:
 8010e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e90:	b0a1      	sub	sp, #132	@ 0x84
 8010e92:	4604      	mov	r4, r0
 8010e94:	460f      	mov	r7, r1
 8010e96:	9305      	str	r3, [sp, #20]
 8010e98:	4692      	mov	sl, r2
 8010e9a:	2a00      	cmp	r2, #0
 8010e9c:	f000 8244 	beq.w	8011328 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x49c>
 8010ea0:	9b05      	ldr	r3, [sp, #20]
 8010ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ea6:	f200 824a 	bhi.w	801133e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4b2>
 8010eaa:	4d98      	ldr	r5, [pc, #608]	@ (801110c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x280>)
 8010eac:	682e      	ldr	r6, [r5, #0]
 8010eae:	2e00      	cmp	r6, #0
 8010eb0:	f000 8250 	beq.w	8011354 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4c8>
 8010eb4:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8010eb6:	fbb7 f5f0 	udiv	r5, r7, r0
 8010eba:	fb00 7115 	mls	r1, r0, r5, r7
 8010ebe:	eb06 0241 	add.w	r2, r6, r1, lsl #1
 8010ec2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8010ec4:	f8b2 8034 	ldrh.w	r8, [r2, #52]	@ 0x34
 8010ec8:	68b3      	ldr	r3, [r6, #8]
 8010eca:	9f05      	ldr	r7, [sp, #20]
 8010ecc:	fbb7 f7f3 	udiv	r7, r7, r3
 8010ed0:	4447      	add	r7, r8
 8010ed2:	4287      	cmp	r7, r0
 8010ed4:	68f1      	ldr	r1, [r6, #12]
 8010ed6:	f8d6 b020 	ldr.w	fp, [r6, #32]
 8010eda:	f896 9014 	ldrb.w	r9, [r6, #20]
 8010ede:	9106      	str	r1, [sp, #24]
 8010ee0:	bf28      	it	cs
 8010ee2:	4607      	movcs	r7, r0
 8010ee4:	2b03      	cmp	r3, #3
 8010ee6:	f000 8093 	beq.w	8011010 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x184>
 8010eea:	2b04      	cmp	r3, #4
 8010eec:	f040 8215 	bne.w	801131a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x48e>
 8010ef0:	f1b9 0f00 	cmp.w	r9, #0
 8010ef4:	f000 8236 	beq.w	8011364 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4d8>
 8010ef8:	4547      	cmp	r7, r8
 8010efa:	f240 8086 	bls.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010efe:	9e05      	ldr	r6, [sp, #20]
 8010f00:	2e00      	cmp	r6, #0
 8010f02:	f000 8082 	beq.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010f06:	eba7 0c08 	sub.w	ip, r7, r8
 8010f0a:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8010f0e:	fb0b f808 	mul.w	r8, fp, r8
 8010f12:	4656      	mov	r6, sl
 8010f14:	9206      	str	r2, [sp, #24]
 8010f16:	f04f 0900 	mov.w	r9, #0
 8010f1a:	f1bb 0f00 	cmp.w	fp, #0
 8010f1e:	d068      	beq.n	8010ff2 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x166>
 8010f20:	f01b 0303 	ands.w	r3, fp, #3
 8010f24:	4647      	mov	r7, r8
 8010f26:	eb0b 0a08 	add.w	sl, fp, r8
 8010f2a:	d02d      	beq.n	8010f88 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xfc>
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d01c      	beq.n	8010f6a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xde>
 8010f30:	2b02      	cmp	r3, #2
 8010f32:	d00d      	beq.n	8010f50 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xc4>
 8010f34:	78f0      	ldrb	r0, [r6, #3]
 8010f36:	9002      	str	r0, [sp, #8]
 8010f38:	78b7      	ldrb	r7, [r6, #2]
 8010f3a:	9701      	str	r7, [sp, #4]
 8010f3c:	7871      	ldrb	r1, [r6, #1]
 8010f3e:	9100      	str	r1, [sp, #0]
 8010f40:	7833      	ldrb	r3, [r6, #0]
 8010f42:	6860      	ldr	r0, [r4, #4]
 8010f44:	4642      	mov	r2, r8
 8010f46:	4629      	mov	r1, r5
 8010f48:	f002 fb60 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010f4c:	f108 0701 	add.w	r7, r8, #1
 8010f50:	78f2      	ldrb	r2, [r6, #3]
 8010f52:	9202      	str	r2, [sp, #8]
 8010f54:	78b3      	ldrb	r3, [r6, #2]
 8010f56:	9301      	str	r3, [sp, #4]
 8010f58:	7870      	ldrb	r0, [r6, #1]
 8010f5a:	9000      	str	r0, [sp, #0]
 8010f5c:	463a      	mov	r2, r7
 8010f5e:	7833      	ldrb	r3, [r6, #0]
 8010f60:	6860      	ldr	r0, [r4, #4]
 8010f62:	4629      	mov	r1, r5
 8010f64:	f002 fb52 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010f68:	3701      	adds	r7, #1
 8010f6a:	78f1      	ldrb	r1, [r6, #3]
 8010f6c:	9102      	str	r1, [sp, #8]
 8010f6e:	78b2      	ldrb	r2, [r6, #2]
 8010f70:	9201      	str	r2, [sp, #4]
 8010f72:	7873      	ldrb	r3, [r6, #1]
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	463a      	mov	r2, r7
 8010f78:	7833      	ldrb	r3, [r6, #0]
 8010f7a:	6860      	ldr	r0, [r4, #4]
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	3701      	adds	r7, #1
 8010f80:	f002 fb44 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010f84:	4557      	cmp	r7, sl
 8010f86:	d034      	beq.n	8010ff2 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x166>
 8010f88:	78f1      	ldrb	r1, [r6, #3]
 8010f8a:	9102      	str	r1, [sp, #8]
 8010f8c:	78b2      	ldrb	r2, [r6, #2]
 8010f8e:	9201      	str	r2, [sp, #4]
 8010f90:	7870      	ldrb	r0, [r6, #1]
 8010f92:	7833      	ldrb	r3, [r6, #0]
 8010f94:	9000      	str	r0, [sp, #0]
 8010f96:	463a      	mov	r2, r7
 8010f98:	6860      	ldr	r0, [r4, #4]
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	f002 fb36 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010fa0:	78f3      	ldrb	r3, [r6, #3]
 8010fa2:	9302      	str	r3, [sp, #8]
 8010fa4:	78b1      	ldrb	r1, [r6, #2]
 8010fa6:	9101      	str	r1, [sp, #4]
 8010fa8:	7870      	ldrb	r0, [r6, #1]
 8010faa:	9000      	str	r0, [sp, #0]
 8010fac:	1c7a      	adds	r2, r7, #1
 8010fae:	7833      	ldrb	r3, [r6, #0]
 8010fb0:	6860      	ldr	r0, [r4, #4]
 8010fb2:	9204      	str	r2, [sp, #16]
 8010fb4:	4629      	mov	r1, r5
 8010fb6:	f002 fb29 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010fba:	78f2      	ldrb	r2, [r6, #3]
 8010fbc:	9202      	str	r2, [sp, #8]
 8010fbe:	78b3      	ldrb	r3, [r6, #2]
 8010fc0:	9301      	str	r3, [sp, #4]
 8010fc2:	7871      	ldrb	r1, [r6, #1]
 8010fc4:	9a04      	ldr	r2, [sp, #16]
 8010fc6:	7833      	ldrb	r3, [r6, #0]
 8010fc8:	9100      	str	r1, [sp, #0]
 8010fca:	6860      	ldr	r0, [r4, #4]
 8010fcc:	3201      	adds	r2, #1
 8010fce:	4629      	mov	r1, r5
 8010fd0:	f002 fb1c 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010fd4:	78f0      	ldrb	r0, [r6, #3]
 8010fd6:	9002      	str	r0, [sp, #8]
 8010fd8:	78b2      	ldrb	r2, [r6, #2]
 8010fda:	9201      	str	r2, [sp, #4]
 8010fdc:	7871      	ldrb	r1, [r6, #1]
 8010fde:	7833      	ldrb	r3, [r6, #0]
 8010fe0:	9100      	str	r1, [sp, #0]
 8010fe2:	1cfa      	adds	r2, r7, #3
 8010fe4:	6860      	ldr	r0, [r4, #4]
 8010fe6:	4629      	mov	r1, r5
 8010fe8:	3704      	adds	r7, #4
 8010fea:	f002 fb0f 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8010fee:	4557      	cmp	r7, sl
 8010ff0:	d1ca      	bne.n	8010f88 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xfc>
 8010ff2:	9f06      	ldr	r7, [sp, #24]
 8010ff4:	45b9      	cmp	r9, r7
 8010ff6:	d008      	beq.n	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8010ff8:	9805      	ldr	r0, [sp, #20]
 8010ffa:	f109 0901 	add.w	r9, r9, #1
 8010ffe:	ebb0 0f89 	cmp.w	r0, r9, lsl #2
 8011002:	44d8      	add	r8, fp
 8011004:	f106 0604 	add.w	r6, r6, #4
 8011008:	d887      	bhi.n	8010f1a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x8e>
 801100a:	b021      	add	sp, #132	@ 0x84
 801100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011010:	493f      	ldr	r1, [pc, #252]	@ (8011110 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x284>)
 8011012:	2248      	movs	r2, #72	@ 0x48
 8011014:	a80e      	add	r0, sp, #56	@ 0x38
 8011016:	f009 fb01 	bl	801a61c <memcpy>
 801101a:	6933      	ldr	r3, [r6, #16]
 801101c:	9304      	str	r3, [sp, #16]
 801101e:	2b05      	cmp	r3, #5
 8011020:	f200 8259 	bhi.w	80114d6 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x64a>
 8011024:	f1b9 0f00 	cmp.w	r9, #0
 8011028:	f040 80be 	bne.w	80111a8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x31c>
 801102c:	4547      	cmp	r7, r8
 801102e:	d9ec      	bls.n	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8011030:	9805      	ldr	r0, [sp, #20]
 8011032:	2800      	cmp	r0, #0
 8011034:	d0e9      	beq.n	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8011036:	9a06      	ldr	r2, [sp, #24]
 8011038:	2a00      	cmp	r2, #0
 801103a:	f000 819a 	beq.w	8011372 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4e6>
 801103e:	f1a2 000b 	sub.w	r0, r2, #11
 8011042:	eba7 0c08 	sub.w	ip, r7, r8
 8011046:	9f04      	ldr	r7, [sp, #16]
 8011048:	fb0b fe08 	mul.w	lr, fp, r8
 801104c:	2801      	cmp	r0, #1
 801104e:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8011052:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8011056:	f10e 0201 	add.w	r2, lr, #1
 801105a:	f240 825d 	bls.w	8011518 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x68c>
 801105e:	f1a8 0603 	sub.w	r6, r8, #3
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	9208      	str	r2, [sp, #32]
 8011066:	960a      	str	r6, [sp, #40]	@ 0x28
 8011068:	f8cd 901c 	str.w	r9, [sp, #28]
 801106c:	930d      	str	r3, [sp, #52]	@ 0x34
 801106e:	f1bb 0f00 	cmp.w	fp, #0
 8011072:	f000 808a 	beq.w	801118a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2fe>
 8011076:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8011078:	9807      	ldr	r0, [sp, #28]
 801107a:	3780      	adds	r7, #128	@ 0x80
 801107c:	eb0d 0807 	add.w	r8, sp, r7
 8011080:	e958 2311 	ldrd	r2, r3, [r8, #-68]	@ 0x44
 8011084:	f858 1c48 	ldr.w	r1, [r8, #-72]
 8011088:	18c3      	adds	r3, r0, r3
 801108a:	9309      	str	r3, [sp, #36]	@ 0x24
 801108c:	1847      	adds	r7, r0, r1
 801108e:	1886      	adds	r6, r0, r2
 8011090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011092:	f81a 1007 	ldrb.w	r1, [sl, r7]
 8011096:	f81a 0006 	ldrb.w	r0, [sl, r6]
 801109a:	970b      	str	r7, [sp, #44]	@ 0x2c
 801109c:	960c      	str	r6, [sp, #48]	@ 0x30
 801109e:	eb0a 0807 	add.w	r8, sl, r7
 80110a2:	eb0a 0706 	add.w	r7, sl, r6
 80110a6:	eb0a 0602 	add.w	r6, sl, r2
 80110aa:	9a06      	ldr	r2, [sp, #24]
 80110ac:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80110b0:	2a0d      	cmp	r2, #13
 80110b2:	f040 82ec 	bne.w	801168e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x802>
 80110b6:	9a08      	ldr	r2, [sp, #32]
 80110b8:	f01b 0f01 	tst.w	fp, #1
 80110bc:	4691      	mov	r9, r2
 80110be:	445a      	add	r2, fp
 80110c0:	9204      	str	r2, [sp, #16]
 80110c2:	d147      	bne.n	8011154 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2c8>
 80110c4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80110c8:	43d8      	mvns	r0, r3
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	43c9      	mvns	r1, r1
 80110ce:	0883      	lsrs	r3, r0, #2
 80110d0:	f3c1 1281 	ubfx	r2, r1, #6, #2
 80110d4:	f003 0030 	and.w	r0, r3, #48	@ 0x30
 80110d8:	0909      	lsrs	r1, r1, #4
 80110da:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80110de:	f001 030c 	and.w	r3, r1, #12
 80110e2:	4310      	orrs	r0, r2
 80110e4:	4318      	orrs	r0, r3
 80110e6:	f040 03c0 	orr.w	r3, r0, #192	@ 0xc0
 80110ea:	464a      	mov	r2, r9
 80110ec:	6860      	ldr	r0, [r4, #4]
 80110ee:	4629      	mov	r1, r5
 80110f0:	f001 fbb0 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80110f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80110f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80110f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110fa:	f81a 1000 	ldrb.w	r1, [sl, r0]
 80110fe:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8011102:	f81a 0002 	ldrb.w	r0, [sl, r2]
 8011106:	f109 0901 	add.w	r9, r9, #1
 801110a:	e023      	b.n	8011154 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2c8>
 801110c:	20000078 	andcs	r0, r0, r8, ror r0
 8011110:	0801b19c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, pc}
 8011114:	7830      	ldrb	r0, [r6, #0]
 8011116:	9000      	str	r0, [sp, #0]
 8011118:	f898 1000 	ldrb.w	r1, [r8]
 801111c:	9102      	str	r1, [sp, #8]
 801111e:	43c3      	mvns	r3, r0
 8011120:	089a      	lsrs	r2, r3, #2
 8011122:	43cb      	mvns	r3, r1
 8011124:	f002 0030 	and.w	r0, r2, #48	@ 0x30
 8011128:	0919      	lsrs	r1, r3, #4
 801112a:	f3c3 1281 	ubfx	r2, r3, #6, #2
 801112e:	4310      	orrs	r0, r2
 8011130:	f001 030c 	and.w	r3, r1, #12
 8011134:	4318      	orrs	r0, r3
 8011136:	f040 03c0 	orr.w	r3, r0, #192	@ 0xc0
 801113a:	7838      	ldrb	r0, [r7, #0]
 801113c:	9001      	str	r0, [sp, #4]
 801113e:	6860      	ldr	r0, [r4, #4]
 8011140:	464a      	mov	r2, r9
 8011142:	4629      	mov	r1, r5
 8011144:	f001 fb86 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011148:	f898 1000 	ldrb.w	r1, [r8]
 801114c:	7838      	ldrb	r0, [r7, #0]
 801114e:	7833      	ldrb	r3, [r6, #0]
 8011150:	f109 0901 	add.w	r9, r9, #1
 8011154:	43da      	mvns	r2, r3
 8011156:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801115a:	0890      	lsrs	r0, r2, #2
 801115c:	43c9      	mvns	r1, r1
 801115e:	9300      	str	r3, [sp, #0]
 8011160:	f3c1 1281 	ubfx	r2, r1, #6, #2
 8011164:	f000 0330 	and.w	r3, r0, #48	@ 0x30
 8011168:	0909      	lsrs	r1, r1, #4
 801116a:	f001 000c 	and.w	r0, r1, #12
 801116e:	4313      	orrs	r3, r2
 8011170:	4303      	orrs	r3, r0
 8011172:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011176:	464a      	mov	r2, r9
 8011178:	6860      	ldr	r0, [r4, #4]
 801117a:	4629      	mov	r1, r5
 801117c:	f001 fb6a 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011180:	9b04      	ldr	r3, [sp, #16]
 8011182:	f109 0901 	add.w	r9, r9, #1
 8011186:	454b      	cmp	r3, r9
 8011188:	d1c4      	bne.n	8011114 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x288>
 801118a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801118c:	9e07      	ldr	r6, [sp, #28]
 801118e:	42b7      	cmp	r7, r6
 8011190:	f43f af3b 	beq.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8011194:	9a08      	ldr	r2, [sp, #32]
 8011196:	9905      	ldr	r1, [sp, #20]
 8011198:	3603      	adds	r6, #3
 801119a:	445a      	add	r2, fp
 801119c:	42b1      	cmp	r1, r6
 801119e:	9607      	str	r6, [sp, #28]
 80111a0:	9208      	str	r2, [sp, #32]
 80111a2:	f63f af64 	bhi.w	801106e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1e2>
 80111a6:	e730      	b.n	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80111a8:	4547      	cmp	r7, r8
 80111aa:	f67f af2e 	bls.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80111ae:	9e05      	ldr	r6, [sp, #20]
 80111b0:	2e00      	cmp	r6, #0
 80111b2:	f43f af2a 	beq.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80111b6:	eba7 0c08 	sub.w	ip, r7, r8
 80111ba:	9f04      	ldr	r7, [sp, #16]
 80111bc:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 80111c0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 80111c4:	fb0b f208 	mul.w	r2, fp, r8
 80111c8:	f1ae 0303 	sub.w	r3, lr, #3
 80111cc:	0088      	lsls	r0, r1, #2
 80111ce:	2600      	movs	r6, #0
 80111d0:	9208      	str	r2, [sp, #32]
 80111d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111d4:	900c      	str	r0, [sp, #48]	@ 0x30
 80111d6:	9604      	str	r6, [sp, #16]
 80111d8:	f1bb 0f00 	cmp.w	fp, #0
 80111dc:	f000 808e 	beq.w	80112fc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x470>
 80111e0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80111e2:	9904      	ldr	r1, [sp, #16]
 80111e4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80111e8:	3780      	adds	r7, #128	@ 0x80
 80111ea:	eb0d 0807 	add.w	r8, sp, r7
 80111ee:	e958 7311 	ldrd	r7, r3, [r8, #-68]	@ 0x44
 80111f2:	f858 2c48 	ldr.w	r2, [r8, #-72]
 80111f6:	1888      	adds	r0, r1, r2
 80111f8:	9006      	str	r0, [sp, #24]
 80111fa:	19ca      	adds	r2, r1, r7
 80111fc:	eb0a 0700 	add.w	r7, sl, r0
 8011200:	4660      	mov	r0, ip
 8011202:	4419      	add	r1, r3
 8011204:	4458      	add	r0, fp
 8011206:	f01b 0303 	ands.w	r3, fp, #3
 801120a:	4666      	mov	r6, ip
 801120c:	9209      	str	r2, [sp, #36]	@ 0x24
 801120e:	910a      	str	r1, [sp, #40]	@ 0x28
 8011210:	eb0a 0802 	add.w	r8, sl, r2
 8011214:	eb0a 0901 	add.w	r9, sl, r1
 8011218:	9007      	str	r0, [sp, #28]
 801121a:	d039      	beq.n	8011290 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x404>
 801121c:	2b01      	cmp	r3, #1
 801121e:	d023      	beq.n	8011268 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x3dc>
 8011220:	2b02      	cmp	r3, #2
 8011222:	d010      	beq.n	8011246 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x3ba>
 8011224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011228:	f81a 1002 	ldrb.w	r1, [sl, r2]
 801122c:	9101      	str	r1, [sp, #4]
 801122e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8011232:	9a06      	ldr	r2, [sp, #24]
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	f81a 3002 	ldrb.w	r3, [sl, r2]
 801123a:	6860      	ldr	r0, [r4, #4]
 801123c:	4662      	mov	r2, ip
 801123e:	4629      	mov	r1, r5
 8011240:	f001 f8d6 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011244:	3601      	adds	r6, #1
 8011246:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801124a:	f81a 0001 	ldrb.w	r0, [sl, r1]
 801124e:	9001      	str	r0, [sp, #4]
 8011250:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8011254:	9906      	ldr	r1, [sp, #24]
 8011256:	9200      	str	r2, [sp, #0]
 8011258:	f81a 3001 	ldrb.w	r3, [sl, r1]
 801125c:	6860      	ldr	r0, [r4, #4]
 801125e:	4632      	mov	r2, r6
 8011260:	4629      	mov	r1, r5
 8011262:	f001 f8c5 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011266:	3601      	adds	r6, #1
 8011268:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801126a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801126c:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8011270:	9301      	str	r3, [sp, #4]
 8011272:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8011276:	9806      	ldr	r0, [sp, #24]
 8011278:	9100      	str	r1, [sp, #0]
 801127a:	f81a 3000 	ldrb.w	r3, [sl, r0]
 801127e:	6860      	ldr	r0, [r4, #4]
 8011280:	4632      	mov	r2, r6
 8011282:	4629      	mov	r1, r5
 8011284:	f001 f8b4 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011288:	9b07      	ldr	r3, [sp, #28]
 801128a:	3601      	adds	r6, #1
 801128c:	429e      	cmp	r6, r3
 801128e:	d035      	beq.n	80112fc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x470>
 8011290:	f899 0000 	ldrb.w	r0, [r9]
 8011294:	9001      	str	r0, [sp, #4]
 8011296:	f898 3000 	ldrb.w	r3, [r8]
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	4632      	mov	r2, r6
 801129e:	783b      	ldrb	r3, [r7, #0]
 80112a0:	6860      	ldr	r0, [r4, #4]
 80112a2:	4629      	mov	r1, r5
 80112a4:	f001 f8a4 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80112a8:	f899 2000 	ldrb.w	r2, [r9]
 80112ac:	9201      	str	r2, [sp, #4]
 80112ae:	f898 1000 	ldrb.w	r1, [r8]
 80112b2:	9100      	str	r1, [sp, #0]
 80112b4:	1c72      	adds	r2, r6, #1
 80112b6:	783b      	ldrb	r3, [r7, #0]
 80112b8:	6860      	ldr	r0, [r4, #4]
 80112ba:	9206      	str	r2, [sp, #24]
 80112bc:	4629      	mov	r1, r5
 80112be:	f001 f897 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80112c2:	f899 0000 	ldrb.w	r0, [r9]
 80112c6:	9001      	str	r0, [sp, #4]
 80112c8:	f898 3000 	ldrb.w	r3, [r8]
 80112cc:	9a06      	ldr	r2, [sp, #24]
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	783b      	ldrb	r3, [r7, #0]
 80112d2:	6860      	ldr	r0, [r4, #4]
 80112d4:	3201      	adds	r2, #1
 80112d6:	4629      	mov	r1, r5
 80112d8:	f001 f88a 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80112dc:	f899 2000 	ldrb.w	r2, [r9]
 80112e0:	9201      	str	r2, [sp, #4]
 80112e2:	f898 1000 	ldrb.w	r1, [r8]
 80112e6:	9100      	str	r1, [sp, #0]
 80112e8:	783b      	ldrb	r3, [r7, #0]
 80112ea:	6860      	ldr	r0, [r4, #4]
 80112ec:	1cf2      	adds	r2, r6, #3
 80112ee:	4629      	mov	r1, r5
 80112f0:	f001 f87e 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80112f4:	9b07      	ldr	r3, [sp, #28]
 80112f6:	3604      	adds	r6, #4
 80112f8:	429e      	cmp	r6, r3
 80112fa:	d1c9      	bne.n	8011290 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x404>
 80112fc:	9f04      	ldr	r7, [sp, #16]
 80112fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011300:	42b7      	cmp	r7, r6
 8011302:	f43f ae82 	beq.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8011306:	9a08      	ldr	r2, [sp, #32]
 8011308:	9905      	ldr	r1, [sp, #20]
 801130a:	3703      	adds	r7, #3
 801130c:	445a      	add	r2, fp
 801130e:	42b9      	cmp	r1, r7
 8011310:	9704      	str	r7, [sp, #16]
 8011312:	9208      	str	r2, [sp, #32]
 8011314:	f63f af60 	bhi.w	80111d8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x34c>
 8011318:	e677      	b.n	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801131a:	4b74      	ldr	r3, [pc, #464]	@ (80114ec <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x660>)
 801131c:	4a74      	ldr	r2, [pc, #464]	@ (80114f0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 801131e:	4875      	ldr	r0, [pc, #468]	@ (80114f4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8011320:	21c8      	movs	r1, #200	@ 0xc8
 8011322:	f009 fd61 	bl	801ade8 <__assert_func>
 8011326:	e5e3      	b.n	8010ef0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x64>
 8011328:	4b73      	ldr	r3, [pc, #460]	@ (80114f8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x66c>)
 801132a:	4a71      	ldr	r2, [pc, #452]	@ (80114f0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 801132c:	4871      	ldr	r0, [pc, #452]	@ (80114f4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 801132e:	2165      	movs	r1, #101	@ 0x65
 8011330:	f009 fd5a 	bl	801ade8 <__assert_func>
 8011334:	9b05      	ldr	r3, [sp, #20]
 8011336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801133a:	f67f adb6 	bls.w	8010eaa <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1e>
 801133e:	4d6f      	ldr	r5, [pc, #444]	@ (80114fc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x670>)
 8011340:	4b6f      	ldr	r3, [pc, #444]	@ (8011500 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x674>)
 8011342:	4a6b      	ldr	r2, [pc, #428]	@ (80114f0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8011344:	486b      	ldr	r0, [pc, #428]	@ (80114f4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8011346:	2166      	movs	r1, #102	@ 0x66
 8011348:	f009 fd4e 	bl	801ade8 <__assert_func>
 801134c:	682e      	ldr	r6, [r5, #0]
 801134e:	2e00      	cmp	r6, #0
 8011350:	f47f adb0 	bne.w	8010eb4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x28>
 8011354:	4b6b      	ldr	r3, [pc, #428]	@ (8011504 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x678>)
 8011356:	4a6c      	ldr	r2, [pc, #432]	@ (8011508 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x67c>)
 8011358:	486c      	ldr	r0, [pc, #432]	@ (801150c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x680>)
 801135a:	21a4      	movs	r1, #164	@ 0xa4
 801135c:	f009 fd44 	bl	801ade8 <__assert_func>
 8011360:	682e      	ldr	r6, [r5, #0]
 8011362:	e5a7      	b.n	8010eb4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x28>
 8011364:	4b6a      	ldr	r3, [pc, #424]	@ (8011510 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x684>)
 8011366:	4a62      	ldr	r2, [pc, #392]	@ (80114f0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8011368:	4862      	ldr	r0, [pc, #392]	@ (80114f4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 801136a:	21c9      	movs	r1, #201	@ 0xc9
 801136c:	f009 fd3c 	bl	801ade8 <__assert_func>
 8011370:	e5c2      	b.n	8010ef8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x6c>
 8011372:	9e04      	ldr	r6, [sp, #16]
 8011374:	9806      	ldr	r0, [sp, #24]
 8011376:	9004      	str	r0, [sp, #16]
 8011378:	eba7 0e08 	sub.w	lr, r7, r8
 801137c:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8011380:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8011384:	fb0b f108 	mul.w	r1, fp, r8
 8011388:	f1ac 0303 	sub.w	r3, ip, #3
 801138c:	00ba      	lsls	r2, r7, #2
 801138e:	9108      	str	r1, [sp, #32]
 8011390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011392:	920c      	str	r2, [sp, #48]	@ 0x30
 8011394:	f1bb 0f00 	cmp.w	fp, #0
 8011398:	f000 808e 	beq.w	80114b8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x62c>
 801139c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801139e:	9904      	ldr	r1, [sp, #16]
 80113a0:	f8dd e020 	ldr.w	lr, [sp, #32]
 80113a4:	3680      	adds	r6, #128	@ 0x80
 80113a6:	eb0d 0806 	add.w	r8, sp, r6
 80113aa:	e958 2311 	ldrd	r2, r3, [r8, #-68]	@ 0x44
 80113ae:	f858 7c48 	ldr.w	r7, [r8, #-72]
 80113b2:	19c8      	adds	r0, r1, r7
 80113b4:	9006      	str	r0, [sp, #24]
 80113b6:	eb0a 0700 	add.w	r7, sl, r0
 80113ba:	4670      	mov	r0, lr
 80113bc:	188a      	adds	r2, r1, r2
 80113be:	4458      	add	r0, fp
 80113c0:	4419      	add	r1, r3
 80113c2:	f01b 0303 	ands.w	r3, fp, #3
 80113c6:	4676      	mov	r6, lr
 80113c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80113ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80113cc:	eb0a 0802 	add.w	r8, sl, r2
 80113d0:	eb0a 0901 	add.w	r9, sl, r1
 80113d4:	9007      	str	r0, [sp, #28]
 80113d6:	d039      	beq.n	801144c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x5c0>
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d023      	beq.n	8011424 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x598>
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d010      	beq.n	8011402 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x576>
 80113e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113e4:	f81a 1002 	ldrb.w	r1, [sl, r2]
 80113e8:	9101      	str	r1, [sp, #4]
 80113ea:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80113ee:	9a06      	ldr	r2, [sp, #24]
 80113f0:	9300      	str	r3, [sp, #0]
 80113f2:	f81a 3002 	ldrb.w	r3, [sl, r2]
 80113f6:	6860      	ldr	r0, [r4, #4]
 80113f8:	4672      	mov	r2, lr
 80113fa:	4629      	mov	r1, r5
 80113fc:	f001 f906 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011400:	3601      	adds	r6, #1
 8011402:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011406:	f81a 0001 	ldrb.w	r0, [sl, r1]
 801140a:	9001      	str	r0, [sp, #4]
 801140c:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8011410:	9906      	ldr	r1, [sp, #24]
 8011412:	9200      	str	r2, [sp, #0]
 8011414:	f81a 3001 	ldrb.w	r3, [sl, r1]
 8011418:	6860      	ldr	r0, [r4, #4]
 801141a:	4632      	mov	r2, r6
 801141c:	4629      	mov	r1, r5
 801141e:	f001 f8f5 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011422:	3601      	adds	r6, #1
 8011424:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011428:	f81a 3000 	ldrb.w	r3, [sl, r0]
 801142c:	9301      	str	r3, [sp, #4]
 801142e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8011432:	9806      	ldr	r0, [sp, #24]
 8011434:	9100      	str	r1, [sp, #0]
 8011436:	f81a 3000 	ldrb.w	r3, [sl, r0]
 801143a:	6860      	ldr	r0, [r4, #4]
 801143c:	4632      	mov	r2, r6
 801143e:	4629      	mov	r1, r5
 8011440:	f001 f8e4 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011444:	9b07      	ldr	r3, [sp, #28]
 8011446:	3601      	adds	r6, #1
 8011448:	429e      	cmp	r6, r3
 801144a:	d035      	beq.n	80114b8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x62c>
 801144c:	f899 0000 	ldrb.w	r0, [r9]
 8011450:	9001      	str	r0, [sp, #4]
 8011452:	f898 3000 	ldrb.w	r3, [r8]
 8011456:	9300      	str	r3, [sp, #0]
 8011458:	4632      	mov	r2, r6
 801145a:	783b      	ldrb	r3, [r7, #0]
 801145c:	6860      	ldr	r0, [r4, #4]
 801145e:	4629      	mov	r1, r5
 8011460:	f001 f8d4 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011464:	f899 2000 	ldrb.w	r2, [r9]
 8011468:	9201      	str	r2, [sp, #4]
 801146a:	f898 1000 	ldrb.w	r1, [r8]
 801146e:	9100      	str	r1, [sp, #0]
 8011470:	1c72      	adds	r2, r6, #1
 8011472:	783b      	ldrb	r3, [r7, #0]
 8011474:	6860      	ldr	r0, [r4, #4]
 8011476:	9206      	str	r2, [sp, #24]
 8011478:	4629      	mov	r1, r5
 801147a:	f001 f8c7 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 801147e:	f899 0000 	ldrb.w	r0, [r9]
 8011482:	9001      	str	r0, [sp, #4]
 8011484:	f898 3000 	ldrb.w	r3, [r8]
 8011488:	9a06      	ldr	r2, [sp, #24]
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	783b      	ldrb	r3, [r7, #0]
 801148e:	6860      	ldr	r0, [r4, #4]
 8011490:	3201      	adds	r2, #1
 8011492:	4629      	mov	r1, r5
 8011494:	f001 f8ba 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011498:	f899 2000 	ldrb.w	r2, [r9]
 801149c:	9201      	str	r2, [sp, #4]
 801149e:	f898 1000 	ldrb.w	r1, [r8]
 80114a2:	9100      	str	r1, [sp, #0]
 80114a4:	783b      	ldrb	r3, [r7, #0]
 80114a6:	6860      	ldr	r0, [r4, #4]
 80114a8:	1cf2      	adds	r2, r6, #3
 80114aa:	4629      	mov	r1, r5
 80114ac:	f001 f8ae 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80114b0:	9b07      	ldr	r3, [sp, #28]
 80114b2:	3604      	adds	r6, #4
 80114b4:	429e      	cmp	r6, r3
 80114b6:	d1c9      	bne.n	801144c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x5c0>
 80114b8:	9f04      	ldr	r7, [sp, #16]
 80114ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80114bc:	42b7      	cmp	r7, r6
 80114be:	f43f ada4 	beq.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80114c2:	9a08      	ldr	r2, [sp, #32]
 80114c4:	9905      	ldr	r1, [sp, #20]
 80114c6:	3703      	adds	r7, #3
 80114c8:	445a      	add	r2, fp
 80114ca:	428f      	cmp	r7, r1
 80114cc:	9704      	str	r7, [sp, #16]
 80114ce:	9208      	str	r2, [sp, #32]
 80114d0:	f4ff af60 	bcc.w	8011394 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x508>
 80114d4:	e599      	b.n	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80114d6:	4b0f      	ldr	r3, [pc, #60]	@ (8011514 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x688>)
 80114d8:	4a05      	ldr	r2, [pc, #20]	@ (80114f0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 80114da:	4806      	ldr	r0, [pc, #24]	@ (80114f4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 80114dc:	21b3      	movs	r1, #179	@ 0xb3
 80114de:	f009 fc83 	bl	801ade8 <__assert_func>
 80114e2:	f1b9 0f00 	cmp.w	r9, #0
 80114e6:	f47f ae5f 	bne.w	80111a8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x31c>
 80114ea:	e59f      	b.n	801102c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1a0>
 80114ec:	0801ce68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, lr, pc}
 80114f0:	0801cdf0 	stmdaeq	r1, {r4, r5, r6, r7, r8, sl, fp, lr, pc}
 80114f4:	0801cd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, lr, pc}
 80114f8:	0801cddc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, fp, lr, pc}
 80114fc:	20000078 	andcs	r0, r0, r8, ror r0
 8011500:	0801cdf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, sl, fp, lr, pc}
 8011504:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 8011508:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}
 801150c:	0801cba4 	stmdaeq	r1, {r2, r5, r7, r8, r9, fp, lr, pc}
 8011510:	0801ce80 	stmdaeq	r1, {r7, r9, sl, fp, lr, pc}
 8011514:	0801ce20 	stmdaeq	r1, {r5, r9, sl, fp, lr, pc}
 8011518:	f1a8 0103 	sub.w	r1, r8, #3
 801151c:	0098      	lsls	r0, r3, #2
 801151e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011520:	910c      	str	r1, [sp, #48]	@ 0x30
 8011522:	f8cd 9020 	str.w	r9, [sp, #32]
 8011526:	900d      	str	r0, [sp, #52]	@ 0x34
 8011528:	f1bb 0f00 	cmp.w	fp, #0
 801152c:	f000 80a0 	beq.w	8011670 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x7e4>
 8011530:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8011532:	9908      	ldr	r1, [sp, #32]
 8011534:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8011538:	3780      	adds	r7, #128	@ 0x80
 801153a:	eb0d 0907 	add.w	r9, sp, r7
 801153e:	4667      	mov	r7, ip
 8011540:	f859 3c48 	ldr.w	r3, [r9, #-72]
 8011544:	18c8      	adds	r0, r1, r3
 8011546:	e959 2311 	ldrd	r2, r3, [r9, #-68]	@ 0x44
 801154a:	188a      	adds	r2, r1, r2
 801154c:	4419      	add	r1, r3
 801154e:	eb0a 0301 	add.w	r3, sl, r1
 8011552:	920a      	str	r2, [sp, #40]	@ 0x28
 8011554:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011556:	eb0a 0902 	add.w	r9, sl, r2
 801155a:	f01b 0103 	ands.w	r1, fp, #3
 801155e:	eb0b 020c 	add.w	r2, fp, ip
 8011562:	9006      	str	r0, [sp, #24]
 8011564:	eb0a 0800 	add.w	r8, sl, r0
 8011568:	9304      	str	r3, [sp, #16]
 801156a:	9207      	str	r2, [sp, #28]
 801156c:	d03e      	beq.n	80115ec <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x760>
 801156e:	2901      	cmp	r1, #1
 8011570:	d026      	beq.n	80115c0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x734>
 8011572:	2902      	cmp	r1, #2
 8011574:	d011      	beq.n	801159a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x70e>
 8011576:	f81a 2000 	ldrb.w	r2, [sl, r0]
 801157a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801157c:	7df3      	ldrb	r3, [r6, #23]
 801157e:	9202      	str	r2, [sp, #8]
 8011580:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8011584:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011586:	9001      	str	r0, [sp, #4]
 8011588:	f81a 1002 	ldrb.w	r1, [sl, r2]
 801158c:	9100      	str	r1, [sp, #0]
 801158e:	6860      	ldr	r0, [r4, #4]
 8011590:	4662      	mov	r2, ip
 8011592:	4629      	mov	r1, r5
 8011594:	f001 f95e 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011598:	3701      	adds	r7, #1
 801159a:	9806      	ldr	r0, [sp, #24]
 801159c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801159e:	f81a 2000 	ldrb.w	r2, [sl, r0]
 80115a2:	7df3      	ldrb	r3, [r6, #23]
 80115a4:	9202      	str	r2, [sp, #8]
 80115a6:	f81a 0001 	ldrb.w	r0, [sl, r1]
 80115aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80115ac:	9001      	str	r0, [sp, #4]
 80115ae:	f81a 1002 	ldrb.w	r1, [sl, r2]
 80115b2:	9100      	str	r1, [sp, #0]
 80115b4:	463a      	mov	r2, r7
 80115b6:	6860      	ldr	r0, [r4, #4]
 80115b8:	4629      	mov	r1, r5
 80115ba:	f001 f94b 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80115be:	3701      	adds	r7, #1
 80115c0:	9b06      	ldr	r3, [sp, #24]
 80115c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80115c4:	f81a c003 	ldrb.w	ip, [sl, r3]
 80115c8:	f81a e000 	ldrb.w	lr, [sl, r0]
 80115cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80115ce:	7df3      	ldrb	r3, [r6, #23]
 80115d0:	f81a 1002 	ldrb.w	r1, [sl, r2]
 80115d4:	9100      	str	r1, [sp, #0]
 80115d6:	e9cd ec01 	strd	lr, ip, [sp, #4]
 80115da:	463a      	mov	r2, r7
 80115dc:	6860      	ldr	r0, [r4, #4]
 80115de:	4629      	mov	r1, r5
 80115e0:	f001 f938 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80115e4:	9b07      	ldr	r3, [sp, #28]
 80115e6:	3701      	adds	r7, #1
 80115e8:	42bb      	cmp	r3, r7
 80115ea:	d041      	beq.n	8011670 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x7e4>
 80115ec:	f898 0000 	ldrb.w	r0, [r8]
 80115f0:	7df3      	ldrb	r3, [r6, #23]
 80115f2:	9002      	str	r0, [sp, #8]
 80115f4:	f899 2000 	ldrb.w	r2, [r9]
 80115f8:	9904      	ldr	r1, [sp, #16]
 80115fa:	9201      	str	r2, [sp, #4]
 80115fc:	7808      	ldrb	r0, [r1, #0]
 80115fe:	9000      	str	r0, [sp, #0]
 8011600:	463a      	mov	r2, r7
 8011602:	6860      	ldr	r0, [r4, #4]
 8011604:	4629      	mov	r1, r5
 8011606:	f001 f925 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801160a:	f898 2000 	ldrb.w	r2, [r8]
 801160e:	7df3      	ldrb	r3, [r6, #23]
 8011610:	9202      	str	r2, [sp, #8]
 8011612:	f899 1000 	ldrb.w	r1, [r9]
 8011616:	9804      	ldr	r0, [sp, #16]
 8011618:	9101      	str	r1, [sp, #4]
 801161a:	7802      	ldrb	r2, [r0, #0]
 801161c:	9200      	str	r2, [sp, #0]
 801161e:	6860      	ldr	r0, [r4, #4]
 8011620:	1c7a      	adds	r2, r7, #1
 8011622:	4629      	mov	r1, r5
 8011624:	9206      	str	r2, [sp, #24]
 8011626:	f001 f915 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801162a:	f898 1000 	ldrb.w	r1, [r8]
 801162e:	7df3      	ldrb	r3, [r6, #23]
 8011630:	9102      	str	r1, [sp, #8]
 8011632:	f899 0000 	ldrb.w	r0, [r9]
 8011636:	9904      	ldr	r1, [sp, #16]
 8011638:	9001      	str	r0, [sp, #4]
 801163a:	7808      	ldrb	r0, [r1, #0]
 801163c:	9a06      	ldr	r2, [sp, #24]
 801163e:	9000      	str	r0, [sp, #0]
 8011640:	6860      	ldr	r0, [r4, #4]
 8011642:	3201      	adds	r2, #1
 8011644:	4629      	mov	r1, r5
 8011646:	f001 f905 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801164a:	f898 2000 	ldrb.w	r2, [r8]
 801164e:	7df3      	ldrb	r3, [r6, #23]
 8011650:	9202      	str	r2, [sp, #8]
 8011652:	f899 1000 	ldrb.w	r1, [r9]
 8011656:	9804      	ldr	r0, [sp, #16]
 8011658:	9101      	str	r1, [sp, #4]
 801165a:	7802      	ldrb	r2, [r0, #0]
 801165c:	9200      	str	r2, [sp, #0]
 801165e:	6860      	ldr	r0, [r4, #4]
 8011660:	1cfa      	adds	r2, r7, #3
 8011662:	4629      	mov	r1, r5
 8011664:	f001 f8f6 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011668:	9b07      	ldr	r3, [sp, #28]
 801166a:	3704      	adds	r7, #4
 801166c:	42bb      	cmp	r3, r7
 801166e:	d1bd      	bne.n	80115ec <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x760>
 8011670:	9f08      	ldr	r7, [sp, #32]
 8011672:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011674:	4287      	cmp	r7, r0
 8011676:	f43f acc8 	beq.w	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801167a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801167c:	9905      	ldr	r1, [sp, #20]
 801167e:	3703      	adds	r7, #3
 8011680:	445a      	add	r2, fp
 8011682:	42b9      	cmp	r1, r7
 8011684:	9708      	str	r7, [sp, #32]
 8011686:	9209      	str	r2, [sp, #36]	@ 0x24
 8011688:	f63f af4e 	bhi.w	8011528 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x69c>
 801168c:	e4bd      	b.n	801100a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801168e:	4b03      	ldr	r3, [pc, #12]	@ (801169c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x810>)
 8011690:	4a03      	ldr	r2, [pc, #12]	@ (80116a0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x814>)
 8011692:	4804      	ldr	r0, [pc, #16]	@ (80116a4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x818>)
 8011694:	21a2      	movs	r1, #162	@ 0xa2
 8011696:	f009 fba7 	bl	801ade8 <__assert_func>
 801169a:	bf00      	nop
 801169c:	0801ce58 	stmdaeq	r1, {r3, r4, r6, r9, sl, fp, lr, pc}
 80116a0:	0801ce5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, sl, fp, lr, pc}
 80116a4:	0801cd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, lr, pc}

080116a8 <WS28xxDmxMulti::Sync(unsigned long)>:
 80116a8:	291f      	cmp	r1, #31
 80116aa:	b570      	push	{r4, r5, r6, lr}
 80116ac:	460c      	mov	r4, r1
 80116ae:	4605      	mov	r5, r0
 80116b0:	d810      	bhi.n	80116d4 <WS28xxDmxMulti::Sync(unsigned long)+0x2c>
 80116b2:	4a0c      	ldr	r2, [pc, #48]	@ (80116e4 <WS28xxDmxMulti::Sync(unsigned long)+0x3c>)
 80116b4:	f240 6304 	movw	r3, #1540	@ 0x604
 80116b8:	fb04 f303 	mul.w	r3, r4, r3
 80116bc:	18d1      	adds	r1, r2, r3
 80116be:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 80116c2:	4402      	add	r2, r0
 80116c4:	f8d1 3600 	ldr.w	r3, [r1, #1536]	@ 0x600
 80116c8:	4628      	mov	r0, r5
 80116ca:	4621      	mov	r1, r4
 80116cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116d0:	f7ff bbdc 	b.w	8010e8c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 80116d4:	4b04      	ldr	r3, [pc, #16]	@ (80116e8 <WS28xxDmxMulti::Sync(unsigned long)+0x40>)
 80116d6:	4a05      	ldr	r2, [pc, #20]	@ (80116ec <WS28xxDmxMulti::Sync(unsigned long)+0x44>)
 80116d8:	4805      	ldr	r0, [pc, #20]	@ (80116f0 <WS28xxDmxMulti::Sync(unsigned long)+0x48>)
 80116da:	21b5      	movs	r1, #181	@ 0xb5
 80116dc:	f009 fb84 	bl	801ade8 <__assert_func>
 80116e0:	e7e7      	b.n	80116b2 <WS28xxDmxMulti::Sync(unsigned long)+0xa>
 80116e2:	bf00      	nop
 80116e4:	20000650 	andcs	r0, r0, r0, asr r6
 80116e8:	0801ce90 	stmdaeq	r1, {r4, r7, r9, sl, fp, lr, pc}
 80116ec:	0801cea4 	stmdaeq	r1, {r2, r5, r7, r9, sl, fp, lr, pc}
 80116f0:	0801ceac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, fp, lr, pc}

080116f4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 80116f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80116fc:	b143      	cbz	r3, 8011710 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1c>
 80116fe:	4d23      	ldr	r5, [pc, #140]	@ (801178c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x98>)
 8011700:	682f      	ldr	r7, [r5, #0]
 8011702:	4606      	mov	r6, r0
 8011704:	460c      	mov	r4, r1
 8011706:	2f00      	cmp	r7, #0
 8011708:	d038      	beq.n	801177c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x88>
 801170a:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 801170c:	4284      	cmp	r4, r0
 801170e:	d001      	beq.n	8011714 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x20>
 8011710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011714:	4c1e      	ldr	r4, [pc, #120]	@ (8011790 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x9c>)
 8011716:	2500      	movs	r5, #0
 8011718:	f242 6818 	movw	r8, #9752	@ 0x2618
 801171c:	e00e      	b.n	801173c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x48>
 801171e:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8011722:	f814 f008 	pld	[r4, r8]
 8011726:	4622      	mov	r2, r4
 8011728:	4629      	mov	r1, r5
 801172a:	4630      	mov	r0, r6
 801172c:	f7ff fbae 	bl	8010e8c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 8011730:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011732:	3501      	adds	r5, #1
 8011734:	429d      	cmp	r5, r3
 8011736:	f204 6404 	addw	r4, r4, #1540	@ 0x604
 801173a:	d81a      	bhi.n	8011772 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x7e>
 801173c:	2d20      	cmp	r5, #32
 801173e:	d1ee      	bne.n	801171e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 8011740:	4b14      	ldr	r3, [pc, #80]	@ (8011794 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa0>)
 8011742:	4a15      	ldr	r2, [pc, #84]	@ (8011798 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa4>)
 8011744:	4815      	ldr	r0, [pc, #84]	@ (801179c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa8>)
 8011746:	21b5      	movs	r1, #181	@ 0xb5
 8011748:	f009 fb4e 	bl	801ade8 <__assert_func>
 801174c:	f504 5218 	add.w	r2, r4, #9728	@ 0x2600
 8011750:	3218      	adds	r2, #24
 8011752:	4629      	mov	r1, r5
 8011754:	f892 f000 	pld	[r2]
 8011758:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 801175c:	4622      	mov	r2, r4
 801175e:	4630      	mov	r0, r6
 8011760:	f7ff fb94 	bl	8010e8c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 8011764:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8011766:	2920      	cmp	r1, #32
 8011768:	f04f 0521 	mov.w	r5, #33	@ 0x21
 801176c:	f204 6404 	addw	r4, r4, #1540	@ 0x604
 8011770:	d8d5      	bhi.n	801171e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 8011772:	6870      	ldr	r0, [r6, #4]
 8011774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011778:	f000 bd40 	b.w	80121fc <WS28xxMulti::Update()>
 801177c:	4b08      	ldr	r3, [pc, #32]	@ (80117a0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xac>)
 801177e:	4a09      	ldr	r2, [pc, #36]	@ (80117a4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xb0>)
 8011780:	4809      	ldr	r0, [pc, #36]	@ (80117a8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xb4>)
 8011782:	21a4      	movs	r1, #164	@ 0xa4
 8011784:	f009 fb30 	bl	801ade8 <__assert_func>
 8011788:	682f      	ldr	r7, [r5, #0]
 801178a:	e7be      	b.n	801170a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x16>
 801178c:	20000078 	andcs	r0, r0, r8, ror r0
 8011790:	20000a50 	andcs	r0, r0, r0, asr sl
 8011794:	0801ce90 	stmdaeq	r1, {r4, r7, r9, sl, fp, lr, pc}
 8011798:	0801cea4 	stmdaeq	r1, {r2, r5, r7, r9, sl, fp, lr, pc}
 801179c:	0801ceac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, fp, lr, pc}
 80117a0:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 80117a4:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}
 80117a8:	0801cba4 	stmdaeq	r1, {r2, r5, r7, r8, r9, fp, lr, pc}

080117ac <remoteconfig::pixel::json_get_status(char*, unsigned long)>:
 80117ac:	b570      	push	{r4, r5, r6, lr}
 80117ae:	4e0a      	ldr	r6, [pc, #40]	@ (80117d8 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x2c>)
 80117b0:	6833      	ldr	r3, [r6, #0]
 80117b2:	4604      	mov	r4, r0
 80117b4:	460d      	mov	r5, r1
 80117b6:	b933      	cbnz	r3, 80117c6 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x1a>
 80117b8:	4b08      	ldr	r3, [pc, #32]	@ (80117dc <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x30>)
 80117ba:	4a09      	ldr	r2, [pc, #36]	@ (80117e0 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x34>)
 80117bc:	4809      	ldr	r0, [pc, #36]	@ (80117e4 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x38>)
 80117be:	f240 110d 	movw	r1, #269	@ 0x10d
 80117c2:	f009 fb11 	bl	801ade8 <__assert_func>
 80117c6:	6833      	ldr	r3, [r6, #0]
 80117c8:	4a07      	ldr	r2, [pc, #28]	@ (80117e8 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x3c>)
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	4629      	mov	r1, r5
 80117ce:	4620      	mov	r0, r4
 80117d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117d4:	f009 ba50 	b.w	801ac78 <snprintf>
 80117d8:	2000007c 	andcs	r0, r0, ip, ror r0
 80117dc:	0801b452 	stmdaeq	r1, {r1, r4, r6, sl, ip, sp, pc}
 80117e0:	0801b465 	stmdaeq	r1, {r0, r2, r5, r6, sl, ip, sp, pc}
 80117e4:	0801c032 	stmdaeq	r1, {r1, r4, r5, lr, pc}
 80117e8:	0801c051 	stmdaeq	r1, {r0, r4, r6, lr, pc}

080117ec <pixel::pixel_get_type(pixel::Type)>:
 80117ec:	280d      	cmp	r0, #13
 80117ee:	bfda      	itte	le
 80117f0:	4b02      	ldrle	r3, [pc, #8]	@ (80117fc <pixel::pixel_get_type(pixel::Type)+0x10>)
 80117f2:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 80117f6:	4802      	ldrgt	r0, [pc, #8]	@ (8011800 <pixel::pixel_get_type(pixel::Type)+0x14>)
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	0801ecb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, sp, lr, pc}
 8011800:	0801c067 	stmdaeq	r1, {r0, r1, r2, r5, r6, lr, pc}

08011804 <pixel::pixel_get_type(char const*)>:
 8011804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011806:	4604      	mov	r4, r0
 8011808:	b928      	cbnz	r0, 8011816 <pixel::pixel_get_type(char const*)+0x12>
 801180a:	4b12      	ldr	r3, [pc, #72]	@ (8011854 <pixel::pixel_get_type(char const*)+0x50>)
 801180c:	4a12      	ldr	r2, [pc, #72]	@ (8011858 <pixel::pixel_get_type(char const*)+0x54>)
 801180e:	4813      	ldr	r0, [pc, #76]	@ (801185c <pixel::pixel_get_type(char const*)+0x58>)
 8011810:	213c      	movs	r1, #60	@ 0x3c
 8011812:	f009 fae9 	bl	801ade8 <__assert_func>
 8011816:	4912      	ldr	r1, [pc, #72]	@ (8011860 <pixel::pixel_get_type(char const*)+0x5c>)
 8011818:	2000      	movs	r0, #0
 801181a:	1e66      	subs	r6, r4, #1
 801181c:	1e4d      	subs	r5, r1, #1
 801181e:	e000      	b.n	8011822 <pixel::pixel_get_type(char const*)+0x1e>
 8011820:	b1ba      	cbz	r2, 8011852 <pixel::pixel_get_type(char const*)+0x4e>
 8011822:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8011826:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 801182a:	2b19      	cmp	r3, #25
 801182c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8011830:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 8011834:	4617      	mov	r7, r2
 8011836:	bf98      	it	ls
 8011838:	f102 0720 	addls.w	r7, r2, #32
 801183c:	f1bc 0f19 	cmp.w	ip, #25
 8011840:	bf98      	it	ls
 8011842:	3320      	addls	r3, #32
 8011844:	42bb      	cmp	r3, r7
 8011846:	d0eb      	beq.n	8011820 <pixel::pixel_get_type(char const*)+0x1c>
 8011848:	3001      	adds	r0, #1
 801184a:	280e      	cmp	r0, #14
 801184c:	f101 0108 	add.w	r1, r1, #8
 8011850:	d1e3      	bne.n	801181a <pixel::pixel_get_type(char const*)+0x16>
 8011852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011854:	0801c06f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, lr, pc}
 8011858:	0801c082 	stmdaeq	r1, {r1, r7, lr, pc}
 801185c:	0801c091 	stmdaeq	r1, {r0, r4, r7, lr, pc}
 8011860:	0801ecb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, sp, lr, pc}

08011864 <pixel::pixel_get_map(char const*)>:
 8011864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011866:	4604      	mov	r4, r0
 8011868:	b928      	cbnz	r0, 8011876 <pixel::pixel_get_map(char const*)+0x12>
 801186a:	4b15      	ldr	r3, [pc, #84]	@ (80118c0 <pixel::pixel_get_map(char const*)+0x5c>)
 801186c:	4a15      	ldr	r2, [pc, #84]	@ (80118c4 <pixel::pixel_get_map(char const*)+0x60>)
 801186e:	4816      	ldr	r0, [pc, #88]	@ (80118c8 <pixel::pixel_get_map(char const*)+0x64>)
 8011870:	214a      	movs	r1, #74	@ 0x4a
 8011872:	f009 fab9 	bl	801ade8 <__assert_func>
 8011876:	4b15      	ldr	r3, [pc, #84]	@ (80118cc <pixel::pixel_get_map(char const*)+0x68>)
 8011878:	2000      	movs	r0, #0
 801187a:	1e5d      	subs	r5, r3, #1
 801187c:	1e66      	subs	r6, r4, #1
 801187e:	f103 0c02 	add.w	ip, r3, #2
 8011882:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8011886:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 801188a:	2919      	cmp	r1, #25
 801188c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011890:	f1a1 0e41 	sub.w	lr, r1, #65	@ 0x41
 8011894:	4617      	mov	r7, r2
 8011896:	bf98      	it	ls
 8011898:	f102 0720 	addls.w	r7, r2, #32
 801189c:	f1be 0f19 	cmp.w	lr, #25
 80118a0:	bf98      	it	ls
 80118a2:	3120      	addls	r1, #32
 80118a4:	42b9      	cmp	r1, r7
 80118a6:	d005      	beq.n	80118b4 <pixel::pixel_get_map(char const*)+0x50>
 80118a8:	3001      	adds	r0, #1
 80118aa:	2806      	cmp	r0, #6
 80118ac:	f103 0304 	add.w	r3, r3, #4
 80118b0:	d1e3      	bne.n	801187a <pixel::pixel_get_map(char const*)+0x16>
 80118b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b4:	2a00      	cmp	r2, #0
 80118b6:	d0fc      	beq.n	80118b2 <pixel::pixel_get_map(char const*)+0x4e>
 80118b8:	4565      	cmp	r5, ip
 80118ba:	d1e2      	bne.n	8011882 <pixel::pixel_get_map(char const*)+0x1e>
 80118bc:	e7f9      	b.n	80118b2 <pixel::pixel_get_map(char const*)+0x4e>
 80118be:	bf00      	nop
 80118c0:	0801c06f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, lr, pc}
 80118c4:	0801c0a3 	stmdaeq	r1, {r0, r1, r5, r7, lr, pc}
 80118c8:	0801c091 	stmdaeq	r1, {r0, r4, r7, lr, pc}
 80118cc:	0801eca0 	stmdaeq	r1, {r5, r7, sl, fp, sp, lr, pc}

080118d0 <pixel::pixel_get_map(pixel::Map)>:
 80118d0:	2805      	cmp	r0, #5
 80118d2:	bfda      	itte	le
 80118d4:	4b02      	ldrle	r3, [pc, #8]	@ (80118e0 <pixel::pixel_get_map(pixel::Map)+0x10>)
 80118d6:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 80118da:	4802      	ldrgt	r0, [pc, #8]	@ (80118e4 <pixel::pixel_get_map(pixel::Map)+0x14>)
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop
 80118e0:	0801eca0 	stmdaeq	r1, {r5, r7, sl, fp, sp, lr, pc}
 80118e4:	0801c0b1 	stmdaeq	r1, {r0, r4, r5, r7, lr, pc}

080118e8 <remoteconfig::pixel::json_get_types(char*, unsigned long)>:
 80118e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ec:	f1a1 0802 	sub.w	r8, r1, #2
 80118f0:	4a15      	ldr	r2, [pc, #84]	@ (8011948 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x60>)
 80118f2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8011958 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x70>
 80118f6:	f8df a064 	ldr.w	sl, [pc, #100]	@ 801195c <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x74>
 80118fa:	460d      	mov	r5, r1
 80118fc:	4641      	mov	r1, r8
 80118fe:	4606      	mov	r6, r0
 8011900:	f009 f9ba 	bl	801ac78 <snprintf>
 8011904:	2700      	movs	r7, #0
 8011906:	4604      	mov	r4, r0
 8011908:	eb07 0309 	add.w	r3, r7, r9
 801190c:	3708      	adds	r7, #8
 801190e:	2f78      	cmp	r7, #120	@ 0x78
 8011910:	eb06 0004 	add.w	r0, r6, r4
 8011914:	d111      	bne.n	801193a <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x52>
 8011916:	235d      	movs	r3, #93	@ 0x5d
 8011918:	1c67      	adds	r7, r4, #1
 801191a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801191e:	42bd      	cmp	r5, r7
 8011920:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011924:	5533      	strb	r3, [r6, r4]
 8011926:	d205      	bcs.n	8011934 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x4c>
 8011928:	4b08      	ldr	r3, [pc, #32]	@ (801194c <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x64>)
 801192a:	4a09      	ldr	r2, [pc, #36]	@ (8011950 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x68>)
 801192c:	4809      	ldr	r0, [pc, #36]	@ (8011954 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x6c>)
 801192e:	216e      	movs	r1, #110	@ 0x6e
 8011930:	f009 fa5a 	bl	801ade8 <__assert_func>
 8011934:	4638      	mov	r0, r7
 8011936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801193a:	eba8 0104 	sub.w	r1, r8, r4
 801193e:	4652      	mov	r2, sl
 8011940:	f009 f99a 	bl	801ac78 <snprintf>
 8011944:	4404      	add	r4, r0
 8011946:	e7df      	b.n	8011908 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x20>
 8011948:	0801c0bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, lr, pc}
 801194c:	0801c0c6 	stmdaeq	r1, {r1, r2, r6, r7, lr, pc}
 8011950:	0801c0e0 	stmdaeq	r1, {r5, r6, r7, lr, pc}
 8011954:	0801c091 	stmdaeq	r1, {r0, r4, r7, lr, pc}
 8011958:	0801ecb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, sp, lr, pc}
 801195c:	0801b986 	stmdaeq	r1, {r1, r2, r7, r8, fp, ip, sp, pc}

08011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>:
 8011960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011964:	4607      	mov	r7, r0
 8011966:	4688      	mov	r8, r1
 8011968:	f3c2 4907 	ubfx	r9, r2, #16, #8
 801196c:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8011970:	b2d4      	uxtb	r4, r2
 8011972:	f7f7 ff97 	bl	80098a4 <PixelConfiguration::Get()>
 8011976:	68c3      	ldr	r3, [r0, #12]
 8011978:	4e29      	ldr	r6, [pc, #164]	@ (8011a20 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xc0>)
 801197a:	2b0d      	cmp	r3, #13
 801197c:	d846      	bhi.n	8011a0c <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xac>
 801197e:	e8df f003 	tbb	[pc, r3]
 8011982:	45454507 	strbmi	r4, [r5, #-1287]	@ 0xfffffaf9
 8011986:	30454545 	subcc	r4, r5, r5, asr #10
 801198a:	12454545 	subne	r4, r5, #289406976	@ 0x11400000
 801198e:	e9cd1d12 	stmib	sp, {r1, r4, r8, sl, fp, ip}^
 8011992:	a400      	add	r4, pc, #0	@ (adr r4, 8011994 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x34>)
 8011994:	464b      	mov	r3, r9
 8011996:	6830      	ldr	r0, [r6, #0]
 8011998:	4642      	mov	r2, r8
 801199a:	4639      	mov	r1, r7
 801199c:	f000 fe36 	bl	801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80119a0:	b004      	add	sp, #16
 80119a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a6:	e9cd a401 	strd	sl, r4, [sp, #4]
 80119aa:	f8cd 9000 	str.w	r9, [sp]
 80119ae:	23ff      	movs	r3, #255	@ 0xff
 80119b0:	6830      	ldr	r0, [r6, #0]
 80119b2:	4642      	mov	r2, r8
 80119b4:	4639      	mov	r1, r7
 80119b6:	f000 ff4d 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80119ba:	e7f1      	b.n	80119a0 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 80119bc:	ea6f 1519 	mvn.w	r5, r9, lsr #4
 80119c0:	f089 03c0 	eor.w	r3, r9, #192	@ 0xc0
 80119c4:	f005 050c 	and.w	r5, r5, #12
 80119c8:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 80119cc:	ea6f 0394 	mvn.w	r3, r4, lsr #2
 80119d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80119d4:	432b      	orrs	r3, r5
 80119d6:	e9cd a901 	strd	sl, r9, [sp, #4]
 80119da:	9400      	str	r4, [sp, #0]
 80119dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80119e0:	e7e6      	b.n	80119b0 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x50>
 80119e2:	45d1      	cmp	r9, sl
 80119e4:	6830      	ldr	r0, [r6, #0]
 80119e6:	f04f 0300 	mov.w	r3, #0
 80119ea:	d109      	bne.n	8011a00 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xa0>
 80119ec:	45a1      	cmp	r9, r4
 80119ee:	d107      	bne.n	8011a00 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xa0>
 80119f0:	e9cd 3901 	strd	r3, r9, [sp, #4]
 80119f4:	9300      	str	r3, [sp, #0]
 80119f6:	4642      	mov	r2, r8
 80119f8:	4639      	mov	r1, r7
 80119fa:	f001 fe07 	bl	801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80119fe:	e7cf      	b.n	80119a0 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 8011a00:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8011a04:	f8cd a000 	str.w	sl, [sp]
 8011a08:	464b      	mov	r3, r9
 8011a0a:	e7f4      	b.n	80119f6 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x96>
 8011a0c:	e9cd a400 	strd	sl, r4, [sp]
 8011a10:	464b      	mov	r3, r9
 8011a12:	6830      	ldr	r0, [r6, #0]
 8011a14:	4642      	mov	r2, r8
 8011a16:	4639      	mov	r1, r7
 8011a18:	f000 fcea 	bl	80123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8011a1c:	e7c0      	b.n	80119a0 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 8011a1e:	bf00      	nop
 8011a20:	2000c914 	andcs	ip, r0, r4, lsl r9

08011a24 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>:
 8011a24:	b538      	push	{r3, r4, r5, lr}
 8011a26:	4605      	mov	r5, r0
 8011a28:	2400      	movs	r4, #0
 8011a2a:	f7f7 ff3b 	bl	80098a4 <PixelConfiguration::Get()>
 8011a2e:	6803      	ldr	r3, [r0, #0]
 8011a30:	429c      	cmp	r4, r3
 8011a32:	d300      	bcc.n	8011a36 <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x12>
 8011a34:	bd38      	pop	{r3, r4, r5, pc}
 8011a36:	4621      	mov	r1, r4
 8011a38:	2200      	movs	r2, #0
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	f7ff ff90 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011a40:	3401      	adds	r4, #1
 8011a42:	e7f2      	b.n	8011a2a <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x6>

08011a44 <PixelPatterns::PixelPatterns(unsigned long)>:
 8011a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a46:	233a      	movs	r3, #58	@ 0x3a
 8011a48:	4a19      	ldr	r2, [pc, #100]	@ (8011ab0 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	4605      	mov	r5, r0
 8011a4e:	4919      	ldr	r1, [pc, #100]	@ (8011ab4 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 8011a50:	4819      	ldr	r0, [pc, #100]	@ (8011ab8 <PixelPatterns::PixelPatterns(unsigned long)+0x74>)
 8011a52:	f009 f8e9 	bl	801ac28 <printf>
 8011a56:	4a17      	ldr	r2, [pc, #92]	@ (8011ab4 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 8011a58:	4915      	ldr	r1, [pc, #84]	@ (8011ab0 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 8011a5a:	4818      	ldr	r0, [pc, #96]	@ (8011abc <PixelPatterns::PixelPatterns(unsigned long)+0x78>)
 8011a5c:	9400      	str	r4, [sp, #0]
 8011a5e:	233b      	movs	r3, #59	@ 0x3b
 8011a60:	f009 f8e2 	bl	801ac28 <printf>
 8011a64:	4b16      	ldr	r3, [pc, #88]	@ (8011ac0 <PixelPatterns::PixelPatterns(unsigned long)+0x7c>)
 8011a66:	4a17      	ldr	r2, [pc, #92]	@ (8011ac4 <PixelPatterns::PixelPatterns(unsigned long)+0x80>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	6013      	str	r3, [r2, #0]
 8011a6c:	b92b      	cbnz	r3, 8011a7a <PixelPatterns::PixelPatterns(unsigned long)+0x36>
 8011a6e:	4b16      	ldr	r3, [pc, #88]	@ (8011ac8 <PixelPatterns::PixelPatterns(unsigned long)+0x84>)
 8011a70:	4a0f      	ldr	r2, [pc, #60]	@ (8011ab0 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 8011a72:	4810      	ldr	r0, [pc, #64]	@ (8011ab4 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 8011a74:	2142      	movs	r1, #66	@ 0x42
 8011a76:	f009 f9b7 	bl	801ade8 <__assert_func>
 8011a7a:	4b14      	ldr	r3, [pc, #80]	@ (8011acc <PixelPatterns::PixelPatterns(unsigned long)+0x88>)
 8011a7c:	2c08      	cmp	r4, #8
 8011a7e:	bf28      	it	cs
 8011a80:	2408      	movcs	r4, #8
 8011a82:	601c      	str	r4, [r3, #0]
 8011a84:	4b12      	ldr	r3, [pc, #72]	@ (8011ad0 <PixelPatterns::PixelPatterns(unsigned long)+0x8c>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	6818      	ldr	r0, [r3, #0]
 8011a8a:	4b12      	ldr	r3, [pc, #72]	@ (8011ad4 <PixelPatterns::PixelPatterns(unsigned long)+0x90>)
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	3201      	adds	r2, #1
 8011a90:	2a08      	cmp	r2, #8
 8011a92:	61d9      	str	r1, [r3, #28]
 8011a94:	6018      	str	r0, [r3, #0]
 8011a96:	6199      	str	r1, [r3, #24]
 8011a98:	f103 0320 	add.w	r3, r3, #32
 8011a9c:	d1f7      	bne.n	8011a8e <PixelPatterns::PixelPatterns(unsigned long)+0x4a>
 8011a9e:	4a04      	ldr	r2, [pc, #16]	@ (8011ab0 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 8011aa0:	4904      	ldr	r1, [pc, #16]	@ (8011ab4 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 8011aa2:	480d      	ldr	r0, [pc, #52]	@ (8011ad8 <PixelPatterns::PixelPatterns(unsigned long)+0x94>)
 8011aa4:	234e      	movs	r3, #78	@ 0x4e
 8011aa6:	f009 f8bf 	bl	801ac28 <printf>
 8011aaa:	4628      	mov	r0, r5
 8011aac:	b003      	add	sp, #12
 8011aae:	bd30      	pop	{r4, r5, pc}
 8011ab0:	0801c0ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, lr, pc}
 8011ab4:	0801c0fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, lr, pc}
 8011ab8:	0801b4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, sp, pc}
 8011abc:	0801c11c 	stmdaeq	r1, {r2, r3, r4, r8, lr, pc}
 8011ac0:	2000c91c 	andcs	ip, r0, ip, lsl r9
 8011ac4:	2000c914 	andcs	ip, r0, r4, lsl r9
 8011ac8:	0801c13f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, lr, pc}
 8011acc:	2000c910 	andcs	ip, r0, r0, lsl r9
 8011ad0:	2001a628 	andcs	sl, r1, r8, lsr #12
 8011ad4:	2000c810 	andcs	ip, r0, r0, lsl r8
 8011ad8:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}

08011adc <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8011adc:	2805      	cmp	r0, #5
 8011ade:	bfdd      	ittte	le
 8011ae0:	4b02      	ldrle	r3, [pc, #8]	@ (8011aec <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8011ae2:	220e      	movle	r2, #14
 8011ae4:	fb02 3000 	mlale	r0, r2, r0, r3
 8011ae8:	4801      	ldrgt	r0, [pc, #4]	@ (8011af0 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8011aea:	4770      	bx	lr
 8011aec:	0801ed28 	stmdaeq	r1, {r3, r5, r8, sl, fp, sp, lr, pc}
 8011af0:	0801c067 	stmdaeq	r1, {r0, r1, r2, r5, r6, lr, pc}

08011af4 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>:
 8011af4:	b5e0      	push	{r5, r6, r7, lr}
 8011af6:	4608      	mov	r0, r1
 8011af8:	460d      	mov	r5, r1
 8011afa:	4617      	mov	r7, r2
 8011afc:	461e      	mov	r6, r3
 8011afe:	f7ff ff91 	bl	8011a24 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8011b02:	4906      	ldr	r1, [pc, #24]	@ (8011b1c <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)+0x28>)
 8011b04:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8011b08:	2301      	movs	r3, #1
 8011b0a:	61cb      	str	r3, [r1, #28]
 8011b0c:	22ff      	movs	r2, #255	@ 0xff
 8011b0e:	2300      	movs	r3, #0
 8011b10:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011b14:	604f      	str	r7, [r1, #4]
 8011b16:	618e      	str	r6, [r1, #24]
 8011b18:	bde0      	pop	{r5, r6, r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	2000c810 	andcs	ip, r0, r0, lsl r8

08011b20 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 8011b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b22:	4c0c      	ldr	r4, [pc, #48]	@ (8011b54 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x34>)
 8011b24:	460d      	mov	r5, r1
 8011b26:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8011b2a:	4608      	mov	r0, r1
 8011b2c:	4617      	mov	r7, r2
 8011b2e:	461e      	mov	r6, r3
 8011b30:	f7ff ff78 	bl	8011a24 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8011b34:	2302      	movs	r3, #2
 8011b36:	61e3      	str	r3, [r4, #28]
 8011b38:	9b06      	ldr	r3, [sp, #24]
 8011b3a:	6063      	str	r3, [r4, #4]
 8011b3c:	f7f7 feb2 	bl	80098a4 <PixelConfiguration::Get()>
 8011b40:	6803      	ldr	r3, [r0, #0]
 8011b42:	6123      	str	r3, [r4, #16]
 8011b44:	2300      	movs	r3, #0
 8011b46:	6163      	str	r3, [r4, #20]
 8011b48:	9b07      	ldr	r3, [sp, #28]
 8011b4a:	61a3      	str	r3, [r4, #24]
 8011b4c:	e9c4 7602 	strd	r7, r6, [r4, #8]
 8011b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b52:	bf00      	nop
 8011b54:	2000c810 	andcs	ip, r0, r0, lsl r8

08011b58 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 8011b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5a:	4c0b      	ldr	r4, [pc, #44]	@ (8011b88 <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 8011b5c:	460d      	mov	r5, r1
 8011b5e:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8011b62:	4608      	mov	r0, r1
 8011b64:	4616      	mov	r6, r2
 8011b66:	461f      	mov	r7, r3
 8011b68:	f7ff ff5c 	bl	8011a24 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8011b6c:	2303      	movs	r3, #3
 8011b6e:	61e3      	str	r3, [r4, #28]
 8011b70:	6067      	str	r7, [r4, #4]
 8011b72:	f7f7 fe97 	bl	80098a4 <PixelConfiguration::Get()>
 8011b76:	6803      	ldr	r3, [r0, #0]
 8011b78:	6123      	str	r3, [r4, #16]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	6163      	str	r3, [r4, #20]
 8011b7e:	9b06      	ldr	r3, [sp, #24]
 8011b80:	60a6      	str	r6, [r4, #8]
 8011b82:	61a3      	str	r3, [r4, #24]
 8011b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b86:	bf00      	nop
 8011b88:	2000c810 	andcs	ip, r0, r0, lsl r8

08011b8c <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>:
 8011b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8e:	4608      	mov	r0, r1
 8011b90:	460d      	mov	r5, r1
 8011b92:	4616      	mov	r6, r2
 8011b94:	461f      	mov	r7, r3
 8011b96:	f7ff ff45 	bl	8011a24 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8011b9a:	f7f7 fe83 	bl	80098a4 <PixelConfiguration::Get()>
 8011b9e:	4911      	ldr	r1, [pc, #68]	@ (8011be4 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x58>)
 8011ba0:	6800      	ldr	r0, [r0, #0]
 8011ba2:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8011ba6:	2304      	movs	r3, #4
 8011ba8:	61cb      	str	r3, [r1, #28]
 8011baa:	608e      	str	r6, [r1, #8]
 8011bac:	1e43      	subs	r3, r0, #1
 8011bae:	4e0e      	ldr	r6, [pc, #56]	@ (8011be8 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x5c>)
 8011bb0:	604f      	str	r7, [r1, #4]
 8011bb2:	005b      	lsls	r3, r3, #1
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	6835      	ldr	r5, [r6, #0]
 8011bb8:	610b      	str	r3, [r1, #16]
 8011bba:	2300      	movs	r3, #0
 8011bbc:	614b      	str	r3, [r1, #20]
 8011bbe:	b96d      	cbnz	r5, 8011bdc <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x50>
 8011bc0:	0084      	lsls	r4, r0, #2
 8011bc2:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8011bc6:	4298      	cmp	r0, r3
 8011bc8:	bf34      	ite	cc
 8011bca:	4620      	movcc	r0, r4
 8011bcc:	f04f 30ff 	movcs.w	r0, #4294967295	@ 0xffffffff
 8011bd0:	f009 fa82 	bl	801b0d8 <operator new[](unsigned int)>
 8011bd4:	6030      	str	r0, [r6, #0]
 8011bd6:	4404      	add	r4, r0
 8011bd8:	42a0      	cmp	r0, r4
 8011bda:	d100      	bne.n	8011bde <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x52>
 8011bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bde:	f840 5b04 	str.w	r5, [r0], #4
 8011be2:	e7f9      	b.n	8011bd8 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x4c>
 8011be4:	2000c810 	andcs	ip, r0, r0, lsl r8
 8011be8:	2000c80c 	andcs	ip, r0, ip, lsl #16

08011bec <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 8011bec:	b5e0      	push	{r5, r6, r7, lr}
 8011bee:	4608      	mov	r0, r1
 8011bf0:	460d      	mov	r5, r1
 8011bf2:	461e      	mov	r6, r3
 8011bf4:	4617      	mov	r7, r2
 8011bf6:	f7ff ff15 	bl	8011a24 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8011bfa:	4908      	ldr	r1, [pc, #32]	@ (8011c1c <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 8011bfc:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8011c00:	2305      	movs	r3, #5
 8011c02:	61cb      	str	r3, [r1, #28]
 8011c04:	9b05      	ldr	r3, [sp, #20]
 8011c06:	604b      	str	r3, [r1, #4]
 8011c08:	9b04      	ldr	r3, [sp, #16]
 8011c0a:	610b      	str	r3, [r1, #16]
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	614b      	str	r3, [r1, #20]
 8011c10:	9b06      	ldr	r3, [sp, #24]
 8011c12:	618b      	str	r3, [r1, #24]
 8011c14:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8011c18:	bde0      	pop	{r5, r6, r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	2000c810 	andcs	ip, r0, r0, lsl r8

08011c20 <PixelPatterns::Wheel(unsigned char)>:
 8011c20:	43cb      	mvns	r3, r1
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	2b54      	cmp	r3, #84	@ 0x54
 8011c26:	d807      	bhi.n	8011c38 <PixelPatterns::Wheel(unsigned char)+0x18>
 8011c28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011c2c:	b2db      	uxtb	r3, r3
 8011c2e:	0418      	lsls	r0, r3, #16
 8011c30:	f480 007f 	eor.w	r0, r0, #16711680	@ 0xff0000
 8011c34:	4318      	orrs	r0, r3
 8011c36:	4770      	bx	lr
 8011c38:	2ba9      	cmp	r3, #169	@ 0xa9
 8011c3a:	d809      	bhi.n	8011c50 <PixelPatterns::Wheel(unsigned char)+0x30>
 8011c3c:	f1c1 01aa 	rsb	r1, r1, #170	@ 0xaa
 8011c40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011c44:	b2c9      	uxtb	r1, r1
 8011c46:	43c8      	mvns	r0, r1
 8011c48:	b2c0      	uxtb	r0, r0
 8011c4a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8011c4e:	4770      	bx	lr
 8011c50:	f1c1 0155 	rsb	r1, r1, #85	@ 0x55
 8011c54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011c58:	b2c9      	uxtb	r1, r1
 8011c5a:	0208      	lsls	r0, r1, #8
 8011c5c:	f480 407f 	eor.w	r0, r0, #65280	@ 0xff00
 8011c60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8011c64:	4770      	bx	lr
	...

08011c68 <PixelPatterns::Increment(unsigned long)>:
 8011c68:	4a0d      	ldr	r2, [pc, #52]	@ (8011ca0 <PixelPatterns::Increment(unsigned long)+0x38>)
 8011c6a:	b510      	push	{r4, lr}
 8011c6c:	014c      	lsls	r4, r1, #5
 8011c6e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8011c72:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8011c76:	b938      	cbnz	r0, 8011c88 <PixelPatterns::Increment(unsigned long)+0x20>
 8011c78:	690c      	ldr	r4, [r1, #16]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	42a3      	cmp	r3, r4
 8011c7e:	bf14      	ite	ne
 8011c80:	461a      	movne	r2, r3
 8011c82:	4602      	moveq	r2, r0
 8011c84:	614a      	str	r2, [r1, #20]
 8011c86:	bd10      	pop	{r4, pc}
 8011c88:	b92b      	cbnz	r3, 8011c96 <PixelPatterns::Increment(unsigned long)+0x2e>
 8011c8a:	4422      	add	r2, r4
 8011c8c:	6913      	ldr	r3, [r2, #16]
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	6153      	str	r3, [r2, #20]
 8011c94:	e7f7      	b.n	8011c86 <PixelPatterns::Increment(unsigned long)+0x1e>
 8011c96:	3b01      	subs	r3, #1
 8011c98:	614b      	str	r3, [r1, #20]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d1f3      	bne.n	8011c86 <PixelPatterns::Increment(unsigned long)+0x1e>
 8011c9e:	e7f4      	b.n	8011c8a <PixelPatterns::Increment(unsigned long)+0x22>
 8011ca0:	2000c810 	andcs	ip, r0, r0, lsl r8

08011ca4 <PixelPatterns::RainbowCycleUpdate(unsigned long)>:
 8011ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ca6:	4b12      	ldr	r3, [pc, #72]	@ (8011cf0 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x4c>)
 8011ca8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011cac:	4606      	mov	r6, r0
 8011cae:	695f      	ldr	r7, [r3, #20]
 8011cb0:	460c      	mov	r4, r1
 8011cb2:	2500      	movs	r5, #0
 8011cb4:	f7f7 fdf6 	bl	80098a4 <PixelConfiguration::Get()>
 8011cb8:	6803      	ldr	r3, [r0, #0]
 8011cba:	429d      	cmp	r5, r3
 8011cbc:	d305      	bcc.n	8011cca <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x26>
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011cc6:	f7ff bfcf 	b.w	8011c68 <PixelPatterns::Increment(unsigned long)>
 8011cca:	f7f7 fdeb 	bl	80098a4 <PixelConfiguration::Get()>
 8011cce:	0229      	lsls	r1, r5, #8
 8011cd0:	6803      	ldr	r3, [r0, #0]
 8011cd2:	fbb1 f1f3 	udiv	r1, r1, r3
 8011cd6:	4439      	add	r1, r7
 8011cd8:	b2c9      	uxtb	r1, r1
 8011cda:	4630      	mov	r0, r6
 8011cdc:	f7ff ffa0 	bl	8011c20 <PixelPatterns::Wheel(unsigned char)>
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f7ff fe3b 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011cea:	3501      	adds	r5, #1
 8011cec:	e7e2      	b.n	8011cb4 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x10>
 8011cee:	bf00      	nop
 8011cf0:	2000c810 	andcs	ip, r0, r0, lsl r8

08011cf4 <PixelPatterns::TheaterChaseUpdate(unsigned long)>:
 8011cf4:	4b13      	ldr	r3, [pc, #76]	@ (8011d44 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x50>)
 8011cf6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cfe:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8011d02:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8011d06:	f8df a040 	ldr.w	sl, [pc, #64]	@ 8011d48 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x54>
 8011d0a:	4606      	mov	r6, r0
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	2500      	movs	r5, #0
 8011d10:	f7f7 fdc8 	bl	80098a4 <PixelConfiguration::Get()>
 8011d14:	6803      	ldr	r3, [r0, #0]
 8011d16:	429d      	cmp	r5, r3
 8011d18:	d305      	bcc.n	8011d26 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x32>
 8011d1a:	4621      	mov	r1, r4
 8011d1c:	4630      	mov	r0, r6
 8011d1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d22:	f7ff bfa1 	b.w	8011c68 <PixelPatterns::Increment(unsigned long)>
 8011d26:	eb05 0309 	add.w	r3, r5, r9
 8011d2a:	fb0a f303 	mul.w	r3, sl, r3
 8011d2e:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 8011d32:	4629      	mov	r1, r5
 8011d34:	bf94      	ite	ls
 8011d36:	463a      	movls	r2, r7
 8011d38:	4642      	movhi	r2, r8
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f7ff fe10 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011d40:	3501      	adds	r5, #1
 8011d42:	e7e5      	b.n	8011d10 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x1c>
 8011d44:	2000c810 	andcs	ip, r0, r0, lsl r8
 8011d48:	aaaaaaab 	bge	6abc7fc <__stack_size+0x6ab47fc>

08011d4c <PixelPatterns::ColourWipeUpdate(unsigned long)>:
 8011d4c:	b538      	push	{r3, r4, r5, lr}
 8011d4e:	4b08      	ldr	r3, [pc, #32]	@ (8011d70 <PixelPatterns::ColourWipeUpdate(unsigned long)+0x24>)
 8011d50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d54:	460c      	mov	r4, r1
 8011d56:	4605      	mov	r5, r0
 8011d58:	6959      	ldr	r1, [r3, #20]
 8011d5a:	689a      	ldr	r2, [r3, #8]
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f7ff fdff 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011d62:	4621      	mov	r1, r4
 8011d64:	4628      	mov	r0, r5
 8011d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d6a:	f7ff bf7d 	b.w	8011c68 <PixelPatterns::Increment(unsigned long)>
 8011d6e:	bf00      	nop
 8011d70:	2000c810 	andcs	ip, r0, r0, lsl r8

08011d74 <PixelPatterns::ScannerUpdate(unsigned long)>:
 8011d74:	4b26      	ldr	r3, [pc, #152]	@ (8011e10 <PixelPatterns::ScannerUpdate(unsigned long)+0x9c>)
 8011d76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d7e:	e9d3 2b04 	ldrd	r2, fp, [r3, #16]
 8011d82:	689f      	ldr	r7, [r3, #8]
 8011d84:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8011e14 <PixelPatterns::ScannerUpdate(unsigned long)+0xa0>
 8011d88:	9001      	str	r0, [sp, #4]
 8011d8a:	460e      	mov	r6, r1
 8011d8c:	2400      	movs	r4, #0
 8011d8e:	eba2 090b 	sub.w	r9, r2, fp
 8011d92:	f7f7 fd87 	bl	80098a4 <PixelConfiguration::Get()>
 8011d96:	6803      	ldr	r3, [r0, #0]
 8011d98:	429c      	cmp	r4, r3
 8011d9a:	d306      	bcc.n	8011daa <PixelPatterns::ScannerUpdate(unsigned long)+0x36>
 8011d9c:	9801      	ldr	r0, [sp, #4]
 8011d9e:	4631      	mov	r1, r6
 8011da0:	b003      	add	sp, #12
 8011da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da6:	f7ff bf5f 	b.w	8011c68 <PixelPatterns::Increment(unsigned long)>
 8011daa:	455c      	cmp	r4, fp
 8011dac:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8011db0:	d10a      	bne.n	8011dc8 <PixelPatterns::ScannerUpdate(unsigned long)+0x54>
 8011db2:	463a      	mov	r2, r7
 8011db4:	4621      	mov	r1, r4
 8011db6:	4630      	mov	r0, r6
 8011db8:	f7ff fdd2 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8011dc0:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8011dc4:	3401      	adds	r4, #1
 8011dc6:	e7e4      	b.n	8011d92 <PixelPatterns::ScannerUpdate(unsigned long)+0x1e>
 8011dc8:	45a1      	cmp	r9, r4
 8011dca:	d109      	bne.n	8011de0 <PixelPatterns::ScannerUpdate(unsigned long)+0x6c>
 8011dcc:	463a      	mov	r2, r7
 8011dce:	4649      	mov	r1, r9
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	f7ff fdc5 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011dd6:	f8d8 2000 	ldr.w	r2, [r8]
 8011dda:	f842 700a 	str.w	r7, [r2, sl]
 8011dde:	e7f1      	b.n	8011dc4 <PixelPatterns::ScannerUpdate(unsigned long)+0x50>
 8011de0:	f8d8 2000 	ldr.w	r2, [r8]
 8011de4:	f852 200a 	ldr.w	r2, [r2, sl]
 8011de8:	f3c2 2546 	ubfx	r5, r2, #9, #7
 8011dec:	f3c2 4146 	ubfx	r1, r2, #17, #7
 8011df0:	022d      	lsls	r5, r5, #8
 8011df2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8011df6:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8011dfa:	4315      	orrs	r5, r2
 8011dfc:	462a      	mov	r2, r5
 8011dfe:	4621      	mov	r1, r4
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7ff fdad 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011e06:	f8d8 2000 	ldr.w	r2, [r8]
 8011e0a:	f842 500a 	str.w	r5, [r2, sl]
 8011e0e:	e7d9      	b.n	8011dc4 <PixelPatterns::ScannerUpdate(unsigned long)+0x50>
 8011e10:	2000c810 	andcs	ip, r0, r0, lsl r8
 8011e14:	2000c80c 	andcs	ip, r0, ip, lsl #16

08011e18 <PixelPatterns::FadeUpdate(unsigned long)>:
 8011e18:	4a20      	ldr	r2, [pc, #128]	@ (8011e9c <PixelPatterns::FadeUpdate(unsigned long)+0x84>)
 8011e1a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8011e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e20:	e9d2 7302 	ldrd	r7, r3, [r2, #8]
 8011e24:	460c      	mov	r4, r1
 8011e26:	e9d2 1604 	ldrd	r1, r6, [r2, #16]
 8011e2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011e2e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8011e32:	4372      	muls	r2, r6
 8011e34:	4605      	mov	r5, r0
 8011e36:	1b88      	subs	r0, r1, r6
 8011e38:	fb00 220c 	mla	r2, r0, ip, r2
 8011e3c:	fbb2 f2f1 	udiv	r2, r2, r1
 8011e40:	0212      	lsls	r2, r2, #8
 8011e42:	fa1f fc82 	uxth.w	ip, r2
 8011e46:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011e4a:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8011e4e:	4372      	muls	r2, r6
 8011e50:	fb00 220e 	mla	r2, r0, lr, r2
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	fbb2 f2f1 	udiv	r2, r2, r1
 8011e5a:	0412      	lsls	r2, r2, #16
 8011e5c:	b2ff      	uxtb	r7, r7
 8011e5e:	4373      	muls	r3, r6
 8011e60:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8011e64:	fb00 3307 	mla	r3, r0, r7, r3
 8011e68:	ea4c 0202 	orr.w	r2, ip, r2
 8011e6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	ea42 0603 	orr.w	r6, r2, r3
 8011e76:	2700      	movs	r7, #0
 8011e78:	f7f7 fd14 	bl	80098a4 <PixelConfiguration::Get()>
 8011e7c:	6803      	ldr	r3, [r0, #0]
 8011e7e:	429f      	cmp	r7, r3
 8011e80:	d305      	bcc.n	8011e8e <PixelPatterns::FadeUpdate(unsigned long)+0x76>
 8011e82:	4621      	mov	r1, r4
 8011e84:	4628      	mov	r0, r5
 8011e86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011e8a:	f7ff beed 	b.w	8011c68 <PixelPatterns::Increment(unsigned long)>
 8011e8e:	4639      	mov	r1, r7
 8011e90:	4632      	mov	r2, r6
 8011e92:	4620      	mov	r0, r4
 8011e94:	f7ff fd64 	bl	8011960 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8011e98:	3701      	adds	r7, #1
 8011e9a:	e7ed      	b.n	8011e78 <PixelPatterns::FadeUpdate(unsigned long)+0x60>
 8011e9c:	2000c810 	andcs	ip, r0, r0, lsl r8

08011ea0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>:
 8011ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea2:	4b12      	ldr	r3, [pc, #72]	@ (8011eec <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x4c>)
 8011ea4:	014e      	lsls	r6, r1, #5
 8011ea6:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8011eaa:	599c      	ldr	r4, [r3, r6]
 8011eac:	686f      	ldr	r7, [r5, #4]
 8011eae:	1b14      	subs	r4, r2, r4
 8011eb0:	42bc      	cmp	r4, r7
 8011eb2:	d309      	bcc.n	8011ec8 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x28>
 8011eb4:	519a      	str	r2, [r3, r6]
 8011eb6:	69eb      	ldr	r3, [r5, #28]
 8011eb8:	3b01      	subs	r3, #1
 8011eba:	2b04      	cmp	r3, #4
 8011ebc:	d804      	bhi.n	8011ec8 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x28>
 8011ebe:	e8df f003 	tbb	[pc, r3]
 8011ec2:	0f0c0905 	svceq	0x000c0905
 8011ec6:	20000012 	andcs	r0, r0, r2, lsl r0
 8011eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ecc:	f7ff feea 	bl	8011ca4 <PixelPatterns::RainbowCycleUpdate(unsigned long)>
 8011ed0:	2001      	movs	r0, #1
 8011ed2:	e7fa      	b.n	8011eca <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2a>
 8011ed4:	f7ff ff0e 	bl	8011cf4 <PixelPatterns::TheaterChaseUpdate(unsigned long)>
 8011ed8:	e7fa      	b.n	8011ed0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8011eda:	f7ff ff37 	bl	8011d4c <PixelPatterns::ColourWipeUpdate(unsigned long)>
 8011ede:	e7f7      	b.n	8011ed0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8011ee0:	f7ff ff48 	bl	8011d74 <PixelPatterns::ScannerUpdate(unsigned long)>
 8011ee4:	e7f4      	b.n	8011ed0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8011ee6:	f7ff ff97 	bl	8011e18 <PixelPatterns::FadeUpdate(unsigned long)>
 8011eea:	e7f1      	b.n	8011ed0 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8011eec:	2000c810 	andcs	ip, r0, r0, lsl r8

08011ef0 <TIMER3_IRQHandler>:
 8011ef0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011ef4:	f8d3 2810 	ldr.w	r2, [r3, #2064]	@ 0x810
 8011ef8:	0791      	lsls	r1, r2, #30
 8011efa:	d52b      	bpl.n	8011f54 <TIMER3_IRQHandler+0x64>
 8011efc:	b410      	push	{r4}
 8011efe:	f8d3 4400 	ldr.w	r4, [r3, #1024]	@ 0x400
 8011f02:	4817      	ldr	r0, [pc, #92]	@ (8011f60 <TIMER3_IRQHandler+0x70>)
 8011f04:	f024 0101 	bic.w	r1, r4, #1
 8011f08:	f8c3 1400 	str.w	r1, [r3, #1024]	@ 0x400
 8011f0c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 8011f10:	4c14      	ldr	r4, [pc, #80]	@ (8011f64 <TIMER3_IRQHandler+0x74>)
 8011f12:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 8011f16:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 8011f1a:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 8011f1e:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 8011f22:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 8011f26:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 8011f2a:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8011f2e:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 8011f32:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8011f36:	2300      	movs	r3, #0
 8011f38:	7023      	strb	r3, [r4, #0]
 8011f3a:	f44f 517f 	mov.w	r1, #16320	@ 0x3fc0
 8011f3e:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 8011f42:	43d2      	mvns	r2, r2
 8011f44:	f8c0 1828 	str.w	r1, [r0, #2088]	@ 0x828
 8011f48:	6184      	str	r4, [r0, #24]
 8011f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f4e:	f8cc 2810 	str.w	r2, [ip, #2064]	@ 0x810
 8011f52:	4770      	bx	lr
 8011f54:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8011f58:	43d1      	mvns	r1, r2
 8011f5a:	f8c0 1810 	str.w	r1, [r0, #2064]	@ 0x810
 8011f5e:	4770      	bx	lr
 8011f60:	40020000 	andmi	r0, r2, r0
 8011f64:	2000c920 	andcs	ip, r0, r0, lsr #18

08011f68 <WS28xxMulti::~WS28xxMulti()>:
 8011f68:	b570      	push	{r4, r5, r6, lr}
 8011f6a:	4e0a      	ldr	r6, [pc, #40]	@ (8011f94 <WS28xxMulti::~WS28xxMulti()+0x2c>)
 8011f6c:	4d0a      	ldr	r5, [pc, #40]	@ (8011f98 <WS28xxMulti::~WS28xxMulti()+0x30>)
 8011f6e:	4632      	mov	r2, r6
 8011f70:	4604      	mov	r4, r0
 8011f72:	4629      	mov	r1, r5
 8011f74:	23c6      	movs	r3, #198	@ 0xc6
 8011f76:	4809      	ldr	r0, [pc, #36]	@ (8011f9c <WS28xxMulti::~WS28xxMulti()+0x34>)
 8011f78:	f008 fe56 	bl	801ac28 <printf>
 8011f7c:	4b08      	ldr	r3, [pc, #32]	@ (8011fa0 <WS28xxMulti::~WS28xxMulti()+0x38>)
 8011f7e:	2000      	movs	r0, #0
 8011f80:	6018      	str	r0, [r3, #0]
 8011f82:	4632      	mov	r2, r6
 8011f84:	4629      	mov	r1, r5
 8011f86:	23ca      	movs	r3, #202	@ 0xca
 8011f88:	4806      	ldr	r0, [pc, #24]	@ (8011fa4 <WS28xxMulti::~WS28xxMulti()+0x3c>)
 8011f8a:	f008 fe4d 	bl	801ac28 <printf>
 8011f8e:	4620      	mov	r0, r4
 8011f90:	bd70      	pop	{r4, r5, r6, pc}
 8011f92:	bf00      	nop
 8011f94:	0801ced4 	stmdaeq	r1, {r2, r4, r6, r7, r9, sl, fp, lr, pc}
 8011f98:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 8011f9c:	0801cd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, lr, pc}
 8011fa0:	2000c91c 	andcs	ip, r0, ip, lsl r9
 8011fa4:	0801cdcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, lr, pc}

08011fa8 <WS28xxMulti::Setup(unsigned char, unsigned char)>:
 8011fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fac:	23ce      	movs	r3, #206	@ 0xce
 8011fae:	b093      	sub	sp, #76	@ 0x4c
 8011fb0:	460d      	mov	r5, r1
 8011fb2:	4614      	mov	r4, r2
 8011fb4:	4983      	ldr	r1, [pc, #524]	@ (80121c4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 8011fb6:	4a84      	ldr	r2, [pc, #528]	@ (80121c8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 8011fb8:	4607      	mov	r7, r0
 8011fba:	4884      	ldr	r0, [pc, #528]	@ (80121cc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x224>)
 8011fbc:	f008 fe34 	bl	801ac28 <printf>
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	f009 f8d7 	bl	801b174 <__popcountsi2>
 8011fc6:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8011fca:	fb05 f600 	mul.w	r6, r5, r0
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f009 f8d0 	bl	801b174 <__popcountsi2>
 8011fd4:	fb00 f505 	mul.w	r5, r0, r5
 8011fd8:	08f6      	lsrs	r6, r6, #3
 8011fda:	f240 182b 	movw	r8, #299	@ 0x12b
 8011fde:	08ed      	lsrs	r5, r5, #3
 8011fe0:	23db      	movs	r3, #219	@ 0xdb
 8011fe2:	4a78      	ldr	r2, [pc, #480]	@ (80121c4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 8011fe4:	4978      	ldr	r1, [pc, #480]	@ (80121c8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 8011fe6:	487a      	ldr	r0, [pc, #488]	@ (80121d0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x228>)
 8011fe8:	f8cd 8000 	str.w	r8, [sp]
 8011fec:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8011ff0:	f008 fe1a 	bl	801ac28 <printf>
 8011ff4:	f241 0001 	movw	r0, #4097	@ 0x1001
 8011ff8:	f007 f892 	bl	8019120 <rcu_periph_clock_enable>
 8011ffc:	4875      	ldr	r0, [pc, #468]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8011ffe:	f007 f94b 	bl	8019298 <timer_deinit>
 8012002:	f04f 0900 	mov.w	r9, #0
 8012006:	4873      	ldr	r0, [pc, #460]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8012008:	f8cd 801c 	str.w	r8, [sp, #28]
 801200c:	a905      	add	r1, sp, #20
 801200e:	e9cd 9905 	strd	r9, r9, [sp, #20]
 8012012:	f007 f9ef 	bl	80193f4 <timer_init>
 8012016:	486f      	ldr	r0, [pc, #444]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8012018:	2101      	movs	r1, #1
 801201a:	f007 fb85 	bl	8019728 <timer_master_slave_mode_config>
 801201e:	486d      	ldr	r0, [pc, #436]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8012020:	2130      	movs	r1, #48	@ 0x30
 8012022:	f007 fb71 	bl	8019708 <timer_master_output_trigger_source_select>
 8012026:	486b      	ldr	r0, [pc, #428]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8012028:	2210      	movs	r2, #16
 801202a:	4649      	mov	r1, r9
 801202c:	f007 fb0a 	bl	8019644 <timer_channel_output_mode_config>
 8012030:	4868      	ldr	r0, [pc, #416]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8012032:	2210      	movs	r2, #16
 8012034:	2102      	movs	r1, #2
 8012036:	f007 fb05 	bl	8019644 <timer_channel_output_mode_config>
 801203a:	4866      	ldr	r0, [pc, #408]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801203c:	2210      	movs	r2, #16
 801203e:	2103      	movs	r1, #3
 8012040:	f007 fb00 	bl	8019644 <timer_channel_output_mode_config>
 8012044:	4863      	ldr	r0, [pc, #396]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8012046:	2201      	movs	r2, #1
 8012048:	4649      	mov	r1, r9
 801204a:	f007 fb21 	bl	8019690 <timer_channel_output_pulse_value_config>
 801204e:	4861      	ldr	r0, [pc, #388]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8012050:	4632      	mov	r2, r6
 8012052:	2102      	movs	r1, #2
 8012054:	f007 fb1c 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012058:	462a      	mov	r2, r5
 801205a:	2103      	movs	r1, #3
 801205c:	485d      	ldr	r0, [pc, #372]	@ (80121d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801205e:	f007 fb17 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012062:	f241 0002 	movw	r0, #4098	@ 0x1002
 8012066:	f007 f85b 	bl	8019120 <rcu_periph_clock_enable>
 801206a:	485b      	ldr	r0, [pc, #364]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 801206c:	f007 f914 	bl	8019298 <timer_deinit>
 8012070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012074:	4858      	ldr	r0, [pc, #352]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8012076:	9307      	str	r3, [sp, #28]
 8012078:	a905      	add	r1, sp, #20
 801207a:	e9cd 9905 	strd	r9, r9, [sp, #20]
 801207e:	f007 f9b9 	bl	80193f4 <timer_init>
 8012082:	4855      	ldr	r0, [pc, #340]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8012084:	2101      	movs	r1, #1
 8012086:	f007 fb4f 	bl	8019728 <timer_master_slave_mode_config>
 801208a:	4853      	ldr	r0, [pc, #332]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 801208c:	2107      	movs	r1, #7
 801208e:	f007 fb43 	bl	8019718 <timer_slave_mode_select>
 8012092:	4851      	ldr	r0, [pc, #324]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8012094:	2120      	movs	r1, #32
 8012096:	f007 fb2f 	bl	80196f8 <timer_input_trigger_source_select>
 801209a:	484f      	ldr	r0, [pc, #316]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 801209c:	2210      	movs	r2, #16
 801209e:	4649      	mov	r1, r9
 80120a0:	f007 fad0 	bl	8019644 <timer_channel_output_mode_config>
 80120a4:	683a      	ldr	r2, [r7, #0]
 80120a6:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 80120aa:	3201      	adds	r2, #1
 80120ac:	4282      	cmp	r2, r0
 80120ae:	d87e      	bhi.n	80121ae <WS28xxMulti::Setup(unsigned char, unsigned char)+0x206>
 80120b0:	b292      	uxth	r2, r2
 80120b2:	4849      	ldr	r0, [pc, #292]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80120b4:	2100      	movs	r1, #0
 80120b6:	f007 faeb 	bl	8019690 <timer_channel_output_pulse_value_config>
 80120ba:	4847      	ldr	r0, [pc, #284]	@ (80121d8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80120bc:	2102      	movs	r1, #2
 80120be:	f007 fb3f 	bl	8019740 <timer_interrupt_enable>
 80120c2:	4946      	ldr	r1, [pc, #280]	@ (80121dc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x234>)
 80120c4:	2400      	movs	r4, #0
 80120c6:	f881 431e 	strb.w	r4, [r1, #798]	@ 0x31e
 80120ca:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 80120ce:	600f      	str	r7, [r1, #0]
 80120d0:	f640 4015 	movw	r0, #3093	@ 0xc15
 80120d4:	f007 f824 	bl	8019120 <rcu_periph_clock_enable>
 80120d8:	2104      	movs	r1, #4
 80120da:	4841      	ldr	r0, [pc, #260]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 80120dc:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 80121f4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x24c>
 80120e0:	4e40      	ldr	r6, [pc, #256]	@ (80121e4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x23c>)
 80120e2:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 80121f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x250>
 80120e6:	f006 fbff 	bl	80188e8 <dma_deinit>
 80120ea:	a809      	add	r0, sp, #36	@ 0x24
 80120ec:	f006 fc28 	bl	8018940 <dma_single_data_para_struct_init>
 80120f0:	2501      	movs	r5, #1
 80120f2:	2740      	movs	r7, #64	@ 0x40
 80120f4:	aa09      	add	r2, sp, #36	@ 0x24
 80120f6:	9609      	str	r6, [sp, #36]	@ 0x24
 80120f8:	4839      	ldr	r0, [pc, #228]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 80120fa:	970f      	str	r7, [sp, #60]	@ 0x3c
 80120fc:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8012100:	2104      	movs	r1, #4
 8012102:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
 8012106:	950a      	str	r5, [sp, #40]	@ 0x28
 8012108:	9411      	str	r4, [sp, #68]	@ 0x44
 801210a:	960d      	str	r6, [sp, #52]	@ 0x34
 801210c:	f006 fc24 	bl	8018958 <dma_single_data_mode_init>
 8012110:	4833      	ldr	r0, [pc, #204]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8012112:	2104      	movs	r1, #4
 8012114:	f006 fca6 	bl	8018a64 <dma_circulation_disable>
 8012118:	2205      	movs	r2, #5
 801211a:	4831      	ldr	r0, [pc, #196]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 801211c:	2104      	movs	r1, #4
 801211e:	f006 fca9 	bl	8018a74 <dma_channel_subperipheral_select>
 8012122:	2107      	movs	r1, #7
 8012124:	482e      	ldr	r0, [pc, #184]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8012126:	f006 fbdf 	bl	80188e8 <dma_deinit>
 801212a:	a809      	add	r0, sp, #36	@ 0x24
 801212c:	f006 fc08 	bl	8018940 <dma_single_data_para_struct_init>
 8012130:	4b2d      	ldr	r3, [pc, #180]	@ (80121e8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x240>)
 8012132:	482b      	ldr	r0, [pc, #172]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8012134:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012136:	aa09      	add	r2, sp, #36	@ 0x24
 8012138:	2107      	movs	r1, #7
 801213a:	970f      	str	r7, [sp, #60]	@ 0x3c
 801213c:	940c      	str	r4, [sp, #48]	@ 0x30
 801213e:	950a      	str	r5, [sp, #40]	@ 0x28
 8012140:	960d      	str	r6, [sp, #52]	@ 0x34
 8012142:	9411      	str	r4, [sp, #68]	@ 0x44
 8012144:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012148:	f006 fc06 	bl	8018958 <dma_single_data_mode_init>
 801214c:	4824      	ldr	r0, [pc, #144]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 801214e:	2107      	movs	r1, #7
 8012150:	f006 fc88 	bl	8018a64 <dma_circulation_disable>
 8012154:	2205      	movs	r2, #5
 8012156:	4822      	ldr	r0, [pc, #136]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8012158:	2107      	movs	r1, #7
 801215a:	f006 fc8b 	bl	8018a74 <dma_channel_subperipheral_select>
 801215e:	2102      	movs	r1, #2
 8012160:	481f      	ldr	r0, [pc, #124]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8012162:	f006 fbc1 	bl	80188e8 <dma_deinit>
 8012166:	a809      	add	r0, sp, #36	@ 0x24
 8012168:	f006 fbea 	bl	8018940 <dma_single_data_para_struct_init>
 801216c:	aa09      	add	r2, sp, #36	@ 0x24
 801216e:	481c      	ldr	r0, [pc, #112]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8012170:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012172:	2102      	movs	r1, #2
 8012174:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8012178:	950c      	str	r5, [sp, #48]	@ 0x30
 801217a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801217e:	950a      	str	r5, [sp, #40]	@ 0x28
 8012180:	960d      	str	r6, [sp, #52]	@ 0x34
 8012182:	9411      	str	r4, [sp, #68]	@ 0x44
 8012184:	f006 fbe8 	bl	8018958 <dma_single_data_mode_init>
 8012188:	4815      	ldr	r0, [pc, #84]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 801218a:	2102      	movs	r1, #2
 801218c:	f006 fc6a 	bl	8018a64 <dma_circulation_disable>
 8012190:	4813      	ldr	r0, [pc, #76]	@ (80121e0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8012192:	2205      	movs	r2, #5
 8012194:	2102      	movs	r1, #2
 8012196:	f006 fc6d 	bl	8018a74 <dma_channel_subperipheral_select>
 801219a:	4a0b      	ldr	r2, [pc, #44]	@ (80121c8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 801219c:	4909      	ldr	r1, [pc, #36]	@ (80121c4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 801219e:	4813      	ldr	r0, [pc, #76]	@ (80121ec <WS28xxMulti::Setup(unsigned char, unsigned char)+0x244>)
 80121a0:	f240 137b 	movw	r3, #379	@ 0x17b
 80121a4:	f008 fd40 	bl	801ac28 <printf>
 80121a8:	b013      	add	sp, #76	@ 0x4c
 80121aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121ae:	4a06      	ldr	r2, [pc, #24]	@ (80121c8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 80121b0:	4b0f      	ldr	r3, [pc, #60]	@ (80121f0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x248>)
 80121b2:	4804      	ldr	r0, [pc, #16]	@ (80121c4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 80121b4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80121b8:	f008 fe16 	bl	801ade8 <__assert_func>
 80121bc:	683a      	ldr	r2, [r7, #0]
 80121be:	3201      	adds	r2, #1
 80121c0:	e776      	b.n	80120b0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x108>
 80121c2:	bf00      	nop
 80121c4:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 80121c8:	0801cf04 	stmdaeq	r1, {r2, r8, r9, sl, fp, lr, pc}
 80121cc:	0801cd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, lr, pc}
 80121d0:	0801cf0c 	stmdaeq	r1, {r2, r3, r8, r9, sl, fp, lr, pc}
 80121d4:	40000400 	andmi	r0, r0, r0, lsl #8
 80121d8:	40000800 	andmi	r0, r0, r0, lsl #16
 80121dc:	e000e100 	and	lr, r0, r0, lsl #2
 80121e0:	40026000 	andmi	r6, r2, r0
 80121e4:	40020818 	andmi	r0, r2, r8, lsl r8
 80121e8:	20020000 	andcs	r0, r2, r0
 80121ec:	0801cdcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, lr, pc}
 80121f0:	0801cf48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, lr, pc}
 80121f4:	0801eda4 	stmdaeq	r1, {r2, r5, r7, r8, sl, fp, sp, lr, pc}
 80121f8:	40020828 	andmi	r0, r2, r8, lsr #16

080121fc <WS28xxMulti::Update()>:
 80121fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121fe:	4c6b      	ldr	r4, [pc, #428]	@ (80123ac <WS28xxMulti::Update()+0x1b0>)
 8012200:	7823      	ldrb	r3, [r4, #0]
 8012202:	4605      	mov	r5, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	f040 80c0 	bne.w	801238a <WS28xxMulti::Update()+0x18e>
 801220a:	4a69      	ldr	r2, [pc, #420]	@ (80123b0 <WS28xxMulti::Update()+0x1b4>)
 801220c:	6828      	ldr	r0, [r5, #0]
 801220e:	f8d2 3410 	ldr.w	r3, [r2, #1040]	@ 0x410
 8012212:	4f68      	ldr	r7, [pc, #416]	@ (80123b4 <WS28xxMulti::Update()+0x1b8>)
 8012214:	0841      	lsrs	r1, r0, #1
 8012216:	f023 0001 	bic.w	r0, r3, #1
 801221a:	f8c2 0410 	str.w	r0, [r2, #1040]	@ 0x410
 801221e:	f040 0301 	orr.w	r3, r0, #1
 8012222:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8012226:	f5a7 4600 	sub.w	r6, r7, #32768	@ 0x8000
 801222a:	f040 003d 	orr.w	r0, r0, #61	@ 0x3d
 801222e:	f8c2 0408 	str.w	r0, [r2, #1032]	@ 0x408
 8012232:	f8c2 641c 	str.w	r6, [r2, #1052]	@ 0x41c
 8012236:	f8c2 7418 	str.w	r7, [r2, #1048]	@ 0x418
 801223a:	f8c2 1414 	str.w	r1, [r2, #1044]	@ 0x414
 801223e:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
 8012242:	f8d2 7414 	ldr.w	r7, [r2, #1044]	@ 0x414
 8012246:	2f00      	cmp	r7, #0
 8012248:	d1fb      	bne.n	8012242 <WS28xxMulti::Update()+0x46>
 801224a:	495b      	ldr	r1, [pc, #364]	@ (80123b8 <WS28xxMulti::Update()+0x1bc>)
 801224c:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8012250:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8012254:	2301      	movs	r3, #1
 8012256:	628a      	str	r2, [r1, #40]	@ 0x28
 8012258:	7023      	strb	r3, [r4, #0]
 801225a:	f8dc 4800 	ldr.w	r4, [ip, #2048]	@ 0x800
 801225e:	f024 0001 	bic.w	r0, r4, #1
 8012262:	f8cc 0800 	str.w	r0, [ip, #2048]	@ 0x800
 8012266:	f8cc 7824 	str.w	r7, [ip, #2084]	@ 0x824
 801226a:	f8dc 1400 	ldr.w	r1, [ip, #1024]	@ 0x400
 801226e:	4c53      	ldr	r4, [pc, #332]	@ (80123bc <WS28xxMulti::Update()+0x1c0>)
 8012270:	f021 0201 	bic.w	r2, r1, #1
 8012274:	f8cc 2400 	str.w	r2, [ip, #1024]	@ 0x400
 8012278:	f8cc 7424 	str.w	r7, [ip, #1060]	@ 0x424
 801227c:	6827      	ldr	r7, [r4, #0]
 801227e:	2f00      	cmp	r7, #0
 8012280:	f000 808b 	beq.w	801239a <WS28xxMulti::Update()+0x19e>
 8012284:	7d3b      	ldrb	r3, [r7, #20]
 8012286:	4c4a      	ldr	r4, [pc, #296]	@ (80123b0 <WS28xxMulti::Update()+0x1b4>)
 8012288:	4f4d      	ldr	r7, [pc, #308]	@ (80123c0 <WS28xxMulti::Update()+0x1c4>)
 801228a:	2b00      	cmp	r3, #0
 801228c:	d053      	beq.n	8012336 <WS28xxMulti::Update()+0x13a>
 801228e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8012290:	f020 0101 	bic.w	r1, r0, #1
 8012294:	6721      	str	r1, [r4, #112]	@ 0x70
 8012296:	2220      	movs	r2, #32
 8012298:	2104      	movs	r1, #4
 801229a:	4620      	mov	r0, r4
 801229c:	f006 fc0f 	bl	8018abe <dma_interrupt_flag_clear>
 80122a0:	67e7      	str	r7, [r4, #124]	@ 0x7c
 80122a2:	882b      	ldrh	r3, [r5, #0]
 80122a4:	6763      	str	r3, [r4, #116]	@ 0x74
 80122a6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80122a8:	f042 0001 	orr.w	r0, r2, #1
 80122ac:	6720      	str	r0, [r4, #112]	@ 0x70
 80122ae:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 80122b2:	f021 0301 	bic.w	r3, r1, #1
 80122b6:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 80122ba:	2220      	movs	r2, #32
 80122bc:	2107      	movs	r1, #7
 80122be:	4620      	mov	r0, r4
 80122c0:	f006 fbfd 	bl	8018abe <dma_interrupt_flag_clear>
 80122c4:	f8c4 60c4 	str.w	r6, [r4, #196]	@ 0xc4
 80122c8:	882e      	ldrh	r6, [r5, #0]
 80122ca:	f8c4 60bc 	str.w	r6, [r4, #188]	@ 0xbc
 80122ce:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 80122d2:	f040 0101 	orr.w	r1, r0, #1
 80122d6:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 80122da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122dc:	f023 0601 	bic.w	r6, r3, #1
 80122e0:	2220      	movs	r2, #32
 80122e2:	2102      	movs	r1, #2
 80122e4:	4620      	mov	r0, r4
 80122e6:	6426      	str	r6, [r4, #64]	@ 0x40
 80122e8:	f006 fbe9 	bl	8018abe <dma_interrupt_flag_clear>
 80122ec:	64e7      	str	r7, [r4, #76]	@ 0x4c
 80122ee:	882f      	ldrh	r7, [r5, #0]
 80122f0:	6467      	str	r7, [r4, #68]	@ 0x44
 80122f2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80122f4:	4833      	ldr	r0, [pc, #204]	@ (80123c4 <WS28xxMulti::Update()+0x1c8>)
 80122f6:	f045 0201 	orr.w	r2, r5, #1
 80122fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80122fe:	6422      	str	r2, [r4, #64]	@ 0x40
 8012300:	f007 f8b3 	bl	801946a <timer_dma_enable>
 8012304:	482f      	ldr	r0, [pc, #188]	@ (80123c4 <WS28xxMulti::Update()+0x1c8>)
 8012306:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801230a:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 801230e:	f007 f8ac 	bl	801946a <timer_dma_enable>
 8012312:	482c      	ldr	r0, [pc, #176]	@ (80123c4 <WS28xxMulti::Update()+0x1c8>)
 8012314:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8012318:	f007 f8a7 	bl	801946a <timer_dma_enable>
 801231c:	f8d4 0800 	ldr.w	r0, [r4, #2048]	@ 0x800
 8012320:	f040 0101 	orr.w	r1, r0, #1
 8012324:	f8c4 1800 	str.w	r1, [r4, #2048]	@ 0x800
 8012328:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 801232c:	f043 0601 	orr.w	r6, r3, #1
 8012330:	f8c4 6400 	str.w	r6, [r4, #1024]	@ 0x400
 8012334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012336:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 801233a:	f020 0101 	bic.w	r1, r0, #1
 801233e:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 8012342:	2220      	movs	r2, #32
 8012344:	2107      	movs	r1, #7
 8012346:	4620      	mov	r0, r4
 8012348:	f006 fbb9 	bl	8018abe <dma_interrupt_flag_clear>
 801234c:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
 8012350:	882b      	ldrh	r3, [r5, #0]
 8012352:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8012356:	f8d4 70b8 	ldr.w	r7, [r4, #184]	@ 0xb8
 801235a:	f047 0001 	orr.w	r0, r7, #1
 801235e:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 8012362:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8012364:	f021 0301 	bic.w	r3, r1, #1
 8012368:	2220      	movs	r2, #32
 801236a:	2102      	movs	r1, #2
 801236c:	4620      	mov	r0, r4
 801236e:	6423      	str	r3, [r4, #64]	@ 0x40
 8012370:	f006 fba5 	bl	8018abe <dma_interrupt_flag_clear>
 8012374:	64e6      	str	r6, [r4, #76]	@ 0x4c
 8012376:	882d      	ldrh	r5, [r5, #0]
 8012378:	6465      	str	r5, [r4, #68]	@ 0x44
 801237a:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801237c:	4811      	ldr	r0, [pc, #68]	@ (80123c4 <WS28xxMulti::Update()+0x1c8>)
 801237e:	f046 0201 	orr.w	r2, r6, #1
 8012382:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012386:	6422      	str	r2, [r4, #64]	@ 0x40
 8012388:	e7bf      	b.n	801230a <WS28xxMulti::Update()+0x10e>
 801238a:	4b0f      	ldr	r3, [pc, #60]	@ (80123c8 <WS28xxMulti::Update()+0x1cc>)
 801238c:	4a0f      	ldr	r2, [pc, #60]	@ (80123cc <WS28xxMulti::Update()+0x1d0>)
 801238e:	4810      	ldr	r0, [pc, #64]	@ (80123d0 <WS28xxMulti::Update()+0x1d4>)
 8012390:	f240 2167 	movw	r1, #615	@ 0x267
 8012394:	f008 fd28 	bl	801ade8 <__assert_func>
 8012398:	e737      	b.n	801220a <WS28xxMulti::Update()+0xe>
 801239a:	4b0e      	ldr	r3, [pc, #56]	@ (80123d4 <WS28xxMulti::Update()+0x1d8>)
 801239c:	4a0e      	ldr	r2, [pc, #56]	@ (80123d8 <WS28xxMulti::Update()+0x1dc>)
 801239e:	480f      	ldr	r0, [pc, #60]	@ (80123dc <WS28xxMulti::Update()+0x1e0>)
 80123a0:	f240 110d 	movw	r1, #269	@ 0x10d
 80123a4:	f008 fd20 	bl	801ade8 <__assert_func>
 80123a8:	6827      	ldr	r7, [r4, #0]
 80123aa:	e76b      	b.n	8012284 <WS28xxMulti::Update()+0x88>
 80123ac:	2000c920 	andcs	ip, r0, r0, lsr #18
 80123b0:	40026000 	andmi	r6, r2, r0
 80123b4:	20028000 	andcs	r8, r2, r0
 80123b8:	40020000 	andmi	r0, r2, r0
 80123bc:	2000007c 	andcs	r0, r0, ip, ror r0
 80123c0:	0801eda4 	stmdaeq	r1, {r2, r5, r7, r8, sl, fp, sp, lr, pc}
 80123c4:	40000400 	andmi	r0, r0, r0, lsl #8
 80123c8:	0801cfc4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sl, fp, lr, pc}
 80123cc:	0801cfd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, fp, lr, pc}
 80123d0:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 80123d4:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 80123d8:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}
 80123dc:	0801cf68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, lr, pc}

080123e0 <WS28xxMulti::IsUpdating()>:
 80123e0:	f3bf 8f5f 	dmb	sy
 80123e4:	4b01      	ldr	r3, [pc, #4]	@ (80123ec <WS28xxMulti::IsUpdating()+0xc>)
 80123e6:	7818      	ldrb	r0, [r3, #0]
 80123e8:	4770      	bx	lr
 80123ea:	bf00      	nop
 80123ec:	2000c920 	andcs	ip, r0, r0, lsr #18

080123f0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>:
 80123f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f4:	2907      	cmp	r1, #7
 80123f6:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80123fa:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80123fe:	4688      	mov	r8, r1
 8012400:	4617      	mov	r7, r2
 8012402:	461d      	mov	r5, r3
 8012404:	f200 80f1 	bhi.w	80125ea <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x1fa>
 8012408:	4a7c      	ldr	r2, [pc, #496]	@ (80125fc <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x20c>)
 801240a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801240e:	f108 0106 	add.w	r1, r8, #6
 8012412:	eb02 1803 	add.w	r8, r2, r3, lsl #4
 8012416:	fa5f fc81 	uxtb.w	ip, r1
 801241a:	f108 7788 	add.w	r7, r8, #17825792	@ 0x1100000
 801241e:	eb0c 03c7 	add.w	r3, ip, r7, lsl #3
 8012422:	00f9      	lsls	r1, r7, #3
 8012424:	009a      	lsls	r2, r3, #2
 8012426:	062f      	lsls	r7, r5, #24
 8012428:	bf4c      	ite	mi
 801242a:	2000      	movmi	r0, #0
 801242c:	2001      	movpl	r0, #1
 801242e:	6010      	str	r0, [r2, #0]
 8012430:	f101 0080 	add.w	r0, r1, #128	@ 0x80
 8012434:	4460      	add	r0, ip
 8012436:	0632      	lsls	r2, r6, #24
 8012438:	ea4f 0780 	mov.w	r7, r0, lsl #2
 801243c:	f501 7380 	add.w	r3, r1, #256	@ 0x100
 8012440:	bf4c      	ite	mi
 8012442:	2200      	movmi	r2, #0
 8012444:	2201      	movpl	r2, #1
 8012446:	4463      	add	r3, ip
 8012448:	0098      	lsls	r0, r3, #2
 801244a:	603a      	str	r2, [r7, #0]
 801244c:	0627      	lsls	r7, r4, #24
 801244e:	f101 0710 	add.w	r7, r1, #16
 8012452:	bf4c      	ite	mi
 8012454:	2200      	movmi	r2, #0
 8012456:	2201      	movpl	r2, #1
 8012458:	4467      	add	r7, ip
 801245a:	6002      	str	r2, [r0, #0]
 801245c:	f101 0390 	add.w	r3, r1, #144	@ 0x90
 8012460:	0668      	lsls	r0, r5, #25
 8012462:	ea4f 0287 	mov.w	r2, r7, lsl #2
 8012466:	bf4c      	ite	mi
 8012468:	2000      	movmi	r0, #0
 801246a:	2001      	movpl	r0, #1
 801246c:	4463      	add	r3, ip
 801246e:	6010      	str	r0, [r2, #0]
 8012470:	0677      	lsls	r7, r6, #25
 8012472:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012476:	f501 7788 	add.w	r7, r1, #272	@ 0x110
 801247a:	bf4c      	ite	mi
 801247c:	2000      	movmi	r0, #0
 801247e:	2001      	movpl	r0, #1
 8012480:	4467      	add	r7, ip
 8012482:	6010      	str	r0, [r2, #0]
 8012484:	00bb      	lsls	r3, r7, #2
 8012486:	0660      	lsls	r0, r4, #25
 8012488:	f101 0220 	add.w	r2, r1, #32
 801248c:	bf4c      	ite	mi
 801248e:	2000      	movmi	r0, #0
 8012490:	2001      	movpl	r0, #1
 8012492:	4462      	add	r2, ip
 8012494:	6018      	str	r0, [r3, #0]
 8012496:	06af      	lsls	r7, r5, #26
 8012498:	ea4f 0382 	mov.w	r3, r2, lsl #2
 801249c:	f101 07a0 	add.w	r7, r1, #160	@ 0xa0
 80124a0:	bf4c      	ite	mi
 80124a2:	2000      	movmi	r0, #0
 80124a4:	2001      	movpl	r0, #1
 80124a6:	4467      	add	r7, ip
 80124a8:	6018      	str	r0, [r3, #0]
 80124aa:	00ba      	lsls	r2, r7, #2
 80124ac:	06b0      	lsls	r0, r6, #26
 80124ae:	f501 7390 	add.w	r3, r1, #288	@ 0x120
 80124b2:	bf4c      	ite	mi
 80124b4:	2000      	movmi	r0, #0
 80124b6:	2001      	movpl	r0, #1
 80124b8:	4463      	add	r3, ip
 80124ba:	6010      	str	r0, [r2, #0]
 80124bc:	06a7      	lsls	r7, r4, #26
 80124be:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80124c2:	f101 0730 	add.w	r7, r1, #48	@ 0x30
 80124c6:	bf4c      	ite	mi
 80124c8:	2000      	movmi	r0, #0
 80124ca:	2001      	movpl	r0, #1
 80124cc:	4467      	add	r7, ip
 80124ce:	6010      	str	r0, [r2, #0]
 80124d0:	00bb      	lsls	r3, r7, #2
 80124d2:	06e8      	lsls	r0, r5, #27
 80124d4:	f101 02b0 	add.w	r2, r1, #176	@ 0xb0
 80124d8:	bf4c      	ite	mi
 80124da:	2000      	movmi	r0, #0
 80124dc:	2001      	movpl	r0, #1
 80124de:	4462      	add	r2, ip
 80124e0:	6018      	str	r0, [r3, #0]
 80124e2:	06f7      	lsls	r7, r6, #27
 80124e4:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80124e8:	f501 7798 	add.w	r7, r1, #304	@ 0x130
 80124ec:	bf4c      	ite	mi
 80124ee:	2000      	movmi	r0, #0
 80124f0:	2001      	movpl	r0, #1
 80124f2:	4467      	add	r7, ip
 80124f4:	6018      	str	r0, [r3, #0]
 80124f6:	00ba      	lsls	r2, r7, #2
 80124f8:	06e0      	lsls	r0, r4, #27
 80124fa:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 80124fe:	bf4c      	ite	mi
 8012500:	2000      	movmi	r0, #0
 8012502:	2001      	movpl	r0, #1
 8012504:	4463      	add	r3, ip
 8012506:	6010      	str	r0, [r2, #0]
 8012508:	072f      	lsls	r7, r5, #28
 801250a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801250e:	f101 07c0 	add.w	r7, r1, #192	@ 0xc0
 8012512:	bf4c      	ite	mi
 8012514:	2000      	movmi	r0, #0
 8012516:	2001      	movpl	r0, #1
 8012518:	4467      	add	r7, ip
 801251a:	6010      	str	r0, [r2, #0]
 801251c:	00bb      	lsls	r3, r7, #2
 801251e:	0730      	lsls	r0, r6, #28
 8012520:	f501 72a0 	add.w	r2, r1, #320	@ 0x140
 8012524:	bf4c      	ite	mi
 8012526:	2000      	movmi	r0, #0
 8012528:	2001      	movpl	r0, #1
 801252a:	4462      	add	r2, ip
 801252c:	6018      	str	r0, [r3, #0]
 801252e:	0727      	lsls	r7, r4, #28
 8012530:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8012534:	f101 0750 	add.w	r7, r1, #80	@ 0x50
 8012538:	bf4c      	ite	mi
 801253a:	2000      	movmi	r0, #0
 801253c:	2001      	movpl	r0, #1
 801253e:	4467      	add	r7, ip
 8012540:	6018      	str	r0, [r3, #0]
 8012542:	00ba      	lsls	r2, r7, #2
 8012544:	0768      	lsls	r0, r5, #29
 8012546:	f101 03d0 	add.w	r3, r1, #208	@ 0xd0
 801254a:	bf4c      	ite	mi
 801254c:	2000      	movmi	r0, #0
 801254e:	2001      	movpl	r0, #1
 8012550:	4463      	add	r3, ip
 8012552:	6010      	str	r0, [r2, #0]
 8012554:	0777      	lsls	r7, r6, #29
 8012556:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801255a:	f501 77a8 	add.w	r7, r1, #336	@ 0x150
 801255e:	bf4c      	ite	mi
 8012560:	2000      	movmi	r0, #0
 8012562:	2001      	movpl	r0, #1
 8012564:	4467      	add	r7, ip
 8012566:	6010      	str	r0, [r2, #0]
 8012568:	00bb      	lsls	r3, r7, #2
 801256a:	0760      	lsls	r0, r4, #29
 801256c:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8012570:	bf4c      	ite	mi
 8012572:	2000      	movmi	r0, #0
 8012574:	2001      	movpl	r0, #1
 8012576:	4462      	add	r2, ip
 8012578:	6018      	str	r0, [r3, #0]
 801257a:	07af      	lsls	r7, r5, #30
 801257c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8012580:	f101 07e0 	add.w	r7, r1, #224	@ 0xe0
 8012584:	bf4c      	ite	mi
 8012586:	2000      	movmi	r0, #0
 8012588:	2001      	movpl	r0, #1
 801258a:	4467      	add	r7, ip
 801258c:	6018      	str	r0, [r3, #0]
 801258e:	00ba      	lsls	r2, r7, #2
 8012590:	07b0      	lsls	r0, r6, #30
 8012592:	f501 73b0 	add.w	r3, r1, #352	@ 0x160
 8012596:	bf4c      	ite	mi
 8012598:	2000      	movmi	r0, #0
 801259a:	2001      	movpl	r0, #1
 801259c:	4463      	add	r3, ip
 801259e:	07a7      	lsls	r7, r4, #30
 80125a0:	f101 0770 	add.w	r7, r1, #112	@ 0x70
 80125a4:	6010      	str	r0, [r2, #0]
 80125a6:	4467      	add	r7, ip
 80125a8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80125ac:	bf4c      	ite	mi
 80125ae:	2000      	movmi	r0, #0
 80125b0:	2001      	movpl	r0, #1
 80125b2:	00bb      	lsls	r3, r7, #2
 80125b4:	07ed      	lsls	r5, r5, #31
 80125b6:	f101 05f0 	add.w	r5, r1, #240	@ 0xf0
 80125ba:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 80125be:	6010      	str	r0, [r2, #0]
 80125c0:	4465      	add	r5, ip
 80125c2:	bf54      	ite	pl
 80125c4:	2001      	movpl	r0, #1
 80125c6:	2000      	movmi	r0, #0
 80125c8:	4461      	add	r1, ip
 80125ca:	07f6      	lsls	r6, r6, #31
 80125cc:	6018      	str	r0, [r3, #0]
 80125ce:	bf54      	ite	pl
 80125d0:	2601      	movpl	r6, #1
 80125d2:	2600      	movmi	r6, #0
 80125d4:	00aa      	lsls	r2, r5, #2
 80125d6:	07e4      	lsls	r4, r4, #31
 80125d8:	ea4f 0081 	mov.w	r0, r1, lsl #2
 80125dc:	bf54      	ite	pl
 80125de:	2401      	movpl	r4, #1
 80125e0:	2400      	movmi	r4, #0
 80125e2:	6016      	str	r6, [r2, #0]
 80125e4:	6004      	str	r4, [r0, #0]
 80125e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ea:	4b05      	ldr	r3, [pc, #20]	@ (8012600 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x210>)
 80125ec:	4a05      	ldr	r2, [pc, #20]	@ (8012604 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x214>)
 80125ee:	4806      	ldr	r0, [pc, #24]	@ (8012608 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x218>)
 80125f0:	f240 3126 	movw	r1, #806	@ 0x326
 80125f4:	f008 fbf8 	bl	801ade8 <__assert_func>
 80125f8:	e706      	b.n	8012408 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x18>
 80125fa:	bf00      	nop
 80125fc:	20028000 	andcs	r8, r2, r0
 8012600:	0801cfdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, sl, fp, lr, pc}
 8012604:	0801cffc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr, pc}
 8012608:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}

0801260c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>:
 801260c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012610:	290f      	cmp	r1, #15
 8012612:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8012616:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 801261a:	4688      	mov	r8, r1
 801261c:	4681      	mov	r9, r0
 801261e:	4615      	mov	r5, r2
 8012620:	461f      	mov	r7, r3
 8012622:	f200 80f8 	bhi.w	8012816 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x20a>
 8012626:	f8d9 3000 	ldr.w	r3, [r9]
 801262a:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 801262e:	f080 80ff 	bcs.w	8012830 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x224>
 8012632:	4a83      	ldr	r2, [pc, #524]	@ (8012840 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x234>)
 8012634:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8012638:	f108 0106 	add.w	r1, r8, #6
 801263c:	eb02 1800 	add.w	r8, r2, r0, lsl #4
 8012640:	fa5f fc81 	uxtb.w	ip, r1
 8012644:	f108 7588 	add.w	r5, r8, #17825792	@ 0x1100000
 8012648:	00e9      	lsls	r1, r5, #3
 801264a:	eb0c 03c5 	add.w	r3, ip, r5, lsl #3
 801264e:	0638      	lsls	r0, r7, #24
 8012650:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012654:	f101 0580 	add.w	r5, r1, #128	@ 0x80
 8012658:	bf54      	ite	pl
 801265a:	2000      	movpl	r0, #0
 801265c:	2001      	movmi	r0, #1
 801265e:	4465      	add	r5, ip
 8012660:	6010      	str	r0, [r2, #0]
 8012662:	00ab      	lsls	r3, r5, #2
 8012664:	f501 7280 	add.w	r2, r1, #256	@ 0x100
 8012668:	0635      	lsls	r5, r6, #24
 801266a:	bf54      	ite	pl
 801266c:	2000      	movpl	r0, #0
 801266e:	2001      	movmi	r0, #1
 8012670:	4462      	add	r2, ip
 8012672:	6018      	str	r0, [r3, #0]
 8012674:	0095      	lsls	r5, r2, #2
 8012676:	0620      	lsls	r0, r4, #24
 8012678:	f101 0310 	add.w	r3, r1, #16
 801267c:	bf54      	ite	pl
 801267e:	2000      	movpl	r0, #0
 8012680:	2001      	movmi	r0, #1
 8012682:	4463      	add	r3, ip
 8012684:	6028      	str	r0, [r5, #0]
 8012686:	009a      	lsls	r2, r3, #2
 8012688:	f017 0540 	ands.w	r5, r7, #64	@ 0x40
 801268c:	f101 0090 	add.w	r0, r1, #144	@ 0x90
 8012690:	bf18      	it	ne
 8012692:	2501      	movne	r5, #1
 8012694:	4460      	add	r0, ip
 8012696:	6015      	str	r5, [r2, #0]
 8012698:	0083      	lsls	r3, r0, #2
 801269a:	f016 0240 	ands.w	r2, r6, #64	@ 0x40
 801269e:	f501 7588 	add.w	r5, r1, #272	@ 0x110
 80126a2:	bf18      	it	ne
 80126a4:	2201      	movne	r2, #1
 80126a6:	4465      	add	r5, ip
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
 80126ae:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80126b2:	f101 0220 	add.w	r2, r1, #32
 80126b6:	bf18      	it	ne
 80126b8:	2001      	movne	r0, #1
 80126ba:	4462      	add	r2, ip
 80126bc:	6018      	str	r0, [r3, #0]
 80126be:	0095      	lsls	r5, r2, #2
 80126c0:	f017 0320 	ands.w	r3, r7, #32
 80126c4:	f101 00a0 	add.w	r0, r1, #160	@ 0xa0
 80126c8:	bf18      	it	ne
 80126ca:	2301      	movne	r3, #1
 80126cc:	4460      	add	r0, ip
 80126ce:	602b      	str	r3, [r5, #0]
 80126d0:	0082      	lsls	r2, r0, #2
 80126d2:	f016 0520 	ands.w	r5, r6, #32
 80126d6:	f501 7390 	add.w	r3, r1, #288	@ 0x120
 80126da:	bf18      	it	ne
 80126dc:	2501      	movne	r5, #1
 80126de:	4463      	add	r3, ip
 80126e0:	6015      	str	r5, [r2, #0]
 80126e2:	f014 0020 	ands.w	r0, r4, #32
 80126e6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80126ea:	f101 0530 	add.w	r5, r1, #48	@ 0x30
 80126ee:	bf18      	it	ne
 80126f0:	2001      	movne	r0, #1
 80126f2:	4465      	add	r5, ip
 80126f4:	6010      	str	r0, [r2, #0]
 80126f6:	00ab      	lsls	r3, r5, #2
 80126f8:	f017 0210 	ands.w	r2, r7, #16
 80126fc:	f101 00b0 	add.w	r0, r1, #176	@ 0xb0
 8012700:	bf18      	it	ne
 8012702:	2201      	movne	r2, #1
 8012704:	4460      	add	r0, ip
 8012706:	601a      	str	r2, [r3, #0]
 8012708:	0085      	lsls	r5, r0, #2
 801270a:	f016 0310 	ands.w	r3, r6, #16
 801270e:	f501 7298 	add.w	r2, r1, #304	@ 0x130
 8012712:	bf18      	it	ne
 8012714:	2301      	movne	r3, #1
 8012716:	4462      	add	r2, ip
 8012718:	602b      	str	r3, [r5, #0]
 801271a:	f014 0010 	ands.w	r0, r4, #16
 801271e:	ea4f 0582 	mov.w	r5, r2, lsl #2
 8012722:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8012726:	bf18      	it	ne
 8012728:	2001      	movne	r0, #1
 801272a:	4463      	add	r3, ip
 801272c:	6028      	str	r0, [r5, #0]
 801272e:	009a      	lsls	r2, r3, #2
 8012730:	f017 0508 	ands.w	r5, r7, #8
 8012734:	f101 00c0 	add.w	r0, r1, #192	@ 0xc0
 8012738:	bf18      	it	ne
 801273a:	2501      	movne	r5, #1
 801273c:	4460      	add	r0, ip
 801273e:	6015      	str	r5, [r2, #0]
 8012740:	0083      	lsls	r3, r0, #2
 8012742:	f016 0208 	ands.w	r2, r6, #8
 8012746:	f501 75a0 	add.w	r5, r1, #320	@ 0x140
 801274a:	bf18      	it	ne
 801274c:	2201      	movne	r2, #1
 801274e:	4465      	add	r5, ip
 8012750:	601a      	str	r2, [r3, #0]
 8012752:	f014 0008 	ands.w	r0, r4, #8
 8012756:	ea4f 0385 	mov.w	r3, r5, lsl #2
 801275a:	f101 0250 	add.w	r2, r1, #80	@ 0x50
 801275e:	bf18      	it	ne
 8012760:	2001      	movne	r0, #1
 8012762:	4462      	add	r2, ip
 8012764:	6018      	str	r0, [r3, #0]
 8012766:	0095      	lsls	r5, r2, #2
 8012768:	f017 0304 	ands.w	r3, r7, #4
 801276c:	f101 00d0 	add.w	r0, r1, #208	@ 0xd0
 8012770:	bf18      	it	ne
 8012772:	2301      	movne	r3, #1
 8012774:	4460      	add	r0, ip
 8012776:	602b      	str	r3, [r5, #0]
 8012778:	0082      	lsls	r2, r0, #2
 801277a:	f016 0504 	ands.w	r5, r6, #4
 801277e:	f501 73a8 	add.w	r3, r1, #336	@ 0x150
 8012782:	bf18      	it	ne
 8012784:	2501      	movne	r5, #1
 8012786:	4463      	add	r3, ip
 8012788:	6015      	str	r5, [r2, #0]
 801278a:	f014 0004 	ands.w	r0, r4, #4
 801278e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8012792:	f101 0560 	add.w	r5, r1, #96	@ 0x60
 8012796:	bf18      	it	ne
 8012798:	2001      	movne	r0, #1
 801279a:	4465      	add	r5, ip
 801279c:	6010      	str	r0, [r2, #0]
 801279e:	00ab      	lsls	r3, r5, #2
 80127a0:	f017 0202 	ands.w	r2, r7, #2
 80127a4:	f101 00e0 	add.w	r0, r1, #224	@ 0xe0
 80127a8:	bf18      	it	ne
 80127aa:	2201      	movne	r2, #1
 80127ac:	4460      	add	r0, ip
 80127ae:	601a      	str	r2, [r3, #0]
 80127b0:	0085      	lsls	r5, r0, #2
 80127b2:	f016 0302 	ands.w	r3, r6, #2
 80127b6:	f501 72b0 	add.w	r2, r1, #352	@ 0x160
 80127ba:	bf18      	it	ne
 80127bc:	2301      	movne	r3, #1
 80127be:	4462      	add	r2, ip
 80127c0:	602b      	str	r3, [r5, #0]
 80127c2:	f014 0002 	ands.w	r0, r4, #2
 80127c6:	ea4f 0582 	mov.w	r5, r2, lsl #2
 80127ca:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 80127ce:	4463      	add	r3, ip
 80127d0:	bf18      	it	ne
 80127d2:	2001      	movne	r0, #1
 80127d4:	6028      	str	r0, [r5, #0]
 80127d6:	009a      	lsls	r2, r3, #2
 80127d8:	f017 0701 	ands.w	r7, r7, #1
 80127dc:	f101 05f0 	add.w	r5, r1, #240	@ 0xf0
 80127e0:	4465      	add	r5, ip
 80127e2:	bf1c      	itt	ne
 80127e4:	2301      	movne	r3, #1
 80127e6:	6013      	strne	r3, [r2, #0]
 80127e8:	ea4f 0085 	mov.w	r0, r5, lsl #2
 80127ec:	bf08      	it	eq
 80127ee:	6017      	streq	r7, [r2, #0]
 80127f0:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 80127f4:	f016 0601 	ands.w	r6, r6, #1
 80127f8:	bf18      	it	ne
 80127fa:	2501      	movne	r5, #1
 80127fc:	4461      	add	r1, ip
 80127fe:	bf14      	ite	ne
 8012800:	6005      	strne	r5, [r0, #0]
 8012802:	6006      	streq	r6, [r0, #0]
 8012804:	008b      	lsls	r3, r1, #2
 8012806:	f014 0401 	ands.w	r4, r4, #1
 801280a:	bf1a      	itte	ne
 801280c:	2501      	movne	r5, #1
 801280e:	601d      	strne	r5, [r3, #0]
 8012810:	601c      	streq	r4, [r3, #0]
 8012812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012816:	4b0b      	ldr	r3, [pc, #44]	@ (8012844 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x238>)
 8012818:	4a0b      	ldr	r2, [pc, #44]	@ (8012848 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x23c>)
 801281a:	480c      	ldr	r0, [pc, #48]	@ (801284c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x240>)
 801281c:	f240 3143 	movw	r1, #835	@ 0x343
 8012820:	f008 fae2 	bl	801ade8 <__assert_func>
 8012824:	f8d9 3000 	ldr.w	r3, [r9]
 8012828:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 801282c:	f4ff af01 	bcc.w	8012632 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x26>
 8012830:	4b07      	ldr	r3, [pc, #28]	@ (8012850 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x244>)
 8012832:	4a05      	ldr	r2, [pc, #20]	@ (8012848 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x23c>)
 8012834:	4805      	ldr	r0, [pc, #20]	@ (801284c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x240>)
 8012836:	f44f 7151 	mov.w	r1, #836	@ 0x344
 801283a:	f008 fad5 	bl	801ade8 <__assert_func>
 801283e:	e6f8      	b.n	8012632 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x26>
 8012840:	20020000 	andcs	r0, r2, r0
 8012844:	0801d00c 	stmdaeq	r1, {r2, r3, ip, lr, pc}
 8012848:	0801d01c 	stmdaeq	r1, {r2, r3, r4, ip, lr, pc}
 801284c:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 8012850:	0801d02c 	stmdaeq	r1, {r2, r3, r5, ip, lr, pc}

08012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8012854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012858:	290f      	cmp	r1, #15
 801285a:	f89d 6020 	ldrb.w	r6, [sp, #32]
 801285e:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8012862:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8012866:	460c      	mov	r4, r1
 8012868:	4682      	mov	sl, r0
 801286a:	4691      	mov	r9, r2
 801286c:	461d      	mov	r5, r3
 801286e:	f200 808a 	bhi.w	8012986 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
 8012872:	f8da 3000 	ldr.w	r3, [sl]
 8012876:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 801287a:	f080 8091 	bcs.w	80129a0 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x14c>
 801287e:	4a4c      	ldr	r2, [pc, #304]	@ (80129b0 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 8012880:	3406      	adds	r4, #6
 8012882:	eb02 1189 	add.w	r1, r2, r9, lsl #6
 8012886:	b2e0      	uxtb	r0, r4
 8012888:	f101 7488 	add.w	r4, r1, #17825792	@ 0x1100000
 801288c:	3430      	adds	r4, #48	@ 0x30
 801288e:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8012892:	f10c 0080 	add.w	r0, ip, #128	@ 0x80
 8012896:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 801289a:	ebaa 098c 	sub.w	r9, sl, ip, lsl #2
 801289e:	4663      	mov	r3, ip
 80128a0:	ea5f 6149 	movs.w	r1, r9, lsl #25
 80128a4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80128a8:	f04f 0401 	mov.w	r4, #1
 80128ac:	f04f 0380 	mov.w	r3, #128	@ 0x80
 80128b0:	d53d      	bpl.n	801292e <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xda>
 80128b2:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 80128b6:	f015 0180 	ands.w	r1, r5, #128	@ 0x80
 80128ba:	f5a2 6380 	sub.w	r3, r2, #1024	@ 0x400
 80128be:	bf0c      	ite	eq
 80128c0:	f8cc 1000 	streq.w	r1, [ip]
 80128c4:	f8cc 4000 	strne.w	r4, [ip]
 80128c8:	f5a2 7900 	sub.w	r9, r2, #512	@ 0x200
 80128cc:	f016 0080 	ands.w	r0, r6, #128	@ 0x80
 80128d0:	bf0c      	ite	eq
 80128d2:	6018      	streq	r0, [r3, #0]
 80128d4:	601c      	strne	r4, [r3, #0]
 80128d6:	f017 0180 	ands.w	r1, r7, #128	@ 0x80
 80128da:	bf0c      	ite	eq
 80128dc:	f8c9 1000 	streq.w	r1, [r9]
 80128e0:	f8c9 4000 	strne.w	r4, [r9]
 80128e4:	f018 0380 	ands.w	r3, r8, #128	@ 0x80
 80128e8:	bf0c      	ite	eq
 80128ea:	6013      	streq	r3, [r2, #0]
 80128ec:	6014      	strne	r4, [r2, #0]
 80128ee:	2340      	movs	r3, #64	@ 0x40
 80128f0:	3240      	adds	r2, #64	@ 0x40
 80128f2:	e01a      	b.n	801292a <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd6>
 80128f4:	6014      	str	r4, [r2, #0]
 80128f6:	f5a9 6c80 	sub.w	ip, r9, #1024	@ 0x400
 80128fa:	ea11 0006 	ands.w	r0, r1, r6
 80128fe:	f5a9 7300 	sub.w	r3, r9, #512	@ 0x200
 8012902:	bf0c      	ite	eq
 8012904:	f8cc 0000 	streq.w	r0, [ip]
 8012908:	f8cc 4000 	strne.w	r4, [ip]
 801290c:	ea11 0207 	ands.w	r2, r1, r7
 8012910:	bf0c      	ite	eq
 8012912:	601a      	streq	r2, [r3, #0]
 8012914:	601c      	strne	r4, [r3, #0]
 8012916:	ea11 0008 	ands.w	r0, r1, r8
 801291a:	bf0c      	ite	eq
 801291c:	f8c9 0000 	streq.w	r0, [r9]
 8012920:	f8c9 4000 	strne.w	r4, [r9]
 8012924:	f109 0240 	add.w	r2, r9, #64	@ 0x40
 8012928:	084b      	lsrs	r3, r1, #1
 801292a:	4552      	cmp	r2, sl
 801292c:	d029      	beq.n	8012982 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x12e>
 801292e:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 8012932:	ea13 0005 	ands.w	r0, r3, r5
 8012936:	f5a2 6980 	sub.w	r9, r2, #1024	@ 0x400
 801293a:	bf0c      	ite	eq
 801293c:	f8cc 0000 	streq.w	r0, [ip]
 8012940:	f8cc 4000 	strne.w	r4, [ip]
 8012944:	ea13 0106 	ands.w	r1, r3, r6
 8012948:	f5a2 7c00 	sub.w	ip, r2, #512	@ 0x200
 801294c:	bf0c      	ite	eq
 801294e:	f8c9 1000 	streq.w	r1, [r9]
 8012952:	f8c9 4000 	strne.w	r4, [r9]
 8012956:	ea13 0007 	ands.w	r0, r3, r7
 801295a:	bf14      	ite	ne
 801295c:	f8cc 4000 	strne.w	r4, [ip]
 8012960:	f8cc 0000 	streq.w	r0, [ip]
 8012964:	ea13 0108 	ands.w	r1, r3, r8
 8012968:	bf0c      	ite	eq
 801296a:	6011      	streq	r1, [r2, #0]
 801296c:	6014      	strne	r4, [r2, #0]
 801296e:	0859      	lsrs	r1, r3, #1
 8012970:	ea15 0353 	ands.w	r3, r5, r3, lsr #1
 8012974:	f102 0940 	add.w	r9, r2, #64	@ 0x40
 8012978:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 801297c:	d1ba      	bne.n	80128f4 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa0>
 801297e:	6013      	str	r3, [r2, #0]
 8012980:	e7b9      	b.n	80128f6 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
 8012982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012986:	4b0b      	ldr	r3, [pc, #44]	@ (80129b4 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 8012988:	4a0b      	ldr	r2, [pc, #44]	@ (80129b8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 801298a:	480c      	ldr	r0, [pc, #48]	@ (80129bc <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>)
 801298c:	f240 3161 	movw	r1, #865	@ 0x361
 8012990:	f008 fa2a 	bl	801ade8 <__assert_func>
 8012994:	f8da 3000 	ldr.w	r3, [sl]
 8012998:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 801299c:	f4ff af6f 	bcc.w	801287e <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 80129a0:	4b07      	ldr	r3, [pc, #28]	@ (80129c0 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>)
 80129a2:	4a05      	ldr	r2, [pc, #20]	@ (80129b8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 80129a4:	4805      	ldr	r0, [pc, #20]	@ (80129bc <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>)
 80129a6:	f240 3162 	movw	r1, #866	@ 0x362
 80129aa:	f008 fa1d 	bl	801ade8 <__assert_func>
 80129ae:	e766      	b.n	801287e <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 80129b0:	20020000 	andcs	r0, r2, r0
 80129b4:	0801d00c 	stmdaeq	r1, {r2, r3, ip, lr, pc}
 80129b8:	0801d04c 	stmdaeq	r1, {r2, r3, r6, ip, lr, pc}
 80129bc:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 80129c0:	0801d02c 	stmdaeq	r1, {r2, r3, r5, ip, lr, pc}

080129c4 <WS28xxMulti::Setup(unsigned long)>:
 80129c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129c8:	4ac3      	ldr	r2, [pc, #780]	@ (8012cd8 <WS28xxMulti::Setup(unsigned long)+0x314>)
 80129ca:	4cc4      	ldr	r4, [pc, #784]	@ (8012cdc <WS28xxMulti::Setup(unsigned long)+0x318>)
 80129cc:	b094      	sub	sp, #80	@ 0x50
 80129ce:	460d      	mov	r5, r1
 80129d0:	f240 137f 	movw	r3, #383	@ 0x17f
 80129d4:	49c2      	ldr	r1, [pc, #776]	@ (8012ce0 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 80129d6:	4607      	mov	r7, r0
 80129d8:	48c2      	ldr	r0, [pc, #776]	@ (8012ce4 <WS28xxMulti::Setup(unsigned long)+0x320>)
 80129da:	f008 f925 	bl	801ac28 <printf>
 80129de:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80129e2:	f006 fb9d 	bl	8019120 <rcu_periph_clock_enable>
 80129e6:	48c0      	ldr	r0, [pc, #768]	@ (8012ce8 <WS28xxMulti::Setup(unsigned long)+0x324>)
 80129e8:	2340      	movs	r3, #64	@ 0x40
 80129ea:	2200      	movs	r2, #0
 80129ec:	2102      	movs	r1, #2
 80129ee:	f006 fb15 	bl	801901c <gpio_mode_set>
 80129f2:	2340      	movs	r3, #64	@ 0x40
 80129f4:	48bc      	ldr	r0, [pc, #752]	@ (8012ce8 <WS28xxMulti::Setup(unsigned long)+0x324>)
 80129f6:	2202      	movs	r2, #2
 80129f8:	2100      	movs	r1, #0
 80129fa:	f006 fb31 	bl	8019060 <gpio_output_options_set>
 80129fe:	48ba      	ldr	r0, [pc, #744]	@ (8012ce8 <WS28xxMulti::Setup(unsigned long)+0x324>)
 8012a00:	2240      	movs	r2, #64	@ 0x40
 8012a02:	2102      	movs	r1, #2
 8012a04:	f006 fb48 	bl	8019098 <gpio_af_set>
 8012a08:	fbb4 f4f5 	udiv	r4, r4, r5
 8012a0c:	4ab4      	ldr	r2, [pc, #720]	@ (8012ce0 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8012a0e:	49b2      	ldr	r1, [pc, #712]	@ (8012cd8 <WS28xxMulti::Setup(unsigned long)+0x314>)
 8012a10:	48b6      	ldr	r0, [pc, #728]	@ (8012cec <WS28xxMulti::Setup(unsigned long)+0x328>)
 8012a12:	f240 13a1 	movw	r3, #417	@ 0x1a1
 8012a16:	e9cd 5400 	strd	r5, r4, [sp]
 8012a1a:	f008 f905 	bl	801ac28 <printf>
 8012a1e:	2c0c      	cmp	r4, #12
 8012a20:	f241 0001 	movw	r0, #4097	@ 0x1001
 8012a24:	bf38      	it	cc
 8012a26:	240c      	movcc	r4, #12
 8012a28:	f006 fb7a 	bl	8019120 <rcu_periph_clock_enable>
 8012a2c:	48b0      	ldr	r0, [pc, #704]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a2e:	f006 fc33 	bl	8019298 <timer_deinit>
 8012a32:	2600      	movs	r6, #0
 8012a34:	1e63      	subs	r3, r4, #1
 8012a36:	48ae      	ldr	r0, [pc, #696]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a3a:	a907      	add	r1, sp, #28
 8012a3c:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8012a40:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8012a44:	f006 fcd6 	bl	80193f4 <timer_init>
 8012a48:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8012a4c:	f04f 0a01 	mov.w	sl, #1
 8012a50:	9006      	str	r0, [sp, #24]
 8012a52:	4631      	mov	r1, r6
 8012a54:	48a6      	ldr	r0, [pc, #664]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a56:	f04f 0902 	mov.w	r9, #2
 8012a5a:	aa04      	add	r2, sp, #16
 8012a5c:	e9cd a904 	strd	sl, r9, [sp, #16]
 8012a60:	f006 fd08 	bl	8019474 <timer_channel_output_config>
 8012a64:	fa24 f10a 	lsr.w	r1, r4, sl
 8012a68:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 8012a6c:	1e4d      	subs	r5, r1, #1
 8012a6e:	4545      	cmp	r5, r8
 8012a70:	f200 80f5 	bhi.w	8012c5e <WS28xxMulti::Setup(unsigned long)+0x29a>
 8012a74:	4631      	mov	r1, r6
 8012a76:	489e      	ldr	r0, [pc, #632]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a78:	b2aa      	uxth	r2, r5
 8012a7a:	f006 fe09 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012a7e:	4631      	mov	r1, r6
 8012a80:	489b      	ldr	r0, [pc, #620]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a82:	2260      	movs	r2, #96	@ 0x60
 8012a84:	f006 fdde 	bl	8019644 <timer_channel_output_mode_config>
 8012a88:	4632      	mov	r2, r6
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	4898      	ldr	r0, [pc, #608]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a8e:	f006 fe0d 	bl	80196ac <timer_channel_output_shadow_config>
 8012a92:	4897      	ldr	r0, [pc, #604]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a94:	2210      	movs	r2, #16
 8012a96:	4649      	mov	r1, r9
 8012a98:	f006 fdd4 	bl	8019644 <timer_channel_output_mode_config>
 8012a9c:	4894      	ldr	r0, [pc, #592]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012a9e:	2210      	movs	r2, #16
 8012aa0:	2103      	movs	r1, #3
 8012aa2:	f006 fdcf 	bl	8019644 <timer_channel_output_mode_config>
 8012aa6:	4892      	ldr	r0, [pc, #584]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012aa8:	4652      	mov	r2, sl
 8012aaa:	4649      	mov	r1, r9
 8012aac:	f006 fdf0 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012ab0:	08a4      	lsrs	r4, r4, #2
 8012ab2:	1e66      	subs	r6, r4, #1
 8012ab4:	b2b2      	uxth	r2, r6
 8012ab6:	488e      	ldr	r0, [pc, #568]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012ab8:	2103      	movs	r1, #3
 8012aba:	f006 fde9 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012abe:	488c      	ldr	r0, [pc, #560]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012ac0:	2101      	movs	r1, #1
 8012ac2:	f006 fe31 	bl	8019728 <timer_master_slave_mode_config>
 8012ac6:	2130      	movs	r1, #48	@ 0x30
 8012ac8:	4889      	ldr	r0, [pc, #548]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012aca:	f006 fe1d 	bl	8019708 <timer_master_output_trigger_source_select>
 8012ace:	f241 0002 	movw	r0, #4098	@ 0x1002
 8012ad2:	f006 fb25 	bl	8019120 <rcu_periph_clock_enable>
 8012ad6:	4887      	ldr	r0, [pc, #540]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012ad8:	f006 fbde 	bl	8019298 <timer_deinit>
 8012adc:	f04f 0a00 	mov.w	sl, #0
 8012ae0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ae4:	4883      	ldr	r0, [pc, #524]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ae8:	a907      	add	r1, sp, #28
 8012aea:	e9cd aa07 	strd	sl, sl, [sp, #28]
 8012aee:	f006 fc81 	bl	80193f4 <timer_init>
 8012af2:	4880      	ldr	r0, [pc, #512]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012af4:	2101      	movs	r1, #1
 8012af6:	f006 fe17 	bl	8019728 <timer_master_slave_mode_config>
 8012afa:	487e      	ldr	r0, [pc, #504]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012afc:	2107      	movs	r1, #7
 8012afe:	f006 fe0b 	bl	8019718 <timer_slave_mode_select>
 8012b02:	487c      	ldr	r0, [pc, #496]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012b04:	2120      	movs	r1, #32
 8012b06:	f006 fdf7 	bl	80196f8 <timer_input_trigger_source_select>
 8012b0a:	487a      	ldr	r0, [pc, #488]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012b0c:	4651      	mov	r1, sl
 8012b0e:	2210      	movs	r2, #16
 8012b10:	f006 fd98 	bl	8019644 <timer_channel_output_mode_config>
 8012b14:	6839      	ldr	r1, [r7, #0]
 8012b16:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8012b1a:	4281      	cmp	r1, r0
 8012b1c:	f200 80d2 	bhi.w	8012cc4 <WS28xxMulti::Setup(unsigned long)+0x300>
 8012b20:	b28a      	uxth	r2, r1
 8012b22:	4874      	ldr	r0, [pc, #464]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012b24:	4d74      	ldr	r5, [pc, #464]	@ (8012cf8 <WS28xxMulti::Setup(unsigned long)+0x334>)
 8012b26:	2100      	movs	r1, #0
 8012b28:	f006 fdb2 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012b2c:	2400      	movs	r4, #0
 8012b2e:	4871      	ldr	r0, [pc, #452]	@ (8012cf4 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8012b30:	2102      	movs	r1, #2
 8012b32:	f006 fe05 	bl	8019740 <timer_interrupt_enable>
 8012b36:	f885 431e 	strb.w	r4, [r5, #798]	@ 0x31e
 8012b3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8012b3e:	602a      	str	r2, [r5, #0]
 8012b40:	f640 4015 	movw	r0, #3093	@ 0xc15
 8012b44:	f006 faec 	bl	8019120 <rcu_periph_clock_enable>
 8012b48:	2107      	movs	r1, #7
 8012b4a:	486c      	ldr	r0, [pc, #432]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012b4c:	4e6c      	ldr	r6, [pc, #432]	@ (8012d00 <WS28xxMulti::Setup(unsigned long)+0x33c>)
 8012b4e:	f005 fecb 	bl	80188e8 <dma_deinit>
 8012b52:	a80b      	add	r0, sp, #44	@ 0x2c
 8012b54:	f005 fef4 	bl	8018940 <dma_single_data_para_struct_init>
 8012b58:	2501      	movs	r5, #1
 8012b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8012d04 <WS28xxMulti::Setup(unsigned long)+0x340>)
 8012b5c:	4867      	ldr	r0, [pc, #412]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012b5e:	960d      	str	r6, [sp, #52]	@ 0x34
 8012b60:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012b62:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8012b66:	f04f 0940 	mov.w	r9, #64	@ 0x40
 8012b6a:	2107      	movs	r1, #7
 8012b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b6e:	950e      	str	r5, [sp, #56]	@ 0x38
 8012b70:	950c      	str	r5, [sp, #48]	@ 0x30
 8012b72:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012b74:	960f      	str	r6, [sp, #60]	@ 0x3c
 8012b76:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8012b7a:	f005 feed 	bl	8018958 <dma_single_data_mode_init>
 8012b7e:	485f      	ldr	r0, [pc, #380]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012b80:	2107      	movs	r1, #7
 8012b82:	f005 ff6f 	bl	8018a64 <dma_circulation_disable>
 8012b86:	2205      	movs	r2, #5
 8012b88:	485c      	ldr	r0, [pc, #368]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012b8a:	2107      	movs	r1, #7
 8012b8c:	f005 ff72 	bl	8018a74 <dma_channel_subperipheral_select>
 8012b90:	2102      	movs	r1, #2
 8012b92:	485a      	ldr	r0, [pc, #360]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012b94:	f005 fea8 	bl	80188e8 <dma_deinit>
 8012b98:	a80b      	add	r0, sp, #44	@ 0x2c
 8012b9a:	f005 fed1 	bl	8018940 <dma_single_data_para_struct_init>
 8012b9e:	e9cd 460e 	strd	r4, r6, [sp, #56]	@ 0x38
 8012ba2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012ba4:	4855      	ldr	r0, [pc, #340]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012ba6:	950c      	str	r5, [sp, #48]	@ 0x30
 8012ba8:	2102      	movs	r1, #2
 8012baa:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012bac:	4d56      	ldr	r5, [pc, #344]	@ (8012d08 <WS28xxMulti::Setup(unsigned long)+0x344>)
 8012bae:	4c57      	ldr	r4, [pc, #348]	@ (8012d0c <WS28xxMulti::Setup(unsigned long)+0x348>)
 8012bb0:	4e57      	ldr	r6, [pc, #348]	@ (8012d10 <WS28xxMulti::Setup(unsigned long)+0x34c>)
 8012bb2:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8012bb6:	940d      	str	r4, [sp, #52]	@ 0x34
 8012bb8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8012bba:	f005 fecd 	bl	8018958 <dma_single_data_mode_init>
 8012bbe:	484f      	ldr	r0, [pc, #316]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012bc0:	2102      	movs	r1, #2
 8012bc2:	f005 ff4f 	bl	8018a64 <dma_circulation_disable>
 8012bc6:	484d      	ldr	r0, [pc, #308]	@ (8012cfc <WS28xxMulti::Setup(unsigned long)+0x338>)
 8012bc8:	2205      	movs	r2, #5
 8012bca:	2102      	movs	r1, #2
 8012bcc:	f005 ff52 	bl	8018a74 <dma_channel_subperipheral_select>
 8012bd0:	6830      	ldr	r0, [r6, #0]
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	f000 80a6 	beq.w	8012d24 <WS28xxMulti::Setup(unsigned long)+0x360>
 8012bd8:	68c1      	ldr	r1, [r0, #12]
 8012bda:	f1a1 020b 	sub.w	r2, r1, #11
 8012bde:	2a02      	cmp	r2, #2
 8012be0:	d81b      	bhi.n	8012c1a <WS28xxMulti::Setup(unsigned long)+0x256>
 8012be2:	6803      	ldr	r3, [r0, #0]
 8012be4:	f103 0801 	add.w	r8, r3, #1
 8012be8:	d021      	beq.n	8012c2e <WS28xxMulti::Setup(unsigned long)+0x26a>
 8012bea:	2400      	movs	r4, #0
 8012bec:	4626      	mov	r6, r4
 8012bee:	25ff      	movs	r5, #255	@ 0xff
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	4621      	mov	r1, r4
 8012bf6:	4638      	mov	r0, r7
 8012bf8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012bfc:	9600      	str	r6, [sp, #0]
 8012bfe:	f7ff fe29 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c02:	4621      	mov	r1, r4
 8012c04:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8012c08:	23ff      	movs	r3, #255	@ 0xff
 8012c0a:	9500      	str	r5, [sp, #0]
 8012c0c:	4642      	mov	r2, r8
 8012c0e:	4638      	mov	r0, r7
 8012c10:	3401      	adds	r4, #1
 8012c12:	f7ff fe1f 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c16:	2c08      	cmp	r4, #8
 8012c18:	d1ea      	bne.n	8012bf0 <WS28xxMulti::Setup(unsigned long)+0x22c>
 8012c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8012cd8 <WS28xxMulti::Setup(unsigned long)+0x314>)
 8012c1c:	4930      	ldr	r1, [pc, #192]	@ (8012ce0 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8012c1e:	483d      	ldr	r0, [pc, #244]	@ (8012d14 <WS28xxMulti::Setup(unsigned long)+0x350>)
 8012c20:	f240 234e 	movw	r3, #590	@ 0x24e
 8012c24:	f008 f800 	bl	801ac28 <printf>
 8012c28:	b014      	add	sp, #80	@ 0x50
 8012c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c2e:	2600      	movs	r6, #0
 8012c30:	4634      	mov	r4, r6
 8012c32:	2300      	movs	r3, #0
 8012c34:	461a      	mov	r2, r3
 8012c36:	4631      	mov	r1, r6
 8012c38:	4638      	mov	r0, r7
 8012c3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012c3e:	9400      	str	r4, [sp, #0]
 8012c40:	f7ff fe08 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c44:	4631      	mov	r1, r6
 8012c46:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	9400      	str	r4, [sp, #0]
 8012c4e:	4642      	mov	r2, r8
 8012c50:	4638      	mov	r0, r7
 8012c52:	3601      	adds	r6, #1
 8012c54:	f7ff fdfe 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012c58:	2e08      	cmp	r6, #8
 8012c5a:	d1ea      	bne.n	8012c32 <WS28xxMulti::Setup(unsigned long)+0x26e>
 8012c5c:	e7dd      	b.n	8012c1a <WS28xxMulti::Setup(unsigned long)+0x256>
 8012c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8012d18 <WS28xxMulti::Setup(unsigned long)+0x354>)
 8012c60:	4a1d      	ldr	r2, [pc, #116]	@ (8012cd8 <WS28xxMulti::Setup(unsigned long)+0x314>)
 8012c62:	481f      	ldr	r0, [pc, #124]	@ (8012ce0 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8012c64:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8012c68:	f008 f8be 	bl	801ade8 <__assert_func>
 8012c6c:	4631      	mov	r1, r6
 8012c6e:	4820      	ldr	r0, [pc, #128]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012c70:	b2aa      	uxth	r2, r5
 8012c72:	f006 fd0d 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012c76:	4631      	mov	r1, r6
 8012c78:	481d      	ldr	r0, [pc, #116]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012c7a:	2260      	movs	r2, #96	@ 0x60
 8012c7c:	f006 fce2 	bl	8019644 <timer_channel_output_mode_config>
 8012c80:	4632      	mov	r2, r6
 8012c82:	4631      	mov	r1, r6
 8012c84:	481a      	ldr	r0, [pc, #104]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012c86:	f006 fd11 	bl	80196ac <timer_channel_output_shadow_config>
 8012c8a:	4819      	ldr	r0, [pc, #100]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012c8c:	2210      	movs	r2, #16
 8012c8e:	4649      	mov	r1, r9
 8012c90:	f006 fcd8 	bl	8019644 <timer_channel_output_mode_config>
 8012c94:	4816      	ldr	r0, [pc, #88]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012c96:	2210      	movs	r2, #16
 8012c98:	2103      	movs	r1, #3
 8012c9a:	f006 fcd3 	bl	8019644 <timer_channel_output_mode_config>
 8012c9e:	4652      	mov	r2, sl
 8012ca0:	4813      	ldr	r0, [pc, #76]	@ (8012cf0 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8012ca2:	4649      	mov	r1, r9
 8012ca4:	f006 fcf4 	bl	8019690 <timer_channel_output_pulse_value_config>
 8012ca8:	fa24 f209 	lsr.w	r2, r4, r9
 8012cac:	1e56      	subs	r6, r2, #1
 8012cae:	4546      	cmp	r6, r8
 8012cb0:	f67f af00 	bls.w	8012ab4 <WS28xxMulti::Setup(unsigned long)+0xf0>
 8012cb4:	4b19      	ldr	r3, [pc, #100]	@ (8012d1c <WS28xxMulti::Setup(unsigned long)+0x358>)
 8012cb6:	4a08      	ldr	r2, [pc, #32]	@ (8012cd8 <WS28xxMulti::Setup(unsigned long)+0x314>)
 8012cb8:	4809      	ldr	r0, [pc, #36]	@ (8012ce0 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8012cba:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8012cbe:	f008 f893 	bl	801ade8 <__assert_func>
 8012cc2:	e6f7      	b.n	8012ab4 <WS28xxMulti::Setup(unsigned long)+0xf0>
 8012cc4:	f240 11e5 	movw	r1, #485	@ 0x1e5
 8012cc8:	4b15      	ldr	r3, [pc, #84]	@ (8012d20 <WS28xxMulti::Setup(unsigned long)+0x35c>)
 8012cca:	4a03      	ldr	r2, [pc, #12]	@ (8012cd8 <WS28xxMulti::Setup(unsigned long)+0x314>)
 8012ccc:	4804      	ldr	r0, [pc, #16]	@ (8012ce0 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8012cce:	f008 f88b 	bl	801ade8 <__assert_func>
 8012cd2:	6839      	ldr	r1, [r7, #0]
 8012cd4:	e724      	b.n	8012b20 <WS28xxMulti::Setup(unsigned long)+0x15c>
 8012cd6:	bf00      	nop
 8012cd8:	0801cf04 	stmdaeq	r1, {r2, r8, r9, sl, fp, lr, pc}
 8012cdc:	0e4e1c00 	cdpeq	12, 4, cr1, cr14, cr0, {0}
 8012ce0:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 8012ce4:	0801cd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, lr, pc}
 8012ce8:	40020000 	andmi	r0, r2, r0
 8012cec:	0801d05c 	stmdaeq	r1, {r2, r3, r4, r6, ip, lr, pc}
 8012cf0:	40000400 	andmi	r0, r0, r0, lsl #8
 8012cf4:	40000800 	andmi	r0, r0, r0, lsl #16
 8012cf8:	e000e100 	and	lr, r0, r0, lsl #2
 8012cfc:	40026000 	andmi	r6, r2, r0
 8012d00:	0801eda4 	stmdaeq	r1, {r2, r5, r7, r8, sl, fp, sp, lr, pc}
 8012d04:	40020828 	andmi	r0, r2, r8, lsr #16
 8012d08:	40020818 	andmi	r0, r2, r8, lsl r8
 8012d0c:	20020000 	andcs	r0, r2, r0
 8012d10:	2000007c 	andcs	r0, r0, ip, ror r0
 8012d14:	0801cdcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, lr, pc}
 8012d18:	0801d08c 	stmdaeq	r1, {r2, r3, r7, ip, lr, pc}
 8012d1c:	0801d0b0 	stmdaeq	r1, {r4, r5, r7, ip, lr, pc}
 8012d20:	0801d0d4 	stmdaeq	r1, {r2, r4, r6, r7, ip, lr, pc}
 8012d24:	4804      	ldr	r0, [pc, #16]	@ (8012d38 <WS28xxMulti::Setup(unsigned long)+0x374>)
 8012d26:	4b05      	ldr	r3, [pc, #20]	@ (8012d3c <WS28xxMulti::Setup(unsigned long)+0x378>)
 8012d28:	4a05      	ldr	r2, [pc, #20]	@ (8012d40 <WS28xxMulti::Setup(unsigned long)+0x37c>)
 8012d2a:	f240 110d 	movw	r1, #269	@ 0x10d
 8012d2e:	f008 f85b 	bl	801ade8 <__assert_func>
 8012d32:	6830      	ldr	r0, [r6, #0]
 8012d34:	e750      	b.n	8012bd8 <WS28xxMulti::Setup(unsigned long)+0x214>
 8012d36:	bf00      	nop
 8012d38:	0801cf68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, lr, pc}
 8012d3c:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 8012d40:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}

08012d44 <WS28xxMulti::WS28xxMulti()>:
 8012d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d46:	4605      	mov	r5, r0
 8012d48:	2300      	movs	r3, #0
 8012d4a:	4cb0      	ldr	r4, [pc, #704]	@ (801300c <WS28xxMulti::WS28xxMulti()+0x2c8>)
 8012d4c:	602b      	str	r3, [r5, #0]
 8012d4e:	4ab0      	ldr	r2, [pc, #704]	@ (8013010 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8012d50:	49b0      	ldr	r1, [pc, #704]	@ (8013014 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012d52:	48b1      	ldr	r0, [pc, #708]	@ (8013018 <WS28xxMulti::WS28xxMulti()+0x2d4>)
 8012d54:	b083      	sub	sp, #12
 8012d56:	237c      	movs	r3, #124	@ 0x7c
 8012d58:	f007 ff66 	bl	801ac28 <printf>
 8012d5c:	6820      	ldr	r0, [r4, #0]
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	f040 818c 	bne.w	801307c <WS28xxMulti::WS28xxMulti()+0x338>
 8012d64:	4fad      	ldr	r7, [pc, #692]	@ (801301c <WS28xxMulti::WS28xxMulti()+0x2d8>)
 8012d66:	4aab      	ldr	r2, [pc, #684]	@ (8013014 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012d68:	49a9      	ldr	r1, [pc, #676]	@ (8013010 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8012d6a:	48ad      	ldr	r0, [pc, #692]	@ (8013020 <WS28xxMulti::WS28xxMulti()+0x2dc>)
 8012d6c:	2608      	movs	r6, #8
 8012d6e:	9600      	str	r6, [sp, #0]
 8012d70:	2381      	movs	r3, #129	@ 0x81
 8012d72:	6025      	str	r5, [r4, #0]
 8012d74:	f007 ff58 	bl	801ac28 <printf>
 8012d78:	683c      	ldr	r4, [r7, #0]
 8012d7a:	2c00      	cmp	r4, #0
 8012d7c:	f000 8175 	beq.w	801306a <WS28xxMulti::WS28xxMulti()+0x326>
 8012d80:	4aa8      	ldr	r2, [pc, #672]	@ (8013024 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 8012d82:	49a9      	ldr	r1, [pc, #676]	@ (8013028 <WS28xxMulti::WS28xxMulti()+0x2e4>)
 8012d84:	48a4      	ldr	r0, [pc, #656]	@ (8013018 <WS28xxMulti::WS28xxMulti()+0x2d4>)
 8012d86:	2397      	movs	r3, #151	@ 0x97
 8012d88:	f007 ff4e 	bl	801ac28 <printf>
 8012d8c:	68e2      	ldr	r2, [r4, #12]
 8012d8e:	6823      	ldr	r3, [r4, #0]
 8012d90:	2a07      	cmp	r2, #7
 8012d92:	f000 80a2 	beq.w	8012eda <WS28xxMulti::WS28xxMulti()+0x196>
 8012d96:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 8012d9a:	f1a2 000b 	sub.w	r0, r2, #11
 8012d9e:	bf28      	it	cs
 8012da0:	f44f 732a 	movcs.w	r3, #680	@ 0x2a8
 8012da4:	2103      	movs	r1, #3
 8012da6:	2801      	cmp	r0, #1
 8012da8:	6926      	ldr	r6, [r4, #16]
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	60a1      	str	r1, [r4, #8]
 8012dae:	f200 8112 	bhi.w	8012fd6 <WS28xxMulti::WS28xxMulti()+0x292>
 8012db2:	7de2      	ldrb	r2, [r4, #23]
 8012db4:	2a1f      	cmp	r2, #31
 8012db6:	bf8c      	ite	hi
 8012db8:	22ff      	movhi	r2, #255	@ 0xff
 8012dba:	f062 021f 	ornls	r2, r2, #31
 8012dbe:	75e2      	strb	r2, [r4, #23]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	2e06      	cmp	r6, #6
 8012dc4:	7522      	strb	r2, [r4, #20]
 8012dc6:	f000 80ba 	beq.w	8012f3e <WS28xxMulti::WS28xxMulti()+0x1fa>
 8012dca:	6866      	ldr	r6, [r4, #4]
 8012dcc:	2e00      	cmp	r6, #0
 8012dce:	d174      	bne.n	8012eba <WS28xxMulti::WS28xxMulti()+0x176>
 8012dd0:	4e96      	ldr	r6, [pc, #600]	@ (801302c <WS28xxMulti::WS28xxMulti()+0x2e8>)
 8012dd2:	6066      	str	r6, [r4, #4]
 8012dd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012dd8:	005a      	lsls	r2, r3, #1
 8012dda:	4f95      	ldr	r7, [pc, #596]	@ (8013030 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 8012ddc:	fbb7 f0f2 	udiv	r0, r7, r2
 8012de0:	4991      	ldr	r1, [pc, #580]	@ (8013028 <WS28xxMulti::WS28xxMulti()+0x2e4>)
 8012de2:	61a0      	str	r0, [r4, #24]
 8012de4:	4a8f      	ldr	r2, [pc, #572]	@ (8013024 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 8012de6:	4893      	ldr	r0, [pc, #588]	@ (8013034 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 8012de8:	23f2      	movs	r3, #242	@ 0xf2
 8012dea:	f007 ff1d 	bl	801ac28 <printf>
 8012dee:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012df2:	f1a7 010b 	sub.w	r1, r7, #11
 8012df6:	2902      	cmp	r1, #2
 8012df8:	f240 8090 	bls.w	8012f1c <WS28xxMulti::WS28xxMulti()+0x1d8>
 8012dfc:	6823      	ldr	r3, [r4, #0]
 8012dfe:	fb06 f303 	mul.w	r3, r6, r3
 8012e02:	4e8d      	ldr	r6, [pc, #564]	@ (8013038 <WS28xxMulti::WS28xxMulti()+0x2f4>)
 8012e04:	4982      	ldr	r1, [pc, #520]	@ (8013010 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8012e06:	488d      	ldr	r0, [pc, #564]	@ (801303c <WS28xxMulti::WS28xxMulti()+0x2f8>)
 8012e08:	00da      	lsls	r2, r3, #3
 8012e0a:	f5a6 4700 	sub.w	r7, r6, #32768	@ 0x8000
 8012e0e:	602a      	str	r2, [r5, #0]
 8012e10:	239c      	movs	r3, #156	@ 0x9c
 8012e12:	4a80      	ldr	r2, [pc, #512]	@ (8013014 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012e14:	9601      	str	r6, [sp, #4]
 8012e16:	9700      	str	r7, [sp, #0]
 8012e18:	f007 ff06 	bl	801ac28 <printf>
 8012e1c:	6828      	ldr	r0, [r5, #0]
 8012e1e:	497c      	ldr	r1, [pc, #496]	@ (8013010 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8012e20:	9000      	str	r0, [sp, #0]
 8012e22:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8012e26:	0a9e      	lsrs	r6, r3, #10
 8012e28:	4a7a      	ldr	r2, [pc, #488]	@ (8013014 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012e2a:	4885      	ldr	r0, [pc, #532]	@ (8013040 <WS28xxMulti::WS28xxMulti()+0x2fc>)
 8012e2c:	9601      	str	r6, [sp, #4]
 8012e2e:	239d      	movs	r3, #157	@ 0x9d
 8012e30:	f007 fefa 	bl	801ac28 <printf>
 8012e34:	6829      	ldr	r1, [r5, #0]
 8012e36:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8012e3a:	f200 810f 	bhi.w	801305c <WS28xxMulti::WS28xxMulti()+0x318>
 8012e3e:	f640 4002 	movw	r0, #3074	@ 0xc02
 8012e42:	f006 f96d 	bl	8019120 <rcu_periph_clock_enable>
 8012e46:	487f      	ldr	r0, [pc, #508]	@ (8013044 <WS28xxMulti::WS28xxMulti()+0x300>)
 8012e48:	4f7f      	ldr	r7, [pc, #508]	@ (8013048 <WS28xxMulti::WS28xxMulti()+0x304>)
 8012e4a:	f44f 537f 	mov.w	r3, #16320	@ 0x3fc0
 8012e4e:	2202      	movs	r2, #2
 8012e50:	2101      	movs	r1, #1
 8012e52:	f006 f8e3 	bl	801901c <gpio_mode_set>
 8012e56:	f44f 537f 	mov.w	r3, #16320	@ 0x3fc0
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	4879      	ldr	r0, [pc, #484]	@ (8013044 <WS28xxMulti::WS28xxMulti()+0x300>)
 8012e5e:	2202      	movs	r2, #2
 8012e60:	f006 f8fe 	bl	8019060 <gpio_output_options_set>
 8012e64:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 8012e68:	f8c7 2828 	str.w	r2, [r7, #2088]	@ 0x828
 8012e6c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8012e70:	f006 f956 	bl	8019120 <rcu_periph_clock_enable>
 8012e74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012e78:	2202      	movs	r2, #2
 8012e7a:	2101      	movs	r1, #1
 8012e7c:	4638      	mov	r0, r7
 8012e7e:	f006 f8cd 	bl	801901c <gpio_mode_set>
 8012e82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012e86:	4638      	mov	r0, r7
 8012e88:	2202      	movs	r2, #2
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	f006 f8e8 	bl	8019060 <gpio_output_options_set>
 8012e90:	7d23      	ldrb	r3, [r4, #20]
 8012e92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8012e96:	61b8      	str	r0, [r7, #24]
 8012e98:	b1d3      	cbz	r3, 8012ed0 <WS28xxMulti::WS28xxMulti()+0x18c>
 8012e9a:	7da2      	ldrb	r2, [r4, #22]
 8012e9c:	7d61      	ldrb	r1, [r4, #21]
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f7ff f882 	bl	8011fa8 <WS28xxMulti::Setup(unsigned char, unsigned char)>
 8012ea4:	f006 fd70 	bl	8019988 <dma::memcpy32_init()>
 8012ea8:	4a59      	ldr	r2, [pc, #356]	@ (8013010 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8012eaa:	495a      	ldr	r1, [pc, #360]	@ (8013014 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012eac:	4861      	ldr	r0, [pc, #388]	@ (8013034 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 8012eae:	23c2      	movs	r3, #194	@ 0xc2
 8012eb0:	f007 feba 	bl	801ac28 <printf>
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	b003      	add	sp, #12
 8012eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eba:	4f64      	ldr	r7, [pc, #400]	@ (801304c <WS28xxMulti::WS28xxMulti()+0x308>)
 8012ebc:	42be      	cmp	r6, r7
 8012ebe:	d840      	bhi.n	8012f42 <WS28xxMulti::WS28xxMulti()+0x1fe>
 8012ec0:	4863      	ldr	r0, [pc, #396]	@ (8013050 <WS28xxMulti::WS28xxMulti()+0x30c>)
 8012ec2:	fbb0 f1f6 	udiv	r1, r0, r6
 8012ec6:	fb03 f101 	mul.w	r1, r3, r1
 8012eca:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8012ece:	e784      	b.n	8012dda <WS28xxMulti::WS28xxMulti()+0x96>
 8012ed0:	6861      	ldr	r1, [r4, #4]
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	f7ff fd76 	bl	80129c4 <WS28xxMulti::Setup(unsigned long)>
 8012ed8:	e7e4      	b.n	8012ea4 <WS28xxMulti::WS28xxMulti()+0x160>
 8012eda:	6920      	ldr	r0, [r4, #16]
 8012edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ee0:	bf28      	it	cs
 8012ee2:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8012ee6:	2104      	movs	r1, #4
 8012ee8:	2601      	movs	r6, #1
 8012eea:	2806      	cmp	r0, #6
 8012eec:	6023      	str	r3, [r4, #0]
 8012eee:	60a1      	str	r1, [r4, #8]
 8012ef0:	7526      	strb	r6, [r4, #20]
 8012ef2:	f000 8136 	beq.w	8013162 <WS28xxMulti::WS28xxMulti()+0x41e>
 8012ef6:	7d67      	ldrb	r7, [r4, #21]
 8012ef8:	f894 e016 	ldrb.w	lr, [r4, #22]
 8012efc:	45be      	cmp	lr, r7
 8012efe:	d823      	bhi.n	8012f48 <WS28xxMulti::WS28xxMulti()+0x204>
 8012f00:	2600      	movs	r6, #0
 8012f02:	2a03      	cmp	r2, #3
 8012f04:	f8a4 6015 	strh.w	r6, [r4, #21]
 8012f08:	d07c      	beq.n	8013004 <WS28xxMulti::WS28xxMulti()+0x2c0>
 8012f0a:	3a08      	subs	r2, #8
 8012f0c:	2a02      	cmp	r2, #2
 8012f0e:	f200 811e 	bhi.w	801314e <WS28xxMulti::WS28xxMulti()+0x40a>
 8012f12:	20fc      	movs	r0, #252	@ 0xfc
 8012f14:	75a0      	strb	r0, [r4, #22]
 8012f16:	27c0      	movs	r7, #192	@ 0xc0
 8012f18:	7567      	strb	r7, [r4, #21]
 8012f1a:	e017      	b.n	8012f4c <WS28xxMulti::WS28xxMulti()+0x208>
 8012f1c:	f240 37fe 	movw	r7, #1022	@ 0x3fe
 8012f20:	4a3c      	ldr	r2, [pc, #240]	@ (8013014 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8012f22:	493b      	ldr	r1, [pc, #236]	@ (8013010 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8012f24:	484b      	ldr	r0, [pc, #300]	@ (8013054 <WS28xxMulti::WS28xxMulti()+0x310>)
 8012f26:	9700      	str	r7, [sp, #0]
 8012f28:	238b      	movs	r3, #139	@ 0x8b
 8012f2a:	f007 fe7d 	bl	801ac28 <printf>
 8012f2e:	6820      	ldr	r0, [r4, #0]
 8012f30:	42b8      	cmp	r0, r7
 8012f32:	d816      	bhi.n	8012f62 <WS28xxMulti::WS28xxMulti()+0x21e>
 8012f34:	fb06 f300 	mul.w	r3, r6, r0
 8012f38:	4403      	add	r3, r0
 8012f3a:	3308      	adds	r3, #8
 8012f3c:	e761      	b.n	8012e02 <WS28xxMulti::WS28xxMulti()+0xbe>
 8012f3e:	6122      	str	r2, [r4, #16]
 8012f40:	e743      	b.n	8012dca <WS28xxMulti::WS28xxMulti()+0x86>
 8012f42:	6067      	str	r7, [r4, #4]
 8012f44:	2200      	movs	r2, #0
 8012f46:	e748      	b.n	8012dda <WS28xxMulti::WS28xxMulti()+0x96>
 8012f48:	2f00      	cmp	r7, #0
 8012f4a:	d0e4      	beq.n	8012f16 <WS28xxMulti::WS28xxMulti()+0x1d2>
 8012f4c:	fb03 f101 	mul.w	r1, r3, r1
 8012f50:	4e41      	ldr	r6, [pc, #260]	@ (8013058 <WS28xxMulti::WS28xxMulti()+0x314>)
 8012f52:	4b37      	ldr	r3, [pc, #220]	@ (8013030 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 8012f54:	6066      	str	r6, [r4, #4]
 8012f56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012f5a:	004a      	lsls	r2, r1, #1
 8012f5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012f60:	e73e      	b.n	8012de0 <WS28xxMulti::WS28xxMulti()+0x9c>
 8012f62:	4a30      	ldr	r2, [pc, #192]	@ (8013024 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 8012f64:	4930      	ldr	r1, [pc, #192]	@ (8013028 <WS28xxMulti::WS28xxMulti()+0x2e4>)
 8012f66:	482c      	ldr	r0, [pc, #176]	@ (8013018 <WS28xxMulti::WS28xxMulti()+0x2d4>)
 8012f68:	6027      	str	r7, [r4, #0]
 8012f6a:	2397      	movs	r3, #151	@ 0x97
 8012f6c:	f007 fe5c 	bl	801ac28 <printf>
 8012f70:	68e2      	ldr	r2, [r4, #12]
 8012f72:	6823      	ldr	r3, [r4, #0]
 8012f74:	2a07      	cmp	r2, #7
 8012f76:	f000 809f 	beq.w	80130b8 <WS28xxMulti::WS28xxMulti()+0x374>
 8012f7a:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 8012f7e:	f1a2 010b 	sub.w	r1, r2, #11
 8012f82:	bf28      	it	cs
 8012f84:	f44f 732a 	movcs.w	r3, #680	@ 0x2a8
 8012f88:	2003      	movs	r0, #3
 8012f8a:	2901      	cmp	r1, #1
 8012f8c:	6927      	ldr	r7, [r4, #16]
 8012f8e:	6023      	str	r3, [r4, #0]
 8012f90:	60a0      	str	r0, [r4, #8]
 8012f92:	f200 80bc 	bhi.w	801310e <WS28xxMulti::WS28xxMulti()+0x3ca>
 8012f96:	7de1      	ldrb	r1, [r4, #23]
 8012f98:	291f      	cmp	r1, #31
 8012f9a:	bf8c      	ite	hi
 8012f9c:	21ff      	movhi	r1, #255	@ 0xff
 8012f9e:	f061 011f 	ornls	r1, r1, #31
 8012fa2:	75e1      	strb	r1, [r4, #23]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	2f06      	cmp	r7, #6
 8012fa8:	7522      	strb	r2, [r4, #20]
 8012faa:	f000 80ae 	beq.w	801310a <WS28xxMulti::WS28xxMulti()+0x3c6>
 8012fae:	6860      	ldr	r0, [r4, #4]
 8012fb0:	2800      	cmp	r0, #0
 8012fb2:	d174      	bne.n	801309e <WS28xxMulti::WS28xxMulti()+0x35a>
 8012fb4:	4f1d      	ldr	r7, [pc, #116]	@ (801302c <WS28xxMulti::WS28xxMulti()+0x2e8>)
 8012fb6:	6067      	str	r7, [r4, #4]
 8012fb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012fbc:	0058      	lsls	r0, r3, #1
 8012fbe:	491c      	ldr	r1, [pc, #112]	@ (8013030 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 8012fc0:	fbb1 f1f0 	udiv	r1, r1, r0
 8012fc4:	61a1      	str	r1, [r4, #24]
 8012fc6:	4a17      	ldr	r2, [pc, #92]	@ (8013024 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 8012fc8:	4917      	ldr	r1, [pc, #92]	@ (8013028 <WS28xxMulti::WS28xxMulti()+0x2e4>)
 8012fca:	481a      	ldr	r0, [pc, #104]	@ (8013034 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 8012fcc:	23f2      	movs	r3, #242	@ 0xf2
 8012fce:	f007 fe2b 	bl	801ac28 <printf>
 8012fd2:	6820      	ldr	r0, [r4, #0]
 8012fd4:	e7ae      	b.n	8012f34 <WS28xxMulti::WS28xxMulti()+0x1f0>
 8012fd6:	2a00      	cmp	r2, #0
 8012fd8:	f43f aef3 	beq.w	8012dc2 <WS28xxMulti::WS28xxMulti()+0x7e>
 8012fdc:	2a0d      	cmp	r2, #13
 8012fde:	d054      	beq.n	801308a <WS28xxMulti::WS28xxMulti()+0x346>
 8012fe0:	2701      	movs	r7, #1
 8012fe2:	2a0e      	cmp	r2, #14
 8012fe4:	7527      	strb	r7, [r4, #20]
 8012fe6:	f040 80a2 	bne.w	801312e <WS28xxMulti::WS28xxMulti()+0x3ea>
 8012fea:	2e06      	cmp	r6, #6
 8012fec:	7d67      	ldrb	r7, [r4, #21]
 8012fee:	f894 c016 	ldrb.w	ip, [r4, #22]
 8012ff2:	60e1      	str	r1, [r4, #12]
 8012ff4:	bf04      	itt	eq
 8012ff6:	2202      	moveq	r2, #2
 8012ff8:	6122      	streq	r2, [r4, #16]
 8012ffa:	45bc      	cmp	ip, r7
 8012ffc:	d8a4      	bhi.n	8012f48 <WS28xxMulti::WS28xxMulti()+0x204>
 8012ffe:	2000      	movs	r0, #0
 8013000:	f8a4 0015 	strh.w	r0, [r4, #21]
 8013004:	20f8      	movs	r0, #248	@ 0xf8
 8013006:	75a0      	strb	r0, [r4, #22]
 8013008:	e785      	b.n	8012f16 <WS28xxMulti::WS28xxMulti()+0x1d2>
 801300a:	bf00      	nop
 801300c:	2000c91c 	andcs	ip, r0, ip, lsl r9
 8013010:	0801d0ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, ip, lr, pc}
 8013014:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 8013018:	0801cd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, lr, pc}
 801301c:	2000007c 	andcs	r0, r0, ip, ror r0
 8013020:	0801d10c 	stmdaeq	r1, {r2, r3, r8, ip, lr, pc}
 8013024:	0801cd94 	stmdaeq	r1, {r2, r4, r7, r8, sl, fp, lr, pc}
 8013028:	0801cf68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, lr, pc}
 801302c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8013030:	000f4240 	andeq	r4, pc, r0, asr #4
 8013034:	0801cdcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, lr, pc}
 8013038:	20028000 	andcs	r8, r2, r0
 801303c:	0801d154 	stmdaeq	r1, {r2, r4, r6, r8, ip, lr, pc}
 8013040:	0801d184 	stmdaeq	r1, {r2, r7, r8, ip, lr, pc}
 8013044:	40020800 	andmi	r0, r2, r0, lsl #16
 8013048:	40020000 	andmi	r0, r2, r0
 801304c:	017d7840 	cmneq	sp, r0, asr #16
 8013050:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8013054:	0801d130 	stmdaeq	r1, {r4, r5, r8, ip, lr, pc}
 8013058:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 801305c:	4b59      	ldr	r3, [pc, #356]	@ (80131c4 <WS28xxMulti::WS28xxMulti()+0x480>)
 801305e:	4a5a      	ldr	r2, [pc, #360]	@ (80131c8 <WS28xxMulti::WS28xxMulti()+0x484>)
 8013060:	485a      	ldr	r0, [pc, #360]	@ (80131cc <WS28xxMulti::WS28xxMulti()+0x488>)
 8013062:	219e      	movs	r1, #158	@ 0x9e
 8013064:	f007 fec0 	bl	801ade8 <__assert_func>
 8013068:	e6e9      	b.n	8012e3e <WS28xxMulti::WS28xxMulti()+0xfa>
 801306a:	4b59      	ldr	r3, [pc, #356]	@ (80131d0 <WS28xxMulti::WS28xxMulti()+0x48c>)
 801306c:	4a59      	ldr	r2, [pc, #356]	@ (80131d4 <WS28xxMulti::WS28xxMulti()+0x490>)
 801306e:	485a      	ldr	r0, [pc, #360]	@ (80131d8 <WS28xxMulti::WS28xxMulti()+0x494>)
 8013070:	f240 110d 	movw	r1, #269	@ 0x10d
 8013074:	f007 feb8 	bl	801ade8 <__assert_func>
 8013078:	683c      	ldr	r4, [r7, #0]
 801307a:	e681      	b.n	8012d80 <WS28xxMulti::WS28xxMulti()+0x3c>
 801307c:	4b57      	ldr	r3, [pc, #348]	@ (80131dc <WS28xxMulti::WS28xxMulti()+0x498>)
 801307e:	4a52      	ldr	r2, [pc, #328]	@ (80131c8 <WS28xxMulti::WS28xxMulti()+0x484>)
 8013080:	4852      	ldr	r0, [pc, #328]	@ (80131cc <WS28xxMulti::WS28xxMulti()+0x488>)
 8013082:	217e      	movs	r1, #126	@ 0x7e
 8013084:	f007 feb0 	bl	801ade8 <__assert_func>
 8013088:	e66c      	b.n	8012d64 <WS28xxMulti::WS28xxMulti()+0x20>
 801308a:	2100      	movs	r1, #0
 801308c:	2e06      	cmp	r6, #6
 801308e:	7521      	strb	r1, [r4, #20]
 8013090:	d010      	beq.n	80130b4 <WS28xxMulti::WS28xxMulti()+0x370>
 8013092:	6866      	ldr	r6, [r4, #4]
 8013094:	2e00      	cmp	r6, #0
 8013096:	f43f ae9b 	beq.w	8012dd0 <WS28xxMulti::WS28xxMulti()+0x8c>
 801309a:	4f51      	ldr	r7, [pc, #324]	@ (80131e0 <WS28xxMulti::WS28xxMulti()+0x49c>)
 801309c:	e70e      	b.n	8012ebc <WS28xxMulti::WS28xxMulti()+0x178>
 801309e:	4f51      	ldr	r7, [pc, #324]	@ (80131e4 <WS28xxMulti::WS28xxMulti()+0x4a0>)
 80130a0:	42b8      	cmp	r0, r7
 80130a2:	d857      	bhi.n	8013154 <WS28xxMulti::WS28xxMulti()+0x410>
 80130a4:	4950      	ldr	r1, [pc, #320]	@ (80131e8 <WS28xxMulti::WS28xxMulti()+0x4a4>)
 80130a6:	fbb1 f2f0 	udiv	r2, r1, r0
 80130aa:	fb03 f202 	mul.w	r2, r3, r2
 80130ae:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 80130b2:	e784      	b.n	8012fbe <WS28xxMulti::WS28xxMulti()+0x27a>
 80130b4:	6121      	str	r1, [r4, #16]
 80130b6:	e7ec      	b.n	8013092 <WS28xxMulti::WS28xxMulti()+0x34e>
 80130b8:	6921      	ldr	r1, [r4, #16]
 80130ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130be:	bf28      	it	cs
 80130c0:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80130c4:	2004      	movs	r0, #4
 80130c6:	2701      	movs	r7, #1
 80130c8:	2906      	cmp	r1, #6
 80130ca:	6023      	str	r3, [r4, #0]
 80130cc:	60a0      	str	r0, [r4, #8]
 80130ce:	7527      	strb	r7, [r4, #20]
 80130d0:	d072      	beq.n	80131b8 <WS28xxMulti::WS28xxMulti()+0x474>
 80130d2:	7d61      	ldrb	r1, [r4, #21]
 80130d4:	f894 c016 	ldrb.w	ip, [r4, #22]
 80130d8:	458c      	cmp	ip, r1
 80130da:	d83f      	bhi.n	801315c <WS28xxMulti::WS28xxMulti()+0x418>
 80130dc:	2700      	movs	r7, #0
 80130de:	2a03      	cmp	r2, #3
 80130e0:	f8a4 7015 	strh.w	r7, [r4, #21]
 80130e4:	d055      	beq.n	8013192 <WS28xxMulti::WS28xxMulti()+0x44e>
 80130e6:	3a08      	subs	r2, #8
 80130e8:	2a02      	cmp	r2, #2
 80130ea:	d863      	bhi.n	80131b4 <WS28xxMulti::WS28xxMulti()+0x470>
 80130ec:	21fc      	movs	r1, #252	@ 0xfc
 80130ee:	75a1      	strb	r1, [r4, #22]
 80130f0:	27c0      	movs	r7, #192	@ 0xc0
 80130f2:	7567      	strb	r7, [r4, #21]
 80130f4:	fb00 f303 	mul.w	r3, r0, r3
 80130f8:	4f3c      	ldr	r7, [pc, #240]	@ (80131ec <WS28xxMulti::WS28xxMulti()+0x4a8>)
 80130fa:	4a3d      	ldr	r2, [pc, #244]	@ (80131f0 <WS28xxMulti::WS28xxMulti()+0x4ac>)
 80130fc:	6067      	str	r7, [r4, #4]
 80130fe:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8013102:	0043      	lsls	r3, r0, #1
 8013104:	fbb2 f1f3 	udiv	r1, r2, r3
 8013108:	e75c      	b.n	8012fc4 <WS28xxMulti::WS28xxMulti()+0x280>
 801310a:	6122      	str	r2, [r4, #16]
 801310c:	e74f      	b.n	8012fae <WS28xxMulti::WS28xxMulti()+0x26a>
 801310e:	2a00      	cmp	r2, #0
 8013110:	f43f af49 	beq.w	8012fa6 <WS28xxMulti::WS28xxMulti()+0x262>
 8013114:	2a0d      	cmp	r2, #13
 8013116:	d129      	bne.n	801316c <WS28xxMulti::WS28xxMulti()+0x428>
 8013118:	2200      	movs	r2, #0
 801311a:	2f06      	cmp	r7, #6
 801311c:	7522      	strb	r2, [r4, #20]
 801311e:	d100      	bne.n	8013122 <WS28xxMulti::WS28xxMulti()+0x3de>
 8013120:	6122      	str	r2, [r4, #16]
 8013122:	6860      	ldr	r0, [r4, #4]
 8013124:	2800      	cmp	r0, #0
 8013126:	f43f af45 	beq.w	8012fb4 <WS28xxMulti::WS28xxMulti()+0x270>
 801312a:	4f2d      	ldr	r7, [pc, #180]	@ (80131e0 <WS28xxMulti::WS28xxMulti()+0x49c>)
 801312c:	e7b8      	b.n	80130a0 <WS28xxMulti::WS28xxMulti()+0x35c>
 801312e:	2e06      	cmp	r6, #6
 8013130:	f47f aee1 	bne.w	8012ef6 <WS28xxMulti::WS28xxMulti()+0x1b2>
 8013134:	1e50      	subs	r0, r2, #1
 8013136:	2809      	cmp	r0, #9
 8013138:	d913      	bls.n	8013162 <WS28xxMulti::WS28xxMulti()+0x41e>
 801313a:	7d67      	ldrb	r7, [r4, #21]
 801313c:	7da6      	ldrb	r6, [r4, #22]
 801313e:	2202      	movs	r2, #2
 8013140:	42be      	cmp	r6, r7
 8013142:	6122      	str	r2, [r4, #16]
 8013144:	f63f af00 	bhi.w	8012f48 <WS28xxMulti::WS28xxMulti()+0x204>
 8013148:	2700      	movs	r7, #0
 801314a:	f8a4 7015 	strh.w	r7, [r4, #21]
 801314e:	20f0      	movs	r0, #240	@ 0xf0
 8013150:	75a0      	strb	r0, [r4, #22]
 8013152:	e6e0      	b.n	8012f16 <WS28xxMulti::WS28xxMulti()+0x1d2>
 8013154:	6067      	str	r7, [r4, #4]
 8013156:	2000      	movs	r0, #0
 8013158:	e731      	b.n	8012fbe <WS28xxMulti::WS28xxMulti()+0x27a>
 801315a:	2003      	movs	r0, #3
 801315c:	2900      	cmp	r1, #0
 801315e:	d1c9      	bne.n	80130f4 <WS28xxMulti::WS28xxMulti()+0x3b0>
 8013160:	e7c6      	b.n	80130f0 <WS28xxMulti::WS28xxMulti()+0x3ac>
 8013162:	4f24      	ldr	r7, [pc, #144]	@ (80131f4 <WS28xxMulti::WS28xxMulti()+0x4b0>)
 8013164:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8013168:	6120      	str	r0, [r4, #16]
 801316a:	e6c4      	b.n	8012ef6 <WS28xxMulti::WS28xxMulti()+0x1b2>
 801316c:	2101      	movs	r1, #1
 801316e:	2a0e      	cmp	r2, #14
 8013170:	7521      	strb	r1, [r4, #20]
 8013172:	d110      	bne.n	8013196 <WS28xxMulti::WS28xxMulti()+0x452>
 8013174:	2f06      	cmp	r7, #6
 8013176:	7d61      	ldrb	r1, [r4, #21]
 8013178:	f894 c016 	ldrb.w	ip, [r4, #22]
 801317c:	60e0      	str	r0, [r4, #12]
 801317e:	bf04      	itt	eq
 8013180:	2702      	moveq	r7, #2
 8013182:	6127      	streq	r7, [r4, #16]
 8013184:	458c      	cmp	ip, r1
 8013186:	d8e9      	bhi.n	801315c <WS28xxMulti::WS28xxMulti()+0x418>
 8013188:	f04f 0e00 	mov.w	lr, #0
 801318c:	f8a4 e015 	strh.w	lr, [r4, #21]
 8013190:	2003      	movs	r0, #3
 8013192:	21f8      	movs	r1, #248	@ 0xf8
 8013194:	e7ab      	b.n	80130ee <WS28xxMulti::WS28xxMulti()+0x3aa>
 8013196:	2f06      	cmp	r7, #6
 8013198:	d19b      	bne.n	80130d2 <WS28xxMulti::WS28xxMulti()+0x38e>
 801319a:	1e51      	subs	r1, r2, #1
 801319c:	2909      	cmp	r1, #9
 801319e:	d90b      	bls.n	80131b8 <WS28xxMulti::WS28xxMulti()+0x474>
 80131a0:	7d61      	ldrb	r1, [r4, #21]
 80131a2:	7da0      	ldrb	r0, [r4, #22]
 80131a4:	2202      	movs	r2, #2
 80131a6:	4288      	cmp	r0, r1
 80131a8:	6122      	str	r2, [r4, #16]
 80131aa:	d8d6      	bhi.n	801315a <WS28xxMulti::WS28xxMulti()+0x416>
 80131ac:	2700      	movs	r7, #0
 80131ae:	f8a4 7015 	strh.w	r7, [r4, #21]
 80131b2:	2003      	movs	r0, #3
 80131b4:	21f0      	movs	r1, #240	@ 0xf0
 80131b6:	e79a      	b.n	80130ee <WS28xxMulti::WS28xxMulti()+0x3aa>
 80131b8:	4f0e      	ldr	r7, [pc, #56]	@ (80131f4 <WS28xxMulti::WS28xxMulti()+0x4b0>)
 80131ba:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80131be:	6121      	str	r1, [r4, #16]
 80131c0:	e787      	b.n	80130d2 <WS28xxMulti::WS28xxMulti()+0x38e>
 80131c2:	bf00      	nop
 80131c4:	0801d1ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, ip, lr, pc}
 80131c8:	0801d0ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, ip, lr, pc}
 80131cc:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 80131d0:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 80131d4:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}
 80131d8:	0801cf68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, lr, pc}
 80131dc:	0801d0f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, ip, lr, pc}
 80131e0:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80131e4:	017d7840 	cmneq	sp, r0, asr #16
 80131e8:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80131ec:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80131f0:	000f4240 	andeq	r4, pc, r0, asr #4
 80131f4:	0801ed7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, sp, lr, pc}

080131f8 <WS28xxMulti::Blackout()>:
 80131f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fc:	4a75      	ldr	r2, [pc, #468]	@ (80133d4 <WS28xxMulti::Blackout()+0x1dc>)
 80131fe:	4976      	ldr	r1, [pc, #472]	@ (80133d8 <WS28xxMulti::Blackout()+0x1e0>)
 8013200:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 8013400 <WS28xxMulti::Blackout()+0x208>
 8013204:	b087      	sub	sp, #28
 8013206:	4607      	mov	r7, r0
 8013208:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 801320c:	4873      	ldr	r0, [pc, #460]	@ (80133dc <WS28xxMulti::Blackout()+0x1e4>)
 801320e:	f007 fd0b 	bl	801ac28 <printf>
 8013212:	f3bf 8f5f 	dmb	sy
 8013216:	f898 3000 	ldrb.w	r3, [r8]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1f9      	bne.n	8013212 <WS28xxMulti::Blackout()+0x1a>
 801321e:	4c70      	ldr	r4, [pc, #448]	@ (80133e0 <WS28xxMulti::Blackout()+0x1e8>)
 8013220:	6820      	ldr	r0, [r4, #0]
 8013222:	2800      	cmp	r0, #0
 8013224:	f000 80c5 	beq.w	80133b2 <WS28xxMulti::Blackout()+0x1ba>
 8013228:	7d06      	ldrb	r6, [r0, #20]
 801322a:	b34e      	cbz	r6, 8013280 <WS28xxMulti::Blackout()+0x88>
 801322c:	4e6d      	ldr	r6, [pc, #436]	@ (80133e4 <WS28xxMulti::Blackout()+0x1ec>)
 801322e:	496e      	ldr	r1, [pc, #440]	@ (80133e8 <WS28xxMulti::Blackout()+0x1f0>)
 8013230:	f506 3480 	add.w	r4, r6, #65536	@ 0x10000
 8013234:	e9c6 1100 	strd	r1, r1, [r6]
 8013238:	e9c6 1102 	strd	r1, r1, [r6, #8]
 801323c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8013240:	3640      	adds	r6, #64	@ 0x40
 8013242:	42b4      	cmp	r4, r6
 8013244:	e946 110a 	strd	r1, r1, [r6, #-40]	@ 0x28
 8013248:	e946 1108 	strd	r1, r1, [r6, #-32]
 801324c:	e946 1106 	strd	r1, r1, [r6, #-24]
 8013250:	e946 1104 	strd	r1, r1, [r6, #-16]
 8013254:	e946 1102 	strd	r1, r1, [r6, #-8]
 8013258:	d1ec      	bne.n	8013234 <WS28xxMulti::Blackout()+0x3c>
 801325a:	4638      	mov	r0, r7
 801325c:	f7fe ffce 	bl	80121fc <WS28xxMulti::Update()>
 8013260:	f3bf 8f5f 	dmb	sy
 8013264:	f898 7000 	ldrb.w	r7, [r8]
 8013268:	2f00      	cmp	r7, #0
 801326a:	d1f9      	bne.n	8013260 <WS28xxMulti::Blackout()+0x68>
 801326c:	4a59      	ldr	r2, [pc, #356]	@ (80133d4 <WS28xxMulti::Blackout()+0x1dc>)
 801326e:	495a      	ldr	r1, [pc, #360]	@ (80133d8 <WS28xxMulti::Blackout()+0x1e0>)
 8013270:	485e      	ldr	r0, [pc, #376]	@ (80133ec <WS28xxMulti::Blackout()+0x1f4>)
 8013272:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 8013276:	b007      	add	sp, #28
 8013278:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	f007 bcd4 	b.w	801ac28 <printf>
 8013280:	68c2      	ldr	r2, [r0, #12]
 8013282:	f1a2 010b 	sub.w	r1, r2, #11
 8013286:	2902      	cmp	r1, #2
 8013288:	9104      	str	r1, [sp, #16]
 801328a:	f200 8085 	bhi.w	8013398 <WS28xxMulti::Blackout()+0x1a0>
 801328e:	f8d0 a000 	ldr.w	sl, [r0]
 8013292:	f10a 0501 	add.w	r5, sl, #1
 8013296:	9505      	str	r5, [sp, #20]
 8013298:	4634      	mov	r4, r6
 801329a:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 801329e:	2300      	movs	r3, #0
 80132a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80132a4:	9400      	str	r4, [sp, #0]
 80132a6:	461a      	mov	r2, r3
 80132a8:	4631      	mov	r1, r6
 80132aa:	4638      	mov	r0, r7
 80132ac:	f7ff fad2 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80132b0:	f1ba 0f00 	cmp.w	sl, #0
 80132b4:	d05f      	beq.n	8013376 <WS28xxMulti::Blackout()+0x17e>
 80132b6:	f10a 33ff 	add.w	r3, sl, #4294967295	@ 0xffffffff
 80132ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80132be:	9400      	str	r4, [sp, #0]
 80132c0:	f003 0903 	and.w	r9, r3, #3
 80132c4:	2201      	movs	r2, #1
 80132c6:	23e0      	movs	r3, #224	@ 0xe0
 80132c8:	4631      	mov	r1, r6
 80132ca:	4638      	mov	r0, r7
 80132cc:	2502      	movs	r5, #2
 80132ce:	f7ff fac1 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80132d2:	4555      	cmp	r5, sl
 80132d4:	d84f      	bhi.n	8013376 <WS28xxMulti::Blackout()+0x17e>
 80132d6:	f1b9 0f00 	cmp.w	r9, #0
 80132da:	d025      	beq.n	8013328 <WS28xxMulti::Blackout()+0x130>
 80132dc:	f1b9 0f01 	cmp.w	r9, #1
 80132e0:	d016      	beq.n	8013310 <WS28xxMulti::Blackout()+0x118>
 80132e2:	f1b9 0f02 	cmp.w	r9, #2
 80132e6:	d009      	beq.n	80132fc <WS28xxMulti::Blackout()+0x104>
 80132e8:	462a      	mov	r2, r5
 80132ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80132ee:	9400      	str	r4, [sp, #0]
 80132f0:	23e0      	movs	r3, #224	@ 0xe0
 80132f2:	4631      	mov	r1, r6
 80132f4:	4638      	mov	r0, r7
 80132f6:	f7ff faad 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80132fa:	2503      	movs	r5, #3
 80132fc:	462a      	mov	r2, r5
 80132fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013302:	9400      	str	r4, [sp, #0]
 8013304:	23e0      	movs	r3, #224	@ 0xe0
 8013306:	4631      	mov	r1, r6
 8013308:	4638      	mov	r0, r7
 801330a:	f7ff faa3 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801330e:	3501      	adds	r5, #1
 8013310:	462a      	mov	r2, r5
 8013312:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013316:	9400      	str	r4, [sp, #0]
 8013318:	23e0      	movs	r3, #224	@ 0xe0
 801331a:	4631      	mov	r1, r6
 801331c:	4638      	mov	r0, r7
 801331e:	3501      	adds	r5, #1
 8013320:	f7ff fa98 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8013324:	4555      	cmp	r5, sl
 8013326:	d826      	bhi.n	8013376 <WS28xxMulti::Blackout()+0x17e>
 8013328:	462a      	mov	r2, r5
 801332a:	23e0      	movs	r3, #224	@ 0xe0
 801332c:	4631      	mov	r1, r6
 801332e:	4638      	mov	r0, r7
 8013330:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013334:	9400      	str	r4, [sp, #0]
 8013336:	f7ff fa8d 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801333a:	1c6a      	adds	r2, r5, #1
 801333c:	23e0      	movs	r3, #224	@ 0xe0
 801333e:	4631      	mov	r1, r6
 8013340:	4638      	mov	r0, r7
 8013342:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013346:	9400      	str	r4, [sp, #0]
 8013348:	f7ff fa84 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801334c:	1caa      	adds	r2, r5, #2
 801334e:	23e0      	movs	r3, #224	@ 0xe0
 8013350:	4631      	mov	r1, r6
 8013352:	4638      	mov	r0, r7
 8013354:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013358:	9400      	str	r4, [sp, #0]
 801335a:	f7ff fa7b 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801335e:	1cea      	adds	r2, r5, #3
 8013360:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013364:	23e0      	movs	r3, #224	@ 0xe0
 8013366:	9400      	str	r4, [sp, #0]
 8013368:	4631      	mov	r1, r6
 801336a:	4638      	mov	r0, r7
 801336c:	3504      	adds	r5, #4
 801336e:	f7ff fa71 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8013372:	4555      	cmp	r5, sl
 8013374:	d9d8      	bls.n	8013328 <WS28xxMulti::Blackout()+0x130>
 8013376:	9804      	ldr	r0, [sp, #16]
 8013378:	2802      	cmp	r0, #2
 801337a:	d015      	beq.n	80133a8 <WS28xxMulti::Blackout()+0x1b0>
 801337c:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8013380:	f8cd b000 	str.w	fp, [sp]
 8013384:	23ff      	movs	r3, #255	@ 0xff
 8013386:	4631      	mov	r1, r6
 8013388:	9a05      	ldr	r2, [sp, #20]
 801338a:	4638      	mov	r0, r7
 801338c:	3601      	adds	r6, #1
 801338e:	f7ff fa61 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8013392:	2e08      	cmp	r6, #8
 8013394:	d183      	bne.n	801329e <WS28xxMulti::Blackout()+0xa6>
 8013396:	e760      	b.n	801325a <WS28xxMulti::Blackout()+0x62>
 8013398:	b9a2      	cbnz	r2, 80133c4 <WS28xxMulti::Blackout()+0x1cc>
 801339a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801339e:	2100      	movs	r1, #0
 80133a0:	4810      	ldr	r0, [pc, #64]	@ (80133e4 <WS28xxMulti::Blackout()+0x1ec>)
 80133a2:	f007 f95d 	bl	801a660 <memset>
 80133a6:	e758      	b.n	801325a <WS28xxMulti::Blackout()+0x62>
 80133a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80133ac:	9400      	str	r4, [sp, #0]
 80133ae:	2300      	movs	r3, #0
 80133b0:	e7e9      	b.n	8013386 <WS28xxMulti::Blackout()+0x18e>
 80133b2:	480f      	ldr	r0, [pc, #60]	@ (80133f0 <WS28xxMulti::Blackout()+0x1f8>)
 80133b4:	4b0f      	ldr	r3, [pc, #60]	@ (80133f4 <WS28xxMulti::Blackout()+0x1fc>)
 80133b6:	4a10      	ldr	r2, [pc, #64]	@ (80133f8 <WS28xxMulti::Blackout()+0x200>)
 80133b8:	f240 110d 	movw	r1, #269	@ 0x10d
 80133bc:	f007 fd14 	bl	801ade8 <__assert_func>
 80133c0:	6820      	ldr	r0, [r4, #0]
 80133c2:	e731      	b.n	8013228 <WS28xxMulti::Blackout()+0x30>
 80133c4:	4b0d      	ldr	r3, [pc, #52]	@ (80133fc <WS28xxMulti::Blackout()+0x204>)
 80133c6:	4a03      	ldr	r2, [pc, #12]	@ (80133d4 <WS28xxMulti::Blackout()+0x1dc>)
 80133c8:	4803      	ldr	r0, [pc, #12]	@ (80133d8 <WS28xxMulti::Blackout()+0x1e0>)
 80133ca:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80133ce:	f007 fd0b 	bl	801ade8 <__assert_func>
 80133d2:	e7e2      	b.n	801339a <WS28xxMulti::Blackout()+0x1a2>
 80133d4:	0801d1d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, ip, lr, pc}
 80133d8:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 80133dc:	0801cd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, lr, pc}
 80133e0:	2000007c 	andcs	r0, r0, ip, ror r0
 80133e4:	20020000 	andcs	r0, r2, r0
 80133e8:	3fc03fc0 	svccc	0x00c03fc0
 80133ec:	0801cdcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, lr, pc}
 80133f0:	0801cf68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, lr, pc}
 80133f4:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 80133f8:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}
 80133fc:	0801d1e0 	stmdaeq	r1, {r5, r6, r7, r8, ip, lr, pc}
 8013400:	2000c920 	andcs	ip, r0, r0, lsr #18

08013404 <WS28xxMulti::FullOn()>:
 8013404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013408:	4a75      	ldr	r2, [pc, #468]	@ (80135e0 <WS28xxMulti::FullOn()+0x1dc>)
 801340a:	4976      	ldr	r1, [pc, #472]	@ (80135e4 <WS28xxMulti::FullOn()+0x1e0>)
 801340c:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 8013608 <WS28xxMulti::FullOn()+0x204>
 8013410:	b087      	sub	sp, #28
 8013412:	4607      	mov	r7, r0
 8013414:	f240 23e1 	movw	r3, #737	@ 0x2e1
 8013418:	4873      	ldr	r0, [pc, #460]	@ (80135e8 <WS28xxMulti::FullOn()+0x1e4>)
 801341a:	f007 fc05 	bl	801ac28 <printf>
 801341e:	f3bf 8f5f 	dmb	sy
 8013422:	f898 3000 	ldrb.w	r3, [r8]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d1f9      	bne.n	801341e <WS28xxMulti::FullOn()+0x1a>
 801342a:	4c70      	ldr	r4, [pc, #448]	@ (80135ec <WS28xxMulti::FullOn()+0x1e8>)
 801342c:	6820      	ldr	r0, [r4, #0]
 801342e:	2800      	cmp	r0, #0
 8013430:	f000 80c5 	beq.w	80135be <WS28xxMulti::FullOn()+0x1ba>
 8013434:	7d06      	ldrb	r6, [r0, #20]
 8013436:	b1c6      	cbz	r6, 801346a <WS28xxMulti::FullOn()+0x66>
 8013438:	486d      	ldr	r0, [pc, #436]	@ (80135f0 <WS28xxMulti::FullOn()+0x1ec>)
 801343a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801343e:	2100      	movs	r1, #0
 8013440:	f007 f90e 	bl	801a660 <memset>
 8013444:	4638      	mov	r0, r7
 8013446:	f7fe fed9 	bl	80121fc <WS28xxMulti::Update()>
 801344a:	f3bf 8f5f 	dmb	sy
 801344e:	f898 7000 	ldrb.w	r7, [r8]
 8013452:	2f00      	cmp	r7, #0
 8013454:	d1f9      	bne.n	801344a <WS28xxMulti::FullOn()+0x46>
 8013456:	4a62      	ldr	r2, [pc, #392]	@ (80135e0 <WS28xxMulti::FullOn()+0x1dc>)
 8013458:	4962      	ldr	r1, [pc, #392]	@ (80135e4 <WS28xxMulti::FullOn()+0x1e0>)
 801345a:	4866      	ldr	r0, [pc, #408]	@ (80135f4 <WS28xxMulti::FullOn()+0x1f0>)
 801345c:	f240 3315 	movw	r3, #789	@ 0x315
 8013460:	b007      	add	sp, #28
 8013462:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013466:	f007 bbdf 	b.w	801ac28 <printf>
 801346a:	68c2      	ldr	r2, [r0, #12]
 801346c:	f1a2 010b 	sub.w	r1, r2, #11
 8013470:	2902      	cmp	r1, #2
 8013472:	9104      	str	r1, [sp, #16]
 8013474:	f200 8084 	bhi.w	8013580 <WS28xxMulti::FullOn()+0x17c>
 8013478:	f8d0 a000 	ldr.w	sl, [r0]
 801347c:	f10a 0001 	add.w	r0, sl, #1
 8013480:	9005      	str	r0, [sp, #20]
 8013482:	46b3      	mov	fp, r6
 8013484:	24ff      	movs	r4, #255	@ 0xff
 8013486:	2300      	movs	r3, #0
 8013488:	e9cd bb01 	strd	fp, fp, [sp, #4]
 801348c:	f8cd b000 	str.w	fp, [sp]
 8013490:	461a      	mov	r2, r3
 8013492:	4631      	mov	r1, r6
 8013494:	4638      	mov	r0, r7
 8013496:	f7ff f9dd 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801349a:	f1ba 0f00 	cmp.w	sl, #0
 801349e:	d05f      	beq.n	8013560 <WS28xxMulti::FullOn()+0x15c>
 80134a0:	f10a 32ff 	add.w	r2, sl, #4294967295	@ 0xffffffff
 80134a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80134a8:	9400      	str	r4, [sp, #0]
 80134aa:	f002 0903 	and.w	r9, r2, #3
 80134ae:	23e0      	movs	r3, #224	@ 0xe0
 80134b0:	2201      	movs	r2, #1
 80134b2:	4631      	mov	r1, r6
 80134b4:	4638      	mov	r0, r7
 80134b6:	2502      	movs	r5, #2
 80134b8:	f7ff f9cc 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80134bc:	4555      	cmp	r5, sl
 80134be:	d84f      	bhi.n	8013560 <WS28xxMulti::FullOn()+0x15c>
 80134c0:	f1b9 0f00 	cmp.w	r9, #0
 80134c4:	d025      	beq.n	8013512 <WS28xxMulti::FullOn()+0x10e>
 80134c6:	f1b9 0f01 	cmp.w	r9, #1
 80134ca:	d016      	beq.n	80134fa <WS28xxMulti::FullOn()+0xf6>
 80134cc:	f1b9 0f02 	cmp.w	r9, #2
 80134d0:	d009      	beq.n	80134e6 <WS28xxMulti::FullOn()+0xe2>
 80134d2:	462a      	mov	r2, r5
 80134d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80134d8:	9400      	str	r4, [sp, #0]
 80134da:	23e0      	movs	r3, #224	@ 0xe0
 80134dc:	4631      	mov	r1, r6
 80134de:	4638      	mov	r0, r7
 80134e0:	f7ff f9b8 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80134e4:	2503      	movs	r5, #3
 80134e6:	462a      	mov	r2, r5
 80134e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80134ec:	9400      	str	r4, [sp, #0]
 80134ee:	23e0      	movs	r3, #224	@ 0xe0
 80134f0:	4631      	mov	r1, r6
 80134f2:	4638      	mov	r0, r7
 80134f4:	f7ff f9ae 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80134f8:	3501      	adds	r5, #1
 80134fa:	462a      	mov	r2, r5
 80134fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013500:	9400      	str	r4, [sp, #0]
 8013502:	23e0      	movs	r3, #224	@ 0xe0
 8013504:	4631      	mov	r1, r6
 8013506:	4638      	mov	r0, r7
 8013508:	3501      	adds	r5, #1
 801350a:	f7ff f9a3 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801350e:	4555      	cmp	r5, sl
 8013510:	d826      	bhi.n	8013560 <WS28xxMulti::FullOn()+0x15c>
 8013512:	462a      	mov	r2, r5
 8013514:	23e0      	movs	r3, #224	@ 0xe0
 8013516:	4631      	mov	r1, r6
 8013518:	4638      	mov	r0, r7
 801351a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801351e:	9400      	str	r4, [sp, #0]
 8013520:	f7ff f998 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8013524:	1c6a      	adds	r2, r5, #1
 8013526:	23e0      	movs	r3, #224	@ 0xe0
 8013528:	4631      	mov	r1, r6
 801352a:	4638      	mov	r0, r7
 801352c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013530:	9400      	str	r4, [sp, #0]
 8013532:	f7ff f98f 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8013536:	1caa      	adds	r2, r5, #2
 8013538:	23e0      	movs	r3, #224	@ 0xe0
 801353a:	4631      	mov	r1, r6
 801353c:	4638      	mov	r0, r7
 801353e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8013542:	9400      	str	r4, [sp, #0]
 8013544:	f7ff f986 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8013548:	1cea      	adds	r2, r5, #3
 801354a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801354e:	23e0      	movs	r3, #224	@ 0xe0
 8013550:	9400      	str	r4, [sp, #0]
 8013552:	4631      	mov	r1, r6
 8013554:	4638      	mov	r0, r7
 8013556:	3504      	adds	r5, #4
 8013558:	f7ff f97c 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801355c:	4555      	cmp	r5, sl
 801355e:	d9d8      	bls.n	8013512 <WS28xxMulti::FullOn()+0x10e>
 8013560:	9904      	ldr	r1, [sp, #16]
 8013562:	2902      	cmp	r1, #2
 8013564:	d025      	beq.n	80135b2 <WS28xxMulti::FullOn()+0x1ae>
 8013566:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801356a:	9400      	str	r4, [sp, #0]
 801356c:	23ff      	movs	r3, #255	@ 0xff
 801356e:	4631      	mov	r1, r6
 8013570:	9a05      	ldr	r2, [sp, #20]
 8013572:	4638      	mov	r0, r7
 8013574:	3601      	adds	r6, #1
 8013576:	f7ff f96d 	bl	8012854 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801357a:	2e08      	cmp	r6, #8
 801357c:	d183      	bne.n	8013486 <WS28xxMulti::FullOn()+0x82>
 801357e:	e761      	b.n	8013444 <WS28xxMulti::FullOn()+0x40>
 8013580:	bb32      	cbnz	r2, 80135d0 <WS28xxMulti::FullOn()+0x1cc>
 8013582:	4d1b      	ldr	r5, [pc, #108]	@ (80135f0 <WS28xxMulti::FullOn()+0x1ec>)
 8013584:	23ff      	movs	r3, #255	@ 0xff
 8013586:	f505 3480 	add.w	r4, r5, #65536	@ 0x10000
 801358a:	e9c5 3300 	strd	r3, r3, [r5]
 801358e:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8013592:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8013596:	3540      	adds	r5, #64	@ 0x40
 8013598:	42ac      	cmp	r4, r5
 801359a:	e945 330a 	strd	r3, r3, [r5, #-40]	@ 0x28
 801359e:	e945 3308 	strd	r3, r3, [r5, #-32]
 80135a2:	e945 3306 	strd	r3, r3, [r5, #-24]
 80135a6:	e945 3304 	strd	r3, r3, [r5, #-16]
 80135aa:	e945 3302 	strd	r3, r3, [r5, #-8]
 80135ae:	d1ec      	bne.n	801358a <WS28xxMulti::FullOn()+0x186>
 80135b0:	e748      	b.n	8013444 <WS28xxMulti::FullOn()+0x40>
 80135b2:	e9cd bb01 	strd	fp, fp, [sp, #4]
 80135b6:	f8cd b000 	str.w	fp, [sp]
 80135ba:	2300      	movs	r3, #0
 80135bc:	e7d7      	b.n	801356e <WS28xxMulti::FullOn()+0x16a>
 80135be:	480e      	ldr	r0, [pc, #56]	@ (80135f8 <WS28xxMulti::FullOn()+0x1f4>)
 80135c0:	4b0e      	ldr	r3, [pc, #56]	@ (80135fc <WS28xxMulti::FullOn()+0x1f8>)
 80135c2:	4a0f      	ldr	r2, [pc, #60]	@ (8013600 <WS28xxMulti::FullOn()+0x1fc>)
 80135c4:	f240 110d 	movw	r1, #269	@ 0x10d
 80135c8:	f007 fc0e 	bl	801ade8 <__assert_func>
 80135cc:	6820      	ldr	r0, [r4, #0]
 80135ce:	e731      	b.n	8013434 <WS28xxMulti::FullOn()+0x30>
 80135d0:	4b0c      	ldr	r3, [pc, #48]	@ (8013604 <WS28xxMulti::FullOn()+0x200>)
 80135d2:	4a03      	ldr	r2, [pc, #12]	@ (80135e0 <WS28xxMulti::FullOn()+0x1dc>)
 80135d4:	4803      	ldr	r0, [pc, #12]	@ (80135e4 <WS28xxMulti::FullOn()+0x1e0>)
 80135d6:	f240 3103 	movw	r1, #771	@ 0x303
 80135da:	f007 fc05 	bl	801ade8 <__assert_func>
 80135de:	e7d0      	b.n	8013582 <WS28xxMulti::FullOn()+0x17e>
 80135e0:	0801d1fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, ip, lr, pc}
 80135e4:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 80135e8:	0801cd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, lr, pc}
 80135ec:	2000007c 	andcs	r0, r0, ip, ror r0
 80135f0:	20020000 	andcs	r0, r2, r0
 80135f4:	0801cdcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, lr, pc}
 80135f8:	0801cf68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, lr, pc}
 80135fc:	0801cb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, lr, pc}
 8013600:	0801cba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr, pc}
 8013604:	0801d1e0 	stmdaeq	r1, {r5, r6, r7, r8, ip, lr, pc}
 8013608:	2000c920 	andcs	ip, r0, r0, lsr #18

0801360c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>:
 801360c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013610:	290f      	cmp	r1, #15
 8013612:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8013616:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801361a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801361e:	460c      	mov	r4, r1
 8013620:	4682      	mov	sl, r0
 8013622:	4691      	mov	r9, r2
 8013624:	461d      	mov	r5, r3
 8013626:	f200 8086 	bhi.w	8013736 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x12a>
 801362a:	f8da 3000 	ldr.w	r3, [sl]
 801362e:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 8013632:	f080 808d 	bcs.w	8013750 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x144>
 8013636:	4a4a      	ldr	r2, [pc, #296]	@ (8013760 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x154>)
 8013638:	3406      	adds	r4, #6
 801363a:	eb02 1189 	add.w	r1, r2, r9, lsl #6
 801363e:	b2e0      	uxtb	r0, r4
 8013640:	f101 7488 	add.w	r4, r1, #17825792	@ 0x1100000
 8013644:	3430      	adds	r4, #48	@ 0x30
 8013646:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 801364a:	f10c 0080 	add.w	r0, ip, #128	@ 0x80
 801364e:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8013652:	ebaa 098c 	sub.w	r9, sl, ip, lsl #2
 8013656:	4663      	mov	r3, ip
 8013658:	ea5f 6049 	movs.w	r0, r9, lsl #25
 801365c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013660:	f04f 0400 	mov.w	r4, #0
 8013664:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8013668:	f04f 0e01 	mov.w	lr, #1
 801366c:	d53a      	bpl.n	80136e4 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd8>
 801366e:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 8013672:	0631      	lsls	r1, r6, #24
 8013674:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013678:	bf4c      	ite	mi
 801367a:	f8cc 4000 	strmi.w	r4, [ip]
 801367e:	f8cc e000 	strpl.w	lr, [ip]
 8013682:	f5a2 7300 	sub.w	r3, r2, #512	@ 0x200
 8013686:	0628      	lsls	r0, r5, #24
 8013688:	bf4c      	ite	mi
 801368a:	600c      	strmi	r4, [r1, #0]
 801368c:	f8c1 e000 	strpl.w	lr, [r1]
 8013690:	0639      	lsls	r1, r7, #24
 8013692:	bf4c      	ite	mi
 8013694:	601c      	strmi	r4, [r3, #0]
 8013696:	f8c3 e000 	strpl.w	lr, [r3]
 801369a:	f018 0f80 	tst.w	r8, #128	@ 0x80
 801369e:	bf14      	ite	ne
 80136a0:	6014      	strne	r4, [r2, #0]
 80136a2:	f8c2 e000 	streq.w	lr, [r2]
 80136a6:	2340      	movs	r3, #64	@ 0x40
 80136a8:	3240      	adds	r2, #64	@ 0x40
 80136aa:	e019      	b.n	80136e0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd4>
 80136ac:	f8c2 e000 	str.w	lr, [r2]
 80136b0:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80136b4:	4229      	tst	r1, r5
 80136b6:	f5a0 7900 	sub.w	r9, r0, #512	@ 0x200
 80136ba:	bf14      	ite	ne
 80136bc:	601c      	strne	r4, [r3, #0]
 80136be:	f8c3 e000 	streq.w	lr, [r3]
 80136c2:	4239      	tst	r1, r7
 80136c4:	bf14      	ite	ne
 80136c6:	f8c9 4000 	strne.w	r4, [r9]
 80136ca:	f8c9 e000 	streq.w	lr, [r9]
 80136ce:	ea11 0f08 	tst.w	r1, r8
 80136d2:	bf14      	ite	ne
 80136d4:	6004      	strne	r4, [r0, #0]
 80136d6:	f8c0 e000 	streq.w	lr, [r0]
 80136da:	f100 0240 	add.w	r2, r0, #64	@ 0x40
 80136de:	084b      	lsrs	r3, r1, #1
 80136e0:	4552      	cmp	r2, sl
 80136e2:	d026      	beq.n	8013732 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x126>
 80136e4:	f5a2 60c0 	sub.w	r0, r2, #1536	@ 0x600
 80136e8:	4233      	tst	r3, r6
 80136ea:	f5a2 6980 	sub.w	r9, r2, #1024	@ 0x400
 80136ee:	bf0c      	ite	eq
 80136f0:	f8c0 e000 	streq.w	lr, [r0]
 80136f4:	6004      	strne	r4, [r0, #0]
 80136f6:	f5a2 7c00 	sub.w	ip, r2, #512	@ 0x200
 80136fa:	422b      	tst	r3, r5
 80136fc:	bf0c      	ite	eq
 80136fe:	f8c9 e000 	streq.w	lr, [r9]
 8013702:	f8c9 4000 	strne.w	r4, [r9]
 8013706:	423b      	tst	r3, r7
 8013708:	bf0c      	ite	eq
 801370a:	f8cc e000 	streq.w	lr, [ip]
 801370e:	f8cc 4000 	strne.w	r4, [ip]
 8013712:	ea13 0f08 	tst.w	r3, r8
 8013716:	bf0c      	ite	eq
 8013718:	f8c2 e000 	streq.w	lr, [r2]
 801371c:	6014      	strne	r4, [r2, #0]
 801371e:	0859      	lsrs	r1, r3, #1
 8013720:	ea16 0353 	ands.w	r3, r6, r3, lsr #1
 8013724:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8013728:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 801372c:	d0be      	beq.n	80136ac <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa0>
 801372e:	6014      	str	r4, [r2, #0]
 8013730:	e7be      	b.n	80136b0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
 8013732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013736:	4b0b      	ldr	r3, [pc, #44]	@ (8013764 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>)
 8013738:	4a0b      	ldr	r2, [pc, #44]	@ (8013768 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 801373a:	480c      	ldr	r0, [pc, #48]	@ (801376c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 801373c:	f240 3187 	movw	r1, #903	@ 0x387
 8013740:	f007 fb52 	bl	801ade8 <__assert_func>
 8013744:	f8da 3000 	ldr.w	r3, [sl]
 8013748:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 801374c:	f4ff af73 	bcc.w	8013636 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 8013750:	4b07      	ldr	r3, [pc, #28]	@ (8013770 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 8013752:	4a05      	ldr	r2, [pc, #20]	@ (8013768 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 8013754:	4805      	ldr	r0, [pc, #20]	@ (801376c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 8013756:	f44f 7162 	mov.w	r1, #904	@ 0x388
 801375a:	f007 fb45 	bl	801ade8 <__assert_func>
 801375e:	e76a      	b.n	8013636 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 8013760:	20020000 	andcs	r0, r2, r0
 8013764:	0801d00c 	stmdaeq	r1, {r2, r3, ip, lr, pc}
 8013768:	0801cffc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr, pc}
 801376c:	0801cee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, lr, pc}
 8013770:	0801d02c 	stmdaeq	r1, {r2, r3, r5, ip, lr, pc}

08013774 <memcpy.isra.0>:
 8013774:	440a      	add	r2, r1
 8013776:	4291      	cmp	r1, r2
 8013778:	d100      	bne.n	801377c <memcpy.isra.0+0x8>
 801377a:	4770      	bx	lr
 801377c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013780:	f800 3b01 	strb.w	r3, [r0], #1
 8013784:	e7f7      	b.n	8013776 <memcpy.isra.0+0x2>

08013786 <strlen>:
 8013786:	4603      	mov	r3, r0
 8013788:	461a      	mov	r2, r3
 801378a:	3301      	adds	r3, #1
 801378c:	7811      	ldrb	r1, [r2, #0]
 801378e:	2900      	cmp	r1, #0
 8013790:	d1fa      	bne.n	8013788 <strlen+0x2>
 8013792:	1a10      	subs	r0, r2, r0
 8013794:	4770      	bx	lr
	...

08013798 <mdns::Domain::AddDotLocal()>:
 8013798:	b510      	push	{r4, lr}
 801379a:	4604      	mov	r4, r0
 801379c:	f8b0 0100 	ldrh.w	r0, [r0, #256]	@ 0x100
 80137a0:	4905      	ldr	r1, [pc, #20]	@ (80137b8 <mdns::Domain::AddDotLocal()+0x20>)
 80137a2:	2207      	movs	r2, #7
 80137a4:	4420      	add	r0, r4
 80137a6:	f7ff ffe5 	bl	8013774 <memcpy.isra.0>
 80137aa:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 80137ae:	3307      	adds	r3, #7
 80137b0:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 80137b4:	bd10      	pop	{r4, pc}
 80137b6:	bf00      	nop
 80137b8:	0801efa2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, fp, sp, lr, pc}

080137bc <create_host_domain(mdns::Domain&)>:
 80137bc:	2300      	movs	r3, #0
 80137be:	b570      	push	{r4, r5, r6, lr}
 80137c0:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 80137c4:	4b0c      	ldr	r3, [pc, #48]	@ (80137f8 <create_host_domain(mdns::Domain&)+0x3c>)
 80137c6:	681e      	ldr	r6, [r3, #0]
 80137c8:	3616      	adds	r6, #22
 80137ca:	4604      	mov	r4, r0
 80137cc:	4630      	mov	r0, r6
 80137ce:	f7ff ffda 	bl	8013786 <strlen>
 80137d2:	2301      	movs	r3, #1
 80137d4:	7020      	strb	r0, [r4, #0]
 80137d6:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 80137da:	4602      	mov	r2, r0
 80137dc:	4605      	mov	r5, r0
 80137de:	4631      	mov	r1, r6
 80137e0:	18e0      	adds	r0, r4, r3
 80137e2:	f7ff ffc7 	bl	8013774 <memcpy.isra.0>
 80137e6:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 80137ea:	441d      	add	r5, r3
 80137ec:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
 80137f0:	4620      	mov	r0, r4
 80137f2:	f7ff ffd1 	bl	8013798 <mdns::Domain::AddDotLocal()>
 80137f6:	bd70      	pop	{r4, r5, r6, pc}
 80137f8:	2000cb68 	andcs	ip, r0, r8, ror #22

080137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>:
 80137fc:	2300      	movs	r3, #0
 80137fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013802:	4604      	mov	r4, r0
 8013804:	460e      	mov	r6, r1
 8013806:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801380a:	b1aa      	cbz	r2, 8013838 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x3c>
 801380c:	680f      	ldr	r7, [r1, #0]
 801380e:	f100 0801 	add.w	r8, r0, #1
 8013812:	b3b7      	cbz	r7, 8013882 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x86>
 8013814:	4638      	mov	r0, r7
 8013816:	f7ff ffb6 	bl	8013786 <strlen>
 801381a:	2301      	movs	r3, #1
 801381c:	4605      	mov	r5, r0
 801381e:	7020      	strb	r0, [r4, #0]
 8013820:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8013824:	4602      	mov	r2, r0
 8013826:	4639      	mov	r1, r7
 8013828:	4640      	mov	r0, r8
 801382a:	f7ff ffa3 	bl	8013774 <memcpy.isra.0>
 801382e:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 8013832:	441d      	add	r5, r3
 8013834:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
 8013838:	4b15      	ldr	r3, [pc, #84]	@ (8013890 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x94>)
 801383a:	68f6      	ldr	r6, [r6, #12]
 801383c:	f8b4 0100 	ldrh.w	r0, [r4, #256]	@ 0x100
 8013840:	0131      	lsls	r1, r6, #4
 8013842:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 8013846:	5859      	ldr	r1, [r3, r1]
 8013848:	88b5      	ldrh	r5, [r6, #4]
 801384a:	4420      	add	r0, r4
 801384c:	462a      	mov	r2, r5
 801384e:	f7ff ff91 	bl	8013774 <memcpy.isra.0>
 8013852:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 8013856:	18e8      	adds	r0, r5, r3
 8013858:	68b3      	ldr	r3, [r6, #8]
 801385a:	b280      	uxth	r0, r0
 801385c:	f8a4 0100 	strh.w	r0, [r4, #256]	@ 0x100
 8013860:	2205      	movs	r2, #5
 8013862:	4420      	add	r0, r4
 8013864:	b98b      	cbnz	r3, 801388a <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x8e>
 8013866:	490b      	ldr	r1, [pc, #44]	@ (8013894 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x98>)
 8013868:	f7ff ff84 	bl	8013774 <memcpy.isra.0>
 801386c:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 8013870:	3305      	adds	r3, #5
 8013872:	b29b      	uxth	r3, r3
 8013874:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8013878:	4620      	mov	r0, r4
 801387a:	f7ff ff8d 	bl	8013798 <mdns::Domain::AddDotLocal()>
 801387e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013882:	4b05      	ldr	r3, [pc, #20]	@ (8013898 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x9c>)
 8013884:	681f      	ldr	r7, [r3, #0]
 8013886:	3716      	adds	r7, #22
 8013888:	e7c4      	b.n	8013814 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x18>
 801388a:	4904      	ldr	r1, [pc, #16]	@ (801389c <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xa0>)
 801388c:	e7ec      	b.n	8013868 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x6c>
 801388e:	bf00      	nop
 8013890:	0801eec8 	stmdaeq	r1, {r3, r6, r7, r9, sl, fp, sp, lr, pc}
 8013894:	0801ef9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr, pc}
 8013898:	2000cb68 	andcs	ip, r0, r8, ror #22
 801389c:	0801ef98 	stmdaeq	r1, {r3, r4, r7, r8, r9, sl, fp, sp, lr, pc}

080138a0 <mdns::Domain::Print(bool)>:
 80138a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a4:	4605      	mov	r5, r0
 80138a6:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 80138e4 <mdns::Domain::Print(bool)+0x44>
 80138aa:	2020      	movs	r0, #32
 80138ac:	460e      	mov	r6, r1
 80138ae:	f007 fa0b 	bl	801acc8 <putchar>
 80138b2:	462a      	mov	r2, r5
 80138b4:	7817      	ldrb	r7, [r2, #0]
 80138b6:	b92f      	cbnz	r7, 80138c4 <mdns::Domain::Print(bool)+0x24>
 80138b8:	b18e      	cbz	r6, 80138de <mdns::Domain::Print(bool)+0x3e>
 80138ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138be:	200a      	movs	r0, #10
 80138c0:	f007 ba02 	b.w	801acc8 <putchar>
 80138c4:	f8b5 3100 	ldrh.w	r3, [r5, #256]	@ 0x100
 80138c8:	442b      	add	r3, r5
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d2f4      	bcs.n	80138b8 <mdns::Domain::Print(bool)+0x18>
 80138ce:	1c54      	adds	r4, r2, #1
 80138d0:	4622      	mov	r2, r4
 80138d2:	4639      	mov	r1, r7
 80138d4:	4640      	mov	r0, r8
 80138d6:	f007 f9a7 	bl	801ac28 <printf>
 80138da:	19e2      	adds	r2, r4, r7
 80138dc:	e7ea      	b.n	80138b4 <mdns::Domain::Print(bool)+0x14>
 80138de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e2:	bf00      	nop
 80138e4:	0801c154 	stmdaeq	r1, {r2, r4, r6, r8, lr, pc}

080138e8 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>:
 80138e8:	f8b0 2100 	ldrh.w	r2, [r0, #256]	@ 0x100
 80138ec:	f8b1 3100 	ldrh.w	r3, [r1, #256]	@ 0x100
 80138f0:	4293      	cmp	r3, r2
 80138f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f6:	d127      	bne.n	8013948 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 80138f8:	18c2      	adds	r2, r0, r3
 80138fa:	7803      	ldrb	r3, [r0, #0]
 80138fc:	b11b      	cbz	r3, 8013906 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x1e>
 80138fe:	780c      	ldrb	r4, [r1, #0]
 8013900:	b10c      	cbz	r4, 8013906 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x1e>
 8013902:	4290      	cmp	r0, r2
 8013904:	d301      	bcc.n	801390a <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x22>
 8013906:	2001      	movs	r0, #1
 8013908:	e01f      	b.n	801394a <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x62>
 801390a:	42a3      	cmp	r3, r4
 801390c:	d11c      	bne.n	8013948 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 801390e:	4684      	mov	ip, r0
 8013910:	460f      	mov	r7, r1
 8013912:	461e      	mov	r6, r3
 8013914:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8013918:	f1a4 0541 	sub.w	r5, r4, #65	@ 0x41
 801391c:	2d19      	cmp	r5, #25
 801391e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8013922:	f1a5 0841 	sub.w	r8, r5, #65	@ 0x41
 8013926:	46a6      	mov	lr, r4
 8013928:	bf98      	it	ls
 801392a:	f104 0e20 	addls.w	lr, r4, #32
 801392e:	f1b8 0f19 	cmp.w	r8, #25
 8013932:	bf98      	it	ls
 8013934:	3520      	addls	r5, #32
 8013936:	4575      	cmp	r5, lr
 8013938:	d106      	bne.n	8013948 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 801393a:	b10c      	cbz	r4, 8013940 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x58>
 801393c:	3e01      	subs	r6, #1
 801393e:	d1e9      	bne.n	8013914 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x2c>
 8013940:	3301      	adds	r3, #1
 8013942:	4418      	add	r0, r3
 8013944:	4419      	add	r1, r3
 8013946:	e7d8      	b.n	80138fa <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x12>
 8013948:	2000      	movs	r0, #0
 801394a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801394e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)>:
 801394e:	f892 c000 	ldrb.w	ip, [r2]
 8013952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013956:	ea6f 050c 	mvn.w	r5, ip
 801395a:	4606      	mov	r6, r0
 801395c:	440d      	add	r5, r1
 801395e:	42b5      	cmp	r5, r6
 8013960:	4628      	mov	r0, r5
 8013962:	d201      	bcs.n	8013968 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1a>
 8013964:	2000      	movs	r0, #0
 8013966:	e040      	b.n	80139ea <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x9c>
 8013968:	7803      	ldrb	r3, [r0, #0]
 801396a:	4563      	cmp	r3, ip
 801396c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8013970:	d1f5      	bne.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 8013972:	78ac      	ldrb	r4, [r5, #2]
 8013974:	7853      	ldrb	r3, [r2, #1]
 8013976:	429c      	cmp	r4, r3
 8013978:	d1f1      	bne.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801397a:	4604      	mov	r4, r0
 801397c:	4617      	mov	r7, r2
 801397e:	e018      	b.n	80139b2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x64>
 8013980:	4573      	cmp	r3, lr
 8013982:	db27      	blt.n	80139d4 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x86>
 8013984:	e7eb      	b.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 8013986:	2b3f      	cmp	r3, #63	@ 0x3f
 8013988:	d913      	bls.n	80139b2 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x64>
 801398a:	2bbf      	cmp	r3, #191	@ 0xbf
 801398c:	d9e7      	bls.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801398e:	f104 0e01 	add.w	lr, r4, #1
 8013992:	4571      	cmp	r1, lr
 8013994:	d9e3      	bls.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 8013996:	f894 e001 	ldrb.w	lr, [r4, #1]
 801399a:	021b      	lsls	r3, r3, #8
 801399c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80139a0:	4473      	add	r3, lr
 80139a2:	eb06 0e03 	add.w	lr, r6, r3
 80139a6:	4574      	cmp	r4, lr
 80139a8:	d3d9      	bcc.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80139aa:	5cf3      	ldrb	r3, [r6, r3]
 80139ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80139ae:	d8d6      	bhi.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80139b0:	4674      	mov	r4, lr
 80139b2:	783b      	ldrb	r3, [r7, #0]
 80139b4:	eb04 0e03 	add.w	lr, r4, r3
 80139b8:	4571      	cmp	r1, lr
 80139ba:	d9d0      	bls.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80139bc:	f04f 0e00 	mov.w	lr, #0
 80139c0:	f814 900e 	ldrb.w	r9, [r4, lr]
 80139c4:	f817 800e 	ldrb.w	r8, [r7, lr]
 80139c8:	45c1      	cmp	r9, r8
 80139ca:	d1d9      	bne.n	8013980 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x32>
 80139cc:	f10e 0e01 	add.w	lr, lr, #1
 80139d0:	4573      	cmp	r3, lr
 80139d2:	daf5      	bge.n	80139c0 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x72>
 80139d4:	3301      	adds	r3, #1
 80139d6:	441f      	add	r7, r3
 80139d8:	441c      	add	r4, r3
 80139da:	f897 e000 	ldrb.w	lr, [r7]
 80139de:	7823      	ldrb	r3, [r4, #0]
 80139e0:	f1be 0f00 	cmp.w	lr, #0
 80139e4:	d1cf      	bne.n	8013986 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x38>
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d1b9      	bne.n	801395e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80139ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>:
 80139f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139f2:	460a      	mov	r2, r1
 80139f4:	4606      	mov	r6, r0
 80139f6:	4605      	mov	r5, r0
 80139f8:	7814      	ldrb	r4, [r2, #0]
 80139fa:	b91c      	cbnz	r4, 8013a04 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x14>
 80139fc:	4628      	mov	r0, r5
 80139fe:	f800 4b01 	strb.w	r4, [r0], #1
 8013a02:	e00e      	b.n	8013a22 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x32>
 8013a04:	4810      	ldr	r0, [pc, #64]	@ (8013a48 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x58>)
 8013a06:	4631      	mov	r1, r6
 8013a08:	f7ff ffa1 	bl	801394e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)>
 8013a0c:	b150      	cbz	r0, 8013a24 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x34>
 8013a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8013a48 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x58>)
 8013a10:	1ac3      	subs	r3, r0, r3
 8013a12:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013a16:	4628      	mov	r0, r5
 8013a18:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 8013a1c:	f800 2b02 	strb.w	r2, [r0], #2
 8013a20:	706b      	strb	r3, [r5, #1]
 8013a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a24:	462b      	mov	r3, r5
 8013a26:	3201      	adds	r2, #1
 8013a28:	f803 4b01 	strb.w	r4, [r3], #1
 8013a2c:	4617      	mov	r7, r2
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013a34:	f800 1b01 	strb.w	r1, [r0], #1
 8013a38:	1b41      	subs	r1, r0, r5
 8013a3a:	3901      	subs	r1, #1
 8013a3c:	42a1      	cmp	r1, r4
 8013a3e:	d3f7      	bcc.n	8013a30 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x40>
 8013a40:	4422      	add	r2, r4
 8013a42:	191d      	adds	r5, r3, r4
 8013a44:	e7d8      	b.n	80139f8 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x8>
 8013a46:	bf00      	nop
 8013a48:	2000c93d 	andcs	ip, r0, sp, lsr r9

08013a4c <add_answer_a(unsigned char*, unsigned long)>:
 8013a4c:	b530      	push	{r4, r5, lr}
 8013a4e:	b0c3      	sub	sp, #268	@ 0x10c
 8013a50:	4605      	mov	r5, r0
 8013a52:	a801      	add	r0, sp, #4
 8013a54:	460c      	mov	r4, r1
 8013a56:	f7ff feb1 	bl	80137bc <create_host_domain(mdns::Domain&)>
 8013a5a:	a901      	add	r1, sp, #4
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	f7ff ffc7 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013a62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a66:	8003      	strh	r3, [r0, #0]
 8013a68:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013a6c:	8043      	strh	r3, [r0, #2]
 8013a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013a72:	8103      	strh	r3, [r0, #8]
 8013a74:	4b04      	ldr	r3, [pc, #16]	@ (8013a88 <add_answer_a(unsigned char*, unsigned long)+0x3c>)
 8013a76:	ba24      	rev	r4, r4
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	6044      	str	r4, [r0, #4]
 8013a7c:	f8c0 300a 	str.w	r3, [r0, #10]
 8013a80:	300e      	adds	r0, #14
 8013a82:	1b40      	subs	r0, r0, r5
 8013a84:	b043      	add	sp, #268	@ 0x10c
 8013a86:	bd30      	pop	{r4, r5, pc}
 8013a88:	2000cb88 	andcs	ip, r0, r8, lsl #23

08013a8c <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]>:
 8013a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a8e:	4e11      	ldr	r6, [pc, #68]	@ (8013ad4 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]+0x48>)
 8013a90:	b0c3      	sub	sp, #268	@ 0x10c
 8013a92:	4607      	mov	r7, r0
 8013a94:	460d      	mov	r5, r1
 8013a96:	4630      	mov	r0, r6
 8013a98:	490f      	ldr	r1, [pc, #60]	@ (8013ad8 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]+0x4c>)
 8013a9a:	f7ff ffa9 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013a9e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8013aa2:	8003      	strh	r3, [r0, #0]
 8013aa4:	ba2d      	rev	r5, r5
 8013aa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013aaa:	8043      	strh	r3, [r0, #2]
 8013aac:	4604      	mov	r4, r0
 8013aae:	6045      	str	r5, [r0, #4]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f100 050a 	add.w	r5, r0, #10
 8013ab6:	4639      	mov	r1, r7
 8013ab8:	a801      	add	r0, sp, #4
 8013aba:	f7ff fe9f 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013abe:	a901      	add	r1, sp, #4
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f7ff ff95 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013ac6:	1b45      	subs	r5, r0, r5
 8013ac8:	ba6d      	rev16	r5, r5
 8013aca:	1b80      	subs	r0, r0, r6
 8013acc:	8125      	strh	r5, [r4, #8]
 8013ace:	b043      	add	sp, #268	@ 0x10c
 8013ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	2000c949 	andcs	ip, r0, r9, asr #18
 8013ad8:	0801edc4 	stmdaeq	r1, {r2, r6, r7, r8, sl, fp, sp, lr, pc}

08013adc <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 8013adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ade:	b0c3      	sub	sp, #268	@ 0x10c
 8013ae0:	460e      	mov	r6, r1
 8013ae2:	4607      	mov	r7, r0
 8013ae4:	4601      	mov	r1, r0
 8013ae6:	4615      	mov	r5, r2
 8013ae8:	a801      	add	r0, sp, #4
 8013aea:	2201      	movs	r2, #1
 8013aec:	f7ff fe86 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013af0:	a901      	add	r1, sp, #4
 8013af2:	4630      	mov	r0, r6
 8013af4:	f7ff ff7c 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013af8:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8013afc:	8003      	strh	r3, [r0, #0]
 8013afe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8013b02:	8043      	strh	r3, [r0, #2]
 8013b04:	2300      	movs	r3, #0
 8013b06:	f8c0 300a 	str.w	r3, [r0, #10]
 8013b0a:	ba2d      	rev	r5, r5
 8013b0c:	897b      	ldrh	r3, [r7, #10]
 8013b0e:	81c3      	strh	r3, [r0, #14]
 8013b10:	4604      	mov	r4, r0
 8013b12:	6045      	str	r5, [r0, #4]
 8013b14:	f100 0510 	add.w	r5, r0, #16
 8013b18:	a801      	add	r0, sp, #4
 8013b1a:	f7ff fe4f 	bl	80137bc <create_host_domain(mdns::Domain&)>
 8013b1e:	a901      	add	r1, sp, #4
 8013b20:	4628      	mov	r0, r5
 8013b22:	f7ff ff65 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013b26:	1d83      	adds	r3, r0, #6
 8013b28:	1b5b      	subs	r3, r3, r5
 8013b2a:	ba5b      	rev16	r3, r3
 8013b2c:	1b80      	subs	r0, r0, r6
 8013b2e:	8123      	strh	r3, [r4, #8]
 8013b30:	b043      	add	sp, #268	@ 0x10c
 8013b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b34 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 8013b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b36:	b0c3      	sub	sp, #268	@ 0x10c
 8013b38:	460e      	mov	r6, r1
 8013b3a:	4607      	mov	r7, r0
 8013b3c:	4601      	mov	r1, r0
 8013b3e:	4615      	mov	r5, r2
 8013b40:	a801      	add	r0, sp, #4
 8013b42:	2200      	movs	r2, #0
 8013b44:	f7ff fe5a 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013b48:	a901      	add	r1, sp, #4
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	f7ff ff50 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013b50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8013b54:	8003      	strh	r3, [r0, #0]
 8013b56:	ba2d      	rev	r5, r5
 8013b58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013b5c:	8043      	strh	r3, [r0, #2]
 8013b5e:	4604      	mov	r4, r0
 8013b60:	6045      	str	r5, [r0, #4]
 8013b62:	2201      	movs	r2, #1
 8013b64:	f100 050a 	add.w	r5, r0, #10
 8013b68:	4639      	mov	r1, r7
 8013b6a:	a801      	add	r0, sp, #4
 8013b6c:	f7ff fe46 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013b70:	a901      	add	r1, sp, #4
 8013b72:	4628      	mov	r0, r5
 8013b74:	f7ff ff3c 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013b78:	1b45      	subs	r5, r0, r5
 8013b7a:	ba6d      	rev16	r5, r5
 8013b7c:	1b80      	subs	r0, r0, r6
 8013b7e:	8125      	strh	r5, [r4, #8]
 8013b80:	b043      	add	sp, #268	@ 0x10c
 8013b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013b84 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 8013b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b86:	b0c3      	sub	sp, #268	@ 0x10c
 8013b88:	4604      	mov	r4, r0
 8013b8a:	460e      	mov	r6, r1
 8013b8c:	4615      	mov	r5, r2
 8013b8e:	4601      	mov	r1, r0
 8013b90:	2201      	movs	r2, #1
 8013b92:	a801      	add	r0, sp, #4
 8013b94:	f7ff fe32 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8013b98:	a901      	add	r1, sp, #4
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	f7ff ff28 	bl	80139f0 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8013ba0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013ba4:	8002      	strh	r2, [r0, #0]
 8013ba6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8013baa:	8042      	strh	r2, [r0, #2]
 8013bac:	6862      	ldr	r2, [r4, #4]
 8013bae:	ba2d      	rev	r5, r5
 8013bb0:	6045      	str	r5, [r0, #4]
 8013bb2:	f100 050b 	add.w	r5, r0, #11
 8013bb6:	b932      	cbnz	r2, 8013bc6 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)+0x42>
 8013bb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013bbc:	8101      	strh	r1, [r0, #8]
 8013bbe:	7282      	strb	r2, [r0, #10]
 8013bc0:	1ba8      	subs	r0, r5, r6
 8013bc2:	b043      	add	sp, #268	@ 0x10c
 8013bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bc6:	8927      	ldrh	r7, [r4, #8]
 8013bc8:	7287      	strb	r7, [r0, #10]
 8013bca:	1c7a      	adds	r2, r7, #1
 8013bcc:	ba52      	rev16	r2, r2
 8013bce:	8102      	strh	r2, [r0, #8]
 8013bd0:	8922      	ldrh	r2, [r4, #8]
 8013bd2:	6861      	ldr	r1, [r4, #4]
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	f7ff fdcd 	bl	8013774 <memcpy.isra.0>
 8013bda:	443d      	add	r5, r7
 8013bdc:	e7f0      	b.n	8013bc0 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)+0x3c>

08013bde <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)>:
 8013bde:	4281      	cmp	r1, r0
 8013be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be4:	4606      	mov	r6, r0
 8013be6:	d310      	bcc.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013be8:	4291      	cmp	r1, r2
 8013bea:	d20e      	bcs.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013bec:	2500      	movs	r5, #0
 8013bee:	f503 7c80 	add.w	ip, r3, #256	@ 0x100
 8013bf2:	701d      	strb	r5, [r3, #0]
 8013bf4:	4608      	mov	r0, r1
 8013bf6:	4607      	mov	r7, r0
 8013bf8:	f810 4b01 	ldrb.w	r4, [r0], #1
 8013bfc:	b38c      	cbz	r4, 8013c62 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x84>
 8013bfe:	f004 01c0 	and.w	r1, r4, #192	@ 0xc0
 8013c02:	2980      	cmp	r1, #128	@ 0x80
 8013c04:	d001      	beq.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013c06:	d803      	bhi.n	8013c10 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x32>
 8013c08:	b199      	cbz	r1, 8013c32 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x54>
 8013c0a:	2000      	movs	r0, #0
 8013c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c10:	29c0      	cmp	r1, #192	@ 0xc0
 8013c12:	d1f0      	bne.n	8013bf6 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x18>
 8013c14:	7800      	ldrb	r0, [r0, #0]
 8013c16:	0224      	lsls	r4, r4, #8
 8013c18:	f404 547c 	and.w	r4, r4, #16128	@ 0x3f00
 8013c1c:	4320      	orrs	r0, r4
 8013c1e:	b905      	cbnz	r5, 8013c22 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x44>
 8013c20:	1cbd      	adds	r5, r7, #2
 8013c22:	1831      	adds	r1, r6, r0
 8013c24:	d2f1      	bcs.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013c26:	428a      	cmp	r2, r1
 8013c28:	d9ef      	bls.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013c2a:	5c30      	ldrb	r0, [r6, r0]
 8013c2c:	283f      	cmp	r0, #63	@ 0x3f
 8013c2e:	d9e1      	bls.n	8013bf4 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x16>
 8013c30:	e7eb      	b.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013c32:	1901      	adds	r1, r0, r4
 8013c34:	4291      	cmp	r1, r2
 8013c36:	d2e8      	bcs.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013c38:	1c67      	adds	r7, r4, #1
 8013c3a:	441f      	add	r7, r3
 8013c3c:	4567      	cmp	r7, ip
 8013c3e:	d2e4      	bcs.n	8013c0a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8013c40:	469e      	mov	lr, r3
 8013c42:	f80e 4b01 	strb.w	r4, [lr], #1
 8013c46:	f810 8b01 	ldrb.w	r8, [r0], #1
 8013c4a:	f80e 8b01 	strb.w	r8, [lr], #1
 8013c4e:	ebae 0803 	sub.w	r8, lr, r3
 8013c52:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013c56:	4544      	cmp	r4, r8
 8013c58:	dcf5      	bgt.n	8013c46 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x68>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	703b      	strb	r3, [r7, #0]
 8013c5e:	463b      	mov	r3, r7
 8013c60:	e7c8      	b.n	8013bf4 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x16>
 8013c62:	2d00      	cmp	r5, #0
 8013c64:	bf18      	it	ne
 8013c66:	4628      	movne	r0, r5
 8013c68:	e7d0      	b.n	8013c0c <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2e>
	...

08013c6c <MDNS::SendTo(unsigned long)>:
 8013c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca4 <MDNS::SendTo(unsigned long)+0x38>)
 8013c6e:	b513      	push	{r0, r1, r4, lr}
 8013c70:	6818      	ldr	r0, [r3, #0]
 8013c72:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca8 <MDNS::SendTo(unsigned long)+0x3c>)
 8013c74:	460a      	mov	r2, r1
 8013c76:	6819      	ldr	r1, [r3, #0]
 8013c78:	4b0c      	ldr	r3, [pc, #48]	@ (8013cac <MDNS::SendTo(unsigned long)+0x40>)
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	b94b      	cbnz	r3, 8013c92 <MDNS::SendTo(unsigned long)+0x26>
 8013c7e:	b131      	cbz	r1, 8013c8e <MDNS::SendTo(unsigned long)+0x22>
 8013c80:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 8013c84:	9300      	str	r3, [sp, #0]
 8013c86:	4b0a      	ldr	r3, [pc, #40]	@ (8013cb0 <MDNS::SendTo(unsigned long)+0x44>)
 8013c88:	490a      	ldr	r1, [pc, #40]	@ (8013cb4 <MDNS::SendTo(unsigned long)+0x48>)
 8013c8a:	f001 fdc5 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 8013c8e:	b002      	add	sp, #8
 8013c90:	bd10      	pop	{r4, pc}
 8013c92:	4b09      	ldr	r3, [pc, #36]	@ (8013cb8 <MDNS::SendTo(unsigned long)+0x4c>)
 8013c94:	4c09      	ldr	r4, [pc, #36]	@ (8013cbc <MDNS::SendTo(unsigned long)+0x50>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	8824      	ldrh	r4, [r4, #0]
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	d0f7      	beq.n	8013c8e <MDNS::SendTo(unsigned long)+0x22>
 8013c9e:	9400      	str	r4, [sp, #0]
 8013ca0:	e7f2      	b.n	8013c88 <MDNS::SendTo(unsigned long)+0x1c>
 8013ca2:	bf00      	nop
 8013ca4:	2000c938 	andcs	ip, r0, r8, lsr r9
 8013ca8:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8013cac:	2000c93c 	andcs	ip, r0, ip, lsr r9
 8013cb0:	fb0000e0 	blx	801403a <MDNS::HandleQuestions(unsigned long)+0x8a>
 8013cb4:	2000c93d 	andcs	ip, r0, sp, lsr r9
 8013cb8:	2000c934 	andcs	ip, r0, r4, lsr r9
 8013cbc:	2000c930 	andcs	ip, r0, r0, lsr r9

08013cc0 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>:
 8013cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cc2:	4b11      	ldr	r3, [pc, #68]	@ (8013d08 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x48>)
 8013cc4:	4c11      	ldr	r4, [pc, #68]	@ (8013d0c <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x4c>)
 8013cc6:	681d      	ldr	r5, [r3, #0]
 8013cc8:	f015 0501 	ands.w	r5, r5, #1
 8013ccc:	460f      	mov	r7, r1
 8013cce:	4606      	mov	r6, r0
 8013cd0:	4611      	mov	r1, r2
 8013cd2:	d003      	beq.n	8013cdc <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x1c>
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	f7ff feb9 	bl	8013a4c <add_answer_a(unsigned char*, unsigned long)>
 8013cda:	4404      	add	r4, r0
 8013cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8013d10 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x50>)
 8013cde:	2284      	movs	r2, #132	@ 0x84
 8013ce0:	709a      	strb	r2, [r3, #2]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	ba6d      	rev16	r5, r5
 8013ce6:	1ae4      	subs	r4, r4, r3
 8013ce8:	70da      	strb	r2, [r3, #3]
 8013cea:	801f      	strh	r7, [r3, #0]
 8013cec:	711a      	strb	r2, [r3, #4]
 8013cee:	715a      	strb	r2, [r3, #5]
 8013cf0:	80dd      	strh	r5, [r3, #6]
 8013cf2:	721a      	strb	r2, [r3, #8]
 8013cf4:	725a      	strb	r2, [r3, #9]
 8013cf6:	729a      	strb	r2, [r3, #10]
 8013cf8:	72da      	strb	r2, [r3, #11]
 8013cfa:	b2a1      	uxth	r1, r4
 8013cfc:	4630      	mov	r0, r6
 8013cfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013d02:	f7ff bfb3 	b.w	8013c6c <MDNS::SendTo(unsigned long)>
 8013d06:	bf00      	nop
 8013d08:	2000cb44 	andcs	ip, r0, r4, asr #22
 8013d0c:	2000c949 	andcs	ip, r0, r9, asr #18
 8013d10:	2000c93d 	andcs	ip, r0, sp, lsr r9

08013d14 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>:
 8013d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d18:	461e      	mov	r6, r3
 8013d1a:	4b25      	ldr	r3, [pc, #148]	@ (8013db0 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x9c>)
 8013d1c:	4c25      	ldr	r4, [pc, #148]	@ (8013db4 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0xa0>)
 8013d1e:	f8d3 9000 	ldr.w	r9, [r3]
 8013d22:	f019 0510 	ands.w	r5, r9, #16
 8013d26:	4607      	mov	r7, r0
 8013d28:	4688      	mov	r8, r1
 8013d2a:	4692      	mov	sl, r2
 8013d2c:	d005      	beq.n	8013d3a <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x26>
 8013d2e:	4631      	mov	r1, r6
 8013d30:	4640      	mov	r0, r8
 8013d32:	f7ff feab 	bl	8013a8c <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]>
 8013d36:	2501      	movs	r5, #1
 8013d38:	4404      	add	r4, r0
 8013d3a:	f019 0f20 	tst.w	r9, #32
 8013d3e:	d006      	beq.n	8013d4e <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x3a>
 8013d40:	4621      	mov	r1, r4
 8013d42:	4632      	mov	r2, r6
 8013d44:	4640      	mov	r0, r8
 8013d46:	f7ff fef5 	bl	8013b34 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 8013d4a:	3501      	adds	r5, #1
 8013d4c:	4404      	add	r4, r0
 8013d4e:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8013d52:	d006      	beq.n	8013d62 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x4e>
 8013d54:	4621      	mov	r1, r4
 8013d56:	4632      	mov	r2, r6
 8013d58:	4640      	mov	r0, r8
 8013d5a:	f7ff febf 	bl	8013adc <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 8013d5e:	3501      	adds	r5, #1
 8013d60:	4404      	add	r4, r0
 8013d62:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8013d66:	d006      	beq.n	8013d76 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x62>
 8013d68:	4621      	mov	r1, r4
 8013d6a:	4632      	mov	r2, r6
 8013d6c:	4640      	mov	r0, r8
 8013d6e:	f7ff ff09 	bl	8013b84 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 8013d72:	3501      	adds	r5, #1
 8013d74:	4404      	add	r4, r0
 8013d76:	4631      	mov	r1, r6
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f7ff fe67 	bl	8013a4c <add_answer_a(unsigned char*, unsigned long)>
 8013d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8013db8 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0xa4>)
 8013d80:	2284      	movs	r2, #132	@ 0x84
 8013d82:	2101      	movs	r1, #1
 8013d84:	709a      	strb	r2, [r3, #2]
 8013d86:	7259      	strb	r1, [r3, #9]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	1821      	adds	r1, r4, r0
 8013d8c:	ba6d      	rev16	r5, r5
 8013d8e:	70da      	strb	r2, [r3, #3]
 8013d90:	1ac9      	subs	r1, r1, r3
 8013d92:	f8a3 a000 	strh.w	sl, [r3]
 8013d96:	80dd      	strh	r5, [r3, #6]
 8013d98:	4638      	mov	r0, r7
 8013d9a:	b289      	uxth	r1, r1
 8013d9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013da0:	711a      	strb	r2, [r3, #4]
 8013da2:	715a      	strb	r2, [r3, #5]
 8013da4:	721a      	strb	r2, [r3, #8]
 8013da6:	729a      	strb	r2, [r3, #10]
 8013da8:	72da      	strb	r2, [r3, #11]
 8013daa:	f7ff bf5f 	b.w	8013c6c <MDNS::SendTo(unsigned long)>
 8013dae:	bf00      	nop
 8013db0:	2000cb40 	andcs	ip, r0, r0, asr #22
 8013db4:	2000c949 	andcs	ip, r0, r9, asr #18
 8013db8:	2000c93d 	andcs	ip, r0, sp, lsr r9

08013dbc <MDNS::SendAnnouncement(unsigned long)>:
 8013dbc:	4b14      	ldr	r3, [pc, #80]	@ (8013e10 <MDNS::SendAnnouncement(unsigned long)+0x54>)
 8013dbe:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 8013dc2:	b570      	push	{r4, r5, r6, lr}
 8013dc4:	801a      	strh	r2, [r3, #0]
 8013dc6:	4b13      	ldr	r3, [pc, #76]	@ (8013e14 <MDNS::SendAnnouncement(unsigned long)+0x58>)
 8013dc8:	4e13      	ldr	r6, [pc, #76]	@ (8013e18 <MDNS::SendAnnouncement(unsigned long)+0x5c>)
 8013dca:	2201      	movs	r2, #1
 8013dcc:	601a      	str	r2, [r3, #0]
 8013dce:	460c      	mov	r4, r1
 8013dd0:	460a      	mov	r2, r1
 8013dd2:	2100      	movs	r1, #0
 8013dd4:	4605      	mov	r5, r0
 8013dd6:	f7ff ff73 	bl	8013cc0 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>
 8013dda:	68f3      	ldr	r3, [r6, #12]
 8013ddc:	2b08      	cmp	r3, #8
 8013dde:	dc08      	bgt.n	8013df2 <MDNS::SendAnnouncement(unsigned long)+0x36>
 8013de0:	4b0e      	ldr	r3, [pc, #56]	@ (8013e1c <MDNS::SendAnnouncement(unsigned long)+0x60>)
 8013de2:	22f0      	movs	r2, #240	@ 0xf0
 8013de4:	601a      	str	r2, [r3, #0]
 8013de6:	4631      	mov	r1, r6
 8013de8:	4623      	mov	r3, r4
 8013dea:	2200      	movs	r2, #0
 8013dec:	4628      	mov	r0, r5
 8013dee:	f7ff ff91 	bl	8013d14 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013df2:	69f3      	ldr	r3, [r6, #28]
 8013df4:	2b08      	cmp	r3, #8
 8013df6:	dc0a      	bgt.n	8013e0e <MDNS::SendAnnouncement(unsigned long)+0x52>
 8013df8:	4b08      	ldr	r3, [pc, #32]	@ (8013e1c <MDNS::SendAnnouncement(unsigned long)+0x60>)
 8013dfa:	4909      	ldr	r1, [pc, #36]	@ (8013e20 <MDNS::SendAnnouncement(unsigned long)+0x64>)
 8013dfc:	22f0      	movs	r2, #240	@ 0xf0
 8013dfe:	601a      	str	r2, [r3, #0]
 8013e00:	4628      	mov	r0, r5
 8013e02:	4623      	mov	r3, r4
 8013e04:	2200      	movs	r2, #0
 8013e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e0a:	f7ff bf83 	b.w	8013d14 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013e0e:	bd70      	pop	{r4, r5, r6, pc}
 8013e10:	2000c930 	andcs	ip, r0, r0, lsr r9
 8013e14:	2000cb44 	andcs	ip, r0, r4, asr #22
 8013e18:	2000cb48 	andcs	ip, r0, r8, asr #22
 8013e1c:	2000cb40 	andcs	ip, r0, r0, asr #22
 8013e20:	2000cb58 	andcs	ip, r0, r8, asr fp

08013e24 <network::mdns_announcement()>:
 8013e24:	4b02      	ldr	r3, [pc, #8]	@ (8013e30 <network::mdns_announcement()+0xc>)
 8013e26:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8013e2a:	6818      	ldr	r0, [r3, #0]
 8013e2c:	f7ff bfc6 	b.w	8013dbc <MDNS::SendAnnouncement(unsigned long)>
 8013e30:	2000c924 	andcs	ip, r0, r4, lsr #18

08013e34 <network::mdns_shutdown()>:
 8013e34:	4b02      	ldr	r3, [pc, #8]	@ (8013e40 <network::mdns_shutdown()+0xc>)
 8013e36:	2100      	movs	r1, #0
 8013e38:	6818      	ldr	r0, [r3, #0]
 8013e3a:	f7ff bfbf 	b.w	8013dbc <MDNS::SendAnnouncement(unsigned long)>
 8013e3e:	bf00      	nop
 8013e40:	2000c924 	andcs	ip, r0, r4, lsr #18

08013e44 <MDNS::MDNS()>:
 8013e44:	b538      	push	{r3, r4, r5, lr}
 8013e46:	4b16      	ldr	r3, [pc, #88]	@ (8013ea0 <MDNS::MDNS()+0x5c>)
 8013e48:	4d16      	ldr	r5, [pc, #88]	@ (8013ea4 <MDNS::MDNS()+0x60>)
 8013e4a:	6018      	str	r0, [r3, #0]
 8013e4c:	4b16      	ldr	r3, [pc, #88]	@ (8013ea8 <MDNS::MDNS()+0x64>)
 8013e4e:	2209      	movs	r2, #9
 8013e50:	4604      	mov	r4, r0
 8013e52:	f241 40e9 	movw	r0, #5353	@ 0x14e9
 8013e56:	60da      	str	r2, [r3, #12]
 8013e58:	61da      	str	r2, [r3, #28]
 8013e5a:	f001 fc85 	bl	8015768 <net::udp_begin(unsigned short)>
 8013e5e:	4b13      	ldr	r3, [pc, #76]	@ (8013eac <MDNS::MDNS()+0x68>)
 8013e60:	6018      	str	r0, [r3, #0]
 8013e62:	4813      	ldr	r0, [pc, #76]	@ (8013eb0 <MDNS::MDNS()+0x6c>)
 8013e64:	f001 f868 	bl	8014f38 <net::igmp_join(unsigned long)>
 8013e68:	4b12      	ldr	r3, [pc, #72]	@ (8013eb4 <MDNS::MDNS()+0x70>)
 8013e6a:	6819      	ldr	r1, [r3, #0]
 8013e6c:	233f      	movs	r3, #63	@ 0x3f
 8013e6e:	f101 0256 	add.w	r2, r1, #86	@ 0x56
 8013e72:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8013e76:	b118      	cbz	r0, 8013e80 <MDNS::MDNS()+0x3c>
 8013e78:	3b01      	subs	r3, #1
 8013e7a:	f802 0b01 	strb.w	r0, [r2], #1
 8013e7e:	d1f8      	bne.n	8013e72 <MDNS::MDNS()+0x2e>
 8013e80:	4413      	add	r3, r2
 8013e82:	2000      	movs	r0, #0
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d108      	bne.n	8013e9a <MDNS::MDNS()+0x56>
 8013e88:	f881 0095 	strb.w	r0, [r1, #149]	@ 0x95
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8013e92:	f7ff ff93 	bl	8013dbc <MDNS::SendAnnouncement(unsigned long)>
 8013e96:	4620      	mov	r0, r4
 8013e98:	bd38      	pop	{r3, r4, r5, pc}
 8013e9a:	f802 0b01 	strb.w	r0, [r2], #1
 8013e9e:	e7f1      	b.n	8013e84 <MDNS::MDNS()+0x40>
 8013ea0:	2000c924 	andcs	ip, r0, r4, lsr #18
 8013ea4:	0801efa2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8013ea8:	2000cb48 	andcs	ip, r0, r8, asr #22
 8013eac:	2000c938 	andcs	ip, r0, r8, lsr r9
 8013eb0:	fb0000e0 	blx	801423a <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x3a>
 8013eb4:	2000cb68 	andcs	ip, r0, r8, ror #22

08013eb8 <MDNS::ServiceRecordDelete(mdns::Services)>:
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	4c0c      	ldr	r4, [pc, #48]	@ (8013eec <MDNS::ServiceRecordDelete(mdns::Services)+0x34>)
 8013ebc:	68e3      	ldr	r3, [r4, #12]
 8013ebe:	4299      	cmp	r1, r3
 8013ec0:	d003      	beq.n	8013eca <MDNS::ServiceRecordDelete(mdns::Services)+0x12>
 8013ec2:	69e3      	ldr	r3, [r4, #28]
 8013ec4:	4299      	cmp	r1, r3
 8013ec6:	d10f      	bne.n	8013ee8 <MDNS::ServiceRecordDelete(mdns::Services)+0x30>
 8013ec8:	3410      	adds	r4, #16
 8013eca:	2300      	movs	r3, #0
 8013ecc:	461a      	mov	r2, r3
 8013ece:	4621      	mov	r1, r4
 8013ed0:	f7ff ff20 	bl	8013d14 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013ed4:	6820      	ldr	r0, [r4, #0]
 8013ed6:	b108      	cbz	r0, 8013edc <MDNS::ServiceRecordDelete(mdns::Services)+0x24>
 8013ed8:	f007 f8f8 	bl	801b0cc <operator delete[](void*)>
 8013edc:	6860      	ldr	r0, [r4, #4]
 8013ede:	b108      	cbz	r0, 8013ee4 <MDNS::ServiceRecordDelete(mdns::Services)+0x2c>
 8013ee0:	f007 f8f4 	bl	801b0cc <operator delete[](void*)>
 8013ee4:	2001      	movs	r0, #1
 8013ee6:	bd10      	pop	{r4, pc}
 8013ee8:	2000      	movs	r0, #0
 8013eea:	e7fc      	b.n	8013ee6 <MDNS::ServiceRecordDelete(mdns::Services)+0x2e>
 8013eec:	2000cb48 	andcs	ip, r0, r8, asr #22

08013ef0 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>:
 8013ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef4:	4d2a      	ldr	r5, [pc, #168]	@ (8013fa0 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb0>)
 8013ef6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8013efa:	461f      	mov	r7, r3
 8013efc:	68eb      	ldr	r3, [r5, #12]
 8013efe:	2b09      	cmp	r3, #9
 8013f00:	4680      	mov	r8, r0
 8013f02:	4689      	mov	r9, r1
 8013f04:	4692      	mov	sl, r2
 8013f06:	d003      	beq.n	8013f10 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x20>
 8013f08:	69eb      	ldr	r3, [r5, #28]
 8013f0a:	2b09      	cmp	r3, #9
 8013f0c:	d145      	bne.n	8013f9a <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xaa>
 8013f0e:	3510      	adds	r5, #16
 8013f10:	f1b9 0f00 	cmp.w	r9, #0
 8013f14:	d012      	beq.n	8013f3c <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x4c>
 8013f16:	4648      	mov	r0, r9
 8013f18:	f7ff fc35 	bl	8013786 <strlen>
 8013f1c:	283f      	cmp	r0, #63	@ 0x3f
 8013f1e:	4604      	mov	r4, r0
 8013f20:	d839      	bhi.n	8013f96 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa6>
 8013f22:	2800      	cmp	r0, #0
 8013f24:	d035      	beq.n	8013f92 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa2>
 8013f26:	1c60      	adds	r0, r4, #1
 8013f28:	f007 f8d6 	bl	801b0d8 <operator new[](unsigned int)>
 8013f2c:	4622      	mov	r2, r4
 8013f2e:	6028      	str	r0, [r5, #0]
 8013f30:	4649      	mov	r1, r9
 8013f32:	f7ff fc1f 	bl	8013774 <memcpy.isra.0>
 8013f36:	682b      	ldr	r3, [r5, #0]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	551a      	strb	r2, [r3, r4]
 8013f3c:	f8c5 a00c 	str.w	sl, [r5, #12]
 8013f40:	b91e      	cbnz	r6, 8013f4a <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x5a>
 8013f42:	4b18      	ldr	r3, [pc, #96]	@ (8013fa4 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb4>)
 8013f44:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 8013f48:	899e      	ldrh	r6, [r3, #12]
 8013f4a:	ba76      	rev16	r6, r6
 8013f4c:	b2b6      	uxth	r6, r6
 8013f4e:	816e      	strh	r6, [r5, #10]
 8013f50:	b187      	cbz	r7, 8013f74 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x84>
 8013f52:	4638      	mov	r0, r7
 8013f54:	f7ff fc17 	bl	8013786 <strlen>
 8013f58:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8013f5c:	bf28      	it	cs
 8013f5e:	f44f 7080 	movcs.w	r0, #256	@ 0x100
 8013f62:	4604      	mov	r4, r0
 8013f64:	f007 f8b8 	bl	801b0d8 <operator new[](unsigned int)>
 8013f68:	4622      	mov	r2, r4
 8013f6a:	6068      	str	r0, [r5, #4]
 8013f6c:	4639      	mov	r1, r7
 8013f6e:	f7ff fc01 	bl	8013774 <memcpy.isra.0>
 8013f72:	812c      	strh	r4, [r5, #8]
 8013f74:	4b0c      	ldr	r3, [pc, #48]	@ (8013fa8 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb8>)
 8013f76:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 8013f7a:	801a      	strh	r2, [r3, #0]
 8013f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8013fac <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xbc>)
 8013f7e:	22f0      	movs	r2, #240	@ 0xf0
 8013f80:	601a      	str	r2, [r3, #0]
 8013f82:	4640      	mov	r0, r8
 8013f84:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8013f88:	2200      	movs	r2, #0
 8013f8a:	4629      	mov	r1, r5
 8013f8c:	f7ff fec2 	bl	8013d14 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8013f90:	2001      	movs	r0, #1
 8013f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f96:	243f      	movs	r4, #63	@ 0x3f
 8013f98:	e7c5      	b.n	8013f26 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x36>
 8013f9a:	2000      	movs	r0, #0
 8013f9c:	e7f9      	b.n	8013f92 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa2>
 8013f9e:	bf00      	nop
 8013fa0:	2000cb48 	andcs	ip, r0, r8, asr #22
 8013fa4:	0801eec8 	stmdaeq	r1, {r3, r6, r7, r9, sl, fp, sp, lr, pc}
 8013fa8:	2000c930 	andcs	ip, r0, r0, lsr r9
 8013fac:	2000cb40 	andcs	ip, r0, r0, asr #22

08013fb0 <MDNS::HandleQuestions(unsigned long)>:
 8013fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8014128 <MDNS::HandleQuestions(unsigned long)+0x178>)
 8013fb6:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 8014148 <MDNS::HandleQuestions(unsigned long)+0x198>
 8013fba:	881a      	ldrh	r2, [r3, #0]
 8013fbc:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	f04f 0500 	mov.w	r5, #0
 8013fc6:	4b59      	ldr	r3, [pc, #356]	@ (801412c <MDNS::HandleQuestions(unsigned long)+0x17c>)
 8013fc8:	f8c9 5000 	str.w	r5, [r9]
 8013fcc:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 8013fd0:	bf14      	ite	ne
 8013fd2:	2201      	movne	r2, #1
 8013fd4:	462a      	moveq	r2, r5
 8013fd6:	9001      	str	r0, [sp, #4]
 8013fd8:	4688      	mov	r8, r1
 8013fda:	701a      	strb	r2, [r3, #0]
 8013fdc:	d004      	beq.n	8013fe8 <MDNS::HandleQuestions(unsigned long)+0x38>
 8013fde:	2901      	cmp	r1, #1
 8013fe0:	bf02      	ittt	eq
 8013fe2:	4b53      	ldreq	r3, [pc, #332]	@ (8014130 <MDNS::HandleQuestions(unsigned long)+0x180>)
 8013fe4:	681b      	ldreq	r3, [r3, #0]
 8013fe6:	881d      	ldrheq	r5, [r3, #0]
 8013fe8:	4c52      	ldr	r4, [pc, #328]	@ (8014134 <MDNS::HandleQuestions(unsigned long)+0x184>)
 8013fea:	f04f 0b00 	mov.w	fp, #0
 8013fee:	f04f 0a0c 	mov.w	sl, #12
 8013ff2:	45c3      	cmp	fp, r8
 8013ff4:	d10e      	bne.n	8014014 <MDNS::HandleQuestions(unsigned long)+0x64>
 8013ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	f000 808f 	beq.w	801411e <MDNS::HandleQuestions(unsigned long)+0x16e>
 8014000:	9801      	ldr	r0, [sp, #4]
 8014002:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8014006:	4629      	mov	r1, r5
 8014008:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 801400c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014010:	f7ff be56 	b.w	8013cc0 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>
 8014014:	4b48      	ldr	r3, [pc, #288]	@ (8014138 <MDNS::HandleQuestions(unsigned long)+0x188>)
 8014016:	4e46      	ldr	r6, [pc, #280]	@ (8014130 <MDNS::HandleQuestions(unsigned long)+0x180>)
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	6830      	ldr	r0, [r6, #0]
 801401c:	ab03      	add	r3, sp, #12
 801401e:	4402      	add	r2, r0
 8014020:	eb00 010a 	add.w	r1, r0, sl
 8014024:	f7ff fddb 	bl	8013bde <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)>
 8014028:	2800      	cmp	r0, #0
 801402a:	d078      	beq.n	801411e <MDNS::HandleQuestions(unsigned long)+0x16e>
 801402c:	6833      	ldr	r3, [r6, #0]
 801402e:	eb03 020a 	add.w	r2, r3, sl
 8014032:	1a80      	subs	r0, r0, r2
 8014034:	f8ad 010c 	strh.w	r0, [sp, #268]	@ 0x10c
 8014038:	fa1a f080 	uxtah	r0, sl, r0
 801403c:	181a      	adds	r2, r3, r0
 801403e:	f100 0a04 	add.w	sl, r0, #4
 8014042:	8852      	ldrh	r2, [r2, #2]
 8014044:	f402 42fe 	and.w	r2, r2, #32512	@ 0x7f00
 8014048:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 801404c:	d002      	beq.n	8014054 <MDNS::HandleQuestions(unsigned long)+0xa4>
 801404e:	f10b 0b01 	add.w	fp, fp, #1
 8014052:	e7ce      	b.n	8013ff2 <MDNS::HandleQuestions(unsigned long)+0x42>
 8014054:	5a1e      	ldrh	r6, [r3, r0]
 8014056:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 801405a:	d002      	beq.n	8014062 <MDNS::HandleQuestions(unsigned long)+0xb2>
 801405c:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 8014060:	d10d      	bne.n	801407e <MDNS::HandleQuestions(unsigned long)+0xce>
 8014062:	a844      	add	r0, sp, #272	@ 0x110
 8014064:	f7ff fbaa 	bl	80137bc <create_host_domain(mdns::Domain&)>
 8014068:	a903      	add	r1, sp, #12
 801406a:	a844      	add	r0, sp, #272	@ 0x110
 801406c:	f7ff fc3c 	bl	80138e8 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 8014070:	b128      	cbz	r0, 801407e <MDNS::HandleQuestions(unsigned long)+0xce>
 8014072:	f8d9 3000 	ldr.w	r3, [r9]
 8014076:	f043 0301 	orr.w	r3, r3, #1
 801407a:	f8c9 3000 	str.w	r3, [r9]
 801407e:	4f2f      	ldr	r7, [pc, #188]	@ (801413c <MDNS::HandleQuestions(unsigned long)+0x18c>)
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	2b08      	cmp	r3, #8
 8014084:	dc46      	bgt.n	8014114 <MDNS::HandleQuestions(unsigned long)+0x164>
 8014086:	2300      	movs	r3, #0
 8014088:	f5b6 6f40 	cmp.w	r6, #3072	@ 0xc00
 801408c:	6023      	str	r3, [r4, #0]
 801408e:	d002      	beq.n	8014096 <MDNS::HandleQuestions(unsigned long)+0xe6>
 8014090:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 8014094:	d115      	bne.n	80140c2 <MDNS::HandleQuestions(unsigned long)+0x112>
 8014096:	482a      	ldr	r0, [pc, #168]	@ (8014140 <MDNS::HandleQuestions(unsigned long)+0x190>)
 8014098:	a903      	add	r1, sp, #12
 801409a:	f7ff fc25 	bl	80138e8 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 801409e:	b108      	cbz	r0, 80140a4 <MDNS::HandleQuestions(unsigned long)+0xf4>
 80140a0:	2310      	movs	r3, #16
 80140a2:	6023      	str	r3, [r4, #0]
 80140a4:	2200      	movs	r2, #0
 80140a6:	4639      	mov	r1, r7
 80140a8:	a885      	add	r0, sp, #532	@ 0x214
 80140aa:	f7ff fba7 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80140ae:	a903      	add	r1, sp, #12
 80140b0:	a885      	add	r0, sp, #532	@ 0x214
 80140b2:	f7ff fc19 	bl	80138e8 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 80140b6:	6823      	ldr	r3, [r4, #0]
 80140b8:	b118      	cbz	r0, 80140c2 <MDNS::HandleQuestions(unsigned long)+0x112>
 80140ba:	f043 0320 	orr.w	r3, r3, #32
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	6023      	str	r3, [r4, #0]
 80140c2:	4639      	mov	r1, r7
 80140c4:	a885      	add	r0, sp, #532	@ 0x214
 80140c6:	2201      	movs	r2, #1
 80140c8:	f7ff fb98 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80140cc:	a903      	add	r1, sp, #12
 80140ce:	a885      	add	r0, sp, #532	@ 0x214
 80140d0:	f7ff fc0a 	bl	80138e8 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 80140d4:	b1d8      	cbz	r0, 801410e <MDNS::HandleQuestions(unsigned long)+0x15e>
 80140d6:	f5b6 5f04 	cmp.w	r6, #8448	@ 0x2100
 80140da:	d002      	beq.n	80140e2 <MDNS::HandleQuestions(unsigned long)+0x132>
 80140dc:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 80140e0:	d112      	bne.n	8014108 <MDNS::HandleQuestions(unsigned long)+0x158>
 80140e2:	7823      	ldrb	r3, [r4, #0]
 80140e4:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 80140e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140ec:	6023      	str	r3, [r4, #0]
 80140ee:	d103      	bne.n	80140f8 <MDNS::HandleQuestions(unsigned long)+0x148>
 80140f0:	7823      	ldrb	r3, [r4, #0]
 80140f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80140f6:	6023      	str	r3, [r4, #0]
 80140f8:	9801      	ldr	r0, [sp, #4]
 80140fa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80140fe:	462a      	mov	r2, r5
 8014100:	4639      	mov	r1, r7
 8014102:	f7ff fe07 	bl	8013d14 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8014106:	e005      	b.n	8014114 <MDNS::HandleQuestions(unsigned long)+0x164>
 8014108:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 801410c:	d0f0      	beq.n	80140f0 <MDNS::HandleQuestions(unsigned long)+0x140>
 801410e:	6823      	ldr	r3, [r4, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d1f1      	bne.n	80140f8 <MDNS::HandleQuestions(unsigned long)+0x148>
 8014114:	4b0b      	ldr	r3, [pc, #44]	@ (8014144 <MDNS::HandleQuestions(unsigned long)+0x194>)
 8014116:	3710      	adds	r7, #16
 8014118:	429f      	cmp	r7, r3
 801411a:	d1b1      	bne.n	8014080 <MDNS::HandleQuestions(unsigned long)+0xd0>
 801411c:	e797      	b.n	801404e <MDNS::HandleQuestions(unsigned long)+0x9e>
 801411e:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 8014122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014126:	bf00      	nop
 8014128:	2000c930 	andcs	ip, r0, r0, lsr r9
 801412c:	2000c93c 	andcs	ip, r0, ip, lsr r9
 8014130:	2000c928 	andcs	ip, r0, r8, lsr #18
 8014134:	2000cb40 	andcs	ip, r0, r0, asr #22
 8014138:	2000c92c 	andcs	ip, r0, ip, lsr #18
 801413c:	2000cb48 	andcs	ip, r0, r8, asr #22
 8014140:	0801edc4 	stmdaeq	r1, {r2, r6, r7, r8, sl, fp, sp, lr, pc}
 8014144:	2000cb68 	andcs	ip, r0, r8, ror #22
 8014148:	2000cb44 	andcs	ip, r0, r4, asr #22

0801414c <MDNS::Print()>:
 801414c:	b530      	push	{r4, r5, lr}
 801414e:	4815      	ldr	r0, [pc, #84]	@ (80141a4 <MDNS::Print()+0x58>)
 8014150:	4c15      	ldr	r4, [pc, #84]	@ (80141a8 <MDNS::Print()+0x5c>)
 8014152:	b0c3      	sub	sp, #268	@ 0x10c
 8014154:	f006 fd68 	bl	801ac28 <printf>
 8014158:	a801      	add	r0, sp, #4
 801415a:	f7ff fb2f 	bl	80137bc <create_host_domain(mdns::Domain&)>
 801415e:	2101      	movs	r1, #1
 8014160:	a801      	add	r0, sp, #4
 8014162:	f7ff fb9d 	bl	80138a0 <mdns::Domain::Print(bool)>
 8014166:	2503      	movs	r5, #3
 8014168:	3d01      	subs	r5, #1
 801416a:	d101      	bne.n	8014170 <MDNS::Print()+0x24>
 801416c:	b043      	add	sp, #268	@ 0x10c
 801416e:	bd30      	pop	{r4, r5, pc}
 8014170:	68e3      	ldr	r3, [r4, #12]
 8014172:	2b08      	cmp	r3, #8
 8014174:	dc14      	bgt.n	80141a0 <MDNS::Print()+0x54>
 8014176:	2200      	movs	r2, #0
 8014178:	4621      	mov	r1, r4
 801417a:	a801      	add	r0, sp, #4
 801417c:	f7ff fb3e 	bl	80137fc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8014180:	2100      	movs	r1, #0
 8014182:	a801      	add	r0, sp, #4
 8014184:	f7ff fb8c 	bl	80138a0 <mdns::Domain::Print(bool)>
 8014188:	8961      	ldrh	r1, [r4, #10]
 801418a:	4a08      	ldr	r2, [pc, #32]	@ (80141ac <MDNS::Print()+0x60>)
 801418c:	6863      	ldr	r3, [r4, #4]
 801418e:	4808      	ldr	r0, [pc, #32]	@ (80141b0 <MDNS::Print()+0x64>)
 8014190:	ba49      	rev16	r1, r1
 8014192:	2b00      	cmp	r3, #0
 8014194:	bf08      	it	eq
 8014196:	4613      	moveq	r3, r2
 8014198:	b289      	uxth	r1, r1
 801419a:	8922      	ldrh	r2, [r4, #8]
 801419c:	f006 fd44 	bl	801ac28 <printf>
 80141a0:	3410      	adds	r4, #16
 80141a2:	e7e1      	b.n	8014168 <MDNS::Print()+0x1c>
 80141a4:	0801c15a 	stmdaeq	r1, {r1, r3, r4, r6, r8, lr, pc}
 80141a8:	2000cb48 	andcs	ip, r0, r8, asr #22
 80141ac:	0801b940 	stmdaeq	r1, {r6, r8, fp, ip, sp, pc}
 80141b0:	0801c160 	stmdaeq	r1, {r5, r6, r8, lr, pc}

080141b4 <strncpy.isra.0>:
 80141b4:	3901      	subs	r1, #1
 80141b6:	b112      	cbz	r2, 80141be <strncpy.isra.0+0xa>
 80141b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80141bc:	b913      	cbnz	r3, 80141c4 <strncpy.isra.0+0x10>
 80141be:	4402      	add	r2, r0
 80141c0:	2300      	movs	r3, #0
 80141c2:	e005      	b.n	80141d0 <strncpy.isra.0+0x1c>
 80141c4:	f800 3b01 	strb.w	r3, [r0], #1
 80141c8:	3a01      	subs	r2, #1
 80141ca:	e7f4      	b.n	80141b6 <strncpy.isra.0+0x2>
 80141cc:	f800 3b01 	strb.w	r3, [r0], #1
 80141d0:	4290      	cmp	r0, r2
 80141d2:	d1fb      	bne.n	80141cc <strncpy.isra.0+0x18>
 80141d4:	4770      	bx	lr
	...

080141d8 <NetworkStore::SaveDhcp(bool)>:
 80141d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80141da:	2301      	movs	r3, #1
 80141dc:	2100      	movs	r1, #0
 80141de:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80141e2:	f88d 0017 	strb.w	r0, [sp, #23]
 80141e6:	4805      	ldr	r0, [pc, #20]	@ (80141fc <NetworkStore::SaveDhcp(bool)+0x24>)
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	6800      	ldr	r0, [r0, #0]
 80141ec:	f10d 0317 	add.w	r3, sp, #23
 80141f0:	2214      	movs	r2, #20
 80141f2:	f002 ffb9 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80141f6:	b007      	add	sp, #28
 80141f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80141fc:	2000cc34 	andcs	ip, r0, r4, lsr ip

08014200 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)>:
 8014200:	b530      	push	{r4, r5, lr}
 8014202:	4605      	mov	r5, r0
 8014204:	06e8      	lsls	r0, r5, #27
 8014206:	b087      	sub	sp, #28
 8014208:	460c      	mov	r4, r1
 801420a:	d51a      	bpl.n	8014242 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x42>
 801420c:	f002 feb2 	bl	8016f74 <net::display_ip()>
 8014210:	f7ff fe08 	bl	8013e24 <network::mdns_announcement()>
 8014214:	4b2e      	ldr	r3, [pc, #184]	@ (80142d0 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8014216:	6821      	ldr	r1, [r4, #0]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	482e      	ldr	r0, [pc, #184]	@ (80142d4 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd4>)
 801421c:	0e1a      	lsrs	r2, r3, #24
 801421e:	9204      	str	r2, [sp, #16]
 8014220:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014224:	9203      	str	r2, [sp, #12]
 8014226:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801422a:	b2db      	uxtb	r3, r3
 801422c:	9301      	str	r3, [sp, #4]
 801422e:	0e0b      	lsrs	r3, r1, #24
 8014230:	9202      	str	r2, [sp, #8]
 8014232:	9300      	str	r3, [sp, #0]
 8014234:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8014238:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801423c:	b2c9      	uxtb	r1, r1
 801423e:	f006 fcf3 	bl	801ac28 <printf>
 8014242:	0669      	lsls	r1, r5, #25
 8014244:	d518      	bpl.n	8014278 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x78>
 8014246:	f002 fe9d 	bl	8016f84 <net::display_netmask()>
 801424a:	4b21      	ldr	r3, [pc, #132]	@ (80142d0 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 801424c:	6861      	ldr	r1, [r4, #4]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	4821      	ldr	r0, [pc, #132]	@ (80142d8 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd8>)
 8014252:	0e1a      	lsrs	r2, r3, #24
 8014254:	9204      	str	r2, [sp, #16]
 8014256:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801425a:	9203      	str	r2, [sp, #12]
 801425c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014260:	b2db      	uxtb	r3, r3
 8014262:	9301      	str	r3, [sp, #4]
 8014264:	0e0b      	lsrs	r3, r1, #24
 8014266:	9202      	str	r2, [sp, #8]
 8014268:	9300      	str	r3, [sp, #0]
 801426a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801426e:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8014272:	b2c9      	uxtb	r1, r1
 8014274:	f006 fcd8 	bl	801ac28 <printf>
 8014278:	06aa      	lsls	r2, r5, #26
 801427a:	d518      	bpl.n	80142ae <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xae>
 801427c:	f002 fea4 	bl	8016fc8 <net::display_gateway()>
 8014280:	4b13      	ldr	r3, [pc, #76]	@ (80142d0 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8014282:	68a1      	ldr	r1, [r4, #8]
 8014284:	689b      	ldr	r3, [r3, #8]
 8014286:	4815      	ldr	r0, [pc, #84]	@ (80142dc <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xdc>)
 8014288:	0e1a      	lsrs	r2, r3, #24
 801428a:	9204      	str	r2, [sp, #16]
 801428c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014290:	9203      	str	r2, [sp, #12]
 8014292:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014296:	b2db      	uxtb	r3, r3
 8014298:	9301      	str	r3, [sp, #4]
 801429a:	0e0b      	lsrs	r3, r1, #24
 801429c:	9202      	str	r2, [sp, #8]
 801429e:	9300      	str	r3, [sp, #0]
 80142a0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80142a4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80142a8:	b2c9      	uxtb	r1, r1
 80142aa:	f006 fcbd 	bl	801ac28 <printf>
 80142ae:	076b      	lsls	r3, r5, #29
 80142b0:	d50c      	bpl.n	80142cc <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xcc>
 80142b2:	7823      	ldrb	r3, [r4, #0]
 80142b4:	b953      	cbnz	r3, 80142cc <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xcc>
 80142b6:	f7ff fdbd 	bl	8013e34 <network::mdns_shutdown()>
 80142ba:	f001 f98f 	bl	80155dc <net::tcp_shutdown()>
 80142be:	f7f3 ffeb 	bl	8008298 <net::igmp_shutdown()>
 80142c2:	b007      	add	sp, #28
 80142c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142c8:	f000 bc7a 	b.w	8014bc0 <net::dhcp_release_and_stop()>
 80142cc:	b007      	add	sp, #28
 80142ce:	bd30      	pop	{r4, r5, pc}
 80142d0:	2000cb88 	andcs	ip, r0, r8, lsl #23
 80142d4:	0801c16a 	stmdaeq	r1, {r1, r3, r5, r6, r8, lr, pc}
 80142d8:	0801c18a 	stmdaeq	r1, {r1, r3, r7, r8, lr, pc}
 80142dc:	0801c1af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, lr, pc}

080142e0 <Network::Network()>:
 80142e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142e2:	2300      	movs	r3, #0
 80142e4:	f240 1201 	movw	r2, #257	@ 0x101
 80142e8:	6003      	str	r3, [r0, #0]
 80142ea:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 80142ee:	4b53      	ldr	r3, [pc, #332]	@ (801443c <Network::Network()+0x15c>)
 80142f0:	8082      	strh	r2, [r0, #4]
 80142f2:	4a53      	ldr	r2, [pc, #332]	@ (8014440 <Network::Network()+0x160>)
 80142f4:	6018      	str	r0, [r3, #0]
 80142f6:	b09f      	sub	sp, #124	@ 0x7c
 80142f8:	4604      	mov	r4, r0
 80142fa:	1d83      	adds	r3, r0, #6
 80142fc:	f812 6b01 	ldrb.w	r6, [r2], #1
 8014300:	f803 6b01 	strb.w	r6, [r3], #1
 8014304:	2e00      	cmp	r6, #0
 8014306:	d1f9      	bne.n	80142fc <Network::Network()+0x1c>
 8014308:	f884 6056 	strb.w	r6, [r4, #86]	@ 0x56
 801430c:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8014310:	f104 02a4 	add.w	r2, r4, #164	@ 0xa4
 8014314:	f803 6b01 	strb.w	r6, [r3], #1
 8014318:	4293      	cmp	r3, r2
 801431a:	d1fb      	bne.n	8014314 <Network::Network()+0x34>
 801431c:	4d49      	ldr	r5, [pc, #292]	@ (8014444 <Network::Network()+0x164>)
 801431e:	f002 fde9 	bl	8016ef4 <net::display_emac_config()>
 8014322:	f7f4 f83d 	bl	80083a0 <emac_config()>
 8014326:	f002 fdf7 	bl	8016f18 <net::display_emac_start()>
 801432a:	4847      	ldr	r0, [pc, #284]	@ (8014448 <Network::Network()+0x168>)
 801432c:	4621      	mov	r1, r4
 801432e:	f7f4 f85b 	bl	80083e8 <emac_start(unsigned char*, net::Link&)>
 8014332:	7e6b      	ldrb	r3, [r5, #25]
 8014334:	9302      	str	r3, [sp, #8]
 8014336:	7e2b      	ldrb	r3, [r5, #24]
 8014338:	9301      	str	r3, [sp, #4]
 801433a:	7deb      	ldrb	r3, [r5, #23]
 801433c:	9300      	str	r3, [sp, #0]
 801433e:	7dab      	ldrb	r3, [r5, #22]
 8014340:	7d6a      	ldrb	r2, [r5, #21]
 8014342:	7d29      	ldrb	r1, [r5, #20]
 8014344:	4841      	ldr	r0, [pc, #260]	@ (801444c <Network::Network()+0x16c>)
 8014346:	f006 fc6f 	bl	801ac28 <printf>
 801434a:	f001 fd08 	bl	8015d5e <net::phy_customized_timing()>
 801434e:	f001 fd05 	bl	8015d5c <net::phy_customized_led()>
 8014352:	f000 ff17 	bl	8015184 <net::netif_init()>
 8014356:	483e      	ldr	r0, [pc, #248]	@ (8014450 <Network::Network()+0x170>)
 8014358:	f000 ffb4 	bl	80152c4 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))>
 801435c:	a806      	add	r0, sp, #24
 801435e:	f001 faf3 	bl	8015948 <NetworkParams::NetworkParams()>
 8014362:	a806      	add	r0, sp, #24
 8014364:	f001 fafa 	bl	801595c <NetworkParams::Load()>
 8014368:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 801436c:	2b00      	cmp	r3, #0
 801436e:	d15b      	bne.n	8014428 <Network::Network()+0x148>
 8014370:	4a38      	ldr	r2, [pc, #224]	@ (8014454 <Network::Network()+0x174>)
 8014372:	f104 0315 	add.w	r3, r4, #21
 8014376:	f104 0120 	add.w	r1, r4, #32
 801437a:	f812 0b01 	ldrb.w	r0, [r2], #1
 801437e:	f803 0f01 	strb.w	r0, [r3, #1]!
 8014382:	428b      	cmp	r3, r1
 8014384:	d1f9      	bne.n	801437a <Network::Network()+0x9a>
 8014386:	7deb      	ldrb	r3, [r5, #23]
 8014388:	091a      	lsrs	r2, r3, #4
 801438a:	2b9f      	cmp	r3, #159	@ 0x9f
 801438c:	f003 030f 	and.w	r3, r3, #15
 8014390:	bf94      	ite	ls
 8014392:	3230      	addls	r2, #48	@ 0x30
 8014394:	3237      	addhi	r2, #55	@ 0x37
 8014396:	2b09      	cmp	r3, #9
 8014398:	bf94      	ite	ls
 801439a:	3330      	addls	r3, #48	@ 0x30
 801439c:	3337      	addhi	r3, #55	@ 0x37
 801439e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80143a2:	7e2b      	ldrb	r3, [r5, #24]
 80143a4:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
 80143a8:	2b9f      	cmp	r3, #159	@ 0x9f
 80143aa:	ea4f 1213 	mov.w	r2, r3, lsr #4
 80143ae:	f003 030f 	and.w	r3, r3, #15
 80143b2:	bf94      	ite	ls
 80143b4:	3230      	addls	r2, #48	@ 0x30
 80143b6:	3237      	addhi	r2, #55	@ 0x37
 80143b8:	2b09      	cmp	r3, #9
 80143ba:	bf94      	ite	ls
 80143bc:	3330      	addls	r3, #48	@ 0x30
 80143be:	3337      	addhi	r3, #55	@ 0x37
 80143c0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80143c4:	7e6b      	ldrb	r3, [r5, #25]
 80143c6:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 80143ca:	2b9f      	cmp	r3, #159	@ 0x9f
 80143cc:	ea4f 1213 	mov.w	r2, r3, lsr #4
 80143d0:	f003 030f 	and.w	r3, r3, #15
 80143d4:	bf94      	ite	ls
 80143d6:	3230      	addls	r2, #48	@ 0x30
 80143d8:	3237      	addhi	r2, #55	@ 0x37
 80143da:	2b09      	cmp	r3, #9
 80143dc:	bf94      	ite	ls
 80143de:	3330      	addls	r3, #48	@ 0x30
 80143e0:	3337      	addhi	r3, #55	@ 0x37
 80143e2:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 80143e6:	2300      	movs	r3, #0
 80143e8:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 80143ec:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 80143f0:	6820      	ldr	r0, [r4, #0]
 80143f2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80143f4:	f104 0316 	add.w	r3, r4, #22
 80143f8:	61eb      	str	r3, [r5, #28]
 80143fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80143fe:	f88d 3017 	strb.w	r3, [sp, #23]
 8014402:	1e43      	subs	r3, r0, #1
 8014404:	4258      	negs	r0, r3
 8014406:	4158      	adcs	r0, r3
 8014408:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801440c:	f002 fd96 	bl	8016f3c <net::display_emac_status(bool)>
 8014410:	f10d 0317 	add.w	r3, sp, #23
 8014414:	9300      	str	r3, [sp, #0]
 8014416:	6820      	ldr	r0, [r4, #0]
 8014418:	463b      	mov	r3, r7
 801441a:	4632      	mov	r2, r6
 801441c:	4629      	mov	r1, r5
 801441e:	f7f3 ff49 	bl	80082b4 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)>
 8014422:	4620      	mov	r0, r4
 8014424:	b01f      	add	sp, #124	@ 0x7c
 8014426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014428:	223f      	movs	r2, #63	@ 0x3f
 801442a:	f10d 012d 	add.w	r1, sp, #45	@ 0x2d
 801442e:	f104 0016 	add.w	r0, r4, #22
 8014432:	f7ff febf 	bl	80141b4 <strncpy.isra.0>
 8014436:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
 801443a:	e7d9      	b.n	80143f0 <Network::Network()+0x110>
 801443c:	2000cb68 	andcs	ip, r0, r8, ror #22
 8014440:	0801c1cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, lr, pc}
 8014444:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8014448:	2000cb9c 	mulcs	r0, ip, fp
 801444c:	0801c1d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, lr, pc}
 8014450:	08014201 	stmdaeq	r1, {r0, r9, lr}
 8014454:	0801c1f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, lr, pc}

08014458 <Network::SetIp(unsigned long)>:
 8014458:	b510      	push	{r4, lr}
 801445a:	4b0d      	ldr	r3, [pc, #52]	@ (8014490 <Network::SetIp(unsigned long)+0x38>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	428b      	cmp	r3, r1
 8014460:	b086      	sub	sp, #24
 8014462:	460c      	mov	r4, r1
 8014464:	d012      	beq.n	801448c <Network::SetIp(unsigned long)+0x34>
 8014466:	4608      	mov	r0, r1
 8014468:	f000 fe04 	bl	8015074 <net::net_set_primary_ip(net::ip_addr)>
 801446c:	9405      	str	r4, [sp, #20]
 801446e:	2302      	movs	r3, #2
 8014470:	2400      	movs	r4, #0
 8014472:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014476:	2204      	movs	r2, #4
 8014478:	4806      	ldr	r0, [pc, #24]	@ (8014494 <Network::SetIp(unsigned long)+0x3c>)
 801447a:	9200      	str	r2, [sp, #0]
 801447c:	6800      	ldr	r0, [r0, #0]
 801447e:	ab05      	add	r3, sp, #20
 8014480:	4621      	mov	r1, r4
 8014482:	f002 fe71 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8014486:	4620      	mov	r0, r4
 8014488:	f7ff fea6 	bl	80141d8 <NetworkStore::SaveDhcp(bool)>
 801448c:	b006      	add	sp, #24
 801448e:	bd10      	pop	{r4, pc}
 8014490:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8014494:	2000cc34 	andcs	ip, r0, r4, lsr ip

08014498 <Network::SetNetmask(unsigned long)>:
 8014498:	b510      	push	{r4, lr}
 801449a:	4b0b      	ldr	r3, [pc, #44]	@ (80144c8 <Network::SetNetmask(unsigned long)+0x30>)
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	428b      	cmp	r3, r1
 80144a0:	b086      	sub	sp, #24
 80144a2:	460c      	mov	r4, r1
 80144a4:	d00e      	beq.n	80144c4 <Network::SetNetmask(unsigned long)+0x2c>
 80144a6:	4608      	mov	r0, r1
 80144a8:	f000 fe9e 	bl	80151e8 <net::netif_set_netmask(net::ip_addr)>
 80144ac:	2304      	movs	r3, #4
 80144ae:	2100      	movs	r1, #0
 80144b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80144b4:	4805      	ldr	r0, [pc, #20]	@ (80144cc <Network::SetNetmask(unsigned long)+0x34>)
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	6800      	ldr	r0, [r0, #0]
 80144ba:	9405      	str	r4, [sp, #20]
 80144bc:	ab05      	add	r3, sp, #20
 80144be:	2208      	movs	r2, #8
 80144c0:	f002 fe52 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80144c4:	b006      	add	sp, #24
 80144c6:	bd10      	pop	{r4, pc}
 80144c8:	2000cb88 	andcs	ip, r0, r8, lsl #23
 80144cc:	2000cc34 	andcs	ip, r0, r4, lsr ip

080144d0 <Network::SetGatewayIp(unsigned long)>:
 80144d0:	b510      	push	{r4, lr}
 80144d2:	4b0c      	ldr	r3, [pc, #48]	@ (8014504 <Network::SetGatewayIp(unsigned long)+0x34>)
 80144d4:	689b      	ldr	r3, [r3, #8]
 80144d6:	428b      	cmp	r3, r1
 80144d8:	b086      	sub	sp, #24
 80144da:	460c      	mov	r4, r1
 80144dc:	d00f      	beq.n	80144fe <Network::SetGatewayIp(unsigned long)+0x2e>
 80144de:	4608      	mov	r0, r1
 80144e0:	f000 fe96 	bl	8015210 <net::netif_set_gw(net::ip_addr)>
 80144e4:	2308      	movs	r3, #8
 80144e6:	2100      	movs	r1, #0
 80144e8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80144ec:	4806      	ldr	r0, [pc, #24]	@ (8014508 <Network::SetGatewayIp(unsigned long)+0x38>)
 80144ee:	9405      	str	r4, [sp, #20]
 80144f0:	2304      	movs	r3, #4
 80144f2:	9300      	str	r3, [sp, #0]
 80144f4:	6800      	ldr	r0, [r0, #0]
 80144f6:	ab05      	add	r3, sp, #20
 80144f8:	220c      	movs	r2, #12
 80144fa:	f002 fe35 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80144fe:	b006      	add	sp, #24
 8014500:	bd10      	pop	{r4, pc}
 8014502:	bf00      	nop
 8014504:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8014508:	2000cc34 	andcs	ip, r0, r4, lsr ip

0801450c <Network::SetHostName(char const*)>:
 801450c:	b530      	push	{r4, r5, lr}
 801450e:	f100 0416 	add.w	r4, r0, #22
 8014512:	4605      	mov	r5, r0
 8014514:	b085      	sub	sp, #20
 8014516:	223f      	movs	r2, #63	@ 0x3f
 8014518:	4620      	mov	r0, r4
 801451a:	f7ff fe4b 	bl	80141b4 <strncpy.isra.0>
 801451e:	2300      	movs	r3, #0
 8014520:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8014524:	4623      	mov	r3, r4
 8014526:	461a      	mov	r2, r3
 8014528:	3301      	adds	r3, #1
 801452a:	7811      	ldrb	r1, [r2, #0]
 801452c:	2900      	cmp	r1, #0
 801452e:	d1fa      	bne.n	8014526 <Network::SetHostName(char const*)+0x1a>
 8014530:	1b12      	subs	r2, r2, r4
 8014532:	2a40      	cmp	r2, #64	@ 0x40
 8014534:	bf28      	it	cs
 8014536:	2240      	movcs	r2, #64	@ 0x40
 8014538:	2320      	movs	r3, #32
 801453a:	4808      	ldr	r0, [pc, #32]	@ (801455c <Network::SetHostName(char const*)+0x50>)
 801453c:	9102      	str	r1, [sp, #8]
 801453e:	9301      	str	r3, [sp, #4]
 8014540:	9200      	str	r2, [sp, #0]
 8014542:	6800      	ldr	r0, [r0, #0]
 8014544:	4623      	mov	r3, r4
 8014546:	2215      	movs	r2, #21
 8014548:	f002 fe0e 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 801454c:	f7ff fc6a 	bl	8013e24 <network::mdns_announcement()>
 8014550:	b005      	add	sp, #20
 8014552:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014556:	f002 bd57 	b.w	8017008 <net::display_hostname()>
 801455a:	bf00      	nop
 801455c:	2000cc34 	andcs	ip, r0, r4, lsr ip

08014560 <Network::SetZeroconf()>:
 8014560:	b508      	push	{r3, lr}
 8014562:	f000 f869 	bl	8014638 <net::autoip_start()>
 8014566:	2000      	movs	r0, #0
 8014568:	f7ff fe36 	bl	80141d8 <NetworkStore::SaveDhcp(bool)>
 801456c:	bd08      	pop	{r3, pc}

0801456e <Network::EnableDhcp()>:
 801456e:	b508      	push	{r3, lr}
 8014570:	f000 fada 	bl	8014b28 <net::dhcp_start()>
 8014574:	2001      	movs	r0, #1
 8014576:	f7ff fe2f 	bl	80141d8 <NetworkStore::SaveDhcp(bool)>
 801457a:	bd08      	pop	{r3, pc}

0801457c <Network::SetQueuedStaticIp(unsigned long, unsigned long)>:
 801457c:	b909      	cbnz	r1, 8014582 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x6>
 801457e:	4b08      	ldr	r3, [pc, #32]	@ (80145a0 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x24>)
 8014580:	6819      	ldr	r1, [r3, #0]
 8014582:	f8c0 10a8 	str.w	r1, [r0, #168]	@ 0xa8
 8014586:	b90a      	cbnz	r2, 801458c <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x10>
 8014588:	4b05      	ldr	r3, [pc, #20]	@ (80145a0 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x24>)
 801458a:	685a      	ldr	r2, [r3, #4]
 801458c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8014590:	f8c0 20ac 	str.w	r2, [r0, #172]	@ 0xac
 8014594:	f043 0303 	orr.w	r3, r3, #3
 8014598:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop
 80145a0:	2000cb88 	andcs	ip, r0, r8, lsl #23

080145a4 <Network::SetQueuedDefaultRoute(unsigned long)>:
 80145a4:	b909      	cbnz	r1, 80145aa <Network::SetQueuedDefaultRoute(unsigned long)+0x6>
 80145a6:	4b05      	ldr	r3, [pc, #20]	@ (80145bc <Network::SetQueuedDefaultRoute(unsigned long)+0x18>)
 80145a8:	6899      	ldr	r1, [r3, #8]
 80145aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80145ae:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
 80145b2:	f043 0304 	orr.w	r3, r3, #4
 80145b6:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 80145ba:	4770      	bx	lr
 80145bc:	2000cb88 	andcs	ip, r0, r8, lsl #23

080145c0 <Network::ApplyQueuedConfig()>:
 80145c0:	b538      	push	{r3, r4, r5, lr}
 80145c2:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80145c6:	4604      	mov	r4, r0
 80145c8:	b3a3      	cbz	r3, 8014634 <Network::ApplyQueuedConfig()+0x74>
 80145ca:	07d9      	lsls	r1, r3, #31
 80145cc:	d40f      	bmi.n	80145ee <Network::ApplyQueuedConfig()+0x2e>
 80145ce:	f013 0f06 	tst.w	r3, #6
 80145d2:	d110      	bne.n	80145f6 <Network::ApplyQueuedConfig()+0x36>
 80145d4:	f013 0508 	ands.w	r5, r3, #8
 80145d8:	d024      	beq.n	8014624 <Network::ApplyQueuedConfig()+0x64>
 80145da:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 80145de:	2b01      	cmp	r3, #1
 80145e0:	d101      	bne.n	80145e6 <Network::ApplyQueuedConfig()+0x26>
 80145e2:	f7ff ffc4 	bl	801456e <Network::EnableDhcp()>
 80145e6:	2302      	movs	r3, #2
 80145e8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80145ec:	e015      	b.n	801461a <Network::ApplyQueuedConfig()+0x5a>
 80145ee:	f8d0 10a8 	ldr.w	r1, [r0, #168]	@ 0xa8
 80145f2:	f7ff ff31 	bl	8014458 <Network::SetIp(unsigned long)>
 80145f6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80145fa:	079a      	lsls	r2, r3, #30
 80145fc:	d504      	bpl.n	8014608 <Network::ApplyQueuedConfig()+0x48>
 80145fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8014602:	4620      	mov	r0, r4
 8014604:	f7ff ff48 	bl	8014498 <Network::SetNetmask(unsigned long)>
 8014608:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 801460c:	075b      	lsls	r3, r3, #29
 801460e:	d504      	bpl.n	801461a <Network::ApplyQueuedConfig()+0x5a>
 8014610:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8014614:	4620      	mov	r0, r4
 8014616:	f7ff ff5b 	bl	80144d0 <Network::SetGatewayIp(unsigned long)>
 801461a:	2300      	movs	r3, #0
 801461c:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
 8014620:	2001      	movs	r0, #1
 8014622:	bd38      	pop	{r3, r4, r5, pc}
 8014624:	f013 0310 	ands.w	r3, r3, #16
 8014628:	d004      	beq.n	8014634 <Network::ApplyQueuedConfig()+0x74>
 801462a:	f7ff ff99 	bl	8014560 <Network::SetZeroconf()>
 801462e:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 8014632:	e7f5      	b.n	8014620 <Network::ApplyQueuedConfig()+0x60>
 8014634:	4618      	mov	r0, r3
 8014636:	e7f4      	b.n	8014622 <Network::ApplyQueuedConfig()+0x62>

08014638 <net::autoip_start()>:
 8014638:	b570      	push	{r4, r5, r6, lr}
 801463a:	4e21      	ldr	r6, [pc, #132]	@ (80146c0 <net::autoip_start()+0x88>)
 801463c:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801463e:	b95c      	cbnz	r4, 8014658 <net::autoip_start()+0x20>
 8014640:	201c      	movs	r0, #28
 8014642:	f006 fd47 	bl	801b0d4 <operator new(unsigned int)>
 8014646:	2100      	movs	r1, #0
 8014648:	4604      	mov	r4, r0
 801464a:	f100 021c 	add.w	r2, r0, #28
 801464e:	4603      	mov	r3, r0
 8014650:	f803 1b01 	strb.w	r1, [r3], #1
 8014654:	4293      	cmp	r3, r2
 8014656:	d1fb      	bne.n	8014650 <net::autoip_start()+0x18>
 8014658:	6863      	ldr	r3, [r4, #4]
 801465a:	bb7b      	cbnz	r3, 80146bc <net::autoip_start()+0x84>
 801465c:	f104 050c 	add.w	r5, r4, #12
 8014660:	4918      	ldr	r1, [pc, #96]	@ (80146c4 <net::autoip_start()+0x8c>)
 8014662:	4628      	mov	r0, r5
 8014664:	f001 fec2 	bl	80163ec <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>
 8014668:	8822      	ldrh	r2, [r4, #0]
 801466a:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 801466e:	429a      	cmp	r2, r3
 8014670:	d01c      	beq.n	80146ac <net::autoip_start()+0x74>
 8014672:	f8b6 3017 	ldrh.w	r3, [r6, #23]
 8014676:	4a14      	ldr	r2, [pc, #80]	@ (80146c8 <net::autoip_start()+0x90>)
 8014678:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801467c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 801467e:	7a1b      	ldrb	r3, [r3, #8]
 8014680:	ba12      	rev	r2, r2
 8014682:	4413      	add	r3, r2
 8014684:	b29b      	uxth	r3, r3
 8014686:	4a11      	ldr	r2, [pc, #68]	@ (80146cc <net::autoip_start()+0x94>)
 8014688:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 801468c:	f443 037e 	orr.w	r3, r3, #16646144	@ 0xfe0000
 8014690:	4293      	cmp	r3, r2
 8014692:	4a0f      	ldr	r2, [pc, #60]	@ (80146d0 <net::autoip_start()+0x98>)
 8014694:	bf98      	it	ls
 8014696:	f503 437e 	addls.w	r3, r3, #65024	@ 0xfe00
 801469a:	4293      	cmp	r3, r2
 801469c:	6023      	str	r3, [r4, #0]
 801469e:	bf84      	itt	hi
 80146a0:	f5a3 437e 	subhi.w	r3, r3, #65024	@ 0xfe00
 80146a4:	6023      	strhi	r3, [r4, #0]
 80146a6:	6823      	ldr	r3, [r4, #0]
 80146a8:	ba1b      	rev	r3, r3
 80146aa:	6023      	str	r3, [r4, #0]
 80146ac:	2301      	movs	r3, #1
 80146ae:	6821      	ldr	r1, [r4, #0]
 80146b0:	6063      	str	r3, [r4, #4]
 80146b2:	4628      	mov	r0, r5
 80146b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146b8:	f001 bd62 	b.w	8016180 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 80146bc:	bd70      	pop	{r4, r5, r6, pc}
 80146be:	bf00      	nop
 80146c0:	2000cb88 	andcs	ip, r0, r8, lsl #23
 80146c4:	080146f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, lr}
 80146c8:	0001fea9 	andeq	pc, r1, r9, lsr #29
 80146cc:	a9fe00ff 	ldmibge	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}^
 80146d0:	a9fefeff 	ldmibge	lr!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr, pc}^

080146d4 <net::autoip_stop()>:
 80146d4:	4b07      	ldr	r3, [pc, #28]	@ (80146f4 <net::autoip_stop()+0x20>)
 80146d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80146d8:	b151      	cbz	r1, 80146f0 <net::autoip_stop()+0x1c>
 80146da:	2200      	movs	r2, #0
 80146dc:	604a      	str	r2, [r1, #4]
 80146de:	8819      	ldrh	r1, [r3, #0]
 80146e0:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 80146e4:	4299      	cmp	r1, r3
 80146e6:	d103      	bne.n	80146f0 <net::autoip_stop()+0x1c>
 80146e8:	4611      	mov	r1, r2
 80146ea:	4610      	mov	r0, r2
 80146ec:	f000 bda4 	b.w	8015238 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 80146f0:	4770      	bx	lr
 80146f2:	bf00      	nop
 80146f4:	2000cb88 	andcs	ip, r0, r8, lsl #23

080146f8 <net::autoip_conflict_callback(net::acd::Callback)>:
 80146f8:	b510      	push	{r4, lr}
 80146fa:	4c11      	ldr	r4, [pc, #68]	@ (8014740 <net::autoip_conflict_callback(net::acd::Callback)+0x48>)
 80146fc:	2801      	cmp	r0, #1
 80146fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014700:	4602      	mov	r2, r0
 8014702:	d00e      	beq.n	8014722 <net::autoip_conflict_callback(net::acd::Callback)+0x2a>
 8014704:	2802      	cmp	r0, #2
 8014706:	d013      	beq.n	8014730 <net::autoip_conflict_callback(net::acd::Callback)+0x38>
 8014708:	b950      	cbnz	r0, 8014720 <net::autoip_conflict_callback(net::acd::Callback)+0x28>
 801470a:	2102      	movs	r1, #2
 801470c:	6059      	str	r1, [r3, #4]
 801470e:	6818      	ldr	r0, [r3, #0]
 8014710:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014714:	f000 fd90 	bl	8015238 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8014718:	7ea3      	ldrb	r3, [r4, #26]
 801471a:	f043 0304 	orr.w	r3, r3, #4
 801471e:	76a3      	strb	r3, [r4, #26]
 8014720:	bd10      	pop	{r4, pc}
 8014722:	7a1a      	ldrb	r2, [r3, #8]
 8014724:	3201      	adds	r2, #1
 8014726:	721a      	strb	r2, [r3, #8]
 8014728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801472c:	f7ff bf84 	b.w	8014638 <net::autoip_start()>
 8014730:	2200      	movs	r2, #0
 8014732:	601a      	str	r2, [r3, #0]
 8014734:	f7ff ffce 	bl	80146d4 <net::autoip_stop()>
 8014738:	7ea3      	ldrb	r3, [r4, #26]
 801473a:	f023 0304 	bic.w	r3, r3, #4
 801473e:	e7ee      	b.n	801471e <net::autoip_conflict_callback(net::acd::Callback)+0x26>
 8014740:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014744 <net::dhcp_bind()>:
 8014744:	4833      	ldr	r0, [pc, #204]	@ (8014814 <net::dhcp_bind()+0xd0>)
 8014746:	6a03      	ldr	r3, [r0, #32]
 8014748:	2200      	movs	r2, #0
 801474a:	b410      	push	{r4}
 801474c:	82da      	strh	r2, [r3, #22]
 801474e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014750:	1c51      	adds	r1, r2, #1
 8014752:	d009      	beq.n	8014768 <net::dhcp_bind()+0x24>
 8014754:	321e      	adds	r2, #30
 8014756:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 801475a:	d23f      	bcs.n	80147dc <net::dhcp_bind()+0x98>
 801475c:	2a3b      	cmp	r2, #59	@ 0x3b
 801475e:	d940      	bls.n	80147e2 <net::dhcp_bind()+0x9e>
 8014760:	213c      	movs	r1, #60	@ 0x3c
 8014762:	fbb2 f2f1 	udiv	r2, r2, r1
 8014766:	831a      	strh	r2, [r3, #24]
 8014768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801476a:	1c54      	adds	r4, r2, #1
 801476c:	d00b      	beq.n	8014786 <net::dhcp_bind()+0x42>
 801476e:	321e      	adds	r2, #30
 8014770:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 8014774:	d237      	bcs.n	80147e6 <net::dhcp_bind()+0xa2>
 8014776:	2a3b      	cmp	r2, #59	@ 0x3b
 8014778:	d938      	bls.n	80147ec <net::dhcp_bind()+0xa8>
 801477a:	213c      	movs	r1, #60	@ 0x3c
 801477c:	fbb2 f2f1 	udiv	r2, r2, r1
 8014780:	b292      	uxth	r2, r2
 8014782:	81da      	strh	r2, [r3, #14]
 8014784:	825a      	strh	r2, [r3, #18]
 8014786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014788:	1c51      	adds	r1, r2, #1
 801478a:	d00b      	beq.n	80147a4 <net::dhcp_bind()+0x60>
 801478c:	321e      	adds	r2, #30
 801478e:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 8014792:	d22d      	bcs.n	80147f0 <net::dhcp_bind()+0xac>
 8014794:	2a3b      	cmp	r2, #59	@ 0x3b
 8014796:	d92e      	bls.n	80147f6 <net::dhcp_bind()+0xb2>
 8014798:	213c      	movs	r1, #60	@ 0x3c
 801479a:	fbb2 f2f1 	udiv	r2, r2, r1
 801479e:	b292      	uxth	r2, r2
 80147a0:	821a      	strh	r2, [r3, #16]
 80147a2:	829a      	strh	r2, [r3, #20]
 80147a4:	8a1a      	ldrh	r2, [r3, #16]
 80147a6:	89d9      	ldrh	r1, [r3, #14]
 80147a8:	4291      	cmp	r1, r2
 80147aa:	d302      	bcc.n	80147b2 <net::dhcp_bind()+0x6e>
 80147ac:	b10a      	cbz	r2, 80147b2 <net::dhcp_bind()+0x6e>
 80147ae:	2200      	movs	r2, #0
 80147b0:	81da      	strh	r2, [r3, #14]
 80147b2:	7a9a      	ldrb	r2, [r3, #10]
 80147b4:	07d4      	lsls	r4, r2, #31
 80147b6:	d520      	bpl.n	80147fa <net::dhcp_bind()+0xb6>
 80147b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80147ba:	7a1c      	ldrb	r4, [r3, #8]
 80147bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80147be:	2c0a      	cmp	r4, #10
 80147c0:	bf1f      	itttt	ne
 80147c2:	240a      	movne	r4, #10
 80147c4:	811c      	strhne	r4, [r3, #8]
 80147c6:	2400      	movne	r4, #0
 80147c8:	819c      	strhne	r4, [r3, #12]
 80147ca:	7e84      	ldrb	r4, [r0, #26]
 80147cc:	f044 0402 	orr.w	r4, r4, #2
 80147d0:	7684      	strb	r4, [r0, #26]
 80147d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147d6:	6a18      	ldr	r0, [r3, #32]
 80147d8:	f000 bd2e 	b.w	8015238 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 80147dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80147e0:	e7c1      	b.n	8014766 <net::dhcp_bind()+0x22>
 80147e2:	2201      	movs	r2, #1
 80147e4:	e7bf      	b.n	8014766 <net::dhcp_bind()+0x22>
 80147e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80147ea:	e7c9      	b.n	8014780 <net::dhcp_bind()+0x3c>
 80147ec:	2201      	movs	r2, #1
 80147ee:	e7c7      	b.n	8014780 <net::dhcp_bind()+0x3c>
 80147f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80147f4:	e7d3      	b.n	801479e <net::dhcp_bind()+0x5a>
 80147f6:	2201      	movs	r2, #1
 80147f8:	e7d1      	b.n	801479e <net::dhcp_bind()+0x5a>
 80147fa:	6a1a      	ldr	r2, [r3, #32]
 80147fc:	0611      	lsls	r1, r2, #24
 80147fe:	d507      	bpl.n	8014810 <net::dhcp_bind()+0xcc>
 8014800:	b2d2      	uxtb	r2, r2
 8014802:	2abf      	cmp	r2, #191	@ 0xbf
 8014804:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014808:	bf88      	it	hi
 801480a:	f06f 417f 	mvnhi.w	r1, #4278190080	@ 0xff000000
 801480e:	e7d4      	b.n	80147ba <net::dhcp_bind()+0x76>
 8014810:	21ff      	movs	r1, #255	@ 0xff
 8014812:	e7d2      	b.n	80147ba <net::dhcp_bind()+0x76>
 8014814:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014818 <net::message_init()>:
 8014818:	b508      	push	{r3, lr}
 801481a:	4b0c      	ldr	r3, [pc, #48]	@ (801484c <net::message_init()+0x34>)
 801481c:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8014820:	2100      	movs	r1, #0
 8014822:	4618      	mov	r0, r3
 8014824:	f005 ff1c 	bl	801a660 <memset>
 8014828:	f240 1201 	movw	r2, #257	@ 0x101
 801482c:	8002      	strh	r2, [r0, #0]
 801482e:	2206      	movs	r2, #6
 8014830:	7082      	strb	r2, [r0, #2]
 8014832:	4a07      	ldr	r2, [pc, #28]	@ (8014850 <net::message_init()+0x38>)
 8014834:	6951      	ldr	r1, [r2, #20]
 8014836:	8b12      	ldrh	r2, [r2, #24]
 8014838:	8402      	strh	r2, [r0, #32]
 801483a:	4a06      	ldr	r2, [pc, #24]	@ (8014854 <net::message_init()+0x3c>)
 801483c:	f8c0 20ec 	str.w	r2, [r0, #236]	@ 0xec
 8014840:	f240 1235 	movw	r2, #309	@ 0x135
 8014844:	f8a0 20f0 	strh.w	r2, [r0, #240]	@ 0xf0
 8014848:	61c1      	str	r1, [r0, #28]
 801484a:	bd08      	pop	{r3, pc}
 801484c:	10008000 	andne	r8, r0, r0
 8014850:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8014854:	63538263 	cmpvs	r3, #805306374	@ 0x30000006

08014858 <net::dhcp_discover()>:
 8014858:	4a27      	ldr	r2, [pc, #156]	@ (80148f8 <net::dhcp_discover()+0xa0>)
 801485a:	b513      	push	{r0, r1, r4, lr}
 801485c:	6a14      	ldr	r4, [r2, #32]
 801485e:	7a21      	ldrb	r1, [r4, #8]
 8014860:	2906      	cmp	r1, #6
 8014862:	bf1c      	itt	ne
 8014864:	2106      	movne	r1, #6
 8014866:	8121      	strhne	r1, [r4, #8]
 8014868:	f04f 0300 	mov.w	r3, #0
 801486c:	6a10      	ldr	r0, [r2, #32]
 801486e:	6223      	str	r3, [r4, #32]
 8014870:	bf18      	it	ne
 8014872:	81a3      	strhne	r3, [r4, #12]
 8014874:	7a43      	ldrb	r3, [r0, #9]
 8014876:	b923      	cbnz	r3, 8014882 <net::dhcp_discover()+0x2a>
 8014878:	6843      	ldr	r3, [r0, #4]
 801487a:	ba1b      	rev	r3, r3
 801487c:	3301      	adds	r3, #1
 801487e:	ba1b      	rev	r3, r3
 8014880:	6043      	str	r3, [r0, #4]
 8014882:	491e      	ldr	r1, [pc, #120]	@ (80148fc <net::dhcp_discover()+0xa4>)
 8014884:	6843      	ldr	r3, [r0, #4]
 8014886:	604b      	str	r3, [r1, #4]
 8014888:	f643 5301 	movw	r3, #15617	@ 0x3d01
 801488c:	f8a1 30f2 	strh.w	r3, [r1, #242]	@ 0xf2
 8014890:	f240 1307 	movw	r3, #263	@ 0x107
 8014894:	f8a1 30f4 	strh.w	r3, [r1, #244]	@ 0xf4
 8014898:	8a93      	ldrh	r3, [r2, #20]
 801489a:	f8a1 30f6 	strh.w	r3, [r1, #246]	@ 0xf6
 801489e:	8ad3      	ldrh	r3, [r2, #22]
 80148a0:	f8a1 30f8 	strh.w	r3, [r1, #248]	@ 0xf8
 80148a4:	8b13      	ldrh	r3, [r2, #24]
 80148a6:	f8a1 30fa 	strh.w	r3, [r1, #250]	@ 0xfa
 80148aa:	4a15      	ldr	r2, [pc, #84]	@ (8014900 <net::dhcp_discover()+0xa8>)
 80148ac:	4b15      	ldr	r3, [pc, #84]	@ (8014904 <net::dhcp_discover()+0xac>)
 80148ae:	e9c1 233f 	strd	r2, r3, [r1, #252]	@ 0xfc
 80148b2:	23ff      	movs	r3, #255	@ 0xff
 80148b4:	f881 3104 	strb.w	r3, [r1, #260]	@ 0x104
 80148b8:	2343      	movs	r3, #67	@ 0x43
 80148ba:	9300      	str	r3, [sp, #0]
 80148bc:	6800      	ldr	r0, [r0, #0]
 80148be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80148c2:	f240 1205 	movw	r2, #261	@ 0x105
 80148c6:	f000 ffa7 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 80148ca:	7a63      	ldrb	r3, [r4, #9]
 80148cc:	2bff      	cmp	r3, #255	@ 0xff
 80148ce:	bf1c      	itt	ne
 80148d0:	3301      	addne	r3, #1
 80148d2:	7263      	strbne	r3, [r4, #9]
 80148d4:	7a62      	ldrb	r2, [r4, #9]
 80148d6:	2a05      	cmp	r2, #5
 80148d8:	bf9a      	itte	ls
 80148da:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
 80148de:	4093      	lslls	r3, r2
 80148e0:	f64e 2360 	movwhi	r3, #60000	@ 0xea60
 80148e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80148e8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80148ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80148f0:	81a3      	strh	r3, [r4, #12]
 80148f2:	b002      	add	sp, #8
 80148f4:	bd10      	pop	{r4, pc}
 80148f6:	bf00      	nop
 80148f8:	2000cb88 	andcs	ip, r0, r8, lsl #23
 80148fc:	10008000 	andne	r8, r0, r0
 8014900:	03010637 	movweq	r0, #5687	@ 0x1637
 8014904:	3b3a330f 	blcc	8ea1548 <_sidata+0xe81e44>

08014908 <net::memcpy_ip(unsigned char*, unsigned long)>:
 8014908:	6001      	str	r1, [r0, #0]
 801490a:	4770      	bx	lr

0801490c <net::send_request()>:
 801490c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801490e:	4c31      	ldr	r4, [pc, #196]	@ (80149d4 <net::send_request()+0xc8>)
 8014910:	4d31      	ldr	r5, [pc, #196]	@ (80149d8 <net::send_request()+0xcc>)
 8014912:	f643 5303 	movw	r3, #15619	@ 0x3d03
 8014916:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 801491a:	f240 1307 	movw	r3, #263	@ 0x107
 801491e:	f8a4 30f4 	strh.w	r3, [r4, #244]	@ 0xf4
 8014922:	8aab      	ldrh	r3, [r5, #20]
 8014924:	f8a4 30f6 	strh.w	r3, [r4, #246]	@ 0xf6
 8014928:	8aeb      	ldrh	r3, [r5, #22]
 801492a:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 801492e:	8b2b      	ldrh	r3, [r5, #24]
 8014930:	6a2e      	ldr	r6, [r5, #32]
 8014932:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8014936:	f240 4332 	movw	r3, #1074	@ 0x432
 801493a:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 801493e:	6a31      	ldr	r1, [r6, #32]
 8014940:	f104 00fe 	add.w	r0, r4, #254	@ 0xfe
 8014944:	f7ff ffe0 	bl	8014908 <net::memcpy_ip(unsigned char*, unsigned long)>
 8014948:	f240 4336 	movw	r3, #1078	@ 0x436
 801494c:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8014950:	69f1      	ldr	r1, [r6, #28]
 8014952:	f504 7082 	add.w	r0, r4, #260	@ 0x104
 8014956:	f7ff ffd7 	bl	8014908 <net::memcpy_ip(unsigned char*, unsigned long)>
 801495a:	230c      	movs	r3, #12
 801495c:	f8a4 3108 	strh.w	r3, [r4, #264]	@ 0x108
 8014960:	69eb      	ldr	r3, [r5, #28]
 8014962:	221e      	movs	r2, #30
 8014964:	3b01      	subs	r3, #1
 8014966:	f204 1509 	addw	r5, r4, #265	@ 0x109
 801496a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801496e:	1c51      	adds	r1, r2, #1
 8014970:	bb58      	cbnz	r0, 80149ca <net::send_request()+0xbe>
 8014972:	f1a2 031e 	sub.w	r3, r2, #30
 8014976:	f884 3109 	strb.w	r3, [r4, #265]	@ 0x109
 801497a:	18a3      	adds	r3, r4, r2
 801497c:	440c      	add	r4, r1
 801497e:	2037      	movs	r0, #55	@ 0x37
 8014980:	2106      	movs	r1, #6
 8014982:	f883 00ec 	strb.w	r0, [r3, #236]	@ 0xec
 8014986:	f884 10ec 	strb.w	r1, [r4, #236]	@ 0xec
 801498a:	f883 10f0 	strb.w	r1, [r3, #240]	@ 0xf0
 801498e:	210f      	movs	r1, #15
 8014990:	f883 10f1 	strb.w	r1, [r3, #241]	@ 0xf1
 8014994:	213a      	movs	r1, #58	@ 0x3a
 8014996:	f883 10f2 	strb.w	r1, [r3, #242]	@ 0xf2
 801499a:	2001      	movs	r0, #1
 801499c:	213b      	movs	r1, #59	@ 0x3b
 801499e:	f883 00ee 	strb.w	r0, [r3, #238]	@ 0xee
 80149a2:	f883 10f3 	strb.w	r1, [r3, #243]	@ 0xf3
 80149a6:	2003      	movs	r0, #3
 80149a8:	21ff      	movs	r1, #255	@ 0xff
 80149aa:	f883 10f4 	strb.w	r1, [r3, #244]	@ 0xf4
 80149ae:	f883 00ef 	strb.w	r0, [r3, #239]	@ 0xef
 80149b2:	2343      	movs	r3, #67	@ 0x43
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	32f5      	adds	r2, #245	@ 0xf5
 80149b8:	4906      	ldr	r1, [pc, #24]	@ (80149d4 <net::send_request()+0xc8>)
 80149ba:	6830      	ldr	r0, [r6, #0]
 80149bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80149c0:	b292      	uxth	r2, r2
 80149c2:	f000 ff29 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 80149c6:	b002      	add	sp, #8
 80149c8:	bd70      	pop	{r4, r5, r6, pc}
 80149ca:	f805 0f01 	strb.w	r0, [r5, #1]!
 80149ce:	460a      	mov	r2, r1
 80149d0:	e7cb      	b.n	801496a <net::send_request()+0x5e>
 80149d2:	bf00      	nop
 80149d4:	10008000 	andne	r8, r0, r0
 80149d8:	2000cb88 	andcs	ip, r0, r8, lsl #23

080149dc <net::dhcp_select()>:
 80149dc:	4b11      	ldr	r3, [pc, #68]	@ (8014a24 <net::dhcp_select()+0x48>)
 80149de:	b510      	push	{r4, lr}
 80149e0:	6a1c      	ldr	r4, [r3, #32]
 80149e2:	7a23      	ldrb	r3, [r4, #8]
 80149e4:	2b01      	cmp	r3, #1
 80149e6:	bf1f      	itttt	ne
 80149e8:	2301      	movne	r3, #1
 80149ea:	8123      	strhne	r3, [r4, #8]
 80149ec:	2300      	movne	r3, #0
 80149ee:	81a3      	strhne	r3, [r4, #12]
 80149f0:	f7ff ff8c 	bl	801490c <net::send_request()>
 80149f4:	7a63      	ldrb	r3, [r4, #9]
 80149f6:	2bff      	cmp	r3, #255	@ 0xff
 80149f8:	bf1c      	itt	ne
 80149fa:	3301      	addne	r3, #1
 80149fc:	7263      	strbne	r3, [r4, #9]
 80149fe:	7a62      	ldrb	r2, [r4, #9]
 8014a00:	2a05      	cmp	r2, #5
 8014a02:	bf9d      	ittte	ls
 8014a04:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
 8014a08:	4093      	lslls	r3, r2
 8014a0a:	b29b      	uxthls	r3, r3
 8014a0c:	f64e 2360 	movwhi	r3, #60000	@ 0xea60
 8014a10:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a1e:	81a3      	strh	r3, [r4, #12]
 8014a20:	bd10      	pop	{r4, pc}
 8014a22:	bf00      	nop
 8014a24:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014a28 <net::dhcp_reboot()>:
 8014a28:	4b12      	ldr	r3, [pc, #72]	@ (8014a74 <net::dhcp_reboot()+0x4c>)
 8014a2a:	b510      	push	{r4, lr}
 8014a2c:	6a1c      	ldr	r4, [r3, #32]
 8014a2e:	7a23      	ldrb	r3, [r4, #8]
 8014a30:	2b03      	cmp	r3, #3
 8014a32:	bf1f      	itttt	ne
 8014a34:	2303      	movne	r3, #3
 8014a36:	8123      	strhne	r3, [r4, #8]
 8014a38:	2300      	movne	r3, #0
 8014a3a:	81a3      	strhne	r3, [r4, #12]
 8014a3c:	f7ff ff66 	bl	801490c <net::send_request()>
 8014a40:	7a63      	ldrb	r3, [r4, #9]
 8014a42:	2bff      	cmp	r3, #255	@ 0xff
 8014a44:	bf1c      	itt	ne
 8014a46:	3301      	addne	r3, #1
 8014a48:	7263      	strbne	r3, [r4, #9]
 8014a4a:	7a63      	ldrb	r3, [r4, #9]
 8014a4c:	2b09      	cmp	r3, #9
 8014a4e:	bf9f      	itttt	ls
 8014a50:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8014a54:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8014a58:	00db      	lslls	r3, r3, #3
 8014a5a:	b29b      	uxthls	r3, r3
 8014a5c:	bf88      	it	hi
 8014a5e:	f242 7310 	movwhi	r3, #10000	@ 0x2710
 8014a62:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014a66:	b29b      	uxth	r3, r3
 8014a68:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a70:	81a3      	strh	r3, [r4, #12]
 8014a72:	bd10      	pop	{r4, pc}
 8014a74:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014a78 <net::memcpy_ip(unsigned char const*)>:
 8014a78:	6800      	ldr	r0, [r0, #0]
 8014a7a:	4770      	bx	lr

08014a7c <net::dhcp_handle_ack(net::dhcp::Message const*)>:
 8014a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8014ab8 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x3c>)
 8014a7e:	b510      	push	{r4, lr}
 8014a80:	6a1c      	ldr	r4, [r3, #32]
 8014a82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a84:	b913      	cbnz	r3, 8014a8c <net::dhcp_handle_ack(net::dhcp::Message const*)+0x10>
 8014a86:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8014a88:	085b      	lsrs	r3, r3, #1
 8014a8a:	6323      	str	r3, [r4, #48]	@ 0x30
 8014a8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014a8e:	b923      	cbnz	r3, 8014a9a <net::dhcp_handle_ack(net::dhcp::Message const*)+0x1e>
 8014a90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8014a92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014a96:	08db      	lsrs	r3, r3, #3
 8014a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a9a:	3010      	adds	r0, #16
 8014a9c:	f7ff ffec 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014aa0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014aa2:	7aa3      	ldrb	r3, [r4, #10]
 8014aa4:	6220      	str	r0, [r4, #32]
 8014aa6:	b11a      	cbz	r2, 8014ab0 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x34>
 8014aa8:	f043 0301 	orr.w	r3, r3, #1
 8014aac:	72a3      	strb	r3, [r4, #10]
 8014aae:	bd10      	pop	{r4, pc}
 8014ab0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8014ab4:	e7fa      	b.n	8014aac <net::dhcp_handle_ack(net::dhcp::Message const*)+0x30>
 8014ab6:	bf00      	nop
 8014ab8:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014abc <net::dhcp_inform()>:
 8014abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014abe:	2044      	movs	r0, #68	@ 0x44
 8014ac0:	f000 fe52 	bl	8015768 <net::udp_begin(unsigned short)>
 8014ac4:	4c16      	ldr	r4, [pc, #88]	@ (8014b20 <net::dhcp_inform()+0x64>)
 8014ac6:	4d17      	ldr	r5, [pc, #92]	@ (8014b24 <net::dhcp_inform()+0x68>)
 8014ac8:	4606      	mov	r6, r0
 8014aca:	f7ff fea5 	bl	8014818 <net::message_init()>
 8014ace:	6829      	ldr	r1, [r5, #0]
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	f7ff ff19 	bl	8014908 <net::memcpy_ip(unsigned char*, unsigned long)>
 8014ad6:	f1a4 010c 	sub.w	r1, r4, #12
 8014ada:	f643 5308 	movw	r3, #15624	@ 0x3d08
 8014ade:	f8a1 30f2 	strh.w	r3, [r1, #242]	@ 0xf2
 8014ae2:	f240 1307 	movw	r3, #263	@ 0x107
 8014ae6:	f8a1 30f4 	strh.w	r3, [r1, #244]	@ 0xf4
 8014aea:	8aab      	ldrh	r3, [r5, #20]
 8014aec:	f8a1 30f6 	strh.w	r3, [r1, #246]	@ 0xf6
 8014af0:	8aeb      	ldrh	r3, [r5, #22]
 8014af2:	f8a1 30f8 	strh.w	r3, [r1, #248]	@ 0xf8
 8014af6:	8b2b      	ldrh	r3, [r5, #24]
 8014af8:	f8a1 30fa 	strh.w	r3, [r1, #250]	@ 0xfa
 8014afc:	23ff      	movs	r3, #255	@ 0xff
 8014afe:	f881 30fc 	strb.w	r3, [r1, #252]	@ 0xfc
 8014b02:	2343      	movs	r3, #67	@ 0x43
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	4630      	mov	r0, r6
 8014b08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014b0c:	22fd      	movs	r2, #253	@ 0xfd
 8014b0e:	f000 fe83 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 8014b12:	2044      	movs	r0, #68	@ 0x44
 8014b14:	b002      	add	sp, #8
 8014b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b1a:	f000 be3b 	b.w	8015794 <net::udp_end(unsigned short)>
 8014b1e:	bf00      	nop
 8014b20:	1000800c 	andne	r8, r0, ip
 8014b24:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014b28 <net::dhcp_start()>:
 8014b28:	b570      	push	{r4, r5, r6, lr}
 8014b2a:	4d20      	ldr	r5, [pc, #128]	@ (8014bac <net::dhcp_start()+0x84>)
 8014b2c:	6a2c      	ldr	r4, [r5, #32]
 8014b2e:	b96c      	cbnz	r4, 8014b4c <net::dhcp_start()+0x24>
 8014b30:	2048      	movs	r0, #72	@ 0x48
 8014b32:	f006 facf 	bl	801b0d4 <operator new(unsigned int)>
 8014b36:	4b1e      	ldr	r3, [pc, #120]	@ (8014bb0 <net::dhcp_start()+0x88>)
 8014b38:	6228      	str	r0, [r5, #32]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8014b40:	2907      	cmp	r1, #7
 8014b42:	4604      	mov	r4, r0
 8014b44:	d919      	bls.n	8014b7a <net::dhcp_start()+0x52>
 8014b46:	481b      	ldr	r0, [pc, #108]	@ (8014bb4 <net::dhcp_start()+0x8c>)
 8014b48:	f003 fd66 	bl	8018618 <console_error>
 8014b4c:	2248      	movs	r2, #72	@ 0x48
 8014b4e:	2100      	movs	r1, #0
 8014b50:	4620      	mov	r0, r4
 8014b52:	f005 fd85 	bl	801a660 <memset>
 8014b56:	2044      	movs	r0, #68	@ 0x44
 8014b58:	f000 fe06 	bl	8015768 <net::udp_begin(unsigned short)>
 8014b5c:	6020      	str	r0, [r4, #0]
 8014b5e:	f7ff fe5b 	bl	8014818 <net::message_init()>
 8014b62:	7ead      	ldrb	r5, [r5, #26]
 8014b64:	f015 0501 	ands.w	r5, r5, #1
 8014b68:	d11d      	bne.n	8014ba6 <net::dhcp_start()+0x7e>
 8014b6a:	7a23      	ldrb	r3, [r4, #8]
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d002      	beq.n	8014b76 <net::dhcp_start()+0x4e>
 8014b70:	2302      	movs	r3, #2
 8014b72:	8123      	strh	r3, [r4, #8]
 8014b74:	81a5      	strh	r5, [r4, #12]
 8014b76:	4628      	mov	r0, r5
 8014b78:	bd70      	pop	{r4, r5, r6, pc}
 8014b7a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8014b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8014bb8 <net::dhcp_start()+0x90>)
 8014b80:	1c46      	adds	r6, r0, #1
 8014b82:	f8c3 60a4 	str.w	r6, [r3, #164]	@ 0xa4
 8014b86:	6812      	ldr	r2, [r2, #0]
 8014b88:	1c4e      	adds	r6, r1, #1
 8014b8a:	f8c3 60a0 	str.w	r6, [r3, #160]	@ 0xa0
 8014b8e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8014b92:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 8014b96:	621a      	str	r2, [r3, #32]
 8014b98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8014b9c:	e9c3 2009 	strd	r2, r0, [r3, #36]	@ 0x24
 8014ba0:	4a06      	ldr	r2, [pc, #24]	@ (8014bbc <net::dhcp_start()+0x94>)
 8014ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014ba4:	e7d2      	b.n	8014b4c <net::dhcp_start()+0x24>
 8014ba6:	f7ff fe57 	bl	8014858 <net::dhcp_discover()>
 8014baa:	e7e4      	b.n	8014b76 <net::dhcp_start()+0x4e>
 8014bac:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8014bb0:	2000cd38 	andcs	ip, r0, r8, lsr sp
 8014bb4:	0801c1ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr, pc}
 8014bb8:	2001a628 	andcs	sl, r1, r8, lsr #12
 8014bbc:	08014c65 	stmdaeq	r1, {r0, r2, r5, r6, sl, fp, lr}

08014bc0 <net::dhcp_release_and_stop()>:
 8014bc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014bc4:	4d25      	ldr	r5, [pc, #148]	@ (8014c5c <net::dhcp_release_and_stop()+0x9c>)
 8014bc6:	6a2c      	ldr	r4, [r5, #32]
 8014bc8:	2c00      	cmp	r4, #0
 8014bca:	d044      	beq.n	8014c56 <net::dhcp_release_and_stop()+0x96>
 8014bcc:	7a23      	ldrb	r3, [r4, #8]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d041      	beq.n	8014c56 <net::dhcp_release_and_stop()+0x96>
 8014bd2:	2600      	movs	r6, #0
 8014bd4:	69e7      	ldr	r7, [r4, #28]
 8014bd6:	61e6      	str	r6, [r4, #28]
 8014bd8:	2218      	movs	r2, #24
 8014bda:	4631      	mov	r1, r6
 8014bdc:	f104 0020 	add.w	r0, r4, #32
 8014be0:	f005 fd3e 	bl	801a660 <memset>
 8014be4:	6a2b      	ldr	r3, [r5, #32]
 8014be6:	8266      	strh	r6, [r4, #18]
 8014be8:	6166      	str	r6, [r4, #20]
 8014bea:	8326      	strh	r6, [r4, #24]
 8014bec:	b363      	cbz	r3, 8014c48 <net::dhcp_release_and_stop()+0x88>
 8014bee:	7a1b      	ldrb	r3, [r3, #8]
 8014bf0:	2b0a      	cmp	r3, #10
 8014bf2:	d002      	beq.n	8014bfa <net::dhcp_release_and_stop()+0x3a>
 8014bf4:	3b04      	subs	r3, #4
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d826      	bhi.n	8014c48 <net::dhcp_release_and_stop()+0x88>
 8014bfa:	2600      	movs	r6, #0
 8014bfc:	8126      	strh	r6, [r4, #8]
 8014bfe:	81a6      	strh	r6, [r4, #12]
 8014c00:	4c17      	ldr	r4, [pc, #92]	@ (8014c60 <net::dhcp_release_and_stop()+0xa0>)
 8014c02:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8014c06:	f243 6307 	movw	r3, #13831	@ 0x3607
 8014c0a:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 8014c0e:	2304      	movs	r3, #4
 8014c10:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
 8014c14:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8014c18:	f104 00f5 	add.w	r0, r4, #245	@ 0xf5
 8014c1c:	f7ff fe74 	bl	8014908 <net::memcpy_ip(unsigned char*, unsigned long)>
 8014c20:	23ff      	movs	r3, #255	@ 0xff
 8014c22:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 8014c26:	2343      	movs	r3, #67	@ 0x43
 8014c28:	9300      	str	r3, [sp, #0]
 8014c2a:	22fa      	movs	r2, #250	@ 0xfa
 8014c2c:	4621      	mov	r1, r4
 8014c2e:	f8d8 0000 	ldr.w	r0, [r8]
 8014c32:	463b      	mov	r3, r7
 8014c34:	f000 fdf0 	bl	8015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 8014c38:	2044      	movs	r0, #68	@ 0x44
 8014c3a:	f000 fdab 	bl	8015794 <net::udp_end(unsigned short)>
 8014c3e:	4632      	mov	r2, r6
 8014c40:	4631      	mov	r1, r6
 8014c42:	4630      	mov	r0, r6
 8014c44:	f000 faf8 	bl	8015238 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8014c48:	6a28      	ldr	r0, [r5, #32]
 8014c4a:	b110      	cbz	r0, 8014c52 <net::dhcp_release_and_stop()+0x92>
 8014c4c:	2148      	movs	r1, #72	@ 0x48
 8014c4e:	f006 fa3f 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8014c52:	2300      	movs	r3, #0
 8014c54:	622b      	str	r3, [r5, #32]
 8014c56:	b002      	add	sp, #8
 8014c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c5c:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8014c60:	10008000 	andne	r8, r0, r0

08014c64 <net::dhcp_fine_tmr()>:
 8014c64:	b508      	push	{r3, lr}
 8014c66:	4b21      	ldr	r3, [pc, #132]	@ (8014cec <net::dhcp_fine_tmr()+0x88>)
 8014c68:	6a1b      	ldr	r3, [r3, #32]
 8014c6a:	b123      	cbz	r3, 8014c76 <net::dhcp_fine_tmr()+0x12>
 8014c6c:	899a      	ldrh	r2, [r3, #12]
 8014c6e:	2a01      	cmp	r2, #1
 8014c70:	d902      	bls.n	8014c78 <net::dhcp_fine_tmr()+0x14>
 8014c72:	3a01      	subs	r2, #1
 8014c74:	819a      	strh	r2, [r3, #12]
 8014c76:	bd08      	pop	{r3, pc}
 8014c78:	d1fd      	bne.n	8014c76 <net::dhcp_fine_tmr()+0x12>
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	819a      	strh	r2, [r3, #12]
 8014c7e:	7a1a      	ldrb	r2, [r3, #8]
 8014c80:	3a01      	subs	r2, #1
 8014c82:	2a0b      	cmp	r2, #11
 8014c84:	d8f7      	bhi.n	8014c76 <net::dhcp_fine_tmr()+0x12>
 8014c86:	a101      	add	r1, pc, #4	@ (adr r1, 8014c8c <net::dhcp_fine_tmr()+0x28>)
 8014c88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014c8c:	08014cbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sl, fp, lr}
 8014c90:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014c94:	08014cd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, fp, lr}
 8014c98:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014c9c:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014ca0:	08014ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, lr}
 8014ca4:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014ca8:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014cac:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014cb0:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014cb4:	08014c77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, lr}
 8014cb8:	08014ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, lr}
 8014cbc:	7a5b      	ldrb	r3, [r3, #9]
 8014cbe:	2b05      	cmp	r3, #5
 8014cc0:	d803      	bhi.n	8014cca <net::dhcp_fine_tmr()+0x66>
 8014cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014cc6:	f7ff be89 	b.w	80149dc <net::dhcp_select()>
 8014cca:	f7ff ff79 	bl	8014bc0 <net::dhcp_release_and_stop()>
 8014cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014cd2:	f7ff bf29 	b.w	8014b28 <net::dhcp_start()>
 8014cd6:	7a5b      	ldrb	r3, [r3, #9]
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d803      	bhi.n	8014ce4 <net::dhcp_fine_tmr()+0x80>
 8014cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014ce0:	f7ff bea2 	b.w	8014a28 <net::dhcp_reboot()>
 8014ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014ce8:	f7ff bdb6 	b.w	8014858 <net::dhcp_discover()>
 8014cec:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014cf0 <net::dhcp_process(net::dhcp::Message const*, unsigned long)>:
 8014cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cf4:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8014e48 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x158>
 8014cf8:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8014cfc:	4606      	mov	r6, r0
 8014cfe:	4689      	mov	r9, r1
 8014d00:	2218      	movs	r2, #24
 8014d02:	2100      	movs	r1, #0
 8014d04:	f105 0020 	add.w	r0, r5, #32
 8014d08:	2700      	movs	r7, #0
 8014d0a:	f106 04f0 	add.w	r4, r6, #240	@ 0xf0
 8014d0e:	f005 fca7 	bl	801a660 <memset>
 8014d12:	44a1      	add	r9, r4
 8014d14:	61ef      	str	r7, [r5, #28]
 8014d16:	454c      	cmp	r4, r9
 8014d18:	d318      	bcc.n	8014d4c <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x5c>
 8014d1a:	2f02      	cmp	r7, #2
 8014d1c:	d167      	bne.n	8014dee <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xfe>
 8014d1e:	3610      	adds	r6, #16
 8014d20:	4630      	mov	r0, r6
 8014d22:	f7ff fea9 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014d26:	7a2b      	ldrb	r3, [r5, #8]
 8014d28:	6228      	str	r0, [r5, #32]
 8014d2a:	2b06      	cmp	r3, #6
 8014d2c:	d170      	bne.n	8014e10 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 8014d2e:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8014d32:	69e3      	ldr	r3, [r4, #28]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d06b      	beq.n	8014e10 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 8014d38:	2300      	movs	r3, #0
 8014d3a:	81a3      	strh	r3, [r4, #12]
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f7ff fe9b 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014d42:	6220      	str	r0, [r4, #32]
 8014d44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d48:	f7ff be48 	b.w	80149dc <net::dhcp_select()>
 8014d4c:	7823      	ldrb	r3, [r4, #0]
 8014d4e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d50:	d822      	bhi.n	8014d98 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xa8>
 8014d52:	2b32      	cmp	r3, #50	@ 0x32
 8014d54:	d808      	bhi.n	8014d68 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x78>
 8014d56:	2b01      	cmp	r3, #1
 8014d58:	d027      	beq.n	8014daa <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xba>
 8014d5a:	2b03      	cmp	r3, #3
 8014d5c:	d02b      	beq.n	8014db6 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc6>
 8014d5e:	b1fb      	cbz	r3, 8014da0 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xb0>
 8014d60:	7863      	ldrb	r3, [r4, #1]
 8014d62:	3302      	adds	r3, #2
 8014d64:	441c      	add	r4, r3
 8014d66:	e7d6      	b.n	8014d16 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 8014d68:	3b33      	subs	r3, #51	@ 0x33
 8014d6a:	2b08      	cmp	r3, #8
 8014d6c:	d8f8      	bhi.n	8014d60 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x70>
 8014d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8014d74 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x84>)
 8014d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d74:	08014dcb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, sl, fp, lr}
 8014d78:	08014d61 	stmdaeq	r1, {r0, r5, r6, r8, sl, fp, lr}
 8014d7c:	08014da5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, fp, lr}
 8014d80:	08014dc1 	stmdaeq	r1, {r0, r6, r7, r8, sl, fp, lr}
 8014d84:	08014d61 	stmdaeq	r1, {r0, r5, r6, r8, sl, fp, lr}
 8014d88:	08014d61 	stmdaeq	r1, {r0, r5, r6, r8, sl, fp, lr}
 8014d8c:	08014d61 	stmdaeq	r1, {r0, r5, r6, r8, sl, fp, lr}
 8014d90:	08014dd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, sl, fp, lr}
 8014d94:	08014de3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, sl, fp, lr}
 8014d98:	2bff      	cmp	r3, #255	@ 0xff
 8014d9a:	d1e1      	bne.n	8014d60 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x70>
 8014d9c:	464c      	mov	r4, r9
 8014d9e:	e7ba      	b.n	8014d16 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 8014da0:	3401      	adds	r4, #1
 8014da2:	e7b8      	b.n	8014d16 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 8014da4:	78a7      	ldrb	r7, [r4, #2]
 8014da6:	3403      	adds	r4, #3
 8014da8:	e7b5      	b.n	8014d16 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 8014daa:	1ca0      	adds	r0, r4, #2
 8014dac:	f7ff fe64 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014db0:	6268      	str	r0, [r5, #36]	@ 0x24
 8014db2:	3406      	adds	r4, #6
 8014db4:	e7af      	b.n	8014d16 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 8014db6:	1ca0      	adds	r0, r4, #2
 8014db8:	f7ff fe5e 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014dbc:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014dbe:	e7f8      	b.n	8014db2 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014dc0:	1ca0      	adds	r0, r4, #2
 8014dc2:	f7ff fe59 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014dc6:	61e8      	str	r0, [r5, #28]
 8014dc8:	e7f3      	b.n	8014db2 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014dca:	1ca0      	adds	r0, r4, #2
 8014dcc:	f7ff fe54 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014dd0:	ba00      	rev	r0, r0
 8014dd2:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8014dd4:	e7ed      	b.n	8014db2 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014dd6:	1ca0      	adds	r0, r4, #2
 8014dd8:	f7ff fe4e 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014ddc:	ba00      	rev	r0, r0
 8014dde:	6328      	str	r0, [r5, #48]	@ 0x30
 8014de0:	e7e7      	b.n	8014db2 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014de2:	1ca0      	adds	r0, r4, #2
 8014de4:	f7ff fe48 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8014de8:	ba00      	rev	r0, r0
 8014dea:	6368      	str	r0, [r5, #52]	@ 0x34
 8014dec:	e7e1      	b.n	8014db2 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8014dee:	2f05      	cmp	r7, #5
 8014df0:	d110      	bne.n	8014e14 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x124>
 8014df2:	7a2b      	ldrb	r3, [r5, #8]
 8014df4:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 8014df8:	2a01      	cmp	r2, #1
 8014dfa:	d106      	bne.n	8014e0a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x11a>
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	f7ff fe3d 	bl	8014a7c <net::dhcp_handle_ack(net::dhcp::Message const*)>
 8014e02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e06:	f7ff bc9d 	b.w	8014744 <net::dhcp_bind()>
 8014e0a:	3b04      	subs	r3, #4
 8014e0c:	2b01      	cmp	r3, #1
 8014e0e:	d9f5      	bls.n	8014dfc <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x10c>
 8014e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e14:	2f06      	cmp	r7, #6
 8014e16:	d1fb      	bne.n	8014e10 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 8014e18:	7a2b      	ldrb	r3, [r5, #8]
 8014e1a:	1eda      	subs	r2, r3, #3
 8014e1c:	2a02      	cmp	r2, #2
 8014e1e:	d901      	bls.n	8014e24 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x134>
 8014e20:	2b01      	cmp	r3, #1
 8014e22:	d1f5      	bne.n	8014e10 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 8014e24:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8014e28:	7a1a      	ldrb	r2, [r3, #8]
 8014e2a:	2a0c      	cmp	r2, #12
 8014e2c:	bf1f      	itttt	ne
 8014e2e:	220c      	movne	r2, #12
 8014e30:	811a      	strhne	r2, [r3, #8]
 8014e32:	2200      	movne	r2, #0
 8014e34:	819a      	strhne	r2, [r3, #12]
 8014e36:	2200      	movs	r2, #0
 8014e38:	4611      	mov	r1, r2
 8014e3a:	4610      	mov	r0, r2
 8014e3c:	f000 f9fc 	bl	8015238 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8014e40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e44:	f7ff bd08 	b.w	8014858 <net::dhcp_discover()>
 8014e48:	2000cb88 	andcs	ip, r0, r8, lsl #23

08014e4c <net::igmp_send_report(unsigned long)>:
 8014e4c:	4a19      	ldr	r2, [pc, #100]	@ (8014eb4 <net::igmp_send_report(unsigned long)+0x68>)
 8014e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e50:	f3c0 2106 	ubfx	r1, r0, #8, #7
 8014e54:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014e58:	4c17      	ldr	r4, [pc, #92]	@ (8014eb8 <net::igmp_send_report(unsigned long)+0x6c>)
 8014e5a:	70d1      	strb	r1, [r2, #3]
 8014e5c:	7113      	strb	r3, [r2, #4]
 8014e5e:	f3c0 6107 	ubfx	r1, r0, #24, #8
 8014e62:	4613      	mov	r3, r2
 8014e64:	7151      	strb	r1, [r2, #5]
 8014e66:	4605      	mov	r5, r0
 8014e68:	4622      	mov	r2, r4
 8014e6a:	f103 0c06 	add.w	ip, r3, #6
 8014e6e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014e72:	f802 1b01 	strb.w	r1, [r2], #1
 8014e76:	4563      	cmp	r3, ip
 8014e78:	d1f9      	bne.n	8014e6e <net::igmp_send_report(unsigned long)+0x22>
 8014e7a:	4e10      	ldr	r6, [pc, #64]	@ (8014ebc <net::igmp_send_report(unsigned long)+0x70>)
 8014e7c:	4810      	ldr	r0, [pc, #64]	@ (8014ec0 <net::igmp_send_report(unsigned long)+0x74>)
 8014e7e:	8833      	ldrh	r3, [r6, #0]
 8014e80:	8263      	strh	r3, [r4, #18]
 8014e82:	2700      	movs	r7, #0
 8014e84:	2118      	movs	r1, #24
 8014e86:	f8c4 501e 	str.w	r5, [r4, #30]
 8014e8a:	8327      	strh	r7, [r4, #24]
 8014e8c:	f000 f90e 	bl	80150ac <net::net_chksum(void const*, unsigned long)>
 8014e90:	2120      	movs	r1, #32
 8014e92:	8320      	strh	r0, [r4, #24]
 8014e94:	480a      	ldr	r0, [pc, #40]	@ (8014ec0 <net::igmp_send_report(unsigned long)+0x74>)
 8014e96:	f8c4 502a 	str.w	r5, [r4, #42]	@ 0x2a
 8014e9a:	8527      	strh	r7, [r4, #40]	@ 0x28
 8014e9c:	f000 f906 	bl	80150ac <net::net_chksum(void const*, unsigned long)>
 8014ea0:	212e      	movs	r1, #46	@ 0x2e
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	4804      	ldr	r0, [pc, #16]	@ (8014eb8 <net::igmp_send_report(unsigned long)+0x6c>)
 8014ea6:	8523      	strh	r3, [r4, #40]	@ 0x28
 8014ea8:	f001 f924 	bl	80160f4 <emac_eth_send(void*, unsigned long)>
 8014eac:	8833      	ldrh	r3, [r6, #0]
 8014eae:	3301      	adds	r3, #1
 8014eb0:	8033      	strh	r3, [r6, #0]
 8014eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eb4:	10008348 	andne	r8, r0, r8, asr #6
 8014eb8:	10008380 	andne	r8, r0, r0, lsl #7
 8014ebc:	10008224 	andne	r8, r0, r4, lsr #4
 8014ec0:	1000838e 	andne	r8, r0, lr, lsl #7

08014ec4 <net::igmp_timer()>:
 8014ec4:	b570      	push	{r4, r5, r6, lr}
 8014ec6:	4c12      	ldr	r4, [pc, #72]	@ (8014f10 <net::igmp_timer()+0x4c>)
 8014ec8:	4e12      	ldr	r6, [pc, #72]	@ (8014f14 <net::igmp_timer()+0x50>)
 8014eca:	f504 7590 	add.w	r5, r4, #288	@ 0x120
 8014ece:	e002      	b.n	8014ed6 <net::igmp_timer()+0x12>
 8014ed0:	3408      	adds	r4, #8
 8014ed2:	42ac      	cmp	r4, r5
 8014ed4:	d01a      	beq.n	8014f0c <net::igmp_timer()+0x48>
 8014ed6:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8014eda:	1e53      	subs	r3, r2, #1
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	2a00      	cmp	r2, #0
 8014ee0:	d0f6      	beq.n	8014ed0 <net::igmp_timer()+0xc>
 8014ee2:	f824 3c04 	strh.w	r3, [r4, #-4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d1f2      	bne.n	8014ed0 <net::igmp_timer()+0xc>
 8014eea:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8014eee:	2b01      	cmp	r3, #1
 8014ef0:	d1ee      	bne.n	8014ed0 <net::igmp_timer()+0xc>
 8014ef2:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8014ef6:	42b0      	cmp	r0, r6
 8014ef8:	f04f 0302 	mov.w	r3, #2
 8014efc:	d0e8      	beq.n	8014ed0 <net::igmp_timer()+0xc>
 8014efe:	f804 3c02 	strb.w	r3, [r4, #-2]
 8014f02:	3408      	adds	r4, #8
 8014f04:	f7ff ffa2 	bl	8014e4c <net::igmp_send_report(unsigned long)>
 8014f08:	42ac      	cmp	r4, r5
 8014f0a:	d1e4      	bne.n	8014ed6 <net::igmp_timer()+0x12>
 8014f0c:	bd70      	pop	{r4, r5, r6, pc}
 8014f0e:	bf00      	nop
 8014f10:	10008230 	andne	r8, r0, r0, lsr r2
 8014f14:	010000e0 	smlatteq	r0, r0, r0, r0

08014f18 <net::igmp_set_ip()>:
 8014f18:	4b04      	ldr	r3, [pc, #16]	@ (8014f2c <net::igmp_set_ip()+0x14>)
 8014f1a:	4905      	ldr	r1, [pc, #20]	@ (8014f30 <net::igmp_set_ip()+0x18>)
 8014f1c:	4a05      	ldr	r2, [pc, #20]	@ (8014f34 <net::igmp_set_ip()+0x1c>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	f8c1 301a 	str.w	r3, [r1, #26]
 8014f24:	f8c2 301a 	str.w	r3, [r2, #26]
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop
 8014f2c:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8014f30:	10008380 	andne	r8, r0, r0, lsl #7
 8014f34:	10008350 	andne	r8, r0, r0, asr r3

08014f38 <net::igmp_join(unsigned long)>:
 8014f38:	f000 03e0 	and.w	r3, r0, #224	@ 0xe0
 8014f3c:	2be0      	cmp	r3, #224	@ 0xe0
 8014f3e:	d10c      	bne.n	8014f5a <net::igmp_join(unsigned long)+0x22>
 8014f40:	490b      	ldr	r1, [pc, #44]	@ (8014f70 <net::igmp_join(unsigned long)+0x38>)
 8014f42:	2300      	movs	r3, #0
 8014f44:	e003      	b.n	8014f4e <net::igmp_join(unsigned long)+0x16>
 8014f46:	b14a      	cbz	r2, 8014f5c <net::igmp_join(unsigned long)+0x24>
 8014f48:	3301      	adds	r3, #1
 8014f4a:	2b24      	cmp	r3, #36	@ 0x24
 8014f4c:	d005      	beq.n	8014f5a <net::igmp_join(unsigned long)+0x22>
 8014f4e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8014f52:	4282      	cmp	r2, r0
 8014f54:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
 8014f58:	d1f5      	bne.n	8014f46 <net::igmp_join(unsigned long)+0xe>
 8014f5a:	4770      	bx	lr
 8014f5c:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8014f60:	2201      	movs	r2, #1
 8014f62:	2302      	movs	r3, #2
 8014f64:	f88c 2006 	strb.w	r2, [ip, #6]
 8014f68:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014f6c:	f7ff bf6e 	b.w	8014e4c <net::igmp_send_report(unsigned long)>
 8014f70:	10008228 	andne	r8, r0, r8, lsr #4

08014f74 <net::igmp_leave(unsigned long)>:
 8014f74:	b570      	push	{r4, r5, r6, lr}
 8014f76:	4c0f      	ldr	r4, [pc, #60]	@ (8014fb4 <net::igmp_leave(unsigned long)+0x40>)
 8014f78:	4602      	mov	r2, r0
 8014f7a:	f504 7190 	add.w	r1, r4, #288	@ 0x120
 8014f7e:	e002      	b.n	8014f86 <net::igmp_leave(unsigned long)+0x12>
 8014f80:	3408      	adds	r4, #8
 8014f82:	428c      	cmp	r4, r1
 8014f84:	d014      	beq.n	8014fb0 <net::igmp_leave(unsigned long)+0x3c>
 8014f86:	6823      	ldr	r3, [r4, #0]
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d1f9      	bne.n	8014f80 <net::igmp_leave(unsigned long)+0xc>
 8014f8c:	4e0a      	ldr	r6, [pc, #40]	@ (8014fb8 <net::igmp_leave(unsigned long)+0x44>)
 8014f8e:	480b      	ldr	r0, [pc, #44]	@ (8014fbc <net::igmp_leave(unsigned long)+0x48>)
 8014f90:	8833      	ldrh	r3, [r6, #0]
 8014f92:	8243      	strh	r3, [r0, #18]
 8014f94:	2500      	movs	r5, #0
 8014f96:	212e      	movs	r1, #46	@ 0x2e
 8014f98:	f8c0 202a 	str.w	r2, [r0, #42]	@ 0x2a
 8014f9c:	8305      	strh	r5, [r0, #24]
 8014f9e:	8505      	strh	r5, [r0, #40]	@ 0x28
 8014fa0:	f001 f8a8 	bl	80160f4 <emac_eth_send(void*, unsigned long)>
 8014fa4:	8833      	ldrh	r3, [r6, #0]
 8014fa6:	6025      	str	r5, [r4, #0]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	8033      	strh	r3, [r6, #0]
 8014fac:	71a5      	strb	r5, [r4, #6]
 8014fae:	80a5      	strh	r5, [r4, #4]
 8014fb0:	bd70      	pop	{r4, r5, r6, pc}
 8014fb2:	bf00      	nop
 8014fb4:	10008228 	andne	r8, r0, r8, lsr #4
 8014fb8:	10008224 	andne	r8, r0, r4, lsr #4
 8014fbc:	10008350 	andne	r8, r0, r0, asr r3

08014fc0 <net::igmp_report_groups()>:
 8014fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fc2:	4c14      	ldr	r4, [pc, #80]	@ (8015014 <net::igmp_report_groups()+0x54>)
 8014fc4:	4d14      	ldr	r5, [pc, #80]	@ (8015018 <net::igmp_report_groups()+0x58>)
 8014fc6:	f504 7790 	add.w	r7, r4, #288	@ 0x120
 8014fca:	2601      	movs	r6, #1
 8014fcc:	e002      	b.n	8014fd4 <net::igmp_report_groups()+0x14>
 8014fce:	3408      	adds	r4, #8
 8014fd0:	42bc      	cmp	r4, r7
 8014fd2:	d01e      	beq.n	8015012 <net::igmp_report_groups()+0x52>
 8014fd4:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8014fd8:	2b02      	cmp	r3, #2
 8014fda:	d007      	beq.n	8014fec <net::igmp_report_groups()+0x2c>
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d1f6      	bne.n	8014fce <net::igmp_report_groups()+0xe>
 8014fe0:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8014fe4:	3b01      	subs	r3, #1
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	2b04      	cmp	r3, #4
 8014fea:	d9f0      	bls.n	8014fce <net::igmp_report_groups()+0xe>
 8014fec:	f005 fe7a 	bl	801ace4 <random>
 8014ff0:	fba5 3200 	umull	r3, r2, r5, r0
 8014ff4:	f022 0303 	bic.w	r3, r2, #3
 8014ff8:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 8014ffc:	1ac0      	subs	r0, r0, r3
 8014ffe:	2801      	cmp	r0, #1
 8015000:	bf38      	it	cc
 8015002:	2001      	movcc	r0, #1
 8015004:	f824 0c04 	strh.w	r0, [r4, #-4]
 8015008:	f804 6c02 	strb.w	r6, [r4, #-2]
 801500c:	3408      	adds	r4, #8
 801500e:	42bc      	cmp	r4, r7
 8015010:	d1e0      	bne.n	8014fd4 <net::igmp_report_groups()+0x14>
 8015012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015014:	10008230 	andne	r8, r0, r0, lsr r2
 8015018:	cccccccd 	stclgt	12, cr12, [ip], {205}	@ 0xcd

0801501c <net::primary_ip_conflict_callback(net::acd::Callback)>:
 801501c:	b140      	cbz	r0, 8015030 <net::primary_ip_conflict_callback(net::acd::Callback)+0x14>
 801501e:	2802      	cmp	r0, #2
 8015020:	d000      	beq.n	8015024 <net::primary_ip_conflict_callback(net::acd::Callback)+0x8>
 8015022:	4770      	bx	lr
 8015024:	4a10      	ldr	r2, [pc, #64]	@ (8015068 <net::primary_ip_conflict_callback(net::acd::Callback)+0x4c>)
 8015026:	7e93      	ldrb	r3, [r2, #26]
 8015028:	f023 0308 	bic.w	r3, r3, #8
 801502c:	7693      	strb	r3, [r2, #26]
 801502e:	4770      	bx	lr
 8015030:	4b0e      	ldr	r3, [pc, #56]	@ (801506c <net::primary_ip_conflict_callback(net::acd::Callback)+0x50>)
 8015032:	b510      	push	{r4, lr}
 8015034:	4c0c      	ldr	r4, [pc, #48]	@ (8015068 <net::primary_ip_conflict_callback(net::acd::Callback)+0x4c>)
 8015036:	6818      	ldr	r0, [r3, #0]
 8015038:	6923      	ldr	r3, [r4, #16]
 801503a:	4298      	cmp	r0, r3
 801503c:	d008      	beq.n	8015050 <net::primary_ip_conflict_callback(net::acd::Callback)+0x34>
 801503e:	f000 f8c1 	bl	80151c4 <net::netif_set_ipaddr(net::ip_addr)>
 8015042:	f7ff fd3b 	bl	8014abc <net::dhcp_inform()>
 8015046:	7ea3      	ldrb	r3, [r4, #26]
 8015048:	f043 0308 	orr.w	r3, r3, #8
 801504c:	76a3      	strb	r3, [r4, #26]
 801504e:	bd10      	pop	{r4, pc}
 8015050:	4602      	mov	r2, r0
 8015052:	21ff      	movs	r1, #255	@ 0xff
 8015054:	f000 f8f0 	bl	8015238 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8015058:	f7ff fd30 	bl	8014abc <net::dhcp_inform()>
 801505c:	7ea3      	ldrb	r3, [r4, #26]
 801505e:	f043 0308 	orr.w	r3, r3, #8
 8015062:	76a3      	strb	r3, [r4, #26]
 8015064:	bd10      	pop	{r4, pc}
 8015066:	bf00      	nop
 8015068:	2000cb88 	andcs	ip, r0, r8, lsl #23
 801506c:	2000cb74 	andcs	ip, r0, r4, ror fp

08015070 <net::net_shutdown()>:
 8015070:	f000 b92e 	b.w	80152d0 <net::netif_set_link_down()>

08015074 <net::net_set_primary_ip(net::ip_addr)>:
 8015074:	b510      	push	{r4, lr}
 8015076:	4604      	mov	r4, r0
 8015078:	f7ff fda2 	bl	8014bc0 <net::dhcp_release_and_stop()>
 801507c:	4908      	ldr	r1, [pc, #32]	@ (80150a0 <net::net_set_primary_ip(net::ip_addr)+0x2c>)
 801507e:	4809      	ldr	r0, [pc, #36]	@ (80150a4 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 8015080:	f001 f9b4 	bl	80163ec <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>
 8015084:	b934      	cbnz	r4, 8015094 <net::net_set_primary_ip(net::ip_addr)+0x20>
 8015086:	4b08      	ldr	r3, [pc, #32]	@ (80150a8 <net::net_set_primary_ip(net::ip_addr)+0x34>)
 8015088:	4806      	ldr	r0, [pc, #24]	@ (80150a4 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 801508a:	6919      	ldr	r1, [r3, #16]
 801508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015090:	f001 b876 	b.w	8016180 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 8015094:	4621      	mov	r1, r4
 8015096:	4803      	ldr	r0, [pc, #12]	@ (80150a4 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 8015098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801509c:	f001 b870 	b.w	8016180 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 80150a0:	0801501d 	stmdaeq	r1, {r0, r2, r3, r4, ip, lr}
 80150a4:	2000cb74 	andcs	ip, r0, r4, ror fp
 80150a8:	2000cb88 	andcs	ip, r0, r8, lsl #23

080150ac <net::net_chksum(void const*, unsigned long)>:
 80150ac:	2901      	cmp	r1, #1
 80150ae:	d91f      	bls.n	80150f0 <net::net_chksum(void const*, unsigned long)+0x44>
 80150b0:	f1a1 0c02 	sub.w	ip, r1, #2
 80150b4:	f02c 0c01 	bic.w	ip, ip, #1
 80150b8:	f10c 0c02 	add.w	ip, ip, #2
 80150bc:	4484      	add	ip, r0
 80150be:	2300      	movs	r3, #0
 80150c0:	f830 2b02 	ldrh.w	r2, [r0], #2
 80150c4:	4560      	cmp	r0, ip
 80150c6:	4413      	add	r3, r2
 80150c8:	d1fa      	bne.n	80150c0 <net::net_chksum(void const*, unsigned long)+0x14>
 80150ca:	07ca      	lsls	r2, r1, #31
 80150cc:	d40a      	bmi.n	80150e4 <net::net_chksum(void const*, unsigned long)+0x38>
 80150ce:	0c1a      	lsrs	r2, r3, #16
 80150d0:	d005      	beq.n	80150de <net::net_chksum(void const*, unsigned long)+0x32>
 80150d2:	fa12 f383 	uxtah	r3, r2, r3
 80150d6:	0c1a      	lsrs	r2, r3, #16
 80150d8:	bf1c      	itt	ne
 80150da:	b29b      	uxthne	r3, r3
 80150dc:	3301      	addne	r3, #1
 80150de:	43db      	mvns	r3, r3
 80150e0:	b298      	uxth	r0, r3
 80150e2:	4770      	bx	lr
 80150e4:	7802      	ldrb	r2, [r0, #0]
 80150e6:	0212      	lsls	r2, r2, #8
 80150e8:	ba52      	rev16	r2, r2
 80150ea:	fa13 f382 	uxtah	r3, r3, r2
 80150ee:	e7ee      	b.n	80150ce <net::net_chksum(void const*, unsigned long)+0x22>
 80150f0:	b121      	cbz	r1, 80150fc <net::net_chksum(void const*, unsigned long)+0x50>
 80150f2:	7803      	ldrb	r3, [r0, #0]
 80150f4:	021b      	lsls	r3, r3, #8
 80150f6:	ba5b      	rev16	r3, r3
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	e7f0      	b.n	80150de <net::net_chksum(void const*, unsigned long)+0x32>
 80150fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8015100:	4770      	bx	lr
 8015102:	bf00      	nop

08015104 <net::default_callback(unsigned short, net::netif_ext_callback_args_t const*)>:
 8015104:	4770      	bx	lr
	...

08015108 <net::netif_do_update_globals()>:
 8015108:	4908      	ldr	r1, [pc, #32]	@ (801512c <net::netif_do_update_globals()+0x24>)
 801510a:	e9d1 3200 	ldrd	r3, r2, [r1]
 801510e:	b410      	push	{r4}
 8015110:	ea63 0402 	orn	r4, r3, r2
 8015114:	43d0      	mvns	r0, r2
 8015116:	60cc      	str	r4, [r1, #12]
 8015118:	4013      	ands	r3, r2
 801511a:	4905      	ldr	r1, [pc, #20]	@ (8015130 <net::netif_do_update_globals()+0x28>)
 801511c:	4a05      	ldr	r2, [pc, #20]	@ (8015134 <net::netif_do_update_globals()+0x2c>)
 801511e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015122:	6008      	str	r0, [r1, #0]
 8015124:	6013      	str	r3, [r2, #0]
 8015126:	f001 bab7 	b.w	8016698 <net::ip_set_ip()>
 801512a:	bf00      	nop
 801512c:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8015130:	2000cb70 	andcs	ip, r0, r0, ror fp
 8015134:	2000cb6c 	andcs	ip, r0, ip, ror #22

08015138 <net::netif_issue_reports()>:
 8015138:	4b04      	ldr	r3, [pc, #16]	@ (801514c <net::netif_issue_reports()+0x14>)
 801513a:	7e9a      	ldrb	r2, [r3, #26]
 801513c:	07d2      	lsls	r2, r2, #31
 801513e:	d503      	bpl.n	8015148 <net::netif_issue_reports()+0x10>
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	b10b      	cbz	r3, 8015148 <net::netif_issue_reports()+0x10>
 8015144:	f7ff bf3c 	b.w	8014fc0 <net::igmp_report_groups()>
 8015148:	4770      	bx	lr
 801514a:	bf00      	nop
 801514c:	2000cb88 	andcs	ip, r0, r8, lsl #23

08015150 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>:
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	4e0b      	ldr	r6, [pc, #44]	@ (8015180 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x30>)
 8015154:	6833      	ldr	r3, [r6, #0]
 8015156:	4283      	cmp	r3, r0
 8015158:	4604      	mov	r4, r0
 801515a:	460d      	mov	r5, r1
 801515c:	d00d      	beq.n	801517a <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x2a>
 801515e:	600b      	str	r3, [r1, #0]
 8015160:	f001 fa9a 	bl	8016698 <net::ip_set_ip()>
 8015164:	6828      	ldr	r0, [r5, #0]
 8015166:	4621      	mov	r1, r4
 8015168:	f001 f946 	bl	80163f8 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)>
 801516c:	6034      	str	r4, [r6, #0]
 801516e:	f7ff ffcb 	bl	8015108 <net::netif_do_update_globals()>
 8015172:	f7ff ffe1 	bl	8015138 <net::netif_issue_reports()>
 8015176:	2001      	movs	r0, #1
 8015178:	bd70      	pop	{r4, r5, r6, pc}
 801517a:	2000      	movs	r0, #0
 801517c:	e7fc      	b.n	8015178 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x28>
 801517e:	bf00      	nop
 8015180:	2000cb88 	andcs	ip, r0, r8, lsl #23

08015184 <net::netif_init()>:
 8015184:	4b0c      	ldr	r3, [pc, #48]	@ (80151b8 <net::netif_init()+0x34>)
 8015186:	7e1a      	ldrb	r2, [r3, #24]
 8015188:	7dd8      	ldrb	r0, [r3, #23]
 801518a:	0412      	lsls	r2, r2, #16
 801518c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8015190:	7e58      	ldrb	r0, [r3, #25]
 8015192:	3202      	adds	r2, #2
 8015194:	2100      	movs	r1, #0
 8015196:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 801519a:	e9c3 1100 	strd	r1, r1, [r3]
 801519e:	611a      	str	r2, [r3, #16]
 80151a0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80151a4:	e9c3 1108 	strd	r1, r1, [r3, #32]
 80151a8:	7699      	strb	r1, [r3, #26]
 80151aa:	6299      	str	r1, [r3, #40]	@ 0x28
 80151ac:	4b03      	ldr	r3, [pc, #12]	@ (80151bc <net::netif_init()+0x38>)
 80151ae:	4a04      	ldr	r2, [pc, #16]	@ (80151c0 <net::netif_init()+0x3c>)
 80151b0:	601a      	str	r2, [r3, #0]
 80151b2:	f7f3 b949 	b.w	8008448 <net::arp_init()>
 80151b6:	bf00      	nop
 80151b8:	2000cb88 	andcs	ip, r0, r8, lsl #23
 80151bc:	2000cb84 	andcs	ip, r0, r4, lsl #23
 80151c0:	08015105 	stmdaeq	r1, {r0, r2, r8, ip, lr}

080151c4 <net::netif_set_ipaddr(net::ip_addr)>:
 80151c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151c6:	4669      	mov	r1, sp
 80151c8:	f7ff ffc2 	bl	8015150 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 80151cc:	b130      	cbz	r0, 80151dc <net::netif_set_ipaddr(net::ip_addr)+0x18>
 80151ce:	9b00      	ldr	r3, [sp, #0]
 80151d0:	9301      	str	r3, [sp, #4]
 80151d2:	4b04      	ldr	r3, [pc, #16]	@ (80151e4 <net::netif_set_ipaddr(net::ip_addr)+0x20>)
 80151d4:	a901      	add	r1, sp, #4
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	2010      	movs	r0, #16
 80151da:	4798      	blx	r3
 80151dc:	b005      	add	sp, #20
 80151de:	f85d fb04 	ldr.w	pc, [sp], #4
 80151e2:	bf00      	nop
 80151e4:	2000cb84 	andcs	ip, r0, r4, lsl #23

080151e8 <net::netif_set_netmask(net::ip_addr)>:
 80151e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80151ea:	4b07      	ldr	r3, [pc, #28]	@ (8015208 <net::netif_set_netmask(net::ip_addr)+0x20>)
 80151ec:	685c      	ldr	r4, [r3, #4]
 80151ee:	42a0      	cmp	r0, r4
 80151f0:	d008      	beq.n	8015204 <net::netif_set_netmask(net::ip_addr)+0x1c>
 80151f2:	6058      	str	r0, [r3, #4]
 80151f4:	f7ff ff88 	bl	8015108 <net::netif_do_update_globals()>
 80151f8:	4b04      	ldr	r3, [pc, #16]	@ (801520c <net::netif_set_netmask(net::ip_addr)+0x24>)
 80151fa:	9402      	str	r4, [sp, #8]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	a901      	add	r1, sp, #4
 8015200:	2040      	movs	r0, #64	@ 0x40
 8015202:	4798      	blx	r3
 8015204:	b004      	add	sp, #16
 8015206:	bd10      	pop	{r4, pc}
 8015208:	2000cb88 	andcs	ip, r0, r8, lsl #23
 801520c:	2000cb84 	andcs	ip, r0, r4, lsl #23

08015210 <net::netif_set_gw(net::ip_addr)>:
 8015210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015212:	4a07      	ldr	r2, [pc, #28]	@ (8015230 <net::netif_set_gw(net::ip_addr)+0x20>)
 8015214:	6893      	ldr	r3, [r2, #8]
 8015216:	4298      	cmp	r0, r3
 8015218:	d006      	beq.n	8015228 <net::netif_set_gw(net::ip_addr)+0x18>
 801521a:	9303      	str	r3, [sp, #12]
 801521c:	4b05      	ldr	r3, [pc, #20]	@ (8015234 <net::netif_set_gw(net::ip_addr)+0x24>)
 801521e:	6090      	str	r0, [r2, #8]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	a901      	add	r1, sp, #4
 8015224:	2020      	movs	r0, #32
 8015226:	4798      	blx	r3
 8015228:	b005      	add	sp, #20
 801522a:	f85d fb04 	ldr.w	pc, [sp], #4
 801522e:	bf00      	nop
 8015230:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8015234:	2000cb84 	andcs	ip, r0, r4, lsl #23

08015238 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>:
 8015238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801523c:	4688      	mov	r8, r1
 801523e:	b085      	sub	sp, #20
 8015240:	4617      	mov	r7, r2
 8015242:	4605      	mov	r5, r0
 8015244:	b348      	cbz	r0, 801529a <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x62>
 8015246:	2400      	movs	r4, #0
 8015248:	4e1c      	ldr	r6, [pc, #112]	@ (80152bc <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x84>)
 801524a:	f8d6 9004 	ldr.w	r9, [r6, #4]
 801524e:	45c8      	cmp	r8, r9
 8015250:	d007      	beq.n	8015262 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x2a>
 8015252:	f8c6 8004 	str.w	r8, [r6, #4]
 8015256:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 801525a:	f7ff ff55 	bl	8015108 <net::netif_do_update_globals()>
 801525e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015262:	68b3      	ldr	r3, [r6, #8]
 8015264:	429f      	cmp	r7, r3
 8015266:	bf1e      	ittt	ne
 8015268:	60b7      	strne	r7, [r6, #8]
 801526a:	f044 0420 	orrne.w	r4, r4, #32
 801526e:	9303      	strne	r3, [sp, #12]
 8015270:	b30d      	cbz	r5, 80152b6 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x7e>
 8015272:	4669      	mov	r1, sp
 8015274:	4628      	mov	r0, r5
 8015276:	f7ff ff6b 	bl	8015150 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 801527a:	b1b8      	cbz	r0, 80152ac <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x74>
 801527c:	9b00      	ldr	r3, [sp, #0]
 801527e:	9301      	str	r3, [sp, #4]
 8015280:	f044 0410 	orr.w	r4, r4, #16
 8015284:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8015288:	b995      	cbnz	r5, 80152b0 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x78>
 801528a:	4b0d      	ldr	r3, [pc, #52]	@ (80152c0 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x88>)
 801528c:	a901      	add	r1, sp, #4
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	4620      	mov	r0, r4
 8015292:	4798      	blx	r3
 8015294:	b005      	add	sp, #20
 8015296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801529a:	4669      	mov	r1, sp
 801529c:	f7ff ff58 	bl	8015150 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d0d0      	beq.n	8015246 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0xe>
 80152a4:	9b00      	ldr	r3, [sp, #0]
 80152a6:	9301      	str	r3, [sp, #4]
 80152a8:	2410      	movs	r4, #16
 80152aa:	e7cd      	b.n	8015248 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x10>
 80152ac:	2c00      	cmp	r4, #0
 80152ae:	d1e9      	bne.n	8015284 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x4c>
 80152b0:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 80152b4:	e7e9      	b.n	801528a <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x52>
 80152b6:	2c00      	cmp	r4, #0
 80152b8:	d1e4      	bne.n	8015284 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x4c>
 80152ba:	e7eb      	b.n	8015294 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x5c>
 80152bc:	2000cb88 	andcs	ip, r0, r8, lsl #23
 80152c0:	2000cb84 	andcs	ip, r0, r4, lsl #23

080152c4 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))>:
 80152c4:	4b01      	ldr	r3, [pc, #4]	@ (80152cc <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))+0x8>)
 80152c6:	6018      	str	r0, [r3, #0]
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop
 80152cc:	2000cb84 	andcs	ip, r0, r4, lsl #23

080152d0 <net::netif_set_link_down()>:
 80152d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152d2:	4a0d      	ldr	r2, [pc, #52]	@ (8015308 <net::netif_set_link_down()+0x38>)
 80152d4:	7e93      	ldrb	r3, [r2, #26]
 80152d6:	07d9      	lsls	r1, r3, #31
 80152d8:	d512      	bpl.n	8015300 <net::netif_set_link_down()+0x30>
 80152da:	f023 0301 	bic.w	r3, r3, #1
 80152de:	7693      	strb	r3, [r2, #26]
 80152e0:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80152e2:	b11b      	cbz	r3, 80152ec <net::netif_set_link_down()+0x1c>
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	b10b      	cbz	r3, 80152ec <net::netif_set_link_down()+0x1c>
 80152e8:	f7ff f9f4 	bl	80146d4 <net::autoip_stop()>
 80152ec:	f001 f822 	bl	8016334 <net::acd_network_changed_link_down()>
 80152f0:	2300      	movs	r3, #0
 80152f2:	f88d 3004 	strb.w	r3, [sp, #4]
 80152f6:	4b05      	ldr	r3, [pc, #20]	@ (801530c <net::netif_set_link_down()+0x3c>)
 80152f8:	a901      	add	r1, sp, #4
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2004      	movs	r0, #4
 80152fe:	4798      	blx	r3
 8015300:	b005      	add	sp, #20
 8015302:	f85d fb04 	ldr.w	pc, [sp], #4
 8015306:	bf00      	nop
 8015308:	2000cb88 	andcs	ip, r0, r8, lsl #23
 801530c:	2000cb84 	andcs	ip, r0, r4, lsl #23

08015310 <net::_bswap32(t_tcp*)>:
 8015310:	f100 032a 	add.w	r3, r0, #42	@ 0x2a
 8015314:	079a      	lsls	r2, r3, #30
 8015316:	bf0b      	itete	eq
 8015318:	f8d0 302a 	ldreq.w	r3, [r0, #42]	@ 0x2a
 801531c:	f8d0 302a 	ldrne.w	r3, [r0, #42]	@ 0x2a
 8015320:	ba1b      	reveq	r3, r3
 8015322:	ba1b      	revne	r3, r3
 8015324:	bf0c      	ite	eq
 8015326:	f8c0 302a 	streq.w	r3, [r0, #42]	@ 0x2a
 801532a:	f8c0 302a 	strne.w	r3, [r0, #42]	@ 0x2a
 801532e:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 8015332:	079b      	lsls	r3, r3, #30
 8015334:	bf0b      	itete	eq
 8015336:	f8d0 3026 	ldreq.w	r3, [r0, #38]	@ 0x26
 801533a:	f8d0 3026 	ldrne.w	r3, [r0, #38]	@ 0x26
 801533e:	ba1b      	reveq	r3, r3
 8015340:	ba1b      	revne	r3, r3
 8015342:	bf0c      	ite	eq
 8015344:	f8c0 3026 	streq.w	r3, [r0, #38]	@ 0x26
 8015348:	f8c0 3026 	strne.w	r3, [r0, #38]	@ 0x26
 801534c:	4770      	bx	lr
 801534e:	bf00      	nop

08015350 <net::send_package(net::tcb const*, net::SendInfo const&)>:
 8015350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015354:	7a0b      	ldrb	r3, [r1, #8]
 8015356:	8f86      	ldrh	r6, [r0, #60]	@ 0x3c
 8015358:	4c52      	ldr	r4, [pc, #328]	@ (80154a4 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 801535a:	f003 0302 	and.w	r3, r3, #2
 801535e:	2b00      	cmp	r3, #0
 8015360:	bf14      	ite	ne
 8015362:	2324      	movne	r3, #36	@ 0x24
 8015364:	2320      	moveq	r3, #32
 8015366:	441e      	add	r6, r3
 8015368:	b084      	sub	sp, #16
 801536a:	4605      	mov	r5, r0
 801536c:	bf14      	ite	ne
 801536e:	f04f 0e90 	movne.w	lr, #144	@ 0x90
 8015372:	f04f 0e80 	moveq.w	lr, #128	@ 0x80
 8015376:	f100 030c 	add.w	r3, r0, #12
 801537a:	f100 0c12 	add.w	ip, r0, #18
 801537e:	4622      	mov	r2, r4
 8015380:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015384:	f802 0b01 	strb.w	r0, [r2], #1
 8015388:	459c      	cmp	ip, r3
 801538a:	d1f9      	bne.n	8015380 <net::send_package(net::tcb const*, net::SendInfo const&)+0x30>
 801538c:	b2b7      	uxth	r7, r6
 801538e:	4a46      	ldr	r2, [pc, #280]	@ (80154a8 <net::send_package(net::tcb const*, net::SendInfo const&)+0x158>)
 8015390:	f107 0314 	add.w	r3, r7, #20
 8015394:	ba5b      	rev16	r3, r3
 8015396:	8223      	strh	r3, [r4, #16]
 8015398:	8813      	ldrh	r3, [r2, #0]
 801539a:	8263      	strh	r3, [r4, #18]
 801539c:	3301      	adds	r3, #1
 801539e:	8013      	strh	r3, [r2, #0]
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	f8c4 301a 	str.w	r3, [r4, #26]
 80153a6:	686b      	ldr	r3, [r5, #4]
 80153a8:	f8c4 301e 	str.w	r3, [r4, #30]
 80153ac:	2300      	movs	r3, #0
 80153ae:	8323      	strh	r3, [r4, #24]
 80153b0:	892a      	ldrh	r2, [r5, #8]
 80153b2:	8462      	strh	r2, [r4, #34]	@ 0x22
 80153b4:	680a      	ldr	r2, [r1, #0]
 80153b6:	8968      	ldrh	r0, [r5, #10]
 80153b8:	f8c4 2026 	str.w	r2, [r4, #38]	@ 0x26
 80153bc:	684a      	ldr	r2, [r1, #4]
 80153be:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80153c0:	f884 e02e 	strb.w	lr, [r4, #46]	@ 0x2e
 80153c4:	f8c4 202a 	str.w	r2, [r4, #42]	@ 0x2a
 80153c8:	7a0a      	ldrb	r2, [r1, #8]
 80153ca:	f884 202f 	strb.w	r2, [r4, #47]	@ 0x2f
 80153ce:	f8b5 2044 	ldrh.w	r2, [r5, #68]	@ 0x44
 80153d2:	8622      	strh	r2, [r4, #48]	@ 0x30
 80153d4:	8c2a      	ldrh	r2, [r5, #32]
 80153d6:	86a2      	strh	r2, [r4, #52]	@ 0x34
 80153d8:	8663      	strh	r3, [r4, #50]	@ 0x32
 80153da:	7a0b      	ldrb	r3, [r1, #8]
 80153dc:	079b      	lsls	r3, r3, #30
 80153de:	bf41      	itttt	mi
 80153e0:	f240 4302 	movwmi	r3, #1026	@ 0x402
 80153e4:	86e3      	strhmi	r3, [r4, #54]	@ 0x36
 80153e6:	f648 4305 	movwmi	r3, #35845	@ 0x8c05
 80153ea:	8723      	strhmi	r3, [r4, #56]	@ 0x38
 80153ec:	4b2f      	ldr	r3, [pc, #188]	@ (80154ac <net::send_package(net::tcb const*, net::SendInfo const&)+0x15c>)
 80153ee:	bf48      	it	mi
 80153f0:	4a2f      	ldrmi	r2, [pc, #188]	@ (80154b0 <net::send_package(net::tcb const*, net::SendInfo const&)+0x160>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	bf58      	it	pl
 80153f6:	4a2f      	ldrpl	r2, [pc, #188]	@ (80154b4 <net::send_package(net::tcb const*, net::SendInfo const&)+0x164>)
 80153f8:	ba1b      	rev	r3, r3
 80153fa:	6053      	str	r3, [r2, #4]
 80153fc:	4b2e      	ldr	r3, [pc, #184]	@ (80154b8 <net::send_package(net::tcb const*, net::SendInfo const&)+0x168>)
 80153fe:	6013      	str	r3, [r2, #0]
 8015400:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015402:	6093      	str	r3, [r2, #8]
 8015404:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8015406:	b18b      	cbz	r3, 801542c <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 8015408:	8fa9      	ldrh	r1, [r5, #60]	@ 0x3c
 801540a:	b179      	cbz	r1, 801542c <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 801540c:	781b      	ldrb	r3, [r3, #0]
 801540e:	7313      	strb	r3, [r2, #12]
 8015410:	8fab      	ldrh	r3, [r5, #60]	@ 0x3c
 8015412:	2b01      	cmp	r3, #1
 8015414:	f102 020d 	add.w	r2, r2, #13
 8015418:	d908      	bls.n	801542c <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 801541a:	2301      	movs	r3, #1
 801541c:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 801541e:	5cc9      	ldrb	r1, [r1, r3]
 8015420:	f802 1b01 	strb.w	r1, [r2], #1
 8015424:	8fa9      	ldrh	r1, [r5, #60]	@ 0x3c
 8015426:	3301      	adds	r3, #1
 8015428:	4299      	cmp	r1, r3
 801542a:	dcf7      	bgt.n	801541c <net::send_package(net::tcb const*, net::SendInfo const&)+0xcc>
 801542c:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801542e:	481d      	ldr	r0, [pc, #116]	@ (80154a4 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8015430:	ba5b      	rev16	r3, r3
 8015432:	8463      	strh	r3, [r4, #34]	@ 0x22
 8015434:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8015436:	ba5b      	rev16	r3, r3
 8015438:	84a3      	strh	r3, [r4, #36]	@ 0x24
 801543a:	f7ff ff69 	bl	8015310 <net::_bswap32(t_tcp*)>
 801543e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8015440:	ba5b      	rev16	r3, r3
 8015442:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015444:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015446:	f100 0816 	add.w	r8, r0, #22
 801544a:	ba5b      	rev16	r3, r3
 801544c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801544e:	4642      	mov	r2, r8
 8015450:	ab01      	add	r3, sp, #4
 8015452:	f852 1b04 	ldr.w	r1, [r2], #4
 8015456:	f843 1b04 	str.w	r1, [r3], #4
 801545a:	a904      	add	r1, sp, #16
 801545c:	428b      	cmp	r3, r1
 801545e:	d1f8      	bne.n	8015452 <net::send_package(net::tcb const*, net::SendInfo const&)+0x102>
 8015460:	682b      	ldr	r3, [r5, #0]
 8015462:	f8c4 3016 	str.w	r3, [r4, #22]
 8015466:	686b      	ldr	r3, [r5, #4]
 8015468:	f8c4 301a 	str.w	r3, [r4, #26]
 801546c:	b2b1      	uxth	r1, r6
 801546e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8015472:	4812      	ldr	r0, [pc, #72]	@ (80154bc <net::send_package(net::tcb const*, net::SendInfo const&)+0x16c>)
 8015474:	83e3      	strh	r3, [r4, #30]
 8015476:	ba7f      	rev16	r7, r7
 8015478:	310c      	adds	r1, #12
 801547a:	8427      	strh	r7, [r4, #32]
 801547c:	f7ff fe16 	bl	80150ac <net::net_chksum(void const*, unsigned long)>
 8015480:	ab01      	add	r3, sp, #4
 8015482:	4605      	mov	r5, r0
 8015484:	f853 2b04 	ldr.w	r2, [r3], #4
 8015488:	f848 2b04 	str.w	r2, [r8], #4
 801548c:	aa04      	add	r2, sp, #16
 801548e:	4293      	cmp	r3, r2
 8015490:	d1f8      	bne.n	8015484 <net::send_package(net::tcb const*, net::SendInfo const&)+0x134>
 8015492:	4804      	ldr	r0, [pc, #16]	@ (80154a4 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8015494:	8665      	strh	r5, [r4, #50]	@ 0x32
 8015496:	f106 0122 	add.w	r1, r6, #34	@ 0x22
 801549a:	b004      	add	sp, #16
 801549c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154a0:	f000 be28 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 80154a4:	100083b0 			@ <UNDEFINED> instruction: 0x100083b0
 80154a8:	1000899c 	mulne	r0, ip, r9
 80154ac:	2001a628 	andcs	sl, r1, r8, lsr #12
 80154b0:	100083ea 	andne	r8, r0, sl, ror #7
 80154b4:	100083e6 	andne	r8, r0, r6, ror #7
 80154b8:	0a080101 	beq	82158c4 <_sidata+0x1f61c0>
 80154bc:	100083c6 	andne	r8, r0, r6, asr #7

080154c0 <net::send_reset(t_tcp*, net::tcb const*)>:
 80154c0:	f890 202f 	ldrb.w	r2, [r0, #47]	@ 0x2f
 80154c4:	0753      	lsls	r3, r2, #29
 80154c6:	d42d      	bmi.n	8015524 <net::send_reset(t_tcp*, net::tcb const*)+0x64>
 80154c8:	b500      	push	{lr}
 80154ca:	b085      	sub	sp, #20
 80154cc:	4603      	mov	r3, r0
 80154ce:	4608      	mov	r0, r1
 80154d0:	2104      	movs	r1, #4
 80154d2:	f88d 100c 	strb.w	r1, [sp, #12]
 80154d6:	f012 0110 	ands.w	r1, r2, #16
 80154da:	d119      	bne.n	8015510 <net::send_reset(t_tcp*, net::tcb const*)+0x50>
 80154dc:	f04f 0c14 	mov.w	ip, #20
 80154e0:	9101      	str	r1, [sp, #4]
 80154e2:	f88d c00c 	strb.w	ip, [sp, #12]
 80154e6:	f3c2 0140 	ubfx	r1, r2, #1, #1
 80154ea:	07d2      	lsls	r2, r2, #31
 80154ec:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80154f0:	bf48      	it	mi
 80154f2:	3101      	addmi	r1, #1
 80154f4:	0792      	lsls	r2, r2, #30
 80154f6:	bf0c      	ite	eq
 80154f8:	f8d3 3026 	ldreq.w	r3, [r3, #38]	@ 0x26
 80154fc:	f8d3 3026 	ldrne.w	r3, [r3, #38]	@ 0x26
 8015500:	440b      	add	r3, r1
 8015502:	a901      	add	r1, sp, #4
 8015504:	9302      	str	r3, [sp, #8]
 8015506:	f7ff ff23 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 801550a:	b005      	add	sp, #20
 801550c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015510:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8015514:	0789      	lsls	r1, r1, #30
 8015516:	bf0c      	ite	eq
 8015518:	f8d3 102a 	ldreq.w	r1, [r3, #42]	@ 0x2a
 801551c:	f8d3 102a 	ldrne.w	r1, [r3, #42]	@ 0x2a
 8015520:	9101      	str	r1, [sp, #4]
 8015522:	e7e0      	b.n	80154e6 <net::send_reset(t_tcp*, net::tcb const*)+0x26>
 8015524:	4770      	bx	lr
 8015526:	bf00      	nop

08015528 <net::scan_options(t_tcp*, net::tcb*, long)>:
 8015528:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 801552c:	441a      	add	r2, r3
 801552e:	f100 0c3c 	add.w	ip, r0, #60	@ 0x3c
 8015532:	4562      	cmp	r2, ip
 8015534:	d349      	bcc.n	80155ca <net::scan_options(t_tcp*, net::tcb*, long)+0xa2>
 8015536:	b530      	push	{r4, r5, lr}
 8015538:	f100 0336 	add.w	r3, r0, #54	@ 0x36
 801553c:	f893 c000 	ldrb.w	ip, [r3]
 8015540:	f1bc 0f08 	cmp.w	ip, #8
 8015544:	d820      	bhi.n	8015588 <net::scan_options(t_tcp*, net::tcb*, long)+0x60>
 8015546:	e8df f00c 	tbb	[pc, ip]
 801554a:	1f052726 	svcne	0x00052726
 801554e:	1f1f1f1f 	svcne	0x001f1f1f
 8015552:	f8930029 			@ <UNDEFINED> instruction: 0xf8930029
 8015556:	c001      	stmia	r0!, {r0}
 8015558:	f1bc 0f04 	cmp.w	ip, #4
 801555c:	d116      	bne.n	801558c <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 801555e:	f103 0e04 	add.w	lr, r3, #4
 8015562:	4572      	cmp	r2, lr
 8015564:	d312      	bcc.n	801558c <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8015566:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 801556a:	fa9c fc9c 	rev16.w	ip, ip
 801556e:	fa1f fc8c 	uxth.w	ip, ip
 8015572:	f10c 0c14 	add.w	ip, ip, #20
 8015576:	f240 5e8c 	movw	lr, #1420	@ 0x58c
 801557a:	45f4      	cmp	ip, lr
 801557c:	bfa8      	it	ge
 801557e:	46f4      	movge	ip, lr
 8015580:	f1ac 0c14 	sub.w	ip, ip, #20
 8015584:	f8a1 c034 	strh.w	ip, [r1, #52]	@ 0x34
 8015588:	f893 c001 	ldrb.w	ip, [r3, #1]
 801558c:	4463      	add	r3, ip
 801558e:	f103 0c06 	add.w	ip, r3, #6
 8015592:	4562      	cmp	r2, ip
 8015594:	d2d2      	bcs.n	801553c <net::scan_options(t_tcp*, net::tcb*, long)+0x14>
 8015596:	bd30      	pop	{r4, r5, pc}
 8015598:	3301      	adds	r3, #1
 801559a:	e7f8      	b.n	801558e <net::scan_options(t_tcp*, net::tcb*, long)+0x66>
 801559c:	f893 c001 	ldrb.w	ip, [r3, #1]
 80155a0:	f1bc 0f0a 	cmp.w	ip, #10
 80155a4:	d1f2      	bne.n	801558c <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 80155a6:	f103 0e0a 	add.w	lr, r3, #10
 80155aa:	4572      	cmp	r2, lr
 80155ac:	d3ee      	bcc.n	801558c <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 80155ae:	1c9c      	adds	r4, r3, #2
 80155b0:	f890 e02f 	ldrb.w	lr, [r0, #47]	@ 0x2f
 80155b4:	07a4      	lsls	r4, r4, #30
 80155b6:	bf0c      	ite	eq
 80155b8:	f8d3 4002 	ldreq.w	r4, [r3, #2]
 80155bc:	f8d3 4002 	ldrne.w	r4, [r3, #2]
 80155c0:	f01e 0f02 	tst.w	lr, #2
 80155c4:	d002      	beq.n	80155cc <net::scan_options(t_tcp*, net::tcb*, long)+0xa4>
 80155c6:	630c      	str	r4, [r1, #48]	@ 0x30
 80155c8:	e7de      	b.n	8015588 <net::scan_options(t_tcp*, net::tcb*, long)+0x60>
 80155ca:	4770      	bx	lr
 80155cc:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 80155ce:	fa95 fe85 	rev.w	lr, r5
 80155d2:	ba25      	rev	r5, r4
 80155d4:	4575      	cmp	r5, lr
 80155d6:	d9d9      	bls.n	801558c <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 80155d8:	e7f5      	b.n	80155c6 <net::scan_options(t_tcp*, net::tcb*, long)+0x9e>
 80155da:	bf00      	nop

080155dc <net::tcp_shutdown()>:
 80155dc:	4770      	bx	lr
 80155de:	bf00      	nop

080155e0 <net::tcp_begin(unsigned short)>:
 80155e0:	4b16      	ldr	r3, [pc, #88]	@ (801563c <net::tcp_begin(unsigned short)+0x5c>)
 80155e2:	f8b3 1d04 	ldrh.w	r1, [r3, #3332]	@ 0xd04
 80155e6:	4281      	cmp	r1, r0
 80155e8:	d025      	beq.n	8015636 <net::tcp_begin(unsigned short)+0x56>
 80155ea:	bb09      	cbnz	r1, 8015630 <net::tcp_begin(unsigned short)+0x50>
 80155ec:	b530      	push	{r4, r5, lr}
 80155ee:	4d14      	ldr	r5, [pc, #80]	@ (8015640 <net::tcp_begin(unsigned short)+0x60>)
 80155f0:	f8a3 0d04 	strh.w	r0, [r3, #3332]	@ 0xd04
 80155f4:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80155f8:	f503 7c0c 	add.w	ip, r3, #560	@ 0x230
 80155fc:	f640 3418 	movw	r4, #2840	@ 0xb18
 8015600:	f04f 0e01 	mov.w	lr, #1
 8015604:	f1a2 0350 	sub.w	r3, r2, #80	@ 0x50
 8015608:	f843 1b04 	str.w	r1, [r3], #4
 801560c:	4293      	cmp	r3, r2
 801560e:	d1fb      	bne.n	8015608 <net::tcp_begin(unsigned short)+0x28>
 8015610:	682b      	ldr	r3, [r5, #0]
 8015612:	f822 0c48 	strh.w	r0, [r2, #-72]
 8015616:	f822 4c0c 	strh.w	r4, [r2, #-12]
 801561a:	f802 ec04 	strb.w	lr, [r2, #-4]
 801561e:	e942 330f 	strd	r3, r3, [r2, #-60]	@ 0x3c
 8015622:	e942 330a 	strd	r3, r3, [r2, #-40]	@ 0x28
 8015626:	3250      	adds	r2, #80	@ 0x50
 8015628:	4562      	cmp	r2, ip
 801562a:	d1eb      	bne.n	8015604 <net::tcp_begin(unsigned short)+0x24>
 801562c:	2000      	movs	r0, #0
 801562e:	bd30      	pop	{r4, r5, pc}
 8015630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015634:	4770      	bx	lr
 8015636:	2000      	movs	r0, #0
 8015638:	4770      	bx	lr
 801563a:	bf00      	nop
 801563c:	100089a0 	andne	r8, r0, r0, lsr #19
 8015640:	2001a628 	andcs	sl, r1, r8, lsr #12

08015644 <net::tcp_read(long, unsigned char const**, unsigned long&)>:
 8015644:	b570      	push	{r4, r5, r6, lr}
 8015646:	4b1a      	ldr	r3, [pc, #104]	@ (80156b0 <net::tcp_read(long, unsigned char const**, unsigned long&)+0x6c>)
 8015648:	f640 5408 	movw	r4, #3336	@ 0xd08
 801564c:	fb04 f000 	mul.w	r0, r4, r0
 8015650:	eb03 0c00 	add.w	ip, r3, r0
 8015654:	f8bc e1e2 	ldrh.w	lr, [ip, #482]	@ 0x1e2
 8015658:	f8bc 41e0 	ldrh.w	r4, [ip, #480]	@ 0x1e0
 801565c:	4574      	cmp	r4, lr
 801565e:	bf08      	it	eq
 8015660:	2000      	moveq	r0, #0
 8015662:	d100      	bne.n	8015666 <net::tcp_read(long, unsigned char const**, unsigned long&)+0x22>
 8015664:	bd70      	pop	{r4, r5, r6, pc}
 8015666:	f44f 64b2 	mov.w	r4, #1424	@ 0x590
 801566a:	fb04 fe0e 	mul.w	lr, r4, lr
 801566e:	eb0e 0500 	add.w	r5, lr, r0
 8015672:	441d      	add	r5, r3
 8015674:	f500 76f2 	add.w	r6, r0, #484	@ 0x1e4
 8015678:	f8b5 4772 	ldrh.w	r4, [r5, #1906]	@ 0x772
 801567c:	6014      	str	r4, [r2, #0]
 801567e:	4476      	add	r6, lr
 8015680:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015684:	441e      	add	r6, r3
 8015686:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801568a:	600e      	str	r6, [r1, #0]
 801568c:	4403      	add	r3, r0
 801568e:	f8bc 21e2 	ldrh.w	r2, [ip, #482]	@ 0x1e2
 8015692:	f8b3 1044 	ldrh.w	r1, [r3, #68]	@ 0x44
 8015696:	f8b5 0770 	ldrh.w	r0, [r5, #1904]	@ 0x770
 801569a:	3201      	adds	r2, #1
 801569c:	f201 518c 	addw	r1, r1, #1420	@ 0x58c
 80156a0:	f002 0201 	and.w	r2, r2, #1
 80156a4:	f8a3 1044 	strh.w	r1, [r3, #68]	@ 0x44
 80156a8:	f8ac 21e2 	strh.w	r2, [ip, #482]	@ 0x1e2
 80156ac:	bd70      	pop	{r4, r5, r6, pc}
 80156ae:	bf00      	nop
 80156b0:	100089a0 	andne	r8, r0, r0, lsr #19

080156b4 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>:
 80156b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80156bc:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8015750 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x9c>
 80156c0:	f640 5408 	movw	r4, #3336	@ 0xd08
 80156c4:	011b      	lsls	r3, r3, #4
 80156c6:	fb04 3700 	mla	r7, r4, r0, r3
 80156ca:	b085      	sub	sp, #20
 80156cc:	eb08 0907 	add.w	r9, r8, r7
 80156d0:	2a00      	cmp	r2, #0
 80156d2:	d038      	beq.n	8015746 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x92>
 80156d4:	f107 0b10 	add.w	fp, r7, #16
 80156d8:	468a      	mov	sl, r1
 80156da:	4616      	mov	r6, r2
 80156dc:	44c3      	add	fp, r8
 80156de:	e01e      	b.n	801571e <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x6a>
 80156e0:	f8c5 a038 	str.w	sl, [r5, #56]	@ 0x38
 80156e4:	87ac      	strh	r4, [r5, #60]	@ 0x3c
 80156e6:	f8db 3008 	ldr.w	r3, [fp, #8]
 80156ea:	f8db 2030 	ldr.w	r2, [fp, #48]	@ 0x30
 80156ee:	4566      	cmp	r6, ip
 80156f0:	bf8c      	ite	hi
 80156f2:	f04f 0c10 	movhi.w	ip, #16
 80156f6:	f04f 0c18 	movls.w	ip, #24
 80156fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80156fe:	f88d c00c 	strb.w	ip, [sp, #12]
 8015702:	f7ff fe25 	bl	8015350 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8015706:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 801570a:	2100      	movs	r1, #0
 801570c:	4422      	add	r2, r4
 801570e:	1b1b      	subs	r3, r3, r4
 8015710:	1b36      	subs	r6, r6, r4
 8015712:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8015716:	63a9      	str	r1, [r5, #56]	@ 0x38
 8015718:	87a9      	strh	r1, [r5, #60]	@ 0x3c
 801571a:	44a2      	add	sl, r4
 801571c:	d013      	beq.n	8015746 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x92>
 801571e:	eb08 0507 	add.w	r5, r8, r7
 8015722:	f240 548c 	movw	r4, #1420	@ 0x58c
 8015726:	42b4      	cmp	r4, r6
 8015728:	69eb      	ldr	r3, [r5, #28]
 801572a:	bf28      	it	cs
 801572c:	4634      	movcs	r4, r6
 801572e:	429c      	cmp	r4, r3
 8015730:	f240 5c8b 	movw	ip, #1419	@ 0x58b
 8015734:	a901      	add	r1, sp, #4
 8015736:	4648      	mov	r0, r9
 8015738:	d9d2      	bls.n	80156e0 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x2c>
 801573a:	4804      	ldr	r0, [pc, #16]	@ (801574c <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x98>)
 801573c:	f002 ff6c 	bl	8018618 <console_error>
 8015740:	1b36      	subs	r6, r6, r4
 8015742:	44a2      	add	sl, r4
 8015744:	d1eb      	bne.n	801571e <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x6a>
 8015746:	b005      	add	sp, #20
 8015748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801574c:	0801d218 	stmdaeq	r1, {r3, r4, r9, ip, lr, pc}
 8015750:	100089a0 	andne	r8, r0, r0, lsr #19

08015754 <net::udp_set_ip()>:
 8015754:	4a02      	ldr	r2, [pc, #8]	@ (8015760 <net::udp_set_ip()+0xc>)
 8015756:	4b03      	ldr	r3, [pc, #12]	@ (8015764 <net::udp_set_ip()+0x10>)
 8015758:	6812      	ldr	r2, [r2, #0]
 801575a:	f8c3 201a 	str.w	r2, [r3, #26]
 801575e:	4770      	bx	lr
 8015760:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8015764:	100096b4 			@ <UNDEFINED> instruction: 0x100096b4

08015768 <net::udp_begin(unsigned short)>:
 8015768:	4a08      	ldr	r2, [pc, #32]	@ (801578c <net::udp_begin(unsigned short)+0x24>)
 801576a:	4601      	mov	r1, r0
 801576c:	2000      	movs	r0, #0
 801576e:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8015772:	428b      	cmp	r3, r1
 8015774:	d005      	beq.n	8015782 <net::udp_begin(unsigned short)+0x1a>
 8015776:	b12b      	cbz	r3, 8015784 <net::udp_begin(unsigned short)+0x1c>
 8015778:	3001      	adds	r0, #1
 801577a:	2808      	cmp	r0, #8
 801577c:	d1f7      	bne.n	801576e <net::udp_begin(unsigned short)+0x6>
 801577e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015782:	4770      	bx	lr
 8015784:	4b02      	ldr	r3, [pc, #8]	@ (8015790 <net::udp_begin(unsigned short)+0x28>)
 8015786:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
 801578a:	4770      	bx	lr
 801578c:	1000cafe 	strdne	ip, [r0], -lr
 8015790:	1000cb00 	andne	ip, r0, r0, lsl #22

08015794 <net::udp_end(unsigned short)>:
 8015794:	4a0d      	ldr	r2, [pc, #52]	@ (80157cc <net::udp_end(unsigned short)+0x38>)
 8015796:	b508      	push	{r3, lr}
 8015798:	2300      	movs	r3, #0
 801579a:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 801579e:	4281      	cmp	r1, r0
 80157a0:	d008      	beq.n	80157b4 <net::udp_end(unsigned short)+0x20>
 80157a2:	3301      	adds	r3, #1
 80157a4:	2b08      	cmp	r3, #8
 80157a6:	d1f8      	bne.n	801579a <net::udp_end(unsigned short)+0x6>
 80157a8:	4809      	ldr	r0, [pc, #36]	@ (80157d0 <net::udp_end(unsigned short)+0x3c>)
 80157aa:	f002 ff35 	bl	8018618 <console_error>
 80157ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157b2:	bd08      	pop	{r3, pc}
 80157b4:	4a07      	ldr	r2, [pc, #28]	@ (80157d4 <net::udp_end(unsigned short)+0x40>)
 80157b6:	4908      	ldr	r1, [pc, #32]	@ (80157d8 <net::udp_end(unsigned short)+0x44>)
 80157b8:	f240 50cc 	movw	r0, #1484	@ 0x5cc
 80157bc:	fb00 2203 	mla	r2, r0, r3, r2
 80157c0:	2000      	movs	r0, #0
 80157c2:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
 80157c6:	6050      	str	r0, [r2, #4]
 80157c8:	bd08      	pop	{r3, pc}
 80157ca:	bf00      	nop
 80157cc:	1000cafe 	strdne	ip, [r0], -lr
 80157d0:	0801d248 	stmdaeq	r1, {r3, r6, r9, ip, lr, pc}
 80157d4:	10009ca0 	andne	r9, r0, r0, lsr #25
 80157d8:	1000cb00 	andne	ip, r0, r0, lsl #22

080157dc <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>:
 80157dc:	b510      	push	{r4, lr}
 80157de:	f240 5ccc 	movw	ip, #1484	@ 0x5cc
 80157e2:	4c0c      	ldr	r4, [pc, #48]	@ (8015814 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)+0x38>)
 80157e4:	fb0c fc00 	mul.w	ip, ip, r0
 80157e8:	eb04 0e0c 	add.w	lr, r4, ip
 80157ec:	f8de 0004 	ldr.w	r0, [lr, #4]
 80157f0:	b900      	cbnz	r0, 80157f4 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)+0x18>
 80157f2:	bd10      	pop	{r4, pc}
 80157f4:	f10c 000a 	add.w	r0, ip, #10
 80157f8:	4420      	add	r0, r4
 80157fa:	6008      	str	r0, [r1, #0]
 80157fc:	f854 100c 	ldr.w	r1, [r4, ip]
 8015800:	6011      	str	r1, [r2, #0]
 8015802:	f8be 2008 	ldrh.w	r2, [lr, #8]
 8015806:	801a      	strh	r2, [r3, #0]
 8015808:	2300      	movs	r3, #0
 801580a:	f8de 0004 	ldr.w	r0, [lr, #4]
 801580e:	f8ce 3004 	str.w	r3, [lr, #4]
 8015812:	bd10      	pop	{r4, pc}
 8015814:	10009ca0 	andne	r9, r0, r0, lsr #25

08015818 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>:
 8015818:	b570      	push	{r4, r5, r6, lr}
 801581a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801581e:	4e3d      	ldr	r6, [pc, #244]	@ (8015914 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xfc>)
 8015820:	fa94 fe94 	rev16.w	lr, r4
 8015824:	4c3c      	ldr	r4, [pc, #240]	@ (8015918 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x100>)
 8015826:	f8b6 c000 	ldrh.w	ip, [r6]
 801582a:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
 801582e:	4c3b      	ldr	r4, [pc, #236]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8015830:	b290      	uxth	r0, r2
 8015832:	f8a4 c012 	strh.w	ip, [r4, #18]
 8015836:	f10c 0c01 	add.w	ip, ip, #1
 801583a:	f8a6 c000 	strh.w	ip, [r6]
 801583e:	f100 0c1c 	add.w	ip, r0, #28
 8015842:	3008      	adds	r0, #8
 8015844:	ba40      	rev16	r0, r0
 8015846:	ba6d      	rev16	r5, r5
 8015848:	fa9c fc9c 	rev16.w	ip, ip
 801584c:	84e0      	strh	r0, [r4, #38]	@ 0x26
 801584e:	f5b2 6fb8 	cmp.w	r2, #1472	@ 0x5c0
 8015852:	f04f 0000 	mov.w	r0, #0
 8015856:	8465      	strh	r5, [r4, #34]	@ 0x22
 8015858:	f8a4 e024 	strh.w	lr, [r4, #36]	@ 0x24
 801585c:	4615      	mov	r5, r2
 801585e:	f8a4 c010 	strh.w	ip, [r4, #16]
 8015862:	bf28      	it	cs
 8015864:	f44f 65b8 	movcs.w	r5, #1472	@ 0x5c0
 8015868:	8320      	strh	r0, [r4, #24]
 801586a:	b14a      	cbz	r2, 8015880 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x68>
 801586c:	eb01 0e05 	add.w	lr, r1, r5
 8015870:	f104 002a 	add.w	r0, r4, #42	@ 0x2a
 8015874:	f811 cb01 	ldrb.w	ip, [r1], #1
 8015878:	f800 cb01 	strb.w	ip, [r0], #1
 801587c:	4571      	cmp	r1, lr
 801587e:	d1f9      	bne.n	8015874 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x5c>
 8015880:	1c5a      	adds	r2, r3, #1
 8015882:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 8015886:	d02e      	beq.n	80158e6 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xce>
 8015888:	4a25      	ldr	r2, [pc, #148]	@ (8015920 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x108>)
 801588a:	6812      	ldr	r2, [r2, #0]
 801588c:	439a      	bics	r2, r3
 801588e:	d01c      	beq.n	80158ca <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xb2>
 8015890:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8015894:	2ae0      	cmp	r2, #224	@ 0xe0
 8015896:	d136      	bne.n	8015906 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xee>
 8015898:	4822      	ldr	r0, [pc, #136]	@ (8015924 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x10c>)
 801589a:	f3c3 2206 	ubfx	r2, r3, #8, #7
 801589e:	70c2      	strb	r2, [r0, #3]
 80158a0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80158a4:	7102      	strb	r2, [r0, #4]
 80158a6:	f3c3 6207 	ubfx	r2, r3, #24, #8
 80158aa:	7142      	strb	r2, [r0, #5]
 80158ac:	4a1b      	ldr	r2, [pc, #108]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80158ae:	1d85      	adds	r5, r0, #6
 80158b0:	f810 cb01 	ldrb.w	ip, [r0], #1
 80158b4:	f802 cb01 	strb.w	ip, [r2], #1
 80158b8:	42a8      	cmp	r0, r5
 80158ba:	d1f9      	bne.n	80158b0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x98>
 80158bc:	f8c4 301e 	str.w	r3, [r4, #30]
 80158c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158c4:	4815      	ldr	r0, [pc, #84]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80158c6:	f000 bc15 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 80158ca:	4a14      	ldr	r2, [pc, #80]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80158cc:	25ff      	movs	r5, #255	@ 0xff
 80158ce:	1d90      	adds	r0, r2, #6
 80158d0:	f802 5b01 	strb.w	r5, [r2], #1
 80158d4:	4282      	cmp	r2, r0
 80158d6:	d1fb      	bne.n	80158d0 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xb8>
 80158d8:	f8c4 301e 	str.w	r3, [r4, #30]
 80158dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158e0:	480e      	ldr	r0, [pc, #56]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80158e2:	f000 bc07 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 80158e6:	4b0d      	ldr	r3, [pc, #52]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80158e8:	22ff      	movs	r2, #255	@ 0xff
 80158ea:	1d98      	adds	r0, r3, #6
 80158ec:	f803 2b01 	strb.w	r2, [r3], #1
 80158f0:	4283      	cmp	r3, r0
 80158f2:	d1fb      	bne.n	80158ec <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xd4>
 80158f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80158f8:	f8c4 301e 	str.w	r3, [r4, #30]
 80158fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015900:	4806      	ldr	r0, [pc, #24]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8015902:	f000 bbf7 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 8015906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801590a:	4804      	ldr	r0, [pc, #16]	@ (801591c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 801590c:	461a      	mov	r2, r3
 801590e:	f000 be27 	b.w	8016560 <net::arp_send(t_udp*, unsigned long, unsigned long)>
 8015912:	bf00      	nop
 8015914:	100096b0 			@ <UNDEFINED> instruction: 0x100096b0
 8015918:	1000cb00 	andne	ip, r0, r0, lsl #22
 801591c:	100096b4 			@ <UNDEFINED> instruction: 0x100096b4
 8015920:	2000cb70 	andcs	ip, r0, r0, ror fp
 8015924:	100096a8 	andne	r9, r0, r8, lsr #13

08015928 <NetworkParamsStore::Copy(networkparams::Params*)>:
 8015928:	b507      	push	{r0, r1, r2, lr}
 801592a:	2301      	movs	r3, #1
 801592c:	2100      	movs	r1, #0
 801592e:	e9cd 1300 	strd	r1, r3, [sp]
 8015932:	4602      	mov	r2, r0
 8015934:	4803      	ldr	r0, [pc, #12]	@ (8015944 <NetworkParamsStore::Copy(networkparams::Params*)+0x1c>)
 8015936:	235e      	movs	r3, #94	@ 0x5e
 8015938:	6800      	ldr	r0, [r0, #0]
 801593a:	f001 fc3b 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 801593e:	b003      	add	sp, #12
 8015940:	f85d fb04 	ldr.w	pc, [sp], #4
 8015944:	2000cc34 	andcs	ip, r0, r4, lsr ip

08015948 <NetworkParams::NetworkParams()>:
 8015948:	b510      	push	{r4, lr}
 801594a:	225e      	movs	r2, #94	@ 0x5e
 801594c:	4604      	mov	r4, r0
 801594e:	2100      	movs	r1, #0
 8015950:	f004 fe86 	bl	801a660 <memset>
 8015954:	2301      	movs	r3, #1
 8015956:	7523      	strb	r3, [r4, #20]
 8015958:	4620      	mov	r0, r4
 801595a:	bd10      	pop	{r4, pc}

0801595c <NetworkParams::Load()>:
 801595c:	b508      	push	{r3, lr}
 801595e:	2200      	movs	r2, #0
 8015960:	7002      	strb	r2, [r0, #0]
 8015962:	7042      	strb	r2, [r0, #1]
 8015964:	7082      	strb	r2, [r0, #2]
 8015966:	70c2      	strb	r2, [r0, #3]
 8015968:	f7ff ffde 	bl	8015928 <NetworkParamsStore::Copy(networkparams::Params*)>
 801596c:	bd08      	pop	{r3, pc}
	...

08015970 <NetworkParams::Load(char const*, unsigned long)>:
 8015970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015972:	2500      	movs	r5, #0
 8015974:	b087      	sub	sp, #28
 8015976:	4604      	mov	r4, r0
 8015978:	460e      	mov	r6, r1
 801597a:	4617      	mov	r7, r2
 801597c:	7005      	strb	r5, [r0, #0]
 801597e:	7045      	strb	r5, [r0, #1]
 8015980:	7085      	strb	r5, [r0, #2]
 8015982:	70c5      	strb	r5, [r0, #3]
 8015984:	4602      	mov	r2, r0
 8015986:	490c      	ldr	r1, [pc, #48]	@ (80159b8 <NetworkParams::Load(char const*, unsigned long)+0x48>)
 8015988:	a804      	add	r0, sp, #16
 801598a:	f001 feed 	bl	8017768 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801598e:	463a      	mov	r2, r7
 8015990:	4631      	mov	r1, r6
 8015992:	a804      	add	r0, sp, #16
 8015994:	f001 feec 	bl	8017770 <ReadConfigFile::Read(char const*, unsigned int)>
 8015998:	e9cd 5501 	strd	r5, r5, [sp, #4]
 801599c:	235e      	movs	r3, #94	@ 0x5e
 801599e:	4807      	ldr	r0, [pc, #28]	@ (80159bc <NetworkParams::Load(char const*, unsigned long)+0x4c>)
 80159a0:	9300      	str	r3, [sp, #0]
 80159a2:	462a      	mov	r2, r5
 80159a4:	4623      	mov	r3, r4
 80159a6:	4629      	mov	r1, r5
 80159a8:	6800      	ldr	r0, [r0, #0]
 80159aa:	f001 fbdd 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80159ae:	a804      	add	r0, sp, #16
 80159b0:	f001 fedd 	bl	801776e <ReadConfigFile::~ReadConfigFile()>
 80159b4:	b007      	add	sp, #28
 80159b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b8:	08015b1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, fp, ip, lr}
 80159bc:	2000cc34 	andcs	ip, r0, r4, lsr ip

080159c0 <NetworkParams::callbackFunction(char const*)>:
 80159c0:	b530      	push	{r4, r5, lr}
 80159c2:	460d      	mov	r5, r1
 80159c4:	b085      	sub	sp, #20
 80159c6:	4604      	mov	r4, r0
 80159c8:	494d      	ldr	r1, [pc, #308]	@ (8015b00 <NetworkParams::callbackFunction(char const*)+0x140>)
 80159ca:	f10d 0207 	add.w	r2, sp, #7
 80159ce:	4628      	mov	r0, r5
 80159d0:	f001 fff4 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80159d4:	b978      	cbnz	r0, 80159f6 <NetworkParams::callbackFunction(char const*)+0x36>
 80159d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80159da:	6823      	ldr	r3, [r4, #0]
 80159dc:	b142      	cbz	r2, 80159f0 <NetworkParams::callbackFunction(char const*)+0x30>
 80159de:	f023 0301 	bic.w	r3, r3, #1
 80159e2:	3a00      	subs	r2, #0
 80159e4:	bf18      	it	ne
 80159e6:	2201      	movne	r2, #1
 80159e8:	6023      	str	r3, [r4, #0]
 80159ea:	7522      	strb	r2, [r4, #20]
 80159ec:	b005      	add	sp, #20
 80159ee:	bd30      	pop	{r4, r5, pc}
 80159f0:	f043 0301 	orr.w	r3, r3, #1
 80159f4:	e7f5      	b.n	80159e2 <NetworkParams::callbackFunction(char const*)+0x22>
 80159f6:	4943      	ldr	r1, [pc, #268]	@ (8015b04 <NetworkParams::callbackFunction(char const*)+0x144>)
 80159f8:	f10d 0207 	add.w	r2, sp, #7
 80159fc:	4628      	mov	r0, r5
 80159fe:	f001 ffdd 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8015a02:	b980      	cbnz	r0, 8015a26 <NetworkParams::callbackFunction(char const*)+0x66>
 8015a04:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015a08:	6823      	ldr	r3, [r4, #0]
 8015a0a:	1e51      	subs	r1, r2, #1
 8015a0c:	2904      	cmp	r1, #4
 8015a0e:	bf97      	itett	ls
 8015a10:	f443 7380 	orrls.w	r3, r3, #256	@ 0x100
 8015a14:	f423 7380 	bichi.w	r3, r3, #256	@ 0x100
 8015a18:	6023      	strls	r3, [r4, #0]
 8015a1a:	f884 205d 	strbls.w	r2, [r4, #93]	@ 0x5d
 8015a1e:	bf84      	itt	hi
 8015a20:	6023      	strhi	r3, [r4, #0]
 8015a22:	f884 005d 	strbhi.w	r0, [r4, #93]	@ 0x5d
 8015a26:	4938      	ldr	r1, [pc, #224]	@ (8015b08 <NetworkParams::callbackFunction(char const*)+0x148>)
 8015a28:	aa02      	add	r2, sp, #8
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	f001 ff41 	bl	80178b2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8015a30:	b9d8      	cbnz	r0, 8015a6a <NetworkParams::callbackFunction(char const*)+0xaa>
 8015a32:	9a02      	ldr	r2, [sp, #8]
 8015a34:	6823      	ldr	r3, [r4, #0]
 8015a36:	b2d1      	uxtb	r1, r2
 8015a38:	29ac      	cmp	r1, #172	@ 0xac
 8015a3a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8015a3e:	d007      	beq.n	8015a50 <NetworkParams::callbackFunction(char const*)+0x90>
 8015a40:	29c0      	cmp	r1, #192	@ 0xc0
 8015a42:	d00c      	beq.n	8015a5e <NetworkParams::callbackFunction(char const*)+0x9e>
 8015a44:	290a      	cmp	r1, #10
 8015a46:	d006      	beq.n	8015a56 <NetworkParams::callbackFunction(char const*)+0x96>
 8015a48:	2902      	cmp	r1, #2
 8015a4a:	d004      	beq.n	8015a56 <NetworkParams::callbackFunction(char const*)+0x96>
 8015a4c:	b11a      	cbz	r2, 8015a56 <NetworkParams::callbackFunction(char const*)+0x96>
 8015a4e:	e008      	b.n	8015a62 <NetworkParams::callbackFunction(char const*)+0xa2>
 8015a50:	3810      	subs	r0, #16
 8015a52:	280f      	cmp	r0, #15
 8015a54:	d805      	bhi.n	8015a62 <NetworkParams::callbackFunction(char const*)+0xa2>
 8015a56:	6062      	str	r2, [r4, #4]
 8015a58:	f043 0302 	orr.w	r3, r3, #2
 8015a5c:	e003      	b.n	8015a66 <NetworkParams::callbackFunction(char const*)+0xa6>
 8015a5e:	28a8      	cmp	r0, #168	@ 0xa8
 8015a60:	d0f9      	beq.n	8015a56 <NetworkParams::callbackFunction(char const*)+0x96>
 8015a62:	f023 0302 	bic.w	r3, r3, #2
 8015a66:	6023      	str	r3, [r4, #0]
 8015a68:	e7c0      	b.n	80159ec <NetworkParams::callbackFunction(char const*)+0x2c>
 8015a6a:	4928      	ldr	r1, [pc, #160]	@ (8015b0c <NetworkParams::callbackFunction(char const*)+0x14c>)
 8015a6c:	aa02      	add	r2, sp, #8
 8015a6e:	4628      	mov	r0, r5
 8015a70:	f001 ff1f 	bl	80178b2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8015a74:	b970      	cbnz	r0, 8015a94 <NetworkParams::callbackFunction(char const*)+0xd4>
 8015a76:	9a02      	ldr	r2, [sp, #8]
 8015a78:	6823      	ldr	r3, [r4, #0]
 8015a7a:	b142      	cbz	r2, 8015a8e <NetworkParams::callbackFunction(char const*)+0xce>
 8015a7c:	ba11      	rev	r1, r2
 8015a7e:	43c8      	mvns	r0, r1
 8015a80:	ea11 0150 	ands.w	r1, r1, r0, lsr #1
 8015a84:	d103      	bne.n	8015a8e <NetworkParams::callbackFunction(char const*)+0xce>
 8015a86:	60a2      	str	r2, [r4, #8]
 8015a88:	f043 0304 	orr.w	r3, r3, #4
 8015a8c:	e7eb      	b.n	8015a66 <NetworkParams::callbackFunction(char const*)+0xa6>
 8015a8e:	f023 0304 	bic.w	r3, r3, #4
 8015a92:	e7e8      	b.n	8015a66 <NetworkParams::callbackFunction(char const*)+0xa6>
 8015a94:	491e      	ldr	r1, [pc, #120]	@ (8015b10 <NetworkParams::callbackFunction(char const*)+0x150>)
 8015a96:	aa02      	add	r2, sp, #8
 8015a98:	4628      	mov	r0, r5
 8015a9a:	f001 ff0a 	bl	80178b2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8015a9e:	b950      	cbnz	r0, 8015ab6 <NetworkParams::callbackFunction(char const*)+0xf6>
 8015aa0:	9a02      	ldr	r2, [sp, #8]
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	b122      	cbz	r2, 8015ab0 <NetworkParams::callbackFunction(char const*)+0xf0>
 8015aa6:	f043 0308 	orr.w	r3, r3, #8
 8015aaa:	6023      	str	r3, [r4, #0]
 8015aac:	60e2      	str	r2, [r4, #12]
 8015aae:	e79d      	b.n	80159ec <NetworkParams::callbackFunction(char const*)+0x2c>
 8015ab0:	f023 0308 	bic.w	r3, r3, #8
 8015ab4:	e7d7      	b.n	8015a66 <NetworkParams::callbackFunction(char const*)+0xa6>
 8015ab6:	233f      	movs	r3, #63	@ 0x3f
 8015ab8:	9303      	str	r3, [sp, #12]
 8015aba:	4916      	ldr	r1, [pc, #88]	@ (8015b14 <NetworkParams::callbackFunction(char const*)+0x154>)
 8015abc:	ab03      	add	r3, sp, #12
 8015abe:	f104 0215 	add.w	r2, r4, #21
 8015ac2:	4628      	mov	r0, r5
 8015ac4:	f001 fe8a 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 8015ac8:	b930      	cbnz	r0, 8015ad8 <NetworkParams::callbackFunction(char const*)+0x118>
 8015aca:	9b03      	ldr	r3, [sp, #12]
 8015acc:	4423      	add	r3, r4
 8015ace:	7558      	strb	r0, [r3, #21]
 8015ad0:	6823      	ldr	r3, [r4, #0]
 8015ad2:	f043 0320 	orr.w	r3, r3, #32
 8015ad6:	e7c6      	b.n	8015a66 <NetworkParams::callbackFunction(char const*)+0xa6>
 8015ad8:	490f      	ldr	r1, [pc, #60]	@ (8015b18 <NetworkParams::callbackFunction(char const*)+0x158>)
 8015ada:	aa02      	add	r2, sp, #8
 8015adc:	4628      	mov	r0, r5
 8015ade:	f001 fee8 	bl	80178b2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8015ae2:	2800      	cmp	r0, #0
 8015ae4:	d182      	bne.n	80159ec <NetworkParams::callbackFunction(char const*)+0x2c>
 8015ae6:	9a02      	ldr	r2, [sp, #8]
 8015ae8:	6823      	ldr	r3, [r4, #0]
 8015aea:	b12a      	cbz	r2, 8015af8 <NetworkParams::callbackFunction(char const*)+0x138>
 8015aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015af0:	6023      	str	r3, [r4, #0]
 8015af2:	f8c4 2055 	str.w	r2, [r4, #85]	@ 0x55
 8015af6:	e779      	b.n	80159ec <NetworkParams::callbackFunction(char const*)+0x2c>
 8015af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015afc:	e7f8      	b.n	8015af0 <NetworkParams::callbackFunction(char const*)+0x130>
 8015afe:	bf00      	nop
 8015b00:	0801eff1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015b04:	0801efe1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015b08:	0801efd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015b0c:	0801efcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015b10:	0801efbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8015b14:	0801efb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8015b18:	0801efa9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, fp, sp, lr, pc}

08015b1c <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8015b1c:	f7ff bf50 	b.w	80159c0 <NetworkParams::callbackFunction(char const*)>

08015b20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)>:
 8015b20:	b570      	push	{r4, r5, r6, lr}
 8015b22:	4604      	mov	r4, r0
 8015b24:	b086      	sub	sp, #24
 8015b26:	4615      	mov	r5, r2
 8015b28:	461e      	mov	r6, r3
 8015b2a:	2900      	cmp	r1, #0
 8015b2c:	d046      	beq.n	8015bbc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x9c>
 8015b2e:	225e      	movs	r2, #94	@ 0x5e
 8015b30:	f004 fd7f 	bl	801a632 <memmove>
 8015b34:	462a      	mov	r2, r5
 8015b36:	4d76      	ldr	r5, [pc, #472]	@ (8015d10 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f0>)
 8015b38:	4976      	ldr	r1, [pc, #472]	@ (8015d14 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f4>)
 8015b3a:	4633      	mov	r3, r6
 8015b3c:	a803      	add	r0, sp, #12
 8015b3e:	f001 fd3d 	bl	80175bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 8015b42:	692a      	ldr	r2, [r5, #16]
 8015b44:	4974      	ldr	r1, [pc, #464]	@ (8015d18 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f8>)
 8015b46:	2300      	movs	r3, #0
 8015b48:	a803      	add	r0, sp, #12
 8015b4a:	f001 fd79 	bl	8017640 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 8015b4e:	6823      	ldr	r3, [r4, #0]
 8015b50:	0799      	lsls	r1, r3, #30
 8015b52:	bf5c      	itt	pl
 8015b54:	682a      	ldrpl	r2, [r5, #0]
 8015b56:	6062      	strpl	r2, [r4, #4]
 8015b58:	075a      	lsls	r2, r3, #29
 8015b5a:	bf5c      	itt	pl
 8015b5c:	686a      	ldrpl	r2, [r5, #4]
 8015b5e:	60a2      	strpl	r2, [r4, #8]
 8015b60:	071e      	lsls	r6, r3, #28
 8015b62:	bf5c      	itt	pl
 8015b64:	68aa      	ldrpl	r2, [r5, #8]
 8015b66:	60e2      	strpl	r2, [r4, #12]
 8015b68:	0698      	lsls	r0, r3, #26
 8015b6a:	d412      	bmi.n	8015b92 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x72>
 8015b6c:	4b6b      	ldr	r3, [pc, #428]	@ (8015d1c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1fc>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	f104 0015 	add.w	r0, r4, #21
 8015b74:	3315      	adds	r3, #21
 8015b76:	223f      	movs	r2, #63	@ 0x3f
 8015b78:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015b7c:	b119      	cbz	r1, 8015b86 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x66>
 8015b7e:	3a01      	subs	r2, #1
 8015b80:	f800 1b01 	strb.w	r1, [r0], #1
 8015b84:	d1f8      	bne.n	8015b78 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x58>
 8015b86:	2100      	movs	r1, #0
 8015b88:	f004 fd6a 	bl	801a660 <memset>
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015b92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015b96:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8015b9a:	7d23      	ldrb	r3, [r4, #20]
 8015b9c:	6821      	ldr	r1, [r4, #0]
 8015b9e:	42aa      	cmp	r2, r5
 8015ba0:	d21d      	bcs.n	8015bde <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xbe>
 8015ba2:	9803      	ldr	r0, [sp, #12]
 8015ba4:	07c9      	lsls	r1, r1, #31
 8015ba6:	4410      	add	r0, r2
 8015ba8:	eba5 0502 	sub.w	r5, r5, r2
 8015bac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015bb0:	d407      	bmi.n	8015bc2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xa2>
 8015bb2:	b93a      	cbnz	r2, 8015bc4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xa4>
 8015bb4:	9300      	str	r3, [sp, #0]
 8015bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8015d20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x200>)
 8015bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8015d24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 8015bba:	e006      	b.n	8015bca <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xaa>
 8015bbc:	f7ff feb4 	bl	8015928 <NetworkParamsStore::Copy(networkparams::Params*)>
 8015bc0:	e7b8      	b.n	8015b34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 8015bc2:	b312      	cbz	r2, 8015c0a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xea>
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	4a58      	ldr	r2, [pc, #352]	@ (8015d28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x208>)
 8015bc8:	4b56      	ldr	r3, [pc, #344]	@ (8015d24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 8015bca:	4629      	mov	r1, r5
 8015bcc:	f005 f854 	bl	801ac78 <snprintf>
 8015bd0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015bd4:	4285      	cmp	r5, r0
 8015bd6:	bfa4      	itt	ge
 8015bd8:	181b      	addge	r3, r3, r0
 8015bda:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8015bde:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015be2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8015be6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8015bea:	6821      	ldr	r1, [r4, #0]
 8015bec:	42aa      	cmp	r2, r5
 8015bee:	d21f      	bcs.n	8015c30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x110>
 8015bf0:	9803      	ldr	r0, [sp, #12]
 8015bf2:	05ce      	lsls	r6, r1, #23
 8015bf4:	4410      	add	r0, r2
 8015bf6:	eba5 0502 	sub.w	r5, r5, r2
 8015bfa:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015bfe:	d408      	bmi.n	8015c12 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xf2>
 8015c00:	b94a      	cbnz	r2, 8015c16 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xf6>
 8015c02:	9300      	str	r3, [sp, #0]
 8015c04:	4a46      	ldr	r2, [pc, #280]	@ (8015d20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x200>)
 8015c06:	4b49      	ldr	r3, [pc, #292]	@ (8015d2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 8015c08:	e008      	b.n	8015c1c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xfc>
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	4a48      	ldr	r2, [pc, #288]	@ (8015d30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x210>)
 8015c0e:	4b45      	ldr	r3, [pc, #276]	@ (8015d24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 8015c10:	e7db      	b.n	8015bca <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xaa>
 8015c12:	2a00      	cmp	r2, #0
 8015c14:	d03e      	beq.n	8015c94 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x174>
 8015c16:	9300      	str	r3, [sp, #0]
 8015c18:	4a43      	ldr	r2, [pc, #268]	@ (8015d28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x208>)
 8015c1a:	4b44      	ldr	r3, [pc, #272]	@ (8015d2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	f005 f82b 	bl	801ac78 <snprintf>
 8015c22:	4285      	cmp	r5, r0
 8015c24:	bfa2      	ittt	ge
 8015c26:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8015c2a:	18c0      	addge	r0, r0, r3
 8015c2c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8015c30:	4940      	ldr	r1, [pc, #256]	@ (8015d34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x214>)
 8015c32:	a803      	add	r0, sp, #12
 8015c34:	f001 fd7e 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 8015c38:	6823      	ldr	r3, [r4, #0]
 8015c3a:	6862      	ldr	r2, [r4, #4]
 8015c3c:	493e      	ldr	r1, [pc, #248]	@ (8015d38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x218>)
 8015c3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8015c42:	a803      	add	r0, sp, #12
 8015c44:	f001 fcfc 	bl	8017640 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 8015c48:	6823      	ldr	r3, [r4, #0]
 8015c4a:	68a2      	ldr	r2, [r4, #8]
 8015c4c:	493b      	ldr	r1, [pc, #236]	@ (8015d3c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x21c>)
 8015c4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015c52:	a803      	add	r0, sp, #12
 8015c54:	f001 fcf4 	bl	8017640 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 8015c58:	6823      	ldr	r3, [r4, #0]
 8015c5a:	68e2      	ldr	r2, [r4, #12]
 8015c5c:	4938      	ldr	r1, [pc, #224]	@ (8015d40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x220>)
 8015c5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8015c62:	a803      	add	r0, sp, #12
 8015c64:	f001 fcec 	bl	8017640 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 8015c68:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015c6c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8015c70:	6821      	ldr	r1, [r4, #0]
 8015c72:	42aa      	cmp	r2, r5
 8015c74:	d221      	bcs.n	8015cba <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x19a>
 8015c76:	9803      	ldr	r0, [sp, #12]
 8015c78:	0689      	lsls	r1, r1, #26
 8015c7a:	4410      	add	r0, r2
 8015c7c:	eba5 0502 	sub.w	r5, r5, r2
 8015c80:	f104 0315 	add.w	r3, r4, #21
 8015c84:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015c88:	d408      	bmi.n	8015c9c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x17c>
 8015c8a:	b94a      	cbnz	r2, 8015ca0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x180>
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8015d44 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x224>)
 8015c90:	4b2d      	ldr	r3, [pc, #180]	@ (8015d48 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 8015c92:	e008      	b.n	8015ca6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x186>
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	4a26      	ldr	r2, [pc, #152]	@ (8015d30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x210>)
 8015c98:	4b24      	ldr	r3, [pc, #144]	@ (8015d2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 8015c9a:	e7bf      	b.n	8015c1c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xfc>
 8015c9c:	2a00      	cmp	r2, #0
 8015c9e:	d032      	beq.n	8015d06 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1e6>
 8015ca0:	9300      	str	r3, [sp, #0]
 8015ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8015d4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>)
 8015ca4:	4b28      	ldr	r3, [pc, #160]	@ (8015d48 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 8015ca6:	4629      	mov	r1, r5
 8015ca8:	f004 ffe6 	bl	801ac78 <snprintf>
 8015cac:	4285      	cmp	r5, r0
 8015cae:	bfa2      	ittt	ge
 8015cb0:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8015cb4:	18c0      	addge	r0, r0, r3
 8015cb6:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8015cba:	4925      	ldr	r1, [pc, #148]	@ (8015d50 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 8015cbc:	a803      	add	r0, sp, #12
 8015cbe:	f001 fd39 	bl	8017734 <PropertiesBuilder::AddComment(char const*)>
 8015cc2:	6823      	ldr	r3, [r4, #0]
 8015cc4:	f8d4 2055 	ldr.w	r2, [r4, #85]	@ 0x55
 8015cc8:	4922      	ldr	r1, [pc, #136]	@ (8015d54 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 8015cca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015cce:	a803      	add	r0, sp, #12
 8015cd0:	f001 fcb6 	bl	8017640 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 8015cd4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015cd8:	b17b      	cbz	r3, 8015cfa <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1da>
 8015cda:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015cde:	9b03      	ldr	r3, [sp, #12]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	227d      	movs	r2, #125	@ 0x7d
 8015ce4:	f803 2c01 	strb.w	r2, [r3, #-1]
 8015ce8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015cec:	9903      	ldr	r1, [sp, #12]
 8015cee:	54ca      	strb	r2, [r1, r3]
 8015cf0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015cfa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015cfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d00:	601a      	str	r2, [r3, #0]
 8015d02:	b006      	add	sp, #24
 8015d04:	bd70      	pop	{r4, r5, r6, pc}
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	4a13      	ldr	r2, [pc, #76]	@ (8015d58 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x238>)
 8015d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8015d48 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 8015d0c:	e7cb      	b.n	8015ca6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x186>
 8015d0e:	bf00      	nop
 8015d10:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8015d14:	0801effa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d18:	0801c211 	stmdaeq	r1, {r0, r4, r9, lr, pc}
 8015d1c:	2000cb68 	andcs	ip, r0, r8, ror #22
 8015d20:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 8015d24:	0801eff1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d28:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 8015d2c:	0801efe1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d30:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}
 8015d34:	0801c21e 	stmdaeq	r1, {r1, r2, r3, r4, r9, lr, pc}
 8015d38:	0801efd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d3c:	0801efcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d40:	0801efbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d44:	0801b98c 	stmdaeq	r1, {r2, r3, r7, r8, fp, ip, sp, pc}
 8015d48:	0801efb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d4c:	0801b981 	stmdaeq	r1, {r0, r7, r8, fp, ip, sp, pc}
 8015d50:	0801c228 	stmdaeq	r1, {r3, r5, r9, lr, pc}
 8015d54:	0801efa9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8015d58:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}

08015d5c <net::phy_customized_led()>:
 8015d5c:	4770      	bx	lr

08015d5e <net::phy_customized_timing()>:
 8015d5e:	4770      	bx	lr

08015d60 <emac_adjust_link(net::PhyStatus)>:
 8015d60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015d62:	ac04      	add	r4, sp, #16
 8015d64:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015d68:	460c      	mov	r4, r1
 8015d6a:	4b14      	ldr	r3, [pc, #80]	@ (8015dbc <emac_adjust_link(net::PhyStatus)+0x5c>)
 8015d6c:	4914      	ldr	r1, [pc, #80]	@ (8015dc0 <emac_adjust_link(net::PhyStatus)+0x60>)
 8015d6e:	2a00      	cmp	r2, #0
 8015d70:	4615      	mov	r5, r2
 8015d72:	4606      	mov	r6, r0
 8015d74:	bf14      	ite	ne
 8015d76:	2264      	movne	r2, #100	@ 0x64
 8015d78:	220a      	moveq	r2, #10
 8015d7a:	4812      	ldr	r0, [pc, #72]	@ (8015dc4 <emac_adjust_link(net::PhyStatus)+0x64>)
 8015d7c:	2c00      	cmp	r4, #0
 8015d7e:	bf18      	it	ne
 8015d80:	460b      	movne	r3, r1
 8015d82:	4911      	ldr	r1, [pc, #68]	@ (8015dc8 <emac_adjust_link(net::PhyStatus)+0x68>)
 8015d84:	2e01      	cmp	r6, #1
 8015d86:	bf08      	it	eq
 8015d88:	4601      	moveq	r1, r0
 8015d8a:	4810      	ldr	r0, [pc, #64]	@ (8015dcc <emac_adjust_link(net::PhyStatus)+0x6c>)
 8015d8c:	f004 ff4c 	bl	801ac28 <printf>
 8015d90:	2d01      	cmp	r5, #1
 8015d92:	d10d      	bne.n	8015db0 <emac_adjust_link(net::PhyStatus)+0x50>
 8015d94:	2c01      	cmp	r4, #1
 8015d96:	bf14      	ite	ne
 8015d98:	f44f 4080 	movne.w	r0, #16384	@ 0x4000
 8015d9c:	f44f 4090 	moveq.w	r0, #18432	@ 0x4800
 8015da0:	2210      	movs	r2, #16
 8015da2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015da6:	b004      	add	sp, #16
 8015da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dac:	f002 bf2e 	b.w	8018c0c <enet_init>
 8015db0:	1e63      	subs	r3, r4, #1
 8015db2:	4258      	negs	r0, r3
 8015db4:	4158      	adcs	r0, r3
 8015db6:	02c0      	lsls	r0, r0, #11
 8015db8:	e7f2      	b.n	8015da0 <emac_adjust_link(net::PhyStatus)+0x40>
 8015dba:	bf00      	nop
 8015dbc:	0801c260 	stmdaeq	r1, {r5, r6, r9, lr, pc}
 8015dc0:	0801c265 	stmdaeq	r1, {r0, r2, r5, r6, r9, lr, pc}
 8015dc4:	0801c258 	stmdaeq	r1, {r3, r4, r6, r9, lr, pc}
 8015dc8:	0801c25b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, lr, pc}
 8015dcc:	0801c26a 	stmdaeq	r1, {r1, r3, r5, r6, r9, lr, pc}

08015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>:
 8015dd0:	b508      	push	{r3, lr}
 8015dd2:	4613      	mov	r3, r2
 8015dd4:	b28a      	uxth	r2, r1
 8015dd6:	b281      	uxth	r1, r0
 8015dd8:	2000      	movs	r0, #0
 8015dda:	f002 feed 	bl	8018bb8 <enet_phy_write_read>
 8015dde:	1e43      	subs	r3, r0, #1
 8015de0:	4258      	negs	r0, r3
 8015de2:	4158      	adcs	r0, r3
 8015de4:	bd08      	pop	{r3, pc}

08015de6 <net::phy_write(unsigned long, unsigned long, unsigned short)>:
 8015de6:	b507      	push	{r0, r1, r2, lr}
 8015de8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015dec:	f10d 0306 	add.w	r3, sp, #6
 8015df0:	b28a      	uxth	r2, r1
 8015df2:	b281      	uxth	r1, r0
 8015df4:	2002      	movs	r0, #2
 8015df6:	f002 fedf 	bl	8018bb8 <enet_phy_write_read>
 8015dfa:	1e43      	subs	r3, r0, #1
 8015dfc:	4258      	negs	r0, r3
 8015dfe:	4158      	adcs	r0, r3
 8015e00:	b003      	add	sp, #12
 8015e02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015e08 <net::phy_config(unsigned long)>:
 8015e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e0a:	4e28      	ldr	r6, [pc, #160]	@ (8015eac <net::phy_config(unsigned long)+0xa4>)
 8015e0c:	4605      	mov	r5, r0
 8015e0e:	2001      	movs	r0, #1
 8015e10:	6934      	ldr	r4, [r6, #16]
 8015e12:	f003 f9c1 	bl	8019198 <rcu_clock_freq_get>
 8015e16:	4b26      	ldr	r3, [pc, #152]	@ (8015eb0 <net::phy_config(unsigned long)+0xa8>)
 8015e18:	4a26      	ldr	r2, [pc, #152]	@ (8015eb4 <net::phy_config(unsigned long)+0xac>)
 8015e1a:	4403      	add	r3, r0
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	f024 041c 	bic.w	r4, r4, #28
 8015e22:	d216      	bcs.n	8015e52 <net::phy_config(unsigned long)+0x4a>
 8015e24:	f044 0408 	orr.w	r4, r4, #8
 8015e28:	6134      	str	r4, [r6, #16]
 8015e2a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8015e2e:	2100      	movs	r1, #0
 8015e30:	4628      	mov	r0, r5
 8015e32:	f7ff ffd8 	bl	8015de6 <net::phy_write(unsigned long, unsigned long, unsigned short)>
 8015e36:	b330      	cbz	r0, 8015e86 <net::phy_config(unsigned long)+0x7e>
 8015e38:	4c1f      	ldr	r4, [pc, #124]	@ (8015eb8 <net::phy_config(unsigned long)+0xb0>)
 8015e3a:	6826      	ldr	r6, [r4, #0]
 8015e3c:	6823      	ldr	r3, [r4, #0]
 8015e3e:	1b9b      	subs	r3, r3, r6
 8015e40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8015e44:	d325      	bcc.n	8015e92 <net::phy_config(unsigned long)+0x8a>
 8015e46:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015e4a:	43c0      	mvns	r0, r0
 8015e4c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8015e50:	e01a      	b.n	8015e88 <net::phy_config(unsigned long)+0x80>
 8015e52:	4b1a      	ldr	r3, [pc, #104]	@ (8015ebc <net::phy_config(unsigned long)+0xb4>)
 8015e54:	4a1a      	ldr	r2, [pc, #104]	@ (8015ec0 <net::phy_config(unsigned long)+0xb8>)
 8015e56:	4403      	add	r3, r0
 8015e58:	4293      	cmp	r3, r2
 8015e5a:	d802      	bhi.n	8015e62 <net::phy_config(unsigned long)+0x5a>
 8015e5c:	f044 040c 	orr.w	r4, r4, #12
 8015e60:	e7e2      	b.n	8015e28 <net::phy_config(unsigned long)+0x20>
 8015e62:	4b18      	ldr	r3, [pc, #96]	@ (8015ec4 <net::phy_config(unsigned long)+0xbc>)
 8015e64:	4a18      	ldr	r2, [pc, #96]	@ (8015ec8 <net::phy_config(unsigned long)+0xc0>)
 8015e66:	4403      	add	r3, r0
 8015e68:	4293      	cmp	r3, r2
 8015e6a:	d3dd      	bcc.n	8015e28 <net::phy_config(unsigned long)+0x20>
 8015e6c:	4b17      	ldr	r3, [pc, #92]	@ (8015ecc <net::phy_config(unsigned long)+0xc4>)
 8015e6e:	4a18      	ldr	r2, [pc, #96]	@ (8015ed0 <net::phy_config(unsigned long)+0xc8>)
 8015e70:	4403      	add	r3, r0
 8015e72:	4293      	cmp	r3, r2
 8015e74:	d802      	bhi.n	8015e7c <net::phy_config(unsigned long)+0x74>
 8015e76:	f044 0404 	orr.w	r4, r4, #4
 8015e7a:	e7d5      	b.n	8015e28 <net::phy_config(unsigned long)+0x20>
 8015e7c:	4b15      	ldr	r3, [pc, #84]	@ (8015ed4 <net::phy_config(unsigned long)+0xcc>)
 8015e7e:	4a16      	ldr	r2, [pc, #88]	@ (8015ed8 <net::phy_config(unsigned long)+0xd0>)
 8015e80:	4403      	add	r3, r0
 8015e82:	4293      	cmp	r3, r2
 8015e84:	d902      	bls.n	8015e8c <net::phy_config(unsigned long)+0x84>
 8015e86:	2000      	movs	r0, #0
 8015e88:	b002      	add	sp, #8
 8015e8a:	bd70      	pop	{r4, r5, r6, pc}
 8015e8c:	f044 0410 	orr.w	r4, r4, #16
 8015e90:	e7ca      	b.n	8015e28 <net::phy_config(unsigned long)+0x20>
 8015e92:	f10d 0206 	add.w	r2, sp, #6
 8015e96:	2100      	movs	r1, #0
 8015e98:	4628      	mov	r0, r5
 8015e9a:	f7ff ff99 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	d0f1      	beq.n	8015e86 <net::phy_config(unsigned long)+0x7e>
 8015ea2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	dbc8      	blt.n	8015e3c <net::phy_config(unsigned long)+0x34>
 8015eaa:	e7ed      	b.n	8015e88 <net::phy_config(unsigned long)+0x80>
 8015eac:	40028000 	andmi	r8, r2, r0
 8015eb0:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8015eb4:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8015eb8:	2001a628 	andcs	sl, r1, r8, lsr #12
 8015ebc:	fde9f140 	stc2l	1, cr15, [r9, #256]!	@ 0x100
 8015ec0:	017d783f 	cmneq	sp, pc, lsr r8
 8015ec4:	fc6c7900 	stc2l	9, cr7, [ip], #-0	@ <UNPREDICTABLE>
 8015ec8:	02625a00 	rsbeq	r5, r2, #0, 20
 8015ecc:	fa0a1f00 	blx	829dad4 <_sidata+0x27e3d0>
 8015ed0:	02faf07f 	rscseq	pc, sl, #127	@ 0x7f
 8015ed4:	f70f2e80 			@ <UNDEFINED> instruction: 0xf70f2e80
 8015ed8:	055d4a80 	ldrbeq	r4, [sp, #-2688]	@ 0xfffff580

08015edc <enet_gpio_config()>:
 8015edc:	b510      	push	{r4, lr}
 8015ede:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8015ee2:	f003 f91d 	bl	8019120 <rcu_periph_clock_enable>
 8015ee6:	f640 4001 	movw	r0, #3073	@ 0xc01
 8015eea:	4c68      	ldr	r4, [pc, #416]	@ (801608c <enet_gpio_config()+0x1b0>)
 8015eec:	f003 f918 	bl	8019120 <rcu_periph_clock_enable>
 8015ef0:	f640 4002 	movw	r0, #3074	@ 0xc02
 8015ef4:	f003 f914 	bl	8019120 <rcu_periph_clock_enable>
 8015ef8:	f241 100e 	movw	r0, #4366	@ 0x110e
 8015efc:	f003 f910 	bl	8019120 <rcu_periph_clock_enable>
 8015f00:	4620      	mov	r0, r4
 8015f02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015f06:	2100      	movs	r1, #0
 8015f08:	f003 f8c6 	bl	8019098 <gpio_af_set>
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f12:	2200      	movs	r2, #0
 8015f14:	2102      	movs	r1, #2
 8015f16:	f003 f881 	bl	801901c <gpio_mode_set>
 8015f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015f1e:	2203      	movs	r2, #3
 8015f20:	4620      	mov	r0, r4
 8015f22:	2100      	movs	r1, #0
 8015f24:	f003 f89c 	bl	8019060 <gpio_output_options_set>
 8015f28:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8015f2c:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 8015f30:	f003 f916 	bl	8019160 <rcu_ckout0_config>
 8015f34:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8015f38:	f003 f9a2 	bl	8019280 <syscfg_enet_phy_interface_config>
 8015f3c:	2302      	movs	r3, #2
 8015f3e:	4619      	mov	r1, r3
 8015f40:	4620      	mov	r0, r4
 8015f42:	2200      	movs	r2, #0
 8015f44:	f003 f86a 	bl	801901c <gpio_mode_set>
 8015f48:	4620      	mov	r0, r4
 8015f4a:	2302      	movs	r3, #2
 8015f4c:	2203      	movs	r2, #3
 8015f4e:	2100      	movs	r1, #0
 8015f50:	f003 f886 	bl	8019060 <gpio_output_options_set>
 8015f54:	4620      	mov	r0, r4
 8015f56:	2304      	movs	r3, #4
 8015f58:	2200      	movs	r2, #0
 8015f5a:	2102      	movs	r1, #2
 8015f5c:	f003 f85e 	bl	801901c <gpio_mode_set>
 8015f60:	4620      	mov	r0, r4
 8015f62:	2304      	movs	r3, #4
 8015f64:	2203      	movs	r2, #3
 8015f66:	2100      	movs	r1, #0
 8015f68:	f003 f87a 	bl	8019060 <gpio_output_options_set>
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	2380      	movs	r3, #128	@ 0x80
 8015f70:	2200      	movs	r2, #0
 8015f72:	2102      	movs	r1, #2
 8015f74:	f003 f852 	bl	801901c <gpio_mode_set>
 8015f78:	2380      	movs	r3, #128	@ 0x80
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	2203      	movs	r2, #3
 8015f7e:	2100      	movs	r1, #0
 8015f80:	f003 f86e 	bl	8019060 <gpio_output_options_set>
 8015f84:	4620      	mov	r0, r4
 8015f86:	2202      	movs	r2, #2
 8015f88:	210b      	movs	r1, #11
 8015f8a:	f003 f885 	bl	8019098 <gpio_af_set>
 8015f8e:	4620      	mov	r0, r4
 8015f90:	2204      	movs	r2, #4
 8015f92:	210b      	movs	r1, #11
 8015f94:	f003 f880 	bl	8019098 <gpio_af_set>
 8015f98:	4620      	mov	r0, r4
 8015f9a:	2280      	movs	r2, #128	@ 0x80
 8015f9c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8015fa0:	210b      	movs	r1, #11
 8015fa2:	f003 f879 	bl	8019098 <gpio_af_set>
 8015fa6:	4620      	mov	r0, r4
 8015fa8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015fac:	2200      	movs	r2, #0
 8015fae:	2102      	movs	r1, #2
 8015fb0:	f003 f834 	bl	801901c <gpio_mode_set>
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015fba:	2203      	movs	r2, #3
 8015fbc:	2100      	movs	r1, #0
 8015fbe:	f003 f84f 	bl	8019060 <gpio_output_options_set>
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015fc8:	2200      	movs	r2, #0
 8015fca:	2102      	movs	r1, #2
 8015fcc:	f003 f826 	bl	801901c <gpio_mode_set>
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8015fd6:	2203      	movs	r2, #3
 8015fd8:	2100      	movs	r1, #0
 8015fda:	f003 f841 	bl	8019060 <gpio_output_options_set>
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	2102      	movs	r1, #2
 8015fe8:	f003 f818 	bl	801901c <gpio_mode_set>
 8015fec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	2203      	movs	r2, #3
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	f003 f833 	bl	8019060 <gpio_output_options_set>
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016000:	210b      	movs	r1, #11
 8016002:	f003 f849 	bl	8019098 <gpio_af_set>
 8016006:	4620      	mov	r0, r4
 8016008:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801600c:	210b      	movs	r1, #11
 801600e:	f003 f843 	bl	8019098 <gpio_af_set>
 8016012:	4620      	mov	r0, r4
 8016014:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8016018:	210b      	movs	r1, #11
 801601a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 801601e:	f003 f83b 	bl	8019098 <gpio_af_set>
 8016022:	2302      	movs	r3, #2
 8016024:	4619      	mov	r1, r3
 8016026:	4620      	mov	r0, r4
 8016028:	2200      	movs	r2, #0
 801602a:	f002 fff7 	bl	801901c <gpio_mode_set>
 801602e:	4620      	mov	r0, r4
 8016030:	2302      	movs	r3, #2
 8016032:	2203      	movs	r2, #3
 8016034:	2100      	movs	r1, #0
 8016036:	f003 f813 	bl	8019060 <gpio_output_options_set>
 801603a:	4620      	mov	r0, r4
 801603c:	2310      	movs	r3, #16
 801603e:	2200      	movs	r2, #0
 8016040:	2102      	movs	r1, #2
 8016042:	f002 ffeb 	bl	801901c <gpio_mode_set>
 8016046:	4620      	mov	r0, r4
 8016048:	2310      	movs	r3, #16
 801604a:	2203      	movs	r2, #3
 801604c:	2100      	movs	r1, #0
 801604e:	f003 f807 	bl	8019060 <gpio_output_options_set>
 8016052:	4620      	mov	r0, r4
 8016054:	2320      	movs	r3, #32
 8016056:	2200      	movs	r2, #0
 8016058:	2102      	movs	r1, #2
 801605a:	f002 ffdf 	bl	801901c <gpio_mode_set>
 801605e:	2320      	movs	r3, #32
 8016060:	4620      	mov	r0, r4
 8016062:	2203      	movs	r2, #3
 8016064:	2100      	movs	r1, #0
 8016066:	f002 fffb 	bl	8019060 <gpio_output_options_set>
 801606a:	4620      	mov	r0, r4
 801606c:	2202      	movs	r2, #2
 801606e:	210b      	movs	r1, #11
 8016070:	f003 f812 	bl	8019098 <gpio_af_set>
 8016074:	4620      	mov	r0, r4
 8016076:	2210      	movs	r2, #16
 8016078:	210b      	movs	r1, #11
 801607a:	f003 f80d 	bl	8019098 <gpio_af_set>
 801607e:	4620      	mov	r0, r4
 8016080:	2220      	movs	r2, #32
 8016082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016086:	210b      	movs	r1, #11
 8016088:	f003 b806 	b.w	8019098 <gpio_af_set>
 801608c:	40020000 	andmi	r0, r2, r0

08016090 <emac_eth_recv(unsigned char**)>:
 8016090:	b538      	push	{r3, r4, r5, lr}
 8016092:	4d07      	ldr	r5, [pc, #28]	@ (80160b0 <emac_eth_recv(unsigned char**)+0x20>)
 8016094:	4604      	mov	r4, r0
 8016096:	2102      	movs	r1, #2
 8016098:	6828      	ldr	r0, [r5, #0]
 801609a:	f002 ff39 	bl	8018f10 <enet_desc_information_get>
 801609e:	b118      	cbz	r0, 80160a8 <emac_eth_recv(unsigned char**)+0x18>
 80160a0:	682b      	ldr	r3, [r5, #0]
 80160a2:	689b      	ldr	r3, [r3, #8]
 80160a4:	6023      	str	r3, [r4, #0]
 80160a6:	bd38      	pop	{r3, r4, r5, pc}
 80160a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80160ac:	bd38      	pop	{r3, r4, r5, pc}
 80160ae:	bf00      	nop
 80160b0:	2000cd88 	andcs	ip, r0, r8, lsl #27

080160b4 <emac_free_pkt()>:
 80160b4:	490d      	ldr	r1, [pc, #52]	@ (80160ec <emac_free_pkt()+0x38>)
 80160b6:	e001      	b.n	80160bc <emac_free_pkt()+0x8>
 80160b8:	f3bf 8f5f 	dmb	sy
 80160bc:	680b      	ldr	r3, [r1, #0]
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	2a00      	cmp	r2, #0
 80160c2:	dbf9      	blt.n	80160b8 <emac_free_pkt()+0x4>
 80160c4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80160c8:	4a09      	ldr	r2, [pc, #36]	@ (80160f0 <emac_free_pkt()+0x3c>)
 80160ca:	6018      	str	r0, [r3, #0]
 80160cc:	6950      	ldr	r0, [r2, #20]
 80160ce:	0600      	lsls	r0, r0, #24
 80160d0:	d509      	bpl.n	80160e6 <emac_free_pkt()+0x32>
 80160d2:	b410      	push	{r4}
 80160d4:	2000      	movs	r0, #0
 80160d6:	2480      	movs	r4, #128	@ 0x80
 80160d8:	6154      	str	r4, [r2, #20]
 80160da:	6090      	str	r0, [r2, #8]
 80160dc:	68db      	ldr	r3, [r3, #12]
 80160de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160e2:	600b      	str	r3, [r1, #0]
 80160e4:	4770      	bx	lr
 80160e6:	68db      	ldr	r3, [r3, #12]
 80160e8:	600b      	str	r3, [r1, #0]
 80160ea:	4770      	bx	lr
 80160ec:	2000cd88 	andcs	ip, r0, r8, lsl #27
 80160f0:	40029000 	andmi	r9, r2, r0

080160f4 <emac_eth_send(void*, unsigned long)>:
 80160f4:	b570      	push	{r4, r5, r6, lr}
 80160f6:	4c20      	ldr	r4, [pc, #128]	@ (8016178 <emac_eth_send(void*, unsigned long)+0x84>)
 80160f8:	e001      	b.n	80160fe <emac_eth_send(void*, unsigned long)+0xa>
 80160fa:	f3bf 8f5f 	dmb	sy
 80160fe:	6823      	ldr	r3, [r4, #0]
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	2a00      	cmp	r2, #0
 8016104:	dbf9      	blt.n	80160fa <emac_eth_send(void*, unsigned long)+0x6>
 8016106:	689b      	ldr	r3, [r3, #8]
 8016108:	ea43 0200 	orr.w	r2, r3, r0
 801610c:	0792      	lsls	r2, r2, #30
 801610e:	d01e      	beq.n	801614e <emac_eth_send(void*, unsigned long)+0x5a>
 8016110:	460a      	mov	r2, r1
 8016112:	eb00 0c02 	add.w	ip, r0, r2
 8016116:	b12a      	cbz	r2, 8016124 <emac_eth_send(void*, unsigned long)+0x30>
 8016118:	f810 2b01 	ldrb.w	r2, [r0], #1
 801611c:	f803 2b01 	strb.w	r2, [r3], #1
 8016120:	4584      	cmp	ip, r0
 8016122:	d1f9      	bne.n	8016118 <emac_eth_send(void*, unsigned long)+0x24>
 8016124:	6822      	ldr	r2, [r4, #0]
 8016126:	4815      	ldr	r0, [pc, #84]	@ (801617c <emac_eth_send(void*, unsigned long)+0x88>)
 8016128:	6813      	ldr	r3, [r2, #0]
 801612a:	6051      	str	r1, [r2, #4]
 801612c:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 8016130:	6013      	str	r3, [r2, #0]
 8016132:	6943      	ldr	r3, [r0, #20]
 8016134:	6941      	ldr	r1, [r0, #20]
 8016136:	f003 0304 	and.w	r3, r3, #4
 801613a:	f001 0120 	and.w	r1, r1, #32
 801613e:	430b      	orrs	r3, r1
 8016140:	d002      	beq.n	8016148 <emac_eth_send(void*, unsigned long)+0x54>
 8016142:	2100      	movs	r1, #0
 8016144:	6143      	str	r3, [r0, #20]
 8016146:	6041      	str	r1, [r0, #4]
 8016148:	68d3      	ldr	r3, [r2, #12]
 801614a:	6023      	str	r3, [r4, #0]
 801614c:	bd70      	pop	{r4, r5, r6, pc}
 801614e:	2903      	cmp	r1, #3
 8016150:	d9de      	bls.n	8016110 <emac_eth_send(void*, unsigned long)+0x1c>
 8016152:	1f0e      	subs	r6, r1, #4
 8016154:	f026 0603 	bic.w	r6, r6, #3
 8016158:	3604      	adds	r6, #4
 801615a:	eb00 0c06 	add.w	ip, r0, r6
 801615e:	eba3 0e00 	sub.w	lr, r3, r0
 8016162:	eb00 020e 	add.w	r2, r0, lr
 8016166:	f850 5b04 	ldr.w	r5, [r0], #4
 801616a:	6015      	str	r5, [r2, #0]
 801616c:	4560      	cmp	r0, ip
 801616e:	d1f8      	bne.n	8016162 <emac_eth_send(void*, unsigned long)+0x6e>
 8016170:	4433      	add	r3, r6
 8016172:	f001 0203 	and.w	r2, r1, #3
 8016176:	e7cc      	b.n	8016112 <emac_eth_send(void*, unsigned long)+0x1e>
 8016178:	2000cd8c 	andcs	ip, r0, ip, lsl #27
 801617c:	40029000 	andmi	r9, r2, r0

08016180 <net::acd_start(net::acd::Acd*, net::ip_addr)>:
 8016180:	2301      	movs	r3, #1
 8016182:	b510      	push	{r4, lr}
 8016184:	7103      	strb	r3, [r0, #4]
 8016186:	6001      	str	r1, [r0, #0]
 8016188:	4604      	mov	r4, r0
 801618a:	f004 fdab 	bl	801ace4 <random>
 801618e:	230a      	movs	r3, #10
 8016190:	fbb0 f2f3 	udiv	r2, r0, r3
 8016194:	fb02 0013 	mls	r0, r2, r3, r0
 8016198:	4b11      	ldr	r3, [pc, #68]	@ (80161e0 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x60>)
 801619a:	81a0      	strh	r0, [r4, #12]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80161a2:	2807      	cmp	r0, #7
 80161a4:	d907      	bls.n	80161b6 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x36>
 80161a6:	480f      	ldr	r0, [pc, #60]	@ (80161e4 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x64>)
 80161a8:	f002 fa36 	bl	8018618 <console_error>
 80161ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80161b0:	4b0d      	ldr	r3, [pc, #52]	@ (80161e8 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x68>)
 80161b2:	601a      	str	r2, [r3, #0]
 80161b4:	bd10      	pop	{r4, pc}
 80161b6:	4a0d      	ldr	r2, [pc, #52]	@ (80161ec <net::acd_start(net::acd::Acd*, net::ip_addr)+0x6c>)
 80161b8:	6811      	ldr	r1, [r2, #0]
 80161ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80161be:	1c54      	adds	r4, r2, #1
 80161c0:	f8c3 40a4 	str.w	r4, [r3, #164]	@ 0xa4
 80161c4:	1c44      	adds	r4, r0, #1
 80161c6:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
 80161ca:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80161ce:	3164      	adds	r1, #100	@ 0x64
 80161d0:	6219      	str	r1, [r3, #32]
 80161d2:	2164      	movs	r1, #100	@ 0x64
 80161d4:	e9c3 1209 	strd	r1, r2, [r3, #36]	@ 0x24
 80161d8:	4905      	ldr	r1, [pc, #20]	@ (80161f0 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x70>)
 80161da:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80161dc:	e7e8      	b.n	80161b0 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x30>
 80161de:	bf00      	nop
 80161e0:	2000cd38 	andcs	ip, r0, r8, lsr sp
 80161e4:	0801c1ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr, pc}
 80161e8:	2000cbb4 			@ <UNDEFINED> instruction: 0x2000cbb4
 80161ec:	2001a628 	andcs	sl, r1, r8, lsr #12
 80161f0:	0801624d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sp, lr}

080161f4 <net::acd_stop(net::acd::Acd*)>:
 80161f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161f6:	4e13      	ldr	r6, [pc, #76]	@ (8016244 <net::acd_stop(net::acd::Acd*)+0x50>)
 80161f8:	6832      	ldr	r2, [r6, #0]
 80161fa:	2300      	movs	r3, #0
 80161fc:	429a      	cmp	r2, r3
 80161fe:	7103      	strb	r3, [r0, #4]
 8016200:	db1a      	blt.n	8016238 <net::acd_stop(net::acd::Acd*)+0x44>
 8016202:	4911      	ldr	r1, [pc, #68]	@ (8016248 <net::acd_stop(net::acd::Acd*)+0x54>)
 8016204:	680d      	ldr	r5, [r1, #0]
 8016206:	f8d5 40a0 	ldr.w	r4, [r5, #160]	@ 0xa0
 801620a:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 801620e:	42a3      	cmp	r3, r4
 8016210:	d012      	beq.n	8016238 <net::acd_stop(net::acd::Acd*)+0x44>
 8016212:	0118      	lsls	r0, r3, #4
 8016214:	580f      	ldr	r7, [r1, r0]
 8016216:	42ba      	cmp	r2, r7
 8016218:	d112      	bne.n	8016240 <net::acd_stop(net::acd::Acd*)+0x4c>
 801621a:	3c01      	subs	r4, #1
 801621c:	1ae2      	subs	r2, r4, r3
 801621e:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8016222:	0112      	lsls	r2, r2, #4
 8016224:	3020      	adds	r0, #32
 8016226:	42a3      	cmp	r3, r4
 8016228:	bf88      	it	hi
 801622a:	2200      	movhi	r2, #0
 801622c:	4429      	add	r1, r5
 801622e:	4428      	add	r0, r5
 8016230:	f004 f9ff 	bl	801a632 <memmove>
 8016234:	f8c5 40a0 	str.w	r4, [r5, #160]	@ 0xa0
 8016238:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801623c:	6033      	str	r3, [r6, #0]
 801623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016240:	3301      	adds	r3, #1
 8016242:	e7e4      	b.n	801620e <net::acd_stop(net::acd::Acd*)+0x1a>
 8016244:	2000cbb4 			@ <UNDEFINED> instruction: 0x2000cbb4
 8016248:	2000cd38 	andcs	ip, r0, r8, lsr sp

0801624c <net::acd_timer()>:
 801624c:	b510      	push	{r4, lr}
 801624e:	4b2b      	ldr	r3, [pc, #172]	@ (80162fc <net::acd_timer()+0xb0>)
 8016250:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016252:	79a3      	ldrb	r3, [r4, #6]
 8016254:	b10b      	cbz	r3, 801625a <net::acd_timer()+0xe>
 8016256:	3b01      	subs	r3, #1
 8016258:	71a3      	strb	r3, [r4, #6]
 801625a:	89a3      	ldrh	r3, [r4, #12]
 801625c:	b10b      	cbz	r3, 8016262 <net::acd_timer()+0x16>
 801625e:	3b01      	subs	r3, #1
 8016260:	81a3      	strh	r3, [r4, #12]
 8016262:	7923      	ldrb	r3, [r4, #4]
 8016264:	2b04      	cmp	r3, #4
 8016266:	d805      	bhi.n	8016274 <net::acd_timer()+0x28>
 8016268:	2b02      	cmp	r3, #2
 801626a:	d82b      	bhi.n	80162c4 <net::acd_timer()+0x78>
 801626c:	3b01      	subs	r3, #1
 801626e:	2b01      	cmp	r3, #1
 8016270:	d90b      	bls.n	801628a <net::acd_timer()+0x3e>
 8016272:	bd10      	pop	{r4, pc}
 8016274:	2b07      	cmp	r3, #7
 8016276:	d1fc      	bne.n	8016272 <net::acd_timer()+0x26>
 8016278:	89a3      	ldrh	r3, [r4, #12]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d1f9      	bne.n	8016272 <net::acd_timer()+0x26>
 801627e:	4620      	mov	r0, r4
 8016280:	f7ff ffb8 	bl	80161f4 <net::acd_stop(net::acd::Acd*)>
 8016284:	68a3      	ldr	r3, [r4, #8]
 8016286:	2001      	movs	r0, #1
 8016288:	e034      	b.n	80162f4 <net::acd_timer()+0xa8>
 801628a:	89a3      	ldrh	r3, [r4, #12]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d1f0      	bne.n	8016272 <net::acd_timer()+0x26>
 8016290:	2302      	movs	r3, #2
 8016292:	7123      	strb	r3, [r4, #4]
 8016294:	6820      	ldr	r0, [r4, #0]
 8016296:	f000 f9df 	bl	8016658 <net::arp_acd_probe(net::ip_addr)>
 801629a:	7963      	ldrb	r3, [r4, #5]
 801629c:	3301      	adds	r3, #1
 801629e:	b2db      	uxtb	r3, r3
 80162a0:	2b02      	cmp	r3, #2
 80162a2:	7163      	strb	r3, [r4, #5]
 80162a4:	d904      	bls.n	80162b0 <net::acd_timer()+0x64>
 80162a6:	2303      	movs	r3, #3
 80162a8:	80a3      	strh	r3, [r4, #4]
 80162aa:	2314      	movs	r3, #20
 80162ac:	81a3      	strh	r3, [r4, #12]
 80162ae:	e7e0      	b.n	8016272 <net::acd_timer()+0x26>
 80162b0:	f004 fd18 	bl	801ace4 <random>
 80162b4:	230a      	movs	r3, #10
 80162b6:	fbb0 f2f3 	udiv	r2, r0, r3
 80162ba:	fb02 0013 	mls	r0, r2, r3, r0
 80162be:	4418      	add	r0, r3
 80162c0:	81a0      	strh	r0, [r4, #12]
 80162c2:	e7d6      	b.n	8016272 <net::acd_timer()+0x26>
 80162c4:	89a3      	ldrh	r3, [r4, #12]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d1d3      	bne.n	8016272 <net::acd_timer()+0x26>
 80162ca:	7963      	ldrb	r3, [r4, #5]
 80162cc:	b913      	cbnz	r3, 80162d4 <net::acd_timer()+0x88>
 80162ce:	2204      	movs	r2, #4
 80162d0:	7122      	strb	r2, [r4, #4]
 80162d2:	71e3      	strb	r3, [r4, #7]
 80162d4:	6820      	ldr	r0, [r4, #0]
 80162d6:	f000 f9d3 	bl	8016680 <net::arp_acd_send_announcement(net::ip_addr)>
 80162da:	2314      	movs	r3, #20
 80162dc:	81a3      	strh	r3, [r4, #12]
 80162de:	7963      	ldrb	r3, [r4, #5]
 80162e0:	3301      	adds	r3, #1
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	2b01      	cmp	r3, #1
 80162e6:	7163      	strb	r3, [r4, #5]
 80162e8:	d9c3      	bls.n	8016272 <net::acd_timer()+0x26>
 80162ea:	2305      	movs	r3, #5
 80162ec:	80a3      	strh	r3, [r4, #4]
 80162ee:	2000      	movs	r0, #0
 80162f0:	68a3      	ldr	r3, [r4, #8]
 80162f2:	81a0      	strh	r0, [r4, #12]
 80162f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162f8:	4718      	bx	r3
 80162fa:	bf00      	nop
 80162fc:	2000cb88 	andcs	ip, r0, r8, lsl #23

08016300 <net::acd_restart(net::acd::Acd*)>:
 8016300:	b510      	push	{r4, lr}
 8016302:	79c3      	ldrb	r3, [r0, #7]
 8016304:	4604      	mov	r4, r0
 8016306:	3301      	adds	r3, #1
 8016308:	71c3      	strb	r3, [r0, #7]
 801630a:	6883      	ldr	r3, [r0, #8]
 801630c:	2002      	movs	r0, #2
 801630e:	4798      	blx	r3
 8016310:	79e3      	ldrb	r3, [r4, #7]
 8016312:	2b09      	cmp	r3, #9
 8016314:	d905      	bls.n	8016322 <net::acd_restart(net::acd::Acd*)+0x22>
 8016316:	2307      	movs	r3, #7
 8016318:	7123      	strb	r3, [r4, #4]
 801631a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 801631e:	81a3      	strh	r3, [r4, #12]
 8016320:	bd10      	pop	{r4, pc}
 8016322:	4620      	mov	r0, r4
 8016324:	f7ff ff66 	bl	80161f4 <net::acd_stop(net::acd::Acd*)>
 8016328:	68a3      	ldr	r3, [r4, #8]
 801632a:	2001      	movs	r0, #1
 801632c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016330:	4718      	bx	r3
	...

08016334 <net::acd_network_changed_link_down()>:
 8016334:	4b01      	ldr	r3, [pc, #4]	@ (801633c <net::acd_network_changed_link_down()+0x8>)
 8016336:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8016338:	f7ff bf5c 	b.w	80161f4 <net::acd_stop(net::acd::Acd*)>
 801633c:	2000cb88 	andcs	ip, r0, r8, lsl #23

08016340 <net::acd_arp_reply(t_arp*)>:
 8016340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016344:	4e28      	ldr	r6, [pc, #160]	@ (80163e8 <net::acd_arp_reply(t_arp*)+0xa8>)
 8016346:	6a75      	ldr	r5, [r6, #36]	@ 0x24
 8016348:	792f      	ldrb	r7, [r5, #4]
 801634a:	2f03      	cmp	r7, #3
 801634c:	4604      	mov	r4, r0
 801634e:	d802      	bhi.n	8016356 <net::acd_arp_reply(t_arp*)+0x16>
 8016350:	b9bf      	cbnz	r7, 8016382 <net::acd_arp_reply(t_arp*)+0x42>
 8016352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016356:	1f3b      	subs	r3, r7, #4
 8016358:	2b02      	cmp	r3, #2
 801635a:	d8fa      	bhi.n	8016352 <net::acd_arp_reply(t_arp*)+0x12>
 801635c:	301c      	adds	r0, #28
 801635e:	f7fe fb8b 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8016362:	682b      	ldr	r3, [r5, #0]
 8016364:	4298      	cmp	r0, r3
 8016366:	d1f4      	bne.n	8016352 <net::acd_arp_reply(t_arp*)+0x12>
 8016368:	f104 0315 	add.w	r3, r4, #21
 801636c:	3613      	adds	r6, #19
 801636e:	341b      	adds	r4, #27
 8016370:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8016374:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8016378:	4291      	cmp	r1, r2
 801637a:	d121      	bne.n	80163c0 <net::acd_arp_reply(t_arp*)+0x80>
 801637c:	42a3      	cmp	r3, r4
 801637e:	d1f7      	bne.n	8016370 <net::acd_arp_reply(t_arp*)+0x30>
 8016380:	e7e7      	b.n	8016352 <net::acd_arp_reply(t_arp*)+0x12>
 8016382:	301c      	adds	r0, #28
 8016384:	f7fe fb78 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 8016388:	682f      	ldr	r7, [r5, #0]
 801638a:	42b8      	cmp	r0, r7
 801638c:	d013      	beq.n	80163b6 <net::acd_arp_reply(t_arp*)+0x76>
 801638e:	2800      	cmp	r0, #0
 8016390:	d0df      	beq.n	8016352 <net::acd_arp_reply(t_arp*)+0x12>
 8016392:	f104 0026 	add.w	r0, r4, #38	@ 0x26
 8016396:	f7fe fb6f 	bl	8014a78 <net::memcpy_ip(unsigned char const*)>
 801639a:	4287      	cmp	r7, r0
 801639c:	d1d9      	bne.n	8016352 <net::acd_arp_reply(t_arp*)+0x12>
 801639e:	f104 0315 	add.w	r3, r4, #21
 80163a2:	3613      	adds	r6, #19
 80163a4:	341b      	adds	r4, #27
 80163a6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80163aa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80163ae:	4291      	cmp	r1, r2
 80163b0:	d1cf      	bne.n	8016352 <net::acd_arp_reply(t_arp*)+0x12>
 80163b2:	42a3      	cmp	r3, r4
 80163b4:	d1f7      	bne.n	80163a6 <net::acd_arp_reply(t_arp*)+0x66>
 80163b6:	4628      	mov	r0, r5
 80163b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163bc:	f7ff bfa0 	b.w	8016300 <net::acd_restart(net::acd::Acd*)>
 80163c0:	2f06      	cmp	r7, #6
 80163c2:	d107      	bne.n	80163d4 <net::acd_arp_reply(t_arp*)+0x94>
 80163c4:	4628      	mov	r0, r5
 80163c6:	f7ff ff15 	bl	80161f4 <net::acd_stop(net::acd::Acd*)>
 80163ca:	68ab      	ldr	r3, [r5, #8]
 80163cc:	2002      	movs	r0, #2
 80163ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163d2:	4718      	bx	r3
 80163d4:	79ab      	ldrb	r3, [r5, #6]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d1ed      	bne.n	80163b6 <net::acd_arp_reply(t_arp*)+0x76>
 80163da:	6828      	ldr	r0, [r5, #0]
 80163dc:	f000 f950 	bl	8016680 <net::arp_acd_send_announcement(net::ip_addr)>
 80163e0:	2364      	movs	r3, #100	@ 0x64
 80163e2:	71ab      	strb	r3, [r5, #6]
 80163e4:	e7b5      	b.n	8016352 <net::acd_arp_reply(t_arp*)+0x12>
 80163e6:	bf00      	nop
 80163e8:	2000cb88 	andcs	ip, r0, r8, lsl #23

080163ec <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>:
 80163ec:	4b01      	ldr	r3, [pc, #4]	@ (80163f4 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))+0x8>)
 80163ee:	6081      	str	r1, [r0, #8]
 80163f0:	6258      	str	r0, [r3, #36]	@ 0x24
 80163f2:	4770      	bx	lr
 80163f4:	2000cb88 	andcs	ip, r0, r8, lsl #23

080163f8 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)>:
 80163f8:	b320      	cbz	r0, 8016444 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x4c>
 80163fa:	b319      	cbz	r1, 8016444 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x4c>
 80163fc:	4b12      	ldr	r3, [pc, #72]	@ (8016448 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x50>)
 80163fe:	b510      	push	{r4, lr}
 8016400:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016402:	6823      	ldr	r3, [r4, #0]
 8016404:	4283      	cmp	r3, r0
 8016406:	d119      	bne.n	801643c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8016408:	b29b      	uxth	r3, r3
 801640a:	f64a 12fe 	movw	r2, #43518	@ 0xa9fe
 801640e:	4293      	cmp	r3, r2
 8016410:	d114      	bne.n	801643c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8016412:	b289      	uxth	r1, r1
 8016414:	4299      	cmp	r1, r3
 8016416:	d011      	beq.n	801643c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8016418:	7923      	ldrb	r3, [r4, #4]
 801641a:	2b05      	cmp	r3, #5
 801641c:	d80c      	bhi.n	8016438 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x40>
 801641e:	2b03      	cmp	r3, #3
 8016420:	d80d      	bhi.n	801643e <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x46>
 8016422:	3b01      	subs	r3, #1
 8016424:	2b02      	cmp	r3, #2
 8016426:	d809      	bhi.n	801643c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8016428:	4620      	mov	r0, r4
 801642a:	f7ff fee3 	bl	80161f4 <net::acd_stop(net::acd::Acd*)>
 801642e:	68a3      	ldr	r3, [r4, #8]
 8016430:	2002      	movs	r0, #2
 8016432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016436:	4718      	bx	r3
 8016438:	2b07      	cmp	r3, #7
 801643a:	d0f5      	beq.n	8016428 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x30>
 801643c:	bd10      	pop	{r4, pc}
 801643e:	2306      	movs	r3, #6
 8016440:	7123      	strb	r3, [r4, #4]
 8016442:	e7fb      	b.n	801643c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8016444:	4770      	bx	lr
 8016446:	bf00      	nop
 8016448:	2000cb88 	andcs	ip, r0, r8, lsl #23

0801644c <net::arp_find_record(unsigned long, net::arp::Flags)>:
 801644c:	4b17      	ldr	r3, [pc, #92]	@ (80164ac <net::arp_find_record(unsigned long, net::arp::Flags)+0x60>)
 801644e:	b570      	push	{r4, r5, r6, lr}
 8016450:	f04f 0e00 	mov.w	lr, #0
 8016454:	4604      	mov	r4, r0
 8016456:	f503 7cc0 	add.w	ip, r3, #384	@ 0x180
 801645a:	4676      	mov	r6, lr
 801645c:	4675      	mov	r5, lr
 801645e:	4670      	mov	r0, lr
 8016460:	e004      	b.n	801646c <net::arp_find_record(unsigned long, net::arp::Flags)+0x20>
 8016462:	2a03      	cmp	r2, #3
 8016464:	d019      	beq.n	801649a <net::arp_find_record(unsigned long, net::arp::Flags)+0x4e>
 8016466:	3318      	adds	r3, #24
 8016468:	4563      	cmp	r3, ip
 801646a:	d012      	beq.n	8016492 <net::arp_find_record(unsigned long, net::arp::Flags)+0x46>
 801646c:	681a      	ldr	r2, [r3, #0]
 801646e:	42a2      	cmp	r2, r4
 8016470:	d01a      	beq.n	80164a8 <net::arp_find_record(unsigned long, net::arp::Flags)+0x5c>
 8016472:	2901      	cmp	r1, #1
 8016474:	d0f7      	beq.n	8016466 <net::arp_find_record(unsigned long, net::arp::Flags)+0x1a>
 8016476:	695a      	ldr	r2, [r3, #20]
 8016478:	b1aa      	cbz	r2, 80164a6 <net::arp_find_record(unsigned long, net::arp::Flags)+0x5a>
 801647a:	2a02      	cmp	r2, #2
 801647c:	d1f1      	bne.n	8016462 <net::arp_find_record(unsigned long, net::arp::Flags)+0x16>
 801647e:	8a5a      	ldrh	r2, [r3, #18]
 8016480:	4572      	cmp	r2, lr
 8016482:	bf88      	it	hi
 8016484:	461d      	movhi	r5, r3
 8016486:	f103 0318 	add.w	r3, r3, #24
 801648a:	bf88      	it	hi
 801648c:	4696      	movhi	lr, r2
 801648e:	4563      	cmp	r3, ip
 8016490:	d1ec      	bne.n	801646c <net::arp_find_record(unsigned long, net::arp::Flags)+0x20>
 8016492:	2800      	cmp	r0, #0
 8016494:	bf08      	it	eq
 8016496:	4628      	moveq	r0, r5
 8016498:	bd70      	pop	{r4, r5, r6, pc}
 801649a:	8a5a      	ldrh	r2, [r3, #18]
 801649c:	42b2      	cmp	r2, r6
 801649e:	bf84      	itt	hi
 80164a0:	4616      	movhi	r6, r2
 80164a2:	4618      	movhi	r0, r3
 80164a4:	e7df      	b.n	8016466 <net::arp_find_record(unsigned long, net::arp::Flags)+0x1a>
 80164a6:	601c      	str	r4, [r3, #0]
 80164a8:	4618      	mov	r0, r3
 80164aa:	bd70      	pop	{r4, r5, r6, pc}
 80164ac:	1000cb10 	andne	ip, r0, r0, lsl fp

080164b0 <net::arp_timer()>:
 80164b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b4:	4c28      	ldr	r4, [pc, #160]	@ (8016558 <net::arp_timer()+0xa8>)
 80164b6:	2703      	movs	r7, #3
 80164b8:	f504 76c0 	add.w	r6, r4, #384	@ 0x180
 80164bc:	f04f 0800 	mov.w	r8, #0
 80164c0:	e006      	b.n	80164d0 <net::arp_timer()+0x20>
 80164c2:	2a01      	cmp	r2, #1
 80164c4:	d101      	bne.n	80164ca <net::arp_timer()+0x1a>
 80164c6:	2b02      	cmp	r3, #2
 80164c8:	d839      	bhi.n	801653e <net::arp_timer()+0x8e>
 80164ca:	3418      	adds	r4, #24
 80164cc:	42a6      	cmp	r6, r4
 80164ce:	d02c      	beq.n	801652a <net::arp_timer()+0x7a>
 80164d0:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80164d4:	2a00      	cmp	r2, #0
 80164d6:	d0f8      	beq.n	80164ca <net::arp_timer()+0x1a>
 80164d8:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 80164dc:	3301      	adds	r3, #1
 80164de:	b29b      	uxth	r3, r3
 80164e0:	2a02      	cmp	r2, #2
 80164e2:	f824 3c06 	strh.w	r3, [r4, #-6]
 80164e6:	d022      	beq.n	801652e <net::arp_timer()+0x7e>
 80164e8:	2a03      	cmp	r2, #3
 80164ea:	d1ea      	bne.n	80164c2 <net::arp_timer()+0x12>
 80164ec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80164f0:	d9eb      	bls.n	80164ca <net::arp_timer()+0x1a>
 80164f2:	4d1a      	ldr	r5, [pc, #104]	@ (801655c <net::arp_timer()+0xac>)
 80164f4:	2301      	movs	r3, #1
 80164f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80164fa:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80164fe:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
 8016502:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8016506:	602b      	str	r3, [r5, #0]
 8016508:	4628      	mov	r0, r5
 801650a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 801650e:	80ab      	strh	r3, [r5, #4]
 8016510:	213c      	movs	r1, #60	@ 0x3c
 8016512:	f7ff fdef 	bl	80160f4 <emac_eth_send(void*, unsigned long)>
 8016516:	4628      	mov	r0, r5
 8016518:	1dab      	adds	r3, r5, #6
 801651a:	22ff      	movs	r2, #255	@ 0xff
 801651c:	f800 2b01 	strb.w	r2, [r0], #1
 8016520:	4298      	cmp	r0, r3
 8016522:	d1fb      	bne.n	801651c <net::arp_timer()+0x6c>
 8016524:	3418      	adds	r4, #24
 8016526:	42a6      	cmp	r6, r4
 8016528:	d1d2      	bne.n	80164d0 <net::arp_timer()+0x20>
 801652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801652e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8016532:	d9ca      	bls.n	80164ca <net::arp_timer()+0x1a>
 8016534:	f844 7c04 	str.w	r7, [r4, #-4]
 8016538:	f824 8c06 	strh.w	r8, [r4, #-6]
 801653c:	e7c5      	b.n	80164ca <net::arp_timer()+0x1a>
 801653e:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8016542:	b108      	cbz	r0, 8016548 <net::arp_timer()+0x98>
 8016544:	f004 fdc2 	bl	801b0cc <operator delete[](void*)>
 8016548:	f1a4 0318 	sub.w	r3, r4, #24
 801654c:	2200      	movs	r2, #0
 801654e:	f843 2b04 	str.w	r2, [r3], #4
 8016552:	42a3      	cmp	r3, r4
 8016554:	d1fb      	bne.n	801654e <net::arp_timer()+0x9e>
 8016556:	e7b8      	b.n	80164ca <net::arp_timer()+0x1a>
 8016558:	1000cb28 	andne	ip, r0, r8, lsr #22
 801655c:	2000cbf4 	strdcs	ip, [r0], -r4

08016560 <net::arp_send(t_udp*, unsigned long, unsigned long)>:
 8016560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016562:	4b39      	ldr	r3, [pc, #228]	@ (8016648 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xe8>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	4604      	mov	r4, r0
 8016568:	4393      	bics	r3, r2
 801656a:	f04f 0000 	mov.w	r0, #0
 801656e:	4615      	mov	r5, r2
 8016570:	f8c4 201e 	str.w	r2, [r4, #30]
 8016574:	7620      	strb	r0, [r4, #24]
 8016576:	7660      	strb	r0, [r4, #25]
 8016578:	460e      	mov	r6, r1
 801657a:	d15c      	bne.n	8016636 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xd6>
 801657c:	4b33      	ldr	r3, [pc, #204]	@ (801664c <net::arp_send(t_udp*, unsigned long, unsigned long)+0xec>)
 801657e:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 8016582:	6959      	ldr	r1, [r3, #20]
 8016584:	2901      	cmp	r1, #1
 8016586:	dd02      	ble.n	801658e <net::arp_send(t_udp*, unsigned long, unsigned long)+0x2e>
 8016588:	6819      	ldr	r1, [r3, #0]
 801658a:	42a9      	cmp	r1, r5
 801658c:	d031      	beq.n	80165f2 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x92>
 801658e:	3318      	adds	r3, #24
 8016590:	4293      	cmp	r3, r2
 8016592:	d1f6      	bne.n	8016582 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x22>
 8016594:	2100      	movs	r1, #0
 8016596:	4628      	mov	r0, r5
 8016598:	f7ff ff58 	bl	801644c <net::arp_find_record(unsigned long, net::arp::Flags)>
 801659c:	6943      	ldr	r3, [r0, #20]
 801659e:	4607      	mov	r7, r0
 80165a0:	b1d3      	cbz	r3, 80165d8 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x78>
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	d000      	beq.n	80165a8 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x48>
 80165a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	b108      	cbz	r0, 80165b0 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x50>
 80165ac:	f004 fd8e 	bl	801b0cc <operator delete[](void*)>
 80165b0:	4630      	mov	r0, r6
 80165b2:	f004 fd91 	bl	801b0d8 <operator new[](unsigned int)>
 80165b6:	ea44 0200 	orr.w	r2, r4, r0
 80165ba:	0792      	lsls	r2, r2, #30
 80165bc:	4603      	mov	r3, r0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	d027      	beq.n	8016612 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xb2>
 80165c2:	4631      	mov	r1, r6
 80165c4:	b131      	cbz	r1, 80165d4 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x74>
 80165c6:	4421      	add	r1, r4
 80165c8:	f814 2b01 	ldrb.w	r2, [r4], #1
 80165cc:	f803 2b01 	strb.w	r2, [r3], #1
 80165d0:	428c      	cmp	r4, r1
 80165d2:	d1f9      	bne.n	80165c8 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x68>
 80165d4:	60be      	str	r6, [r7, #8]
 80165d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165d8:	8243      	strh	r3, [r0, #18]
 80165da:	2301      	movs	r3, #1
 80165dc:	481c      	ldr	r0, [pc, #112]	@ (8016650 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xf0>)
 80165de:	617b      	str	r3, [r7, #20]
 80165e0:	213c      	movs	r1, #60	@ 0x3c
 80165e2:	f8c0 5026 	str.w	r5, [r0, #38]	@ 0x26
 80165e6:	f7ff fd85 	bl	80160f4 <emac_eth_send(void*, unsigned long)>
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	2b01      	cmp	r3, #1
 80165ee:	d1da      	bne.n	80165a6 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x46>
 80165f0:	e7da      	b.n	80165a8 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x48>
 80165f2:	f103 020c 	add.w	r2, r3, #12
 80165f6:	4621      	mov	r1, r4
 80165f8:	3312      	adds	r3, #18
 80165fa:	f812 0b01 	ldrb.w	r0, [r2], #1
 80165fe:	f801 0b01 	strb.w	r0, [r1], #1
 8016602:	429a      	cmp	r2, r3
 8016604:	d1f9      	bne.n	80165fa <net::arp_send(t_udp*, unsigned long, unsigned long)+0x9a>
 8016606:	4631      	mov	r1, r6
 8016608:	4620      	mov	r0, r4
 801660a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801660e:	f7ff bd71 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 8016612:	2e03      	cmp	r6, #3
 8016614:	d9d5      	bls.n	80165c2 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x62>
 8016616:	1f35      	subs	r5, r6, #4
 8016618:	f025 0503 	bic.w	r5, r5, #3
 801661c:	3504      	adds	r5, #4
 801661e:	1960      	adds	r0, r4, r5
 8016620:	461a      	mov	r2, r3
 8016622:	f854 1b04 	ldr.w	r1, [r4], #4
 8016626:	f842 1b04 	str.w	r1, [r2], #4
 801662a:	4284      	cmp	r4, r0
 801662c:	d1f9      	bne.n	8016622 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xc2>
 801662e:	442b      	add	r3, r5
 8016630:	f006 0103 	and.w	r1, r6, #3
 8016634:	e7c6      	b.n	80165c4 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x64>
 8016636:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 801663a:	b292      	uxth	r2, r2
 801663c:	429a      	cmp	r2, r3
 801663e:	bf1c      	itt	ne
 8016640:	4b04      	ldrne	r3, [pc, #16]	@ (8016654 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xf4>)
 8016642:	689d      	ldrne	r5, [r3, #8]
 8016644:	e79a      	b.n	801657c <net::arp_send(t_udp*, unsigned long, unsigned long)+0x1c>
 8016646:	bf00      	nop
 8016648:	2000cb6c 	andcs	ip, r0, ip, ror #22
 801664c:	1000cb10 	andne	ip, r0, r0, lsl fp
 8016650:	2000cbf4 	strdcs	ip, [r0], -r4
 8016654:	2000cb88 	andcs	ip, r0, r8, lsl #23

08016658 <net::arp_acd_probe(net::ip_addr)>:
 8016658:	b510      	push	{r4, lr}
 801665a:	4c07      	ldr	r4, [pc, #28]	@ (8016678 <net::arp_acd_probe(net::ip_addr)+0x20>)
 801665c:	4603      	mov	r3, r0
 801665e:	2200      	movs	r2, #0
 8016660:	213c      	movs	r1, #60	@ 0x3c
 8016662:	4620      	mov	r0, r4
 8016664:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8016668:	61e2      	str	r2, [r4, #28]
 801666a:	f7ff fd43 	bl	80160f4 <emac_eth_send(void*, unsigned long)>
 801666e:	4b03      	ldr	r3, [pc, #12]	@ (801667c <net::arp_acd_probe(net::ip_addr)+0x24>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	61e3      	str	r3, [r4, #28]
 8016674:	bd10      	pop	{r4, pc}
 8016676:	bf00      	nop
 8016678:	2000cbf4 	strdcs	ip, [r0], -r4
 801667c:	2000cb88 	andcs	ip, r0, r8, lsl #23

08016680 <net::arp_acd_send_announcement(net::ip_addr)>:
 8016680:	4a04      	ldr	r2, [pc, #16]	@ (8016694 <net::arp_acd_send_announcement(net::ip_addr)+0x14>)
 8016682:	4603      	mov	r3, r0
 8016684:	213c      	movs	r1, #60	@ 0x3c
 8016686:	4610      	mov	r0, r2
 8016688:	f8c2 3026 	str.w	r3, [r2, #38]	@ 0x26
 801668c:	61d3      	str	r3, [r2, #28]
 801668e:	f7ff bd31 	b.w	80160f4 <emac_eth_send(void*, unsigned long)>
 8016692:	bf00      	nop
 8016694:	2000cbf4 	strdcs	ip, [r0], -r4

08016698 <net::ip_set_ip()>:
 8016698:	b508      	push	{r3, lr}
 801669a:	f7ff f85b 	bl	8015754 <net::udp_set_ip()>
 801669e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80166a2:	f7fe bc39 	b.w	8014f18 <net::igmp_set_ip()>
 80166a6:	bf00      	nop

080166a8 <net::phy_get_link(unsigned long)>:
 80166a8:	b507      	push	{r0, r1, r2, lr}
 80166aa:	2300      	movs	r3, #0
 80166ac:	f10d 0206 	add.w	r2, sp, #6
 80166b0:	2101      	movs	r1, #1
 80166b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166b6:	f7ff fb8b 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80166ba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80166be:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80166c2:	b003      	add	sp, #12
 80166c4:	f85d fb04 	ldr.w	pc, [sp], #4

080166c8 <net::phy_start(unsigned long, net::PhyStatus&)>:
 80166c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80166cc:	460d      	mov	r5, r1
 80166ce:	f10d 0206 	add.w	r2, sp, #6
 80166d2:	2104      	movs	r1, #4
 80166d4:	4604      	mov	r4, r0
 80166d6:	f7ff fb7b 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80166da:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80166de:	f240 1241 	movw	r2, #321	@ 0x141
 80166e2:	f401 637e 	and.w	r3, r1, #4064	@ 0xfe0
 80166e6:	4313      	orrs	r3, r2
 80166e8:	f411 616a 	ands.w	r1, r1, #3744	@ 0xea0
 80166ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166f0:	d10a      	bne.n	8016708 <net::phy_start(unsigned long, net::PhyStatus&)+0x40>
 80166f2:	f10d 0206 	add.w	r2, sp, #6
 80166f6:	4620      	mov	r0, r4
 80166f8:	f7ff fb6a 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80166fc:	b9f8      	cbnz	r0, 801673e <net::phy_start(unsigned long, net::PhyStatus&)+0x76>
 80166fe:	2600      	movs	r6, #0
 8016700:	4630      	mov	r0, r6
 8016702:	b003      	add	sp, #12
 8016704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016708:	2104      	movs	r1, #4
 801670a:	4620      	mov	r0, r4
 801670c:	f7ff fb6b 	bl	8015de6 <net::phy_write(unsigned long, unsigned long, unsigned short)>
 8016710:	2800      	cmp	r0, #0
 8016712:	d0f4      	beq.n	80166fe <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 8016714:	f10d 0206 	add.w	r2, sp, #6
 8016718:	2100      	movs	r1, #0
 801671a:	4620      	mov	r0, r4
 801671c:	f7ff fb58 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8016720:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016728:	f442 5290 	orr.w	r2, r2, #4608	@ 0x1200
 801672c:	b292      	uxth	r2, r2
 801672e:	2100      	movs	r1, #0
 8016730:	4620      	mov	r0, r4
 8016732:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016736:	f7ff fb56 	bl	8015de6 <net::phy_write(unsigned long, unsigned long, unsigned short)>
 801673a:	b938      	cbnz	r0, 801674c <net::phy_start(unsigned long, net::PhyStatus&)+0x84>
 801673c:	e7df      	b.n	80166fe <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 801673e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016742:	f403 53a0 	and.w	r3, r3, #5120	@ 0x1400
 8016746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801674a:	d1e3      	bne.n	8016714 <net::phy_start(unsigned long, net::PhyStatus&)+0x4c>
 801674c:	f10d 0206 	add.w	r2, sp, #6
 8016750:	2101      	movs	r1, #1
 8016752:	4620      	mov	r0, r4
 8016754:	f7ff fb3c 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8016758:	4606      	mov	r6, r0
 801675a:	2800      	cmp	r0, #0
 801675c:	d0cf      	beq.n	80166fe <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 801675e:	682a      	ldr	r2, [r5, #0]
 8016760:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016764:	b90a      	cbnz	r2, 801676a <net::phy_start(unsigned long, net::PhyStatus&)+0xa2>
 8016766:	0759      	lsls	r1, r3, #29
 8016768:	d40f      	bmi.n	801678a <net::phy_start(unsigned long, net::PhyStatus&)+0xc2>
 801676a:	069a      	lsls	r2, r3, #26
 801676c:	d43b      	bmi.n	80167e6 <net::phy_start(unsigned long, net::PhyStatus&)+0x11e>
 801676e:	4f25      	ldr	r7, [pc, #148]	@ (8016804 <net::phy_start(unsigned long, net::PhyStatus&)+0x13c>)
 8016770:	4825      	ldr	r0, [pc, #148]	@ (8016808 <net::phy_start(unsigned long, net::PhyStatus&)+0x140>)
 8016772:	f004 faae 	bl	801acd2 <puts>
 8016776:	f8d7 8000 	ldr.w	r8, [r7]
 801677a:	f241 3988 	movw	r9, #5000	@ 0x1388
 801677e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016782:	069b      	lsls	r3, r3, #26
 8016784:	d523      	bpl.n	80167ce <net::phy_start(unsigned long, net::PhyStatus&)+0x106>
 8016786:	2301      	movs	r3, #1
 8016788:	602b      	str	r3, [r5, #0]
 801678a:	2300      	movs	r3, #0
 801678c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016790:	aa01      	add	r2, sp, #4
 8016792:	2104      	movs	r1, #4
 8016794:	4620      	mov	r0, r4
 8016796:	f7ff fb1b 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 801679a:	f10d 0206 	add.w	r2, sp, #6
 801679e:	2105      	movs	r1, #5
 80167a0:	4620      	mov	r0, r4
 80167a2:	f7ff fb15 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80167a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80167aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80167ae:	4013      	ands	r3, r2
 80167b0:	f413 7fc0 	tst.w	r3, #384	@ 0x180
 80167b4:	d022      	beq.n	80167fc <net::phy_start(unsigned long, net::PhyStatus&)+0x134>
 80167b6:	2201      	movs	r2, #1
 80167b8:	60aa      	str	r2, [r5, #8]
 80167ba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80167be:	d001      	beq.n	80167c4 <net::phy_start(unsigned long, net::PhyStatus&)+0xfc>
 80167c0:	2301      	movs	r3, #1
 80167c2:	606b      	str	r3, [r5, #4]
 80167c4:	4620      	mov	r0, r4
 80167c6:	f7ff ff6f 	bl	80166a8 <net::phy_get_link(unsigned long)>
 80167ca:	6028      	str	r0, [r5, #0]
 80167cc:	e798      	b.n	8016700 <net::phy_start(unsigned long, net::PhyStatus&)+0x38>
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	eba3 0308 	sub.w	r3, r3, r8
 80167d4:	454b      	cmp	r3, r9
 80167d6:	d892      	bhi.n	80166fe <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 80167d8:	f10d 0206 	add.w	r2, sp, #6
 80167dc:	2101      	movs	r1, #1
 80167de:	4620      	mov	r0, r4
 80167e0:	f7ff faf6 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80167e4:	e7cb      	b.n	801677e <net::phy_start(unsigned long, net::PhyStatus&)+0xb6>
 80167e6:	f10d 0206 	add.w	r2, sp, #6
 80167ea:	2101      	movs	r1, #1
 80167ec:	4620      	mov	r0, r4
 80167ee:	f7ff faef 	bl	8015dd0 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80167f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80167f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80167fa:	e7c5      	b.n	8016788 <net::phy_start(unsigned long, net::PhyStatus&)+0xc0>
 80167fc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8016800:	e7dd      	b.n	80167be <net::phy_start(unsigned long, net::PhyStatus&)+0xf6>
 8016802:	bf00      	nop
 8016804:	2001a628 	andcs	sl, r1, r8, lsr #12
 8016808:	0801c27b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, lr, pc}

0801680c <Display::ClearEndOfLine() [clone .isra.0]>:
 801680c:	b108      	cbz	r0, 8016812 <Display::ClearEndOfLine() [clone .isra.0]+0x6>
 801680e:	2301      	movs	r3, #1
 8016810:	7303      	strb	r3, [r0, #12]
 8016812:	4770      	bx	lr

08016814 <Display::Write(unsigned long, char const*) [clone .isra.0]>:
 8016814:	b430      	push	{r4, r5}
 8016816:	b160      	cbz	r0, 8016832 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x1e>
 8016818:	6845      	ldr	r5, [r0, #4]
 801681a:	2300      	movs	r3, #0
 801681c:	5cd4      	ldrb	r4, [r2, r3]
 801681e:	b11c      	cbz	r4, 8016828 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x14>
 8016820:	1c5c      	adds	r4, r3, #1
 8016822:	429d      	cmp	r5, r3
 8016824:	4623      	mov	r3, r4
 8016826:	d8f9      	bhi.n	801681c <Display::Write(unsigned long, char const*) [clone .isra.0]+0x8>
 8016828:	6804      	ldr	r4, [r0, #0]
 801682a:	69e4      	ldr	r4, [r4, #28]
 801682c:	46a4      	mov	ip, r4
 801682e:	bc30      	pop	{r4, r5}
 8016830:	4760      	bx	ip
 8016832:	bc30      	pop	{r4, r5}
 8016834:	4770      	bx	lr
	...

08016838 <DisplayUdf::ShowIpAddress()>:
 8016838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801683c:	4e16      	ldr	r6, [pc, #88]	@ (8016898 <DisplayUdf::ShowIpAddress()+0x60>)
 801683e:	b086      	sub	sp, #24
 8016840:	4605      	mov	r5, r0
 8016842:	6980      	ldr	r0, [r0, #24]
 8016844:	f7ff ffe2 	bl	801680c <Display::ClearEndOfLine() [clone .isra.0]>
 8016848:	6870      	ldr	r0, [r6, #4]
 801684a:	6834      	ldr	r4, [r6, #0]
 801684c:	f895 703e 	ldrb.w	r7, [r5, #62]	@ 0x3e
 8016850:	f004 fc90 	bl	801b174 <__popcountsi2>
 8016854:	7eb3      	ldrb	r3, [r6, #26]
 8016856:	075a      	lsls	r2, r3, #29
 8016858:	fa5f f884 	uxtb.w	r8, r4
 801685c:	f3c4 2907 	ubfx	r9, r4, #8, #8
 8016860:	f3c4 4a07 	ubfx	sl, r4, #16, #8
 8016864:	ea4f 6414 	mov.w	r4, r4, lsr #24
 8016868:	d413      	bmi.n	8016892 <DisplayUdf::ShowIpAddress()+0x5a>
 801686a:	f013 0f02 	tst.w	r3, #2
 801686e:	bf0c      	ite	eq
 8016870:	2253      	moveq	r2, #83	@ 0x53
 8016872:	2244      	movne	r2, #68	@ 0x44
 8016874:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8016878:	e9cd a401 	strd	sl, r4, [sp, #4]
 801687c:	4a07      	ldr	r2, [pc, #28]	@ (801689c <DisplayUdf::ShowIpAddress()+0x64>)
 801687e:	f8cd 9000 	str.w	r9, [sp]
 8016882:	4643      	mov	r3, r8
 8016884:	4639      	mov	r1, r7
 8016886:	4628      	mov	r0, r5
 8016888:	f7f2 fe8c 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 801688c:	b006      	add	sp, #24
 801688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016892:	225a      	movs	r2, #90	@ 0x5a
 8016894:	e7ee      	b.n	8016874 <DisplayUdf::ShowIpAddress()+0x3c>
 8016896:	bf00      	nop
 8016898:	2000cb88 	andcs	ip, r0, r8, lsl #23
 801689c:	0801c2a8 	stmdaeq	r1, {r3, r5, r7, r9, lr, pc}

080168a0 <DisplayUdf::DisplayUdf()>:
 80168a0:	b510      	push	{r4, lr}
 80168a2:	4604      	mov	r4, r0
 80168a4:	f001 f952 	bl	8017b4c <Display::Display()>
 80168a8:	2202      	movs	r2, #2
 80168aa:	2300      	movs	r3, #0
 80168ac:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
 80168b0:	4b05      	ldr	r3, [pc, #20]	@ (80168c8 <DisplayUdf::DisplayUdf()+0x28>)
 80168b2:	f104 023b 	add.w	r2, r4, #59	@ 0x3b
 80168b6:	601c      	str	r4, [r3, #0]
 80168b8:	2301      	movs	r3, #1
 80168ba:	f802 3f01 	strb.w	r3, [r2, #1]!
 80168be:	3301      	adds	r3, #1
 80168c0:	2b15      	cmp	r3, #21
 80168c2:	d1fa      	bne.n	80168ba <DisplayUdf::DisplayUdf()+0x1a>
 80168c4:	4620      	mov	r0, r4
 80168c6:	bd10      	pop	{r4, pc}
 80168c8:	2000cc30 	andcs	ip, r0, r0, lsr ip

080168cc <DisplayUdf::SetTitle(char const*, ...)>:
 80168cc:	b40e      	push	{r1, r2, r3}
 80168ce:	b517      	push	{r0, r1, r2, r4, lr}
 80168d0:	ab05      	add	r3, sp, #20
 80168d2:	4604      	mov	r4, r0
 80168d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80168d8:	9301      	str	r3, [sp, #4]
 80168da:	211f      	movs	r1, #31
 80168dc:	301c      	adds	r0, #28
 80168de:	f004 f9e3 	bl	801aca8 <vsnprintf>
 80168e2:	4404      	add	r4, r0
 80168e4:	2300      	movs	r3, #0
 80168e6:	7723      	strb	r3, [r4, #28]
 80168e8:	b003      	add	sp, #12
 80168ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168ee:	b003      	add	sp, #12
 80168f0:	4770      	bx	lr

080168f2 <DisplayUdf::Set(unsigned long, displayudf::Labels)>:
 80168f2:	1e4b      	subs	r3, r1, #1
 80168f4:	2b05      	cmp	r3, #5
 80168f6:	b530      	push	{r4, r5, lr}
 80168f8:	d810      	bhi.n	801691c <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2a>
 80168fa:	f100 043b 	add.w	r4, r0, #59	@ 0x3b
 80168fe:	2300      	movs	r3, #0
 8016900:	b2c9      	uxtb	r1, r1
 8016902:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8016906:	428d      	cmp	r5, r1
 8016908:	d109      	bne.n	801691e <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2c>
 801690a:	1884      	adds	r4, r0, r2
 801690c:	4403      	add	r3, r0
 801690e:	f894 403c 	ldrb.w	r4, [r4, #60]	@ 0x3c
 8016912:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
 8016916:	4410      	add	r0, r2
 8016918:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
 801691c:	bd30      	pop	{r4, r5, pc}
 801691e:	3301      	adds	r3, #1
 8016920:	2b14      	cmp	r3, #20
 8016922:	d1ee      	bne.n	8016902 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x10>
 8016924:	e7f7      	b.n	8016916 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x24>
	...

08016928 <DisplayUdf::Show()>:
 8016928:	b530      	push	{r4, r5, lr}
 801692a:	4604      	mov	r4, r0
 801692c:	b085      	sub	sp, #20
 801692e:	f000 fa93 	bl	8016e58 <DisplayUdf::ShowArtNetNode()>
 8016932:	f104 033b 	add.w	r3, r4, #59	@ 0x3b
 8016936:	f104 024f 	add.w	r2, r4, #79	@ 0x4f
 801693a:	21ff      	movs	r1, #255	@ 0xff
 801693c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8016940:	2806      	cmp	r0, #6
 8016942:	bf88      	it	hi
 8016944:	7019      	strbhi	r1, [r3, #0]
 8016946:	4293      	cmp	r3, r2
 8016948:	d1f8      	bne.n	801693c <DisplayUdf::Show()+0x14>
 801694a:	69a0      	ldr	r0, [r4, #24]
 801694c:	4d2a      	ldr	r5, [pc, #168]	@ (80169f8 <DisplayUdf::Show()+0xd0>)
 801694e:	f7ff ff5d 	bl	801680c <Display::ClearEndOfLine() [clone .isra.0]>
 8016952:	f104 021c 	add.w	r2, r4, #28
 8016956:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 801695a:	f7ff ff5b 	bl	8016814 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 801695e:	69a0      	ldr	r0, [r4, #24]
 8016960:	4a26      	ldr	r2, [pc, #152]	@ (80169fc <DisplayUdf::Show()+0xd4>)
 8016962:	f7ff ff53 	bl	801680c <Display::ClearEndOfLine() [clone .isra.0]>
 8016966:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 801696a:	f7ff ff53 	bl	8016814 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 801696e:	69a0      	ldr	r0, [r4, #24]
 8016970:	4a23      	ldr	r2, [pc, #140]	@ (8016a00 <DisplayUdf::Show()+0xd8>)
 8016972:	f7ff ff4b 	bl	801680c <Display::ClearEndOfLine() [clone .isra.0]>
 8016976:	4b23      	ldr	r3, [pc, #140]	@ (8016a04 <DisplayUdf::Show()+0xdc>)
 8016978:	9300      	str	r3, [sp, #0]
 801697a:	f894 103f 	ldrb.w	r1, [r4, #63]	@ 0x3f
 801697e:	2303      	movs	r3, #3
 8016980:	4620      	mov	r0, r4
 8016982:	f7f2 fe0f 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016986:	4620      	mov	r0, r4
 8016988:	f7ff ff56 	bl	8016838 <DisplayUdf::ShowIpAddress()>
 801698c:	69a0      	ldr	r0, [r4, #24]
 801698e:	f7ff ff3d 	bl	801680c <Display::ClearEndOfLine() [clone .isra.0]>
 8016992:	68ab      	ldr	r3, [r5, #8]
 8016994:	0e1a      	lsrs	r2, r3, #24
 8016996:	9202      	str	r2, [sp, #8]
 8016998:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801699c:	9201      	str	r2, [sp, #4]
 801699e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80169a2:	9200      	str	r2, [sp, #0]
 80169a4:	f894 104e 	ldrb.w	r1, [r4, #78]	@ 0x4e
 80169a8:	4a17      	ldr	r2, [pc, #92]	@ (8016a08 <DisplayUdf::Show()+0xe0>)
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	4620      	mov	r0, r4
 80169ae:	f7f2 fdf9 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 80169b2:	69a0      	ldr	r0, [r4, #24]
 80169b4:	f7ff ff2a 	bl	801680c <Display::ClearEndOfLine() [clone .isra.0]>
 80169b8:	686b      	ldr	r3, [r5, #4]
 80169ba:	0e1a      	lsrs	r2, r3, #24
 80169bc:	9202      	str	r2, [sp, #8]
 80169be:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80169c2:	9201      	str	r2, [sp, #4]
 80169c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80169c8:	9200      	str	r2, [sp, #0]
 80169ca:	f894 1048 	ldrb.w	r1, [r4, #72]	@ 0x48
 80169ce:	4a0f      	ldr	r2, [pc, #60]	@ (8016a0c <DisplayUdf::Show()+0xe4>)
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	4620      	mov	r0, r4
 80169d4:	f7f2 fde6 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 80169d8:	4620      	mov	r0, r4
 80169da:	f7ff ff2d 	bl	8016838 <DisplayUdf::ShowIpAddress()>
 80169de:	69a0      	ldr	r0, [r4, #24]
 80169e0:	f7ff ff14 	bl	801680c <Display::ClearEndOfLine() [clone .isra.0]>
 80169e4:	4b0a      	ldr	r3, [pc, #40]	@ (8016a10 <DisplayUdf::Show()+0xe8>)
 80169e6:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	3216      	adds	r2, #22
 80169ee:	b005      	add	sp, #20
 80169f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80169f4:	f7ff bf0e 	b.w	8016814 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 80169f8:	2000cb88 	andcs	ip, r0, r8, lsl #23
 80169fc:	0801ba9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, fp, ip, sp, pc}
 8016a00:	0801c2ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, lr, pc}
 8016a04:	2000cd20 	andcs	ip, r0, r0, lsr #26
 8016a08:	0801c2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, lr, pc}
 8016a0c:	0801c2d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, lr, pc}
 8016a10:	2000cb68 	andcs	ip, r0, r8, ror #22

08016a14 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>:
 8016a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a16:	88c6      	ldrh	r6, [r0, #6]
 8016a18:	8885      	ldrh	r5, [r0, #4]
 8016a1a:	42ae      	cmp	r6, r5
 8016a1c:	d216      	bcs.n	8016a4c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x38>
 8016a1e:	4604      	mov	r4, r0
 8016a20:	6800      	ldr	r0, [r0, #0]
 8016a22:	1bad      	subs	r5, r5, r6
 8016a24:	4430      	add	r0, r6
 8016a26:	7a26      	ldrb	r6, [r4, #8]
 8016a28:	b923      	cbnz	r3, 8016a34 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x20>
 8016a2a:	b926      	cbnz	r6, 8016a36 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x22>
 8016a2c:	9200      	str	r2, [sp, #0]
 8016a2e:	460b      	mov	r3, r1
 8016a30:	4a09      	ldr	r2, [pc, #36]	@ (8016a58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x44>)
 8016a32:	e003      	b.n	8016a3c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 8016a34:	b166      	cbz	r6, 8016a50 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x3c>
 8016a36:	9200      	str	r2, [sp, #0]
 8016a38:	4a08      	ldr	r2, [pc, #32]	@ (8016a5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x48>)
 8016a3a:	460b      	mov	r3, r1
 8016a3c:	4629      	mov	r1, r5
 8016a3e:	f004 f91b 	bl	801ac78 <snprintf>
 8016a42:	4285      	cmp	r5, r0
 8016a44:	bfa2      	ittt	ge
 8016a46:	88e3      	ldrhge	r3, [r4, #6]
 8016a48:	181b      	addge	r3, r3, r0
 8016a4a:	80e3      	strhge	r3, [r4, #6]
 8016a4c:	b002      	add	sp, #8
 8016a4e:	bd70      	pop	{r4, r5, r6, pc}
 8016a50:	9200      	str	r2, [sp, #0]
 8016a52:	460b      	mov	r3, r1
 8016a54:	4a02      	ldr	r2, [pc, #8]	@ (8016a60 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x4c>)
 8016a56:	e7f1      	b.n	8016a3c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 8016a58:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 8016a5c:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 8016a60:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}

08016a64 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>:
 8016a64:	b507      	push	{r0, r1, r2, lr}
 8016a66:	2300      	movs	r3, #0
 8016a68:	2101      	movs	r1, #1
 8016a6a:	e9cd 3100 	strd	r3, r1, [sp]
 8016a6e:	4602      	mov	r2, r0
 8016a70:	4804      	ldr	r0, [pc, #16]	@ (8016a84 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)+0x20>)
 8016a72:	2322      	movs	r3, #34	@ 0x22
 8016a74:	6800      	ldr	r0, [r0, #0]
 8016a76:	210d      	movs	r1, #13
 8016a78:	f000 fb9c 	bl	80171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 8016a7c:	b003      	add	sp, #12
 8016a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a82:	bf00      	nop
 8016a84:	2000cc34 	andcs	ip, r0, r4, lsr ip

08016a88 <DisplayUdfParams::DisplayUdfParams()>:
 8016a88:	b510      	push	{r4, lr}
 8016a8a:	2220      	movs	r2, #32
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	2100      	movs	r1, #0
 8016a90:	f003 fde6 	bl	801a660 <memset>
 8016a94:	2305      	movs	r3, #5
 8016a96:	f884 3020 	strb.w	r3, [r4, #32]
 8016a9a:	237f      	movs	r3, #127	@ 0x7f
 8016a9c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	bd10      	pop	{r4, pc}

08016aa4 <DisplayUdfParams::Load()>:
 8016aa4:	b508      	push	{r3, lr}
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	7002      	strb	r2, [r0, #0]
 8016aaa:	7042      	strb	r2, [r0, #1]
 8016aac:	7082      	strb	r2, [r0, #2]
 8016aae:	70c2      	strb	r2, [r0, #3]
 8016ab0:	f7ff ffd8 	bl	8016a64 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>
 8016ab4:	bd08      	pop	{r3, pc}
	...

08016ab8 <DisplayUdfParams::Load(char const*, unsigned long)>:
 8016ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016aba:	2500      	movs	r5, #0
 8016abc:	b087      	sub	sp, #28
 8016abe:	4604      	mov	r4, r0
 8016ac0:	460e      	mov	r6, r1
 8016ac2:	4617      	mov	r7, r2
 8016ac4:	7005      	strb	r5, [r0, #0]
 8016ac6:	7045      	strb	r5, [r0, #1]
 8016ac8:	7085      	strb	r5, [r0, #2]
 8016aca:	70c5      	strb	r5, [r0, #3]
 8016acc:	4602      	mov	r2, r0
 8016ace:	490c      	ldr	r1, [pc, #48]	@ (8016b00 <DisplayUdfParams::Load(char const*, unsigned long)+0x48>)
 8016ad0:	a804      	add	r0, sp, #16
 8016ad2:	f000 fe49 	bl	8017768 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8016ad6:	463a      	mov	r2, r7
 8016ad8:	4631      	mov	r1, r6
 8016ada:	a804      	add	r0, sp, #16
 8016adc:	f000 fe48 	bl	8017770 <ReadConfigFile::Read(char const*, unsigned int)>
 8016ae0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8016ae4:	2322      	movs	r3, #34	@ 0x22
 8016ae6:	4807      	ldr	r0, [pc, #28]	@ (8016b04 <DisplayUdfParams::Load(char const*, unsigned long)+0x4c>)
 8016ae8:	9300      	str	r3, [sp, #0]
 8016aea:	462a      	mov	r2, r5
 8016aec:	4623      	mov	r3, r4
 8016aee:	210d      	movs	r1, #13
 8016af0:	6800      	ldr	r0, [r0, #0]
 8016af2:	f000 fb39 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8016af6:	a804      	add	r0, sp, #16
 8016af8:	f000 fe39 	bl	801776e <ReadConfigFile::~ReadConfigFile()>
 8016afc:	b007      	add	sp, #28
 8016afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b00:	08016bc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, fp, sp, lr}
 8016b04:	2000cc34 	andcs	ip, r0, r4, lsr ip

08016b08 <DisplayUdfParams::callbackFunction(char const*)>:
 8016b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b0a:	460e      	mov	r6, r1
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	492a      	ldr	r1, [pc, #168]	@ (8016bb8 <DisplayUdfParams::callbackFunction(char const*)+0xb0>)
 8016b10:	f10d 0207 	add.w	r2, sp, #7
 8016b14:	4630      	mov	r0, r6
 8016b16:	f000 ff51 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016b1a:	b968      	cbnz	r0, 8016b38 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8016b1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016b20:	6823      	ldr	r3, [r4, #0]
 8016b22:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
 8016b26:	2a7f      	cmp	r2, #127	@ 0x7f
 8016b28:	bf14      	ite	ne
 8016b2a:	f043 5300 	orrne.w	r3, r3, #536870912	@ 0x20000000
 8016b2e:	f023 5300 	biceq.w	r3, r3, #536870912	@ 0x20000000
 8016b32:	6023      	str	r3, [r4, #0]
 8016b34:	b003      	add	sp, #12
 8016b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b38:	4920      	ldr	r1, [pc, #128]	@ (8016bbc <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 8016b3a:	f10d 0207 	add.w	r2, sp, #7
 8016b3e:	4630      	mov	r0, r6
 8016b40:	f000 ff3c 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016b44:	b958      	cbnz	r0, 8016b5e <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8016b46:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016b4a:	6823      	ldr	r3, [r4, #0]
 8016b4c:	f884 2020 	strb.w	r2, [r4, #32]
 8016b50:	2a05      	cmp	r2, #5
 8016b52:	bf14      	ite	ne
 8016b54:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 8016b58:	f023 5380 	biceq.w	r3, r3, #268435456	@ 0x10000000
 8016b5c:	e7e9      	b.n	8016b32 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016b5e:	4918      	ldr	r1, [pc, #96]	@ (8016bc0 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8016b60:	f10d 0207 	add.w	r2, sp, #7
 8016b64:	4630      	mov	r0, r6
 8016b66:	f000 ff29 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016b6a:	b948      	cbnz	r0, 8016b80 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8016b6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016b70:	6823      	ldr	r3, [r4, #0]
 8016b72:	b112      	cbz	r2, 8016b7a <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8016b74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016b78:	e7db      	b.n	8016b32 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016b7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016b7e:	e7d8      	b.n	8016b32 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016b80:	4f10      	ldr	r7, [pc, #64]	@ (8016bc4 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8016b82:	2500      	movs	r5, #0
 8016b84:	f857 1b04 	ldr.w	r1, [r7], #4
 8016b88:	f10d 0207 	add.w	r2, sp, #7
 8016b8c:	4630      	mov	r0, r6
 8016b8e:	f000 ff15 	bl	80179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016b92:	b968      	cbnz	r0, 8016bb0 <DisplayUdfParams::callbackFunction(char const*)+0xa8>
 8016b94:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016b98:	6823      	ldr	r3, [r4, #0]
 8016b9a:	2201      	movs	r2, #1
 8016b9c:	40aa      	lsls	r2, r5
 8016b9e:	1e4e      	subs	r6, r1, #1
 8016ba0:	4425      	add	r5, r4
 8016ba2:	2e05      	cmp	r6, #5
 8016ba4:	bf99      	ittee	ls
 8016ba6:	7129      	strbls	r1, [r5, #4]
 8016ba8:	4313      	orrls	r3, r2
 8016baa:	7128      	strbhi	r0, [r5, #4]
 8016bac:	4393      	bichi	r3, r2
 8016bae:	e7c0      	b.n	8016b32 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016bb0:	3501      	adds	r5, #1
 8016bb2:	2d14      	cmp	r5, #20
 8016bb4:	d1e6      	bne.n	8016b84 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8016bb6:	e7bd      	b.n	8016b34 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8016bb8:	0801f0aa 	stmdaeq	r1, {r1, r3, r5, r7, ip, sp, lr, pc}
 8016bbc:	0801f09c 	stmdaeq	r1, {r2, r3, r4, r7, ip, sp, lr, pc}
 8016bc0:	0801f08c 	stmdaeq	r1, {r2, r3, r7, ip, sp, lr, pc}
 8016bc4:	0801f008 	stmdaeq	r1, {r3, ip, sp, lr, pc}

08016bc8 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8016bc8:	f7ff bf9e 	b.w	8016b08 <DisplayUdfParams::callbackFunction(char const*)>

08016bcc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)>:
 8016bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd0:	4604      	mov	r4, r0
 8016bd2:	b086      	sub	sp, #24
 8016bd4:	4615      	mov	r5, r2
 8016bd6:	461e      	mov	r6, r3
 8016bd8:	b379      	cbz	r1, 8016c3a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 8016bda:	2222      	movs	r2, #34	@ 0x22
 8016bdc:	f003 fd29 	bl	801a632 <memmove>
 8016be0:	462a      	mov	r2, r5
 8016be2:	493c      	ldr	r1, [pc, #240]	@ (8016cd4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x108>)
 8016be4:	4633      	mov	r3, r6
 8016be6:	a803      	add	r0, sp, #12
 8016be8:	f000 fce8 	bl	80175bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 8016bf2:	4939      	ldr	r1, [pc, #228]	@ (8016cd8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x10c>)
 8016bf4:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8016bf8:	a803      	add	r0, sp, #12
 8016bfa:	f7ff ff0b 	bl	8016a14 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8016bfe:	6823      	ldr	r3, [r4, #0]
 8016c00:	f894 2020 	ldrb.w	r2, [r4, #32]
 8016c04:	4935      	ldr	r1, [pc, #212]	@ (8016cdc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x110>)
 8016c06:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8016c0a:	a803      	add	r0, sp, #12
 8016c0c:	f7ff ff02 	bl	8016a14 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8016c10:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016c14:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8016c18:	6823      	ldr	r3, [r4, #0]
 8016c1a:	42aa      	cmp	r2, r5
 8016c1c:	d222      	bcs.n	8016c64 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x98>
 8016c1e:	9803      	ldr	r0, [sp, #12]
 8016c20:	f013 4380 	ands.w	r3, r3, #1073741824	@ 0x40000000
 8016c24:	4410      	add	r0, r2
 8016c26:	eba5 0502 	sub.w	r5, r5, r2
 8016c2a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8016c2e:	d107      	bne.n	8016c40 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x74>
 8016c30:	b942      	cbnz	r2, 8016c44 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x78>
 8016c32:	9200      	str	r2, [sp, #0]
 8016c34:	4b2a      	ldr	r3, [pc, #168]	@ (8016ce0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 8016c36:	4a2b      	ldr	r2, [pc, #172]	@ (8016ce4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x118>)
 8016c38:	e00a      	b.n	8016c50 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 8016c3a:	f7ff ff13 	bl	8016a64 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>
 8016c3e:	e7cf      	b.n	8016be0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 8016c40:	2a00      	cmp	r2, #0
 8016c42:	d042      	beq.n	8016cca <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xfe>
 8016c44:	3b00      	subs	r3, #0
 8016c46:	bf18      	it	ne
 8016c48:	2301      	movne	r3, #1
 8016c4a:	9300      	str	r3, [sp, #0]
 8016c4c:	4a26      	ldr	r2, [pc, #152]	@ (8016ce8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x11c>)
 8016c4e:	4b24      	ldr	r3, [pc, #144]	@ (8016ce0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 8016c50:	4629      	mov	r1, r5
 8016c52:	f004 f811 	bl	801ac78 <snprintf>
 8016c56:	4285      	cmp	r5, r0
 8016c58:	bfa2      	ittt	ge
 8016c5a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8016c5e:	18c0      	addge	r0, r0, r3
 8016c60:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8016c64:	4e21      	ldr	r6, [pc, #132]	@ (8016cec <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 8016c66:	2500      	movs	r5, #0
 8016c68:	2701      	movs	r7, #1
 8016c6a:	f104 0804 	add.w	r8, r4, #4
 8016c6e:	f856 1b04 	ldr.w	r1, [r6], #4
 8016c72:	780b      	ldrb	r3, [r1, #0]
 8016c74:	b163      	cbz	r3, 8016c90 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 8016c76:	6822      	ldr	r2, [r4, #0]
 8016c78:	fa07 f305 	lsl.w	r3, r7, r5
 8016c7c:	4393      	bics	r3, r2
 8016c7e:	bf08      	it	eq
 8016c80:	2301      	moveq	r3, #1
 8016c82:	f818 2005 	ldrb.w	r2, [r8, r5]
 8016c86:	bf18      	it	ne
 8016c88:	2300      	movne	r3, #0
 8016c8a:	a803      	add	r0, sp, #12
 8016c8c:	f7ff fec2 	bl	8016a14 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8016c90:	3501      	adds	r5, #1
 8016c92:	2d14      	cmp	r5, #20
 8016c94:	d1eb      	bne.n	8016c6e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xa2>
 8016c96:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016c9a:	b17b      	cbz	r3, 8016cbc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xf0>
 8016c9c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016ca0:	9b03      	ldr	r3, [sp, #12]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	227d      	movs	r2, #125	@ 0x7d
 8016ca6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016caa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016cae:	9903      	ldr	r1, [sp, #12]
 8016cb0:	54ca      	strb	r2, [r1, r3]
 8016cb2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016cb6:	3301      	adds	r3, #1
 8016cb8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016cbc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016cc2:	601a      	str	r2, [r3, #0]
 8016cc4:	b006      	add	sp, #24
 8016cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cca:	2301      	movs	r3, #1
 8016ccc:	9300      	str	r3, [sp, #0]
 8016cce:	4a08      	ldr	r2, [pc, #32]	@ (8016cf0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x124>)
 8016cd0:	4b03      	ldr	r3, [pc, #12]	@ (8016ce0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 8016cd2:	e7bd      	b.n	8016c50 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 8016cd4:	0801f0b4 	stmdaeq	r1, {r2, r4, r5, r7, ip, sp, lr, pc}
 8016cd8:	0801f0aa 	stmdaeq	r1, {r1, r3, r5, r7, ip, sp, lr, pc}
 8016cdc:	0801f09c 	stmdaeq	r1, {r2, r3, r4, r7, ip, sp, lr, pc}
 8016ce0:	0801f08c 	stmdaeq	r1, {r2, r3, r7, ip, sp, lr, pc}
 8016ce4:	0801b979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 8016ce8:	0801b970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, sp, pc}
 8016cec:	0801f008 	stmdaeq	r1, {r3, ip, sp, lr, pc}
 8016cf0:	0801c011 	stmdaeq	r1, {r0, r4, lr, pc}

08016cf4 <DisplayUdfParams::Set(DisplayUdf*)>:
 8016cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	460d      	mov	r5, r1
 8016cfc:	6823      	ldr	r3, [r4, #0]
 8016cfe:	6988      	ldr	r0, [r1, #24]
 8016d00:	009a      	lsls	r2, r3, #2
 8016d02:	d506      	bpl.n	8016d12 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8016d04:	f894 1021 	ldrb.w	r1, [r4, #33]	@ 0x21
 8016d08:	7529      	strb	r1, [r5, #20]
 8016d0a:	b110      	cbz	r0, 8016d12 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8016d0c:	6803      	ldr	r3, [r0, #0]
 8016d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d10:	4798      	blx	r3
 8016d12:	6823      	ldr	r3, [r4, #0]
 8016d14:	69a8      	ldr	r0, [r5, #24]
 8016d16:	00db      	lsls	r3, r3, #3
 8016d18:	bf41      	itttt	mi
 8016d1a:	f894 3020 	ldrbmi.w	r3, [r4, #32]
 8016d1e:	f64e 2260 	movwmi	r2, #60000	@ 0xea60
 8016d22:	4353      	mulmi	r3, r2
 8016d24:	612b      	strmi	r3, [r5, #16]
 8016d26:	6821      	ldr	r1, [r4, #0]
 8016d28:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8016d2c:	75a9      	strb	r1, [r5, #22]
 8016d2e:	b110      	cbz	r0, 8016d36 <DisplayUdfParams::Set(DisplayUdf*)+0x42>
 8016d30:	6803      	ldr	r3, [r0, #0]
 8016d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d34:	4798      	blx	r3
 8016d36:	2600      	movs	r6, #0
 8016d38:	2701      	movs	r7, #1
 8016d3a:	f104 0804 	add.w	r8, r4, #4
 8016d3e:	6822      	ldr	r2, [r4, #0]
 8016d40:	fa07 f306 	lsl.w	r3, r7, r6
 8016d44:	4393      	bics	r3, r2
 8016d46:	d105      	bne.n	8016d54 <DisplayUdfParams::Set(DisplayUdf*)+0x60>
 8016d48:	f818 1006 	ldrb.w	r1, [r8, r6]
 8016d4c:	4632      	mov	r2, r6
 8016d4e:	4628      	mov	r0, r5
 8016d50:	f7ff fdcf 	bl	80168f2 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 8016d54:	3601      	adds	r6, #1
 8016d56:	2e14      	cmp	r6, #20
 8016d58:	d1f1      	bne.n	8016d3e <DisplayUdfParams::Set(DisplayUdf*)+0x4a>
 8016d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d5e <artnet::display_longname(char const*)>:
 8016d5e:	4770      	bx	lr

08016d60 <artnet::display_universe_switch(unsigned long, unsigned char)>:
 8016d60:	4b01      	ldr	r3, [pc, #4]	@ (8016d68 <artnet::display_universe_switch(unsigned long, unsigned char)+0x8>)
 8016d62:	6818      	ldr	r0, [r3, #0]
 8016d64:	f000 b810 	b.w	8016d88 <DisplayUdf::ShowUniverseArtNetNode()>
 8016d68:	2000cc30 	andcs	ip, r0, r0, lsr ip

08016d6c <artnet::display_merge_mode(unsigned long, lightset::MergeMode)>:
 8016d6c:	4b01      	ldr	r3, [pc, #4]	@ (8016d74 <artnet::display_merge_mode(unsigned long, lightset::MergeMode)+0x8>)
 8016d6e:	6818      	ldr	r0, [r3, #0]
 8016d70:	f000 b80a 	b.w	8016d88 <DisplayUdf::ShowUniverseArtNetNode()>
 8016d74:	2000cc30 	andcs	ip, r0, r0, lsr ip

08016d78 <artnet::display_port_protocol(unsigned long, artnet::PortProtocol)>:
 8016d78:	4b01      	ldr	r3, [pc, #4]	@ (8016d80 <artnet::display_port_protocol(unsigned long, artnet::PortProtocol)+0x8>)
 8016d7a:	6818      	ldr	r0, [r3, #0]
 8016d7c:	f000 b804 	b.w	8016d88 <DisplayUdf::ShowUniverseArtNetNode()>
 8016d80:	2000cc30 	andcs	ip, r0, r0, lsr ip

08016d84 <artnet::display_failsafe(unsigned char)>:
 8016d84:	4770      	bx	lr
	...

08016d88 <DisplayUdf::ShowUniverseArtNetNode()>:
 8016d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d8c:	4b29      	ldr	r3, [pc, #164]	@ (8016e34 <DisplayUdf::ShowUniverseArtNetNode()+0xac>)
 8016d8e:	4f2a      	ldr	r7, [pc, #168]	@ (8016e38 <DisplayUdf::ShowUniverseArtNetNode()+0xb0>)
 8016d90:	681e      	ldr	r6, [r3, #0]
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	2b03      	cmp	r3, #3
 8016d96:	b085      	sub	sp, #20
 8016d98:	4605      	mov	r5, r0
 8016d9a:	d947      	bls.n	8016e2c <DisplayUdf::ShowUniverseArtNetNode()+0xa4>
 8016d9c:	b005      	add	sp, #20
 8016d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	4423      	add	r3, r4
 8016da6:	2b03      	cmp	r3, #3
 8016da8:	d8f8      	bhi.n	8016d9c <DisplayUdf::ShowUniverseArtNetNode()+0x14>
 8016daa:	fb08 6203 	mla	r2, r8, r3, r6
 8016dae:	f8d2 1bf0 	ldr.w	r1, [r2, #3056]	@ 0xbf0
 8016db2:	2901      	cmp	r1, #1
 8016db4:	d136      	bne.n	8016e24 <DisplayUdf::ShowUniverseArtNetNode()+0x9c>
 8016db6:	f8b2 cbe8 	ldrh.w	ip, [r2, #3048]	@ 0xbe8
 8016dba:	69aa      	ldr	r2, [r5, #24]
 8016dbc:	b102      	cbz	r2, 8016dc0 <DisplayUdf::ShowUniverseArtNetNode()+0x38>
 8016dbe:	7311      	strb	r1, [r2, #12]
 8016dc0:	2224      	movs	r2, #36	@ 0x24
 8016dc2:	fb02 6203 	mla	r2, r2, r3, r6
 8016dc6:	f241 1070 	movw	r0, #4464	@ 0x1170
 8016dca:	f8df e080 	ldr.w	lr, [pc, #128]	@ 8016e4c <DisplayUdf::ShowUniverseArtNetNode()+0xc4>
 8016dce:	5c10      	ldrb	r0, [r2, r0]
 8016dd0:	f010 0f02 	tst.w	r0, #2
 8016dd4:	4819      	ldr	r0, [pc, #100]	@ (8016e3c <DisplayUdf::ShowUniverseArtNetNode()+0xb4>)
 8016dd6:	bf18      	it	ne
 8016dd8:	4670      	movne	r0, lr
 8016dda:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 8016dde:	fb0e 6303 	mla	r3, lr, r3, r6
 8016de2:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8016e50 <DisplayUdf::ShowUniverseArtNetNode()+0xc8>
 8016de6:	f8d3 9bf4 	ldr.w	r9, [r3, #3060]	@ 0xbf4
 8016dea:	4b15      	ldr	r3, [pc, #84]	@ (8016e40 <DisplayUdf::ShowUniverseArtNetNode()+0xb8>)
 8016dec:	f1b9 0f00 	cmp.w	r9, #0
 8016df0:	bf18      	it	ne
 8016df2:	4673      	movne	r3, lr
 8016df4:	f241 1e71 	movw	lr, #4465	@ 0x1171
 8016df8:	f105 0144 	add.w	r1, r5, #68	@ 0x44
 8016dfc:	f912 900e 	ldrsb.w	r9, [r2, lr]
 8016e00:	4a10      	ldr	r2, [pc, #64]	@ (8016e44 <DisplayUdf::ShowUniverseArtNetNode()+0xbc>)
 8016e02:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8016e54 <DisplayUdf::ShowUniverseArtNetNode()+0xcc>
 8016e06:	ea12 0229 	ands.w	r2, r2, r9, asr #32
 8016e0a:	bf38      	it	cc
 8016e0c:	4672      	movcc	r2, lr
 8016e0e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016e12:	e9cd c000 	strd	ip, r0, [sp]
 8016e16:	4a0c      	ldr	r2, [pc, #48]	@ (8016e48 <DisplayUdf::ShowUniverseArtNetNode()+0xc0>)
 8016e18:	5d09      	ldrb	r1, [r1, r4]
 8016e1a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8016e1e:	4628      	mov	r0, r5
 8016e20:	f7f2 fbc0 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016e24:	3401      	adds	r4, #1
 8016e26:	2c04      	cmp	r4, #4
 8016e28:	d1bb      	bne.n	8016da2 <DisplayUdf::ShowUniverseArtNetNode()+0x1a>
 8016e2a:	e7b7      	b.n	8016d9c <DisplayUdf::ShowUniverseArtNetNode()+0x14>
 8016e2c:	2400      	movs	r4, #0
 8016e2e:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8016e32:	e7ba      	b.n	8016daa <DisplayUdf::ShowUniverseArtNetNode()+0x22>
 8016e34:	2000064c 	andcs	r0, r0, ip, asr #12
 8016e38:	20000000 	andcs	r0, r0, r0
 8016e3c:	0801bc0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, ip, sp, pc}
 8016e40:	0801bc15 	stmdaeq	r1, {r0, r2, r4, sl, fp, ip, sp, pc}
 8016e44:	0801b940 	stmdaeq	r1, {r6, r8, fp, ip, sp, pc}
 8016e48:	0801c2e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, lr, pc}
 8016e4c:	0801bc11 	stmdaeq	r1, {r0, r4, sl, fp, ip, sp, pc}
 8016e50:	0801bc1d 	stmdaeq	r1, {r0, r2, r3, r4, sl, fp, ip, sp, pc}
 8016e54:	0801bc22 	stmdaeq	r1, {r1, r5, sl, fp, ip, sp, pc}

08016e58 <DisplayUdf::ShowArtNetNode()>:
 8016e58:	4b15      	ldr	r3, [pc, #84]	@ (8016eb0 <DisplayUdf::ShowArtNetNode()+0x58>)
 8016e5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e5c:	681d      	ldr	r5, [r3, #0]
 8016e5e:	4604      	mov	r4, r0
 8016e60:	f7ff ff92 	bl	8016d88 <DisplayUdf::ShowUniverseArtNetNode()>
 8016e64:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f892 1144 	ldrb.w	r1, [r2, #324]	@ 0x144
 8016e6e:	f892 3143 	ldrb.w	r3, [r2, #323]	@ 0x143
 8016e72:	4a10      	ldr	r2, [pc, #64]	@ (8016eb4 <DisplayUdf::ShowArtNetNode()+0x5c>)
 8016e74:	440b      	add	r3, r1
 8016e76:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 8016e7a:	f7f2 fb93 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016e7e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8016e80:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 8016e84:	2a02      	cmp	r2, #2
 8016e86:	d001      	beq.n	8016e8c <DisplayUdf::ShowArtNetNode()+0x34>
 8016e88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016e8a:	b92b      	cbnz	r3, 8016e98 <DisplayUdf::ShowArtNetNode()+0x40>
 8016e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8016eb8 <DisplayUdf::ShowArtNetNode()+0x60>)
 8016e8e:	4620      	mov	r0, r4
 8016e90:	f7f2 fb88 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016e94:	b003      	add	sp, #12
 8016e96:	bd30      	pop	{r4, r5, pc}
 8016e98:	4808      	ldr	r0, [pc, #32]	@ (8016ebc <DisplayUdf::ShowArtNetNode()+0x64>)
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	4b08      	ldr	r3, [pc, #32]	@ (8016ec0 <DisplayUdf::ShowArtNetNode()+0x68>)
 8016e9e:	2a00      	cmp	r2, #0
 8016ea0:	bf18      	it	ne
 8016ea2:	4603      	movne	r3, r0
 8016ea4:	4a07      	ldr	r2, [pc, #28]	@ (8016ec4 <DisplayUdf::ShowArtNetNode()+0x6c>)
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7f2 fb7c 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016eac:	e7f2      	b.n	8016e94 <DisplayUdf::ShowArtNetNode()+0x3c>
 8016eae:	bf00      	nop
 8016eb0:	2000064c 	andcs	r0, r0, ip, asr #12
 8016eb4:	0801c2fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, lr, pc}
 8016eb8:	0801c303 	stmdaeq	r1, {r0, r1, r8, r9, lr, pc}
 8016ebc:	0801bcc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, sl, fp, ip, sp, pc}
 8016ec0:	0801c2f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r9, lr, pc}
 8016ec4:	0801c30a 	stmdaeq	r1, {r1, r3, r8, r9, lr, pc}

08016ec8 <Display::ClearEndOfLine() [clone .isra.0]>:
 8016ec8:	b108      	cbz	r0, 8016ece <Display::ClearEndOfLine() [clone .isra.0]+0x6>
 8016eca:	2301      	movs	r3, #1
 8016ecc:	7303      	strb	r3, [r0, #12]
 8016ece:	4770      	bx	lr

08016ed0 <Display::Write(unsigned long, char const*) [clone .isra.0]>:
 8016ed0:	b430      	push	{r4, r5}
 8016ed2:	b160      	cbz	r0, 8016eee <Display::Write(unsigned long, char const*) [clone .isra.0]+0x1e>
 8016ed4:	6845      	ldr	r5, [r0, #4]
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	5cd4      	ldrb	r4, [r2, r3]
 8016eda:	b11c      	cbz	r4, 8016ee4 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x14>
 8016edc:	1c5c      	adds	r4, r3, #1
 8016ede:	429d      	cmp	r5, r3
 8016ee0:	4623      	mov	r3, r4
 8016ee2:	d8f9      	bhi.n	8016ed8 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x8>
 8016ee4:	6804      	ldr	r4, [r0, #0]
 8016ee6:	69e4      	ldr	r4, [r4, #28]
 8016ee8:	46a4      	mov	ip, r4
 8016eea:	bc30      	pop	{r4, r5}
 8016eec:	4760      	bx	ip
 8016eee:	bc30      	pop	{r4, r5}
 8016ef0:	4770      	bx	lr
	...

08016ef4 <net::display_emac_config()>:
 8016ef4:	4b06      	ldr	r3, [pc, #24]	@ (8016f10 <net::display_emac_config()+0x1c>)
 8016ef6:	4a07      	ldr	r2, [pc, #28]	@ (8016f14 <net::display_emac_config()+0x20>)
 8016ef8:	b510      	push	{r4, lr}
 8016efa:	681c      	ldr	r4, [r3, #0]
 8016efc:	69a0      	ldr	r0, [r4, #24]
 8016efe:	f7ff ffe3 	bl	8016ec8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016f02:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7f2 fb4c 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016f0c:	bd10      	pop	{r4, pc}
 8016f0e:	bf00      	nop
 8016f10:	2000cc30 	andcs	ip, r0, r0, lsr ip
 8016f14:	0801c314 	stmdaeq	r1, {r2, r4, r8, r9, lr, pc}

08016f18 <net::display_emac_start()>:
 8016f18:	4b06      	ldr	r3, [pc, #24]	@ (8016f34 <net::display_emac_start()+0x1c>)
 8016f1a:	4a07      	ldr	r2, [pc, #28]	@ (8016f38 <net::display_emac_start()+0x20>)
 8016f1c:	b510      	push	{r4, lr}
 8016f1e:	681c      	ldr	r4, [r3, #0]
 8016f20:	69a0      	ldr	r0, [r4, #24]
 8016f22:	f7ff ffd1 	bl	8016ec8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016f26:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 8016f2a:	4620      	mov	r0, r4
 8016f2c:	f7f2 fb3a 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016f30:	bd10      	pop	{r4, pc}
 8016f32:	bf00      	nop
 8016f34:	2000cc30 	andcs	ip, r0, r0, lsr ip
 8016f38:	0801c322 	stmdaeq	r1, {r1, r5, r8, r9, lr, pc}

08016f3c <net::display_emac_status(bool)>:
 8016f3c:	4b09      	ldr	r3, [pc, #36]	@ (8016f64 <net::display_emac_status(bool)+0x28>)
 8016f3e:	490a      	ldr	r1, [pc, #40]	@ (8016f68 <net::display_emac_status(bool)+0x2c>)
 8016f40:	b510      	push	{r4, lr}
 8016f42:	681c      	ldr	r4, [r3, #0]
 8016f44:	4602      	mov	r2, r0
 8016f46:	69a0      	ldr	r0, [r4, #24]
 8016f48:	f7ff ffbe 	bl	8016ec8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016f4c:	4b07      	ldr	r3, [pc, #28]	@ (8016f6c <net::display_emac_status(bool)+0x30>)
 8016f4e:	4620      	mov	r0, r4
 8016f50:	2a00      	cmp	r2, #0
 8016f52:	bf08      	it	eq
 8016f54:	460b      	moveq	r3, r1
 8016f56:	4a06      	ldr	r2, [pc, #24]	@ (8016f70 <net::display_emac_status(bool)+0x34>)
 8016f58:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 8016f5c:	f7f2 fb22 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016f60:	bd10      	pop	{r4, pc}
 8016f62:	bf00      	nop
 8016f64:	2000cc30 	andcs	ip, r0, r0, lsr ip
 8016f68:	0801c334 	stmdaeq	r1, {r2, r4, r5, r8, r9, lr, pc}
 8016f6c:	0801c331 	stmdaeq	r1, {r0, r4, r5, r8, r9, lr, pc}
 8016f70:	0801c339 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, lr, pc}

08016f74 <net::display_ip()>:
 8016f74:	b508      	push	{r3, lr}
 8016f76:	4b02      	ldr	r3, [pc, #8]	@ (8016f80 <net::display_ip()+0xc>)
 8016f78:	6818      	ldr	r0, [r3, #0]
 8016f7a:	f7ff fc5d 	bl	8016838 <DisplayUdf::ShowIpAddress()>
 8016f7e:	bd08      	pop	{r3, pc}
 8016f80:	2000cc30 	andcs	ip, r0, r0, lsr ip

08016f84 <net::display_netmask()>:
 8016f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f86:	4b0d      	ldr	r3, [pc, #52]	@ (8016fbc <net::display_netmask()+0x38>)
 8016f88:	681c      	ldr	r4, [r3, #0]
 8016f8a:	69a0      	ldr	r0, [r4, #24]
 8016f8c:	f7ff ff9c 	bl	8016ec8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016f90:	4b0b      	ldr	r3, [pc, #44]	@ (8016fc0 <net::display_netmask()+0x3c>)
 8016f92:	f894 1048 	ldrb.w	r1, [r4, #72]	@ 0x48
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	0e1a      	lsrs	r2, r3, #24
 8016f9a:	9202      	str	r2, [sp, #8]
 8016f9c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016fa0:	9201      	str	r2, [sp, #4]
 8016fa2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8016fa6:	9200      	str	r2, [sp, #0]
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	4a06      	ldr	r2, [pc, #24]	@ (8016fc4 <net::display_netmask()+0x40>)
 8016fac:	4620      	mov	r0, r4
 8016fae:	f7f2 faf9 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	f7ff fc40 	bl	8016838 <DisplayUdf::ShowIpAddress()>
 8016fb8:	b004      	add	sp, #16
 8016fba:	bd10      	pop	{r4, pc}
 8016fbc:	2000cc30 	andcs	ip, r0, r0, lsr ip
 8016fc0:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8016fc4:	0801c2d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, lr, pc}

08016fc8 <net::display_gateway()>:
 8016fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016fca:	4b0c      	ldr	r3, [pc, #48]	@ (8016ffc <net::display_gateway()+0x34>)
 8016fcc:	681c      	ldr	r4, [r3, #0]
 8016fce:	69a0      	ldr	r0, [r4, #24]
 8016fd0:	f7ff ff7a 	bl	8016ec8 <Display::ClearEndOfLine() [clone .isra.0]>
 8016fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8017000 <net::display_gateway()+0x38>)
 8016fd6:	f894 104e 	ldrb.w	r1, [r4, #78]	@ 0x4e
 8016fda:	689b      	ldr	r3, [r3, #8]
 8016fdc:	0e1a      	lsrs	r2, r3, #24
 8016fde:	9202      	str	r2, [sp, #8]
 8016fe0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016fe4:	9201      	str	r2, [sp, #4]
 8016fe6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8016fea:	9200      	str	r2, [sp, #0]
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	4a05      	ldr	r2, [pc, #20]	@ (8017004 <net::display_gateway()+0x3c>)
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f7f2 fad7 	bl	80095a4 <Display::Printf(unsigned long, char const*, ...)>
 8016ff6:	b004      	add	sp, #16
 8016ff8:	bd10      	pop	{r4, pc}
 8016ffa:	bf00      	nop
 8016ffc:	2000cc30 	andcs	ip, r0, r0, lsr ip
 8017000:	2000cb88 	andcs	ip, r0, r8, lsl #23
 8017004:	0801c2c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, lr, pc}

08017008 <net::display_hostname()>:
 8017008:	b508      	push	{r3, lr}
 801700a:	4b07      	ldr	r3, [pc, #28]	@ (8017028 <net::display_hostname()+0x20>)
 801700c:	6819      	ldr	r1, [r3, #0]
 801700e:	6988      	ldr	r0, [r1, #24]
 8017010:	f7ff ff5a 	bl	8016ec8 <Display::ClearEndOfLine() [clone .isra.0]>
 8017014:	4b05      	ldr	r3, [pc, #20]	@ (801702c <net::display_hostname()+0x24>)
 8017016:	f891 1043 	ldrb.w	r1, [r1, #67]	@ 0x43
 801701a:	681a      	ldr	r2, [r3, #0]
 801701c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017020:	3216      	adds	r2, #22
 8017022:	f7ff bf55 	b.w	8016ed0 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 8017026:	bf00      	nop
 8017028:	2000cc30 	andcs	ip, r0, r0, lsr ip
 801702c:	2000cb68 	andcs	ip, r0, r8, ror #22

08017030 <ConfigStore::GetStoreOffset(configstore::Store)>:
 8017030:	b510      	push	{r4, lr}
 8017032:	4a05      	ldr	r2, [pc, #20]	@ (8017048 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 8017034:	2300      	movs	r3, #0
 8017036:	2020      	movs	r0, #32
 8017038:	428b      	cmp	r3, r1
 801703a:	d100      	bne.n	801703e <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 801703c:	bd10      	pop	{r4, pc}
 801703e:	f852 4b04 	ldr.w	r4, [r2], #4
 8017042:	3301      	adds	r3, #1
 8017044:	4420      	add	r0, r4
 8017046:	e7f7      	b.n	8017038 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 8017048:	0801f0c0 	stmdaeq	r1, {r6, r7, ip, sp, lr, pc}

0801704c <ConfigStore::ConfigStore()>:
 801704c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017050:	b085      	sub	sp, #20
 8017052:	4605      	mov	r5, r0
 8017054:	f000 f9e4 	bl	8017420 <StoreDevice::StoreDevice()>
 8017058:	4b30      	ldr	r3, [pc, #192]	@ (801711c <ConfigStore::ConfigStore()+0xd0>)
 801705a:	4c31      	ldr	r4, [pc, #196]	@ (8017120 <ConfigStore::ConfigStore()+0xd4>)
 801705c:	601d      	str	r5, [r3, #0]
 801705e:	4b31      	ldr	r3, [pc, #196]	@ (8017124 <ConfigStore::ConfigStore()+0xd8>)
 8017060:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8017140 <ConfigStore::ConfigStore()+0xf4>
 8017064:	601c      	str	r4, [r3, #0]
 8017066:	4628      	mov	r0, r5
 8017068:	782b      	ldrb	r3, [r5, #0]
 801706a:	f888 3000 	strb.w	r3, [r8]
 801706e:	f000 f9e8 	bl	8017442 <StoreDevice::GetSectorSize() const>
 8017072:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8017076:	4606      	mov	r6, r0
 8017078:	fbb7 f9f0 	udiv	r9, r7, r0
 801707c:	4628      	mov	r0, r5
 801707e:	f000 f9dd 	bl	801743c <StoreDevice::GetSize() const>
 8017082:	4b29      	ldr	r3, [pc, #164]	@ (8017128 <ConfigStore::ConfigStore()+0xdc>)
 8017084:	fb09 0116 	mls	r1, r9, r6, r0
 8017088:	6019      	str	r1, [r3, #0]
 801708a:	f898 3000 	ldrb.w	r3, [r8]
 801708e:	3c10      	subs	r4, #16
 8017090:	b133      	cbz	r3, 80170a0 <ConfigStore::ConfigStore()+0x54>
 8017092:	ab03      	add	r3, sp, #12
 8017094:	9300      	str	r3, [sp, #0]
 8017096:	463a      	mov	r2, r7
 8017098:	4623      	mov	r3, r4
 801709a:	4628      	mov	r0, r5
 801709c:	f000 f9d4 	bl	8017448 <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>
 80170a0:	4822      	ldr	r0, [pc, #136]	@ (801712c <ConfigStore::ConfigStore()+0xe0>)
 80170a2:	4b23      	ldr	r3, [pc, #140]	@ (8017130 <ConfigStore::ConfigStore()+0xe4>)
 80170a4:	2104      	movs	r1, #4
 80170a6:	2201      	movs	r2, #1
 80170a8:	f810 6b01 	ldrb.w	r6, [r0], #1
 80170ac:	f813 7b01 	ldrb.w	r7, [r3], #1
 80170b0:	42be      	cmp	r6, r7
 80170b2:	bf1c      	itt	ne
 80170b4:	f803 6c01 	strbne.w	r6, [r3, #-1]
 80170b8:	2200      	movne	r2, #0
 80170ba:	3901      	subs	r1, #1
 80170bc:	d1f4      	bne.n	80170a8 <ConfigStore::ConfigStore()+0x5c>
 80170be:	b952      	cbnz	r2, 80170d6 <ConfigStore::ConfigStore()+0x8a>
 80170c0:	4a17      	ldr	r2, [pc, #92]	@ (8017120 <ConfigStore::ConfigStore()+0xd4>)
 80170c2:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80170c6:	4608      	mov	r0, r1
 80170c8:	3b01      	subs	r3, #1
 80170ca:	f802 0b01 	strb.w	r0, [r2], #1
 80170ce:	d1fb      	bne.n	80170c8 <ConfigStore::ConfigStore()+0x7c>
 80170d0:	4b18      	ldr	r3, [pc, #96]	@ (8017134 <ConfigStore::ConfigStore()+0xe8>)
 80170d2:	2201      	movs	r2, #1
 80170d4:	601a      	str	r2, [r3, #0]
 80170d6:	4818      	ldr	r0, [pc, #96]	@ (8017138 <ConfigStore::ConfigStore()+0xec>)
 80170d8:	2200      	movs	r2, #0
 80170da:	2320      	movs	r3, #32
 80170dc:	f850 6b04 	ldr.w	r6, [r0], #4
 80170e0:	3201      	adds	r2, #1
 80170e2:	2a1b      	cmp	r2, #27
 80170e4:	4433      	add	r3, r6
 80170e6:	d1f9      	bne.n	80170dc <ConfigStore::ConfigStore()+0x90>
 80170e8:	4a14      	ldr	r2, [pc, #80]	@ (801713c <ConfigStore::ConfigStore()+0xf0>)
 80170ea:	2600      	movs	r6, #0
 80170ec:	6013      	str	r3, [r2, #0]
 80170ee:	4628      	mov	r0, r5
 80170f0:	f7ff ff9e 	bl	8017030 <ConfigStore::GetStoreOffset(configstore::Store)>
 80170f4:	5823      	ldr	r3, [r4, r0]
 80170f6:	3101      	adds	r1, #1
 80170f8:	3301      	adds	r3, #1
 80170fa:	bf08      	it	eq
 80170fc:	5026      	streq	r6, [r4, r0]
 80170fe:	291b      	cmp	r1, #27
 8017100:	d1f5      	bne.n	80170ee <ConfigStore::ConfigStore()+0xa2>
 8017102:	6923      	ldr	r3, [r4, #16]
 8017104:	3301      	adds	r3, #1
 8017106:	d104      	bne.n	8017112 <ConfigStore::ConfigStore()+0xc6>
 8017108:	2300      	movs	r3, #0
 801710a:	7423      	strb	r3, [r4, #16]
 801710c:	7463      	strb	r3, [r4, #17]
 801710e:	74a3      	strb	r3, [r4, #18]
 8017110:	74e3      	strb	r3, [r4, #19]
 8017112:	4628      	mov	r0, r5
 8017114:	b005      	add	sp, #20
 8017116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801711a:	bf00      	nop
 801711c:	2000cc34 	andcs	ip, r0, r4, lsr ip
 8017120:	40024010 	andmi	r4, r2, r0, lsl r0
 8017124:	2001a65c 	andcs	sl, r1, ip, asr r6
 8017128:	2000cc40 	andcs	ip, r0, r0, asr #24
 801712c:	0801f12c 	stmdaeq	r1, {r2, r3, r5, r8, ip, sp, lr, pc}
 8017130:	40024000 	andmi	r4, r2, r0
 8017134:	2000cc44 	andcs	ip, r0, r4, asr #24
 8017138:	0801f0c0 	stmdaeq	r1, {r6, r7, ip, sp, lr, pc}
 801713c:	2000cc3c 	andcs	ip, r0, ip, lsr ip
 8017140:	2000cc48 	andcs	ip, r0, r8, asr #24

08017144 <ConfigStore::ResetSetList(configstore::Store)>:
 8017144:	b508      	push	{r3, lr}
 8017146:	f7ff ff73 	bl	8017030 <ConfigStore::GetStoreOffset(configstore::Store)>
 801714a:	4905      	ldr	r1, [pc, #20]	@ (8017160 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 801714c:	1842      	adds	r2, r0, r1
 801714e:	2300      	movs	r3, #0
 8017150:	540b      	strb	r3, [r1, r0]
 8017152:	7053      	strb	r3, [r2, #1]
 8017154:	7093      	strb	r3, [r2, #2]
 8017156:	70d3      	strb	r3, [r2, #3]
 8017158:	4b02      	ldr	r3, [pc, #8]	@ (8017164 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 801715a:	2201      	movs	r2, #1
 801715c:	601a      	str	r2, [r3, #0]
 801715e:	bd08      	pop	{r3, pc}
 8017160:	40024000 	andmi	r4, r2, r0
 8017164:	2000cc44 	andcs	ip, r0, r4, asr #24

08017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>:
 8017168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801716a:	4614      	mov	r4, r2
 801716c:	461d      	mov	r5, r3
 801716e:	f7ff ff5f 	bl	8017030 <ConfigStore::GetStoreOffset(configstore::Store)>
 8017172:	490e      	ldr	r1, [pc, #56]	@ (80171ac <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x44>)
 8017174:	1902      	adds	r2, r0, r4
 8017176:	9c06      	ldr	r4, [sp, #24]
 8017178:	440a      	add	r2, r1
 801717a:	1e6b      	subs	r3, r5, #1
 801717c:	4414      	add	r4, r2
 801717e:	2500      	movs	r5, #0
 8017180:	42a2      	cmp	r2, r4
 8017182:	d10a      	bne.n	801719a <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x32>
 8017184:	b145      	cbz	r5, 8017198 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x30>
 8017186:	9b08      	ldr	r3, [sp, #32]
 8017188:	9a07      	ldr	r2, [sp, #28]
 801718a:	4418      	add	r0, r3
 801718c:	580b      	ldr	r3, [r1, r0]
 801718e:	4313      	orrs	r3, r2
 8017190:	500b      	str	r3, [r1, r0]
 8017192:	4b07      	ldr	r3, [pc, #28]	@ (80171b0 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x48>)
 8017194:	2201      	movs	r2, #1
 8017196:	601a      	str	r2, [r3, #0]
 8017198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801719a:	7817      	ldrb	r7, [r2, #0]
 801719c:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80171a0:	42b7      	cmp	r7, r6
 80171a2:	bf1c      	itt	ne
 80171a4:	7016      	strbne	r6, [r2, #0]
 80171a6:	2501      	movne	r5, #1
 80171a8:	3201      	adds	r2, #1
 80171aa:	e7e9      	b.n	8017180 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x18>
 80171ac:	40024000 	andmi	r4, r2, r0
 80171b0:	2000cc44 	andcs	ip, r0, r4, asr #24

080171b4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>:
 80171b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171b8:	b085      	sub	sp, #20
 80171ba:	461e      	mov	r6, r3
 80171bc:	4615      	mov	r5, r2
 80171be:	4607      	mov	r7, r0
 80171c0:	f7ff ff36 	bl	8017030 <ConfigStore::GetStoreOffset(configstore::Store)>
 80171c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171c6:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 80171ca:	18c4      	adds	r4, r0, r3
 80171cc:	4b10      	ldr	r3, [pc, #64]	@ (8017210 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x5c>)
 80171ce:	441c      	add	r4, r3
 80171d0:	4688      	mov	r8, r1
 80171d2:	4623      	mov	r3, r4
 80171d4:	1932      	adds	r2, r6, r4
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d10c      	bne.n	80171f4 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x40>
 80171da:	f1b9 0f00 	cmp.w	r9, #0
 80171de:	d00f      	beq.n	8017200 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x4c>
 80171e0:	2200      	movs	r2, #0
 80171e2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80171e6:	9600      	str	r6, [sp, #0]
 80171e8:	462b      	mov	r3, r5
 80171ea:	4641      	mov	r1, r8
 80171ec:	4638      	mov	r0, r7
 80171ee:	f7ff ffbb 	bl	8017168 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80171f2:	e005      	b.n	8017200 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x4c>
 80171f4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80171f8:	2900      	cmp	r1, #0
 80171fa:	d0ec      	beq.n	80171d6 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x22>
 80171fc:	4294      	cmp	r4, r2
 80171fe:	d102      	bne.n	8017206 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x52>
 8017200:	b005      	add	sp, #20
 8017202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017206:	f814 3b01 	ldrb.w	r3, [r4], #1
 801720a:	f805 3b01 	strb.w	r3, [r5], #1
 801720e:	e7f5      	b.n	80171fc <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x48>
 8017210:	40024000 	andmi	r4, r2, r0

08017214 <ConfigStore::Flash()>:
 8017214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017216:	4c24      	ldr	r4, [pc, #144]	@ (80172a8 <ConfigStore::Flash()+0x94>)
 8017218:	6823      	ldr	r3, [r4, #0]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d041      	beq.n	80172a2 <ConfigStore::Flash()+0x8e>
 801721e:	3b01      	subs	r3, #1
 8017220:	2b05      	cmp	r3, #5
 8017222:	d82f      	bhi.n	8017284 <ConfigStore::Flash()+0x70>
 8017224:	e8df f003 	tbb	[pc, r3]
 8017228:	2c140b03 			@ <UNDEFINED> instruction: 0x2c140b03
 801722c:	4b1f2e23 	blmi	87e2ac0 <_sidata+0x7c33bc>
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	4b1f      	ldr	r3, [pc, #124]	@ (80172b0 <ConfigStore::Flash()+0x9c>)
 8017234:	601a      	str	r2, [r3, #0]
 8017236:	2302      	movs	r3, #2
 8017238:	6023      	str	r3, [r4, #0]
 801723a:	2001      	movs	r0, #1
 801723c:	e02f      	b.n	801729e <ConfigStore::Flash()+0x8a>
 801723e:	4b1b      	ldr	r3, [pc, #108]	@ (80172ac <ConfigStore::Flash()+0x98>)
 8017240:	4a1b      	ldr	r2, [pc, #108]	@ (80172b0 <ConfigStore::Flash()+0x9c>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	6812      	ldr	r2, [r2, #0]
 8017246:	1a9b      	subs	r3, r3, r2
 8017248:	2b63      	cmp	r3, #99	@ 0x63
 801724a:	d9f6      	bls.n	801723a <ConfigStore::Flash()+0x26>
 801724c:	2303      	movs	r3, #3
 801724e:	e7f3      	b.n	8017238 <ConfigStore::Flash()+0x24>
 8017250:	4918      	ldr	r1, [pc, #96]	@ (80172b4 <ConfigStore::Flash()+0xa0>)
 8017252:	ab03      	add	r3, sp, #12
 8017254:	6809      	ldr	r1, [r1, #0]
 8017256:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801725a:	f000 f8fa 	bl	8017452 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>
 801725e:	2800      	cmp	r0, #0
 8017260:	d0eb      	beq.n	801723a <ConfigStore::Flash()+0x26>
 8017262:	4b12      	ldr	r3, [pc, #72]	@ (80172ac <ConfigStore::Flash()+0x98>)
 8017264:	681a      	ldr	r2, [r3, #0]
 8017266:	4b12      	ldr	r3, [pc, #72]	@ (80172b0 <ConfigStore::Flash()+0x9c>)
 8017268:	601a      	str	r2, [r3, #0]
 801726a:	2305      	movs	r3, #5
 801726c:	e7e4      	b.n	8017238 <ConfigStore::Flash()+0x24>
 801726e:	4b0f      	ldr	r3, [pc, #60]	@ (80172ac <ConfigStore::Flash()+0x98>)
 8017270:	4a0f      	ldr	r2, [pc, #60]	@ (80172b0 <ConfigStore::Flash()+0x9c>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	6812      	ldr	r2, [r2, #0]
 8017276:	1a9b      	subs	r3, r3, r2
 8017278:	2b63      	cmp	r3, #99	@ 0x63
 801727a:	d9de      	bls.n	801723a <ConfigStore::Flash()+0x26>
 801727c:	2304      	movs	r3, #4
 801727e:	e7db      	b.n	8017238 <ConfigStore::Flash()+0x24>
 8017280:	2306      	movs	r3, #6
 8017282:	e7d9      	b.n	8017238 <ConfigStore::Flash()+0x24>
 8017284:	ab03      	add	r3, sp, #12
 8017286:	4a0c      	ldr	r2, [pc, #48]	@ (80172b8 <ConfigStore::Flash()+0xa4>)
 8017288:	490a      	ldr	r1, [pc, #40]	@ (80172b4 <ConfigStore::Flash()+0xa0>)
 801728a:	9300      	str	r3, [sp, #0]
 801728c:	6812      	ldr	r2, [r2, #0]
 801728e:	4b0b      	ldr	r3, [pc, #44]	@ (80172bc <ConfigStore::Flash()+0xa8>)
 8017290:	6809      	ldr	r1, [r1, #0]
 8017292:	f000 f8e2 	bl	801745a <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>
 8017296:	2800      	cmp	r0, #0
 8017298:	d0cf      	beq.n	801723a <ConfigStore::Flash()+0x26>
 801729a:	2000      	movs	r0, #0
 801729c:	6020      	str	r0, [r4, #0]
 801729e:	b004      	add	sp, #16
 80172a0:	bd10      	pop	{r4, pc}
 80172a2:	4618      	mov	r0, r3
 80172a4:	e7fb      	b.n	801729e <ConfigStore::Flash()+0x8a>
 80172a6:	bf00      	nop
 80172a8:	2000cc44 	andcs	ip, r0, r4, asr #24
 80172ac:	2001a628 	andcs	sl, r1, r8, lsr #12
 80172b0:	2000cc38 	andcs	ip, r0, r8, lsr ip
 80172b4:	2000cc40 	andcs	ip, r0, r0, asr #24
 80172b8:	2000cc3c 	andcs	ip, r0, ip, lsr ip
 80172bc:	40024000 	andmi	r4, r2, r0

080172c0 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]>:
 80172c0:	b510      	push	{r4, lr}
 80172c2:	4a0d      	ldr	r2, [pc, #52]	@ (80172f8 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x38>)
 80172c4:	f44f 6461 	mov.w	r4, #3600	@ 0xe10
 80172c8:	6913      	ldr	r3, [r2, #16]
 80172ca:	fb93 f3f4 	sdiv	r3, r3, r4
 80172ce:	b25b      	sxtb	r3, r3
 80172d0:	7003      	strb	r3, [r0, #0]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	6912      	ldr	r2, [r2, #16]
 80172d6:	dd08      	ble.n	80172ea <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x2a>
 80172d8:	4808      	ldr	r0, [pc, #32]	@ (80172fc <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x3c>)
 80172da:	fb00 2203 	mla	r2, r0, r3, r2
 80172de:	233c      	movs	r3, #60	@ 0x3c
 80172e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80172e4:	b2d3      	uxtb	r3, r2
 80172e6:	700b      	strb	r3, [r1, #0]
 80172e8:	bd10      	pop	{r4, pc}
 80172ea:	4363      	muls	r3, r4
 80172ec:	1a9b      	subs	r3, r3, r2
 80172ee:	223c      	movs	r2, #60	@ 0x3c
 80172f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80172f4:	b2db      	uxtb	r3, r3
 80172f6:	e7f6      	b.n	80172e6 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x26>
 80172f8:	40024000 	andmi	r4, r2, r0
 80172fc:	fffff1f0 			@ <UNDEFINED> instruction: 0xfffff1f0

08017300 <EnvParams::EnvParams()>:
 8017300:	4770      	bx	lr
	...

08017304 <EnvParams::LoadAndSet(char const*, unsigned long)>:
 8017304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017306:	460c      	mov	r4, r1
 8017308:	4615      	mov	r5, r2
 801730a:	4907      	ldr	r1, [pc, #28]	@ (8017328 <EnvParams::LoadAndSet(char const*, unsigned long)+0x24>)
 801730c:	4602      	mov	r2, r0
 801730e:	4668      	mov	r0, sp
 8017310:	f000 fa2a 	bl	8017768 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8017314:	462a      	mov	r2, r5
 8017316:	4621      	mov	r1, r4
 8017318:	4668      	mov	r0, sp
 801731a:	f000 fa29 	bl	8017770 <ReadConfigFile::Read(char const*, unsigned int)>
 801731e:	4668      	mov	r0, sp
 8017320:	f000 fa25 	bl	801776e <ReadConfigFile::~ReadConfigFile()>
 8017324:	b003      	add	sp, #12
 8017326:	bd30      	pop	{r4, r5, pc}
 8017328:	080173b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, ip, sp, lr}

0801732c <EnvParams::callbackFunction(char const*)>:
 801732c:	b513      	push	{r0, r1, r4, lr}
 801732e:	4608      	mov	r0, r1
 8017330:	f10d 0307 	add.w	r3, sp, #7
 8017334:	491c      	ldr	r1, [pc, #112]	@ (80173a8 <EnvParams::callbackFunction(char const*)+0x7c>)
 8017336:	f10d 0206 	add.w	r2, sp, #6
 801733a:	f000 fb5a 	bl	80179f2 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)>
 801733e:	bb70      	cbnz	r0, 801739e <EnvParams::callbackFunction(char const*)+0x72>
 8017340:	f99d 1006 	ldrsb.w	r1, [sp, #6]
 8017344:	f101 030c 	add.w	r3, r1, #12
 8017348:	b2db      	uxtb	r3, r3
 801734a:	2b1a      	cmp	r3, #26
 801734c:	d827      	bhi.n	801739e <EnvParams::callbackFunction(char const*)+0x72>
 801734e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017352:	bb32      	cbnz	r2, 80173a2 <EnvParams::callbackFunction(char const*)+0x76>
 8017354:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8017358:	434b      	muls	r3, r1
 801735a:	4a14      	ldr	r2, [pc, #80]	@ (80173ac <EnvParams::callbackFunction(char const*)+0x80>)
 801735c:	6911      	ldr	r1, [r2, #16]
 801735e:	4299      	cmp	r1, r3
 8017360:	bf1f      	itttt	ne
 8017362:	6113      	strne	r3, [r2, #16]
 8017364:	4b12      	ldrne	r3, [pc, #72]	@ (80173b0 <EnvParams::callbackFunction(char const*)+0x84>)
 8017366:	2201      	movne	r2, #1
 8017368:	601a      	strne	r2, [r3, #0]
 801736a:	e018      	b.n	801739e <EnvParams::callbackFunction(char const*)+0x72>
 801736c:	f993 4000 	ldrsb.w	r4, [r3]
 8017370:	428c      	cmp	r4, r1
 8017372:	d111      	bne.n	8017398 <EnvParams::callbackFunction(char const*)+0x6c>
 8017374:	785c      	ldrb	r4, [r3, #1]
 8017376:	4294      	cmp	r4, r2
 8017378:	d10e      	bne.n	8017398 <EnvParams::callbackFunction(char const*)+0x6c>
 801737a:	2900      	cmp	r1, #0
 801737c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8017380:	fb01 f303 	mul.w	r3, r1, r3
 8017384:	bfcb      	itete	gt
 8017386:	ebc2 1202 	rsbgt	r2, r2, r2, lsl #4
 801738a:	f06f 013b 	mvnle.w	r1, #59	@ 0x3b
 801738e:	eb03 0382 	addgt.w	r3, r3, r2, lsl #2
 8017392:	fb01 3302 	mlale	r3, r1, r2, r3
 8017396:	e7e0      	b.n	801735a <EnvParams::callbackFunction(char const*)+0x2e>
 8017398:	3302      	adds	r3, #2
 801739a:	3801      	subs	r0, #1
 801739c:	d1e6      	bne.n	801736c <EnvParams::callbackFunction(char const*)+0x40>
 801739e:	b002      	add	sp, #8
 80173a0:	bd10      	pop	{r4, pc}
 80173a2:	4b04      	ldr	r3, [pc, #16]	@ (80173b4 <EnvParams::callbackFunction(char const*)+0x88>)
 80173a4:	200c      	movs	r0, #12
 80173a6:	e7f8      	b.n	801739a <EnvParams::callbackFunction(char const*)+0x6e>
 80173a8:	0801f146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, lr, pc}
 80173ac:	40024000 	andmi	r4, r2, r0
 80173b0:	2000cc44 	andcs	ip, r0, r4, asr #24
 80173b4:	0801f130 	stmdaeq	r1, {r4, r5, r8, ip, sp, lr, pc}

080173b8 <EnvParams::staticCallbackFunction(void*, char const*)>:
 80173b8:	f7ff bfb8 	b.w	801732c <EnvParams::callbackFunction(char const*)>

080173bc <EnvParams::Builder(char*, unsigned long, unsigned long&)>:
 80173bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173be:	461c      	mov	r4, r3
 80173c0:	a801      	add	r0, sp, #4
 80173c2:	4613      	mov	r3, r2
 80173c4:	460a      	mov	r2, r1
 80173c6:	4914      	ldr	r1, [pc, #80]	@ (8017418 <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x5c>)
 80173c8:	f000 f8f8 	bl	80175bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 80173cc:	f10d 0103 	add.w	r1, sp, #3
 80173d0:	f10d 0002 	add.w	r0, sp, #2
 80173d4:	f7ff ff74 	bl	80172c0 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]>
 80173d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80173dc:	f99d 2002 	ldrsb.w	r2, [sp, #2]
 80173e0:	490e      	ldr	r1, [pc, #56]	@ (801741c <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x60>)
 80173e2:	a801      	add	r0, sp, #4
 80173e4:	f000 f970 	bl	80176c8 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)>
 80173e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80173ec:	b17b      	cbz	r3, 801740e <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x52>
 80173ee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80173f2:	9b01      	ldr	r3, [sp, #4]
 80173f4:	4413      	add	r3, r2
 80173f6:	227d      	movs	r2, #125	@ 0x7d
 80173f8:	f803 2c01 	strb.w	r2, [r3, #-1]
 80173fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017400:	9901      	ldr	r1, [sp, #4]
 8017402:	54ca      	strb	r2, [r1, r3]
 8017404:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017408:	3301      	adds	r3, #1
 801740a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801740e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017412:	6023      	str	r3, [r4, #0]
 8017414:	b004      	add	sp, #16
 8017416:	bd10      	pop	{r4, pc}
 8017418:	0801f151 	stmdaeq	r1, {r0, r4, r6, r8, ip, sp, lr, pc}
 801741c:	0801f146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, lr, pc}

08017420 <StoreDevice::StoreDevice()>:
 8017420:	b510      	push	{r4, lr}
 8017422:	2301      	movs	r3, #1
 8017424:	4604      	mov	r4, r0
 8017426:	7003      	strb	r3, [r0, #0]
 8017428:	2204      	movs	r2, #4
 801742a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801742e:	4802      	ldr	r0, [pc, #8]	@ (8017438 <StoreDevice::StoreDevice()+0x18>)
 8017430:	f003 fbfa 	bl	801ac28 <printf>
 8017434:	4620      	mov	r0, r4
 8017436:	bd10      	pop	{r4, pc}
 8017438:	0801c34a 	stmdaeq	r1, {r1, r3, r6, r8, r9, lr, pc}

0801743c <StoreDevice::GetSize() const>:
 801743c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8017440:	4770      	bx	lr

08017442 <StoreDevice::GetSectorSize() const>:
 8017442:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8017446:	4770      	bx	lr

08017448 <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>:
 8017448:	9b00      	ldr	r3, [sp, #0]
 801744a:	2200      	movs	r2, #0
 801744c:	601a      	str	r2, [r3, #0]
 801744e:	2001      	movs	r0, #1
 8017450:	4770      	bx	lr

08017452 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>:
 8017452:	2200      	movs	r2, #0
 8017454:	601a      	str	r2, [r3, #0]
 8017456:	2001      	movs	r0, #1
 8017458:	4770      	bx	lr

0801745a <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>:
 801745a:	9b00      	ldr	r3, [sp, #0]
 801745c:	2200      	movs	r2, #0
 801745e:	601a      	str	r2, [r3, #0]
 8017460:	2001      	movs	r0, #1
 8017462:	4770      	bx	lr

08017464 <properties::convert_json_file(char*, unsigned long, bool)>:
 8017464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017468:	7803      	ldrb	r3, [r0, #0]
 801746a:	2b7b      	cmp	r3, #123	@ 0x7b
 801746c:	4604      	mov	r4, r0
 801746e:	f040 80a2 	bne.w	80175b6 <properties::convert_json_file(char*, unsigned long, bool)+0x152>
 8017472:	b172      	cbz	r2, 8017492 <properties::convert_json_file(char*, unsigned long, bool)+0x2e>
 8017474:	2501      	movs	r5, #1
 8017476:	4603      	mov	r3, r0
 8017478:	4628      	mov	r0, r5
 801747a:	f04f 0c3d 	mov.w	ip, #61	@ 0x3d
 801747e:	f04f 0e0a 	mov.w	lr, #10
 8017482:	428d      	cmp	r5, r1
 8017484:	d377      	bcc.n	8017576 <properties::convert_json_file(char*, unsigned long, bool)+0x112>
 8017486:	b102      	cbz	r2, 801748a <properties::convert_json_file(char*, unsigned long, bool)+0x26>
 8017488:	3801      	subs	r0, #1
 801748a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801748e:	4635      	mov	r5, r6
 8017490:	e7f3      	b.n	801747a <properties::convert_json_file(char*, unsigned long, bool)+0x16>
 8017492:	4605      	mov	r5, r0
 8017494:	2323      	movs	r3, #35	@ 0x23
 8017496:	f805 3b01 	strb.w	r3, [r5], #1
 801749a:	2601      	movs	r6, #1
 801749c:	462f      	mov	r7, r5
 801749e:	428e      	cmp	r6, r1
 80174a0:	d317      	bcc.n	80174d2 <properties::convert_json_file(char*, unsigned long, bool)+0x6e>
 80174a2:	1c6b      	adds	r3, r5, #1
 80174a4:	428e      	cmp	r6, r1
 80174a6:	eba3 0004 	sub.w	r0, r3, r4
 80174aa:	d205      	bcs.n	80174b8 <properties::convert_json_file(char*, unsigned long, bool)+0x54>
 80174ac:	46bc      	mov	ip, r7
 80174ae:	f81c eb01 	ldrb.w	lr, [ip], #1
 80174b2:	f1be 0f22 	cmp.w	lr, #34	@ 0x22
 80174b6:	d112      	bne.n	80174de <properties::convert_json_file(char*, unsigned long, bool)+0x7a>
 80174b8:	240a      	movs	r4, #10
 80174ba:	702c      	strb	r4, [r5, #0]
 80174bc:	463c      	mov	r4, r7
 80174be:	3701      	adds	r7, #1
 80174c0:	7825      	ldrb	r5, [r4, #0]
 80174c2:	2d7b      	cmp	r5, #123	@ 0x7b
 80174c4:	d0e3      	beq.n	801748e <properties::convert_json_file(char*, unsigned long, bool)+0x2a>
 80174c6:	428e      	cmp	r6, r1
 80174c8:	f106 0501 	add.w	r5, r6, #1
 80174cc:	d2d5      	bcs.n	801747a <properties::convert_json_file(char*, unsigned long, bool)+0x16>
 80174ce:	462e      	mov	r6, r5
 80174d0:	e7f4      	b.n	80174bc <properties::convert_json_file(char*, unsigned long, bool)+0x58>
 80174d2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80174d6:	2b22      	cmp	r3, #34	@ 0x22
 80174d8:	d0e3      	beq.n	80174a2 <properties::convert_json_file(char*, unsigned long, bool)+0x3e>
 80174da:	3601      	adds	r6, #1
 80174dc:	e7df      	b.n	801749e <properties::convert_json_file(char*, unsigned long, bool)+0x3a>
 80174de:	f803 ec01 	strb.w	lr, [r3, #-1]
 80174e2:	3601      	adds	r6, #1
 80174e4:	4667      	mov	r7, ip
 80174e6:	461d      	mov	r5, r3
 80174e8:	e7db      	b.n	80174a2 <properties::convert_json_file(char*, unsigned long, bool)+0x3e>
 80174ea:	f1b8 0f22 	cmp.w	r8, #34	@ 0x22
 80174ee:	d142      	bne.n	8017576 <properties::convert_json_file(char*, unsigned long, bool)+0x112>
 80174f0:	eba0 0904 	sub.w	r9, r0, r4
 80174f4:	f894 8000 	ldrb.w	r8, [r4]
 80174f8:	f1b8 0f22 	cmp.w	r8, #34	@ 0x22
 80174fc:	eb04 0009 	add.w	r0, r4, r9
 8017500:	4626      	mov	r6, r4
 8017502:	f105 0701 	add.w	r7, r5, #1
 8017506:	f104 0401 	add.w	r4, r4, #1
 801750a:	d13f      	bne.n	801758c <properties::convert_json_file(char*, unsigned long, bool)+0x128>
 801750c:	f803 cb01 	strb.w	ip, [r3], #1
 8017510:	3001      	adds	r0, #1
 8017512:	462f      	mov	r7, r5
 8017514:	428f      	cmp	r7, r1
 8017516:	f896 8000 	ldrb.w	r8, [r6]
 801751a:	4634      	mov	r4, r6
 801751c:	f107 0701 	add.w	r7, r7, #1
 8017520:	f106 0601 	add.w	r6, r6, #1
 8017524:	d338      	bcc.n	8017598 <properties::convert_json_file(char*, unsigned long, bool)+0x134>
 8017526:	7825      	ldrb	r5, [r4, #0]
 8017528:	2d20      	cmp	r5, #32
 801752a:	4626      	mov	r6, r4
 801752c:	46b8      	mov	r8, r7
 801752e:	f104 0401 	add.w	r4, r4, #1
 8017532:	f107 0701 	add.w	r7, r7, #1
 8017536:	d134      	bne.n	80175a2 <properties::convert_json_file(char*, unsigned long, bool)+0x13e>
 8017538:	4588      	cmp	r8, r1
 801753a:	d3f4      	bcc.n	8017526 <properties::convert_json_file(char*, unsigned long, bool)+0xc2>
 801753c:	46b8      	mov	r8, r7
 801753e:	7834      	ldrb	r4, [r6, #0]
 8017540:	2c22      	cmp	r4, #34	@ 0x22
 8017542:	d100      	bne.n	8017546 <properties::convert_json_file(char*, unsigned long, bool)+0xe2>
 8017544:	3601      	adds	r6, #1
 8017546:	4634      	mov	r4, r6
 8017548:	f108 0501 	add.w	r5, r8, #1
 801754c:	f814 7b01 	ldrb.w	r7, [r4], #1
 8017550:	2f22      	cmp	r7, #34	@ 0x22
 8017552:	d02a      	beq.n	80175aa <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8017554:	2f2c      	cmp	r7, #44	@ 0x2c
 8017556:	d028      	beq.n	80175aa <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8017558:	2f7d      	cmp	r7, #125	@ 0x7d
 801755a:	d026      	beq.n	80175aa <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 801755c:	4588      	cmp	r8, r1
 801755e:	d228      	bcs.n	80175b2 <properties::convert_json_file(char*, unsigned long, bool)+0x14e>
 8017560:	f1a7 0820 	sub.w	r8, r7, #32
 8017564:	f1b8 0f5a 	cmp.w	r8, #90	@ 0x5a
 8017568:	d803      	bhi.n	8017572 <properties::convert_json_file(char*, unsigned long, bool)+0x10e>
 801756a:	f803 7b01 	strb.w	r7, [r3], #1
 801756e:	3001      	adds	r0, #1
 8017570:	4626      	mov	r6, r4
 8017572:	46a8      	mov	r8, r5
 8017574:	e7e7      	b.n	8017546 <properties::convert_json_file(char*, unsigned long, bool)+0xe2>
 8017576:	428d      	cmp	r5, r1
 8017578:	f894 8000 	ldrb.w	r8, [r4]
 801757c:	4627      	mov	r7, r4
 801757e:	f105 0501 	add.w	r5, r5, #1
 8017582:	f104 0401 	add.w	r4, r4, #1
 8017586:	d3b0      	bcc.n	80174ea <properties::convert_json_file(char*, unsigned long, bool)+0x86>
 8017588:	463c      	mov	r4, r7
 801758a:	e7b1      	b.n	80174f0 <properties::convert_json_file(char*, unsigned long, bool)+0x8c>
 801758c:	428d      	cmp	r5, r1
 801758e:	d2c1      	bcs.n	8017514 <properties::convert_json_file(char*, unsigned long, bool)+0xb0>
 8017590:	f803 8b01 	strb.w	r8, [r3], #1
 8017594:	463d      	mov	r5, r7
 8017596:	e7ad      	b.n	80174f4 <properties::convert_json_file(char*, unsigned long, bool)+0x90>
 8017598:	f1b8 0f3a 	cmp.w	r8, #58	@ 0x3a
 801759c:	d1ba      	bne.n	8017514 <properties::convert_json_file(char*, unsigned long, bool)+0xb0>
 801759e:	4634      	mov	r4, r6
 80175a0:	e7c1      	b.n	8017526 <properties::convert_json_file(char*, unsigned long, bool)+0xc2>
 80175a2:	2d22      	cmp	r5, #34	@ 0x22
 80175a4:	bf08      	it	eq
 80175a6:	4626      	moveq	r6, r4
 80175a8:	e7c9      	b.n	801753e <properties::convert_json_file(char*, unsigned long, bool)+0xda>
 80175aa:	f803 eb01 	strb.w	lr, [r3], #1
 80175ae:	3001      	adds	r0, #1
 80175b0:	4645      	mov	r5, r8
 80175b2:	3501      	adds	r5, #1
 80175b4:	e765      	b.n	8017482 <properties::convert_json_file(char*, unsigned long, bool)+0x1e>
 80175b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175ba:	e766      	b.n	801748a <properties::convert_json_file(char*, unsigned long, bool)+0x26>

080175bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>:
 80175bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175c0:	6002      	str	r2, [r0, #0]
 80175c2:	4614      	mov	r4, r2
 80175c4:	2200      	movs	r2, #0
 80175c6:	80c2      	strh	r2, [r0, #6]
 80175c8:	4a1c      	ldr	r2, [pc, #112]	@ (801763c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x80>)
 80175ca:	8083      	strh	r3, [r0, #4]
 80175cc:	7812      	ldrb	r2, [r2, #0]
 80175ce:	f002 0201 	and.w	r2, r2, #1
 80175d2:	4606      	mov	r6, r0
 80175d4:	7202      	strb	r2, [r0, #8]
 80175d6:	4608      	mov	r0, r1
 80175d8:	4605      	mov	r5, r0
 80175da:	3001      	adds	r0, #1
 80175dc:	782f      	ldrb	r7, [r5, #0]
 80175de:	2f00      	cmp	r7, #0
 80175e0:	d1fa      	bne.n	80175d8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x1c>
 80175e2:	1a6d      	subs	r5, r5, r1
 80175e4:	b29b      	uxth	r3, r3
 80175e6:	b1d2      	cbz	r2, 801761e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x62>
 80175e8:	1d2f      	adds	r7, r5, #4
 80175ea:	429f      	cmp	r7, r3
 80175ec:	d814      	bhi.n	8017618 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 80175ee:	f04f 087b 	mov.w	r8, #123	@ 0x7b
 80175f2:	f04f 0922 	mov.w	r9, #34	@ 0x22
 80175f6:	462a      	mov	r2, r5
 80175f8:	f884 8000 	strb.w	r8, [r4]
 80175fc:	f884 9001 	strb.w	r9, [r4, #1]
 8017600:	1ca0      	adds	r0, r4, #2
 8017602:	f003 f816 	bl	801a632 <memmove>
 8017606:	1963      	adds	r3, r4, r5
 8017608:	223a      	movs	r2, #58	@ 0x3a
 801760a:	f883 9002 	strb.w	r9, [r3, #2]
 801760e:	70da      	strb	r2, [r3, #3]
 8017610:	3505      	adds	r5, #5
 8017612:	f804 8007 	strb.w	r8, [r4, r7]
 8017616:	80f5      	strh	r5, [r6, #6]
 8017618:	4630      	mov	r0, r6
 801761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801761e:	1caf      	adds	r7, r5, #2
 8017620:	42bb      	cmp	r3, r7
 8017622:	d3f9      	bcc.n	8017618 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 8017624:	4620      	mov	r0, r4
 8017626:	2323      	movs	r3, #35	@ 0x23
 8017628:	f800 3b01 	strb.w	r3, [r0], #1
 801762c:	462a      	mov	r2, r5
 801762e:	442c      	add	r4, r5
 8017630:	f002 ffff 	bl	801a632 <memmove>
 8017634:	230a      	movs	r3, #10
 8017636:	7063      	strb	r3, [r4, #1]
 8017638:	80f7      	strh	r7, [r6, #6]
 801763a:	e7ed      	b.n	8017618 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 801763c:	2000cc49 	andcs	ip, r0, r9, asr #24

08017640 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>:
 8017640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017642:	469c      	mov	ip, r3
 8017644:	8885      	ldrh	r5, [r0, #4]
 8017646:	88c3      	ldrh	r3, [r0, #6]
 8017648:	42ab      	cmp	r3, r5
 801764a:	b085      	sub	sp, #20
 801764c:	d302      	bcc.n	8017654 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x14>
 801764e:	2000      	movs	r0, #0
 8017650:	b005      	add	sp, #20
 8017652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017654:	4604      	mov	r4, r0
 8017656:	6800      	ldr	r0, [r0, #0]
 8017658:	f894 e008 	ldrb.w	lr, [r4, #8]
 801765c:	4418      	add	r0, r3
 801765e:	1aed      	subs	r5, r5, r3
 8017660:	b2d6      	uxtb	r6, r2
 8017662:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8017666:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801766a:	0e12      	lsrs	r2, r2, #24
 801766c:	f1bc 0f00 	cmp.w	ip, #0
 8017670:	d109      	bne.n	8017686 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x46>
 8017672:	f1be 0f00 	cmp.w	lr, #0
 8017676:	d109      	bne.n	801768c <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x4c>
 8017678:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801767c:	e9cd 6700 	strd	r6, r7, [sp]
 8017680:	4a0e      	ldr	r2, [pc, #56]	@ (80176bc <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x7c>)
 8017682:	460b      	mov	r3, r1
 8017684:	e008      	b.n	8017698 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x58>
 8017686:	f1be 0f00 	cmp.w	lr, #0
 801768a:	d00f      	beq.n	80176ac <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x6c>
 801768c:	e9cd 6700 	strd	r6, r7, [sp]
 8017690:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017694:	4a0a      	ldr	r2, [pc, #40]	@ (80176c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x80>)
 8017696:	460b      	mov	r3, r1
 8017698:	4629      	mov	r1, r5
 801769a:	f003 faed 	bl	801ac78 <snprintf>
 801769e:	4285      	cmp	r5, r0
 80176a0:	dbd5      	blt.n	801764e <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0xe>
 80176a2:	88e3      	ldrh	r3, [r4, #6]
 80176a4:	4403      	add	r3, r0
 80176a6:	80e3      	strh	r3, [r4, #6]
 80176a8:	2001      	movs	r0, #1
 80176aa:	e7d1      	b.n	8017650 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x10>
 80176ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80176b0:	e9cd 6700 	strd	r6, r7, [sp]
 80176b4:	4a03      	ldr	r2, [pc, #12]	@ (80176c4 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x84>)
 80176b6:	460b      	mov	r3, r1
 80176b8:	e7ee      	b.n	8017698 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x58>
 80176ba:	bf00      	nop
 80176bc:	0801c38e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, lr, pc}
 80176c0:	0801c37a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, lr, pc}
 80176c4:	0801c38f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, lr, pc}

080176c8 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)>:
 80176c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ca:	88c6      	ldrh	r6, [r0, #6]
 80176cc:	8885      	ldrh	r5, [r0, #4]
 80176ce:	42ae      	cmp	r6, r5
 80176d0:	b085      	sub	sp, #20
 80176d2:	d302      	bcc.n	80176da <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x12>
 80176d4:	2000      	movs	r0, #0
 80176d6:	b005      	add	sp, #20
 80176d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176da:	4604      	mov	r4, r0
 80176dc:	6800      	ldr	r0, [r0, #0]
 80176de:	1bad      	subs	r5, r5, r6
 80176e0:	4430      	add	r0, r6
 80176e2:	7a26      	ldrb	r6, [r4, #8]
 80176e4:	b19e      	cbz	r6, 801770e <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x46>
 80176e6:	4e0f      	ldr	r6, [pc, #60]	@ (8017724 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x5c>)
 80176e8:	4f0f      	ldr	r7, [pc, #60]	@ (8017728 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x60>)
 80176ea:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80176ee:	2a00      	cmp	r2, #0
 80176f0:	bfc8      	it	gt
 80176f2:	463e      	movgt	r6, r7
 80176f4:	4a0d      	ldr	r2, [pc, #52]	@ (801772c <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x64>)
 80176f6:	9600      	str	r6, [sp, #0]
 80176f8:	460b      	mov	r3, r1
 80176fa:	4629      	mov	r1, r5
 80176fc:	f003 fabc 	bl	801ac78 <snprintf>
 8017700:	4285      	cmp	r5, r0
 8017702:	dbe7      	blt.n	80176d4 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0xc>
 8017704:	88e3      	ldrh	r3, [r4, #6]
 8017706:	4403      	add	r3, r0
 8017708:	80e3      	strh	r3, [r4, #6]
 801770a:	2001      	movs	r0, #1
 801770c:	e7e3      	b.n	80176d6 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0xe>
 801770e:	4e05      	ldr	r6, [pc, #20]	@ (8017724 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x5c>)
 8017710:	4f05      	ldr	r7, [pc, #20]	@ (8017728 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x60>)
 8017712:	2a00      	cmp	r2, #0
 8017714:	bfc8      	it	gt
 8017716:	463e      	movgt	r6, r7
 8017718:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801771c:	9600      	str	r6, [sp, #0]
 801771e:	4a04      	ldr	r2, [pc, #16]	@ (8017730 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x68>)
 8017720:	460b      	mov	r3, r1
 8017722:	e7ea      	b.n	80176fa <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x32>
 8017724:	0801b940 	stmdaeq	r1, {r6, r8, fp, ip, sp, pc}
 8017728:	0801c39f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, lr, pc}
 801772c:	0801c3a1 	stmdaeq	r1, {r0, r5, r7, r8, r9, lr, pc}
 8017730:	0801c3b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, lr, pc}

08017734 <PropertiesBuilder::AddComment(char const*)>:
 8017734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017736:	7a06      	ldrb	r6, [r0, #8]
 8017738:	b98e      	cbnz	r6, 801775e <PropertiesBuilder::AddComment(char const*)+0x2a>
 801773a:	4604      	mov	r4, r0
 801773c:	88c0      	ldrh	r0, [r0, #6]
 801773e:	88a5      	ldrh	r5, [r4, #4]
 8017740:	42a8      	cmp	r0, r5
 8017742:	d20d      	bcs.n	8017760 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8017744:	6827      	ldr	r7, [r4, #0]
 8017746:	4a07      	ldr	r2, [pc, #28]	@ (8017764 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8017748:	1a2d      	subs	r5, r5, r0
 801774a:	460b      	mov	r3, r1
 801774c:	4438      	add	r0, r7
 801774e:	4629      	mov	r1, r5
 8017750:	f003 fa92 	bl	801ac78 <snprintf>
 8017754:	4285      	cmp	r5, r0
 8017756:	db03      	blt.n	8017760 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8017758:	88e3      	ldrh	r3, [r4, #6]
 801775a:	4418      	add	r0, r3
 801775c:	80e0      	strh	r0, [r4, #6]
 801775e:	2601      	movs	r6, #1
 8017760:	4630      	mov	r0, r6
 8017762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017764:	0801c3c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, lr, pc}

08017768 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8017768:	e9c0 1200 	strd	r1, r2, [r0]
 801776c:	4770      	bx	lr

0801776e <ReadConfigFile::~ReadConfigFile()>:
 801776e:	4770      	bx	lr

08017770 <ReadConfigFile::Read(char const*, unsigned int)>:
 8017770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017774:	b0a0      	sub	sp, #128	@ 0x80
 8017776:	230a      	movs	r3, #10
 8017778:	4607      	mov	r7, r0
 801777a:	460d      	mov	r5, r1
 801777c:	4614      	mov	r4, r2
 801777e:	f88d 3000 	strb.w	r3, [sp]
 8017782:	f04f 0800 	mov.w	r8, #0
 8017786:	b334      	cbz	r4, 80177d6 <ReadConfigFile::Read(char const*, unsigned int)+0x66>
 8017788:	466e      	mov	r6, sp
 801778a:	462a      	mov	r2, r5
 801778c:	4631      	mov	r1, r6
 801778e:	7810      	ldrb	r0, [r2, #0]
 8017790:	280d      	cmp	r0, #13
 8017792:	4613      	mov	r3, r2
 8017794:	f102 0201 	add.w	r2, r2, #1
 8017798:	d009      	beq.n	80177ae <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 801779a:	280a      	cmp	r0, #10
 801779c:	d007      	beq.n	80177ae <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 801779e:	f806 0b01 	strb.w	r0, [r6], #1
 80177a2:	1a73      	subs	r3, r6, r1
 80177a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80177a6:	dc16      	bgt.n	80177d6 <ReadConfigFile::Read(char const*, unsigned int)+0x66>
 80177a8:	3c01      	subs	r4, #1
 80177aa:	d1f0      	bne.n	801778e <ReadConfigFile::Read(char const*, unsigned int)+0x1e>
 80177ac:	4613      	mov	r3, r2
 80177ae:	461d      	mov	r5, r3
 80177b0:	b12c      	cbz	r4, 80177be <ReadConfigFile::Read(char const*, unsigned int)+0x4e>
 80177b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177b6:	2a0d      	cmp	r2, #13
 80177b8:	d00b      	beq.n	80177d2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80177ba:	2a0a      	cmp	r2, #10
 80177bc:	d009      	beq.n	80177d2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80177be:	f89d 3000 	ldrb.w	r3, [sp]
 80177c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80177c4:	d9df      	bls.n	8017786 <ReadConfigFile::Read(char const*, unsigned int)+0x16>
 80177c6:	e9d7 3000 	ldrd	r3, r0, [r7]
 80177ca:	f886 8000 	strb.w	r8, [r6]
 80177ce:	4798      	blx	r3
 80177d0:	e7d9      	b.n	8017786 <ReadConfigFile::Read(char const*, unsigned int)+0x16>
 80177d2:	3c01      	subs	r4, #1
 80177d4:	e7eb      	b.n	80177ae <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 80177d6:	b020      	add	sp, #128	@ 0x80
 80177d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080177dc <Sscan::Char(char const*, char const*, char*, unsigned long&)>:
 80177dc:	b570      	push	{r4, r5, r6, lr}
 80177de:	4615      	mov	r5, r2
 80177e0:	461c      	mov	r4, r3
 80177e2:	f000 f950 	bl	8017a86 <Sscan::checkName(char const*, char const*)>
 80177e6:	b170      	cbz	r0, 8017806 <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x2a>
 80177e8:	2100      	movs	r1, #0
 80177ea:	5c43      	ldrb	r3, [r0, r1]
 80177ec:	6826      	ldr	r6, [r4, #0]
 80177ee:	b28a      	uxth	r2, r1
 80177f0:	b11b      	cbz	r3, 80177fa <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x1e>
 80177f2:	4296      	cmp	r6, r2
 80177f4:	d804      	bhi.n	8017800 <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x24>
 80177f6:	2b0a      	cmp	r3, #10
 80177f8:	d107      	bne.n	801780a <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x2e>
 80177fa:	6022      	str	r2, [r4, #0]
 80177fc:	2000      	movs	r0, #0
 80177fe:	bd70      	pop	{r4, r5, r6, pc}
 8017800:	546b      	strb	r3, [r5, r1]
 8017802:	3101      	adds	r1, #1
 8017804:	e7f1      	b.n	80177ea <Sscan::Char(char const*, char const*, char*, unsigned long&)+0xe>
 8017806:	2001      	movs	r0, #1
 8017808:	e7f9      	b.n	80177fe <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x22>
 801780a:	2002      	movs	r0, #2
 801780c:	e7f7      	b.n	80177fe <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x22>

0801780e <Sscan::Float(char const*, char const*, float&)>:
 801780e:	b570      	push	{r4, r5, r6, lr}
 8017810:	4614      	mov	r4, r2
 8017812:	f000 f938 	bl	8017a86 <Sscan::checkName(char const*, char const*)>
 8017816:	2800      	cmp	r0, #0
 8017818:	d049      	beq.n	80178ae <Sscan::Float(char const*, char const*, float&)+0xa0>
 801781a:	7803      	ldrb	r3, [r0, #0]
 801781c:	2b2d      	cmp	r3, #45	@ 0x2d
 801781e:	bf04      	itt	eq
 8017820:	3001      	addeq	r0, #1
 8017822:	2501      	moveq	r5, #1
 8017824:	7803      	ldrb	r3, [r0, #0]
 8017826:	bf18      	it	ne
 8017828:	2500      	movne	r5, #0
 801782a:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 801782e:	d101      	bne.n	8017834 <Sscan::Float(char const*, char const*, float&)+0x26>
 8017830:	2002      	movs	r0, #2
 8017832:	bd70      	pop	{r4, r5, r6, pc}
 8017834:	2300      	movs	r3, #0
 8017836:	7802      	ldrb	r2, [r0, #0]
 8017838:	3a30      	subs	r2, #48	@ 0x30
 801783a:	2a09      	cmp	r2, #9
 801783c:	d8f8      	bhi.n	8017830 <Sscan::Float(char const*, char const*, float&)+0x22>
 801783e:	210a      	movs	r1, #10
 8017840:	fb01 2303 	mla	r3, r1, r3, r2
 8017844:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8017848:	2a2e      	cmp	r2, #46	@ 0x2e
 801784a:	d002      	beq.n	8017852 <Sscan::Float(char const*, char const*, float&)+0x44>
 801784c:	f012 0fdf 	tst.w	r2, #223	@ 0xdf
 8017850:	d1f1      	bne.n	8017836 <Sscan::Float(char const*, char const*, float&)+0x28>
 8017852:	ee07 3a90 	vmov	s15, r3
 8017856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801785a:	edc4 7a00 	vstr	s15, [r4]
 801785e:	7803      	ldrb	r3, [r0, #0]
 8017860:	2b2e      	cmp	r3, #46	@ 0x2e
 8017862:	d006      	beq.n	8017872 <Sscan::Float(char const*, char const*, float&)+0x64>
 8017864:	b11d      	cbz	r5, 801786e <Sscan::Float(char const*, char const*, float&)+0x60>
 8017866:	eef1 7a67 	vneg.f32	s15, s15
 801786a:	edc4 7a00 	vstr	s15, [r4]
 801786e:	2000      	movs	r0, #0
 8017870:	e7df      	b.n	8017832 <Sscan::Float(char const*, char const*, float&)+0x24>
 8017872:	2301      	movs	r3, #1
 8017874:	2200      	movs	r2, #0
 8017876:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 801787a:	f011 0fdf 	tst.w	r1, #223	@ 0xdf
 801787e:	d10e      	bne.n	801789e <Sscan::Float(char const*, char const*, float&)+0x90>
 8017880:	ee07 2a10 	vmov	s14, r2
 8017884:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8017888:	ee07 3a10 	vmov	s14, r3
 801788c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017890:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8017894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017898:	2d00      	cmp	r5, #0
 801789a:	d1e4      	bne.n	8017866 <Sscan::Float(char const*, char const*, float&)+0x58>
 801789c:	e7e5      	b.n	801786a <Sscan::Float(char const*, char const*, float&)+0x5c>
 801789e:	3930      	subs	r1, #48	@ 0x30
 80178a0:	2909      	cmp	r1, #9
 80178a2:	d8c5      	bhi.n	8017830 <Sscan::Float(char const*, char const*, float&)+0x22>
 80178a4:	260a      	movs	r6, #10
 80178a6:	fb06 1202 	mla	r2, r6, r2, r1
 80178aa:	4373      	muls	r3, r6
 80178ac:	e7e3      	b.n	8017876 <Sscan::Float(char const*, char const*, float&)+0x68>
 80178ae:	2001      	movs	r0, #1
 80178b0:	e7bf      	b.n	8017832 <Sscan::Float(char const*, char const*, float&)+0x24>

080178b2 <Sscan::IpAddress(char const*, char const*, unsigned long&)>:
 80178b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178b4:	4615      	mov	r5, r2
 80178b6:	f000 f8e6 	bl	8017a86 <Sscan::checkName(char const*, char const*)>
 80178ba:	bb60      	cbnz	r0, 8017916 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x64>
 80178bc:	2001      	movs	r0, #1
 80178be:	e028      	b.n	8017912 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x60>
 80178c0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80178c4:	2b09      	cmp	r3, #9
 80178c6:	d823      	bhi.n	8017910 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 80178c8:	230a      	movs	r3, #10
 80178ca:	fb03 2101 	mla	r1, r3, r1, r2
 80178ce:	3930      	subs	r1, #48	@ 0x30
 80178d0:	4603      	mov	r3, r0
 80178d2:	4618      	mov	r0, r3
 80178d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80178da:	d115      	bne.n	8017908 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x56>
 80178dc:	29ff      	cmp	r1, #255	@ 0xff
 80178de:	d817      	bhi.n	8017910 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 80178e0:	3401      	adds	r4, #1
 80178e2:	2c03      	cmp	r4, #3
 80178e4:	f806 1b01 	strb.w	r1, [r6], #1
 80178e8:	d117      	bne.n	801791a <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x68>
 80178ea:	1d1a      	adds	r2, r3, #4
 80178ec:	2400      	movs	r4, #0
 80178ee:	260a      	movs	r6, #10
 80178f0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80178f4:	f011 00df 	ands.w	r0, r1, #223	@ 0xdf
 80178f8:	d113      	bne.n	8017922 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x70>
 80178fa:	2cff      	cmp	r4, #255	@ 0xff
 80178fc:	d808      	bhi.n	8017910 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 80178fe:	f88d 4007 	strb.w	r4, [sp, #7]
 8017902:	9b01      	ldr	r3, [sp, #4]
 8017904:	602b      	str	r3, [r5, #0]
 8017906:	e004      	b.n	8017912 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x60>
 8017908:	2a00      	cmp	r2, #0
 801790a:	d0e7      	beq.n	80178dc <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x2a>
 801790c:	42b8      	cmp	r0, r7
 801790e:	d1d7      	bne.n	80178c0 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0xe>
 8017910:	2002      	movs	r0, #2
 8017912:	b003      	add	sp, #12
 8017914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017916:	ae01      	add	r6, sp, #4
 8017918:	2400      	movs	r4, #0
 801791a:	4603      	mov	r3, r0
 801791c:	1d07      	adds	r7, r0, #4
 801791e:	2100      	movs	r1, #0
 8017920:	e7d7      	b.n	80178d2 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x20>
 8017922:	4293      	cmp	r3, r2
 8017924:	d0f4      	beq.n	8017910 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 8017926:	3930      	subs	r1, #48	@ 0x30
 8017928:	2909      	cmp	r1, #9
 801792a:	d8f1      	bhi.n	8017910 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 801792c:	fb06 1404 	mla	r4, r6, r4, r1
 8017930:	e7de      	b.n	80178f0 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x3e>

08017932 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8017932:	b538      	push	{r3, r4, r5, lr}
 8017934:	4615      	mov	r5, r2
 8017936:	f000 f8a6 	bl	8017a86 <Sscan::checkName(char const*, char const*)>
 801793a:	b190      	cbz	r0, 8017962 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x30>
 801793c:	4601      	mov	r1, r0
 801793e:	2400      	movs	r4, #0
 8017940:	780b      	ldrb	r3, [r1, #0]
 8017942:	3b30      	subs	r3, #48	@ 0x30
 8017944:	2b09      	cmp	r3, #9
 8017946:	d80e      	bhi.n	8017966 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8017948:	220a      	movs	r2, #10
 801794a:	fb02 3404 	mla	r4, r2, r4, r3
 801794e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017952:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 8017956:	d1f3      	bne.n	8017940 <Sscan::Uint16(char const*, char const*, unsigned short&)+0xe>
 8017958:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 801795c:	d203      	bcs.n	8017966 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 801795e:	802c      	strh	r4, [r5, #0]
 8017960:	bd38      	pop	{r3, r4, r5, pc}
 8017962:	2001      	movs	r0, #1
 8017964:	e7fc      	b.n	8017960 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x2e>
 8017966:	2002      	movs	r0, #2
 8017968:	e7fa      	b.n	8017960 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x2e>

0801796a <Sscan::Uint32(char const*, char const*, unsigned long&)>:
 801796a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801796c:	4616      	mov	r6, r2
 801796e:	f000 f88a 	bl	8017a86 <Sscan::checkName(char const*, char const*)>
 8017972:	b1f8      	cbz	r0, 80179b4 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4a>
 8017974:	2300      	movs	r3, #0
 8017976:	4605      	mov	r5, r0
 8017978:	461c      	mov	r4, r3
 801797a:	782a      	ldrb	r2, [r5, #0]
 801797c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8017980:	2909      	cmp	r1, #9
 8017982:	d819      	bhi.n	80179b8 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4e>
 8017984:	200a      	movs	r0, #10
 8017986:	fba3 3700 	umull	r3, r7, r3, r0
 801798a:	3a30      	subs	r2, #48	@ 0x30
 801798c:	eb62 0202 	sbc.w	r2, r2, r2
 8017990:	18cb      	adds	r3, r1, r3
 8017992:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8017996:	fb00 7404 	mla	r4, r0, r4, r7
 801799a:	eb44 0402 	adc.w	r4, r4, r2
 801799e:	f011 00df 	ands.w	r0, r1, #223	@ 0xdf
 80179a2:	d1ea      	bne.n	801797a <Sscan::Uint32(char const*, char const*, unsigned long&)+0x10>
 80179a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80179a8:	429a      	cmp	r2, r3
 80179aa:	eb70 0404 	sbcs.w	r4, r0, r4
 80179ae:	d303      	bcc.n	80179b8 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4e>
 80179b0:	6033      	str	r3, [r6, #0]
 80179b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179b4:	2001      	movs	r0, #1
 80179b6:	e7fc      	b.n	80179b2 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x48>
 80179b8:	2002      	movs	r0, #2
 80179ba:	e7fa      	b.n	80179b2 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x48>

080179bc <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80179bc:	b538      	push	{r3, r4, r5, lr}
 80179be:	4615      	mov	r5, r2
 80179c0:	f000 f861 	bl	8017a86 <Sscan::checkName(char const*, char const*)>
 80179c4:	b188      	cbz	r0, 80179ea <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2e>
 80179c6:	4601      	mov	r1, r0
 80179c8:	2400      	movs	r4, #0
 80179ca:	780b      	ldrb	r3, [r1, #0]
 80179cc:	3b30      	subs	r3, #48	@ 0x30
 80179ce:	2b09      	cmp	r3, #9
 80179d0:	d80d      	bhi.n	80179ee <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80179d2:	220a      	movs	r2, #10
 80179d4:	fb02 3404 	mla	r4, r2, r4, r3
 80179d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80179dc:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 80179e0:	d1f3      	bne.n	80179ca <Sscan::Uint8(char const*, char const*, unsigned char&)+0xe>
 80179e2:	2cff      	cmp	r4, #255	@ 0xff
 80179e4:	d803      	bhi.n	80179ee <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80179e6:	702c      	strb	r4, [r5, #0]
 80179e8:	bd38      	pop	{r3, r4, r5, pc}
 80179ea:	2001      	movs	r0, #1
 80179ec:	e7fc      	b.n	80179e8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2c>
 80179ee:	2002      	movs	r0, #2
 80179f0:	e7fa      	b.n	80179e8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2c>

080179f2 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)>:
 80179f2:	b570      	push	{r4, r5, r6, lr}
 80179f4:	4615      	mov	r5, r2
 80179f6:	461e      	mov	r6, r3
 80179f8:	f000 f845 	bl	8017a86 <Sscan::checkName(char const*, char const*)>
 80179fc:	2800      	cmp	r0, #0
 80179fe:	d040      	beq.n	8017a82 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x90>
 8017a00:	7803      	ldrb	r3, [r0, #0]
 8017a02:	2b2d      	cmp	r3, #45	@ 0x2d
 8017a04:	4601      	mov	r1, r0
 8017a06:	d107      	bne.n	8017a18 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x26>
 8017a08:	3101      	adds	r1, #1
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	780b      	ldrb	r3, [r1, #0]
 8017a0e:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 8017a12:	d106      	bne.n	8017a22 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x30>
 8017a14:	2002      	movs	r0, #2
 8017a16:	bd70      	pop	{r4, r5, r6, pc}
 8017a18:	2b2b      	cmp	r3, #43	@ 0x2b
 8017a1a:	bf08      	it	eq
 8017a1c:	3101      	addeq	r1, #1
 8017a1e:	2200      	movs	r2, #0
 8017a20:	e7f4      	b.n	8017a0c <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x1a>
 8017a22:	2300      	movs	r3, #0
 8017a24:	702b      	strb	r3, [r5, #0]
 8017a26:	780b      	ldrb	r3, [r1, #0]
 8017a28:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8017a2c:	2801      	cmp	r0, #1
 8017a2e:	d8f1      	bhi.n	8017a14 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017a30:	2b31      	cmp	r3, #49	@ 0x31
 8017a32:	bf14      	ite	ne
 8017a34:	2300      	movne	r3, #0
 8017a36:	230a      	moveq	r3, #10
 8017a38:	702b      	strb	r3, [r5, #0]
 8017a3a:	7848      	ldrb	r0, [r1, #1]
 8017a3c:	3830      	subs	r0, #48	@ 0x30
 8017a3e:	2809      	cmp	r0, #9
 8017a40:	d8e8      	bhi.n	8017a14 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017a42:	4403      	add	r3, r0
 8017a44:	702b      	strb	r3, [r5, #0]
 8017a46:	788b      	ldrb	r3, [r1, #2]
 8017a48:	2b3a      	cmp	r3, #58	@ 0x3a
 8017a4a:	d1e3      	bne.n	8017a14 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017a4c:	78cc      	ldrb	r4, [r1, #3]
 8017a4e:	3c30      	subs	r4, #48	@ 0x30
 8017a50:	2c09      	cmp	r4, #9
 8017a52:	d8df      	bhi.n	8017a14 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017a54:	790b      	ldrb	r3, [r1, #4]
 8017a56:	3b30      	subs	r3, #48	@ 0x30
 8017a58:	2b09      	cmp	r3, #9
 8017a5a:	d8db      	bhi.n	8017a14 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017a5c:	7948      	ldrb	r0, [r1, #5]
 8017a5e:	f010 00df 	ands.w	r0, r0, #223	@ 0xdf
 8017a62:	d1d7      	bne.n	8017a14 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8017a64:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017a68:	0064      	lsls	r4, r4, #1
 8017a6a:	b2e4      	uxtb	r4, r4
 8017a6c:	7034      	strb	r4, [r6, #0]
 8017a6e:	790b      	ldrb	r3, [r1, #4]
 8017a70:	3b30      	subs	r3, #48	@ 0x30
 8017a72:	441c      	add	r4, r3
 8017a74:	7034      	strb	r4, [r6, #0]
 8017a76:	2a00      	cmp	r2, #0
 8017a78:	d0cd      	beq.n	8017a16 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>
 8017a7a:	782b      	ldrb	r3, [r5, #0]
 8017a7c:	425b      	negs	r3, r3
 8017a7e:	702b      	strb	r3, [r5, #0]
 8017a80:	e7c9      	b.n	8017a16 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>
 8017a82:	2001      	movs	r0, #1
 8017a84:	e7c7      	b.n	8017a16 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>

08017a86 <Sscan::checkName(char const*, char const*)>:
 8017a86:	3901      	subs	r1, #1
 8017a88:	4602      	mov	r2, r0
 8017a8a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017a8e:	b130      	cbz	r0, 8017a9e <Sscan::checkName(char const*, char const*)+0x18>
 8017a90:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017a94:	b10b      	cbz	r3, 8017a9a <Sscan::checkName(char const*, char const*)+0x14>
 8017a96:	4298      	cmp	r0, r3
 8017a98:	d0f7      	beq.n	8017a8a <Sscan::checkName(char const*, char const*)+0x4>
 8017a9a:	2000      	movs	r0, #0
 8017a9c:	4770      	bx	lr
 8017a9e:	7813      	ldrb	r3, [r2, #0]
 8017aa0:	2b3d      	cmp	r3, #61	@ 0x3d
 8017aa2:	d1fb      	bne.n	8017a9c <Sscan::checkName(char const*, char const*)+0x16>
 8017aa4:	7853      	ldrb	r3, [r2, #1]
 8017aa6:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 8017aaa:	d0f7      	beq.n	8017a9c <Sscan::checkName(char const*, char const*)+0x16>
 8017aac:	1c50      	adds	r0, r2, #1
 8017aae:	4770      	bx	lr

08017ab0 <Display::PrintInfo() [clone .isra.0]>:
 8017ab0:	b910      	cbnz	r0, 8017ab8 <Display::PrintInfo() [clone .isra.0]+0x8>
 8017ab2:	4803      	ldr	r0, [pc, #12]	@ (8017ac0 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8017ab4:	f003 b90d 	b.w	801acd2 <puts>
 8017ab8:	6803      	ldr	r3, [r0, #0]
 8017aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017abc:	4718      	bx	r3
 8017abe:	bf00      	nop
 8017ac0:	0801c3cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, lr, pc}

08017ac4 <display::timeout::gpio_init()>:
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	4c0a      	ldr	r4, [pc, #40]	@ (8017af0 <display::timeout::gpio_init()+0x2c>)
 8017ac8:	f640 4002 	movw	r0, #3074	@ 0xc02
 8017acc:	f001 fb28 	bl	8019120 <rcu_periph_clock_enable>
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	2100      	movs	r1, #0
 8017ada:	f001 fa9f 	bl	801901c <gpio_mode_set>
 8017ade:	4620      	mov	r0, r4
 8017ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ae8:	2201      	movs	r2, #1
 8017aea:	2100      	movs	r1, #0
 8017aec:	f001 ba96 	b.w	801901c <gpio_mode_set>
 8017af0:	40020800 	andmi	r0, r2, r0, lsl #16

08017af4 <Display::Detect(display::Type)>:
 8017af4:	2902      	cmp	r1, #2
 8017af6:	b538      	push	{r3, r4, r5, lr}
 8017af8:	4604      	mov	r4, r0
 8017afa:	d014      	beq.n	8017b26 <Display::Detect(display::Type)+0x32>
 8017afc:	2904      	cmp	r1, #4
 8017afe:	d01b      	beq.n	8017b38 <Display::Detect(display::Type)+0x44>
 8017b00:	69a0      	ldr	r0, [r4, #24]
 8017b02:	b168      	cbz	r0, 8017b20 <Display::Detect(display::Type)+0x2c>
 8017b04:	6803      	ldr	r3, [r0, #0]
 8017b06:	689b      	ldr	r3, [r3, #8]
 8017b08:	4798      	blx	r3
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	69a0      	ldr	r0, [r4, #24]
 8017b0e:	b9ab      	cbnz	r3, 8017b3c <Display::Detect(display::Type)+0x48>
 8017b10:	b110      	cbz	r0, 8017b18 <Display::Detect(display::Type)+0x24>
 8017b12:	6803      	ldr	r3, [r0, #0]
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	4798      	blx	r3
 8017b18:	2300      	movs	r3, #0
 8017b1a:	61a3      	str	r3, [r4, #24]
 8017b1c:	2304      	movs	r3, #4
 8017b1e:	6023      	str	r3, [r4, #0]
 8017b20:	2300      	movs	r3, #0
 8017b22:	6123      	str	r3, [r4, #16]
 8017b24:	e010      	b.n	8017b48 <Display::Detect(display::Type)+0x54>
 8017b26:	2020      	movs	r0, #32
 8017b28:	f003 fad4 	bl	801b0d4 <operator new(unsigned int)>
 8017b2c:	2100      	movs	r1, #0
 8017b2e:	4605      	mov	r5, r0
 8017b30:	f000 f8bc 	bl	8017cac <Ssd1306::Ssd1306(TOledPanel)>
 8017b34:	61a5      	str	r5, [r4, #24]
 8017b36:	e7e3      	b.n	8017b00 <Display::Detect(display::Type)+0xc>
 8017b38:	6001      	str	r1, [r0, #0]
 8017b3a:	e7e1      	b.n	8017b00 <Display::Detect(display::Type)+0xc>
 8017b3c:	6803      	ldr	r3, [r0, #0]
 8017b3e:	68db      	ldr	r3, [r3, #12]
 8017b40:	4798      	blx	r3
 8017b42:	69a3      	ldr	r3, [r4, #24]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d0eb      	beq.n	8017b20 <Display::Detect(display::Type)+0x2c>
 8017b48:	bd38      	pop	{r3, r4, r5, pc}
	...

08017b4c <Display::Display()>:
 8017b4c:	2304      	movs	r3, #4
 8017b4e:	b510      	push	{r4, lr}
 8017b50:	6003      	str	r3, [r0, #0]
 8017b52:	4b0e      	ldr	r3, [pc, #56]	@ (8017b8c <Display::Display()+0x40>)
 8017b54:	4a0e      	ldr	r2, [pc, #56]	@ (8017b90 <Display::Display()+0x44>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	6043      	str	r3, [r0, #4]
 8017b5a:	2321      	movs	r3, #33	@ 0x21
 8017b5c:	7203      	strb	r3, [r0, #8]
 8017b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8017b94 <Display::Display()+0x48>)
 8017b60:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8017b64:	237f      	movs	r3, #127	@ 0x7f
 8017b66:	8283      	strh	r3, [r0, #20]
 8017b68:	2300      	movs	r3, #0
 8017b6a:	4604      	mov	r4, r0
 8017b6c:	7583      	strb	r3, [r0, #22]
 8017b6e:	6183      	str	r3, [r0, #24]
 8017b70:	4b09      	ldr	r3, [pc, #36]	@ (8017b98 <Display::Display()+0x4c>)
 8017b72:	2102      	movs	r1, #2
 8017b74:	6018      	str	r0, [r3, #0]
 8017b76:	f7ff ffbd 	bl	8017af4 <Display::Detect(display::Type)>
 8017b7a:	69a3      	ldr	r3, [r4, #24]
 8017b7c:	b10b      	cbz	r3, 8017b82 <Display::Display()+0x36>
 8017b7e:	f7ff ffa1 	bl	8017ac4 <display::timeout::gpio_init()>
 8017b82:	69a0      	ldr	r0, [r4, #24]
 8017b84:	f7ff ff94 	bl	8017ab0 <Display::PrintInfo() [clone .isra.0]>
 8017b88:	4620      	mov	r0, r4
 8017b8a:	bd10      	pop	{r4, pc}
 8017b8c:	2001a628 	andcs	sl, r1, r8, lsr #12
 8017b90:	00061a80 	andeq	r1, r6, r0, lsl #21
 8017b94:	000493e0 	andeq	r9, r4, r0, ror #7
 8017b98:	2000cc4c 	andcs	ip, r0, ip, asr #24

08017b9c <Ssd1306::~Ssd1306()>:
 8017b9c:	4770      	bx	lr

08017b9e <Ssd1306::SetCursor(unsigned long)>:
 8017b9e:	4770      	bx	lr

08017ba0 <Ssd1306::PrintInfo()>:
 8017ba0:	b410      	push	{r4}
 8017ba2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8017ba6:	7e44      	ldrb	r4, [r0, #25]
 8017ba8:	4904      	ldr	r1, [pc, #16]	@ (8017bbc <Ssd1306::PrintInfo()+0x1c>)
 8017baa:	4805      	ldr	r0, [pc, #20]	@ (8017bc0 <Ssd1306::PrintInfo()+0x20>)
 8017bac:	2c00      	cmp	r4, #0
 8017bae:	bf18      	it	ne
 8017bb0:	4601      	movne	r1, r0
 8017bb2:	4804      	ldr	r0, [pc, #16]	@ (8017bc4 <Ssd1306::PrintInfo()+0x24>)
 8017bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bb8:	f003 b836 	b.w	801ac28 <printf>
 8017bbc:	0801c3e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, lr, pc}
 8017bc0:	0801c3dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, lr, pc}
 8017bc4:	0801c3ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, lr, pc}

08017bc8 <Ssd1306::~Ssd1306()>:
 8017bc8:	b510      	push	{r4, lr}
 8017bca:	2120      	movs	r1, #32
 8017bcc:	4604      	mov	r4, r0
 8017bce:	f003 fa7f 	bl	801b0d0 <operator delete(void*, unsigned int)>
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	bd10      	pop	{r4, pc}

08017bd6 <HAL_I2C::Setup()>:
 8017bd6:	b510      	push	{r4, lr}
 8017bd8:	4604      	mov	r4, r0
 8017bda:	7800      	ldrb	r0, [r0, #0]
 8017bdc:	f001 ff66 	bl	8019aac <gd32_i2c_set_address>
 8017be0:	6860      	ldr	r0, [r4, #4]
 8017be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017be6:	f001 bf59 	b.w	8019a9c <gd32_i2c_set_baudrate>
	...

08017bec <Ssd1306::PutChar(int)>:
 8017bec:	b510      	push	{r4, lr}
 8017bee:	f1a1 0420 	sub.w	r4, r1, #32
 8017bf2:	2c5f      	cmp	r4, #95	@ 0x5f
 8017bf4:	f100 0010 	add.w	r0, r0, #16
 8017bf8:	bf88      	it	hi
 8017bfa:	2400      	movhi	r4, #0
 8017bfc:	f7ff ffeb 	bl	8017bd6 <HAL_I2C::Setup()>
 8017c00:	4804      	ldr	r0, [pc, #16]	@ (8017c14 <Ssd1306::PutChar(int)+0x28>)
 8017c02:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8017c06:	4420      	add	r0, r4
 8017c08:	2107      	movs	r1, #7
 8017c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c0e:	f001 bf53 	b.w	8019ab8 <gd32_i2c_write>
 8017c12:	bf00      	nop
 8017c14:	0801f434 	stmdaeq	r1, {r2, r4, r5, sl, ip, sp, lr, pc}

08017c18 <Ssd1306::PutString(char const*)>:
 8017c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c1a:	4604      	mov	r4, r0
 8017c1c:	460e      	mov	r6, r1
 8017c1e:	460f      	mov	r7, r1
 8017c20:	463d      	mov	r5, r7
 8017c22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017c26:	b939      	cbnz	r1, 8017c38 <Ssd1306::PutString(char const*)+0x20>
 8017c28:	7b23      	ldrb	r3, [r4, #12]
 8017c2a:	b123      	cbz	r3, 8017c36 <Ssd1306::PutString(char const*)+0x1e>
 8017c2c:	7321      	strb	r1, [r4, #12]
 8017c2e:	1bad      	subs	r5, r5, r6
 8017c30:	6863      	ldr	r3, [r4, #4]
 8017c32:	42ab      	cmp	r3, r5
 8017c34:	d804      	bhi.n	8017c40 <Ssd1306::PutString(char const*)+0x28>
 8017c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c38:	4620      	mov	r0, r4
 8017c3a:	f7ff ffd7 	bl	8017bec <Ssd1306::PutChar(int)>
 8017c3e:	e7ef      	b.n	8017c20 <Ssd1306::PutString(char const*)+0x8>
 8017c40:	2120      	movs	r1, #32
 8017c42:	4620      	mov	r0, r4
 8017c44:	f7ff ffd2 	bl	8017bec <Ssd1306::PutChar(int)>
 8017c48:	3501      	adds	r5, #1
 8017c4a:	e7f1      	b.n	8017c30 <Ssd1306::PutString(char const*)+0x18>

08017c4c <Ssd1306::Text(char const*, unsigned long)>:
 8017c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c4e:	6843      	ldr	r3, [r0, #4]
 8017c50:	429a      	cmp	r2, r3
 8017c52:	bf28      	it	cs
 8017c54:	461a      	movcs	r2, r3
 8017c56:	4604      	mov	r4, r0
 8017c58:	4615      	mov	r5, r2
 8017c5a:	460e      	mov	r6, r1
 8017c5c:	188f      	adds	r7, r1, r2
 8017c5e:	42be      	cmp	r6, r7
 8017c60:	d107      	bne.n	8017c72 <Ssd1306::Text(char const*, unsigned long)+0x26>
 8017c62:	7b23      	ldrb	r3, [r4, #12]
 8017c64:	b123      	cbz	r3, 8017c70 <Ssd1306::Text(char const*, unsigned long)+0x24>
 8017c66:	2300      	movs	r3, #0
 8017c68:	7323      	strb	r3, [r4, #12]
 8017c6a:	6863      	ldr	r3, [r4, #4]
 8017c6c:	42ab      	cmp	r3, r5
 8017c6e:	d806      	bhi.n	8017c7e <Ssd1306::Text(char const*, unsigned long)+0x32>
 8017c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c72:	f816 1b01 	ldrb.w	r1, [r6], #1
 8017c76:	4620      	mov	r0, r4
 8017c78:	f7ff ffb8 	bl	8017bec <Ssd1306::PutChar(int)>
 8017c7c:	e7ef      	b.n	8017c5e <Ssd1306::Text(char const*, unsigned long)+0x12>
 8017c7e:	2120      	movs	r1, #32
 8017c80:	4620      	mov	r0, r4
 8017c82:	f7ff ffb3 	bl	8017bec <Ssd1306::PutChar(int)>
 8017c86:	3501      	adds	r5, #1
 8017c88:	e7ef      	b.n	8017c6a <Ssd1306::Text(char const*, unsigned long)+0x1e>

08017c8a <Ssd1306::InitMembers()>:
 8017c8a:	2315      	movs	r3, #21
 8017c8c:	6043      	str	r3, [r0, #4]
 8017c8e:	7e03      	ldrb	r3, [r0, #24]
 8017c90:	b12b      	cbz	r3, 8017c9e <Ssd1306::InitMembers()+0x14>
 8017c92:	3b01      	subs	r3, #1
 8017c94:	2b01      	cmp	r3, #1
 8017c96:	d807      	bhi.n	8017ca8 <Ssd1306::InitMembers()+0x1e>
 8017c98:	2304      	movs	r3, #4
 8017c9a:	2204      	movs	r2, #4
 8017c9c:	e001      	b.n	8017ca2 <Ssd1306::InitMembers()+0x18>
 8017c9e:	2308      	movs	r3, #8
 8017ca0:	461a      	mov	r2, r3
 8017ca2:	6083      	str	r3, [r0, #8]
 8017ca4:	61c2      	str	r2, [r0, #28]
 8017ca6:	4770      	bx	lr
 8017ca8:	2308      	movs	r3, #8
 8017caa:	e7f6      	b.n	8017c9a <Ssd1306::InitMembers()+0x10>

08017cac <Ssd1306::Ssd1306(TOledPanel)>:
 8017cac:	b510      	push	{r4, lr}
 8017cae:	4c07      	ldr	r4, [pc, #28]	@ (8017ccc <Ssd1306::Ssd1306(TOledPanel)+0x20>)
 8017cb0:	6004      	str	r4, [r0, #0]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	243c      	movs	r4, #60	@ 0x3c
 8017cb6:	7302      	strb	r2, [r0, #12]
 8017cb8:	7404      	strb	r4, [r0, #16]
 8017cba:	7642      	strb	r2, [r0, #25]
 8017cbc:	4c04      	ldr	r4, [pc, #16]	@ (8017cd0 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8017cbe:	4a05      	ldr	r2, [pc, #20]	@ (8017cd4 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8017cc0:	6144      	str	r4, [r0, #20]
 8017cc2:	7601      	strb	r1, [r0, #24]
 8017cc4:	6010      	str	r0, [r2, #0]
 8017cc6:	f7ff ffe0 	bl	8017c8a <Ssd1306::InitMembers()>
 8017cca:	bd10      	pop	{r4, pc}
 8017ccc:	0801f3cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, ip, sp, lr, pc}
 8017cd0:	00061a80 	andeq	r1, r6, r0, lsl #21
 8017cd4:	2000cc50 	andcs	ip, r0, r0, asr ip

08017cd8 <Ssd1306::SendCommand(unsigned char)>:
 8017cd8:	b507      	push	{r0, r1, r2, lr}
 8017cda:	2300      	movs	r3, #0
 8017cdc:	3010      	adds	r0, #16
 8017cde:	f88d 3004 	strb.w	r3, [sp, #4]
 8017ce2:	f88d 1005 	strb.w	r1, [sp, #5]
 8017ce6:	f7ff ff76 	bl	8017bd6 <HAL_I2C::Setup()>
 8017cea:	2102      	movs	r1, #2
 8017cec:	a801      	add	r0, sp, #4
 8017cee:	f001 fee3 	bl	8019ab8 <gd32_i2c_write>
 8017cf2:	b003      	add	sp, #12
 8017cf4:	f85d fb04 	ldr.w	pc, [sp], #4

08017cf8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>:
 8017cf8:	2914      	cmp	r1, #20
 8017cfa:	b570      	push	{r4, r5, r6, lr}
 8017cfc:	4605      	mov	r5, r0
 8017cfe:	4616      	mov	r6, r2
 8017d00:	d81d      	bhi.n	8017d3e <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x46>
 8017d02:	6883      	ldr	r3, [r0, #8]
 8017d04:	4293      	cmp	r3, r2
 8017d06:	d91a      	bls.n	8017d3e <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x46>
 8017d08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017d0c:	7e43      	ldrb	r3, [r0, #25]
 8017d0e:	004c      	lsls	r4, r1, #1
 8017d10:	b2e4      	uxtb	r4, r4
 8017d12:	b10b      	cbz	r3, 8017d18 <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x20>
 8017d14:	3404      	adds	r4, #4
 8017d16:	b2e4      	uxtb	r4, r4
 8017d18:	f004 010e 	and.w	r1, r4, #14
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	f7ff ffdb 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017d22:	0921      	lsrs	r1, r4, #4
 8017d24:	4628      	mov	r0, r5
 8017d26:	f041 0110 	orr.w	r1, r1, #16
 8017d2a:	f7ff ffd5 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017d2e:	f066 014f 	orn	r1, r6, #79	@ 0x4f
 8017d32:	4628      	mov	r0, r5
 8017d34:	b2c9      	uxtb	r1, r1
 8017d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d3a:	f7ff bfcd 	b.w	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017d3e:	bd70      	pop	{r4, r5, r6, pc}

08017d40 <Ssd1306::TextLine(unsigned long, char const*, unsigned long)>:
 8017d40:	b570      	push	{r4, r5, r6, lr}
 8017d42:	461e      	mov	r6, r3
 8017d44:	6883      	ldr	r3, [r0, #8]
 8017d46:	428b      	cmp	r3, r1
 8017d48:	4604      	mov	r4, r0
 8017d4a:	4615      	mov	r5, r2
 8017d4c:	d30b      	bcc.n	8017d66 <Ssd1306::TextLine(unsigned long, char const*, unsigned long)+0x26>
 8017d4e:	3901      	subs	r1, #1
 8017d50:	b2ca      	uxtb	r2, r1
 8017d52:	2100      	movs	r1, #0
 8017d54:	f7ff ffd0 	bl	8017cf8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8017d58:	4632      	mov	r2, r6
 8017d5a:	4629      	mov	r1, r5
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d62:	f7ff bf73 	b.w	8017c4c <Ssd1306::Text(char const*, unsigned long)>
 8017d66:	bd70      	pop	{r4, r5, r6, pc}

08017d68 <Ssd1306::ClearLine(unsigned long)>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	6883      	ldr	r3, [r0, #8]
 8017d6c:	428b      	cmp	r3, r1
 8017d6e:	4605      	mov	r5, r0
 8017d70:	d314      	bcc.n	8017d9c <Ssd1306::ClearLine(unsigned long)+0x34>
 8017d72:	3901      	subs	r1, #1
 8017d74:	b2cc      	uxtb	r4, r1
 8017d76:	4622      	mov	r2, r4
 8017d78:	2100      	movs	r1, #0
 8017d7a:	f7ff ffbd 	bl	8017cf8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8017d7e:	f105 0010 	add.w	r0, r5, #16
 8017d82:	f7ff ff28 	bl	8017bd6 <HAL_I2C::Setup()>
 8017d86:	2181      	movs	r1, #129	@ 0x81
 8017d88:	4805      	ldr	r0, [pc, #20]	@ (8017da0 <Ssd1306::ClearLine(unsigned long)+0x38>)
 8017d8a:	f001 fe95 	bl	8019ab8 <gd32_i2c_write>
 8017d8e:	4622      	mov	r2, r4
 8017d90:	4628      	mov	r0, r5
 8017d92:	2100      	movs	r1, #0
 8017d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d98:	f7ff bfae 	b.w	8017cf8 <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 8017d9c:	bd38      	pop	{r3, r4, r5, pc}
 8017d9e:	bf00      	nop
 8017da0:	2000cc54 	andcs	ip, r0, r4, asr ip

08017da4 <Ssd1306::SetSleep(bool)>:
 8017da4:	b111      	cbz	r1, 8017dac <Ssd1306::SetSleep(bool)+0x8>
 8017da6:	21ae      	movs	r1, #174	@ 0xae
 8017da8:	f7ff bf96 	b.w	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017dac:	21af      	movs	r1, #175	@ 0xaf
 8017dae:	e7fb      	b.n	8017da8 <Ssd1306::SetSleep(bool)+0x4>

08017db0 <Ssd1306::SetContrast(unsigned char)>:
 8017db0:	b538      	push	{r3, r4, r5, lr}
 8017db2:	4604      	mov	r4, r0
 8017db4:	460d      	mov	r5, r1
 8017db6:	2181      	movs	r1, #129	@ 0x81
 8017db8:	f7ff ff8e 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017dbc:	4629      	mov	r1, r5
 8017dbe:	4620      	mov	r0, r4
 8017dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dc4:	f7ff bf88 	b.w	8017cd8 <Ssd1306::SendCommand(unsigned char)>

08017dc8 <Ssd1306::SetFlipVertically(bool)>:
 8017dc8:	b510      	push	{r4, lr}
 8017dca:	4604      	mov	r4, r0
 8017dcc:	b141      	cbz	r1, 8017de0 <Ssd1306::SetFlipVertically(bool)+0x18>
 8017dce:	21a0      	movs	r1, #160	@ 0xa0
 8017dd0:	f7ff ff82 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017dd4:	21c0      	movs	r1, #192	@ 0xc0
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ddc:	f7ff bf7c 	b.w	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017de0:	21a1      	movs	r1, #161	@ 0xa1
 8017de2:	f7ff ff79 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017de6:	21c8      	movs	r1, #200	@ 0xc8
 8017de8:	e7f5      	b.n	8017dd6 <Ssd1306::SetFlipVertically(bool)+0xe>
	...

08017dec <Ssd1306::CheckSH1106()>:
 8017dec:	b530      	push	{r4, r5, lr}
 8017dee:	2100      	movs	r1, #0
 8017df0:	b087      	sub	sp, #28
 8017df2:	4604      	mov	r4, r0
 8017df4:	f7ff ff70 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017df8:	2190      	movs	r1, #144	@ 0x90
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	f7ff ff6c 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017e00:	21b0      	movs	r1, #176	@ 0xb0
 8017e02:	4620      	mov	r0, r4
 8017e04:	f7ff ff68 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017e08:	4b21      	ldr	r3, [pc, #132]	@ (8017e90 <Ssd1306::CheckSH1106()+0xa4>)
 8017e0a:	f104 0510 	add.w	r5, r4, #16
 8017e0e:	6818      	ldr	r0, [r3, #0]
 8017e10:	9002      	str	r0, [sp, #8]
 8017e12:	791b      	ldrb	r3, [r3, #4]
 8017e14:	f88d 300c 	strb.w	r3, [sp, #12]
 8017e18:	4628      	mov	r0, r5
 8017e1a:	f7ff fedc 	bl	8017bd6 <HAL_I2C::Setup()>
 8017e1e:	2105      	movs	r1, #5
 8017e20:	a802      	add	r0, sp, #8
 8017e22:	f001 fe49 	bl	8019ab8 <gd32_i2c_write>
 8017e26:	2100      	movs	r1, #0
 8017e28:	4620      	mov	r0, r4
 8017e2a:	f7ff ff55 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017e2e:	2190      	movs	r1, #144	@ 0x90
 8017e30:	4620      	mov	r0, r4
 8017e32:	f7ff ff51 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017e36:	21b0      	movs	r1, #176	@ 0xb0
 8017e38:	4620      	mov	r0, r4
 8017e3a:	f7ff ff4d 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017e3e:	2300      	movs	r3, #0
 8017e40:	4628      	mov	r0, r5
 8017e42:	9304      	str	r3, [sp, #16]
 8017e44:	f88d 3014 	strb.w	r3, [sp, #20]
 8017e48:	f7ff fec5 	bl	8017bd6 <HAL_I2C::Setup()>
 8017e4c:	2340      	movs	r3, #64	@ 0x40
 8017e4e:	2101      	movs	r1, #1
 8017e50:	a801      	add	r0, sp, #4
 8017e52:	f88d 3004 	strb.w	r3, [sp, #4]
 8017e56:	f001 fe2f 	bl	8019ab8 <gd32_i2c_write>
 8017e5a:	4628      	mov	r0, r5
 8017e5c:	f7ff febb 	bl	8017bd6 <HAL_I2C::Setup()>
 8017e60:	2105      	movs	r1, #5
 8017e62:	a804      	add	r0, sp, #16
 8017e64:	f001 fe8e 	bl	8019b84 <gd32_i2c_read>
 8017e68:	a902      	add	r1, sp, #8
 8017e6a:	aa04      	add	r2, sp, #16
 8017e6c:	2003      	movs	r0, #3
 8017e6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017e72:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8017e76:	42ab      	cmp	r3, r5
 8017e78:	d006      	beq.n	8017e88 <Ssd1306::CheckSH1106()+0x9c>
 8017e7a:	1b5b      	subs	r3, r3, r5
 8017e7c:	fab3 f383 	clz	r3, r3
 8017e80:	095b      	lsrs	r3, r3, #5
 8017e82:	7663      	strb	r3, [r4, #25]
 8017e84:	b007      	add	sp, #28
 8017e86:	bd30      	pop	{r4, r5, pc}
 8017e88:	3801      	subs	r0, #1
 8017e8a:	d2f0      	bcs.n	8017e6e <Ssd1306::CheckSH1106()+0x82>
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	e7f5      	b.n	8017e7c <Ssd1306::CheckSH1106()+0x90>
 8017e90:	0801c3f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, lr, pc}

08017e94 <Ssd1306::Cls()>:
 8017e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e98:	7e46      	ldrb	r6, [r0, #25]
 8017e9a:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 8017efc <Ssd1306::Cls()+0x68>
 8017e9e:	00b6      	lsls	r6, r6, #2
 8017ea0:	b2f7      	uxtb	r7, r6
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	2500      	movs	r5, #0
 8017ea6:	f047 0810 	orr.w	r8, r7, #16
 8017eaa:	69e3      	ldr	r3, [r4, #28]
 8017eac:	42ab      	cmp	r3, r5
 8017eae:	4639      	mov	r1, r7
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	d80b      	bhi.n	8017ecc <Ssd1306::Cls()+0x38>
 8017eb4:	f7ff ff10 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017eb8:	4641      	mov	r1, r8
 8017eba:	4620      	mov	r0, r4
 8017ebc:	f7ff ff0c 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	21b0      	movs	r1, #176	@ 0xb0
 8017ec4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ec8:	f7ff bf06 	b.w	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017ecc:	f7ff ff04 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017ed0:	4641      	mov	r1, r8
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	f7ff ff00 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017ed8:	f065 014f 	orn	r1, r5, #79	@ 0x4f
 8017edc:	b2c9      	uxtb	r1, r1
 8017ede:	4620      	mov	r0, r4
 8017ee0:	f7ff fefa 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017ee4:	f104 0010 	add.w	r0, r4, #16
 8017ee8:	f7ff fe75 	bl	8017bd6 <HAL_I2C::Setup()>
 8017eec:	f106 0181 	add.w	r1, r6, #129	@ 0x81
 8017ef0:	4648      	mov	r0, r9
 8017ef2:	f001 fde1 	bl	8019ab8 <gd32_i2c_write>
 8017ef6:	3501      	adds	r5, #1
 8017ef8:	e7d7      	b.n	8017eaa <Ssd1306::Cls()+0x16>
 8017efa:	bf00      	nop
 8017efc:	2000cc54 	andcs	ip, r0, r4, asr ip

08017f00 <Ssd1306::Start()>:
 8017f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f02:	7c04      	ldrb	r4, [r0, #16]
 8017f04:	6946      	ldr	r6, [r0, #20]
 8017f06:	4605      	mov	r5, r0
 8017f08:	4620      	mov	r0, r4
 8017f0a:	f001 fdcf 	bl	8019aac <gd32_i2c_set_address>
 8017f0e:	4630      	mov	r0, r6
 8017f10:	f001 fdc4 	bl	8019a9c <gd32_i2c_set_baudrate>
 8017f14:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8017f18:	2b07      	cmp	r3, #7
 8017f1a:	d902      	bls.n	8017f22 <Ssd1306::Start()+0x22>
 8017f1c:	3c50      	subs	r4, #80	@ 0x50
 8017f1e:	2c0f      	cmp	r4, #15
 8017f20:	d80f      	bhi.n	8017f42 <Ssd1306::Start()+0x42>
 8017f22:	2101      	movs	r1, #1
 8017f24:	f10d 0007 	add.w	r0, sp, #7
 8017f28:	f001 fe2c 	bl	8019b84 <gd32_i2c_read>
 8017f2c:	fab0 f480 	clz	r4, r0
 8017f30:	0964      	lsrs	r4, r4, #5
 8017f32:	b34c      	cbz	r4, 8017f88 <Ssd1306::Start()+0x88>
 8017f34:	7e2e      	ldrb	r6, [r5, #24]
 8017f36:	b14e      	cbz	r6, 8017f4c <Ssd1306::Start()+0x4c>
 8017f38:	3e01      	subs	r6, #1
 8017f3a:	2e01      	cmp	r6, #1
 8017f3c:	d927      	bls.n	8017f8e <Ssd1306::Start()+0x8e>
 8017f3e:	2400      	movs	r4, #0
 8017f40:	e022      	b.n	8017f88 <Ssd1306::Start()+0x88>
 8017f42:	2100      	movs	r1, #0
 8017f44:	4608      	mov	r0, r1
 8017f46:	f001 fdb7 	bl	8019ab8 <gd32_i2c_write>
 8017f4a:	e7ef      	b.n	8017f2c <Ssd1306::Start()+0x2c>
 8017f4c:	4f15      	ldr	r7, [pc, #84]	@ (8017fa4 <Ssd1306::Start()+0xa4>)
 8017f4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017f52:	4628      	mov	r0, r5
 8017f54:	3601      	adds	r6, #1
 8017f56:	f7ff febf 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017f5a:	2e18      	cmp	r6, #24
 8017f5c:	d1f7      	bne.n	8017f4e <Ssd1306::Start()+0x4e>
 8017f5e:	4a12      	ldr	r2, [pc, #72]	@ (8017fa8 <Ssd1306::Start()+0xa8>)
 8017f60:	2300      	movs	r3, #0
 8017f62:	4611      	mov	r1, r2
 8017f64:	4618      	mov	r0, r3
 8017f66:	3301      	adds	r3, #1
 8017f68:	2b86      	cmp	r3, #134	@ 0x86
 8017f6a:	f802 0b01 	strb.w	r0, [r2], #1
 8017f6e:	d1fa      	bne.n	8017f66 <Ssd1306::Start()+0x66>
 8017f70:	2340      	movs	r3, #64	@ 0x40
 8017f72:	4628      	mov	r0, r5
 8017f74:	700b      	strb	r3, [r1, #0]
 8017f76:	f7ff ff39 	bl	8017dec <Ssd1306::CheckSH1106()>
 8017f7a:	4628      	mov	r0, r5
 8017f7c:	f7ff ff8a 	bl	8017e94 <Ssd1306::Cls()>
 8017f80:	21af      	movs	r1, #175	@ 0xaf
 8017f82:	4628      	mov	r0, r5
 8017f84:	f7ff fea8 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017f88:	4620      	mov	r0, r4
 8017f8a:	b003      	add	sp, #12
 8017f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f8e:	4f07      	ldr	r7, [pc, #28]	@ (8017fac <Ssd1306::Start()+0xac>)
 8017f90:	2600      	movs	r6, #0
 8017f92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017f96:	4628      	mov	r0, r5
 8017f98:	3601      	adds	r6, #1
 8017f9a:	f7ff fe9d 	bl	8017cd8 <Ssd1306::SendCommand(unsigned char)>
 8017f9e:	2e18      	cmp	r6, #24
 8017fa0:	d1f7      	bne.n	8017f92 <Ssd1306::Start()+0x92>
 8017fa2:	e7dc      	b.n	8017f5e <Ssd1306::Start()+0x5e>
 8017fa4:	0801f41c 	stmdaeq	r1, {r2, r3, r4, sl, ip, sp, lr, pc}
 8017fa8:	2000cc54 	andcs	ip, r0, r4, asr ip
 8017fac:	0801f404 	stmdaeq	r1, {r2, sl, ip, sp, lr, pc}

08017fb0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8017fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb4:	4d15      	ldr	r5, [pc, #84]	@ (801800c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8017fb6:	461e      	mov	r6, r3
 8017fb8:	4b15      	ldr	r3, [pc, #84]	@ (8018010 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8017fba:	b086      	sub	sp, #24
 8017fbc:	6018      	str	r0, [r3, #0]
 8017fbe:	4604      	mov	r4, r0
 8017fc0:	4617      	mov	r7, r2
 8017fc2:	f105 0803 	add.w	r8, r5, #3
 8017fc6:	2203      	movs	r2, #3
 8017fc8:	4628      	mov	r0, r5
 8017fca:	f002 fb32 	bl	801a632 <memmove>
 8017fce:	4639      	mov	r1, r7
 8017fd0:	220b      	movs	r2, #11
 8017fd2:	4640      	mov	r0, r8
 8017fd4:	f002 fb2d 	bl	801a632 <memmove>
 8017fd8:	f105 030e 	add.w	r3, r5, #14
 8017fdc:	4631      	mov	r1, r6
 8017fde:	2208      	movs	r2, #8
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f002 fb26 	bl	801a632 <memmove>
 8017fe6:	2308      	movs	r3, #8
 8017fe8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8017fec:	230b      	movs	r3, #11
 8017fee:	9302      	str	r3, [sp, #8]
 8017ff0:	4b08      	ldr	r3, [pc, #32]	@ (8018014 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8017ff2:	9005      	str	r0, [sp, #20]
 8017ff4:	e9cd 5300 	strd	r5, r3, [sp]
 8017ff8:	4a07      	ldr	r2, [pc, #28]	@ (8018018 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8017ffa:	4808      	ldr	r0, [pc, #32]	@ (801801c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8017ffc:	2303      	movs	r3, #3
 8017ffe:	213f      	movs	r1, #63	@ 0x3f
 8018000:	f002 fe3a 	bl	801ac78 <snprintf>
 8018004:	4620      	mov	r0, r4
 8018006:	b006      	add	sp, #24
 8018008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801800c:	2000cd20 	andcs	ip, r0, r0, lsr #26
 8018010:	2000ccdc 	ldrdcs	ip, [r0], -ip	@ <UNPREDICTABLE>
 8018014:	0801ba9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, fp, ip, sp, pc}
 8018018:	0801c3fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr, pc}
 801801c:	2000cce0 	andcs	ip, r0, r0, ror #25

08018020 <Hardware::ledblink()>:
 8018020:	4b02      	ldr	r3, [pc, #8]	@ (801802c <Hardware::ledblink()+0xc>)
 8018022:	2210      	movs	r2, #16
 8018024:	f8c3 2c2c 	str.w	r2, [r3, #3116]	@ 0xc2c
 8018028:	4770      	bx	lr
 801802a:	bf00      	nop
 801802c:	40020000 	andmi	r0, r2, r0

08018030 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>:
 8018030:	2900      	cmp	r1, #0
 8018032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018034:	db10      	blt.n	8018058 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8018036:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 801803a:	2300      	movs	r3, #0
 801803c:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8018040:	42ab      	cmp	r3, r5
 8018042:	d009      	beq.n	8018058 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8018044:	011c      	lsls	r4, r3, #4
 8018046:	5937      	ldr	r7, [r6, r4]
 8018048:	42b9      	cmp	r1, r7
 801804a:	d106      	bne.n	801805a <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x2a>
 801804c:	4b04      	ldr	r3, [pc, #16]	@ (8018060 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x30>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4420      	add	r0, r4
 8018052:	4413      	add	r3, r2
 8018054:	e9c0 3208 	strd	r3, r2, [r0, #32]
 8018058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801805a:	3301      	adds	r3, #1
 801805c:	e7f0      	b.n	8018040 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x10>
 801805e:	bf00      	nop
 8018060:	2001a628 	andcs	sl, r1, r8, lsr #12

08018064 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>:
 8018064:	680a      	ldr	r2, [r1, #0]
 8018066:	2a00      	cmp	r2, #0
 8018068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801806a:	4606      	mov	r6, r0
 801806c:	468e      	mov	lr, r1
 801806e:	db17      	blt.n	80180a0 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3c>
 8018070:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8018074:	2400      	movs	r4, #0
 8018076:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801807a:	429c      	cmp	r4, r3
 801807c:	d010      	beq.n	80180a0 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3c>
 801807e:	0125      	lsls	r5, r4, #4
 8018080:	5948      	ldr	r0, [r1, r5]
 8018082:	4282      	cmp	r2, r0
 8018084:	d116      	bne.n	80180b4 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x50>
 8018086:	4435      	add	r5, r6
 8018088:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 801808c:	4564      	cmp	r4, ip
 801808e:	f105 0510 	add.w	r5, r5, #16
 8018092:	d306      	bcc.n	80180a2 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3e>
 8018094:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018098:	f8c6 c0a0 	str.w	ip, [r6, #160]	@ 0xa0
 801809c:	f8ce 3000 	str.w	r3, [lr]
 80180a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180a2:	f105 0320 	add.w	r3, r5, #32
 80180a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180a8:	f105 0710 	add.w	r7, r5, #16
 80180ac:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80180b0:	3401      	adds	r4, #1
 80180b2:	e7eb      	b.n	801808c <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x28>
 80180b4:	3401      	adds	r4, #1
 80180b6:	e7e0      	b.n	801807a <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x16>

080180b8 <Hardware::SetFrequency(unsigned long)>:
 80180b8:	460a      	mov	r2, r1
 80180ba:	69c1      	ldr	r1, [r0, #28]
 80180bc:	2900      	cmp	r1, #0
 80180be:	b538      	push	{r3, r4, r5, lr}
 80180c0:	4604      	mov	r4, r0
 80180c2:	da21      	bge.n	8018108 <Hardware::SetFrequency(unsigned long)+0x50>
 80180c4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 80180c8:	2b07      	cmp	r3, #7
 80180ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80180ce:	fbb1 f1f2 	udiv	r1, r1, r2
 80180d2:	d906      	bls.n	80180e2 <Hardware::SetFrequency(unsigned long)+0x2a>
 80180d4:	4825      	ldr	r0, [pc, #148]	@ (801816c <Hardware::SetFrequency(unsigned long)+0xb4>)
 80180d6:	f000 fa9f 	bl	8018618 <console_error>
 80180da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80180de:	61e2      	str	r2, [r4, #28]
 80180e0:	bd38      	pop	{r3, r4, r5, pc}
 80180e2:	4a23      	ldr	r2, [pc, #140]	@ (8018170 <Hardware::SetFrequency(unsigned long)+0xb8>)
 80180e4:	6810      	ldr	r0, [r2, #0]
 80180e6:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 80180ea:	1c55      	adds	r5, r2, #1
 80180ec:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 80180f0:	4408      	add	r0, r1
 80180f2:	1c5d      	adds	r5, r3, #1
 80180f4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80180f8:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
 80180fc:	e9c3 0108 	strd	r0, r1, [r3, #32]
 8018100:	491c      	ldr	r1, [pc, #112]	@ (8018174 <Hardware::SetFrequency(unsigned long)+0xbc>)
 8018102:	629a      	str	r2, [r3, #40]	@ 0x28
 8018104:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8018106:	e7ea      	b.n	80180de <Hardware::SetFrequency(unsigned long)+0x26>
 8018108:	2a08      	cmp	r2, #8
 801810a:	d808      	bhi.n	801811e <Hardware::SetFrequency(unsigned long)+0x66>
 801810c:	2a08      	cmp	r2, #8
 801810e:	d808      	bhi.n	8018122 <Hardware::SetFrequency(unsigned long)+0x6a>
 8018110:	e8df f002 	tbb	[pc, r2]
 8018114:	1c07150c 	cfstr32ne	mvfx1, [r7], {12}
 8018118:	07071f07 	streq	r1, [r7, -r7, lsl #30]
 801811c:	2aff0021 	bcs	7fd81a8 <__stack_size+0x7fd01a8>
 8018120:	d01b      	beq.n	801815a <Hardware::SetFrequency(unsigned long)+0xa2>
 8018122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018126:	fbb3 f2f2 	udiv	r2, r3, r2
 801812a:	e00a      	b.n	8018142 <Hardware::SetFrequency(unsigned long)+0x8a>
 801812c:	f100 011c 	add.w	r1, r0, #28
 8018130:	f7ff ff98 	bl	8018064 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>
 8018134:	4b10      	ldr	r3, [pc, #64]	@ (8018178 <Hardware::SetFrequency(unsigned long)+0xc0>)
 8018136:	2210      	movs	r2, #16
 8018138:	f8c3 2c28 	str.w	r2, [r3, #3112]	@ 0xc28
 801813c:	e7d0      	b.n	80180e0 <Hardware::SetFrequency(unsigned long)+0x28>
 801813e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018142:	4620      	mov	r0, r4
 8018144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018148:	f7ff bf72 	b.w	8018030 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>
 801814c:	f240 124d 	movw	r2, #333	@ 0x14d
 8018150:	e7f7      	b.n	8018142 <Hardware::SetFrequency(unsigned long)+0x8a>
 8018152:	22c8      	movs	r2, #200	@ 0xc8
 8018154:	e7f5      	b.n	8018142 <Hardware::SetFrequency(unsigned long)+0x8a>
 8018156:	227d      	movs	r2, #125	@ 0x7d
 8018158:	e7f3      	b.n	8018142 <Hardware::SetFrequency(unsigned long)+0x8a>
 801815a:	f100 011c 	add.w	r1, r0, #28
 801815e:	f7ff ff81 	bl	8018064 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>
 8018162:	4b05      	ldr	r3, [pc, #20]	@ (8018178 <Hardware::SetFrequency(unsigned long)+0xc0>)
 8018164:	2210      	movs	r2, #16
 8018166:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18
 801816a:	e7b9      	b.n	80180e0 <Hardware::SetFrequency(unsigned long)+0x28>
 801816c:	0801c1ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr, pc}
 8018170:	2001a628 	andcs	sl, r1, r8, lsr #12
 8018174:	08018021 	stmdaeq	r1, {r0, r5, pc}
 8018178:	40020000 	andmi	r0, r2, r0

0801817c <Hardware::SetMode(hardware::ledblink::Mode)>:
 801817c:	7e03      	ldrb	r3, [r0, #24]
 801817e:	b510      	push	{r4, lr}
 8018180:	4604      	mov	r4, r0
 8018182:	b993      	cbnz	r3, 80181aa <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 8018184:	6943      	ldr	r3, [r0, #20]
 8018186:	428b      	cmp	r3, r1
 8018188:	d00f      	beq.n	80181aa <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 801818a:	6141      	str	r1, [r0, #20]
 801818c:	3901      	subs	r1, #1
 801818e:	2904      	cmp	r1, #4
 8018190:	d804      	bhi.n	801819c <Hardware::SetMode(hardware::ledblink::Mode)+0x20>
 8018192:	e8df f001 	tbb	[pc, r1]
 8018196:	110f0d0b 	tstne	pc, fp, lsl #26
 801819a:	21000013 	tstcs	r0, r3, lsl r0
 801819e:	4620      	mov	r0, r4
 80181a0:	f7ff ff8a 	bl	80180b8 <Hardware::SetFrequency(unsigned long)>
 80181a4:	6960      	ldr	r0, [r4, #20]
 80181a6:	f7f1 fad1 	bl	800974c <hardware::ledblink::display(unsigned long)>
 80181aa:	bd10      	pop	{r4, pc}
 80181ac:	21ff      	movs	r1, #255	@ 0xff
 80181ae:	e7f6      	b.n	801819e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80181b0:	2101      	movs	r1, #1
 80181b2:	e7f4      	b.n	801819e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80181b4:	2103      	movs	r1, #3
 80181b6:	e7f2      	b.n	801819e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80181b8:	2105      	movs	r1, #5
 80181ba:	e7f0      	b.n	801819e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80181bc:	2108      	movs	r1, #8
 80181be:	e7ee      	b.n	801819e <Hardware::SetMode(hardware::ledblink::Mode)+0x22>

080181c0 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>:
 80181c0:	b538      	push	{r3, r4, r5, lr}
 80181c2:	4604      	mov	r4, r0
 80181c4:	2300      	movs	r3, #0
 80181c6:	4615      	mov	r5, r2
 80181c8:	7603      	strb	r3, [r0, #24]
 80181ca:	f7ff ffd7 	bl	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 80181ce:	7625      	strb	r5, [r4, #24]
 80181d0:	bd38      	pop	{r3, r4, r5, pc}

080181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>:
 80181d2:	b530      	push	{r4, r5, lr}
 80181d4:	4603      	mov	r3, r0
 80181d6:	4401      	add	r1, r0
 80181d8:	250a      	movs	r5, #10
 80181da:	2000      	movs	r0, #0
 80181dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181e0:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80181e4:	2c09      	cmp	r4, #9
 80181e6:	d805      	bhi.n	80181f4 <remoteconfig::timedate::atoi(char const*, unsigned long)+0x22>
 80181e8:	fb05 2000 	mla	r0, r5, r0, r2
 80181ec:	428b      	cmp	r3, r1
 80181ee:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 80181f2:	d1f3      	bne.n	80181dc <remoteconfig::timedate::atoi(char const*, unsigned long)+0xa>
 80181f4:	bd30      	pop	{r4, r5, pc}
	...

080181f8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)>:
 80181f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181fc:	b08a      	sub	sp, #40	@ 0x28
 80181fe:	4605      	mov	r5, r0
 8018200:	460e      	mov	r6, r1
 8018202:	a808      	add	r0, sp, #32
 8018204:	2100      	movs	r1, #0
 8018206:	f002 fee7 	bl	801afd8 <gettimeofday>
 801820a:	2800      	cmp	r0, #0
 801820c:	db52      	blt.n	80182b4 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xbc>
 801820e:	a808      	add	r0, sp, #32
 8018210:	f002 fe6a 	bl	801aee8 <localtime>
 8018214:	4b28      	ldr	r3, [pc, #160]	@ (80182b8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc0>)
 8018216:	4604      	mov	r4, r0
 8018218:	6919      	ldr	r1, [r3, #16]
 801821a:	6827      	ldr	r7, [r4, #0]
 801821c:	6963      	ldr	r3, [r4, #20]
 801821e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8018222:	fb91 fcf2 	sdiv	ip, r1, r2
 8018226:	fa4f f08c 	sxtb.w	r0, ip
 801822a:	2800      	cmp	r0, #0
 801822c:	f04f 0e3c 	mov.w	lr, #60	@ 0x3c
 8018230:	dd21      	ble.n	8018276 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0x7e>
 8018232:	f5a2 52e1 	sub.w	r2, r2, #7200	@ 0x1c20
 8018236:	fb02 1100 	mla	r1, r2, r0, r1
 801823a:	fbb1 f1fe 	udiv	r1, r1, lr
 801823e:	b2ca      	uxtb	r2, r1
 8018240:	e9d4 8e02 	ldrd	r8, lr, [r4, #8]
 8018244:	6921      	ldr	r1, [r4, #16]
 8018246:	6864      	ldr	r4, [r4, #4]
 8018248:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 80182c8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xd0>
 801824c:	9403      	str	r4, [sp, #12]
 801824e:	4c1b      	ldr	r4, [pc, #108]	@ (80182bc <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc4>)
 8018250:	3101      	adds	r1, #1
 8018252:	2800      	cmp	r0, #0
 8018254:	bfd8      	it	le
 8018256:	4664      	movle	r4, ip
 8018258:	e9cd 0206 	strd	r0, r2, [sp, #24]
 801825c:	9100      	str	r1, [sp, #0]
 801825e:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8018262:	e9cd e801 	strd	lr, r8, [sp, #4]
 8018266:	4a16      	ldr	r2, [pc, #88]	@ (80182c0 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc8>)
 8018268:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 801826c:	4631      	mov	r1, r6
 801826e:	4628      	mov	r0, r5
 8018270:	f002 fd02 	bl	801ac78 <snprintf>
 8018274:	e01b      	b.n	80182ae <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xb6>
 8018276:	4342      	muls	r2, r0
 8018278:	1a52      	subs	r2, r2, r1
 801827a:	fbb2 f2fe 	udiv	r2, r2, lr
 801827e:	b2d2      	uxtb	r2, r2
 8018280:	ea42 0c0c 	orr.w	ip, r2, ip
 8018284:	fa5f f18c 	uxtb.w	r1, ip
 8018288:	2900      	cmp	r1, #0
 801828a:	d1d9      	bne.n	8018240 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0x48>
 801828c:	9704      	str	r7, [sp, #16]
 801828e:	6862      	ldr	r2, [r4, #4]
 8018290:	9203      	str	r2, [sp, #12]
 8018292:	68a2      	ldr	r2, [r4, #8]
 8018294:	9202      	str	r2, [sp, #8]
 8018296:	68e2      	ldr	r2, [r4, #12]
 8018298:	9201      	str	r2, [sp, #4]
 801829a:	6922      	ldr	r2, [r4, #16]
 801829c:	3201      	adds	r2, #1
 801829e:	9200      	str	r2, [sp, #0]
 80182a0:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 80182a4:	4a07      	ldr	r2, [pc, #28]	@ (80182c4 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xcc>)
 80182a6:	4631      	mov	r1, r6
 80182a8:	4628      	mov	r0, r5
 80182aa:	f002 fce5 	bl	801ac78 <snprintf>
 80182ae:	b00a      	add	sp, #40	@ 0x28
 80182b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182b4:	2000      	movs	r0, #0
 80182b6:	e7fa      	b.n	80182ae <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xb6>
 80182b8:	40024000 	andmi	r4, r2, r0
 80182bc:	0801c39f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, lr, pc}
 80182c0:	0801c44b 	stmdaeq	r1, {r0, r1, r3, r6, sl, lr, pc}
 80182c4:	0801c422 	stmdaeq	r1, {r1, r5, sl, lr, pc}
 80182c8:	0801b940 	stmdaeq	r1, {r6, r8, fp, ip, sp, pc}

080182cc <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)>:
 80182cc:	b570      	push	{r4, r5, r6, lr}
 80182ce:	291a      	cmp	r1, #26
 80182d0:	b08c      	sub	sp, #48	@ 0x30
 80182d2:	4606      	mov	r6, r0
 80182d4:	460c      	mov	r4, r1
 80182d6:	d001      	beq.n	80182dc <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x10>
 80182d8:	291f      	cmp	r1, #31
 80182da:	d174      	bne.n	80183c6 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xfa>
 80182dc:	2104      	movs	r1, #4
 80182de:	1d70      	adds	r0, r6, #5
 80182e0:	f7ff ff77 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 80182e4:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 80182e8:	9008      	str	r0, [sp, #32]
 80182ea:	2102      	movs	r1, #2
 80182ec:	f106 000a 	add.w	r0, r6, #10
 80182f0:	f7ff ff6f 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 80182f4:	3801      	subs	r0, #1
 80182f6:	9007      	str	r0, [sp, #28]
 80182f8:	2102      	movs	r1, #2
 80182fa:	f106 000d 	add.w	r0, r6, #13
 80182fe:	f7ff ff68 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8018302:	2102      	movs	r1, #2
 8018304:	9006      	str	r0, [sp, #24]
 8018306:	f106 0010 	add.w	r0, r6, #16
 801830a:	f7ff ff62 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 801830e:	2102      	movs	r1, #2
 8018310:	9005      	str	r0, [sp, #20]
 8018312:	f106 0013 	add.w	r0, r6, #19
 8018316:	f7ff ff5c 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 801831a:	2102      	movs	r1, #2
 801831c:	9004      	str	r0, [sp, #16]
 801831e:	f106 0016 	add.w	r0, r6, #22
 8018322:	f7ff ff56 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8018326:	9003      	str	r0, [sp, #12]
 8018328:	a803      	add	r0, sp, #12
 801832a:	f002 fded 	bl	801af08 <mktime>
 801832e:	2300      	movs	r3, #0
 8018330:	2c1a      	cmp	r4, #26
 8018332:	4605      	mov	r5, r0
 8018334:	9001      	str	r0, [sp, #4]
 8018336:	9302      	str	r3, [sp, #8]
 8018338:	d041      	beq.n	80183be <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xf2>
 801833a:	7e33      	ldrb	r3, [r6, #24]
 801833c:	2102      	movs	r1, #2
 801833e:	2b2d      	cmp	r3, #45	@ 0x2d
 8018340:	f106 0019 	add.w	r0, r6, #25
 8018344:	bf14      	ite	ne
 8018346:	2401      	movne	r4, #1
 8018348:	f04f 34ff 	moveq.w	r4, #4294967295	@ 0xffffffff
 801834c:	f7ff ff41 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8018350:	4344      	muls	r4, r0
 8018352:	f004 04ff 	and.w	r4, r4, #255	@ 0xff
 8018356:	f104 030c 	add.w	r3, r4, #12
 801835a:	b2db      	uxtb	r3, r3
 801835c:	2b1a      	cmp	r3, #26
 801835e:	d82a      	bhi.n	80183b6 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xea>
 8018360:	2102      	movs	r1, #2
 8018362:	f106 001c 	add.w	r0, r6, #28
 8018366:	f7ff ff34 	bl	80181d2 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 801836a:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 801836e:	b264      	sxtb	r4, r4
 8018370:	d12b      	bne.n	80183ca <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xfe>
 8018372:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8018376:	4363      	muls	r3, r4
 8018378:	4a15      	ldr	r2, [pc, #84]	@ (80183d0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x104>)
 801837a:	6911      	ldr	r1, [r2, #16]
 801837c:	4299      	cmp	r1, r3
 801837e:	bf1f      	itttt	ne
 8018380:	6113      	strne	r3, [r2, #16]
 8018382:	4b14      	ldrne	r3, [pc, #80]	@ (80183d4 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x108>)
 8018384:	2201      	movne	r2, #1
 8018386:	601a      	strne	r2, [r3, #0]
 8018388:	e015      	b.n	80183b6 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xea>
 801838a:	f993 1000 	ldrsb.w	r1, [r3]
 801838e:	42a1      	cmp	r1, r4
 8018390:	d10e      	bne.n	80183b0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe4>
 8018392:	7859      	ldrb	r1, [r3, #1]
 8018394:	4281      	cmp	r1, r0
 8018396:	d10b      	bne.n	80183b0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe4>
 8018398:	2c00      	cmp	r4, #0
 801839a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801839e:	fb04 f303 	mul.w	r3, r4, r3
 80183a2:	bfcc      	ite	gt
 80183a4:	223c      	movgt	r2, #60	@ 0x3c
 80183a6:	f06f 023b 	mvnle.w	r2, #59	@ 0x3b
 80183aa:	fb02 3300 	mla	r3, r2, r0, r3
 80183ae:	e7e3      	b.n	8018378 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xac>
 80183b0:	3302      	adds	r3, #2
 80183b2:	3a01      	subs	r2, #1
 80183b4:	d1e9      	bne.n	801838a <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xbe>
 80183b6:	4b06      	ldr	r3, [pc, #24]	@ (80183d0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x104>)
 80183b8:	691b      	ldr	r3, [r3, #16]
 80183ba:	1aed      	subs	r5, r5, r3
 80183bc:	9501      	str	r5, [sp, #4]
 80183be:	2100      	movs	r1, #0
 80183c0:	a801      	add	r0, sp, #4
 80183c2:	f002 fe3b 	bl	801b03c <settimeofday>
 80183c6:	b00c      	add	sp, #48	@ 0x30
 80183c8:	bd70      	pop	{r4, r5, r6, pc}
 80183ca:	4b03      	ldr	r3, [pc, #12]	@ (80183d8 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x10c>)
 80183cc:	220c      	movs	r2, #12
 80183ce:	e7f0      	b.n	80183b2 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe6>
 80183d0:	40024000 	andmi	r4, r2, r0
 80183d4:	2000cc44 	andcs	ip, r0, r4, asr #24
 80183d8:	0801f130 	stmdaeq	r1, {r4, r5, r8, ip, sp, lr, pc}

080183dc <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>:
 80183dc:	2900      	cmp	r1, #0
 80183de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183e0:	db10      	blt.n	8018404 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 80183e2:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 80183e6:	2300      	movs	r3, #0
 80183e8:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 80183ec:	42ab      	cmp	r3, r5
 80183ee:	d009      	beq.n	8018404 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 80183f0:	011c      	lsls	r4, r3, #4
 80183f2:	5937      	ldr	r7, [r6, r4]
 80183f4:	42b9      	cmp	r1, r7
 80183f6:	d106      	bne.n	8018406 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x2a>
 80183f8:	4b04      	ldr	r3, [pc, #16]	@ (801840c <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x30>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	4420      	add	r0, r4
 80183fe:	4413      	add	r3, r2
 8018400:	e9c0 3208 	strd	r3, r2, [r0, #32]
 8018404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018406:	3301      	adds	r3, #1
 8018408:	e7f0      	b.n	80183ec <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x10>
 801840a:	bf00      	nop
 801840c:	2001a628 	andcs	sl, r1, r8, lsr #12

08018410 <Hardware::Hardware()>:
 8018410:	b570      	push	{r4, r5, r6, lr}
 8018412:	2306      	movs	r3, #6
 8018414:	6143      	str	r3, [r0, #20]
 8018416:	2500      	movs	r5, #0
 8018418:	4b5c      	ldr	r3, [pc, #368]	@ (801858c <Hardware::Hardware()+0x17c>)
 801841a:	7405      	strb	r5, [r0, #16]
 801841c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018420:	b090      	sub	sp, #64	@ 0x40
 8018422:	e9c0 5528 	strd	r5, r5, [r0, #160]	@ 0xa0
 8018426:	4604      	mov	r4, r0
 8018428:	7605      	strb	r5, [r0, #24]
 801842a:	61c6      	str	r6, [r0, #28]
 801842c:	6018      	str	r0, [r3, #0]
 801842e:	f7f0 f8b3 	bl	8008598 <console_init()>
 8018432:	f001 f9cf 	bl	80197d4 <timer6_config()>
 8018436:	f001 fa33 	bl	80198a0 <systick_config>
 801843a:	f001 fa05 	bl	8019848 <udelay_init()>
 801843e:	4620      	mov	r0, r4
 8018440:	f002 fdae 	bl	801afa0 <hal::uuid_init(unsigned char*)>
 8018444:	f001 fa52 	bl	80198ec <gd32_adc_init()>
 8018448:	f001 fadc 	bl	8019a04 <gd32_i2c_begin>
 801844c:	f241 0004 	movw	r0, #4100	@ 0x1004
 8018450:	f000 fe66 	bl	8019120 <rcu_periph_clock_enable>
 8018454:	484e      	ldr	r0, [pc, #312]	@ (8018590 <Hardware::Hardware()+0x180>)
 8018456:	f000 ff1f 	bl	8019298 <timer_deinit>
 801845a:	a803      	add	r0, sp, #12
 801845c:	f000 ffc2 	bl	80193e4 <timer_struct_para_init>
 8018460:	23ef      	movs	r3, #239	@ 0xef
 8018462:	a903      	add	r1, sp, #12
 8018464:	484a      	ldr	r0, [pc, #296]	@ (8018590 <Hardware::Hardware()+0x180>)
 8018466:	f8ad 300c 	strh.w	r3, [sp, #12]
 801846a:	9605      	str	r6, [sp, #20]
 801846c:	f000 ffc2 	bl	80193f4 <timer_init>
 8018470:	4847      	ldr	r0, [pc, #284]	@ (8018590 <Hardware::Hardware()+0x180>)
 8018472:	f000 fff3 	bl	801945c <timer_enable>
 8018476:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 801847a:	f000 fe7d 	bl	8019178 <rcu_timer_clock_prescaler_config>
 801847e:	f641 400f 	movw	r0, #7183	@ 0x1c0f
 8018482:	f000 fe4d 	bl	8019120 <rcu_periph_clock_enable>
 8018486:	f241 001c 	movw	r0, #4124	@ 0x101c
 801848a:	f000 fe49 	bl	8019120 <rcu_periph_clock_enable>
 801848e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018492:	f000 fe31 	bl	80190f8 <pmu_backup_ldo_config>
 8018496:	f640 4012 	movw	r0, #3090	@ 0xc12
 801849a:	f000 fe41 	bl	8019120 <rcu_periph_clock_enable>
 801849e:	f000 fe37 	bl	8019110 <pmu_backup_write_enable>
 80184a2:	4629      	mov	r1, r5
 80184a4:	2001      	movs	r0, #1
 80184a6:	f001 f953 	bl	8019750 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 80184aa:	4a3a      	ldr	r2, [pc, #232]	@ (8018594 <Hardware::Hardware()+0x184>)
 80184ac:	4b3a      	ldr	r3, [pc, #232]	@ (8018598 <Hardware::Hardware()+0x188>)
 80184ae:	1a9b      	subs	r3, r3, r2
 80184b0:	3b01      	subs	r3, #1
 80184b2:	d245      	bcs.n	8018540 <Hardware::Hardware()+0x130>
 80184b4:	4a39      	ldr	r2, [pc, #228]	@ (801859c <Hardware::Hardware()+0x18c>)
 80184b6:	4b3a      	ldr	r3, [pc, #232]	@ (80185a0 <Hardware::Hardware()+0x190>)
 80184b8:	2100      	movs	r1, #0
 80184ba:	1a9b      	subs	r3, r3, r2
 80184bc:	3b01      	subs	r3, #1
 80184be:	d242      	bcs.n	8018546 <Hardware::Hardware()+0x136>
 80184c0:	4a38      	ldr	r2, [pc, #224]	@ (80185a4 <Hardware::Hardware()+0x194>)
 80184c2:	4b39      	ldr	r3, [pc, #228]	@ (80185a8 <Hardware::Hardware()+0x198>)
 80184c4:	2100      	movs	r1, #0
 80184c6:	1a9b      	subs	r3, r3, r2
 80184c8:	3b01      	subs	r3, #1
 80184ca:	d23f      	bcs.n	801854c <Hardware::Hardware()+0x13c>
 80184cc:	ab07      	add	r3, sp, #28
 80184ce:	2524      	movs	r5, #36	@ 0x24
 80184d0:	4618      	mov	r0, r3
 80184d2:	2200      	movs	r2, #0
 80184d4:	3d01      	subs	r5, #1
 80184d6:	f803 2b01 	strb.w	r2, [r3], #1
 80184da:	d1fb      	bne.n	80184d4 <Hardware::Hardware()+0xc4>
 80184dc:	2217      	movs	r2, #23
 80184de:	2308      	movs	r3, #8
 80184e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80184e4:	237c      	movs	r3, #124	@ 0x7c
 80184e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80184e8:	f002 fd0e 	bl	801af08 <mktime>
 80184ec:	4629      	mov	r1, r5
 80184ee:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80184f2:	a801      	add	r0, sp, #4
 80184f4:	f002 fda2 	bl	801b03c <settimeofday>
 80184f8:	f640 4003 	movw	r0, #3075	@ 0xc03
 80184fc:	f000 fe10 	bl	8019120 <rcu_periph_clock_enable>
 8018500:	482a      	ldr	r0, [pc, #168]	@ (80185ac <Hardware::Hardware()+0x19c>)
 8018502:	2310      	movs	r3, #16
 8018504:	462a      	mov	r2, r5
 8018506:	2101      	movs	r1, #1
 8018508:	f000 fd88 	bl	801901c <gpio_mode_set>
 801850c:	2310      	movs	r3, #16
 801850e:	2202      	movs	r2, #2
 8018510:	4629      	mov	r1, r5
 8018512:	4826      	ldr	r0, [pc, #152]	@ (80185ac <Hardware::Hardware()+0x19c>)
 8018514:	f000 fda4 	bl	8019060 <gpio_output_options_set>
 8018518:	4b25      	ldr	r3, [pc, #148]	@ (80185b0 <Hardware::Hardware()+0x1a0>)
 801851a:	2210      	movs	r2, #16
 801851c:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18
 8018520:	69e1      	ldr	r1, [r4, #28]
 8018522:	2900      	cmp	r1, #0
 8018524:	da2b      	bge.n	801857e <Hardware::Hardware()+0x16e>
 8018526:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 801852a:	2b07      	cmp	r3, #7
 801852c:	d911      	bls.n	8018552 <Hardware::Hardware()+0x142>
 801852e:	4821      	ldr	r0, [pc, #132]	@ (80185b4 <Hardware::Hardware()+0x1a4>)
 8018530:	f000 f872 	bl	8018618 <console_error>
 8018534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018538:	61e2      	str	r2, [r4, #28]
 801853a:	4620      	mov	r0, r4
 801853c:	b010      	add	sp, #64	@ 0x40
 801853e:	bd70      	pop	{r4, r5, r6, pc}
 8018540:	f802 5b01 	strb.w	r5, [r2], #1
 8018544:	e7b4      	b.n	80184b0 <Hardware::Hardware()+0xa0>
 8018546:	f802 1b01 	strb.w	r1, [r2], #1
 801854a:	e7b7      	b.n	80184bc <Hardware::Hardware()+0xac>
 801854c:	f802 1b01 	strb.w	r1, [r2], #1
 8018550:	e7ba      	b.n	80184c8 <Hardware::Hardware()+0xb8>
 8018552:	4a19      	ldr	r2, [pc, #100]	@ (80185b8 <Hardware::Hardware()+0x1a8>)
 8018554:	6811      	ldr	r1, [r2, #0]
 8018556:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 801855a:	1c50      	adds	r0, r2, #1
 801855c:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 8018560:	1c58      	adds	r0, r3, #1
 8018562:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8018566:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 801856a:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 801856e:	6219      	str	r1, [r3, #32]
 8018570:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8018574:	e9c3 1209 	strd	r1, r2, [r3, #36]	@ 0x24
 8018578:	4910      	ldr	r1, [pc, #64]	@ (80185bc <Hardware::Hardware()+0x1ac>)
 801857a:	62d9      	str	r1, [r3, #44]	@ 0x2c
 801857c:	e7dc      	b.n	8018538 <Hardware::Hardware()+0x128>
 801857e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018582:	4620      	mov	r0, r4
 8018584:	f7ff ff2a 	bl	80183dc <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>
 8018588:	e7d7      	b.n	801853a <Hardware::Hardware()+0x12a>
 801858a:	bf00      	nop
 801858c:	2000cd38 	andcs	ip, r0, r8, lsr sp
 8018590:	40001000 	andmi	r1, r0, r0
 8018594:	2001c000 	andcs	ip, r1, r0
 8018598:	2001c000 	andcs	ip, r1, r0
 801859c:	10008000 	andne	r8, r0, r0
 80185a0:	1000cc90 	mulne	r0, r0, ip
 80185a4:	20020000 	andcs	r0, r2, r0
 80185a8:	20030000 	andcs	r0, r3, r0
 80185ac:	40020c00 	andmi	r0, r2, r0, lsl #24
 80185b0:	40020000 	andmi	r0, r2, r0
 80185b4:	0801c1ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr, pc}
 80185b8:	2001a628 	andcs	sl, r1, r8, lsr #12
 80185bc:	08018021 	stmdaeq	r1, {r0, r5, pc}

080185c0 <Hardware::Reboot()>:
 80185c0:	4604      	mov	r4, r0
 80185c2:	b508      	push	{r3, lr}
 80185c4:	2500      	movs	r5, #0
 80185c6:	480f      	ldr	r0, [pc, #60]	@ (8018604 <Hardware::Reboot()+0x44>)
 80185c8:	f002 fb83 	bl	801acd2 <puts>
 80185cc:	2104      	movs	r1, #4
 80185ce:	7425      	strb	r5, [r4, #16]
 80185d0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80185d4:	f000 fcf8 	bl	8018fc8 <fwdgt_config>
 80185d8:	4620      	mov	r0, r4
 80185da:	f7f1 fc4b 	bl	8009e74 <Hardware::RebootHandler()>
 80185de:	f7fc fd47 	bl	8015070 <net::net_shutdown()>
 80185e2:	4629      	mov	r1, r5
 80185e4:	4620      	mov	r0, r4
 80185e6:	f7ff fdc9 	bl	801817c <Hardware::SetMode(hardware::ledblink::Mode)>
 80185ea:	f3bf 8f4f 	dsb	sy
 80185ee:	4906      	ldr	r1, [pc, #24]	@ (8018608 <Hardware::Reboot()+0x48>)
 80185f0:	4b06      	ldr	r3, [pc, #24]	@ (801860c <Hardware::Reboot()+0x4c>)
 80185f2:	68ca      	ldr	r2, [r1, #12]
 80185f4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80185f8:	4313      	orrs	r3, r2
 80185fa:	60cb      	str	r3, [r1, #12]
 80185fc:	f3bf 8f4f 	dsb	sy
 8018600:	bf00      	nop
 8018602:	e7fd      	b.n	8018600 <Hardware::Reboot()+0x40>
 8018604:	0801b994 	stmdaeq	r1, {r2, r4, r7, r8, fp, ip, sp, pc}
 8018608:	e000ed00 	and	lr, r0, r0, lsl #26
 801860c:	05fa0004 	ldrbeq	r0, [sl, #4]!

08018610 <console_putc>:
 8018610:	f001 bb6e 	b.w	8019cf0 <uart0_putc>

08018614 <console_puts>:
 8018614:	f001 bb86 	b.w	8019d24 <uart0_puts>

08018618 <console_error>:
 8018618:	b510      	push	{r4, lr}
 801861a:	4604      	mov	r4, r0
 801861c:	4805      	ldr	r0, [pc, #20]	@ (8018634 <console_error+0x1c>)
 801861e:	f001 fb81 	bl	8019d24 <uart0_puts>
 8018622:	4620      	mov	r0, r4
 8018624:	f001 fb7e 	bl	8019d24 <uart0_puts>
 8018628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801862c:	4802      	ldr	r0, [pc, #8]	@ (8018638 <console_error+0x20>)
 801862e:	f001 bb79 	b.w	8019d24 <uart0_puts>
 8018632:	bf00      	nop
 8018634:	0801c47e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, lr, pc}
 8018638:	0801c484 	stmdaeq	r1, {r2, r7, sl, lr, pc}

0801863c <console_set_fg_color>:
 801863c:	2807      	cmp	r0, #7
 801863e:	d810      	bhi.n	8018662 <console_set_fg_color+0x26>
 8018640:	e8df f000 	tbb	[pc, r0]
 8018644:	0b090704 	bleq	825a25c <_sidata+0x23ab58>
 8018648:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	@ 8018614 <console_puts>
 801864c:	4806      	ldr	r0, [pc, #24]	@ (8018668 <console_set_fg_color+0x2c>)
 801864e:	f001 bb69 	b.w	8019d24 <uart0_puts>
 8018652:	4806      	ldr	r0, [pc, #24]	@ (801866c <console_set_fg_color+0x30>)
 8018654:	e7fb      	b.n	801864e <console_set_fg_color+0x12>
 8018656:	4806      	ldr	r0, [pc, #24]	@ (8018670 <console_set_fg_color+0x34>)
 8018658:	e7f9      	b.n	801864e <console_set_fg_color+0x12>
 801865a:	4806      	ldr	r0, [pc, #24]	@ (8018674 <console_set_fg_color+0x38>)
 801865c:	e7f7      	b.n	801864e <console_set_fg_color+0x12>
 801865e:	4806      	ldr	r0, [pc, #24]	@ (8018678 <console_set_fg_color+0x3c>)
 8018660:	e7f5      	b.n	801864e <console_set_fg_color+0x12>
 8018662:	4806      	ldr	r0, [pc, #24]	@ (801867c <console_set_fg_color+0x40>)
 8018664:	e7f3      	b.n	801864e <console_set_fg_color+0x12>
 8018666:	bf00      	nop
 8018668:	0801c48a 	stmdaeq	r1, {r1, r3, r7, sl, lr, pc}
 801866c:	0801c47e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, lr, pc}
 8018670:	0801c490 	stmdaeq	r1, {r4, r7, sl, lr, pc}
 8018674:	0801c496 	stmdaeq	r1, {r1, r2, r4, r7, sl, lr, pc}
 8018678:	0801c484 	stmdaeq	r1, {r2, r7, sl, lr, pc}
 801867c:	0801c49c 	stmdaeq	r1, {r2, r3, r4, r7, sl, lr, pc}

08018680 <console_status>:
 8018680:	b510      	push	{r4, lr}
 8018682:	b280      	uxth	r0, r0
 8018684:	460c      	mov	r4, r1
 8018686:	f7ff ffd9 	bl	801863c <console_set_fg_color>
 801868a:	4807      	ldr	r0, [pc, #28]	@ (80186a8 <console_status+0x28>)
 801868c:	f001 fb4a 	bl	8019d24 <uart0_puts>
 8018690:	4620      	mov	r0, r4
 8018692:	f001 fb47 	bl	8019d24 <uart0_puts>
 8018696:	200a      	movs	r0, #10
 8018698:	f001 fb2a 	bl	8019cf0 <uart0_putc>
 801869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186a0:	4802      	ldr	r0, [pc, #8]	@ (80186ac <console_status+0x2c>)
 80186a2:	f001 bb3f 	b.w	8019d24 <uart0_puts>
 80186a6:	bf00      	nop
 80186a8:	0801c4a2 	stmdaeq	r1, {r1, r5, r7, sl, lr, pc}
 80186ac:	0801c484 	stmdaeq	r1, {r2, r7, sl, lr, pc}

080186b0 <stack_debug_init>:
 80186b0:	4b04      	ldr	r3, [pc, #16]	@ (80186c4 <stack_debug_init+0x14>)
 80186b2:	4a05      	ldr	r2, [pc, #20]	@ (80186c8 <stack_debug_init+0x18>)
 80186b4:	4905      	ldr	r1, [pc, #20]	@ (80186cc <stack_debug_init+0x1c>)
 80186b6:	4293      	cmp	r3, r2
 80186b8:	d300      	bcc.n	80186bc <stack_debug_init+0xc>
 80186ba:	4770      	bx	lr
 80186bc:	f843 1b04 	str.w	r1, [r3], #4
 80186c0:	e7f9      	b.n	80186b6 <stack_debug_init+0x6>
 80186c2:	bf00      	nop
 80186c4:	10000000 	andne	r0, r0, r0
 80186c8:	10008000 	andne	r8, r0, r0
 80186cc:	abcdabcd 	blge	7383608 <__stack_size+0x737b608>

080186d0 <stack_debug_print()>:
 80186d0:	b570      	push	{r4, r5, r6, lr}
 80186d2:	4d18      	ldr	r5, [pc, #96]	@ (8018734 <stack_debug_print()+0x64>)
 80186d4:	4c18      	ldr	r4, [pc, #96]	@ (8018738 <stack_debug_print()+0x68>)
 80186d6:	4a19      	ldr	r2, [pc, #100]	@ (801873c <stack_debug_print()+0x6c>)
 80186d8:	4629      	mov	r1, r5
 80186da:	42a5      	cmp	r5, r4
 80186dc:	d202      	bcs.n	80186e4 <stack_debug_print()+0x14>
 80186de:	6828      	ldr	r0, [r5, #0]
 80186e0:	4290      	cmp	r0, r2
 80186e2:	d005      	beq.n	80186f0 <stack_debug_print()+0x20>
 80186e4:	4a16      	ldr	r2, [pc, #88]	@ (8018740 <stack_debug_print()+0x70>)
 80186e6:	6810      	ldr	r0, [r2, #0]
 80186e8:	1b66      	subs	r6, r4, r5
 80186ea:	42b0      	cmp	r0, r6
 80186ec:	d102      	bne.n	80186f4 <stack_debug_print()+0x24>
 80186ee:	bd70      	pop	{r4, r5, r6, pc}
 80186f0:	3504      	adds	r5, #4
 80186f2:	e7f2      	b.n	80186da <stack_debug_print()+0xa>
 80186f4:	1a64      	subs	r4, r4, r1
 80186f6:	1a6d      	subs	r5, r5, r1
 80186f8:	2319      	movs	r3, #25
 80186fa:	10a4      	asrs	r4, r4, #2
 80186fc:	436b      	muls	r3, r5
 80186fe:	6016      	str	r6, [r2, #0]
 8018700:	fb93 f3f4 	sdiv	r3, r3, r4
 8018704:	b983      	cbnz	r3, 8018728 <stack_debug_print()+0x58>
 8018706:	480f      	ldr	r0, [pc, #60]	@ (8018744 <stack_debug_print()+0x74>)
 8018708:	f002 fa8e 	bl	801ac28 <printf>
 801870c:	1e21      	subs	r1, r4, #0
 801870e:	bfb8      	it	lt
 8018710:	31ff      	addlt	r1, #255	@ 0xff
 8018712:	462b      	mov	r3, r5
 8018714:	4632      	mov	r2, r6
 8018716:	480c      	ldr	r0, [pc, #48]	@ (8018748 <stack_debug_print()+0x78>)
 8018718:	1209      	asrs	r1, r1, #8
 801871a:	f002 fa85 	bl	801ac28 <printf>
 801871e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018722:	480a      	ldr	r0, [pc, #40]	@ (801874c <stack_debug_print()+0x7c>)
 8018724:	f002 ba80 	b.w	801ac28 <printf>
 8018728:	2b01      	cmp	r3, #1
 801872a:	bf0c      	ite	eq
 801872c:	4808      	ldreq	r0, [pc, #32]	@ (8018750 <stack_debug_print()+0x80>)
 801872e:	4809      	ldrne	r0, [pc, #36]	@ (8018754 <stack_debug_print()+0x84>)
 8018730:	e7ea      	b.n	8018708 <stack_debug_print()+0x38>
 8018732:	bf00      	nop
 8018734:	10000000 	andne	r0, r0, r0
 8018738:	10008000 	andne	r8, r0, r0
 801873c:	abcdabcd 	blge	7383678 <__stack_size+0x737b678>
 8018740:	2000cd40 	andcs	ip, r0, r0, asr #26
 8018744:	0801c47e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, lr, pc}
 8018748:	0801c4c0 	stmdaeq	r1, {r6, r7, sl, lr, pc}
 801874c:	0801c4e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, lr, pc}
 8018750:	0801c496 	stmdaeq	r1, {r1, r2, r4, r7, sl, lr, pc}
 8018754:	0801c4ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, sl, lr, pc}

08018758 <stack_debug_run()>:
 8018758:	b508      	push	{r3, lr}
 801875a:	2000      	movs	r0, #0
 801875c:	f002 fc84 	bl	801b068 <time>
 8018760:	4b04      	ldr	r3, [pc, #16]	@ (8018774 <stack_debug_run()+0x1c>)
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	4282      	cmp	r2, r0
 8018766:	d004      	beq.n	8018772 <stack_debug_run()+0x1a>
 8018768:	6018      	str	r0, [r3, #0]
 801876a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801876e:	f7ff bfaf 	b.w	80186d0 <stack_debug_print()>
 8018772:	bd08      	pop	{r3, pc}
 8018774:	2000cd3c 	andcs	ip, r0, ip, lsr sp

08018778 <SystemInit>:
 8018778:	4a56      	ldr	r2, [pc, #344]	@ (80188d4 <SystemInit+0x15c>)
 801877a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 801877e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018782:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8018786:	4b54      	ldr	r3, [pc, #336]	@ (80188d8 <SystemInit+0x160>)
 8018788:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801878c:	f042 0201 	orr.w	r2, r2, #1
 8018790:	b082      	sub	sp, #8
 8018792:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8018796:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801879a:	0790      	lsls	r0, r2, #30
 801879c:	d5fb      	bpl.n	8018796 <SystemInit+0x1e>
 801879e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80187a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80187a6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80187aa:	2300      	movs	r3, #0
 80187ac:	9301      	str	r3, [sp, #4]
 80187ae:	9b01      	ldr	r3, [sp, #4]
 80187b0:	2b4f      	cmp	r3, #79	@ 0x4f
 80187b2:	d93d      	bls.n	8018830 <SystemInit+0xb8>
 80187b4:	4b48      	ldr	r3, [pc, #288]	@ (80188d8 <SystemInit+0x160>)
 80187b6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80187ba:	f042 0290 	orr.w	r2, r2, #144	@ 0x90
 80187be:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80187c2:	2200      	movs	r2, #0
 80187c4:	9201      	str	r2, [sp, #4]
 80187c6:	9a01      	ldr	r2, [sp, #4]
 80187c8:	2a4f      	cmp	r2, #79	@ 0x4f
 80187ca:	d934      	bls.n	8018836 <SystemInit+0xbe>
 80187cc:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80187d0:	f022 0203 	bic.w	r2, r2, #3
 80187d4:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80187d8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80187dc:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 80187e0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80187e4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 80187e8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80187ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80187f0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 80187f4:	2200      	movs	r2, #0
 80187f6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80187fa:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 80187fe:	4937      	ldr	r1, [pc, #220]	@ (80188dc <SystemInit+0x164>)
 8018800:	f8c3 1804 	str.w	r1, [r3, #2052]	@ 0x804
 8018804:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
 8018808:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801880c:	f042 0201 	orr.w	r2, r2, #1
 8018810:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8018814:	4b30      	ldr	r3, [pc, #192]	@ (80188d8 <SystemInit+0x160>)
 8018816:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 801881a:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 801881e:	0789      	lsls	r1, r1, #30
 8018820:	d401      	bmi.n	8018826 <SystemInit+0xae>
 8018822:	3a01      	subs	r2, #1
 8018824:	d1f9      	bne.n	801881a <SystemInit+0xa2>
 8018826:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801882a:	0792      	lsls	r2, r2, #30
 801882c:	d406      	bmi.n	801883c <SystemInit+0xc4>
 801882e:	e7fe      	b.n	801882e <SystemInit+0xb6>
 8018830:	9b01      	ldr	r3, [sp, #4]
 8018832:	3301      	adds	r3, #1
 8018834:	e7ba      	b.n	80187ac <SystemInit+0x34>
 8018836:	9a01      	ldr	r2, [sp, #4]
 8018838:	3201      	adds	r2, #1
 801883a:	e7c3      	b.n	80187c4 <SystemInit+0x4c>
 801883c:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
 8018840:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8018844:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
 8018848:	4a25      	ldr	r2, [pc, #148]	@ (80188e0 <SystemInit+0x168>)
 801884a:	6811      	ldr	r1, [r2, #0]
 801884c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8018850:	6011      	str	r1, [r2, #0]
 8018852:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 8018856:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 801885a:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801885e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8018862:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 8018866:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801886a:	f441 51a0 	orr.w	r1, r1, #5120	@ 0x1400
 801886e:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 8018872:	491c      	ldr	r1, [pc, #112]	@ (80188e4 <SystemInit+0x16c>)
 8018874:	f8c3 1804 	str.w	r1, [r3, #2052]	@ 0x804
 8018878:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 801887c:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8018880:	f8c3 1800 	str.w	r1, [r3, #2048]	@ 0x800
 8018884:	4914      	ldr	r1, [pc, #80]	@ (80188d8 <SystemInit+0x160>)
 8018886:	f8d1 3800 	ldr.w	r3, [r1, #2048]	@ 0x800
 801888a:	019b      	lsls	r3, r3, #6
 801888c:	d5fb      	bpl.n	8018886 <SystemInit+0x10e>
 801888e:	6813      	ldr	r3, [r2, #0]
 8018890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018894:	6013      	str	r3, [r2, #0]
 8018896:	4b12      	ldr	r3, [pc, #72]	@ (80188e0 <SystemInit+0x168>)
 8018898:	685a      	ldr	r2, [r3, #4]
 801889a:	03d0      	lsls	r0, r2, #15
 801889c:	d5fc      	bpl.n	8018898 <SystemInit+0x120>
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80188a4:	601a      	str	r2, [r3, #0]
 80188a6:	685a      	ldr	r2, [r3, #4]
 80188a8:	0391      	lsls	r1, r2, #14
 80188aa:	d5fc      	bpl.n	80188a6 <SystemInit+0x12e>
 80188ac:	4b0a      	ldr	r3, [pc, #40]	@ (80188d8 <SystemInit+0x160>)
 80188ae:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80188b2:	f022 0203 	bic.w	r2, r2, #3
 80188b6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80188ba:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80188be:	f042 0202 	orr.w	r2, r2, #2
 80188c2:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 80188c6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80188ca:	0712      	lsls	r2, r2, #28
 80188cc:	d5fb      	bpl.n	80188c6 <SystemInit+0x14e>
 80188ce:	b002      	add	sp, #8
 80188d0:	4770      	bx	lr
 80188d2:	bf00      	nop
 80188d4:	e000ed00 	and	lr, r0, r0, lsl #26
 80188d8:	40023000 	andmi	r3, r2, r0
 80188dc:	24003010 	strcs	r3, [r0], #-16
 80188e0:	40007000 	andmi	r7, r0, r0
 80188e4:	0a007810 	beq	803692c <_sidata+0x17228>

080188e8 <dma_deinit>:
 80188e8:	2318      	movs	r3, #24
 80188ea:	fb03 0301 	mla	r3, r3, r1, r0
 80188ee:	b510      	push	{r4, lr}
 80188f0:	691a      	ldr	r2, [r3, #16]
 80188f2:	f022 0201 	bic.w	r2, r2, #1
 80188f6:	611a      	str	r2, [r3, #16]
 80188f8:	2200      	movs	r2, #0
 80188fa:	611a      	str	r2, [r3, #16]
 80188fc:	2903      	cmp	r1, #3
 80188fe:	615a      	str	r2, [r3, #20]
 8018900:	619a      	str	r2, [r3, #24]
 8018902:	61da      	str	r2, [r3, #28]
 8018904:	621a      	str	r2, [r3, #32]
 8018906:	f04f 0221 	mov.w	r2, #33	@ 0x21
 801890a:	625a      	str	r2, [r3, #36]	@ 0x24
 801890c:	d80a      	bhi.n	8018924 <dma_deinit+0x3c>
 801890e:	2406      	movs	r4, #6
 8018910:	084b      	lsrs	r3, r1, #1
 8018912:	4361      	muls	r1, r4
 8018914:	6882      	ldr	r2, [r0, #8]
 8018916:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801891a:	233d      	movs	r3, #61	@ 0x3d
 801891c:	408b      	lsls	r3, r1
 801891e:	4313      	orrs	r3, r2
 8018920:	6083      	str	r3, [r0, #8]
 8018922:	bd10      	pop	{r4, pc}
 8018924:	3904      	subs	r1, #4
 8018926:	b2ca      	uxtb	r2, r1
 8018928:	2306      	movs	r3, #6
 801892a:	435a      	muls	r2, r3
 801892c:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8018930:	68c4      	ldr	r4, [r0, #12]
 8018932:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018936:	233d      	movs	r3, #61	@ 0x3d
 8018938:	4093      	lsls	r3, r2
 801893a:	4323      	orrs	r3, r4
 801893c:	60c3      	str	r3, [r0, #12]
 801893e:	e7f0      	b.n	8018922 <dma_deinit+0x3a>

08018940 <dma_single_data_para_struct_init>:
 8018940:	2300      	movs	r3, #0
 8018942:	2201      	movs	r2, #1
 8018944:	e9c0 3200 	strd	r3, r2, [r0]
 8018948:	e9c0 3202 	strd	r3, r2, [r0, #8]
 801894c:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8018950:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018954:	6203      	str	r3, [r0, #32]
 8018956:	4770      	bx	lr

08018958 <dma_single_data_mode_init>:
 8018958:	2318      	movs	r3, #24
 801895a:	fb03 0101 	mla	r1, r3, r1, r0
 801895e:	b530      	push	{r4, r5, lr}
 8018960:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8018962:	f023 0304 	bic.w	r3, r3, #4
 8018966:	624b      	str	r3, [r1, #36]	@ 0x24
 8018968:	6813      	ldr	r3, [r2, #0]
 801896a:	618b      	str	r3, [r1, #24]
 801896c:	6893      	ldr	r3, [r2, #8]
 801896e:	61cb      	str	r3, [r1, #28]
 8018970:	69d3      	ldr	r3, [r2, #28]
 8018972:	614b      	str	r3, [r1, #20]
 8018974:	6914      	ldr	r4, [r2, #16]
 8018976:	6a13      	ldr	r3, [r2, #32]
 8018978:	6908      	ldr	r0, [r1, #16]
 801897a:	6995      	ldr	r5, [r2, #24]
 801897c:	4323      	orrs	r3, r4
 801897e:	f420 305e 	bic.w	r0, r0, #227328	@ 0x37800
 8018982:	432b      	orrs	r3, r5
 8018984:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8018988:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 801898c:	4303      	orrs	r3, r0
 801898e:	610b      	str	r3, [r1, #16]
 8018990:	6853      	ldr	r3, [r2, #4]
 8018992:	b983      	cbnz	r3, 80189b6 <dma_single_data_mode_init+0x5e>
 8018994:	690b      	ldr	r3, [r1, #16]
 8018996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801899a:	610b      	str	r3, [r1, #16]
 801899c:	68d3      	ldr	r3, [r2, #12]
 801899e:	b993      	cbnz	r3, 80189c6 <dma_single_data_mode_init+0x6e>
 80189a0:	690b      	ldr	r3, [r1, #16]
 80189a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80189a6:	610b      	str	r3, [r1, #16]
 80189a8:	6953      	ldr	r3, [r2, #20]
 80189aa:	b983      	cbnz	r3, 80189ce <dma_single_data_mode_init+0x76>
 80189ac:	690b      	ldr	r3, [r1, #16]
 80189ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80189b2:	610b      	str	r3, [r1, #16]
 80189b4:	bd30      	pop	{r4, r5, pc}
 80189b6:	2b01      	cmp	r3, #1
 80189b8:	690b      	ldr	r3, [r1, #16]
 80189ba:	bf0c      	ite	eq
 80189bc:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 80189c0:	f443 4300 	orrne.w	r3, r3, #32768	@ 0x8000
 80189c4:	e7e9      	b.n	801899a <dma_single_data_mode_init+0x42>
 80189c6:	690b      	ldr	r3, [r1, #16]
 80189c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80189cc:	e7eb      	b.n	80189a6 <dma_single_data_mode_init+0x4e>
 80189ce:	690b      	ldr	r3, [r1, #16]
 80189d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80189d4:	e7ed      	b.n	80189b2 <dma_single_data_mode_init+0x5a>
	...

080189d8 <dma_multi_data_mode_init>:
 80189d8:	2318      	movs	r3, #24
 80189da:	fb03 0101 	mla	r1, r3, r1, r0
 80189de:	6a10      	ldr	r0, [r2, #32]
 80189e0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80189e2:	4303      	orrs	r3, r0
 80189e4:	f043 0304 	orr.w	r3, r3, #4
 80189e8:	b510      	push	{r4, lr}
 80189ea:	624b      	str	r3, [r1, #36]	@ 0x24
 80189ec:	6813      	ldr	r3, [r2, #0]
 80189ee:	618b      	str	r3, [r1, #24]
 80189f0:	68d3      	ldr	r3, [r2, #12]
 80189f2:	61cb      	str	r3, [r1, #28]
 80189f4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80189f6:	614b      	str	r3, [r1, #20]
 80189f8:	690b      	ldr	r3, [r1, #16]
 80189fa:	4819      	ldr	r0, [pc, #100]	@ (8018a60 <dma_multi_data_mode_init+0x88>)
 80189fc:	6914      	ldr	r4, [r2, #16]
 80189fe:	4018      	ands	r0, r3
 8018a00:	6853      	ldr	r3, [r2, #4]
 8018a02:	4323      	orrs	r3, r4
 8018a04:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8018a06:	4323      	orrs	r3, r4
 8018a08:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 8018a0a:	4323      	orrs	r3, r4
 8018a0c:	6994      	ldr	r4, [r2, #24]
 8018a0e:	4323      	orrs	r3, r4
 8018a10:	69d4      	ldr	r4, [r2, #28]
 8018a12:	4323      	orrs	r3, r4
 8018a14:	4303      	orrs	r3, r0
 8018a16:	610b      	str	r3, [r1, #16]
 8018a18:	6893      	ldr	r3, [r2, #8]
 8018a1a:	b983      	cbnz	r3, 8018a3e <dma_multi_data_mode_init+0x66>
 8018a1c:	690b      	ldr	r3, [r1, #16]
 8018a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8018a22:	610b      	str	r3, [r1, #16]
 8018a24:	6953      	ldr	r3, [r2, #20]
 8018a26:	b993      	cbnz	r3, 8018a4e <dma_multi_data_mode_init+0x76>
 8018a28:	690b      	ldr	r3, [r1, #16]
 8018a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8018a2e:	610b      	str	r3, [r1, #16]
 8018a30:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8018a32:	b983      	cbnz	r3, 8018a56 <dma_multi_data_mode_init+0x7e>
 8018a34:	690b      	ldr	r3, [r1, #16]
 8018a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018a3a:	610b      	str	r3, [r1, #16]
 8018a3c:	bd10      	pop	{r4, pc}
 8018a3e:	2b01      	cmp	r3, #1
 8018a40:	690b      	ldr	r3, [r1, #16]
 8018a42:	bf0c      	ite	eq
 8018a44:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 8018a48:	f443 4300 	orrne.w	r3, r3, #32768	@ 0x8000
 8018a4c:	e7e9      	b.n	8018a22 <dma_multi_data_mode_init+0x4a>
 8018a4e:	690b      	ldr	r3, [r1, #16]
 8018a50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8018a54:	e7eb      	b.n	8018a2e <dma_multi_data_mode_init+0x56>
 8018a56:	690b      	ldr	r3, [r1, #16]
 8018a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018a5c:	e7ed      	b.n	8018a3a <dma_multi_data_mode_init+0x62>
 8018a5e:	bf00      	nop
 8018a60:	fe1c873f 	mrc2	7, 0, r8, cr12, cr15, {1}

08018a64 <dma_circulation_disable>:
 8018a64:	2318      	movs	r3, #24
 8018a66:	4359      	muls	r1, r3
 8018a68:	3010      	adds	r0, #16
 8018a6a:	580b      	ldr	r3, [r1, r0]
 8018a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018a70:	500b      	str	r3, [r1, r0]
 8018a72:	4770      	bx	lr

08018a74 <dma_channel_subperipheral_select>:
 8018a74:	2318      	movs	r3, #24
 8018a76:	4359      	muls	r1, r3
 8018a78:	3010      	adds	r0, #16
 8018a7a:	580b      	ldr	r3, [r1, r0]
 8018a7c:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8018a80:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8018a84:	500b      	str	r3, [r1, r0]
 8018a86:	4770      	bx	lr

08018a88 <dma_flag_clear>:
 8018a88:	2903      	cmp	r1, #3
 8018a8a:	b530      	push	{r4, r5, lr}
 8018a8c:	d80a      	bhi.n	8018aa4 <dma_flag_clear+0x1c>
 8018a8e:	2506      	movs	r5, #6
 8018a90:	084c      	lsrs	r4, r1, #1
 8018a92:	4369      	muls	r1, r5
 8018a94:	6883      	ldr	r3, [r0, #8]
 8018a96:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018a9a:	fa02 f101 	lsl.w	r1, r2, r1
 8018a9e:	4319      	orrs	r1, r3
 8018aa0:	6081      	str	r1, [r0, #8]
 8018aa2:	bd30      	pop	{r4, r5, pc}
 8018aa4:	3904      	subs	r1, #4
 8018aa6:	b2cb      	uxtb	r3, r1
 8018aa8:	2506      	movs	r5, #6
 8018aaa:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8018aae:	436b      	muls	r3, r5
 8018ab0:	68c4      	ldr	r4, [r0, #12]
 8018ab2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018ab6:	409a      	lsls	r2, r3
 8018ab8:	4322      	orrs	r2, r4
 8018aba:	60c2      	str	r2, [r0, #12]
 8018abc:	e7f1      	b.n	8018aa2 <dma_flag_clear+0x1a>

08018abe <dma_interrupt_flag_clear>:
 8018abe:	f7ff bfe3 	b.w	8018a88 <dma_flag_clear>
	...

08018ac4 <enet_software_reset>:
 8018ac4:	4b07      	ldr	r3, [pc, #28]	@ (8018ae4 <enet_software_reset+0x20>)
 8018ac6:	681a      	ldr	r2, [r3, #0]
 8018ac8:	f042 0201 	orr.w	r2, r2, #1
 8018acc:	601a      	str	r2, [r3, #0]
 8018ace:	4a06      	ldr	r2, [pc, #24]	@ (8018ae8 <enet_software_reset+0x24>)
 8018ad0:	6819      	ldr	r1, [r3, #0]
 8018ad2:	07c9      	lsls	r1, r1, #31
 8018ad4:	d501      	bpl.n	8018ada <enet_software_reset+0x16>
 8018ad6:	3a01      	subs	r2, #1
 8018ad8:	d1fa      	bne.n	8018ad0 <enet_software_reset+0xc>
 8018ada:	6818      	ldr	r0, [r3, #0]
 8018adc:	43c0      	mvns	r0, r0
 8018ade:	f000 0001 	and.w	r0, r0, #1
 8018ae2:	4770      	bx	lr
 8018ae4:	40029000 	andmi	r9, r2, r0
 8018ae8:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

08018aec <enet_descriptors_chain_init>:
 8018aec:	f5b0 0fe0 	cmp.w	r0, #7340032	@ 0x700000
 8018af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018af2:	4a19      	ldr	r2, [pc, #100]	@ (8018b58 <enet_descriptors_chain_init+0x6c>)
 8018af4:	d125      	bne.n	8018b42 <enet_descriptors_chain_init+0x56>
 8018af6:	4b19      	ldr	r3, [pc, #100]	@ (8018b5c <enet_descriptors_chain_init+0x70>)
 8018af8:	6113      	str	r3, [r2, #16]
 8018afa:	4a19      	ldr	r2, [pc, #100]	@ (8018b60 <enet_descriptors_chain_init+0x74>)
 8018afc:	4c19      	ldr	r4, [pc, #100]	@ (8018b64 <enet_descriptors_chain_init+0x78>)
 8018afe:	6013      	str	r3, [r2, #0]
 8018b00:	2500      	movs	r5, #0
 8018b02:	f44f 1680 	mov.w	r6, #1048576	@ 0x100000
 8018b06:	2002      	movs	r0, #2
 8018b08:	4917      	ldr	r1, [pc, #92]	@ (8018b68 <enet_descriptors_chain_init+0x7c>)
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	600a      	str	r2, [r1, #0]
 8018b0e:	4917      	ldr	r1, [pc, #92]	@ (8018b6c <enet_descriptors_chain_init+0x80>)
 8018b10:	f240 5ef4 	movw	lr, #1524	@ 0x5f4
 8018b14:	600a      	str	r2, [r1, #0]
 8018b16:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8018b1a:	f103 0110 	add.w	r1, r3, #16
 8018b1e:	fb0e 4702 	mla	r7, lr, r2, r4
 8018b22:	f841 7c08 	str.w	r7, [r1, #-8]
 8018b26:	4594      	cmp	ip, r2
 8018b28:	bf94      	ite	ls
 8018b2a:	461f      	movls	r7, r3
 8018b2c:	460f      	movhi	r7, r1
 8018b2e:	3201      	adds	r2, #1
 8018b30:	4290      	cmp	r0, r2
 8018b32:	e941 6504 	strd	r6, r5, [r1, #-16]
 8018b36:	f841 7c04 	str.w	r7, [r1, #-4]
 8018b3a:	f101 0110 	add.w	r1, r1, #16
 8018b3e:	d1ee      	bne.n	8018b1e <enet_descriptors_chain_init+0x32>
 8018b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b42:	4b0b      	ldr	r3, [pc, #44]	@ (8018b70 <enet_descriptors_chain_init+0x84>)
 8018b44:	60d3      	str	r3, [r2, #12]
 8018b46:	4a0b      	ldr	r2, [pc, #44]	@ (8018b74 <enet_descriptors_chain_init+0x88>)
 8018b48:	4c0b      	ldr	r4, [pc, #44]	@ (8018b78 <enet_descriptors_chain_init+0x8c>)
 8018b4a:	6013      	str	r3, [r2, #0]
 8018b4c:	f244 55f4 	movw	r5, #17908	@ 0x45f4
 8018b50:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8018b54:	2022      	movs	r0, #34	@ 0x22
 8018b56:	e7d7      	b.n	8018b08 <enet_descriptors_chain_init+0x1c>
 8018b58:	40029000 	andmi	r9, r2, r0
 8018b5c:	2001a3e0 	andcs	sl, r1, r0, ror #7
 8018b60:	2000cd8c 	andcs	ip, r0, ip, lsl #27
 8018b64:	2000cd90 	mulcs	r0, r0, sp
 8018b68:	2000cd80 	andcs	ip, r0, r0, lsl #27
 8018b6c:	2000cd84 	andcs	ip, r0, r4, lsl #27
 8018b70:	2001a400 	andcs	sl, r1, r0, lsl #8
 8018b74:	2000cd88 	andcs	ip, r0, r8, lsl #27
 8018b78:	2000d978 	andcs	sp, r0, r8, ror r9

08018b7c <enet_transmit_checksum_config>:
 8018b7c:	6803      	ldr	r3, [r0, #0]
 8018b7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8018b82:	430b      	orrs	r3, r1
 8018b84:	6003      	str	r3, [r0, #0]
 8018b86:	4770      	bx	lr

08018b88 <enet_mac_address_set>:
 8018b88:	4b03      	ldr	r3, [pc, #12]	@ (8018b98 <enet_mac_address_set+0x10>)
 8018b8a:	888a      	ldrh	r2, [r1, #4]
 8018b8c:	50c2      	str	r2, [r0, r3]
 8018b8e:	3304      	adds	r3, #4
 8018b90:	680a      	ldr	r2, [r1, #0]
 8018b92:	50c2      	str	r2, [r0, r3]
 8018b94:	4770      	bx	lr
 8018b96:	bf00      	nop
 8018b98:	40028040 	andmi	r8, r2, r0, asr #32

08018b9c <enet_rx_enable>:
 8018b9c:	4a05      	ldr	r2, [pc, #20]	@ (8018bb4 <enet_rx_enable+0x18>)
 8018b9e:	6813      	ldr	r3, [r2, #0]
 8018ba0:	f043 0304 	orr.w	r3, r3, #4
 8018ba4:	6013      	str	r3, [r2, #0]
 8018ba6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018baa:	6993      	ldr	r3, [r2, #24]
 8018bac:	f043 0302 	orr.w	r3, r3, #2
 8018bb0:	6193      	str	r3, [r2, #24]
 8018bb2:	4770      	bx	lr
 8018bb4:	40028000 	andmi	r8, r2, r0

08018bb8 <enet_phy_write_read>:
 8018bb8:	b530      	push	{r4, r5, lr}
 8018bba:	4d12      	ldr	r5, [pc, #72]	@ (8018c04 <enet_phy_write_read+0x4c>)
 8018bbc:	4604      	mov	r4, r0
 8018bbe:	6928      	ldr	r0, [r5, #16]
 8018bc0:	0192      	lsls	r2, r2, #6
 8018bc2:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 8018bc6:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 8018bca:	f020 00c3 	bic.w	r0, r0, #195	@ 0xc3
 8018bce:	4302      	orrs	r2, r0
 8018bd0:	02c9      	lsls	r1, r1, #11
 8018bd2:	b289      	uxth	r1, r1
 8018bd4:	4322      	orrs	r2, r4
 8018bd6:	430a      	orrs	r2, r1
 8018bd8:	2c02      	cmp	r4, #2
 8018bda:	bf04      	itt	eq
 8018bdc:	8819      	ldrheq	r1, [r3, #0]
 8018bde:	6169      	streq	r1, [r5, #20]
 8018be0:	f042 0201 	orr.w	r2, r2, #1
 8018be4:	612a      	str	r2, [r5, #16]
 8018be6:	4907      	ldr	r1, [pc, #28]	@ (8018c04 <enet_phy_write_read+0x4c>)
 8018be8:	4a07      	ldr	r2, [pc, #28]	@ (8018c08 <enet_phy_write_read+0x50>)
 8018bea:	6908      	ldr	r0, [r1, #16]
 8018bec:	07c0      	lsls	r0, r0, #31
 8018bee:	d501      	bpl.n	8018bf4 <enet_phy_write_read+0x3c>
 8018bf0:	3a01      	subs	r2, #1
 8018bf2:	d1fa      	bne.n	8018bea <enet_phy_write_read+0x32>
 8018bf4:	690a      	ldr	r2, [r1, #16]
 8018bf6:	43d2      	mvns	r2, r2
 8018bf8:	f002 0001 	and.w	r0, r2, #1
 8018bfc:	b90c      	cbnz	r4, 8018c02 <enet_phy_write_read+0x4a>
 8018bfe:	694a      	ldr	r2, [r1, #20]
 8018c00:	801a      	strh	r2, [r3, #0]
 8018c02:	bd30      	pop	{r4, r5, pc}
 8018c04:	40028000 	andmi	r8, r2, r0
 8018c08:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

08018c0c <enet_init>:
 8018c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c0e:	4616      	mov	r6, r2
 8018c10:	4a9d      	ldr	r2, [pc, #628]	@ (8018e88 <enet_init+0x27c>)
 8018c12:	460d      	mov	r5, r1
 8018c14:	6814      	ldr	r4, [r2, #0]
 8018c16:	499d      	ldr	r1, [pc, #628]	@ (8018e8c <enet_init+0x280>)
 8018c18:	2300      	movs	r3, #0
 8018c1a:	4021      	ands	r1, r4
 8018c1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018c20:	6011      	str	r1, [r2, #0]
 8018c22:	6053      	str	r3, [r2, #4]
 8018c24:	6093      	str	r3, [r2, #8]
 8018c26:	60d3      	str	r3, [r2, #12]
 8018c28:	6991      	ldr	r1, [r2, #24]
 8018c2a:	f021 01be 	bic.w	r1, r1, #190	@ 0xbe
 8018c2e:	0409      	lsls	r1, r1, #16
 8018c30:	0c09      	lsrs	r1, r1, #16
 8018c32:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8018c36:	6191      	str	r1, [r2, #24]
 8018c38:	4995      	ldr	r1, [pc, #596]	@ (8018e90 <enet_init+0x284>)
 8018c3a:	61d3      	str	r3, [r2, #28]
 8018c3c:	698c      	ldr	r4, [r1, #24]
 8018c3e:	4a95      	ldr	r2, [pc, #596]	@ (8018e94 <enet_init+0x288>)
 8018c40:	4022      	ands	r2, r4
 8018c42:	f042 7208 	orr.w	r2, r2, #35651584	@ 0x2200000
 8018c46:	618a      	str	r2, [r1, #24]
 8018c48:	680a      	ldr	r2, [r1, #0]
 8018c4a:	4a93      	ldr	r2, [pc, #588]	@ (8018e98 <enet_init+0x28c>)
 8018c4c:	600a      	str	r2, [r1, #0]
 8018c4e:	2801      	cmp	r0, #1
 8018c50:	d146      	bne.n	8018ce0 <enet_init+0xd4>
 8018c52:	4f92      	ldr	r7, [pc, #584]	@ (8018e9c <enet_init+0x290>)
 8018c54:	461c      	mov	r4, r3
 8018c56:	2201      	movs	r2, #1
 8018c58:	4611      	mov	r1, r2
 8018c5a:	f10d 0306 	add.w	r3, sp, #6
 8018c5e:	2000      	movs	r0, #0
 8018c60:	f7ff ffaa 	bl	8018bb8 <enet_phy_write_read>
 8018c64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018c68:	f002 0204 	and.w	r2, r2, #4
 8018c6c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018c70:	3401      	adds	r4, #1
 8018c72:	b922      	cbnz	r2, 8018c7e <enet_init+0x72>
 8018c74:	42bc      	cmp	r4, r7
 8018c76:	d1ee      	bne.n	8018c56 <enet_init+0x4a>
 8018c78:	2000      	movs	r0, #0
 8018c7a:	b003      	add	sp, #12
 8018c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c7e:	42bc      	cmp	r4, r7
 8018c80:	d0fa      	beq.n	8018c78 <enet_init+0x6c>
 8018c82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8018c86:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018c8a:	2101      	movs	r1, #1
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	2002      	movs	r0, #2
 8018c90:	f7ff ff92 	bl	8018bb8 <enet_phy_write_read>
 8018c94:	2800      	cmp	r0, #0
 8018c96:	d0ef      	beq.n	8018c78 <enet_init+0x6c>
 8018c98:	4f80      	ldr	r7, [pc, #512]	@ (8018e9c <enet_init+0x290>)
 8018c9a:	2400      	movs	r4, #0
 8018c9c:	2201      	movs	r2, #1
 8018c9e:	4611      	mov	r1, r2
 8018ca0:	f10d 0306 	add.w	r3, sp, #6
 8018ca4:	2000      	movs	r0, #0
 8018ca6:	f7ff ff87 	bl	8018bb8 <enet_phy_write_read>
 8018caa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018cae:	f002 0220 	and.w	r2, r2, #32
 8018cb2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018cb6:	3401      	adds	r4, #1
 8018cb8:	b912      	cbnz	r2, 8018cc0 <enet_init+0xb4>
 8018cba:	42bc      	cmp	r4, r7
 8018cbc:	d1ee      	bne.n	8018c9c <enet_init+0x90>
 8018cbe:	e7db      	b.n	8018c78 <enet_init+0x6c>
 8018cc0:	42bc      	cmp	r4, r7
 8018cc2:	d0d9      	beq.n	8018c78 <enet_init+0x6c>
 8018cc4:	2101      	movs	r1, #1
 8018cc6:	2210      	movs	r2, #16
 8018cc8:	2000      	movs	r0, #0
 8018cca:	f7ff ff75 	bl	8018bb8 <enet_phy_write_read>
 8018cce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018cd2:	f3c3 0080 	ubfx	r0, r3, #2, #1
 8018cd6:	02c0      	lsls	r0, r0, #11
 8018cd8:	0799      	lsls	r1, r3, #30
 8018cda:	bf58      	it	pl
 8018cdc:	f440 4080 	orrpl.w	r0, r0, #16384	@ 0x4000
 8018ce0:	4b69      	ldr	r3, [pc, #420]	@ (8018e88 <enet_init+0x27c>)
 8018ce2:	681a      	ldr	r2, [r3, #0]
 8018ce4:	f422 42b0 	bic.w	r2, r2, #22528	@ 0x5800
 8018ce8:	4310      	orrs	r0, r2
 8018cea:	056a      	lsls	r2, r5, #21
 8018cec:	6018      	str	r0, [r3, #0]
 8018cee:	d50b      	bpl.n	8018d08 <enet_init+0xfc>
 8018cf0:	681a      	ldr	r2, [r3, #0]
 8018cf2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8018cf6:	601a      	str	r2, [r3, #0]
 8018cf8:	4a65      	ldr	r2, [pc, #404]	@ (8018e90 <enet_init+0x284>)
 8018cfa:	6993      	ldr	r3, [r2, #24]
 8018cfc:	f005 6580 	and.w	r5, r5, #67108864	@ 0x4000000
 8018d00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8018d04:	431d      	orrs	r5, r3
 8018d06:	6195      	str	r5, [r2, #24]
 8018d08:	485f      	ldr	r0, [pc, #380]	@ (8018e88 <enet_init+0x27c>)
 8018d0a:	6843      	ldr	r3, [r0, #4]
 8018d0c:	431e      	orrs	r6, r3
 8018d0e:	4b64      	ldr	r3, [pc, #400]	@ (8018ea0 <enet_init+0x294>)
 8018d10:	6046      	str	r6, [r0, #4]
 8018d12:	681a      	ldr	r2, [r3, #0]
 8018d14:	07d7      	lsls	r7, r2, #31
 8018d16:	d513      	bpl.n	8018d40 <enet_init+0x134>
 8018d18:	6801      	ldr	r1, [r0, #0]
 8018d1a:	685a      	ldr	r2, [r3, #4]
 8018d1c:	4c61      	ldr	r4, [pc, #388]	@ (8018ea4 <enet_init+0x298>)
 8018d1e:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 8018d22:	4014      	ands	r4, r2
 8018d24:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8018d28:	4321      	orrs	r1, r4
 8018d2a:	6001      	str	r1, [r0, #0]
 8018d2c:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8018d30:	0892      	lsrs	r2, r2, #2
 8018d32:	6981      	ldr	r1, [r0, #24]
 8018d34:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8018d38:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8018d3c:	430a      	orrs	r2, r1
 8018d3e:	6182      	str	r2, [r0, #24]
 8018d40:	681a      	ldr	r2, [r3, #0]
 8018d42:	0796      	lsls	r6, r2, #30
 8018d44:	d508      	bpl.n	8018d58 <enet_init+0x14c>
 8018d46:	4952      	ldr	r1, [pc, #328]	@ (8018e90 <enet_init+0x284>)
 8018d48:	6898      	ldr	r0, [r3, #8]
 8018d4a:	680a      	ldr	r2, [r1, #0]
 8018d4c:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8018d50:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8018d54:	4302      	orrs	r2, r0
 8018d56:	600a      	str	r2, [r1, #0]
 8018d58:	681a      	ldr	r2, [r3, #0]
 8018d5a:	0755      	lsls	r5, r2, #29
 8018d5c:	d508      	bpl.n	8018d70 <enet_init+0x164>
 8018d5e:	494c      	ldr	r1, [pc, #304]	@ (8018e90 <enet_init+0x284>)
 8018d60:	68d8      	ldr	r0, [r3, #12]
 8018d62:	680a      	ldr	r2, [r1, #0]
 8018d64:	f422 027e 	bic.w	r2, r2, #16646144	@ 0xfe0000
 8018d68:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8018d6c:	4302      	orrs	r2, r0
 8018d6e:	600a      	str	r2, [r1, #0]
 8018d70:	681a      	ldr	r2, [r3, #0]
 8018d72:	0714      	lsls	r4, r2, #28
 8018d74:	d508      	bpl.n	8018d88 <enet_init+0x17c>
 8018d76:	4946      	ldr	r1, [pc, #280]	@ (8018e90 <enet_init+0x284>)
 8018d78:	6918      	ldr	r0, [r3, #16]
 8018d7a:	680a      	ldr	r2, [r1, #0]
 8018d7c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8018d80:	f022 0202 	bic.w	r2, r2, #2
 8018d84:	4302      	orrs	r2, r0
 8018d86:	600a      	str	r2, [r1, #0]
 8018d88:	681a      	ldr	r2, [r3, #0]
 8018d8a:	06d0      	lsls	r0, r2, #27
 8018d8c:	d506      	bpl.n	8018d9c <enet_init+0x190>
 8018d8e:	4940      	ldr	r1, [pc, #256]	@ (8018e90 <enet_init+0x284>)
 8018d90:	4a45      	ldr	r2, [pc, #276]	@ (8018ea8 <enet_init+0x29c>)
 8018d92:	6988      	ldr	r0, [r1, #24]
 8018d94:	4002      	ands	r2, r0
 8018d96:	6958      	ldr	r0, [r3, #20]
 8018d98:	4302      	orrs	r2, r0
 8018d9a:	618a      	str	r2, [r1, #24]
 8018d9c:	681a      	ldr	r2, [r3, #0]
 8018d9e:	0691      	lsls	r1, r2, #26
 8018da0:	d511      	bpl.n	8018dc6 <enet_init+0x1ba>
 8018da2:	483b      	ldr	r0, [pc, #236]	@ (8018e90 <enet_init+0x284>)
 8018da4:	699a      	ldr	r2, [r3, #24]
 8018da6:	6981      	ldr	r1, [r0, #24]
 8018da8:	4c40      	ldr	r4, [pc, #256]	@ (8018eac <enet_init+0x2a0>)
 8018daa:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8018dae:	4014      	ands	r4, r2
 8018db0:	f021 0104 	bic.w	r1, r1, #4
 8018db4:	4321      	orrs	r1, r4
 8018db6:	6181      	str	r1, [r0, #24]
 8018db8:	6801      	ldr	r1, [r0, #0]
 8018dba:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8018dbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8018dc2:	430a      	orrs	r2, r1
 8018dc4:	6002      	str	r2, [r0, #0]
 8018dc6:	681a      	ldr	r2, [r3, #0]
 8018dc8:	0652      	lsls	r2, r2, #25
 8018dca:	d506      	bpl.n	8018dda <enet_init+0x1ce>
 8018dcc:	492e      	ldr	r1, [pc, #184]	@ (8018e88 <enet_init+0x27c>)
 8018dce:	69d8      	ldr	r0, [r3, #28]
 8018dd0:	69ca      	ldr	r2, [r1, #28]
 8018dd2:	f36f 0210 	bfc	r2, #0, #17
 8018dd6:	4302      	orrs	r2, r0
 8018dd8:	61ca      	str	r2, [r1, #28]
 8018dda:	681a      	ldr	r2, [r3, #0]
 8018ddc:	0617      	lsls	r7, r2, #24
 8018dde:	d517      	bpl.n	8018e10 <enet_init+0x204>
 8018de0:	4c29      	ldr	r4, [pc, #164]	@ (8018e88 <enet_init+0x27c>)
 8018de2:	6a1a      	ldr	r2, [r3, #32]
 8018de4:	69a0      	ldr	r0, [r4, #24]
 8018de6:	f020 00be 	bic.w	r0, r0, #190	@ 0xbe
 8018dea:	f422 417f 	bic.w	r1, r2, #65280	@ 0xff00
 8018dee:	0400      	lsls	r0, r0, #16
 8018df0:	0c00      	lsrs	r0, r0, #16
 8018df2:	f021 0141 	bic.w	r1, r1, #65	@ 0x41
 8018df6:	4301      	orrs	r1, r0
 8018df8:	4825      	ldr	r0, [pc, #148]	@ (8018e90 <enet_init+0x284>)
 8018dfa:	61a1      	str	r1, [r4, #24]
 8018dfc:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
 8018e00:	0a12      	lsrs	r2, r2, #8
 8018e02:	f021 0177 	bic.w	r1, r1, #119	@ 0x77
 8018e06:	f002 0277 	and.w	r2, r2, #119	@ 0x77
 8018e0a:	430a      	orrs	r2, r1
 8018e0c:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 8018e10:	681a      	ldr	r2, [r3, #0]
 8018e12:	05d6      	lsls	r6, r2, #23
 8018e14:	bf42      	ittt	mi
 8018e16:	4a1c      	ldrmi	r2, [pc, #112]	@ (8018e88 <enet_init+0x27c>)
 8018e18:	6a59      	ldrmi	r1, [r3, #36]	@ 0x24
 8018e1a:	6091      	strmi	r1, [r2, #8]
 8018e1c:	681a      	ldr	r2, [r3, #0]
 8018e1e:	0595      	lsls	r5, r2, #22
 8018e20:	bf42      	ittt	mi
 8018e22:	4a19      	ldrmi	r2, [pc, #100]	@ (8018e88 <enet_init+0x27c>)
 8018e24:	6a99      	ldrmi	r1, [r3, #40]	@ 0x28
 8018e26:	60d1      	strmi	r1, [r2, #12]
 8018e28:	681a      	ldr	r2, [r3, #0]
 8018e2a:	0554      	lsls	r4, r2, #21
 8018e2c:	d508      	bpl.n	8018e40 <enet_init+0x234>
 8018e2e:	4916      	ldr	r1, [pc, #88]	@ (8018e88 <enet_init+0x27c>)
 8018e30:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8018e32:	684a      	ldr	r2, [r1, #4]
 8018e34:	f422 62fb 	bic.w	r2, r2, #2008	@ 0x7d8
 8018e38:	f022 0206 	bic.w	r2, r2, #6
 8018e3c:	4302      	orrs	r2, r0
 8018e3e:	604a      	str	r2, [r1, #4]
 8018e40:	681a      	ldr	r2, [r3, #0]
 8018e42:	0510      	lsls	r0, r2, #20
 8018e44:	d508      	bpl.n	8018e58 <enet_init+0x24c>
 8018e46:	4910      	ldr	r1, [pc, #64]	@ (8018e88 <enet_init+0x27c>)
 8018e48:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8018e4a:	680a      	ldr	r2, [r1, #0]
 8018e4c:	f422 3291 	bic.w	r2, r2, #74240	@ 0x12200
 8018e50:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8018e54:	4302      	orrs	r2, r0
 8018e56:	600a      	str	r2, [r1, #0]
 8018e58:	681a      	ldr	r2, [r3, #0]
 8018e5a:	04d1      	lsls	r1, r2, #19
 8018e5c:	d506      	bpl.n	8018e6c <enet_init+0x260>
 8018e5e:	490a      	ldr	r1, [pc, #40]	@ (8018e88 <enet_init+0x27c>)
 8018e60:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8018e62:	680a      	ldr	r2, [r1, #0]
 8018e64:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8018e68:	4302      	orrs	r2, r0
 8018e6a:	600a      	str	r2, [r1, #0]
 8018e6c:	681a      	ldr	r2, [r3, #0]
 8018e6e:	0492      	lsls	r2, r2, #18
 8018e70:	d401      	bmi.n	8018e76 <enet_init+0x26a>
 8018e72:	2001      	movs	r0, #1
 8018e74:	e701      	b.n	8018c7a <enet_init+0x6e>
 8018e76:	4904      	ldr	r1, [pc, #16]	@ (8018e88 <enet_init+0x27c>)
 8018e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018e7a:	680a      	ldr	r2, [r1, #0]
 8018e7c:	f422 2260 	bic.w	r2, r2, #917504	@ 0xe0000
 8018e80:	4313      	orrs	r3, r2
 8018e82:	600b      	str	r3, [r1, #0]
 8018e84:	e7f5      	b.n	8018e72 <enet_init+0x266>
 8018e86:	bf00      	nop
 8018e88:	40028000 	andmi	r8, r2, r0
 8018e8c:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	@ 0xffffffc4
 8018e90:	40029000 	andmi	r9, r2, r0
 8018e94:	f8de3f23 			@ <UNDEFINED> instruction: 0xf8de3f23
 8018e98:	02c16000 	sbceq	r6, r1, #0
 8018e9c:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>
 8018ea0:	2000cd44 	andcs	ip, r0, r4, asr #26
 8018ea4:	02000080 	andeq	r0, r0, #128	@ 0x80
 8018ea8:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	@ 0x39c
 8018eac:	01000004 	tsteq	r0, r4

08018eb0 <enet_txfifo_flush>:
 8018eb0:	4a08      	ldr	r2, [pc, #32]	@ (8018ed4 <enet_txfifo_flush+0x24>)
 8018eb2:	6993      	ldr	r3, [r2, #24]
 8018eb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018eb8:	6193      	str	r3, [r2, #24]
 8018eba:	4b07      	ldr	r3, [pc, #28]	@ (8018ed8 <enet_txfifo_flush+0x28>)
 8018ebc:	6990      	ldr	r0, [r2, #24]
 8018ebe:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 8018ec2:	d003      	beq.n	8018ecc <enet_txfifo_flush+0x1c>
 8018ec4:	3b01      	subs	r3, #1
 8018ec6:	d1f9      	bne.n	8018ebc <enet_txfifo_flush+0xc>
 8018ec8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018ecc:	fab0 f080 	clz	r0, r0
 8018ed0:	0940      	lsrs	r0, r0, #5
 8018ed2:	4770      	bx	lr
 8018ed4:	40029000 	andmi	r9, r2, r0
 8018ed8:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

08018edc <enet_tx_enable>:
 8018edc:	4a06      	ldr	r2, [pc, #24]	@ (8018ef8 <enet_tx_enable+0x1c>)
 8018ede:	b508      	push	{r3, lr}
 8018ee0:	6813      	ldr	r3, [r2, #0]
 8018ee2:	f043 0308 	orr.w	r3, r3, #8
 8018ee6:	6013      	str	r3, [r2, #0]
 8018ee8:	f7ff ffe2 	bl	8018eb0 <enet_txfifo_flush>
 8018eec:	4a03      	ldr	r2, [pc, #12]	@ (8018efc <enet_tx_enable+0x20>)
 8018eee:	6993      	ldr	r3, [r2, #24]
 8018ef0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018ef4:	6193      	str	r3, [r2, #24]
 8018ef6:	bd08      	pop	{r3, pc}
 8018ef8:	40028000 	andmi	r8, r2, r0
 8018efc:	40029000 	andmi	r9, r2, r0

08018f00 <enet_enable>:
 8018f00:	b508      	push	{r3, lr}
 8018f02:	f7ff ffeb 	bl	8018edc <enet_tx_enable>
 8018f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018f0a:	f7ff be47 	b.w	8018b9c <enet_rx_enable>
	...

08018f10 <enet_desc_information_get>:
 8018f10:	2905      	cmp	r1, #5
 8018f12:	d820      	bhi.n	8018f56 <enet_desc_information_get+0x46>
 8018f14:	e8df f001 	tbb	[pc, r1]
 8018f18:	0309191b 	movweq	r1, #39195	@ 0x991b
 8018f1c:	68401907 	stmdavs	r0, {r0, r1, r2, r8, fp, ip}^
 8018f20:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018f24:	4770      	bx	lr
 8018f26:	88c0      	ldrh	r0, [r0, #6]
 8018f28:	e7fa      	b.n	8018f20 <enet_desc_information_get+0x10>
 8018f2a:	6802      	ldr	r2, [r0, #0]
 8018f2c:	f3c2 430d 	ubfx	r3, r2, #16, #14
 8018f30:	2b04      	cmp	r3, #4
 8018f32:	d913      	bls.n	8018f5c <enet_desc_information_get+0x4c>
 8018f34:	490a      	ldr	r1, [pc, #40]	@ (8018f60 <enet_desc_information_get+0x50>)
 8018f36:	6809      	ldr	r1, [r1, #0]
 8018f38:	0189      	lsls	r1, r1, #6
 8018f3a:	f1a3 0004 	sub.w	r0, r3, #4
 8018f3e:	d50e      	bpl.n	8018f5e <enet_desc_information_get+0x4e>
 8018f40:	f012 0f20 	tst.w	r2, #32
 8018f44:	bf18      	it	ne
 8018f46:	4618      	movne	r0, r3
 8018f48:	4770      	bx	lr
 8018f4a:	6880      	ldr	r0, [r0, #8]
 8018f4c:	4770      	bx	lr
 8018f4e:	6800      	ldr	r0, [r0, #0]
 8018f50:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8018f54:	4770      	bx	lr
 8018f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f5a:	4770      	bx	lr
 8018f5c:	2000      	movs	r0, #0
 8018f5e:	4770      	bx	lr
 8018f60:	40028000 	andmi	r8, r2, r0

08018f64 <enet_initpara_reset>:
 8018f64:	4b08      	ldr	r3, [pc, #32]	@ (8018f88 <enet_initpara_reset+0x24>)
 8018f66:	2200      	movs	r2, #0
 8018f68:	e9c3 2200 	strd	r2, r2, [r3]
 8018f6c:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8018f70:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8018f74:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8018f78:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8018f7c:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
 8018f80:	e9c3 220c 	strd	r2, r2, [r3, #48]	@ 0x30
 8018f84:	639a      	str	r2, [r3, #56]	@ 0x38
 8018f86:	4770      	bx	lr
 8018f88:	2000cd44 	andcs	ip, r0, r4, asr #26

08018f8c <enet_deinit>:
 8018f8c:	b508      	push	{r3, lr}
 8018f8e:	f240 4019 	movw	r0, #1049	@ 0x419
 8018f92:	f000 f8e0 	bl	8019156 <rcu_periph_reset_enable>
 8018f96:	f240 4019 	movw	r0, #1049	@ 0x419
 8018f9a:	f000 f8de 	bl	801915a <rcu_periph_reset_disable>
 8018f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018fa2:	f7ff bfdf 	b.w	8018f64 <enet_initpara_reset>
	...

08018fa8 <fwdgt_enable>:
 8018fa8:	4b02      	ldr	r3, [pc, #8]	@ (8018fb4 <fwdgt_enable+0xc>)
 8018faa:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8018fae:	601a      	str	r2, [r3, #0]
 8018fb0:	4770      	bx	lr
 8018fb2:	bf00      	nop
 8018fb4:	40003000 	andmi	r3, r0, r0

08018fb8 <fwdgt_counter_reload>:
 8018fb8:	4b02      	ldr	r3, [pc, #8]	@ (8018fc4 <fwdgt_counter_reload+0xc>)
 8018fba:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8018fbe:	601a      	str	r2, [r3, #0]
 8018fc0:	4770      	bx	lr
 8018fc2:	bf00      	nop
 8018fc4:	40003000 	andmi	r3, r0, r0

08018fc8 <fwdgt_config>:
 8018fc8:	4a12      	ldr	r2, [pc, #72]	@ (8019014 <fwdgt_config+0x4c>)
 8018fca:	b510      	push	{r4, lr}
 8018fcc:	f245 5355 	movw	r3, #21845	@ 0x5555
 8018fd0:	4c11      	ldr	r4, [pc, #68]	@ (8019018 <fwdgt_config+0x50>)
 8018fd2:	6013      	str	r3, [r2, #0]
 8018fd4:	68d3      	ldr	r3, [r2, #12]
 8018fd6:	3c01      	subs	r4, #1
 8018fd8:	f003 0301 	and.w	r3, r3, #1
 8018fdc:	d013      	beq.n	8019006 <fwdgt_config+0x3e>
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d1f8      	bne.n	8018fd4 <fwdgt_config+0xc>
 8018fe2:	6051      	str	r1, [r2, #4]
 8018fe4:	490c      	ldr	r1, [pc, #48]	@ (8019018 <fwdgt_config+0x50>)
 8018fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8019014 <fwdgt_config+0x4c>)
 8018fe8:	68d3      	ldr	r3, [r2, #12]
 8018fea:	3901      	subs	r1, #1
 8018fec:	f003 0302 	and.w	r3, r3, #2
 8018ff0:	d00d      	beq.n	801900e <fwdgt_config+0x46>
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d1f8      	bne.n	8018fe8 <fwdgt_config+0x20>
 8018ff6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8018ffa:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 8018ffe:	6090      	str	r0, [r2, #8]
 8019000:	6013      	str	r3, [r2, #0]
 8019002:	2001      	movs	r0, #1
 8019004:	e002      	b.n	801900c <fwdgt_config+0x44>
 8019006:	2b00      	cmp	r3, #0
 8019008:	d0eb      	beq.n	8018fe2 <fwdgt_config+0x1a>
 801900a:	2000      	movs	r0, #0
 801900c:	bd10      	pop	{r4, pc}
 801900e:	2b00      	cmp	r3, #0
 8019010:	d1fb      	bne.n	801900a <fwdgt_config+0x42>
 8019012:	e7f0      	b.n	8018ff6 <fwdgt_config+0x2e>
 8019014:	40003000 	andmi	r3, r0, r0
 8019018:	000fffff 	strdeq	pc, [pc], -pc	@ <UNPREDICTABLE>

0801901c <gpio_mode_set>:
 801901c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019020:	6805      	ldr	r5, [r0, #0]
 8019022:	68c4      	ldr	r4, [r0, #12]
 8019024:	2600      	movs	r6, #0
 8019026:	f04f 0e01 	mov.w	lr, #1
 801902a:	f04f 0803 	mov.w	r8, #3
 801902e:	fa0e f706 	lsl.w	r7, lr, r6
 8019032:	421f      	tst	r7, r3
 8019034:	d00d      	beq.n	8019052 <gpio_mode_set+0x36>
 8019036:	0077      	lsls	r7, r6, #1
 8019038:	fa08 fc07 	lsl.w	ip, r8, r7
 801903c:	fa01 f907 	lsl.w	r9, r1, r7
 8019040:	ea25 050c 	bic.w	r5, r5, ip
 8019044:	ea24 040c 	bic.w	r4, r4, ip
 8019048:	fa02 f707 	lsl.w	r7, r2, r7
 801904c:	ea49 0505 	orr.w	r5, r9, r5
 8019050:	433c      	orrs	r4, r7
 8019052:	3601      	adds	r6, #1
 8019054:	2e10      	cmp	r6, #16
 8019056:	d1ea      	bne.n	801902e <gpio_mode_set+0x12>
 8019058:	6005      	str	r5, [r0, #0]
 801905a:	60c4      	str	r4, [r0, #12]
 801905c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019060 <gpio_output_options_set>:
 8019060:	2901      	cmp	r1, #1
 8019062:	6841      	ldr	r1, [r0, #4]
 8019064:	bf0c      	ite	eq
 8019066:	4319      	orreq	r1, r3
 8019068:	4399      	bicne	r1, r3
 801906a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801906c:	6041      	str	r1, [r0, #4]
 801906e:	6881      	ldr	r1, [r0, #8]
 8019070:	2400      	movs	r4, #0
 8019072:	2601      	movs	r6, #1
 8019074:	2703      	movs	r7, #3
 8019076:	fa06 f504 	lsl.w	r5, r6, r4
 801907a:	421d      	tst	r5, r3
 801907c:	d007      	beq.n	801908e <gpio_output_options_set+0x2e>
 801907e:	0065      	lsls	r5, r4, #1
 8019080:	fa07 fc05 	lsl.w	ip, r7, r5
 8019084:	ea21 010c 	bic.w	r1, r1, ip
 8019088:	fa02 f505 	lsl.w	r5, r2, r5
 801908c:	4329      	orrs	r1, r5
 801908e:	3401      	adds	r4, #1
 8019090:	2c10      	cmp	r4, #16
 8019092:	d1f0      	bne.n	8019076 <gpio_output_options_set+0x16>
 8019094:	6081      	str	r1, [r0, #8]
 8019096:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019098 <gpio_af_set>:
 8019098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801909a:	6a06      	ldr	r6, [r0, #32]
 801909c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 801909e:	2300      	movs	r3, #0
 80190a0:	f04f 0c01 	mov.w	ip, #1
 80190a4:	f04f 0e0f 	mov.w	lr, #15
 80190a8:	fa0c f403 	lsl.w	r4, ip, r3
 80190ac:	4214      	tst	r4, r2
 80190ae:	d007      	beq.n	80190c0 <gpio_af_set+0x28>
 80190b0:	009c      	lsls	r4, r3, #2
 80190b2:	fa0e f704 	lsl.w	r7, lr, r4
 80190b6:	ea26 0607 	bic.w	r6, r6, r7
 80190ba:	fa01 f404 	lsl.w	r4, r1, r4
 80190be:	4326      	orrs	r6, r4
 80190c0:	3301      	adds	r3, #1
 80190c2:	2b08      	cmp	r3, #8
 80190c4:	d1f0      	bne.n	80190a8 <gpio_af_set+0x10>
 80190c6:	2300      	movs	r3, #0
 80190c8:	f04f 0c01 	mov.w	ip, #1
 80190cc:	f04f 0e0f 	mov.w	lr, #15
 80190d0:	f103 0408 	add.w	r4, r3, #8
 80190d4:	fa0c f404 	lsl.w	r4, ip, r4
 80190d8:	4214      	tst	r4, r2
 80190da:	d007      	beq.n	80190ec <gpio_af_set+0x54>
 80190dc:	009c      	lsls	r4, r3, #2
 80190de:	fa0e f704 	lsl.w	r7, lr, r4
 80190e2:	ea25 0507 	bic.w	r5, r5, r7
 80190e6:	fa01 f404 	lsl.w	r4, r1, r4
 80190ea:	4325      	orrs	r5, r4
 80190ec:	3301      	adds	r3, #1
 80190ee:	2b08      	cmp	r3, #8
 80190f0:	d1ee      	bne.n	80190d0 <gpio_af_set+0x38>
 80190f2:	6206      	str	r6, [r0, #32]
 80190f4:	6245      	str	r5, [r0, #36]	@ 0x24
 80190f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080190f8 <pmu_backup_ldo_config>:
 80190f8:	4b04      	ldr	r3, [pc, #16]	@ (801910c <pmu_backup_ldo_config+0x14>)
 80190fa:	685a      	ldr	r2, [r3, #4]
 80190fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8019100:	605a      	str	r2, [r3, #4]
 8019102:	685a      	ldr	r2, [r3, #4]
 8019104:	4302      	orrs	r2, r0
 8019106:	605a      	str	r2, [r3, #4]
 8019108:	4770      	bx	lr
 801910a:	bf00      	nop
 801910c:	40007000 	andmi	r7, r0, r0

08019110 <pmu_backup_write_enable>:
 8019110:	4a02      	ldr	r2, [pc, #8]	@ (801911c <pmu_backup_write_enable+0xc>)
 8019112:	6813      	ldr	r3, [r2, #0]
 8019114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019118:	6013      	str	r3, [r2, #0]
 801911a:	4770      	bx	lr
 801911c:	40007000 	andmi	r7, r0, r0

08019120 <rcu_periph_clock_enable>:
 8019120:	0983      	lsrs	r3, r0, #6
 8019122:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8019126:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 801912a:	f000 001f 	and.w	r0, r0, #31
 801912e:	6819      	ldr	r1, [r3, #0]
 8019130:	2201      	movs	r2, #1
 8019132:	4082      	lsls	r2, r0
 8019134:	430a      	orrs	r2, r1
 8019136:	601a      	str	r2, [r3, #0]
 8019138:	4770      	bx	lr

0801913a <rcu_periph_clock_disable>:
 801913a:	0983      	lsrs	r3, r0, #6
 801913c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8019140:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8019144:	f000 001f 	and.w	r0, r0, #31
 8019148:	681a      	ldr	r2, [r3, #0]
 801914a:	2101      	movs	r1, #1
 801914c:	4081      	lsls	r1, r0
 801914e:	ea22 0201 	bic.w	r2, r2, r1
 8019152:	601a      	str	r2, [r3, #0]
 8019154:	4770      	bx	lr

08019156 <rcu_periph_reset_enable>:
 8019156:	f7ff bfe3 	b.w	8019120 <rcu_periph_clock_enable>

0801915a <rcu_periph_reset_disable>:
 801915a:	f7ff bfee 	b.w	801913a <rcu_periph_clock_disable>
	...

08019160 <rcu_ckout0_config>:
 8019160:	4a04      	ldr	r2, [pc, #16]	@ (8019174 <rcu_ckout0_config+0x14>)
 8019162:	f8d2 3808 	ldr.w	r3, [r2, #2056]	@ 0x808
 8019166:	f023 63ec 	bic.w	r3, r3, #123731968	@ 0x7600000
 801916a:	430b      	orrs	r3, r1
 801916c:	4303      	orrs	r3, r0
 801916e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
 8019172:	4770      	bx	lr
 8019174:	40023000 	andmi	r3, r2, r0

08019178 <rcu_timer_clock_prescaler_config>:
 8019178:	f06f 7380 	mvn.w	r3, #16777216	@ 0x1000000
 801917c:	4298      	cmp	r0, r3
 801917e:	4b05      	ldr	r3, [pc, #20]	@ (8019194 <rcu_timer_clock_prescaler_config+0x1c>)
 8019180:	f8d3 288c 	ldr.w	r2, [r3, #2188]	@ 0x88c
 8019184:	bf0c      	ite	eq
 8019186:	f022 7280 	biceq.w	r2, r2, #16777216	@ 0x1000000
 801918a:	4302      	orrne	r2, r0
 801918c:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
 8019190:	4770      	bx	lr
 8019192:	bf00      	nop
 8019194:	40023000 	andmi	r3, r2, r0

08019198 <rcu_clock_freq_get>:
 8019198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801919a:	4b35      	ldr	r3, [pc, #212]	@ (8019270 <rcu_clock_freq_get+0xd8>)
 801919c:	b089      	sub	sp, #36	@ 0x24
 801919e:	4604      	mov	r4, r0
 80191a0:	ad04      	add	r5, sp, #16
 80191a2:	f103 0610 	add.w	r6, r3, #16
 80191a6:	461f      	mov	r7, r3
 80191a8:	6818      	ldr	r0, [r3, #0]
 80191aa:	6859      	ldr	r1, [r3, #4]
 80191ac:	462a      	mov	r2, r5
 80191ae:	c203      	stmia	r2!, {r0, r1}
 80191b0:	3308      	adds	r3, #8
 80191b2:	42b3      	cmp	r3, r6
 80191b4:	4615      	mov	r5, r2
 80191b6:	d1f7      	bne.n	80191a8 <rcu_clock_freq_get+0x10>
 80191b8:	6938      	ldr	r0, [r7, #16]
 80191ba:	6871      	ldr	r1, [r6, #4]
 80191bc:	4a2d      	ldr	r2, [pc, #180]	@ (8019274 <rcu_clock_freq_get+0xdc>)
 80191be:	466b      	mov	r3, sp
 80191c0:	c303      	stmia	r3!, {r0, r1}
 80191c2:	c303      	stmia	r3!, {r0, r1}
 80191c4:	f8d2 3808 	ldr.w	r3, [r2, #2056]	@ 0x808
 80191c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80191cc:	2b01      	cmp	r3, #1
 80191ce:	d03f      	beq.n	8019250 <rcu_clock_freq_get+0xb8>
 80191d0:	2b02      	cmp	r3, #2
 80191d2:	d13f      	bne.n	8019254 <rcu_clock_freq_get+0xbc>
 80191d4:	f8d2 0804 	ldr.w	r0, [r2, #2052]	@ 0x804
 80191d8:	f8d2 1804 	ldr.w	r1, [r2, #2052]	@ 0x804
 80191dc:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 80191e0:	f8d2 2804 	ldr.w	r2, [r2, #2052]	@ 0x804
 80191e4:	4d24      	ldr	r5, [pc, #144]	@ (8019278 <rcu_clock_freq_get+0xe0>)
 80191e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80191ea:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80191ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80191f2:	f103 0301 	add.w	r3, r3, #1
 80191f6:	4a21      	ldr	r2, [pc, #132]	@ (801927c <rcu_clock_freq_get+0xe4>)
 80191f8:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80191fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019200:	bf18      	it	ne
 8019202:	462a      	movne	r2, r5
 8019204:	fbb2 f2f0 	udiv	r2, r2, r0
 8019208:	434a      	muls	r2, r1
 801920a:	fbb2 f0f3 	udiv	r0, r2, r3
 801920e:	4919      	ldr	r1, [pc, #100]	@ (8019274 <rcu_clock_freq_get+0xdc>)
 8019210:	f8d1 3808 	ldr.w	r3, [r1, #2056]	@ 0x808
 8019214:	f8d1 2808 	ldr.w	r2, [r1, #2056]	@ 0x808
 8019218:	f3c2 2282 	ubfx	r2, r2, #10, #3
 801921c:	3220      	adds	r2, #32
 801921e:	446a      	add	r2, sp
 8019220:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8019224:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 8019228:	f8d1 2808 	ldr.w	r2, [r1, #2056]	@ 0x808
 801922c:	3320      	adds	r3, #32
 801922e:	446b      	add	r3, sp
 8019230:	f3c2 3242 	ubfx	r2, r2, #13, #3
 8019234:	3220      	adds	r2, #32
 8019236:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801923a:	446a      	add	r2, sp
 801923c:	fa20 f303 	lsr.w	r3, r0, r3
 8019240:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8019244:	2c03      	cmp	r4, #3
 8019246:	d807      	bhi.n	8019258 <rcu_clock_freq_get+0xc0>
 8019248:	e8df f004 	tbb	[pc, r4]
 801924c:	0e0b0907 	vmlaeq.f16	s0, s22, s14	@ <UNPREDICTABLE>
 8019250:	4809      	ldr	r0, [pc, #36]	@ (8019278 <rcu_clock_freq_get+0xe0>)
 8019252:	e7dc      	b.n	801920e <rcu_clock_freq_get+0x76>
 8019254:	4809      	ldr	r0, [pc, #36]	@ (801927c <rcu_clock_freq_get+0xe4>)
 8019256:	e7da      	b.n	801920e <rcu_clock_freq_get+0x76>
 8019258:	2000      	movs	r0, #0
 801925a:	b009      	add	sp, #36	@ 0x24
 801925c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801925e:	4618      	mov	r0, r3
 8019260:	e7fb      	b.n	801925a <rcu_clock_freq_get+0xc2>
 8019262:	fa23 f005 	lsr.w	r0, r3, r5
 8019266:	e7f8      	b.n	801925a <rcu_clock_freq_get+0xc2>
 8019268:	fa23 f002 	lsr.w	r0, r3, r2
 801926c:	e7f5      	b.n	801925a <rcu_clock_freq_get+0xc2>
 801926e:	bf00      	nop
 8019270:	0801b1e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, ip, sp, pc}
 8019274:	40023000 	andmi	r3, r2, r0
 8019278:	017d7840 	cmneq	sp, r0, asr #16
 801927c:	00f42400 	rscseq	r2, r4, r0, lsl #8

08019280 <syscfg_enet_phy_interface_config>:
 8019280:	4a04      	ldr	r2, [pc, #16]	@ (8019294 <syscfg_enet_phy_interface_config+0x14>)
 8019282:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 8019286:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801928a:	4303      	orrs	r3, r0
 801928c:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
 8019290:	4770      	bx	lr
 8019292:	bf00      	nop
 8019294:	40013000 	andmi	r3, r1, r0

08019298 <timer_deinit>:
 8019298:	b508      	push	{r3, lr}
 801929a:	4b4e      	ldr	r3, [pc, #312]	@ (80193d4 <timer_deinit+0x13c>)
 801929c:	4298      	cmp	r0, r3
 801929e:	f000 8092 	beq.w	80193c6 <timer_deinit+0x12e>
 80192a2:	d822      	bhi.n	80192ea <timer_deinit+0x52>
 80192a4:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80192a8:	4298      	cmp	r0, r3
 80192aa:	d062      	beq.n	8019372 <timer_deinit+0xda>
 80192ac:	d80b      	bhi.n	80192c6 <timer_deinit+0x2e>
 80192ae:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80192b2:	4298      	cmp	r0, r3
 80192b4:	d04f      	beq.n	8019356 <timer_deinit+0xbe>
 80192b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80192ba:	4298      	cmp	r0, r3
 80192bc:	d052      	beq.n	8019364 <timer_deinit+0xcc>
 80192be:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80192c2:	d041      	beq.n	8019348 <timer_deinit+0xb0>
 80192c4:	bd08      	pop	{r3, pc}
 80192c6:	4b44      	ldr	r3, [pc, #272]	@ (80193d8 <timer_deinit+0x140>)
 80192c8:	4298      	cmp	r0, r3
 80192ca:	d059      	beq.n	8019380 <timer_deinit+0xe8>
 80192cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80192d0:	4298      	cmp	r0, r3
 80192d2:	d071      	beq.n	80193b8 <timer_deinit+0x120>
 80192d4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80192d8:	4298      	cmp	r0, r3
 80192da:	d1f3      	bne.n	80192c4 <timer_deinit+0x2c>
 80192dc:	f640 0004 	movw	r0, #2052	@ 0x804
 80192e0:	f7ff ff39 	bl	8019156 <rcu_periph_reset_enable>
 80192e4:	f640 0004 	movw	r0, #2052	@ 0x804
 80192e8:	e02a      	b.n	8019340 <timer_deinit+0xa8>
 80192ea:	4b3c      	ldr	r3, [pc, #240]	@ (80193dc <timer_deinit+0x144>)
 80192ec:	4298      	cmp	r0, r3
 80192ee:	d055      	beq.n	801939c <timer_deinit+0x104>
 80192f0:	d812      	bhi.n	8019318 <timer_deinit+0x80>
 80192f2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80192f6:	4298      	cmp	r0, r3
 80192f8:	d01c      	beq.n	8019334 <timer_deinit+0x9c>
 80192fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80192fe:	4298      	cmp	r0, r3
 8019300:	d045      	beq.n	801938e <timer_deinit+0xf6>
 8019302:	f5a3 4364 	sub.w	r3, r3, #58368	@ 0xe400
 8019306:	4298      	cmp	r0, r3
 8019308:	d1dc      	bne.n	80192c4 <timer_deinit+0x2c>
 801930a:	f640 0008 	movw	r0, #2056	@ 0x808
 801930e:	f7ff ff22 	bl	8019156 <rcu_periph_reset_enable>
 8019312:	f640 0008 	movw	r0, #2056	@ 0x808
 8019316:	e013      	b.n	8019340 <timer_deinit+0xa8>
 8019318:	4b31      	ldr	r3, [pc, #196]	@ (80193e0 <timer_deinit+0x148>)
 801931a:	4298      	cmp	r0, r3
 801931c:	d045      	beq.n	80193aa <timer_deinit+0x112>
 801931e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8019322:	4298      	cmp	r0, r3
 8019324:	d1ce      	bne.n	80192c4 <timer_deinit+0x2c>
 8019326:	f640 1012 	movw	r0, #2322	@ 0x912
 801932a:	f7ff ff14 	bl	8019156 <rcu_periph_reset_enable>
 801932e:	f640 1012 	movw	r0, #2322	@ 0x912
 8019332:	e005      	b.n	8019340 <timer_deinit+0xa8>
 8019334:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8019338:	f7ff ff0d 	bl	8019156 <rcu_periph_reset_enable>
 801933c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8019340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019344:	f7ff bf09 	b.w	801915a <rcu_periph_reset_disable>
 8019348:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801934c:	f7ff ff03 	bl	8019156 <rcu_periph_reset_enable>
 8019350:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8019354:	e7f4      	b.n	8019340 <timer_deinit+0xa8>
 8019356:	f640 0001 	movw	r0, #2049	@ 0x801
 801935a:	f7ff fefc 	bl	8019156 <rcu_periph_reset_enable>
 801935e:	f640 0001 	movw	r0, #2049	@ 0x801
 8019362:	e7ed      	b.n	8019340 <timer_deinit+0xa8>
 8019364:	f640 0002 	movw	r0, #2050	@ 0x802
 8019368:	f7ff fef5 	bl	8019156 <rcu_periph_reset_enable>
 801936c:	f640 0002 	movw	r0, #2050	@ 0x802
 8019370:	e7e6      	b.n	8019340 <timer_deinit+0xa8>
 8019372:	f640 0003 	movw	r0, #2051	@ 0x803
 8019376:	f7ff feee 	bl	8019156 <rcu_periph_reset_enable>
 801937a:	f640 0003 	movw	r0, #2051	@ 0x803
 801937e:	e7df      	b.n	8019340 <timer_deinit+0xa8>
 8019380:	f640 0005 	movw	r0, #2053	@ 0x805
 8019384:	f7ff fee7 	bl	8019156 <rcu_periph_reset_enable>
 8019388:	f640 0005 	movw	r0, #2053	@ 0x805
 801938c:	e7d8      	b.n	8019340 <timer_deinit+0xa8>
 801938e:	f640 1001 	movw	r0, #2305	@ 0x901
 8019392:	f7ff fee0 	bl	8019156 <rcu_periph_reset_enable>
 8019396:	f640 1001 	movw	r0, #2305	@ 0x901
 801939a:	e7d1      	b.n	8019340 <timer_deinit+0xa8>
 801939c:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 80193a0:	f7ff fed9 	bl	8019156 <rcu_periph_reset_enable>
 80193a4:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 80193a8:	e7ca      	b.n	8019340 <timer_deinit+0xa8>
 80193aa:	f640 1011 	movw	r0, #2321	@ 0x911
 80193ae:	f7ff fed2 	bl	8019156 <rcu_periph_reset_enable>
 80193b2:	f640 1011 	movw	r0, #2321	@ 0x911
 80193b6:	e7c3      	b.n	8019340 <timer_deinit+0xa8>
 80193b8:	f640 0006 	movw	r0, #2054	@ 0x806
 80193bc:	f7ff fecb 	bl	8019156 <rcu_periph_reset_enable>
 80193c0:	f640 0006 	movw	r0, #2054	@ 0x806
 80193c4:	e7bc      	b.n	8019340 <timer_deinit+0xa8>
 80193c6:	f640 0007 	movw	r0, #2055	@ 0x807
 80193ca:	f7ff fec4 	bl	8019156 <rcu_periph_reset_enable>
 80193ce:	f640 0007 	movw	r0, #2055	@ 0x807
 80193d2:	e7b5      	b.n	8019340 <timer_deinit+0xa8>
 80193d4:	40001c00 	andmi	r1, r0, r0, lsl #24
 80193d8:	40001400 	andmi	r1, r0, r0, lsl #8
 80193dc:	40014000 	andmi	r4, r1, r0
 80193e0:	40014400 	andmi	r4, r1, r0, lsl #8

080193e4 <timer_struct_para_init>:
 80193e4:	2300      	movs	r3, #0
 80193e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80193ea:	e9c0 3300 	strd	r3, r3, [r0]
 80193ee:	6082      	str	r2, [r0, #8]
 80193f0:	7303      	strb	r3, [r0, #12]
 80193f2:	4770      	bx	lr

080193f4 <timer_init>:
 80193f4:	880b      	ldrh	r3, [r1, #0]
 80193f6:	4a17      	ldr	r2, [pc, #92]	@ (8019454 <timer_init+0x60>)
 80193f8:	b510      	push	{r4, lr}
 80193fa:	6283      	str	r3, [r0, #40]	@ 0x28
 80193fc:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
 8019400:	4293      	cmp	r3, r2
 8019402:	d004      	beq.n	801940e <timer_init+0x1a>
 8019404:	f420 6240 	bic.w	r2, r0, #3072	@ 0xc00
 8019408:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 801940c:	d10b      	bne.n	8019426 <timer_init+0x32>
 801940e:	6802      	ldr	r2, [r0, #0]
 8019410:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8019414:	6002      	str	r2, [r0, #0]
 8019416:	6804      	ldr	r4, [r0, #0]
 8019418:	884a      	ldrh	r2, [r1, #2]
 801941a:	4322      	orrs	r2, r4
 801941c:	6002      	str	r2, [r0, #0]
 801941e:	6804      	ldr	r4, [r0, #0]
 8019420:	888a      	ldrh	r2, [r1, #4]
 8019422:	4322      	orrs	r2, r4
 8019424:	6002      	str	r2, [r0, #0]
 8019426:	688a      	ldr	r2, [r1, #8]
 8019428:	62c2      	str	r2, [r0, #44]	@ 0x2c
 801942a:	4a0b      	ldr	r2, [pc, #44]	@ (8019458 <timer_init+0x64>)
 801942c:	4293      	cmp	r3, r2
 801942e:	d00c      	beq.n	801944a <timer_init+0x56>
 8019430:	6802      	ldr	r2, [r0, #0]
 8019432:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8019436:	6002      	str	r2, [r0, #0]
 8019438:	6804      	ldr	r4, [r0, #0]
 801943a:	88ca      	ldrh	r2, [r1, #6]
 801943c:	4322      	orrs	r2, r4
 801943e:	6002      	str	r2, [r0, #0]
 8019440:	4a04      	ldr	r2, [pc, #16]	@ (8019454 <timer_init+0x60>)
 8019442:	4293      	cmp	r3, r2
 8019444:	bf04      	itt	eq
 8019446:	7b0b      	ldrbeq	r3, [r1, #12]
 8019448:	6303      	streq	r3, [r0, #48]	@ 0x30
 801944a:	6943      	ldr	r3, [r0, #20]
 801944c:	f043 0301 	orr.w	r3, r3, #1
 8019450:	6143      	str	r3, [r0, #20]
 8019452:	bd10      	pop	{r4, pc}
 8019454:	40010000 	andmi	r0, r1, r0
 8019458:	40001000 	andmi	r1, r0, r0

0801945c <timer_enable>:
 801945c:	6803      	ldr	r3, [r0, #0]
 801945e:	f043 0301 	orr.w	r3, r3, #1
 8019462:	6003      	str	r3, [r0, #0]
 8019464:	4770      	bx	lr

08019466 <timer_counter_value_config>:
 8019466:	6241      	str	r1, [r0, #36]	@ 0x24
 8019468:	4770      	bx	lr

0801946a <timer_dma_enable>:
 801946a:	68c3      	ldr	r3, [r0, #12]
 801946c:	4319      	orrs	r1, r3
 801946e:	60c1      	str	r1, [r0, #12]
 8019470:	4770      	bx	lr
	...

08019474 <timer_channel_output_config>:
 8019474:	2903      	cmp	r1, #3
 8019476:	d83e      	bhi.n	80194f6 <timer_channel_output_config+0x82>
 8019478:	e8df f011 	tbh	[pc, r1, lsl #1]
 801947c:	003e0004 	eorseq	r0, lr, r4
 8019480:	00bc007d 	adcseq	r0, ip, sp, ror r0
 8019484:	6a03      	ldr	r3, [r0, #32]
 8019486:	f023 0301 	bic.w	r3, r3, #1
 801948a:	6203      	str	r3, [r0, #32]
 801948c:	6983      	ldr	r3, [r0, #24]
 801948e:	f023 0303 	bic.w	r3, r3, #3
 8019492:	6183      	str	r3, [r0, #24]
 8019494:	6a01      	ldr	r1, [r0, #32]
 8019496:	8813      	ldrh	r3, [r2, #0]
 8019498:	430b      	orrs	r3, r1
 801949a:	6203      	str	r3, [r0, #32]
 801949c:	6a03      	ldr	r3, [r0, #32]
 801949e:	f023 0302 	bic.w	r3, r3, #2
 80194a2:	6203      	str	r3, [r0, #32]
 80194a4:	6a01      	ldr	r1, [r0, #32]
 80194a6:	8893      	ldrh	r3, [r2, #4]
 80194a8:	430b      	orrs	r3, r1
 80194aa:	6203      	str	r3, [r0, #32]
 80194ac:	4b64      	ldr	r3, [pc, #400]	@ (8019640 <timer_channel_output_config+0x1cc>)
 80194ae:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 80194b2:	4299      	cmp	r1, r3
 80194b4:	d11f      	bne.n	80194f6 <timer_channel_output_config+0x82>
 80194b6:	6a03      	ldr	r3, [r0, #32]
 80194b8:	f023 0304 	bic.w	r3, r3, #4
 80194bc:	6203      	str	r3, [r0, #32]
 80194be:	6a01      	ldr	r1, [r0, #32]
 80194c0:	8853      	ldrh	r3, [r2, #2]
 80194c2:	430b      	orrs	r3, r1
 80194c4:	6203      	str	r3, [r0, #32]
 80194c6:	6a03      	ldr	r3, [r0, #32]
 80194c8:	f023 0308 	bic.w	r3, r3, #8
 80194cc:	6203      	str	r3, [r0, #32]
 80194ce:	6a01      	ldr	r1, [r0, #32]
 80194d0:	88d3      	ldrh	r3, [r2, #6]
 80194d2:	430b      	orrs	r3, r1
 80194d4:	6203      	str	r3, [r0, #32]
 80194d6:	6843      	ldr	r3, [r0, #4]
 80194d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80194dc:	6043      	str	r3, [r0, #4]
 80194de:	6841      	ldr	r1, [r0, #4]
 80194e0:	8913      	ldrh	r3, [r2, #8]
 80194e2:	430b      	orrs	r3, r1
 80194e4:	6043      	str	r3, [r0, #4]
 80194e6:	6843      	ldr	r3, [r0, #4]
 80194e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80194ec:	6043      	str	r3, [r0, #4]
 80194ee:	6841      	ldr	r1, [r0, #4]
 80194f0:	8953      	ldrh	r3, [r2, #10]
 80194f2:	430b      	orrs	r3, r1
 80194f4:	6043      	str	r3, [r0, #4]
 80194f6:	4770      	bx	lr
 80194f8:	6a03      	ldr	r3, [r0, #32]
 80194fa:	8811      	ldrh	r1, [r2, #0]
 80194fc:	f023 0310 	bic.w	r3, r3, #16
 8019500:	6203      	str	r3, [r0, #32]
 8019502:	6983      	ldr	r3, [r0, #24]
 8019504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8019508:	6183      	str	r3, [r0, #24]
 801950a:	6a03      	ldr	r3, [r0, #32]
 801950c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8019510:	6203      	str	r3, [r0, #32]
 8019512:	6a03      	ldr	r3, [r0, #32]
 8019514:	8891      	ldrh	r1, [r2, #4]
 8019516:	f023 0320 	bic.w	r3, r3, #32
 801951a:	6203      	str	r3, [r0, #32]
 801951c:	6a03      	ldr	r3, [r0, #32]
 801951e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8019522:	6203      	str	r3, [r0, #32]
 8019524:	4b46      	ldr	r3, [pc, #280]	@ (8019640 <timer_channel_output_config+0x1cc>)
 8019526:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 801952a:	4299      	cmp	r1, r3
 801952c:	d1e3      	bne.n	80194f6 <timer_channel_output_config+0x82>
 801952e:	6a03      	ldr	r3, [r0, #32]
 8019530:	8851      	ldrh	r1, [r2, #2]
 8019532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019536:	6203      	str	r3, [r0, #32]
 8019538:	6a03      	ldr	r3, [r0, #32]
 801953a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801953e:	6203      	str	r3, [r0, #32]
 8019540:	6a03      	ldr	r3, [r0, #32]
 8019542:	88d1      	ldrh	r1, [r2, #6]
 8019544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019548:	6203      	str	r3, [r0, #32]
 801954a:	6a03      	ldr	r3, [r0, #32]
 801954c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8019550:	6203      	str	r3, [r0, #32]
 8019552:	6843      	ldr	r3, [r0, #4]
 8019554:	8911      	ldrh	r1, [r2, #8]
 8019556:	8952      	ldrh	r2, [r2, #10]
 8019558:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801955c:	6043      	str	r3, [r0, #4]
 801955e:	6843      	ldr	r3, [r0, #4]
 8019560:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8019564:	6043      	str	r3, [r0, #4]
 8019566:	6843      	ldr	r3, [r0, #4]
 8019568:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801956c:	6043      	str	r3, [r0, #4]
 801956e:	6843      	ldr	r3, [r0, #4]
 8019570:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8019574:	e7be      	b.n	80194f4 <timer_channel_output_config+0x80>
 8019576:	6a03      	ldr	r3, [r0, #32]
 8019578:	8811      	ldrh	r1, [r2, #0]
 801957a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801957e:	6203      	str	r3, [r0, #32]
 8019580:	69c3      	ldr	r3, [r0, #28]
 8019582:	f023 0303 	bic.w	r3, r3, #3
 8019586:	61c3      	str	r3, [r0, #28]
 8019588:	6a03      	ldr	r3, [r0, #32]
 801958a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801958e:	6203      	str	r3, [r0, #32]
 8019590:	6a03      	ldr	r3, [r0, #32]
 8019592:	8891      	ldrh	r1, [r2, #4]
 8019594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8019598:	6203      	str	r3, [r0, #32]
 801959a:	6a03      	ldr	r3, [r0, #32]
 801959c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80195a0:	6203      	str	r3, [r0, #32]
 80195a2:	4b27      	ldr	r3, [pc, #156]	@ (8019640 <timer_channel_output_config+0x1cc>)
 80195a4:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 80195a8:	4299      	cmp	r1, r3
 80195aa:	d1a4      	bne.n	80194f6 <timer_channel_output_config+0x82>
 80195ac:	6a03      	ldr	r3, [r0, #32]
 80195ae:	8851      	ldrh	r1, [r2, #2]
 80195b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80195b4:	6203      	str	r3, [r0, #32]
 80195b6:	6a03      	ldr	r3, [r0, #32]
 80195b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80195bc:	6203      	str	r3, [r0, #32]
 80195be:	6a03      	ldr	r3, [r0, #32]
 80195c0:	88d1      	ldrh	r1, [r2, #6]
 80195c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80195c6:	6203      	str	r3, [r0, #32]
 80195c8:	6a03      	ldr	r3, [r0, #32]
 80195ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80195ce:	6203      	str	r3, [r0, #32]
 80195d0:	6843      	ldr	r3, [r0, #4]
 80195d2:	8911      	ldrh	r1, [r2, #8]
 80195d4:	8952      	ldrh	r2, [r2, #10]
 80195d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80195da:	6043      	str	r3, [r0, #4]
 80195dc:	6843      	ldr	r3, [r0, #4]
 80195de:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80195e2:	6043      	str	r3, [r0, #4]
 80195e4:	6843      	ldr	r3, [r0, #4]
 80195e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80195ea:	6043      	str	r3, [r0, #4]
 80195ec:	6843      	ldr	r3, [r0, #4]
 80195ee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80195f2:	e77f      	b.n	80194f4 <timer_channel_output_config+0x80>
 80195f4:	6a03      	ldr	r3, [r0, #32]
 80195f6:	8811      	ldrh	r1, [r2, #0]
 80195f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80195fc:	6203      	str	r3, [r0, #32]
 80195fe:	69c3      	ldr	r3, [r0, #28]
 8019600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8019604:	61c3      	str	r3, [r0, #28]
 8019606:	6a03      	ldr	r3, [r0, #32]
 8019608:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 801960c:	6203      	str	r3, [r0, #32]
 801960e:	6a03      	ldr	r3, [r0, #32]
 8019610:	8891      	ldrh	r1, [r2, #4]
 8019612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8019616:	6203      	str	r3, [r0, #32]
 8019618:	6a03      	ldr	r3, [r0, #32]
 801961a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 801961e:	6203      	str	r3, [r0, #32]
 8019620:	4b07      	ldr	r3, [pc, #28]	@ (8019640 <timer_channel_output_config+0x1cc>)
 8019622:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 8019626:	4299      	cmp	r1, r3
 8019628:	f47f af65 	bne.w	80194f6 <timer_channel_output_config+0x82>
 801962c:	6843      	ldr	r3, [r0, #4]
 801962e:	8912      	ldrh	r2, [r2, #8]
 8019630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8019634:	6043      	str	r3, [r0, #4]
 8019636:	6843      	ldr	r3, [r0, #4]
 8019638:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801963c:	e75a      	b.n	80194f4 <timer_channel_output_config+0x80>
 801963e:	bf00      	nop
 8019640:	40010000 	andmi	r0, r1, r0

08019644 <timer_channel_output_mode_config>:
 8019644:	2903      	cmp	r1, #3
 8019646:	d81a      	bhi.n	801967e <timer_channel_output_mode_config+0x3a>
 8019648:	e8df f001 	tbb	[pc, r1]
 801964c:	1a120a02 	bne	849be5c <_sidata+0x47c758>
 8019650:	6983      	ldr	r3, [r0, #24]
 8019652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8019656:	6183      	str	r3, [r0, #24]
 8019658:	6983      	ldr	r3, [r0, #24]
 801965a:	4313      	orrs	r3, r2
 801965c:	6183      	str	r3, [r0, #24]
 801965e:	4770      	bx	lr
 8019660:	6983      	ldr	r3, [r0, #24]
 8019662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8019666:	6183      	str	r3, [r0, #24]
 8019668:	6983      	ldr	r3, [r0, #24]
 801966a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801966e:	e7f5      	b.n	801965c <timer_channel_output_mode_config+0x18>
 8019670:	69c3      	ldr	r3, [r0, #28]
 8019672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8019676:	61c3      	str	r3, [r0, #28]
 8019678:	69c3      	ldr	r3, [r0, #28]
 801967a:	4313      	orrs	r3, r2
 801967c:	61c3      	str	r3, [r0, #28]
 801967e:	4770      	bx	lr
 8019680:	69c3      	ldr	r3, [r0, #28]
 8019682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8019686:	61c3      	str	r3, [r0, #28]
 8019688:	69c3      	ldr	r3, [r0, #28]
 801968a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801968e:	e7f5      	b.n	801967c <timer_channel_output_mode_config+0x38>

08019690 <timer_channel_output_pulse_value_config>:
 8019690:	2903      	cmp	r1, #3
 8019692:	d80a      	bhi.n	80196aa <timer_channel_output_pulse_value_config+0x1a>
 8019694:	e8df f001 	tbb	[pc, r1]
 8019698:	08060402 	stmdaeq	r6, {r1, sl}
 801969c:	6342      	str	r2, [r0, #52]	@ 0x34
 801969e:	4770      	bx	lr
 80196a0:	6382      	str	r2, [r0, #56]	@ 0x38
 80196a2:	4770      	bx	lr
 80196a4:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80196a6:	4770      	bx	lr
 80196a8:	6402      	str	r2, [r0, #64]	@ 0x40
 80196aa:	4770      	bx	lr

080196ac <timer_channel_output_shadow_config>:
 80196ac:	2903      	cmp	r1, #3
 80196ae:	d81a      	bhi.n	80196e6 <timer_channel_output_shadow_config+0x3a>
 80196b0:	e8df f001 	tbb	[pc, r1]
 80196b4:	1a120a02 	bne	849bec4 <_sidata+0x47c7c0>
 80196b8:	6983      	ldr	r3, [r0, #24]
 80196ba:	f023 0308 	bic.w	r3, r3, #8
 80196be:	6183      	str	r3, [r0, #24]
 80196c0:	6983      	ldr	r3, [r0, #24]
 80196c2:	4313      	orrs	r3, r2
 80196c4:	6183      	str	r3, [r0, #24]
 80196c6:	4770      	bx	lr
 80196c8:	6983      	ldr	r3, [r0, #24]
 80196ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80196ce:	6183      	str	r3, [r0, #24]
 80196d0:	6983      	ldr	r3, [r0, #24]
 80196d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80196d6:	e7f5      	b.n	80196c4 <timer_channel_output_shadow_config+0x18>
 80196d8:	69c3      	ldr	r3, [r0, #28]
 80196da:	f023 0308 	bic.w	r3, r3, #8
 80196de:	61c3      	str	r3, [r0, #28]
 80196e0:	69c3      	ldr	r3, [r0, #28]
 80196e2:	4313      	orrs	r3, r2
 80196e4:	61c3      	str	r3, [r0, #28]
 80196e6:	4770      	bx	lr
 80196e8:	69c3      	ldr	r3, [r0, #28]
 80196ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80196ee:	61c3      	str	r3, [r0, #28]
 80196f0:	69c3      	ldr	r3, [r0, #28]
 80196f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80196f6:	e7f5      	b.n	80196e4 <timer_channel_output_shadow_config+0x38>

080196f8 <timer_input_trigger_source_select>:
 80196f8:	6883      	ldr	r3, [r0, #8]
 80196fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80196fe:	6083      	str	r3, [r0, #8]
 8019700:	6883      	ldr	r3, [r0, #8]
 8019702:	430b      	orrs	r3, r1
 8019704:	6083      	str	r3, [r0, #8]
 8019706:	4770      	bx	lr

08019708 <timer_master_output_trigger_source_select>:
 8019708:	6843      	ldr	r3, [r0, #4]
 801970a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801970e:	6043      	str	r3, [r0, #4]
 8019710:	6843      	ldr	r3, [r0, #4]
 8019712:	430b      	orrs	r3, r1
 8019714:	6043      	str	r3, [r0, #4]
 8019716:	4770      	bx	lr

08019718 <timer_slave_mode_select>:
 8019718:	6883      	ldr	r3, [r0, #8]
 801971a:	f023 0307 	bic.w	r3, r3, #7
 801971e:	6083      	str	r3, [r0, #8]
 8019720:	6883      	ldr	r3, [r0, #8]
 8019722:	430b      	orrs	r3, r1
 8019724:	6083      	str	r3, [r0, #8]
 8019726:	4770      	bx	lr

08019728 <timer_master_slave_mode_config>:
 8019728:	b921      	cbnz	r1, 8019734 <timer_master_slave_mode_config+0xc>
 801972a:	6883      	ldr	r3, [r0, #8]
 801972c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019730:	6083      	str	r3, [r0, #8]
 8019732:	4770      	bx	lr
 8019734:	2901      	cmp	r1, #1
 8019736:	d1fc      	bne.n	8019732 <timer_master_slave_mode_config+0xa>
 8019738:	6883      	ldr	r3, [r0, #8]
 801973a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801973e:	e7f7      	b.n	8019730 <timer_master_slave_mode_config+0x8>

08019740 <timer_interrupt_enable>:
 8019740:	68c3      	ldr	r3, [r0, #12]
 8019742:	430b      	orrs	r3, r1
 8019744:	60c3      	str	r3, [r0, #12]
 8019746:	4770      	bx	lr

08019748 <timer_interrupt_flag_clear>:
 8019748:	43c9      	mvns	r1, r1
 801974a:	6101      	str	r1, [r0, #16]
 801974c:	4770      	bx	lr
	...

08019750 <bkp_data_write(bkp_data_register_enum, unsigned short)>:
 8019750:	b110      	cbz	r0, 8019758 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x8>
 8019752:	2801      	cmp	r0, #1
 8019754:	d004      	beq.n	8019760 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x10>
 8019756:	4770      	bx	lr
 8019758:	4b03      	ldr	r3, [pc, #12]	@ (8019768 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x18>)
 801975a:	f8c3 1850 	str.w	r1, [r3, #2128]	@ 0x850
 801975e:	4770      	bx	lr
 8019760:	4b01      	ldr	r3, [pc, #4]	@ (8019768 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x18>)
 8019762:	f8c3 1854 	str.w	r1, [r3, #2132]	@ 0x854
 8019766:	4770      	bx	lr
 8019768:	40002000 	andmi	r2, r0, r0

0801976c <bkp_data_read(bkp_data_register_enum)>:
 801976c:	b118      	cbz	r0, 8019776 <bkp_data_read(bkp_data_register_enum)+0xa>
 801976e:	2801      	cmp	r0, #1
 8019770:	d006      	beq.n	8019780 <bkp_data_read(bkp_data_register_enum)+0x14>
 8019772:	2000      	movs	r0, #0
 8019774:	4770      	bx	lr
 8019776:	4b04      	ldr	r3, [pc, #16]	@ (8019788 <bkp_data_read(bkp_data_register_enum)+0x1c>)
 8019778:	f8d3 0850 	ldr.w	r0, [r3, #2128]	@ 0x850
 801977c:	b280      	uxth	r0, r0
 801977e:	4770      	bx	lr
 8019780:	4b01      	ldr	r3, [pc, #4]	@ (8019788 <bkp_data_read(bkp_data_register_enum)+0x1c>)
 8019782:	f8d3 0854 	ldr.w	r0, [r3, #2132]	@ 0x854
 8019786:	e7f9      	b.n	801977c <bkp_data_read(bkp_data_register_enum)+0x10>
 8019788:	40002000 	andmi	r2, r0, r0

0801978c <mac_address_get(unsigned char*)>:
 801978c:	4a07      	ldr	r2, [pc, #28]	@ (80197ac <mac_address_get(unsigned char*)+0x20>)
 801978e:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
 8019792:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	@ 0xa14
 8019796:	7042      	strb	r2, [r0, #1]
 8019798:	0e1a      	lsrs	r2, r3, #24
 801979a:	7082      	strb	r2, [r0, #2]
 801979c:	0c1a      	lsrs	r2, r3, #16
 801979e:	2102      	movs	r1, #2
 80197a0:	70c2      	strb	r2, [r0, #3]
 80197a2:	0a1a      	lsrs	r2, r3, #8
 80197a4:	7001      	strb	r1, [r0, #0]
 80197a6:	7102      	strb	r2, [r0, #4]
 80197a8:	7143      	strb	r3, [r0, #5]
 80197aa:	4770      	bx	lr
 80197ac:	1fff7000 	svcne	0x00ff7000

080197b0 <TIMER6_IRQHandler>:
 80197b0:	4b06      	ldr	r3, [pc, #24]	@ (80197cc <TIMER6_IRQHandler+0x1c>)
 80197b2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 80197b6:	07da      	lsls	r2, r3, #31
 80197b8:	bf41      	itttt	mi
 80197ba:	4905      	ldrmi	r1, [pc, #20]	@ (80197d0 <TIMER6_IRQHandler+0x20>)
 80197bc:	684a      	ldrmi	r2, [r1, #4]
 80197be:	3201      	addmi	r2, #1
 80197c0:	604a      	strmi	r2, [r1, #4]
 80197c2:	4a02      	ldr	r2, [pc, #8]	@ (80197cc <TIMER6_IRQHandler+0x1c>)
 80197c4:	43db      	mvns	r3, r3
 80197c6:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
 80197ca:	4770      	bx	lr
 80197cc:	40001000 	andmi	r1, r0, r0
 80197d0:	2001a620 	andcs	sl, r1, r0, lsr #12

080197d4 <timer6_config()>:
 80197d4:	b530      	push	{r4, r5, lr}
 80197d6:	4b19      	ldr	r3, [pc, #100]	@ (801983c <timer6_config()+0x68>)
 80197d8:	4c19      	ldr	r4, [pc, #100]	@ (8019840 <timer6_config()+0x6c>)
 80197da:	b085      	sub	sp, #20
 80197dc:	2500      	movs	r5, #0
 80197de:	f241 0005 	movw	r0, #4101	@ 0x1005
 80197e2:	605d      	str	r5, [r3, #4]
 80197e4:	f7ff fc9c 	bl	8019120 <rcu_periph_clock_enable>
 80197e8:	4620      	mov	r0, r4
 80197ea:	f7ff fd55 	bl	8019298 <timer_deinit>
 80197ee:	4668      	mov	r0, sp
 80197f0:	f7ff fdf8 	bl	80193e4 <timer_struct_para_init>
 80197f4:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80197f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80197fc:	4669      	mov	r1, sp
 80197fe:	4620      	mov	r0, r4
 8019800:	f8ad 2000 	strh.w	r2, [sp]
 8019804:	9302      	str	r3, [sp, #8]
 8019806:	f7ff fdf5 	bl	80193f4 <timer_init>
 801980a:	4629      	mov	r1, r5
 801980c:	4620      	mov	r0, r4
 801980e:	f7ff fe2a 	bl	8019466 <timer_counter_value_config>
 8019812:	4620      	mov	r0, r4
 8019814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8019818:	f7ff ff96 	bl	8019748 <timer_interrupt_flag_clear>
 801981c:	2101      	movs	r1, #1
 801981e:	4620      	mov	r0, r4
 8019820:	f7ff ff8e 	bl	8019740 <timer_interrupt_enable>
 8019824:	4b07      	ldr	r3, [pc, #28]	@ (8019844 <timer6_config()+0x70>)
 8019826:	22f0      	movs	r2, #240	@ 0xf0
 8019828:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
 801982c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8019830:	605a      	str	r2, [r3, #4]
 8019832:	4620      	mov	r0, r4
 8019834:	f7ff fe12 	bl	801945c <timer_enable>
 8019838:	b005      	add	sp, #20
 801983a:	bd30      	pop	{r4, r5, pc}
 801983c:	2001a620 	andcs	sl, r1, r0, lsr #12
 8019840:	40001400 	andmi	r1, r0, r0, lsl #8
 8019844:	e000e100 	and	lr, r0, r0, lsl #2

08019848 <udelay_init()>:
 8019848:	4a07      	ldr	r2, [pc, #28]	@ (8019868 <udelay_init()+0x20>)
 801984a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 801984e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019852:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
 8019856:	4b05      	ldr	r3, [pc, #20]	@ (801986c <udelay_init()+0x24>)
 8019858:	2200      	movs	r2, #0
 801985a:	605a      	str	r2, [r3, #4]
 801985c:	681a      	ldr	r2, [r3, #0]
 801985e:	f042 0201 	orr.w	r2, r2, #1
 8019862:	601a      	str	r2, [r3, #0]
 8019864:	4770      	bx	lr
 8019866:	bf00      	nop
 8019868:	e000ed00 	and	lr, r0, r0, lsl #26
 801986c:	e0001000 	and	r1, r0, r0

08019870 <udelay(unsigned long, unsigned long)>:
 8019870:	23f0      	movs	r3, #240	@ 0xf0
 8019872:	b530      	push	{r4, r5, lr}
 8019874:	4358      	muls	r0, r3
 8019876:	b909      	cbnz	r1, 801987c <udelay(unsigned long, unsigned long)+0xc>
 8019878:	4b08      	ldr	r3, [pc, #32]	@ (801989c <udelay(unsigned long, unsigned long)+0x2c>)
 801987a:	6859      	ldr	r1, [r3, #4]
 801987c:	4c07      	ldr	r4, [pc, #28]	@ (801989c <udelay(unsigned long, unsigned long)+0x2c>)
 801987e:	2300      	movs	r3, #0
 8019880:	6862      	ldr	r2, [r4, #4]
 8019882:	4291      	cmp	r1, r2
 8019884:	d0fc      	beq.n	8019880 <udelay(unsigned long, unsigned long)+0x10>
 8019886:	bf2a      	itet	cs
 8019888:	f102 35ff 	addcs.w	r5, r2, #4294967295	@ 0xffffffff
 801988c:	189b      	addcc	r3, r3, r2
 801988e:	195b      	addcs	r3, r3, r5
 8019890:	1a5b      	subs	r3, r3, r1
 8019892:	4283      	cmp	r3, r0
 8019894:	d300      	bcc.n	8019898 <udelay(unsigned long, unsigned long)+0x28>
 8019896:	bd30      	pop	{r4, r5, pc}
 8019898:	4611      	mov	r1, r2
 801989a:	e7f1      	b.n	8019880 <udelay(unsigned long, unsigned long)+0x10>
 801989c:	e0001000 	and	r1, r0, r0

080198a0 <systick_config>:
 80198a0:	4b0c      	ldr	r3, [pc, #48]	@ (80198d4 <systick_config+0x34>)
 80198a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80198ac:	3b01      	subs	r3, #1
 80198ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80198b2:	d20d      	bcs.n	80198d0 <systick_config+0x30>
 80198b4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80198b8:	21f0      	movs	r1, #240	@ 0xf0
 80198ba:	6153      	str	r3, [r2, #20]
 80198bc:	4b06      	ldr	r3, [pc, #24]	@ (80198d8 <systick_config+0x38>)
 80198be:	2000      	movs	r0, #0
 80198c0:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
 80198c4:	6190      	str	r0, [r2, #24]
 80198c6:	2007      	movs	r0, #7
 80198c8:	6110      	str	r0, [r2, #16]
 80198ca:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
 80198ce:	4770      	bx	lr
 80198d0:	e7fe      	b.n	80198d0 <systick_config+0x30>
 80198d2:	bf00      	nop
 80198d4:	20000004 	andcs	r0, r0, r4
 80198d8:	e000ed00 	and	lr, r0, r0, lsl #26

080198dc <SysTick_Handler>:
 80198dc:	4a02      	ldr	r2, [pc, #8]	@ (80198e8 <SysTick_Handler+0xc>)
 80198de:	6813      	ldr	r3, [r2, #0]
 80198e0:	3301      	adds	r3, #1
 80198e2:	6013      	str	r3, [r2, #0]
 80198e4:	4770      	bx	lr
 80198e6:	bf00      	nop
 80198e8:	2001a628 	andcs	sl, r1, r8, lsr #12

080198ec <gd32_adc_init()>:
 80198ec:	b510      	push	{r4, lr}
 80198ee:	f241 1008 	movw	r0, #4360	@ 0x1108
 80198f2:	4c24      	ldr	r4, [pc, #144]	@ (8019984 <gd32_adc_init()+0x98>)
 80198f4:	f7ff fc14 	bl	8019120 <rcu_periph_clock_enable>
 80198f8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80198fc:	f000 fa22 	bl	8019d44 <adc_clock_config>
 8019900:	4620      	mov	r0, r4
 8019902:	2203      	movs	r2, #3
 8019904:	2102      	movs	r1, #2
 8019906:	f000 fa9f 	bl	8019e48 <adc_channel_length_config>
 801990a:	4620      	mov	r0, r4
 801990c:	2306      	movs	r3, #6
 801990e:	2210      	movs	r2, #16
 8019910:	2100      	movs	r1, #0
 8019912:	f000 fab6 	bl	8019e82 <adc_inserted_channel_config>
 8019916:	4620      	mov	r0, r4
 8019918:	2306      	movs	r3, #6
 801991a:	2211      	movs	r2, #17
 801991c:	2101      	movs	r1, #1
 801991e:	f000 fab0 	bl	8019e82 <adc_inserted_channel_config>
 8019922:	2306      	movs	r3, #6
 8019924:	4620      	mov	r0, r4
 8019926:	2212      	movs	r2, #18
 8019928:	2102      	movs	r1, #2
 801992a:	f000 faaa 	bl	8019e82 <adc_inserted_channel_config>
 801992e:	2200      	movs	r2, #0
 8019930:	4620      	mov	r0, r4
 8019932:	2102      	movs	r1, #2
 8019934:	f000 fad5 	bl	8019ee2 <adc_external_trigger_config>
 8019938:	4620      	mov	r0, r4
 801993a:	2100      	movs	r1, #0
 801993c:	f000 fa3a 	bl	8019db4 <adc_data_alignment_config>
 8019940:	2201      	movs	r2, #1
 8019942:	4620      	mov	r0, r4
 8019944:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019948:	f000 fa0c 	bl	8019d64 <adc_special_function_config>
 801994c:	2101      	movs	r1, #1
 801994e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8019952:	f000 fa51 	bl	8019df8 <adc_channel_16_to_18>
 8019956:	2101      	movs	r1, #1
 8019958:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801995c:	f000 fa4c 	bl	8019df8 <adc_channel_16_to_18>
 8019960:	4620      	mov	r0, r4
 8019962:	f000 fa30 	bl	8019dc6 <adc_enable>
 8019966:	2100      	movs	r1, #0
 8019968:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801996c:	f7ff ff80 	bl	8019870 <udelay(unsigned long, unsigned long)>
 8019970:	4620      	mov	r0, r4
 8019972:	f000 fa30 	bl	8019dd6 <adc_calibration_enable>
 8019976:	4620      	mov	r0, r4
 8019978:	2102      	movs	r1, #2
 801997a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801997e:	f000 bac6 	b.w	8019f0e <adc_software_trigger_enable>
 8019982:	bf00      	nop
 8019984:	40012000 	andmi	r2, r1, r0

08019988 <dma::memcpy32_init()>:
 8019988:	b510      	push	{r4, lr}
 801998a:	4c14      	ldr	r4, [pc, #80]	@ (80199dc <dma::memcpy32_init()+0x54>)
 801998c:	b08e      	sub	sp, #56	@ 0x38
 801998e:	f640 4016 	movw	r0, #3094	@ 0xc16
 8019992:	f7ff fbc5 	bl	8019120 <rcu_periph_clock_enable>
 8019996:	4620      	mov	r0, r4
 8019998:	2100      	movs	r1, #0
 801999a:	f7fe ffa5 	bl	80188e8 <dma_deinit>
 801999e:	2100      	movs	r1, #0
 80199a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80199a4:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80199a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80199ac:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80199b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80199b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80199b8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80199bc:	2003      	movs	r0, #3
 80199be:	2301      	movs	r3, #1
 80199c0:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
 80199c4:	2380      	movs	r3, #128	@ 0x80
 80199c6:	e9cd 310b 	strd	r3, r1, [sp, #44]	@ 0x2c
 80199ca:	aa01      	add	r2, sp, #4
 80199cc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80199d0:	4620      	mov	r0, r4
 80199d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80199d4:	f7ff f800 	bl	80189d8 <dma_multi_data_mode_init>
 80199d8:	b00e      	add	sp, #56	@ 0x38
 80199da:	bd10      	pop	{r4, pc}
 80199dc:	40026400 	andmi	r6, r2, r0, lsl #8

080199e0 <send_stop() [clone .isra.0]>:
 80199e0:	b508      	push	{r3, lr}
 80199e2:	4806      	ldr	r0, [pc, #24]	@ (80199fc <send_stop() [clone .isra.0]+0x1c>)
 80199e4:	f000 fb22 	bl	801a02c <i2c_stop_on_bus>
 80199e8:	4905      	ldr	r1, [pc, #20]	@ (8019a00 <send_stop() [clone .isra.0]+0x20>)
 80199ea:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80199ee:	f8d1 2400 	ldr.w	r2, [r1, #1024]	@ 0x400
 80199f2:	0592      	lsls	r2, r2, #22
 80199f4:	d501      	bpl.n	80199fa <send_stop() [clone .isra.0]+0x1a>
 80199f6:	3b01      	subs	r3, #1
 80199f8:	d1f9      	bne.n	80199ee <send_stop() [clone .isra.0]+0xe>
 80199fa:	bd08      	pop	{r3, pc}
 80199fc:	40005400 	andmi	r5, r0, r0, lsl #8
 8019a00:	40005000 	andmi	r5, r0, r0

08019a04 <gd32_i2c_begin>:
 8019a04:	b510      	push	{r4, lr}
 8019a06:	f241 0015 	movw	r0, #4117	@ 0x1015
 8019a0a:	4c22      	ldr	r4, [pc, #136]	@ (8019a94 <gd32_i2c_begin+0x90>)
 8019a0c:	f7ff fb88 	bl	8019120 <rcu_periph_clock_enable>
 8019a10:	f640 4001 	movw	r0, #3073	@ 0xc01
 8019a14:	f7ff fb84 	bl	8019120 <rcu_periph_clock_enable>
 8019a18:	f640 4001 	movw	r0, #3073	@ 0xc01
 8019a1c:	f7ff fb80 	bl	8019120 <rcu_periph_clock_enable>
 8019a20:	4620      	mov	r0, r4
 8019a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019a26:	2104      	movs	r1, #4
 8019a28:	f7ff fb36 	bl	8019098 <gpio_af_set>
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019a32:	2201      	movs	r2, #1
 8019a34:	2102      	movs	r1, #2
 8019a36:	f7ff faf1 	bl	801901c <gpio_mode_set>
 8019a3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019a3e:	4620      	mov	r0, r4
 8019a40:	2202      	movs	r2, #2
 8019a42:	2101      	movs	r1, #1
 8019a44:	f7ff fb0c 	bl	8019060 <gpio_output_options_set>
 8019a48:	4620      	mov	r0, r4
 8019a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a4e:	2104      	movs	r1, #4
 8019a50:	f7ff fb22 	bl	8019098 <gpio_af_set>
 8019a54:	4620      	mov	r0, r4
 8019a56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019a5a:	2201      	movs	r2, #1
 8019a5c:	2102      	movs	r1, #2
 8019a5e:	f7ff fadd 	bl	801901c <gpio_mode_set>
 8019a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019a66:	4620      	mov	r0, r4
 8019a68:	2202      	movs	r2, #2
 8019a6a:	f5a4 34d8 	sub.w	r4, r4, #110592	@ 0x1b000
 8019a6e:	2101      	movs	r1, #1
 8019a70:	f7ff faf6 	bl	8019060 <gpio_output_options_set>
 8019a74:	4908      	ldr	r1, [pc, #32]	@ (8019a98 <gd32_i2c_begin+0x94>)
 8019a76:	4620      	mov	r0, r4
 8019a78:	2200      	movs	r2, #0
 8019a7a:	f000 fa57 	bl	8019f2c <i2c_clock_config>
 8019a7e:	4620      	mov	r0, r4
 8019a80:	f000 faca 	bl	801a018 <i2c_enable>
 8019a84:	4620      	mov	r0, r4
 8019a86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8019a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a8e:	f000 baaf 	b.w	8019ff0 <i2c_ack_config>
 8019a92:	bf00      	nop
 8019a94:	40020400 	andmi	r0, r2, r0, lsl #8
 8019a98:	00061a80 	andeq	r1, r6, r0, lsl #21

08019a9c <gd32_i2c_set_baudrate>:
 8019a9c:	4601      	mov	r1, r0
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	4801      	ldr	r0, [pc, #4]	@ (8019aa8 <gd32_i2c_set_baudrate+0xc>)
 8019aa2:	f000 ba43 	b.w	8019f2c <i2c_clock_config>
 8019aa6:	bf00      	nop
 8019aa8:	40005400 	andmi	r5, r0, r0, lsl #8

08019aac <gd32_i2c_set_address>:
 8019aac:	4b01      	ldr	r3, [pc, #4]	@ (8019ab4 <gd32_i2c_set_address+0x8>)
 8019aae:	0040      	lsls	r0, r0, #1
 8019ab0:	7018      	strb	r0, [r3, #0]
 8019ab2:	4770      	bx	lr
 8019ab4:	2001a62c 	andcs	sl, r1, ip, lsr #12

08019ab8 <gd32_i2c_write>:
 8019ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aba:	4f30      	ldr	r7, [pc, #192]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019abc:	4604      	mov	r4, r0
 8019abe:	460d      	mov	r5, r1
 8019ac0:	f640 76ff 	movw	r6, #4095	@ 0xfff
 8019ac4:	f240 6101 	movw	r1, #1537	@ 0x601
 8019ac8:	4638      	mov	r0, r7
 8019aca:	f000 fab9 	bl	801a040 <i2c_flag_get>
 8019ace:	bb90      	cbnz	r0, 8019b36 <gd32_i2c_write+0x7e>
 8019ad0:	482a      	ldr	r0, [pc, #168]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019ad2:	4f2a      	ldr	r7, [pc, #168]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019ad4:	f000 faa5 	bl	801a022 <i2c_start_on_bus>
 8019ad8:	f640 76ff 	movw	r6, #4095	@ 0xfff
 8019adc:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8019ae0:	4638      	mov	r0, r7
 8019ae2:	f000 faad 	bl	801a040 <i2c_flag_get>
 8019ae6:	b370      	cbz	r0, 8019b46 <gd32_i2c_write+0x8e>
 8019ae8:	4b25      	ldr	r3, [pc, #148]	@ (8019b80 <gd32_i2c_write+0xc8>)
 8019aea:	4824      	ldr	r0, [pc, #144]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019aec:	7819      	ldrb	r1, [r3, #0]
 8019aee:	4f23      	ldr	r7, [pc, #140]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019af0:	f06f 0201 	mvn.w	r2, #1
 8019af4:	f000 fa88 	bl	801a008 <i2c_master_addressing>
 8019af8:	f640 76ff 	movw	r6, #4095	@ 0xfff
 8019afc:	f240 5101 	movw	r1, #1281	@ 0x501
 8019b00:	4638      	mov	r0, r7
 8019b02:	f000 fa9d 	bl	801a040 <i2c_flag_get>
 8019b06:	b308      	cbz	r0, 8019b4c <gd32_i2c_write+0x94>
 8019b08:	481c      	ldr	r0, [pc, #112]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019b0a:	4f1c      	ldr	r7, [pc, #112]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019b0c:	f240 5101 	movw	r1, #1281	@ 0x501
 8019b10:	f000 fa9e 	bl	801a050 <i2c_flag_clear>
 8019b14:	f640 76ff 	movw	r6, #4095	@ 0xfff
 8019b18:	f240 5107 	movw	r1, #1287	@ 0x507
 8019b1c:	4638      	mov	r0, r7
 8019b1e:	f000 fa8f 	bl	801a040 <i2c_flag_get>
 8019b22:	2801      	cmp	r0, #1
 8019b24:	d115      	bne.n	8019b52 <gd32_i2c_write+0x9a>
 8019b26:	4f15      	ldr	r7, [pc, #84]	@ (8019b7c <gd32_i2c_write+0xc4>)
 8019b28:	4425      	add	r5, r4
 8019b2a:	42ac      	cmp	r4, r5
 8019b2c:	d114      	bne.n	8019b58 <gd32_i2c_write+0xa0>
 8019b2e:	f7ff ff57 	bl	80199e0 <send_stop() [clone .isra.0]>
 8019b32:	2000      	movs	r0, #0
 8019b34:	e005      	b.n	8019b42 <gd32_i2c_write+0x8a>
 8019b36:	3e01      	subs	r6, #1
 8019b38:	d1c4      	bne.n	8019ac4 <gd32_i2c_write+0xc>
 8019b3a:	f7ff ff51 	bl	80199e0 <send_stop() [clone .isra.0]>
 8019b3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b42:	4240      	negs	r0, r0
 8019b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b46:	3e01      	subs	r6, #1
 8019b48:	d1c8      	bne.n	8019adc <gd32_i2c_write+0x24>
 8019b4a:	e7f6      	b.n	8019b3a <gd32_i2c_write+0x82>
 8019b4c:	3e01      	subs	r6, #1
 8019b4e:	d1d5      	bne.n	8019afc <gd32_i2c_write+0x44>
 8019b50:	e7f3      	b.n	8019b3a <gd32_i2c_write+0x82>
 8019b52:	3e01      	subs	r6, #1
 8019b54:	d1e0      	bne.n	8019b18 <gd32_i2c_write+0x60>
 8019b56:	e7f0      	b.n	8019b3a <gd32_i2c_write+0x82>
 8019b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b5c:	4638      	mov	r0, r7
 8019b5e:	f000 fa6a 	bl	801a036 <i2c_data_transmit>
 8019b62:	f640 76ff 	movw	r6, #4095	@ 0xfff
 8019b66:	f240 5102 	movw	r1, #1282	@ 0x502
 8019b6a:	4638      	mov	r0, r7
 8019b6c:	f000 fa68 	bl	801a040 <i2c_flag_get>
 8019b70:	2800      	cmp	r0, #0
 8019b72:	d1da      	bne.n	8019b2a <gd32_i2c_write+0x72>
 8019b74:	3e01      	subs	r6, #1
 8019b76:	d1f6      	bne.n	8019b66 <gd32_i2c_write+0xae>
 8019b78:	e7df      	b.n	8019b3a <gd32_i2c_write+0x82>
 8019b7a:	bf00      	nop
 8019b7c:	40005400 	andmi	r5, r0, r0, lsl #8
 8019b80:	2001a62c 	andcs	sl, r1, ip, lsr #12

08019b84 <gd32_i2c_read>:
 8019b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b88:	4f4e      	ldr	r7, [pc, #312]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019b8a:	4680      	mov	r8, r0
 8019b8c:	460c      	mov	r4, r1
 8019b8e:	f640 75ff 	movw	r5, #4095	@ 0xfff
 8019b92:	f240 6101 	movw	r1, #1537	@ 0x601
 8019b96:	4638      	mov	r0, r7
 8019b98:	f000 fa52 	bl	801a040 <i2c_flag_get>
 8019b9c:	4606      	mov	r6, r0
 8019b9e:	bb10      	cbnz	r0, 8019be6 <gd32_i2c_read+0x62>
 8019ba0:	2c02      	cmp	r4, #2
 8019ba2:	d104      	bne.n	8019bae <gd32_i2c_read+0x2a>
 8019ba4:	4847      	ldr	r0, [pc, #284]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019ba6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8019baa:	f000 fa27 	bl	8019ffc <i2c_ackpos_config>
 8019bae:	4845      	ldr	r0, [pc, #276]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019bb0:	4f44      	ldr	r7, [pc, #272]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019bb2:	f000 fa36 	bl	801a022 <i2c_start_on_bus>
 8019bb6:	f640 75ff 	movw	r5, #4095	@ 0xfff
 8019bba:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8019bbe:	4638      	mov	r0, r7
 8019bc0:	f000 fa3e 	bl	801a040 <i2c_flag_get>
 8019bc4:	b1b8      	cbz	r0, 8019bf6 <gd32_i2c_read+0x72>
 8019bc6:	4b40      	ldr	r3, [pc, #256]	@ (8019cc8 <gd32_i2c_read+0x144>)
 8019bc8:	483e      	ldr	r0, [pc, #248]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019bca:	7819      	ldrb	r1, [r3, #0]
 8019bcc:	2201      	movs	r2, #1
 8019bce:	f000 fa1b 	bl	801a008 <i2c_master_addressing>
 8019bd2:	2c02      	cmp	r4, #2
 8019bd4:	d803      	bhi.n	8019bde <gd32_i2c_read+0x5a>
 8019bd6:	483b      	ldr	r0, [pc, #236]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019bd8:	2100      	movs	r1, #0
 8019bda:	f000 fa09 	bl	8019ff0 <i2c_ack_config>
 8019bde:	4f39      	ldr	r7, [pc, #228]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019be0:	f640 75ff 	movw	r5, #4095	@ 0xfff
 8019be4:	e00c      	b.n	8019c00 <gd32_i2c_read+0x7c>
 8019be6:	3d01      	subs	r5, #1
 8019be8:	d1d3      	bne.n	8019b92 <gd32_i2c_read+0xe>
 8019bea:	f7ff fef9 	bl	80199e0 <send_stop() [clone .isra.0]>
 8019bee:	2604      	movs	r6, #4
 8019bf0:	4630      	mov	r0, r6
 8019bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bf6:	3d01      	subs	r5, #1
 8019bf8:	d1df      	bne.n	8019bba <gd32_i2c_read+0x36>
 8019bfa:	e7f6      	b.n	8019bea <gd32_i2c_read+0x66>
 8019bfc:	3d01      	subs	r5, #1
 8019bfe:	d0f4      	beq.n	8019bea <gd32_i2c_read+0x66>
 8019c00:	f240 5101 	movw	r1, #1281	@ 0x501
 8019c04:	4638      	mov	r0, r7
 8019c06:	f000 fa1b 	bl	801a040 <i2c_flag_get>
 8019c0a:	2800      	cmp	r0, #0
 8019c0c:	d0f6      	beq.n	8019bfc <gd32_i2c_read+0x78>
 8019c0e:	482d      	ldr	r0, [pc, #180]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019c10:	f240 5101 	movw	r1, #1281	@ 0x501
 8019c14:	f000 fa1c 	bl	801a050 <i2c_flag_clear>
 8019c18:	2c01      	cmp	r4, #1
 8019c1a:	d102      	bne.n	8019c22 <gd32_i2c_read+0x9e>
 8019c1c:	4829      	ldr	r0, [pc, #164]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019c1e:	f000 fa05 	bl	801a02c <i2c_stop_on_bus>
 8019c22:	4d28      	ldr	r5, [pc, #160]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019c24:	f640 77ff 	movw	r7, #4095	@ 0xfff
 8019c28:	e022      	b.n	8019c70 <gd32_i2c_read+0xec>
 8019c2a:	2c03      	cmp	r4, #3
 8019c2c:	d134      	bne.n	8019c98 <gd32_i2c_read+0x114>
 8019c2e:	f640 79ff 	movw	r9, #4095	@ 0xfff
 8019c32:	e002      	b.n	8019c3a <gd32_i2c_read+0xb6>
 8019c34:	f1b9 0901 	subs.w	r9, r9, #1
 8019c38:	d0d7      	beq.n	8019bea <gd32_i2c_read+0x66>
 8019c3a:	f240 5102 	movw	r1, #1282	@ 0x502
 8019c3e:	4628      	mov	r0, r5
 8019c40:	f000 f9fe 	bl	801a040 <i2c_flag_get>
 8019c44:	2800      	cmp	r0, #0
 8019c46:	d0f5      	beq.n	8019c34 <gd32_i2c_read+0xb0>
 8019c48:	2100      	movs	r1, #0
 8019c4a:	4628      	mov	r0, r5
 8019c4c:	f000 f9d0 	bl	8019ff0 <i2c_ack_config>
 8019c50:	f240 5106 	movw	r1, #1286	@ 0x506
 8019c54:	4628      	mov	r0, r5
 8019c56:	f000 f9f3 	bl	801a040 <i2c_flag_get>
 8019c5a:	b138      	cbz	r0, 8019c6c <gd32_i2c_read+0xe8>
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	f000 f9ec 	bl	801a03a <i2c_data_receive>
 8019c62:	f808 0b01 	strb.w	r0, [r8], #1
 8019c66:	3c01      	subs	r4, #1
 8019c68:	f640 77ff 	movw	r7, #4095	@ 0xfff
 8019c6c:	3f01      	subs	r7, #1
 8019c6e:	d0bc      	beq.n	8019bea <gd32_i2c_read+0x66>
 8019c70:	2c00      	cmp	r4, #0
 8019c72:	d1da      	bne.n	8019c2a <gd32_i2c_read+0xa6>
 8019c74:	4a15      	ldr	r2, [pc, #84]	@ (8019ccc <gd32_i2c_read+0x148>)
 8019c76:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8019c7a:	f8d2 4400 	ldr.w	r4, [r2, #1024]	@ 0x400
 8019c7e:	f414 7400 	ands.w	r4, r4, #512	@ 0x200
 8019c82:	d11c      	bne.n	8019cbe <gd32_i2c_read+0x13a>
 8019c84:	480f      	ldr	r0, [pc, #60]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019c86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8019c8a:	f000 f9b1 	bl	8019ff0 <i2c_ack_config>
 8019c8e:	480d      	ldr	r0, [pc, #52]	@ (8019cc4 <gd32_i2c_read+0x140>)
 8019c90:	4621      	mov	r1, r4
 8019c92:	f000 f9b3 	bl	8019ffc <i2c_ackpos_config>
 8019c96:	e7ab      	b.n	8019bf0 <gd32_i2c_read+0x6c>
 8019c98:	2c02      	cmp	r4, #2
 8019c9a:	d1d9      	bne.n	8019c50 <gd32_i2c_read+0xcc>
 8019c9c:	f640 79ff 	movw	r9, #4095	@ 0xfff
 8019ca0:	e002      	b.n	8019ca8 <gd32_i2c_read+0x124>
 8019ca2:	f1b9 0901 	subs.w	r9, r9, #1
 8019ca6:	d0a0      	beq.n	8019bea <gd32_i2c_read+0x66>
 8019ca8:	f240 5102 	movw	r1, #1282	@ 0x502
 8019cac:	4628      	mov	r0, r5
 8019cae:	f000 f9c7 	bl	801a040 <i2c_flag_get>
 8019cb2:	2800      	cmp	r0, #0
 8019cb4:	d0f5      	beq.n	8019ca2 <gd32_i2c_read+0x11e>
 8019cb6:	4628      	mov	r0, r5
 8019cb8:	f000 f9b8 	bl	801a02c <i2c_stop_on_bus>
 8019cbc:	e7c8      	b.n	8019c50 <gd32_i2c_read+0xcc>
 8019cbe:	3b01      	subs	r3, #1
 8019cc0:	d1db      	bne.n	8019c7a <gd32_i2c_read+0xf6>
 8019cc2:	e794      	b.n	8019bee <gd32_i2c_read+0x6a>
 8019cc4:	40005400 	andmi	r5, r0, r0, lsl #8
 8019cc8:	2001a62c 	andcs	sl, r1, ip, lsr #12
 8019ccc:	40005000 	andmi	r5, r0, r0

08019cd0 <uart0_init>:
 8019cd0:	b507      	push	{r0, r1, r2, lr}
 8019cd2:	2301      	movs	r3, #1
 8019cd4:	9300      	str	r3, [sp, #0]
 8019cd6:	4805      	ldr	r0, [pc, #20]	@ (8019cec <uart0_init+0x1c>)
 8019cd8:	2300      	movs	r3, #0
 8019cda:	2208      	movs	r2, #8
 8019cdc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8019ce0:	f000 faae 	bl	801a240 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
 8019ce4:	b003      	add	sp, #12
 8019ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8019cea:	bf00      	nop
 8019cec:	40011000 	andmi	r1, r1, r0

08019cf0 <uart0_putc>:
 8019cf0:	280a      	cmp	r0, #10
 8019cf2:	b570      	push	{r4, r5, r6, lr}
 8019cf4:	4d0a      	ldr	r5, [pc, #40]	@ (8019d20 <uart0_putc+0x30>)
 8019cf6:	4604      	mov	r4, r0
 8019cf8:	d107      	bne.n	8019d0a <uart0_putc+0x1a>
 8019cfa:	2107      	movs	r1, #7
 8019cfc:	4628      	mov	r0, r5
 8019cfe:	f000 fa97 	bl	801a230 <usart_flag_get>
 8019d02:	2800      	cmp	r0, #0
 8019d04:	d0f9      	beq.n	8019cfa <uart0_putc+0xa>
 8019d06:	230d      	movs	r3, #13
 8019d08:	606b      	str	r3, [r5, #4]
 8019d0a:	4e05      	ldr	r6, [pc, #20]	@ (8019d20 <uart0_putc+0x30>)
 8019d0c:	2107      	movs	r1, #7
 8019d0e:	4630      	mov	r0, r6
 8019d10:	f000 fa8e 	bl	801a230 <usart_flag_get>
 8019d14:	2800      	cmp	r0, #0
 8019d16:	d0f9      	beq.n	8019d0c <uart0_putc+0x1c>
 8019d18:	b2e4      	uxtb	r4, r4
 8019d1a:	606c      	str	r4, [r5, #4]
 8019d1c:	bd70      	pop	{r4, r5, r6, pc}
 8019d1e:	bf00      	nop
 8019d20:	40011000 	andmi	r1, r1, r0

08019d24 <uart0_puts>:
 8019d24:	b510      	push	{r4, lr}
 8019d26:	1e44      	subs	r4, r0, #1
 8019d28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019d2c:	b903      	cbnz	r3, 8019d30 <uart0_puts+0xc>
 8019d2e:	bd10      	pop	{r4, pc}
 8019d30:	2b0a      	cmp	r3, #10
 8019d32:	d102      	bne.n	8019d3a <uart0_puts+0x16>
 8019d34:	200d      	movs	r0, #13
 8019d36:	f7ff ffdb 	bl	8019cf0 <uart0_putc>
 8019d3a:	7820      	ldrb	r0, [r4, #0]
 8019d3c:	f7ff ffd8 	bl	8019cf0 <uart0_putc>
 8019d40:	e7f2      	b.n	8019d28 <uart0_puts+0x4>
	...

08019d44 <adc_clock_config>:
 8019d44:	4b06      	ldr	r3, [pc, #24]	@ (8019d60 <adc_clock_config+0x1c>)
 8019d46:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 8019d4a:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8019d4e:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
 8019d52:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 8019d56:	4302      	orrs	r2, r0
 8019d58:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
 8019d5c:	4770      	bx	lr
 8019d5e:	bf00      	nop
 8019d60:	40012000 	andmi	r2, r1, r0

08019d64 <adc_special_function_config>:
 8019d64:	b510      	push	{r4, lr}
 8019d66:	f401 7380 	and.w	r3, r1, #256	@ 0x100
 8019d6a:	f401 6480 	and.w	r4, r1, #1024	@ 0x400
 8019d6e:	f001 0102 	and.w	r1, r1, #2
 8019d72:	b17a      	cbz	r2, 8019d94 <adc_special_function_config+0x30>
 8019d74:	b11b      	cbz	r3, 8019d7e <adc_special_function_config+0x1a>
 8019d76:	6843      	ldr	r3, [r0, #4]
 8019d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019d7c:	6043      	str	r3, [r0, #4]
 8019d7e:	b11c      	cbz	r4, 8019d88 <adc_special_function_config+0x24>
 8019d80:	6843      	ldr	r3, [r0, #4]
 8019d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019d86:	6043      	str	r3, [r0, #4]
 8019d88:	b119      	cbz	r1, 8019d92 <adc_special_function_config+0x2e>
 8019d8a:	6883      	ldr	r3, [r0, #8]
 8019d8c:	f043 0302 	orr.w	r3, r3, #2
 8019d90:	6083      	str	r3, [r0, #8]
 8019d92:	bd10      	pop	{r4, pc}
 8019d94:	b11b      	cbz	r3, 8019d9e <adc_special_function_config+0x3a>
 8019d96:	6843      	ldr	r3, [r0, #4]
 8019d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019d9c:	6043      	str	r3, [r0, #4]
 8019d9e:	b11c      	cbz	r4, 8019da8 <adc_special_function_config+0x44>
 8019da0:	6843      	ldr	r3, [r0, #4]
 8019da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8019da6:	6043      	str	r3, [r0, #4]
 8019da8:	2900      	cmp	r1, #0
 8019daa:	d0f2      	beq.n	8019d92 <adc_special_function_config+0x2e>
 8019dac:	6883      	ldr	r3, [r0, #8]
 8019dae:	f023 0302 	bic.w	r3, r3, #2
 8019db2:	e7ed      	b.n	8019d90 <adc_special_function_config+0x2c>

08019db4 <adc_data_alignment_config>:
 8019db4:	6883      	ldr	r3, [r0, #8]
 8019db6:	b119      	cbz	r1, 8019dc0 <adc_data_alignment_config+0xc>
 8019db8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8019dbc:	6083      	str	r3, [r0, #8]
 8019dbe:	4770      	bx	lr
 8019dc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8019dc4:	e7fa      	b.n	8019dbc <adc_data_alignment_config+0x8>

08019dc6 <adc_enable>:
 8019dc6:	6883      	ldr	r3, [r0, #8]
 8019dc8:	07db      	lsls	r3, r3, #31
 8019dca:	bf5e      	ittt	pl
 8019dcc:	6883      	ldrpl	r3, [r0, #8]
 8019dce:	f043 0301 	orrpl.w	r3, r3, #1
 8019dd2:	6083      	strpl	r3, [r0, #8]
 8019dd4:	4770      	bx	lr

08019dd6 <adc_calibration_enable>:
 8019dd6:	6883      	ldr	r3, [r0, #8]
 8019dd8:	f043 0308 	orr.w	r3, r3, #8
 8019ddc:	f100 0208 	add.w	r2, r0, #8
 8019de0:	6083      	str	r3, [r0, #8]
 8019de2:	6813      	ldr	r3, [r2, #0]
 8019de4:	0719      	lsls	r1, r3, #28
 8019de6:	d4fc      	bmi.n	8019de2 <adc_calibration_enable+0xc>
 8019de8:	6883      	ldr	r3, [r0, #8]
 8019dea:	f043 0304 	orr.w	r3, r3, #4
 8019dee:	6083      	str	r3, [r0, #8]
 8019df0:	6813      	ldr	r3, [r2, #0]
 8019df2:	075b      	lsls	r3, r3, #29
 8019df4:	d4fc      	bmi.n	8019df0 <adc_calibration_enable+0x1a>
 8019df6:	4770      	bx	lr

08019df8 <adc_channel_16_to_18>:
 8019df8:	f400 0380 	and.w	r3, r0, #4194304	@ 0x400000
 8019dfc:	f400 0000 	and.w	r0, r0, #8388608	@ 0x800000
 8019e00:	b181      	cbz	r1, 8019e24 <adc_channel_16_to_18+0x2c>
 8019e02:	b133      	cbz	r3, 8019e12 <adc_channel_16_to_18+0x1a>
 8019e04:	4a0f      	ldr	r2, [pc, #60]	@ (8019e44 <adc_channel_16_to_18+0x4c>)
 8019e06:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019e0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8019e0e:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8019e12:	b130      	cbz	r0, 8019e22 <adc_channel_16_to_18+0x2a>
 8019e14:	4a0b      	ldr	r2, [pc, #44]	@ (8019e44 <adc_channel_16_to_18+0x4c>)
 8019e16:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019e1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019e1e:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8019e22:	4770      	bx	lr
 8019e24:	b133      	cbz	r3, 8019e34 <adc_channel_16_to_18+0x3c>
 8019e26:	4a07      	ldr	r2, [pc, #28]	@ (8019e44 <adc_channel_16_to_18+0x4c>)
 8019e28:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019e2c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8019e30:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 8019e34:	2800      	cmp	r0, #0
 8019e36:	d0f4      	beq.n	8019e22 <adc_channel_16_to_18+0x2a>
 8019e38:	4a02      	ldr	r2, [pc, #8]	@ (8019e44 <adc_channel_16_to_18+0x4c>)
 8019e3a:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8019e3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019e42:	e7ec      	b.n	8019e1e <adc_channel_16_to_18+0x26>
 8019e44:	40012000 	andmi	r2, r1, r0

08019e48 <adc_channel_length_config>:
 8019e48:	2901      	cmp	r1, #1
 8019e4a:	d002      	beq.n	8019e52 <adc_channel_length_config+0xa>
 8019e4c:	2902      	cmp	r1, #2
 8019e4e:	d00c      	beq.n	8019e6a <adc_channel_length_config+0x22>
 8019e50:	4770      	bx	lr
 8019e52:	3a01      	subs	r2, #1
 8019e54:	2a0f      	cmp	r2, #15
 8019e56:	d813      	bhi.n	8019e80 <adc_channel_length_config+0x38>
 8019e58:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019e5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8019e5e:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8019e60:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019e62:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019e66:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8019e68:	4770      	bx	lr
 8019e6a:	3a01      	subs	r2, #1
 8019e6c:	2a03      	cmp	r2, #3
 8019e6e:	d807      	bhi.n	8019e80 <adc_channel_length_config+0x38>
 8019e70:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019e72:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8019e76:	6383      	str	r3, [r0, #56]	@ 0x38
 8019e78:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019e7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019e7e:	6383      	str	r3, [r0, #56]	@ 0x38
 8019e80:	4770      	bx	lr

08019e82 <adc_inserted_channel_config>:
 8019e82:	2903      	cmp	r1, #3
 8019e84:	b530      	push	{r4, r5, lr}
 8019e86:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8019e88:	d80f      	bhi.n	8019eaa <adc_inserted_channel_config+0x28>
 8019e8a:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8019e8e:	1a61      	subs	r1, r4, r1
 8019e90:	f06f 0404 	mvn.w	r4, #4
 8019e94:	4361      	muls	r1, r4
 8019e96:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8019e98:	310f      	adds	r1, #15
 8019e9a:	241f      	movs	r4, #31
 8019e9c:	408c      	lsls	r4, r1
 8019e9e:	ea25 0404 	bic.w	r4, r5, r4
 8019ea2:	fa02 f101 	lsl.w	r1, r2, r1
 8019ea6:	4321      	orrs	r1, r4
 8019ea8:	6381      	str	r1, [r0, #56]	@ 0x38
 8019eaa:	2a09      	cmp	r2, #9
 8019eac:	d80b      	bhi.n	8019ec6 <adc_inserted_channel_config+0x44>
 8019eae:	6901      	ldr	r1, [r0, #16]
 8019eb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019eb4:	2407      	movs	r4, #7
 8019eb6:	4094      	lsls	r4, r2
 8019eb8:	ea21 0104 	bic.w	r1, r1, r4
 8019ebc:	fa03 f202 	lsl.w	r2, r3, r2
 8019ec0:	430a      	orrs	r2, r1
 8019ec2:	6102      	str	r2, [r0, #16]
 8019ec4:	bd30      	pop	{r4, r5, pc}
 8019ec6:	2a12      	cmp	r2, #18
 8019ec8:	d8fc      	bhi.n	8019ec4 <adc_inserted_channel_config+0x42>
 8019eca:	3a0a      	subs	r2, #10
 8019ecc:	68c1      	ldr	r1, [r0, #12]
 8019ece:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019ed2:	2407      	movs	r4, #7
 8019ed4:	4094      	lsls	r4, r2
 8019ed6:	ea21 0104 	bic.w	r1, r1, r4
 8019eda:	4093      	lsls	r3, r2
 8019edc:	430b      	orrs	r3, r1
 8019ede:	60c3      	str	r3, [r0, #12]
 8019ee0:	e7f0      	b.n	8019ec4 <adc_inserted_channel_config+0x42>

08019ee2 <adc_external_trigger_config>:
 8019ee2:	2901      	cmp	r1, #1
 8019ee4:	d002      	beq.n	8019eec <adc_external_trigger_config+0xa>
 8019ee6:	2902      	cmp	r1, #2
 8019ee8:	d009      	beq.n	8019efe <adc_external_trigger_config+0x1c>
 8019eea:	4770      	bx	lr
 8019eec:	6883      	ldr	r3, [r0, #8]
 8019eee:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8019ef2:	6083      	str	r3, [r0, #8]
 8019ef4:	6883      	ldr	r3, [r0, #8]
 8019ef6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8019efa:	6083      	str	r3, [r0, #8]
 8019efc:	4770      	bx	lr
 8019efe:	6883      	ldr	r3, [r0, #8]
 8019f00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8019f04:	6083      	str	r3, [r0, #8]
 8019f06:	6883      	ldr	r3, [r0, #8]
 8019f08:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019f0c:	e7f5      	b.n	8019efa <adc_external_trigger_config+0x18>

08019f0e <adc_software_trigger_enable>:
 8019f0e:	2901      	cmp	r1, #1
 8019f10:	d002      	beq.n	8019f18 <adc_software_trigger_enable+0xa>
 8019f12:	2902      	cmp	r1, #2
 8019f14:	d005      	beq.n	8019f22 <adc_software_trigger_enable+0x14>
 8019f16:	4770      	bx	lr
 8019f18:	6883      	ldr	r3, [r0, #8]
 8019f1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019f1e:	6083      	str	r3, [r0, #8]
 8019f20:	4770      	bx	lr
 8019f22:	6883      	ldr	r3, [r0, #8]
 8019f24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8019f28:	e7f9      	b.n	8019f1e <adc_software_trigger_enable+0x10>
	...

08019f2c <i2c_clock_config>:
 8019f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2e:	4605      	mov	r5, r0
 8019f30:	2002      	movs	r0, #2
 8019f32:	460c      	mov	r4, r1
 8019f34:	4617      	mov	r7, r2
 8019f36:	f7ff f92f 	bl	8019198 <rcu_clock_freq_get>
 8019f3a:	4a29      	ldr	r2, [pc, #164]	@ (8019fe0 <i2c_clock_config+0xb4>)
 8019f3c:	686e      	ldr	r6, [r5, #4]
 8019f3e:	4603      	mov	r3, r0
 8019f40:	4828      	ldr	r0, [pc, #160]	@ (8019fe4 <i2c_clock_config+0xb8>)
 8019f42:	fbb3 f0f0 	udiv	r0, r3, r0
 8019f46:	4293      	cmp	r3, r2
 8019f48:	bf34      	ite	cc
 8019f4a:	4601      	movcc	r1, r0
 8019f4c:	213c      	movcs	r1, #60	@ 0x3c
 8019f4e:	4a26      	ldr	r2, [pc, #152]	@ (8019fe8 <i2c_clock_config+0xbc>)
 8019f50:	f026 063f 	bic.w	r6, r6, #63	@ 0x3f
 8019f54:	430e      	orrs	r6, r1
 8019f56:	4294      	cmp	r4, r2
 8019f58:	606e      	str	r6, [r5, #4]
 8019f5a:	d816      	bhi.n	8019f8a <i2c_clock_config+0x5e>
 8019f5c:	3001      	adds	r0, #1
 8019f5e:	283b      	cmp	r0, #59	@ 0x3b
 8019f60:	d90d      	bls.n	8019f7e <i2c_clock_config+0x52>
 8019f62:	223c      	movs	r2, #60	@ 0x3c
 8019f64:	622a      	str	r2, [r5, #32]
 8019f66:	0064      	lsls	r4, r4, #1
 8019f68:	fbb3 f4f4 	udiv	r4, r3, r4
 8019f6c:	2c04      	cmp	r4, #4
 8019f6e:	69ea      	ldr	r2, [r5, #28]
 8019f70:	bf38      	it	cc
 8019f72:	2404      	movcc	r4, #4
 8019f74:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8019f78:	4314      	orrs	r4, r2
 8019f7a:	61ec      	str	r4, [r5, #28]
 8019f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f7e:	2802      	cmp	r0, #2
 8019f80:	d801      	bhi.n	8019f86 <i2c_clock_config+0x5a>
 8019f82:	2202      	movs	r2, #2
 8019f84:	e7ee      	b.n	8019f64 <i2c_clock_config+0x38>
 8019f86:	6228      	str	r0, [r5, #32]
 8019f88:	e7ed      	b.n	8019f66 <i2c_clock_config+0x3a>
 8019f8a:	4a18      	ldr	r2, [pc, #96]	@ (8019fec <i2c_clock_config+0xc0>)
 8019f8c:	4294      	cmp	r4, r2
 8019f8e:	d8f5      	bhi.n	8019f7c <i2c_clock_config+0x50>
 8019f90:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8019f94:	4351      	muls	r1, r2
 8019f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019f9a:	fbb1 f1f2 	udiv	r1, r1, r2
 8019f9e:	3101      	adds	r1, #1
 8019fa0:	6229      	str	r1, [r5, #32]
 8019fa2:	b9a7      	cbnz	r7, 8019fce <i2c_clock_config+0xa2>
 8019fa4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019fa8:	fbb3 f4f4 	udiv	r4, r3, r4
 8019fac:	69eb      	ldr	r3, [r5, #28]
 8019fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8019fb2:	61eb      	str	r3, [r5, #28]
 8019fb4:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8019fb8:	b90b      	cbnz	r3, 8019fbe <i2c_clock_config+0x92>
 8019fba:	f044 0401 	orr.w	r4, r4, #1
 8019fbe:	69eb      	ldr	r3, [r5, #28]
 8019fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8019fc4:	61eb      	str	r3, [r5, #28]
 8019fc6:	69eb      	ldr	r3, [r5, #28]
 8019fc8:	4323      	orrs	r3, r4
 8019fca:	61eb      	str	r3, [r5, #28]
 8019fcc:	e7d6      	b.n	8019f7c <i2c_clock_config+0x50>
 8019fce:	2219      	movs	r2, #25
 8019fd0:	4354      	muls	r4, r2
 8019fd2:	fbb3 f4f4 	udiv	r4, r3, r4
 8019fd6:	69eb      	ldr	r3, [r5, #28]
 8019fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8019fdc:	e7e9      	b.n	8019fb2 <i2c_clock_config+0x86>
 8019fde:	bf00      	nop
 8019fe0:	03938700 	orrseq	r8, r3, #0, 14
 8019fe4:	000f4240 	andeq	r4, pc, r0, asr #4
 8019fe8:	000186a0 	andeq	r8, r1, r0, lsr #13
 8019fec:	00061a80 	andeq	r1, r6, r0, lsl #21

08019ff0 <i2c_ack_config>:
 8019ff0:	6803      	ldr	r3, [r0, #0]
 8019ff2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8019ff6:	430b      	orrs	r3, r1
 8019ff8:	6003      	str	r3, [r0, #0]
 8019ffa:	4770      	bx	lr

08019ffc <i2c_ackpos_config>:
 8019ffc:	6803      	ldr	r3, [r0, #0]
 8019ffe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801a002:	430b      	orrs	r3, r1
 801a004:	6003      	str	r3, [r0, #0]
 801a006:	4770      	bx	lr

0801a008 <i2c_master_addressing>:
 801a008:	3202      	adds	r2, #2
 801a00a:	bf0c      	ite	eq
 801a00c:	f021 0101 	biceq.w	r1, r1, #1
 801a010:	f041 0101 	orrne.w	r1, r1, #1
 801a014:	6101      	str	r1, [r0, #16]
 801a016:	4770      	bx	lr

0801a018 <i2c_enable>:
 801a018:	6803      	ldr	r3, [r0, #0]
 801a01a:	f043 0301 	orr.w	r3, r3, #1
 801a01e:	6003      	str	r3, [r0, #0]
 801a020:	4770      	bx	lr

0801a022 <i2c_start_on_bus>:
 801a022:	6803      	ldr	r3, [r0, #0]
 801a024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a028:	6003      	str	r3, [r0, #0]
 801a02a:	4770      	bx	lr

0801a02c <i2c_stop_on_bus>:
 801a02c:	6803      	ldr	r3, [r0, #0]
 801a02e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a032:	6003      	str	r3, [r0, #0]
 801a034:	4770      	bx	lr

0801a036 <i2c_data_transmit>:
 801a036:	6101      	str	r1, [r0, #16]
 801a038:	4770      	bx	lr

0801a03a <i2c_data_receive>:
 801a03a:	6900      	ldr	r0, [r0, #16]
 801a03c:	b2c0      	uxtb	r0, r0
 801a03e:	4770      	bx	lr

0801a040 <i2c_flag_get>:
 801a040:	098b      	lsrs	r3, r1, #6
 801a042:	f001 011f 	and.w	r1, r1, #31
 801a046:	5818      	ldr	r0, [r3, r0]
 801a048:	40c8      	lsrs	r0, r1
 801a04a:	f000 0001 	and.w	r0, r0, #1
 801a04e:	4770      	bx	lr

0801a050 <i2c_flag_clear>:
 801a050:	f240 5301 	movw	r3, #1281	@ 0x501
 801a054:	4299      	cmp	r1, r3
 801a056:	b510      	push	{r4, lr}
 801a058:	d102      	bne.n	801a060 <i2c_flag_clear+0x10>
 801a05a:	6943      	ldr	r3, [r0, #20]
 801a05c:	6983      	ldr	r3, [r0, #24]
 801a05e:	bd10      	pop	{r4, pc}
 801a060:	098c      	lsrs	r4, r1, #6
 801a062:	2201      	movs	r2, #1
 801a064:	5823      	ldr	r3, [r4, r0]
 801a066:	f001 011f 	and.w	r1, r1, #31
 801a06a:	408a      	lsls	r2, r1
 801a06c:	ea23 0302 	bic.w	r3, r3, r2
 801a070:	5023      	str	r3, [r4, r0]
 801a072:	e7f4      	b.n	801a05e <i2c_flag_clear+0xe>

0801a074 <usart_deinit>:
 801a074:	b508      	push	{r3, lr}
 801a076:	4b2d      	ldr	r3, [pc, #180]	@ (801a12c <usart_deinit+0xb8>)
 801a078:	4298      	cmp	r0, r3
 801a07a:	d050      	beq.n	801a11e <usart_deinit+0xaa>
 801a07c:	d817      	bhi.n	801a0ae <usart_deinit+0x3a>
 801a07e:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 801a082:	4298      	cmp	r0, r3
 801a084:	d044      	beq.n	801a110 <usart_deinit+0x9c>
 801a086:	d808      	bhi.n	801a09a <usart_deinit+0x26>
 801a088:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801a08c:	4298      	cmp	r0, r3
 801a08e:	d02a      	beq.n	801a0e6 <usart_deinit+0x72>
 801a090:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801a094:	4298      	cmp	r0, r3
 801a096:	d02d      	beq.n	801a0f4 <usart_deinit+0x80>
 801a098:	bd08      	pop	{r3, pc}
 801a09a:	4b25      	ldr	r3, [pc, #148]	@ (801a130 <usart_deinit+0xbc>)
 801a09c:	4298      	cmp	r0, r3
 801a09e:	d1fb      	bne.n	801a098 <usart_deinit+0x24>
 801a0a0:	f640 0014 	movw	r0, #2068	@ 0x814
 801a0a4:	f7ff f857 	bl	8019156 <rcu_periph_reset_enable>
 801a0a8:	f640 0014 	movw	r0, #2068	@ 0x814
 801a0ac:	e017      	b.n	801a0de <usart_deinit+0x6a>
 801a0ae:	4b21      	ldr	r3, [pc, #132]	@ (801a134 <usart_deinit+0xc0>)
 801a0b0:	4298      	cmp	r0, r3
 801a0b2:	d00e      	beq.n	801a0d2 <usart_deinit+0x5e>
 801a0b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801a0b8:	4298      	cmp	r0, r3
 801a0ba:	d022      	beq.n	801a102 <usart_deinit+0x8e>
 801a0bc:	f5a3 4318 	sub.w	r3, r3, #38912	@ 0x9800
 801a0c0:	4298      	cmp	r0, r3
 801a0c2:	d1e9      	bne.n	801a098 <usart_deinit+0x24>
 801a0c4:	f640 001f 	movw	r0, #2079	@ 0x81f
 801a0c8:	f7ff f845 	bl	8019156 <rcu_periph_reset_enable>
 801a0cc:	f640 001f 	movw	r0, #2079	@ 0x81f
 801a0d0:	e005      	b.n	801a0de <usart_deinit+0x6a>
 801a0d2:	f640 1004 	movw	r0, #2308	@ 0x904
 801a0d6:	f7ff f83e 	bl	8019156 <rcu_periph_reset_enable>
 801a0da:	f640 1004 	movw	r0, #2308	@ 0x904
 801a0de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a0e2:	f7ff b83a 	b.w	801915a <rcu_periph_reset_disable>
 801a0e6:	f640 0011 	movw	r0, #2065	@ 0x811
 801a0ea:	f7ff f834 	bl	8019156 <rcu_periph_reset_enable>
 801a0ee:	f640 0011 	movw	r0, #2065	@ 0x811
 801a0f2:	e7f4      	b.n	801a0de <usart_deinit+0x6a>
 801a0f4:	f640 0012 	movw	r0, #2066	@ 0x812
 801a0f8:	f7ff f82d 	bl	8019156 <rcu_periph_reset_enable>
 801a0fc:	f640 0012 	movw	r0, #2066	@ 0x812
 801a100:	e7ed      	b.n	801a0de <usart_deinit+0x6a>
 801a102:	f640 1005 	movw	r0, #2309	@ 0x905
 801a106:	f7ff f826 	bl	8019156 <rcu_periph_reset_enable>
 801a10a:	f640 1005 	movw	r0, #2309	@ 0x905
 801a10e:	e7e6      	b.n	801a0de <usart_deinit+0x6a>
 801a110:	f640 0013 	movw	r0, #2067	@ 0x813
 801a114:	f7ff f81f 	bl	8019156 <rcu_periph_reset_enable>
 801a118:	f640 0013 	movw	r0, #2067	@ 0x813
 801a11c:	e7df      	b.n	801a0de <usart_deinit+0x6a>
 801a11e:	f640 001e 	movw	r0, #2078	@ 0x81e
 801a122:	f7ff f818 	bl	8019156 <rcu_periph_reset_enable>
 801a126:	f640 001e 	movw	r0, #2078	@ 0x81e
 801a12a:	e7d8      	b.n	801a0de <usart_deinit+0x6a>
 801a12c:	40007800 	andmi	r7, r0, r0, lsl #16
 801a130:	40005000 	andmi	r5, r0, r0
 801a134:	40011000 	andmi	r1, r1, r0

0801a138 <usart_baudrate_set>:
 801a138:	b538      	push	{r3, r4, r5, lr}
 801a13a:	4b1e      	ldr	r3, [pc, #120]	@ (801a1b4 <usart_baudrate_set+0x7c>)
 801a13c:	4298      	cmp	r0, r3
 801a13e:	4604      	mov	r4, r0
 801a140:	460d      	mov	r5, r1
 801a142:	d02e      	beq.n	801a1a2 <usart_baudrate_set+0x6a>
 801a144:	d821      	bhi.n	801a18a <usart_baudrate_set+0x52>
 801a146:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 801a14a:	4298      	cmp	r0, r3
 801a14c:	d029      	beq.n	801a1a2 <usart_baudrate_set+0x6a>
 801a14e:	d81a      	bhi.n	801a186 <usart_baudrate_set+0x4e>
 801a150:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801a154:	4298      	cmp	r0, r3
 801a156:	d024      	beq.n	801a1a2 <usart_baudrate_set+0x6a>
 801a158:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801a15c:	429c      	cmp	r4, r3
 801a15e:	d020      	beq.n	801a1a2 <usart_baudrate_set+0x6a>
 801a160:	2000      	movs	r0, #0
 801a162:	68e2      	ldr	r2, [r4, #12]
 801a164:	0412      	lsls	r2, r2, #16
 801a166:	ea4f 0355 	mov.w	r3, r5, lsr #1
 801a16a:	d51c      	bpl.n	801a1a6 <usart_baudrate_set+0x6e>
 801a16c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801a170:	fbb3 f1f5 	udiv	r1, r3, r5
 801a174:	f3c1 0342 	ubfx	r3, r1, #1, #3
 801a178:	f021 010f 	bic.w	r1, r1, #15
 801a17c:	0409      	lsls	r1, r1, #16
 801a17e:	0c09      	lsrs	r1, r1, #16
 801a180:	430b      	orrs	r3, r1
 801a182:	60a3      	str	r3, [r4, #8]
 801a184:	bd38      	pop	{r3, r4, r5, pc}
 801a186:	4b0c      	ldr	r3, [pc, #48]	@ (801a1b8 <usart_baudrate_set+0x80>)
 801a188:	e7e8      	b.n	801a15c <usart_baudrate_set+0x24>
 801a18a:	4b0c      	ldr	r3, [pc, #48]	@ (801a1bc <usart_baudrate_set+0x84>)
 801a18c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
 801a190:	429a      	cmp	r2, r3
 801a192:	d002      	beq.n	801a19a <usart_baudrate_set+0x62>
 801a194:	f5a3 4314 	sub.w	r3, r3, #37888	@ 0x9400
 801a198:	e7e0      	b.n	801a15c <usart_baudrate_set+0x24>
 801a19a:	2003      	movs	r0, #3
 801a19c:	f7fe fffc 	bl	8019198 <rcu_clock_freq_get>
 801a1a0:	e7df      	b.n	801a162 <usart_baudrate_set+0x2a>
 801a1a2:	2002      	movs	r0, #2
 801a1a4:	e7fa      	b.n	801a19c <usart_baudrate_set+0x64>
 801a1a6:	18c1      	adds	r1, r0, r3
 801a1a8:	fbb1 f1f5 	udiv	r1, r1, r5
 801a1ac:	b289      	uxth	r1, r1
 801a1ae:	60a1      	str	r1, [r4, #8]
 801a1b0:	e7e8      	b.n	801a184 <usart_baudrate_set+0x4c>
 801a1b2:	bf00      	nop
 801a1b4:	40007800 	andmi	r7, r0, r0, lsl #16
 801a1b8:	40005000 	andmi	r5, r0, r0
 801a1bc:	40011000 	andmi	r1, r1, r0

0801a1c0 <usart_parity_config>:
 801a1c0:	68c3      	ldr	r3, [r0, #12]
 801a1c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801a1c6:	60c3      	str	r3, [r0, #12]
 801a1c8:	68c3      	ldr	r3, [r0, #12]
 801a1ca:	430b      	orrs	r3, r1
 801a1cc:	60c3      	str	r3, [r0, #12]
 801a1ce:	4770      	bx	lr

0801a1d0 <usart_word_length_set>:
 801a1d0:	68c3      	ldr	r3, [r0, #12]
 801a1d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a1d6:	60c3      	str	r3, [r0, #12]
 801a1d8:	68c3      	ldr	r3, [r0, #12]
 801a1da:	430b      	orrs	r3, r1
 801a1dc:	60c3      	str	r3, [r0, #12]
 801a1de:	4770      	bx	lr

0801a1e0 <usart_stop_bit_set>:
 801a1e0:	6903      	ldr	r3, [r0, #16]
 801a1e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 801a1e6:	6103      	str	r3, [r0, #16]
 801a1e8:	6903      	ldr	r3, [r0, #16]
 801a1ea:	430b      	orrs	r3, r1
 801a1ec:	6103      	str	r3, [r0, #16]
 801a1ee:	4770      	bx	lr

0801a1f0 <usart_transmit_config>:
 801a1f0:	68c3      	ldr	r3, [r0, #12]
 801a1f2:	f023 0308 	bic.w	r3, r3, #8
 801a1f6:	430b      	orrs	r3, r1
 801a1f8:	60c3      	str	r3, [r0, #12]
 801a1fa:	4770      	bx	lr

0801a1fc <usart_receive_config>:
 801a1fc:	68c3      	ldr	r3, [r0, #12]
 801a1fe:	f023 0304 	bic.w	r3, r3, #4
 801a202:	430b      	orrs	r3, r1
 801a204:	60c3      	str	r3, [r0, #12]
 801a206:	4770      	bx	lr

0801a208 <usart_hardware_flow_rts_config>:
 801a208:	6943      	ldr	r3, [r0, #20]
 801a20a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a20e:	6143      	str	r3, [r0, #20]
 801a210:	6943      	ldr	r3, [r0, #20]
 801a212:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a216:	4319      	orrs	r1, r3
 801a218:	6141      	str	r1, [r0, #20]
 801a21a:	4770      	bx	lr

0801a21c <usart_hardware_flow_cts_config>:
 801a21c:	6943      	ldr	r3, [r0, #20]
 801a21e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801a222:	6143      	str	r3, [r0, #20]
 801a224:	6943      	ldr	r3, [r0, #20]
 801a226:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 801a22a:	4319      	orrs	r1, r3
 801a22c:	6141      	str	r1, [r0, #20]
 801a22e:	4770      	bx	lr

0801a230 <usart_flag_get>:
 801a230:	098b      	lsrs	r3, r1, #6
 801a232:	f001 011f 	and.w	r1, r1, #31
 801a236:	5818      	ldr	r0, [r3, r0]
 801a238:	40c8      	lsrs	r0, r1
 801a23a:	f000 0001 	and.w	r0, r0, #1
 801a23e:	4770      	bx	lr

0801a240 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>:
 801a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a242:	461e      	mov	r6, r3
 801a244:	4bc3      	ldr	r3, [pc, #780]	@ (801a554 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x314>)
 801a246:	4298      	cmp	r0, r3
 801a248:	4604      	mov	r4, r0
 801a24a:	460f      	mov	r7, r1
 801a24c:	4615      	mov	r5, r2
 801a24e:	f000 818f 	beq.w	801a570 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x330>
 801a252:	d83a      	bhi.n	801a2ca <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x8a>
 801a254:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 801a258:	4298      	cmp	r0, r3
 801a25a:	f000 80f5 	beq.w	801a448 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x208>
 801a25e:	f200 8122 	bhi.w	801a4a6 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x266>
 801a262:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801a266:	4298      	cmp	r0, r3
 801a268:	f000 80c8 	beq.w	801a3fc <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x1bc>
 801a26c:	f241 0012 	movw	r0, #4114	@ 0x1012
 801a270:	f7fe ff56 	bl	8019120 <rcu_periph_clock_enable>
 801a274:	f640 4001 	movw	r0, #3073	@ 0xc01
 801a278:	f7fe ff52 	bl	8019120 <rcu_periph_clock_enable>
 801a27c:	48b6      	ldr	r0, [pc, #728]	@ (801a558 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801a27e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a282:	2107      	movs	r1, #7
 801a284:	f7fe ff08 	bl	8019098 <gpio_af_set>
 801a288:	48b3      	ldr	r0, [pc, #716]	@ (801a558 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801a28a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a28e:	2201      	movs	r2, #1
 801a290:	2102      	movs	r1, #2
 801a292:	f7fe fec3 	bl	801901c <gpio_mode_set>
 801a296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a29a:	48af      	ldr	r0, [pc, #700]	@ (801a558 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801a29c:	2202      	movs	r2, #2
 801a29e:	2100      	movs	r1, #0
 801a2a0:	f7fe fede 	bl	8019060 <gpio_output_options_set>
 801a2a4:	48ac      	ldr	r0, [pc, #688]	@ (801a558 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801a2a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a2aa:	2107      	movs	r1, #7
 801a2ac:	f7fe fef4 	bl	8019098 <gpio_af_set>
 801a2b0:	48a9      	ldr	r0, [pc, #676]	@ (801a558 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801a2b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a2b6:	2201      	movs	r2, #1
 801a2b8:	2102      	movs	r1, #2
 801a2ba:	f7fe feaf 	bl	801901c <gpio_mode_set>
 801a2be:	48a6      	ldr	r0, [pc, #664]	@ (801a558 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801a2c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a2c4:	2202      	movs	r2, #2
 801a2c6:	2100      	movs	r1, #0
 801a2c8:	e05b      	b.n	801a382 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801a2ca:	4ba4      	ldr	r3, [pc, #656]	@ (801a55c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x31c>)
 801a2cc:	4298      	cmp	r0, r3
 801a2ce:	d02a      	beq.n	801a326 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe6>
 801a2d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801a2d4:	4298      	cmp	r0, r3
 801a2d6:	f000 8116 	beq.w	801a506 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x2c6>
 801a2da:	f241 001f 	movw	r0, #4127	@ 0x101f
 801a2de:	f7fe ff1f 	bl	8019120 <rcu_periph_clock_enable>
 801a2e2:	f640 4004 	movw	r0, #3076	@ 0xc04
 801a2e6:	f7fe ff1b 	bl	8019120 <rcu_periph_clock_enable>
 801a2ea:	489d      	ldr	r0, [pc, #628]	@ (801a560 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801a2ec:	2202      	movs	r2, #2
 801a2ee:	2108      	movs	r1, #8
 801a2f0:	f7fe fed2 	bl	8019098 <gpio_af_set>
 801a2f4:	2302      	movs	r3, #2
 801a2f6:	4619      	mov	r1, r3
 801a2f8:	4899      	ldr	r0, [pc, #612]	@ (801a560 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801a2fa:	2201      	movs	r2, #1
 801a2fc:	f7fe fe8e 	bl	801901c <gpio_mode_set>
 801a300:	2302      	movs	r3, #2
 801a302:	461a      	mov	r2, r3
 801a304:	4896      	ldr	r0, [pc, #600]	@ (801a560 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801a306:	2100      	movs	r1, #0
 801a308:	f7fe feaa 	bl	8019060 <gpio_output_options_set>
 801a30c:	4894      	ldr	r0, [pc, #592]	@ (801a560 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801a30e:	2201      	movs	r2, #1
 801a310:	2108      	movs	r1, #8
 801a312:	f7fe fec1 	bl	8019098 <gpio_af_set>
 801a316:	2301      	movs	r3, #1
 801a318:	461a      	mov	r2, r3
 801a31a:	4891      	ldr	r0, [pc, #580]	@ (801a560 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801a31c:	2102      	movs	r1, #2
 801a31e:	f7fe fe7d 	bl	801901c <gpio_mode_set>
 801a322:	2301      	movs	r3, #1
 801a324:	e14c      	b.n	801a5c0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x380>
 801a326:	f241 1004 	movw	r0, #4356	@ 0x1104
 801a32a:	f7fe fef9 	bl	8019120 <rcu_periph_clock_enable>
 801a32e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801a332:	f7fe fef5 	bl	8019120 <rcu_periph_clock_enable>
 801a336:	488b      	ldr	r0, [pc, #556]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a33c:	2107      	movs	r1, #7
 801a33e:	f7fe feab 	bl	8019098 <gpio_af_set>
 801a342:	4888      	ldr	r0, [pc, #544]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a348:	2201      	movs	r2, #1
 801a34a:	2102      	movs	r1, #2
 801a34c:	f7fe fe66 	bl	801901c <gpio_mode_set>
 801a350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a354:	4883      	ldr	r0, [pc, #524]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a356:	2202      	movs	r2, #2
 801a358:	2100      	movs	r1, #0
 801a35a:	f7fe fe81 	bl	8019060 <gpio_output_options_set>
 801a35e:	4881      	ldr	r0, [pc, #516]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a364:	2107      	movs	r1, #7
 801a366:	f7fe fe97 	bl	8019098 <gpio_af_set>
 801a36a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a36e:	487d      	ldr	r0, [pc, #500]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a370:	2201      	movs	r2, #1
 801a372:	2102      	movs	r1, #2
 801a374:	f7fe fe52 	bl	801901c <gpio_mode_set>
 801a378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a37c:	4879      	ldr	r0, [pc, #484]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a37e:	2202      	movs	r2, #2
 801a380:	2100      	movs	r1, #0
 801a382:	f7fe fe6d 	bl	8019060 <gpio_output_options_set>
 801a386:	4620      	mov	r0, r4
 801a388:	f7ff fe74 	bl	801a074 <usart_deinit>
 801a38c:	68e3      	ldr	r3, [r4, #12]
 801a38e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801a392:	60e3      	str	r3, [r4, #12]
 801a394:	4639      	mov	r1, r7
 801a396:	4620      	mov	r0, r4
 801a398:	f7ff fece 	bl	801a138 <usart_baudrate_set>
 801a39c:	f1a5 0309 	sub.w	r3, r5, #9
 801a3a0:	4259      	negs	r1, r3
 801a3a2:	4159      	adcs	r1, r3
 801a3a4:	0309      	lsls	r1, r1, #12
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	f7ff ff12 	bl	801a1d0 <usart_word_length_set>
 801a3ac:	9906      	ldr	r1, [sp, #24]
 801a3ae:	1e8a      	subs	r2, r1, #2
 801a3b0:	4251      	negs	r1, r2
 801a3b2:	4151      	adcs	r1, r2
 801a3b4:	0349      	lsls	r1, r1, #13
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	f7ff ff12 	bl	801a1e0 <usart_stop_bit_set>
 801a3bc:	2e01      	cmp	r6, #1
 801a3be:	f000 8103 	beq.w	801a5c8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x388>
 801a3c2:	2e02      	cmp	r6, #2
 801a3c4:	f040 8103 	bne.w	801a5ce <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x38e>
 801a3c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801a3cc:	4620      	mov	r0, r4
 801a3ce:	f7ff fef7 	bl	801a1c0 <usart_parity_config>
 801a3d2:	2100      	movs	r1, #0
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	f7ff ff17 	bl	801a208 <usart_hardware_flow_rts_config>
 801a3da:	2100      	movs	r1, #0
 801a3dc:	4620      	mov	r0, r4
 801a3de:	f7ff ff1d 	bl	801a21c <usart_hardware_flow_cts_config>
 801a3e2:	2104      	movs	r1, #4
 801a3e4:	4620      	mov	r0, r4
 801a3e6:	f7ff ff09 	bl	801a1fc <usart_receive_config>
 801a3ea:	2108      	movs	r1, #8
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	f7ff feff 	bl	801a1f0 <usart_transmit_config>
 801a3f2:	68e3      	ldr	r3, [r4, #12]
 801a3f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a3f8:	60e3      	str	r3, [r4, #12]
 801a3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3fc:	f241 0011 	movw	r0, #4113	@ 0x1011
 801a400:	f7fe fe8e 	bl	8019120 <rcu_periph_clock_enable>
 801a404:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801a408:	f7fe fe8a 	bl	8019120 <rcu_periph_clock_enable>
 801a40c:	4855      	ldr	r0, [pc, #340]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a40e:	2204      	movs	r2, #4
 801a410:	2107      	movs	r1, #7
 801a412:	f7fe fe41 	bl	8019098 <gpio_af_set>
 801a416:	4853      	ldr	r0, [pc, #332]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a418:	2304      	movs	r3, #4
 801a41a:	2201      	movs	r2, #1
 801a41c:	2102      	movs	r1, #2
 801a41e:	f7fe fdfd 	bl	801901c <gpio_mode_set>
 801a422:	2304      	movs	r3, #4
 801a424:	484f      	ldr	r0, [pc, #316]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a426:	2202      	movs	r2, #2
 801a428:	2100      	movs	r1, #0
 801a42a:	f7fe fe19 	bl	8019060 <gpio_output_options_set>
 801a42e:	484d      	ldr	r0, [pc, #308]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a430:	2208      	movs	r2, #8
 801a432:	2107      	movs	r1, #7
 801a434:	f7fe fe30 	bl	8019098 <gpio_af_set>
 801a438:	2308      	movs	r3, #8
 801a43a:	484a      	ldr	r0, [pc, #296]	@ (801a564 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801a43c:	2201      	movs	r2, #1
 801a43e:	2102      	movs	r1, #2
 801a440:	f7fe fdec 	bl	801901c <gpio_mode_set>
 801a444:	2308      	movs	r3, #8
 801a446:	e799      	b.n	801a37c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x13c>
 801a448:	f241 0013 	movw	r0, #4115	@ 0x1013
 801a44c:	f7fe fe68 	bl	8019120 <rcu_periph_clock_enable>
 801a450:	f640 4002 	movw	r0, #3074	@ 0xc02
 801a454:	f7fe fe64 	bl	8019120 <rcu_periph_clock_enable>
 801a458:	4843      	ldr	r0, [pc, #268]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a45a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a45e:	2108      	movs	r1, #8
 801a460:	f7fe fe1a 	bl	8019098 <gpio_af_set>
 801a464:	4840      	ldr	r0, [pc, #256]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a46a:	2201      	movs	r2, #1
 801a46c:	2102      	movs	r1, #2
 801a46e:	f7fe fdd5 	bl	801901c <gpio_mode_set>
 801a472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a476:	483c      	ldr	r0, [pc, #240]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a478:	2202      	movs	r2, #2
 801a47a:	2100      	movs	r1, #0
 801a47c:	f7fe fdf0 	bl	8019060 <gpio_output_options_set>
 801a480:	4839      	ldr	r0, [pc, #228]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a482:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a486:	2108      	movs	r1, #8
 801a488:	f7fe fe06 	bl	8019098 <gpio_af_set>
 801a48c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a490:	4835      	ldr	r0, [pc, #212]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a492:	2201      	movs	r2, #1
 801a494:	2102      	movs	r1, #2
 801a496:	f7fe fdc1 	bl	801901c <gpio_mode_set>
 801a49a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a49e:	4832      	ldr	r0, [pc, #200]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a4a0:	2202      	movs	r2, #2
 801a4a2:	2100      	movs	r1, #0
 801a4a4:	e76d      	b.n	801a382 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801a4a6:	f241 0014 	movw	r0, #4116	@ 0x1014
 801a4aa:	f7fe fe39 	bl	8019120 <rcu_periph_clock_enable>
 801a4ae:	f640 4002 	movw	r0, #3074	@ 0xc02
 801a4b2:	f7fe fe35 	bl	8019120 <rcu_periph_clock_enable>
 801a4b6:	f640 4003 	movw	r0, #3075	@ 0xc03
 801a4ba:	f7fe fe31 	bl	8019120 <rcu_periph_clock_enable>
 801a4be:	482a      	ldr	r0, [pc, #168]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a4c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801a4c4:	2108      	movs	r1, #8
 801a4c6:	f7fe fde7 	bl	8019098 <gpio_af_set>
 801a4ca:	4827      	ldr	r0, [pc, #156]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a4cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a4d0:	2201      	movs	r2, #1
 801a4d2:	2102      	movs	r1, #2
 801a4d4:	f7fe fda2 	bl	801901c <gpio_mode_set>
 801a4d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801a4dc:	4822      	ldr	r0, [pc, #136]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a4de:	2202      	movs	r2, #2
 801a4e0:	2100      	movs	r1, #0
 801a4e2:	f7fe fdbd 	bl	8019060 <gpio_output_options_set>
 801a4e6:	4821      	ldr	r0, [pc, #132]	@ (801a56c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 801a4e8:	2204      	movs	r2, #4
 801a4ea:	2108      	movs	r1, #8
 801a4ec:	f7fe fdd4 	bl	8019098 <gpio_af_set>
 801a4f0:	481e      	ldr	r0, [pc, #120]	@ (801a56c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 801a4f2:	2304      	movs	r3, #4
 801a4f4:	2201      	movs	r2, #1
 801a4f6:	2102      	movs	r1, #2
 801a4f8:	f7fe fd90 	bl	801901c <gpio_mode_set>
 801a4fc:	481b      	ldr	r0, [pc, #108]	@ (801a56c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 801a4fe:	2304      	movs	r3, #4
 801a500:	2202      	movs	r2, #2
 801a502:	2100      	movs	r1, #0
 801a504:	e73d      	b.n	801a382 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801a506:	f241 1005 	movw	r0, #4357	@ 0x1105
 801a50a:	f7fe fe09 	bl	8019120 <rcu_periph_clock_enable>
 801a50e:	f640 4002 	movw	r0, #3074	@ 0xc02
 801a512:	f7fe fe05 	bl	8019120 <rcu_periph_clock_enable>
 801a516:	4814      	ldr	r0, [pc, #80]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a518:	2240      	movs	r2, #64	@ 0x40
 801a51a:	2108      	movs	r1, #8
 801a51c:	f7fe fdbc 	bl	8019098 <gpio_af_set>
 801a520:	4811      	ldr	r0, [pc, #68]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a522:	2340      	movs	r3, #64	@ 0x40
 801a524:	2201      	movs	r2, #1
 801a526:	2102      	movs	r1, #2
 801a528:	f7fe fd78 	bl	801901c <gpio_mode_set>
 801a52c:	2340      	movs	r3, #64	@ 0x40
 801a52e:	480e      	ldr	r0, [pc, #56]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a530:	2202      	movs	r2, #2
 801a532:	2100      	movs	r1, #0
 801a534:	f7fe fd94 	bl	8019060 <gpio_output_options_set>
 801a538:	480b      	ldr	r0, [pc, #44]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a53a:	2280      	movs	r2, #128	@ 0x80
 801a53c:	2108      	movs	r1, #8
 801a53e:	f7fe fdab 	bl	8019098 <gpio_af_set>
 801a542:	2380      	movs	r3, #128	@ 0x80
 801a544:	4808      	ldr	r0, [pc, #32]	@ (801a568 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801a546:	2201      	movs	r2, #1
 801a548:	2102      	movs	r1, #2
 801a54a:	f7fe fd67 	bl	801901c <gpio_mode_set>
 801a54e:	2380      	movs	r3, #128	@ 0x80
 801a550:	e7a5      	b.n	801a49e <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x25e>
 801a552:	bf00      	nop
 801a554:	40007800 	andmi	r7, r0, r0, lsl #16
 801a558:	40020400 	andmi	r0, r2, r0, lsl #8
 801a55c:	40011000 	andmi	r1, r1, r0
 801a560:	40021000 	andmi	r1, r2, r0
 801a564:	40020000 	andmi	r0, r2, r0
 801a568:	40020800 	andmi	r0, r2, r0, lsl #16
 801a56c:	40020c00 	andmi	r0, r2, r0, lsl #24
 801a570:	f241 001e 	movw	r0, #4126	@ 0x101e
 801a574:	f7fe fdd4 	bl	8019120 <rcu_periph_clock_enable>
 801a578:	f640 4004 	movw	r0, #3076	@ 0xc04
 801a57c:	f7fe fdd0 	bl	8019120 <rcu_periph_clock_enable>
 801a580:	4814      	ldr	r0, [pc, #80]	@ (801a5d4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801a582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a586:	2108      	movs	r1, #8
 801a588:	f7fe fd86 	bl	8019098 <gpio_af_set>
 801a58c:	4811      	ldr	r0, [pc, #68]	@ (801a5d4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801a58e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a592:	2201      	movs	r2, #1
 801a594:	2102      	movs	r1, #2
 801a596:	f7fe fd41 	bl	801901c <gpio_mode_set>
 801a59a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801a59e:	480d      	ldr	r0, [pc, #52]	@ (801a5d4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801a5a0:	2202      	movs	r2, #2
 801a5a2:	2100      	movs	r1, #0
 801a5a4:	f7fe fd5c 	bl	8019060 <gpio_output_options_set>
 801a5a8:	480a      	ldr	r0, [pc, #40]	@ (801a5d4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801a5aa:	2280      	movs	r2, #128	@ 0x80
 801a5ac:	2108      	movs	r1, #8
 801a5ae:	f7fe fd73 	bl	8019098 <gpio_af_set>
 801a5b2:	2380      	movs	r3, #128	@ 0x80
 801a5b4:	4807      	ldr	r0, [pc, #28]	@ (801a5d4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801a5b6:	2201      	movs	r2, #1
 801a5b8:	2102      	movs	r1, #2
 801a5ba:	f7fe fd2f 	bl	801901c <gpio_mode_set>
 801a5be:	2380      	movs	r3, #128	@ 0x80
 801a5c0:	4804      	ldr	r0, [pc, #16]	@ (801a5d4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801a5c2:	2202      	movs	r2, #2
 801a5c4:	2100      	movs	r1, #0
 801a5c6:	e6dc      	b.n	801a382 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801a5c8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801a5cc:	e6fe      	b.n	801a3cc <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x18c>
 801a5ce:	2100      	movs	r1, #0
 801a5d0:	e6fc      	b.n	801a3cc <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x18c>
 801a5d2:	bf00      	nop
 801a5d4:	40021000 	andmi	r1, r2, r0

0801a5d8 <__libc_init_array>:
 801a5d8:	b570      	push	{r4, r5, r6, lr}
 801a5da:	4d0c      	ldr	r5, [pc, #48]	@ (801a60c <__libc_init_array+0x34>)
 801a5dc:	4c0c      	ldr	r4, [pc, #48]	@ (801a610 <__libc_init_array+0x38>)
 801a5de:	1b64      	subs	r4, r4, r5
 801a5e0:	10a4      	asrs	r4, r4, #2
 801a5e2:	2600      	movs	r6, #0
 801a5e4:	42a6      	cmp	r6, r4
 801a5e6:	d107      	bne.n	801a5f8 <__libc_init_array+0x20>
 801a5e8:	4d0a      	ldr	r5, [pc, #40]	@ (801a614 <__libc_init_array+0x3c>)
 801a5ea:	4c0b      	ldr	r4, [pc, #44]	@ (801a618 <__libc_init_array+0x40>)
 801a5ec:	1b64      	subs	r4, r4, r5
 801a5ee:	10a4      	asrs	r4, r4, #2
 801a5f0:	2600      	movs	r6, #0
 801a5f2:	42a6      	cmp	r6, r4
 801a5f4:	d105      	bne.n	801a602 <__libc_init_array+0x2a>
 801a5f6:	bd70      	pop	{r4, r5, r6, pc}
 801a5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a5fc:	4798      	blx	r3
 801a5fe:	3601      	adds	r6, #1
 801a600:	e7f0      	b.n	801a5e4 <__libc_init_array+0xc>
 801a602:	f855 3b04 	ldr.w	r3, [r5], #4
 801a606:	4798      	blx	r3
 801a608:	3601      	adds	r6, #1
 801a60a:	e7f2      	b.n	801a5f2 <__libc_init_array+0x1a>
 801a60c:	0801f704 	stmdaeq	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
 801a610:	0801f704 	stmdaeq	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
 801a614:	0801f704 	stmdaeq	r1, {r2, r8, r9, sl, ip, sp, lr, pc}
 801a618:	0801f704 	stmdaeq	r1, {r2, r8, r9, sl, ip, sp, lr, pc}

0801a61c <memcpy>:
 801a61c:	b510      	push	{r4, lr}
 801a61e:	1e43      	subs	r3, r0, #1
 801a620:	440a      	add	r2, r1
 801a622:	4291      	cmp	r1, r2
 801a624:	d100      	bne.n	801a628 <memcpy+0xc>
 801a626:	bd10      	pop	{r4, pc}
 801a628:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a62c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a630:	e7f7      	b.n	801a622 <memcpy+0x6>

0801a632 <memmove>:
 801a632:	4288      	cmp	r0, r1
 801a634:	b510      	push	{r4, lr}
 801a636:	eb01 0302 	add.w	r3, r1, r2
 801a63a:	d208      	bcs.n	801a64e <memmove+0x1c>
 801a63c:	1e42      	subs	r2, r0, #1
 801a63e:	4299      	cmp	r1, r3
 801a640:	d100      	bne.n	801a644 <memmove+0x12>
 801a642:	bd10      	pop	{r4, pc}
 801a644:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a648:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a64c:	e7f7      	b.n	801a63e <memmove+0xc>
 801a64e:	4402      	add	r2, r0
 801a650:	4601      	mov	r1, r0
 801a652:	428a      	cmp	r2, r1
 801a654:	d0f5      	beq.n	801a642 <memmove+0x10>
 801a656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a65e:	e7f8      	b.n	801a652 <memmove+0x20>

0801a660 <memset>:
 801a660:	b570      	push	{r4, r5, r6, lr}
 801a662:	b1ca      	cbz	r2, 801a698 <memset+0x38>
 801a664:	b2c9      	uxtb	r1, r1
 801a666:	4603      	mov	r3, r0
 801a668:	075c      	lsls	r4, r3, #29
 801a66a:	d111      	bne.n	801a690 <memset+0x30>
 801a66c:	f04f 3501 	mov.w	r5, #16843009	@ 0x1010101
 801a670:	fba1 5605 	umull	r5, r6, r1, r5
 801a674:	f022 0407 	bic.w	r4, r2, #7
 801a678:	442e      	add	r6, r5
 801a67a:	441c      	add	r4, r3
 801a67c:	42a3      	cmp	r3, r4
 801a67e:	d10c      	bne.n	801a69a <memset+0x3a>
 801a680:	f002 0207 	and.w	r2, r2, #7
 801a684:	4422      	add	r2, r4
 801a686:	4294      	cmp	r4, r2
 801a688:	d006      	beq.n	801a698 <memset+0x38>
 801a68a:	f804 1b01 	strb.w	r1, [r4], #1
 801a68e:	e7fa      	b.n	801a686 <memset+0x26>
 801a690:	3a01      	subs	r2, #1
 801a692:	f803 1b01 	strb.w	r1, [r3], #1
 801a696:	d1e7      	bne.n	801a668 <memset+0x8>
 801a698:	bd70      	pop	{r4, r5, r6, pc}
 801a69a:	f843 5b08 	str.w	r5, [r3], #8
 801a69e:	f843 6c04 	str.w	r6, [r3, #-4]
 801a6a2:	e7eb      	b.n	801a67c <memset+0x1c>

0801a6a4 <_itostr>:
 801a6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6a6:	0fc7      	lsrs	r7, r0, #31
 801a6a8:	b091      	sub	sp, #68	@ 0x44
 801a6aa:	f10d 043f 	add.w	r4, sp, #63	@ 0x3f
 801a6ae:	d01b      	beq.n	801a6e8 <_itostr+0x44>
 801a6b0:	4240      	negs	r0, r0
 801a6b2:	4623      	mov	r3, r4
 801a6b4:	250a      	movs	r5, #10
 801a6b6:	46ec      	mov	ip, sp
 801a6b8:	fb90 f6f5 	sdiv	r6, r0, r5
 801a6bc:	fb05 0016 	mls	r0, r5, r6, r0
 801a6c0:	3030      	adds	r0, #48	@ 0x30
 801a6c2:	f803 0901 	strb.w	r0, [r3], #-1
 801a6c6:	4630      	mov	r0, r6
 801a6c8:	b10e      	cbz	r6, 801a6ce <_itostr+0x2a>
 801a6ca:	4563      	cmp	r3, ip
 801a6cc:	d1f4      	bne.n	801a6b8 <_itostr+0x14>
 801a6ce:	b132      	cbz	r2, 801a6de <_itostr+0x3a>
 801a6d0:	4668      	mov	r0, sp
 801a6d2:	2530      	movs	r5, #48	@ 0x30
 801a6d4:	1ae6      	subs	r6, r4, r3
 801a6d6:	4296      	cmp	r6, r2
 801a6d8:	da01      	bge.n	801a6de <_itostr+0x3a>
 801a6da:	4283      	cmp	r3, r0
 801a6dc:	d816      	bhi.n	801a70c <_itostr+0x68>
 801a6de:	b167      	cbz	r7, 801a6fa <_itostr+0x56>
 801a6e0:	222d      	movs	r2, #45	@ 0x2d
 801a6e2:	f803 2901 	strb.w	r2, [r3], #-1
 801a6e6:	e008      	b.n	801a6fa <_itostr+0x56>
 801a6e8:	2800      	cmp	r0, #0
 801a6ea:	d1e2      	bne.n	801a6b2 <_itostr+0xe>
 801a6ec:	2330      	movs	r3, #48	@ 0x30
 801a6ee:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801a6f2:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801a6f6:	2a00      	cmp	r2, #0
 801a6f8:	d1ea      	bne.n	801a6d0 <_itostr+0x2c>
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	1ae0      	subs	r0, r4, r3
 801a6fe:	3901      	subs	r1, #1
 801a700:	aa10      	add	r2, sp, #64	@ 0x40
 801a702:	4293      	cmp	r3, r2
 801a704:	d305      	bcc.n	801a712 <_itostr+0x6e>
 801a706:	3001      	adds	r0, #1
 801a708:	b011      	add	sp, #68	@ 0x44
 801a70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a70c:	f803 5901 	strb.w	r5, [r3], #-1
 801a710:	e7e0      	b.n	801a6d4 <_itostr+0x30>
 801a712:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a716:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a71a:	e7f1      	b.n	801a700 <_itostr+0x5c>

0801a71c <_xputch>:
 801a71c:	4603      	mov	r3, r0
 801a71e:	b410      	push	{r4}
 801a720:	4c09      	ldr	r4, [pc, #36]	@ (801a748 <_xputch+0x2c>)
 801a722:	68da      	ldr	r2, [r3, #12]
 801a724:	4608      	mov	r0, r1
 801a726:	6821      	ldr	r1, [r4, #0]
 801a728:	3201      	adds	r2, #1
 801a72a:	60da      	str	r2, [r3, #12]
 801a72c:	b141      	cbz	r1, 801a740 <_xputch+0x24>
 801a72e:	691b      	ldr	r3, [r3, #16]
 801a730:	429a      	cmp	r2, r3
 801a732:	da02      	bge.n	801a73a <_xputch+0x1e>
 801a734:	1c4b      	adds	r3, r1, #1
 801a736:	6023      	str	r3, [r4, #0]
 801a738:	7008      	strb	r0, [r1, #0]
 801a73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a73e:	4770      	bx	lr
 801a740:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a744:	f7fd bf64 	b.w	8018610 <console_putc>
 801a748:	2001a630 	andcs	sl, r1, r0, lsr r6

0801a74c <_format_int>:
 801a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a74e:	b091      	sub	sp, #68	@ 0x44
 801a750:	4606      	mov	r6, r0
 801a752:	f10d 043f 	add.w	r4, sp, #63	@ 0x3f
 801a756:	bb91      	cbnz	r1, 801a7be <_format_int+0x72>
 801a758:	2330      	movs	r3, #48	@ 0x30
 801a75a:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801a75e:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801a762:	6832      	ldr	r2, [r6, #0]
 801a764:	07d5      	lsls	r5, r2, #31
 801a766:	d507      	bpl.n	801a778 <_format_int+0x2c>
 801a768:	6870      	ldr	r0, [r6, #4]
 801a76a:	4669      	mov	r1, sp
 801a76c:	2530      	movs	r5, #48	@ 0x30
 801a76e:	1ae7      	subs	r7, r4, r3
 801a770:	4287      	cmp	r7, r0
 801a772:	da01      	bge.n	801a778 <_format_int+0x2c>
 801a774:	428b      	cmp	r3, r1
 801a776:	d833      	bhi.n	801a7e0 <_format_int+0x94>
 801a778:	0690      	lsls	r0, r2, #26
 801a77a:	d507      	bpl.n	801a78c <_format_int+0x40>
 801a77c:	68b0      	ldr	r0, [r6, #8]
 801a77e:	4669      	mov	r1, sp
 801a780:	2530      	movs	r5, #48	@ 0x30
 801a782:	1ae7      	subs	r7, r4, r3
 801a784:	4287      	cmp	r7, r0
 801a786:	da01      	bge.n	801a78c <_format_int+0x40>
 801a788:	428b      	cmp	r3, r1
 801a78a:	d82c      	bhi.n	801a7e6 <_format_int+0x9a>
 801a78c:	0711      	lsls	r1, r2, #28
 801a78e:	bf44      	itt	mi
 801a790:	212d      	movmi	r1, #45	@ 0x2d
 801a792:	f803 1901 	strbmi.w	r1, [r3], #-1
 801a796:	0652      	lsls	r2, r2, #25
 801a798:	d407      	bmi.n	801a7aa <_format_int+0x5e>
 801a79a:	68b1      	ldr	r1, [r6, #8]
 801a79c:	466a      	mov	r2, sp
 801a79e:	2020      	movs	r0, #32
 801a7a0:	1ae5      	subs	r5, r4, r3
 801a7a2:	428d      	cmp	r5, r1
 801a7a4:	da01      	bge.n	801a7aa <_format_int+0x5e>
 801a7a6:	4293      	cmp	r3, r2
 801a7a8:	d820      	bhi.n	801a7ec <_format_int+0xa0>
 801a7aa:	1ae5      	subs	r5, r4, r3
 801a7ac:	1c5c      	adds	r4, r3, #1
 801a7ae:	ab10      	add	r3, sp, #64	@ 0x40
 801a7b0:	429c      	cmp	r4, r3
 801a7b2:	d31e      	bcc.n	801a7f2 <_format_int+0xa6>
 801a7b4:	68b3      	ldr	r3, [r6, #8]
 801a7b6:	42ab      	cmp	r3, r5
 801a7b8:	dc21      	bgt.n	801a7fe <_format_int+0xb2>
 801a7ba:	b011      	add	sp, #68	@ 0x44
 801a7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7be:	4623      	mov	r3, r4
 801a7c0:	200a      	movs	r0, #10
 801a7c2:	466f      	mov	r7, sp
 801a7c4:	fbb1 f5f0 	udiv	r5, r1, r0
 801a7c8:	fb00 1215 	mls	r2, r0, r5, r1
 801a7cc:	3230      	adds	r2, #48	@ 0x30
 801a7ce:	f803 2901 	strb.w	r2, [r3], #-1
 801a7d2:	460a      	mov	r2, r1
 801a7d4:	2a09      	cmp	r2, #9
 801a7d6:	4629      	mov	r1, r5
 801a7d8:	d9c3      	bls.n	801a762 <_format_int+0x16>
 801a7da:	42bb      	cmp	r3, r7
 801a7dc:	d1f2      	bne.n	801a7c4 <_format_int+0x78>
 801a7de:	e7c0      	b.n	801a762 <_format_int+0x16>
 801a7e0:	f803 5901 	strb.w	r5, [r3], #-1
 801a7e4:	e7c3      	b.n	801a76e <_format_int+0x22>
 801a7e6:	f803 5901 	strb.w	r5, [r3], #-1
 801a7ea:	e7ca      	b.n	801a782 <_format_int+0x36>
 801a7ec:	f803 0901 	strb.w	r0, [r3], #-1
 801a7f0:	e7d6      	b.n	801a7a0 <_format_int+0x54>
 801a7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7f6:	4630      	mov	r0, r6
 801a7f8:	f7ff ff90 	bl	801a71c <_xputch>
 801a7fc:	e7d7      	b.n	801a7ae <_format_int+0x62>
 801a7fe:	2120      	movs	r1, #32
 801a800:	4630      	mov	r0, r6
 801a802:	f7ff ff8b 	bl	801a71c <_xputch>
 801a806:	3501      	adds	r5, #1
 801a808:	e7d4      	b.n	801a7b4 <_format_int+0x68>

0801a80a <_format_hex>:
 801a80a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a80c:	b091      	sub	sp, #68	@ 0x44
 801a80e:	6804      	ldr	r4, [r0, #0]
 801a810:	4606      	mov	r6, r0
 801a812:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 801a816:	bb61      	cbnz	r1, 801a872 <_format_hex+0x68>
 801a818:	2330      	movs	r3, #48	@ 0x30
 801a81a:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801a81e:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801a822:	07e5      	lsls	r5, r4, #31
 801a824:	d507      	bpl.n	801a836 <_format_hex+0x2c>
 801a826:	6870      	ldr	r0, [r6, #4]
 801a828:	4669      	mov	r1, sp
 801a82a:	2530      	movs	r5, #48	@ 0x30
 801a82c:	1ad7      	subs	r7, r2, r3
 801a82e:	4287      	cmp	r7, r0
 801a830:	da01      	bge.n	801a836 <_format_hex+0x2c>
 801a832:	428b      	cmp	r3, r1
 801a834:	d831      	bhi.n	801a89a <_format_hex+0x90>
 801a836:	06a0      	lsls	r0, r4, #26
 801a838:	d507      	bpl.n	801a84a <_format_hex+0x40>
 801a83a:	68b0      	ldr	r0, [r6, #8]
 801a83c:	4669      	mov	r1, sp
 801a83e:	2530      	movs	r5, #48	@ 0x30
 801a840:	1ad7      	subs	r7, r2, r3
 801a842:	4287      	cmp	r7, r0
 801a844:	da01      	bge.n	801a84a <_format_hex+0x40>
 801a846:	428b      	cmp	r3, r1
 801a848:	d82a      	bhi.n	801a8a0 <_format_hex+0x96>
 801a84a:	0661      	lsls	r1, r4, #25
 801a84c:	d407      	bmi.n	801a85e <_format_hex+0x54>
 801a84e:	68b0      	ldr	r0, [r6, #8]
 801a850:	4669      	mov	r1, sp
 801a852:	2420      	movs	r4, #32
 801a854:	1ad5      	subs	r5, r2, r3
 801a856:	4285      	cmp	r5, r0
 801a858:	da01      	bge.n	801a85e <_format_hex+0x54>
 801a85a:	428b      	cmp	r3, r1
 801a85c:	d823      	bhi.n	801a8a6 <_format_hex+0x9c>
 801a85e:	1ad5      	subs	r5, r2, r3
 801a860:	1c5c      	adds	r4, r3, #1
 801a862:	ab10      	add	r3, sp, #64	@ 0x40
 801a864:	429c      	cmp	r4, r3
 801a866:	d321      	bcc.n	801a8ac <_format_hex+0xa2>
 801a868:	68b3      	ldr	r3, [r6, #8]
 801a86a:	42ab      	cmp	r3, r5
 801a86c:	dc24      	bgt.n	801a8b8 <_format_hex+0xae>
 801a86e:	b011      	add	sp, #68	@ 0x44
 801a870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a872:	f014 0f02 	tst.w	r4, #2
 801a876:	bf0c      	ite	eq
 801a878:	2757      	moveq	r7, #87	@ 0x57
 801a87a:	2737      	movne	r7, #55	@ 0x37
 801a87c:	4613      	mov	r3, r2
 801a87e:	466d      	mov	r5, sp
 801a880:	f001 000f 	and.w	r0, r1, #15
 801a884:	2809      	cmp	r0, #9
 801a886:	bf94      	ite	ls
 801a888:	3030      	addls	r0, #48	@ 0x30
 801a88a:	19c0      	addhi	r0, r0, r7
 801a88c:	0909      	lsrs	r1, r1, #4
 801a88e:	f803 0901 	strb.w	r0, [r3], #-1
 801a892:	d0c6      	beq.n	801a822 <_format_hex+0x18>
 801a894:	42ab      	cmp	r3, r5
 801a896:	d1f3      	bne.n	801a880 <_format_hex+0x76>
 801a898:	e7c3      	b.n	801a822 <_format_hex+0x18>
 801a89a:	f803 5901 	strb.w	r5, [r3], #-1
 801a89e:	e7c5      	b.n	801a82c <_format_hex+0x22>
 801a8a0:	f803 5901 	strb.w	r5, [r3], #-1
 801a8a4:	e7cc      	b.n	801a840 <_format_hex+0x36>
 801a8a6:	f803 4901 	strb.w	r4, [r3], #-1
 801a8aa:	e7d3      	b.n	801a854 <_format_hex+0x4a>
 801a8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8b0:	4630      	mov	r0, r6
 801a8b2:	f7ff ff33 	bl	801a71c <_xputch>
 801a8b6:	e7d4      	b.n	801a862 <_format_hex+0x58>
 801a8b8:	2120      	movs	r1, #32
 801a8ba:	4630      	mov	r0, r6
 801a8bc:	f7ff ff2e 	bl	801a71c <_xputch>
 801a8c0:	3501      	adds	r5, #1
 801a8c2:	e7d1      	b.n	801a868 <_format_hex+0x5e>

0801a8c4 <_vprintf>:
 801a8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8c8:	2700      	movs	r7, #0
 801a8ca:	b096      	sub	sp, #88	@ 0x58
 801a8cc:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	4614      	mov	r4, r2
 801a8d4:	f04f 080a 	mov.w	r8, #10
 801a8d8:	7819      	ldrb	r1, [r3, #0]
 801a8da:	b919      	cbnz	r1, 801a8e4 <_vprintf+0x20>
 801a8dc:	9804      	ldr	r0, [sp, #16]
 801a8de:	b016      	add	sp, #88	@ 0x58
 801a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8e4:	2925      	cmp	r1, #37	@ 0x25
 801a8e6:	f103 0501 	add.w	r5, r3, #1
 801a8ea:	d004      	beq.n	801a8f6 <_vprintf+0x32>
 801a8ec:	a801      	add	r0, sp, #4
 801a8ee:	f7ff ff15 	bl	801a71c <_xputch>
 801a8f2:	462b      	mov	r3, r5
 801a8f4:	e7f0      	b.n	801a8d8 <_vprintf+0x14>
 801a8f6:	785a      	ldrb	r2, [r3, #1]
 801a8f8:	9703      	str	r7, [sp, #12]
 801a8fa:	2a30      	cmp	r2, #48	@ 0x30
 801a8fc:	e9cd 7701 	strd	r7, r7, [sp, #4]
 801a900:	d127      	bne.n	801a952 <_vprintf+0x8e>
 801a902:	2220      	movs	r2, #32
 801a904:	9201      	str	r2, [sp, #4]
 801a906:	1c9d      	adds	r5, r3, #2
 801a908:	2200      	movs	r2, #0
 801a90a:	462e      	mov	r6, r5
 801a90c:	4613      	mov	r3, r2
 801a90e:	7831      	ldrb	r1, [r6, #0]
 801a910:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 801a914:	2809      	cmp	r0, #9
 801a916:	4635      	mov	r5, r6
 801a918:	f106 0601 	add.w	r6, r6, #1
 801a91c:	d91d      	bls.n	801a95a <_vprintf+0x96>
 801a91e:	b12a      	cbz	r2, 801a92c <_vprintf+0x68>
 801a920:	9303      	str	r3, [sp, #12]
 801a922:	b11b      	cbz	r3, 801a92c <_vprintf+0x68>
 801a924:	9b01      	ldr	r3, [sp, #4]
 801a926:	f043 0310 	orr.w	r3, r3, #16
 801a92a:	9301      	str	r3, [sp, #4]
 801a92c:	292e      	cmp	r1, #46	@ 0x2e
 801a92e:	d123      	bne.n	801a978 <_vprintf+0xb4>
 801a930:	786b      	ldrb	r3, [r5, #1]
 801a932:	2b2a      	cmp	r3, #42	@ 0x2a
 801a934:	d015      	beq.n	801a962 <_vprintf+0x9e>
 801a936:	2100      	movs	r1, #0
 801a938:	1c68      	adds	r0, r5, #1
 801a93a:	460a      	mov	r2, r1
 801a93c:	260a      	movs	r6, #10
 801a93e:	7803      	ldrb	r3, [r0, #0]
 801a940:	3b30      	subs	r3, #48	@ 0x30
 801a942:	2b09      	cmp	r3, #9
 801a944:	4605      	mov	r5, r0
 801a946:	f100 0001 	add.w	r0, r0, #1
 801a94a:	d959      	bls.n	801aa00 <_vprintf+0x13c>
 801a94c:	b181      	cbz	r1, 801a970 <_vprintf+0xac>
 801a94e:	9202      	str	r2, [sp, #8]
 801a950:	e00e      	b.n	801a970 <_vprintf+0xac>
 801a952:	2a2d      	cmp	r2, #45	@ 0x2d
 801a954:	d1d8      	bne.n	801a908 <_vprintf+0x44>
 801a956:	2240      	movs	r2, #64	@ 0x40
 801a958:	e7d4      	b.n	801a904 <_vprintf+0x40>
 801a95a:	fb08 0303 	mla	r3, r8, r3, r0
 801a95e:	2201      	movs	r2, #1
 801a960:	e7d5      	b.n	801a90e <_vprintf+0x4a>
 801a962:	f854 3b04 	ldr.w	r3, [r4], #4
 801a966:	2b00      	cmp	r3, #0
 801a968:	bfb8      	it	lt
 801a96a:	425b      	neglt	r3, r3
 801a96c:	3502      	adds	r5, #2
 801a96e:	9302      	str	r3, [sp, #8]
 801a970:	9b01      	ldr	r3, [sp, #4]
 801a972:	f043 0301 	orr.w	r3, r3, #1
 801a976:	9301      	str	r3, [sp, #4]
 801a978:	782b      	ldrb	r3, [r5, #0]
 801a97a:	2b6c      	cmp	r3, #108	@ 0x6c
 801a97c:	bf04      	itt	eq
 801a97e:	3501      	addeq	r5, #1
 801a980:	9b01      	ldreq	r3, [sp, #4]
 801a982:	7829      	ldrb	r1, [r5, #0]
 801a984:	bf04      	itt	eq
 801a986:	f043 0304 	orreq.w	r3, r3, #4
 801a98a:	9301      	streq	r3, [sp, #4]
 801a98c:	2958      	cmp	r1, #88	@ 0x58
 801a98e:	f000 8143 	beq.w	801ac18 <_vprintf+0x354>
 801a992:	f1a1 0363 	sub.w	r3, r1, #99	@ 0x63
 801a996:	b2da      	uxtb	r2, r3
 801a998:	2a15      	cmp	r2, #21
 801a99a:	d8a7      	bhi.n	801a8ec <_vprintf+0x28>
 801a99c:	2b15      	cmp	r3, #21
 801a99e:	d8a5      	bhi.n	801a8ec <_vprintf+0x28>
 801a9a0:	a201      	add	r2, pc, #4	@ (adr r2, 801a9a8 <_vprintf+0xe4>)
 801a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9a6:	bf00      	nop
 801a9a8:	0801aa09 	stmdaeq	r1, {r0, r3, r9, fp, sp, pc}
 801a9ac:	0801aa17 	stmdaeq	r1, {r0, r1, r2, r4, r9, fp, sp, pc}
 801a9b0:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9b4:	0801aa31 	stmdaeq	r1, {r0, r4, r5, r9, fp, sp, pc}
 801a9b8:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9bc:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9c0:	0801aa17 	stmdaeq	r1, {r0, r1, r2, r4, r9, fp, sp, pc}
 801a9c4:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9c8:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9cc:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9d0:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9d4:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9d8:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9dc:	0801ab79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, fp, sp, pc}
 801a9e0:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9e4:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9e8:	0801ab9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, fp, sp, pc}
 801a9ec:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9f0:	0801ac13 	stmdaeq	r1, {r0, r1, r4, sl, fp, sp, pc}
 801a9f4:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9f8:	0801a8ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 801a9fc:	0801ac21 	stmdaeq	r1, {r0, r5, sl, fp, sp, pc}
 801aa00:	fb06 3202 	mla	r2, r6, r2, r3
 801aa04:	2101      	movs	r1, #1
 801aa06:	e79a      	b.n	801a93e <_vprintf+0x7a>
 801aa08:	f854 1b04 	ldr.w	r1, [r4], #4
 801aa0c:	a801      	add	r0, sp, #4
 801aa0e:	f7ff fe85 	bl	801a71c <_xputch>
 801aa12:	3501      	adds	r5, #1
 801aa14:	e76d      	b.n	801a8f2 <_vprintf+0x2e>
 801aa16:	f854 1b04 	ldr.w	r1, [r4], #4
 801aa1a:	9b01      	ldr	r3, [sp, #4]
 801aa1c:	2900      	cmp	r1, #0
 801aa1e:	da03      	bge.n	801aa28 <_vprintf+0x164>
 801aa20:	f043 0308 	orr.w	r3, r3, #8
 801aa24:	9301      	str	r3, [sp, #4]
 801aa26:	4249      	negs	r1, r1
 801aa28:	a801      	add	r0, sp, #4
 801aa2a:	f7ff fe8f 	bl	801a74c <_format_int>
 801aa2e:	e7f0      	b.n	801aa12 <_vprintf+0x14e>
 801aa30:	3407      	adds	r4, #7
 801aa32:	f024 0407 	bic.w	r4, r4, #7
 801aa36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801aa3a:	f7ee fc57 	bl	80092ec <__aeabi_d2f>
 801aa3e:	9b01      	ldr	r3, [sp, #4]
 801aa40:	ee07 0a90 	vmov	s15, r0
 801aa44:	07de      	lsls	r6, r3, #31
 801aa46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801aa4a:	bf4c      	ite	mi
 801aa4c:	9e02      	ldrmi	r6, [sp, #8]
 801aa4e:	2606      	movpl	r6, #6
 801aa50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa54:	bf48      	it	mi
 801aa56:	eef1 7a67 	vnegmi.f32	s15, s15
 801aa5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801aa5e:	bf4a      	itet	mi
 801aa60:	f10d 0a19 	addmi.w	sl, sp, #25
 801aa64:	f10d 0a18 	addpl.w	sl, sp, #24
 801aa68:	232d      	movmi	r3, #45	@ 0x2d
 801aa6a:	ee17 0a10 	vmov	r0, s14
 801aa6e:	f04f 0200 	mov.w	r2, #0
 801aa72:	4651      	mov	r1, sl
 801aa74:	bf48      	it	mi
 801aa76:	f88d 3018 	strbmi.w	r3, [sp, #24]
 801aa7a:	f7ff fe13 	bl	801a6a4 <_itostr>
 801aa7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aa82:	232e      	movs	r3, #46	@ 0x2e
 801aa84:	f80a 3000 	strb.w	r3, [sl, r0]
 801aa88:	eb0a 0900 	add.w	r9, sl, r0
 801aa8c:	230a      	movs	r3, #10
 801aa8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa92:	1c72      	adds	r2, r6, #1
 801aa94:	f109 0901 	add.w	r9, r9, #1
 801aa98:	4619      	mov	r1, r3
 801aa9a:	2e00      	cmp	r6, #0
 801aa9c:	dc41      	bgt.n	801ab22 <_vprintf+0x25e>
 801aa9e:	ee07 3a10 	vmov	s14, r3
 801aaa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aaa6:	4649      	mov	r1, r9
 801aaa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aaac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aab0:	ee17 0a90 	vmov	r0, s15
 801aab4:	f7ff fdf6 	bl	801a6a4 <_itostr>
 801aab8:	4448      	add	r0, r9
 801aaba:	f10d 0918 	add.w	r9, sp, #24
 801aabe:	eba0 0009 	sub.w	r0, r0, r9
 801aac2:	1e46      	subs	r6, r0, #1
 801aac4:	eb09 0206 	add.w	r2, r9, r6
 801aac8:	f819 3006 	ldrb.w	r3, [r9, r6]
 801aacc:	2b34      	cmp	r3, #52	@ 0x34
 801aace:	d911      	bls.n	801aaf4 <_vprintf+0x230>
 801aad0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801aad4:	292e      	cmp	r1, #46	@ 0x2e
 801aad6:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
 801aada:	d028      	beq.n	801ab2e <_vprintf+0x26a>
 801aadc:	469c      	mov	ip, r3
 801aade:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 801aae2:	4663      	mov	r3, ip
 801aae4:	f81c 1901 	ldrb.w	r1, [ip], #-1
 801aae8:	2939      	cmp	r1, #57	@ 0x39
 801aaea:	d01d      	beq.n	801ab28 <_vprintf+0x264>
 801aaec:	292e      	cmp	r1, #46	@ 0x2e
 801aaee:	d01e      	beq.n	801ab2e <_vprintf+0x26a>
 801aaf0:	3101      	adds	r1, #1
 801aaf2:	7019      	strb	r1, [r3, #0]
 801aaf4:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801aaf8:	446b      	add	r3, sp
 801aafa:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 801aafe:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab00:	bf08      	it	eq
 801ab02:	f106 36ff 	addeq.w	r6, r6, #4294967295	@ 0xffffffff
 801ab06:	46b2      	mov	sl, r6
 801ab08:	9b03      	ldr	r3, [sp, #12]
 801ab0a:	4553      	cmp	r3, sl
 801ab0c:	dc2d      	bgt.n	801ab6a <_vprintf+0x2a6>
 801ab0e:	2e00      	cmp	r6, #0
 801ab10:	f77f af7f 	ble.w	801aa12 <_vprintf+0x14e>
 801ab14:	f819 1b01 	ldrb.w	r1, [r9], #1
 801ab18:	a801      	add	r0, sp, #4
 801ab1a:	f7ff fdff 	bl	801a71c <_xputch>
 801ab1e:	3e01      	subs	r6, #1
 801ab20:	e7f5      	b.n	801ab0e <_vprintf+0x24a>
 801ab22:	434b      	muls	r3, r1
 801ab24:	3e01      	subs	r6, #1
 801ab26:	e7b8      	b.n	801aa9a <_vprintf+0x1d6>
 801ab28:	f88c e001 	strb.w	lr, [ip, #1]
 801ab2c:	e7d9      	b.n	801aae2 <_vprintf+0x21e>
 801ab2e:	3b01      	subs	r3, #1
 801ab30:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801ab34:	7819      	ldrb	r1, [r3, #0]
 801ab36:	2939      	cmp	r1, #57	@ 0x39
 801ab38:	d10d      	bne.n	801ab56 <_vprintf+0x292>
 801ab3a:	454b      	cmp	r3, r9
 801ab3c:	d208      	bcs.n	801ab50 <_vprintf+0x28c>
 801ab3e:	1c51      	adds	r1, r2, #1
 801ab40:	1c9e      	adds	r6, r3, #2
 801ab42:	3202      	adds	r2, #2
 801ab44:	4296      	cmp	r6, r2
 801ab46:	d10b      	bne.n	801ab60 <_vprintf+0x29c>
 801ab48:	2231      	movs	r2, #49	@ 0x31
 801ab4a:	705a      	strb	r2, [r3, #1]
 801ab4c:	4606      	mov	r6, r0
 801ab4e:	e7d1      	b.n	801aaf4 <_vprintf+0x230>
 801ab50:	f803 c901 	strb.w	ip, [r3], #-1
 801ab54:	e7ee      	b.n	801ab34 <_vprintf+0x270>
 801ab56:	454b      	cmp	r3, r9
 801ab58:	d3f1      	bcc.n	801ab3e <_vprintf+0x27a>
 801ab5a:	292d      	cmp	r1, #45	@ 0x2d
 801ab5c:	d1c8      	bne.n	801aaf0 <_vprintf+0x22c>
 801ab5e:	e7ee      	b.n	801ab3e <_vprintf+0x27a>
 801ab60:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 801ab64:	f802 cd01 	strb.w	ip, [r2, #-1]!
 801ab68:	e7ec      	b.n	801ab44 <_vprintf+0x280>
 801ab6a:	2120      	movs	r1, #32
 801ab6c:	a801      	add	r0, sp, #4
 801ab6e:	f7ff fdd5 	bl	801a71c <_xputch>
 801ab72:	f10a 0a01 	add.w	sl, sl, #1
 801ab76:	e7c7      	b.n	801ab08 <_vprintf+0x244>
 801ab78:	2308      	movs	r3, #8
 801ab7a:	f854 6b04 	ldr.w	r6, [r4], #4
 801ab7e:	9303      	str	r3, [sp, #12]
 801ab80:	2130      	movs	r1, #48	@ 0x30
 801ab82:	2320      	movs	r3, #32
 801ab84:	a801      	add	r0, sp, #4
 801ab86:	9301      	str	r3, [sp, #4]
 801ab88:	f7ff fdc8 	bl	801a71c <_xputch>
 801ab8c:	2178      	movs	r1, #120	@ 0x78
 801ab8e:	a801      	add	r0, sp, #4
 801ab90:	f7ff fdc4 	bl	801a71c <_xputch>
 801ab94:	4631      	mov	r1, r6
 801ab96:	a801      	add	r0, sp, #4
 801ab98:	f7ff fe37 	bl	801a80a <_format_hex>
 801ab9c:	e739      	b.n	801aa12 <_vprintf+0x14e>
 801ab9e:	f854 9b04 	ldr.w	r9, [r4], #4
 801aba2:	2600      	movs	r6, #0
 801aba4:	f819 3006 	ldrb.w	r3, [r9, r6]
 801aba8:	b993      	cbnz	r3, 801abd0 <_vprintf+0x30c>
 801abaa:	9b01      	ldr	r3, [sp, #4]
 801abac:	07d9      	lsls	r1, r3, #31
 801abae:	d503      	bpl.n	801abb8 <_vprintf+0x2f4>
 801abb0:	9b02      	ldr	r3, [sp, #8]
 801abb2:	429e      	cmp	r6, r3
 801abb4:	bfa8      	it	ge
 801abb6:	461e      	movge	r6, r3
 801abb8:	9b01      	ldr	r3, [sp, #4]
 801abba:	065a      	lsls	r2, r3, #25
 801abbc:	f106 0a01 	add.w	sl, r6, #1
 801abc0:	d403      	bmi.n	801abca <_vprintf+0x306>
 801abc2:	9b03      	ldr	r3, [sp, #12]
 801abc4:	429e      	cmp	r6, r3
 801abc6:	db05      	blt.n	801abd4 <_vprintf+0x310>
 801abc8:	4656      	mov	r6, sl
 801abca:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801abce:	e00d      	b.n	801abec <_vprintf+0x328>
 801abd0:	3601      	adds	r6, #1
 801abd2:	e7e7      	b.n	801aba4 <_vprintf+0x2e0>
 801abd4:	2120      	movs	r1, #32
 801abd6:	a801      	add	r0, sp, #4
 801abd8:	f7ff fda0 	bl	801a71c <_xputch>
 801abdc:	4656      	mov	r6, sl
 801abde:	e7eb      	b.n	801abb8 <_vprintf+0x2f4>
 801abe0:	a801      	add	r0, sp, #4
 801abe2:	f7ff fd9b 	bl	801a71c <_xputch>
 801abe6:	9b02      	ldr	r3, [sp, #8]
 801abe8:	3b01      	subs	r3, #1
 801abea:	9302      	str	r3, [sp, #8]
 801abec:	9b01      	ldr	r3, [sp, #4]
 801abee:	07db      	lsls	r3, r3, #31
 801abf0:	d501      	bpl.n	801abf6 <_vprintf+0x332>
 801abf2:	9b02      	ldr	r3, [sp, #8]
 801abf4:	b11b      	cbz	r3, 801abfe <_vprintf+0x33a>
 801abf6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 801abfa:	2900      	cmp	r1, #0
 801abfc:	d1f0      	bne.n	801abe0 <_vprintf+0x31c>
 801abfe:	9b03      	ldr	r3, [sp, #12]
 801ac00:	42b3      	cmp	r3, r6
 801ac02:	f77f af06 	ble.w	801aa12 <_vprintf+0x14e>
 801ac06:	2120      	movs	r1, #32
 801ac08:	a801      	add	r0, sp, #4
 801ac0a:	f7ff fd87 	bl	801a71c <_xputch>
 801ac0e:	3601      	adds	r6, #1
 801ac10:	e7f5      	b.n	801abfe <_vprintf+0x33a>
 801ac12:	f854 1b04 	ldr.w	r1, [r4], #4
 801ac16:	e707      	b.n	801aa28 <_vprintf+0x164>
 801ac18:	9b01      	ldr	r3, [sp, #4]
 801ac1a:	f043 0302 	orr.w	r3, r3, #2
 801ac1e:	9301      	str	r3, [sp, #4]
 801ac20:	f854 1b04 	ldr.w	r1, [r4], #4
 801ac24:	e7b7      	b.n	801ab96 <_vprintf+0x2d2>
 801ac26:	bf00      	nop

0801ac28 <printf>:
 801ac28:	b40f      	push	{r0, r1, r2, r3}
 801ac2a:	b507      	push	{r0, r1, r2, lr}
 801ac2c:	aa04      	add	r2, sp, #16
 801ac2e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801ac32:	f852 1b04 	ldr.w	r1, [r2], #4
 801ac36:	9201      	str	r2, [sp, #4]
 801ac38:	f7ff fe44 	bl	801a8c4 <_vprintf>
 801ac3c:	b003      	add	sp, #12
 801ac3e:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac42:	b004      	add	sp, #16
 801ac44:	4770      	bx	lr
	...

0801ac48 <sprintf>:
 801ac48:	b40e      	push	{r1, r2, r3}
 801ac4a:	b517      	push	{r0, r1, r2, r4, lr}
 801ac4c:	4c09      	ldr	r4, [pc, #36]	@ (801ac74 <sprintf+0x2c>)
 801ac4e:	aa05      	add	r2, sp, #20
 801ac50:	6020      	str	r0, [r4, #0]
 801ac52:	f852 1b04 	ldr.w	r1, [r2], #4
 801ac56:	9201      	str	r2, [sp, #4]
 801ac58:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801ac5c:	f7ff fe32 	bl	801a8c4 <_vprintf>
 801ac60:	6822      	ldr	r2, [r4, #0]
 801ac62:	2300      	movs	r3, #0
 801ac64:	7013      	strb	r3, [r2, #0]
 801ac66:	6023      	str	r3, [r4, #0]
 801ac68:	b003      	add	sp, #12
 801ac6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac6e:	b003      	add	sp, #12
 801ac70:	4770      	bx	lr
 801ac72:	bf00      	nop
 801ac74:	2001a630 	andcs	sl, r1, r0, lsr r6

0801ac78 <snprintf>:
 801ac78:	b40c      	push	{r2, r3}
 801ac7a:	b513      	push	{r0, r1, r4, lr}
 801ac7c:	4c09      	ldr	r4, [pc, #36]	@ (801aca4 <snprintf+0x2c>)
 801ac7e:	aa04      	add	r2, sp, #16
 801ac80:	460b      	mov	r3, r1
 801ac82:	6020      	str	r0, [r4, #0]
 801ac84:	f852 1b04 	ldr.w	r1, [r2], #4
 801ac88:	9201      	str	r2, [sp, #4]
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f7ff fe1a 	bl	801a8c4 <_vprintf>
 801ac90:	6822      	ldr	r2, [r4, #0]
 801ac92:	2300      	movs	r3, #0
 801ac94:	7013      	strb	r3, [r2, #0]
 801ac96:	6023      	str	r3, [r4, #0]
 801ac98:	b002      	add	sp, #8
 801ac9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac9e:	b002      	add	sp, #8
 801aca0:	4770      	bx	lr
 801aca2:	bf00      	nop
 801aca4:	2001a630 	andcs	sl, r1, r0, lsr r6

0801aca8 <vsnprintf>:
 801aca8:	b538      	push	{r3, r4, r5, lr}
 801acaa:	4c06      	ldr	r4, [pc, #24]	@ (801acc4 <vsnprintf+0x1c>)
 801acac:	4605      	mov	r5, r0
 801acae:	4608      	mov	r0, r1
 801acb0:	4611      	mov	r1, r2
 801acb2:	461a      	mov	r2, r3
 801acb4:	6025      	str	r5, [r4, #0]
 801acb6:	f7ff fe05 	bl	801a8c4 <_vprintf>
 801acba:	6822      	ldr	r2, [r4, #0]
 801acbc:	2300      	movs	r3, #0
 801acbe:	7013      	strb	r3, [r2, #0]
 801acc0:	6023      	str	r3, [r4, #0]
 801acc2:	bd38      	pop	{r3, r4, r5, pc}
 801acc4:	2001a630 	andcs	sl, r1, r0, lsr r6

0801acc8 <putchar>:
 801acc8:	b508      	push	{r3, lr}
 801acca:	f7fd fca1 	bl	8018610 <console_putc>
 801acce:	2001      	movs	r0, #1
 801acd0:	bd08      	pop	{r3, pc}

0801acd2 <puts>:
 801acd2:	b508      	push	{r3, lr}
 801acd4:	f7fd fc9e 	bl	8018614 <console_puts>
 801acd8:	200a      	movs	r0, #10
 801acda:	f7fd fc99 	bl	8018610 <console_putc>
 801acde:	2001      	movs	r0, #1
 801ace0:	bd08      	pop	{r3, pc}
	...

0801ace4 <random>:
 801ace4:	4a06      	ldr	r2, [pc, #24]	@ (801ad00 <random+0x1c>)
 801ace6:	6813      	ldr	r3, [r2, #0]
 801ace8:	10d8      	asrs	r0, r3, #3
 801acea:	ea80 00a3 	eor.w	r0, r0, r3, asr #2
 801acee:	4058      	eors	r0, r3
 801acf0:	ea80 1063 	eor.w	r0, r0, r3, asr #5
 801acf4:	03c0      	lsls	r0, r0, #15
 801acf6:	b280      	uxth	r0, r0
 801acf8:	ea40 0063 	orr.w	r0, r0, r3, asr #1
 801acfc:	6010      	str	r0, [r2, #0]
 801acfe:	4770      	bx	lr
 801ad00:	20000008 	andcs	r0, r0, r8

0801ad04 <strtok>:
 801ad04:	b570      	push	{r4, r5, r6, lr}
 801ad06:	4603      	mov	r3, r0
 801ad08:	b910      	cbnz	r0, 801ad10 <strtok+0xc>
 801ad0a:	4b12      	ldr	r3, [pc, #72]	@ (801ad54 <strtok+0x50>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	b14b      	cbz	r3, 801ad24 <strtok+0x20>
 801ad10:	4618      	mov	r0, r3
 801ad12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad16:	460d      	mov	r5, r1
 801ad18:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad1c:	b924      	cbnz	r4, 801ad28 <strtok+0x24>
 801ad1e:	b94a      	cbnz	r2, 801ad34 <strtok+0x30>
 801ad20:	4b0c      	ldr	r3, [pc, #48]	@ (801ad54 <strtok+0x50>)
 801ad22:	601a      	str	r2, [r3, #0]
 801ad24:	2000      	movs	r0, #0
 801ad26:	bd70      	pop	{r4, r5, r6, pc}
 801ad28:	42a2      	cmp	r2, r4
 801ad2a:	d1f5      	bne.n	801ad18 <strtok+0x14>
 801ad2c:	e7f0      	b.n	801ad10 <strtok+0xc>
 801ad2e:	4613      	mov	r3, r2
 801ad30:	e00c      	b.n	801ad4c <strtok+0x48>
 801ad32:	b91c      	cbnz	r4, 801ad3c <strtok+0x38>
 801ad34:	461e      	mov	r6, r3
 801ad36:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad3a:	460d      	mov	r5, r1
 801ad3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad40:	42a2      	cmp	r2, r4
 801ad42:	d1f6      	bne.n	801ad32 <strtok+0x2e>
 801ad44:	2a00      	cmp	r2, #0
 801ad46:	d0f2      	beq.n	801ad2e <strtok+0x2a>
 801ad48:	2200      	movs	r2, #0
 801ad4a:	7032      	strb	r2, [r6, #0]
 801ad4c:	4a01      	ldr	r2, [pc, #4]	@ (801ad54 <strtok+0x50>)
 801ad4e:	6013      	str	r3, [r2, #0]
 801ad50:	e7e9      	b.n	801ad26 <strtok+0x22>
 801ad52:	bf00      	nop
 801ad54:	2001a634 	andcs	sl, r1, r4, lsr r6

0801ad58 <uuid_unparse_x>:
 801ad58:	b530      	push	{r4, r5, lr}
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	4608      	mov	r0, r1
 801ad5e:	4611      	mov	r1, r2
 801ad60:	681a      	ldr	r2, [r3, #0]
 801ad62:	891c      	ldrh	r4, [r3, #8]
 801ad64:	b08f      	sub	sp, #60	@ 0x3c
 801ad66:	ba12      	rev	r2, r2
 801ad68:	920a      	str	r2, [sp, #40]	@ 0x28
 801ad6a:	889a      	ldrh	r2, [r3, #4]
 801ad6c:	ba52      	rev16	r2, r2
 801ad6e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801ad72:	88da      	ldrh	r2, [r3, #6]
 801ad74:	ba64      	rev16	r4, r4
 801ad76:	ba52      	rev16	r2, r2
 801ad78:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801ad7c:	f8ad 4030 	strh.w	r4, [sp, #48]	@ 0x30
 801ad80:	f103 020a 	add.w	r2, r3, #10
 801ad84:	f10d 0431 	add.w	r4, sp, #49	@ 0x31
 801ad88:	3310      	adds	r3, #16
 801ad8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ad8e:	f804 5f01 	strb.w	r5, [r4, #1]!
 801ad92:	4293      	cmp	r3, r2
 801ad94:	d1f9      	bne.n	801ad8a <uuid_unparse_x+0x32>
 801ad96:	f89d 2037 	ldrb.w	r2, [sp, #55]	@ 0x37
 801ad9a:	9208      	str	r2, [sp, #32]
 801ad9c:	f89d 2036 	ldrb.w	r2, [sp, #54]	@ 0x36
 801ada0:	9207      	str	r2, [sp, #28]
 801ada2:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 801ada6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801adaa:	9206      	str	r2, [sp, #24]
 801adac:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
 801adb0:	9205      	str	r2, [sp, #20]
 801adb2:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 801adb6:	9204      	str	r2, [sp, #16]
 801adb8:	0a1b      	lsrs	r3, r3, #8
 801adba:	f89d 2032 	ldrb.w	r2, [sp, #50]	@ 0x32
 801adbe:	9203      	str	r2, [sp, #12]
 801adc0:	9301      	str	r3, [sp, #4]
 801adc2:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 801adc6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801adca:	9202      	str	r2, [sp, #8]
 801adcc:	9300      	str	r3, [sp, #0]
 801adce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801add0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801add4:	f7ff ff38 	bl	801ac48 <sprintf>
 801add8:	b00f      	add	sp, #60	@ 0x3c
 801adda:	bd30      	pop	{r4, r5, pc}

0801addc <uuid_unparse>:
 801addc:	4a01      	ldr	r2, [pc, #4]	@ (801ade4 <uuid_unparse+0x8>)
 801adde:	f7ff bfbb 	b.w	801ad58 <uuid_unparse_x>
 801ade2:	bf00      	nop
 801ade4:	0801c4ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, lr, pc}

0801ade8 <__assert_func>:
 801ade8:	b507      	push	{r0, r1, r2, lr}
 801adea:	460c      	mov	r4, r1
 801adec:	4619      	mov	r1, r3
 801adee:	b142      	cbz	r2, 801ae02 <__assert_func+0x1a>
 801adf0:	4b05      	ldr	r3, [pc, #20]	@ (801ae08 <__assert_func+0x20>)
 801adf2:	e9cd 3200 	strd	r3, r2, [sp]
 801adf6:	4602      	mov	r2, r0
 801adf8:	4623      	mov	r3, r4
 801adfa:	4804      	ldr	r0, [pc, #16]	@ (801ae0c <__assert_func+0x24>)
 801adfc:	f7ff ff14 	bl	801ac28 <printf>
 801ae00:	e7fe      	b.n	801ae00 <__assert_func+0x18>
 801ae02:	4b03      	ldr	r3, [pc, #12]	@ (801ae10 <__assert_func+0x28>)
 801ae04:	461a      	mov	r2, r3
 801ae06:	e7f4      	b.n	801adf2 <__assert_func+0xa>
 801ae08:	0801c51d 	stmdaeq	r1, {r0, r2, r3, r4, r8, sl, lr, pc}
 801ae0c:	0801c52a 	stmdaeq	r1, {r1, r3, r5, r8, sl, lr, pc}
 801ae10:	0801b940 	stmdaeq	r1, {r6, r8, fp, ip, sp, pc}

0801ae14 <isleapyear(int)>:
 801ae14:	2264      	movs	r2, #100	@ 0x64
 801ae16:	fb90 f3f2 	sdiv	r3, r0, r2
 801ae1a:	fb02 0313 	mls	r3, r2, r3, r0
 801ae1e:	b94b      	cbnz	r3, 801ae34 <isleapyear(int)+0x20>
 801ae20:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801ae24:	fb90 f2f3 	sdiv	r2, r0, r3
 801ae28:	fb03 0012 	mls	r0, r3, r2, r0
 801ae2c:	fab0 f080 	clz	r0, r0
 801ae30:	0940      	lsrs	r0, r0, #5
 801ae32:	4770      	bx	lr
 801ae34:	f010 0f03 	tst.w	r0, #3
 801ae38:	bf0c      	ite	eq
 801ae3a:	2001      	moveq	r0, #1
 801ae3c:	2000      	movne	r0, #0
 801ae3e:	4770      	bx	lr

0801ae40 <getdaysofmonth(int, int)>:
 801ae40:	b510      	push	{r4, lr}
 801ae42:	4604      	mov	r4, r0
 801ae44:	2c01      	cmp	r4, #1
 801ae46:	4608      	mov	r0, r1
 801ae48:	d102      	bne.n	801ae50 <getdaysofmonth(int, int)+0x10>
 801ae4a:	f7ff ffe3 	bl	801ae14 <isleapyear(int)>
 801ae4e:	b918      	cbnz	r0, 801ae58 <getdaysofmonth(int, int)+0x18>
 801ae50:	4b02      	ldr	r3, [pc, #8]	@ (801ae5c <getdaysofmonth(int, int)+0x1c>)
 801ae52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae56:	bd10      	pop	{r4, pc}
 801ae58:	201d      	movs	r0, #29
 801ae5a:	e7fc      	b.n	801ae56 <getdaysofmonth(int, int)+0x16>
 801ae5c:	0801f6d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, sl, ip, sp, lr, pc}

0801ae60 <gmtime>:
 801ae60:	b570      	push	{r4, r5, r6, lr}
 801ae62:	2800      	cmp	r0, #0
 801ae64:	d03c      	beq.n	801aee0 <gmtime+0x80>
 801ae66:	6803      	ldr	r3, [r0, #0]
 801ae68:	4d1e      	ldr	r5, [pc, #120]	@ (801aee4 <gmtime+0x84>)
 801ae6a:	213c      	movs	r1, #60	@ 0x3c
 801ae6c:	fb93 f2f1 	sdiv	r2, r3, r1
 801ae70:	fb01 3312 	mls	r3, r1, r2, r3
 801ae74:	602b      	str	r3, [r5, #0]
 801ae76:	fb92 f3f1 	sdiv	r3, r2, r1
 801ae7a:	fb01 2213 	mls	r2, r1, r3, r2
 801ae7e:	606a      	str	r2, [r5, #4]
 801ae80:	2218      	movs	r2, #24
 801ae82:	fb93 f4f2 	sdiv	r4, r3, r2
 801ae86:	fb02 3314 	mls	r3, r2, r4, r3
 801ae8a:	60ab      	str	r3, [r5, #8]
 801ae8c:	1d22      	adds	r2, r4, #4
 801ae8e:	2307      	movs	r3, #7
 801ae90:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae94:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ae98:	1ad2      	subs	r2, r2, r3
 801ae9a:	61aa      	str	r2, [r5, #24]
 801ae9c:	f240 71b2 	movw	r1, #1970	@ 0x7b2
 801aea0:	f240 166d 	movw	r6, #365	@ 0x16d
 801aea4:	4608      	mov	r0, r1
 801aea6:	f7ff ffb5 	bl	801ae14 <isleapyear(int)>
 801aeaa:	2800      	cmp	r0, #0
 801aeac:	bf0c      	ite	eq
 801aeae:	4633      	moveq	r3, r6
 801aeb0:	f44f 73b7 	movne.w	r3, #366	@ 0x16e
 801aeb4:	429c      	cmp	r4, r3
 801aeb6:	db02      	blt.n	801aebe <gmtime+0x5e>
 801aeb8:	1ae4      	subs	r4, r4, r3
 801aeba:	3101      	adds	r1, #1
 801aebc:	e7f2      	b.n	801aea4 <gmtime+0x44>
 801aebe:	f2a1 736c 	subw	r3, r1, #1900	@ 0x76c
 801aec2:	616b      	str	r3, [r5, #20]
 801aec4:	61ec      	str	r4, [r5, #28]
 801aec6:	2600      	movs	r6, #0
 801aec8:	4630      	mov	r0, r6
 801aeca:	f7ff ffb9 	bl	801ae40 <getdaysofmonth(int, int)>
 801aece:	4284      	cmp	r4, r0
 801aed0:	db02      	blt.n	801aed8 <gmtime+0x78>
 801aed2:	1a24      	subs	r4, r4, r0
 801aed4:	3601      	adds	r6, #1
 801aed6:	e7f7      	b.n	801aec8 <gmtime+0x68>
 801aed8:	3401      	adds	r4, #1
 801aeda:	4802      	ldr	r0, [pc, #8]	@ (801aee4 <gmtime+0x84>)
 801aedc:	612e      	str	r6, [r5, #16]
 801aede:	60ec      	str	r4, [r5, #12]
 801aee0:	bd70      	pop	{r4, r5, r6, pc}
 801aee2:	bf00      	nop
 801aee4:	2001a638 	andcs	sl, r1, r8, lsr r6

0801aee8 <localtime>:
 801aee8:	b507      	push	{r0, r1, r2, lr}
 801aeea:	b140      	cbz	r0, 801aefe <localtime+0x16>
 801aeec:	4b05      	ldr	r3, [pc, #20]	@ (801af04 <localtime+0x1c>)
 801aeee:	6802      	ldr	r2, [r0, #0]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	a801      	add	r0, sp, #4
 801aef6:	4413      	add	r3, r2
 801aef8:	9301      	str	r3, [sp, #4]
 801aefa:	f7ff ffb1 	bl	801ae60 <gmtime>
 801aefe:	b003      	add	sp, #12
 801af00:	f85d fb04 	ldr.w	pc, [sp], #4
 801af04:	2001a65c 	andcs	sl, r1, ip, asr r6

0801af08 <mktime>:
 801af08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af0c:	4604      	mov	r4, r0
 801af0e:	2800      	cmp	r0, #0
 801af10:	d043      	beq.n	801af9a <mktime+0x92>
 801af12:	6941      	ldr	r1, [r0, #20]
 801af14:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 801af18:	2b45      	cmp	r3, #69	@ 0x45
 801af1a:	d83e      	bhi.n	801af9a <mktime+0x92>
 801af1c:	f240 75b2 	movw	r5, #1970	@ 0x7b2
 801af20:	2600      	movs	r6, #0
 801af22:	f201 776b 	addw	r7, r1, #1899	@ 0x76b
 801af26:	f240 186d 	movw	r8, #365	@ 0x16d
 801af2a:	42af      	cmp	r7, r5
 801af2c:	da24      	bge.n	801af78 <mktime+0x70>
 801af2e:	6927      	ldr	r7, [r4, #16]
 801af30:	2f0b      	cmp	r7, #11
 801af32:	d832      	bhi.n	801af9a <mktime+0x92>
 801af34:	2500      	movs	r5, #0
 801af36:	42af      	cmp	r7, r5
 801af38:	d129      	bne.n	801af8e <mktime+0x86>
 801af3a:	68e5      	ldr	r5, [r4, #12]
 801af3c:	2d00      	cmp	r5, #0
 801af3e:	dd2c      	ble.n	801af9a <mktime+0x92>
 801af40:	4638      	mov	r0, r7
 801af42:	f7ff ff7d 	bl	801ae40 <getdaysofmonth(int, int)>
 801af46:	4285      	cmp	r5, r0
 801af48:	dc27      	bgt.n	801af9a <mktime+0x92>
 801af4a:	3d01      	subs	r5, #1
 801af4c:	2318      	movs	r3, #24
 801af4e:	4435      	add	r5, r6
 801af50:	435d      	muls	r5, r3
 801af52:	68a3      	ldr	r3, [r4, #8]
 801af54:	2b17      	cmp	r3, #23
 801af56:	d820      	bhi.n	801af9a <mktime+0x92>
 801af58:	442b      	add	r3, r5
 801af5a:	213c      	movs	r1, #60	@ 0x3c
 801af5c:	fb01 f203 	mul.w	r2, r1, r3
 801af60:	6863      	ldr	r3, [r4, #4]
 801af62:	2b3b      	cmp	r3, #59	@ 0x3b
 801af64:	d819      	bhi.n	801af9a <mktime+0x92>
 801af66:	6820      	ldr	r0, [r4, #0]
 801af68:	4413      	add	r3, r2
 801af6a:	283b      	cmp	r0, #59	@ 0x3b
 801af6c:	fb01 f303 	mul.w	r3, r1, r3
 801af70:	d813      	bhi.n	801af9a <mktime+0x92>
 801af72:	4418      	add	r0, r3
 801af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af78:	4628      	mov	r0, r5
 801af7a:	f7ff ff4b 	bl	801ae14 <isleapyear(int)>
 801af7e:	2800      	cmp	r0, #0
 801af80:	bf0c      	ite	eq
 801af82:	4643      	moveq	r3, r8
 801af84:	f44f 73b7 	movne.w	r3, #366	@ 0x16e
 801af88:	441e      	add	r6, r3
 801af8a:	3501      	adds	r5, #1
 801af8c:	e7cd      	b.n	801af2a <mktime+0x22>
 801af8e:	4628      	mov	r0, r5
 801af90:	f7ff ff56 	bl	801ae40 <getdaysofmonth(int, int)>
 801af94:	3501      	adds	r5, #1
 801af96:	4406      	add	r6, r0
 801af98:	e7cd      	b.n	801af36 <mktime+0x2e>
 801af9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801af9e:	e7e9      	b.n	801af74 <mktime+0x6c>

0801afa0 <hal::uuid_init(unsigned char*)>:
 801afa0:	4a0c      	ldr	r2, [pc, #48]	@ (801afd4 <hal::uuid_init(unsigned char*)+0x34>)
 801afa2:	b084      	sub	sp, #16
 801afa4:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
 801afa8:	9300      	str	r3, [sp, #0]
 801afaa:	f8d2 1a14 	ldr.w	r1, [r2, #2580]	@ 0xa14
 801afae:	9101      	str	r1, [sp, #4]
 801afb0:	f8d2 2a18 	ldr.w	r2, [r2, #2584]	@ 0xa18
 801afb4:	9202      	str	r2, [sp, #8]
 801afb6:	440b      	add	r3, r1
 801afb8:	4413      	add	r3, r2
 801afba:	9303      	str	r3, [sp, #12]
 801afbc:	f100 0210 	add.w	r2, r0, #16
 801afc0:	466b      	mov	r3, sp
 801afc2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801afc6:	f800 1b01 	strb.w	r1, [r0], #1
 801afca:	4282      	cmp	r2, r0
 801afcc:	d1f9      	bne.n	801afc2 <hal::uuid_init(unsigned char*)+0x22>
 801afce:	b004      	add	sp, #16
 801afd0:	4770      	bx	lr
 801afd2:	bf00      	nop
 801afd4:	1fff7000 	svcne	0x00ff7000

0801afd8 <gettimeofday>:
 801afd8:	4b13      	ldr	r3, [pc, #76]	@ (801b028 <gettimeofday+0x50>)
 801afda:	4a14      	ldr	r2, [pc, #80]	@ (801b02c <gettimeofday+0x54>)
 801afdc:	6819      	ldr	r1, [r3, #0]
 801afde:	6812      	ldr	r2, [r2, #0]
 801afe0:	b510      	push	{r4, lr}
 801afe2:	4c13      	ldr	r4, [pc, #76]	@ (801b030 <gettimeofday+0x58>)
 801afe4:	601a      	str	r2, [r3, #0]
 801afe6:	4b13      	ldr	r3, [pc, #76]	@ (801b034 <gettimeofday+0x5c>)
 801afe8:	1a51      	subs	r1, r2, r1
 801afea:	fba3 2301 	umull	r2, r3, r3, r1
 801afee:	6822      	ldr	r2, [r4, #0]
 801aff0:	ea4f 1e93 	mov.w	lr, r3, lsr #6
 801aff4:	eb02 1293 	add.w	r2, r2, r3, lsr #6
 801aff8:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 801affc:	6863      	ldr	r3, [r4, #4]
 801affe:	6022      	str	r2, [r4, #0]
 801b000:	fb0c 111e 	mls	r1, ip, lr, r1
 801b004:	fb0c 3301 	mla	r3, ip, r1, r3
 801b008:	490b      	ldr	r1, [pc, #44]	@ (801b038 <gettimeofday+0x60>)
 801b00a:	6063      	str	r3, [r4, #4]
 801b00c:	428b      	cmp	r3, r1
 801b00e:	bfc2      	ittt	gt
 801b010:	f5a3 2374 	subgt.w	r3, r3, #999424	@ 0xf4000
 801b014:	3201      	addgt	r2, #1
 801b016:	f5a3 7310 	subgt.w	r3, r3, #576	@ 0x240
 801b01a:	e9c0 2300 	strd	r2, r3, [r0]
 801b01e:	bfc8      	it	gt
 801b020:	e9c4 2300 	strdgt	r2, r3, [r4]
 801b024:	2000      	movs	r0, #0
 801b026:	bd10      	pop	{r4, pc}
 801b028:	2001a668 	andcs	sl, r1, r8, ror #12
 801b02c:	2001a628 	andcs	sl, r1, r8, lsr #12
 801b030:	2001a660 	andcs	sl, r1, r0, ror #12
 801b034:	10624dd3 	ldrdne	r4, [r2], #-211	@ 0xffffff2d	@ <UNPREDICTABLE>
 801b038:	000f423f 	andeq	r4, pc, pc, lsr r2	@ <UNPREDICTABLE>

0801b03c <settimeofday>:
 801b03c:	4a07      	ldr	r2, [pc, #28]	@ (801b05c <settimeofday+0x20>)
 801b03e:	4b08      	ldr	r3, [pc, #32]	@ (801b060 <settimeofday+0x24>)
 801b040:	4908      	ldr	r1, [pc, #32]	@ (801b064 <settimeofday+0x28>)
 801b042:	b410      	push	{r4}
 801b044:	6814      	ldr	r4, [r2, #0]
 801b046:	6844      	ldr	r4, [r0, #4]
 801b048:	6812      	ldr	r2, [r2, #0]
 801b04a:	6800      	ldr	r0, [r0, #0]
 801b04c:	605c      	str	r4, [r3, #4]
 801b04e:	6018      	str	r0, [r3, #0]
 801b050:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b054:	600a      	str	r2, [r1, #0]
 801b056:	2000      	movs	r0, #0
 801b058:	4770      	bx	lr
 801b05a:	bf00      	nop
 801b05c:	2001a628 	andcs	sl, r1, r8, lsr #12
 801b060:	2001a660 	andcs	sl, r1, r0, ror #12
 801b064:	2001a668 	andcs	sl, r1, r8, ror #12

0801b068 <time>:
 801b068:	4b13      	ldr	r3, [pc, #76]	@ (801b0b8 <time+0x50>)
 801b06a:	4914      	ldr	r1, [pc, #80]	@ (801b0bc <time+0x54>)
 801b06c:	681a      	ldr	r2, [r3, #0]
 801b06e:	b430      	push	{r4, r5}
 801b070:	680d      	ldr	r5, [r1, #0]
 801b072:	601d      	str	r5, [r3, #0]
 801b074:	4912      	ldr	r1, [pc, #72]	@ (801b0c0 <time+0x58>)
 801b076:	4b13      	ldr	r3, [pc, #76]	@ (801b0c4 <time+0x5c>)
 801b078:	1aaa      	subs	r2, r5, r2
 801b07a:	fba3 3c02 	umull	r3, ip, r3, r2
 801b07e:	680b      	ldr	r3, [r1, #0]
 801b080:	ea4f 159c 	mov.w	r5, ip, lsr #6
 801b084:	4604      	mov	r4, r0
 801b086:	eb03 109c 	add.w	r0, r3, ip, lsr #6
 801b08a:	684b      	ldr	r3, [r1, #4]
 801b08c:	6008      	str	r0, [r1, #0]
 801b08e:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 801b092:	fb0c 2215 	mls	r2, ip, r5, r2
 801b096:	fb0c 3302 	mla	r3, ip, r2, r3
 801b09a:	4a0b      	ldr	r2, [pc, #44]	@ (801b0c8 <time+0x60>)
 801b09c:	604b      	str	r3, [r1, #4]
 801b09e:	4293      	cmp	r3, r2
 801b0a0:	bfc1      	itttt	gt
 801b0a2:	f5a3 2374 	subgt.w	r3, r3, #999424	@ 0xf4000
 801b0a6:	3001      	addgt	r0, #1
 801b0a8:	f5a3 7310 	subgt.w	r3, r3, #576	@ 0x240
 801b0ac:	e9c1 0300 	strdgt	r0, r3, [r1]
 801b0b0:	b104      	cbz	r4, 801b0b4 <time+0x4c>
 801b0b2:	6020      	str	r0, [r4, #0]
 801b0b4:	bc30      	pop	{r4, r5}
 801b0b6:	4770      	bx	lr
 801b0b8:	2001a668 	andcs	sl, r1, r8, ror #12
 801b0bc:	2001a628 	andcs	sl, r1, r8, lsr #12
 801b0c0:	2001a660 	andcs	sl, r1, r0, ror #12
 801b0c4:	10624dd3 	ldrdne	r4, [r2], #-211	@ 0xffffff2d	@ <UNPREDICTABLE>
 801b0c8:	000f423f 	andeq	r4, pc, pc, lsr r2	@ <UNPREDICTABLE>

0801b0cc <operator delete[](void*)>:
 801b0cc:	f000 b838 	b.w	801b140 <free>

0801b0d0 <operator delete(void*, unsigned int)>:
 801b0d0:	f000 b836 	b.w	801b140 <free>

0801b0d4 <operator new(unsigned int)>:
 801b0d4:	f000 b802 	b.w	801b0dc <malloc>

0801b0d8 <operator new[](unsigned int)>:
 801b0d8:	f000 b800 	b.w	801b0dc <malloc>

0801b0dc <malloc>:
 801b0dc:	b510      	push	{r4, lr}
 801b0de:	b180      	cbz	r0, 801b102 <malloc+0x26>
 801b0e0:	4b12      	ldr	r3, [pc, #72]	@ (801b12c <malloc+0x50>)
 801b0e2:	681a      	ldr	r2, [r3, #0]
 801b0e4:	b97a      	cbnz	r2, 801b106 <malloc+0x2a>
 801b0e6:	4602      	mov	r2, r0
 801b0e8:	4911      	ldr	r1, [pc, #68]	@ (801b130 <malloc+0x54>)
 801b0ea:	4c12      	ldr	r4, [pc, #72]	@ (801b134 <malloc+0x58>)
 801b0ec:	6808      	ldr	r0, [r1, #0]
 801b0ee:	f102 031b 	add.w	r3, r2, #27
 801b0f2:	f023 030f 	bic.w	r3, r3, #15
 801b0f6:	4403      	add	r3, r0
 801b0f8:	42a3      	cmp	r3, r4
 801b0fa:	d911      	bls.n	801b120 <malloc+0x44>
 801b0fc:	480e      	ldr	r0, [pc, #56]	@ (801b138 <malloc+0x5c>)
 801b0fe:	f7fd fa8b 	bl	8018618 <console_error>
 801b102:	2000      	movs	r0, #0
 801b104:	bd10      	pop	{r4, pc}
 801b106:	4282      	cmp	r2, r0
 801b108:	d201      	bcs.n	801b10e <malloc+0x32>
 801b10a:	3308      	adds	r3, #8
 801b10c:	e7e9      	b.n	801b0e2 <malloc+0x6>
 801b10e:	6858      	ldr	r0, [r3, #4]
 801b110:	2800      	cmp	r0, #0
 801b112:	d0e9      	beq.n	801b0e8 <malloc+0xc>
 801b114:	6882      	ldr	r2, [r0, #8]
 801b116:	605a      	str	r2, [r3, #4]
 801b118:	2300      	movs	r3, #0
 801b11a:	6083      	str	r3, [r0, #8]
 801b11c:	300c      	adds	r0, #12
 801b11e:	e7f1      	b.n	801b104 <malloc+0x28>
 801b120:	600b      	str	r3, [r1, #0]
 801b122:	4b06      	ldr	r3, [pc, #24]	@ (801b13c <malloc+0x60>)
 801b124:	e9c0 3200 	strd	r3, r2, [r0]
 801b128:	e7f6      	b.n	801b118 <malloc+0x3c>
 801b12a:	bf00      	nop
 801b12c:	2000000c 	andcs	r0, r0, ip
 801b130:	20000074 	andcs	r0, r0, r4, ror r0
 801b134:	1000ec90 	mulne	r0, r0, ip
 801b138:	0801c559 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, lr, pc}
 801b13c:	424c4d43 	submi	r4, ip, #4288	@ 0x10c0

0801b140 <free>:
 801b140:	b138      	cbz	r0, 801b152 <free+0x12>
 801b142:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 801b146:	4b09      	ldr	r3, [pc, #36]	@ (801b16c <free+0x2c>)
 801b148:	429a      	cmp	r2, r3
 801b14a:	d102      	bne.n	801b152 <free+0x12>
 801b14c:	4b08      	ldr	r3, [pc, #32]	@ (801b170 <free+0x30>)
 801b14e:	681a      	ldr	r2, [r3, #0]
 801b150:	b902      	cbnz	r2, 801b154 <free+0x14>
 801b152:	4770      	bx	lr
 801b154:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801b158:	4291      	cmp	r1, r2
 801b15a:	d105      	bne.n	801b168 <free+0x28>
 801b15c:	685a      	ldr	r2, [r3, #4]
 801b15e:	f840 2c04 	str.w	r2, [r0, #-4]
 801b162:	380c      	subs	r0, #12
 801b164:	6058      	str	r0, [r3, #4]
 801b166:	4770      	bx	lr
 801b168:	3308      	adds	r3, #8
 801b16a:	e7f0      	b.n	801b14e <free+0xe>
 801b16c:	424c4d43 	submi	r4, ip, #4288	@ 0x10c0
 801b170:	2000000c 	andcs	r0, r0, ip

0801b174 <__popcountsi2>:
 801b174:	0843      	lsrs	r3, r0, #1
 801b176:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801b17a:	1ac0      	subs	r0, r0, r3
 801b17c:	0883      	lsrs	r3, r0, #2
 801b17e:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801b182:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 801b186:	4418      	add	r0, r3
 801b188:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 801b18c:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 801b190:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801b194:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801b198:	0e00      	lsrs	r0, r0, #24
 801b19a:	4770      	bx	lr

Disassembly of section .rodata:

0801b19c <CSWTCH.104-0x13d1>:
 801b19c:	00000000 	andeq	r0, r0, r0
 801b1a0:	00000001 	andeq	r0, r0, r1
 801b1a4:	00000002 	andeq	r0, r0, r2
 801b1a8:	00000000 	andeq	r0, r0, r0
 801b1ac:	00000002 	andeq	r0, r0, r2
 801b1b0:	00000001 	andeq	r0, r0, r1
 801b1b4:	00000001 	andeq	r0, r0, r1
 801b1b8:	00000000 	andeq	r0, r0, r0
 801b1bc:	00000002 	andeq	r0, r0, r2
 801b1c0:	00000002 	andeq	r0, r0, r2
 801b1c4:	00000000 	andeq	r0, r0, r0
 801b1c8:	00000001 	andeq	r0, r0, r1
 801b1cc:	00000001 	andeq	r0, r0, r1
 801b1d0:	00000002 	andeq	r0, r0, r2
 801b1d4:	00000000 	andeq	r0, r0, r0
 801b1d8:	00000002 	andeq	r0, r0, r2
 801b1dc:	00000001 	andeq	r0, r0, r1
	...
 801b1ec:	04030201 	streq	r0, [r3], #-513	@ 0xfffffdff
 801b1f0:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
 801b1f4:	00000000 	andeq	r0, r0, r0
 801b1f8:	04030201 	streq	r0, [r3], #-513	@ 0xfffffdff
 801b1fc:	7261485b 	rsbvc	r4, r1, #5963776	@ 0x5b0000
 801b200:	75614664 	strbvc	r4, [r1, #-1636]!	@ 0xfffff99c
 801b204:	0a5d746c 	beq	97783bc <__init_array_end+0x1758cb8>
 801b208:	53202d00 	noppl	{0}	@ <UNPREDICTABLE>
 801b20c:	6b636174 	blvs	98f37e4 <__init_array_end+0x18d40e0>
 801b210:	61726620 	cmnvs	r2, r0, lsr #12
 801b214:	0a3a656d 	beq	8eb47d0 <__init_array_end+0xe950cc>
 801b218:	30522000 	subscc	r2, r2, r0
 801b21c:	203d2020 	eorscs	r2, sp, r0, lsr #32
 801b220:	000a7825 	andeq	r7, sl, r5, lsr #16
 801b224:	20315220 	eorscs	r5, r1, r0, lsr #4
 801b228:	25203d20 	strcs	r3, [r0, #-3360]!	@ 0xfffff2e0
 801b22c:	20000a78 	andcs	r0, r0, r8, ror sl
 801b230:	20203252 	eorcs	r3, r0, r2, asr r2
 801b234:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801b238:	5220000a 	eorpl	r0, r0, #10
 801b23c:	3d202033 	stccc	0, cr2, [r0, #-204]!	@ 0xffffff34
 801b240:	0a782520 	beq	9e246c8 <__init_array_end+0x1e04fc4>
 801b244:	31522000 	cmpcc	r2, r0
 801b248:	203d2032 	eorscs	r2, sp, r2, lsr r0
 801b24c:	000a7825 	andeq	r7, sl, r5, lsr #16
 801b250:	20524c20 	subscs	r4, r2, r0, lsr #24
 801b254:	25203d20 	strcs	r3, [r0, #-3360]!	@ 0xfffff2e0
 801b258:	20000a78 	andcs	r0, r0, r8, ror sl
 801b25c:	20204350 	eorcs	r4, r0, r0, asr r3
 801b260:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801b264:	5020000a 	eorpl	r0, r0, sl
 801b268:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801b26c:	0a782520 	beq	9e246f4 <__init_array_end+0x1e04ff0>
 801b270:	46202d00 	strtmi	r2, [r0], -r0, lsl #26
 801b274:	462f5253 			@ <UNDEFINED> instruction: 0x462f5253
 801b278:	0a3a5241 	beq	8eafb84 <__init_array_end+0xe90480>
 801b27c:	46432000 	strbmi	r2, [r3], -r0
 801b280:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801b284:	0a782520 	beq	9e2470c <__init_array_end+0x1e05008>
 801b288:	46482000 	strbmi	r2, [r8], -r0
 801b28c:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801b290:	0a782520 	beq	9e24718 <__init_array_end+0x1e05014>
 801b294:	46442000 	strbmi	r2, [r4], -r0
 801b298:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801b29c:	0a782520 	beq	9e24724 <__init_array_end+0x1e05020>
 801b2a0:	46412000 	strbmi	r2, [r1], -r0
 801b2a4:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801b2a8:	0a782520 	beq	9e24730 <__init_array_end+0x1e0502c>
 801b2ac:	4d4d2000 	stclmi	0, cr2, [sp, #-0]
 801b2b0:	20524146 	subscs	r4, r2, r6, asr #2
 801b2b4:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801b2b8:	4220000a 	eormi	r0, r0, #10
 801b2bc:	20524146 	subscs	r4, r2, r6, asr #2
 801b2c0:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801b2c4:	202d000a 	eorcs	r0, sp, sl
 801b2c8:	6373694d 	cmnvs	r3, #1261568	@ 0x134000
 801b2cc:	4c20000a 	stcmi	0, cr0, [r0], #-40	@ 0xffffffd8
 801b2d0:	58452f52 	stmdapl	r5, {r1, r4, r6, r8, r9, sl, fp, sp}^
 801b2d4:	45525f43 	ldrbmi	r5, [r2, #-3907]	@ 0xfffff0bd
 801b2d8:	4e525554 	mrcmi	5, 2, r5, cr2, cr4, {2}
 801b2dc:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801b2e0:	2e2e000a 	cdpcs	0, 2, cr0, cr14, cr10, {0}
 801b2e4:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801b2e8:	74656e2d 	strbtvc	r6, [r5], #-3629	@ 0xfffff1d3
 801b2ec:	6b726f77 	blvs	9cb70d0 <__init_array_end+0x1c979cc>
 801b2f0:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801b2f4:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801b2f8:	74656e2f 	strbtvc	r6, [r5], #-3631	@ 0xfffff1d1
 801b2fc:	6368642f 	cmnvs	r8, #788529152	@ 0x2f000000
 801b300:	00682e70 	rsbeq	r2, r8, r0, ror lr
 801b304:	70636864 	rsbvc	r6, r3, r4, ror #16
 801b308:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
 801b30c:	28732500 	ldmdacs	r3!, {r8, sl, sp}^
 801b310:	73252029 			@ <UNDEFINED> instruction: 0x73252029
 801b314:	696c202c 	stmdbvs	ip!, {r2, r3, r5, sp}^
 801b318:	2520656e 	strcs	r6, [r0, #-1390]!	@ 0xfffffa92
 801b31c:	70203a69 	eorvc	r3, r0, r9, ror #20
 801b320:	70636844 	rsbvc	r6, r3, r4, asr #16
 801b324:	7373654d 	cmnvc	r3, #322961408	@ 0x13400000
 801b328:	2d656761 	stclcs	7, cr6, [r5, #-388]!	@ 0xfffffe7c
 801b32c:	6469783e 	strbtvs	r7, [r9], #-2110	@ 0xfffff7c2
 801b330:	2c75253d 	cfldr64cs	mvdx2, [r5], #-244	@ 0xffffff0c
 801b334:	63686420 	cmnvs	r8, #32, 8	@ 0x20000000
 801b338:	783e2d70 	ldmdavc	lr!, {r4, r5, r6, r8, sl, fp, sp}
 801b33c:	253d6469 	ldrcs	r6, [sp, #-1129]!	@ 0xfffffb97
 801b340:	6e000a75 			@ <UNDEFINED> instruction: 0x6e000a75
 801b344:	756c6f43 	strbvc	r6, [ip, #-3907]!	@ 0xfffff0bd
 801b348:	20736e6d 	rsbscs	r6, r3, sp, ror #28
 801b34c:	31203d3e 			@ <UNDEFINED> instruction: 0x31203d3e
 801b350:	78655400 	stmdavc	r5!, {sl, ip, lr}^
 801b354:	61745374 	cmnvs	r4, r4, ror r3
 801b358:	00737574 	rsbseq	r7, r3, r4, ror r5
 801b35c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801b2ac <_etext+0x110>
 801b360:	642d6269 	strtvs	r6, [sp], #-617	@ 0xfffffd97
 801b364:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801b368:	692f7961 	stmdbvs	pc!, {r0, r5, r6, r8, fp, ip, sp, lr}	@ <UNPREDICTABLE>
 801b36c:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801b370:	692f6564 	stmdbvs	pc!, {r2, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
 801b374:	642f6332 	strtvs	r6, [pc], #-818	@ 801b37c <_etext+0x1e0>
 801b378:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801b37c:	682e7961 	stmdavs	lr!, {r0, r5, r6, r8, fp, ip, sp, lr}
 801b380:	6f526e00 	svcvs	0x00526e00
 801b384:	3e207377 	mcrcc	3, 1, r7, cr0, cr7, {3}
 801b388:	0031203d 	eorseq	r2, r1, sp, lsr r0
 801b38c:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801b390:	6f63206c 	svcvs	0x0063206c
 801b394:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b398:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801b39c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801b3a0:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 801b3a4:	20202065 	eorcs	r2, r0, r5, rrx
 801b3a8:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b3ac:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801b3b0:	3c205d64 	stccc	13, cr5, [r0], #-400	@ 0xfffffe70
 801b3b4:	6c206425 	cfstrsvs	mvf6, [r0], #-148	@ 0xffffff6c
 801b3b8:	2f736465 	svccs	0x00736465
 801b3bc:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801b3c0:	000a3e6c 	andeq	r3, sl, ip, ror #28
 801b3c4:	756f4320 	strbvc	r4, [pc, #-800]!	@ 801b0ac <time+0x44>
 801b3c8:	2020746e 	eorcs	r7, r0, lr, ror #8
 801b3cc:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b3d0:	20000a64 	andcs	r0, r0, r4, ror #20
 801b3d4:	7070614d 	rsbsvc	r6, r0, sp, asr #2
 801b3d8:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801b3dc:	7325203a 			@ <UNDEFINED> instruction: 0x7325203a
 801b3e0:	64255b20 	strtvs	r5, [r5], #-2848	@ 0xfffff4e0
 801b3e4:	20000a5d 	andcs	r0, r0, sp, asr sl
 801b3e8:	20483054 	subcs	r3, r8, r4, asr r0
 801b3ec:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b3f0:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801b3f4:	5b206632 	blpl	8834cc4 <__init_array_end+0x8155c0>
 801b3f8:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 801b3fc:	20000a5d 	andcs	r0, r0, sp, asr sl
 801b400:	20483154 	subcs	r3, r8, r4, asr r1
 801b404:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b408:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801b40c:	5b206632 	blpl	8834cdc <__init_array_end+0x8155d8>
 801b410:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 801b414:	20000a5d 	andcs	r0, r0, sp, asr sl
 801b418:	626f6c47 	rsbvs	r6, pc, #18176	@ 0x4700
 801b41c:	72426c61 	subvc	r6, r2, #24832	@ 0x6100
 801b420:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801b424:	7373656e 	cmnvc	r3, #461373440	@ 0x1b800000
 801b428:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801b42c:	4320000a 			@ <UNDEFINED> instruction: 0x4320000a
 801b430:	6b636f6c 	blvs	98f71e8 <__init_array_end+0x18d7ae4>
 801b434:	3a202020 	bcc	88234bc <__init_array_end+0x803db8>
 801b438:	20752520 	rsbscs	r2, r5, r0, lsr #10
 801b43c:	000a7a48 	andeq	r7, sl, r8, asr #20
 801b440:	66655220 	strbtvs	r5, [r5], -r0, lsr #4
 801b444:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801b448:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b44c:	7a482075 	bvc	9223628 <__init_array_end+0x1203f24>
 801b450:	5f73000a 	svcpl	0x0073000a
 801b454:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
 801b458:	3d212073 	stccc	0, cr2, [r1, #-460]!	@ 0xfffffe34
 801b45c:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801b460:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801b464:	74654700 	strbtvc	r4, [r5], #-1792	@ 0xfffff900
 801b468:	2f2e2e00 	svccs	0x002e2e00
 801b46c:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801b470:	38327377 	ldmdacc	r2!, {r0, r1, r2, r4, r5, r6, r8, r9, ip, sp, lr}
 801b474:	692f7878 	stmdbvs	pc!, {r3, r4, r5, r6, fp, ip, sp, lr}	@ <UNPREDICTABLE>
 801b478:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801b47c:	702f6564 	eorvc	r6, pc, r4, ror #10
 801b480:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b484:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801b488:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801b48c:	6f697461 	svcvs	0x00697461
 801b490:	00682e6e 	rsbeq	r2, r8, lr, ror #28
 801b494:	50746553 	rsbspl	r6, r4, r3, asr r5
 801b498:	65747461 	ldrbvs	r7, [r4, #-1121]!	@ 0xfffffb9f
 801b49c:	2e006e72 	mcrcs	14, 0, r6, cr0, cr2, {3}
 801b4a0:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801b4a4:	73772d62 	cmnvc	r7, #6272	@ 0x1880
 801b4a8:	78783832 	ldmdavc	r8!, {r1, r4, r5, fp, ip, sp}^
 801b4ac:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801b4b0:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801b4b4:	7869702f 	stmdavc	r9!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 801b4b8:	65746c65 	ldrbvs	r6, [r4, #-3173]!	@ 0xfffff39b
 801b4bc:	61707473 	cmnvs	r0, r3, ror r4
 801b4c0:	72657474 	rsbvc	r7, r5, #116, 8	@ 0x74000000
 801b4c4:	00682e6e 	rsbeq	r2, r8, lr, ror #28
 801b4c8:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801b4cc:	69500075 	ldmdbvs	r0, {r0, r2, r4, r5, r6}^
 801b4d0:	436c6578 	cmnmi	ip, #120, 10	@ 0x1e000000
 801b4d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b4d8:	61727567 	cmnvs	r2, r7, ror #10
 801b4dc:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801b4e0:	3e2d2d00 	cdpcc	13, 2, cr2, cr13, cr0, {0}
 801b4e4:	3a732520 	bcc	9ce496c <__init_array_end+0x1cc5268>
 801b4e8:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801b4ec:	73000a64 	movwvc	r0, #2660	@ 0xa64
 801b4f0:	6854705f 	ldmdavs	r4, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 801b4f4:	3d207369 	stccc	3, cr7, [r0, #-420]!	@ 0xfffffe5c
 801b4f8:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801b4fc:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801b500:	2d3c0072 	ldccs	0, cr0, [ip, #-456]!	@ 0xfffffe38
 801b504:	7325202d 			@ <UNDEFINED> instruction: 0x7325202d
 801b508:	3a73253a 	bcc	9ce49f8 <__init_array_end+0x1cc52f4>
 801b50c:	000a6425 	andeq	r6, sl, r5, lsr #8
 801b510:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801b514:	786d446c 	stmdavc	sp!, {r2, r3, r5, r6, sl, lr}^
 801b518:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801b51c:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801b520:	6f697461 	svcvs	0x00697461
 801b524:	2e2e006e 	cdpcs	0, 2, cr0, cr14, cr14, {3}
 801b528:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801b52c:	3273772d 	rsbscc	r7, r3, #11796480	@ 0xb40000
 801b530:	64787838 	ldrbtvs	r7, [r8], #-2104	@ 0xfffff7c8
 801b534:	692f786d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, fp, ip, sp, lr}	@ <UNPREDICTABLE>
 801b538:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801b53c:	702f6564 	eorvc	r6, pc, r4, ror #10
 801b540:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b544:	63786d64 	cmnvs	r8, #100, 26	@ 0x1900
 801b548:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b54c:	61727567 	cmnvs	r2, r7, ror #10
 801b550:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801b554:	5000682e 	andpl	r6, r0, lr, lsr #16
 801b558:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b55c:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 801b560:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801b564:	75676966 	strbvc	r6, [r7, #-2406]!	@ 0xfffff69a
 801b568:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801b56c:	20006e6f 	andcs	r6, r0, pc, ror #28
 801b570:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 801b574:	20737475 	rsbscs	r7, r3, r5, ror r4
 801b578:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b57c:	3a202020 	bcc	8823604 <__init_array_end+0x803f00>
 801b580:	0a752520 	beq	9d64a08 <__init_array_end+0x1d45304>
 801b584:	72472000 	subvc	r2, r7, #0
 801b588:	6970756f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
 801b58c:	6320676e 			@ <UNDEFINED> instruction: 0x6320676e
 801b590:	746e756f 	strbtvc	r7, [lr], #-1391	@ 0xfffffa91
 801b594:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b598:	475b2075 			@ <UNDEFINED> instruction: 0x475b2075
 801b59c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 801b5a0:	203a2073 	eorscs	r2, sl, r3, ror r0
 801b5a4:	0a5d7525 	beq	9778a40 <__init_array_end+0x175933c>
 801b5a8:	6e552000 	cdpvs	0, 5, cr2, cr5, cr0, {0}
 801b5ac:	72657669 	rsbvc	r7, r5, #110100480	@ 0x6900000
 801b5b0:	20736573 	rsbscs	r6, r3, r3, ror r5
 801b5b4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b5b8:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b5bc:	20000a75 	andcs	r0, r0, r5, ror sl
 801b5c0:	46786d44 	ldrbtmi	r6, [r8], -r4, asr #26
 801b5c4:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 801b5c8:	746e6972 	strbtvc	r6, [lr], #-2418	@ 0xfffff68e
 801b5cc:	3a202020 	bcc	8823654 <__init_array_end+0x803f50>
 801b5d0:	0a752520 	beq	9d64a58 <__init_array_end+0x1d45354>
 801b5d4:	75252000 	strvc	r2, [r5, #-0]!
 801b5d8:	3a75253a 	bcc	9d64ac8 <__init_array_end+0x1d453c4>
 801b5dc:	253a7525 	ldrcs	r7, [sl, #-1317]!	@ 0xfffffadb
 801b5e0:	3e2d2075 	mcrcc	0, 1, r2, cr13, cr5, {3}
 801b5e4:	0a752520 	beq	9d64a6c <__init_array_end+0x1d45368>
 801b5e8:	44527e00 	ldrbmi	r7, [r2], #-3584	@ 0xfffff200
 801b5ec:	6275534d 	rsbsvs	r5, r5, #872415233	@ 0x34000001
 801b5f0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801b5f4:	00736563 	rsbseq	r6, r3, r3, ror #10
 801b5f8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801b548 <_etext+0x3ac>
 801b5fc:	722d6269 	eorvc	r6, sp, #-1879048186	@ 0x90000006
 801b600:	692f6d64 	stmdbvs	pc!, {r2, r5, r6, r8, sl, fp, sp, lr}	@ <UNPREDICTABLE>
 801b604:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801b608:	722f6564 	eorvc	r6, pc, #100, 10	@ 0x19000000
 801b60c:	75736d64 	ldrbvc	r6, [r3, #-3428]!	@ 0xfffff29c
 801b610:	76656462 	strbtvc	r6, [r5], -r2, ror #8
 801b614:	73656369 	cmnvc	r5, #-1543503871	@ 0xa4000001
 801b618:	2e00682e 	cdpcs	8, 0, cr6, cr0, cr14, {1}
 801b61c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801b620:	64722d62 	ldrbtvs	r2, [r2], #-3426	@ 0xfffff29e
 801b624:	6e692f6d 	cdpvs	15, 6, cr2, cr9, cr13, {3}
 801b628:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801b62c:	6c6c2f65 	stclvs	15, cr2, [ip], #-404	@ 0xfffffe6c
 801b630:	6c2f7072 	stcvs	0, cr7, [pc], #-456	@ 801b470 <_etext+0x2d4>
 801b634:	6470726c 	ldrbtvs	r7, [r0], #-620	@ 0xfffffd94
 801b638:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801b63c:	00682e65 	rsbeq	r2, r8, r5, ror #28
 801b640:	646e496e 	strbtvs	r4, [lr], #-2414	@ 0xfffff692
 801b644:	21207865 			@ <UNDEFINED> instruction: 0x21207865
 801b648:	312d203d 			@ <UNDEFINED> instruction: 0x312d203d
 801b64c:	67654200 	strbvs	r4, [r5, -r0, lsl #4]!
 801b650:	2e006e69 	cdpcs	14, 0, cr6, cr0, cr9, {3}
 801b654:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801b658:	656e2d62 	strbvs	r2, [lr, #-3426]!	@ 0xfffff29e
 801b65c:	726f7774 	rsbvc	r7, pc, #116, 14	@ 0x1d00000
 801b660:	6e692f6b 	cdpvs	15, 6, cr2, cr9, cr11, {3}
 801b664:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801b668:	6d652f65 	stclvs	15, cr2, [r5, #-404]!	@ 0xfffffe6c
 801b66c:	6e2f6361 	cdpvs	3, 2, cr6, cr15, cr1, {3}
 801b670:	6f777465 	svcvs	0x00777465
 801b674:	682e6b72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, fp, sp, lr}
 801b678:	6e5f7300 	cdpvs	3, 5, cr7, cr15, cr0, {0}
 801b67c:	646e6148 	strbtvs	r6, [lr], #-328	@ 0xfffffeb8
 801b680:	4c4c656c 	cfstr64mi	mvdx6, [ip], {108}	@ 0x6c
 801b684:	21205052 	qsubcs	r5, r2, r0
 801b688:	312d203d 			@ <UNDEFINED> instruction: 0x312d203d
 801b68c:	44527e00 	ldrbmi	r7, [r2], #-3584	@ 0xfffff200
 801b690:	6e65534d 	cdpvs	3, 6, cr5, cr5, cr13, {2}
 801b694:	73726f73 	cmnvc	r2, #460	@ 0x1cc
 801b698:	2f2e2e00 	svccs	0x002e2e00
 801b69c:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801b6a0:	2f6d6472 	svccs	0x006d6472
 801b6a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801b6a8:	2f656475 	svccs	0x00656475
 801b6ac:	736d6472 	cmnvc	sp, #1912602624	@ 0x72000000
 801b6b0:	6f736e65 	svcvs	0x00736e65
 801b6b4:	682e7372 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}
 801b6b8:	44527e00 	ldrbmi	r7, [r2], #-3584	@ 0xfffff200
 801b6bc:	74654e4d 	strbtvc	r4, [r5], #-3661	@ 0xfffff1b3
 801b6c0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801b6c4:	2e006563 	cfsh32cs	mvfx6, mvfx0, #51
 801b6c8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801b6cc:	64722d62 	ldrbtvs	r2, [r2], #-3426	@ 0xfffff29e
 801b6d0:	6e692f6d 	cdpvs	15, 6, cr2, cr9, cr13, {3}
 801b6d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801b6d8:	64722f65 	ldrbtvs	r2, [r2], #-3941	@ 0xfffff09b
 801b6dc:	74656e6d 	strbtvc	r6, [r5], #-3693	@ 0xfffff193
 801b6e0:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801b6e4:	682e6563 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, sp, lr}
 801b6e8:	4c4c7e00 	mcrrmi	14, 0, r7, ip, cr0
 801b6ec:	65445052 	strbvs	r5, [r4, #-82]	@ 0xffffffae
 801b6f0:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801b6f4:	6e496e00 	cdpvs	14, 4, cr6, cr9, cr0, {0}
 801b6f8:	20786564 	rsbscs	r6, r8, r4, ror #10
 801b6fc:	30203d3d 	eorcc	r3, r0, sp, lsr sp
 801b700:	646e4500 	strbtvs	r4, [lr], #-1280	@ 0xfffffb00
 801b704:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 801b708:	0a74654e 	beq	9d34c48 <__init_array_end+0x1d15544>
 801b70c:	49432000 	stmdbmi	r3, {sp}^
 801b710:	203a2044 	eorscs	r2, sl, r4, asr #32
 801b714:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b718:	50524c4c 	subspl	r4, r2, ip, asr #24
 801b71c:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 801b720:	0a656369 	beq	99744cc <__init_array_end+0x1954dc8>
 801b724:	6f502000 	svcvs	0x00502000
 801b728:	55207472 	strpl	r7, [r0, #-1138]!	@ 0xfffffb8e
 801b72c:	20205044 	eorcs	r5, r0, r4, asr #32
 801b730:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b734:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b738:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801b73c:	20000a64 	andcs	r0, r0, r4, ror #20
 801b740:	6e696f4a 	cdpvs	15, 6, cr6, cr9, cr10, {2}
 801b744:	71655220 	cmnvc	r5, r0, lsr #4
 801b748:	74736575 	ldrbtvc	r6, [r3], #-1397	@ 0xfffffa8b
 801b74c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b750:	3a202020 	bcc	88237d8 <__init_array_end+0x8040d4>
 801b754:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801b758:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801b75c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801b760:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	@ 0xffffffd8
 801b764:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801b768:	74736163 	ldrbtvc	r6, [r3], #-355	@ 0xfffffe9d
 801b76c:	73655220 	cmnvc	r5, #32, 4
 801b770:	736e6f70 	cmnvc	lr, #112, 30	@ 0x1c0
 801b774:	203a2065 	eorscs	r2, sl, r5, rrx
 801b778:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801b77c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801b780:	0a64252e 	beq	9924c40 <__init_array_end+0x190553c>
 801b784:	3a383100 	bcc	8e27b8c <__init_array_end+0xe08488>
 801b788:	303a3233 	eorscc	r3, sl, r3, lsr r2
 801b78c:	65530038 	ldrbvs	r0, [r3, #-56]	@ 0xffffffc8
 801b790:	33322070 	teqcc	r2, #112	@ 0x70
 801b794:	32303220 	eorscc	r3, r0, #32, 4
 801b798:	72410034 	subvc	r0, r1, #52	@ 0x34
 801b79c:	654e2d74 	strbvs	r2, [lr, #-3444]	@ 0xfffff28c
 801b7a0:	20342074 	eorscs	r2, r4, r4, ror r0
 801b7a4:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801b7a8:	6f63206c 	svcvs	0x0063206c
 801b7ac:	6f72746e 	svcvs	0x0072746e
 801b7b0:	72656c6c 	rsbvc	r6, r5, #108, 24	@ 0x6c00
 801b7b4:	335b1b00 	cmpcc	fp, #0, 22
 801b7b8:	73256d32 			@ <UNDEFINED> instruction: 0x73256d32
 801b7bc:	6d305b1b 	fldmdbxvs	r0!, {d5-d17}	@ Deprecated
 801b7c0:	6950000a 	ldmdbvs	r0, {r1, r3}^
 801b7c4:	206c6578 	rsbcs	r6, ip, r8, ror r5
 801b7c8:	55206325 	strpl	r6, [r0, #-805]!	@ 0xfffffcdb
 801b7cc:	0075253a 	rsbseq	r2, r5, sl, lsr r5
 801b7d0:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801b7d4:	7365546c 	cmnvc	r5, #108, 8	@ 0x6c000000
 801b7d8:	74615074 	strbtvc	r5, [r1], #-116	@ 0xffffff8c
 801b7dc:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 801b7e0:	74724100 	ldrbtvc	r4, [r2], #-256	@ 0xffffff00
 801b7e4:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
 801b7e8:	50203420 	eorpl	r3, r0, r0, lsr #8
 801b7ec:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801b7f0:	2d642520 	cfstr64cs	mvdx2, [r4, #-128]!	@ 0xffffff80
 801b7f4:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801b7f8:	44470064 	strbmi	r0, [r7], #-100	@ 0xffffff9c
 801b7fc:	34463233 	strbcc	r3, [r6], #-563	@ 0xfffffdcd
 801b800:	5f5a3037 	svcpl	0x005a3037
 801b804:	4c415645 	mcrrmi	6, 4, r5, r1, cr5
 801b808:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 801b80c:	41006c65 	tstmi	r0, r5, ror #24
 801b810:	654e7472 	strbvs	r7, [lr, #-1138]	@ 0xfffffb8e
 801b814:	20342074 	eorscs	r2, r4, r4, ror r0
 801b818:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801b81c:	6425206c 	strtvs	r2, [r5], #-108	@ 0xffffff94
 801b820:	00642578 	rsbeq	r2, r4, r8, ror r5
 801b824:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801b828:	25472064 	strbcs	r2, [r7, #-100]	@ 0xffffff9c
 801b82c:	73252064 			@ <UNDEFINED> instruction: 0x73252064
 801b830:	2f2e2e00 	svccs	0x002e2e00
 801b834:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801b838:	6f6d6572 	svcvs	0x006d6572
 801b83c:	6f636574 	svcvs	0x00636574
 801b840:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b844:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801b848:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801b84c:	7474682f 	ldrbtvc	r6, [r4], #-2095	@ 0xfffff7d1
 801b850:	682f6470 	stmdavs	pc!, {r4, r5, r6, sl, sp, lr}	@ <UNPREDICTABLE>
 801b854:	64707474 	ldrbtvs	r7, [r0], #-1140	@ 0xfffffb8c
 801b858:	5200682e 	andpl	r6, r0, #3014656	@ 0x2e0000
 801b85c:	25006e75 	strcs	r6, [r0, #-3701]	@ 0xfffff18b
 801b860:	20292873 	eorcs	r2, r9, r3, ror r8
 801b864:	202c7325 	eorcs	r7, ip, r5, lsr #6
 801b868:	656e696c 	strbvs	r6, [lr, #-2412]!	@ 0xfffff694
 801b86c:	3a692520 	bcc	9a64cf4 <__init_array_end+0x1a455f0>
 801b870:	6f436e20 	svcvs	0x00436e20
 801b874:	63656e6e 	cmnvs	r5, #1760	@ 0x6e0
 801b878:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801b87c:	646e6148 	strbtvs	r6, [lr], #-328	@ 0xfffffeb8
 801b880:	253d656c 	ldrcs	r6, [sp, #-1388]!	@ 0xfffffa94
 801b884:	25000a75 	strcs	r0, [r0, #-2677]	@ 0xfffff58b
 801b888:	20292873 	eorcs	r2, r9, r3, ror r8
 801b88c:	202c7325 	eorcs	r7, ip, r5, lsr #6
 801b890:	656e696c 	strbvs	r6, [lr, #-2412]!	@ 0xfffff694
 801b894:	3a692520 	bcc	9a64d1c <__init_array_end+0x1a45618>
 801b898:	0a732520 	beq	9ce4d20 <__init_array_end+0x1cc561c>
 801b89c:	43455600 	movtmi	r5, #22016	@ 0x5600
 801b8a0:	5f524f54 	svcpl	0x00524f54
 801b8a4:	50524c4c 	subspl	r4, r2, ip, asr #24
 801b8a8:	4f52505f 	svcmi	0x0052505f
 801b8ac:	525f4542 	subspl	r4, pc, #276824064	@ 0x10800000
 801b8b0:	594c5045 	stmdbpl	ip, {r0, r2, r6, ip, lr}^
 801b8b4:	006e4f00 	rsbeq	r4, lr, r0, lsl #30
 801b8b8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b8bc:	3a79616c 	bcc	9e73e74 <__init_array_end+0x1e54770>
 801b8c0:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b8c4:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 801b8c8:	203a656d 	eorscs	r6, sl, sp, ror #10
 801b8cc:	0a737525 	beq	9cf8d68 <__init_array_end+0x1cd9664>
 801b8d0:	72657600 	rsbvc	r7, r5, #0, 12
 801b8d4:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801b8d8:	0073253a 	rsbseq	r2, r3, sl, lsr r5
 801b8dc:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801b8e0:	0a73253a 	beq	9ce4dd0 <__init_array_end+0x1cc56cc>
 801b8e4:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 801b8e8:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801b8ec:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801b8f0:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	@ 0xffffff50
 801b8f4:	252c7325 	strcs	r7, [ip, #-805]!	@ 0xfffffcdb
 801b8f8:	73252c75 			@ <UNDEFINED> instruction: 0x73252c75
 801b8fc:	6425000a 	strtvs	r0, [r5], #-10
 801b900:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b904:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801b908:	73252c64 			@ <UNDEFINED> instruction: 0x73252c64
 801b90c:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	@ 0xffffff50
 801b910:	000a7525 	andeq	r7, sl, r5, lsr #10
 801b914:	4f525245 	svcmi	0x00525245
 801b918:	673f2352 			@ <UNDEFINED> instruction: 0x673f2352
 801b91c:	000a7465 	andeq	r7, sl, r5, ror #8
 801b920:	4f525245 	svcmi	0x00525245
 801b924:	0a3f2352 	beq	8fe4674 <__init_array_end+0xfc4f70>
 801b928:	74667400 	strbtvc	r7, [r6], #-1024	@ 0xfffffc00
 801b92c:	64002370 	strvs	r2, [r0], #-880	@ 0xfffffc90
 801b930:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801b934:	00237961 	eoreq	r7, r3, r1, ror #18
 801b938:	4f525245 	svcmi	0x00525245
 801b93c:	0a212352 	beq	886468c <__init_array_end+0x844f88>
 801b940:	62657200 	rsbvs	r7, r5, #0, 4
 801b944:	23746f6f 	cmncs	r4, #444	@ 0x1bc
 801b948:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 801b94c:	00237473 	eoreq	r7, r3, r3, ror r4
 801b950:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801b954:	236e6f69 	cmncs	lr, #420	@ 0x1a4
 801b958:	74707500 	ldrbtvc	r7, [r0], #-1280	@ 0xfffffb00
 801b95c:	23656d69 	cmncs	r5, #6720	@ 0x1a40
 801b960:	74656700 	strbtvc	r6, [r5], #-1792	@ 0xfffff900
 801b964:	61660023 	cmnvs	r6, r3, lsr #32
 801b968:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801b96c:	00232379 	eoreq	r2, r3, r9, ror r3
 801b970:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801b974:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	@ 0xffffff18
 801b978:	73252300 			@ <UNDEFINED> instruction: 0x73252300
 801b97c:	0a64253d 	beq	9924e78 <__init_array_end+0x1905774>
 801b980:	73252200 			@ <UNDEFINED> instruction: 0x73252200
 801b984:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801b988:	002c2273 	eoreq	r2, ip, r3, ror r2
 801b98c:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	@ 0xffffff74
 801b990:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b994:	6f626552 	svcvs	0x00626552
 801b998:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 801b99c:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 801b9a0:	6372002e 	cmnvs	r2, #46	@ 0x2e
 801b9a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b9a8:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 801b9ac:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
 801b9b0:	78742e76 	ldmdavc	r4!, {r1, r2, r4, r5, r6, r9, sl, fp, sp}^
 801b9b4:	656e0074 	strbvs	r0, [lr, #-116]!	@ 0xffffff8c
 801b9b8:	726f7774 	rsbvc	r7, pc, #116, 14	@ 0x1d00000
 801b9bc:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 801b9c0:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
 801b9c4:	616c7073 	smcvs	50947	@ 0xc703
 801b9c8:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 801b9cc:	72610074 	rsbvc	r0, r1, #116	@ 0x74
 801b9d0:	74656e74 	strbtvc	r6, [r5], #-3700	@ 0xfffff18c
 801b9d4:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801b9d8:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 801b9dc:	73656369 	cmnvc	r5, #-1543503871	@ 0xa4000001
 801b9e0:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801b9e4:	54465400 	strbpl	r5, [r6], #-1024	@ 0xfffffc00
 801b9e8:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801b9ec:	46540020 	ldrbmi	r0, [r4], -r0, lsr #32
 801b9f0:	4f205054 	svcmi	0x00205054
 801b9f4:	7b006666 	blvc	8035394 <__init_array_end+0x15c90>
 801b9f8:	73696c22 	cmnvc	r9, #8704	@ 0x2200
 801b9fc:	7b3a2274 	blvc	8ea43d4 <__init_array_end+0xe84cd0>
 801ba00:	22706922 	rsbscs	r6, r0, #557056	@ 0x88000
 801ba04:	6425223a 	strtvs	r2, [r5], #-570	@ 0xfffffdc6
 801ba08:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801ba0c:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801ba10:	222c2264 	eorcs	r2, ip, #100, 4	@ 0x40000006
 801ba14:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
 801ba18:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801ba1c:	222c2273 	eorcs	r2, ip, #805306375	@ 0x30000007
 801ba20:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 801ba24:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801ba28:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801ba2c:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801ba30:	222c2273 	eorcs	r2, ip, #805306375	@ 0x30000007
 801ba34:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801ba38:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801ba3c:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801ba40:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801ba44:	222c2273 	eorcs	r2, ip, #805306375	@ 0x30000007
 801ba48:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801ba4c:	253a2274 	ldrcs	r2, [sl, #-628]!	@ 0xfffffd8c
 801ba50:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	@ 0xfffffe70
 801ba54:	227b007d 	rsbscs	r0, fp, #125	@ 0x7d
 801ba58:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801ba5c:	226e6f69 	rsbcs	r6, lr, #420	@ 0x1a4
 801ba60:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801ba64:	2c22732a 	stccs	3, cr7, [r2], #-168	@ 0xffffff58
 801ba68:	616f6222 	cmnvs	pc, r2, lsr #4
 801ba6c:	3a226472 	bcc	88b4c3c <__init_array_end+0x895538>
 801ba70:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801ba74:	7562222c 	strbvc	r2, [r2, #-556]!	@ 0xfffffdd4
 801ba78:	22646c69 	rsbcs	r6, r4, #26880	@ 0x6900
 801ba7c:	64227b3a 	strtvs	r7, [r2], #-2874	@ 0xfffff4c6
 801ba80:	22657461 	rsbcs	r7, r5, #1627389952	@ 0x61000000
 801ba84:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801ba88:	2c22732a 	stccs	3, cr7, [r2], #-168	@ 0xffffff58
 801ba8c:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	@ 0xffffff78
 801ba90:	223a2265 	eorscs	r2, sl, #1342177286	@ 0x50000006
 801ba94:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801ba98:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 801ba9c:	32334447 	eorscc	r4, r3, #1191182336	@ 0x47000000
 801baa0:	30373446 	eorscc	r3, r7, r6, asr #8
 801baa4:	56455f5a 			@ <UNDEFINED> instruction: 0x56455f5a
 801baa8:	7b004c41 	blvc	802ebb4 <__init_array_end+0xf4b0>
 801baac:	74707522 	ldrbtvc	r7, [r0], #-1314	@ 0xfffffade
 801bab0:	22656d69 	rsbcs	r6, r5, #6720	@ 0x1a40
 801bab4:	7d75253a 	cfldr64vc	mvdx2, [r5, #-232]!	@ 0xffffff18
 801bab8:	227b000a 	rsbscs	r0, fp, #10
 801babc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801bac0:	2279616c 	rsbscs	r6, r9, #108, 2
 801bac4:	7d64253a 	cfstr64vc	mvdx2, [r4, #-232]!	@ 0xffffff18
 801bac8:	66227b00 	strtvs	r7, [r2], -r0, lsl #22
 801bacc:	73656c69 	cmnvc	r5, #26880	@ 0x6900
 801bad0:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801bad4:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801bad8:	742e7465 	strtvc	r7, [lr], #-1125	@ 0xfffffb9b
 801badc:	3a227478 	bcc	88b8cc4 <__init_array_end+0x8995c0>
 801bae0:	74724122 	ldrbtvc	r4, [r2], #-290	@ 0xfffffede
 801bae4:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
 801bae8:	64222c22 	strtvs	r2, [r2], #-3106	@ 0xfffff3de
 801baec:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801baf0:	742e7365 	strtvc	r7, [lr], #-869	@ 0xfffffc9b
 801baf4:	3a227478 	bcc	88b8cdc <__init_array_end+0x8995d8>
 801baf8:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 801bafc:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 801bb00:	2c226c65 	stccs	12, cr6, [r2], #-404	@ 0xfffffe6c
 801bb04:	73696422 	cmnvc	r9, #570425344	@ 0x22000000
 801bb08:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801bb0c:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801bb10:	44223a22 	strtmi	r3, [r2], #-2594	@ 0xfffff5de
 801bb14:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801bb18:	55207961 	strpl	r7, [r0, #-2401]!	@ 0xfffff69f
 801bb1c:	2c224644 	stccs	6, cr4, [r2], #-272	@ 0xfffffef0
 801bb20:	74656e22 	strbtvc	r6, [r5], #-3618	@ 0xfffff1de
 801bb24:	6b726f77 	blvs	9cb7908 <__init_array_end+0x1c98204>
 801bb28:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801bb2c:	4e223a22 	vmulmi.f32	s6, s4, s5
 801bb30:	6f777465 	svcvs	0x00777465
 801bb34:	2c226b72 			@ <UNDEFINED> instruction: 0x2c226b72
 801bb38:	766e6522 	strbtvc	r6, [lr], -r2, lsr #10
 801bb3c:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801bb40:	45223a22 	strmi	r3, [r2, #-2594]!	@ 0xfffff5de
 801bb44:	7269766e 	rsbvc	r7, r9, #115343360	@ 0x6e00000
 801bb48:	656d6e6f 	strbvs	r6, [sp, #-3695]!	@ 0xfffff191
 801bb4c:	2c22746e 	cfstrscs	mvf7, [r2], #-440	@ 0xfffffe48
 801bb50:	6f637222 	svcvs	0x00637222
 801bb54:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801bb58:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801bb5c:	52223a22 	eorpl	r3, r2, #139264	@ 0x22000
 801bb60:	746f6d65 	strbtvc	r6, [pc], #-3429	@ 801bb68 <_etext+0x9cc>
 801bb64:	6f632065 	svcvs	0x00632065
 801bb68:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801bb6c:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801bb70:	226e6f69 	rsbcs	r6, lr, #420	@ 0x1a4
 801bb74:	73007d7d 	movwvc	r7, #3453	@ 0xd7d
 801bb78:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 801bb7c:	736a2e63 	cmnvc	sl, #1584	@ 0x630
 801bb80:	79747300 	ldmdbvc	r4!, {r8, r9, ip, sp, lr}^
 801bb84:	2e73656c 	cdpcs	5, 7, cr6, cr3, cr12, {3}
 801bb88:	00737363 	rsbseq	r7, r3, r3, ror #6
 801bb8c:	65646e69 	strbvs	r6, [r4, #-3689]!	@ 0xfffff197
 801bb90:	736a2e78 	cmnvc	sl, #120, 28	@ 0x780
 801bb94:	74616400 	strbtvc	r6, [r1], #-1024	@ 0xfffffc00
 801bb98:	736a2e65 	cmnvc	sl, #1616	@ 0x650
 801bb9c:	66656400 	strbtvs	r6, [r5], -r0, lsl #8
 801bba0:	746c7561 	strbtvc	r7, [ip], #-1377	@ 0xfffffa9f
 801bba4:	00736a2e 	rsbseq	r6, r3, lr, lsr #20
 801bba8:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801bbac:	00736a2e 	rsbseq	r6, r3, lr, lsr #20
 801bbb0:	65646e69 	strbvs	r6, [r4, #-3689]!	@ 0xfffff197
 801bbb4:	74682e78 	strbtvc	r2, [r8], #-3704	@ 0xfffff188
 801bbb8:	74006c6d 	strvc	r6, [r0], #-3181	@ 0xfffff393
 801bbbc:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
 801bbc0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	@ 0xfffffe60
 801bbc4:	726f5000 	rsbvc	r5, pc, #0
 801bbc8:	75252074 	strvc	r2, [r5, #-116]!	@ 0xffffff8c
 801bbcc:	20732500 	rsbscs	r2, r3, r0, lsl #10
 801bbd0:	25207325 	strcs	r7, [r0, #-805]!	@ 0xfffffcdb
 801bbd4:	73252075 			@ <UNDEFINED> instruction: 0x73252075
 801bbd8:	74746800 	ldrbtvc	r6, [r4], #-2048	@ 0xfffff800
 801bbdc:	2f3a7370 	svccs	0x003a7370
 801bbe0:	3364672f 	cmncc	r4, #12320768	@ 0xbc0000
 801bbe4:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	@ 0xffffff38
 801bbe8:	726f2e78 	rsbvc	r2, pc, #120, 28	@ 0x780
 801bbec:	25230067 	strcs	r0, [r3, #-103]!	@ 0xffffff99
 801bbf0:	20783430 	rsbscs	r3, r8, r0, lsr r4
 801bbf4:	3430255b 	ldrtcc	r2, [r0], #-1371	@ 0xfffffaa5
 801bbf8:	25205d64 	strcs	r5, [r0, #-3428]!	@ 0xfffff29c
 801bbfc:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801bc00:	00567641 	subseq	r7, r6, r1, asr #12
 801bc04:	65626d45 	strbvs	r6, [r2, #-3397]!	@ 0xfffff2bb
 801bc08:	64656464 	strbtvs	r6, [r5], #-1124	@ 0xfffffb9c
 801bc0c:	50544800 	subspl	r4, r4, r0, lsl #16
 801bc10:	50544c00 	subspl	r4, r4, r0, lsl #24
 801bc14:	74724100 	ldrbtvc	r4, [r2], #-256	@ 0xffffff00
 801bc18:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
 801bc1c:	43417300 	movtmi	r7, #4864	@ 0x1300
 801bc20:	4452004e 	ldrbmi	r0, [r2], #-78	@ 0xffffffb2
 801bc24:	2020004d 	eorcs	r0, r0, sp, asr #32
 801bc28:	72410020 	subvc	r0, r1, #32
 801bc2c:	654e2d74 	strbvs	r2, [lr, #-3444]	@ 0xfffff28c
 801bc30:	75252074 	strvc	r2, [r5, #-116]!	@ 0xffffff8c
 801bc34:	75255620 	strvc	r5, [r5, #-1568]!	@ 0xfffff9e0
 801bc38:	0a75252e 	beq	9d650f8 <__init_array_end+0x1d459f4>
 801bc3c:	6f4c2000 	svcvs	0x004c2000
 801bc40:	6e20676e 	cdpvs	7, 2, cr6, cr0, cr14, {3}
 801bc44:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801bc48:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801bc4c:	20000a73 	andcs	r0, r0, r3, ror sl
 801bc50:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 801bc54:	000a7475 	andeq	r7, sl, r5, ror r4
 801bc58:	6f502020 	svcvs	0x00502020
 801bc5c:	25207472 	strcs	r7, [r0, #-1138]!	@ 0xfffffb8e
 801bc60:	2075322d 	rsbscs	r3, r5, sp, lsr #4
 801bc64:	75342d25 	ldrvc	r2, [r4, #-3365]!	@ 0xfffff2db
 801bc68:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801bc6c:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 801bc70:	72657669 	rsbvc	r7, r5, #110100480	@ 0x6900000
 801bc74:	20736573 	rsbscs	r6, r3, r3, ror r5
 801bc78:	20657261 	rsbcs	r7, r5, r1, ror #4
 801bc7c:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801bc80:	20646570 	rsbcs	r6, r4, r0, ror r5
 801bc84:	000a312b 	andeq	r3, sl, fp, lsr #2
 801bc88:	646c6f68 	strbtvs	r6, [ip], #-3944	@ 0xfffff098
 801bc8c:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 801bc90:	616c7000 	cmnvs	ip, r0
 801bc94:	63616279 	cmnvs	r1, #-1879048185	@ 0x90000007
 801bc98:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
 801bc9c:	00747570 	rsbseq	r7, r4, r0, ror r5
 801bca0:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 801bca4:	64007475 	strvs	r7, [r0], #-1141	@ 0xfffffb8b
 801bca8:	62617369 	rsbvs	r7, r1, #-1543503871	@ 0xa4000001
 801bcac:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	@ 0x6c
 801bcb0:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 801bcb4:	73007074 	movwvc	r7, #116	@ 0x74
 801bcb8:	006e6361 	rsbeq	r6, lr, r1, ror #6
 801bcbc:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801bcc0:	44007465 	strmi	r7, [r0], #-1125	@ 0xfffffb9b
 801bcc4:	4f20584d 	svcmi	0x0020584d
 801bcc8:	75707475 	ldrbvc	r7, [r0, #-1141]!	@ 0xfffffb8b
 801bccc:	72410074 	subvc	r0, r1, #116	@ 0x74
 801bcd0:	654e2d74 	strbvs	r2, [lr, #-3444]	@ 0xfffff28c
 801bcd4:	00342074 	eorseq	r2, r4, r4, ror r0
 801bcd8:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801bcdc:	2e314520 	cfabs64cs	mvdx4, mvdx1
 801bce0:	56203133 			@ <UNDEFINED> instruction: 0x56203133
 801bce4:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bce8:	20000a64 	andcs	r0, r0, r4, ror #20
 801bcec:	726f5020 	rsbvc	r5, pc, #32
 801bcf0:	2d252074 	stccs	0, cr2, [r5, #-464]!	@ 0xfffffe30
 801bcf4:	25207532 	strcs	r7, [r0, #-1330]!	@ 0xffffface
 801bcf8:	2075342d 	rsbscs	r3, r5, sp, lsr #8
 801bcfc:	000a7325 	andeq	r7, sl, r5, lsr #6
 801bd00:	6e795320 	cdpvs	3, 7, cr5, cr9, cr0, {1}
 801bd04:	6f726863 	svcvs	0x00726863
 801bd08:	657a696e 	ldrbvs	r6, [sl, #-2414]!	@ 0xfffff692
 801bd0c:	20736920 	rsbscs	r6, r3, r0, lsr #18
 801bd10:	61736964 	cmnvs	r3, r4, ror #18
 801bd14:	64656c62 	strbtvs	r6, [r5], #-3170	@ 0xfffff39e
 801bd18:	4452000a 	ldrbmi	r0, [r2], #-10
 801bd1c:	6552204d 	ldrbvs	r2, [r2, #-77]	@ 0xffffffb3
 801bd20:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 801bd24:	20726564 	rsbscs	r6, r2, r4, ror #10
 801bd28:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801bd2c:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801bd30:	6f697461 	svcvs	0x00697461
 801bd34:	5020006e 	eorpl	r0, r0, lr, rrx
 801bd38:	6f746f72 	svcvs	0x00746f72
 801bd3c:	206c6f63 	rsbcs	r6, ip, r3, ror #30
 801bd40:	73726556 	cmnvc	r2, #360710144	@ 0x15800000
 801bd44:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801bd48:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801bd4c:	20000a64 	andcs	r0, r0, r4, ror #20
 801bd50:	20584d44 	subscs	r4, r8, r4, asr #26
 801bd54:	72646441 	rsbvc	r6, r4, #1090519040	@ 0x41000000
 801bd58:	20737365 	rsbscs	r7, r3, r5, ror #6
 801bd5c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801bd60:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801bd64:	20000a64 	andcs	r0, r0, r4, ror #20
 801bd68:	20584d44 	subscs	r4, r8, r4, asr #26
 801bd6c:	746f6f46 	strbtvc	r6, [pc], #-3910	@ 801bd74 <_etext+0xbd8>
 801bd70:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 801bd74:	20202074 	eorcs	r2, r0, r4, ror r0
 801bd78:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801bd7c:	20000a64 	andcs	r0, r0, r4, ror #20
 801bd80:	73726550 	cmnvc	r2, #80, 10	@ 0x14000000
 801bd84:	6c616e6f 	stclvs	14, cr6, [r1], #-444	@ 0xfffffe44
 801bd88:	20797469 	rsbscs	r7, r9, r9, ror #8
 801bd8c:	6f206425 	svcvs	0x00206425
 801bd90:	64252066 	strtvs	r2, [r5], #-102	@ 0xffffff9a
 801bd94:	2e255b20 	vmulcs.f64	d5, d5, d16
 801bd98:	0a5d732a 	beq	9778a48 <__init_array_end+0x1759344>
 801bd9c:	75532000 	ldrbvc	r2, [r3, #-0]
 801bda0:	65442062 	strbvs	r2, [r4, #-98]	@ 0xffffff9e
 801bda4:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801bda8:	20202073 	eorcs	r2, r0, r3, ror r0
 801bdac:	3a202020 	bcc	8823e34 <__init_array_end+0x804730>
 801bdb0:	0a642520 	beq	9925238 <__init_array_end+0x1905b34>
 801bdb4:	65532000 	ldrbvs	r2, [r3, #-0]
 801bdb8:	726f736e 	rsbvc	r7, pc, #-1207959551	@ 0xb8000001
 801bdbc:	20202073 	eorcs	r2, r0, r3, ror r0
 801bdc0:	20202020 	eorcs	r2, r0, r0, lsr #32
 801bdc4:	3a202020 	bcc	8823e4c <__init_array_end+0x804748>
 801bdc8:	0a642520 	beq	9925250 <__init_array_end+0x1905b4c>
 801bdcc:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 801bdd0:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 801bdd4:	20656369 	rsbcs	r6, r5, r9, ror #6
 801bdd8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801bddc:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801bde0:	6f697461 	svcvs	0x00697461
 801bde4:	4d20006e 	stcmi	0, cr0, [r0, #-440]!	@ 0xfffffe48
 801bde8:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 801bdec:	75746361 	ldrbvc	r6, [r4, #-865]!	@ 0xfffffc9f
 801bdf0:	20726572 	rsbscs	r6, r2, r2, ror r5
 801bdf4:	656d614e 	strbvs	r6, [sp, #-334]!	@ 0xfffffeb2
 801bdf8:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801bdfc:	0a732a2e 	beq	9ce66bc <__init_array_end+0x1cc6fb8>
 801be00:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801be04:	6166756e 	cmnvs	r6, lr, ror #10
 801be08:	72757463 	rsbsvc	r7, r5, #1660944384	@ 0x63000000
 801be0c:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 801be10:	20202044 	eorcs	r2, r0, r4, asr #32
 801be14:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801be18:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801be1c:	000a5832 	andeq	r5, sl, r2, lsr r8
 801be20:	72655320 	rsbvc	r5, r5, #32, 6	@ 0x80000000
 801be24:	206c6169 	rsbcs	r6, ip, r9, ror #2
 801be28:	626d754e 	rsbvs	r7, sp, #327155712	@ 0x13800000
 801be2c:	20207265 	eorcs	r7, r0, r5, ror #4
 801be30:	3a202020 	bcc	8823eb8 <__init_array_end+0x8047b4>
 801be34:	322e2520 	eorcc	r2, lr, #32, 10	@ 0x8000000
 801be38:	322e2558 	eorcc	r2, lr, #88, 10	@ 0x16000000
 801be3c:	322e2558 	eorcc	r2, lr, #88, 10	@ 0x16000000
 801be40:	322e2558 	eorcc	r2, lr, #88, 10	@ 0x16000000
 801be44:	20000a58 	andcs	r0, r0, r8, asr sl
 801be48:	746f6f52 	strbtvc	r6, [pc], #-3922	@ 801be50 <_etext+0xcb4>
 801be4c:	62616c20 	rsbvs	r6, r1, #32, 24	@ 0x2000
 801be50:	20206c65 	eorcs	r6, r0, r5, ror #24
 801be54:	20202020 	eorcs	r2, r0, r0, lsr #32
 801be58:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801be5c:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801be60:	5020000a 	eorpl	r0, r0, sl
 801be64:	75646f72 	strbvc	r6, [r4, #-3954]!	@ 0xfffff08e
 801be68:	43207463 			@ <UNDEFINED> instruction: 0x43207463
 801be6c:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 801be70:	2079726f 	rsbscs	r7, r9, pc, ror #4
 801be74:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801be78:	2558322e 	ldrbcs	r3, [r8, #-558]	@ 0xfffffdd2
 801be7c:	0a58322e 	beq	962873c <__init_array_end+0x1609038>
 801be80:	72502000 	subsvc	r2, r0, #0
 801be84:	6375646f 	cmnvs	r5, #1862270976	@ 0x6f000000
 801be88:	65442074 	strbvs	r2, [r4, #-116]	@ 0xffffff8c
 801be8c:	6c696174 	stfvse	f6, [r9], #-464	@ 0xfffffe30
 801be90:	20202020 	eorcs	r2, r0, r0, lsr #32
 801be94:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801be98:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801be9c:	000a5832 	andeq	r5, sl, r2, lsr r8
 801bea0:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801bea4:	2a2e253a 	bcs	8ba5394 <__init_array_end+0xb85c90>
 801bea8:	23002c66 	movwcs	r2, #3174	@ 0xc66
 801beac:	253d7325 	ldrcs	r7, [sp, #-805]!	@ 0xfffffcdb
 801beb0:	0a662a2e 	beq	99a6770 <__init_array_end+0x198706c>
 801beb4:	694c7000 	stmdbvs	ip, {ip, sp, lr}^
 801beb8:	2120656e 			@ <UNDEFINED> instruction: 0x2120656e
 801bebc:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801bec0:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801bec4:	61630072 	smcvs	12290	@ 0x3002
 801bec8:	61626c6c 	cmnvs	r2, ip, ror #24
 801becc:	75466b63 	strbvc	r6, [r6, #-2915]	@ 0xfffff49d
 801bed0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801bed4:	73006e6f 	movwvc	r6, #3695	@ 0xe6f
 801bed8:	702f6372 	eorvc	r6, pc, r2, ror r3	@ <UNPREDICTABLE>
 801bedc:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	@ 0xfffffe7c
 801bee0:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 801bee4:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801bee8:	6170786d 	cmnvs	r0, sp, ror #16
 801beec:	736d6172 	cmnvc	sp, #-2147483620	@ 0x8000001c
 801bef0:	7070632e 	rsbsvc	r6, r0, lr, lsr #6
 801bef4:	21207000 			@ <UNDEFINED> instruction: 0x21207000
 801bef8:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801befc:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801bf00:	74730072 	ldrbtvc	r0, [r3], #-114	@ 0xffffff8e
 801bf04:	63697461 	cmnvs	r9, #1627389952	@ 0x61000000
 801bf08:	6c6c6143 	stfvse	f6, [ip], #-268	@ 0xfffffef4
 801bf0c:	6b636162 	blvs	98f449c <__init_array_end+0x18d4d98>
 801bf10:	636e7546 	cmnvs	lr, #293601280	@ 0x11800000
 801bf14:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801bf18:	75427000 	strbvc	r7, [r2, #-0]
 801bf1c:	72656666 	rsbvc	r6, r5, #106954752	@ 0x6600000
 801bf20:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801bf24:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	@ 0xfffffe48
 801bf28:	00727470 	rsbseq	r7, r2, r0, ror r4
 801bf2c:	6c697542 	cfstr64vs	mvdx7, [r9], #-264	@ 0xfffffef8
 801bf30:	00726564 	rsbseq	r6, r2, r4, ror #10
 801bf34:	7265764f 	rsbvc	r7, r5, #82837504	@ 0x4f00000
 801bf38:	74697277 	strbtvc	r7, [r9], #-631	@ 0xfffffd89
 801bf3c:	61642065 	cmnvs	r4, r5, rrx
 801bf40:	68736174 	ldmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
 801bf44:	00746565 	rsbseq	r6, r4, r5, ror #10
 801bf48:	7265764f 	rsbvc	r7, r5, #82837504	@ 0x4f00000
 801bf4c:	74697277 	strbtvc	r7, [r9], #-631	@ 0xfffffd89
 801bf50:	69742065 	ldmdbvs	r4!, {r0, r2, r5, r6, sp}^
 801bf54:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
 801bf58:	73752820 	cmnvc	r5, #32, 16	@ 0x200000
 801bf5c:	72470029 	subvc	r0, r7, #41	@ 0x29
 801bf60:	6970756f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
 801bf64:	4300676e 	movwmi	r6, #1902	@ 0x76e
 801bf68:	6b636f6c 	blvs	98f7d20 <__init_array_end+0x18d861c>
 801bf6c:	73616220 	cmnvc	r1, #32, 4
 801bf70:	63206465 			@ <UNDEFINED> instruction: 0x63206465
 801bf74:	73706968 	cmnvc	r0, #104, 18	@ 0x1a0000
 801bf78:	41504100 	cmpmi	r0, r0, lsl #2
 801bf7c:	2f323031 	svccs	0x00323031
 801bf80:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801bf84:	54003232 	strpl	r3, [r0], #-562	@ 0xfffffdce
 801bf88:	20747365 	rsbscs	r7, r4, r5, ror #6
 801bf8c:	74746170 	ldrbtvc	r6, [r4], #-368	@ 0xfffffe90
 801bf90:	006e7265 	rsbeq	r7, lr, r5, ror #4
 801bf94:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801bf98:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801bf9c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801bfa0:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801bfa4:	536e203a 	cmnpl	lr, #58	@ 0x3a
 801bfa8:	3d657a69 	vstmdbcc	r5!, {s15-s119}
 801bfac:	000a6425 	andeq	r6, sl, r5, lsr #8
 801bfb0:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801bfb4:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801bfb8:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801bfbc:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801bfc0:	6f63786d 	svcvs	0x0063786d
 801bfc4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801bfc8:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801bfcc:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801bfd0:	75440068 	strbvc	r0, [r4, #-104]	@ 0xffffff98
 801bfd4:	2500706d 	strcs	r7, [r0, #-109]	@ 0xffffff93
 801bfd8:	253a3a73 	ldrcs	r3, [sl, #-2675]!	@ 0xfffff58d
 801bfdc:	25272073 	strcs	r2, [r7, #-115]!	@ 0xffffff8d
 801bfe0:	0a3a2773 	beq	8ea5db4 <__init_array_end+0xe866b0>
 801bfe4:	73252000 			@ <UNDEFINED> instruction: 0x73252000
 801bfe8:	2073253d 	rsbscs	r2, r3, sp, lsr r5
 801bfec:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	@ 0xfffffe94
 801bff0:	2520000a 	strcs	r0, [r0, #-10]!
 801bff4:	64253d73 	strtvs	r3, [r5], #-3443	@ 0xfffff28d
 801bff8:	73255b20 			@ <UNDEFINED> instruction: 0x73255b20
 801bffc:	20000a5d 	andcs	r0, r0, sp, asr sl
 801c000:	253d7325 	ldrcs	r7, [sp, #-805]!	@ 0xfffffcdb
 801c004:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801c008:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801c00c:	000a5d58 	andeq	r5, sl, r8, asr sp
 801c010:	3d732520 	cfldr64cc	mvdx2, [r3, #-128]!	@ 0xffffff80
 801c014:	000a6425 	andeq	r6, sl, r5, lsr #8
 801c018:	3d732520 	cfldr64cc	mvdx2, [r3, #-128]!	@ 0xffffff80
 801c01c:	000a7525 	andeq	r7, sl, r5, lsr #10
 801c020:	64616f4c 	strbtvs	r6, [r1], #-3916	@ 0xfffff0b4
 801c024:	654c6e00 	strbvs	r6, [ip, #-3584]	@ 0xfffff200
 801c028:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801c02c:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801c030:	2f2e0030 	svccs	0x002e0030
 801c034:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801c038:	2f656475 	svccs	0x00656475
 801c03c:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801c040:	6e6f636c 	cdpvs	3, 6, cr6, cr15, cr12, {3}
 801c044:	75676966 	strbvc	r6, [r7, #-2406]!	@ 0xfffff69a
 801c048:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801c04c:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801c050:	72227b00 	eorvc	r7, r2, #0, 22
 801c054:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801c058:	725f6873 	subsvc	r6, pc, #7536640	@ 0x730000
 801c05c:	22657461 	rsbcs	r7, r5, #1627389952	@ 0x61000000
 801c060:	7525223a 	strvc	r2, [r5, #-570]!	@ 0xfffffdc6
 801c064:	55007d22 	strpl	r7, [r0, #-3362]	@ 0xfffff2de
 801c068:	6f6e6b6e 	svcvs	0x006e6b6e
 801c06c:	70006e77 	andvc	r6, r0, r7, ror lr
 801c070:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
 801c074:	2120676e 			@ <UNDEFINED> instruction: 0x2120676e
 801c078:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801c07c:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801c080:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
 801c084:	5f6c6578 	svcpl	0x006c6578
 801c088:	5f746567 	svcpl	0x00746567
 801c08c:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801c090:	63727300 	cmnvs	r2, #0, 6
 801c094:	7869702f 	stmdavc	r9!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 801c098:	79746c65 	ldmdbvc	r4!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 801c09c:	632e6570 			@ <UNDEFINED> instruction: 0x632e6570
 801c0a0:	70007070 	andvc	r7, r0, r0, ror r0
 801c0a4:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801c0a8:	7465675f 	strbtvc	r6, [r5], #-1887	@ 0xfffff8a1
 801c0ac:	70616d5f 	rsbvc	r6, r1, pc, asr sp
 801c0b0:	646e5500 	strbtvs	r5, [lr], #-1280	@ 0xfffffb00
 801c0b4:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 801c0b8:	7b006465 	blvc	8035254 <__init_array_end+0x15b50>
 801c0bc:	70797422 	rsbsvc	r7, r9, r2, lsr #8
 801c0c0:	3a227365 	bcc	88b8e5c <__init_array_end+0x899758>
 801c0c4:	4c6e005b 	stclmi	0, cr0, [lr], #-364	@ 0xfffffe94
 801c0c8:	74676e65 	strbtvc	r6, [r7], #-3685	@ 0xfffff19b
 801c0cc:	3d3c2068 	ldccc	0, cr2, [ip, #-416]!	@ 0xfffffe60
 801c0d0:	754f6e20 	strbvc	r6, [pc, #-3616]	@ 801b2b8 <_etext+0x11c>
 801c0d4:	66754274 			@ <UNDEFINED> instruction: 0x66754274
 801c0d8:	53726566 	cmnpl	r2, #427819008	@ 0x19800000
 801c0dc:	00657a69 	rsbeq	r7, r5, r9, ror #20
 801c0e0:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801c0e4:	7465675f 	strbtvc	r6, [r5], #-1887	@ 0xfffff8a1
 801c0e8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 801c0ec:	50007365 	andpl	r7, r0, r5, ror #6
 801c0f0:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801c0f4:	74746150 	ldrbtvc	r6, [r4], #-336	@ 0xfffffeb0
 801c0f8:	736e7265 	cmnvc	lr, #1342177286	@ 0x50000006
 801c0fc:	63727300 	cmnvs	r2, #0, 6
 801c100:	7461702f 	strbtvc	r7, [r1], #-47	@ 0xffffffd1
 801c104:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 801c108:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 801c10c:	706c6578 	rsbvc	r6, ip, r8, ror r5
 801c110:	65747461 	ldrbvs	r7, [r4, #-1121]!	@ 0xfffffb9f
 801c114:	2e736e72 	mrccs	14, 3, r6, cr3, cr2, {3}
 801c118:	00707063 	rsbseq	r7, r0, r3, rrx
 801c11c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801c120:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801c124:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801c128:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801c12c:	416e203a 	cmnmi	lr, sl, lsr r0
 801c130:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 801c134:	726f5065 	rsbvc	r5, pc, #101	@ 0x65
 801c138:	253d7374 	ldrcs	r7, [sp, #-884]!	@ 0xfffffc8c
 801c13c:	73000a75 	movwvc	r0, #2677	@ 0xa75
 801c140:	754f705f 	strbvc	r7, [pc, #-95]	@ 801c0e9 <_etext+0xf4d>
 801c144:	74757074 	ldrbtvc	r7, [r5], #-116	@ 0xffffff8c
 801c148:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801c14c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	@ 0xfffffe48
 801c150:	00727470 	rsbseq	r7, r2, r0, ror r4
 801c154:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801c158:	446d002e 	strbtmi	r0, [sp], #-46	@ 0xffffffd2
 801c15c:	000a534e 	andeq	r5, sl, lr, asr #6
 801c160:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801c164:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801c168:	7069000a 	rsbvc	r0, r9, sl
 801c16c:	6425203a 	strtvs	r2, [r5], #-58	@ 0xffffffc6
 801c170:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c174:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c178:	3e2d2064 	cdpcc	0, 2, cr2, cr13, cr4, {3}
 801c17c:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801c180:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c184:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801c188:	656e000a 	strbvs	r0, [lr, #-10]!
 801c18c:	73616d74 	cmnvc	r1, #116, 26	@ 0x1d00
 801c190:	25203a6b 	strcs	r3, [r0, #-2667]!	@ 0xfffff595
 801c194:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801c198:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c19c:	2d206425 	cfstrscs	mvf6, [r0, #-148]!	@ 0xffffff6c
 801c1a0:	6425203e 	strtvs	r2, [r5], #-62	@ 0xffffffc2
 801c1a4:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c1a8:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c1ac:	67000a64 	strvs	r0, [r0, -r4, ror #20]
 801c1b0:	25203a77 	strcs	r3, [r0, #-2679]!	@ 0xfffff589
 801c1b4:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801c1b8:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c1bc:	2d206425 	cfstrscs	mvf6, [r0, #-148]!	@ 0xffffff6c
 801c1c0:	6425203e 	strtvs	r2, [r5], #-62	@ 0xffffffc2
 801c1c4:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c1c8:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c1cc:	65000a64 	strvs	r0, [r0, #-2660]	@ 0xfffff59c
 801c1d0:	00306874 	eorseq	r6, r0, r4, ror r8
 801c1d4:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801c1d8:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801c1dc:	2e253a78 			@ <UNDEFINED> instruction: 0x2e253a78
 801c1e0:	253a7832 	ldrcs	r7, [sl, #-2098]!	@ 0xfffff7ce
 801c1e4:	3a78322e 	bcc	9e28aa4 <__init_array_end+0x1e093a0>
 801c1e8:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801c1ec:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801c1f0:	67000a78 	smlsdxvs	r0, r8, sl, r0
 801c1f4:	64616769 	strbtvs	r6, [r1], #-1897	@ 0xfffff897
 801c1f8:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801c1fc:	53005f65 	movwpl	r5, #3941	@ 0xf65
 801c200:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
 801c204:	54657261 	strbtpl	r7, [r5], #-609	@ 0xfffffd9f
 801c208:	72656d69 	rsbvc	r6, r5, #6720	@ 0x1a40
 801c20c:	0a646441 	beq	9935318 <__init_array_end+0x1915c14>
 801c210:	63657300 	cmnvs	r5, #0, 6
 801c214:	61646e6f 	cmnvs	r4, pc, ror #28
 801c218:	695f7972 	ldmdbvs	pc, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^	@ <UNPREDICTABLE>
 801c21c:	74530070 	ldrbvc	r0, [r3], #-112	@ 0xffffff90
 801c220:	63697461 	cmnvs	r9, #1627389952	@ 0x61000000
 801c224:	00504920 	subseq	r4, r0, r0, lsr #18
 801c228:	2050544e 	subscs	r5, r0, lr, asr #8
 801c22c:	76726553 			@ <UNDEFINED> instruction: 0x76726553
 801c230:	44007265 	strmi	r7, [r0], #-613	@ 0xfffffd9b
 801c234:	38333850 	ldmdacc	r3!, {r4, r6, fp, ip, sp}
 801c238:	6e003834 	mcrvs	8, 0, r3, cr0, cr4, {1}
 801c23c:	3a3a7465 	bcc	8eb93d8 <__init_array_end+0xe99cd4>
 801c240:	5f796870 	svcpl	0x00796870
 801c244:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801c248:	50286769 	eorpl	r6, r8, r9, ror #14
 801c24c:	415f5948 	cmpmi	pc, r8, asr #18
 801c250:	45524444 	ldrbmi	r4, [r2, #-1092]	@ 0xfffffbbc
 801c254:	00295353 	eoreq	r5, r9, r3, asr r3
 801c258:	44007055 	strmi	r7, [r0], #-85	@ 0xffffffab
 801c25c:	006e776f 	rsbeq	r7, lr, pc, ror #14
 801c260:	464c4148 	strbmi	r4, [ip], -r8, asr #2
 801c264:	4c554600 	mrrcmi	6, 0, r4, r5, cr0
 801c268:	694c004c 	stmdbvs	ip, {r2, r3, r6}^
 801c26c:	25206b6e 	strcs	r6, [r0, #-2926]!	@ 0xfffff492
 801c270:	25202c73 	strcs	r2, [r0, #-3187]!	@ 0xfffff38d
 801c274:	25202c64 	strcs	r2, [r0, #-3172]!	@ 0xfffff39c
 801c278:	57000a73 	smlsdxpl	r0, r3, sl, r0
 801c27c:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
 801c280:	6620676e 	strtvs	r6, [r0], -lr, ror #14
 801c284:	5020726f 	eorpl	r7, r0, pc, ror #4
 801c288:	61205948 			@ <UNDEFINED> instruction: 0x61205948
 801c28c:	206f7475 	rsbcs	r7, pc, r5, ror r4	@ <UNPREDICTABLE>
 801c290:	6f67656e 	svcvs	0x0067656e
 801c294:	74616974 	strbtvc	r6, [r1], #-2420	@ 0xfffff68c
 801c298:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801c29c:	63206f74 			@ <UNDEFINED> instruction: 0x63206f74
 801c2a0:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	@ 0xfffffe44
 801c2a4:	00657465 	rsbeq	r7, r5, r5, ror #8
 801c2a8:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c2ac:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801c2b0:	2f64252e 	svccs	0x0064252e
 801c2b4:	25206425 	strcs	r6, [r0, #-1061]!	@ 0xfffffbdb
 801c2b8:	69460063 	stmdbvs	r6, {r0, r1, r5, r6}^
 801c2bc:	61776d72 	cmnvs	r7, r2, ror sp
 801c2c0:	56206572 			@ <UNDEFINED> instruction: 0x56206572
 801c2c4:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801c2c8:	203a4700 	eorscs	r4, sl, r0, lsl #14
 801c2cc:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c2d0:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801c2d4:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 801c2d8:	25203a4e 	strcs	r3, [r0, #-2638]!	@ 0xfffff5b2
 801c2dc:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801c2e0:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c2e4:	25006425 	strcs	r6, [r0, #-1061]	@ 0xfffffbdb
 801c2e8:	64252063 	strtvs	r2, [r5], #-99	@ 0xffffff9d
 801c2ec:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801c2f0:	25207325 	strcs	r7, [r0, #-805]!	@ 0xfffffcdb
 801c2f4:	6e490073 	mcrvs	0, 2, r0, cr9, cr3, {3}
 801c2f8:	00747570 	rsbseq	r7, r4, r0, ror r5
 801c2fc:	203a5041 	eorscs	r5, sl, r1, asr #32
 801c300:	4e006425 	cdpmi	4, 0, cr6, cr0, cr5, {1}
 801c304:	4d44206f 	stclmi	0, cr2, [r4, #-444]	@ 0xfffffe44
 801c308:	4d440058 	stclmi	0, cr0, [r4, #-352]	@ 0xfffffea0
 801c30c:	73252058 			@ <UNDEFINED> instruction: 0x73252058
 801c310:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801c314:	65687445 	strbvs	r7, [r8, #-1093]!	@ 0xfffffbbb
 801c318:	74656e72 	strbtvc	r6, [r5], #-3698	@ 0xfffff18e
 801c31c:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
 801c320:	74450074 	strbvc	r0, [r5], #-116	@ 0xffffff8c
 801c324:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
 801c328:	73207465 			@ <UNDEFINED> instruction: 0x73207465
 801c32c:	74726174 	ldrbtvc	r6, [r2], #-372	@ 0xfffffe8c
 801c330:	00505500 	subseq	r5, r0, r0, lsl #10
 801c334:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
 801c338:	68744500 	ldmdavs	r4!, {r8, sl, lr}^
 801c33c:	656e7265 	strbvs	r7, [lr, #-613]!	@ 0xfffffd9b
 801c340:	694c2074 	stmdbvs	ip, {r2, r4, r5, r6, sp}^
 801c344:	25206b6e 	strcs	r6, [r0, #-2926]!	@ 0xfffff492
 801c348:	74530073 	ldrbvc	r0, [r3], #-115	@ 0xffffff8d
 801c34c:	4465726f 	strbtmi	r7, [r5], #-623	@ 0xfffffd91
 801c350:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801c354:	42203a65 	eormi	r3, r0, #413696	@ 0x65000
 801c358:	4d415253 	sfmmi	f5, 2, [r1, #-332]	@ 0xfffffeb4
 801c35c:	74697720 	strbtvc	r7, [r9], #-1824	@ 0xfffff8e0
 801c360:	6f742068 	svcvs	0x00742068
 801c364:	206c6174 	rsbcs	r6, ip, r4, ror r1
 801c368:	62206425 	eorvs	r6, r0, #620756992	@ 0x25000000
 801c36c:	73657479 	cmnvc	r5, #2030043136	@ 0x79000000
 801c370:	64255b20 	strtvs	r5, [r5], #-2848	@ 0xfffff4e0
 801c374:	5d426b20 	vstrpl	d22, [r2, #-128]	@ 0xffffff80
 801c378:	2522000a 	strcs	r0, [r2, #-10]!
 801c37c:	223a2273 	eorscs	r2, sl, #805306375	@ 0x30000007
 801c380:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c384:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801c388:	2264252e 	rsbcs	r2, r4, #192937984	@ 0xb800000
 801c38c:	2523002c 	strcs	r0, [r3, #-44]!	@ 0xffffffd4
 801c390:	64253d73 	strtvs	r3, [r5], #-3443	@ 0xfffff28d
 801c394:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c398:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801c39c:	2b000a64 	blcs	801ed34 <s_patternName+0xc>
 801c3a0:	73252200 			@ <UNDEFINED> instruction: 0x73252200
 801c3a4:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801c3a8:	322e2573 	eorcc	r2, lr, #482344960	@ 0x1cc00000
 801c3ac:	2e253a64 	vnmulcs.f32	s6, s10, s9
 801c3b0:	2c227532 	cfstr32cs	mvfx7, [r2], #-200	@ 0xffffff38
 801c3b4:	3d732500 	cfldr64cc	mvdx2, [r3, #-0]
 801c3b8:	2e257325 	cdpcs	3, 2, cr7, cr5, cr5, {1}
 801c3bc:	253a6432 	ldrcs	r6, [sl, #-1074]!	@ 0xfffffbce
 801c3c0:	0075322e 	rsbseq	r3, r5, lr, lsr #4
 801c3c4:	73252023 			@ <UNDEFINED> instruction: 0x73252023
 801c3c8:	000a2320 	andeq	r2, sl, r0, lsr #6
 801c3cc:	64206f4e 	strtvs	r6, [r0], #-3918	@ 0xfffff0b2
 801c3d0:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801c3d4:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801c3d8:	646e756f 	strbtvs	r7, [lr], #-1391	@ 0xfffffa91
 801c3dc:	31485300 	mrscc	r5, (UNDEF: 120)
 801c3e0:	00363031 	eorseq	r3, r6, r1, lsr r0
 801c3e4:	31445353 	cmpcc	r4, r3, asr r3
 801c3e8:	00363033 	eorseq	r3, r6, r3, lsr r0
 801c3ec:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801c3f0:	252c7525 	strcs	r7, [ip, #-1317]!	@ 0xfffffadb
 801c3f4:	000a2975 	andeq	r2, sl, r5, ror r9
 801c3f8:	aaeeaa40 	bge	7bc6d00 <__stack_size+0x7bbed00>
 801c3fc:	565b00ee 	ldrbpl	r0, [fp], -lr, ror #1
 801c400:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801c404:	7325205d 			@ <UNDEFINED> instruction: 0x7325205d
 801c408:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	@ 801c390 <_etext+0x11f4>
 801c40c:	656c6970 	strbvs	r6, [ip, #-2416]!	@ 0xfffff690
 801c410:	6e6f2064 	cdpvs	0, 6, cr2, cr15, cr4, {3}
 801c414:	2a2e2520 	bcs	8ba589c <__init_array_end+0xb86198>
 801c418:	74612073 	strbtvc	r2, [r1], #-115	@ 0xffffff8d
 801c41c:	2a2e2520 	bcs	8ba58a4 <__init_array_end+0xb861a0>
 801c420:	227b0073 	rsbscs	r0, fp, #115	@ 0x73
 801c424:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801c428:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801c42c:	2e252d64 	cdpcs	13, 2, cr2, cr5, cr4, {3}
 801c430:	252d6432 	strcs	r6, [sp, #-1074]!	@ 0xfffffbce
 801c434:	5464322e 	strbtpl	r3, [r4], #-558	@ 0xfffffdd2
 801c438:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801c43c:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801c440:	2e253a64 	vnmulcs.f32	s6, s10, s9
 801c444:	225a6432 	subscs	r6, sl, #838860800	@ 0x32000000
 801c448:	7b000a7d 	blvc	801ee44 <mdns::DOMAIN_DNSSD+0x80>
 801c44c:	74616422 	strbtvc	r6, [r1], #-1058	@ 0xfffffbde
 801c450:	223a2265 	eorscs	r2, sl, #1342177286	@ 0x50000006
 801c454:	252d6425 	strcs	r6, [sp, #-1061]!	@ 0xfffffbdb
 801c458:	2d64322e 	sfmcs	f3, 2, [r4, #-184]!	@ 0xffffff48
 801c45c:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801c460:	322e2554 	eorcc	r2, lr, #84, 10	@ 0x15000000
 801c464:	2e253a64 	vnmulcs.f32	s6, s10, s9
 801c468:	253a6432 	ldrcs	r6, [sl, #-1074]!	@ 0xfffffbce
 801c46c:	2564322e 	strbcs	r3, [r4, #-558]!	@ 0xfffffdd2
 801c470:	322e2573 	eorcc	r2, lr, #482344960	@ 0x1cc00000
 801c474:	2e253a64 	vnmulcs.f32	s6, s10, s9
 801c478:	7d227532 	cfstr32vc	mvfx7, [r2, #-200]!	@ 0xffffff38
 801c47c:	5b1b000a 	blpl	86dc4ac <__init_array_end+0x6bcda8>
 801c480:	006d3133 	rsbeq	r3, sp, r3, lsr r1
 801c484:	37335b1b 			@ <UNDEFINED> instruction: 0x37335b1b
 801c488:	5b1b006d 	blpl	86dc644 <__init_array_end+0x6bcf40>
 801c48c:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 801c490:	32335b1b 	eorscc	r5, r3, #27648	@ 0x6c00
 801c494:	5b1b006d 	blpl	86dc650 <__init_array_end+0x6bcf4c>
 801c498:	006d3333 	rsbeq	r3, sp, r3, lsr r3
 801c49c:	39335b1b 	ldmdbcc	r3!, {r0, r1, r3, r4, r8, r9, fp, ip, lr}
 801c4a0:	5b1b006d 	blpl	86dc65c <__init_array_end+0x6bcf58>
 801c4a4:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 801c4a8:	31345b1b 	teqcc	r4, fp, lsl fp
 801c4ac:	5b1b006d 	blpl	86dc668 <__init_array_end+0x6bcf64>
 801c4b0:	006d3734 	rsbeq	r3, sp, r4, lsr r7
 801c4b4:	39345b1b 	ldmdbcc	r4!, {r0, r1, r3, r4, r8, r9, fp, ip, lr}
 801c4b8:	5b1b006d 	blpl	86dc674 <__init_array_end+0x6bcf70>
 801c4bc:	006d3433 	rsbeq	r3, sp, r3, lsr r4
 801c4c0:	63617453 	cmnvs	r1, #1392508928	@ 0x53000000
 801c4c4:	53203a6b 			@ <UNDEFINED> instruction: 0x53203a6b
 801c4c8:	20657a69 	rsbcs	r7, r5, r9, ror #20
 801c4cc:	424b7525 	submi	r7, fp, #155189248	@ 0x9400000
 801c4d0:	7355202c 	cmpvc	r5, #44	@ 0x2c
 801c4d4:	203a6465 	eorscs	r6, sl, r5, ror #8
 801c4d8:	202c7525 	eorcs	r7, ip, r5, lsr #10
 801c4dc:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
 801c4e0:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801c4e4:	335b1b00 	cmpcc	fp, #0, 22
 801c4e8:	000a6d39 	andeq	r6, sl, r9, lsr sp
 801c4ec:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 801c4f0:	3430252d 	ldrtcc	r2, [r0], #-1325	@ 0xfffffad3
 801c4f4:	30252d78 	eorcc	r2, r5, r8, ror sp
 801c4f8:	252d7834 	strcs	r7, [sp, #-2100]!	@ 0xfffff7cc
 801c4fc:	25783230 	ldrbcs	r3, [r8, #-560]!	@ 0xfffffdd0
 801c500:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	@ 0xffffff40
 801c504:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c508:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c50c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c510:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c514:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c518:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c51c:	66202c00 	strtvs	r2, [r0], -r0, lsl #24
 801c520:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
 801c524:	3a6e6f69 	bcc	9bb82d0 <__init_array_end+0x1b98bcc>
 801c528:	73610020 	cmnvc	r1, #32
 801c52c:	74726573 	ldrbtvc	r6, [r2], #-1395	@ 0xfffffa8d
 801c530:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801c534:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801c538:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 801c53c:	3a64656c 	bcc	9935af4 <__init_array_end+0x19163f0>
 801c540:	6c696620 	stclvs	6, cr6, [r9], #-128	@ 0xffffff80
 801c544:	25222065 	strcs	r2, [r2, #-101]!	@ 0xffffff9b
 801c548:	202c2273 	eorcs	r2, ip, r3, ror r2
 801c54c:	656e696c 	strbvs	r6, [lr, #-2412]!	@ 0xfffff694
 801c550:	25642520 	strbcs	r2, [r4, #-1312]!	@ 0xfffffae0
 801c554:	0a732573 	beq	9ce5b28 <__init_array_end+0x1cc6424>
 801c558:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
 801c55c:	203e2074 	eorscs	r2, lr, r4, ror r0
 801c560:	636f6c62 	cmnvs	pc, #25088	@ 0x6200
 801c564:	696c5f6b 	stmdbvs	ip!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 801c568:	0a74696d 	beq	9d36b24 <__init_array_end+0x1d17420>
	...

0801c56d <CSWTCH.104>:
 801c56d:	444e4f4f 	strbmi	r4, [lr], #-3919	@ 0xfffff0b1
 801c571:	 	andeq	r5, r0, r6, asr #4

0801c574 <vtable for ArtNetTriggerHandler>:
	...
 801c57c:	0800950d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip, pc}
 801c580:	0800950f 	stmdaeq	r0, {r0, r1, r2, r3, r8, sl, ip, pc}
 801c584:	08009a31 	stmdaeq	r0, {r0, r4, r5, r9, fp, ip, pc}

0801c588 <vtable for RDMNetDevice>:
	...
 801c590:	08009d3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, fp, ip, pc}
 801c594:	08009dc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, fp, ip, pc}
 801c598:	0800ebd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp, sp, lr, pc}
 801c59c:	0800ebd3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r8, r9, fp, sp, lr, pc}

0801c5a0 <SOFTWARE_VERSION>:
 801c5a0:	00302e31 	eorseq	r2, r0, r1, lsr lr

0801c5a4 <SOFTWARE_VERSION>:
 801c5a4:	00302e31 	eorseq	r2, r0, r1, lsr lr

0801c5a8 <s_Output>:
 801c5a8:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 801c5b4:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801c5c0:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 801c5c4:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801c5c8:	00000000 	andeq	r0, r0, r0
 801c5cc:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801c5d0:	0000006c 	andeq	r0, r0, ip, rrx
 801c5d4:	00000000 	andeq	r0, r0, r0
 801c5d8:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801c5dc:	65646f43 	strbvs	r6, [r4, #-3907]!	@ 0xfffff0bd
 801c5e0:	00000000 	andeq	r0, r0, r0
 801c5e4:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801c5f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801c5f4:	00006769 	andeq	r6, r0, r9, ror #14
 801c5f8:	00000000 	andeq	r0, r0, r0
 801c5fc:	70657453 	rsbvc	r7, r5, r3, asr r4
 801c600:	00726570 	rsbseq	r6, r2, r0, ror r5
 801c604:	00000000 	andeq	r0, r0, r0
 801c608:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801c60c:	00007265 	andeq	r7, r0, r5, ror #4
 801c610:	00000000 	andeq	r0, r0, r0
 801c614:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801c618:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801c61c:	00000000 	andeq	r0, r0, r0
 801c620:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801c624:	00006c61 	andeq	r6, r0, r1, ror #24
 801c628:	00000000 	andeq	r0, r0, r0
 801c62c:	20424752 	subcs	r4, r2, r2, asr r7
 801c630:	656e6150 	strbvs	r6, [lr, #-336]!	@ 0xfffffeb0
 801c634:	0000006c 	andeq	r0, r0, ip, rrx
 801c638:	004d5750 	subeq	r5, sp, r0, asr r7
	...

0801c644 <s_Node>:
 801c644:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801c648:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801c654:	41730000 	cmnmi	r3, r0
 801c658:	45204e43 	strmi	r4, [r0, #-3651]!	@ 0xfffff1bd
 801c65c:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801c668:	2043534f 	subcs	r5, r3, pc, asr #6
 801c66c:	76726553 			@ <UNDEFINED> instruction: 0x76726553
 801c670:	00007265 	andeq	r7, r0, r5, ror #4
 801c674:	00000000 	andeq	r0, r0, r0
 801c678:	544c0000 	strbpl	r0, [ip], #-0
 801c67c:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801c68c:	2043534f 	subcs	r5, r3, pc, asr #6
 801c690:	65696c43 	strbvs	r6, [r9, #-3139]!	@ 0xfffff3bd
 801c694:	0000746e 	andeq	r7, r0, lr, ror #8
 801c698:	00000000 	andeq	r0, r0, r0
 801c69c:	44520000 	ldrbmi	r0, [r2], #-0
 801c6a0:	74654e4d 	strbtvc	r4, [r5], #-3661	@ 0xfffff1b3
 801c6a4:	524c4c20 	subpl	r4, ip, #32, 24	@ 0x2000
 801c6a8:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801c6ac:	0000796c 	andeq	r7, r0, ip, ror #18
 801c6b0:	776f6853 			@ <UNDEFINED> instruction: 0x776f6853
 801c6b4:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
	...
 801c6c0:	494d0000 	stmdbmi	sp, {}^	@ <UNPREDICTABLE>
 801c6c4:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801c6d4:	00504444 	subseq	r4, r0, r4, asr #8
	...
 801c6e4:	69500000 	ldmdbvs	r0, {}^	@ <UNPREDICTABLE>
 801c6e8:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801c6ec:	65687375 	strbvs	r7, [r8, #-885]!	@ 0xfffffc8b
 801c6f0:	00000072 	andeq	r0, r0, r2, ror r0
 801c6f4:	00000000 	andeq	r0, r0, r0
 801c6f8:	65646f4e 	strbvs	r6, [r4, #-3918]!	@ 0xfffff0b2
	...
 801c708:	6f420000 	svcvs	0x00420000
 801c70c:	6f6c746f 	svcvs	0x006c746f
 801c710:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801c714:	54465420 	strbpl	r5, [r6], #-1056	@ 0xfffffbe0
 801c718:	00000050 	andeq	r0, r0, r0, asr r0
 801c71c:	204d4452 	subcs	r4, sp, r2, asr r4
 801c720:	70736552 	rsbsvc	r6, r3, r2, asr r5
 801c724:	65646e6f 	strbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801c728:	00000072 	andeq	r0, r0, r2, ror r0
 801c72c:	00000000 	andeq	r0, r0, r0

0801c730 <RemoteConfig::s_SET>:
 801c730:	0800a77d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, sp, pc}
 801c734:	00000000 	andeq	r0, r0, r0
 801c738:	0801b929 	stmdaeq	r1, {r0, r3, r5, r8, fp, ip, sp, pc}
 801c73c:	00010005 	andeq	r0, r1, r5
 801c740:	0800a755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, sp, pc}
 801c744:	00000000 	andeq	r0, r0, r0
 801c748:	0801b92f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 801c74c:	00010008 	andeq	r0, r1, r8

0801c750 <RemoteConfig::s_GET>:
 801c750:	0800afa5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, sl, fp, sp, pc}
 801c754:	00000000 	andeq	r0, r0, r0
 801c758:	0801b941 	stmdaeq	r1, {r0, r6, r8, fp, ip, sp, pc}
 801c75c:	00000008 	andeq	r0, r0, r8
 801c760:	0800a6a5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, sp, pc}
 801c764:	00000000 	andeq	r0, r0, r0
 801c768:	0801b94a 	stmdaeq	r1, {r1, r3, r6, r8, fp, ip, sp, pc}
 801c76c:	00000005 	andeq	r0, r0, r5
 801c770:	0800a621 	stmdaeq	r0, {r0, r5, r9, sl, sp, pc}
 801c774:	00000000 	andeq	r0, r0, r0
 801c778:	0801b950 	stmdaeq	r1, {r4, r6, r8, fp, ip, sp, pc}
 801c77c:	00000008 	andeq	r0, r0, r8
 801c780:	0800a595 	stmdaeq	r0, {r0, r2, r4, r7, r8, sl, sp, pc}
 801c784:	00000000 	andeq	r0, r0, r0
 801c788:	0801b92f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 801c78c:	00000008 	andeq	r0, r0, r8
 801c790:	0800a5e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, sp, pc}
 801c794:	00000000 	andeq	r0, r0, r0
 801c798:	0801b959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp, ip, sp, pc}
 801c79c:	00000007 	andeq	r0, r0, r7
 801c7a0:	0800a999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp, sp, pc}
 801c7a4:	00000000 	andeq	r0, r0, r0
 801c7a8:	0801b961 	stmdaeq	r1, {r0, r5, r6, r8, fp, ip, sp, pc}
 801c7ac:	00010004 	andeq	r0, r1, r4
 801c7b0:	0800a659 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, sp, pc}
 801c7b4:	00000000 	andeq	r0, r0, r0
 801c7b8:	0801b929 	stmdaeq	r1, {r0, r3, r5, r8, fp, ip, sp, pc}
 801c7bc:	00000005 	andeq	r0, r0, r5
 801c7c0:	0800acf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, fp, sp, pc}
 801c7c4:	00000000 	andeq	r0, r0, r0
 801c7c8:	0801b966 	stmdaeq	r1, {r1, r2, r5, r6, r8, fp, ip, sp, pc}
 801c7cc:	00000009 	andeq	r0, r0, r9

0801c7d0 <paramMasks>:
 801c7d0:	0801d336 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, ip, lr, pc}
 801c7d4:	00000001 	andeq	r0, r0, r1
 801c7d8:	0801d328 	stmdaeq	r1, {r3, r5, r8, r9, ip, lr, pc}
 801c7dc:	00000002 	andeq	r0, r0, r2
 801c7e0:	0801d31a 	stmdaeq	r1, {r1, r3, r4, r8, r9, ip, lr, pc}
 801c7e4:	00000004 	andeq	r0, r0, r4
 801c7e8:	0801d30c 	stmdaeq	r1, {r2, r3, r8, r9, ip, lr, pc}
 801c7ec:	00000008 	andeq	r0, r0, r8
 801c7f0:	0801d2fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, ip, lr, pc}
 801c7f4:	00000020 	andeq	r0, r0, r0, lsr #32

0801c7f8 <RemoteConfig::s_TXT>:
 801c7f8:	0800a9a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, sp, pc}
 801c7fc:	00000000 	andeq	r0, r0, r0
 801c800:	0800ac31 	stmdaeq	r0, {r0, r4, r5, sl, fp, sp, pc}
 801c804:	00000000 	andeq	r0, r0, r0
 801c808:	0801b9a2 	stmdaeq	r1, {r1, r5, r7, r8, fp, ip, sp, pc}
 801c80c:	0000000b 	andeq	r0, r0, fp
 801c810:	0800a9c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, fp, sp, pc}
 801c814:	00000000 	andeq	r0, r0, r0
 801c818:	0800ac59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, sp, pc}
 801c81c:	00000000 	andeq	r0, r0, r0
 801c820:	0801b9ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, ip, sp, pc}
 801c824:	00000007 	andeq	r0, r0, r7
 801c828:	0800a9ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, fp, sp, pc}
 801c82c:	00000000 	andeq	r0, r0, r0
 801c830:	0800ac79 	stmdaeq	r0, {r0, r3, r4, r5, r6, sl, fp, sp, pc}
 801c834:	00000000 	andeq	r0, r0, r0
 801c838:	0801b9b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, fp, ip, sp, pc}
 801c83c:	0000000b 	andeq	r0, r0, fp
 801c840:	0800aa65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp, sp, pc}
 801c844:	00000000 	andeq	r0, r0, r0
 801c848:	0800acd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, sp, pc}
 801c84c:	00000000 	andeq	r0, r0, r0
 801c850:	0801b9c2 	stmdaeq	r1, {r1, r6, r7, r8, fp, ip, sp, pc}
 801c854:	0000000b 	andeq	r0, r0, fp
 801c858:	0800aa15 	stmdaeq	r0, {r0, r2, r4, r9, fp, sp, pc}
 801c85c:	00000000 	andeq	r0, r0, r0
 801c860:	0800ac99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp, sp, pc}
 801c864:	00000000 	andeq	r0, r0, r0
 801c868:	0801b9ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, fp, ip, sp, pc}
 801c86c:	0000000a 	andeq	r0, r0, sl
 801c870:	0800aa3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp, sp, pc}
 801c874:	00000000 	andeq	r0, r0, r0
 801c878:	0800acb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, fp, sp, pc}
 801c87c:	00000000 	andeq	r0, r0, r0
 801c880:	0801b9d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, fp, ip, sp, pc}
 801c884:	0000000b 	andeq	r0, r0, fp
 801c888:	00000020 	andeq	r0, r0, r0, lsr #32
 801c88c:	00544547 	subseq	r4, r4, r7, asr #10
 801c890:	54534f50 	ldrbpl	r4, [r3], #-3920	@ 0xfffff0b0
 801c894:	00000000 	andeq	r0, r0, r0
 801c898:	0000002f 	andeq	r0, r0, pc, lsr #32
 801c89c:	50545448 	subspl	r5, r4, r8, asr #8
 801c8a0:	00000000 	andeq	r0, r0, r0
 801c8a4:	00000a20 	andeq	r0, r0, r0, lsr #20
 801c8a8:	00312e31 	eorseq	r2, r1, r1, lsr lr
 801c8ac:	0000003a 	andeq	r0, r0, sl, lsr r0
 801c8b0:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801c8b4:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801c8b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801c8bc:	00000000 	andeq	r0, r0, r0
 801c8c0:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801c8c4:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801c8c8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801c8cc:	00006874 	andeq	r6, r0, r4, ror r8
 801c8d0:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801c8d4:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801c8d8:	2f6e6f69 	svccs	0x006e6f69
 801c8dc:	00000000 	andeq	r0, r0, r0
 801c8e0:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801c8e4:	00000000 	andeq	r0, r0, r0
 801c8e8:	6574636f 	ldrbvs	r6, [r4, #-879]!	@ 0xfffffc91
 801c8ec:	74732d74 	ldrbtvc	r2, [r3], #-3444	@ 0xfffff28c
 801c8f0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	@ 0xfffffe38
 801c8f4:	00000000 	andeq	r0, r0, r0
 801c8f8:	00003b20 	andeq	r3, r0, r0, lsr #22
 801c8fc:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801c900:	00000000 	andeq	r0, r0, r0
 801c904:	6f736a2f 	svcvs	0x00736a2f
 801c908:	00002f6e 	andeq	r2, r0, lr, ror #30
 801c90c:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801c910:	00002f6c 	andeq	r2, r0, ip, ror #30
 801c914:	65646e69 	strbvs	r6, [r4, #-3689]!	@ 0xfffff197
 801c918:	74682e78 	strbtvc	r2, [r8], #-3704	@ 0xfffff188
 801c91c:	00006c6d 	andeq	r6, r0, sp, ror #24
 801c920:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	@ 0xffffff44
 801c924:	00000065 	andeq	r0, r0, r5, rrx
 801c928:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801c92c:	6d74682e 	ldclvs	8, cr6, [r4, #-184]!	@ 0xffffff48
 801c930:	0000006c 	andeq	r0, r0, ip, rrx
 801c934:	6f736a2f 	svcvs	0x00736a2f
 801c938:	63612f6e 	cmnvs	r1, #440	@ 0x1b8
 801c93c:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801c940:	00000000 	andeq	r0, r0, r0
 801c944:	6f736a2f 	svcvs	0x00736a2f
 801c948:	0000006e 	andeq	r0, r0, lr, rrx
 801c94c:	6f626572 	svcvs	0x00626572
 801c950:	0000746f 	andeq	r7, r0, pc, ror #8
 801c954:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801c958:	0079616c 	rsbseq	r6, r9, ip, ror #2
 801c95c:	6e656469 	cdpvs	4, 6, cr6, cr5, cr9, {3}
 801c960:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
 801c964:	00000000 	andeq	r0, r0, r0
 801c968:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801c96c:	0000003d 	andeq	r0, r0, sp, lsr r0
 801c970:	4f44213c 	svcmi	0x0044213c
 801c974:	50595443 	subspl	r5, r9, r3, asr #8
 801c978:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801c97c:	0a3e6c6d 	beq	8fb7b38 <__init_array_end+0xf98434>
 801c980:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801c984:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801c988:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801c98c:	69743c3e 	ldmdbvs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801c990:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801c994:	6d627553 	cfstr64vs	mvdx7, [r2, #-332]!	@ 0xfffffeb4
 801c998:	2f3c7469 	svccs	0x003c7469
 801c99c:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 801c9a0:	2f3c3e65 	svccs	0x003c3e65
 801c9a4:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801c9a8:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801c9ac:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801c9b0:	3e31683c 	mrccc	8, 1, r6, cr1, cr12, {1}
 801c9b4:	2f3c4b4f 	svccs	0x003c4b4f
 801c9b8:	3c3e3168 	ldfccs	f3, [lr], #-416	@ 0xfffffe60
 801c9bc:	646f622f 	strbtvs	r6, [pc], #-559	@ 801c9c4 <RemoteConfig::s_TXT+0x1cc>
 801c9c0:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801c9c4:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801c9c8:	000a3e6c 	andeq	r3, sl, ip, ror #28
 801c9cc:	20646142 	rsbcs	r6, r4, r2, asr #2
 801c9d0:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801c9d4:	00747365 	rsbseq	r7, r4, r5, ror #6
 801c9d8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801c9dc:	206e776f 	rsbcs	r7, lr, pc, ror #14
 801c9e0:	6f727245 	svcvs	0x00727245
 801c9e4:	00000072 	andeq	r0, r0, r2, ror r0
 801c9e8:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801c9ec:	20747365 	rsbscs	r7, r4, r5, ror #6
 801c9f0:	69746e45 	ldmdbvs	r4!, {r0, r2, r6, r9, sl, fp, sp, lr}^
 801c9f4:	54207974 	strtpl	r7, [r0], #-2420	@ 0xfffff68c
 801c9f8:	4c206f6f 	stcmi	15, cr6, [r0], #-444	@ 0xfffffe44
 801c9fc:	65677261 	strbvs	r7, [r7, #-609]!	@ 0xfffffd9f
 801ca00:	00000000 	andeq	r0, r0, r0
 801ca04:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801ca08:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	@ 0xfffffe6c
 801ca0c:	20495255 	subcs	r5, r9, r5, asr r2
 801ca10:	206f6f54 	rsbcs	r6, pc, r4, asr pc	@ <UNPREDICTABLE>
 801ca14:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 801ca18:	00000000 	andeq	r0, r0, r0
 801ca1c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801ca20:	6c616e72 	stclvs	14, cr6, [r1], #-456	@ 0xfffffe38
 801ca24:	72655320 	rsbvc	r5, r5, #32, 6	@ 0x80000000
 801ca28:	20726576 	rsbscs	r6, r2, r6, ror r5
 801ca2c:	6f727245 	svcvs	0x00727245
 801ca30:	00000072 	andeq	r0, r0, r2, ror r0
 801ca34:	6874654d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
 801ca38:	4e20646f 	cdpmi	4, 2, cr6, cr0, cr15, {3}
 801ca3c:	4920746f 	stmdbmi	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
 801ca40:	656c706d 	strbvs	r7, [ip, #-109]!	@ 0xffffff93
 801ca44:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801ca48:	00006465 	andeq	r6, r0, r5, ror #8
 801ca4c:	73726556 	cmnvc	r2, #360710144	@ 0x15800000
 801ca50:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801ca54:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801ca58:	70707553 	rsbsvc	r7, r0, r3, asr r5
 801ca5c:	6574726f 	ldrbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801ca60:	00000064 	andeq	r0, r0, r4, rrx
 801ca64:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801ca68:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 801ca6c:	00000064 	andeq	r0, r0, r4, rrx
 801ca70:	00004b4f 	andeq	r4, r0, pc, asr #22
 801ca74:	4f44213c 	svcmi	0x0044213c
 801ca78:	50595443 	subspl	r5, r9, r3, asr #8
 801ca7c:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801ca80:	0a3e6c6d 	beq	8fb7c3c <__init_array_end+0xf98538>
 801ca84:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801ca88:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801ca8c:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801ca90:	69743c3e 	ldmdbvs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801ca94:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801ca98:	25207525 	strcs	r7, [r0, #-1317]!	@ 0xfffffadb
 801ca9c:	742f3c73 	strtvc	r3, [pc], #-3187	@ 801caa4 <RemoteConfig::s_TXT+0x2ac>
 801caa0:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801caa4:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801caa8:	3e646165 	powccsz	f6, f4, f5
 801caac:	6f623c0a 	svcvs	0x00623c0a
 801cab0:	3c3e7964 			@ <UNDEFINED> instruction: 0x3c3e7964
 801cab4:	253e3168 	ldrcs	r3, [lr, #-360]!	@ 0xfffffe98
 801cab8:	682f3c73 	stmdavs	pc!, {r0, r1, r4, r5, r6, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801cabc:	2f3c3e31 	svccs	0x003c3e31
 801cac0:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801cac4:	2f3c0a3e 	svccs	0x003c0a3e
 801cac8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	@ 0xfffffe60
 801cacc:	00000a3e 	andeq	r0, r0, lr, lsr sl
 801cad0:	50545448 	subspl	r5, r4, r8, asr #8
 801cad4:	312e312f 			@ <UNDEFINED> instruction: 0x312e312f
 801cad8:	20752520 	rsbscs	r2, r5, r0, lsr #10
 801cadc:	0a0d7325 	beq	8379778 <__init_array_end+0x35a074>
 801cae0:	76726553 			@ <UNDEFINED> instruction: 0x76726553
 801cae4:	203a7265 	eorscs	r7, sl, r5, ror #4
 801cae8:	0a0d7325 	beq	8379784 <__init_array_end+0x35a080>
 801caec:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801caf0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801caf4:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801caf8:	7325203a 			@ <UNDEFINED> instruction: 0x7325203a
 801cafc:	6f430a0d 	svcvs	0x00430a0d
 801cb00:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801cb04:	654c2d74 	strbvs	r2, [ip, #-3444]	@ 0xfffff28c
 801cb08:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801cb0c:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801cb10:	6f430a0d 	svcvs	0x00430a0d
 801cb14:	63656e6e 	cmnvs	r5, #1760	@ 0x6e0
 801cb18:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801cb1c:	6c63203a 	stclvs	0, cr2, [r3], #-232	@ 0xffffff18
 801cb20:	0d65736f 	stcleq	3, cr7, [r5, #-444]!	@ 0xfffffe44
 801cb24:	000a0d0a 	andeq	r0, sl, sl, lsl #26
 801cb28:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 801cb2c:	2e37203a 	mrccs	0, 1, r2, cr7, cr10, {1}
 801cb30:	726f4d20 	rsbvc	r4, pc, #32, 26	@ 0x800
 801cb34:	68742065 	ldmdavs	r4!, {r0, r2, r5, r6, sp}^
 801cb38:	74206e61 	strtvc	r6, [r0], #-3681	@ 0xfffff19f
 801cb3c:	73206f77 			@ <UNDEFINED> instruction: 0x73206f77
 801cb40:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
 801cb44:	202c7365 	eorcs	r7, ip, r5, ror #6
 801cb48:	63736964 	cmnvs	r3, #100, 18	@ 0x190000
 801cb4c:	69647261 	stmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
 801cb50:	6420676e 	strtvs	r6, [r0], #-1902	@ 0xfffff892
 801cb54:	00617461 	rsbeq	r7, r1, r1, ror #8
 801cb58:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 801cb5c:	2e38203a 	mrccs	0, 1, r2, cr8, cr10, {1}
 801cb60:	756f5320 	strbvc	r5, [pc, #-800]!	@ 801c848 <RemoteConfig::s_TXT+0x50>
 801cb64:	20656372 	rsbcs	r6, r5, r2, ror r3
 801cb68:	6374616d 	cmnvs	r4, #1073741851	@ 0x4000001b
 801cb6c:	20736568 	rsbscs	r6, r3, r8, ror #10
 801cb70:	68746f62 	ldmdavs	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801cb74:	2c706920 			@ <UNDEFINED> instruction: 0x2c706920
 801cb78:	73696420 	cmnvc	r9, #32, 8	@ 0x20000000
 801cb7c:	64726163 	ldrbtvs	r6, [r2], #-355	@ 0xfffffe9d
 801cb80:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801cb84:	61746164 	cmnvs	r4, r4, ror #2
 801cb88:	00000000 	andeq	r0, r0, r0
 801cb8c:	54705f73 	ldrbtpl	r5, [r0], #-3955	@ 0xfffff08d
 801cb90:	20736968 	rsbscs	r6, r3, r8, ror #18
 801cb94:	6e203d21 	cdpvs	13, 2, cr3, cr0, cr1, {1}
 801cb98:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801cb9c:	00007274 	andeq	r7, r0, r4, ror r2
 801cba0:	00746547 	rsbseq	r6, r4, r7, asr #10
 801cba4:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801cba8:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801cbac:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801cbb0:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801cbb4:	6f63786d 	svcvs	0x0063786d
 801cbb8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801cbbc:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801cbc0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801cbc4:	00000068 	andeq	r0, r0, r8, rrx
 801cbc8:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801cbcc:	6f63206c 	svcvs	0x0063206c
 801cbd0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801cbd4:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801cbd8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801cbdc:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 801cbe0:	20202065 	eorcs	r2, r0, r5, rrx
 801cbe4:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cbe8:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801cbec:	3c205d64 	stccc	13, cr5, [r0], #-400	@ 0xfffffe70
 801cbf0:	6c206425 	cfstrsvs	mvf6, [r0], #-148	@ 0xffffff6c
 801cbf4:	2f736465 	svccs	0x00736465
 801cbf8:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801cbfc:	000a3e6c 	andeq	r3, sl, ip, ror #28
 801cc00:	756f4320 	strbvc	r4, [pc, #-800]!	@ 801c8e8 <RemoteConfig::s_TXT+0xf0>
 801cc04:	2020746e 	eorcs	r7, r0, lr, ror #8
 801cc08:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cc0c:	00000a64 	andeq	r0, r0, r4, ror #20
 801cc10:	70614d20 	rsbvc	r4, r1, r0, lsr #26
 801cc14:	676e6970 			@ <UNDEFINED> instruction: 0x676e6970
 801cc18:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cc1c:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801cc20:	000a5d64 	andeq	r5, sl, r4, ror #26
 801cc24:	48305420 	ldmdami	r0!, {r5, sl, ip, lr}
 801cc28:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cc2c:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cc30:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801cc34:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801cc38:	000a5d58 	andeq	r5, sl, r8, asr sp
 801cc3c:	48315420 	ldmdami	r1!, {r5, sl, ip, lr}
 801cc40:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cc44:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cc48:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801cc4c:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801cc50:	000a5d58 	andeq	r5, sl, r8, asr sp
 801cc54:	6f6c4720 	svcvs	0x006c4720
 801cc58:	426c6162 	rsbmi	r6, ip, #-2147483624	@ 0x80000018
 801cc5c:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801cc60:	73656e74 	cmnvc	r5, #116, 28	@ 0x740
 801cc64:	25203a73 	strcs	r3, [r0, #-2675]!	@ 0xfffff58d
 801cc68:	00000a75 	andeq	r0, r0, r5, ror sl
 801cc6c:	6f6c4320 	svcvs	0x006c4320
 801cc70:	20206b63 	eorcs	r6, r0, r3, ror #22
 801cc74:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cc78:	7a482075 	bvc	9224e54 <__init_array_end+0x1205750>
 801cc7c:	0000000a 	andeq	r0, r0, sl
 801cc80:	66655220 	strbtvs	r5, [r5], -r0, lsr #4
 801cc84:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801cc88:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cc8c:	7a482075 	bvc	9224e68 <__init_array_end+0x1205764>
 801cc90:	0000000a 	andeq	r0, r0, sl
 801cc94:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801cc98:	4d44206c 	stclmi	0, cr2, [r4, #-432]	@ 0xfffffe50
 801cc9c:	6f632058 	svcvs	0x00632058
 801cca0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801cca4:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801cca8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801ccac:	74754f20 	ldrbtvc	r4, [r5], #-3872	@ 0xfffff0e0
 801ccb0:	73747570 	cmnvc	r4, #112, 10	@ 0x1c000000
 801ccb4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801ccb8:	20202020 	eorcs	r2, r0, r0, lsr #32
 801ccbc:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801ccc0:	0000000a 	andeq	r0, r0, sl
 801ccc4:	6f724720 	svcvs	0x00724720
 801ccc8:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 801cccc:	6f632067 	svcvs	0x00632067
 801ccd0:	20746e75 	rsbscs	r6, r4, r5, ror lr
 801ccd4:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801ccd8:	72475b20 	subvc	r5, r7, #32, 22	@ 0x8000
 801ccdc:	7370756f 	cmnvc	r0, #465567744	@ 0x1bc00000
 801cce0:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cce4:	000a5d75 	andeq	r5, sl, r5, ror sp
 801cce8:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801ccec:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801ccf0:	20207365 	eorcs	r7, r0, r5, ror #6
 801ccf4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801ccf8:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801ccfc:	0000000a 	andeq	r0, r0, sl
 801cd00:	786d4420 	stmdavc	sp!, {r5, sl, lr}^
 801cd04:	746f6f46 	strbtvc	r6, [pc], #-3910	@ 801cd0c <RemoteConfig::s_TXT+0x514>
 801cd08:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 801cd0c:	20202074 	eorcs	r2, r0, r4, ror r0
 801cd10:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801cd14:	0000000a 	andeq	r0, r0, sl
 801cd18:	3a752520 	bcc	9d661a0 <__init_array_end+0x1d46a9c>
 801cd1c:	253a7525 	ldrcs	r7, [sl, #-1317]!	@ 0xfffffadb
 801cd20:	75253a75 	strvc	r3, [r5, #-2677]!	@ 0xfffff58b
 801cd24:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801cd28:	000a7525 	andeq	r7, sl, r5, lsr #10
 801cd2c:	2f637273 	svccs	0x00637273
 801cd30:	6d786d64 	ldclvs	13, cr6, [r8, #-400]!	@ 0xfffffe70
 801cd34:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801cd38:	3273772f 	rsbscc	r7, r3, #12320768	@ 0xbc0000
 801cd3c:	64787838 	ldrbtvs	r7, [r8], #-2104	@ 0xfffff7c8
 801cd40:	756d786d 	strbvc	r7, [sp, #-2157]!	@ 0xfffff793
 801cd44:	2e69746c 	cdpcs	4, 6, cr7, cr9, cr12, {3}
 801cd48:	00707063 	rsbseq	r7, r0, r3, rrx
 801cd4c:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
 801cd50:	00000074 	andeq	r0, r0, r4, ror r0
 801cd54:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cd58:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801cd5c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801cd60:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801cd64:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801cd68:	0000000a 	andeq	r0, r0, sl
 801cd6c:	706f7453 	rsbvc	r7, pc, r3, asr r4	@ <UNPREDICTABLE>
 801cd70:	00000000 	andeq	r0, r0, r0
 801cd74:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801cd78:	6d447878 	stclvs	8, cr7, [r4, #-480]	@ 0xfffffe20
 801cd7c:	6c754d78 	ldclvs	13, cr4, [r5], #-480	@ 0xfffffe20
 801cd80:	00006974 	andeq	r6, r0, r4, ror r9
 801cd84:	203e2d2d 	eorscs	r2, lr, sp, lsr #26
 801cd88:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801cd8c:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801cd90:	0000000a 	andeq	r0, r0, sl
 801cd94:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
 801cd98:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801cd9c:	00000000 	andeq	r0, r0, r0
 801cda0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801ccf0 <RemoteConfig::s_TXT+0x4f8>
 801cda4:	772d6269 	strvc	r6, [sp, -r9, ror #4]!
 801cda8:	78383273 	ldmdavc	r8!, {r0, r1, r4, r5, r6, r9, ip, sp}
 801cdac:	6e692f78 	mcrvs	15, 3, r2, cr9, cr8, {3}
 801cdb0:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801cdb4:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801cdb8:	636c6578 	cmnvs	ip, #120, 10	@ 0x1e000000
 801cdbc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801cdc0:	61727567 	cmnvs	r2, r7, ror #10
 801cdc4:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801cdc8:	0000682e 	andeq	r6, r0, lr, lsr #16
 801cdcc:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 801cdd0:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801cdd4:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801cdd8:	0000000a 	andeq	r0, r0, sl
 801cddc:	74614470 	strbtvc	r4, [r1], #-1136	@ 0xfffffb90
 801cde0:	3d212061 	stccc	0, cr2, [r1, #-388]!	@ 0xfffffe7c
 801cde4:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801cde8:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801cdec:	00000000 	andeq	r0, r0, r0
 801cdf0:	44746553 	ldrbtmi	r6, [r4], #-1363	@ 0xfffffaad
 801cdf4:	00617461 	rsbeq	r7, r1, r1, ror #8
 801cdf8:	6e654c6e 	cdpvs	12, 6, cr4, cr5, cr14, {3}
 801cdfc:	20687467 	rsbcs	r7, r8, r7, ror #8
 801ce00:	6c203d3c 	stcvs	13, cr3, [r0], #-240	@ 0xffffff10
 801ce04:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801ce08:	3a746573 	bcc	9d363dc <__init_array_end+0x1d16cd8>
 801ce0c:	786d643a 	stmdavc	sp!, {r1, r3, r4, r5, sl, sp, lr}^
 801ce10:	4e553a3a 			@ <UNDEFINED> instruction: 0x4e553a3a
 801ce14:	52455649 	subpl	r5, r5, #76546048	@ 0x4900000
 801ce18:	535f4553 	cmppl	pc, #348127232	@ 0x14c00000
 801ce1c:	00455a49 	subeq	r5, r5, r9, asr #20
 801ce20:	4970616d 	ldmdbmi	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 801ce24:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801ce28:	73203c20 			@ <UNDEFINED> instruction: 0x73203c20
 801ce2c:	6f657a69 	svcvs	0x00657a69
 801ce30:	68632866 	stmdavs	r3!, {r1, r2, r5, r6, fp, sp}^
 801ce34:	656e6e61 	strbvs	r6, [lr, #-3681]!	@ 0xfffff19f
 801ce38:	70614d6c 	rsbvc	r4, r1, ip, ror #26
 801ce3c:	202f2029 	eorcs	r2, pc, r9, lsr #32
 801ce40:	657a6973 	ldrbvs	r6, [sl, #-2419]!	@ 0xfffff68d
 801ce44:	6328666f 			@ <UNDEFINED> instruction: 0x6328666f
 801ce48:	6e6e6168 	powvsez	f6, f6, #0.0
 801ce4c:	614d6c65 	cmpvs	sp, r5, ror #24
 801ce50:	5d305b70 	vldmdbpl	r0!, {d5-<overflow reg d60>}
 801ce54:	00000029 	andeq	r0, r0, r9, lsr #32
 801ce58:	00000030 	andeq	r0, r0, r0, lsr r0
 801ce5c:	7265706f 	rsbvc	r7, r5, #111	@ 0x6f
 801ce60:	726f7461 	rsbvc	r7, pc, #1627389952	@ 0x61000000
 801ce64:	00002928 	andeq	r2, r0, r8, lsr #18
 801ce68:	6168436e 	cmnvs	r8, lr, ror #6
 801ce6c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	@ 0xfffffe48
 801ce70:	72655073 	rsbvc	r5, r5, #115	@ 0x73
 801ce74:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801ce78:	3d3d206c 	ldccc	0, cr2, [sp, #-432]!	@ 0xfffffe50
 801ce7c:	00003420 	andeq	r3, r0, r0, lsr #8
 801ce80:	54527369 	ldrbpl	r7, [r2], #-873	@ 0xfffffc97
 801ce84:	6f72505a 	svcvs	0x0072505a
 801ce88:	6f636f74 	svcvs	0x00636f74
 801ce8c:	0000006c 	andeq	r0, r0, ip, rrx
 801ce90:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801ce94:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801ce98:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801ce9c:	524f5020 	subpl	r5, pc, #32
 801cea0:	00005354 	andeq	r5, r0, r4, asr r3
 801cea4:	63614249 	cmnvs	r1, #-1879048188	@ 0x90000004
 801cea8:	0070756b 	rsbseq	r7, r0, fp, ror #10
 801ceac:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801cdfc <RemoteConfig::s_TXT+0x604>
 801ceb0:	6c2d6269 	sfmvs	f6, 4, [sp], #-420	@ 0xfffffe5c
 801ceb4:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801ceb8:	2f746573 	svccs	0x00746573
 801cebc:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801cec0:	2f656475 	svccs	0x00656475
 801cec4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 801cec8:	74657374 	strbtvc	r7, [r5], #-884	@ 0xfffffc8c
 801cecc:	61746164 	cmnvs	r4, r4, ror #2
 801ced0:	0000682e 	andeq	r6, r0, lr, lsr #16
 801ced4:	3253577e 	subscc	r5, r3, #33030144	@ 0x1f80000
 801ced8:	4d787838 	ldclmi	8, cr7, [r8, #-224]!	@ 0xffffff20
 801cedc:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801cee0:	00000000 	andeq	r0, r0, r0
 801cee4:	2f637273 	svccs	0x00637273
 801cee8:	32336467 	eorscc	r6, r3, #1728053248	@ 0x67000000
 801ceec:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 801cef0:	73772f6f 	cmnvc	r7, #444	@ 0x1bc
 801cef4:	78783832 	ldmdavc	r8!, {r1, r4, r5, fp, ip, sp}^
 801cef8:	746c756d 	strbtvc	r7, [ip], #-1389	@ 0xfffffa93
 801cefc:	70632e69 	rsbvc	r2, r3, r9, ror #28
 801cf00:	00000070 	andeq	r0, r0, r0, ror r0
 801cf04:	75746553 	ldrbvc	r6, [r4, #-1363]!	@ 0xfffffaad
 801cf08:	00000070 	andeq	r0, r0, r0, ror r0
 801cf0c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cf10:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801cf14:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801cf18:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801cf1c:	5452203a 	ldrbpl	r2, [r2], #-58	@ 0xffffffc6
 801cf20:	49545f5a 	ldmdbmi	r4, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 801cf24:	5f52454d 	svcpl	0x0052454d
 801cf28:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
 801cf2c:	253d444f 	ldrcs	r4, [sp, #-1103]!	@ 0xfffffbb1
 801cf30:	6e202c75 	mcrvs	12, 1, r2, cr0, cr5, {3}
 801cf34:	3d483054 	stclcc	0, cr3, [r8, #-336]	@ 0xfffffeb0
 801cf38:	202c7525 	eorcs	r7, ip, r5, lsr #10
 801cf3c:	4831546e 	ldmdami	r1!, {r1, r2, r3, r5, r6, sl, ip, lr}
 801cf40:	0a75253d 	beq	9d6643c <__init_array_end+0x1d46d38>
 801cf44:	00000000 	andeq	r0, r0, r0
 801cf48:	2b203128 	blcs	88293f0 <__init_array_end+0x809cec>
 801cf4c:	6e5f6d20 	cdpvs	13, 5, cr6, cr15, cr0, {1}
 801cf50:	53667542 	cmnpl	r6, #276824064	@ 0x10800000
 801cf54:	29657a69 	stmdbcs	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 801cf58:	55203c20 	strpl	r3, [r0, #-3104]!	@ 0xfffff3e0
 801cf5c:	31544e49 	cmpcc	r4, r9, asr #28
 801cf60:	414d5f36 	cmpmi	sp, r6, lsr pc
 801cf64:	00000058 	andeq	r0, r0, r8, asr r0
 801cf68:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801cf6c:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801cf70:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801cf74:	636c6578 	cmnvs	ip, #120, 10	@ 0x1e000000
 801cf78:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801cf7c:	61727567 	cmnvs	r2, r7, ror #10
 801cf80:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801cf84:	0000682e 	andeq	r6, r0, lr, lsr #16
 801cf88:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801cf8c:	00000a6c 	andeq	r0, r0, ip, ror #20
 801cf90:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 801cf94:	3a202065 	bcc	8825130 <__init_array_end+0x805a2c>
 801cf98:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801cf9c:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	@ 0xfffffe94
 801cfa0:	0000000a 	andeq	r0, r0, sl
 801cfa4:	756f4320 	strbvc	r4, [pc, #-800]!	@ 801cc8c <RemoteConfig::s_TXT+0x494>
 801cfa8:	3a20746e 	bcc	883a168 <__init_array_end+0x81aa64>
 801cfac:	0a642520 	beq	9926434 <__init_array_end+0x1906d30>
 801cfb0:	00000000 	andeq	r0, r0, r0
 801cfb4:	6f6c4320 	svcvs	0x006c4320
 801cfb8:	3a206b63 	bcc	8837d4c <__init_array_end+0x818648>
 801cfbc:	20752520 	rsbscs	r2, r5, r0, lsr #10
 801cfc0:	000a7a48 	andeq	r7, sl, r8, asr #20
 801cfc4:	5f767321 	svcpl	0x00767321
 801cfc8:	75527369 	ldrbvc	r7, [r2, #-873]	@ 0xfffffc97
 801cfcc:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 801cfd0:	00000067 	andeq	r0, r0, r7, rrx
 801cfd4:	61647055 	qdsubvs	r7, r5, r4
 801cfd8:	00006574 	andeq	r6, r0, r4, ror r5
 801cfdc:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801cfe0:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801cfe4:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801cfe8:	78697020 	stmdavc	r9!, {r5, ip, sp, lr}^
 801cfec:	3a3a6c65 	bcc	8eb8188 <__init_array_end+0xe98a84>
 801cff0:	54524f50 	ldrbpl	r4, [r2], #-3920	@ 0xfffff0b0
 801cff4:	554f435f 	strbpl	r4, [pc, #-863]	@ 801cc9d <RemoteConfig::s_TXT+0x4a5>
 801cff8:	0000544e 	andeq	r5, r0, lr, asr #8
 801cffc:	43746553 	cmnmi	r4, #348127232	@ 0x14c00000
 801d000:	756f6c6f 	strbvc	r6, [pc, #-3183]!	@ 801c399 <_etext+0x11fd>
 801d004:	5a545272 	bpl	95319d4 <__init_array_end+0x15122d0>
 801d008:	00000000 	andeq	r0, r0, r0
 801d00c:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801d010:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801d014:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801d018:	00363120 	eorseq	r3, r6, r0, lsr #2
 801d01c:	43746553 	cmnmi	r4, #348127232	@ 0x14c00000
 801d020:	756f6c6f 	strbvc	r6, [pc, #-3183]!	@ 801c3b9 <_etext+0x121d>
 801d024:	32535772 	subscc	r5, r3, #29884416	@ 0x1c80000
 801d028:	00313038 	eorseq	r3, r1, r8, lsr r0
 801d02c:	7869506e 	stmdavc	r9!, {r1, r2, r3, r5, r6, ip, lr}^
 801d030:	6e496c65 	cdpvs	12, 4, cr6, cr9, cr5, {3}
 801d034:	20786564 	rsbscs	r6, r8, r4, ror #10
 801d038:	5f6d203c 	svcpl	0x006d203c
 801d03c:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
 801d040:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801d044:	38202f20 	stmdacc	r0!, {r5, r8, r9, sl, fp, sp}
 801d048:	00000000 	andeq	r0, r0, r0
 801d04c:	50746553 	rsbspl	r6, r4, r3, asr r5
 801d050:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801d054:	74794234 	ldrbtvc	r4, [r9], #-564	@ 0xfffffdcc
 801d058:	00007365 	andeq	r7, r0, r5, ror #6
 801d05c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d060:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801d064:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801d068:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801d06c:	466e203a 			@ <UNDEFINED> instruction: 0x466e203a
 801d070:	75716572 	ldrbvc	r6, [r1, #-1394]!	@ 0xfffffa8e
 801d074:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801d078:	2c75253d 	cfldr64cs	mvdx2, [r5], #-244	@ 0xffffff0c
 801d07c:	69546e20 	ldmdbvs	r4, {r5, r9, sl, fp, sp, lr}^
 801d080:	72656b63 	rsbvc	r6, r5, #101376	@ 0x18c00
 801d084:	0a75253d 	beq	9d66580 <__init_array_end+0x1d46e7c>
 801d088:	00000000 	andeq	r0, r0, r0
 801d08c:	546e2828 	strbtpl	r2, [lr], #-2088	@ 0xfffff7d8
 801d090:	656b6369 	strbvs	r6, [fp, #-873]!	@ 0xfffffc97
 801d094:	202f2072 	eorcs	r2, pc, r2, ror r0	@ <UNPREDICTABLE>
 801d098:	2d202932 			@ <UNDEFINED> instruction: 0x2d202932
 801d09c:	20293120 	eorcs	r3, r9, r0, lsr #2
 801d0a0:	4955203c 	ldmdbmi	r5, {r2, r3, r4, r5, sp}^
 801d0a4:	3631544e 	ldrtcc	r5, [r1], -lr, asr #8
 801d0a8:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
 801d0ac:	00000000 	andeq	r0, r0, r0
 801d0b0:	546e2828 	strbtpl	r2, [lr], #-2088	@ 0xfffff7d8
 801d0b4:	656b6369 	strbvs	r6, [fp, #-873]!	@ 0xfffffc97
 801d0b8:	202f2072 	eorcs	r2, pc, r2, ror r0	@ <UNPREDICTABLE>
 801d0bc:	2d202934 			@ <UNDEFINED> instruction: 0x2d202934
 801d0c0:	20293120 	eorcs	r3, r9, r0, lsr #2
 801d0c4:	4955203c 	ldmdbmi	r5, {r2, r3, r4, r5, sp}^
 801d0c8:	3631544e 	ldrtcc	r5, [r1], -lr, asr #8
 801d0cc:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
 801d0d0:	00000000 	andeq	r0, r0, r0
 801d0d4:	426e5f6d 	rsbmi	r5, lr, #436	@ 0x1b4
 801d0d8:	69536675 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
 801d0dc:	3c20657a 	cfstr32cc	mvfx6, [r0], #-488	@ 0xfffffe18
 801d0e0:	4e495520 	cdpmi	5, 4, cr5, cr9, cr0, {1}
 801d0e4:	5f363154 	svcpl	0x00363154
 801d0e8:	0058414d 	subseq	r4, r8, sp, asr #2
 801d0ec:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d0f0:	754d7878 	strbvc	r7, [sp, #-2168]	@ 0xfffff788
 801d0f4:	0069746c 	rsbeq	r7, r9, ip, ror #8
 801d0f8:	54705f73 	ldrbtpl	r5, [r0], #-3955	@ 0xfffff08d
 801d0fc:	20736968 	rsbscs	r6, r3, r8, ror #18
 801d100:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
 801d104:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801d108:	00007274 	andeq	r7, r0, r4, ror r2
 801d10c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d110:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801d114:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801d118:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801d11c:	4f50203a 	svcmi	0x0050203a
 801d120:	435f5452 	cmpmi	pc, #1375731712	@ 0x52000000
 801d124:	544e554f 	strbpl	r5, [lr], #-1359	@ 0xfffffab1
 801d128:	0a75253d 	beq	9d66624 <__init_array_end+0x1d46f20>
 801d12c:	00000000 	andeq	r0, r0, r0
 801d130:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d134:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801d138:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801d13c:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801d140:	414d203a 	cmpmi	sp, sl, lsr r0
 801d144:	50415f58 	subpl	r5, r1, r8, asr pc
 801d148:	32303141 	eorscc	r3, r0, #1073741840	@ 0x40000010
 801d14c:	0a75253d 	beq	9d66648 <__init_array_end+0x1d46f44>
 801d150:	00000000 	andeq	r0, r0, r0
 801d154:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d158:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801d15c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801d160:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801d164:	5f73203a 	svcpl	0x0073203a
 801d168:	42616d44 	rsbmi	r6, r1, #68, 26	@ 0x1100
 801d16c:	65666675 	strbvs	r6, [r6, #-1653]!	@ 0xfffff98b
 801d170:	70253d72 	eorvc	r3, r5, r2, ror sp
 801d174:	5f73202c 	svcpl	0x0073202c
 801d178:	66754270 			@ <UNDEFINED> instruction: 0x66754270
 801d17c:	3d726566 	cfldr64cc	mvdx6, [r2, #-408]!	@ 0xfffffe68
 801d180:	000a7025 	andeq	r7, sl, r5, lsr #32
 801d184:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d188:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801d18c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801d190:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801d194:	5f6d203a 	svcpl	0x006d203a
 801d198:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
 801d19c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801d1a0:	2075253d 	rsbscs	r2, r5, sp, lsr r5
 801d1a4:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	@ 0xfffffe94
 801d1a8:	0000000a 	andeq	r0, r0, sl
 801d1ac:	426e5f6d 	rsbmi	r5, lr, #436	@ 0x1b4
 801d1b0:	69536675 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
 801d1b4:	3c20657a 	cfstr32cc	mvfx6, [r0], #-488	@ 0xfffffe18
 801d1b8:	6970203d 	ldmdbvs	r0!, {r0, r2, r3, r4, r5, sp}^
 801d1bc:	3a6c6578 	bcc	9b367a4 <__init_array_end+0x1b170a0>
 801d1c0:	414d443a 	cmpmi	sp, sl, lsr r4
 801d1c4:	4655425f 			@ <UNDEFINED> instruction: 0x4655425f
 801d1c8:	5f524546 	svcpl	0x00524546
 801d1cc:	455a4953 	ldrbmi	r4, [sl, #-2387]	@ 0xfffff6ad
 801d1d0:	00000000 	andeq	r0, r0, r0
 801d1d4:	63616c42 	cmnvs	r1, #16896	@ 0x4200
 801d1d8:	74756f6b 	ldrbtvc	r6, [r5], #-3947	@ 0xfffff095
 801d1dc:	00000000 	andeq	r0, r0, r0
 801d1e0:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801d1e4:	203d3d20 	eorscs	r3, sp, r0, lsr #26
 801d1e8:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801d1ec:	543a3a6c 	ldrtpl	r3, [sl], #-2668	@ 0xfffff594
 801d1f0:	3a657079 	bcc	99793dc <__init_array_end+0x1959cd8>
 801d1f4:	3253573a 	subscc	r5, r3, #15204352	@ 0xe80000
 801d1f8:	00313038 	eorseq	r3, r1, r8, lsr r0
 801d1fc:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	@ 0xfffffee8
 801d200:	00006e4f 	andeq	r6, r0, pc, asr #28
 801d204:	74666f53 	strbtvc	r6, [r6], #-3923	@ 0xfffff0ad
 801d208:	65726177 	ldrbvs	r6, [r2, #-375]!	@ 0xfffffe89
 801d20c:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801d210:	64644172 	strbtvs	r4, [r4], #-370	@ 0xfffffe8e
 801d214:	0000000a 	andeq	r0, r0, sl
 801d218:	72746552 	rsbsvc	r6, r4, #343932928	@ 0x14800000
 801d21c:	726f2079 	rsbvc	r2, pc, #121	@ 0x79
 801d220:	65757120 	ldrbvs	r7, [r5, #-288]!	@ 0xfffffee0
 801d224:	74206575 	strtvc	r6, [r0], #-1397	@ 0xfffffa8b
 801d228:	64206568 	strtvs	r6, [r0], #-1384	@ 0xfffffa98
 801d22c:	20617461 	rsbcs	r7, r1, r1, ror #8
 801d230:	20726f66 	rsbscs	r6, r2, r6, ror #30
 801d234:	6574616c 	ldrbvs	r6, [r4, #-364]!	@ 0xfffffe94
 801d238:	72742072 	rsbsvc	r2, r4, #114	@ 0x72
 801d23c:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	@ 0xfffffe7c
 801d240:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 801d244:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801d248:	69626e75 	stmdbvs	r2!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 801d24c:	000a646e 	andeq	r6, sl, lr, ror #8

0801d250 <s_contentType>:
 801d250:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801d254:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801d258:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801d270:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801d274:	7373632f 	cmnvc	r3, #-1140850688	@ 0xbc000000
	...
 801d290:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801d294:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801d298:	72637361 	rsbvc	r7, r3, #-2080374783	@ 0x84000001
 801d29c:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801d2b0:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801d2b4:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801d2b8:	2f6e6f69 	svccs	0x006e6f69
 801d2bc:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...
 801d2d0:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801d2d4:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801d2d8:	2f6e6f69 	svccs	0x006e6f69
 801d2dc:	6574636f 	ldrbvs	r6, [r4, #-879]!	@ 0xfffffc91
 801d2e0:	74732d74 	ldrbtvc	r2, [r3], #-3444	@ 0xfffff28c
 801d2e4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	@ 0xfffffe38
	...

0801d2f0 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801d2f0:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801d2f4:	5f79616c 	svcpl	0x0079616c
 801d2f8:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
	...

0801d2fd <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 801d2fd:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801d301:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801d305:	6f746361 	svcvs	0x00746361
 801d309:	 	strvs	r7, [r0, #-2418]	@ 0xfffff68e

0801d30c <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801d30c:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801d310:	755f656c 	ldrbvc	r6, [pc, #-1388]	@ 801cdac <RemoteConfig::s_TXT+0x5b4>
 801d314:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	@ 0xfffffe40
 801d318:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801d31a <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 801d31a:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801d31e:	725f656c 	subsvc	r6, pc, #108, 10	@ 0x1b000000
 801d322:	6f6f6265 	svcvs	0x006f6265
 801d326:	 	stmdbvs	r4!, {r2, r4, r5, r6}^

0801d328 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 801d328:	61736964 	cmnvs	r3, r4, ror #18
 801d32c:	5f656c62 	svcpl	0x00656c62
 801d330:	74697277 	strbtvc	r7, [r9], #-631	@ 0xfffffd89
 801d334:	 	stmdbvs	r4!, {r0, r2, r5, r6}^

0801d336 <RemoteConfigConst::PARAMS_DISABLE>:
 801d336:	61736964 	cmnvs	r3, r4, ror #18
 801d33a:	00656c62 	rsbeq	r6, r5, r2, ror #24

0801d33e <RemoteConfigConst::PARAMS_FILE_NAME>:
 801d33e:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 801d342:	2e676966 	vnmulcs.f16	s13, s14, s13	@ <UNPREDICTABLE>
 801d346:	00747874 	rsbseq	r7, r4, r4, ror r8
	...

0801d34c <HttpContent>:
 801d34c:	0801bb77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, fp, ip, sp, pc}
 801d350:	0801e424 	stmdaeq	r1, {r2, r5, sl, sp, lr, pc}
 801d354:	000004c3 	andeq	r0, r0, r3, asr #9
 801d358:	00000002 	andeq	r0, r0, r2
 801d35c:	0801bb81 	stmdaeq	r1, {r0, r7, r8, r9, fp, ip, sp, pc}
 801d360:	0801e28a 	stmdaeq	r1, {r1, r3, r7, r9, sp, lr, pc}
 801d364:	00000199 	muleq	r0, r9, r1
 801d368:	00000001 	andeq	r0, r0, r1
 801d36c:	0801bb8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, ip, sp, pc}
 801d370:	0801de15 	stmdaeq	r1, {r0, r2, r4, r9, sl, fp, ip, lr, pc}
 801d374:	00000474 	andeq	r0, r0, r4, ror r4
 801d378:	00000002 	andeq	r0, r0, r2
 801d37c:	0801bb95 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9, fp, ip, sp, pc}
 801d380:	0801db48 	stmdaeq	r1, {r3, r6, r8, r9, fp, ip, lr, pc}
 801d384:	000002cc 	andeq	r0, r0, ip, asr #5
 801d388:	00000002 	andeq	r0, r0, r2
 801d38c:	0801bb9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, fp, ip, sp, pc}
 801d390:	0801da49 	stmdaeq	r1, {r0, r3, r6, r9, fp, ip, lr, pc}
 801d394:	000000fe 	strdeq	r0, [r0], -lr
 801d398:	00000002 	andeq	r0, r0, r2
 801d39c:	0801bba8 	stmdaeq	r1, {r3, r5, r7, r8, r9, fp, ip, sp, pc}
 801d3a0:	0801d8c2 	stmdaeq	r1, {r1, r6, r7, fp, ip, lr, pc}
 801d3a4:	00000186 	andeq	r0, r0, r6, lsl #3
 801d3a8:	00000002 	andeq	r0, r0, r2
 801d3ac:	0801bbb0 	stmdaeq	r1, {r4, r5, r7, r8, r9, fp, ip, sp, pc}
 801d3b0:	0801d624 	stmdaeq	r1, {r2, r5, r9, sl, ip, lr, pc}
 801d3b4:	0000029d 	muleq	r0, sp, r2
 801d3b8:	00000000 	andeq	r0, r0, r0
 801d3bc:	0801bbbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 801d3c0:	0801d3cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, ip, lr, pc}
 801d3c4:	00000257 	andeq	r0, r0, r7, asr r2
 801d3c8:	00000000 	andeq	r0, r0, r0

0801d3cc <time_html>:
 801d3cc:	4f44213c 	svcmi	0x0044213c
 801d3d0:	50595443 	subspl	r5, r9, r3, asr #8
 801d3d4:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801d3d8:	0a3e6c6d 	beq	8fb8594 <__init_array_end+0xf98e90>
 801d3dc:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801d3e0:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801d3e4:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d3e8:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801d3ec:	72206b6e 	eorvc	r6, r0, #112640	@ 0x1b800
 801d3f0:	223d6c65 	eorscs	r6, sp, #25856	@ 0x6500
 801d3f4:	6c797473 	cfldrdvs	mvd7, [r9], #-460	@ 0xfffffe34
 801d3f8:	65687365 	strbvs	r7, [r8, #-869]!	@ 0xfffffc9b
 801d3fc:	20227465 	eorcs	r7, r2, r5, ror #8
 801d400:	66657268 	strbtvs	r7, [r5], -r8, ror #4
 801d404:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801d408:	73656c79 	cmnvc	r5, #30976	@ 0x7900
 801d40c:	7373632e 	cmnvc	r3, #-1207959552	@ 0xb8000000
 801d410:	3e2f2022 	cdpcc	0, 2, cr2, cr15, cr2, {1}
 801d414:	7469743c 	strbtvc	r7, [r9], #-1084	@ 0xfffffbc4
 801d418:	4e3e656c 	cdpmi	5, 3, cr6, cr14, cr12, {3}
 801d41c:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801d420:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801d424:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801d428:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801d42c:	65682f3c 	strbvs	r2, [r8, #-3900]!	@ 0xfffff0c4
 801d430:	0a3e6461 	beq	8fb65bc <__init_array_end+0xf96eb8>
 801d434:	646f623c 	strbtvs	r6, [pc], #-572	@ 801d43c <time_html+0x70>
 801d438:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801d43c:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d440:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801d444:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801d448:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d44c:	73694c64 	cmnvc	r9, #100, 24	@ 0x6400
 801d450:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801d454:	3e6c752f 	cdpcc	5, 6, cr7, cr12, cr15, {1}
 801d458:	65682f3c 	strbvs	r2, [r8, #-3900]!	@ 0xfffff0c4
 801d45c:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801d460:	703c0a3e 	eorsvc	r0, ip, lr, lsr sl
 801d464:	75623c3e 	strbvc	r3, [r2, #-3134]!	@ 0xfffff3c2
 801d468:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801d46c:	636e6f20 	cmnvs	lr, #32, 30	@ 0x80
 801d470:	6b63696c 	blvs	98f7a28 <__init_array_end+0x18d8324>
 801d474:	6572223d 	ldrbvs	r2, [r2, #-573]!	@ 0xfffffdc3
 801d478:	73657266 	cmnvc	r5, #1610612742	@ 0x60000006
 801d47c:	22292868 	eorcs	r2, r9, #104, 16	@ 0x680000
 801d480:	6665523e 			@ <UNDEFINED> instruction: 0x6665523e
 801d484:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801d488:	75622f3c 	strbvc	r2, [r2, #-3900]!	@ 0xfffff0c4
 801d48c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801d490:	702f3c3e 	eorvc	r3, pc, lr, lsr ip	@ <UNPREDICTABLE>
 801d494:	703c0a3e 	eorsvc	r0, ip, lr, lsr sl
 801d498:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801d49c:	646f6e22 	strbtvs	r6, [pc], #-3618	@ 801d4a4 <time_html+0xd8>
 801d4a0:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	@ 0xfffffe6c
 801d4a4:	4e3e2265 	cdpmi	2, 3, cr2, cr14, cr5, {3}
 801d4a8:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801d4ac:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801d4b0:	6c697720 	stclvs	7, cr7, [r9], #-128	@ 0xffffff80
 801d4b4:	6562206c 	strbvs	r2, [r2, #-108]!	@ 0xffffff94
 801d4b8:	73696420 	cmnvc	r9, #32, 8	@ 0x20000000
 801d4bc:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801d4c0:	68206465 	stmdavs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 801d4c4:	3c657265 	sfmcc	f7, 2, [r5], #-404	@ 0xfffffe6c
 801d4c8:	0a3e702f 	beq	8fb958c <__init_array_end+0xf99e88>
 801d4cc:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801d4d0:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801d4d4:	6f206e6f 	svcvs	0x00206e6f
 801d4d8:	696c636e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801d4dc:	223d6b63 	eorscs	r6, sp, #101376	@ 0x18c00
 801d4e0:	636e7973 	cmnvs	lr, #1884160	@ 0x1cc000
 801d4e4:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 801d4e8:	61636f4c 	cmnvs	r3, ip, asr #30
 801d4ec:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	@ 0xfffffe50
 801d4f0:	22292865 	eorcs	r2, r9, #6619136	@ 0x650000
 801d4f4:	6e79533e 	mrcvs	3, 3, r5, cr9, cr14, {1}
 801d4f8:	69772063 	ldmdbvs	r7!, {r0, r1, r5, r6, sp}^
 801d4fc:	4c206874 	stcmi	8, cr6, [r0], #-464	@ 0xfffffe30
 801d500:	6c61636f 	stclvs	3, cr6, [r1], #-444	@ 0xfffffe44
 801d504:	6d695420 	cfstrdvs	mvd5, [r9, #-128]!	@ 0xffffff80
 801d508:	622f3c65 	eorvs	r3, pc, #25856	@ 0x6500
 801d50c:	6f747475 	svcvs	0x00747475
 801d510:	2f3c3e6e 	svccs	0x003c3e6e
 801d514:	3c0a3e70 	stccc	14, cr3, [sl], {112}	@ 0x70
 801d518:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801d520 <time_html+0x154>
 801d51c:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801d520:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801d524:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d528:	72655664 	rsbvc	r5, r5, #100, 12	@ 0x6400000
 801d52c:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801d530:	2f3c3e22 	svccs	0x003c3e22
 801d534:	3c3e6c75 	ldccc	12, cr6, [lr], #-468	@ 0xfffffe2c
 801d538:	6f6f662f 	svcvs	0x006f662f
 801d53c:	3e726574 	mrccc	5, 3, r6, cr2, cr4, {3}
 801d540:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801d544:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d548:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801d54c:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801d550:	63697461 	cmnvs	r9, #1627389952	@ 0x61000000
 801d554:	22736a2e 	rsbscs	r6, r3, #188416	@ 0x2e000
 801d558:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801d55c:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801d560:	2f747865 	svccs	0x00747865
 801d564:	6176616a 	cmnvs	r6, sl, ror #2
 801d568:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d56c:	3e227470 	mcrcc	4, 1, r7, cr2, cr0, {3}
 801d570:	63732f3c 	cmnvs	r3, #60, 30	@ 0xf0
 801d574:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d578:	733c0a3e 	teqvc	ip, #253952	@ 0x3e000
 801d57c:	70697263 	rsbvc	r7, r9, r3, ror #4
 801d580:	72732074 	rsbsvc	r2, r3, #116	@ 0x74
 801d584:	64223d63 	strtvs	r3, [r2], #-3427	@ 0xfffff29d
 801d588:	2e657461 	cdpcs	4, 6, cr7, cr5, cr1, {3}
 801d58c:	2022736a 	eorcs	r7, r2, sl, ror #6
 801d590:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801d594:	6574223d 	ldrbvs	r2, [r4, #-573]!	@ 0xfffffdc3
 801d598:	6a2f7478 	bvs	8bfa780 <__init_array_end+0xbdb07c>
 801d59c:	73617661 	cmnvc	r1, #101711872	@ 0x6100000
 801d5a0:	70697263 	rsbvc	r7, r9, r3, ror #4
 801d5a4:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801d5a8:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801d5ac:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801d5b0:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801d5b4:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d5b8:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801d5bc:	6974223d 	ldmdbvs	r4!, {r0, r2, r3, r4, r5, r9, sp}^
 801d5c0:	6a2e656d 	bvs	8bb6b7c <__init_array_end+0xb97478>
 801d5c4:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801d5c8:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801d5cc:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801d5d0:	616a2f74 	smcvs	41716	@ 0xa2f4
 801d5d4:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801d5d8:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d5dc:	2f3c3e22 	svccs	0x003c3e22
 801d5e0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d5e4:	0a3e7470 	beq	8fba7ac <__init_array_end+0xf9b0a8>
 801d5e8:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801d5ec:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801d5f0:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801d5f4:	763b2928 	ldrtvc	r2, [fp], -r8, lsr #18
 801d5f8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801d5fc:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801d600:	6665723b 			@ <UNDEFINED> instruction: 0x6665723b
 801d604:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801d608:	2f3c2928 	svccs	0x003c2928
 801d60c:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d610:	0a3e7470 	beq	8fba7d8 <__init_array_end+0xf9b0d4>
 801d614:	6f622f3c 	svcvs	0x00622f3c
 801d618:	0a3e7964 	beq	8fbbbb0 <__init_array_end+0xf9c4ac>
 801d61c:	74682f3c 	strbtvc	r2, [r8], #-3900	@ 0xfffff0c4
 801d620:	003e6c6d 	eorseq	r6, lr, sp, ror #24

0801d624 <index_html>:
 801d624:	4f44213c 	svcmi	0x0044213c
 801d628:	50595443 	subspl	r5, r9, r3, asr #8
 801d62c:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801d630:	0a3e6c6d 	beq	8fb87ec <__init_array_end+0xf990e8>
 801d634:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801d638:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801d63c:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d640:	6c3c0a3e 			@ <UNDEFINED> instruction: 0x6c3c0a3e
 801d644:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 801d648:	3d6c6572 	cfstr64cc	mvdx6, [ip, #-456]!	@ 0xfffffe38
 801d64c:	79747322 	ldmdbvc	r4!, {r1, r5, r8, r9, ip, sp, lr}^
 801d650:	6873656c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, sp, lr}^
 801d654:	22746565 	rsbscs	r6, r4, #423624704	@ 0x19400000
 801d658:	65726820 	ldrbvs	r6, [r2, #-2080]!	@ 0xfffff7e0
 801d65c:	73223d66 			@ <UNDEFINED> instruction: 0x73223d66
 801d660:	656c7974 	strbvs	r7, [ip, #-2420]!	@ 0xfffff68c
 801d664:	73632e73 	cmnvc	r3, #1840	@ 0x730
 801d668:	2f202273 	svccs	0x00202273
 801d66c:	743c0a3e 	ldrtvc	r0, [ip], #-2622	@ 0xfffff5c2
 801d670:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801d674:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801d67c <index_html+0x58>
 801d678:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801d67c:	2f3c0a3e 	svccs	0x003c0a3e
 801d680:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d684:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801d688:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801d68c:	65683c0a 	strbvs	r3, [r8, #-3082]!	@ 0xfffff3f6
 801d690:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801d694:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	@ 0xffffff08
 801d698:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801d69c:	4c646922 			@ <UNDEFINED> instruction: 0x4c646922
 801d6a0:	22747369 	rsbscs	r7, r4, #-1543503871	@ 0xa4000001
 801d6a4:	752f3c3e 	strvc	r3, [pc, #-3134]!	@ 801ca6e <RemoteConfig::s_TXT+0x276>
 801d6a8:	2f3c3e6c 	svccs	0x003c3e6c
 801d6ac:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801d6b0:	0a3e7265 	beq	8fba04c <__init_array_end+0xf9a948>
 801d6b4:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801d6b8:	656c6573 	strbvs	r6, [ip, #-1395]!	@ 0xfffffa8d
 801d6bc:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801d6c0:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d6c4:	72694464 	rsbvc	r4, r9, #100, 8	@ 0x64000000
 801d6c8:	6f746365 	svcvs	0x00746365
 801d6cc:	20227972 	eorcs	r7, r2, r2, ror r9
 801d6d0:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801d6d4:	65676e61 	strbvs	r6, [r7, #-3681]!	@ 0xfffff19f
 801d6d8:	6567223d 	strbvs	r2, [r7, #-573]!	@ 0xfffffdc3
 801d6dc:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801d6e0:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801d6e4:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801d6e8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	@ 0xfffff39f
 801d6ec:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	@ 0xffffff5c
 801d6f0:	6c65732f 	stclvs	3, cr7, [r5], #-188	@ 0xffffff44
 801d6f4:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801d6f8:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801d6fc:	61743c0a 	cmnvs	r4, sl, lsl #24
 801d700:	20656c62 	rsbcs	r6, r5, r2, ror #24
 801d704:	223d6469 	eorscs	r6, sp, #1761607680	@ 0x69000000
 801d708:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801d70c:	62202274 	eorvs	r2, r0, #116, 4	@ 0x40000007
 801d710:	6564726f 	strbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801d714:	31273d72 			@ <UNDEFINED> instruction: 0x31273d72
 801d718:	2f3c3e27 	svccs	0x003c3e27
 801d71c:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
 801d720:	3c0a3e65 	stccc	14, cr3, [sl], {101}	@ 0x65
 801d724:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801d72c <index_html+0x108>
 801d728:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801d72c:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801d730:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801d734:	72655664 	rsbvc	r5, r5, #100, 12	@ 0x6400000
 801d738:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801d73c:	2f3c3e22 	svccs	0x003c3e22
 801d740:	3c3e6c75 	ldccc	12, cr6, [lr], #-468	@ 0xfffffe2c
 801d744:	6f6f662f 	svcvs	0x006f662f
 801d748:	3e726574 	mrccc	5, 3, r6, cr2, cr4, {3}
 801d74c:	69643c0a 	stmdbvs	r4!, {r1, r3, sl, fp, ip, sp}^
 801d750:	3c0a3e76 	stccc	14, cr3, [sl], {118}	@ 0x76
 801d754:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801d758:	69206e6f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801d75c:	6c223d64 	stcvs	13, cr3, [r2], #-400	@ 0xfffffe70
 801d760:	7461636f 	strbtvc	r6, [r1], #-879	@ 0xfffffc91
 801d764:	74754265 	ldrbtvc	r4, [r5], #-613	@ 0xfffffd9b
 801d768:	226e6f74 	rsbcs	r6, lr, #116, 30	@ 0x1d0
 801d76c:	616c6320 	cmnvs	ip, r0, lsr #6
 801d770:	223d7373 	eorscs	r7, sp, #-872415231	@ 0xcc000001
 801d774:	63616e69 	cmnvs	r1, #1680	@ 0x690
 801d778:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801d77c:	6e6f2022 	cdpvs	0, 6, cr2, cr15, cr2, {1}
 801d780:	63696c63 	cmnvs	r9, #25344	@ 0x6300
 801d784:	6c223d6b 	stcvs	13, cr3, [r2], #-428	@ 0xfffffe54
 801d788:	7461636f 	strbtvc	r6, [r1], #-879	@ 0xfffffc91
 801d78c:	22292865 	eorcs	r2, r9, #6619136	@ 0x650000
 801d790:	636f4c3e 	cmnvs	pc, #15872	@ 0x3e00
 801d794:	20657461 	rsbcs	r7, r5, r1, ror #8
 801d798:	3c66664f 	stclcc	6, cr6, [r6], #-316	@ 0xfffffec4
 801d79c:	7475622f 	ldrbtvc	r6, [r5], #-559	@ 0xfffffdd1
 801d7a0:	3e6e6f74 	mcrcc	15, 3, r6, cr14, cr4, {3}
 801d7a4:	75623c0a 	strbvc	r3, [r2, #-3082]!	@ 0xfffff3f6
 801d7a8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801d7ac:	636e6f20 	cmnvs	lr, #32, 30	@ 0x80
 801d7b0:	6b63696c 	blvs	98f7d68 <__init_array_end+0x18d8664>
 801d7b4:	6572223d 	ldrbvs	r2, [r2, #-573]!	@ 0xfffffdc3
 801d7b8:	746f6f62 	strbtvc	r6, [pc], #-3938	@ 801d7c0 <index_html+0x19c>
 801d7bc:	3e222928 	vmulcc.f16	s4, s4, s17	@ <UNPREDICTABLE>
 801d7c0:	6f626552 	svcvs	0x00626552
 801d7c4:	2f3c746f 	svccs	0x003c746f
 801d7c8:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801d7cc:	0a3e6e6f 	beq	8fb9190 <__init_array_end+0xf99a8c>
 801d7d0:	69642f3c 	stmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801d7d4:	3c0a3e76 	stccc	14, cr3, [sl], {118}	@ 0x76
 801d7d8:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d7dc:	73207470 			@ <UNDEFINED> instruction: 0x73207470
 801d7e0:	223d6372 	eorscs	r6, sp, #-939524095	@ 0xc8000001
 801d7e4:	74617473 	strbtvc	r7, [r1], #-1139	@ 0xfffffb8d
 801d7e8:	6a2e6369 	bvs	8bb6594 <__init_array_end+0xb96e90>
 801d7ec:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801d7f0:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801d7f4:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801d7f8:	616a2f74 	smcvs	41716	@ 0xa2f4
 801d7fc:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801d800:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d804:	2f3c3e22 	svccs	0x003c3e22
 801d808:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d80c:	0a3e7470 	beq	8fba9d4 <__init_array_end+0xf9b2d0>
 801d810:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801d814:	20747069 	rsbscs	r7, r4, r9, rrx
 801d818:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801d81c:	646e6922 	strbtvs	r6, [lr], #-2338	@ 0xfffff6de
 801d820:	6a2e7865 	bvs	8bbb9bc <__init_array_end+0xb9c2b8>
 801d824:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801d828:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801d82c:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801d830:	616a2f74 	smcvs	41716	@ 0xa2f4
 801d834:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801d838:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d83c:	2f3c3e22 	svccs	0x003c3e22
 801d840:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d844:	0a3e7470 	beq	8fbaa0c <__init_array_end+0xf9b308>
 801d848:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801d84c:	20747069 	rsbscs	r7, r4, r9, rrx
 801d850:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801d854:	66656422 	strbtvs	r6, [r5], -r2, lsr #8
 801d858:	746c7561 	strbtvc	r7, [ip], #-1377	@ 0xfffffa9f
 801d85c:	22736a2e 	rsbscs	r6, r3, #188416	@ 0x2e000
 801d860:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801d864:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801d868:	2f747865 	svccs	0x00747865
 801d86c:	6176616a 	cmnvs	r6, sl, ror #2
 801d870:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801d874:	3e227470 	mcrcc	4, 1, r7, cr2, cr0, {3}
 801d878:	63732f3c 	cmnvs	r3, #60, 30	@ 0xf0
 801d87c:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801d880:	733c0a3e 	teqvc	ip, #253952	@ 0x3e000
 801d884:	70697263 	rsbvc	r7, r9, r3, ror #4
 801d888:	696c3e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, ip, sp}^
 801d88c:	29287473 	stmdbcs	r8!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 801d890:	7265763b 	rsbvc	r7, r5, #61865984	@ 0x3b00000
 801d894:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801d898:	643b2928 	ldrtvs	r2, [fp], #-2344	@ 0xfffff6d8
 801d89c:	63657269 	cmnvs	r5, #-1879048186	@ 0x90000006
 801d8a0:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801d8a4:	3c3b2928 			@ <UNDEFINED> instruction: 0x3c3b2928
 801d8a8:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801d8ac:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801d8b0:	622f3c0a 	eorvs	r3, pc, #2560	@ 0xa00
 801d8b4:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801d8b8:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801d8bc:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801d8c0:	 	cmnvc	r1, #10

0801d8c2 <time_js>:
 801d8c2:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801d8c6:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801d8ca:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801d8ce:	72206e6f 	eorvc	r6, r0, #1776	@ 0x6f0
 801d8d2:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801d8d6:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 801d8da:	6c0a7b20 			@ <UNDEFINED> instruction: 0x6c0a7b20
 801d8de:	64207465 	strtvs	r7, [r0], #-1125	@ 0xfffffb9b
 801d8e2:	20617461 	rsbcs	r7, r1, r1, ror #8
 801d8e6:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801d8ea:	20746961 	rsbscs	r6, r4, r1, ror #18
 801d8ee:	4a746567 	bmi	9d36e92 <__init_array_end+0x1d1778e>
 801d8f2:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801d8f6:	6d697427 	cfstrdvs	mvd7, [r9, #-156]!	@ 0xffffff64
 801d8fa:	74616465 	strbtvc	r6, [r1], #-1125	@ 0xfffffb9b
 801d8fe:	0a292765 	beq	8a6769a <__init_array_end+0xa47f96>
 801d902:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801d906:	6f6e2074 	svcvs	0x006e2074
 801d90a:	3d206564 	cfstr32cc	mvfx6, [r0, #-400]!	@ 0xfffffe70
 801d90e:	726f6620 	rsbvc	r6, pc, #32, 12	@ 0x2000000
 801d912:	4474616d 	ldrbtmi	r6, [r4], #-365	@ 0xfffffe93
 801d916:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
 801d91a:	28656d69 	stmdacs	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
 801d91e:	2077656e 	rsbscs	r6, r7, lr, ror #10
 801d922:	65746144 	ldrbvs	r6, [r4, #-324]!	@ 0xfffffebc
 801d926:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801d92a:	61642e61 	cmnvs	r4, r1, ror #28
 801d92e:	29296574 	stmdbcs	r9!, {r2, r4, r5, r6, r8, sl, sp, lr}
 801d932:	636f640a 	cmnvs	pc, #167772160	@ 0xa000000
 801d936:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801d93a:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801d93e:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801d942:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801d946:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801d94a:	6f6e2728 	svcvs	0x006e2728
 801d94e:	69546564 	ldmdbvs	r4, {r2, r5, r6, r8, sl, sp, lr}^
 801d952:	2927656d 	stmdbcs	r7!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 801d956:	7865742e 	stmdavc	r5!, {r1, r2, r3, r5, sl, ip, sp, lr}^
 801d95a:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
 801d95e:	746e6574 	strbtvc	r6, [lr], #-1396	@ 0xfffffa8c
 801d962:	60203d20 	eorvs	r3, r0, r0, lsr #26
 801d966:	65646f4e 	strbvs	r6, [r4, #-3918]!	@ 0xfffff0b2
 801d96a:	6d695420 	cfstrdvs	mvd5, [r9, #-128]!	@ 0xffffff80
 801d96e:	24203a65 	strtcs	r3, [r0], #-2661	@ 0xfffff59b
 801d972:	646f6e7b 	strbtvs	r6, [pc], #-3707	@ 801d97a <time_js+0xb8>
 801d976:	0a607d65 	beq	983cf12 <__init_array_end+0x181d80e>
 801d97a:	73610a7d 	cmnvc	r1, #512000	@ 0x7d000
 801d97e:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801d982:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801d986:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801d98a:	6e797320 	cdpvs	3, 7, cr7, cr9, cr0, {1}
 801d98e:	74695763 	strbtvc	r5, [r9], #-1891	@ 0xfffff89d
 801d992:	636f4c68 	cmnvs	pc, #104, 24	@ 0x6800
 801d996:	69546c61 	ldmdbvs	r4, {r0, r5, r6, sl, fp, sp, lr}^
 801d99a:	2928656d 	stmdbcs	r8!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 801d99e:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 801d9a2:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801d9a6:	646f6e20 	strbtvs	r6, [pc], #-3616	@ 801d9ae <time_js+0xec>
 801d9aa:	203d2065 	eorscs	r2, sp, r5, rrx
 801d9ae:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	@ 0xfffffe68
 801d9b2:	61447461 	cmpvs	r4, r1, ror #8
 801d9b6:	69546574 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
 801d9ba:	6e28656d 	cfsh64vs	mvdx6, mvdx8, #61
 801d9be:	44207765 	strtmi	r7, [r0], #-1893	@ 0xfffff89b
 801d9c2:	28657461 	stmdacs	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 801d9c6:	640a2929 	strvs	r2, [sl], #-2345	@ 0xfffff6d7
 801d9ca:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801d9ce:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801d9d2:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801d9d6:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801d9da:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801d9de:	27286449 	strcs	r6, [r8, -r9, asr #8]!
 801d9e2:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 801d9e6:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801d9ea:	742e2927 	strtvc	r2, [lr], #-2343	@ 0xfffff6d9
 801d9ee:	43747865 	cmnmi	r4, #6619136	@ 0x650000
 801d9f2:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801d9f6:	3d20746e 	cfstrscc	mvf7, [r0, #-440]!	@ 0xfffffe48
 801d9fa:	6f4e6020 	svcvs	0x004e6020
 801d9fe:	54206564 	strtpl	r6, [r0], #-1380	@ 0xfffffa9c
 801da02:	3a656d69 	bcc	9978fae <__init_array_end+0x19598aa>
 801da06:	6e7b2420 	cdpvs	4, 7, cr2, cr11, cr0, {1}
 801da0a:	7d65646f 	cfstrdvc	mvd6, [r5, #-444]!	@ 0xfffffe44
 801da0e:	6f630a60 	svcvs	0x00630a60
 801da12:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801da16:	61746164 	cmnvs	r4, r4, ror #2
 801da1a:	7b203d20 	blvc	882cea2 <__init_array_end+0x80d79e>
 801da1e:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801da22:	6e203a65 	vnmulvs.f32	s6, s0, s11
 801da26:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801da2a:	77610a7d 			@ <UNDEFINED> instruction: 0x77610a7d
 801da2e:	20746961 	rsbscs	r6, r4, r1, ror #18
 801da32:	74736f70 	ldrbtvc	r6, [r3], #-3952	@ 0xfffff090
 801da36:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801da3a:	720a2961 	andvc	r2, sl, #1589248	@ 0x184000
 801da3e:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801da42:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 801da46:	 	strvs	r7, [r0], -sl, lsl #26

0801da49 <default_js>:
 801da49:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801da4d:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801da51:	73657220 	cmnvc	r5, #32, 4
 801da55:	73287465 			@ <UNDEFINED> instruction: 0x73287465
 801da59:	20296c65 	eorcs	r6, r9, r5, ror #24
 801da5d:	61760a7b 	cmnvs	r6, fp, ror sl
 801da61:	20642072 	rsbcs	r2, r4, r2, ror r0
 801da65:	7d7b203d 	ldclvc	0, cr2, [fp, #-244]!	@ 0xffffff0c
 801da69:	61760a3b 	cmnvs	r6, fp, lsr sl
 801da6d:	756f2072 	strbvc	r2, [pc, #-114]!	@ 801da03 <time_js+0x141>
 801da71:	203d2074 	eorscs	r2, sp, r4, ror r0
 801da75:	0a3b7d7b 	beq	8efd069 <__init_array_end+0xedd965>
 801da79:	5b74756f 	blpl	9d3b03d <__init_array_end+0x1d1b939>
 801da7d:	5d6c6573 	cfstr64pl	mvdx6, [ip, #-460]!	@ 0xfffffe34
 801da81:	64203d20 	strtvs	r3, [r0], #-3360	@ 0xfffff2e0
 801da85:	61760a3b 	cmnvs	r6, fp, lsr sl
 801da89:	61702072 	cmnvs	r0, r2, ror r0
 801da8d:	616f6c79 	smcvs	63177	@ 0xf6c9
 801da91:	203d2064 	eorscs	r2, sp, r4, rrx
 801da95:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801da99:	7274732e 	rsbsvc	r7, r4, #-1207959552	@ 0xb8000000
 801da9d:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 801daa1:	6f287966 	svcvs	0x00287966
 801daa5:	3b297475 	blcc	8a7ac81 <__init_array_end+0xa5b57d>
 801daa9:	7465660a 	strbtvc	r6, [r5], #-1546	@ 0xfffff9f6
 801daad:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 801dab1:	6f736a2f 	svcvs	0x00736a2f
 801dab5:	202c276e 	eorcs	r2, ip, lr, ror #14
 801dab9:	656d0a7b 	strbvs	r0, [sp, #-2683]!	@ 0xfffff585
 801dabd:	646f6874 	strbtvs	r6, [pc], #-2164	@ 801dac5 <default_js+0x7c>
 801dac1:	5027203a 	eorpl	r2, r7, sl, lsr r0
 801dac5:	2754534f 	ldrbcs	r5, [r4, -pc, asr #6]
 801dac9:	65680a2c 	strbvs	r0, [r8, #-2604]!	@ 0xfffff5d4
 801dacd:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801dad1:	7b203a73 	blvc	882c4a5 <__init_array_end+0x80cda1>
 801dad5:	6f43270a 	svcvs	0x0043270a
 801dad9:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801dadd:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801dae1:	3a276570 	bcc	89f70a9 <__init_array_end+0x9d79a5>
 801dae5:	70612720 	rsbvc	r2, r1, r0, lsr #14
 801dae9:	63696c70 	cmnvs	r9, #112, 24	@ 0x7000
 801daed:	6f697461 	svcvs	0x00697461
 801daf1:	736a2f6e 	cmnvc	sl, #440	@ 0x1b8
 801daf5:	0a276e6f 	beq	89f94b9 <__init_array_end+0x9d9db5>
 801daf9:	620a2c7d 	andvs	r2, sl, #32000	@ 0x7d00
 801dafd:	3a79646f 	bcc	9e76cc1 <__init_array_end+0x1e575bd>
 801db01:	79617020 	stmdbvc	r1!, {r5, ip, sp, lr}^
 801db05:	64616f6c 	strbtvs	r6, [r1], #-3948	@ 0xfffff094
 801db09:	20297d0a 	eorcs	r7, r9, sl, lsl #26
 801db0d:	6568742e 	strbvs	r7, [r8, #-1070]!	@ 0xfffffbd2
 801db11:	6572286e 	ldrbvs	r2, [r2, #-2158]!	@ 0xfffff792
 801db15:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 801db19:	3d206573 	cfstr32cc	mvfx6, [r0, #-460]!	@ 0xfffffe34
 801db1d:	697b203e 	ldmdbvs	fp!, {r1, r2, r3, r4, r5, sp}^
 801db21:	72282066 	eorvc	r2, r8, #102	@ 0x66
 801db25:	6f707365 	svcvs	0x00707365
 801db29:	2e65736e 	cdpcs	3, 6, cr7, cr5, cr14, {3}
 801db2d:	20296b6f 	eorcs	r6, r9, pc, ror #22
 801db31:	6567207b 	strbvs	r2, [r7, #-123]!	@ 0xffffff85
 801db35:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801db39:	65732874 	ldrbvs	r2, [r3, #-2164]!	@ 0xfffff78c
 801db3d:	203b296c 	eorscs	r2, fp, ip, ror #18
 801db41:	3b297d7d 	blcc	8a7d13d <__init_array_end+0xa5da39>
 801db45:	 	strvs	r7, [r0], -sl, lsl #26

0801db48 <date_js>:
 801db48:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801db4c:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801db50:	726f6620 	rsbvc	r6, pc, #32, 12	@ 0x2000000
 801db54:	4474616d 	ldrbtmi	r6, [r4], #-365	@ 0xfffffe93
 801db58:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
 801db5c:	28656d69 	stmdacs	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
 801db60:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801db64:	0a7b2029 	beq	9ee5c10 <__init_array_end+0x1ec650c>
 801db68:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801db6c:	65792074 	ldrbvs	r2, [r9, #-116]!	@ 0xffffff8c
 801db70:	3d207261 	sfmcc	f7, 4, [r0, #-388]!	@ 0xfffffe7c
 801db74:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801db78:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801db7c:	6c754674 	ldclvs	6, cr4, [r5], #-464	@ 0xfffffe30
 801db80:	6165596c 	cmnvs	r5, ip, ror #18
 801db84:	3b292872 	blcc	8a67d54 <__init_array_end+0xa48650>
 801db88:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801db8c:	6d207473 	cfstrsvs	mvf7, [r0, #-460]!	@ 0xfffffe34
 801db90:	3d206e6f 	stccc	14, cr6, [r0, #-444]!	@ 0xfffffe44
 801db94:	30272820 	eorcc	r2, r7, r0, lsr #16
 801db98:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801db9c:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801dba0:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801dba4:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
 801dba8:	29286874 	stmdbcs	r8!, {r2, r4, r5, r6, fp, sp, lr}
 801dbac:	31202b20 			@ <UNDEFINED> instruction: 0x31202b20
 801dbb0:	732e2929 			@ <UNDEFINED> instruction: 0x732e2929
 801dbb4:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801dbb8:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801dbbc:	6f630a3b 	svcvs	0x00630a3b
 801dbc0:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801dbc4:	20796164 	rsbscs	r6, r9, r4, ror #2
 801dbc8:	2728203d 			@ <UNDEFINED> instruction: 0x2728203d
 801dbcc:	2b202730 	blcs	8827894 <__init_array_end+0x808190>
 801dbd0:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801dbd4:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801dbd8:	74614474 	strbtvc	r4, [r1], #-1140	@ 0xfffffb8c
 801dbdc:	29292865 	stmdbcs	r9!, {r0, r2, r5, r6, fp, sp}
 801dbe0:	696c732e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 801dbe4:	2d286563 	cfstr32cs	mvfx6, [r8, #-396]!	@ 0xfffffe74
 801dbe8:	0a3b2932 	beq	8ee80b8 <__init_array_end+0xec89b4>
 801dbec:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801dbf0:	6f682074 	svcvs	0x00682074
 801dbf4:	3d207275 	sfmcc	f7, 4, [r0, #-468]!	@ 0xfffffe2c
 801dbf8:	30272820 	eorcc	r2, r7, r0, lsr #16
 801dbfc:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801dc00:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801dc04:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 801dc08:	72756f48 	rsbsvc	r6, r5, #72, 30	@ 0x120
 801dc0c:	29292873 	stmdbcs	r9!, {r0, r1, r4, r5, r6, fp, sp}
 801dc10:	696c732e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 801dc14:	2d286563 	cfstr32cs	mvfx6, [r8, #-396]!	@ 0xfffffe74
 801dc18:	0a3b2932 	beq	8ee80e8 <__init_array_end+0xec89e4>
 801dc1c:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801dc20:	696d2074 	stmdbvs	sp!, {r2, r4, r5, r6, sp}^
 801dc24:	203d206e 	eorscs	r2, sp, lr, rrx
 801dc28:	27302728 	ldrcs	r2, [r0, -r8, lsr #14]!
 801dc2c:	64202b20 	strtvs	r2, [r0], #-2848	@ 0xfffff4e0
 801dc30:	2e657461 	cdpcs	4, 6, cr7, cr5, cr1, {3}
 801dc34:	4d746567 	cfldr64mi	mvdx6, [r4, #-412]!	@ 0xfffffe64
 801dc38:	74756e69 	ldrbtvc	r6, [r5], #-3689	@ 0xfffff197
 801dc3c:	29287365 	stmdbcs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 801dc40:	6c732e29 	ldclvs	14, cr2, [r3], #-164	@ 0xffffff5c
 801dc44:	28656369 	stmdacs	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 801dc48:	3b29322d 	blcc	8a6a504 <__init_array_end+0xa4ae00>
 801dc4c:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801dc50:	73207473 			@ <UNDEFINED> instruction: 0x73207473
 801dc54:	3d206365 	stccc	3, cr6, [r0, #-404]!	@ 0xfffffe6c
 801dc58:	30272820 	eorcc	r2, r7, r0, lsr #16
 801dc5c:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801dc60:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801dc64:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 801dc68:	6f636553 	svcvs	0x00636553
 801dc6c:	2873646e 	ldmdacs	r3!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801dc70:	732e2929 			@ <UNDEFINED> instruction: 0x732e2929
 801dc74:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801dc78:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801dc7c:	6f630a3b 	svcvs	0x00630a3b
 801dc80:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801dc84:	7366666f 	cmnvc	r6, #116391936	@ 0x6f00000
 801dc88:	3d207465 	cfstrscc	mvf7, [r0, #-404]!	@ 0xfffffe6c
 801dc8c:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801dc90:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801dc94:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	@ 0xfffffe30
 801dc98:	6e6f7a65 	vnmulvs.f32	s15, s30, s11
 801dc9c:	66664f65 	strbtvs	r4, [r6], -r5, ror #30
 801dca0:	28746573 	ldmdacs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801dca4:	630a3b29 	movwvs	r3, #43817	@ 0xab29
 801dca8:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801dcac:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 801dcb0:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801dcb4:	2072756f 	rsbscs	r7, r2, pc, ror #10
 801dcb8:	2728203d 			@ <UNDEFINED> instruction: 0x2728203d
 801dcbc:	2b202730 	blcs	8827984 <__init_array_end+0x808280>
 801dcc0:	74614d20 	strbtvc	r4, [r1], #-3360	@ 0xfffff2e0
 801dcc4:	6c662e68 	stclvs	14, cr2, [r6], #-416	@ 0xfffffe60
 801dcc8:	28726f6f 	ldmdacs	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801dccc:	6874614d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sp, lr}^
 801dcd0:	7362612e 	cmnvc	r2, #-2147483637	@ 0x8000000b
 801dcd4:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801dcd8:	29746573 	ldmdbcs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801dcdc:	36202f20 	strtcc	r2, [r0], -r0, lsr #30
 801dce0:	2e292930 			@ <UNDEFINED> instruction: 0x2e292930
 801dce4:	63696c73 	cmnvs	r9, #29440	@ 0x7300
 801dce8:	322d2865 	eorcc	r2, sp, #6619136	@ 0x650000
 801dcec:	630a3b29 	movwvs	r3, #43817	@ 0xab29
 801dcf0:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801dcf4:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 801dcf8:	4d746573 	cfldr64mi	mvdx6, [r4, #-460]!	@ 0xfffffe34
 801dcfc:	3d206e69 	stccc	14, cr6, [r0, #-420]!	@ 0xfffffe5c
 801dd00:	30272820 	eorcc	r2, r7, r0, lsr #16
 801dd04:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801dd08:	6874614d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sp, lr}^
 801dd0c:	7362612e 	cmnvc	r2, #-2147483637	@ 0x8000000b
 801dd10:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801dd14:	29746573 	ldmdbcs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801dd18:	36202520 	strtcc	r2, [r0], -r0, lsr #10
 801dd1c:	732e2930 			@ <UNDEFINED> instruction: 0x732e2930
 801dd20:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801dd24:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801dd28:	6f630a3b 	svcvs	0x00630a3b
 801dd2c:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801dd30:	6e676973 			@ <UNDEFINED> instruction: 0x6e676973
 801dd34:	6f203d20 	svcvs	0x00203d20
 801dd38:	65736666 	ldrbvs	r6, [r3, #-1638]!	@ 0xfffff99a
 801dd3c:	3d3c2074 	ldccc	0, cr2, [ip, #-464]!	@ 0xfffffe30
 801dd40:	3f203020 	svccc	0x00203020
 801dd44:	272b2720 	strcs	r2, [fp, -r0, lsr #14]!
 801dd48:	27203a20 	strcs	r3, [r0, -r0, lsr #20]!
 801dd4c:	0a3b272d 	beq	8ee7a08 <__init_array_end+0xec8304>
 801dd50:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801dd54:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801dd58:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801dd5c:	2072756f 	rsbscs	r7, r2, pc, ror #10
 801dd60:	30203d3d 	eorcc	r3, r0, sp, lsr sp
 801dd64:	26262029 	strtcs	r2, [r6], -r9, lsr #32
 801dd68:	666f2820 	strbtvs	r2, [pc], -r0, lsr #16
 801dd6c:	74657366 	strbtvc	r7, [r5], #-870	@ 0xfffffc9a
 801dd70:	206e694d 	rsbcs	r6, lr, sp, asr #18
 801dd74:	30203d3d 	eorcc	r3, r0, sp, lsr sp
 801dd78:	7b202929 	blvc	8828224 <__init_array_end+0x808b20>
 801dd7c:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801dd80:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801dd84:	797b2460 	ldmdbvc	fp!, {r5, r6, sl, sp}^
 801dd88:	7d726165 	ldfvce	f6, [r2, #-404]!	@ 0xfffffe6c
 801dd8c:	6d7b242d 	cfldrdvs	mvd2, [fp, #-180]!	@ 0xffffff4c
 801dd90:	2d7d6e6f 	ldclcs	14, cr6, [sp, #-444]!	@ 0xfffffe44
 801dd94:	61647b24 	cmnvs	r4, r4, lsr #22
 801dd98:	24547d79 	ldrbcs	r7, [r4], #-3449	@ 0xfffff287
 801dd9c:	756f687b 	strbvc	r6, [pc, #-2171]!	@ 801d529 <time_html+0x15d>
 801dda0:	243a7d72 	ldrtcs	r7, [sl], #-3442	@ 0xfffff28e
 801dda4:	6e696d7b 	mcrvs	13, 3, r6, cr9, cr11, {3}
 801dda8:	7b243a7d 	blvc	892c7a4 <__init_array_end+0x90d0a0>
 801ddac:	7d636573 	cfstr64vc	mvdx6, [r3, #-460]!	@ 0xfffffe34
 801ddb0:	203b605a 	eorscs	r6, fp, sl, asr r0
 801ddb4:	207d0a20 	rsbscs	r0, sp, r0, lsr #20
 801ddb8:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801ddbc:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801ddc0:	797b2460 	ldmdbvc	fp!, {r5, r6, sl, sp}^
 801ddc4:	7d726165 	ldfvce	f6, [r2, #-404]!	@ 0xfffffe6c
 801ddc8:	6d7b242d 	cfldrdvs	mvd2, [fp, #-180]!	@ 0xffffff4c
 801ddcc:	2d7d6e6f 	ldclcs	14, cr6, [sp, #-444]!	@ 0xfffffe44
 801ddd0:	61647b24 	cmnvs	r4, r4, lsr #22
 801ddd4:	24547d79 	ldrbcs	r7, [r4], #-3449	@ 0xfffff287
 801ddd8:	756f687b 	strbvc	r6, [pc, #-2171]!	@ 801d565 <time_html+0x199>
 801dddc:	243a7d72 	ldrtcs	r7, [sl], #-3442	@ 0xfffff28e
 801dde0:	6e696d7b 	mcrvs	13, 3, r6, cr9, cr11, {3}
 801dde4:	7b243a7d 	blvc	892c7e0 <__init_array_end+0x90d0dc>
 801dde8:	7d636573 	cfstr64vc	mvdx6, [r3, #-460]!	@ 0xfffffe34
 801ddec:	69737b24 	ldmdbvs	r3!, {r2, r5, r8, r9, fp, ip, sp, lr}^
 801ddf0:	247d6e67 	ldrbtcs	r6, [sp], #-3687	@ 0xfffff199
 801ddf4:	66666f7b 	uqsub16vs	r6, r6, fp
 801ddf8:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801ddfc:	7d72756f 	cfldr64vc	mvdx7, [r2, #-444]!	@ 0xfffffe44
 801de00:	6f7b243a 	svcvs	0x007b243a
 801de04:	65736666 	ldrbvs	r6, [r3, #-1638]!	@ 0xfffff99a
 801de08:	6e694d74 	mcrvs	13, 3, r4, cr9, cr4, {3}
 801de0c:	203b607d 	eorscs	r6, fp, sp, ror r0
 801de10:	7d0a2020 	stcvc	0, cr2, [sl, #-128]	@ 0xffffff80
	...

0801de15 <index_js>:
 801de15:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801de19:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801de1d:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801de21:	64206e6f 	strtvs	r6, [r0], #-3695	@ 0xfffff191
 801de25:	63657269 	cmnvs	r5, #-1879048186	@ 0x90000006
 801de29:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801de2d:	7b202928 	blvc	88282d5 <__init_array_end+0x808bd1>
 801de31:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 801de35:	3d206420 	cfstrscc	mvf6, [r0, #-128]!	@ 0xffffff80
 801de39:	61776120 	cmnvs	r7, r0, lsr #2
 801de3d:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801de41:	534a7465 	movtpl	r7, #42085	@ 0xa465
 801de45:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801de49:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801de4d:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801de51:	0a292779 	beq	8a67c3d <__init_array_end+0xa48539>
 801de55:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801de59:	203d2068 	eorscs	r2, sp, r8, rrx
 801de5d:	6c0a2222 	sfmvs	f2, 4, [sl], {34}	@ 0x22
 801de61:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801de65:	4f203d20 	svcmi	0x00203d20
 801de69:	63656a62 	cmnvs	r5, #401408	@ 0x62000
 801de6d:	656b2e74 	strbvs	r2, [fp, #-3700]!	@ 0xfffff18c
 801de71:	64287379 	strtvs	r7, [r8], #-889	@ 0xfffffc87
 801de75:	6966225b 	stmdbvs	r6!, {r0, r1, r3, r4, r6, r9, sp}^
 801de79:	2273656c 	rsbscs	r6, r3, #108, 10	@ 0x1b000000
 801de7d:	660a295d 			@ <UNDEFINED> instruction: 0x660a295d
 801de81:	726f662e 	rsbvc	r6, pc, #48234496	@ 0x2e00000
 801de85:	68636145 	stmdavs	r3!, {r0, r2, r6, r8, sp, lr}^
 801de89:	6e756628 	cdpvs	6, 7, cr6, cr5, cr8, {1}
 801de8d:	6f697463 	svcvs	0x00697463
 801de91:	656b286e 	strbvs	r2, [fp, #-2158]!	@ 0xfffff792
 801de95:	7b202979 	blvc	8828481 <__init_array_end+0x808d7d>
 801de99:	7261760a 	rsbvc	r7, r1, #10485760	@ 0xa00000
 801de9d:	3d207620 	stccc	6, cr7, [r0, #-128]!	@ 0xffffff80
 801dea1:	225b6420 	subscs	r6, fp, #32, 8	@ 0x20000000
 801dea5:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
 801dea9:	5b5d2273 	blpl	976687d <__init_array_end+0x1747179>
 801dead:	5d79656b 	cfldr64pl	mvdx6, [r9, #-428]!	@ 0xfffffe54
 801deb1:	2b20680a 	blcs	8837ee1 <__init_array_end+0x8187dd>
 801deb5:	3c22203d 	stccc	0, cr2, [r2], #-244	@ 0xffffff0c
 801deb9:	6974706f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 801debd:	76206e6f 	strtvc	r6, [r0], -pc, ror #28
 801dec1:	65756c61 	ldrbvs	r6, [r5, #-3169]!	@ 0xfffff39f
 801dec5:	6b2b223d 	blvs	8ae67c1 <__init_array_end+0xac70bd>
 801dec9:	222b7965 	eorcs	r7, fp, #1654784	@ 0x194000
 801decd:	762b223e 			@ <UNDEFINED> instruction: 0x762b223e
 801ded1:	2f3c222b 	svccs	0x003c222b
 801ded5:	6974706f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 801ded9:	223e6e6f 	eorscs	r6, lr, #1776	@ 0x6f0
 801dedd:	3b297d0a 	blcc	8a7d30d <__init_array_end+0xa5dc09>
 801dee1:	636f640a 	cmnvs	pc, #167772160	@ 0xa000000
 801dee5:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801dee9:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801deed:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801def1:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801def5:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801def9:	64692228 	strbtvs	r2, [r9], #-552	@ 0xfffffdd8
 801defd:	65726944 	ldrbvs	r6, [r2, #-2372]!	@ 0xfffff6bc
 801df01:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801df05:	2e292279 	mcrcs	2, 1, r2, cr9, cr9, {3}
 801df09:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801df0d:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801df11:	203d204c 	eorscs	r2, sp, ip, asr #32
 801df15:	65670a68 	strbvs	r0, [r7, #-2664]!	@ 0xfffff598
 801df19:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801df1d:	5b662874 	blpl	99a80f5 <__init_array_end+0x19889f1>
 801df21:	0a295d30 	beq	8a753e9 <__init_array_end+0xa55ce5>
 801df25:	73610a7d 	cmnvc	r1, #512000	@ 0x7d000
 801df29:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801df2d:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801df31:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801df35:	74656720 	strbtvc	r6, [r5], #-1824	@ 0xfffff8e0
 801df39:	7478745f 	ldrbtvc	r7, [r8], #-1119	@ 0xfffffba1
 801df3d:	6c657328 	stclvs	3, cr7, [r5], #-160	@ 0xffffff60
 801df41:	0a7b2029 	beq	9ee5fed <__init_array_end+0x1ec68e9>
 801df45:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801df49:	20747874 	rsbscs	r7, r4, r4, ror r8
 801df4d:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801df51:	20746961 	rsbscs	r6, r4, r1, ror #18
 801df55:	4a746567 	bmi	9d374f9 <__init_array_end+0x1d17df5>
 801df59:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801df5d:	296c6573 	stmdbcs	ip!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801df61:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 801df65:	3d206820 	stccc	8, cr6, [r0, #-128]!	@ 0xffffff80
 801df69:	0a222220 	beq	88a67f1 <__init_array_end+0x8870ed>
 801df6d:	656a624f 	strbvs	r6, [sl, #-591]!	@ 0xfffffdb1
 801df71:	6b2e7463 	blvs	8bbb105 <__init_array_end+0xb9ba01>
 801df75:	28737965 	ldmdacs	r3!, {r0, r2, r5, r6, r8, fp, ip, sp, lr}^
 801df79:	5b747874 	blpl	9d3c151 <__init_array_end+0x1d1ca4d>
 801df7d:	5d6c6573 	cfstr64pl	mvdx6, [ip, #-460]!	@ 0xfffffe34
 801df81:	6f662e29 	svcvs	0x00662e29
 801df85:	63614572 	cmnvs	r1, #478150656	@ 0x1c800000
 801df89:	75662868 	strbvc	r2, [r6, #-2152]!	@ 0xfffff798
 801df8d:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801df91:	6b286e6f 	blvs	8a39955 <__init_array_end+0xa1a251>
 801df95:	20297965 	eorcs	r7, r9, r5, ror #18
 801df99:	61760a7b 	cmnvs	r6, fp, ror sl
 801df9d:	20762072 	rsbscs	r2, r6, r2, ror r0
 801dfa1:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801dfa5:	65735b74 	ldrbvs	r5, [r3, #-2932]!	@ 0xfffff48c
 801dfa9:	6b5b5d6c 	blvs	96f5561 <__init_array_end+0x16d5e5d>
 801dfad:	0a5d7965 	beq	977c549 <__init_array_end+0x175ce45>
 801dfb1:	3d2b2068 	stccc	0, cr2, [fp, #-416]!	@ 0xfffffe60
 801dfb5:	743c2220 	ldrtvc	r2, [ip], #-544	@ 0xfffffde0
 801dfb9:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801dfbd:	2b223e64 	blcs	88ad955 <__init_array_end+0x88e251>
 801dfc1:	2b79656b 	blcs	9e77575 <__init_array_end+0x1e57e71>
 801dfc5:	742f3c27 	strtvc	r3, [pc], #-3111	@ 801dfcd <index_js+0x1b8>
 801dfc9:	743c3e64 	ldrtvc	r3, [ip], #-3684	@ 0xfffff19c
 801dfcd:	693c3e64 	ldmdbvs	ip!, {r2, r5, r6, r9, sl, fp, ip, sp}
 801dfd1:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 801dfd5:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801dfd9:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801dfdd:	22747865 	rsbscs	r7, r4, #6619136	@ 0x650000
 801dfe1:	6c617620 	stclvs	6, cr7, [r1], #-128	@ 0xffffff80
 801dfe5:	223d6575 	eorscs	r6, sp, #490733568	@ 0x1d400000
 801dfe9:	2b762b27 	blcs	9da8c8d <__init_array_end+0x1d89589>
 801dfed:	69202227 	stmdbvs	r0!, {r0, r1, r2, r5, r9, sp}
 801dff1:	27223d64 	strcs	r3, [r2, -r4, ror #26]!
 801dff5:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801dff9:	3e22272b 	cdpcc	7, 2, cr2, cr2, cr11, {1}
 801dffd:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 801e001:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801e009 <index_js+0x1f4>
 801e005:	0a273e72 	beq	89ed9d5 <__init_array_end+0x9ce2d1>
 801e009:	0a3b297d 	beq	8ee8605 <__init_array_end+0xec8f01>
 801e00d:	3d2b2068 	stccc	0, cr2, [fp, #-416]!	@ 0xfffffe60
 801e011:	743c2720 	ldrtvc	r2, [ip], #-1824	@ 0xfffff8e0
 801e015:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801e019:	6f632064 	svcvs	0x00632064
 801e01d:	6170736c 	cmnvs	r0, ip, ror #6
 801e021:	32223d6e 	eorcc	r3, r2, #7040	@ 0x1b80
 801e025:	623c3e22 	eorsvs	r3, ip, #544	@ 0x220
 801e029:	6f747475 	svcvs	0x00747475
 801e02d:	6e6f206e 	cdpvs	0, 6, cr2, cr15, cr14, {3}
 801e031:	63696c63 	cmnvs	r9, #25344	@ 0x6300
 801e035:	73223d6b 			@ <UNDEFINED> instruction: 0x73223d6b
 801e039:	28657661 	stmdacs	r5!, {r0, r5, r6, r9, sl, ip, sp, lr}^
 801e03d:	2b27275c 	blcs	89e7db5 <__init_array_end+0x9c86b1>
 801e041:	2b6c6573 	blcs	9b37615 <__init_array_end+0x1b17f11>
 801e045:	29275c27 	stmdbcs	r7!, {r0, r1, r2, r5, sl, fp, ip, lr}
 801e049:	61533e22 	cmpvs	r3, r2, lsr #28
 801e04d:	2f3c6576 	svccs	0x003c6576
 801e051:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801e055:	273e6e6f 	ldrcs	r6, [lr, -pc, ror #28]!
 801e059:	20680a3b 	rsbcs	r0, r8, fp, lsr sl
 801e05d:	27203d2b 	strcs	r3, [r0, -fp, lsr #26]!
 801e061:	7475623c 	ldrbtvc	r6, [r5], #-572	@ 0xfffffdc4
 801e065:	206e6f74 	rsbcs	r6, lr, r4, ror pc
 801e069:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 801e06d:	62223d73 	eorvs	r3, r2, #7360	@ 0x1cc0
 801e071:	20226e74 	eorcs	r6, r2, r4, ror lr
 801e075:	6c636e6f 	stclvs	14, cr6, [r3], #-444	@ 0xfffffe44
 801e079:	3d6b6369 	stclcc	3, cr6, [fp, #-420]!	@ 0xfffffe5c
 801e07d:	73657222 	cmnvc	r5, #536870914	@ 0x20000002
 801e081:	5c287465 	cfstrspl	mvf7, [r8], #-404	@ 0xfffffe6c
 801e085:	732b2727 			@ <UNDEFINED> instruction: 0x732b2727
 801e089:	272b6c65 	strcs	r6, [fp, -r5, ror #24]!
 801e08d:	2229275c 	eorcs	r2, r9, #92, 14	@ 0x1700000
 801e091:	6665443e 			@ <UNDEFINED> instruction: 0x6665443e
 801e095:	746c7561 	strbtvc	r7, [ip], #-1377	@ 0xfffffa9f
 801e099:	622f3c73 	eorvs	r3, pc, #29440	@ 0x7300
 801e09d:	6f747475 	svcvs	0x00747475
 801e0a1:	2f3c3e6e 	svccs	0x003c3e6e
 801e0a5:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	@ 0xfffffe30
 801e0a9:	3e72742f 	cdpcc	4, 7, cr7, cr2, cr15, {1}
 801e0ad:	640a3b27 	strvs	r3, [sl], #-2855	@ 0xfffff4d9
 801e0b1:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801e0b5:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e0b9:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801e0bd:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801e0c1:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801e0c5:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 801e0c9:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801e0cd:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801e0d1:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801e0d5:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801e0d9:	203d204c 	eorscs	r2, sp, ip, asr #32
 801e0dd:	0a7d0a68 	beq	9f60a85 <__init_array_end+0x1f41381>
 801e0e1:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801e0e5:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801e0e9:	76617320 	strbtvc	r7, [r1], -r0, lsr #6
 801e0ed:	65732865 	ldrbvs	r2, [r3, #-2149]!	@ 0xfffff79b
 801e0f1:	7b20296c 	blvc	88286a9 <__init_array_end+0x808fa5>
 801e0f5:	7261760a 	rsbvc	r7, r1, #10485760	@ 0xa00000
 801e0f9:	3d206420 	cfstrscc	mvf6, [r0, #-128]!	@ 0xffffff80
 801e0fd:	0a7d7b20 	beq	9f7cd85 <__init_array_end+0x1f5d681>
 801e101:	20726176 	rsbscs	r6, r2, r6, ror r1
 801e105:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801e109:	3d207374 	stccc	3, cr7, [r0, #-464]!	@ 0xfffffe30
 801e10d:	636f6420 	cmnvs	pc, #32, 8	@ 0x20000000
 801e111:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801e115:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801e119:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801e11d:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801e121:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801e125:	64692228 	strbtvs	r2, [r9], #-552	@ 0xfffffdd8
 801e129:	22747854 	rsbscs	r7, r4, #84, 16	@ 0x540000
 801e12d:	65672e29 	strbvs	r2, [r7, #-3625]!	@ 0xfffff1d7
 801e131:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801e135:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801e139:	54794273 	ldrbtpl	r4, [r9], #-627	@ 0xfffffd8d
 801e13d:	614e6761 	cmpvs	lr, r1, ror #14
 801e141:	2228656d 	eorcs	r6, r8, #457179136	@ 0x1b400000
 801e145:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801e149:	0a292274 	beq	8a66b21 <__init_array_end+0xa4741d>
 801e14d:	20726f66 	rsbscs	r6, r2, r6, ror #30
 801e151:	72617628 	rsbvc	r7, r1, #40, 12	@ 0x2800000
 801e155:	3d206920 			@ <UNDEFINED> instruction: 0x3d206920
 801e159:	203b3020 	eorscs	r3, fp, r0, lsr #32
 801e15d:	203c2069 	eorscs	r2, ip, r9, rrx
 801e161:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801e165:	6c2e7374 	stcvs	3, cr7, [lr], #-464	@ 0xfffffe30
 801e169:	74676e65 	strbtvc	r6, [r7], #-3685	@ 0xfffff19b
 801e16d:	69203b68 	stmdbvs	r0!, {r3, r5, r6, r8, r9, fp, ip, sp}
 801e171:	20292b2b 	eorcs	r2, r9, fp, lsr #22
 801e175:	61760a7b 	cmnvs	r6, fp, ror sl
 801e179:	206b2072 	rsbcs	r2, fp, r2, ror r0
 801e17d:	6e69203d 	mcrvs	0, 3, r2, cr9, cr13, {1}
 801e181:	73747570 	cmnvc	r4, #112, 10	@ 0x1c000000
 801e185:	2e5d695b 			@ <UNDEFINED> instruction: 0x2e5d695b
 801e189:	760a6469 	strvc	r6, [sl], -r9, ror #8
 801e18d:	76207261 	strtvc	r7, [r0], -r1, ror #4
 801e191:	69203d20 	stmdbvs	r0!, {r5, r8, sl, fp, ip, sp}
 801e195:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 801e199:	5d695b73 	fstmdbxpl	r9!, {d21-d77}	@ Deprecated
 801e19d:	6c61762e 	stclvs	6, cr7, [r1], #-184	@ 0xffffff48
 801e1a1:	640a6575 	strvs	r6, [sl], #-1397	@ 0xfffffa8b
 801e1a5:	205d6b5b 	subscs	r6, sp, fp, asr fp
 801e1a9:	0a76203d 	beq	9da62a5 <__init_array_end+0x1d86ba1>
 801e1ad:	61760a7d 	cmnvs	r6, sp, ror sl
 801e1b1:	756f2072 	strbvc	r2, [pc, #-114]!	@ 801e147 <index_js+0x332>
 801e1b5:	203d2074 	eorscs	r2, sp, r4, ror r0
 801e1b9:	6f0a7d7b 	svcvs	0x000a7d7b
 801e1bd:	735b7475 	cmpvc	fp, #1962934272	@ 0x75000000
 801e1c1:	205d6c65 	subscs	r6, sp, r5, ror #24
 801e1c5:	0a64203d 	beq	99262c1 <__init_array_end+0x1906bbd>
 801e1c9:	20726176 	rsbscs	r6, r2, r6, ror r1
 801e1cd:	6c796170 	ldfvse	f6, [r9], #-448	@ 0xfffffe40
 801e1d1:	2064616f 	rsbcs	r6, r4, pc, ror #2
 801e1d5:	534a203d 	movtpl	r2, #41021	@ 0xa03d
 801e1d9:	732e4e4f 			@ <UNDEFINED> instruction: 0x732e4e4f
 801e1dd:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 801e1e1:	79666967 	stmdbvc	r6!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
 801e1e5:	74756f28 	ldrbtvc	r6, [r5], #-3880	@ 0xfffff0d8
 801e1e9:	65660a29 	strbvs	r0, [r6, #-2601]!	@ 0xfffff5d7
 801e1ed:	28686374 	stmdacs	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
 801e1f1:	736a2f27 	cmnvc	sl, #39, 30	@ 0x9c
 801e1f5:	2c276e6f 	stccs	14, cr6, [r7], #-444	@ 0xfffffe44
 801e1f9:	6d0a7b20 	vstrvs	d7, [sl, #-128]	@ 0xffffff80
 801e1fd:	6f687465 	svcvs	0x00687465
 801e201:	27203a64 	strcs	r3, [r0, -r4, ror #20]!
 801e205:	54534f50 	ldrbpl	r4, [r3], #-3920	@ 0xfffff0b0
 801e209:	680a2c27 	stmdavs	sl, {r0, r1, r2, r5, sl, fp, sp}
 801e20d:	65646165 	strbvs	r6, [r4, #-357]!	@ 0xfffffe9b
 801e211:	203a7372 	eorscs	r7, sl, r2, ror r3
 801e215:	43270a7b 			@ <UNDEFINED> instruction: 0x43270a7b
 801e219:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801e21d:	542d746e 	strtpl	r7, [sp], #-1134	@ 0xfffffb92
 801e221:	27657079 			@ <UNDEFINED> instruction: 0x27657079
 801e225:	6127203a 			@ <UNDEFINED> instruction: 0x6127203a
 801e229:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801e22d:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801e231:	6a2f6e6f 	bvs	8bf9bf5 <__init_array_end+0xbda4f1>
 801e235:	276e6f73 			@ <UNDEFINED> instruction: 0x276e6f73
 801e239:	0a2c7d0a 	beq	8b3d669 <__init_array_end+0xb1df65>
 801e23d:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e241:	6170203a 	cmnvs	r0, sl, lsr r0
 801e245:	616f6c79 	smcvs	63177	@ 0xf6c9
 801e249:	297d0a64 	ldmdbcs	sp!, {r2, r5, r6, r9, fp}^
 801e24d:	68742e20 	ldmdavs	r4!, {r5, r9, sl, fp, sp}^
 801e251:	72286e65 	eorvc	r6, r8, #1616	@ 0x650
 801e255:	6f707365 	svcvs	0x00707365
 801e259:	2065736e 	rsbcs	r7, r5, lr, ror #6
 801e25d:	7b203e3d 	blvc	882db59 <__init_array_end+0x80e455>
 801e261:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801e265:	70736572 	rsbsvc	r6, r3, r2, ror r5
 801e269:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	@ 0xfffff191
 801e26d:	296b6f2e 	stmdbcs	fp!, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}^
 801e271:	67207b20 	strvs	r7, [r0, -r0, lsr #22]!
 801e275:	745f7465 	ldrbvc	r7, [pc], #-1125	@ 801e27d <index_js+0x468>
 801e279:	73287478 			@ <UNDEFINED> instruction: 0x73287478
 801e27d:	3b296c65 	blcc	8a79419 <__init_array_end+0xa59d15>
 801e281:	297d7d20 	ldmdbcs	sp!, {r5, r8, sl, fp, ip, sp, lr}^
 801e285:	0a7d0a3b 	beq	9f60b79 <__init_array_end+0x1f41475>
	...

0801e28a <styles_css>:
 801e28a:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e28e:	620a7b20 	andvs	r7, sl, #32, 22	@ 0x8000
 801e292:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
 801e296:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 801e29a:	6f632d64 	svcvs	0x00632d64
 801e29e:	3a726f6c 	bcc	9cba056 <__init_array_end+0x1c9a952>
 801e2a2:	62677220 	rsbvs	r7, r7, #32, 4
 801e2a6:	2c303228 	lfmcs	f3, 4, [r0], #-160	@ 0xffffff60
 801e2aa:	322c3032 	eorcc	r3, ip, #50	@ 0x32
 801e2ae:	0a3b2930 	beq	8ee8776 <__init_array_end+0xec9072>
 801e2b2:	6f6c6f63 	svcvs	0x006c6f63
 801e2b6:	72203a72 	eorvc	r3, r0, #466944	@ 0x72000
 801e2ba:	32286267 	eorcc	r6, r8, #1879048198	@ 0x70000006
 801e2be:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801e2c2:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	@ 0xffffff38
 801e2c6:	35353220 	ldrcc	r3, [r5, #-544]!	@ 0xfffffde0
 801e2ca:	7d0a3b29 	vstrvc	d3, [sl, #-164]	@ 0xffffff5c
 801e2ce:	206c750a 	rsbcs	r7, ip, sl, lsl #10
 801e2d2:	69640a7b 	stmdbvs	r4!, {r0, r1, r3, r4, r5, r6, r9, fp}^
 801e2d6:	616c7073 	smcvs	50947	@ 0xc703
 801e2da:	66203a79 			@ <UNDEFINED> instruction: 0x66203a79
 801e2de:	3b78656c 	blcc	9e37896 <__init_array_end+0x1e18192>
 801e2e2:	6c0a7d0a 	stcvs	13, cr7, [sl], {10}
 801e2e6:	0a7b2069 	beq	9ee6492 <__init_array_end+0x1ec6d8e>
 801e2ea:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801e2ee:	7974732d 	ldmdbvc	r4!, {r0, r2, r3, r5, r8, r9, ip, sp, lr}^
 801e2f2:	203a656c 	eorscs	r6, sl, ip, ror #10
 801e2f6:	656e6f6e 	strbvs	r6, [lr, #-3950]!	@ 0xfffff092
 801e2fa:	616d0a3b 	cmnvs	sp, fp, lsr sl
 801e2fe:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 801e302:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801e306:	70352078 	eorsvc	r2, r5, r8, ror r0
 801e30a:	7d0a3b78 	vstrvc	d3, [sl, #-480]	@ 0xfffffe20
 801e30e:	6165680a 	cmnvs	r5, sl, lsl #16
 801e312:	20726564 	rsbscs	r6, r2, r4, ror #10
 801e316:	69640a7b 	stmdbvs	r4!, {r0, r1, r3, r4, r5, r6, r9, fp}^
 801e31a:	616c7073 	smcvs	50947	@ 0xc703
 801e31e:	66203a79 			@ <UNDEFINED> instruction: 0x66203a79
 801e322:	3b78656c 	blcc	9e378da <__init_array_end+0x1e181d6>
 801e326:	726f620a 	rsbvc	r6, pc, #-1610612736	@ 0xa0000000
 801e32a:	2d726564 	cfldr64cs	mvdx6, [r2, #-400]!	@ 0xfffffe70
 801e32e:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801e332:	203a7375 	eorscs	r7, sl, r5, ror r3
 801e336:	3b787034 	blcc	9e3a40e <__init_array_end+0x1e1ad0a>
 801e33a:	726f620a 	rsbvc	r6, pc, #-1610612736	@ 0xa0000000
 801e33e:	3a726564 	bcc	9cb78d6 <__init_array_end+0x1c981d2>
 801e342:	6c6f7320 	stclvs	3, cr7, [pc], #-128	@ 801e2c8 <styles_css+0x3e>
 801e346:	67206469 	strvs	r6, [r0, -r9, ror #8]!
 801e34a:	20796572 	rsbscs	r6, r9, r2, ror r5
 801e34e:	3b787031 	blcc	9e3a41a <__init_array_end+0x1e1ad16>
 801e352:	660a7d0a 	strvs	r7, [sl], -sl, lsl #26
 801e356:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	@ 0xfffff091
 801e35a:	0a7b2072 	beq	9ee652a <__init_array_end+0x1ec6e26>
 801e35e:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801e362:	3a79616c 	bcc	9e7691a <__init_array_end+0x1e57216>
 801e366:	656c6620 	strbvs	r6, [ip, #-1568]!	@ 0xfffff9e0
 801e36a:	6a0a3b78 	bvs	82ad152 <__init_array_end+0x28da4e>
 801e36e:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801e372:	632d7966 			@ <UNDEFINED> instruction: 0x632d7966
 801e376:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801e37a:	203a746e 	eorscs	r7, sl, lr, ror #8
 801e37e:	746e6563 	strbtvc	r6, [lr], #-1379	@ 0xfffffa9d
 801e382:	0a3b7265 	beq	8efad1e <__init_array_end+0xedb61a>
 801e386:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 801e38a:	722d7265 	eorvc	r7, sp, #1342177286	@ 0x50000006
 801e38e:	75696461 	strbvc	r6, [r9, #-1121]!	@ 0xfffffb9f
 801e392:	34203a73 	strtcc	r3, [r0], #-2675	@ 0xfffff58d
 801e396:	0a3b7870 	beq	8efc55e <__init_array_end+0xedce5a>
 801e39a:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 801e39e:	203a7265 	eorscs	r7, sl, r5, ror #4
 801e3a2:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e3a6:	72672064 	rsbvc	r2, r7, #100	@ 0x64
 801e3aa:	31207965 			@ <UNDEFINED> instruction: 0x31207965
 801e3ae:	0a3b7870 	beq	8efc576 <__init_array_end+0xedce72>
 801e3b2:	75620a7d 	strbvc	r0, [r2, #-2685]!	@ 0xfffff583
 801e3b6:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801e3ba:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 801e3be:	6f737275 	svcvs	0x00737275
 801e3c2:	70203a72 	eorvc	r3, r0, r2, ror sl
 801e3c6:	746e696f 	strbtvc	r6, [lr], #-2415	@ 0xfffff691
 801e3ca:	0a3b7265 	beq	8efad66 <__init_array_end+0xedb662>
 801e3ce:	75620a7d 	strbvc	r0, [r2, #-2685]!	@ 0xfffff583
 801e3d2:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801e3d6:	7463613a 	strbtvc	r6, [r3], #-314	@ 0xfffffec6
 801e3da:	20657669 	rsbcs	r7, r5, r9, ror #12
 801e3de:	61620a7b 	smcvs	8363	@ 0x20ab
 801e3e2:	72676b63 	rsbvc	r6, r7, #101376	@ 0x18c00
 801e3e6:	646e756f 	strbtvs	r7, [lr], #-1391	@ 0xfffffa91
 801e3ea:	6c6f632d 	stclvs	3, cr6, [pc], #-180	@ 801e33c <styles_css+0xb2>
 801e3ee:	203a726f 	eorscs	r7, sl, pc, ror #4
 801e3f2:	30303023 	eorscc	r3, r0, r3, lsr #32
 801e3f6:	6f630a3b 	svcvs	0x00630a3b
 801e3fa:	3a726f6c 	bcc	9cba1b2 <__init_array_end+0x1c9aaae>
 801e3fe:	66662320 	strbtvs	r2, [r6], -r0, lsr #6
 801e402:	7d0a3b66 	vstrvc	d3, [sl, #-408]	@ 0xfffffe68
 801e406:	74622e0a 	strbtvc	r2, [r2], #-3594	@ 0xfffff1f6
 801e40a:	0a7b206e 	beq	9ee65ca <__init_array_end+0x1ec6ec6>
 801e40e:	6772616d 	ldrbvs	r6, [r2, -sp, ror #2]!
 801e412:	6c2d6e69 	stcvs	14, cr6, [sp], #-420	@ 0xfffffe5c
 801e416:	3a746665 	bcc	9d37db2 <__init_array_end+0x1d186ae>
 801e41a:	70303520 	eorsvc	r3, r0, r0, lsr #10
 801e41e:	7d0a3b78 	vstrvc	d3, [sl, #-480]	@ 0xfffffe20
 801e422:	 	cmnvc	r1, #10

0801e424 <static_js>:
 801e424:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801e428:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801e42c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801e430:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801e434:	534a7465 	movtpl	r7, #42085	@ 0xa465
 801e438:	6a284e4f 	bvs	8a31d7c <__init_array_end+0xa12678>
 801e43c:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e440:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 801e444:	7b207972 	blvc	883ca14 <__init_array_end+0x81d310>
 801e448:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801e44c:	72207473 	eorvc	r7, r0, #1929379840	@ 0x73000000
 801e450:	61203d20 			@ <UNDEFINED> instruction: 0x61203d20
 801e454:	74696177 	strbtvc	r6, [r9], #-375	@ 0xfffffe89
 801e458:	74656620 	strbtvc	r6, [r5], #-1568	@ 0xfffff9e0
 801e45c:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 801e460:	6f736a2f 	svcvs	0x00736a2f
 801e464:	2b272f6e 	blcs	89ea224 <__init_array_end+0x9cab20>
 801e468:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801e46c:	66690a29 	strbtvs	r0, [r9], -r9, lsr #20
 801e470:	72212820 	eorvc	r2, r1, #32, 16	@ 0x200000
 801e474:	296b6f2e 	stmdbcs	fp!, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}^
 801e478:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 801e47c:	776f7268 	strbvc	r7, [pc, -r8, ror #4]!
 801e480:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
 801e484:	72724520 	rsbsvc	r4, r2, #32, 10	@ 0x8000000
 801e488:	2728726f 	strcs	r7, [r8, -pc, ror #4]!
 801e48c:	6f727245 	svcvs	0x00727245
 801e490:	0a292772 	beq	8a68260 <__init_array_end+0xa48b5c>
 801e494:	65720a7d 	ldrbvs	r0, [r2, #-2685]!	@ 0xfffff583
 801e498:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 801e49c:	6a2e7220 	bvs	8bbad24 <__init_array_end+0xb9b620>
 801e4a0:	286e6f73 	stmdacs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e4a4:	207d0a29 	rsbscs	r0, sp, r9, lsr #20
 801e4a8:	63746163 	cmnvs	r4, #-1073741800	@ 0xc0000018
 801e4ac:	65282068 	strvs	r2, [r8, #-104]!	@ 0xffffff98
 801e4b0:	726f7272 	rsbvc	r7, pc, #536870919	@ 0x20000007
 801e4b4:	7d7b2029 	ldclvc	0, cr2, [fp, #-164]!	@ 0xffffff5c
 801e4b8:	610a7d0a 	tstvs	sl, sl, lsl #26
 801e4bc:	636e7973 	cmnvs	lr, #1884160	@ 0x1cc000
 801e4c0:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 801e4c4:	6f697463 	svcvs	0x00697463
 801e4c8:	696c206e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, sp}^
 801e4cc:	29287473 	stmdbcs	r8!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 801e4d0:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 801e4d4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801e4d8:	3d206c20 	stccc	12, cr6, [r0, #-128]!	@ 0xffffff80
 801e4dc:	61776120 	cmnvs	r7, r0, lsr #2
 801e4e0:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801e4e4:	534a7465 	movtpl	r7, #42085	@ 0xa465
 801e4e8:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801e4ec:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801e4f0:	640a2927 	strvs	r2, [sl], #-2343	@ 0xfffff6d9
 801e4f4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801e4f8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e4fc:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801e500:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801e504:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801e508:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 801e50c:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801e510:	29227473 	stmdbcs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 801e514:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 801e518:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 801e51c:	3d204c4d 	stccc	12, cr4, [r0, #-308]!	@ 0xfffffecc
 801e520:	6c3c2220 	lfmvs	f2, 4, [ip], #-128	@ 0xffffff80
 801e524:	2b223e69 	blcs	88aded0 <__init_array_end+0x88e7cc>
 801e528:	696c2e6c 	stmdbvs	ip!, {r2, r3, r5, r6, r9, sl, fp, sp}^
 801e52c:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801e530:	2b656d61 	blcs	9979abc <__init_array_end+0x195a3b8>
 801e534:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 801e4b4 <static_js+0x90>
 801e538:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	@ 0xfffffe5c
 801e53c:	2b223e69 	blcs	88adee8 <__init_array_end+0x88e7e4>
 801e540:	696c2e6c 	stmdbvs	ip!, {r2, r3, r5, r6, r9, sl, fp, sp}^
 801e544:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801e548:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
 801e54c:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801e550:	2f3c222b 	svccs	0x003c222b
 801e554:	3c3e696c 			@ <UNDEFINED> instruction: 0x3c3e696c
 801e558:	223e696c 	eorscs	r6, lr, #108, 18	@ 0x1b0000
 801e55c:	6c2e6c2b 	stcvs	12, cr6, [lr], #-172	@ 0xffffff54
 801e560:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 801e564:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 801e568:	726f702e 	rsbvc	r7, pc, #46	@ 0x2e
 801e56c:	79742e74 	ldmdbvc	r4!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801e570:	222b6570 	eorcs	r6, fp, #112, 10	@ 0x1c000000
 801e574:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801e578:	7d0a223e 	sfmvc	f2, 4, [sl, #-248]	@ 0xffffff08
 801e57c:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 801e580:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801e584:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
 801e588:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801e58c:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801e590:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e594:	0a7b2029 	beq	9ee6640 <__init_array_end+0x1ec6f3c>
 801e598:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801e59c:	20762074 	rsbscs	r2, r6, r4, ror r0
 801e5a0:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801e5a4:	20746961 	rsbscs	r6, r4, r1, ror #18
 801e5a8:	4a746567 	bmi	9d37b4c <__init_array_end+0x1d18448>
 801e5ac:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801e5b0:	72657627 	rsbvc	r7, r5, #40894464	@ 0x2700000
 801e5b4:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801e5b8:	640a2927 	strvs	r2, [sl], #-2343	@ 0xfffff6d9
 801e5bc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801e5c0:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e5c4:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801e5c8:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801e5cc:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801e5d0:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 801e5d4:	65566469 	ldrbvs	r6, [r6, #-1129]	@ 0xfffffb97
 801e5d8:	6f697372 	svcvs	0x00697372
 801e5dc:	2e29226e 	cdpcs	2, 2, cr2, cr9, cr14, {3}
 801e5e0:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801e5e4:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801e5e8:	203d204c 	eorscs	r2, sp, ip, asr #32
 801e5ec:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 801e5f0:	2b22563e 	blcs	88b3ef0 <__init_array_end+0x8947ec>
 801e5f4:	65762e76 	ldrbvs	r2, [r6, #-3702]!	@ 0xfffff18a
 801e5f8:	6f697372 	svcvs	0x00697372
 801e5fc:	3c222b6e 			@ <UNDEFINED> instruction: 0x3c222b6e
 801e600:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801e604:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801e608:	2e762b22 	vaddcs.f64	d18, d6, d18
 801e60c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	@ 0xfffffe78
 801e610:	61642e64 	cmnvs	r4, r4, ror #28
 801e614:	222b6574 	eorcs	r6, fp, #116, 10	@ 0x1d000000
 801e618:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801e61c:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801e620:	762b223e 			@ <UNDEFINED> instruction: 0x762b223e
 801e624:	6975622e 	ldmdbvs	r5!, {r1, r2, r3, r5, r9, sp, lr}^
 801e628:	742e646c 	strtvc	r6, [lr], #-1132	@ 0xfffffb94
 801e62c:	2b656d69 	blcs	9979bd8 <__init_array_end+0x195a4d4>
 801e630:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 801e5b0 <static_js+0x18c>
 801e634:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	@ 0xfffffe5c
 801e638:	2b223e69 	blcs	88adfe4 <__init_array_end+0x88e8e0>
 801e63c:	6f622e76 	svcvs	0x00622e76
 801e640:	2b647261 	blcs	993afcc <__init_array_end+0x191b8c8>
 801e644:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 801e5c4 <static_js+0x1a0>
 801e648:	0a223e69 	beq	88adff4 <__init_array_end+0x88e8f0>
 801e64c:	75660a7d 	strbvc	r0, [r6, #-2685]!	@ 0xfffff583
 801e650:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801e654:	70206e6f 	eorvc	r6, r0, pc, ror #28
 801e658:	2874736f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 801e65c:	7b202973 	blvc	8828c30 <__init_array_end+0x80952c>
 801e660:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801e664:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801e668:	63746566 	cmnvs	r4, #427819008	@ 0x19800000
 801e66c:	2f272868 	svccs	0x00272868
 801e670:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801e674:	7463612f 	strbtvc	r6, [r3], #-303	@ 0xfffffed1
 801e678:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 801e67c:	0a7b202c 	beq	9ee6734 <__init_array_end+0x1ec7030>
 801e680:	6874656d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 801e684:	203a646f 	eorscs	r6, sl, pc, ror #8
 801e688:	534f5027 	movtpl	r5, #61479	@ 0xf027
 801e68c:	0a2c2754 	beq	8b283e4 <__init_array_end+0xb08ce0>
 801e690:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801e694:	3a737265 	bcc	9cfb030 <__init_array_end+0x1cdb92c>
 801e698:	270a7b20 	strcs	r7, [sl, -r0, lsr #22]
 801e69c:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801e6a0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801e6a4:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801e6a8:	27203a27 	strcs	r3, [r0, -r7, lsr #20]!
 801e6ac:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801e6b0:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801e6b4:	2f6e6f69 	svccs	0x006e6f69
 801e6b8:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801e6bc:	2c7d0a27 			@ <UNDEFINED> instruction: 0x2c7d0a27
 801e6c0:	646f620a 	strbtvs	r6, [pc], #-522	@ 801e6c8 <static_js+0x2a4>
 801e6c4:	4a203a79 	bmi	882d0b0 <__init_array_end+0x80d9ac>
 801e6c8:	2e4e4f53 	mcrcs	15, 2, r4, cr14, cr3, {2}
 801e6cc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 801e6d0:	6669676e 	strbtvs	r6, [r9], -lr, ror #14
 801e6d4:	29732879 	ldmdbcs	r3!, {r0, r3, r4, r5, r6, fp, sp}^
 801e6d8:	0a297d0a 	beq	8a7db08 <__init_array_end+0xa5e404>
 801e6dc:	75660a7d 	strbvc	r0, [r6, #-2685]!	@ 0xfffff583
 801e6e0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801e6e4:	64206e6f 	strtvs	r6, [r0], #-3695	@ 0xfffff191
 801e6e8:	74656c65 	strbtvc	r6, [r5], #-3173	@ 0xfffff39b
 801e6ec:	20297328 	eorcs	r7, r9, r8, lsr #6
 801e6f0:	65720a7b 	ldrbvs	r0, [r2, #-2683]!	@ 0xfffff585
 801e6f4:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 801e6f8:	74656620 	strbtvc	r6, [r5], #-1568	@ 0xfffff9e0
 801e6fc:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 801e700:	6f736a2f 	svcvs	0x00736a2f
 801e704:	63612f6e 	cmnvs	r1, #440	@ 0x1b8
 801e708:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801e70c:	7b202c27 	blvc	88297b0 <__init_array_end+0x80a0ac>
 801e710:	74656d0a 	strbtvc	r6, [r5], #-3338	@ 0xfffff2f6
 801e714:	3a646f68 	bcc	993a4bc <__init_array_end+0x191adb8>
 801e718:	45442720 	strbmi	r2, [r4, #-1824]	@ 0xfffff8e0
 801e71c:	4554454c 	ldrbmi	r4, [r4, #-1356]	@ 0xfffffab4
 801e720:	680a2c27 	stmdavs	sl, {r0, r1, r2, r5, sl, fp, sp}
 801e724:	65646165 	strbvs	r6, [r4, #-357]!	@ 0xfffffe9b
 801e728:	203a7372 	eorscs	r7, sl, r2, ror r3
 801e72c:	43270a7b 			@ <UNDEFINED> instruction: 0x43270a7b
 801e730:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801e734:	542d746e 	strtpl	r7, [sp], #-1134	@ 0xfffffb92
 801e738:	27657079 			@ <UNDEFINED> instruction: 0x27657079
 801e73c:	6127203a 			@ <UNDEFINED> instruction: 0x6127203a
 801e740:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801e744:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801e748:	6a2f6e6f 	bvs	8bfa10c <__init_array_end+0xbdaa08>
 801e74c:	276e6f73 			@ <UNDEFINED> instruction: 0x276e6f73
 801e750:	0a2c7d0a 	beq	8b3db80 <__init_array_end+0xb1e47c>
 801e754:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e758:	534a203a 	movtpl	r2, #41018	@ 0xa03a
 801e75c:	732e4e4f 			@ <UNDEFINED> instruction: 0x732e4e4f
 801e760:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 801e764:	79666967 	stmdbvc	r6!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
 801e768:	0a297328 	beq	8a7b410 <__init_array_end+0xa5bd0c>
 801e76c:	7d0a297d 	vstrvc.16	s4, [sl, #-250]	@ 0xffffff06	@ <UNPREDICTABLE>
 801e770:	6e75660a 	cdpvs	6, 7, cr6, cr5, cr10, {0}
 801e774:	6f697463 	svcvs	0x00697463
 801e778:	6572206e 	ldrbvs	r2, [r2, #-110]!	@ 0xffffff92
 801e77c:	746f6f62 	strbtvc	r6, [pc], #-3938	@ 801e784 <static_js+0x360>
 801e780:	7b202928 	blvc	8828c28 <__init_array_end+0x809524>
 801e784:	736f700a 	cmnvc	pc, #10
 801e788:	207b2874 	rsbscs	r2, fp, r4, ror r8
 801e78c:	6f626572 	svcvs	0x00626572
 801e790:	203a746f 	eorscs	r7, sl, pc, ror #8
 801e794:	297d2031 	ldmdbcs	sp!, {r0, r4, r5, sp}^
 801e798:	660a7d0a 	strvs	r7, [sl], -sl, lsl #26
 801e79c:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
 801e7a0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801e7a4:	61636f6c 	cmnvs	r3, ip, ror #30
 801e7a8:	29286574 	stmdbcs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}
 801e7ac:	760a7b20 	strvc	r7, [sl], -r0, lsr #22
 801e7b0:	62207261 	eorvs	r7, r0, #268435462	@ 0x10000006
 801e7b4:	64203d20 	strtvs	r3, [r0], #-3360	@ 0xfffff2e0
 801e7b8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801e7bc:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801e7c0:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801e7c4:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801e7c8:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801e7cc:	27286449 	strcs	r6, [r8, -r9, asr #8]!
 801e7d0:	61636f6c 	cmnvs	r3, ip, ror #30
 801e7d4:	75426574 	strbvc	r6, [r2, #-1396]	@ 0xfffffa8c
 801e7d8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801e7dc:	0a3b2927 	beq	8ee8c80 <__init_array_end+0xec957c>
 801e7e0:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801e7e4:	6c632e62 	stclvs	14, cr2, [r3], #-392	@ 0xfffffe78
 801e7e8:	4c737361 	ldclmi	3, cr7, [r3], #-388	@ 0xfffffe7c
 801e7ec:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 801e7f0:	746e6f63 	strbtvc	r6, [lr], #-3939	@ 0xfffff09d
 801e7f4:	736e6961 	cmnvc	lr, #1589248	@ 0x184000
 801e7f8:	6e692728 	cdpvs	7, 6, cr2, cr9, cr8, {1}
 801e7fc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801e800:	29276576 	stmdbcs	r7!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 801e804:	0a7b2029 	beq	9ee68b0 <__init_array_end+0x1ec71ac>
 801e808:	6c632e62 	stclvs	14, cr2, [r3], #-392	@ 0xfffffe78
 801e80c:	4c737361 	ldclmi	3, cr7, [r3], #-388	@ 0xfffffe7c
 801e810:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 801e814:	6f6d6572 	svcvs	0x006d6572
 801e818:	27286576 			@ <UNDEFINED> instruction: 0x27286576
 801e81c:	63616e69 	cmnvs	r1, #1680	@ 0x690
 801e820:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801e824:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 801e828:	616c632e 	cmnvs	ip, lr, lsr #6
 801e82c:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 801e830:	612e7473 			@ <UNDEFINED> instruction: 0x612e7473
 801e834:	27286464 	strcs	r6, [r8, -r4, ror #8]!
 801e838:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801e83c:	29276576 	stmdbcs	r7!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 801e840:	692e620a 	stmdbvs	lr!, {r1, r3, r9, sp, lr}
 801e844:	72656e6e 	rsbvc	r6, r5, #1760	@ 0x6e0
 801e848:	4c4d5448 	cfstrdmi	mvd5, [sp], {72}	@ 0x48
 801e84c:	27203d20 	strcs	r3, [r0, -r0, lsr #26]!
 801e850:	61636f4c 	cmnvs	r3, ip, asr #30
 801e854:	4f206574 	svcmi	0x00206574
 801e858:	700a276e 	andvc	r2, sl, lr, ror #14
 801e85c:	2874736f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 801e860:	6469207b 	strbtvs	r2, [r9], #-123	@ 0xffffff85
 801e864:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801e868:	203a7966 	eorscs	r7, sl, r6, ror #18
 801e86c:	297d2031 	ldmdbcs	sp!, {r0, r4, r5, sp}^
 801e870:	65207d0a 	strvs	r7, [r0, #-3338]!	@ 0xfffff2f6
 801e874:	2065736c 	rsbcs	r7, r5, ip, ror #6
 801e878:	2e620a7b 			@ <UNDEFINED> instruction: 0x2e620a7b
 801e87c:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 801e880:	73694c73 	cmnvc	r9, #29440	@ 0x7300
 801e884:	65722e74 	ldrbvs	r2, [r2, #-3700]!	@ 0xfffff18c
 801e888:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	@ 0xfffff093
 801e88c:	63612728 	cmnvs	r1, #40, 14	@ 0xa00000
 801e890:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801e894:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 801e898:	616c632e 	cmnvs	ip, lr, lsr #6
 801e89c:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 801e8a0:	612e7473 			@ <UNDEFINED> instruction: 0x612e7473
 801e8a4:	27286464 	strcs	r6, [r8, -r4, ror #8]!
 801e8a8:	63616e69 	cmnvs	r1, #1680	@ 0x690
 801e8ac:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801e8b0:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 801e8b4:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 801e8b8:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 801e8bc:	3d204c4d 	stccc	12, cr4, [r0, #-308]!	@ 0xfffffecc
 801e8c0:	6f4c2720 	svcvs	0x004c2720
 801e8c4:	65746163 	ldrbvs	r6, [r4, #-355]!	@ 0xfffffe9d
 801e8c8:	66664f20 	strbtvs	r4, [r6], -r0, lsr #30
 801e8cc:	6f700a27 	svcvs	0x00700a27
 801e8d0:	7b287473 	blvc	8a3baa4 <__init_array_end+0xa1c3a0>
 801e8d4:	65646920 	strbvs	r6, [r4, #-2336]!	@ 0xfffff6e0
 801e8d8:	6669746e 	strbtvs	r7, [r9], -lr, ror #8
 801e8dc:	30203a79 	eorcc	r3, r0, r9, ror sl
 801e8e0:	0a297d20 	beq	8a7dd68 <__init_array_end+0xa5e664>
 801e8e4:	007d0a7d 	rsbseq	r0, sp, sp, ror sl

0801e8e8 <ArtNetMsgConst::STARTED>:
 801e8e8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801e8ec:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801e8f0:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801e8f4:	00646574 	rsbeq	r6, r4, r4, ror r5

0801e8f8 <ArtNetMsgConst::START>:
 801e8f8:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
 801e8fc:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
 801e900:	74724120 	ldrbtvc	r4, [r2], #-288	@ 0xfffffee0
 801e904:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
	...

0801e909 <artnet::NODE_ID>:
 801e909:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801e90d:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801e911 <ArtNetParamsConst::MAP_UNIVERSE0>:
 801e911:	5f70616d 	svcpl	0x0070616d
 801e915:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801e919:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801e91d:	 	rsbsvc	r0, r0, #48	@ 0x30

0801e91f <ArtNetParamsConst::PROTOCOL_PORT>:
 801e91f:	746f7270 	strbtvc	r7, [pc], #-624	@ 801e927 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 801e923:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 801e76c <static_js+0x348>
 801e927:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801e92b:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801e92f:	746f7270 	strbtvc	r7, [pc], #-624	@ 801e937 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 801e933:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 801e77c <static_js+0x358>
 801e937:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801e93b:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801e93f:	746f7270 	strbtvc	r7, [pc], #-624	@ 801e947 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 801e943:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 801e78c <static_js+0x368>
 801e947:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801e94b:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801e94f:	746f7270 	strbtvc	r7, [pc], #-624	@ 801e957 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 801e953:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 801e79c <static_js+0x378>
 801e957:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801e95b:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801e95f <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801e95f:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 801e963:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 801e967:	5f6e6f69 	svcpl	0x006e6f69
 801e96b:	705f7069 	subsvc	r7, pc, r9, rrx
 801e96f:	5f74726f 	svcpl	0x0074726f
 801e973:	00000061 	andeq	r0, r0, r1, rrx
 801e977:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 801e97b:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 801e97f:	5f6e6f69 	svcpl	0x006e6f69
 801e983:	705f7069 	subsvc	r7, pc, r9, rrx
 801e987:	5f74726f 	svcpl	0x0074726f
 801e98b:	00000062 	andeq	r0, r0, r2, rrx
 801e98f:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 801e993:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 801e997:	5f6e6f69 	svcpl	0x006e6f69
 801e99b:	705f7069 	subsvc	r7, pc, r9, rrx
 801e99f:	5f74726f 	svcpl	0x0074726f
 801e9a3:	00000063 	andeq	r0, r0, r3, rrx
 801e9a7:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 801e9ab:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 801e9af:	5f6e6f69 	svcpl	0x006e6f69
 801e9b3:	705f7069 	subsvc	r7, pc, r9, rrx
 801e9b7:	5f74726f 	svcpl	0x0074726f
 801e9bb:	00000064 	andeq	r0, r0, r4, rrx

0801e9bf <ArtNetParamsConst::FILE_NAME>:
 801e9bf:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801e9c3:	742e7465 	strtvc	r7, [lr], #-1125	@ 0xfffffb9b
 801e9c7:	 			@ <UNDEFINED> instruction: 0xff007478

0801e9ca <ArtNetConst::OEM_ID>:
 801e9ca:	 	ldrsheq	pc, [r0], #-255	@ 0xffffff01	@ <UNPREDICTABLE>

0801e9cc <ArtNetConst::ESTA_ID>:
 801e9cc:	 	stccc	0, cr0, [r1], {80}	@ 0x50

0801e9ce <ArtNetConst::VERSION>:
 801e9ce:	 	movtpl	r3, #7169	@ 0x1c01

0801e9d0 <E117Const::ACN_PACKET_IDENTIFIER>:
 801e9d0:	2d435341 	stclcs	3, cr5, [r3, #-260]	@ 0xfffffefc
 801e9d4:	312e3145 			@ <UNDEFINED> instruction: 0x312e3145
 801e9d8:	00000037 	andeq	r0, r0, r7, lsr r0

0801e9dc <E131Const::VERSION>:
 801e9dc:	00001b01 	andeq	r1, r0, r1, lsl #22

0801e9e0 <vtable for RDMDeviceResponder>:
	...
 801e9e8:	08009cd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sl, fp, ip, pc}
 801e9ec:	08009ddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, ip, pc}
 801e9f0:	0800ebd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp, sp, lr, pc}
 801e9f4:	0800ebd3 	stmdaeq	r0, {r0, r1, r4, r6, r7, r8, r9, fp, sp, lr, pc}

0801e9f8 <RDMHandler::PID_DEFINITIONS>:
 801e9f8:	00000060 	andeq	r0, r0, r0, rrx
 801e9fc:	0800f0f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, sp, lr, pc}
	...
 801ea0c:	01010000 	mrseq	r0, (UNDEF: 1)
 801ea10:	00000080 	andeq	r0, r0, r0, lsl #1
 801ea14:	0800f229 	stmdaeq	r0, {r0, r3, r5, r9, ip, sp, lr, pc}
	...
 801ea24:	01010100 	mrseq	r0, (UNDEF: 17)
 801ea28:	00000081 	andeq	r0, r0, r1, lsl #1
 801ea2c:	0800f295 	stmdaeq	r0, {r0, r2, r4, r7, r9, ip, sp, lr, pc}
	...
 801ea3c:	01010100 	mrseq	r0, (UNDEF: 17)
 801ea40:	00000082 	andeq	r0, r0, r2, lsl #1
 801ea44:	0800f245 	stmdaeq	r0, {r0, r2, r6, r9, ip, sp, lr, pc}
 801ea48:	00000000 	andeq	r0, r0, r0
 801ea4c:	0800f3c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, ip, sp, lr, pc}
 801ea50:	00000000 	andeq	r0, r0, r0
 801ea54:	01010100 	mrseq	r0, (UNDEF: 17)
 801ea58:	00000090 	muleq	r0, r0, r0
 801ea5c:	0800f169 	stmdaeq	r0, {r0, r3, r5, r6, r8, ip, sp, lr, pc}
 801ea60:	00000000 	andeq	r0, r0, r0
 801ea64:	0800f391 	stmdaeq	r0, {r0, r4, r7, r8, r9, ip, sp, lr, pc}
 801ea68:	00000000 	andeq	r0, r0, r0
 801ea6c:	01010100 	mrseq	r0, (UNDEF: 17)
 801ea70:	00001000 	andeq	r1, r0, r0
 801ea74:	0800f281 	stmdaeq	r0, {r0, r7, r9, ip, sp, lr, pc}
 801ea78:	00000000 	andeq	r0, r0, r0
 801ea7c:	0800f315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip, sp, lr, pc}
 801ea80:	00000000 	andeq	r0, r0, r0
 801ea84:	01010000 	mrseq	r0, (UNDEF: 1)
 801ea88:	00001001 	andeq	r1, r0, r1
	...
 801ea94:	0800f2cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, ip, sp, lr, pc}
 801ea98:	00000000 	andeq	r0, r0, r0
 801ea9c:	01010100 	mrseq	r0, (UNDEF: 17)
 801eaa0:	00000700 	andeq	r0, r0, r0, lsl #14
 801eaa4:	0800f8a1 	stmdaeq	r0, {r0, r5, r7, fp, ip, sp, lr, pc}
	...
 801eab4:	01000000 	mrseq	r0, (UNDEF: 0)
 801eab8:	00000701 	andeq	r0, r0, r1, lsl #14
 801eabc:	0800f8bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, fp, ip, sp, lr, pc}
	...
 801eacc:	01000004 	tsteq	r0, r4
 801ead0:	00000702 	andeq	r0, r0, r2, lsl #14
 801ead4:	0800f90d 	stmdaeq	r0, {r0, r2, r3, r8, fp, ip, sp, lr, pc}
	...
 801eae4:	01000004 	tsteq	r0, r4
 801eae8:	00000703 	andeq	r0, r0, r3, lsl #14
 801eaec:	0800f941 	stmdaeq	r0, {r0, r6, r8, fp, ip, sp, lr, pc}
 801eaf0:	00000000 	andeq	r0, r0, r0
 801eaf4:	0800f971 	stmdaeq	r0, {r0, r4, r5, r6, r8, fp, ip, sp, lr, pc}
 801eaf8:	00000000 	andeq	r0, r0, r0
 801eafc:	01000004 	tsteq	r0, r4
 801eb00:	00000704 	andeq	r0, r0, r4, lsl #14
 801eb04:	0800f9f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, fp, ip, sp, lr, pc}
 801eb08:	00000000 	andeq	r0, r0, r0
 801eb0c:	0800fa2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, ip, sp, lr, pc}
 801eb10:	00000000 	andeq	r0, r0, r0
 801eb14:	01000004 	tsteq	r0, r4
 801eb18:	00000705 	andeq	r0, r0, r5, lsl #14
 801eb1c:	0800faa5 	stmdaeq	r0, {r0, r2, r5, r7, r9, fp, ip, sp, lr, pc}
	...
 801eb2c:	01000004 	tsteq	r0, r4
 801eb30:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 801eb3c:	0800fa75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, ip, sp, lr, pc}
 801eb40:	00000000 	andeq	r0, r0, r0
 801eb44:	01000004 	tsteq	r0, r4
 801eb48:	00000706 	andeq	r0, r0, r6, lsl #14
 801eb4c:	0800faf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, fp, ip, sp, lr, pc}
 801eb50:	00000000 	andeq	r0, r0, r0
 801eb54:	0800fb3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, fp, ip, sp, lr, pc}
 801eb58:	00000000 	andeq	r0, r0, r0
 801eb5c:	01000004 	tsteq	r0, r4
 801eb60:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 801eb6c:	0800fb8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, fp, ip, sp, lr, pc}
 801eb70:	00000000 	andeq	r0, r0, r0
 801eb74:	01000004 	tsteq	r0, r4
 801eb78:	0000070b 	andeq	r0, r0, fp, lsl #14
 801eb7c:	0800f9a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, fp, ip, sp, lr, pc}
	...
 801eb8c:	01000001 	tsteq	r0, r1
 801eb90:	0000070a 	andeq	r0, r0, sl, lsl #14
 801eb94:	0800fbb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, ip, sp, lr, pc}
 801eb98:	00000000 	andeq	r0, r0, r0
 801eb9c:	0800fbf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 801eba0:	00000000 	andeq	r0, r0, r0
 801eba4:	01000004 	tsteq	r0, r4
 801eba8:	0000070c 	andeq	r0, r0, ip, lsl #14
 801ebac:	0800fc31 	stmdaeq	r0, {r0, r4, r5, sl, fp, ip, sp, lr, pc}
 801ebb0:	00000000 	andeq	r0, r0, r0
 801ebb4:	0800fc5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, sl, fp, ip, sp, lr, pc}
 801ebb8:	00000000 	andeq	r0, r0, r0
 801ebbc:	01000000 	mrseq	r0, (UNDEF: 0)
 801ebc0:	0000070d 	andeq	r0, r0, sp, lsl #14
 801ebc4:	0800fc91 	stmdaeq	r0, {r0, r4, r7, sl, fp, ip, sp, lr, pc}
 801ebc8:	00000000 	andeq	r0, r0, r0
 801ebcc:	0800fcbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, ip, sp, lr, pc}
 801ebd0:	00000000 	andeq	r0, r0, r0
 801ebd4:	01000000 	mrseq	r0, (UNDEF: 0)

0801ebd8 <UID_ALL>:
 801ebd8:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 801ebdc:	 	svcvs	0x0043ffff

0801ebde <RDMNetConst::MSG_CONFIG>:
 801ebde:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801ebe2:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801ebe6:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801ebea:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801ebee:	 	andpl	r7, r0, r5, ror #8

0801ebf1 <RDMConst::MANUFACTURER_ID>:
 801ebf1:	 	strbtvc	r0, [r8], #-80	@ 0xffffffb0

0801ebf3 <RDMConst::MANUFACTURER_NAME>:
 801ebf3:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801ebf7:	772f2f3a 			@ <UNDEFINED> instruction: 0x772f2f3a
 801ebfb:	6f2e7777 	svcvs	0x002e7777
 801ebff:	676e6172 			@ <UNDEFINED> instruction: 0x676e6172
 801ec03:	2d697065 	stclcs	0, cr7, [r9, #-404]!	@ 0xfffffe6c
 801ec07:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801ec0b:	0067726f 	rsbeq	r7, r7, pc, ror #4

0801ec0f <DEVICE_LABEL>:
 801ec0f:	32334447 	eorscc	r4, r3, #1191182336	@ 0x47000000
 801ec13:	30373446 	eorscc	r3, r7, r6, asr #8
 801ec17:	56455f5a 			@ <UNDEFINED> instruction: 0x56455f5a
 801ec1b:	52204c41 	eorpl	r4, r0, #16640	@ 0x4100
 801ec1f:	44204d44 	strtmi	r4, [r0], #-3396	@ 0xfffff2bc
 801ec23:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801ec27:	 	andeq	r0, r0, #101	@ 0x65

0801ec29 <CSWTCH.81>:
 801ec29:	02020200 	andeq	r0, r2, #0, 4
 801ec2d:	04020202 	streq	r0, [r2], #-514	@ 0xfffffdfe
 801ec31:	 	andeq	r0, r0, r0, lsl #10

0801ec34 <CSWTCH.49>:
 801ec34:	00000000 	andeq	r0, r0, r0
 801ec38:	00000002 	andeq	r0, r0, r2
 801ec3c:	00000002 	andeq	r0, r0, r2
 801ec40:	00000002 	andeq	r0, r0, r2
 801ec44:	00000002 	andeq	r0, r0, r2
 801ec48:	00000002 	andeq	r0, r0, r2
 801ec4c:	00000002 	andeq	r0, r0, r2
 801ec50:	00000004 	andeq	r0, r0, r4
 801ec54:	00000000 	andeq	r0, r0, r0
 801ec58:	00000005 	andeq	r0, r0, r5

0801ec5c <vtable for WS28xxDmxMulti>:
	...
 801ec64:	080108fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, fp}
 801ec68:	08010a05 	stmdaeq	r1, {r0, r2, r9, fp}
 801ec6c:	08010951 	stmdaeq	r1, {r0, r4, r6, r8, fp}
 801ec70:	080109bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, fp}
 801ec74:	080116f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, ip}
 801ec78:	080116a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, sl, ip}
 801ec7c:	08010921 	stmdaeq	r1, {r0, r5, r8, fp}
 801ec80:	080108dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, fp}
 801ec84:	08010995 	stmdaeq	r1, {r0, r2, r4, r7, r8, fp}
 801ec88:	08010939 	stmdaeq	r1, {r0, r3, r4, r5, r8, fp}
 801ec8c:	08009b71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, fp, ip, pc}
 801ec90:	080108ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp}
 801ec94:	080108f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, fp}
 801ec98:	080108f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, fp}
 801ec9c:	080108e1 	stmdaeq	r1, {r0, r5, r6, r7, fp}

0801eca0 <pixel::MAPS>:
 801eca0:	00424752 	subeq	r4, r2, r2, asr r7
 801eca4:	00474252 	subeq	r4, r7, r2, asr r2
 801eca8:	00425247 	subeq	r5, r2, r7, asr #4
 801ecac:	00524247 	subseq	r4, r2, r7, asr #4
 801ecb0:	00475242 	subeq	r5, r7, r2, asr #4
 801ecb4:	00524742 	subseq	r4, r2, r2, asr #14

0801ecb8 <pixel::TYPES>:
 801ecb8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801ecbc:	00003130 	andeq	r3, r0, r0, lsr r1
 801ecc0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801ecc4:	00003131 	andeq	r3, r0, r1, lsr r1
 801ecc8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801eccc:	00003231 	andeq	r3, r0, r1, lsr r2
 801ecd0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801ecd4:	00423231 	subeq	r3, r2, r1, lsr r2
 801ecd8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801ecdc:	00003331 	andeq	r3, r0, r1, lsr r3
 801ece0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801ece4:	00003531 	andeq	r3, r0, r1, lsr r5
 801ece8:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801ecec:	00003231 	andeq	r3, r0, r1, lsr r2
 801ecf0:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801ecf4:	00573231 	subseq	r3, r7, r1, lsr r2
 801ecf8:	31534355 	cmpcc	r3, r5, asr r3
 801ecfc:	00333039 	eorseq	r3, r3, r9, lsr r0
 801ed00:	32534355 	subscc	r4, r3, #1409286145	@ 0x54000001
 801ed04:	00333039 	eorseq	r3, r3, r9, lsr r0
 801ed08:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 801ed0c:	00003231 	andeq	r3, r0, r1, lsr r2
 801ed10:	31415041 	cmpcc	r1, r1, asr #32
 801ed14:	00003230 	andeq	r3, r0, r0, lsr r2
 801ed18:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801ed1c:	00003232 	andeq	r3, r0, r2, lsr r2
 801ed20:	31383950 	teqcc	r8, r0, asr r9
 801ed24:	00000033 	andeq	r0, r0, r3, lsr r0

0801ed28 <s_patternName>:
 801ed28:	656e6f4e 	strbvs	r6, [lr, #-3918]!	@ 0xfffff0b2
	...
 801ed34:	61520000 	cmpvs	r2, r0
 801ed38:	6f626e69 	svcvs	0x00626e69
 801ed3c:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801ed40:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801ed44:	61656854 	cmnvs	r5, r4, asr r8
 801ed48:	20726574 	rsbscs	r6, r2, r4, ror r5
 801ed4c:	73616863 	cmnvc	r1, #6488064	@ 0x630000
 801ed50:	6f430065 	svcvs	0x00430065
 801ed54:	72756f6c 	rsbsvc	r6, r5, #108, 30	@ 0x1b0
 801ed58:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801ed5c:	00000065 	andeq	r0, r0, r5, rrx
 801ed60:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801ed64:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801ed68:	00000000 	andeq	r0, r0, r0
 801ed6c:	61460000 	mrsvs	r0, (UNDEF: 70)
 801ed70:	00006564 	andeq	r6, r0, r4, ror #10
	...

0801ed7c <CSWTCH.69>:
 801ed7c:	00000000 	andeq	r0, r0, r0
 801ed80:	00000002 	andeq	r0, r0, r2
 801ed84:	00000002 	andeq	r0, r0, r2
 801ed88:	00000002 	andeq	r0, r0, r2
 801ed8c:	00000002 	andeq	r0, r0, r2
 801ed90:	00000002 	andeq	r0, r0, r2
 801ed94:	00000002 	andeq	r0, r0, r2
 801ed98:	00000004 	andeq	r0, r0, r4
 801ed9c:	00000000 	andeq	r0, r0, r0
 801eda0:	00000005 	andeq	r0, r0, r5

0801eda4 <pixel::s_GPIO_PINs>:
 801eda4:	 	strbvs	r3, [lr, #-4032]	@ 0xfffff040

0801eda6 <NetworkConst::MSG_NETWORK_STARTED>:
 801eda6:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801edaa:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801edae:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801edb2:	00646574 	rsbeq	r6, r4, r4, ror r5

0801edb6 <NetworkConst::MSG_NETWORK_INIT>:
 801edb6:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801edba:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801edbe:	74696e69 	strbtvc	r6, [r9], #-3689	@ 0xfffff197
	...

0801edc4 <mdns::DOMAIN_DNSSD>:
 801edc4:	65735f09 	ldrbvs	r5, [r3, #-3849]!	@ 0xfffff0f7
 801edc8:	63697672 	cmnvs	r9, #119537664	@ 0x7200000
 801edcc:	5f077365 	svcpl	0x00077365
 801edd0:	2d736e64 	ldclcs	14, cr6, [r3, #-400]!	@ 0xfffffe70
 801edd4:	5f046473 	svcpl	0x00046473
 801edd8:	05706475 	ldrbeq	r6, [r0, #-1141]!	@ 0xfffffb8b
 801eddc:	61636f6c 	cmnvs	r3, ip, ror #30
 801ede0:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801eec4:	0000001e 	andeq	r0, r0, lr, lsl r0

0801eec8 <mdns::s_Services>:
 801eec8:	0801ef90 	stmdaeq	r1, {r4, r7, r8, r9, sl, fp, sp, lr, pc}
 801eecc:	00000008 	andeq	r0, r0, r8
 801eed0:	00000000 	andeq	r0, r0, r0
 801eed4:	00002905 	andeq	r2, r0, r5, lsl #18
 801eed8:	0801ef8a 	stmdaeq	r1, {r1, r3, r7, r8, r9, sl, fp, sp, lr, pc}
 801eedc:	00000006 	andeq	r0, r0, r6
 801eee0:	00000000 	andeq	r0, r0, r0
 801eee4:	00000045 	andeq	r0, r0, r5, asr #32
 801eee8:	0801ef84 	stmdaeq	r1, {r2, r7, r8, r9, sl, fp, sp, lr, pc}
 801eeec:	00000006 	andeq	r0, r0, r6
 801eef0:	00000001 	andeq	r0, r0, r1
 801eef4:	00000050 	andeq	r0, r0, r0, asr r0
 801eef8:	0801ef77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, sp, lr, pc}
 801eefc:	0000000d 	andeq	r0, r0, sp
 801ef00:	00000000 	andeq	r0, r0, r0
 801ef04:	000015c1 	andeq	r1, r0, r1, asr #11
 801ef08:	0801ef72 	stmdaeq	r1, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr, pc}
 801ef0c:	00000005 	andeq	r0, r0, r5
 801ef10:	00000000 	andeq	r0, r0, r0
 801ef14:	0000007b 	andeq	r0, r0, fp, ror r0
 801ef18:	0801ef66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr, pc}
 801ef1c:	0000000c 	andeq	r0, r0, ip
 801ef20:	00000000 	andeq	r0, r0, r0
 801ef24:	0000138c 	andeq	r1, r0, ip, lsl #7
 801ef28:	0801ef61 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, fp, sp, lr, pc}
 801ef2c:	00000005 	andeq	r0, r0, r5
	...
 801ef38:	0801ef5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, fp, sp, lr, pc}
 801ef3c:	00000005 	andeq	r0, r0, r5
 801ef40:	00000000 	andeq	r0, r0, r0
 801ef44:	00000fd0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 801ef48:	0801ef58 	stmdaeq	r1, {r3, r4, r6, r8, r9, sl, fp, sp, lr, pc}
 801ef4c:	00000004 	andeq	r0, r0, r4
 801ef50:	00000000 	andeq	r0, r0, r0
 801ef54:	000013d6 	ldrdeq	r1, [r0], -r6

0801ef58 <mdns::DOMAIN_PP>:
 801ef58:	70705f03 	rsbsvc	r5, r0, r3, lsl #30

0801ef5c <mdns::DOMAIN_DDP>:
 801ef5c:	64645f04 	strbtvs	r5, [r4], #-3844	@ 0xfffff0fc
 801ef60:	 	svcvs	0x005f0470

0801ef61 <mdns::DOMAIN_OSC>:
 801ef61:	736f5f04 	cmnvc	pc, #4, 30
 801ef65:	 	cmpvs	pc, r3, ror #22

0801ef66 <mdns::DOMAIN_MIDI>:
 801ef66:	70615f0b 	rsbvc	r5, r1, fp, lsl #30
 801ef6a:	2d656c70 	stclcs	12, cr6, [r5, #-448]!	@ 0xfffffe40
 801ef6e:	6964696d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^

0801ef72 <mdns::DOMAIN_NTP>:
 801ef72:	746e5f04 	strbtvc	r5, [lr], #-3844	@ 0xfffff0fc
 801ef76:	 	subsvc	r0, pc, #112, 24	@ 0x7000

0801ef77 <mdns::DOMAIN_RDMNET_LLRP>:
 801ef77:	64725f0c 	ldrbtvs	r5, [r2], #-3852	@ 0xfffff0f4
 801ef7b:	74656e6d 	strbtvc	r6, [r5], #-3693	@ 0xfffff193
 801ef7f:	726c6c2d 	rsbvc	r6, ip, #11520	@ 0x2d00
 801ef83:	 	ldmdavs	pc, {r4, r5, r6, r8, sl}^	@ <UNPREDICTABLE>

0801ef84 <mdns::DOMAIN_HTTP>:
 801ef84:	74685f05 	strbtvc	r5, [r8], #-3845	@ 0xfffff0fb
 801ef88:	 	svcpl	0x00057074

0801ef8a <mdns::DOMAIN_TFTP>:
 801ef8a:	66745f05 	ldrbtvs	r5, [r4], -r5, lsl #30
 801ef8e:	 	svcpl	0x00077074

0801ef90 <mdns::DOMAIN_CONFIG>:
 801ef90:	6f635f07 	svcvs	0x00635f07
 801ef94:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!

0801ef98 <mdns::DOMAIN_TCP>:
 801ef98:	63745f04 	cmnvs	r4, #4, 30
 801ef9c:	 	ldrbvc	r0, [pc, #-1136]	@ 801eb34 <RDMHandler::PID_DEFINITIONS+0x13c>

0801ef9d <mdns::DOMAIN_UDP>:
 801ef9d:	64755f04 	ldrbtvs	r5, [r5], #-3844	@ 0xfffff0fc
 801efa1:	 	svcvs	0x006c0570

0801efa2 <mdns::DOMAIN_LOCAL>:
 801efa2:	636f6c05 	cmnvs	pc, #1280	@ 0x500
 801efa6:	 	cdpvs	12, 0, cr6, cr0, cr1, {3}

0801efa9 <NetworkParamsConst::NTP_SERVER>:
 801efa9:	5f70746e 	svcpl	0x0070746e
 801efad:	76726573 			@ <UNDEFINED> instruction: 0x76726573
 801efb1:	 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}

0801efb4 <NetworkParamsConst::HOSTNAME>:
 801efb4:	74736f68 	ldrbtvc	r6, [r3], #-3944	@ 0xfffff098
 801efb8:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
	...

0801efbd <NetworkParamsConst::DEFAULT_GATEWAY>:
 801efbd:	61666564 	cmnvs	r6, r4, ror #10
 801efc1:	5f746c75 	svcpl	0x00746c75
 801efc5:	65746167 	ldrbvs	r6, [r4, #-359]!	@ 0xfffffe99
 801efc9:	00796177 	rsbseq	r6, r9, r7, ror r1

0801efcd <NetworkParamsConst::NET_MASK>:
 801efcd:	5f74656e 	svcpl	0x0074656e
 801efd1:	6b73616d 	blvs	9cf758d <__init_array_end+0x1cd7e89>
	...

0801efd6 <NetworkParamsConst::IP_ADDRESS>:
 801efd6:	615f7069 	cmpvs	pc, r9, rrx
 801efda:	65726464 	ldrbvs	r6, [r2, #-1124]!	@ 0xfffffb9c
 801efde:	 	strvs	r7, [r0], #-883	@ 0xfffffc8d

0801efe1 <NetworkParamsConst::DHCP_RETRY_TIME>:
 801efe1:	70636864 	rsbvc	r6, r3, r4, ror #16
 801efe5:	7465725f 	strbtvc	r7, [r5], #-607	@ 0xfffffda1
 801efe9:	745f7972 	ldrbvc	r7, [pc], #-2418	@ 801eff1 <NetworkParamsConst::USE_DHCP>
 801efed:	00656d69 	rsbeq	r6, r5, r9, ror #26

0801eff1 <NetworkParamsConst::USE_DHCP>:
 801eff1:	5f657375 	svcpl	0x00657375
 801eff5:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

0801effa <NetworkParamsConst::FILE_NAME>:
 801effa:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801effe:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801f002:	00747874 	rsbseq	r7, r4, r4, ror r8
	...

0801f008 <pArray>:
 801f008:	0801f086 	stmdaeq	r1, {r1, r2, r7, ip, sp, lr, pc}
 801f00c:	0801f07b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, ip, sp, lr, pc}
 801f010:	0801efd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 801f014:	0801f073 	stmdaeq	r1, {r0, r1, r4, r5, r6, ip, sp, lr, pc}
 801f018:	0801b940 	stmdaeq	r1, {r6, r8, fp, ip, sp, pc}
 801f01c:	0801f066 	stmdaeq	r1, {r1, r2, r5, r6, ip, sp, lr, pc}
 801f020:	0801b940 	stmdaeq	r1, {r6, r8, fp, ip, sp, pc}
 801f024:	0801efb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 801f028:	0801f384 	stmdaeq	r1, {r2, r7, r8, r9, ip, sp, lr, pc}
 801f02c:	0801f394 	stmdaeq	r1, {r2, r4, r7, r8, r9, ip, sp, lr, pc}
 801f030:	0801f3a4 	stmdaeq	r1, {r2, r5, r7, r8, r9, ip, sp, lr, pc}
 801f034:	0801f3b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, ip, sp, lr, pc}
 801f038:	0801efcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 801f03c:	0801f2a0 	stmdaeq	r1, {r5, r7, r9, ip, sp, lr, pc}
 801f040:	0801e95f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr, pc}
 801f044:	0801e977 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr, pc}
 801f048:	0801e98f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, fp, sp, lr, pc}
 801f04c:	0801e9a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, fp, sp, lr, pc}
 801f050:	0801efbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 801f054:	0801f058 	stmdaeq	r1, {r3, r4, r6, ip, sp, lr, pc}

0801f058 <DisplayUdfParamsConst::DMX_DIRECTION>:
 801f058:	5f786d64 	svcpl	0x00786d64
 801f05c:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801f060:	6f697463 	svcvs	0x00697463
 801f064:	 	cmnvs	r1, #110	@ 0x6e

0801f066 <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801f066:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801f06a:	705f6576 	subsvc	r6, pc, r6, ror r5	@ <UNPREDICTABLE>
 801f06e:	7374726f 	cmnvc	r4, #-268435450	@ 0xf0000006
	...

0801f073 <DisplayUdfParamsConst::VERSION>:
 801f073:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801f077:	006e6f69 	rsbeq	r6, lr, r9, ror #30

0801f07b <DisplayUdfParamsConst::BOARD_NAME>:
 801f07b:	72616f62 	rsbvc	r6, r1, #392	@ 0x188
 801f07f:	616e5f64 	cmnvs	lr, r4, ror #30
 801f083:	 	strvc	r6, [r0], #-1389	@ 0xfffffa93

0801f086 <DisplayUdfParamsConst::TITLE>:
 801f086:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 801f08a:	 	stclvs	0, cr0, [r6], #-404	@ 0xfffffe6c

0801f08c <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 801f08c:	70696c66 	rsbvc	r6, r9, r6, ror #24
 801f090:	7265765f 	rsbvc	r7, r5, #99614720	@ 0x5f00000
 801f094:	61636974 	smcvs	13972	@ 0x3694
 801f098:	00796c6c 	rsbseq	r6, r9, ip, ror #24

0801f09c <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 801f09c:	65656c73 	strbvs	r6, [r5, #-3187]!	@ 0xfffff38d
 801f0a0:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801f0a4:	756f656d 	strbvc	r6, [pc, #-1389]!	@ 801eb3f <RDMHandler::PID_DEFINITIONS+0x147>
 801f0a8:	 	mcrvs	0, 3, r0, cr9, cr4, {3}

0801f0aa <DisplayUdfParamsConst::INTENSITY>:
 801f0aa:	65746e69 	ldrbvs	r6, [r4, #-3689]!	@ 0xfffff197
 801f0ae:	7469736e 	strbtvc	r7, [r9], #-878	@ 0xfffffc92
 801f0b2:	 	stmdbvs	r4!, {r0, r3, r4, r5, r6}^

0801f0b4 <DisplayUdfParamsConst::FILE_NAME>:
 801f0b4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801f0b8:	2e79616c 	rpwcsez	f6, f1, #4.0
 801f0bc:	00747874 	rsbseq	r7, r4, r4, ror r8

0801f0c0 <s_aStorSize>:
 801f0c0:	00000060 	andeq	r0, r0, r0, rrx
 801f0c4:	00000020 	andeq	r0, r0, r0, lsr #32
 801f0c8:	00000040 	andeq	r0, r0, r0, asr #32
 801f0cc:	00000040 	andeq	r0, r0, r0, asr #32
 801f0d0:	00000020 	andeq	r0, r0, r0, lsr #32
 801f0d4:	00000020 	andeq	r0, r0, r0, lsr #32
 801f0d8:	000001e0 	andeq	r0, r0, r0, ror #3
 801f0dc:	00000040 	andeq	r0, r0, r0, asr #32
 801f0e0:	00000020 	andeq	r0, r0, r0, lsr #32
 801f0e4:	00000060 	andeq	r0, r0, r0, rrx
 801f0e8:	00000030 	andeq	r0, r0, r0, lsr r0
 801f0ec:	00000020 	andeq	r0, r0, r0, lsr #32
 801f0f0:	000003b0 			@ <UNDEFINED> instruction: 0x000003b0
 801f0f4:	00000030 	andeq	r0, r0, r0, lsr r0
 801f0f8:	00000040 	andeq	r0, r0, r0, asr #32
 801f0fc:	00000020 	andeq	r0, r0, r0, lsr #32
 801f100:	00000060 	andeq	r0, r0, r0, rrx
 801f104:	00000020 	andeq	r0, r0, r0, lsr #32
 801f108:	00000400 	andeq	r0, r0, r0, lsl #8
 801f10c:	00000020 	andeq	r0, r0, r0, lsr #32
 801f110:	00000020 	andeq	r0, r0, r0, lsr #32
 801f114:	00000040 	andeq	r0, r0, r0, asr #32
 801f118:	00000060 	andeq	r0, r0, r0, rrx
 801f11c:	00000020 	andeq	r0, r0, r0, lsr #32
 801f120:	00000020 	andeq	r0, r0, r0, lsr #32
 801f124:	00000140 	andeq	r0, r0, r0, asr #2
 801f128:	00000020 	andeq	r0, r0, r0, lsr #32

0801f12c <s_aSignature>:
 801f12c:	01567641 	cmpeq	r6, r1, asr #12

0801f130 <hal::utc_validate(signed char, unsigned char, long&)::s_ValidOffsets>:
 801f130:	1efd1ef7 	mrcne	14, 7, r1, cr13, cr7, {7}
 801f134:	1e041e03 	cdpne	14, 0, cr1, cr4, cr3, {0}
 801f138:	2d051e05 	stccs	14, cr1, [r5, #-20]	@ 0xffffffec
 801f13c:	2d081e06 	stccs	14, cr1, [r8, #-24]	@ 0xffffffe8
 801f140:	1e0a1e09 	cdpne	14, 0, cr1, cr10, cr9, {0}
 801f144:	 	ldrbtvc	r2, [r5], #-3340	@ 0xfffff2f4

0801f146 <EnvParamsConst::UTC_OFFSET>:
 801f146:	5f637475 	svcpl	0x00637475
 801f14a:	7366666f 	cmnvc	r6, #116391936	@ 0x6f00000
 801f14e:	 	strvs	r7, [r0, #-1125]	@ 0xfffffb9b

0801f151 <EnvParamsConst::FILE_NAME>:
 801f151:	2e766e65 	cdpcs	14, 7, cr6, cr6, cr5, {3}
 801f155:	00747874 	rsbseq	r7, r4, r4, ror r8

0801f159 <DevicesParamsConst::TEST_PATTERN>:
 801f159:	74736574 	ldrbtvc	r6, [r3], #-1396	@ 0xfffffa8c
 801f15d:	7461705f 	strbtvc	r7, [r1], #-95	@ 0xffffffa1
 801f161:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0801f166 <DevicesParamsConst::ACTIVE_OUT>:
 801f166:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801f16a:	6f5f6576 	svcvs	0x005f6576
 801f16e:	 	smlsdxvs	r0, r5, r4, r7

0801f171 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801f171:	626f6c67 	rsbvs	r6, pc, #26368	@ 0x6700
 801f175:	625f6c61 	subsvs	r6, pc, #24832	@ 0x6100
 801f179:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801f17d:	73656e74 	cmnvc	r5, #116, 28	@ 0x740
 801f181:	 	stclvs	0, cr0, [r3], #-460	@ 0xfffffe34

0801f183 <DevicesParamsConst::SPI_SPEED_HZ>:
 801f183:	636f6c63 	cmnvs	pc, #25344	@ 0x6300
 801f187:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801f18b:	5f646565 	svcpl	0x00646565
 801f18f:	 			@ <UNDEFINED> instruction: 0x6c007a68

0801f192 <DevicesParamsConst::GROUPING_COUNT>:
 801f192:	5f64656c 	svcpl	0x0064656c
 801f196:	756f7267 	strbvc	r7, [pc, #-615]!	@ 801ef37 <mdns::s_Services+0x6f>
 801f19a:	6f635f70 	svcvs	0x00635f70
 801f19e:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801f1a2 <DevicesParamsConst::COUNT>:
 801f1a2:	5f64656c 	svcpl	0x0064656c
 801f1a6:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801f1aa:	 	strbvs	r0, [ip, #-116]!	@ 0xffffff8c

0801f1ac <DevicesParamsConst::LED_T1H>:
 801f1ac:	5f64656c 	svcpl	0x0064656c
 801f1b0:	00683174 	rsbeq	r3, r8, r4, ror r1

0801f1b4 <DevicesParamsConst::LED_T0H>:
 801f1b4:	5f64656c 	svcpl	0x0064656c
 801f1b8:	00683074 	rsbeq	r3, r8, r4, ror r0

0801f1bc <DevicesParamsConst::MAP>:
 801f1bc:	5f64656c 	svcpl	0x0064656c
 801f1c0:	5f626772 	svcpl	0x00626772
 801f1c4:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801f1c8:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801f1cc <DevicesParamsConst::TYPE>:
 801f1cc:	5f64656c 	svcpl	0x0064656c
 801f1d0:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
	...

0801f1d5 <DevicesParamsConst::FILE_NAME>:
 801f1d5:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801f1d9:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801f1dd:	00747874 	rsbseq	r7, r4, r4, ror r8

0801f1e1 <LightSetParamsConst::START_UNI_PORT>:
 801f1e1:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f1e5:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f1e9:	6f705f69 	svcvs	0x00705f69
 801f1ed:	315f7472 	cmpcc	pc, r2, ror r4	@ <UNPREDICTABLE>
 801f1f1:	00000000 	andeq	r0, r0, r0
 801f1f5:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f1f9:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f1fd:	6f705f69 	svcvs	0x00705f69
 801f201:	325f7472 	subscc	r7, pc, #1912602624	@ 0x72000000
 801f205:	00000000 	andeq	r0, r0, r0
 801f209:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f20d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f211:	6f705f69 	svcvs	0x00705f69
 801f215:	335f7472 	cmpcc	pc, #1912602624	@ 0x72000000
 801f219:	00000000 	andeq	r0, r0, r0
 801f21d:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f221:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f225:	6f705f69 	svcvs	0x00705f69
 801f229:	345f7472 	ldrbcc	r7, [pc], #-1138	@ 801f231 <LightSetParamsConst::START_UNI_PORT+0x50>
 801f22d:	00000000 	andeq	r0, r0, r0
 801f231:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f235:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f239:	6f705f69 	svcvs	0x00705f69
 801f23d:	355f7472 	ldrbcc	r7, [pc, #-1138]	@ 801edd3 <mdns::DOMAIN_DNSSD+0xf>
 801f241:	00000000 	andeq	r0, r0, r0
 801f245:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f249:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f24d:	6f705f69 	svcvs	0x00705f69
 801f251:	365f7472 			@ <UNDEFINED> instruction: 0x365f7472
 801f255:	00000000 	andeq	r0, r0, r0
 801f259:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f25d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f261:	6f705f69 	svcvs	0x00705f69
 801f265:	375f7472 			@ <UNDEFINED> instruction: 0x375f7472
 801f269:	00000000 	andeq	r0, r0, r0
 801f26d:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f271:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801f275:	6f705f69 	svcvs	0x00705f69
 801f279:	385f7472 	ldmdacc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	@ <UNPREDICTABLE>
 801f27d:	00000000 	andeq	r0, r0, r0

0801f281 <LightSetParamsConst::FAILSAFE>:
 801f281:	6c696166 	stfvse	f6, [r9], #-408	@ 0xfffffe68
 801f285:	65666173 	strbvs	r6, [r6, #-371]!	@ 0xfffffe8d
	...

0801f28a <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 801f28a:	61736964 	cmnvs	r3, r4, ror #18
 801f28e:	5f656c62 	svcpl	0x00656c62
 801f292:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801f296:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 801f29a:	756f656d 	strbvc	r6, [pc, #-1389]!	@ 801ed35 <s_patternName+0xd>
 801f29e:	 	stclvs	0, cr0, [r4, #-464]!	@ 0xfffffe30

0801f2a0 <LightSetParamsConst::DMX_START_ADDRESS>:
 801f2a0:	5f786d64 	svcpl	0x00786d64
 801f2a4:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801f2a8:	64615f74 	strbtvs	r5, [r1], #-3956	@ 0xfffff08c
 801f2ac:	73657264 	cmnvc	r5, #100, 4	@ 0x40000006
 801f2b0:	 	svcvs	0x006c0073

0801f2b2 <LightSetParamsConst::NODE_LONG_NAME>:
 801f2b2:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 801f2b6:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	@ 0xfffffe84
 801f2ba:	 	cmnvs	ip, r5, rrx

0801f2bc <LightSetParamsConst::NODE_LABEL>:
 801f2bc:	6562616c 	strbvs	r6, [r2, #-364]!	@ 0xfffffe94
 801f2c0:	6f705f6c 	svcvs	0x00705f6c
 801f2c4:	615f7472 	cmpvs	pc, r2, ror r4	@ <UNPREDICTABLE>
 801f2c8:	616c0000 	cmnvs	ip, r0
 801f2cc:	5f6c6562 	svcpl	0x006c6562
 801f2d0:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f2d4:	0000625f 	andeq	r6, r0, pc, asr r2
 801f2d8:	6562616c 	strbvs	r6, [r2, #-364]!	@ 0xfffffe94
 801f2dc:	6f705f6c 	svcvs	0x00705f6c
 801f2e0:	635f7472 	cmpvs	pc, #1912602624	@ 0x72000000
 801f2e4:	616c0000 	cmnvs	ip, r0
 801f2e8:	5f6c6562 	svcpl	0x006c6562
 801f2ec:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f2f0:	0000645f 	andeq	r6, r0, pc, asr r4

0801f2f4 <LightSetParamsConst::DIRECTION>:
 801f2f4:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801f2f8:	6f697463 	svcvs	0x00697463
 801f2fc:	6f705f6e 	svcvs	0x00705f6e
 801f300:	615f7472 	cmpvs	pc, r2, ror r4	@ <UNPREDICTABLE>
 801f304:	69640000 	stmdbvs	r4!, {}^	@ <UNPREDICTABLE>
 801f308:	74636572 	strbtvc	r6, [r3], #-1394	@ 0xfffffa8e
 801f30c:	5f6e6f69 	svcpl	0x006e6f69
 801f310:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f314:	0000625f 	andeq	r6, r0, pc, asr r2
 801f318:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801f31c:	6f697463 	svcvs	0x00697463
 801f320:	6f705f6e 	svcvs	0x00705f6e
 801f324:	635f7472 	cmpvs	pc, #1912602624	@ 0x72000000
 801f328:	69640000 	stmdbvs	r4!, {}^	@ <UNPREDICTABLE>
 801f32c:	74636572 	strbtvc	r6, [r3], #-1394	@ 0xfffffa8e
 801f330:	5f6e6f69 	svcpl	0x006e6f69
 801f334:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801f338:	0000645f 	andeq	r6, r0, pc, asr r4

0801f33c <LightSetParamsConst::MERGE_MODE_PORT>:
 801f33c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801f340:	6f6d5f65 	svcvs	0x006d5f65
 801f344:	705f6564 	subsvc	r6, pc, r4, ror #10
 801f348:	5f74726f 	svcpl	0x0074726f
 801f34c:	656d0061 	strbvs	r0, [sp, #-97]!	@ 0xffffff9f
 801f350:	5f656772 	svcpl	0x00656772
 801f354:	65646f6d 	strbvs	r6, [r4, #-3949]!	@ 0xfffff093
 801f358:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f35c:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801f360:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801f364:	6f6d5f65 	svcvs	0x006d5f65
 801f368:	705f6564 	subsvc	r6, pc, r4, ror #10
 801f36c:	5f74726f 	svcpl	0x0074726f
 801f370:	656d0063 	strbvs	r0, [sp, #-99]!	@ 0xffffff9d
 801f374:	5f656772 	svcpl	0x00656772
 801f378:	65646f6d 	strbvs	r6, [r4, #-3949]!	@ 0xfffff093
 801f37c:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f380:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801f384 <LightSetParamsConst::UNIVERSE_PORT>:
 801f384:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f388:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f38c:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f390:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801f394:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f398:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f39c:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f3a0:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801f3a4:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f3a8:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f3ac:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f3b0:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801f3b4:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 801f3b8:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 801f3bc:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 801f3c0:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801f3c4 <vtable for Ssd1306>:
	...
 801f3cc:	08017b9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, fp, ip, sp, lr}
 801f3d0:	08017bc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, fp, ip, sp, lr}
 801f3d4:	08017f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, sp, lr}
 801f3d8:	08017e95 	stmdaeq	r1, {r0, r2, r4, r7, r9, sl, fp, ip, sp, lr}
 801f3dc:	08017d69 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, fp, ip, sp, lr}
 801f3e0:	08017bed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 801f3e4:	08017c19 	stmdaeq	r1, {r0, r3, r4, sl, fp, ip, sp, lr}
 801f3e8:	08017d41 	stmdaeq	r1, {r0, r6, r8, sl, fp, ip, sp, lr}
 801f3ec:	08017cf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 801f3f0:	08017b9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, fp, ip, sp, lr}
 801f3f4:	08017da5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, fp, ip, sp, lr}
 801f3f8:	08017db1 	stmdaeq	r1, {r0, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 801f3fc:	08017dc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl, fp, ip, sp, lr}
 801f400:	08017ba1 	stmdaeq	r1, {r0, r5, r7, r8, r9, fp, ip, sp, lr}

0801f404 <oled_128x32_init>:
 801f404:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801f408:	4000d31f 	andmi	sp, r0, pc, lsl r3
 801f40c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801f410:	02dac8a1 	sbcseq	ip, sl, #10551296	@ 0xa10000
 801f414:	f1d97f81 			@ <UNDEFINED> instruction: 0xf1d97f81
 801f418:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801f41c <oled_128x64_init>:
 801f41c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801f420:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801f424:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801f428:	12dac8a1 	sbcsne	ip, sl, #10551296	@ 0xa10000
 801f42c:	f1d97f81 			@ <UNDEFINED> instruction: 0xf1d97f81
 801f430:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801f434 <_OledFont8x6>:
 801f434:	00000040 	andeq	r0, r0, r0, asr #32
 801f438:	40000000 	andmi	r0, r0, r0
 801f43c:	005f0000 	subseq	r0, pc, r0
 801f440:	00400000 	subeq	r0, r0, r0
 801f444:	00070007 	andeq	r0, r7, r7
 801f448:	7f144000 	svcvc	0x00144000
 801f44c:	00147f14 	andseq	r7, r4, r4, lsl pc
 801f450:	7f2a2440 	svcvc	0x002a2440
 801f454:	4000122a 	andmi	r1, r0, sl, lsr #4
 801f458:	64081323 	strvs	r1, [r8], #-803	@ 0xfffffcdd
 801f45c:	36400062 	strbcc	r0, [r0], -r2, rrx
 801f460:	50205649 	eorpl	r5, r0, r9, asr #12
 801f464:	08004000 	stmdaeq	r0, {lr}
 801f468:	00000307 	andeq	r0, r0, r7, lsl #6
 801f46c:	221c0040 	andscs	r0, ip, #64	@ 0x40
 801f470:	40000041 	andmi	r0, r0, r1, asr #32
 801f474:	1c224100 	stfnes	f4, [r2], #-0
 801f478:	2a400000 	bcs	901f480 <__init_array_end+0xfffd7c>
 801f47c:	2a1c7f1c 	bcs	873f0f4 <__init_array_end+0x71f9f0>
 801f480:	08084000 	stmdaeq	r8, {lr}
 801f484:	0008083e 	andeq	r0, r8, lr, lsr r8
 801f488:	70800040 	addvc	r0, r0, r0, asr #32
 801f48c:	40000030 	andmi	r0, r0, r0, lsr r0
 801f490:	08080808 	stmdaeq	r8, {r3, fp}
 801f494:	00400008 	subeq	r0, r0, r8
 801f498:	00606000 	rsbeq	r6, r0, r0
 801f49c:	10204000 	eorne	r4, r0, r0
 801f4a0:	00020408 	andeq	r0, r2, r8, lsl #8
 801f4a4:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801f4a8:	40003e45 	andmi	r3, r0, r5, asr #28
 801f4ac:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 801f4b0:	72400000 	subvc	r0, r0, #0
 801f4b4:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801f4b8:	41214000 			@ <UNDEFINED> instruction: 0x41214000
 801f4bc:	00334d49 	eorseq	r4, r3, r9, asr #26
 801f4c0:	12141840 	andsne	r1, r4, #64, 16	@ 0x400000
 801f4c4:	4000107f 	andmi	r1, r0, pc, ror r0
 801f4c8:	45454527 	strbmi	r4, [r5, #-1319]	@ 0xfffffad9
 801f4cc:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 801f4d0:	3149494a 	cmpcc	r9, sl, asr #18
 801f4d4:	21414000 	mrscs	r4, (UNDEF: 65)
 801f4d8:	00070911 	andeq	r0, r7, r1, lsl r9
 801f4dc:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 801f4e0:	40003649 	andmi	r3, r0, r9, asr #12
 801f4e4:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801f4e8:	0040001e 	subeq	r0, r0, lr, lsl r0
 801f4ec:	00001400 	andeq	r1, r0, r0, lsl #8
 801f4f0:	40004000 	andmi	r4, r0, r0
 801f4f4:	00000034 	andeq	r0, r0, r4, lsr r0
 801f4f8:	14080040 	strne	r0, [r8], #-64	@ 0xffffffc0
 801f4fc:	40004122 	andmi	r4, r0, r2, lsr #2
 801f500:	14141414 	ldrne	r1, [r4], #-1044	@ 0xfffffbec
 801f504:	00400014 	subeq	r0, r0, r4, lsl r0
 801f508:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801f50c:	01024000 	mrseq	r4, (UNDEF: 2)
 801f510:	00060959 	andeq	r0, r6, r9, asr r9
 801f514:	5d413e40 	stclpl	14, cr3, [r1, #-256]	@ 0xffffff00
 801f518:	40004e59 	andmi	r4, r0, r9, asr lr
 801f51c:	1211127c 	andsne	r1, r1, #124, 4	@ 0xc0000007
 801f520:	7f40007c 	svcvc	0x0040007c
 801f524:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801f528:	413e4000 	teqmi	lr, r0
 801f52c:	00224141 	eoreq	r4, r2, r1, asr #2
 801f530:	41417f40 	cmpmi	r1, r0, asr #30
 801f534:	40003e41 	andmi	r3, r0, r1, asr #28
 801f538:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 801f53c:	7f400041 	svcvc	0x00400041
 801f540:	01090909 	tsteq	r9, r9, lsl #18
 801f544:	413e4000 	teqmi	lr, r0
 801f548:	00735141 	rsbseq	r5, r3, r1, asr #2
 801f54c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 801f550:	40007f08 	andmi	r7, r0, r8, lsl #30
 801f554:	417f4100 	cmnmi	pc, r0, lsl #2
 801f558:	20400000 	subcs	r0, r0, r0
 801f55c:	013f4140 	teqeq	pc, r0, asr #2
 801f560:	087f4000 	ldmdaeq	pc!, {lr}^	@ <UNPREDICTABLE>
 801f564:	00412214 	subeq	r2, r1, r4, lsl r2
 801f568:	40407f40 	submi	r7, r0, r0, asr #30
 801f56c:	40004040 	andmi	r4, r0, r0, asr #32
 801f570:	021c027f 	andseq	r0, ip, #-268435449	@ 0xf0000007
 801f574:	7f40007f 	svcvc	0x0040007f
 801f578:	7f100804 	svcvc	0x00100804
 801f57c:	413e4000 	teqmi	lr, r0
 801f580:	003e4141 	eorseq	r4, lr, r1, asr #2
 801f584:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801f588:	40000609 	andmi	r0, r0, r9, lsl #12
 801f58c:	2151413e 	cmpcs	r1, lr, lsr r1
 801f590:	7f40005e 	svcvc	0x0040005e
 801f594:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801f598:	49264000 	stmdbmi	r6!, {lr}
 801f59c:	00324949 	eorseq	r4, r2, r9, asr #18
 801f5a0:	7f010340 	svcvc	0x00010340
 801f5a4:	40000301 	andmi	r0, r0, r1, lsl #6
 801f5a8:	4040403f 	submi	r4, r0, pc, lsr r0
 801f5ac:	1f40003f 	svcne	0x0040003f
 801f5b0:	1f204020 	svcne	0x00204020
 801f5b4:	403f4000 	eorsmi	r4, pc, r0
 801f5b8:	003f4038 	eorseq	r4, pc, r8, lsr r0	@ <UNPREDICTABLE>
 801f5bc:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 801f5c0:	40006314 	andmi	r6, r0, r4, lsl r3
 801f5c4:	04780403 	ldrbteq	r0, [r8], #-1027	@ 0xfffffbfd
 801f5c8:	61400003 	cmpvs	r0, r3
 801f5cc:	434d4959 	movtmi	r4, #55641	@ 0xd959
 801f5d0:	7f004000 	svcvc	0x00004000
 801f5d4:	00414141 	subeq	r4, r1, r1, asr #2
 801f5d8:	08040240 	stmdaeq	r4, {r6, r9}
 801f5dc:	40002010 	andmi	r2, r0, r0, lsl r0
 801f5e0:	41414100 	mrsmi	r4, (UNDEF: 81)
 801f5e4:	0440007f 	strbeq	r0, [r0], #-127	@ 0xffffff81
 801f5e8:	04020102 	streq	r0, [r2], #-258	@ 0xfffffefe
 801f5ec:	40404000 	submi	r4, r0, r0
 801f5f0:	00404040 	subeq	r4, r0, r0, asr #32
 801f5f4:	07030040 	streq	r0, [r3, -r0, asr #32]
 801f5f8:	40000008 	andmi	r0, r0, r8
 801f5fc:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 801f600:	7f400040 	svcvc	0x00400040
 801f604:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 801f608:	44384000 	ldrtmi	r4, [r8], #-0
 801f60c:	00284444 	eoreq	r4, r8, r4, asr #8
 801f610:	44443840 	strbmi	r3, [r4], #-2112	@ 0xfffff7c0
 801f614:	40007f28 	andmi	r7, r0, r8, lsr #30
 801f618:	54545438 	ldrbpl	r5, [r4], #-1080	@ 0xfffffbc8
 801f61c:	00400018 	subeq	r0, r0, r8, lsl r0
 801f620:	02097e08 	andeq	r7, r9, #8, 28	@ 0x80
 801f624:	a4184000 	ldrge	r4, [r8], #-0
 801f628:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801f62c:	04087f40 	streq	r7, [r8], #-3904	@ 0xfffff0c0
 801f630:	40007804 	andmi	r7, r0, r4, lsl #16
 801f634:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801f638:	20400000 	subcs	r0, r0, r0
 801f63c:	003d4040 	eorseq	r4, sp, r0, asr #32
 801f640:	107f4000 	rsbsne	r4, pc, r0
 801f644:	00004428 	andeq	r4, r0, r8, lsr #8
 801f648:	7f410040 	svcvc	0x00410040
 801f64c:	40000040 	andmi	r0, r0, r0, asr #32
 801f650:	0478047c 	ldrbteq	r0, [r8], #-1148	@ 0xfffffb84
 801f654:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801f658:	78040408 	stmdavc	r4, {r3, sl}
 801f65c:	44384000 	ldrtmi	r4, [r8], #-0
 801f660:	00384444 	eorseq	r4, r8, r4, asr #8
 801f664:	2418fc40 	ldrcs	pc, [r8], #-3136	@ 0xfffff3c0
 801f668:	40001824 	andmi	r1, r0, r4, lsr #16
 801f66c:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 801f670:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801f674:	08040408 	stmdaeq	r4, {r3, sl}
 801f678:	54484000 	strbpl	r4, [r8], #-0
 801f67c:	00245454 	eoreq	r5, r4, r4, asr r4
 801f680:	3f040440 	svccc	0x00040440
 801f684:	40002444 	andmi	r2, r0, r4, asr #8
 801f688:	2040403c 	subcs	r4, r0, ip, lsr r0
 801f68c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 801f690:	1c204020 	stcne	0, cr4, [r0], #-128	@ 0xffffff80
 801f694:	403c4000 	eorsmi	r4, ip, r0
 801f698:	003c4030 	eorseq	r4, ip, r0, lsr r0
 801f69c:	10284440 	eorne	r4, r8, r0, asr #8
 801f6a0:	40004428 	andmi	r4, r0, r8, lsr #8
 801f6a4:	9090904c 	addsls	r9, r0, ip, asr #32
 801f6a8:	4440007c 	strbmi	r0, [r0], #-124	@ 0xffffff84
 801f6ac:	444c5464 	strbmi	r5, [ip], #-1124	@ 0xfffffb9c
 801f6b0:	08004000 	stmdaeq	r0, {lr}
 801f6b4:	00004136 	andeq	r4, r0, r6, lsr r1
 801f6b8:	77000040 	strvc	r0, [r0, -r0, asr #32]
 801f6bc:	40000000 	andmi	r0, r0, r0
 801f6c0:	08364100 	ldmdaeq	r6!, {r8, lr}
 801f6c4:	02400000 	subeq	r0, r0, #0
 801f6c8:	02040201 	andeq	r0, r4, #268435456	@ 0x10000000
 801f6cc:	263c4000 	ldrtcs	r4, [ip], -r0
 801f6d0:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801f6d4 <days_of_month>:
 801f6d4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 801f6dc:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f6e0:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f6e4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f6e8:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f6ec:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f6f0:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f6f4:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f6f8:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f6fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f700:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .tcmsram:

10008000 <net::s_dhcp_message>:
	...

10008224 <net::s_id>:
10008224:	00000000 	andeq	r0, r0, r0

10008228 <net::s_groups>:
	...

10008348 <net::s_multicast_mac>:
	...

10008350 <net::s_leave>:
	...

10008380 <net::s_report>:
	...

100083b0 <net::s_tcp>:
	...

1000899c <net::s_id>:
1000899c:	00000000 	andeq	r0, r0, r0

100089a0 <net::s_Port>:
	...

100096a8 <net::s_multicast_mac>:
	...

100096b0 <net::s_id>:
100096b0:	00000000 	andeq	r0, r0, r0

100096b4 <net::s_send_packet>:
	...

10009ca0 <net::s_data>:
	...

1000cb00 <net::s_Port>:
	...

1000cb10 <net::s_ArpRecords>:
	...

Disassembly of section .data:

20000000 <artnetnode::configstore::DMXPORT_OFFSET>:
20000000:	00000020 	andeq	r0, r0, r0, lsr #32

20000004 <SystemCoreClock>:
20000004:	0e4e1c00 	cdpeq	12, 4, cr1, cr14, cr0, {0}

20000008 <lfsr>:
20000008:	0000ace1 	andeq	sl, r0, r1, ror #25

2000000c <s_block_bucket>:
2000000c:	00000010 	andeq	r0, r0, r0, lsl r0
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000020 	andeq	r0, r0, r0, lsr #32
20000018:	00000000 	andeq	r0, r0, r0
2000001c:	00000040 	andeq	r0, r0, r0, asr #32
20000020:	00000000 	andeq	r0, r0, r0
20000024:	00000060 	andeq	r0, r0, r0, rrx
20000028:	00000000 	andeq	r0, r0, r0
2000002c:	00000080 	andeq	r0, r0, r0, lsl #1
20000030:	00000000 	andeq	r0, r0, r0
20000034:	00000100 	andeq	r0, r0, r0, lsl #2
20000038:	00000000 	andeq	r0, r0, r0
2000003c:	00000140 	andeq	r0, r0, r0, asr #2
20000040:	00000000 	andeq	r0, r0, r0
20000044:	00000180 	andeq	r0, r0, r0, lsl #3
20000048:	00000000 	andeq	r0, r0, r0
2000004c:	00000200 	andeq	r0, r0, r0, lsl #4
20000050:	00000000 	andeq	r0, r0, r0
20000054:	00000300 	andeq	r0, r0, r0, lsl #6
20000058:	00000000 	andeq	r0, r0, r0
2000005c:	00000400 	andeq	r0, r0, r0, lsl #8
20000060:	00000000 	andeq	r0, r0, r0
20000064:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20000074 <next_block>:
20000074:	1000cc90 	mulne	r0, r0, ip

Disassembly of section .sram2:

20020000 <pixel::s_DmaBuffer>:
	...

Disassembly of section .bkpsram:

40024000 <ConfigStore::s_SpiFlashData>:
	...
