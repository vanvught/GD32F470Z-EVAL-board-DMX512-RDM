
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08008000 <__gVectors>:
 8008000:	10008000 	andne	r8, r0, r0
 8008004:	0800938d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip, pc}
 8008008:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800800c:	080093e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, r9, ip, pc}
 8008010:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008014:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008018:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
	...
 800802c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008030:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008034:	00000000 	andeq	r0, r0, r0
 8008038:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800803c:	0801b645 	stmdaeq	r1, {r0, r2, r6, r9, sl, ip, sp, pc}
 8008040:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008044:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008048:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800804c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008050:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008054:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008058:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800805c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008060:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008064:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008068:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800806c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008070:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008074:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008078:	080109a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp}
 800807c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008080:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008084:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008088:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800808c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008090:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008094:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008098:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800809c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080a8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080ac:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080b0:	0801075d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sl}
 80080b4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080b8:	08013715 	stmdaeq	r1, {r0, r2, r4, r8, r9, sl, ip, sp}
 80080bc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080c8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080cc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080d8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080dc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080e8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080ec:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080f8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80080fc:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008100:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008104:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008108:	08010861 	stmdaeq	r1, {r0, r5, r6, fp}
 800810c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008110:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008114:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008118:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800811c:	08010985 	stmdaeq	r1, {r0, r2, r7, r8, fp}
 8008120:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008124:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008128:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800812c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008130:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008134:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008138:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800813c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008140:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008144:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008148:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800814c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008150:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008154:	08010a19 	stmdaeq	r1, {r0, r3, r4, r9, fp}
 8008158:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800815c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008160:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008164:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008168:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800816c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008170:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008174:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008178:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800817c:	00000000 	andeq	r0, r0, r0
 8008180:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008184:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008188:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800818c:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008190:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008194:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 8008198:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 800819c:	00000000 	andeq	r0, r0, r0
 80081a0:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80081a4:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}
 80081a8:	080093e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, ip, pc}

Disassembly of section .text:

080081ac <net::igmp_init()>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	f00e fac5 	bl	801673c <net::igmp_set_ip()>
 80081b2:	492c      	ldr	r1, [pc, #176]	@ (8008264 <net::igmp_init()+0xb8>)
 80081b4:	4b2c      	ldr	r3, [pc, #176]	@ (8008268 <net::igmp_init()+0xbc>)
 80081b6:	4a2d      	ldr	r2, [pc, #180]	@ (800826c <net::igmp_init()+0xc0>)
 80081b8:	2401      	movs	r4, #1
 80081ba:	205e      	movs	r0, #94	@ 0x5e
 80081bc:	800c      	strh	r4, [r1, #0]
 80081be:	7088      	strb	r0, [r1, #2]
 80081c0:	2106      	movs	r1, #6
 80081c2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80081c6:	f803 0b01 	strb.w	r0, [r3], #1
 80081ca:	3901      	subs	r1, #1
 80081cc:	d1f9      	bne.n	80081c2 <net::igmp_init()+0x16>
 80081ce:	4a28      	ldr	r2, [pc, #160]	@ (8008270 <net::igmp_init()+0xc4>)
 80081d0:	4828      	ldr	r0, [pc, #160]	@ (8008274 <net::igmp_init()+0xc8>)
 80081d2:	60d0      	str	r0, [r2, #12]
 80081d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80081d8:	4b27      	ldr	r3, [pc, #156]	@ (8008278 <net::igmp_init()+0xcc>)
 80081da:	8210      	strh	r0, [r2, #16]
 80081dc:	f240 4094 	movw	r0, #1172	@ 0x494
 80081e0:	8450      	strh	r0, [r2, #34]	@ 0x22
 80081e2:	4c26      	ldr	r4, [pc, #152]	@ (800827c <net::igmp_init()+0xd0>)
 80081e4:	4826      	ldr	r0, [pc, #152]	@ (8008280 <net::igmp_init()+0xd4>)
 80081e6:	8491      	strh	r1, [r2, #36]	@ 0x24
 80081e8:	2516      	movs	r5, #22
 80081ea:	6154      	str	r4, [r2, #20]
 80081ec:	84d5      	strh	r5, [r2, #38]	@ 0x26
 80081ee:	6018      	str	r0, [r3, #0]
 80081f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081f4:	2006      	movs	r0, #6
 80081f6:	491d      	ldr	r1, [pc, #116]	@ (800826c <net::igmp_init()+0xc0>)
 80081f8:	809a      	strh	r2, [r3, #4]
 80081fa:	181a      	adds	r2, r3, r0
 80081fc:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008200:	f802 5b01 	strb.w	r5, [r2], #1
 8008204:	3801      	subs	r0, #1
 8008206:	d1f9      	bne.n	80081fc <net::igmp_init()+0x50>
 8008208:	4a1e      	ldr	r2, [pc, #120]	@ (8008284 <net::igmp_init()+0xd8>)
 800820a:	615c      	str	r4, [r3, #20]
 800820c:	6811      	ldr	r1, [r2, #0]
 800820e:	4c1e      	ldr	r4, [pc, #120]	@ (8008288 <net::igmp_init()+0xdc>)
 8008210:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 8008214:	8498      	strh	r0, [r3, #36]	@ 0x24
 8008216:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800821a:	4d16      	ldr	r5, [pc, #88]	@ (8008274 <net::igmp_init()+0xc8>)
 800821c:	f8c3 401e 	str.w	r4, [r3, #30]
 8008220:	8218      	strh	r0, [r3, #16]
 8008222:	2417      	movs	r4, #23
 8008224:	f240 4094 	movw	r0, #1172	@ 0x494
 8008228:	2a07      	cmp	r2, #7
 800822a:	84dc      	strh	r4, [r3, #38]	@ 0x26
 800822c:	60dd      	str	r5, [r3, #12]
 800822e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8008230:	d904      	bls.n	800823c <net::igmp_init()+0x90>
 8008232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008236:	4815      	ldr	r0, [pc, #84]	@ (800828c <net::igmp_init()+0xe0>)
 8008238:	f011 be00 	b.w	8019e3c <console_error>
 800823c:	4b14      	ldr	r3, [pc, #80]	@ (8008290 <net::igmp_init()+0xe4>)
 800823e:	f8d1 40a4 	ldr.w	r4, [r1, #164]	@ 0xa4
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	1c55      	adds	r5, r2, #1
 8008246:	1c63      	adds	r3, r4, #1
 8008248:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
 800824c:	f8c1 50a0 	str.w	r5, [r1, #160]	@ 0xa0
 8008250:	eb01 1302 	add.w	r3, r1, r2, lsl #4
 8008254:	3064      	adds	r0, #100	@ 0x64
 8008256:	2164      	movs	r1, #100	@ 0x64
 8008258:	e9c3 0108 	strd	r0, r1, [r3, #32]
 800825c:	4a0d      	ldr	r2, [pc, #52]	@ (8008294 <net::igmp_init()+0xe8>)
 800825e:	e9c3 420a 	strd	r4, r2, [r3, #40]	@ 0x28
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	10008348 	andne	r8, r0, r8, asr #6
 8008268:	10008386 	andne	r8, r0, r6, lsl #7
 800826c:	2000e244 	andcs	lr, r0, r4, asr #4
 8008270:	10008380 	andne	r8, r0, r0, lsl #7
 8008274:	00460008 	subeq	r0, r6, r8
 8008278:	10008350 	andne	r8, r0, r0, asr r3
 800827c:	02010040 	andeq	r0, r1, #64	@ 0x40
 8008280:	005e0001 	subseq	r0, lr, r1
 8008284:	2000e3e0 	andcs	lr, r0, r0, ror #7
 8008288:	020000e0 	andeq	r0, r0, #224	@ 0xe0
 800828c:	0801ec34 	stmdaeq	r1, {r2, r4, r5, sl, fp, sp, lr, pc}
 8008290:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8008294:	080166e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, sp, lr}

08008298 <net::igmp_shutdown()>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d05      	ldr	r5, [pc, #20]	@ (80082b0 <net::igmp_shutdown()+0x18>)
 800829c:	2400      	movs	r4, #0
 800829e:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 80082a2:	b108      	cbz	r0, 80082a8 <net::igmp_shutdown()+0x10>
 80082a4:	f00e fa78 	bl	8016798 <net::igmp_leave(unsigned long)>
 80082a8:	3401      	adds	r4, #1
 80082aa:	2c24      	cmp	r4, #36	@ 0x24
 80082ac:	d1f7      	bne.n	800829e <net::igmp_shutdown()+0x6>
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	10008228 	andne	r8, r0, r8, lsr #4

080082b4 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)>:
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	4d19      	ldr	r5, [pc, #100]	@ (8008320 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x6c>)
 80082ba:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082be:	7e2c      	ldrb	r4, [r5, #24]
 80082c0:	461f      	mov	r7, r3
 80082c2:	7deb      	ldrb	r3, [r5, #23]
 80082c4:	0424      	lsls	r4, r4, #16
 80082c6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 80082ca:	7e6b      	ldrb	r3, [r5, #25]
 80082cc:	3402      	adds	r4, #2
 80082ce:	eb04 6403 	add.w	r4, r4, r3, lsl #24
 80082d2:	4682      	mov	sl, r0
 80082d4:	460e      	mov	r6, r1
 80082d6:	4690      	mov	r8, r2
 80082d8:	612c      	str	r4, [r5, #16]
 80082da:	f000 f8b5 	bl	8008448 <net::arp_init()>
 80082de:	f000 f951 	bl	8008584 <net::ip_init()>
 80082e2:	f1ba 0f01 	cmp.w	sl, #1
 80082e6:	7eab      	ldrb	r3, [r5, #26]
 80082e8:	d115      	bne.n	8008316 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x62>
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	76ab      	strb	r3, [r5, #26]
 80082f0:	f899 3000 	ldrb.w	r3, [r9]
 80082f4:	b11b      	cbz	r3, 80082fe <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x4a>
 80082f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fa:	f00e b827 	b.w	801634c <net::dhcp_start()>
 80082fe:	b12e      	cbz	r6, 800830c <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)+0x58>
 8008300:	4640      	mov	r0, r8
 8008302:	f00e fb83 	bl	8016a0c <net::netif_set_netmask(net::ip_addr)>
 8008306:	4638      	mov	r0, r7
 8008308:	f00e fb94 	bl	8016a34 <net::netif_set_gw(net::ip_addr)>
 800830c:	4630      	mov	r0, r6
 800830e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008312:	f00e bac1 	b.w	8016898 <net::net_set_primary_ip(net::ip_addr)>
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	76ab      	strb	r3, [r5, #26]
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	2000e230 	andcs	lr, r0, r0, lsr r2

08008324 <net::tcp_init()>:
 8008324:	4a07      	ldr	r2, [pc, #28]	@ (8008344 <net::tcp_init()+0x20>)
 8008326:	4908      	ldr	r1, [pc, #32]	@ (8008348 <net::tcp_init()+0x24>)
 8008328:	2306      	movs	r3, #6
 800832a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800832e:	f802 0b01 	strb.w	r0, [r2], #1
 8008332:	3b01      	subs	r3, #1
 8008334:	d1f9      	bne.n	800832a <net::tcp_init()+0x6>
 8008336:	4b05      	ldr	r3, [pc, #20]	@ (800834c <net::tcp_init()+0x28>)
 8008338:	4905      	ldr	r1, [pc, #20]	@ (8008350 <net::tcp_init()+0x2c>)
 800833a:	4a06      	ldr	r2, [pc, #24]	@ (8008354 <net::tcp_init()+0x30>)
 800833c:	60d9      	str	r1, [r3, #12]
 800833e:	615a      	str	r2, [r3, #20]
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	100083b6 			@ <UNDEFINED> instruction: 0x100083b6
 8008348:	2000e244 	andcs	lr, r0, r4, asr #4
 800834c:	100083b0 			@ <UNDEFINED> instruction: 0x100083b0
 8008350:	00450008 	subeq	r0, r5, r8
 8008354:	06400040 	strbeq	r0, [r0], -r0, asr #32

08008358 <net::udp_init()>:
 8008358:	490b      	ldr	r1, [pc, #44]	@ (8008388 <net::udp_init()+0x30>)
 800835a:	4b0c      	ldr	r3, [pc, #48]	@ (800838c <net::udp_init()+0x34>)
 800835c:	4a0c      	ldr	r2, [pc, #48]	@ (8008390 <net::udp_init()+0x38>)
 800835e:	b510      	push	{r4, lr}
 8008360:	205e      	movs	r0, #94	@ 0x5e
 8008362:	2401      	movs	r4, #1
 8008364:	800c      	strh	r4, [r1, #0]
 8008366:	7088      	strb	r0, [r1, #2]
 8008368:	2106      	movs	r1, #6
 800836a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800836e:	f803 0b01 	strb.w	r0, [r3], #1
 8008372:	3901      	subs	r1, #1
 8008374:	d1f9      	bne.n	800836a <net::udp_init()+0x12>
 8008376:	4807      	ldr	r0, [pc, #28]	@ (8008394 <net::udp_init()+0x3c>)
 8008378:	4a07      	ldr	r2, [pc, #28]	@ (8008398 <net::udp_init()+0x40>)
 800837a:	4b08      	ldr	r3, [pc, #32]	@ (800839c <net::udp_init()+0x44>)
 800837c:	60c2      	str	r2, [r0, #12]
 800837e:	6143      	str	r3, [r0, #20]
 8008380:	f00e fdfa 	bl	8016f78 <net::udp_set_ip()>
 8008384:	8501      	strh	r1, [r0, #40]	@ 0x28
 8008386:	bd10      	pop	{r4, pc}
 8008388:	100096a8 	andne	r9, r0, r8, lsr #13
 800838c:	100096ba 			@ <UNDEFINED> instruction: 0x100096ba
 8008390:	2000e244 	andcs	lr, r0, r4, asr #4
 8008394:	100096b4 			@ <UNDEFINED> instruction: 0x100096b4
 8008398:	00450008 	subeq	r0, r5, r8
 800839c:	11400040 	cmpne	r0, r0, asr #32

080083a0 <emac_config()>:
 80083a0:	b508      	push	{r3, lr}
 80083a2:	480f      	ldr	r0, [pc, #60]	@ (80083e0 <emac_config()+0x40>)
 80083a4:	f014 f897 	bl	801c4d6 <puts>
 80083a8:	f00f f9aa 	bl	8017700 <enet_gpio_config()>
 80083ac:	f640 4019 	movw	r0, #3097	@ 0xc19
 80083b0:	f012 fac8 	bl	801a944 <rcu_periph_clock_enable>
 80083b4:	f640 401a 	movw	r0, #3098	@ 0xc1a
 80083b8:	f012 fac4 	bl	801a944 <rcu_periph_clock_enable>
 80083bc:	f640 401b 	movw	r0, #3099	@ 0xc1b
 80083c0:	f012 fac0 	bl	801a944 <rcu_periph_clock_enable>
 80083c4:	f012 f9f4 	bl	801a7b0 <enet_deinit>
 80083c8:	f011 ff8e 	bl	801a2e8 <enet_software_reset>
 80083cc:	2001      	movs	r0, #1
 80083ce:	f00f f92d 	bl	801762c <net::phy_config(unsigned long)>
 80083d2:	b920      	cbnz	r0, 80083de <emac_config()+0x3e>
 80083d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083d8:	4802      	ldr	r0, [pc, #8]	@ (80083e4 <emac_config()+0x44>)
 80083da:	f011 bd2f 	b.w	8019e3c <console_error>
 80083de:	bd08      	pop	{r3, pc}
 80083e0:	0801dba8 	stmdaeq	r1, {r3, r5, r7, r8, r9, fp, ip, lr, pc}
 80083e4:	0801dbb0 	stmdaeq	r1, {r4, r5, r7, r8, r9, fp, ip, lr, pc}

080083e8 <emac_start(unsigned char*, net::Link&)>:
 80083e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083ea:	466c      	mov	r4, sp
 80083ec:	4605      	mov	r5, r0
 80083ee:	460e      	mov	r6, r1
 80083f0:	2001      	movs	r0, #1
 80083f2:	4621      	mov	r1, r4
 80083f4:	f00f fd7a 	bl	8017eec <net::phy_start(unsigned long, net::PhyStatus&)>
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	6033      	str	r3, [r6, #0]
 80083fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008400:	f00f f8c0 	bl	8017584 <emac_adjust_link(net::PhyStatus)>
 8008404:	4628      	mov	r0, r5
 8008406:	f013 f887 	bl	801b518 <mac_address_get(unsigned char*)>
 800840a:	4629      	mov	r1, r5
 800840c:	2000      	movs	r0, #0
 800840e:	f011 ffcd 	bl	801a3ac <enet_mac_address_set>
 8008412:	4c0c      	ldr	r4, [pc, #48]	@ (8008444 <emac_start(unsigned char*, net::Link&)+0x5c>)
 8008414:	f44f 00e0 	mov.w	r0, #7340032	@ 0x700000
 8008418:	f011 ff7a 	bl	801a310 <enet_descriptors_chain_init>
 800841c:	f44f 2060 	mov.w	r0, #917504	@ 0xe0000
 8008420:	f011 ff76 	bl	801a310 <enet_descriptors_chain_init>
 8008424:	4620      	mov	r0, r4
 8008426:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800842a:	f011 ffb9 	bl	801a3a0 <enet_transmit_checksum_config>
 800842e:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8008432:	f104 0010 	add.w	r0, r4, #16
 8008436:	f011 ffb3 	bl	801a3a0 <enet_transmit_checksum_config>
 800843a:	f012 f973 	bl	801a724 <enet_enable>
 800843e:	b004      	add	sp, #16
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	bf00      	nop
 8008444:	2001ba88 	andcs	fp, r1, r8, lsl #21

08008448 <net::arp_init()>:
 8008448:	b410      	push	{r4}
 800844a:	4b3e      	ldr	r3, [pc, #248]	@ (8008544 <net::arp_init()+0xfc>)
 800844c:	b083      	sub	sp, #12
 800844e:	2210      	movs	r2, #16
 8008450:	2000      	movs	r0, #0
 8008452:	f103 0118 	add.w	r1, r3, #24
 8008456:	f803 0b01 	strb.w	r0, [r3], #1
 800845a:	428b      	cmp	r3, r1
 800845c:	d1fb      	bne.n	8008456 <net::arp_init()+0xe>
 800845e:	3a01      	subs	r2, #1
 8008460:	d1f7      	bne.n	8008452 <net::arp_init()+0xa>
 8008462:	4a39      	ldr	r2, [pc, #228]	@ (8008548 <net::arp_init()+0x100>)
 8008464:	4939      	ldr	r1, [pc, #228]	@ (800854c <net::arp_init()+0x104>)
 8008466:	2306      	movs	r3, #6
 8008468:	f811 0b01 	ldrb.w	r0, [r1], #1
 800846c:	f802 0b01 	strb.w	r0, [r2], #1
 8008470:	3b01      	subs	r3, #1
 8008472:	d1f9      	bne.n	8008468 <net::arp_init()+0x20>
 8008474:	4936      	ldr	r1, [pc, #216]	@ (8008550 <net::arp_init()+0x108>)
 8008476:	2206      	movs	r2, #6
 8008478:	460b      	mov	r3, r1
 800847a:	20ff      	movs	r0, #255	@ 0xff
 800847c:	3a01      	subs	r2, #1
 800847e:	f801 0b01 	strb.w	r0, [r1], #1
 8008482:	d1fb      	bne.n	800847c <net::arp_init()+0x34>
 8008484:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008488:	4c32      	ldr	r4, [pc, #200]	@ (8008554 <net::arp_init()+0x10c>)
 800848a:	4933      	ldr	r1, [pc, #204]	@ (8008558 <net::arp_init()+0x110>)
 800848c:	8298      	strh	r0, [r3, #20]
 800848e:	4a33      	ldr	r2, [pc, #204]	@ (800855c <net::arp_init()+0x114>)
 8008490:	482e      	ldr	r0, [pc, #184]	@ (800854c <net::arp_init()+0x104>)
 8008492:	e9c3 4103 	strd	r4, r1, [r3, #12]
 8008496:	2306      	movs	r3, #6
 8008498:	f810 4b01 	ldrb.w	r4, [r0], #1
 800849c:	f802 4b01 	strb.w	r4, [r2], #1
 80084a0:	3b01      	subs	r3, #1
 80084a2:	d1f9      	bne.n	8008498 <net::arp_init()+0x50>
 80084a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008560 <net::arp_init()+0x118>)
 80084a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008564 <net::arp_init()+0x11c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	a801      	add	r0, sp, #4
 80084ae:	2304      	movs	r3, #4
 80084b0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80084b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80084b8:	3b01      	subs	r3, #1
 80084ba:	d1f9      	bne.n	80084b0 <net::arp_init()+0x68>
 80084bc:	482a      	ldr	r0, [pc, #168]	@ (8008568 <net::arp_init()+0x120>)
 80084be:	2206      	movs	r2, #6
 80084c0:	3a01      	subs	r2, #1
 80084c2:	f800 3b01 	strb.w	r3, [r0], #1
 80084c6:	d1fb      	bne.n	80084c0 <net::arp_init()+0x78>
 80084c8:	4a28      	ldr	r2, [pc, #160]	@ (800856c <net::arp_init()+0x124>)
 80084ca:	4820      	ldr	r0, [pc, #128]	@ (800854c <net::arp_init()+0x104>)
 80084cc:	2306      	movs	r3, #6
 80084ce:	f810 4b01 	ldrb.w	r4, [r0], #1
 80084d2:	f802 4b01 	strb.w	r4, [r2], #1
 80084d6:	3b01      	subs	r3, #1
 80084d8:	d1f9      	bne.n	80084ce <net::arp_init()+0x86>
 80084da:	4b25      	ldr	r3, [pc, #148]	@ (8008570 <net::arp_init()+0x128>)
 80084dc:	481d      	ldr	r0, [pc, #116]	@ (8008554 <net::arp_init()+0x10c>)
 80084de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084e2:	e9c3 0103 	strd	r0, r1, [r3, #12]
 80084e6:	4919      	ldr	r1, [pc, #100]	@ (800854c <net::arp_init()+0x104>)
 80084e8:	829a      	strh	r2, [r3, #20]
 80084ea:	2206      	movs	r2, #6
 80084ec:	3316      	adds	r3, #22
 80084ee:	f811 0b01 	ldrb.w	r0, [r1], #1
 80084f2:	f803 0b01 	strb.w	r0, [r3], #1
 80084f6:	3a01      	subs	r2, #1
 80084f8:	d1f9      	bne.n	80084ee <net::arp_init()+0xa6>
 80084fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008574 <net::arp_init()+0x12c>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8008502:	2b07      	cmp	r3, #7
 8008504:	d905      	bls.n	8008512 <net::arp_init()+0xca>
 8008506:	481c      	ldr	r0, [pc, #112]	@ (8008578 <net::arp_init()+0x130>)
 8008508:	b003      	add	sp, #12
 800850a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850e:	f011 bc95 	b.w	8019e3c <console_error>
 8008512:	f8d2 00a4 	ldr.w	r0, [r2, #164]	@ 0xa4
 8008516:	4919      	ldr	r1, [pc, #100]	@ (800857c <net::arp_init()+0x134>)
 8008518:	1c44      	adds	r4, r0, #1
 800851a:	f8c2 40a4 	str.w	r4, [r2, #164]	@ 0xa4
 800851e:	6809      	ldr	r1, [r1, #0]
 8008520:	1c5c      	adds	r4, r3, #1
 8008522:	f8c2 40a0 	str.w	r4, [r2, #160]	@ 0xa0
 8008526:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800852a:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <net::arp_init()+0x138>)
 800852c:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8008530:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8008534:	e9c3 1408 	strd	r1, r4, [r3, #32]
 8008538:	e9c3 020a 	strd	r0, r2, [r3, #40]	@ 0x28
 800853c:	b003      	add	sp, #12
 800853e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	1000cb10 	andne	ip, r0, r0, lsl fp
 8008548:	2000e2a2 	andcs	lr, r0, r2, lsr #5
 800854c:	2000e244 	andcs	lr, r0, r4, asr #4
 8008550:	2000e29c 	mulcs	r0, ip, r2
 8008554:	01000608 	tsteq	r0, r8, lsl #12
 8008558:	04060008 	streq	r0, [r6], #-8
 800855c:	2000e2b2 			@ <UNDEFINED> instruction: 0x2000e2b2
 8008560:	2000e230 	andcs	lr, r0, r0, lsr r2
 8008564:	2000e2b7 			@ <UNDEFINED> instruction: 0x2000e2b7
 8008568:	2000e2bc 			@ <UNDEFINED> instruction: 0x2000e2bc
 800856c:	2000e266 	andcs	lr, r0, r6, ror #4
 8008570:	2000e260 	andcs	lr, r0, r0, ror #4
 8008574:	2000e3e0 	andcs	lr, r0, r0, ror #7
 8008578:	0801ec34 	stmdaeq	r1, {r2, r4, r5, sl, fp, sp, lr, pc}
 800857c:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8008580:	08017cd5 	stmdaeq	r1, {r0, r2, r4, r6, r7, sl, fp, ip, sp, lr}

08008584 <net::ip_init()>:
 8008584:	b508      	push	{r3, lr}
 8008586:	f7ff fee7 	bl	8008358 <net::udp_init()>
 800858a:	f7ff fe0f 	bl	80081ac <net::igmp_init()>
 800858e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008592:	f7ff bec7 	b.w	8008324 <net::tcp_init()>
	...

08008598 <console_init()>:
 8008598:	b508      	push	{r3, lr}
 800859a:	f013 fa4d 	bl	801ba38 <uart0_init>
 800859e:	4804      	ldr	r0, [pc, #16]	@ (80085b0 <console_init()+0x18>)
 80085a0:	f013 fa74 	bl	801ba8c <uart0_puts>
 80085a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085a8:	4802      	ldr	r0, [pc, #8]	@ (80085b4 <console_init()+0x1c>)
 80085aa:	f013 ba6f 	b.w	801ba8c <uart0_puts>
 80085ae:	bf00      	nop
 80085b0:	0801ddf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 80085b4:	0801de17 	stmdaeq	r1, {r0, r1, r2, r4, r9, sl, fp, ip, lr, pc}

080085b8 <net::igmp_handle(t_igmp*)>:
 80085b8:	7b83      	ldrb	r3, [r0, #14]
 80085ba:	2b45      	cmp	r3, #69	@ 0x45
 80085bc:	d000      	beq.n	80085c0 <net::igmp_handle(t_igmp*)+0x8>
 80085be:	4770      	bx	lr
 80085c0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80085c4:	2b11      	cmp	r3, #17
 80085c6:	d1fa      	bne.n	80085be <net::igmp_handle(t_igmp*)+0x6>
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	4b23      	ldr	r3, [pc, #140]	@ (800865c <net::igmp_handle(t_igmp*)+0xa4>)
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f100 081d 	add.w	r8, r0, #29
 80085d6:	466a      	mov	r2, sp
 80085d8:	f100 0421 	add.w	r4, r0, #33	@ 0x21
 80085dc:	4643      	mov	r3, r8
 80085de:	e001      	b.n	80085e4 <net::igmp_handle(t_igmp*)+0x2c>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d038      	beq.n	8008656 <net::igmp_handle(t_igmp*)+0x9e>
 80085e4:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 80085e8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80085ec:	428d      	cmp	r5, r1
 80085ee:	d0f7      	beq.n	80085e0 <net::igmp_handle(t_igmp*)+0x28>
 80085f0:	1a6d      	subs	r5, r5, r1
 80085f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008660 <net::igmp_handle(t_igmp*)+0xa8>)
 80085f4:	2701      	movs	r7, #1
 80085f6:	f503 7690 	add.w	r6, r3, #288	@ 0x120
 80085fa:	e00a      	b.n	8008612 <net::igmp_handle(t_igmp*)+0x5a>
 80085fc:	f803 7c02 	strb.w	r7, [r3, #-2]
 8008600:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 8008604:	0852      	lsrs	r2, r2, #1
 8008606:	3201      	adds	r2, #1
 8008608:	f823 2c04 	strh.w	r2, [r3, #-4]
 800860c:	3308      	adds	r3, #8
 800860e:	42b3      	cmp	r3, r6
 8008610:	d012      	beq.n	8008638 <net::igmp_handle(t_igmp*)+0x80>
 8008612:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8008616:	2a00      	cmp	r2, #0
 8008618:	d0f8      	beq.n	800860c <net::igmp_handle(t_igmp*)+0x54>
 800861a:	9201      	str	r2, [sp, #4]
 800861c:	b97d      	cbnz	r5, 800863e <net::igmp_handle(t_igmp*)+0x86>
 800861e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8008622:	2a01      	cmp	r2, #1
 8008624:	d1ea      	bne.n	80085fc <net::igmp_handle(t_igmp*)+0x44>
 8008626:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 800862a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800862e:	428a      	cmp	r2, r1
 8008630:	dbe8      	blt.n	8008604 <net::igmp_handle(t_igmp*)+0x4c>
 8008632:	3308      	adds	r3, #8
 8008634:	42b3      	cmp	r3, r6
 8008636:	d1ec      	bne.n	8008612 <net::igmp_handle(t_igmp*)+0x5a>
 8008638:	b002      	add	sp, #8
 800863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863e:	a901      	add	r1, sp, #4
 8008640:	4642      	mov	r2, r8
 8008642:	e001      	b.n	8008648 <net::igmp_handle(t_igmp*)+0x90>
 8008644:	42a2      	cmp	r2, r4
 8008646:	d0ea      	beq.n	800861e <net::igmp_handle(t_igmp*)+0x66>
 8008648:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 800864c:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008650:	45e6      	cmp	lr, ip
 8008652:	d0f7      	beq.n	8008644 <net::igmp_handle(t_igmp*)+0x8c>
 8008654:	e7da      	b.n	800860c <net::igmp_handle(t_igmp*)+0x54>
 8008656:	2500      	movs	r5, #0
 8008658:	e7cb      	b.n	80085f2 <net::igmp_handle(t_igmp*)+0x3a>
 800865a:	bf00      	nop
 800865c:	010000e0 	smlatteq	r0, r0, r0, r0
 8008660:	10008230 	andne	r8, r0, r0, lsr r2

08008664 <net::net_handle()>:
 8008664:	b500      	push	{lr}
 8008666:	b083      	sub	sp, #12
 8008668:	a801      	add	r0, sp, #4
 800866a:	f00f f923 	bl	80178b4 <emac_eth_recv(unsigned char**)>
 800866e:	2800      	cmp	r0, #0
 8008670:	dc02      	bgt.n	8008678 <net::net_handle()+0x14>
 8008672:	b003      	add	sp, #12
 8008674:	f85d fb04 	ldr.w	pc, [sp], #4
 8008678:	9801      	ldr	r0, [sp, #4]
 800867a:	8983      	ldrh	r3, [r0, #12]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d007      	beq.n	8008690 <net::net_handle()+0x2c>
 8008680:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8008684:	d007      	beq.n	8008696 <net::net_handle()+0x32>
 8008686:	f00f f927 	bl	80178d8 <emac_free_pkt()>
 800868a:	b003      	add	sp, #12
 800868c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008690:	f000 fc06 	bl	8008ea0 <net::ip_handle(t_ip4*)>
 8008694:	e7f7      	b.n	8008686 <net::net_handle()+0x22>
 8008696:	f000 fb79 	bl	8008d8c <net::arp_handle(t_arp*)>
 800869a:	e7f4      	b.n	8008686 <net::net_handle()+0x22>

0800869c <net::tcp_run()>:
 800869c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800869e:	4c11      	ldr	r4, [pc, #68]	@ (80086e4 <net::tcp_run()+0x48>)
 80086a0:	b085      	sub	sp, #20
 80086a2:	2711      	movs	r7, #17
 80086a4:	f504 75f0 	add.w	r5, r4, #480	@ 0x1e0
 80086a8:	2609      	movs	r6, #9
 80086aa:	e002      	b.n	80086b2 <net::tcp_run()+0x16>
 80086ac:	3450      	adds	r4, #80	@ 0x50
 80086ae:	42ac      	cmp	r4, r5
 80086b0:	d015      	beq.n	80086de <net::tcp_run()+0x42>
 80086b2:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	d1f8      	bne.n	80086ac <net::tcp_run()+0x10>
 80086ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086bc:	69a2      	ldr	r2, [r4, #24]
 80086be:	f88d 700c 	strb.w	r7, [sp, #12]
 80086c2:	4620      	mov	r0, r4
 80086c4:	a901      	add	r1, sp, #4
 80086c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80086ca:	f00e fa53 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 80086ce:	69a3      	ldr	r3, [r4, #24]
 80086d0:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
 80086d4:	3301      	adds	r3, #1
 80086d6:	61a3      	str	r3, [r4, #24]
 80086d8:	3450      	adds	r4, #80	@ 0x50
 80086da:	42ac      	cmp	r4, r5
 80086dc:	d1e9      	bne.n	80086b2 <net::tcp_run()+0x16>
 80086de:	b005      	add	sp, #20
 80086e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e2:	bf00      	nop
 80086e4:	100089a0 	andne	r8, r0, r0, lsr #19

080086e8 <net::tcp_handle(t_tcp*)>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	4605      	mov	r5, r0
 80086ee:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80086f0:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
 80086f2:	4fb3      	ldr	r7, [pc, #716]	@ (80089c0 <net::tcp_handle(t_tcp*)+0x2d8>)
 80086f4:	f8b5 9010 	ldrh.w	r9, [r5, #16]
 80086f8:	ba49      	rev16	r1, r1
 80086fa:	ba40      	rev16	r0, r0
 80086fc:	8468      	strh	r0, [r5, #34]	@ 0x22
 80086fe:	84a9      	strh	r1, [r5, #36]	@ 0x24
 8008700:	f8b7 2d04 	ldrh.w	r2, [r7, #3332]	@ 0xd04
 8008704:	b28b      	uxth	r3, r1
 8008706:	429a      	cmp	r2, r3
 8008708:	b099      	sub	sp, #100	@ 0x64
 800870a:	d029      	beq.n	8008760 <net::tcp_handle(t_tcp*)+0x78>
 800870c:	f895 602e 	ldrb.w	r6, [r5, #46]	@ 0x2e
 8008710:	ab04      	add	r3, sp, #16
 8008712:	2400      	movs	r4, #0
 8008714:	f843 4b04 	str.w	r4, [r3], #4
 8008718:	aa18      	add	r2, sp, #96	@ 0x60
 800871a:	4293      	cmp	r3, r2
 800871c:	d1fa      	bne.n	8008714 <net::tcp_handle(t_tcp*)+0x2c>
 800871e:	f8d5 301a 	ldr.w	r3, [r5, #26]
 8008722:	f8d5 201e 	ldr.w	r2, [r5, #30]
 8008726:	f8ad 1018 	strh.w	r1, [sp, #24]
 800872a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800872e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8008732:	1dab      	adds	r3, r5, #6
 8008734:	f105 040c 	add.w	r4, r5, #12
 8008738:	a907      	add	r1, sp, #28
 800873a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800873e:	f801 0b01 	strb.w	r0, [r1], #1
 8008742:	42a3      	cmp	r3, r4
 8008744:	d1f9      	bne.n	800873a <net::tcp_handle(t_tcp*)+0x52>
 8008746:	4628      	mov	r0, r5
 8008748:	f00e f9f4 	bl	8016b34 <net::_bswap32(t_tcp*)>
 800874c:	0932      	lsrs	r2, r6, #4
 800874e:	0092      	lsls	r2, r2, #2
 8008750:	a904      	add	r1, sp, #16
 8008752:	f00e fafb 	bl	8016d4c <net::scan_options(t_tcp*, net::tcb*, long)>
 8008756:	f00e fac5 	bl	8016ce4 <net::send_reset(t_tcp*, net::tcb const*)>
 800875a:	b019      	add	sp, #100	@ 0x64
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	f107 0a04 	add.w	sl, r7, #4
 8008764:	fa1f fe80 	uxth.w	lr, r0
 8008768:	4653      	mov	r3, sl
 800876a:	2400      	movs	r4, #0
 800876c:	e005      	b.n	800877a <net::tcp_handle(t_tcp*)+0x92>
 800876e:	3401      	adds	r4, #1
 8008770:	2c06      	cmp	r4, #6
 8008772:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8008776:	f000 8088 	beq.w	800888a <net::tcp_handle(t_tcp*)+0x1a2>
 800877a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800877e:	2a01      	cmp	r2, #1
 8008780:	d0f5      	beq.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 8008782:	88da      	ldrh	r2, [r3, #6]
 8008784:	4572      	cmp	r2, lr
 8008786:	d1f2      	bne.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 8008788:	1e5a      	subs	r2, r3, #1
 800878a:	f105 0119 	add.w	r1, r5, #25
 800878e:	f103 0c03 	add.w	ip, r3, #3
 8008792:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8008796:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800879a:	4286      	cmp	r6, r0
 800879c:	d1e7      	bne.n	800876e <net::tcp_handle(t_tcp*)+0x86>
 800879e:	4562      	cmp	r2, ip
 80087a0:	d1f7      	bne.n	8008792 <net::tcp_handle(t_tcp*)+0xaa>
 80087a2:	f895 802e 	ldrb.w	r8, [r5, #46]	@ 0x2e
 80087a6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80087aa:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80087ae:	4628      	mov	r0, r5
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	f00e f9bf 	bl	8016b34 <net::_bswap32(t_tcp*)>
 80087b6:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80087b8:	9a00      	ldr	r2, [sp, #0]
 80087ba:	ba5b      	rev16	r3, r3
 80087bc:	862b      	strh	r3, [r5, #48]	@ 0x30
 80087be:	b29b      	uxth	r3, r3
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 80087c4:	ba5b      	rev16	r3, r3
 80087c6:	86ab      	strh	r3, [r5, #52]	@ 0x34
 80087c8:	f105 032a 	add.w	r3, r5, #42	@ 0x2a
 80087cc:	079b      	lsls	r3, r3, #30
 80087ce:	bf0c      	ite	eq
 80087d0:	f8d5 302a 	ldreq.w	r3, [r5, #42]	@ 0x2a
 80087d4:	f8d5 302a 	ldrne.w	r3, [r5, #42]	@ 0x2a
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	f105 0326 	add.w	r3, r5, #38	@ 0x26
 80087de:	079e      	lsls	r6, r3, #30
 80087e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80087e4:	eb07 1603 	add.w	r6, r7, r3, lsl #4
 80087e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087ec:	4631      	mov	r1, r6
 80087ee:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80087f2:	bf0c      	ite	eq
 80087f4:	f8d5 b026 	ldreq.w	fp, [r5, #38]	@ 0x26
 80087f8:	f8d5 b026 	ldrne.w	fp, [r5, #38]	@ 0x26
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	f00e faa5 	bl	8016d4c <net::scan_options(t_tcp*, net::tcb*, long)>
 8008802:	f896 204c 	ldrb.w	r2, [r6, #76]	@ 0x4c
 8008806:	2a01      	cmp	r2, #1
 8008808:	d04c      	beq.n	80088a4 <net::tcp_handle(t_tcp*)+0x1bc>
 800880a:	1ed3      	subs	r3, r2, #3
 800880c:	2b07      	cmp	r3, #7
 800880e:	d8a4      	bhi.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008810:	9b00      	ldr	r3, [sp, #0]
 8008812:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8008816:	33ec      	adds	r3, #236	@ 0xec
 8008818:	fa99 f999 	rev16.w	r9, r9
 800881c:	fa13 f989 	uxtah	r9, r3, r9
 8008820:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 8008824:	fa1f f989 	uxth.w	r9, r9
 8008828:	2b00      	cmp	r3, #0
 800882a:	d077      	beq.n	800891c <net::tcp_handle(t_tcp*)+0x234>
 800882c:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800882e:	eba1 000b 	sub.w	r0, r1, fp
 8008832:	f1b9 0f00 	cmp.w	r9, #0
 8008836:	f040 8085 	bne.w	8008944 <net::tcp_handle(t_tcp*)+0x25c>
 800883a:	2800      	cmp	r0, #0
 800883c:	f340 80b8 	ble.w	80089b0 <net::tcp_handle(t_tcp*)+0x2c8>
 8008840:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 8008844:	f013 0f04 	tst.w	r3, #4
 8008848:	ea4f 0384 	mov.w	r3, r4, lsl #2
 800884c:	4423      	add	r3, r4
 800884e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008852:	d06a      	beq.n	800892a <net::tcp_handle(t_tcp*)+0x242>
 8008854:	891d      	ldrh	r5, [r3, #8]
 8008856:	2200      	movs	r2, #0
 8008858:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 800885c:	f846 2b04 	str.w	r2, [r6], #4
 8008860:	42b3      	cmp	r3, r6
 8008862:	d1fb      	bne.n	800885c <net::tcp_handle(t_tcp*)+0x174>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	4a57      	ldr	r2, [pc, #348]	@ (80089c4 <net::tcp_handle(t_tcp*)+0x2dc>)
 8008868:	4423      	add	r3, r4
 800886a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	811d      	strh	r5, [r3, #8]
 8008872:	f640 3018 	movw	r0, #2840	@ 0xb18
 8008876:	2101      	movs	r1, #1
 8008878:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800887c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800887e:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
 8008882:	629a      	str	r2, [r3, #40]	@ 0x28
 8008884:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
 8008888:	e767      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 800888a:	4b4d      	ldr	r3, [pc, #308]	@ (80089c0 <net::tcp_handle(t_tcp*)+0x2d8>)
 800888c:	2400      	movs	r4, #0
 800888e:	e002      	b.n	8008896 <net::tcp_handle(t_tcp*)+0x1ae>
 8008890:	3401      	adds	r4, #1
 8008892:	2c06      	cmp	r4, #6
 8008894:	d085      	beq.n	80087a2 <net::tcp_handle(t_tcp*)+0xba>
 8008896:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800889a:	2a01      	cmp	r2, #1
 800889c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80088a0:	d1f6      	bne.n	8008890 <net::tcp_handle(t_tcp*)+0x1a8>
 80088a2:	e77e      	b.n	80087a2 <net::tcp_handle(t_tcp*)+0xba>
 80088a4:	f8d5 201e 	ldr.w	r2, [r5, #30]
 80088a8:	f847 2008 	str.w	r2, [r7, r8]
 80088ac:	8c69      	ldrh	r1, [r5, #34]	@ 0x22
 80088ae:	8171      	strh	r1, [r6, #10]
 80088b0:	f8d5 101a 	ldr.w	r1, [r5, #26]
 80088b4:	f84a 1008 	str.w	r1, [sl, r8]
 80088b8:	f108 020c 	add.w	r2, r8, #12
 80088bc:	443a      	add	r2, r7
 80088be:	1dab      	adds	r3, r5, #6
 80088c0:	f105 000c 	add.w	r0, r5, #12
 80088c4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80088c8:	f802 1b01 	strb.w	r1, [r2], #1
 80088cc:	4283      	cmp	r3, r0
 80088ce:	d1f9      	bne.n	80088c4 <net::tcp_handle(t_tcp*)+0x1dc>
 80088d0:	f895 302f 	ldrb.w	r3, [r5, #47]	@ 0x2f
 80088d4:	0758      	lsls	r0, r3, #29
 80088d6:	f53f af40 	bmi.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 80088da:	06d9      	lsls	r1, r3, #27
 80088dc:	f100 8135 	bmi.w	8008b4a <net::tcp_handle(t_tcp*)+0x462>
 80088e0:	079a      	lsls	r2, r3, #30
 80088e2:	f57f af3a 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 80088e6:	9b02      	ldr	r3, [sp, #8]
 80088e8:	4423      	add	r3, r4
 80088ea:	eb07 1403 	add.w	r4, r7, r3, lsl #4
 80088ee:	2212      	movs	r2, #18
 80088f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088f2:	9104      	str	r1, [sp, #16]
 80088f4:	f10b 0301 	add.w	r3, fp, #1
 80088f8:	4630      	mov	r0, r6
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80088fe:	9305      	str	r3, [sp, #20]
 8008900:	f88d 2018 	strb.w	r2, [sp, #24]
 8008904:	f8c4 b048 	str.w	fp, [r4, #72]	@ 0x48
 8008908:	f00e f934 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 800890c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800890e:	6163      	str	r3, [r4, #20]
 8008910:	2203      	movs	r2, #3
 8008912:	3301      	adds	r3, #1
 8008914:	61a3      	str	r3, [r4, #24]
 8008916:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
 800891a:	e71e      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	d18e      	bne.n	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008922:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8008924:	455b      	cmp	r3, fp
 8008926:	d18b      	bne.n	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008928:	e01f      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 800892a:	6999      	ldr	r1, [r3, #24]
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	2210      	movs	r2, #16
 8008932:	9104      	str	r1, [sp, #16]
 8008934:	4630      	mov	r0, r6
 8008936:	eb0d 0102 	add.w	r1, sp, r2
 800893a:	f88d 2018 	strb.w	r2, [sp, #24]
 800893e:	f00e f919 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008942:	e70a      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008944:	2800      	cmp	r0, #0
 8008946:	440b      	add	r3, r1
 8008948:	dd0b      	ble.n	8008962 <net::tcp_handle(t_tcp*)+0x27a>
 800894a:	f10b 30ff 	add.w	r0, fp, #4294967295	@ 0xffffffff
 800894e:	4448      	add	r0, r9
 8008950:	1a09      	subs	r1, r1, r0
 8008952:	2900      	cmp	r1, #0
 8008954:	f73f af74 	bgt.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008958:	1ac0      	subs	r0, r0, r3
 800895a:	2800      	cmp	r0, #0
 800895c:	f6bf af70 	bge.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 8008960:	e003      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 8008962:	ebab 0003 	sub.w	r0, fp, r3
 8008966:	2800      	cmp	r0, #0
 8008968:	daef      	bge.n	800894a <net::tcp_handle(t_tcp*)+0x262>
 800896a:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 800896e:	f011 0004 	ands.w	r0, r1, #4
 8008972:	f040 80f1 	bne.w	8008b58 <net::tcp_handle(t_tcp*)+0x470>
 8008976:	078b      	lsls	r3, r1, #30
 8008978:	d508      	bpl.n	800898c <net::tcp_handle(t_tcp*)+0x2a4>
 800897a:	2a03      	cmp	r2, #3
 800897c:	f000 811f 	beq.w	8008bbe <net::tcp_handle(t_tcp*)+0x4d6>
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	f00e f9ae 	bl	8016ce4 <net::send_reset(t_tcp*, net::tcb const*)>
 8008988:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 800898c:	06c8      	lsls	r0, r1, #27
 800898e:	f57f aee4 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008992:	00a3      	lsls	r3, r4, #2
 8008994:	4423      	add	r3, r4
 8008996:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800899a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800899e:	1eda      	subs	r2, r3, #3
 80089a0:	2a07      	cmp	r2, #7
 80089a2:	d87f      	bhi.n	8008aa4 <net::tcp_handle(t_tcp*)+0x3bc>
 80089a4:	e8df f002 	tbb	[pc, r2]
 80089a8:	10101066 	andsne	r1, r0, r6, rrx
 80089ac:	b8a71010 	stmialt	r7!, {r4, ip}
 80089b0:	440b      	add	r3, r1
 80089b2:	ebab 0303 	sub.w	r3, fp, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f6bf af42 	bge.w	8008840 <net::tcp_handle(t_tcp*)+0x158>
 80089bc:	e7d5      	b.n	800896a <net::tcp_handle(t_tcp*)+0x282>
 80089be:	bf00      	nop
 80089c0:	100089a0 	andne	r8, r0, r0, lsr #19
 80089c4:	2001bcd0 	ldrdcs	fp, [r1], -r0
 80089c8:	00a2      	lsls	r2, r4, #2
 80089ca:	1911      	adds	r1, r2, r4
 80089cc:	eb07 1101 	add.w	r1, r7, r1, lsl #4
 80089d0:	e9d1 c205 	ldrd	ip, r2, [r1, #20]
 80089d4:	9801      	ldr	r0, [sp, #4]
 80089d6:	ebbc 0e00 	subs.w	lr, ip, r0
 80089da:	f100 80fc 	bmi.w	8008bd6 <net::tcp_handle(t_tcp*)+0x4ee>
 80089de:	9801      	ldr	r0, [sp, #4]
 80089e0:	eba0 0c0c 	sub.w	ip, r0, ip
 80089e4:	f1bc 0f00 	cmp.w	ip, #0
 80089e8:	f340 810d 	ble.w	8008c06 <net::tcp_handle(t_tcp*)+0x51e>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	1a89      	subs	r1, r1, r2
 80089f0:	2900      	cmp	r1, #0
 80089f2:	f300 80fa 	bgt.w	8008bea <net::tcp_handle(t_tcp*)+0x502>
 80089f6:	3b04      	subs	r3, #4
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d856      	bhi.n	8008aaa <net::tcp_handle(t_tcp*)+0x3c2>
 80089fc:	f1b9 0f00 	cmp.w	r9, #0
 8008a00:	d053      	beq.n	8008aaa <net::tcp_handle(t_tcp*)+0x3c2>
 8008a02:	00a3      	lsls	r3, r4, #2
 8008a04:	4423      	add	r3, r4
 8008a06:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a0c:	455a      	cmp	r2, fp
 8008a0e:	f040 816c 	bne.w	8008cea <net::tcp_handle(t_tcp*)+0x602>
 8008a12:	f8b7 01e0 	ldrh.w	r0, [r7, #480]	@ 0x1e0
 8008a16:	9900      	ldr	r1, [sp, #0]
 8008a18:	f44f 63b2 	mov.w	r3, #1424	@ 0x590
 8008a1c:	fb00 f303 	mul.w	r3, r0, r3
 8008a20:	18fa      	adds	r2, r7, r3
 8008a22:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008a26:	f8a2 4772 	strh.w	r4, [r2, #1906]	@ 0x772
 8008a2a:	19da      	adds	r2, r3, r7
 8008a2c:	f105 0322 	add.w	r3, r5, #34	@ 0x22
 8008a30:	4419      	add	r1, r3
 8008a32:	079b      	lsls	r3, r3, #30
 8008a34:	4688      	mov	r8, r1
 8008a36:	f040 8122 	bne.w	8008c7e <net::tcp_handle(t_tcp*)+0x596>
 8008a3a:	f1b9 0f03 	cmp.w	r9, #3
 8008a3e:	f240 811e 	bls.w	8008c7e <net::tcp_handle(t_tcp*)+0x596>
 8008a42:	f1a9 0304 	sub.w	r3, r9, #4
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	1c59      	adds	r1, r3, #1
 8008a4a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8008a4e:	4694      	mov	ip, r2
 8008a50:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8008a54:	f858 eb04 	ldr.w	lr, [r8], #4
 8008a58:	f84c eb04 	str.w	lr, [ip], #4
 8008a5c:	4588      	cmp	r8, r1
 8008a5e:	d1f9      	bne.n	8008a54 <net::tcp_handle(t_tcp*)+0x36c>
 8008a60:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8008a64:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	f000 8112 	beq.w	8008c92 <net::tcp_handle(t_tcp*)+0x5aa>
 8008a6e:	4452      	add	r2, sl
 8008a70:	3b05      	subs	r3, #5
 8008a72:	e106      	b.n	8008c82 <net::tcp_handle(t_tcp*)+0x59a>
 8008a74:	00a3      	lsls	r3, r4, #2
 8008a76:	4423      	add	r3, r4
 8008a78:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a7c:	9801      	ldr	r0, [sp, #4]
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	1a11      	subs	r1, r2, r0
 8008a82:	2900      	cmp	r1, #0
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	f340 80eb 	ble.w	8008c60 <net::tcp_handle(t_tcp*)+0x578>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f00e f929 	bl	8016ce4 <net::send_reset(t_tcp*, net::tcb const*)>
 8008a92:	00a3      	lsls	r3, r4, #2
 8008a94:	4423      	add	r3, r4
 8008a96:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a9a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a9e:	1f1a      	subs	r2, r3, #4
 8008aa0:	2a02      	cmp	r2, #2
 8008aa2:	d9ab      	bls.n	80089fc <net::tcp_handle(t_tcp*)+0x314>
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	f67f ae58 	bls.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008aaa:	f895 102f 	ldrb.w	r1, [r5, #47]	@ 0x2f
 8008aae:	07ca      	lsls	r2, r1, #31
 8008ab0:	f57f ae53 	bpl.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	4423      	add	r3, r4
 8008ab8:	eb07 1403 	add.w	r4, r7, r3, lsl #4
 8008abc:	4630      	mov	r0, r6
 8008abe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ac0:	69a2      	ldr	r2, [r4, #24]
 8008ac2:	9204      	str	r2, [sp, #16]
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	eb0d 0102 	add.w	r1, sp, r2
 8008acc:	6423      	str	r3, [r4, #64]	@ 0x40
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	f88d 2018 	strb.w	r2, [sp, #24]
 8008ad4:	f00e f84e 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008ad8:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8008adc:	2b05      	cmp	r3, #5
 8008ade:	f000 80b9 	beq.w	8008c54 <net::tcp_handle(t_tcp*)+0x56c>
 8008ae2:	f200 80b2 	bhi.w	8008c4a <net::tcp_handle(t_tcp*)+0x562>
 8008ae6:	3b03      	subs	r3, #3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	f63f ae36 	bhi.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008aee:	2307      	movs	r3, #7
 8008af0:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
 8008af4:	e631      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008af6:	00a3      	lsls	r3, r4, #2
 8008af8:	4423      	add	r3, r4
 8008afa:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008afe:	9801      	ldr	r0, [sp, #4]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	4282      	cmp	r2, r0
 8008b04:	d1d3      	bne.n	8008aae <net::tcp_handle(t_tcp*)+0x3c6>
 8008b06:	891d      	ldrh	r5, [r3, #8]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008b0e:	f846 2b04 	str.w	r2, [r6], #4
 8008b12:	42b3      	cmp	r3, r6
 8008b14:	d1fb      	bne.n	8008b0e <net::tcp_handle(t_tcp*)+0x426>
 8008b16:	e6a5      	b.n	8008864 <net::tcp_handle(t_tcp*)+0x17c>
 8008b18:	00a3      	lsls	r3, r4, #2
 8008b1a:	eb03 0a04 	add.w	sl, r3, r4
 8008b1e:	eb07 1a0a 	add.w	sl, r7, sl, lsl #4
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d1c0      	bne.n	8008aae <net::tcp_handle(t_tcp*)+0x3c6>
 8008b2c:	f8da 3040 	ldr.w	r3, [sl, #64]	@ 0x40
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	2310      	movs	r3, #16
 8008b34:	eb0d 0103 	add.w	r1, sp, r3
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f88d 3018 	strb.w	r3, [sp, #24]
 8008b3e:	9204      	str	r2, [sp, #16]
 8008b40:	f00e f818 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008b44:	f89a 304c 	ldrb.w	r3, [sl, #76]	@ 0x4c
 8008b48:	e7a9      	b.n	8008a9e <net::tcp_handle(t_tcp*)+0x3b6>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	b019      	add	sp, #100	@ 0x64
 8008b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	f00e b8c6 	b.w	8016ce4 <net::send_reset(t_tcp*, net::tcb const*)>
 8008b58:	00a3      	lsls	r3, r4, #2
 8008b5a:	4423      	add	r3, r4
 8008b5c:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008b60:	2a07      	cmp	r2, #7
 8008b62:	8919      	ldrh	r1, [r3, #8]
 8008b64:	d81b      	bhi.n	8008b9e <net::tcp_handle(t_tcp*)+0x4b6>
 8008b66:	2a03      	cmp	r2, #3
 8008b68:	d021      	beq.n	8008bae <net::tcp_handle(t_tcp*)+0x4c6>
 8008b6a:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f846 2b04 	str.w	r2, [r6], #4
 8008b74:	42b3      	cmp	r3, r6
 8008b76:	d1fb      	bne.n	8008b70 <net::tcp_handle(t_tcp*)+0x488>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	4a62      	ldr	r2, [pc, #392]	@ (8008d04 <net::tcp_handle(t_tcp*)+0x61c>)
 8008b7c:	4423      	add	r3, r4
 8008b7e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	8119      	strh	r1, [r3, #8]
 8008b86:	f640 3418 	movw	r4, #2840	@ 0xb18
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008b90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008b92:	f8a3 4044 	strh.w	r4, [r3, #68]	@ 0x44
 8008b96:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b98:	f883 004c 	strb.w	r0, [r3, #76]	@ 0x4c
 8008b9c:	e5dd      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008b9e:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f846 2b04 	str.w	r2, [r6], #4
 8008ba8:	429e      	cmp	r6, r3
 8008baa:	d1fb      	bne.n	8008ba4 <net::tcp_handle(t_tcp*)+0x4bc>
 8008bac:	e7e4      	b.n	8008b78 <net::tcp_handle(t_tcp*)+0x490>
 8008bae:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f846 2b04 	str.w	r2, [r6], #4
 8008bb8:	42b3      	cmp	r3, r6
 8008bba:	d1fb      	bne.n	8008bb4 <net::tcp_handle(t_tcp*)+0x4cc>
 8008bbc:	e7dc      	b.n	8008b78 <net::tcp_handle(t_tcp*)+0x490>
 8008bbe:	00a3      	lsls	r3, r4, #2
 8008bc0:	4423      	add	r3, r4
 8008bc2:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008bc6:	891d      	ldrh	r5, [r3, #8]
 8008bc8:	f106 0350 	add.w	r3, r6, #80	@ 0x50
 8008bcc:	f846 0b04 	str.w	r0, [r6], #4
 8008bd0:	429e      	cmp	r6, r3
 8008bd2:	d1fb      	bne.n	8008bcc <net::tcp_handle(t_tcp*)+0x4e4>
 8008bd4:	e646      	b.n	8008864 <net::tcp_handle(t_tcp*)+0x17c>
 8008bd6:	1a80      	subs	r0, r0, r2
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f340 8090 	ble.w	8008cfe <net::tcp_handle(t_tcp*)+0x616>
 8008bde:	9801      	ldr	r0, [sp, #4]
 8008be0:	eba0 010c 	sub.w	r1, r0, ip
 8008be4:	2900      	cmp	r1, #0
 8008be6:	f77f af06 	ble.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008bea:	00a3      	lsls	r3, r4, #2
 8008bec:	4423      	add	r3, r4
 8008bee:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008bf2:	2410      	movs	r4, #16
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	f88d 4018 	strb.w	r4, [sp, #24]
 8008bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bfe:	eb0d 0104 	add.w	r1, sp, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	e69b      	b.n	800893e <net::tcp_handle(t_tcp*)+0x256>
 8008c06:	f1be 0f00 	cmp.w	lr, #0
 8008c0a:	f47f aef4 	bne.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c0e:	9801      	ldr	r0, [sp, #4]
 8008c10:	1a82      	subs	r2, r0, r2
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	f73f aeef 	bgt.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c18:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8008c1a:	eba2 000b 	sub.w	r0, r2, fp
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	db08      	blt.n	8008c34 <net::tcp_handle(t_tcp*)+0x54c>
 8008c22:	455a      	cmp	r2, fp
 8008c24:	f47f aee7 	bne.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c28:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8008c2a:	9901      	ldr	r1, [sp, #4]
 8008c2c:	1a52      	subs	r2, r2, r1
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	f73f aee1 	bgt.w	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c34:	00a2      	lsls	r2, r4, #2
 8008c36:	4422      	add	r2, r4
 8008c38:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8008c3c:	9903      	ldr	r1, [sp, #12]
 8008c3e:	61d1      	str	r1, [r2, #28]
 8008c40:	9901      	ldr	r1, [sp, #4]
 8008c42:	f8c2 b024 	str.w	fp, [r2, #36]	@ 0x24
 8008c46:	6291      	str	r1, [r2, #40]	@ 0x28
 8008c48:	e6d5      	b.n	80089f6 <net::tcp_handle(t_tcp*)+0x30e>
 8008c4a:	2b06      	cmp	r3, #6
 8008c4c:	f47f ad85 	bne.w	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008c50:	230a      	movs	r3, #10
 8008c52:	e74d      	b.n	8008af0 <net::tcp_handle(t_tcp*)+0x408>
 8008c54:	69a3      	ldr	r3, [r4, #24]
 8008c56:	9a01      	ldr	r2, [sp, #4]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d0f9      	beq.n	8008c50 <net::tcp_handle(t_tcp*)+0x568>
 8008c5c:	2308      	movs	r3, #8
 8008c5e:	e747      	b.n	8008af0 <net::tcp_handle(t_tcp*)+0x408>
 8008c60:	1a82      	subs	r2, r0, r2
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	f73f af11 	bgt.w	8008a8a <net::tcp_handle(t_tcp*)+0x3a2>
 8008c68:	9903      	ldr	r1, [sp, #12]
 8008c6a:	61d9      	str	r1, [r3, #28]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	9901      	ldr	r1, [sp, #4]
 8008c70:	f8c3 b024 	str.w	fp, [r3, #36]	@ 0x24
 8008c74:	6299      	str	r1, [r3, #40]	@ 0x28
 8008c76:	6159      	str	r1, [r3, #20]
 8008c78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8008c7c:	e56d      	b.n	800875a <net::tcp_handle(t_tcp*)+0x72>
 8008c7e:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 8008c82:	3301      	adds	r3, #1
 8008c84:	4443      	add	r3, r8
 8008c86:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008c8a:	f802 1b01 	strb.w	r1, [r2], #1
 8008c8e:	4543      	cmp	r3, r8
 8008c90:	d1f9      	bne.n	8008c86 <net::tcp_handle(t_tcp*)+0x59e>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	eb03 0804 	add.w	r8, r3, r4
 8008c98:	f44f 63b2 	mov.w	r3, #1424	@ 0x590
 8008c9c:	eb07 1808 	add.w	r8, r7, r8, lsl #4
 8008ca0:	fb03 7300 	mla	r3, r3, r0, r7
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f8a3 9770 	strh.w	r9, [r3, #1904]	@ 0x770
 8008caa:	f8d8 3040 	ldr.w	r3, [r8, #64]	@ 0x40
 8008cae:	444b      	add	r3, r9
 8008cb0:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	f8b8 3044 	ldrh.w	r3, [r8, #68]	@ 0x44
 8008cba:	f2a3 538c 	subw	r3, r3, #1420	@ 0x58c
 8008cbe:	f8a8 3044 	strh.w	r3, [r8, #68]	@ 0x44
 8008cc2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	2310      	movs	r3, #16
 8008cca:	eb0d 0103 	add.w	r1, sp, r3
 8008cce:	f88d 3018 	strb.w	r3, [sp, #24]
 8008cd2:	f00d ff4f 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8008cd6:	f8b7 21e0 	ldrh.w	r2, [r7, #480]	@ 0x1e0
 8008cda:	f898 304c 	ldrb.w	r3, [r8, #76]	@ 0x4c
 8008cde:	3201      	adds	r2, #1
 8008ce0:	f002 0201 	and.w	r2, r2, #1
 8008ce4:	f8a7 21e0 	strh.w	r2, [r7, #480]	@ 0x1e0
 8008ce8:	e6dc      	b.n	8008aa4 <net::tcp_handle(t_tcp*)+0x3bc>
 8008cea:	699c      	ldr	r4, [r3, #24]
 8008cec:	2310      	movs	r3, #16
 8008cee:	e9cd 4204 	strd	r4, r2, [sp, #16]
 8008cf2:	eb0d 0103 	add.w	r1, sp, r3
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f88d 3018 	strb.w	r3, [sp, #24]
 8008cfc:	e61f      	b.n	800893e <net::tcp_handle(t_tcp*)+0x256>
 8008cfe:	9a01      	ldr	r2, [sp, #4]
 8008d00:	614a      	str	r2, [r1, #20]
 8008d02:	e789      	b.n	8008c18 <net::tcp_handle(t_tcp*)+0x530>
 8008d04:	2001bcd0 	ldrdcs	fp, [r1], -r0

08008d08 <net::udp_handle(t_udp*)>:
 8008d08:	f8b0 c024 	ldrh.w	ip, [r0, #36]	@ 0x24
 8008d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008d84 <net::udp_handle(t_udp*)+0x7c>)
 8008d0e:	fa9c fc9c 	rev16.w	ip, ip
 8008d12:	2300      	movs	r3, #0
 8008d14:	fa1f fc8c 	uxth.w	ip, ip
 8008d18:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8008d1c:	4561      	cmp	r1, ip
 8008d1e:	d003      	beq.n	8008d28 <net::udp_handle(t_udp*)+0x20>
 8008d20:	3301      	adds	r3, #1
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d1f8      	bne.n	8008d18 <net::udp_handle(t_udp*)+0x10>
 8008d26:	4770      	bx	lr
 8008d28:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8008d2a:	b530      	push	{r4, r5, lr}
 8008d2c:	ba4c      	rev16	r4, r1
 8008d2e:	3c08      	subs	r4, #8
 8008d30:	b2a4      	uxth	r4, r4
 8008d32:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8008d36:	fa1f fc81 	uxth.w	ip, r1
 8008d3a:	f5b4 6fb8 	cmp.w	r4, #1472	@ 0x5c0
 8008d3e:	4d12      	ldr	r5, [pc, #72]	@ (8008d88 <net::udp_handle(t_udp*)+0x80>)
 8008d40:	fb03 f202 	mul.w	r2, r3, r2
 8008d44:	f102 020a 	add.w	r2, r2, #10
 8008d48:	bf28      	it	cs
 8008d4a:	f44f 64b8 	movcs.w	r4, #1472	@ 0x5c0
 8008d4e:	f5bc 6f00 	cmp.w	ip, #2048	@ 0x800
 8008d52:	442a      	add	r2, r5
 8008d54:	f100 012a 	add.w	r1, r0, #42	@ 0x2a
 8008d58:	d007      	beq.n	8008d6a <net::udp_handle(t_udp*)+0x62>
 8008d5a:	eb02 0e04 	add.w	lr, r2, r4
 8008d5e:	f811 cb01 	ldrb.w	ip, [r1], #1
 8008d62:	f802 cb01 	strb.w	ip, [r2], #1
 8008d66:	4572      	cmp	r2, lr
 8008d68:	d1f9      	bne.n	8008d5e <net::udp_handle(t_udp*)+0x56>
 8008d6a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	f8d0 101a 	ldr.w	r1, [r0, #26]
 8008d76:	50e9      	str	r1, [r5, r3]
 8008d78:	18ea      	adds	r2, r5, r3
 8008d7a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008d7c:	6054      	str	r4, [r2, #4]
 8008d7e:	ba5b      	rev16	r3, r3
 8008d80:	8113      	strh	r3, [r2, #8]
 8008d82:	bd30      	pop	{r4, r5, pc}
 8008d84:	1000cafe 	strdne	ip, [r0], -lr
 8008d88:	10009ca0 	andne	r9, r0, r0, lsr #25

08008d8c <net::arp_handle(t_arp*)>:
 8008d8c:	89c3      	ldrh	r3, [r0, #14]
 8008d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d92:	d17e      	bne.n	8008e92 <net::arp_handle(t_arp*)+0x106>
 8008d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	8a03      	ldrh	r3, [r0, #16]
 8008d9a:	2b08      	cmp	r3, #8
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	d172      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008da0:	7c83      	ldrb	r3, [r0, #18]
 8008da2:	2b06      	cmp	r3, #6
 8008da4:	d16f      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008da6:	7cc3      	ldrb	r3, [r0, #19]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d16c      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008dac:	f00e feda 	bl	8017b64 <net::acd_arp_reply(t_arp*)>
 8008db0:	4a38      	ldr	r2, [pc, #224]	@ (8008e94 <net::arp_handle(t_arp*)+0x108>)
 8008db2:	f8d4 3026 	ldr.w	r3, [r4, #38]	@ 0x26
 8008db6:	6817      	ldr	r7, [r2, #0]
 8008db8:	429f      	cmp	r7, r3
 8008dba:	d066      	beq.n	8008e8a <net::arp_handle(t_arp*)+0xfe>
 8008dbc:	6912      	ldr	r2, [r2, #16]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	bf0d      	iteet	eq
 8008dc2:	f04f 0801 	moveq.w	r8, #1
 8008dc6:	f04f 0800 	movne.w	r8, #0
 8008dca:	2101      	movne	r1, #1
 8008dcc:	2100      	moveq	r1, #0
 8008dce:	69e6      	ldr	r6, [r4, #28]
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f00e ff4d 	bl	8017c70 <net::arp_find_record(unsigned long, net::arp::Flags)>
 8008dd6:	f104 091c 	add.w	r9, r4, #28
 8008dda:	f104 0a16 	add.w	sl, r4, #22
 8008dde:	4605      	mov	r5, r0
 8008de0:	b350      	cbz	r0, 8008e38 <net::arp_handle(t_arp*)+0xac>
 8008de2:	2302      	movs	r3, #2
 8008de4:	6143      	str	r3, [r0, #20]
 8008de6:	f100 020c 	add.w	r2, r0, #12
 8008dea:	2300      	movs	r3, #0
 8008dec:	8243      	strh	r3, [r0, #18]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4653      	mov	r3, sl
 8008df2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008df6:	f801 0b01 	strb.w	r0, [r1], #1
 8008dfa:	4599      	cmp	r9, r3
 8008dfc:	d1f9      	bne.n	8008df2 <net::arp_handle(t_arp*)+0x66>
 8008dfe:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008e02:	f1bc 0f00 	cmp.w	ip, #0
 8008e06:	d017      	beq.n	8008e38 <net::arp_handle(t_arp*)+0xac>
 8008e08:	4663      	mov	r3, ip
 8008e0a:	f105 0012 	add.w	r0, r5, #18
 8008e0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008e12:	f803 1b01 	strb.w	r1, [r3], #1
 8008e16:	4282      	cmp	r2, r0
 8008e18:	d1f9      	bne.n	8008e0e <net::arp_handle(t_arp*)+0x82>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8008e20:	f88c 3018 	strb.w	r3, [ip, #24]
 8008e24:	f88c 3019 	strb.w	r3, [ip, #25]
 8008e28:	f00e fd76 	bl	8017918 <emac_eth_send(void*, unsigned long)>
 8008e2c:	6868      	ldr	r0, [r5, #4]
 8008e2e:	b108      	cbz	r0, 8008e34 <net::arp_handle(t_arp*)+0xa8>
 8008e30:	f013 fd4e 	bl	801c8d0 <operator delete[](void*)>
 8008e34:	2300      	movs	r3, #0
 8008e36:	606b      	str	r3, [r5, #4]
 8008e38:	8aa3      	ldrh	r3, [r4, #20]
 8008e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e3e:	d122      	bne.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d01f      	beq.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e46:	42b7      	cmp	r7, r6
 8008e48:	d01d      	beq.n	8008e86 <net::arp_handle(t_arp*)+0xfa>
 8008e4a:	4d13      	ldr	r5, [pc, #76]	@ (8008e98 <net::arp_handle(t_arp*)+0x10c>)
 8008e4c:	1da3      	adds	r3, r4, #6
 8008e4e:	f104 000c 	add.w	r0, r4, #12
 8008e52:	462a      	mov	r2, r5
 8008e54:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008e58:	f802 1b01 	strb.w	r1, [r2], #1
 8008e5c:	4283      	cmp	r3, r0
 8008e5e:	d1f9      	bne.n	8008e54 <net::arp_handle(t_arp*)+0xc8>
 8008e60:	f8d4 6026 	ldr.w	r6, [r4, #38]	@ 0x26
 8008e64:	4b0d      	ldr	r3, [pc, #52]	@ (8008e9c <net::arp_handle(t_arp*)+0x110>)
 8008e66:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8008e6a:	f803 2b01 	strb.w	r2, [r3], #1
 8008e6e:	45d1      	cmp	r9, sl
 8008e70:	d1f9      	bne.n	8008e66 <net::arp_handle(t_arp*)+0xda>
 8008e72:	69e3      	ldr	r3, [r4, #28]
 8008e74:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
 8008e78:	61ee      	str	r6, [r5, #28]
 8008e7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e7e:	4806      	ldr	r0, [pc, #24]	@ (8008e98 <net::arp_handle(t_arp*)+0x10c>)
 8008e80:	213c      	movs	r1, #60	@ 0x3c
 8008e82:	f00e bd49 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 8008e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	f04f 0801 	mov.w	r8, #1
 8008e90:	e79d      	b.n	8008dce <net::arp_handle(t_arp*)+0x42>
 8008e92:	4770      	bx	lr
 8008e94:	2000e230 	andcs	lr, r0, r0, lsr r2
 8008e98:	2000e260 	andcs	lr, r0, r0, ror #4
 8008e9c:	2000e280 	andcs	lr, r0, r0, lsl #5

08008ea0 <net::ip_handle(t_ip4*)>:
 8008ea0:	7b81      	ldrb	r1, [r0, #14]
 8008ea2:	7dc2      	ldrb	r2, [r0, #23]
 8008ea4:	2945      	cmp	r1, #69	@ 0x45
 8008ea6:	d121      	bne.n	8008eec <net::ip_handle(t_ip4*)+0x4c>
 8008ea8:	3a01      	subs	r2, #1
 8008eaa:	b508      	push	{r3, lr}
 8008eac:	2a10      	cmp	r2, #16
 8008eae:	d80a      	bhi.n	8008ec6 <net::ip_handle(t_ip4*)+0x26>
 8008eb0:	e8df f002 	tbb	[pc, r2]
 8008eb4:	0909120e 	stmdbeq	r9, {r1, r2, r3, r9, ip}
 8008eb8:	09091609 	stmdbeq	r9, {r0, r3, r9, sl, ip}
 8008ebc:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8008ec0:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8008ec4:	bd08000a 	stclt	0, cr0, [r8, #-40]	@ 0xffffffd8
 8008ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ecc:	f7ff bf1c 	b.w	8008d08 <net::udp_handle(t_udp*)>
 8008ed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ed4:	f000 b80e 	b.w	8008ef4 <net::icmp_handle(t_icmp*)>
 8008ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008edc:	f7ff bb6c 	b.w	80085b8 <net::igmp_handle(t_igmp*)>
 8008ee0:	f7ff fc02 	bl	80086e8 <net::tcp_handle(t_tcp*)>
 8008ee4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ee8:	f7ff bbd8 	b.w	800869c <net::tcp_run()>
 8008eec:	2a02      	cmp	r2, #2
 8008eee:	d0f5      	beq.n	8008edc <net::ip_handle(t_ip4*)+0x3c>
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop

08008ef4 <net::icmp_handle(t_icmp*)>:
 8008ef4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8008ef8:	2b08      	cmp	r3, #8
 8008efa:	d000      	beq.n	8008efe <net::icmp_handle(t_icmp*)+0xa>
 8008efc:	4770      	bx	lr
 8008efe:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1fa      	bne.n	8008efc <net::icmp_handle(t_icmp*)+0x8>
 8008f06:	f100 0c06 	add.w	ip, r0, #6
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4662      	mov	r2, ip
 8008f0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	459c      	cmp	ip, r3
 8008f18:	d1f9      	bne.n	8008f0e <net::icmp_handle(t_icmp*)+0x1a>
 8008f1a:	4a14      	ldr	r2, [pc, #80]	@ (8008f6c <net::icmp_handle(t_icmp*)+0x78>)
 8008f1c:	f100 0c0c 	add.w	ip, r0, #12
 8008f20:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008f24:	f803 1b01 	strb.w	r1, [r3], #1
 8008f28:	4563      	cmp	r3, ip
 8008f2a:	d1f9      	bne.n	8008f20 <net::icmp_handle(t_icmp*)+0x2c>
 8008f2c:	8a43      	ldrh	r3, [r0, #18]
 8008f2e:	4a10      	ldr	r2, [pc, #64]	@ (8008f70 <net::icmp_handle(t_icmp*)+0x7c>)
 8008f30:	f8d0 101e 	ldr.w	r1, [r0, #30]
 8008f34:	f8d0 c01a 	ldr.w	ip, [r0, #26]
 8008f38:	f8c0 c01e 	str.w	ip, [r0, #30]
 8008f3c:	43db      	mvns	r3, r3
 8008f3e:	8243      	strh	r3, [r0, #18]
 8008f40:	6913      	ldr	r3, [r2, #16]
 8008f42:	428b      	cmp	r3, r1
 8008f44:	8a01      	ldrh	r1, [r0, #16]
 8008f46:	bf18      	it	ne
 8008f48:	6813      	ldrne	r3, [r2, #0]
 8008f4a:	f8c0 301a 	str.w	r3, [r0, #26]
 8008f4e:	ba49      	rev16	r1, r1
 8008f50:	2300      	movs	r3, #0
 8008f52:	b289      	uxth	r1, r1
 8008f54:	7603      	strb	r3, [r0, #24]
 8008f56:	7643      	strb	r3, [r0, #25]
 8008f58:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8008f5c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8008f60:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 8008f64:	310e      	adds	r1, #14
 8008f66:	f00e bcd7 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 8008f6a:	bf00      	nop
 8008f6c:	2000e244 	andcs	lr, r0, r4, asr #4
 8008f70:	2000e230 	andcs	lr, r0, r0, lsr r2

08008f74 <__aeabi_drsub>:
 8008f74:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8008f78:	e002      	b.n	8008f80 <__adddf3>
 8008f7a:	bf00      	nop

08008f7c <__aeabi_dsub>:
 8008f7c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08008f80 <__adddf3>:
 8008f80:	b530      	push	{r4, r5, lr}
 8008f82:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008f86:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008f8a:	ea94 0f05 	teq	r4, r5
 8008f8e:	bf08      	it	eq
 8008f90:	ea90 0f02 	teqeq	r0, r2
 8008f94:	bf1f      	itttt	ne
 8008f96:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008f9a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008f9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008fa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008fa6:	f000 80e2 	beq.w	800916e <__adddf3+0x1ee>
 8008faa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008fae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008fb2:	bfb8      	it	lt
 8008fb4:	426d      	neglt	r5, r5
 8008fb6:	dd0c      	ble.n	8008fd2 <__adddf3+0x52>
 8008fb8:	442c      	add	r4, r5
 8008fba:	ea80 0202 	eor.w	r2, r0, r2
 8008fbe:	ea81 0303 	eor.w	r3, r1, r3
 8008fc2:	ea82 0000 	eor.w	r0, r2, r0
 8008fc6:	ea83 0101 	eor.w	r1, r3, r1
 8008fca:	ea80 0202 	eor.w	r2, r0, r2
 8008fce:	ea81 0303 	eor.w	r3, r1, r3
 8008fd2:	2d36      	cmp	r5, #54	@ 0x36
 8008fd4:	bf88      	it	hi
 8008fd6:	bd30      	pophi	{r4, r5, pc}
 8008fd8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8008fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008fe0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8008fe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008fe8:	d002      	beq.n	8008ff0 <__adddf3+0x70>
 8008fea:	4240      	negs	r0, r0
 8008fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ff0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8008ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008ff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008ffc:	d002      	beq.n	8009004 <__adddf3+0x84>
 8008ffe:	4252      	negs	r2, r2
 8009000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009004:	ea94 0f05 	teq	r4, r5
 8009008:	f000 80a7 	beq.w	800915a <__adddf3+0x1da>
 800900c:	f1a4 0401 	sub.w	r4, r4, #1
 8009010:	f1d5 0e20 	rsbs	lr, r5, #32
 8009014:	db0d      	blt.n	8009032 <__adddf3+0xb2>
 8009016:	fa02 fc0e 	lsl.w	ip, r2, lr
 800901a:	fa22 f205 	lsr.w	r2, r2, r5
 800901e:	1880      	adds	r0, r0, r2
 8009020:	f141 0100 	adc.w	r1, r1, #0
 8009024:	fa03 f20e 	lsl.w	r2, r3, lr
 8009028:	1880      	adds	r0, r0, r2
 800902a:	fa43 f305 	asr.w	r3, r3, r5
 800902e:	4159      	adcs	r1, r3
 8009030:	e00e      	b.n	8009050 <__adddf3+0xd0>
 8009032:	f1a5 0520 	sub.w	r5, r5, #32
 8009036:	f10e 0e20 	add.w	lr, lr, #32
 800903a:	2a01      	cmp	r2, #1
 800903c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8009040:	bf28      	it	cs
 8009042:	f04c 0c02 	orrcs.w	ip, ip, #2
 8009046:	fa43 f305 	asr.w	r3, r3, r5
 800904a:	18c0      	adds	r0, r0, r3
 800904c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8009050:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009054:	d507      	bpl.n	8009066 <__adddf3+0xe6>
 8009056:	f04f 0e00 	mov.w	lr, #0
 800905a:	f1dc 0c00 	rsbs	ip, ip, #0
 800905e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8009062:	eb6e 0101 	sbc.w	r1, lr, r1
 8009066:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800906a:	d31b      	bcc.n	80090a4 <__adddf3+0x124>
 800906c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8009070:	d30c      	bcc.n	800908c <__adddf3+0x10c>
 8009072:	0849      	lsrs	r1, r1, #1
 8009074:	ea5f 0030 	movs.w	r0, r0, rrx
 8009078:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800907c:	f104 0401 	add.w	r4, r4, #1
 8009080:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8009084:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8009088:	f080 809a 	bcs.w	80091c0 <__adddf3+0x240>
 800908c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8009090:	bf08      	it	eq
 8009092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009096:	f150 0000 	adcs.w	r0, r0, #0
 800909a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800909e:	ea41 0105 	orr.w	r1, r1, r5
 80090a2:	bd30      	pop	{r4, r5, pc}
 80090a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80090a8:	4140      	adcs	r0, r0
 80090aa:	eb41 0101 	adc.w	r1, r1, r1
 80090ae:	3c01      	subs	r4, #1
 80090b0:	bf28      	it	cs
 80090b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80090b6:	d2e9      	bcs.n	800908c <__adddf3+0x10c>
 80090b8:	f091 0f00 	teq	r1, #0
 80090bc:	bf04      	itt	eq
 80090be:	4601      	moveq	r1, r0
 80090c0:	2000      	moveq	r0, #0
 80090c2:	fab1 f381 	clz	r3, r1
 80090c6:	bf08      	it	eq
 80090c8:	3320      	addeq	r3, #32
 80090ca:	f1a3 030b 	sub.w	r3, r3, #11
 80090ce:	f1b3 0220 	subs.w	r2, r3, #32
 80090d2:	da0c      	bge.n	80090ee <__adddf3+0x16e>
 80090d4:	320c      	adds	r2, #12
 80090d6:	dd08      	ble.n	80090ea <__adddf3+0x16a>
 80090d8:	f102 0c14 	add.w	ip, r2, #20
 80090dc:	f1c2 020c 	rsb	r2, r2, #12
 80090e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80090e4:	fa21 f102 	lsr.w	r1, r1, r2
 80090e8:	e00c      	b.n	8009104 <__adddf3+0x184>
 80090ea:	f102 0214 	add.w	r2, r2, #20
 80090ee:	bfd8      	it	le
 80090f0:	f1c2 0c20 	rsble	ip, r2, #32
 80090f4:	fa01 f102 	lsl.w	r1, r1, r2
 80090f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80090fc:	bfdc      	itt	le
 80090fe:	ea41 010c 	orrle.w	r1, r1, ip
 8009102:	4090      	lslle	r0, r2
 8009104:	1ae4      	subs	r4, r4, r3
 8009106:	bfa2      	ittt	ge
 8009108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800910c:	4329      	orrge	r1, r5
 800910e:	bd30      	popge	{r4, r5, pc}
 8009110:	ea6f 0404 	mvn.w	r4, r4
 8009114:	3c1f      	subs	r4, #31
 8009116:	da1c      	bge.n	8009152 <__adddf3+0x1d2>
 8009118:	340c      	adds	r4, #12
 800911a:	dc0e      	bgt.n	800913a <__adddf3+0x1ba>
 800911c:	f104 0414 	add.w	r4, r4, #20
 8009120:	f1c4 0220 	rsb	r2, r4, #32
 8009124:	fa20 f004 	lsr.w	r0, r0, r4
 8009128:	fa01 f302 	lsl.w	r3, r1, r2
 800912c:	ea40 0003 	orr.w	r0, r0, r3
 8009130:	fa21 f304 	lsr.w	r3, r1, r4
 8009134:	ea45 0103 	orr.w	r1, r5, r3
 8009138:	bd30      	pop	{r4, r5, pc}
 800913a:	f1c4 040c 	rsb	r4, r4, #12
 800913e:	f1c4 0220 	rsb	r2, r4, #32
 8009142:	fa20 f002 	lsr.w	r0, r0, r2
 8009146:	fa01 f304 	lsl.w	r3, r1, r4
 800914a:	ea40 0003 	orr.w	r0, r0, r3
 800914e:	4629      	mov	r1, r5
 8009150:	bd30      	pop	{r4, r5, pc}
 8009152:	fa21 f004 	lsr.w	r0, r1, r4
 8009156:	4629      	mov	r1, r5
 8009158:	bd30      	pop	{r4, r5, pc}
 800915a:	f094 0f00 	teq	r4, #0
 800915e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8009162:	bf06      	itte	eq
 8009164:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8009168:	3401      	addeq	r4, #1
 800916a:	3d01      	subne	r5, #1
 800916c:	e74e      	b.n	800900c <__adddf3+0x8c>
 800916e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8009172:	bf18      	it	ne
 8009174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8009178:	d029      	beq.n	80091ce <__adddf3+0x24e>
 800917a:	ea94 0f05 	teq	r4, r5
 800917e:	bf08      	it	eq
 8009180:	ea90 0f02 	teqeq	r0, r2
 8009184:	d005      	beq.n	8009192 <__adddf3+0x212>
 8009186:	ea54 0c00 	orrs.w	ip, r4, r0
 800918a:	bf04      	itt	eq
 800918c:	4619      	moveq	r1, r3
 800918e:	4610      	moveq	r0, r2
 8009190:	bd30      	pop	{r4, r5, pc}
 8009192:	ea91 0f03 	teq	r1, r3
 8009196:	bf1e      	ittt	ne
 8009198:	2100      	movne	r1, #0
 800919a:	2000      	movne	r0, #0
 800919c:	bd30      	popne	{r4, r5, pc}
 800919e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80091a2:	d105      	bne.n	80091b0 <__adddf3+0x230>
 80091a4:	0040      	lsls	r0, r0, #1
 80091a6:	4149      	adcs	r1, r1
 80091a8:	bf28      	it	cs
 80091aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80091b4:	bf3c      	itt	cc
 80091b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80091ba:	bd30      	popcc	{r4, r5, pc}
 80091bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80091c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80091c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091c8:	f04f 0000 	mov.w	r0, #0
 80091cc:	bd30      	pop	{r4, r5, pc}
 80091ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80091d2:	bf1a      	itte	ne
 80091d4:	4619      	movne	r1, r3
 80091d6:	4610      	movne	r0, r2
 80091d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80091dc:	bf1c      	itt	ne
 80091de:	460b      	movne	r3, r1
 80091e0:	4602      	movne	r2, r0
 80091e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80091e6:	bf06      	itte	eq
 80091e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80091ec:	ea91 0f03 	teqeq	r1, r3
 80091f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80091f4:	bd30      	pop	{r4, r5, pc}
 80091f6:	bf00      	nop

080091f8 <__aeabi_ui2d>:
 80091f8:	f090 0f00 	teq	r0, #0
 80091fc:	bf04      	itt	eq
 80091fe:	2100      	moveq	r1, #0
 8009200:	4770      	bxeq	lr
 8009202:	b530      	push	{r4, r5, lr}
 8009204:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8009208:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800920c:	f04f 0500 	mov.w	r5, #0
 8009210:	f04f 0100 	mov.w	r1, #0
 8009214:	e750      	b.n	80090b8 <__adddf3+0x138>
 8009216:	bf00      	nop

08009218 <__aeabi_i2d>:
 8009218:	f090 0f00 	teq	r0, #0
 800921c:	bf04      	itt	eq
 800921e:	2100      	moveq	r1, #0
 8009220:	4770      	bxeq	lr
 8009222:	b530      	push	{r4, r5, lr}
 8009224:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8009228:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800922c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8009230:	bf48      	it	mi
 8009232:	4240      	negmi	r0, r0
 8009234:	f04f 0100 	mov.w	r1, #0
 8009238:	e73e      	b.n	80090b8 <__adddf3+0x138>
 800923a:	bf00      	nop

0800923c <__aeabi_f2d>:
 800923c:	0042      	lsls	r2, r0, #1
 800923e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8009242:	ea4f 0131 	mov.w	r1, r1, rrx
 8009246:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800924a:	bf1f      	itttt	ne
 800924c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8009250:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8009254:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8009258:	4770      	bxne	lr
 800925a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800925e:	bf08      	it	eq
 8009260:	4770      	bxeq	lr
 8009262:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8009266:	bf04      	itt	eq
 8009268:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800926c:	4770      	bxeq	lr
 800926e:	b530      	push	{r4, r5, lr}
 8009270:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8009274:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800927c:	e71c      	b.n	80090b8 <__adddf3+0x138>
 800927e:	bf00      	nop

08009280 <__aeabi_ul2d>:
 8009280:	ea50 0201 	orrs.w	r2, r0, r1
 8009284:	bf08      	it	eq
 8009286:	4770      	bxeq	lr
 8009288:	b530      	push	{r4, r5, lr}
 800928a:	f04f 0500 	mov.w	r5, #0
 800928e:	e00a      	b.n	80092a6 <__aeabi_l2d+0x16>

08009290 <__aeabi_l2d>:
 8009290:	ea50 0201 	orrs.w	r2, r0, r1
 8009294:	bf08      	it	eq
 8009296:	4770      	bxeq	lr
 8009298:	b530      	push	{r4, r5, lr}
 800929a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800929e:	d502      	bpl.n	80092a6 <__aeabi_l2d+0x16>
 80092a0:	4240      	negs	r0, r0
 80092a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80092a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80092aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80092ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80092b2:	f43f aed8 	beq.w	8009066 <__adddf3+0xe6>
 80092b6:	f04f 0203 	mov.w	r2, #3
 80092ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092be:	bf18      	it	ne
 80092c0:	3203      	addne	r2, #3
 80092c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80092c6:	bf18      	it	ne
 80092c8:	3203      	addne	r2, #3
 80092ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80092ce:	f1c2 0320 	rsb	r3, r2, #32
 80092d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80092d6:	fa20 f002 	lsr.w	r0, r0, r2
 80092da:	fa01 fe03 	lsl.w	lr, r1, r3
 80092de:	ea40 000e 	orr.w	r0, r0, lr
 80092e2:	fa21 f102 	lsr.w	r1, r1, r2
 80092e6:	4414      	add	r4, r2
 80092e8:	e6bd      	b.n	8009066 <__adddf3+0xe6>
 80092ea:	bf00      	nop

080092ec <__aeabi_d2f>:
 80092ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80092f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80092f4:	bf24      	itt	cs
 80092f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80092fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80092fe:	d90d      	bls.n	800931c <__aeabi_d2f+0x30>
 8009300:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8009304:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009308:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800930c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8009310:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8009314:	bf08      	it	eq
 8009316:	f020 0001 	biceq.w	r0, r0, #1
 800931a:	4770      	bx	lr
 800931c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8009320:	d121      	bne.n	8009366 <__aeabi_d2f+0x7a>
 8009322:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8009326:	bfbc      	itt	lt
 8009328:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800932c:	4770      	bxlt	lr
 800932e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8009332:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8009336:	f1c2 0218 	rsb	r2, r2, #24
 800933a:	f1c2 0c20 	rsb	ip, r2, #32
 800933e:	fa10 f30c 	lsls.w	r3, r0, ip
 8009342:	fa20 f002 	lsr.w	r0, r0, r2
 8009346:	bf18      	it	ne
 8009348:	f040 0001 	orrne.w	r0, r0, #1
 800934c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009350:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8009354:	fa03 fc0c 	lsl.w	ip, r3, ip
 8009358:	ea40 000c 	orr.w	r0, r0, ip
 800935c:	fa23 f302 	lsr.w	r3, r3, r2
 8009360:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009364:	e7cc      	b.n	8009300 <__aeabi_d2f+0x14>
 8009366:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800936a:	d107      	bne.n	800937c <__aeabi_d2f+0x90>
 800936c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8009370:	bf1e      	ittt	ne
 8009372:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8009376:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800937a:	4770      	bxne	lr
 800937c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8009380:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8009384:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop

0800938c <Reset_Handler>:
 800938c:	490f      	ldr	r1, [pc, #60]	@ (80093cc <ZeroBSSLoop+0x1e>)
 800938e:	4a10      	ldr	r2, [pc, #64]	@ (80093d0 <ZeroBSSLoop+0x22>)
 8009390:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <ZeroBSSLoop+0x26>)
 8009392:	1a5b      	subs	r3, r3, r1
 8009394:	d005      	beq.n	80093a2 <ZeroBSS>

08009396 <CopyDataLoop>:
 8009396:	f812 4b01 	ldrb.w	r4, [r2], #1
 800939a:	f801 4b01 	strb.w	r4, [r1], #1
 800939e:	3b01      	subs	r3, #1
 80093a0:	dcf9      	bgt.n	8009396 <CopyDataLoop>

080093a2 <ZeroBSS>:
 80093a2:	4a0d      	ldr	r2, [pc, #52]	@ (80093d8 <ZeroBSSLoop+0x2a>)
 80093a4:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <ZeroBSSLoop+0x2e>)
 80093a6:	eba3 0302 	sub.w	r3, r3, r2
 80093aa:	f04f 0400 	mov.w	r4, #0

080093ae <ZeroBSSLoop>:
 80093ae:	f842 4b04 	str.w	r4, [r2], #4
 80093b2:	3b04      	subs	r3, #4
 80093b4:	dcfb      	bgt.n	80093ae <ZeroBSSLoop>
 80093b6:	f010 fd8d 	bl	8019ed4 <stack_debug_init>
 80093ba:	f010 fdef 	bl	8019f9c <SystemInit>
 80093be:	f012 fd0d 	bl	801bddc <__libc_init_array>
 80093c2:	f000 feb1 	bl	800a128 <main>
 80093c6:	4770      	bx	lr
 80093c8:	bf00      	nop
 80093ca:	00000000 	andeq	r0, r0, r0
 80093ce:	190c2000 	stmdbne	ip, {sp}
 80093d2:	00780802 	rsbseq	r0, r8, r2, lsl #16
 80093d6:	00782000 	rsbseq	r2, r8, r0
 80093da:	bd142000 	ldclt	0, cr2, [r4, #-0]
 80093de:	 	ldrb	r2, [lr, r1]!

080093e0 <ADC_IRQHandler>:
 80093e0:	e7fe      	b.n	80093e0 <ADC_IRQHandler>

080093e2 <HardFault_Handler>:
 80093e2:	f01e 0f04 	tst.w	lr, #4
 80093e6:	bf0c      	ite	eq
 80093e8:	f3ef 8008 	mrseq	r0, MSP
 80093ec:	f3ef 8009 	mrsne	r0, PSP
 80093f0:	4671      	mov	r1, lr
 80093f2:	f000 b801 	b.w	80093f8 <hardfault_handler>
 80093f6:	4770      	bx	lr

080093f8 <hardfault_handler>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	4d2f      	ldr	r5, [pc, #188]	@ (80094bc <hardfault_handler+0xc4>)
 80093fe:	b087      	sub	sp, #28
 8009400:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	e9d0 9303 	ldrd	r9, r3, [r0, #12]
 800940c:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800940e:	9303      	str	r3, [sp, #12]
 8009410:	e9d0 ba01 	ldrd	fp, sl, [r0, #4]
 8009414:	69c3      	ldr	r3, [r0, #28]
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	e9d0 7605 	ldrd	r7, r6, [r0, #20]
 800941c:	4688      	mov	r8, r1
 800941e:	6801      	ldr	r1, [r0, #0]
 8009420:	4827      	ldr	r0, [pc, #156]	@ (80094c0 <hardfault_handler+0xc8>)
 8009422:	9105      	str	r1, [sp, #20]
 8009424:	f013 f802 	bl	801c42c <printf>
 8009428:	4826      	ldr	r0, [pc, #152]	@ (80094c4 <hardfault_handler+0xcc>)
 800942a:	f012 ffff 	bl	801c42c <printf>
 800942e:	9905      	ldr	r1, [sp, #20]
 8009430:	4825      	ldr	r0, [pc, #148]	@ (80094c8 <hardfault_handler+0xd0>)
 8009432:	f012 fffb 	bl	801c42c <printf>
 8009436:	4659      	mov	r1, fp
 8009438:	4824      	ldr	r0, [pc, #144]	@ (80094cc <hardfault_handler+0xd4>)
 800943a:	f012 fff7 	bl	801c42c <printf>
 800943e:	4651      	mov	r1, sl
 8009440:	4823      	ldr	r0, [pc, #140]	@ (80094d0 <hardfault_handler+0xd8>)
 8009442:	f012 fff3 	bl	801c42c <printf>
 8009446:	4649      	mov	r1, r9
 8009448:	4822      	ldr	r0, [pc, #136]	@ (80094d4 <hardfault_handler+0xdc>)
 800944a:	f012 ffef 	bl	801c42c <printf>
 800944e:	9903      	ldr	r1, [sp, #12]
 8009450:	4821      	ldr	r0, [pc, #132]	@ (80094d8 <hardfault_handler+0xe0>)
 8009452:	f012 ffeb 	bl	801c42c <printf>
 8009456:	4639      	mov	r1, r7
 8009458:	4820      	ldr	r0, [pc, #128]	@ (80094dc <hardfault_handler+0xe4>)
 800945a:	f012 ffe7 	bl	801c42c <printf>
 800945e:	4631      	mov	r1, r6
 8009460:	481f      	ldr	r0, [pc, #124]	@ (80094e0 <hardfault_handler+0xe8>)
 8009462:	f012 ffe3 	bl	801c42c <printf>
 8009466:	9904      	ldr	r1, [sp, #16]
 8009468:	481e      	ldr	r0, [pc, #120]	@ (80094e4 <hardfault_handler+0xec>)
 800946a:	f012 ffdf 	bl	801c42c <printf>
 800946e:	481e      	ldr	r0, [pc, #120]	@ (80094e8 <hardfault_handler+0xf0>)
 8009470:	f012 ffdc 	bl	801c42c <printf>
 8009474:	4621      	mov	r1, r4
 8009476:	481d      	ldr	r0, [pc, #116]	@ (80094ec <hardfault_handler+0xf4>)
 8009478:	f012 ffd8 	bl	801c42c <printf>
 800947c:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800947e:	481c      	ldr	r0, [pc, #112]	@ (80094f0 <hardfault_handler+0xf8>)
 8009480:	f012 ffd4 	bl	801c42c <printf>
 8009484:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8009486:	481b      	ldr	r0, [pc, #108]	@ (80094f4 <hardfault_handler+0xfc>)
 8009488:	f012 ffd0 	bl	801c42c <printf>
 800948c:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 800948e:	481a      	ldr	r0, [pc, #104]	@ (80094f8 <hardfault_handler+0x100>)
 8009490:	f012 ffcc 	bl	801c42c <printf>
 8009494:	0622      	lsls	r2, r4, #24
 8009496:	d503      	bpl.n	80094a0 <hardfault_handler+0xa8>
 8009498:	9902      	ldr	r1, [sp, #8]
 800949a:	4818      	ldr	r0, [pc, #96]	@ (80094fc <hardfault_handler+0x104>)
 800949c:	f012 ffc6 	bl	801c42c <printf>
 80094a0:	0423      	lsls	r3, r4, #16
 80094a2:	d503      	bpl.n	80094ac <hardfault_handler+0xb4>
 80094a4:	9901      	ldr	r1, [sp, #4]
 80094a6:	4816      	ldr	r0, [pc, #88]	@ (8009500 <hardfault_handler+0x108>)
 80094a8:	f012 ffc0 	bl	801c42c <printf>
 80094ac:	4815      	ldr	r0, [pc, #84]	@ (8009504 <hardfault_handler+0x10c>)
 80094ae:	f012 ffbd 	bl	801c42c <printf>
 80094b2:	4815      	ldr	r0, [pc, #84]	@ (8009508 <hardfault_handler+0x110>)
 80094b4:	4641      	mov	r1, r8
 80094b6:	f012 ffb9 	bl	801c42c <printf>
 80094ba:	e7fe      	b.n	80094ba <hardfault_handler+0xc2>
 80094bc:	e000ed00 	and	lr, r0, r0, lsl #26
 80094c0:	0801ca00 	stmdaeq	r1, {r9, fp, lr, pc}
 80094c4:	0801ca0d 	stmdaeq	r1, {r0, r2, r3, r9, fp, lr, pc}
 80094c8:	0801ca1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, fp, lr, pc}
 80094cc:	0801ca28 	stmdaeq	r1, {r3, r5, r9, fp, lr, pc}
 80094d0:	0801ca33 	stmdaeq	r1, {r0, r1, r4, r5, r9, fp, lr, pc}
 80094d4:	0801ca3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, fp, lr, pc}
 80094d8:	0801ca49 	stmdaeq	r1, {r0, r3, r6, r9, fp, lr, pc}
 80094dc:	0801ca54 	stmdaeq	r1, {r2, r4, r6, r9, fp, lr, pc}
 80094e0:	0801ca5f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r9, fp, lr, pc}
 80094e4:	0801ca6a 	stmdaeq	r1, {r1, r3, r5, r6, r9, fp, lr, pc}
 80094e8:	0801ca75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, fp, lr, pc}
 80094ec:	0801ca81 	stmdaeq	r1, {r0, r7, r9, fp, lr, pc}
 80094f0:	0801ca8d 	stmdaeq	r1, {r0, r2, r3, r7, r9, fp, lr, pc}
 80094f4:	0801ca99 	stmdaeq	r1, {r0, r3, r4, r7, r9, fp, lr, pc}
 80094f8:	0801caa5 	stmdaeq	r1, {r0, r2, r5, r7, r9, fp, lr, pc}
 80094fc:	0801cab1 	stmdaeq	r1, {r0, r4, r5, r7, r9, fp, lr, pc}
 8009500:	0801cabe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r9, fp, lr, pc}
 8009504:	0801caca 	stmdaeq	r1, {r1, r3, r6, r7, r9, fp, lr, pc}
 8009508:	0801cad2 	stmdaeq	r1, {r1, r4, r6, r7, r9, fp, lr, pc}

0800950c <LightSet::GetRefreshRate()>:
 800950c:	2000      	movs	r0, #0
 800950e:	4770      	bx	lr

08009510 <LightSet::FullOn()>:
 8009510:	4770      	bx	lr

08009512 <LightSet::SetDmxStartAddress(unsigned short)>:
 8009512:	2000      	movs	r0, #0
 8009514:	4770      	bx	lr

08009516 <LightSet::GetDmxStartAddress()>:
 8009516:	2001      	movs	r0, #1
 8009518:	4770      	bx	lr

0800951a <LightSet::GetDmxFootprint()>:
 800951a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800951e:	4770      	bx	lr

08009520 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8009520:	2300      	movs	r3, #0
 8009522:	2001      	movs	r0, #1
 8009524:	7093      	strb	r3, [r2, #2]
 8009526:	8010      	strh	r0, [r2, #0]
 8009528:	4770      	bx	lr

0800952a <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 800952a:	4770      	bx	lr

0800952c <DmxSend::GetRefreshRate()>:
 800952c:	4b03      	ldr	r3, [pc, #12]	@ (800953c <DmxSend::GetRefreshRate()+0x10>)
 800952e:	4804      	ldr	r0, [pc, #16]	@ (8009540 <DmxSend::GetRefreshRate()+0x14>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	fbb0 f0f3 	udiv	r0, r0, r3
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	2000d414 	andcs	sp, r0, r4, lsl r4
 8009540:	000f4240 	andeq	r4, pc, r0, asr #4

08009544 <DmxSend::~DmxSend()>:
 8009544:	4770      	bx	lr

08009546 <LightSetWith4<64ul>::~LightSetWith4()>:
 8009546:	4770      	bx	lr

08009548 <LightSetWith4<64ul>::Print()>:
 8009548:	b510      	push	{r4, lr}
 800954a:	4604      	mov	r4, r0
 800954c:	6840      	ldr	r0, [r0, #4]
 800954e:	b110      	cbz	r0, 8009556 <LightSetWith4<64ul>::Print()+0xe>
 8009550:	6803      	ldr	r3, [r0, #0]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	4798      	blx	r3
 8009556:	68a0      	ldr	r0, [r4, #8]
 8009558:	b120      	cbz	r0, 8009564 <LightSetWith4<64ul>::Print()+0x1c>
 800955a:	6803      	ldr	r3, [r0, #0]
 800955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009562:	4718      	bx	r3
 8009564:	bd10      	pop	{r4, pc}

08009566 <LightSetWith4<64ul>::Start(unsigned long)>:
 8009566:	293f      	cmp	r1, #63	@ 0x3f
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	d804      	bhi.n	8009578 <LightSetWith4<64ul>::Start(unsigned long)+0x12>
 800956e:	6840      	ldr	r0, [r0, #4]
 8009570:	b110      	cbz	r0, 8009578 <LightSetWith4<64ul>::Start(unsigned long)+0x12>
 8009572:	6803      	ldr	r3, [r0, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	4718      	bx	r3
 8009578:	6890      	ldr	r0, [r2, #8]
 800957a:	b120      	cbz	r0, 8009586 <LightSetWith4<64ul>::Start(unsigned long)+0x20>
 800957c:	6802      	ldr	r2, [r0, #0]
 800957e:	f003 0103 	and.w	r1, r3, #3
 8009582:	6892      	ldr	r2, [r2, #8]
 8009584:	4710      	bx	r2
 8009586:	4770      	bx	lr

08009588 <LightSetWith4<64ul>::Stop(unsigned long)>:
 8009588:	293f      	cmp	r1, #63	@ 0x3f
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	d804      	bhi.n	800959a <LightSetWith4<64ul>::Stop(unsigned long)+0x12>
 8009590:	6840      	ldr	r0, [r0, #4]
 8009592:	b110      	cbz	r0, 800959a <LightSetWith4<64ul>::Stop(unsigned long)+0x12>
 8009594:	6803      	ldr	r3, [r0, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4718      	bx	r3
 800959a:	6890      	ldr	r0, [r2, #8]
 800959c:	b120      	cbz	r0, 80095a8 <LightSetWith4<64ul>::Stop(unsigned long)+0x20>
 800959e:	6802      	ldr	r2, [r0, #0]
 80095a0:	f003 0103 	and.w	r1, r3, #3
 80095a4:	68d2      	ldr	r2, [r2, #12]
 80095a6:	4710      	bx	r2
 80095a8:	4770      	bx	lr

080095aa <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 80095aa:	b4f0      	push	{r4, r5, r6, r7}
 80095ac:	293f      	cmp	r1, #63	@ 0x3f
 80095ae:	f89d c010 	ldrb.w	ip, [sp, #16]
 80095b2:	4605      	mov	r5, r0
 80095b4:	460c      	mov	r4, r1
 80095b6:	4616      	mov	r6, r2
 80095b8:	461f      	mov	r7, r3
 80095ba:	d808      	bhi.n	80095ce <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x24>
 80095bc:	6840      	ldr	r0, [r0, #4]
 80095be:	b130      	cbz	r0, 80095ce <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x24>
 80095c0:	6804      	ldr	r4, [r0, #0]
 80095c2:	f8cd c010 	str.w	ip, [sp, #16]
 80095c6:	6924      	ldr	r4, [r4, #16]
 80095c8:	46a4      	mov	ip, r4
 80095ca:	bcf0      	pop	{r4, r5, r6, r7}
 80095cc:	4760      	bx	ip
 80095ce:	68a8      	ldr	r0, [r5, #8]
 80095d0:	b148      	cbz	r0, 80095e6 <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x3c>
 80095d2:	6803      	ldr	r3, [r0, #0]
 80095d4:	f8cd c010 	str.w	ip, [sp, #16]
 80095d8:	691d      	ldr	r5, [r3, #16]
 80095da:	4632      	mov	r2, r6
 80095dc:	463b      	mov	r3, r7
 80095de:	f004 0103 	and.w	r1, r4, #3
 80095e2:	46ac      	mov	ip, r5
 80095e4:	e7f1      	b.n	80095ca <LightSetWith4<64ul>::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x20>
 80095e6:	bcf0      	pop	{r4, r5, r6, r7}
 80095e8:	4770      	bx	lr

080095ea <LightSetWith4<64ul>::Sync(unsigned long)>:
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	6840      	ldr	r0, [r0, #4]
 80095f0:	460d      	mov	r5, r1
 80095f2:	b110      	cbz	r0, 80095fa <LightSetWith4<64ul>::Sync(unsigned long)+0x10>
 80095f4:	6803      	ldr	r3, [r0, #0]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	4798      	blx	r3
 80095fa:	68a0      	ldr	r0, [r4, #8]
 80095fc:	b128      	cbz	r0, 800960a <LightSetWith4<64ul>::Sync(unsigned long)+0x20>
 80095fe:	6803      	ldr	r3, [r0, #0]
 8009600:	4629      	mov	r1, r5
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009608:	4718      	bx	r3
 800960a:	bd70      	pop	{r4, r5, r6, pc}

0800960c <LightSetWith4<64ul>::Sync()>:
 800960c:	b510      	push	{r4, lr}
 800960e:	4604      	mov	r4, r0
 8009610:	6840      	ldr	r0, [r0, #4]
 8009612:	b110      	cbz	r0, 800961a <LightSetWith4<64ul>::Sync()+0xe>
 8009614:	6803      	ldr	r3, [r0, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	4798      	blx	r3
 800961a:	68a0      	ldr	r0, [r4, #8]
 800961c:	b120      	cbz	r0, 8009628 <LightSetWith4<64ul>::Sync()+0x1c>
 800961e:	6803      	ldr	r3, [r0, #0]
 8009620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	4718      	bx	r3
 8009628:	bd10      	pop	{r4, pc}

0800962a <LightSetWith4<64ul>::Blackout(bool)>:
 800962a:	b570      	push	{r4, r5, r6, lr}
 800962c:	4604      	mov	r4, r0
 800962e:	6840      	ldr	r0, [r0, #4]
 8009630:	460d      	mov	r5, r1
 8009632:	b110      	cbz	r0, 800963a <LightSetWith4<64ul>::Blackout(bool)+0x10>
 8009634:	6803      	ldr	r3, [r0, #0]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	4798      	blx	r3
 800963a:	68a0      	ldr	r0, [r4, #8]
 800963c:	b128      	cbz	r0, 800964a <LightSetWith4<64ul>::Blackout(bool)+0x20>
 800963e:	6803      	ldr	r3, [r0, #0]
 8009640:	4629      	mov	r1, r5
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009648:	4718      	bx	r3
 800964a:	bd70      	pop	{r4, r5, r6, pc}

0800964c <LightSetWith4<64ul>::SetDmxStartAddress(unsigned short)>:
 800964c:	2000      	movs	r0, #0
 800964e:	4770      	bx	lr

08009650 <LightSetWith4<64ul>::GetDmxStartAddress()>:
 8009650:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009654:	4770      	bx	lr

08009656 <LightSetWith4<64ul>::GetDmxFootprint()>:
 8009656:	2000      	movs	r0, #0
 8009658:	4770      	bx	lr

0800965a <LightSetWith4<64ul>::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800965a:	2000      	movs	r0, #0
 800965c:	4770      	bx	lr
	...

08009660 <DmxSend::Blackout(bool)>:
 8009660:	4b01      	ldr	r3, [pc, #4]	@ (8009668 <DmxSend::Blackout(bool)+0x8>)
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	f007 bd98 	b.w	8011198 <Dmx::Blackout()>
 8009668:	2000d414 	andcs	sp, r0, r4, lsl r4

0800966c <DmxSend::FullOn()>:
 800966c:	4b01      	ldr	r3, [pc, #4]	@ (8009674 <DmxSend::FullOn()+0x8>)
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	f007 bdf8 	b.w	8011264 <Dmx::FullOn()>
 8009674:	2000d414 	andcs	sp, r0, r4, lsl r4

08009678 <DmxSend::Sync(unsigned long)>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	4d14      	ldr	r5, [pc, #80]	@ (80096cc <DmxSend::Sync(unsigned long)+0x54>)
 800967c:	f240 6304 	movw	r3, #1540	@ 0x604
 8009680:	fb03 5301 	mla	r3, r3, r1, r5
 8009684:	460c      	mov	r4, r1
 8009686:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 800968a:	b92b      	cbnz	r3, 8009698 <DmxSend::Sync(unsigned long)+0x20>
 800968c:	4b10      	ldr	r3, [pc, #64]	@ (80096d0 <DmxSend::Sync(unsigned long)+0x58>)
 800968e:	4a11      	ldr	r2, [pc, #68]	@ (80096d4 <DmxSend::Sync(unsigned long)+0x5c>)
 8009690:	4811      	ldr	r0, [pc, #68]	@ (80096d8 <DmxSend::Sync(unsigned long)+0x60>)
 8009692:	2163      	movs	r1, #99	@ 0x63
 8009694:	f012 ffaa 	bl	801c5ec <__assert_func>
 8009698:	4b10      	ldr	r3, [pc, #64]	@ (80096dc <DmxSend::Sync(unsigned long)+0x64>)
 800969a:	2c21      	cmp	r4, #33	@ 0x21
 800969c:	681e      	ldr	r6, [r3, #0]
 800969e:	d905      	bls.n	80096ac <DmxSend::Sync(unsigned long)+0x34>
 80096a0:	4b0f      	ldr	r3, [pc, #60]	@ (80096e0 <DmxSend::Sync(unsigned long)+0x68>)
 80096a2:	4a10      	ldr	r2, [pc, #64]	@ (80096e4 <DmxSend::Sync(unsigned long)+0x6c>)
 80096a4:	4810      	ldr	r0, [pc, #64]	@ (80096e8 <DmxSend::Sync(unsigned long)+0x70>)
 80096a6:	21b5      	movs	r1, #181	@ 0xb5
 80096a8:	f012 ffa0 	bl	801c5ec <__assert_func>
 80096ac:	f240 6204 	movw	r2, #1540	@ 0x604
 80096b0:	4362      	muls	r2, r4
 80096b2:	18ab      	adds	r3, r5, r2
 80096b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80096b8:	442a      	add	r2, r5
 80096ba:	4621      	mov	r1, r4
 80096bc:	4630      	mov	r0, r6
 80096be:	f8d3 3600 	ldr.w	r3, [r3, #1536]	@ 0x600
 80096c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096c6:	f007 bd17 	b.w	80110f8 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)>
 80096ca:	bf00      	nop
 80096cc:	20000080 	andcs	r0, r0, r0, lsl #1
 80096d0:	0801cae6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, fp, lr, pc}
 80096d4:	0801cb11 	stmdaeq	r1, {r0, r4, r8, r9, fp, lr, pc}
 80096d8:	0801cb16 	stmdaeq	r1, {r1, r2, r4, r8, r9, fp, lr, pc}
 80096dc:	2000d414 	andcs	sp, r0, r4, lsl r4
 80096e0:	0801cb33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, fp, lr, pc}
 80096e4:	0801cb46 	stmdaeq	r1, {r1, r2, r6, r8, r9, fp, lr, pc}
 80096e8:	0801cb4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, fp, lr, pc}

080096ec <DmxSend::~DmxSend()>:
 80096ec:	b510      	push	{r4, lr}
 80096ee:	2108      	movs	r1, #8
 80096f0:	4604      	mov	r4, r0
 80096f2:	f013 f8ef 	bl	801c8d4 <operator delete(void*, unsigned int)>
 80096f6:	4620      	mov	r0, r4
 80096f8:	bd10      	pop	{r4, pc}

080096fa <LightSetWith4<64ul>::~LightSetWith4()>:
 80096fa:	b510      	push	{r4, lr}
 80096fc:	210c      	movs	r1, #12
 80096fe:	4604      	mov	r4, r0
 8009700:	f013 f8e8 	bl	801c8d4 <operator delete(void*, unsigned int)>
 8009704:	4620      	mov	r0, r4
 8009706:	bd10      	pop	{r4, pc}

08009708 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8009708:	b510      	push	{r4, lr}
 800970a:	210c      	movs	r1, #12
 800970c:	4604      	mov	r4, r0
 800970e:	f013 f8e1 	bl	801c8d4 <operator delete(void*, unsigned int)>
 8009712:	4620      	mov	r0, r4
 8009714:	bd10      	pop	{r4, pc}
	...

08009718 <DmxSend::Print()>:
 8009718:	b510      	push	{r4, lr}
 800971a:	4c10      	ldr	r4, [pc, #64]	@ (800975c <DmxSend::Print()+0x44>)
 800971c:	4810      	ldr	r0, [pc, #64]	@ (8009760 <DmxSend::Print()+0x48>)
 800971e:	f012 feda 	bl	801c4d6 <puts>
 8009722:	6820      	ldr	r0, [r4, #0]
 8009724:	f007 fc3a 	bl	8010f9c <Dmx::GetDmxBreakTime() const>
 8009728:	4601      	mov	r1, r0
 800972a:	480e      	ldr	r0, [pc, #56]	@ (8009764 <DmxSend::Print()+0x4c>)
 800972c:	f012 fe7e 	bl	801c42c <printf>
 8009730:	6820      	ldr	r0, [r4, #0]
 8009732:	f007 fc69 	bl	8011008 <Dmx::GetDmxMabTime() const>
 8009736:	4601      	mov	r1, r0
 8009738:	480b      	ldr	r0, [pc, #44]	@ (8009768 <DmxSend::Print()+0x50>)
 800973a:	f012 fe77 	bl	801c42c <printf>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	490a      	ldr	r1, [pc, #40]	@ (800976c <DmxSend::Print()+0x54>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	480a      	ldr	r0, [pc, #40]	@ (8009770 <DmxSend::Print()+0x58>)
 8009746:	fbb1 f1f3 	udiv	r1, r1, r3
 800974a:	f012 fe6f 	bl	801c42c <printf>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	4808      	ldr	r0, [pc, #32]	@ (8009774 <DmxSend::Print()+0x5c>)
 8009752:	8a19      	ldrh	r1, [r3, #16]
 8009754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009758:	f012 be68 	b.w	801c42c <printf>
 800975c:	2000d414 	andcs	sp, r0, r4, lsl r4
 8009760:	0801cb75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, fp, lr, pc}
 8009764:	0801cb7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, fp, lr, pc}
 8009768:	0801cb92 	stmdaeq	r1, {r1, r4, r7, r8, r9, fp, lr, pc}
 800976c:	000f4240 	andeq	r4, pc, r0, asr #4
 8009770:	0801cba6 	stmdaeq	r1, {r1, r2, r5, r7, r8, r9, fp, lr, pc}
 8009774:	0801cbba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, fp, lr, pc}

08009778 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	2907      	cmp	r1, #7
 800977c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8009780:	460c      	mov	r4, r1
 8009782:	4615      	mov	r5, r2
 8009784:	461e      	mov	r6, r3
 8009786:	d905      	bls.n	8009794 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1c>
 8009788:	4b11      	ldr	r3, [pc, #68]	@ (80097d0 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x58>)
 800978a:	4a12      	ldr	r2, [pc, #72]	@ (80097d4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5c>)
 800978c:	4812      	ldr	r0, [pc, #72]	@ (80097d8 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x60>)
 800978e:	2157      	movs	r1, #87	@ 0x57
 8009790:	f012 ff2c 	bl	801c5ec <__assert_func>
 8009794:	b92d      	cbnz	r5, 80097a2 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 8009796:	4b11      	ldr	r3, [pc, #68]	@ (80097dc <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x64>)
 8009798:	4a0e      	ldr	r2, [pc, #56]	@ (80097d4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5c>)
 800979a:	480f      	ldr	r0, [pc, #60]	@ (80097d8 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x60>)
 800979c:	2158      	movs	r1, #88	@ 0x58
 800979e:	f012 ff25 	bl	801c5ec <__assert_func>
 80097a2:	b92e      	cbnz	r6, 80097b0 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x38>
 80097a4:	4b0e      	ldr	r3, [pc, #56]	@ (80097e0 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x68>)
 80097a6:	4a0b      	ldr	r2, [pc, #44]	@ (80097d4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x5c>)
 80097a8:	480b      	ldr	r0, [pc, #44]	@ (80097d8 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x60>)
 80097aa:	2159      	movs	r1, #89	@ 0x59
 80097ac:	f012 ff1e 	bl	801c5ec <__assert_func>
 80097b0:	b167      	cbz	r7, 80097cc <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x54>
 80097b2:	4f0c      	ldr	r7, [pc, #48]	@ (80097e4 <DmxSend::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x6c>)
 80097b4:	4621      	mov	r1, r4
 80097b6:	6838      	ldr	r0, [r7, #0]
 80097b8:	4633      	mov	r3, r6
 80097ba:	462a      	mov	r2, r5
 80097bc:	f007 fc9c 	bl	80110f8 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)>
 80097c0:	6838      	ldr	r0, [r7, #0]
 80097c2:	4621      	mov	r1, r4
 80097c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097c8:	f007 bdb4 	b.w	8011334 <Dmx::StartOutput(unsigned long)>
 80097cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ce:	bf00      	nop
 80097d0:	0801cbce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, fp, lr, pc}
 80097d4:	0801cbe4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, fp, lr, pc}
 80097d8:	0801cb16 	stmdaeq	r1, {r1, r2, r4, r8, r9, fp, lr, pc}
 80097dc:	0801cbec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, lr, pc}
 80097e0:	0801cbfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, lr, pc}
 80097e4:	2000d414 	andcs	sp, r0, r4, lsl r4

080097e8 <DmxSend::Stop(unsigned long)>:
 80097e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ea:	2343      	movs	r3, #67	@ 0x43
 80097ec:	460c      	mov	r4, r1
 80097ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009860 <DmxSend::Stop(unsigned long)+0x78>)
 80097f0:	491c      	ldr	r1, [pc, #112]	@ (8009864 <DmxSend::Stop(unsigned long)+0x7c>)
 80097f2:	4605      	mov	r5, r0
 80097f4:	481c      	ldr	r0, [pc, #112]	@ (8009868 <DmxSend::Stop(unsigned long)+0x80>)
 80097f6:	f012 fe19 	bl	801c42c <printf>
 80097fa:	b2e2      	uxtb	r2, r4
 80097fc:	2301      	movs	r3, #1
 80097fe:	4093      	lsls	r3, r2
 8009800:	792a      	ldrb	r2, [r5, #4]
 8009802:	4917      	ldr	r1, [pc, #92]	@ (8009860 <DmxSend::Stop(unsigned long)+0x78>)
 8009804:	4819      	ldr	r0, [pc, #100]	@ (800986c <DmxSend::Stop(unsigned long)+0x84>)
 8009806:	4393      	bics	r3, r2
 8009808:	bf0c      	ite	eq
 800980a:	2301      	moveq	r3, #1
 800980c:	2300      	movne	r3, #0
 800980e:	e9cd 4300 	strd	r4, r3, [sp]
 8009812:	4a14      	ldr	r2, [pc, #80]	@ (8009864 <DmxSend::Stop(unsigned long)+0x7c>)
 8009814:	2344      	movs	r3, #68	@ 0x44
 8009816:	f012 fe09 	bl	801c42c <printf>
 800981a:	2c07      	cmp	r4, #7
 800981c:	d905      	bls.n	800982a <DmxSend::Stop(unsigned long)+0x42>
 800981e:	4b14      	ldr	r3, [pc, #80]	@ (8009870 <DmxSend::Stop(unsigned long)+0x88>)
 8009820:	4a0f      	ldr	r2, [pc, #60]	@ (8009860 <DmxSend::Stop(unsigned long)+0x78>)
 8009822:	4810      	ldr	r0, [pc, #64]	@ (8009864 <DmxSend::Stop(unsigned long)+0x7c>)
 8009824:	2146      	movs	r1, #70	@ 0x46
 8009826:	f012 fee1 	bl	801c5ec <__assert_func>
 800982a:	792b      	ldrb	r3, [r5, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	40a2      	lsls	r2, r4
 8009830:	ea32 0103 	bics.w	r1, r2, r3
 8009834:	d008      	beq.n	8009848 <DmxSend::Stop(unsigned long)+0x60>
 8009836:	2349      	movs	r3, #73	@ 0x49
 8009838:	4a09      	ldr	r2, [pc, #36]	@ (8009860 <DmxSend::Stop(unsigned long)+0x78>)
 800983a:	490a      	ldr	r1, [pc, #40]	@ (8009864 <DmxSend::Stop(unsigned long)+0x7c>)
 800983c:	480d      	ldr	r0, [pc, #52]	@ (8009874 <DmxSend::Stop(unsigned long)+0x8c>)
 800983e:	b003      	add	sp, #12
 8009840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009844:	f012 bdf2 	b.w	801c42c <printf>
 8009848:	ea23 0302 	bic.w	r3, r3, r2
 800984c:	480a      	ldr	r0, [pc, #40]	@ (8009878 <DmxSend::Stop(unsigned long)+0x90>)
 800984e:	712b      	strb	r3, [r5, #4]
 8009850:	2300      	movs	r3, #0
 8009852:	461a      	mov	r2, r3
 8009854:	6800      	ldr	r0, [r0, #0]
 8009856:	4621      	mov	r1, r4
 8009858:	f007 fa92 	bl	8010d80 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 800985c:	2353      	movs	r3, #83	@ 0x53
 800985e:	e7eb      	b.n	8009838 <DmxSend::Stop(unsigned long)+0x50>
 8009860:	0801cc0a 	stmdaeq	r1, {r1, r3, sl, fp, lr, pc}
 8009864:	0801cb16 	stmdaeq	r1, {r1, r2, r4, r8, r9, fp, lr, pc}
 8009868:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 800986c:	0801cc1d 	stmdaeq	r1, {r0, r2, r3, r4, sl, fp, lr, pc}
 8009870:	0801cbce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, fp, lr, pc}
 8009874:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}
 8009878:	2000d414 	andcs	sp, r0, r4, lsl r4

0800987c <DmxSend::Start(unsigned long)>:
 800987c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800987e:	232d      	movs	r3, #45	@ 0x2d
 8009880:	460c      	mov	r4, r1
 8009882:	4a19      	ldr	r2, [pc, #100]	@ (80098e8 <DmxSend::Start(unsigned long)+0x6c>)
 8009884:	4919      	ldr	r1, [pc, #100]	@ (80098ec <DmxSend::Start(unsigned long)+0x70>)
 8009886:	4605      	mov	r5, r0
 8009888:	4819      	ldr	r0, [pc, #100]	@ (80098f0 <DmxSend::Start(unsigned long)+0x74>)
 800988a:	f012 fdcf 	bl	801c42c <printf>
 800988e:	4a17      	ldr	r2, [pc, #92]	@ (80098ec <DmxSend::Start(unsigned long)+0x70>)
 8009890:	4915      	ldr	r1, [pc, #84]	@ (80098e8 <DmxSend::Start(unsigned long)+0x6c>)
 8009892:	4818      	ldr	r0, [pc, #96]	@ (80098f4 <DmxSend::Start(unsigned long)+0x78>)
 8009894:	9400      	str	r4, [sp, #0]
 8009896:	232e      	movs	r3, #46	@ 0x2e
 8009898:	f012 fdc8 	bl	801c42c <printf>
 800989c:	2c07      	cmp	r4, #7
 800989e:	d905      	bls.n	80098ac <DmxSend::Start(unsigned long)+0x30>
 80098a0:	4b15      	ldr	r3, [pc, #84]	@ (80098f8 <DmxSend::Start(unsigned long)+0x7c>)
 80098a2:	4a11      	ldr	r2, [pc, #68]	@ (80098e8 <DmxSend::Start(unsigned long)+0x6c>)
 80098a4:	4811      	ldr	r0, [pc, #68]	@ (80098ec <DmxSend::Start(unsigned long)+0x70>)
 80098a6:	2130      	movs	r1, #48	@ 0x30
 80098a8:	f012 fea0 	bl	801c5ec <__assert_func>
 80098ac:	792a      	ldrb	r2, [r5, #4]
 80098ae:	2301      	movs	r3, #1
 80098b0:	fa03 f104 	lsl.w	r1, r3, r4
 80098b4:	ea31 0002 	bics.w	r0, r1, r2
 80098b8:	d108      	bne.n	80098cc <DmxSend::Start(unsigned long)+0x50>
 80098ba:	2333      	movs	r3, #51	@ 0x33
 80098bc:	4a0a      	ldr	r2, [pc, #40]	@ (80098e8 <DmxSend::Start(unsigned long)+0x6c>)
 80098be:	490b      	ldr	r1, [pc, #44]	@ (80098ec <DmxSend::Start(unsigned long)+0x70>)
 80098c0:	480e      	ldr	r0, [pc, #56]	@ (80098fc <DmxSend::Start(unsigned long)+0x80>)
 80098c2:	b003      	add	sp, #12
 80098c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098c8:	f012 bdb0 	b.w	801c42c <printf>
 80098cc:	430a      	orrs	r2, r1
 80098ce:	712a      	strb	r2, [r5, #4]
 80098d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009900 <DmxSend::Start(unsigned long)+0x84>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	6828      	ldr	r0, [r5, #0]
 80098d6:	4621      	mov	r1, r4
 80098d8:	f007 fa52 	bl	8010d80 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 80098dc:	6828      	ldr	r0, [r5, #0]
 80098de:	4621      	mov	r1, r4
 80098e0:	f007 fc00 	bl	80110e4 <Dmx::GetOutputStyle(unsigned long) const>
 80098e4:	233f      	movs	r3, #63	@ 0x3f
 80098e6:	e7e9      	b.n	80098bc <DmxSend::Start(unsigned long)+0x40>
 80098e8:	0801cc52 	stmdaeq	r1, {r1, r4, r6, sl, fp, lr, pc}
 80098ec:	0801cb16 	stmdaeq	r1, {r1, r2, r4, r8, r9, fp, lr, pc}
 80098f0:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 80098f4:	0801cc58 	stmdaeq	r1, {r3, r4, r6, sl, fp, lr, pc}
 80098f8:	0801cbce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, fp, lr, pc}
 80098fc:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}
 8009900:	2000d414 	andcs	sp, r0, r4, lsl r4

08009904 <DmxSend::Sync()>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4b10      	ldr	r3, [pc, #64]	@ (8009948 <DmxSend::Sync()+0x44>)
 8009908:	4d10      	ldr	r5, [pc, #64]	@ (800994c <DmxSend::Sync()+0x48>)
 800990a:	4604      	mov	r4, r0
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	f007 fd2b 	bl	8011368 <Dmx::Sync()>
 8009912:	f8d5 3600 	ldr.w	r3, [r5, #1536]	@ 0x600
 8009916:	b14b      	cbz	r3, 800992c <DmxSend::Sync()+0x28>
 8009918:	2300      	movs	r3, #0
 800991a:	f8c5 3600 	str.w	r3, [r5, #1536]	@ 0x600
 800991e:	7921      	ldrb	r1, [r4, #4]
 8009920:	f011 0101 	ands.w	r1, r1, #1
 8009924:	d102      	bne.n	800992c <DmxSend::Sync()+0x28>
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff ffa8 	bl	800987c <DmxSend::Start(unsigned long)>
 800992c:	f8d5 3c04 	ldr.w	r3, [r5, #3076]	@ 0xc04
 8009930:	b14b      	cbz	r3, 8009946 <DmxSend::Sync()+0x42>
 8009932:	2300      	movs	r3, #0
 8009934:	f8c5 3c04 	str.w	r3, [r5, #3076]	@ 0xc04
 8009938:	7923      	ldrb	r3, [r4, #4]
 800993a:	079b      	lsls	r3, r3, #30
 800993c:	d403      	bmi.n	8009946 <DmxSend::Sync()+0x42>
 800993e:	2101      	movs	r1, #1
 8009940:	4620      	mov	r0, r4
 8009942:	f7ff ff9b 	bl	800987c <DmxSend::Start(unsigned long)>
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	2000d414 	andcs	sp, r0, r4, lsl r4
 800994c:	20000080 	andcs	r0, r0, r0, lsl #1

08009950 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>:
 8009950:	b110      	cbz	r0, 8009958 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]+0x8>
 8009952:	6803      	ldr	r3, [r0, #0]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	4718      	bx	r3
 8009958:	4770      	bx	lr

0800995a <Display::PutChar(int) [clone .isra.0]>:
 800995a:	b110      	cbz	r0, 8009962 <Display::PutChar(int) [clone .isra.0]+0x8>
 800995c:	6803      	ldr	r3, [r0, #0]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	4718      	bx	r3
 8009962:	4770      	bx	lr

08009964 <Display::ClearLine(unsigned long) [clone .isra.0]>:
 8009964:	b110      	cbz	r0, 800996c <Display::ClearLine(unsigned long) [clone .isra.0]+0x8>
 8009966:	6803      	ldr	r3, [r0, #0]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	4718      	bx	r3
 800996c:	4770      	bx	lr

0800996e <memcpy.isra.0>:
 800996e:	440a      	add	r2, r1
 8009970:	4291      	cmp	r1, r2
 8009972:	d100      	bne.n	8009976 <memcpy.isra.0+0x8>
 8009974:	4770      	bx	lr
 8009976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997a:	f800 3b01 	strb.w	r3, [r0], #1
 800997e:	e7f7      	b.n	8009970 <memcpy.isra.0+0x2>

08009980 <net::dhcp_run()>:
 8009980:	b510      	push	{r4, lr}
 8009982:	4b11      	ldr	r3, [pc, #68]	@ (80099c8 <net::dhcp_run()+0x48>)
 8009984:	6a1c      	ldr	r4, [r3, #32]
 8009986:	b086      	sub	sp, #24
 8009988:	b1cc      	cbz	r4, 80099be <net::dhcp_run()+0x3e>
 800998a:	a904      	add	r1, sp, #16
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	f10d 030e 	add.w	r3, sp, #14
 8009992:	aa05      	add	r2, sp, #20
 8009994:	f00d fb34 	bl	8017000 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 8009998:	4601      	mov	r1, r0
 800999a:	b180      	cbz	r0, 80099be <net::dhcp_run()+0x3e>
 800999c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80099a0:	2b43      	cmp	r3, #67	@ 0x43
 80099a2:	d10c      	bne.n	80099be <net::dhcp_run()+0x3e>
 80099a4:	9804      	ldr	r0, [sp, #16]
 80099a6:	6862      	ldr	r2, [r4, #4]
 80099a8:	6843      	ldr	r3, [r0, #4]
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d009      	beq.n	80099c2 <net::dhcp_run()+0x42>
 80099ae:	e9cd 3200 	strd	r3, r2, [sp]
 80099b2:	4906      	ldr	r1, [pc, #24]	@ (80099cc <net::dhcp_run()+0x4c>)
 80099b4:	4a06      	ldr	r2, [pc, #24]	@ (80099d0 <net::dhcp_run()+0x50>)
 80099b6:	4807      	ldr	r0, [pc, #28]	@ (80099d4 <net::dhcp_run()+0x54>)
 80099b8:	2379      	movs	r3, #121	@ 0x79
 80099ba:	f012 fd37 	bl	801c42c <printf>
 80099be:	b006      	add	sp, #24
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	f00c fda7 	bl	8016514 <net::dhcp_process(net::dhcp::Message const*, unsigned long)>
 80099c6:	e7fa      	b.n	80099be <net::dhcp_run()+0x3e>
 80099c8:	2000e230 	andcs	lr, r0, r0, lsr r2
 80099cc:	0801cc9b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, fp, lr, pc}
 80099d0:	0801cc79 	stmdaeq	r1, {r0, r3, r4, r5, r6, sl, fp, lr, pc}
 80099d4:	0801cca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, lr, pc}

080099d8 <Display::Printf(unsigned long, char const*, ...)>:
 80099d8:	b40c      	push	{r2, r3}
 80099da:	b570      	push	{r4, r5, r6, lr}
 80099dc:	6984      	ldr	r4, [r0, #24]
 80099de:	b08a      	sub	sp, #40	@ 0x28
 80099e0:	4605      	mov	r5, r0
 80099e2:	460e      	mov	r6, r1
 80099e4:	b174      	cbz	r4, 8009a04 <Display::Printf(unsigned long, char const*, ...)+0x2c>
 80099e6:	ab0f      	add	r3, sp, #60	@ 0x3c
 80099e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	2120      	movs	r1, #32
 80099ee:	a802      	add	r0, sp, #8
 80099f0:	f012 fd5c 	bl	801c4ac <vsnprintf>
 80099f4:	4604      	mov	r4, r0
 80099f6:	69a8      	ldr	r0, [r5, #24]
 80099f8:	6803      	ldr	r3, [r0, #0]
 80099fa:	aa02      	add	r2, sp, #8
 80099fc:	69dd      	ldr	r5, [r3, #28]
 80099fe:	4631      	mov	r1, r6
 8009a00:	4623      	mov	r3, r4
 8009a02:	47a8      	blx	r5
 8009a04:	4620      	mov	r0, r4
 8009a06:	b00a      	add	sp, #40	@ 0x28
 8009a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a0c:	b002      	add	sp, #8
 8009a0e:	4770      	bx	lr

08009a10 <Display::TextStatus(char const*)>:
 8009a10:	6983      	ldr	r3, [r0, #24]
 8009a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a16:	4604      	mov	r4, r0
 8009a18:	460d      	mov	r5, r1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d038      	beq.n	8009a90 <Display::TextStatus(char const*)+0x80>
 8009a1e:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
 8009a22:	b92e      	cbnz	r6, 8009a30 <Display::TextStatus(char const*)+0x20>
 8009a24:	4b1b      	ldr	r3, [pc, #108]	@ (8009a94 <Display::TextStatus(char const*)+0x84>)
 8009a26:	4a1c      	ldr	r2, [pc, #112]	@ (8009a98 <Display::TextStatus(char const*)+0x88>)
 8009a28:	481c      	ldr	r0, [pc, #112]	@ (8009a9c <Display::TextStatus(char const*)+0x8c>)
 8009a2a:	21ae      	movs	r1, #174	@ 0xae
 8009a2c:	f012 fdde 	bl	801c5ec <__assert_func>
 8009a30:	b92f      	cbnz	r7, 8009a3e <Display::TextStatus(char const*)+0x2e>
 8009a32:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa0 <Display::TextStatus(char const*)+0x90>)
 8009a34:	4a18      	ldr	r2, [pc, #96]	@ (8009a98 <Display::TextStatus(char const*)+0x88>)
 8009a36:	4819      	ldr	r0, [pc, #100]	@ (8009a9c <Display::TextStatus(char const*)+0x8c>)
 8009a38:	21af      	movs	r1, #175	@ 0xaf
 8009a3a:	f012 fdd7 	bl	801c5ec <__assert_func>
 8009a3e:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 8009a42:	69a0      	ldr	r0, [r4, #24]
 8009a44:	464a      	mov	r2, r9
 8009a46:	2100      	movs	r1, #0
 8009a48:	f7ff ff82 	bl	8009950 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009a4c:	f04f 0800 	mov.w	r8, #0
 8009a50:	3e01      	subs	r6, #1
 8009a52:	4546      	cmp	r6, r8
 8009a54:	69a0      	ldr	r0, [r4, #24]
 8009a56:	d815      	bhi.n	8009a84 <Display::TextStatus(char const*)+0x74>
 8009a58:	464a      	mov	r2, r9
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	f7ff ff78 	bl	8009950 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009a60:	69a0      	ldr	r0, [r4, #24]
 8009a62:	b1a8      	cbz	r0, 8009a90 <Display::TextStatus(char const*)+0x80>
 8009a64:	6841      	ldr	r1, [r0, #4]
 8009a66:	2300      	movs	r3, #0
 8009a68:	5cea      	ldrb	r2, [r5, r3]
 8009a6a:	b11a      	cbz	r2, 8009a74 <Display::TextStatus(char const*)+0x64>
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	4613      	mov	r3, r2
 8009a72:	d8f9      	bhi.n	8009a68 <Display::TextStatus(char const*)+0x58>
 8009a74:	6802      	ldr	r2, [r0, #0]
 8009a76:	69d4      	ldr	r4, [r2, #28]
 8009a78:	4639      	mov	r1, r7
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	46a4      	mov	ip, r4
 8009a7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a82:	4760      	bx	ip
 8009a84:	2120      	movs	r1, #32
 8009a86:	f7ff ff68 	bl	800995a <Display::PutChar(int) [clone .isra.0]>
 8009a8a:	f108 0801 	add.w	r8, r8, #1
 8009a8e:	e7e0      	b.n	8009a52 <Display::TextStatus(char const*)+0x42>
 8009a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a94:	0801ccda 	stmdaeq	r1, {r1, r3, r4, r6, r7, sl, fp, lr, pc}
 8009a98:	0801cce8 	stmdaeq	r1, {r3, r5, r6, r7, sl, fp, lr, pc}
 8009a9c:	0801ccf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, fp, lr, pc}
 8009aa0:	0801cd18 	stmdaeq	r1, {r3, r4, r8, sl, fp, lr, pc}

08009aa4 <Display::TextStatus(char const*, unsigned long)>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4614      	mov	r4, r2
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	f7ff ffb1 	bl	8009a10 <Display::TextStatus(char const*)>
 8009aae:	1c63      	adds	r3, r4, #1
 8009ab0:	d005      	beq.n	8009abe <Display::TextStatus(char const*, unsigned long)+0x1a>
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aba:	f010 b9f3 	b.w	8019ea4 <console_status>
 8009abe:	bd38      	pop	{r3, r4, r5, pc}

08009ac0 <Display::SetSleep(bool)>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	6980      	ldr	r0, [r0, #24]
 8009ac6:	460d      	mov	r5, r1
 8009ac8:	b138      	cbz	r0, 8009ada <Display::SetSleep(bool)+0x1a>
 8009aca:	6803      	ldr	r3, [r0, #0]
 8009acc:	7561      	strb	r1, [r4, #21]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad0:	4798      	blx	r3
 8009ad2:	b915      	cbnz	r5, 8009ada <Display::SetSleep(bool)+0x1a>
 8009ad4:	4b01      	ldr	r3, [pc, #4]	@ (8009adc <Display::SetSleep(bool)+0x1c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	2001bcd0 	ldrdcs	fp, [r1], -r0

08009ae0 <E131Bridge::Run()>:
 8009ae0:	b513      	push	{r0, r1, r4, lr}
 8009ae2:	f500 6247 	add.w	r2, r0, #3184	@ 0xc70
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	f10d 0306 	add.w	r3, sp, #6
 8009aec:	f600 416c 	addw	r1, r0, #3180	@ 0xc6c
 8009af0:	6800      	ldr	r0, [r0, #0]
 8009af2:	f00d fa85 	bl	8017000 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 8009af6:	4b20      	ldr	r3, [pc, #128]	@ (8009b78 <E131Bridge::Run()+0x98>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6063      	str	r3, [r4, #4]
 8009afc:	bb90      	cbnz	r0, 8009b64 <E131Bridge::Run()+0x84>
 8009afe:	7fe2      	ldrb	r2, [r4, #31]
 8009b00:	b172      	cbz	r2, 8009b20 <E131Bridge::Run()+0x40>
 8009b02:	68a2      	ldr	r2, [r4, #8]
 8009b04:	1a9b      	subs	r3, r3, r2
 8009b06:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d921      	bls.n	8009b52 <E131Bridge::Run()+0x72>
 8009b0e:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	@ 0xc74
 8009b12:	b9ab      	cbnz	r3, 8009b40 <E131Bridge::Run()+0x60>
 8009b14:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8009b18:	f023 0302 	bic.w	r3, r3, #2
 8009b1c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8009b20:	f894 3c68 	ldrb.w	r3, [r4, #3176]	@ 0xc68
 8009b24:	b153      	cbz	r3, 8009b3c <E131Bridge::Run()+0x5c>
 8009b26:	4b15      	ldr	r3, [pc, #84]	@ (8009b7c <E131Bridge::Run()+0x9c>)
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	6943      	ldr	r3, [r0, #20]
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d005      	beq.n	8009b3c <E131Bridge::Run()+0x5c>
 8009b30:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8009b34:	b1a3      	cbz	r3, 8009b60 <E131Bridge::Run()+0x80>
 8009b36:	2103      	movs	r1, #3
 8009b38:	f00f ff32 	bl	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 8009b3c:	b002      	add	sp, #8
 8009b3e:	bd10      	pop	{r4, pc}
 8009b40:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e5      	bne.n	8009b14 <E131Bridge::Run()+0x34>
 8009b48:	2201      	movs	r2, #1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f004 fd55 	bl	800e5fc <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 8009b52:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8009b56:	1a9b      	subs	r3, r3, r2
 8009b58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b5c:	d3e0      	bcc.n	8009b20 <E131Bridge::Run()+0x40>
 8009b5e:	e7d9      	b.n	8009b14 <E131Bridge::Run()+0x34>
 8009b60:	2102      	movs	r1, #2
 8009b62:	e7e9      	b.n	8009b38 <E131Bridge::Run()+0x58>
 8009b64:	4620      	mov	r0, r4
 8009b66:	f005 f909 	bl	800ed7c <E131Bridge::IsValidRoot()>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d0e6      	beq.n	8009b3c <E131Bridge::Run()+0x5c>
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f005 f92c 	bl	800edcc <E131Bridge::Process()>
 8009b74:	e7e2      	b.n	8009b3c <E131Bridge::Run()+0x5c>
 8009b76:	bf00      	nop
 8009b78:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8009b7c:	2000e3e0 	andcs	lr, r0, r0, ror #7

08009b80 <hardware::ledblink::display(unsigned long)>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d0d      	ldr	r5, [pc, #52]	@ (8009bb8 <hardware::ledblink::display(unsigned long)+0x38>)
 8009b84:	682a      	ldr	r2, [r5, #0]
 8009b86:	4603      	mov	r3, r0
 8009b88:	6990      	ldr	r0, [r2, #24]
 8009b8a:	b1a0      	cbz	r0, 8009bb6 <hardware::ledblink::display(unsigned long)+0x36>
 8009b8c:	2b05      	cmp	r3, #5
 8009b8e:	bf9c      	itt	ls
 8009b90:	4a0a      	ldrls	r2, [pc, #40]	@ (8009bbc <hardware::ledblink::display(unsigned long)+0x3c>)
 8009b92:	5cd4      	ldrbls	r4, [r2, r3]
 8009b94:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009b98:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8009b9c:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 8009ba0:	bf88      	it	hi
 8009ba2:	2455      	movhi	r4, #85	@ 0x55
 8009ba4:	f7ff fed4 	bl	8009950 <Display::SetCursorPos(unsigned long, unsigned long) [clone .isra.0]>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	4621      	mov	r1, r4
 8009bac:	6998      	ldr	r0, [r3, #24]
 8009bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb2:	f7ff bed2 	b.w	800995a <Display::PutChar(int) [clone .isra.0]>
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	2000e2f4 	strdcs	lr, [r0], -r4
 8009bbc:	0801dee2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, fp, ip, lr, pc}

08009bc0 <PixelConfiguration::Get()>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	4c06      	ldr	r4, [pc, #24]	@ (8009bdc <PixelConfiguration::Get()+0x1c>)
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	b933      	cbnz	r3, 8009bd6 <PixelConfiguration::Get()+0x16>
 8009bc8:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <PixelConfiguration::Get()+0x20>)
 8009bca:	4a06      	ldr	r2, [pc, #24]	@ (8009be4 <PixelConfiguration::Get()+0x24>)
 8009bcc:	4806      	ldr	r0, [pc, #24]	@ (8009be8 <PixelConfiguration::Get()+0x28>)
 8009bce:	f240 110d 	movw	r1, #269	@ 0x10d
 8009bd2:	f012 fd0b 	bl	801c5ec <__assert_func>
 8009bd6:	6820      	ldr	r0, [r4, #0]
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	bf00      	nop
 8009bdc:	2000007c 	andcs	r0, r0, ip, ror r0
 8009be0:	0801cd23 	stmdaeq	r1, {r0, r1, r5, r8, sl, fp, lr, pc}
 8009be4:	0801cd36 	stmdaeq	r1, {r1, r2, r4, r5, r8, sl, fp, lr, pc}
 8009be8:	0801cd3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, sl, fp, lr, pc}

08009bec <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	2905      	cmp	r1, #5
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	4689      	mov	r9, r1
 8009bf8:	f300 8099 	bgt.w	8009d2e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x142>
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8009d44 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x158>
 8009c02:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8009d48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x15c>
 8009c06:	6001      	str	r1, [r0, #0]
 8009c08:	46ab      	mov	fp, r5
 8009c0a:	462c      	mov	r4, r5
 8009c0c:	f1b9 0f05 	cmp.w	r9, #5
 8009c10:	f200 8086 	bhi.w	8009d20 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x134>
 8009c14:	e8df f009 	tbb	[pc, r9]
 8009c18:	1c120338 	ldcne	3, cr0, [r2], {56}	@ 0x38
 8009c1c:	23002c24 	movwcs	r2, #3108	@ 0xc24
 8009c20:	2264      	movs	r2, #100	@ 0x64
 8009c22:	4629      	mov	r1, r5
 8009c24:	4630      	mov	r0, r6
 8009c26:	f009 fb77 	bl	8013318 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>
 8009c2a:	3501      	adds	r5, #1
 8009c2c:	2d08      	cmp	r5, #8
 8009c2e:	f10a 0a20 	add.w	sl, sl, #32
 8009c32:	d1eb      	bne.n	8009c0c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x20>
 8009c34:	2001      	movs	r0, #1
 8009c36:	b005      	add	sp, #20
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	2364      	movs	r3, #100	@ 0x64
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9401      	str	r4, [sp, #4]
 8009c42:	4b3c      	ldr	r3, [pc, #240]	@ (8009d34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x148>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	4629      	mov	r1, r5
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f009 fb7b 	bl	8013344 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009c4e:	e7ec      	b.n	8009c2a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009c50:	4a38      	ldr	r2, [pc, #224]	@ (8009d34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x148>)
 8009c52:	9400      	str	r4, [sp, #0]
 8009c54:	2364      	movs	r3, #100	@ 0x64
 8009c56:	4629      	mov	r1, r5
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f009 fb8f 	bl	801337c <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009c5e:	e7e4      	b.n	8009c2a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009c60:	2364      	movs	r3, #100	@ 0x64
 8009c62:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009c66:	4629      	mov	r1, r5
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f009 fba1 	bl	80133b0 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>
 8009c6e:	e7dc      	b.n	8009c2a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009c70:	230a      	movs	r3, #10
 8009c72:	2264      	movs	r2, #100	@ 0x64
 8009c74:	e9cd 3200 	strd	r3, r2, [sp]
 8009c78:	9402      	str	r4, [sp, #8]
 8009c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8009d34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x148>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4630      	mov	r0, r6
 8009c82:	f009 fbc5 	bl	8013410 <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>
 8009c86:	e7d0      	b.n	8009c2a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009c88:	f8ca b01c 	str.w	fp, [sl, #28]
 8009c8c:	2700      	movs	r7, #0
 8009c8e:	f7ff ff97 	bl	8009bc0 <PixelConfiguration::Get()>
 8009c92:	6803      	ldr	r3, [r0, #0]
 8009c94:	429f      	cmp	r7, r3
 8009c96:	d30a      	bcc.n	8009cae <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc2>
 8009c98:	f8d8 0000 	ldr.w	r0, [r8]
 8009c9c:	f009 ffb2 	bl	8013c04 <WS28xxMulti::IsUpdating()>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d1f9      	bne.n	8009c98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>
 8009ca4:	f8d8 0000 	ldr.w	r0, [r8]
 8009ca8:	f009 feba 	bl	8013a20 <WS28xxMulti::Update()>
 8009cac:	e7bd      	b.n	8009c2a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009cae:	f7ff ff87 	bl	8009bc0 <PixelConfiguration::Get()>
 8009cb2:	68c3      	ldr	r3, [r0, #12]
 8009cb4:	2b0d      	cmp	r3, #13
 8009cb6:	d829      	bhi.n	8009d0c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x120>
 8009cb8:	e8df f003 	tbb	[pc, r3]
 8009cbc:	28282807 	stmdacs	r8!, {r0, r1, r2, fp, sp}
 8009cc0:	1d282828 	stcne	8, cr2, [r8, #-160]!	@ 0xffffff60
 8009cc4:	12282828 	eorne	r2, r8, #40, 16	@ 0x280000
 8009cc8:	e9cd1212 	stmib	sp, {r1, r4, r9, ip}^
 8009ccc:	4400      	add	r0, r0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f8d8 0000 	ldr.w	r0, [r8]
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f00a f8aa 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8009cdc:	3701      	adds	r7, #1
 8009cde:	e7d6      	b.n	8009c8e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa2>
 8009ce0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8009ce4:	9400      	str	r4, [sp, #0]
 8009ce6:	f8d8 0000 	ldr.w	r0, [r8]
 8009cea:	23ff      	movs	r3, #255	@ 0xff
 8009cec:	463a      	mov	r2, r7
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f00a f9c2 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8009cf4:	e7f2      	b.n	8009cdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>
 8009cf6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8009cfa:	9400      	str	r4, [sp, #0]
 8009cfc:	f8d8 0000 	ldr.w	r0, [r8]
 8009d00:	2300      	movs	r3, #0
 8009d02:	463a      	mov	r2, r7
 8009d04:	4629      	mov	r1, r5
 8009d06:	f00b f893 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8009d0a:	e7e7      	b.n	8009cdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>
 8009d0c:	e9cd 4400 	strd	r4, r4, [sp]
 8009d10:	2300      	movs	r3, #0
 8009d12:	f8d8 0000 	ldr.w	r0, [r8]
 8009d16:	463a      	mov	r2, r7
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f009 ff7b 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8009d1e:	e7dd      	b.n	8009cdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>
 8009d20:	4b05      	ldr	r3, [pc, #20]	@ (8009d38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x14c>)
 8009d22:	4a06      	ldr	r2, [pc, #24]	@ (8009d3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x150>)
 8009d24:	4806      	ldr	r0, [pc, #24]	@ (8009d40 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x154>)
 8009d26:	214b      	movs	r1, #75	@ 0x4b
 8009d28:	f012 fc60 	bl	801c5ec <__assert_func>
 8009d2c:	e77d      	b.n	8009c2a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x3e>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	e781      	b.n	8009c36 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x4a>
 8009d32:	bf00      	nop
 8009d34:	00646464 	rsbeq	r6, r4, r4, ror #8
 8009d38:	0801cb0f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, fp, lr, pc}
 8009d3c:	0801cd65 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, fp, lr, pc}
 8009d40:	0801cd70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, lr, pc}
 8009d44:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8
 8009d48:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc

08009d4c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8009d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4e:	780b      	ldrb	r3, [r1, #0]
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	4604      	mov	r4, r0
 8009d54:	d11e      	bne.n	8009d94 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 8009d56:	4b18      	ldr	r3, [pc, #96]	@ (8009db8 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 8009d58:	784d      	ldrb	r5, [r1, #1]
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	6803      	ldr	r3, [r0, #0]
 8009d5e:	429d      	cmp	r5, r3
 8009d60:	d018      	beq.n	8009d94 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7ff ff42 	bl	8009bec <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8009d68:	b1a0      	cbz	r0, 8009d94 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 8009d6a:	b1ad      	cbz	r5, 8009d98 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4c>
 8009d6c:	6863      	ldr	r3, [r4, #4]
 8009d6e:	4c13      	ldr	r4, [pc, #76]	@ (8009dbc <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	605a      	str	r2, [r3, #4]
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	2106      	movs	r1, #6
 8009d78:	6998      	ldr	r0, [r3, #24]
 8009d7a:	f7ff fdf3 	bl	8009964 <Display::ClearLine(unsigned long) [clone .isra.0]>
 8009d7e:	4628      	mov	r0, r5
 8009d80:	6824      	ldr	r4, [r4, #0]
 8009d82:	f009 fabd 	bl	8013300 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8009d86:	4a0e      	ldr	r2, [pc, #56]	@ (8009dc0 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 8009d88:	9500      	str	r5, [sp, #0]
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2106      	movs	r1, #6
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f7ff fe22 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 8009d94:	b003      	add	sp, #12
 8009d96:	bd30      	pop	{r4, r5, pc}
 8009d98:	68a0      	ldr	r0, [r4, #8]
 8009d9a:	6803      	ldr	r3, [r0, #0]
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	4798      	blx	r3
 8009da2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8009da6:	605a      	str	r2, [r3, #4]
 8009da8:	4b06      	ldr	r3, [pc, #24]	@ (8009dc4 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	b003      	add	sp, #12
 8009dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009db2:	f00e b9cb 	b.w	801814c <DisplayUdf::Show()>
 8009db6:	bf00      	nop
 8009db8:	2000dfc0 	andcs	sp, r0, r0, asr #31
 8009dbc:	2000e2f4 	strdcs	lr, [r0], -r4
 8009dc0:	0801cd99 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, fp, lr, pc}
 8009dc4:	2000e2d8 	ldrdcs	lr, [r0], -r8

08009dc8 <PixelDmxConfiguration::PixelDmxConfiguration()>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	2203      	movs	r2, #3
 8009dcc:	4604      	mov	r4, r0
 8009dce:	e9c4 2202 	strd	r2, r2, [r4, #8]
 8009dd2:	4a20      	ldr	r2, [pc, #128]	@ (8009e54 <PixelDmxConfiguration::PixelDmxConfiguration()+0x8c>)
 8009dd4:	4920      	ldr	r1, [pc, #128]	@ (8009e58 <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009dd6:	2506      	movs	r5, #6
 8009dd8:	e9c4 5204 	strd	r5, r2, [r4, #16]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	20aa      	movs	r0, #170	@ 0xaa
 8009de0:	4d1e      	ldr	r5, [pc, #120]	@ (8009e5c <PixelDmxConfiguration::PixelDmxConfiguration()+0x94>)
 8009de2:	61a3      	str	r3, [r4, #24]
 8009de4:	e9c4 0300 	strd	r0, r3, [r4]
 8009de8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e60 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009dea:	481e      	ldr	r0, [pc, #120]	@ (8009e64 <PixelDmxConfiguration::PixelDmxConfiguration()+0x9c>)
 8009dec:	2332      	movs	r3, #50	@ 0x32
 8009dee:	f012 fb1d 	bl	801c42c <printf>
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	b12b      	cbz	r3, 8009e02 <PixelDmxConfiguration::PixelDmxConfiguration()+0x3a>
 8009df6:	4b1c      	ldr	r3, [pc, #112]	@ (8009e68 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa0>)
 8009df8:	4a19      	ldr	r2, [pc, #100]	@ (8009e60 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009dfa:	4817      	ldr	r0, [pc, #92]	@ (8009e58 <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009dfc:	2134      	movs	r1, #52	@ 0x34
 8009dfe:	f012 fbf5 	bl	801c5ec <__assert_func>
 8009e02:	4a17      	ldr	r2, [pc, #92]	@ (8009e60 <PixelDmxConfiguration::PixelDmxConfiguration()+0x98>)
 8009e04:	4914      	ldr	r1, [pc, #80]	@ (8009e58 <PixelDmxConfiguration::PixelDmxConfiguration()+0x90>)
 8009e06:	4819      	ldr	r0, [pc, #100]	@ (8009e6c <PixelDmxConfiguration::PixelDmxConfiguration()+0xa4>)
 8009e08:	602c      	str	r4, [r5, #0]
 8009e0a:	2337      	movs	r3, #55	@ 0x37
 8009e0c:	f012 fb0e 	bl	801c42c <printf>
 8009e10:	4d17      	ldr	r5, [pc, #92]	@ (8009e70 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa8>)
 8009e12:	4814      	ldr	r0, [pc, #80]	@ (8009e64 <PixelDmxConfiguration::PixelDmxConfiguration()+0x9c>)
 8009e14:	2301      	movs	r3, #1
 8009e16:	2200      	movs	r2, #0
 8009e18:	21aa      	movs	r1, #170	@ 0xaa
 8009e1a:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
 8009e1e:	e9c4 320b 	strd	r3, r2, [r4, #44]	@ 0x2c
 8009e22:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009e26:	4a13      	ldr	r2, [pc, #76]	@ (8009e74 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009e28:	4913      	ldr	r1, [pc, #76]	@ (8009e78 <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009e2a:	2336      	movs	r3, #54	@ 0x36
 8009e2c:	f012 fafe 	bl	801c42c <printf>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b12b      	cbz	r3, 8009e40 <PixelDmxConfiguration::PixelDmxConfiguration()+0x78>
 8009e34:	4b0c      	ldr	r3, [pc, #48]	@ (8009e68 <PixelDmxConfiguration::PixelDmxConfiguration()+0xa0>)
 8009e36:	4a0f      	ldr	r2, [pc, #60]	@ (8009e74 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009e38:	480f      	ldr	r0, [pc, #60]	@ (8009e78 <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009e3a:	2138      	movs	r1, #56	@ 0x38
 8009e3c:	f012 fbd6 	bl	801c5ec <__assert_func>
 8009e40:	4a0c      	ldr	r2, [pc, #48]	@ (8009e74 <PixelDmxConfiguration::PixelDmxConfiguration()+0xac>)
 8009e42:	490d      	ldr	r1, [pc, #52]	@ (8009e78 <PixelDmxConfiguration::PixelDmxConfiguration()+0xb0>)
 8009e44:	4809      	ldr	r0, [pc, #36]	@ (8009e6c <PixelDmxConfiguration::PixelDmxConfiguration()+0xa4>)
 8009e46:	602c      	str	r4, [r5, #0]
 8009e48:	233b      	movs	r3, #59	@ 0x3b
 8009e4a:	f012 faef 	bl	801c42c <printf>
 8009e4e:	4620      	mov	r0, r4
 8009e50:	bd38      	pop	{r3, r4, r5, pc}
 8009e52:	bf00      	nop
 8009e54:	ff000001 			@ <UNDEFINED> instruction: 0xff000001
 8009e58:	0801cd3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, sl, fp, lr, pc}
 8009e5c:	2000007c 	andcs	r0, r0, ip, ror r0
 8009e60:	0801cd9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, sl, fp, lr, pc}
 8009e64:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 8009e68:	0801cdb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, fp, lr, pc}
 8009e6c:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}
 8009e70:	20000078 	andcs	r0, r0, r8, ror r0
 8009e74:	0801cdc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, sl, fp, lr, pc}
 8009e78:	0801cddb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, sl, fp, lr, pc}

08009e7c <RDMSubDevices::~RDMSubDevices()>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	4a12      	ldr	r2, [pc, #72]	@ (8009ec8 <RDMSubDevices::~RDMSubDevices()+0x4c>)
 8009e80:	4912      	ldr	r1, [pc, #72]	@ (8009ecc <RDMSubDevices::~RDMSubDevices()+0x50>)
 8009e82:	4604      	mov	r4, r0
 8009e84:	2348      	movs	r3, #72	@ 0x48
 8009e86:	4812      	ldr	r0, [pc, #72]	@ (8009ed0 <RDMSubDevices::~RDMSubDevices()+0x54>)
 8009e88:	f012 fad0 	bl	801c42c <printf>
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	462e      	mov	r6, r5
 8009e90:	88a3      	ldrh	r3, [r4, #4]
 8009e92:	6820      	ldr	r0, [r4, #0]
 8009e94:	42ab      	cmp	r3, r5
 8009e96:	d80c      	bhi.n	8009eb2 <RDMSubDevices::~RDMSubDevices()+0x36>
 8009e98:	b108      	cbz	r0, 8009e9e <RDMSubDevices::~RDMSubDevices()+0x22>
 8009e9a:	f012 fd19 	bl	801c8d0 <operator delete[](void*)>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	80a3      	strh	r3, [r4, #4]
 8009ea2:	4a09      	ldr	r2, [pc, #36]	@ (8009ec8 <RDMSubDevices::~RDMSubDevices()+0x4c>)
 8009ea4:	4909      	ldr	r1, [pc, #36]	@ (8009ecc <RDMSubDevices::~RDMSubDevices()+0x50>)
 8009ea6:	480b      	ldr	r0, [pc, #44]	@ (8009ed4 <RDMSubDevices::~RDMSubDevices()+0x58>)
 8009ea8:	2351      	movs	r3, #81	@ 0x51
 8009eaa:	f012 fabf 	bl	801c42c <printf>
 8009eae:	4620      	mov	r0, r4
 8009eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8009eb6:	00af      	lsls	r7, r5, #2
 8009eb8:	b110      	cbz	r0, 8009ec0 <RDMSubDevices::~RDMSubDevices()+0x44>
 8009eba:	6803      	ldr	r3, [r0, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	4798      	blx	r3
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	3501      	adds	r5, #1
 8009ec4:	51de      	str	r6, [r3, r7]
 8009ec6:	e7e3      	b.n	8009e90 <RDMSubDevices::~RDMSubDevices()+0x14>
 8009ec8:	0801ce0c 	stmdaeq	r1, {r2, r3, r9, sl, fp, lr, pc}
 8009ecc:	0801ce1b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, fp, lr, pc}
 8009ed0:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 8009ed4:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}

08009ed8 <LLRPDevice::LLRPDevice()>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	2100      	movs	r1, #0
 8009edc:	4605      	mov	r5, r0
 8009ede:	f005 fb0a 	bl	800f4f6 <RDMHandler::RDMHandler(bool)>
 8009ee2:	2335      	movs	r3, #53	@ 0x35
 8009ee4:	4a13      	ldr	r2, [pc, #76]	@ (8009f34 <LLRPDevice::LLRPDevice()+0x5c>)
 8009ee6:	4914      	ldr	r1, [pc, #80]	@ (8009f38 <LLRPDevice::LLRPDevice()+0x60>)
 8009ee8:	4814      	ldr	r0, [pc, #80]	@ (8009f3c <LLRPDevice::LLRPDevice()+0x64>)
 8009eea:	4e15      	ldr	r6, [pc, #84]	@ (8009f40 <LLRPDevice::LLRPDevice()+0x68>)
 8009eec:	f012 fa9e 	bl	801c42c <printf>
 8009ef0:	f241 50c1 	movw	r0, #5569	@ 0x15c1
 8009ef4:	f00d f84a 	bl	8016f8c <net::udp_begin(unsigned short)>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	4604      	mov	r4, r0
 8009efc:	d00b      	beq.n	8009f16 <LLRPDevice::LLRPDevice()+0x3e>
 8009efe:	6030      	str	r0, [r6, #0]
 8009f00:	4810      	ldr	r0, [pc, #64]	@ (8009f44 <LLRPDevice::LLRPDevice()+0x6c>)
 8009f02:	f00c fc2b 	bl	801675c <net::igmp_join(unsigned long)>
 8009f06:	4a0b      	ldr	r2, [pc, #44]	@ (8009f34 <LLRPDevice::LLRPDevice()+0x5c>)
 8009f08:	490b      	ldr	r1, [pc, #44]	@ (8009f38 <LLRPDevice::LLRPDevice()+0x60>)
 8009f0a:	480f      	ldr	r0, [pc, #60]	@ (8009f48 <LLRPDevice::LLRPDevice()+0x70>)
 8009f0c:	233b      	movs	r3, #59	@ 0x3b
 8009f0e:	f012 fa8d 	bl	801c42c <printf>
 8009f12:	4628      	mov	r0, r5
 8009f14:	bd70      	pop	{r4, r5, r6, pc}
 8009f16:	4b0d      	ldr	r3, [pc, #52]	@ (8009f4c <LLRPDevice::LLRPDevice()+0x74>)
 8009f18:	4a0d      	ldr	r2, [pc, #52]	@ (8009f50 <LLRPDevice::LLRPDevice()+0x78>)
 8009f1a:	480e      	ldr	r0, [pc, #56]	@ (8009f54 <LLRPDevice::LLRPDevice()+0x7c>)
 8009f1c:	21b9      	movs	r1, #185	@ 0xb9
 8009f1e:	f012 fb65 	bl	801c5ec <__assert_func>
 8009f22:	4b0d      	ldr	r3, [pc, #52]	@ (8009f58 <LLRPDevice::LLRPDevice()+0x80>)
 8009f24:	4a03      	ldr	r2, [pc, #12]	@ (8009f34 <LLRPDevice::LLRPDevice()+0x5c>)
 8009f26:	4804      	ldr	r0, [pc, #16]	@ (8009f38 <LLRPDevice::LLRPDevice()+0x60>)
 8009f28:	6034      	str	r4, [r6, #0]
 8009f2a:	2138      	movs	r1, #56	@ 0x38
 8009f2c:	f012 fb5e 	bl	801c5ec <__assert_func>
 8009f30:	e7e6      	b.n	8009f00 <LLRPDevice::LLRPDevice()+0x28>
 8009f32:	bf00      	nop
 8009f34:	0801cf0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, sl, fp, lr, pc}
 8009f38:	0801ce3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, fp, lr, pc}
 8009f3c:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 8009f40:	2000d40c 	andcs	sp, r0, ip, lsl #8
 8009f44:	85faffef 	ldrbhi	pc, [sl, #4079]!	@ 0xfef	@ <UNPREDICTABLE>
 8009f48:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}
 8009f4c:	0801ce63 	stmdaeq	r1, {r0, r1, r5, r6, r9, sl, fp, lr, pc}
 8009f50:	0801ce70 	stmdaeq	r1, {r4, r5, r6, r9, sl, fp, lr, pc}
 8009f54:	0801ce76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, fp, lr, pc}
 8009f58:	0801ce9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, fp, lr, pc}

08009f5c <RDMDeviceResponder::~RDMDeviceResponder()>:
 8009f5c:	4b14      	ldr	r3, [pc, #80]	@ (8009fb0 <RDMDeviceResponder::~RDMDeviceResponder()+0x54>)
 8009f5e:	b570      	push	{r4, r5, r6, lr}
 8009f60:	4604      	mov	r4, r0
 8009f62:	f840 3b60 	str.w	r3, [r0], #96
 8009f66:	f7ff ff89 	bl	8009e7c <RDMSubDevices::~RDMSubDevices()>
 8009f6a:	4a12      	ldr	r2, [pc, #72]	@ (8009fb4 <RDMDeviceResponder::~RDMDeviceResponder()+0x58>)
 8009f6c:	4912      	ldr	r1, [pc, #72]	@ (8009fb8 <RDMDeviceResponder::~RDMDeviceResponder()+0x5c>)
 8009f6e:	4813      	ldr	r0, [pc, #76]	@ (8009fbc <RDMDeviceResponder::~RDMDeviceResponder()+0x60>)
 8009f70:	2353      	movs	r3, #83	@ 0x53
 8009f72:	f012 fa5b 	bl	801c42c <printf>
 8009f76:	2500      	movs	r5, #0
 8009f78:	462e      	mov	r6, r5
 8009f7a:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8009f7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f80:	429d      	cmp	r5, r3
 8009f82:	d30a      	bcc.n	8009f9a <RDMDeviceResponder::~RDMDeviceResponder()+0x3e>
 8009f84:	b108      	cbz	r0, 8009f8a <RDMDeviceResponder::~RDMDeviceResponder()+0x2e>
 8009f86:	f012 fca3 	bl	801c8d0 <operator delete[](void*)>
 8009f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8009fb4 <RDMDeviceResponder::~RDMDeviceResponder()+0x58>)
 8009f8c:	490a      	ldr	r1, [pc, #40]	@ (8009fb8 <RDMDeviceResponder::~RDMDeviceResponder()+0x5c>)
 8009f8e:	480c      	ldr	r0, [pc, #48]	@ (8009fc0 <RDMDeviceResponder::~RDMDeviceResponder()+0x64>)
 8009f90:	235c      	movs	r3, #92	@ 0x5c
 8009f92:	f012 fa4b 	bl	801c42c <printf>
 8009f96:	4620      	mov	r0, r4
 8009f98:	bd70      	pop	{r4, r5, r6, pc}
 8009f9a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8009f9e:	b128      	cbz	r0, 8009fac <RDMDeviceResponder::~RDMDeviceResponder()+0x50>
 8009fa0:	6803      	ldr	r3, [r0, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	4798      	blx	r3
 8009fa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009fa8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8009fac:	3501      	adds	r5, #1
 8009fae:	e7e4      	b.n	8009f7a <RDMDeviceResponder::~RDMDeviceResponder()+0x1e>
 8009fb0:	08020ba4 	stmdaeq	r2, {r2, r5, r7, r8, r9, fp}
 8009fb4:	0801ceb0 	stmdaeq	r1, {r4, r5, r7, r9, sl, fp, lr, pc}
 8009fb8:	0801cebc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, fp, lr, pc}
 8009fbc:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 8009fc0:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}

08009fc4 <RDMNetDevice::~RDMNetDevice()>:
 8009fc4:	4b17      	ldr	r3, [pc, #92]	@ (800a024 <RDMNetDevice::~RDMNetDevice()+0x60>)
 8009fc6:	4a18      	ldr	r2, [pc, #96]	@ (800a028 <RDMNetDevice::~RDMNetDevice()+0x64>)
 8009fc8:	4918      	ldr	r1, [pc, #96]	@ (800a02c <RDMNetDevice::~RDMNetDevice()+0x68>)
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	6003      	str	r3, [r0, #0]
 8009fce:	4604      	mov	r4, r0
 8009fd0:	2337      	movs	r3, #55	@ 0x37
 8009fd2:	4817      	ldr	r0, [pc, #92]	@ (800a030 <RDMNetDevice::~RDMNetDevice()+0x6c>)
 8009fd4:	f012 fa2a 	bl	801c42c <printf>
 8009fd8:	4a13      	ldr	r2, [pc, #76]	@ (800a028 <RDMNetDevice::~RDMNetDevice()+0x64>)
 8009fda:	4914      	ldr	r1, [pc, #80]	@ (800a02c <RDMNetDevice::~RDMNetDevice()+0x68>)
 8009fdc:	4815      	ldr	r0, [pc, #84]	@ (800a034 <RDMNetDevice::~RDMNetDevice()+0x70>)
 8009fde:	2339      	movs	r3, #57	@ 0x39
 8009fe0:	f012 fa24 	bl	801c42c <printf>
 8009fe4:	4a14      	ldr	r2, [pc, #80]	@ (800a038 <RDMNetDevice::~RDMNetDevice()+0x74>)
 8009fe6:	4915      	ldr	r1, [pc, #84]	@ (800a03c <RDMNetDevice::~RDMNetDevice()+0x78>)
 8009fe8:	4811      	ldr	r0, [pc, #68]	@ (800a030 <RDMNetDevice::~RDMNetDevice()+0x6c>)
 8009fea:	233f      	movs	r3, #63	@ 0x3f
 8009fec:	f012 fa1e 	bl	801c42c <printf>
 8009ff0:	4813      	ldr	r0, [pc, #76]	@ (800a040 <RDMNetDevice::~RDMNetDevice()+0x7c>)
 8009ff2:	f00c fbd1 	bl	8016798 <net::igmp_leave(unsigned long)>
 8009ff6:	f241 50c1 	movw	r0, #5569	@ 0x15c1
 8009ffa:	f00c ffdd 	bl	8016fb8 <net::udp_end(unsigned short)>
 8009ffe:	b128      	cbz	r0, 800a00c <RDMNetDevice::~RDMNetDevice()+0x48>
 800a000:	4b10      	ldr	r3, [pc, #64]	@ (800a044 <RDMNetDevice::~RDMNetDevice()+0x80>)
 800a002:	4a11      	ldr	r2, [pc, #68]	@ (800a048 <RDMNetDevice::~RDMNetDevice()+0x84>)
 800a004:	4811      	ldr	r0, [pc, #68]	@ (800a04c <RDMNetDevice::~RDMNetDevice()+0x88>)
 800a006:	21bf      	movs	r1, #191	@ 0xbf
 800a008:	f012 faf0 	bl	801c5ec <__assert_func>
 800a00c:	4a0a      	ldr	r2, [pc, #40]	@ (800a038 <RDMNetDevice::~RDMNetDevice()+0x74>)
 800a00e:	490b      	ldr	r1, [pc, #44]	@ (800a03c <RDMNetDevice::~RDMNetDevice()+0x78>)
 800a010:	4808      	ldr	r0, [pc, #32]	@ (800a034 <RDMNetDevice::~RDMNetDevice()+0x70>)
 800a012:	2344      	movs	r3, #68	@ 0x44
 800a014:	f012 fa0a 	bl	801c42c <printf>
 800a018:	4620      	mov	r0, r4
 800a01a:	f7ff ff9f 	bl	8009f5c <RDMDeviceResponder::~RDMDeviceResponder()>
 800a01e:	4620      	mov	r0, r4
 800a020:	bd10      	pop	{r4, pc}
 800a022:	bf00      	nop
 800a024:	0801df8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, lr, pc}
 800a028:	0801cedc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, fp, lr, pc}
 800a02c:	0801ceea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, sl, fp, lr, pc}
 800a030:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 800a034:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}
 800a038:	0801cf0c 	stmdaeq	r1, {r2, r3, r8, r9, sl, fp, lr, pc}
 800a03c:	0801ce3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, fp, lr, pc}
 800a040:	85faffef 	ldrbhi	pc, [sl, #4079]!	@ 0xfef	@ <UNPREDICTABLE>
 800a044:	0801cf18 	stmdaeq	r1, {r3, r4, r8, r9, sl, fp, lr, pc}
 800a048:	0801cf24 	stmdaeq	r1, {r2, r5, r8, r9, sl, fp, lr, pc}
 800a04c:	0801ce76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, fp, lr, pc}

0800a050 <RDMNetDevice::~RDMNetDevice()>:
 800a050:	b510      	push	{r4, lr}
 800a052:	4604      	mov	r4, r0
 800a054:	f7ff ffb6 	bl	8009fc4 <RDMNetDevice::~RDMNetDevice()>
 800a058:	4620      	mov	r0, r4
 800a05a:	21ac      	movs	r1, #172	@ 0xac
 800a05c:	f012 fc3a 	bl	801c8d4 <operator delete(void*, unsigned int)>
 800a060:	4620      	mov	r0, r4
 800a062:	bd10      	pop	{r4, pc}

0800a064 <RDMDeviceResponder::~RDMDeviceResponder()>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4604      	mov	r4, r0
 800a068:	f7ff ff78 	bl	8009f5c <RDMDeviceResponder::~RDMDeviceResponder()>
 800a06c:	4620      	mov	r0, r4
 800a06e:	21a0      	movs	r1, #160	@ 0xa0
 800a070:	f012 fc30 	bl	801c8d4 <operator delete(void*, unsigned int)>
 800a074:	4620      	mov	r0, r4
 800a076:	bd10      	pop	{r4, pc}

0800a078 <RDMNetDevice::Print()>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	b090      	sub	sp, #64	@ 0x40
 800a07c:	2300      	movs	r3, #0
 800a07e:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800a082:	4b17      	ldr	r3, [pc, #92]	@ (800a0e0 <RDMNetDevice::Print()+0x68>)
 800a084:	2210      	movs	r2, #16
 800a086:	6819      	ldr	r1, [r3, #0]
 800a088:	4604      	mov	r4, r0
 800a08a:	a802      	add	r0, sp, #8
 800a08c:	f7ff fc6f 	bl	800996e <memcpy.isra.0>
 800a090:	a906      	add	r1, sp, #24
 800a092:	a802      	add	r0, sp, #8
 800a094:	f012 faa4 	bl	801c5e0 <uuid_unparse>
 800a098:	4812      	ldr	r0, [pc, #72]	@ (800a0e4 <RDMNetDevice::Print()+0x6c>)
 800a09a:	f012 f9c7 	bl	801c42c <printf>
 800a09e:	a906      	add	r1, sp, #24
 800a0a0:	4811      	ldr	r0, [pc, #68]	@ (800a0e8 <RDMNetDevice::Print()+0x70>)
 800a0a2:	f012 f9c3 	bl	801c42c <printf>
 800a0a6:	4811      	ldr	r0, [pc, #68]	@ (800a0ec <RDMNetDevice::Print()+0x74>)
 800a0a8:	f012 f9c0 	bl	801c42c <printf>
 800a0ac:	f241 51c1 	movw	r1, #5569	@ 0x15c1
 800a0b0:	480f      	ldr	r0, [pc, #60]	@ (800a0f0 <RDMNetDevice::Print()+0x78>)
 800a0b2:	f012 f9bb 	bl	801c42c <printf>
 800a0b6:	2385      	movs	r3, #133	@ 0x85
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	22ff      	movs	r2, #255	@ 0xff
 800a0bc:	23fa      	movs	r3, #250	@ 0xfa
 800a0be:	21ef      	movs	r1, #239	@ 0xef
 800a0c0:	480c      	ldr	r0, [pc, #48]	@ (800a0f4 <RDMNetDevice::Print()+0x7c>)
 800a0c2:	f012 f9b3 	bl	801c42c <printf>
 800a0c6:	2386      	movs	r3, #134	@ 0x86
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	22ff      	movs	r2, #255	@ 0xff
 800a0cc:	23fa      	movs	r3, #250	@ 0xfa
 800a0ce:	21ef      	movs	r1, #239	@ 0xef
 800a0d0:	4809      	ldr	r0, [pc, #36]	@ (800a0f8 <RDMNetDevice::Print()+0x80>)
 800a0d2:	f012 f9ab 	bl	801c42c <printf>
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f005 f8e6 	bl	800f2a8 <RDMDeviceResponder::Print()>
 800a0dc:	b010      	add	sp, #64	@ 0x40
 800a0de:	bd10      	pop	{r4, pc}
 800a0e0:	2000e3e0 	andcs	lr, r0, r0, ror #7
 800a0e4:	0801cf28 	stmdaeq	r1, {r3, r5, r8, r9, sl, fp, lr, pc}
 800a0e8:	0801cf30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, lr, pc}
 800a0ec:	0801cf3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, r9, sl, fp, lr, pc}
 800a0f0:	0801cf48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, lr, pc}
 800a0f4:	0801cf62 	stmdaeq	r1, {r1, r5, r6, r8, r9, sl, fp, lr, pc}
 800a0f8:	0801cf85 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, fp, lr, pc}

0800a0fc <Hardware::RebootHandler()>:
 800a0fc:	b508      	push	{r3, lr}
 800a0fe:	4b07      	ldr	r3, [pc, #28]	@ (800a11c <Hardware::RebootHandler()+0x20>)
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	f00a fc8b 	bl	8014a1c <WS28xxMulti::Blackout()>
 800a106:	4b06      	ldr	r3, [pc, #24]	@ (800a120 <Hardware::RebootHandler()+0x24>)
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	f007 f845 	bl	8011198 <Dmx::Blackout()>
 800a10e:	4b05      	ldr	r3, [pc, #20]	@ (800a124 <Hardware::RebootHandler()+0x28>)
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a116:	f001 bf43 	b.w	800bfa0 <ArtNetNode::Stop()>
 800a11a:	bf00      	nop
 800a11c:	2000dfc4 	andcs	sp, r0, r4, asr #31
 800a120:	2000d414 	andcs	sp, r0, r4, lsl r4
 800a124:	2000d2d4 	ldrdcs	sp, [r0], -r4

0800a128 <main>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	f5ad 5df6 	sub.w	sp, sp, #7872	@ 0x1ec0
 800a130:	b083      	sub	sp, #12
 800a132:	a88b      	add	r0, sp, #556	@ 0x22c
 800a134:	f00f fd7e 	bl	8019c34 <Hardware::Hardware()>
 800a138:	a875      	add	r0, sp, #468	@ 0x1d4
 800a13a:	f00d ffc3 	bl	80180c4 <DisplayUdf::DisplayUdf()>
 800a13e:	a806      	add	r0, sp, #24
 800a140:	f00e fb96 	bl	8018870 <ConfigStore::ConfigStore()>
 800a144:	49c6      	ldr	r1, [pc, #792]	@ (800a460 <main+0x338>)
 800a146:	2203      	movs	r2, #3
 800a148:	a875      	add	r0, sp, #468	@ 0x1d4
 800a14a:	f7ff fcab 	bl	8009aa4 <Display::TextStatus(char const*, unsigned long)>
 800a14e:	a8e0      	add	r0, sp, #896	@ 0x380
 800a150:	f00b fcd8 	bl	8015b04 <Network::Network()>
 800a154:	a807      	add	r0, sp, #28
 800a156:	f00b fa87 	bl	8015668 <MDNS::MDNS()>
 800a15a:	49c2      	ldr	r1, [pc, #776]	@ (800a464 <main+0x33c>)
 800a15c:	2202      	movs	r2, #2
 800a15e:	a875      	add	r0, sp, #468	@ 0x1d4
 800a160:	f7ff fca0 	bl	8009aa4 <Display::TextStatus(char const*, unsigned long)>
 800a164:	4bc0      	ldr	r3, [pc, #768]	@ (800a468 <main+0x340>)
 800a166:	4ac1      	ldr	r2, [pc, #772]	@ (800a46c <main+0x344>)
 800a168:	49c1      	ldr	r1, [pc, #772]	@ (800a470 <main+0x348>)
 800a16a:	a808      	add	r0, sp, #32
 800a16c:	f00f fb32 	bl	80197d4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 800a170:	48c0      	ldr	r0, [pc, #768]	@ (800a474 <main+0x34c>)
 800a172:	f012 f9b0 	bl	801c4d6 <puts>
 800a176:	49c0      	ldr	r1, [pc, #768]	@ (800a478 <main+0x350>)
 800a178:	48c0      	ldr	r0, [pc, #768]	@ (800a47c <main+0x354>)
 800a17a:	f012 f957 	bl	801c42c <printf>
 800a17e:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a182:	f001 ffcf 	bl	800c124 <ArtNetNode::ArtNetNode()>
 800a186:	f50d 6087 	add.w	r0, sp, #1080	@ 0x438
 800a18a:	f003 fbb7 	bl	800d8fc <ArtNetParams::ArtNetParams()>
 800a18e:	f50d 6087 	add.w	r0, sp, #1080	@ 0x438
 800a192:	f003 fbd5 	bl	800d940 <ArtNetParams::Load()>
 800a196:	f50d 6087 	add.w	r0, sp, #1080	@ 0x438
 800a19a:	f003 ff39 	bl	800e010 <ArtNetParams::Set()>
 800a19e:	a865      	add	r0, sp, #404	@ 0x194
 800a1a0:	f7ff fe12 	bl	8009dc8 <PixelDmxConfiguration::PixelDmxConfiguration()>
 800a1a4:	a846      	add	r0, sp, #280	@ 0x118
 800a1a6:	f007 fa63 	bl	8011670 <PixelDmxParams::PixelDmxParams()>
 800a1aa:	a846      	add	r0, sp, #280	@ 0x118
 800a1ac:	f007 fe30 	bl	8011e10 <PixelDmxParams::Load()>
 800a1b0:	a846      	add	r0, sp, #280	@ 0x118
 800a1b2:	f007 fd47 	bl	8011c44 <PixelDmxParams::Set()>
 800a1b6:	f60d 64c8 	addw	r4, sp, #3784	@ 0xec8
 800a1ba:	a817      	add	r0, sp, #92	@ 0x5c
 800a1bc:	f008 f84a 	bl	8012254 <WS28xxDmxMulti::WS28xxDmxMulti()>
 800a1c0:	f6a4 5334 	subw	r3, r4, #3380	@ 0xd34
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	69da      	ldr	r2, [r3, #28]
 800a1c8:	f8d3 a028 	ldr.w	sl, [r3, #40]	@ 0x28
 800a1cc:	9205      	str	r2, [sp, #20]
 800a1ce:	46a8      	mov	r8, r5
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	429d      	cmp	r5, r3
 800a1d4:	f040 82a1 	bne.w	800a71a <main+0x5f2>
 800a1d8:	f5a4 635b 	sub.w	r3, r4, #3504	@ 0xdb0
 800a1dc:	f8df a2f0 	ldr.w	sl, [pc, #752]	@ 800a4d0 <main+0x3a8>
 800a1e0:	9905      	ldr	r1, [sp, #20]
 800a1e2:	f893 8010 	ldrb.w	r8, [r3, #16]
 800a1e6:	af09      	add	r7, sp, #36	@ 0x24
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f009 f83d 	bl	8013268 <PixelPatterns::PixelPatterns(unsigned long)>
 800a1ee:	f8da 3000 	ldr.w	r3, [sl]
 800a1f2:	b12b      	cbz	r3, 800a200 <main+0xd8>
 800a1f4:	4ba2      	ldr	r3, [pc, #648]	@ (800a480 <main+0x358>)
 800a1f6:	4aa3      	ldr	r2, [pc, #652]	@ (800a484 <main+0x35c>)
 800a1f8:	48a3      	ldr	r0, [pc, #652]	@ (800a488 <main+0x360>)
 800a1fa:	2125      	movs	r1, #37	@ 0x25
 800a1fc:	f012 f9f6 	bl	801c5ec <__assert_func>
 800a200:	f8df 92d0 	ldr.w	r9, [pc, #720]	@ 800a4d4 <main+0x3ac>
 800a204:	f8ca 7000 	str.w	r7, [sl]
 800a208:	4641      	mov	r1, r8
 800a20a:	4638      	mov	r0, r7
 800a20c:	f7ff fcee 	bl	8009bec <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 800a210:	f8d9 b000 	ldr.w	fp, [r9]
 800a214:	2500      	movs	r5, #0
 800a216:	f5a4 6629 	sub.w	r6, r4, #2704	@ 0xa90
 800a21a:	f1bb 0f21 	cmp.w	fp, #33	@ 0x21
 800a21e:	f240 82b8 	bls.w	800a792 <main+0x66a>
 800a222:	a81b      	add	r0, sp, #108	@ 0x6c
 800a224:	f006 fc3c 	bl	8010aa0 <Dmx::Dmx()>
 800a228:	a80e      	add	r0, sp, #56	@ 0x38
 800a22a:	f006 f889 	bl	8010340 <DmxParams::DmxParams()>
 800a22e:	a80e      	add	r0, sp, #56	@ 0x38
 800a230:	f006 f897 	bl	8010362 <DmxParams::Load()>
 800a234:	a91b      	add	r1, sp, #108	@ 0x6c
 800a236:	a80e      	add	r0, sp, #56	@ 0x38
 800a238:	f006 f9ac 	bl	8010594 <DmxParams::Set(Dmx*)>
 800a23c:	f8d9 6000 	ldr.w	r6, [r9]
 800a240:	f04f 0b28 	mov.w	fp, #40	@ 0x28
 800a244:	2e21      	cmp	r6, #33	@ 0x21
 800a246:	f240 82be 	bls.w	800a7c6 <main+0x69e>
 800a24a:	f6a4 6398 	subw	r3, r4, #3736	@ 0xe98
 800a24e:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a252:	2600      	movs	r6, #0
 800a254:	4a8d      	ldr	r2, [pc, #564]	@ (800a48c <main+0x364>)
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	4648      	mov	r0, r9
 800a25a:	711e      	strb	r6, [r3, #4]
 800a25c:	f7ff fa5c 	bl	8009718 <DmxSend::Print()>
 800a260:	f6a4 43f4 	subw	r3, r4, #3316	@ 0xcf4
 800a264:	2201      	movs	r2, #1
 800a266:	e9c3 2514 	strd	r2, r5, [r3, #80]	@ 0x50
 800a26a:	f8da 3000 	ldr.w	r3, [sl]
 800a26e:	4888      	ldr	r0, [pc, #544]	@ (800a490 <main+0x368>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	42b3      	cmp	r3, r6
 800a274:	ab17      	add	r3, sp, #92	@ 0x5c
 800a276:	bf0c      	ite	eq
 800a278:	4619      	moveq	r1, r3
 800a27a:	4631      	movne	r1, r6
 800a27c:	f6a4 6284 	subw	r2, r4, #3716	@ 0xe84
 800a280:	42b5      	cmp	r5, r6
 800a282:	bf14      	ite	ne
 800a284:	464b      	movne	r3, r9
 800a286:	4633      	moveq	r3, r6
 800a288:	e9c2 0100 	strd	r0, r1, [r2]
 800a28c:	6093      	str	r3, [r2, #8]
 800a28e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800a292:	2340      	movs	r3, #64	@ 0x40
 800a294:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 800a298:	4a7e      	ldr	r2, [pc, #504]	@ (800a494 <main+0x36c>)
 800a29a:	497f      	ldr	r1, [pc, #508]	@ (800a498 <main+0x370>)
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	487f      	ldr	r0, [pc, #508]	@ (800a49c <main+0x374>)
 800a2a0:	2325      	movs	r3, #37	@ 0x25
 800a2a2:	f012 f8c3 	bl	801c42c <printf>
 800a2a6:	4648      	mov	r0, r9
 800a2a8:	f7ff f94e 	bl	8009548 <LightSetWith4<64ul>::Print()>
 800a2ac:	4a7c      	ldr	r2, [pc, #496]	@ (800a4a0 <main+0x378>)
 800a2ae:	f8c4 92e0 	str.w	r9, [r4, #736]	@ 0x2e0
 800a2b2:	f6a4 6378 	subw	r3, r4, #3704	@ 0xe78
 800a2b6:	e9c3 2900 	strd	r2, r9, [r3]
 800a2ba:	aa17      	add	r2, sp, #92	@ 0x5c
 800a2bc:	609a      	str	r2, [r3, #8]
 800a2be:	4b79      	ldr	r3, [pc, #484]	@ (800a4a4 <main+0x37c>)
 800a2c0:	f8c4 92c0 	str.w	r9, [r4, #704]	@ 0x2c0
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	4978      	ldr	r1, [pc, #480]	@ (800a4a8 <main+0x380>)
 800a2c8:	ab14      	add	r3, sp, #80	@ 0x50
 800a2ca:	f6a4 5934 	subw	r9, r4, #3380	@ 0xd34
 800a2ce:	f8c2 3c9c 	str.w	r3, [r2, #3228]	@ 0xc9c
 800a2d2:	a875      	add	r0, sp, #468	@ 0x1d4
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	f7ff fbe5 	bl	8009aa4 <Display::TextStatus(char const*, unsigned long)>
 800a2da:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800a2de:	f008 fe97 	bl	8013010 <pixel::pixel_get_type(pixel::Type)>
 800a2e2:	9502      	str	r5, [sp, #8]
 800a2e4:	f8d9 3000 	ldr.w	r3, [r9]
 800a2e8:	4a70      	ldr	r2, [pc, #448]	@ (800a4ac <main+0x384>)
 800a2ea:	e9cd 0300 	strd	r0, r3, [sp]
 800a2ee:	2120      	movs	r1, #32
 800a2f0:	9b05      	ldr	r3, [sp, #20]
 800a2f2:	a82b      	add	r0, sp, #172	@ 0xac
 800a2f4:	f012 f8c2 	bl	801c47c <snprintf>
 800a2f8:	4a6d      	ldr	r2, [pc, #436]	@ (800a4b0 <main+0x388>)
 800a2fa:	2120      	movs	r1, #32
 800a2fc:	a834      	add	r0, sp, #208	@ 0xd0
 800a2fe:	f012 f8bd 	bl	801c47c <snprintf>
 800a302:	4605      	mov	r5, r0
 800a304:	202c      	movs	r0, #44	@ 0x2c
 800a306:	f012 fae7 	bl	801c8d8 <operator new(unsigned int)>
 800a30a:	4603      	mov	r3, r0
 800a30c:	6046      	str	r6, [r0, #4]
 800a30e:	6286      	str	r6, [r0, #40]	@ 0x28
 800a310:	aa2b      	add	r2, sp, #172	@ 0xac
 800a312:	f823 6b08 	strh.w	r6, [r3], #8
 800a316:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 800a31a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a31e:	b111      	cbz	r1, 800a326 <main+0x1fe>
 800a320:	42b3      	cmp	r3, r6
 800a322:	f040 828b 	bne.w	800a83c <main+0x714>
 800a326:	2301      	movs	r3, #1
 800a328:	461a      	mov	r2, r3
 800a32a:	a90a      	add	r1, sp, #40	@ 0x28
 800a32c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a32e:	a8b5      	add	r0, sp, #724	@ 0x2d4
 800a330:	f004 feb4 	bl	800f09c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)>
 800a334:	f6a4 36f4 	subw	r6, r4, #3060	@ 0xbf4
 800a338:	a8dd      	add	r0, sp, #884	@ 0x374
 800a33a:	f7ff fdcd 	bl	8009ed8 <LLRPDevice::LLRPDevice()>
 800a33e:	4b5d      	ldr	r3, [pc, #372]	@ (800a4b4 <main+0x38c>)
 800a340:	4a5d      	ldr	r2, [pc, #372]	@ (800a4b8 <main+0x390>)
 800a342:	495e      	ldr	r1, [pc, #376]	@ (800a4bc <main+0x394>)
 800a344:	6033      	str	r3, [r6, #0]
 800a346:	485e      	ldr	r0, [pc, #376]	@ (800a4c0 <main+0x398>)
 800a348:	2331      	movs	r3, #49	@ 0x31
 800a34a:	f012 f86f 	bl	801c42c <printf>
 800a34e:	2333      	movs	r3, #51	@ 0x33
 800a350:	4a59      	ldr	r2, [pc, #356]	@ (800a4b8 <main+0x390>)
 800a352:	495a      	ldr	r1, [pc, #360]	@ (800a4bc <main+0x394>)
 800a354:	485b      	ldr	r0, [pc, #364]	@ (800a4c4 <main+0x39c>)
 800a356:	f012 f869 	bl	801c42c <printf>
 800a35a:	b2ed      	uxtb	r5, r5
 800a35c:	f896 3056 	ldrb.w	r3, [r6, #86]	@ 0x56
 800a360:	2d20      	cmp	r5, #32
 800a362:	bf28      	it	cs
 800a364:	2520      	movcs	r5, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 826e 	beq.w	800a848 <main+0x720>
 800a36c:	f50d 7b3e 	add.w	fp, sp, #760	@ 0x2f8
 800a370:	462a      	mov	r2, r5
 800a372:	a934      	add	r1, sp, #208	@ 0xd0
 800a374:	4658      	mov	r0, fp
 800a376:	f7ff fafa 	bl	800996e <memcpy.isra.0>
 800a37a:	f04f 0a00 	mov.w	sl, #0
 800a37e:	f886 5054 	strb.w	r5, [r6, #84]	@ 0x54
 800a382:	2601      	movs	r6, #1
 800a384:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a388:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 800a4d8 <main+0x3b0>
 800a38c:	9500      	str	r5, [sp, #0]
 800a38e:	f8d9 0000 	ldr.w	r0, [r9]
 800a392:	f88d 5168 	strb.w	r5, [sp, #360]	@ 0x168
 800a396:	465b      	mov	r3, fp
 800a398:	2204      	movs	r2, #4
 800a39a:	2109      	movs	r1, #9
 800a39c:	f00e faf6 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a3a0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800a3a4:	9600      	str	r6, [sp, #0]
 800a3a6:	f8d9 0000 	ldr.w	r0, [r9]
 800a3aa:	ab5a      	add	r3, sp, #360	@ 0x168
 800a3ac:	2224      	movs	r2, #36	@ 0x24
 800a3ae:	2109      	movs	r1, #9
 800a3b0:	f00e faec 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a3b4:	f6a4 33f4 	subw	r3, r4, #3060	@ 0xbf4
 800a3b8:	4a43      	ldr	r2, [pc, #268]	@ (800a4c8 <main+0x3a0>)
 800a3ba:	645a      	str	r2, [r3, #68]	@ 0x44
 800a3bc:	f20d 5314 	addw	r3, sp, #1300	@ 0x514
 800a3c0:	f503 50cc 	add.w	r0, r3, #6528	@ 0x1980
 800a3c4:	2206      	movs	r2, #6
 800a3c6:	f20d 311e 	addw	r1, sp, #798	@ 0x31e
 800a3ca:	3016      	adds	r0, #22
 800a3cc:	f7ff facf 	bl	800996e <memcpy.isra.0>
 800a3d0:	f894 3fe1 	ldrb.w	r3, [r4, #4065]	@ 0xfe1
 800a3d4:	a8b5      	add	r0, sp, #724	@ 0x2d4
 800a3d6:	f043 0310 	orr.w	r3, r3, #16
 800a3da:	f884 3fe1 	strb.w	r3, [r4, #4065]	@ 0xfe1
 800a3de:	f004 feb7 	bl	800f150 <RDMDeviceResponder::Init()>
 800a3e2:	a85a      	add	r0, sp, #360	@ 0x168
 800a3e4:	f004 fdf0 	bl	800efc8 <RDMDeviceParams::RDMDeviceParams()>
 800a3e8:	a85a      	add	r0, sp, #360	@ 0x168
 800a3ea:	f004 fe00 	bl	800efee <RDMDeviceParams::Load()>
 800a3ee:	a9b6      	add	r1, sp, #728	@ 0x2d8
 800a3f0:	a85a      	add	r0, sp, #360	@ 0x168
 800a3f2:	f004 fe01 	bl	800eff8 <RDMDeviceParams::Set(RDMDevice*)>
 800a3f6:	f6a4 5534 	subw	r5, r4, #3380	@ 0xd34
 800a3fa:	a8b5      	add	r0, sp, #724	@ 0x2d4
 800a3fc:	f7ff fe3c 	bl	800a078 <RDMNetDevice::Print()>
 800a400:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a404:	f003 f99c 	bl	800d740 <ArtNetNode::Print()>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	9a05      	ldr	r2, [sp, #20]
 800a40c:	492f      	ldr	r1, [pc, #188]	@ (800a4cc <main+0x3a4>)
 800a40e:	a875      	add	r0, sp, #468	@ 0x1d4
 800a410:	f00d fe6e 	bl	80180f0 <DisplayUdf::SetTitle(char const*, ...)>
 800a414:	2202      	movs	r2, #2
 800a416:	4611      	mov	r1, r2
 800a418:	a875      	add	r0, sp, #468	@ 0x1d4
 800a41a:	f00d fe7c 	bl	8018116 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a41e:	2203      	movs	r2, #3
 800a420:	4611      	mov	r1, r2
 800a422:	a875      	add	r0, sp, #468	@ 0x1d4
 800a424:	f00d fe77 	bl	8018116 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a428:	2208      	movs	r2, #8
 800a42a:	2104      	movs	r1, #4
 800a42c:	a875      	add	r0, sp, #468	@ 0x1d4
 800a42e:	f00d fe72 	bl	8018116 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a432:	2213      	movs	r2, #19
 800a434:	2105      	movs	r1, #5
 800a436:	a875      	add	r0, sp, #468	@ 0x1d4
 800a438:	f00d fe6d 	bl	8018116 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 800a43c:	a83d      	add	r0, sp, #244	@ 0xf4
 800a43e:	f00d ff35 	bl	80182ac <DisplayUdfParams::DisplayUdfParams()>
 800a442:	a83d      	add	r0, sp, #244	@ 0xf4
 800a444:	f00d ff40 	bl	80182c8 <DisplayUdfParams::Load()>
 800a448:	a975      	add	r1, sp, #468	@ 0x1d4
 800a44a:	a83d      	add	r0, sp, #244	@ 0xf4
 800a44c:	f00e f864 	bl	8018518 <DisplayUdfParams::Set(DisplayUdf*)>
 800a450:	a875      	add	r0, sp, #468	@ 0x1d4
 800a452:	f00d fe7b 	bl	801814c <DisplayUdf::Show()>
 800a456:	68e8      	ldr	r0, [r5, #12]
 800a458:	f008 fdda 	bl	8013010 <pixel::pixel_get_type(pixel::Type)>
 800a45c:	4606      	mov	r6, r0
 800a45e:	e03d      	b.n	800a4dc <main+0x3b4>
 800a460:	08020fbe 	stmdaeq	r2, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp}
 800a464:	08020fae 	stmdaeq	r2, {r1, r2, r3, r5, r7, r8, r9, sl, fp}
 800a468:	0801cfa8 	stmdaeq	r1, {r3, r5, r7, r8, r9, sl, fp, lr, pc}
 800a46c:	0801cfb1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, fp, lr, pc}
 800a470:	0801df9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, ip, lr, pc}
 800a474:	2000e388 	andcs	lr, r0, r8, lsl #7
 800a478:	0801cfbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, lr, pc}
 800a47c:	0801cff3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr, pc}
 800a480:	0801cdb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, fp, lr, pc}
 800a484:	0801d00e 	stmdaeq	r1, {r1, r2, r3, ip, lr, pc}
 800a488:	0801cd70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, lr, pc}
 800a48c:	0801df48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, ip, lr, pc}
 800a490:	0801df04 	stmdaeq	r1, {r2, r8, r9, sl, fp, ip, lr, pc}
 800a494:	0801d01f 	stmdaeq	r1, {r0, r1, r2, r3, r4, ip, lr, pc}
 800a498:	0801d047 	stmdaeq	r1, {r0, r1, r2, r6, ip, lr, pc}
 800a49c:	0801d055 	stmdaeq	r1, {r0, r2, r4, r6, ip, lr, pc}
 800a4a0:	0801def0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, fp, ip, lr, pc}
 800a4a4:	2000d2d4 	ldrdcs	sp, [r0], -r4
 800a4a8:	08020d9a 	stmdaeq	r2, {r1, r3, r4, r7, r8, sl, fp}
 800a4ac:	0801d071 	stmdaeq	r1, {r0, r4, r5, r6, ip, lr, pc}
 800a4b0:	0801d08b 	stmdaeq	r1, {r0, r1, r3, r7, ip, lr, pc}
 800a4b4:	0801df8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, lr, pc}
 800a4b8:	0801cedd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, sl, fp, lr, pc}
 800a4bc:	0801ceea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, sl, fp, lr, pc}
 800a4c0:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 800a4c4:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}
 800a4c8:	00040100 	andeq	r0, r4, r0, lsl #2
 800a4cc:	0801d0a4 	stmdaeq	r1, {r2, r5, r7, ip, lr, pc}
 800a4d0:	2000dfc0 	andcs	sp, r0, r0, asr #31
 800a4d4:	20000000 	andcs	r0, r0, r0
 800a4d8:	2000e2dc 	ldrdcs	lr, [r0], -ip
 800a4dc:	6928      	ldr	r0, [r5, #16]
 800a4de:	f8d5 9000 	ldr.w	r9, [r5]
 800a4e2:	f8d5 a020 	ldr.w	sl, [r5, #32]
 800a4e6:	f008 fe05 	bl	80130f4 <pixel::pixel_get_map(pixel::Map)>
 800a4ea:	4ac0      	ldr	r2, [pc, #768]	@ (800a7ec <main+0x6c4>)
 800a4ec:	f8cd 9000 	str.w	r9, [sp]
 800a4f0:	e9cd a001 	strd	sl, r0, [sp, #4]
 800a4f4:	4633      	mov	r3, r6
 800a4f6:	2107      	movs	r1, #7
 800a4f8:	a875      	add	r0, sp, #468	@ 0x1d4
 800a4fa:	f7ff fa6d 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	d010      	beq.n	800a526 <main+0x3fe>
 800a504:	f6a4 43f4 	subw	r3, r4, #3316	@ 0xcf4
 800a508:	2106      	movs	r1, #6
 800a50a:	6998      	ldr	r0, [r3, #24]
 800a50c:	f7ff fa2a 	bl	8009964 <Display::ClearLine(unsigned long) [clone .isra.0]>
 800a510:	4640      	mov	r0, r8
 800a512:	f008 fef5 	bl	8013300 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800a516:	4ab6      	ldr	r2, [pc, #728]	@ (800a7f0 <main+0x6c8>)
 800a518:	f8cd 8000 	str.w	r8, [sp]
 800a51c:	4603      	mov	r3, r0
 800a51e:	2106      	movs	r1, #6
 800a520:	a875      	add	r0, sp, #468	@ 0x1d4
 800a522:	f7ff fa59 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 800a526:	2100      	movs	r1, #0
 800a528:	f894 3897 	ldrb.w	r3, [r4, #2199]	@ 0x897
 800a52c:	2203      	movs	r2, #3
 800a52e:	a850      	add	r0, sp, #320	@ 0x140
 800a530:	f000 fb20 	bl	800ab74 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)>
 800a534:	a823      	add	r0, sp, #140	@ 0x8c
 800a536:	f000 fe01 	bl	800b13c <RemoteConfigParams::RemoteConfigParams()>
 800a53a:	a823      	add	r0, sp, #140	@ 0x8c
 800a53c:	f000 fe06 	bl	800b14c <RemoteConfigParams::Load()>
 800a540:	a950      	add	r1, sp, #320	@ 0x140
 800a542:	a823      	add	r0, sp, #140	@ 0x8c
 800a544:	f000 ff10 	bl	800b368 <RemoteConfigParams::Set(RemoteConfig*)>
 800a548:	a806      	add	r0, sp, #24
 800a54a:	f00e fa75 	bl	8018a38 <ConfigStore::Flash()>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d1fa      	bne.n	800a548 <main+0x420>
 800a552:	a807      	add	r0, sp, #28
 800a554:	f00b fa0c 	bl	8015970 <MDNS::Print()>
 800a558:	49a6      	ldr	r1, [pc, #664]	@ (800a7f4 <main+0x6cc>)
 800a55a:	2203      	movs	r2, #3
 800a55c:	a875      	add	r0, sp, #468	@ 0x1d4
 800a55e:	f7ff faa1 	bl	8009aa4 <Display::TextStatus(char const*, unsigned long)>
 800a562:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a566:	f001 fcdf 	bl	800bf28 <ArtNetNode::Start()>
 800a56a:	2202      	movs	r2, #2
 800a56c:	49a2      	ldr	r1, [pc, #648]	@ (800a7f8 <main+0x6d0>)
 800a56e:	a875      	add	r0, sp, #468	@ 0x1d4
 800a570:	f7ff fa98 	bl	8009aa4 <Display::TextStatus(char const*, unsigned long)>
 800a574:	2102      	movs	r1, #2
 800a576:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a57a:	f010 f937 	bl	801a7ec <fwdgt_config>
 800a57e:	f6a4 439c 	subw	r3, r4, #3228	@ 0xc9c
 800a582:	2801      	cmp	r0, #1
 800a584:	bf0c      	ite	eq
 800a586:	2201      	moveq	r2, #1
 800a588:	2200      	movne	r2, #0
 800a58a:	741a      	strb	r2, [r3, #16]
 800a58c:	d101      	bne.n	800a592 <main+0x46a>
 800a58e:	f010 f91d 	bl	801a7cc <fwdgt_enable>
 800a592:	4e9a      	ldr	r6, [pc, #616]	@ (800a7fc <main+0x6d4>)
 800a594:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 800a828 <main+0x700>
 800a598:	f010 f920 	bl	801a7dc <fwdgt_counter_reload>
 800a59c:	f7fe f862 	bl	8008664 <net::net_handle()>
 800a5a0:	f7ff f9ee 	bl	8009980 <net::dhcp_run()>
 800a5a4:	f50d 62a5 	add.w	r2, sp, #1320	@ 0x528
 800a5a8:	f50d 61a5 	add.w	r1, sp, #1320	@ 0x528
 800a5ac:	f502 6247 	add.w	r2, r2, #3184	@ 0xc70
 800a5b0:	ab0b      	add	r3, sp, #44	@ 0x2c
 800a5b2:	f601 416c 	addw	r1, r1, #3180	@ 0xc6c
 800a5b6:	f8d4 02c8 	ldr.w	r0, [r4, #712]	@ 0x2c8
 800a5ba:	f00c fd21 	bl	8017000 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a5be:	6833      	ldr	r3, [r6, #0]
 800a5c0:	f8c4 32d4 	str.w	r3, [r4, #724]	@ 0x2d4
 800a5c4:	4601      	mov	r1, r0
 800a5c6:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a5ca:	f001 fec1 	bl	800c350 <ArtNetNode::Process(unsigned long)>
 800a5ce:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a5d2:	f7ff fa85 	bl	8009ae0 <E131Bridge::Run()>
 800a5d6:	f8d4 22d4 	ldr.w	r2, [r4, #724]	@ 0x2d4
 800a5da:	f8d4 32dc 	ldr.w	r3, [r4, #732]	@ 0x2dc
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	2bc8      	cmp	r3, #200	@ 0xc8
 800a5e2:	f6a4 5388 	subw	r3, r4, #3464	@ 0xd88
 800a5e6:	bf88      	it	hi
 800a5e8:	f8c4 22dc 	strhi.w	r2, [r4, #732]	@ 0x2dc
 800a5ec:	7b1a      	ldrb	r2, [r3, #12]
 800a5ee:	bb4a      	cbnz	r2, 800a644 <main+0x51c>
 800a5f0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800a5f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a5f4:	69a8      	ldr	r0, [r5, #24]
 800a5f6:	f105 011c 	add.w	r1, r5, #28
 800a5fa:	f00c fc35 	bl	8016e68 <net::tcp_read(long, unsigned char const**, unsigned long&)>
 800a5fe:	4681      	mov	r9, r0
 800a600:	b190      	cbz	r0, 800a628 <main+0x500>
 800a602:	f6a4 6a9c 	subw	sl, r4, #3740	@ 0xe9c
 800a606:	4a7e      	ldr	r2, [pc, #504]	@ (800a800 <main+0x6d8>)
 800a608:	f8da 3000 	ldr.w	r3, [sl]
 800a60c:	497d      	ldr	r1, [pc, #500]	@ (800a804 <main+0x6dc>)
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	487d      	ldr	r0, [pc, #500]	@ (800a808 <main+0x6e0>)
 800a612:	2333      	movs	r3, #51	@ 0x33
 800a614:	f011 ff0a 	bl	801c42c <printf>
 800a618:	f8da 3000 	ldr.w	r3, [sl]
 800a61c:	69ea      	ldr	r2, [r5, #28]
 800a61e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a622:	4649      	mov	r1, r9
 800a624:	f001 fb2c 	bl	800bc80 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)>
 800a628:	f6a4 5588 	subw	r5, r4, #3464	@ 0xd88
 800a62c:	ab0b      	add	r3, sp, #44	@ 0x2c
 800a62e:	6968      	ldr	r0, [r5, #20]
 800a630:	aa56      	add	r2, sp, #344	@ 0x158
 800a632:	4641      	mov	r1, r8
 800a634:	f00c fce4 	bl	8017000 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a638:	2803      	cmp	r0, #3
 800a63a:	61e8      	str	r0, [r5, #28]
 800a63c:	d902      	bls.n	800a644 <main+0x51c>
 800a63e:	a850      	add	r0, sp, #320	@ 0x140
 800a640:	f000 fc58 	bl	800aef4 <RemoteConfig::HandleRequest()>
 800a644:	a806      	add	r0, sp, #24
 800a646:	f00e f9f7 	bl	8018a38 <ConfigStore::Flash()>
 800a64a:	f6a4 63a4 	subw	r3, r4, #3748	@ 0xea4
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	b1ab      	cbz	r3, 800a67e <main+0x556>
 800a652:	f8df a1d8 	ldr.w	sl, [pc, #472]	@ 800a82c <main+0x704>
 800a656:	f8da 0000 	ldr.w	r0, [sl]
 800a65a:	f009 fad3 	bl	8013c04 <WS28xxMulti::IsUpdating()>
 800a65e:	4605      	mov	r5, r0
 800a660:	b968      	cbnz	r0, 800a67e <main+0x556>
 800a662:	6832      	ldr	r2, [r6, #0]
 800a664:	f8df b1c8 	ldr.w	fp, [pc, #456]	@ 800a830 <main+0x708>
 800a668:	4681      	mov	r9, r0
 800a66a:	f8db 3000 	ldr.w	r3, [fp]
 800a66e:	4599      	cmp	r9, r3
 800a670:	f0c0 80f2 	bcc.w	800a858 <main+0x730>
 800a674:	b11d      	cbz	r5, 800a67e <main+0x556>
 800a676:	f8da 0000 	ldr.w	r0, [sl]
 800a67a:	f009 f9d1 	bl	8013a20 <WS28xxMulti::Update()>
 800a67e:	4d63      	ldr	r5, [pc, #396]	@ (800a80c <main+0x6e4>)
 800a680:	4863      	ldr	r0, [pc, #396]	@ (800a810 <main+0x6e8>)
 800a682:	4b64      	ldr	r3, [pc, #400]	@ (800a814 <main+0x6ec>)
 800a684:	4a64      	ldr	r2, [pc, #400]	@ (800a818 <main+0x6f0>)
 800a686:	6800      	ldr	r0, [r0, #0]
 800a688:	4629      	mov	r1, r5
 800a68a:	f00c fcb9 	bl	8017000 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a68e:	4b63      	ldr	r3, [pc, #396]	@ (800a81c <main+0x6f4>)
 800a690:	280b      	cmp	r0, #11
 800a692:	6018      	str	r0, [r3, #0]
 800a694:	d90a      	bls.n	800a6ac <main+0x584>
 800a696:	682b      	ldr	r3, [r5, #0]
 800a698:	789a      	ldrb	r2, [r3, #2]
 800a69a:	f012 0f78 	tst.w	r2, #120	@ 0x78
 800a69e:	d105      	bne.n	800a6ac <main+0x584>
 800a6a0:	8899      	ldrh	r1, [r3, #4]
 800a6a2:	ba49      	rev16	r1, r1
 800a6a4:	b289      	uxth	r1, r1
 800a6a6:	a807      	add	r0, sp, #28
 800a6a8:	f00b f894 	bl	80157d4 <MDNS::HandleQuestions(unsigned long)>
 800a6ac:	f8df 9184 	ldr.w	r9, [pc, #388]	@ 800a834 <main+0x70c>
 800a6b0:	485b      	ldr	r0, [pc, #364]	@ (800a820 <main+0x6f8>)
 800a6b2:	4a5c      	ldr	r2, [pc, #368]	@ (800a824 <main+0x6fc>)
 800a6b4:	6800      	ldr	r0, [r0, #0]
 800a6b6:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	f00c fca0 	bl	8017000 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>
 800a6c0:	2841      	cmp	r0, #65	@ 0x41
 800a6c2:	d915      	bls.n	800a6f0 <main+0x5c8>
 800a6c4:	addd      	add	r5, sp, #884	@ 0x374
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f005 fb44 	bl	800fd54 <LLRPDevice::DumpCommon()>
 800a6cc:	f8d9 3000 	ldr.w	r3, [r9]
 800a6d0:	f8d3 302a 	ldr.w	r3, [r3, #42]	@ 0x2a
 800a6d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6d8:	f000 80c9 	beq.w	800a86e <main+0x746>
 800a6dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6e0:	f000 80ce 	beq.w	800a880 <main+0x758>
 800a6e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6e8:	d102      	bne.n	800a6f0 <main+0x5c8>
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f005 fa4a 	bl	800fb84 <LLRPDevice::HandleRequestMessage()>
 800a6f0:	f6a4 42f4 	subw	r2, r4, #3316	@ 0xcf4
 800a6f4:	6911      	ldr	r1, [r2, #16]
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	f000 80cd 	beq.w	800a896 <main+0x76e>
 800a6fc:	7d53      	ldrb	r3, [r2, #21]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f040 80c2 	bne.w	800a888 <main+0x760>
 800a704:	6833      	ldr	r3, [r6, #0]
 800a706:	6852      	ldr	r2, [r2, #4]
 800a708:	1a9b      	subs	r3, r3, r2
 800a70a:	4299      	cmp	r1, r3
 800a70c:	f080 80c3 	bcs.w	800a896 <main+0x76e>
 800a710:	2101      	movs	r1, #1
 800a712:	a875      	add	r0, sp, #468	@ 0x1d4
 800a714:	f7ff f9d4 	bl	8009ac0 <Display::SetSleep(bool)>
 800a718:	e0bd      	b.n	800a896 <main+0x76e>
 800a71a:	2d07      	cmp	r5, #7
 800a71c:	d81a      	bhi.n	800a754 <main+0x62c>
 800a71e:	f5a4 625b 	sub.w	r2, r4, #3504	@ 0xdb0
 800a722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a726:	6812      	ldr	r2, [r2, #0]
 800a728:	40ab      	lsls	r3, r5
 800a72a:	4393      	bics	r3, r2
 800a72c:	ab46      	add	r3, sp, #280	@ 0x118
 800a72e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800a732:	bf08      	it	eq
 800a734:	f04f 0901 	moveq.w	r9, #1
 800a738:	8ade      	ldrh	r6, [r3, #22]
 800a73a:	bf18      	it	ne
 800a73c:	f04f 0900 	movne.w	r9, #0
 800a740:	f8df b0f4 	ldr.w	fp, [pc, #244]	@ 800a838 <main+0x710>
 800a744:	4647      	mov	r7, r8
 800a746:	eb08 030a 	add.w	r3, r8, sl
 800a74a:	429f      	cmp	r7, r3
 800a74c:	d106      	bne.n	800a75c <main+0x634>
 800a74e:	3501      	adds	r5, #1
 800a750:	46b8      	mov	r8, r7
 800a752:	e53d      	b.n	800a1d0 <main+0xa8>
 800a754:	f04f 0900 	mov.w	r9, #0
 800a758:	464e      	mov	r6, r9
 800a75a:	e7f1      	b.n	800a740 <main+0x618>
 800a75c:	f1b9 0f00 	cmp.w	r9, #0
 800a760:	d014      	beq.n	800a78c <main+0x664>
 800a762:	b2b3      	uxth	r3, r6
 800a764:	2201      	movs	r2, #1
 800a766:	4639      	mov	r1, r7
 800a768:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a76c:	f001 ffd6 	bl	800c71c <ArtNetNode::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800a770:	465a      	mov	r2, fp
 800a772:	2111      	movs	r1, #17
 800a774:	9600      	str	r6, [sp, #0]
 800a776:	f105 0341 	add.w	r3, r5, #65	@ 0x41
 800a77a:	a8b5      	add	r0, sp, #724	@ 0x2d4
 800a77c:	f011 fe7e 	bl	801c47c <snprintf>
 800a780:	aab5      	add	r2, sp, #724	@ 0x2d4
 800a782:	4639      	mov	r1, r7
 800a784:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a788:	f001 fc46 	bl	800c018 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800a78c:	3701      	adds	r7, #1
 800a78e:	3601      	adds	r6, #1
 800a790:	e7d9      	b.n	800a746 <main+0x61e>
 800a792:	f8d9 3000 	ldr.w	r3, [r9]
 800a796:	ebab 0303 	sub.w	r3, fp, r3
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d810      	bhi.n	800a7c0 <main+0x698>
 800a79e:	f8b6 200d 	ldrh.w	r2, [r6, #13]
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	411a      	asrs	r2, r3
 800a7a6:	f002 0203 	and.w	r2, r2, #3
 800a7aa:	2a01      	cmp	r2, #1
 800a7ac:	d108      	bne.n	800a7c0 <main+0x698>
 800a7ae:	4433      	add	r3, r6
 800a7b0:	4659      	mov	r1, fp
 800a7b2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a7b6:	f20d 5014 	addw	r0, sp, #1300	@ 0x514
 800a7ba:	f001 ffaf 	bl	800c71c <ArtNetNode::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800a7be:	3501      	adds	r5, #1
 800a7c0:	f10b 0b01 	add.w	fp, fp, #1
 800a7c4:	e529      	b.n	800a21a <main+0xf2>
 800a7c6:	f20d 5314 	addw	r3, sp, #1300	@ 0x514
 800a7ca:	fb0b 3306 	mla	r3, fp, r6, r3
 800a7ce:	f8d3 3ca8 	ldr.w	r3, [r3, #3240]	@ 0xca8
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d107      	bne.n	800a7e6 <main+0x6be>
 800a7d6:	f8d9 1000 	ldr.w	r1, [r9]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	461a      	mov	r2, r3
 800a7de:	1a71      	subs	r1, r6, r1
 800a7e0:	a81b      	add	r0, sp, #108	@ 0x6c
 800a7e2:	f006 facd 	bl	8010d80 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>
 800a7e6:	3601      	adds	r6, #1
 800a7e8:	e52c      	b.n	800a244 <main+0x11c>
 800a7ea:	bf00      	nop
 800a7ec:	0801d0b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, ip, lr, pc}
 800a7f0:	0801cd99 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, fp, lr, pc}
 800a7f4:	08020ab5 	stmdaeq	r2, {r0, r2, r4, r5, r7, r9, fp}
 800a7f8:	08020aa5 	stmdaeq	r2, {r0, r2, r5, r7, r9, fp}
 800a7fc:	2001bcd0 	ldrdcs	fp, [r1], -r0
 800a800:	0801d0c6 	stmdaeq	r1, {r1, r2, r6, r7, ip, lr, pc}
 800a804:	0801d0f0 	stmdaeq	r1, {r4, r5, r6, r7, ip, lr, pc}
 800a808:	0801d0f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, ip, lr, pc}
 800a80c:	2000dfd0 	ldrdcs	sp, [r0], -r0
 800a810:	2000dfe0 	andcs	sp, r0, r0, ror #31
 800a814:	2000dfd8 	ldrdcs	sp, [r0], -r8
 800a818:	2000dfdc 	ldrdcs	sp, [r0], -ip
 800a81c:	2000dfd4 	ldrdcs	sp, [r0], -r4
 800a820:	2000d40c 	andcs	sp, r0, ip, lsl #8
 800a824:	2000d408 	andcs	sp, r0, r8, lsl #8
 800a828:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a82c:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc
 800a830:	2000dfb8 			@ <UNDEFINED> instruction: 0x2000dfb8
 800a834:	2000d404 	andcs	sp, r0, r4, lsl #8
 800a838:	0801d000 	stmdaeq	r1, {ip, lr, pc}
 800a83c:	f803 1b01 	strb.w	r1, [r3], #1
 800a840:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a842:	3101      	adds	r1, #1
 800a844:	6281      	str	r1, [r0, #40]	@ 0x28
 800a846:	e568      	b.n	800a31a <main+0x1f2>
 800a848:	462a      	mov	r2, r5
 800a84a:	a934      	add	r1, sp, #208	@ 0xd0
 800a84c:	a8b6      	add	r0, sp, #728	@ 0x2d8
 800a84e:	f7ff f88e 	bl	800996e <memcpy.isra.0>
 800a852:	f886 5055 	strb.w	r5, [r6, #85]	@ 0x55
 800a856:	e5ad      	b.n	800a3b4 <main+0x28c>
 800a858:	4649      	mov	r1, r9
 800a85a:	4638      	mov	r0, r7
 800a85c:	9205      	str	r2, [sp, #20]
 800a85e:	f008 ff31 	bl	80136c4 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>
 800a862:	4328      	orrs	r0, r5
 800a864:	9a05      	ldr	r2, [sp, #20]
 800a866:	b2c5      	uxtb	r5, r0
 800a868:	f109 0901 	add.w	r9, r9, #1
 800a86c:	e6fd      	b.n	800a66a <main+0x542>
 800a86e:	4b17      	ldr	r3, [pc, #92]	@ (800a8cc <main+0x7a4>)
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	4a17      	ldr	r2, [pc, #92]	@ (800a8d0 <main+0x7a8>)
 800a874:	4917      	ldr	r1, [pc, #92]	@ (800a8d4 <main+0x7ac>)
 800a876:	4818      	ldr	r0, [pc, #96]	@ (800a8d8 <main+0x7b0>)
 800a878:	2360      	movs	r3, #96	@ 0x60
 800a87a:	f011 fdd7 	bl	801c42c <printf>
 800a87e:	e737      	b.n	800a6f0 <main+0x5c8>
 800a880:	4628      	mov	r0, r5
 800a882:	f005 fa15 	bl	800fcb0 <LLRPDevice::HandleRdmCommand()>
 800a886:	e733      	b.n	800a6f0 <main+0x5c8>
 800a888:	4b14      	ldr	r3, [pc, #80]	@ (800a8dc <main+0x7b4>)
 800a88a:	f8d3 1810 	ldr.w	r1, [r3, #2064]	@ 0x810
 800a88e:	f411 5100 	ands.w	r1, r1, #8192	@ 0x2000
 800a892:	f43f af3e 	beq.w	800a712 <main+0x5ea>
 800a896:	f8d6 a000 	ldr.w	sl, [r6]
 800a89a:	ad8b      	add	r5, sp, #556	@ 0x22c
 800a89c:	f04f 0900 	mov.w	r9, #0
 800a8a0:	f6a4 4b9c 	subw	fp, r4, #3228	@ 0xc9c
 800a8a4:	f8db 30a0 	ldr.w	r3, [fp, #160]	@ 0xa0
 800a8a8:	4599      	cmp	r9, r3
 800a8aa:	d302      	bcc.n	800a8b2 <main+0x78a>
 800a8ac:	f00f fb66 	bl	8019f7c <stack_debug_run()>
 800a8b0:	e672      	b.n	800a598 <main+0x470>
 800a8b2:	6a2b      	ldr	r3, [r5, #32]
 800a8b4:	459a      	cmp	sl, r3
 800a8b6:	d304      	bcc.n	800a8c2 <main+0x79a>
 800a8b8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a8ba:	4798      	blx	r3
 800a8bc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a8be:	4453      	add	r3, sl
 800a8c0:	622b      	str	r3, [r5, #32]
 800a8c2:	f109 0901 	add.w	r9, r9, #1
 800a8c6:	3510      	adds	r5, #16
 800a8c8:	e7ec      	b.n	800a8a4 <main+0x77c>
 800a8ca:	bf00      	nop
 800a8cc:	0801d132 	stmdaeq	r1, {r1, r4, r5, r8, ip, lr, pc}
 800a8d0:	0801ce3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, fp, lr, pc}
 800a8d4:	0801d0f0 	stmdaeq	r1, {r4, r5, r6, r7, ip, lr, pc}
 800a8d8:	0801d11c 	stmdaeq	r1, {r2, r3, r4, r8, ip, lr, pc}
 800a8dc:	40020000 	andmi	r0, r2, r0

0800a8e0 <rdm::device::responder::factorydefaults()>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a918 <rdm::device::responder::factorydefaults()+0x38>)
 800a8e4:	4c0d      	ldr	r4, [pc, #52]	@ (800a91c <rdm::device::responder::factorydefaults()+0x3c>)
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	b086      	sub	sp, #24
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	f000 f996 	bl	800ac1c <RemoteConfig::SetDisable(bool)>
 800a8f0:	6820      	ldr	r0, [r4, #0]
 800a8f2:	2109      	movs	r1, #9
 800a8f4:	f00e f838 	bl	8018968 <ConfigStore::ResetSetList(configstore::Store)>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	f88d 3017 	strb.w	r3, [sp, #23]
 800a906:	6820      	ldr	r0, [r4, #0]
 800a908:	f10d 0317 	add.w	r3, sp, #23
 800a90c:	2214      	movs	r2, #20
 800a90e:	f00e f83d 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800a912:	b006      	add	sp, #24
 800a914:	bd10      	pop	{r4, pc}
 800a916:	bf00      	nop
 800a918:	2000cd30 	andcs	ip, r0, r0, lsr sp
 800a91c:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800a920 <RDMSoftwareVersion::GetVersion()>:
 800a920:	4800      	ldr	r0, [pc, #0]	@ (800a924 <RDMSoftwareVersion::GetVersion()+0x4>)
 800a922:	4770      	bx	lr
 800a924:	0801dfa0 	stmdaeq	r1, {r5, r7, r8, r9, sl, fp, ip, lr, pc}

0800a928 <RDMSoftwareVersion::GetVersionLength()>:
 800a928:	2003      	movs	r0, #3
 800a92a:	4770      	bx	lr

0800a92c <RDMSoftwareVersion::GetVersionId()>:
 800a92c:	4800      	ldr	r0, [pc, #0]	@ (800a930 <RDMSoftwareVersion::GetVersionId()+0x4>)
 800a92e:	4770      	bx	lr
 800a930:	66f19803 	ldrbtvs	r9, [r1], r3, lsl #16

0800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>:
 800a934:	b430      	push	{r4, r5}
 800a936:	4d05      	ldr	r5, [pc, #20]	@ (800a94c <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]+0x18>)
 800a938:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800a93c:	682d      	ldr	r5, [r5, #0]
 800a93e:	b11d      	cbz	r5, 800a948 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]+0x14>
 800a940:	9402      	str	r4, [sp, #8]
 800a942:	bc30      	pop	{r4, r5}
 800a944:	f00c bb7a 	b.w	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800a948:	bc30      	pop	{r4, r5}
 800a94a:	4770      	bx	lr
 800a94c:	2000e230 	andcs	lr, r0, r0, lsr r2

0800a950 <RemoteConfig::HandleDisplayGet()>:
 800a950:	4b0d      	ldr	r3, [pc, #52]	@ (800a988 <RemoteConfig::HandleDisplayGet()+0x38>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a956:	7d59      	ldrb	r1, [r3, #21]
 800a958:	4d0c      	ldr	r5, [pc, #48]	@ (800a98c <RemoteConfig::HandleDisplayGet()+0x3c>)
 800a95a:	4a0d      	ldr	r2, [pc, #52]	@ (800a990 <RemoteConfig::HandleDisplayGet()+0x40>)
 800a95c:	4b0d      	ldr	r3, [pc, #52]	@ (800a994 <RemoteConfig::HandleDisplayGet()+0x44>)
 800a95e:	4604      	mov	r4, r0
 800a960:	2900      	cmp	r1, #0
 800a962:	bf08      	it	eq
 800a964:	4613      	moveq	r3, r2
 800a966:	6828      	ldr	r0, [r5, #0]
 800a968:	4a0b      	ldr	r2, [pc, #44]	@ (800a998 <RemoteConfig::HandleDisplayGet()+0x48>)
 800a96a:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a96e:	f011 fd85 	bl	801c47c <snprintf>
 800a972:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	4602      	mov	r2, r0
 800a97a:	69a3      	ldr	r3, [r4, #24]
 800a97c:	6829      	ldr	r1, [r5, #0]
 800a97e:	6960      	ldr	r0, [r4, #20]
 800a980:	f7ff ffd8 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a984:	b003      	add	sp, #12
 800a986:	bd30      	pop	{r4, r5, pc}
 800a988:	2000e2f4 	strdcs	lr, [r0], -r4
 800a98c:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a990:	0801d14a 	stmdaeq	r1, {r1, r3, r6, r8, ip, lr, pc}
 800a994:	0801d293 	stmdaeq	r1, {r0, r1, r4, r7, r9, ip, lr, pc}
 800a998:	0801d14d 	stmdaeq	r1, {r0, r2, r3, r6, r8, ip, lr, pc}

0800a99c <RemoteConfig::HandleUptime()>:
 800a99c:	7bc3      	ldrb	r3, [r0, #15]
 800a99e:	b1ab      	cbz	r3, 800a9cc <RemoteConfig::HandleUptime()+0x30>
 800a9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9d0 <RemoteConfig::HandleUptime()+0x34>)
 800a9a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a9d4 <RemoteConfig::HandleUptime()+0x38>)
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	4a0b      	ldr	r2, [pc, #44]	@ (800a9d8 <RemoteConfig::HandleUptime()+0x3c>)
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a9b0:	6828      	ldr	r0, [r5, #0]
 800a9b2:	f011 fd63 	bl	801c47c <snprintf>
 800a9b6:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	4602      	mov	r2, r0
 800a9be:	69a3      	ldr	r3, [r4, #24]
 800a9c0:	6829      	ldr	r1, [r5, #0]
 800a9c2:	6960      	ldr	r0, [r4, #20]
 800a9c4:	f7ff ffb6 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800a9c8:	b003      	add	sp, #12
 800a9ca:	bd30      	pop	{r4, r5, pc}
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	2001bcc8 	andcs	fp, r1, r8, asr #25
 800a9d4:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800a9d8:	0801d159 	stmdaeq	r1, {r0, r3, r4, r6, r8, ip, lr, pc}

0800a9dc <RemoteConfig::HandleVersion()>:
 800a9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9de:	4d0a      	ldr	r5, [pc, #40]	@ (800aa08 <RemoteConfig::HandleVersion()+0x2c>)
 800a9e0:	4b0a      	ldr	r3, [pc, #40]	@ (800aa0c <RemoteConfig::HandleVersion()+0x30>)
 800a9e2:	4a0b      	ldr	r2, [pc, #44]	@ (800aa10 <RemoteConfig::HandleVersion()+0x34>)
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	f240 518b 	movw	r1, #1419	@ 0x58b
 800a9ea:	6828      	ldr	r0, [r5, #0]
 800a9ec:	f011 fd46 	bl	801c47c <snprintf>
 800a9f0:	f642 1305 	movw	r3, #10501	@ 0x2905
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	69a3      	ldr	r3, [r4, #24]
 800a9fa:	6829      	ldr	r1, [r5, #0]
 800a9fc:	6960      	ldr	r0, [r4, #20]
 800a9fe:	f7ff ff99 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800aa02:	b003      	add	sp, #12
 800aa04:	bd30      	pop	{r4, r5, pc}
 800aa06:	bf00      	nop
 800aa08:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800aa0c:	2000e388 	andcs	lr, r0, r8, lsl #7
 800aa10:	0801d166 	stmdaeq	r1, {r1, r2, r5, r6, r8, ip, lr, pc}

0800aa14 <RemoteConfig::HandleTftpGet()>:
 800aa14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa16:	4604      	mov	r4, r0
 800aa18:	4d0d      	ldr	r5, [pc, #52]	@ (800aa50 <RemoteConfig::HandleTftpGet()+0x3c>)
 800aa1a:	f000 fd45 	bl	800b4a8 <RemoteConfig::PlatformHandleTftpGet()>
 800aa1e:	f894 1020 	ldrb.w	r1, [r4, #32]
 800aa22:	4a0c      	ldr	r2, [pc, #48]	@ (800aa54 <RemoteConfig::HandleTftpGet()+0x40>)
 800aa24:	4b0c      	ldr	r3, [pc, #48]	@ (800aa58 <RemoteConfig::HandleTftpGet()+0x44>)
 800aa26:	6828      	ldr	r0, [r5, #0]
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	bf18      	it	ne
 800aa2c:	4613      	movne	r3, r2
 800aa2e:	4a0b      	ldr	r2, [pc, #44]	@ (800aa5c <RemoteConfig::HandleTftpGet()+0x48>)
 800aa30:	f240 518b 	movw	r1, #1419	@ 0x58b
 800aa34:	f011 fd22 	bl	801c47c <snprintf>
 800aa38:	f642 1305 	movw	r3, #10501	@ 0x2905
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	4602      	mov	r2, r0
 800aa40:	69a3      	ldr	r3, [r4, #24]
 800aa42:	6829      	ldr	r1, [r5, #0]
 800aa44:	6960      	ldr	r0, [r4, #20]
 800aa46:	f7ff ff75 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800aa4a:	b003      	add	sp, #12
 800aa4c:	bd30      	pop	{r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800aa54:	0801d14a 	stmdaeq	r1, {r1, r3, r6, r8, ip, lr, pc}
 800aa58:	0801d293 	stmdaeq	r1, {r0, r1, r4, r7, r9, ip, lr, pc}
 800aa5c:	0801d171 	stmdaeq	r1, {r0, r4, r5, r6, r8, ip, lr, pc}

0800aa60 <RemoteConfig::HandleList()>:
 800aa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa64:	6801      	ldr	r1, [r0, #0]
 800aa66:	4a23      	ldr	r2, [pc, #140]	@ (800aaf4 <RemoteConfig::HandleList()+0x94>)
 800aa68:	4b23      	ldr	r3, [pc, #140]	@ (800aaf8 <RemoteConfig::HandleList()+0x98>)
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	2012      	movs	r0, #18
 800aa6e:	fb00 2201 	mla	r2, r0, r1, r2
 800aa72:	6860      	ldr	r0, [r4, #4]
 800aa74:	4921      	ldr	r1, [pc, #132]	@ (800aafc <RemoteConfig::HandleList()+0x9c>)
 800aa76:	681d      	ldr	r5, [r3, #0]
 800aa78:	4b21      	ldr	r3, [pc, #132]	@ (800ab00 <RemoteConfig::HandleList()+0xa0>)
 800aa7a:	f04f 0e0c 	mov.w	lr, #12
 800aa7e:	fb0e 1100 	mla	r1, lr, r0, r1
 800aa82:	4820      	ldr	r0, [pc, #128]	@ (800ab04 <RemoteConfig::HandleList()+0xa4>)
 800aa84:	681e      	ldr	r6, [r3, #0]
 800aa86:	f890 8009 	ldrb.w	r8, [r0, #9]
 800aa8a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800aa8e:	b2f3      	uxtb	r3, r6
 800aa90:	f3c6 2707 	ubfx	r7, r6, #8, #8
 800aa94:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800aa98:	b088      	sub	sp, #32
 800aa9a:	3507      	adds	r5, #7
 800aa9c:	0e36      	lsrs	r6, r6, #24
 800aa9e:	f1b8 0f00 	cmp.w	r8, #0
 800aaa2:	d019      	beq.n	800aad8 <RemoteConfig::HandleList()+0x78>
 800aaa4:	3009      	adds	r0, #9
 800aaa6:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800aaaa:	e9cd e005 	strd	lr, r0, [sp, #20]
 800aaae:	e9cd c601 	strd	ip, r6, [sp, #4]
 800aab2:	4a15      	ldr	r2, [pc, #84]	@ (800ab08 <RemoteConfig::HandleList()+0xa8>)
 800aab4:	9700      	str	r7, [sp, #0]
 800aab6:	f240 5184 	movw	r1, #1412	@ 0x584
 800aaba:	4628      	mov	r0, r5
 800aabc:	f011 fcde 	bl	801c47c <snprintf>
 800aac0:	f642 1305 	movw	r3, #10501	@ 0x2905
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	4602      	mov	r2, r0
 800aac8:	69a3      	ldr	r3, [r4, #24]
 800aaca:	6960      	ldr	r0, [r4, #20]
 800aacc:	4629      	mov	r1, r5
 800aace:	f7ff ff31 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800aad2:	b008      	add	sp, #32
 800aad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 800aadc:	e9cd 6202 	strd	r6, r2, [sp, #8]
 800aae0:	e9cd 7c00 	strd	r7, ip, [sp]
 800aae4:	4a09      	ldr	r2, [pc, #36]	@ (800ab0c <RemoteConfig::HandleList()+0xac>)
 800aae6:	f240 5184 	movw	r1, #1412	@ 0x584
 800aaea:	4628      	mov	r0, r5
 800aaec:	f011 fcc6 	bl	801c47c <snprintf>
 800aaf0:	e7e6      	b.n	800aac0 <RemoteConfig::HandleList()+0x60>
 800aaf2:	bf00      	nop
 800aaf4:	0801e040 	stmdaeq	r1, {r6, sp, lr, pc}
 800aaf8:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800aafc:	0801dfa4 	stmdaeq	r1, {r2, r5, r7, r8, r9, sl, fp, ip, lr, pc}
 800ab00:	2000e230 	andcs	lr, r0, r0, lsr r2
 800ab04:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800ab08:	0801d17a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, ip, lr, pc}
 800ab0c:	0801d193 	stmdaeq	r1, {r0, r1, r4, r7, r8, ip, lr, pc}

0800ab10 <RemoteConfig::HandleDisplaySet()>:
 800ab10:	b508      	push	{r3, lr}
 800ab12:	69c3      	ldr	r3, [r0, #28]
 800ab14:	2b09      	cmp	r3, #9
 800ab16:	d10a      	bne.n	800ab2e <RemoteConfig::HandleDisplaySet()+0x1e>
 800ab18:	4b05      	ldr	r3, [pc, #20]	@ (800ab30 <RemoteConfig::HandleDisplaySet()+0x20>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	7a59      	ldrb	r1, [r3, #9]
 800ab1e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ab22:	4259      	negs	r1, r3
 800ab24:	4159      	adcs	r1, r3
 800ab26:	4b03      	ldr	r3, [pc, #12]	@ (800ab34 <RemoteConfig::HandleDisplaySet()+0x24>)
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f7fe ffc9 	bl	8009ac0 <Display::SetSleep(bool)>
 800ab2e:	bd08      	pop	{r3, pc}
 800ab30:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800ab34:	2000e2f4 	strdcs	lr, [r0], -r4

0800ab38 <RemoteConfig::HandleTftpSet()>:
 800ab38:	69c3      	ldr	r3, [r0, #28]
 800ab3a:	2b06      	cmp	r3, #6
 800ab3c:	d115      	bne.n	800ab6a <RemoteConfig::HandleTftpSet()+0x32>
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <RemoteConfig::HandleTftpSet()+0x34>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	799b      	ldrb	r3, [r3, #6]
 800ab46:	2b30      	cmp	r3, #48	@ 0x30
 800ab48:	bf14      	ite	ne
 800ab4a:	2301      	movne	r3, #1
 800ab4c:	2300      	moveq	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	f880 3020 	strb.w	r3, [r0, #32]
 800ab54:	d004      	beq.n	800ab60 <RemoteConfig::HandleTftpSet()+0x28>
 800ab56:	4b06      	ldr	r3, [pc, #24]	@ (800ab70 <RemoteConfig::HandleTftpSet()+0x38>)
 800ab58:	2100      	movs	r1, #0
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	f7fe ffb0 	bl	8009ac0 <Display::SetSleep(bool)>
 800ab60:	4620      	mov	r0, r4
 800ab62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab66:	f000 bc7b 	b.w	800b460 <RemoteConfig::PlatformHandleTftpSet()>
 800ab6a:	4770      	bx	lr
 800ab6c:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800ab70:	2000e2f4 	strdcs	lr, [r0], -r4

0800ab74 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)>:
 800ab74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab76:	2500      	movs	r5, #0
 800ab78:	4604      	mov	r4, r0
 800ab7a:	e9c0 1200 	strd	r1, r2, [r0]
 800ab7e:	6083      	str	r3, [r0, #8]
 800ab80:	60c5      	str	r5, [r0, #12]
 800ab82:	8205      	strh	r5, [r0, #16]
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab88:	e9c4 0505 	strd	r0, r5, [r4, #20]
 800ab8c:	4f13      	ldr	r7, [pc, #76]	@ (800abdc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x68>)
 800ab8e:	4814      	ldr	r0, [pc, #80]	@ (800abe0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x6c>)
 800ab90:	4e14      	ldr	r6, [pc, #80]	@ (800abe4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x70>)
 800ab92:	6004      	str	r4, [r0, #0]
 800ab94:	6978      	ldr	r0, [r7, #20]
 800ab96:	6030      	str	r0, [r6, #0]
 800ab98:	8b38      	ldrh	r0, [r7, #24]
 800ab9a:	61e5      	str	r5, [r4, #28]
 800ab9c:	f884 5020 	strb.w	r5, [r4, #32]
 800aba0:	6265      	str	r5, [r4, #36]	@ 0x24
 800aba2:	80b0      	strh	r0, [r6, #4]
 800aba4:	f642 1005 	movw	r0, #10501	@ 0x2905
 800aba8:	71b1      	strb	r1, [r6, #6]
 800abaa:	71f2      	strb	r2, [r6, #7]
 800abac:	7233      	strb	r3, [r6, #8]
 800abae:	7275      	strb	r5, [r6, #9]
 800abb0:	f00c f9ec 	bl	8016f8c <net::udp_begin(unsigned short)>
 800abb4:	6160      	str	r0, [r4, #20]
 800abb6:	480c      	ldr	r0, [pc, #48]	@ (800abe8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned long)+0x74>)
 800abb8:	9500      	str	r5, [sp, #0]
 800abba:	462b      	mov	r3, r5
 800abbc:	462a      	mov	r2, r5
 800abbe:	4629      	mov	r1, r5
 800abc0:	6800      	ldr	r0, [r0, #0]
 800abc2:	f00a fda7 	bl	8015714 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800abc6:	2020      	movs	r0, #32
 800abc8:	f011 fe86 	bl	801c8d8 <operator new(unsigned int)>
 800abcc:	4605      	mov	r5, r0
 800abce:	f000 fc79 	bl	800b4c4 <HttpDaemon::HttpDaemon()>
 800abd2:	4620      	mov	r0, r4
 800abd4:	6265      	str	r5, [r4, #36]	@ 0x24
 800abd6:	b003      	add	sp, #12
 800abd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abda:	bf00      	nop
 800abdc:	2000e230 	andcs	lr, r0, r0, lsr r2
 800abe0:	2000cd30 	andcs	ip, r0, r0, lsr sp
 800abe4:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800abe8:	2000dfcc 	andcs	sp, r0, ip, asr #31

0800abec <RemoteConfig::GetStringNode() const>:
 800abec:	4b03      	ldr	r3, [pc, #12]	@ (800abfc <RemoteConfig::GetStringNode() const+0x10>)
 800abee:	7998      	ldrb	r0, [r3, #6]
 800abf0:	4b03      	ldr	r3, [pc, #12]	@ (800ac00 <RemoteConfig::GetStringNode() const+0x14>)
 800abf2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800abf6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800abfa:	4770      	bx	lr
 800abfc:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800ac00:	0801e040 	stmdaeq	r1, {r6, sp, lr, pc}

0800ac04 <RemoteConfig::GetStringOutput() const>:
 800ac04:	4b03      	ldr	r3, [pc, #12]	@ (800ac14 <RemoteConfig::GetStringOutput() const+0x10>)
 800ac06:	79d8      	ldrb	r0, [r3, #7]
 800ac08:	4b03      	ldr	r3, [pc, #12]	@ (800ac18 <RemoteConfig::GetStringOutput() const+0x14>)
 800ac0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ac0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac12:	4770      	bx	lr
 800ac14:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800ac18:	0801dfa4 	stmdaeq	r1, {r2, r5, r7, r8, r9, sl, fp, ip, lr, pc}

0800ac1c <RemoteConfig::SetDisable(bool)>:
 800ac1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac1e:	7b06      	ldrb	r6, [r0, #12]
 800ac20:	4605      	mov	r5, r0
 800ac22:	b181      	cbz	r1, 800ac46 <RemoteConfig::SetDisable(bool)+0x2a>
 800ac24:	b96e      	cbnz	r6, 800ac42 <RemoteConfig::SetDisable(bool)+0x26>
 800ac26:	f642 1005 	movw	r0, #10501	@ 0x2905
 800ac2a:	f00c f9c5 	bl	8016fb8 <net::udp_end(unsigned short)>
 800ac2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac32:	616b      	str	r3, [r5, #20]
 800ac34:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <RemoteConfig::SetDisable(bool)+0x50>)
 800ac36:	4631      	mov	r1, r6
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	f00a fd4f 	bl	80156dc <MDNS::ServiceRecordDelete(mdns::Services)>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	732b      	strb	r3, [r5, #12]
 800ac42:	b002      	add	sp, #8
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	2e00      	cmp	r6, #0
 800ac48:	d0fb      	beq.n	800ac42 <RemoteConfig::SetDisable(bool)+0x26>
 800ac4a:	f642 1005 	movw	r0, #10501	@ 0x2905
 800ac4e:	460c      	mov	r4, r1
 800ac50:	f00c f99c 	bl	8016f8c <net::udp_begin(unsigned short)>
 800ac54:	6168      	str	r0, [r5, #20]
 800ac56:	4805      	ldr	r0, [pc, #20]	@ (800ac6c <RemoteConfig::SetDisable(bool)+0x50>)
 800ac58:	9400      	str	r4, [sp, #0]
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	4622      	mov	r2, r4
 800ac60:	4621      	mov	r1, r4
 800ac62:	f00a fd57 	bl	8015714 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800ac66:	732c      	strb	r4, [r5, #12]
 800ac68:	e7eb      	b.n	800ac42 <RemoteConfig::SetDisable(bool)+0x26>
 800ac6a:	bf00      	nop
 800ac6c:	2000dfcc 	andcs	sp, r0, ip, asr #31

0800ac70 <RemoteConfig::SetDisplayName(char const*)>:
 800ac70:	b508      	push	{r3, lr}
 800ac72:	4809      	ldr	r0, [pc, #36]	@ (800ac98 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800ac74:	3901      	subs	r1, #1
 800ac76:	2217      	movs	r2, #23
 800ac78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac7c:	b11b      	cbz	r3, 800ac86 <RemoteConfig::SetDisplayName(char const*)+0x16>
 800ac7e:	3a01      	subs	r2, #1
 800ac80:	f800 3b01 	strb.w	r3, [r0], #1
 800ac84:	d1f8      	bne.n	800ac78 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800ac86:	2100      	movs	r1, #0
 800ac88:	f011 f8ec 	bl	801be64 <memset>
 800ac8c:	4b03      	ldr	r3, [pc, #12]	@ (800ac9c <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2020 	strb.w	r2, [r3, #32]
 800ac94:	bd08      	pop	{r3, pc}
 800ac96:	bf00      	nop
 800ac98:	2000cd15 	andcs	ip, r0, r5, lsl sp
 800ac9c:	2000cd0c 	andcs	ip, r0, ip, lsl #26

0800aca0 <RemoteConfig::HandleGet(void*, unsigned long)>:
 800aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca2:	4f29      	ldr	r7, [pc, #164]	@ (800ad48 <RemoteConfig::HandleGet(void*, unsigned long)+0xa8>)
 800aca4:	b085      	sub	sp, #20
 800aca6:	4604      	mov	r4, r0
 800aca8:	4616      	mov	r6, r2
 800acaa:	460d      	mov	r5, r1
 800acac:	b9a9      	cbnz	r1, 800acda <RemoteConfig::HandleGet(void*, unsigned long)+0x3a>
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	f44f 63b1 	mov.w	r3, #1416	@ 0x588
 800acb4:	aa03      	add	r2, sp, #12
 800acb6:	3105      	adds	r1, #5
 800acb8:	9303      	str	r3, [sp, #12]
 800acba:	f000 fba5 	bl	800b408 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800acbe:	1e03      	subs	r3, r0, #0
 800acc0:	da1b      	bge.n	800acfa <RemoteConfig::HandleGet(void*, unsigned long)+0x5a>
 800acc2:	f642 1305 	movw	r3, #10501	@ 0x2905
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	69a3      	ldr	r3, [r4, #24]
 800acca:	4920      	ldr	r1, [pc, #128]	@ (800ad4c <RemoteConfig::HandleGet(void*, unsigned long)+0xac>)
 800accc:	6960      	ldr	r0, [r4, #20]
 800acce:	220b      	movs	r2, #11
 800acd0:	f7ff fe30 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800acd4:	200c      	movs	r0, #12
 800acd6:	b005      	add	sp, #20
 800acd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acda:	9203      	str	r2, [sp, #12]
 800acdc:	aa03      	add	r2, sp, #12
 800acde:	6039      	str	r1, [r7, #0]
 800ace0:	f000 fb92 	bl	800b408 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800ace4:	1e03      	subs	r3, r0, #0
 800ace6:	da08      	bge.n	800acfa <RemoteConfig::HandleGet(void*, unsigned long)+0x5a>
 800ace8:	2e0b      	cmp	r6, #11
 800acea:	4632      	mov	r2, r6
 800acec:	4917      	ldr	r1, [pc, #92]	@ (800ad4c <RemoteConfig::HandleGet(void*, unsigned long)+0xac>)
 800acee:	bf28      	it	cs
 800acf0:	220b      	movcs	r2, #11
 800acf2:	4628      	mov	r0, r5
 800acf4:	f011 f894 	bl	801be20 <memcpy>
 800acf8:	e7ec      	b.n	800acd4 <RemoteConfig::HandleGet(void*, unsigned long)+0x34>
 800acfa:	4915      	ldr	r1, [pc, #84]	@ (800ad50 <RemoteConfig::HandleGet(void*, unsigned long)+0xb0>)
 800acfc:	2218      	movs	r2, #24
 800acfe:	4353      	muls	r3, r2
 800ad00:	18ca      	adds	r2, r1, r3
 800ad02:	58cb      	ldr	r3, [r1, r3]
 800ad04:	6852      	ldr	r2, [r2, #4]
 800ad06:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800ad0a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ad0e:	07d2      	lsls	r2, r2, #31
 800ad10:	bf48      	it	mi
 800ad12:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800ad16:	a903      	add	r1, sp, #12
 800ad18:	bf48      	it	mi
 800ad1a:	58d3      	ldrmi	r3, [r2, r3]
 800ad1c:	4798      	blx	r3
 800ad1e:	b955      	cbnz	r5, 800ad36 <RemoteConfig::HandleGet(void*, unsigned long)+0x96>
 800ad20:	f642 1305 	movw	r3, #10501	@ 0x2905
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	69a3      	ldr	r3, [r4, #24]
 800ad28:	9a03      	ldr	r2, [sp, #12]
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6960      	ldr	r0, [r4, #20]
 800ad2e:	f7ff fe01 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800ad32:	9803      	ldr	r0, [sp, #12]
 800ad34:	e7cf      	b.n	800acd6 <RemoteConfig::HandleGet(void*, unsigned long)+0x36>
 800ad36:	9a03      	ldr	r2, [sp, #12]
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	42b2      	cmp	r2, r6
 800ad3c:	bf28      	it	cs
 800ad3e:	4632      	movcs	r2, r6
 800ad40:	4628      	mov	r0, r5
 800ad42:	f011 f878 	bl	801be36 <memmove>
 800ad46:	e7f4      	b.n	800ad32 <RemoteConfig::HandleGet(void*, unsigned long)+0x92>
 800ad48:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800ad4c:	0801d1a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, ip, lr, pc}
 800ad50:	0801e1f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sp, lr, pc}

0800ad54 <RemoteConfig::HandleGetNoParams()>:
 800ad54:	2200      	movs	r2, #0
 800ad56:	4611      	mov	r1, r2
 800ad58:	f7ff bfa2 	b.w	800aca0 <RemoteConfig::HandleGet(void*, unsigned long)>

0800ad5c <RemoteConfig::HandleGetRconfigTxt(unsigned long&)>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	b08a      	sub	sp, #40	@ 0x28
 800ad60:	a802      	add	r0, sp, #8
 800ad62:	460c      	mov	r4, r1
 800ad64:	f000 f9ea 	bl	800b13c <RemoteConfigParams::RemoteConfigParams()>
 800ad68:	4a05      	ldr	r2, [pc, #20]	@ (800ad80 <RemoteConfig::HandleGetRconfigTxt(unsigned long&)+0x24>)
 800ad6a:	9400      	str	r4, [sp, #0]
 800ad6c:	6812      	ldr	r2, [r2, #0]
 800ad6e:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ad72:	2100      	movs	r1, #0
 800ad74:	a802      	add	r0, sp, #8
 800ad76:	f000 fa59 	bl	800b22c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)>
 800ad7a:	b00a      	add	sp, #40	@ 0x28
 800ad7c:	bd10      	pop	{r4, pc}
 800ad7e:	bf00      	nop
 800ad80:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ad84 <RemoteConfig::HandleGetEnvTxt(unsigned long&)>:
 800ad84:	b513      	push	{r0, r1, r4, lr}
 800ad86:	a801      	add	r0, sp, #4
 800ad88:	460c      	mov	r4, r1
 800ad8a:	f00d fecb 	bl	8018b24 <EnvParams::EnvParams()>
 800ad8e:	4905      	ldr	r1, [pc, #20]	@ (800ada4 <RemoteConfig::HandleGetEnvTxt(unsigned long&)+0x20>)
 800ad90:	4623      	mov	r3, r4
 800ad92:	6809      	ldr	r1, [r1, #0]
 800ad94:	f240 528c 	movw	r2, #1420	@ 0x58c
 800ad98:	a801      	add	r0, sp, #4
 800ad9a:	f00d ff21 	bl	8018be0 <EnvParams::Builder(char*, unsigned long, unsigned long&)>
 800ad9e:	b002      	add	sp, #8
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	bf00      	nop
 800ada4:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ada8 <RemoteConfig::HandleGetNetworkTxt(unsigned long&)>:
 800ada8:	b510      	push	{r4, lr}
 800adaa:	b09a      	sub	sp, #104	@ 0x68
 800adac:	a802      	add	r0, sp, #8
 800adae:	460c      	mov	r4, r1
 800adb0:	f00c f9dc 	bl	801716c <NetworkParams::NetworkParams()>
 800adb4:	4a05      	ldr	r2, [pc, #20]	@ (800adcc <RemoteConfig::HandleGetNetworkTxt(unsigned long&)+0x24>)
 800adb6:	9400      	str	r4, [sp, #0]
 800adb8:	6812      	ldr	r2, [r2, #0]
 800adba:	f240 538c 	movw	r3, #1420	@ 0x58c
 800adbe:	2100      	movs	r1, #0
 800adc0:	a802      	add	r0, sp, #8
 800adc2:	f00c fabf 	bl	8017344 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)>
 800adc6:	b01a      	add	sp, #104	@ 0x68
 800adc8:	bd10      	pop	{r4, pc}
 800adca:	bf00      	nop
 800adcc:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800add0 <RemoteConfig::HandleGetArtnetTxt(unsigned long&)>:
 800add0:	b510      	push	{r4, lr}
 800add2:	b0ba      	sub	sp, #232	@ 0xe8
 800add4:	a803      	add	r0, sp, #12
 800add6:	460c      	mov	r4, r1
 800add8:	f002 fd90 	bl	800d8fc <ArtNetParams::ArtNetParams()>
 800addc:	4a05      	ldr	r2, [pc, #20]	@ (800adf4 <RemoteConfig::HandleGetArtnetTxt(unsigned long&)+0x24>)
 800adde:	9400      	str	r4, [sp, #0]
 800ade0:	6812      	ldr	r2, [r2, #0]
 800ade2:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ade6:	2100      	movs	r1, #0
 800ade8:	a803      	add	r0, sp, #12
 800adea:	f002 ffab 	bl	800dd44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)>
 800adee:	b03a      	add	sp, #232	@ 0xe8
 800adf0:	bd10      	pop	{r4, pc}
 800adf2:	bf00      	nop
 800adf4:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800adf8 <RemoteConfig::HandleGetParamsTxt(unsigned long&)>:
 800adf8:	b510      	push	{r4, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	a803      	add	r0, sp, #12
 800adfe:	460c      	mov	r4, r1
 800ae00:	f005 fa9e 	bl	8010340 <DmxParams::DmxParams()>
 800ae04:	4a05      	ldr	r2, [pc, #20]	@ (800ae1c <RemoteConfig::HandleGetParamsTxt(unsigned long&)+0x24>)
 800ae06:	9400      	str	r4, [sp, #0]
 800ae08:	6812      	ldr	r2, [r2, #0]
 800ae0a:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ae0e:	2100      	movs	r1, #0
 800ae10:	a803      	add	r0, sp, #12
 800ae12:	f005 fb43 	bl	801049c <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)>
 800ae16:	b006      	add	sp, #24
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	bf00      	nop
 800ae1c:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ae20 <RemoteConfig::HandleGetDevicesTxt(unsigned long&)>:
 800ae20:	b510      	push	{r4, lr}
 800ae22:	b08c      	sub	sp, #48	@ 0x30
 800ae24:	a802      	add	r0, sp, #8
 800ae26:	460c      	mov	r4, r1
 800ae28:	f006 fc22 	bl	8011670 <PixelDmxParams::PixelDmxParams()>
 800ae2c:	4a05      	ldr	r2, [pc, #20]	@ (800ae44 <RemoteConfig::HandleGetDevicesTxt(unsigned long&)+0x24>)
 800ae2e:	9400      	str	r4, [sp, #0]
 800ae30:	6812      	ldr	r2, [r2, #0]
 800ae32:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ae36:	2100      	movs	r1, #0
 800ae38:	a802      	add	r0, sp, #8
 800ae3a:	f006 fdb9 	bl	80119b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)>
 800ae3e:	b00c      	add	sp, #48	@ 0x30
 800ae40:	bd10      	pop	{r4, pc}
 800ae42:	bf00      	nop
 800ae44:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ae48 <RemoteConfig::HandleGetDisplayTxt(unsigned long&)>:
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	b08c      	sub	sp, #48	@ 0x30
 800ae4c:	a803      	add	r0, sp, #12
 800ae4e:	460c      	mov	r4, r1
 800ae50:	f00d fa2c 	bl	80182ac <DisplayUdfParams::DisplayUdfParams()>
 800ae54:	4a05      	ldr	r2, [pc, #20]	@ (800ae6c <RemoteConfig::HandleGetDisplayTxt(unsigned long&)+0x24>)
 800ae56:	9400      	str	r4, [sp, #0]
 800ae58:	6812      	ldr	r2, [r2, #0]
 800ae5a:	f240 538c 	movw	r3, #1420	@ 0x58c
 800ae5e:	2100      	movs	r1, #0
 800ae60:	a803      	add	r0, sp, #12
 800ae62:	f00d fac5 	bl	80183f0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)>
 800ae66:	b00c      	add	sp, #48	@ 0x30
 800ae68:	bd10      	pop	{r4, pc}
 800ae6a:	bf00      	nop
 800ae6c:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800ae70 <RemoteConfig::HandleSet(void*, unsigned long)>:
 800ae70:	b530      	push	{r4, r5, lr}
 800ae72:	b085      	sub	sp, #20
 800ae74:	4604      	mov	r4, r0
 800ae76:	9201      	str	r2, [sp, #4]
 800ae78:	b9d1      	cbnz	r1, 800aeb0 <RemoteConfig::HandleSet(void*, unsigned long)+0x40>
 800ae7a:	f240 538b 	movw	r3, #1419	@ 0x58b
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	4b19      	ldr	r3, [pc, #100]	@ (800aee8 <RemoteConfig::HandleSet(void*, unsigned long)+0x78>)
 800ae82:	6819      	ldr	r1, [r3, #0]
 800ae84:	aa03      	add	r2, sp, #12
 800ae86:	3101      	adds	r1, #1
 800ae88:	f000 fabe 	bl	800b408 <RemoteConfig::GetIndex(void const*, unsigned long&)>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	db0d      	blt.n	800aeac <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800ae90:	4b16      	ldr	r3, [pc, #88]	@ (800aeec <RemoteConfig::HandleSet(void*, unsigned long)+0x7c>)
 800ae92:	2218      	movs	r2, #24
 800ae94:	fb02 3300 	mla	r3, r2, r0, r3
 800ae98:	68da      	ldr	r2, [r3, #12]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	1051      	asrs	r1, r2, #1
 800ae9e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800aea2:	07d2      	lsls	r2, r2, #31
 800aea4:	bf44      	itt	mi
 800aea6:	5862      	ldrmi	r2, [r4, r1]
 800aea8:	58d3      	ldrmi	r3, [r2, r3]
 800aeaa:	4798      	blx	r3
 800aeac:	b005      	add	sp, #20
 800aeae:	bd30      	pop	{r4, r5, pc}
 800aeb0:	f240 538c 	movw	r3, #1420	@ 0x58c
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d8f9      	bhi.n	800aeac <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800aeb8:	4b0d      	ldr	r3, [pc, #52]	@ (800aef0 <RemoteConfig::HandleSet(void*, unsigned long)+0x80>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	460d      	mov	r5, r1
 800aebe:	07d9      	lsls	r1, r3, #31
 800aec0:	d50b      	bpl.n	800aeda <RemoteConfig::HandleSet(void*, unsigned long)+0x6a>
 800aec2:	782b      	ldrb	r3, [r5, #0]
 800aec4:	2b7b      	cmp	r3, #123	@ 0x7b
 800aec6:	d108      	bne.n	800aeda <RemoteConfig::HandleSet(void*, unsigned long)+0x6a>
 800aec8:	1e51      	subs	r1, r2, #1
 800aeca:	b289      	uxth	r1, r1
 800aecc:	2200      	movs	r2, #0
 800aece:	4628      	mov	r0, r5
 800aed0:	f00d feda 	bl	8018c88 <properties::convert_json_file(char*, unsigned long, bool)>
 800aed4:	1e02      	subs	r2, r0, #0
 800aed6:	dde9      	ble.n	800aeac <RemoteConfig::HandleSet(void*, unsigned long)+0x3c>
 800aed8:	b292      	uxth	r2, r2
 800aeda:	4b03      	ldr	r3, [pc, #12]	@ (800aee8 <RemoteConfig::HandleSet(void*, unsigned long)+0x78>)
 800aedc:	61e2      	str	r2, [r4, #28]
 800aede:	601d      	str	r5, [r3, #0]
 800aee0:	aa01      	add	r2, sp, #4
 800aee2:	1c69      	adds	r1, r5, #1
 800aee4:	4620      	mov	r0, r4
 800aee6:	e7cf      	b.n	800ae88 <RemoteConfig::HandleSet(void*, unsigned long)+0x18>
 800aee8:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800aeec:	0801e1f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sp, lr, pc}
 800aef0:	2000e2f1 	strdcs	lr, [r0], -r1

0800aef4 <RemoteConfig::HandleRequest()>:
 800aef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aef8:	69c2      	ldr	r2, [r0, #28]
 800aefa:	4b3f      	ldr	r3, [pc, #252]	@ (800aff8 <RemoteConfig::HandleRequest()+0x104>)
 800aefc:	3a01      	subs	r2, #1
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	5c99      	ldrb	r1, [r3, r2]
 800af02:	290a      	cmp	r1, #10
 800af04:	bf08      	it	eq
 800af06:	61c2      	streq	r2, [r0, #28]
 800af08:	7819      	ldrb	r1, [r3, #0]
 800af0a:	293f      	cmp	r1, #63	@ 0x3f
 800af0c:	d13c      	bne.n	800af88 <RemoteConfig::HandleRequest()+0x94>
 800af0e:	69c4      	ldr	r4, [r0, #28]
 800af10:	493a      	ldr	r1, [pc, #232]	@ (800affc <RemoteConfig::HandleRequest()+0x108>)
 800af12:	3c01      	subs	r4, #1
 800af14:	61c4      	str	r4, [r0, #28]
 800af16:	2200      	movs	r2, #0
 800af18:	468c      	mov	ip, r1
 800af1a:	7b8e      	ldrb	r6, [r1, #14]
 800af1c:	898d      	ldrh	r5, [r1, #12]
 800af1e:	b18e      	cbz	r6, 800af44 <RemoteConfig::HandleRequest()+0x50>
 800af20:	42ac      	cmp	r4, r5
 800af22:	d811      	bhi.n	800af48 <RemoteConfig::HandleRequest()+0x54>
 800af24:	3201      	adds	r2, #1
 800af26:	2a08      	cmp	r2, #8
 800af28:	f101 0110 	add.w	r1, r1, #16
 800af2c:	d1f5      	bne.n	800af1a <RemoteConfig::HandleRequest()+0x26>
 800af2e:	f642 1305 	movw	r3, #10501	@ 0x2905
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	6983      	ldr	r3, [r0, #24]
 800af36:	4932      	ldr	r1, [pc, #200]	@ (800b000 <RemoteConfig::HandleRequest()+0x10c>)
 800af38:	6940      	ldr	r0, [r0, #20]
 800af3a:	f7ff fcfb 	bl	800a934 <Network::SendTo(long, void const*, unsigned long, unsigned long, unsigned short) [clone .isra.0]>
 800af3e:	b002      	add	sp, #8
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af44:	42ac      	cmp	r4, r5
 800af46:	d1ed      	bne.n	800af24 <RemoteConfig::HandleRequest()+0x30>
 800af48:	688e      	ldr	r6, [r1, #8]
 800af4a:	461f      	mov	r7, r3
 800af4c:	3e01      	subs	r6, #1
 800af4e:	441d      	add	r5, r3
 800af50:	42af      	cmp	r7, r5
 800af52:	d10f      	bne.n	800af74 <RemoteConfig::HandleRequest()+0x80>
 800af54:	0113      	lsls	r3, r2, #4
 800af56:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 800af5a:	f85c 3003 	ldr.w	r3, [ip, r3]
 800af5e:	6852      	ldr	r2, [r2, #4]
 800af60:	1054      	asrs	r4, r2, #1
 800af62:	eb00 0162 	add.w	r1, r0, r2, asr #1
 800af66:	07d2      	lsls	r2, r2, #31
 800af68:	d40b      	bmi.n	800af82 <RemoteConfig::HandleRequest()+0x8e>
 800af6a:	4608      	mov	r0, r1
 800af6c:	b002      	add	sp, #8
 800af6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af72:	4718      	bx	r3
 800af74:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 800af78:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800af7c:	45f0      	cmp	r8, lr
 800af7e:	d0e7      	beq.n	800af50 <RemoteConfig::HandleRequest()+0x5c>
 800af80:	e7d0      	b.n	800af24 <RemoteConfig::HandleRequest()+0x30>
 800af82:	5902      	ldr	r2, [r0, r4]
 800af84:	58d3      	ldr	r3, [r2, r3]
 800af86:	e7f0      	b.n	800af6a <RemoteConfig::HandleRequest()+0x76>
 800af88:	7b42      	ldrb	r2, [r0, #13]
 800af8a:	2a00      	cmp	r2, #0
 800af8c:	d1d7      	bne.n	800af3e <RemoteConfig::HandleRequest()+0x4a>
 800af8e:	2923      	cmp	r1, #35	@ 0x23
 800af90:	d105      	bne.n	800af9e <RemoteConfig::HandleRequest()+0xaa>
 800af92:	4611      	mov	r1, r2
 800af94:	b002      	add	sp, #8
 800af96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af9a:	f7ff bf69 	b.w	800ae70 <RemoteConfig::HandleSet(void*, unsigned long)>
 800af9e:	2921      	cmp	r1, #33	@ 0x21
 800afa0:	d1cd      	bne.n	800af3e <RemoteConfig::HandleRequest()+0x4a>
 800afa2:	69c2      	ldr	r2, [r0, #28]
 800afa4:	3a01      	subs	r2, #1
 800afa6:	2a05      	cmp	r2, #5
 800afa8:	61c2      	str	r2, [r0, #28]
 800afaa:	d91e      	bls.n	800afea <RemoteConfig::HandleRequest()+0xf6>
 800afac:	4d15      	ldr	r5, [pc, #84]	@ (800b004 <RemoteConfig::HandleRequest()+0x110>)
 800afae:	4619      	mov	r1, r3
 800afb0:	1d5e      	adds	r6, r3, #5
 800afb2:	461c      	mov	r4, r3
 800afb4:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800afb8:	f815 7b01 	ldrb.w	r7, [r5], #1
 800afbc:	45bc      	cmp	ip, r7
 800afbe:	d112      	bne.n	800afe6 <RemoteConfig::HandleRequest()+0xf2>
 800afc0:	42b4      	cmp	r4, r6
 800afc2:	d1f7      	bne.n	800afb4 <RemoteConfig::HandleRequest()+0xc0>
 800afc4:	2300      	movs	r3, #0
 800afc6:	4a10      	ldr	r2, [pc, #64]	@ (800b008 <RemoteConfig::HandleRequest()+0x114>)
 800afc8:	011b      	lsls	r3, r3, #4
 800afca:	58d3      	ldr	r3, [r2, r3]
 800afcc:	e7ce      	b.n	800af6c <RemoteConfig::HandleRequest()+0x78>
 800afce:	4a0f      	ldr	r2, [pc, #60]	@ (800b00c <RemoteConfig::HandleRequest()+0x118>)
 800afd0:	3308      	adds	r3, #8
 800afd2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800afd6:	f812 4b01 	ldrb.w	r4, [r2], #1
 800afda:	42a5      	cmp	r5, r4
 800afdc:	d105      	bne.n	800afea <RemoteConfig::HandleRequest()+0xf6>
 800afde:	4299      	cmp	r1, r3
 800afe0:	d1f7      	bne.n	800afd2 <RemoteConfig::HandleRequest()+0xde>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e7ef      	b.n	800afc6 <RemoteConfig::HandleRequest()+0xd2>
 800afe6:	2a08      	cmp	r2, #8
 800afe8:	d8f1      	bhi.n	800afce <RemoteConfig::HandleRequest()+0xda>
 800afea:	f642 1305 	movw	r3, #10501	@ 0x2905
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	6983      	ldr	r3, [r0, #24]
 800aff2:	4907      	ldr	r1, [pc, #28]	@ (800b010 <RemoteConfig::HandleRequest()+0x11c>)
 800aff4:	2208      	movs	r2, #8
 800aff6:	e79f      	b.n	800af38 <RemoteConfig::HandleRequest()+0x44>
 800aff8:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800affc:	0801e14c 	stmdaeq	r1, {r2, r3, r6, r8, sp, lr, pc}
 800b000:	0801d1b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, ip, lr, pc}
 800b004:	0801d1be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, ip, lr, pc}
 800b008:	0801e12c 	stmdaeq	r1, {r2, r3, r5, r8, sp, lr, pc}
 800b00c:	0801d1c4 	stmdaeq	r1, {r2, r6, r7, r8, ip, lr, pc}
 800b010:	0801d1cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, ip, lr, pc}

0800b014 <RemoteConfig::HandleSetRconfigTxt()>:
 800b014:	b510      	push	{r4, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	4604      	mov	r4, r0
 800b01a:	4668      	mov	r0, sp
 800b01c:	f000 f88e 	bl	800b13c <RemoteConfigParams::RemoteConfigParams()>
 800b020:	4b05      	ldr	r3, [pc, #20]	@ (800b038 <RemoteConfig::HandleSetRconfigTxt()+0x24>)
 800b022:	69e2      	ldr	r2, [r4, #28]
 800b024:	6819      	ldr	r1, [r3, #0]
 800b026:	4668      	mov	r0, sp
 800b028:	f000 f89a 	bl	800b160 <RemoteConfigParams::Load(char const*, unsigned long)>
 800b02c:	4621      	mov	r1, r4
 800b02e:	4668      	mov	r0, sp
 800b030:	f000 f99a 	bl	800b368 <RemoteConfigParams::Set(RemoteConfig*)>
 800b034:	b008      	add	sp, #32
 800b036:	bd10      	pop	{r4, pc}
 800b038:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800b03c <RemoteConfig::HandleSetEnvTxt()>:
 800b03c:	b513      	push	{r0, r1, r4, lr}
 800b03e:	4604      	mov	r4, r0
 800b040:	a801      	add	r0, sp, #4
 800b042:	f00d fd6f 	bl	8018b24 <EnvParams::EnvParams()>
 800b046:	4b04      	ldr	r3, [pc, #16]	@ (800b058 <RemoteConfig::HandleSetEnvTxt()+0x1c>)
 800b048:	69e2      	ldr	r2, [r4, #28]
 800b04a:	6819      	ldr	r1, [r3, #0]
 800b04c:	a801      	add	r0, sp, #4
 800b04e:	f00d fd6b 	bl	8018b28 <EnvParams::LoadAndSet(char const*, unsigned long)>
 800b052:	b002      	add	sp, #8
 800b054:	bd10      	pop	{r4, pc}
 800b056:	bf00      	nop
 800b058:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800b05c <RemoteConfig::HandleSetNetworkTxt()>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	b098      	sub	sp, #96	@ 0x60
 800b060:	4604      	mov	r4, r0
 800b062:	4668      	mov	r0, sp
 800b064:	f00c f882 	bl	801716c <NetworkParams::NetworkParams()>
 800b068:	4b03      	ldr	r3, [pc, #12]	@ (800b078 <RemoteConfig::HandleSetNetworkTxt()+0x1c>)
 800b06a:	69e2      	ldr	r2, [r4, #28]
 800b06c:	6819      	ldr	r1, [r3, #0]
 800b06e:	4668      	mov	r0, sp
 800b070:	f00c f890 	bl	8017194 <NetworkParams::Load(char const*, unsigned long)>
 800b074:	b018      	add	sp, #96	@ 0x60
 800b076:	bd10      	pop	{r4, pc}
 800b078:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800b07c <RemoteConfig::HandleSetArtnetTxt()>:
 800b07c:	b510      	push	{r4, lr}
 800b07e:	b0b8      	sub	sp, #224	@ 0xe0
 800b080:	4604      	mov	r4, r0
 800b082:	a801      	add	r0, sp, #4
 800b084:	f002 fc3a 	bl	800d8fc <ArtNetParams::ArtNetParams()>
 800b088:	4b03      	ldr	r3, [pc, #12]	@ (800b098 <RemoteConfig::HandleSetArtnetTxt()+0x1c>)
 800b08a:	69e2      	ldr	r2, [r4, #28]
 800b08c:	6819      	ldr	r1, [r3, #0]
 800b08e:	a801      	add	r0, sp, #4
 800b090:	f002 fc60 	bl	800d954 <ArtNetParams::Load(char const*, unsigned long)>
 800b094:	b038      	add	sp, #224	@ 0xe0
 800b096:	bd10      	pop	{r4, pc}
 800b098:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800b09c <RemoteConfig::HandleSetParamsTxt()>:
 800b09c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b09e:	4604      	mov	r4, r0
 800b0a0:	a801      	add	r0, sp, #4
 800b0a2:	f005 f94d 	bl	8010340 <DmxParams::DmxParams()>
 800b0a6:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <RemoteConfig::HandleSetParamsTxt()+0x1c>)
 800b0a8:	69e2      	ldr	r2, [r4, #28]
 800b0aa:	6819      	ldr	r1, [r3, #0]
 800b0ac:	a801      	add	r0, sp, #4
 800b0ae:	f005 f961 	bl	8010374 <DmxParams::Load(char const*, unsigned long)>
 800b0b2:	b004      	add	sp, #16
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800b0bc <RemoteConfig::HandleSetDevicesTxt()>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	b08a      	sub	sp, #40	@ 0x28
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	4668      	mov	r0, sp
 800b0c4:	f006 fad4 	bl	8011670 <PixelDmxParams::PixelDmxParams()>
 800b0c8:	4b03      	ldr	r3, [pc, #12]	@ (800b0d8 <RemoteConfig::HandleSetDevicesTxt()+0x1c>)
 800b0ca:	69e2      	ldr	r2, [r4, #28]
 800b0cc:	6819      	ldr	r1, [r3, #0]
 800b0ce:	4668      	mov	r0, sp
 800b0d0:	f006 fec4 	bl	8011e5c <PixelDmxParams::Load(char const*, unsigned long)>
 800b0d4:	b00a      	add	sp, #40	@ 0x28
 800b0d6:	bd10      	pop	{r4, pc}
 800b0d8:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800b0dc <RemoteConfig::HandleSetDisplayTxt()>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	b08a      	sub	sp, #40	@ 0x28
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	a801      	add	r0, sp, #4
 800b0e4:	f00d f8e2 	bl	80182ac <DisplayUdfParams::DisplayUdfParams()>
 800b0e8:	4b03      	ldr	r3, [pc, #12]	@ (800b0f8 <RemoteConfig::HandleSetDisplayTxt()+0x1c>)
 800b0ea:	69e2      	ldr	r2, [r4, #28]
 800b0ec:	6819      	ldr	r1, [r3, #0]
 800b0ee:	a801      	add	r0, sp, #4
 800b0f0:	f00d f8f4 	bl	80182dc <DisplayUdfParams::Load(char const*, unsigned long)>
 800b0f4:	b00a      	add	sp, #40	@ 0x28
 800b0f6:	bd10      	pop	{r4, pc}
 800b0f8:	2000cd08 	andcs	ip, r0, r8, lsl #26

0800b0fc <RemoteConfig::HandleFactory()>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	4b05      	ldr	r3, [pc, #20]	@ (800b114 <RemoteConfig::HandleFactory()+0x18>)
 800b100:	681d      	ldr	r5, [r3, #0]
 800b102:	2400      	movs	r4, #0
 800b104:	4621      	mov	r1, r4
 800b106:	4628      	mov	r0, r5
 800b108:	3401      	adds	r4, #1
 800b10a:	f00d fc2d 	bl	8018968 <ConfigStore::ResetSetList(configstore::Store)>
 800b10e:	2c1b      	cmp	r4, #27
 800b110:	d1f8      	bne.n	800b104 <RemoteConfig::HandleFactory()+0x8>
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800b118 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>:
 800b118:	b507      	push	{r0, r1, r2, lr}
 800b11a:	2300      	movs	r3, #0
 800b11c:	2101      	movs	r1, #1
 800b11e:	e9cd 3100 	strd	r3, r1, [sp]
 800b122:	4602      	mov	r2, r0
 800b124:	4804      	ldr	r0, [pc, #16]	@ (800b138 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)+0x20>)
 800b126:	2320      	movs	r3, #32
 800b128:	6800      	ldr	r0, [r0, #0]
 800b12a:	210a      	movs	r1, #10
 800b12c:	f00d fc54 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800b130:	b003      	add	sp, #12
 800b132:	f85d fb04 	ldr.w	pc, [sp], #4
 800b136:	bf00      	nop
 800b138:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800b13c <RemoteConfigParams::RemoteConfigParams()>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	2220      	movs	r2, #32
 800b140:	4604      	mov	r4, r0
 800b142:	2100      	movs	r1, #0
 800b144:	f010 fe8e 	bl	801be64 <memset>
 800b148:	4620      	mov	r0, r4
 800b14a:	bd10      	pop	{r4, pc}

0800b14c <RemoteConfigParams::Load()>:
 800b14c:	b508      	push	{r3, lr}
 800b14e:	2200      	movs	r2, #0
 800b150:	7002      	strb	r2, [r0, #0]
 800b152:	7042      	strb	r2, [r0, #1]
 800b154:	7082      	strb	r2, [r0, #2]
 800b156:	70c2      	strb	r2, [r0, #3]
 800b158:	f7ff ffde 	bl	800b118 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>
 800b15c:	bd08      	pop	{r3, pc}
	...

0800b160 <RemoteConfigParams::Load(char const*, unsigned long)>:
 800b160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b162:	2500      	movs	r5, #0
 800b164:	b087      	sub	sp, #28
 800b166:	4604      	mov	r4, r0
 800b168:	460e      	mov	r6, r1
 800b16a:	4617      	mov	r7, r2
 800b16c:	7005      	strb	r5, [r0, #0]
 800b16e:	7045      	strb	r5, [r0, #1]
 800b170:	7085      	strb	r5, [r0, #2]
 800b172:	70c5      	strb	r5, [r0, #3]
 800b174:	4602      	mov	r2, r0
 800b176:	490c      	ldr	r1, [pc, #48]	@ (800b1a8 <RemoteConfigParams::Load(char const*, unsigned long)+0x48>)
 800b178:	a804      	add	r0, sp, #16
 800b17a:	f00d ff07 	bl	8018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b17e:	463a      	mov	r2, r7
 800b180:	4631      	mov	r1, r6
 800b182:	a804      	add	r0, sp, #16
 800b184:	f00d ff06 	bl	8018f94 <ReadConfigFile::Read(char const*, unsigned int)>
 800b188:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800b18c:	2320      	movs	r3, #32
 800b18e:	4807      	ldr	r0, [pc, #28]	@ (800b1ac <RemoteConfigParams::Load(char const*, unsigned long)+0x4c>)
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	462a      	mov	r2, r5
 800b194:	4623      	mov	r3, r4
 800b196:	210a      	movs	r1, #10
 800b198:	6800      	ldr	r0, [r0, #0]
 800b19a:	f00d fbf7 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800b19e:	a804      	add	r0, sp, #16
 800b1a0:	f00d fef7 	bl	8018f92 <ReadConfigFile::~ReadConfigFile()>
 800b1a4:	b007      	add	sp, #28
 800b1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a8:	0800b229 	stmdaeq	r0, {r0, r3, r5, r9, ip, sp, pc}
 800b1ac:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800b1b0 <RemoteConfigParams::SetBool(unsigned char, unsigned long)>:
 800b1b0:	6803      	ldr	r3, [r0, #0]
 800b1b2:	b111      	cbz	r1, 800b1ba <RemoteConfigParams::SetBool(unsigned char, unsigned long)+0xa>
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	4770      	bx	lr
 800b1ba:	ea23 0302 	bic.w	r3, r3, r2
 800b1be:	e7fa      	b.n	800b1b6 <RemoteConfigParams::SetBool(unsigned char, unsigned long)+0x6>

0800b1c0 <RemoteConfigParams::callbackFunction(char const*)>:
 800b1c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b1c4:	4f16      	ldr	r7, [pc, #88]	@ (800b220 <RemoteConfigParams::callbackFunction(char const*)+0x60>)
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	460e      	mov	r6, r1
 800b1ca:	2506      	movs	r5, #6
 800b1cc:	3d01      	subs	r5, #1
 800b1ce:	d113      	bne.n	800b1f8 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800b1d0:	2317      	movs	r3, #23
 800b1d2:	9301      	str	r3, [sp, #4]
 800b1d4:	4913      	ldr	r1, [pc, #76]	@ (800b224 <RemoteConfigParams::callbackFunction(char const*)+0x64>)
 800b1d6:	ab01      	add	r3, sp, #4
 800b1d8:	f104 0208 	add.w	r2, r4, #8
 800b1dc:	4630      	mov	r0, r6
 800b1de:	f00d ff0f 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800b1e2:	b930      	cbnz	r0, 800b1f2 <RemoteConfigParams::callbackFunction(char const*)+0x32>
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	4423      	add	r3, r4
 800b1e8:	721d      	strb	r5, [r3, #8]
 800b1ea:	6823      	ldr	r3, [r4, #0]
 800b1ec:	f043 0310 	orr.w	r3, r3, #16
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	b002      	add	sp, #8
 800b1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800b1fe:	aa01      	add	r2, sp, #4
 800b200:	4630      	mov	r0, r6
 800b202:	f00d ffed 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b206:	b108      	cbz	r0, 800b20c <RemoteConfigParams::callbackFunction(char const*)+0x4c>
 800b208:	3708      	adds	r7, #8
 800b20a:	e7df      	b.n	800b1cc <RemoteConfigParams::callbackFunction(char const*)+0xc>
 800b20c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b210:	4642      	mov	r2, r8
 800b212:	4620      	mov	r0, r4
 800b214:	b002      	add	sp, #8
 800b216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b21a:	f7ff bfc9 	b.w	800b1b0 <RemoteConfigParams::SetBool(unsigned char, unsigned long)>
 800b21e:	bf00      	nop
 800b220:	0801e1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sp, lr, pc}
 800b224:	0801ed20 	stmdaeq	r1, {r5, r8, sl, fp, sp, lr, pc}

0800b228 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800b228:	f7ff bfca 	b.w	800b1c0 <RemoteConfigParams::callbackFunction(char const*)>

0800b22c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	4605      	mov	r5, r0
 800b232:	b087      	sub	sp, #28
 800b234:	4614      	mov	r4, r2
 800b236:	461e      	mov	r6, r3
 800b238:	b361      	cbz	r1, 800b294 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x68>
 800b23a:	2220      	movs	r2, #32
 800b23c:	f010 fdfb 	bl	801be36 <memmove>
 800b240:	4940      	ldr	r1, [pc, #256]	@ (800b344 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x118>)
 800b242:	4f41      	ldr	r7, [pc, #260]	@ (800b348 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x11c>)
 800b244:	f8df b118 	ldr.w	fp, [pc, #280]	@ 800b360 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x134>
 800b248:	f8df a118 	ldr.w	sl, [pc, #280]	@ 800b364 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x138>
 800b24c:	4633      	mov	r3, r6
 800b24e:	4622      	mov	r2, r4
 800b250:	a803      	add	r0, sp, #12
 800b252:	f00d fdc5 	bl	8018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800b256:	f04f 0806 	mov.w	r8, #6
 800b25a:	f04f 0901 	mov.w	r9, #1
 800b25e:	f1b8 0801 	subs.w	r8, r8, #1
 800b262:	f8d5 c000 	ldr.w	ip, [r5]
 800b266:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b26a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800b26e:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800b272:	d112      	bne.n	800b29a <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 800b274:	42a2      	cmp	r2, r4
 800b276:	d246      	bcs.n	800b306 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xda>
 800b278:	9803      	ldr	r0, [sp, #12]
 800b27a:	f01c 0f10 	tst.w	ip, #16
 800b27e:	f105 0508 	add.w	r5, r5, #8
 800b282:	4410      	add	r0, r2
 800b284:	eba4 0402 	sub.w	r4, r4, r2
 800b288:	d12f      	bne.n	800b2ea <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xbe>
 800b28a:	bb7e      	cbnz	r6, 800b2ec <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc0>
 800b28c:	4b2f      	ldr	r3, [pc, #188]	@ (800b34c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800b28e:	4a30      	ldr	r2, [pc, #192]	@ (800b350 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x124>)
 800b290:	9500      	str	r5, [sp, #0]
 800b292:	e02e      	b.n	800b2f2 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc6>
 800b294:	f7ff ff40 	bl	800b118 <RemoteConfigParamsStore::Copy(remoteconfigparams::Params*)>
 800b298:	e7d2      	b.n	800b240 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 800b29a:	42a2      	cmp	r2, r4
 800b29c:	e9d7 3100 	ldrd	r3, r1, [r7]
 800b2a0:	d21d      	bcs.n	800b2de <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xb2>
 800b2a2:	9803      	ldr	r0, [sp, #12]
 800b2a4:	ea01 0e0c 	and.w	lr, r1, ip
 800b2a8:	ea31 0c0c 	bics.w	ip, r1, ip
 800b2ac:	4410      	add	r0, r2
 800b2ae:	eba4 0402 	sub.w	r4, r4, r2
 800b2b2:	d003      	beq.n	800b2bc <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x90>
 800b2b4:	b91e      	cbnz	r6, 800b2be <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x92>
 800b2b6:	4a27      	ldr	r2, [pc, #156]	@ (800b354 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x128>)
 800b2b8:	9600      	str	r6, [sp, #0]
 800b2ba:	e006      	b.n	800b2ca <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x9e>
 800b2bc:	b18e      	cbz	r6, 800b2e2 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xb6>
 800b2be:	eba1 020e 	sub.w	r2, r1, lr
 800b2c2:	4251      	negs	r1, r2
 800b2c4:	4151      	adcs	r1, r2
 800b2c6:	9100      	str	r1, [sp, #0]
 800b2c8:	465a      	mov	r2, fp
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	f011 f8d6 	bl	801c47c <snprintf>
 800b2d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b2d4:	4284      	cmp	r4, r0
 800b2d6:	bfa4      	itt	ge
 800b2d8:	181b      	addge	r3, r3, r0
 800b2da:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800b2de:	3708      	adds	r7, #8
 800b2e0:	e7bd      	b.n	800b25e <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x32>
 800b2e2:	f8cd 9000 	str.w	r9, [sp]
 800b2e6:	4652      	mov	r2, sl
 800b2e8:	e7ef      	b.n	800b2ca <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x9e>
 800b2ea:	b336      	cbz	r6, 800b33a <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x10e>
 800b2ec:	4b17      	ldr	r3, [pc, #92]	@ (800b34c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800b2ee:	4a1a      	ldr	r2, [pc, #104]	@ (800b358 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x12c>)
 800b2f0:	9500      	str	r5, [sp, #0]
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	f011 f8c2 	bl	801c47c <snprintf>
 800b2f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b2fc:	4284      	cmp	r4, r0
 800b2fe:	bfa4      	itt	ge
 800b300:	181b      	addge	r3, r3, r0
 800b302:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800b306:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b30a:	b17b      	cbz	r3, 800b32c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x100>
 800b30c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	4413      	add	r3, r2
 800b314:	227d      	movs	r2, #125	@ 0x7d
 800b316:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b31a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b31e:	9903      	ldr	r1, [sp, #12]
 800b320:	54ca      	strb	r2, [r1, r3]
 800b322:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b326:	3301      	adds	r3, #1
 800b328:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b32c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b330:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	b007      	add	sp, #28
 800b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33a:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 800b33c:	4a07      	ldr	r2, [pc, #28]	@ (800b35c <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0x130>)
 800b33e:	9500      	str	r5, [sp, #0]
 800b340:	e7d7      	b.n	800b2f2 <RemoteConfigParams::Builder(remoteconfigparams::Params const*, char*, unsigned long, unsigned long&)+0xc6>
 800b342:	bf00      	nop
 800b344:	0801ed6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, sl, fp, sp, lr, pc}
 800b348:	0801e1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sp, lr, pc}
 800b34c:	0801ed20 	stmdaeq	r1, {r5, r8, sl, fp, sp, lr, pc}
 800b350:	0801d221 	stmdaeq	r1, {r0, r5, r9, ip, lr, pc}
 800b354:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 800b358:	0801d216 	stmdaeq	r1, {r1, r2, r4, r9, ip, lr, pc}
 800b35c:	0801d222 	stmdaeq	r1, {r1, r5, r9, ip, lr, pc}
 800b360:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 800b364:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

0800b368 <RemoteConfigParams::Set(RemoteConfig*)>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	460c      	mov	r4, r1
 800b36c:	6801      	ldr	r1, [r0, #0]
 800b36e:	4605      	mov	r5, r0
 800b370:	f001 0101 	and.w	r1, r1, #1
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff fc51 	bl	800ac1c <RemoteConfig::SetDisable(bool)>
 800b37a:	682b      	ldr	r3, [r5, #0]
 800b37c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800b380:	7362      	strb	r2, [r4, #13]
 800b382:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800b386:	73a2      	strb	r2, [r4, #14]
 800b388:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800b38c:	73e2      	strb	r2, [r4, #15]
 800b38e:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800b392:	06db      	lsls	r3, r3, #27
 800b394:	7422      	strb	r2, [r4, #16]
 800b396:	d506      	bpl.n	800b3a6 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800b398:	f105 0108 	add.w	r1, r5, #8
 800b39c:	4620      	mov	r0, r4
 800b39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a2:	f7ff bc65 	b.w	800ac70 <RemoteConfig::SetDisplayName(char const*)>
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}

0800b3a8 <RemoteConfig::HandleReboot()>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	7b83      	ldrb	r3, [r0, #14]
 800b3ac:	b30b      	cbz	r3, 800b3f2 <RemoteConfig::HandleReboot()+0x4a>
 800b3ae:	4c11      	ldr	r4, [pc, #68]	@ (800b3f4 <RemoteConfig::HandleReboot()+0x4c>)
 800b3b0:	6825      	ldr	r5, [r4, #0]
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	7443      	strb	r3, [r0, #17]
 800b3b6:	69a8      	ldr	r0, [r5, #24]
 800b3b8:	b138      	cbz	r0, 800b3ca <RemoteConfig::HandleReboot()+0x22>
 800b3ba:	6803      	ldr	r3, [r0, #0]
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c0:	7569      	strb	r1, [r5, #21]
 800b3c2:	4798      	blx	r3
 800b3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f8 <RemoteConfig::HandleReboot()+0x50>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	606b      	str	r3, [r5, #4]
 800b3ca:	4d0c      	ldr	r5, [pc, #48]	@ (800b3fc <RemoteConfig::HandleReboot()+0x54>)
 800b3cc:	6828      	ldr	r0, [r5, #0]
 800b3ce:	f00d fb33 	bl	8018a38 <ConfigStore::Flash()>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d1fa      	bne.n	800b3cc <RemoteConfig::HandleReboot()+0x24>
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	6998      	ldr	r0, [r3, #24]
 800b3da:	b110      	cbz	r0, 800b3e2 <RemoteConfig::HandleReboot()+0x3a>
 800b3dc:	6803      	ldr	r3, [r0, #0]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	4798      	blx	r3
 800b3e2:	6820      	ldr	r0, [r4, #0]
 800b3e4:	4906      	ldr	r1, [pc, #24]	@ (800b400 <RemoteConfig::HandleReboot()+0x58>)
 800b3e6:	f7fe fb13 	bl	8009a10 <Display::TextStatus(char const*)>
 800b3ea:	4b06      	ldr	r3, [pc, #24]	@ (800b404 <RemoteConfig::HandleReboot()+0x5c>)
 800b3ec:	6818      	ldr	r0, [r3, #0]
 800b3ee:	f00e fcf9 	bl	8019de4 <Hardware::Reboot()>
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	2000e2f4 	strdcs	lr, [r0], -r4
 800b3f8:	2001bcd0 	ldrdcs	fp, [r1], -r0
 800b3fc:	2000e2dc 	ldrdcs	lr, [r0], -ip
 800b400:	0801d229 	stmdaeq	r1, {r0, r3, r5, r9, ip, lr, pc}
 800b404:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800b408 <RemoteConfig::GetIndex(void const*, unsigned long&)>:
 800b408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b40c:	f8d2 c000 	ldr.w	ip, [r2]
 800b410:	4e12      	ldr	r6, [pc, #72]	@ (800b45c <RemoteConfig::GetIndex(void const*, unsigned long&)+0x54>)
 800b412:	2000      	movs	r0, #0
 800b414:	f10d 0e04 	add.w	lr, sp, #4
 800b418:	7d33      	ldrb	r3, [r6, #20]
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	4563      	cmp	r3, ip
 800b41e:	bf2c      	ite	cs
 800b420:	4614      	movcs	r4, r2
 800b422:	4674      	movcc	r4, lr
 800b424:	6935      	ldr	r5, [r6, #16]
 800b426:	6827      	ldr	r7, [r4, #0]
 800b428:	3d01      	subs	r5, #1
 800b42a:	440f      	add	r7, r1
 800b42c:	460c      	mov	r4, r1
 800b42e:	42bc      	cmp	r4, r7
 800b430:	d101      	bne.n	800b436 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x2e>
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	e00c      	b.n	800b450 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x48>
 800b436:	f894 9000 	ldrb.w	r9, [r4]
 800b43a:	f815 8f01 	ldrb.w	r8, [r5, #1]!
 800b43e:	45c1      	cmp	r9, r8
 800b440:	d009      	beq.n	800b456 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x4e>
 800b442:	3001      	adds	r0, #1
 800b444:	2807      	cmp	r0, #7
 800b446:	f106 0618 	add.w	r6, r6, #24
 800b44a:	d1e5      	bne.n	800b418 <RemoteConfig::GetIndex(void const*, unsigned long&)+0x10>
 800b44c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b450:	b003      	add	sp, #12
 800b452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b456:	3401      	adds	r4, #1
 800b458:	e7e9      	b.n	800b42e <RemoteConfig::GetIndex(void const*, unsigned long&)+0x26>
 800b45a:	bf00      	nop
 800b45c:	0801e1f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sp, lr, pc}

0800b460 <RemoteConfig::PlatformHandleTftpSet()>:
 800b460:	f890 1020 	ldrb.w	r1, [r0, #32]
 800b464:	b510      	push	{r4, lr}
 800b466:	4c0d      	ldr	r4, [pc, #52]	@ (800b49c <RemoteConfig::PlatformHandleTftpSet()+0x3c>)
 800b468:	b171      	cbz	r1, 800b488 <RemoteConfig::PlatformHandleTftpSet()+0x28>
 800b46a:	f24a 51a5 	movw	r1, #42405	@ 0xa5a5
 800b46e:	2001      	movs	r0, #1
 800b470:	f00f fe68 	bl	801b144 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 800b474:	490a      	ldr	r1, [pc, #40]	@ (800b4a0 <RemoteConfig::PlatformHandleTftpSet()+0x40>)
 800b476:	6820      	ldr	r0, [r4, #0]
 800b478:	f7fe faca 	bl	8009a10 <Display::TextStatus(char const*)>
 800b47c:	4908      	ldr	r1, [pc, #32]	@ (800b4a0 <RemoteConfig::PlatformHandleTftpSet()+0x40>)
 800b47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b482:	2002      	movs	r0, #2
 800b484:	f00e bd0e 	b.w	8019ea4 <console_status>
 800b488:	2001      	movs	r0, #1
 800b48a:	f00f fe5b 	bl	801b144 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 800b48e:	4905      	ldr	r1, [pc, #20]	@ (800b4a4 <RemoteConfig::PlatformHandleTftpSet()+0x44>)
 800b490:	6820      	ldr	r0, [r4, #0]
 800b492:	f7fe fabd 	bl	8009a10 <Display::TextStatus(char const*)>
 800b496:	4903      	ldr	r1, [pc, #12]	@ (800b4a4 <RemoteConfig::PlatformHandleTftpSet()+0x44>)
 800b498:	e7f1      	b.n	800b47e <RemoteConfig::PlatformHandleTftpSet()+0x1e>
 800b49a:	bf00      	nop
 800b49c:	2000e2f4 	strdcs	lr, [r0], -r4
 800b4a0:	0801d285 	stmdaeq	r1, {r0, r2, r7, r9, ip, lr, pc}
 800b4a4:	0801d28e 	stmdaeq	r1, {r1, r2, r3, r7, r9, ip, lr, pc}

0800b4a8 <RemoteConfig::PlatformHandleTftpGet()>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	f00f fe57 	bl	801b160 <bkp_data_read(bkp_data_register_enum)>
 800b4b2:	f24a 53a5 	movw	r3, #42405	@ 0xa5a5
 800b4b6:	1ac3      	subs	r3, r0, r3
 800b4b8:	4258      	negs	r0, r3
 800b4ba:	4158      	adcs	r0, r3
 800b4bc:	f884 0020 	strb.w	r0, [r4, #32]
 800b4c0:	bd10      	pop	{r4, pc}
	...

0800b4c4 <HttpDaemon::HttpDaemon()>:
 800b4c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4ca:	2500      	movs	r5, #0
 800b4cc:	e9c0 3506 	strd	r3, r5, [r0, #24]
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	2050      	movs	r0, #80	@ 0x50
 800b4d4:	f00b fc96 	bl	8016e04 <net::tcp_begin(unsigned short)>
 800b4d8:	462c      	mov	r4, r5
 800b4da:	61b0      	str	r0, [r6, #24]
 800b4dc:	f44f 7702 	mov.w	r7, #520	@ 0x208
 800b4e0:	2038      	movs	r0, #56	@ 0x38
 800b4e2:	f011 f9f9 	bl	801c8d8 <operator new(unsigned int)>
 800b4e6:	69b3      	ldr	r3, [r6, #24]
 800b4e8:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800b4ec:	e9c0 5300 	strd	r5, r3, [r0]
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	2305      	movs	r3, #5
 800b4f6:	2d06      	cmp	r5, #6
 800b4f8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b4fc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b500:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800b504:	e9c0 4408 	strd	r4, r4, [r0, #32]
 800b508:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
 800b50c:	6287      	str	r7, [r0, #40]	@ 0x28
 800b50e:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
 800b512:	d1e5      	bne.n	800b4e0 <HttpDaemon::HttpDaemon()+0x1c>
 800b514:	4805      	ldr	r0, [pc, #20]	@ (800b52c <HttpDaemon::HttpDaemon()+0x68>)
 800b516:	9400      	str	r4, [sp, #0]
 800b518:	2300      	movs	r3, #0
 800b51a:	2202      	movs	r2, #2
 800b51c:	4619      	mov	r1, r3
 800b51e:	6800      	ldr	r0, [r0, #0]
 800b520:	f00a f8f8 	bl	8015714 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>
 800b524:	4630      	mov	r0, r6
 800b526:	b003      	add	sp, #12
 800b528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b52a:	bf00      	nop
 800b52c:	2000dfcc 	andcs	sp, r0, ip, asr #31

0800b530 <DisplaySet::SetSleep(bool)>:
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop

0800b534 <HttpDeamonHandleRequest::ParseMethod(char*)>:
 800b534:	460b      	mov	r3, r1
 800b536:	b510      	push	{r4, lr}
 800b538:	4929      	ldr	r1, [pc, #164]	@ (800b5e0 <HttpDeamonHandleRequest::ParseMethod(char*)+0xac>)
 800b53a:	4604      	mov	r4, r0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f010 ffe3 	bl	801c508 <strtok>
 800b542:	2800      	cmp	r0, #0
 800b544:	d039      	beq.n	800b5ba <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b546:	7803      	ldrb	r3, [r0, #0]
 800b548:	2b47      	cmp	r3, #71	@ 0x47
 800b54a:	d139      	bne.n	800b5c0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x8c>
 800b54c:	4a25      	ldr	r2, [pc, #148]	@ (800b5e4 <HttpDeamonHandleRequest::ParseMethod(char*)+0xb0>)
 800b54e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b552:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b556:	428b      	cmp	r3, r1
 800b558:	d12f      	bne.n	800b5ba <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1f7      	bne.n	800b54e <HttpDeamonHandleRequest::ParseMethod(char*)+0x1a>
 800b55e:	4920      	ldr	r1, [pc, #128]	@ (800b5e0 <HttpDeamonHandleRequest::ParseMethod(char*)+0xac>)
 800b560:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b562:	2000      	movs	r0, #0
 800b564:	f010 ffd0 	bl	801c508 <strtok>
 800b568:	b320      	cbz	r0, 800b5b4 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b56a:	61a0      	str	r0, [r4, #24]
 800b56c:	491e      	ldr	r1, [pc, #120]	@ (800b5e8 <HttpDeamonHandleRequest::ParseMethod(char*)+0xb4>)
 800b56e:	2000      	movs	r0, #0
 800b570:	f010 ffca 	bl	801c508 <strtok>
 800b574:	4603      	mov	r3, r0
 800b576:	b1e8      	cbz	r0, 800b5b4 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b578:	7802      	ldrb	r2, [r0, #0]
 800b57a:	2a48      	cmp	r2, #72	@ 0x48
 800b57c:	d11a      	bne.n	800b5b4 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b57e:	4a1b      	ldr	r2, [pc, #108]	@ (800b5ec <HttpDeamonHandleRequest::ParseMethod(char*)+0xb8>)
 800b580:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b584:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b588:	4288      	cmp	r0, r1
 800b58a:	d113      	bne.n	800b5b4 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1f7      	bne.n	800b580 <HttpDeamonHandleRequest::ParseMethod(char*)+0x4c>
 800b590:	4917      	ldr	r1, [pc, #92]	@ (800b5f0 <HttpDeamonHandleRequest::ParseMethod(char*)+0xbc>)
 800b592:	f010 ffb9 	bl	801c508 <strtok>
 800b596:	b168      	cbz	r0, 800b5b4 <HttpDeamonHandleRequest::ParseMethod(char*)+0x80>
 800b598:	7803      	ldrb	r3, [r0, #0]
 800b59a:	2b31      	cmp	r3, #49	@ 0x31
 800b59c:	d11d      	bne.n	800b5da <HttpDeamonHandleRequest::ParseMethod(char*)+0xa6>
 800b59e:	4a15      	ldr	r2, [pc, #84]	@ (800b5f4 <HttpDeamonHandleRequest::ParseMethod(char*)+0xc0>)
 800b5a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b5a4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b5a8:	428b      	cmp	r3, r1
 800b5aa:	d116      	bne.n	800b5da <HttpDeamonHandleRequest::ParseMethod(char*)+0xa6>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1f7      	bne.n	800b5a0 <HttpDeamonHandleRequest::ParseMethod(char*)+0x6c>
 800b5b0:	20c8      	movs	r0, #200	@ 0xc8
 800b5b2:	bd10      	pop	{r4, pc}
 800b5b4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	f240 10f5 	movw	r0, #501	@ 0x1f5
 800b5be:	bd10      	pop	{r4, pc}
 800b5c0:	2b50      	cmp	r3, #80	@ 0x50
 800b5c2:	d1fa      	bne.n	800b5ba <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b5c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b5f8 <HttpDeamonHandleRequest::ParseMethod(char*)+0xc4>)
 800b5c6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b5ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b5ce:	428b      	cmp	r3, r1
 800b5d0:	d1f3      	bne.n	800b5ba <HttpDeamonHandleRequest::ParseMethod(char*)+0x86>
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1f7      	bne.n	800b5c6 <HttpDeamonHandleRequest::ParseMethod(char*)+0x92>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e7c1      	b.n	800b55e <HttpDeamonHandleRequest::ParseMethod(char*)+0x2a>
 800b5da:	f240 10f9 	movw	r0, #505	@ 0x1f9
 800b5de:	bd10      	pop	{r4, pc}
 800b5e0:	0801e29c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sp, lr, pc}
 800b5e4:	0801e2a0 	stmdaeq	r1, {r5, r7, r9, sp, lr, pc}
 800b5e8:	0801e2ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sp, lr, pc}
 800b5ec:	0801e2b0 	stmdaeq	r1, {r4, r5, r7, r9, sp, lr, pc}
 800b5f0:	0801e2b8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sp, lr, pc}
 800b5f4:	0801e2bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sp, lr, pc}
 800b5f8:	0801e2a4 	stmdaeq	r1, {r2, r5, r7, r9, sp, lr, pc}

0800b5fc <HttpDeamonHandleRequest::ParseHeaderField(char*)>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	460b      	mov	r3, r1
 800b600:	4605      	mov	r5, r0
 800b602:	493f      	ldr	r1, [pc, #252]	@ (800b700 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x104>)
 800b604:	4618      	mov	r0, r3
 800b606:	f010 ff7f 	bl	801c508 <strtok>
 800b60a:	b370      	cbz	r0, 800b66a <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b60c:	1e41      	subs	r1, r0, #1
 800b60e:	4c3d      	ldr	r4, [pc, #244]	@ (800b704 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x108>)
 800b610:	468c      	mov	ip, r1
 800b612:	e000      	b.n	800b616 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x1a>
 800b614:	b360      	cbz	r0, 800b670 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x74>
 800b616:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 800b61a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b61e:	2b19      	cmp	r3, #25
 800b620:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b624:	f1a3 0e41 	sub.w	lr, r3, #65	@ 0x41
 800b628:	4602      	mov	r2, r0
 800b62a:	bf98      	it	ls
 800b62c:	f100 0220 	addls.w	r2, r0, #32
 800b630:	f1be 0f19 	cmp.w	lr, #25
 800b634:	bf98      	it	ls
 800b636:	3320      	addls	r3, #32
 800b638:	4293      	cmp	r3, r2
 800b63a:	d0eb      	beq.n	800b614 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x18>
 800b63c:	4832      	ldr	r0, [pc, #200]	@ (800b708 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x10c>)
 800b63e:	e000      	b.n	800b642 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x46>
 800b640:	b34c      	cbz	r4, 800b696 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x9a>
 800b642:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b646:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800b64a:	2b19      	cmp	r3, #25
 800b64c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b650:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 800b654:	4622      	mov	r2, r4
 800b656:	bf98      	it	ls
 800b658:	f104 0220 	addls.w	r2, r4, #32
 800b65c:	f1bc 0f19 	cmp.w	ip, #25
 800b660:	bf98      	it	ls
 800b662:	3320      	addls	r3, #32
 800b664:	4293      	cmp	r3, r2
 800b666:	d0eb      	beq.n	800b640 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x44>
 800b668:	e03a      	b.n	800b6e0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b66a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	4926      	ldr	r1, [pc, #152]	@ (800b70c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x110>)
 800b672:	f010 ff49 	bl	801c508 <strtok>
 800b676:	2800      	cmp	r0, #0
 800b678:	d0f7      	beq.n	800b66a <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b67a:	4a25      	ldr	r2, [pc, #148]	@ (800b710 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x114>)
 800b67c:	1e43      	subs	r3, r0, #1
 800b67e:	f100 0c0b 	add.w	ip, r0, #11
 800b682:	e001      	b.n	800b688 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x8c>
 800b684:	459c      	cmp	ip, r3
 800b686:	d019      	beq.n	800b6bc <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xc0>
 800b688:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b68c:	f812 4b01 	ldrb.w	r4, [r2], #1
 800b690:	428c      	cmp	r4, r1
 800b692:	d0f7      	beq.n	800b684 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x88>
 800b694:	e024      	b.n	800b6e0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b696:	491f      	ldr	r1, [pc, #124]	@ (800b714 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x118>)
 800b698:	4620      	mov	r0, r4
 800b69a:	f010 ff35 	bl	801c508 <strtok>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d0e3      	beq.n	800b66a <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b6a2:	7803      	ldrb	r3, [r0, #0]
 800b6a4:	b1db      	cbz	r3, 800b6de <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe2>
 800b6a6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800b6aa:	2a09      	cmp	r2, #9
 800b6ac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b6b0:	d8db      	bhi.n	800b66a <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x6e>
 800b6b2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b6b6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b6ba:	e7f3      	b.n	800b6a4 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xa8>
 800b6bc:	7b02      	ldrb	r2, [r0, #12]
 800b6be:	2a6a      	cmp	r2, #106	@ 0x6a
 800b6c0:	f100 030c 	add.w	r3, r0, #12
 800b6c4:	d10e      	bne.n	800b6e4 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe8>
 800b6c6:	4914      	ldr	r1, [pc, #80]	@ (800b718 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x11c>)
 800b6c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b6cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6d0:	4282      	cmp	r2, r0
 800b6d2:	d105      	bne.n	800b6e0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	d1f7      	bne.n	800b6c8 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xcc>
 800b6d8:	2303      	movs	r3, #3
 800b6da:	632b      	str	r3, [r5, #48]	@ 0x30
 800b6dc:	e000      	b.n	800b6e0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b6de:	612c      	str	r4, [r5, #16]
 800b6e0:	20c8      	movs	r0, #200	@ 0xc8
 800b6e2:	bd38      	pop	{r3, r4, r5, pc}
 800b6e4:	2a6f      	cmp	r2, #111	@ 0x6f
 800b6e6:	d1fb      	bne.n	800b6e0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b6e8:	490c      	ldr	r1, [pc, #48]	@ (800b71c <HttpDeamonHandleRequest::ParseHeaderField(char*)+0x120>)
 800b6ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b6ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6f2:	4282      	cmp	r2, r0
 800b6f4:	d1f4      	bne.n	800b6e0 <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xe4>
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	d1f7      	bne.n	800b6ea <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xee>
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	e7ed      	b.n	800b6da <HttpDeamonHandleRequest::ParseHeaderField(char*)+0xde>
 800b6fe:	bf00      	nop
 800b700:	0801e2c0 	stmdaeq	r1, {r6, r7, r9, sp, lr, pc}
 800b704:	0801e2c4 	stmdaeq	r1, {r2, r6, r7, r9, sp, lr, pc}
 800b708:	0801e2d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, sp, lr, pc}
 800b70c:	0801e30c 	stmdaeq	r1, {r2, r3, r8, r9, sp, lr, pc}
 800b710:	0801e2e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sp, lr, pc}
 800b714:	0801e29c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sp, lr, pc}
 800b718:	0801e2f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, sp, lr, pc}
 800b71c:	0801e2fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sp, lr, pc}

0800b720 <HttpDeamonHandleRequest::ParseRequest()>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b724:	4605      	mov	r5, r0
 800b726:	6940      	ldr	r0, [r0, #20]
 800b728:	2400      	movs	r4, #0
 800b72a:	2205      	movs	r2, #5
 800b72c:	e9c5 4403 	strd	r4, r4, [r5, #12]
 800b730:	632a      	str	r2, [r5, #48]	@ 0x30
 800b732:	b300      	cbz	r0, 800b776 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b734:	4619      	mov	r1, r3
 800b736:	46a4      	mov	ip, r4
 800b738:	4626      	mov	r6, r4
 800b73a:	e002      	b.n	800b742 <HttpDeamonHandleRequest::ParseRequest()+0x22>
 800b73c:	3401      	adds	r4, #1
 800b73e:	42a0      	cmp	r0, r4
 800b740:	d919      	bls.n	800b776 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b742:	5d1a      	ldrb	r2, [r3, r4]
 800b744:	2a0a      	cmp	r2, #10
 800b746:	d1f9      	bne.n	800b73c <HttpDeamonHandleRequest::ParseRequest()+0x1c>
 800b748:	4423      	add	r3, r4
 800b74a:	f10c 0701 	add.w	r7, ip, #1
 800b74e:	f803 6c01 	strb.w	r6, [r3, #-1]
 800b752:	f1bc 0f00 	cmp.w	ip, #0
 800b756:	d010      	beq.n	800b77a <HttpDeamonHandleRequest::ParseRequest()+0x5a>
 800b758:	780b      	ldrb	r3, [r1, #0]
 800b75a:	b193      	cbz	r3, 800b782 <HttpDeamonHandleRequest::ParseRequest()+0x62>
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7ff ff4d 	bl	800b5fc <HttpDeamonHandleRequest::ParseHeaderField(char*)>
 800b762:	28c8      	cmp	r0, #200	@ 0xc8
 800b764:	d108      	bne.n	800b778 <HttpDeamonHandleRequest::ParseRequest()+0x58>
 800b766:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b768:	6968      	ldr	r0, [r5, #20]
 800b76a:	3401      	adds	r4, #1
 800b76c:	1919      	adds	r1, r3, r4
 800b76e:	3401      	adds	r4, #1
 800b770:	42a0      	cmp	r0, r4
 800b772:	46bc      	mov	ip, r7
 800b774:	d8e5      	bhi.n	800b742 <HttpDeamonHandleRequest::ParseRequest()+0x22>
 800b776:	20c8      	movs	r0, #200	@ 0xc8
 800b778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77a:	4628      	mov	r0, r5
 800b77c:	f7ff feda 	bl	800b534 <HttpDeamonHandleRequest::ParseMethod(char*)>
 800b780:	e7ef      	b.n	800b762 <HttpDeamonHandleRequest::ParseRequest()+0x42>
 800b782:	696a      	ldr	r2, [r5, #20]
 800b784:	3a01      	subs	r2, #1
 800b786:	1b12      	subs	r2, r2, r4
 800b788:	b292      	uxth	r2, r2
 800b78a:	60ea      	str	r2, [r5, #12]
 800b78c:	2a00      	cmp	r2, #0
 800b78e:	d0f2      	beq.n	800b776 <HttpDeamonHandleRequest::ParseRequest()+0x56>
 800b790:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800b792:	3401      	adds	r4, #1
 800b794:	4421      	add	r1, r4
 800b796:	61e9      	str	r1, [r5, #28]
 800b798:	548b      	strb	r3, [r1, r2]
 800b79a:	e7ec      	b.n	800b776 <HttpDeamonHandleRequest::ParseRequest()+0x56>

0800b79c <HttpDeamonHandleRequest::HandleGetTxt()>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	4605      	mov	r5, r0
 800b7a0:	6980      	ldr	r0, [r0, #24]
 800b7a2:	7983      	ldrb	r3, [r0, #6]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d039      	beq.n	800b81c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b7a8:	1d84      	adds	r4, r0, #6
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800b7b0:	2a00      	cmp	r2, #0
 800b7b2:	d1fb      	bne.n	800b7ac <HttpDeamonHandleRequest::HandleGetTxt()+0x10>
 800b7b4:	1b1a      	subs	r2, r3, r4
 800b7b6:	2a04      	cmp	r2, #4
 800b7b8:	d930      	bls.n	800b81c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b7ba:	1f13      	subs	r3, r2, #4
 800b7bc:	18e1      	adds	r1, r4, r3
 800b7be:	5ce3      	ldrb	r3, [r4, r3]
 800b7c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7c2:	d12b      	bne.n	800b81c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b7c4:	4c18      	ldr	r4, [pc, #96]	@ (800b828 <HttpDeamonHandleRequest::HandleGetTxt()+0x8c>)
 800b7c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7ca:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800b7ce:	4563      	cmp	r3, ip
 800b7d0:	d124      	bne.n	800b81c <HttpDeamonHandleRequest::HandleGetTxt()+0x80>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1f7      	bne.n	800b7c6 <HttpDeamonHandleRequest::HandleGetTxt()+0x2a>
 800b7d6:	4c15      	ldr	r4, [pc, #84]	@ (800b82c <HttpDeamonHandleRequest::HandleGetTxt()+0x90>)
 800b7d8:	7821      	ldrb	r1, [r4, #0]
 800b7da:	f041 0601 	orr.w	r6, r1, #1
 800b7de:	1d43      	adds	r3, r0, #5
 800b7e0:	7026      	strb	r6, [r4, #0]
 800b7e2:	4813      	ldr	r0, [pc, #76]	@ (800b830 <HttpDeamonHandleRequest::HandleGetTxt()+0x94>)
 800b7e4:	f001 0601 	and.w	r6, r1, #1
 800b7e8:	e003      	b.n	800b7f2 <HttpDeamonHandleRequest::HandleGetTxt()+0x56>
 800b7ea:	3a01      	subs	r2, #1
 800b7ec:	f800 1b01 	strb.w	r1, [r0], #1
 800b7f0:	d005      	beq.n	800b7fe <HttpDeamonHandleRequest::HandleGetTxt()+0x62>
 800b7f2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b7f6:	2900      	cmp	r1, #0
 800b7f8:	d1f7      	bne.n	800b7ea <HttpDeamonHandleRequest::HandleGetTxt()+0x4e>
 800b7fa:	f010 fb33 	bl	801be64 <memset>
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b834 <HttpDeamonHandleRequest::HandleGetTxt()+0x98>)
 800b800:	490b      	ldr	r1, [pc, #44]	@ (800b830 <HttpDeamonHandleRequest::HandleGetTxt()+0x94>)
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800b808:	f7ff fa4a 	bl	800aca0 <RemoteConfig::HandleGet(void*, unsigned long)>
 800b80c:	7823      	ldrb	r3, [r4, #0]
 800b80e:	60a8      	str	r0, [r5, #8]
 800b810:	b93e      	cbnz	r6, 800b822 <HttpDeamonHandleRequest::HandleGetTxt()+0x86>
 800b812:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800b816:	7023      	strb	r3, [r4, #0]
 800b818:	20c8      	movs	r0, #200	@ 0xc8
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b820:	bd70      	pop	{r4, r5, r6, pc}
 800b822:	f043 0301 	orr.w	r3, r3, #1
 800b826:	e7f6      	b.n	800b816 <HttpDeamonHandleRequest::HandleGetTxt()+0x7a>
 800b828:	0801e310 	stmdaeq	r1, {r4, r8, r9, sp, lr, pc}
 800b82c:	2000e2f1 	strdcs	lr, [r0], -r1
 800b830:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800b834:	2000cd30 	andcs	ip, r0, r0, lsr sp

0800b838 <HttpDeamonHandleRequest::HandleGet()>:
 800b838:	b530      	push	{r4, r5, lr}
 800b83a:	4604      	mov	r4, r0
 800b83c:	b083      	sub	sp, #12
 800b83e:	6980      	ldr	r0, [r0, #24]
 800b840:	4b91      	ldr	r3, [pc, #580]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b842:	6223      	str	r3, [r4, #32]
 800b844:	2100      	movs	r1, #0
 800b846:	4a91      	ldr	r2, [pc, #580]	@ (800ba8c <HttpDeamonHandleRequest::HandleGet()+0x254>)
 800b848:	9101      	str	r1, [sp, #4]
 800b84a:	1e43      	subs	r3, r0, #1
 800b84c:	f100 0e05 	add.w	lr, r0, #5
 800b850:	e001      	b.n	800b856 <HttpDeamonHandleRequest::HandleGet()+0x1e>
 800b852:	459e      	cmp	lr, r3
 800b854:	d020      	beq.n	800b898 <HttpDeamonHandleRequest::HandleGet()+0x60>
 800b856:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 800b85a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b85e:	458c      	cmp	ip, r1
 800b860:	d0f7      	beq.n	800b852 <HttpDeamonHandleRequest::HandleGet()+0x1a>
 800b862:	7803      	ldrb	r3, [r0, #0]
 800b864:	2b2f      	cmp	r3, #47	@ 0x2f
 800b866:	f040 8081 	bne.w	800b96c <HttpDeamonHandleRequest::HandleGet()+0x134>
 800b86a:	4a89      	ldr	r2, [pc, #548]	@ (800ba90 <HttpDeamonHandleRequest::HandleGet()+0x258>)
 800b86c:	4601      	mov	r1, r0
 800b86e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b872:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b876:	4563      	cmp	r3, ip
 800b878:	d13c      	bne.n	800b8f4 <HttpDeamonHandleRequest::HandleGet()+0xbc>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1f7      	bne.n	800b86e <HttpDeamonHandleRequest::HandleGet()+0x36>
 800b87e:	4885      	ldr	r0, [pc, #532]	@ (800ba94 <HttpDeamonHandleRequest::HandleGet()+0x25c>)
 800b880:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 800b884:	a901      	add	r1, sp, #4
 800b886:	f000 fb1d 	bl	800bec4 <get_file_content(char const*, unsigned long&, http::contentTypes&)>
 800b88a:	9b01      	ldr	r3, [sp, #4]
 800b88c:	6220      	str	r0, [r4, #32]
 800b88e:	b36b      	cbz	r3, 800b8ec <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b890:	60a3      	str	r3, [r4, #8]
 800b892:	20c8      	movs	r0, #200	@ 0xc8
 800b894:	b003      	add	sp, #12
 800b896:	bd30      	pop	{r4, r5, pc}
 800b898:	2303      	movs	r3, #3
 800b89a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b89c:	7982      	ldrb	r2, [r0, #6]
 800b89e:	1dc1      	adds	r1, r0, #7
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	d046      	beq.n	800b932 <HttpDeamonHandleRequest::HandleGet()+0xfa>
 800b8a4:	f241 5305 	movw	r3, #5381	@ 0x1505
 800b8a8:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800b8ac:	fa12 f383 	uxtah	r3, r2, r3
 800b8b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	d1f6      	bne.n	800b8a8 <HttpDeamonHandleRequest::HandleGet()+0x70>
 800b8ba:	f244 729b 	movw	r2, #18331	@ 0x479b
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d073      	beq.n	800b9aa <HttpDeamonHandleRequest::HandleGet()+0x172>
 800b8c2:	d858      	bhi.n	800b976 <HttpDeamonHandleRequest::HandleGet()+0x13e>
 800b8c4:	f241 6261 	movw	r2, #5729	@ 0x1661
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d02b      	beq.n	800b924 <HttpDeamonHandleRequest::HandleGet()+0xec>
 800b8cc:	f242 4272 	movw	r2, #9330	@ 0x2472
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d063      	beq.n	800b99c <HttpDeamonHandleRequest::HandleGet()+0x164>
 800b8d4:	f241 12fa 	movw	r2, #4602	@ 0x11fa
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d12a      	bne.n	800b932 <HttpDeamonHandleRequest::HandleGet()+0xfa>
 800b8dc:	486a      	ldr	r0, [pc, #424]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b8de:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b8e2:	f000 fae9 	bl	800beb8 <remoteconfig::json_get_directory(char*, unsigned long)>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1d1      	bne.n	800b890 <HttpDeamonHandleRequest::HandleGet()+0x58>
 800b8ec:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 800b8f0:	b003      	add	sp, #12
 800b8f2:	bd30      	pop	{r4, r5, pc}
 800b8f4:	4a68      	ldr	r2, [pc, #416]	@ (800ba98 <HttpDeamonHandleRequest::HandleGet()+0x260>)
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b8fc:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b900:	4563      	cmp	r3, ip
 800b902:	d103      	bne.n	800b90c <HttpDeamonHandleRequest::HandleGet()+0xd4>
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f7      	bne.n	800b8f8 <HttpDeamonHandleRequest::HandleGet()+0xc0>
 800b908:	4864      	ldr	r0, [pc, #400]	@ (800ba9c <HttpDeamonHandleRequest::HandleGet()+0x264>)
 800b90a:	e7b9      	b.n	800b880 <HttpDeamonHandleRequest::HandleGet()+0x48>
 800b90c:	4a64      	ldr	r2, [pc, #400]	@ (800baa0 <HttpDeamonHandleRequest::HandleGet()+0x268>)
 800b90e:	4601      	mov	r1, r0
 800b910:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b914:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 800b918:	4563      	cmp	r3, ip
 800b91a:	d127      	bne.n	800b96c <HttpDeamonHandleRequest::HandleGet()+0x134>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1f7      	bne.n	800b910 <HttpDeamonHandleRequest::HandleGet()+0xd8>
 800b920:	4860      	ldr	r0, [pc, #384]	@ (800baa4 <HttpDeamonHandleRequest::HandleGet()+0x26c>)
 800b922:	e7ad      	b.n	800b880 <HttpDeamonHandleRequest::HandleGet()+0x48>
 800b924:	4858      	ldr	r0, [pc, #352]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b926:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b92a:	f000 fa61 	bl	800bdf0 <remoteconfig::json_get_list(char*, unsigned long)>
 800b92e:	4603      	mov	r3, r0
 800b930:	e7da      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b932:	4a5d      	ldr	r2, [pc, #372]	@ (800baa8 <HttpDeamonHandleRequest::HandleGet()+0x270>)
 800b934:	f100 0509 	add.w	r5, r0, #9
 800b938:	4673      	mov	r3, lr
 800b93a:	e001      	b.n	800b940 <HttpDeamonHandleRequest::HandleGet()+0x108>
 800b93c:	429d      	cmp	r5, r3
 800b93e:	d045      	beq.n	800b9cc <HttpDeamonHandleRequest::HandleGet()+0x194>
 800b940:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 800b944:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b948:	458c      	cmp	ip, r1
 800b94a:	d0f7      	beq.n	800b93c <HttpDeamonHandleRequest::HandleGet()+0x104>
 800b94c:	4b57      	ldr	r3, [pc, #348]	@ (800baac <HttpDeamonHandleRequest::HandleGet()+0x274>)
 800b94e:	f100 050b 	add.w	r5, r0, #11
 800b952:	e001      	b.n	800b958 <HttpDeamonHandleRequest::HandleGet()+0x120>
 800b954:	4575      	cmp	r5, lr
 800b956:	d068      	beq.n	800ba2a <HttpDeamonHandleRequest::HandleGet()+0x1f2>
 800b958:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 800b95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b960:	4291      	cmp	r1, r2
 800b962:	d0f7      	beq.n	800b954 <HttpDeamonHandleRequest::HandleGet()+0x11c>
 800b964:	4620      	mov	r0, r4
 800b966:	f7ff ff19 	bl	800b79c <HttpDeamonHandleRequest::HandleGetTxt()>
 800b96a:	e793      	b.n	800b894 <HttpDeamonHandleRequest::HandleGet()+0x5c>
 800b96c:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 800b970:	a901      	add	r1, sp, #4
 800b972:	3001      	adds	r0, #1
 800b974:	e787      	b.n	800b886 <HttpDeamonHandleRequest::HandleGet()+0x4e>
 800b976:	f646 424b 	movw	r2, #27723	@ 0x6c4b
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d01c      	beq.n	800b9b8 <HttpDeamonHandleRequest::HandleGet()+0x180>
 800b97e:	f24b 72d9 	movw	r2, #47065	@ 0xb7d9
 800b982:	4293      	cmp	r3, r2
 800b984:	d1d5      	bne.n	800b932 <HttpDeamonHandleRequest::HandleGet()+0xfa>
 800b986:	4b4a      	ldr	r3, [pc, #296]	@ (800bab0 <HttpDeamonHandleRequest::HandleGet()+0x278>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	7bdb      	ldrb	r3, [r3, #15]
 800b98c:	b1db      	cbz	r3, 800b9c6 <HttpDeamonHandleRequest::HandleGet()+0x18e>
 800b98e:	483e      	ldr	r0, [pc, #248]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b990:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b994:	f000 fa7a 	bl	800be8c <remoteconfig::json_get_uptime(char*, unsigned long)>
 800b998:	4603      	mov	r3, r0
 800b99a:	e7a5      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b99c:	483a      	ldr	r0, [pc, #232]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b99e:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b9a2:	f00e f83b 	bl	8019a1c <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	e79e      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b9aa:	4837      	ldr	r0, [pc, #220]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b9ac:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b9b0:	f000 fa76 	bl	800bea0 <remoteconfig::json_get_display(char*, unsigned long)>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	e797      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b9b8:	4833      	ldr	r0, [pc, #204]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800b9ba:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800b9be:	f000 fa49 	bl	800be54 <remoteconfig::json_get_version(char*, unsigned long)>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	e790      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800b9c6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b9ca:	e763      	b.n	800b894 <HttpDeamonHandleRequest::HandleGet()+0x5c>
 800b9cc:	7c05      	ldrb	r5, [r0, #16]
 800b9ce:	7a82      	ldrb	r2, [r0, #10]
 800b9d0:	2d3f      	cmp	r5, #63	@ 0x3f
 800b9d2:	bf04      	itt	eq
 800b9d4:	2300      	moveq	r3, #0
 800b9d6:	7403      	strbeq	r3, [r0, #16]
 800b9d8:	f100 010b 	add.w	r1, r0, #11
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	d085      	beq.n	800b8ec <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800b9e0:	f241 5305 	movw	r3, #5381	@ 0x1505
 800b9e4:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800b9e8:	fa12 f383 	uxtah	r3, r2, r3
 800b9ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	2a00      	cmp	r2, #0
 800b9f4:	d1f6      	bne.n	800b9e4 <HttpDeamonHandleRequest::HandleGet()+0x1ac>
 800b9f6:	f643 124e 	movw	r2, #14670	@ 0x394e
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d035      	beq.n	800ba6a <HttpDeamonHandleRequest::HandleGet()+0x232>
 800b9fe:	f648 5249 	movw	r2, #36169	@ 0x8d49
 800ba02:	4293      	cmp	r3, r2
 800ba04:	f47f af72 	bne.w	800b8ec <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800ba08:	2d3f      	cmp	r5, #63	@ 0x3f
 800ba0a:	f47f af6f 	bne.w	800b8ec <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800ba0e:	7c40      	ldrb	r0, [r0, #17]
 800ba10:	f020 0320 	bic.w	r3, r0, #32
 800ba14:	3b41      	subs	r3, #65	@ 0x41
 800ba16:	2b19      	cmp	r3, #25
 800ba18:	f63f af68 	bhi.w	800b8ec <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800ba1c:	491a      	ldr	r1, [pc, #104]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800ba1e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800ba22:	f004 fe19 	bl	8010658 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)>
 800ba26:	4603      	mov	r3, r0
 800ba28:	e75e      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800ba2a:	7b02      	ldrb	r2, [r0, #12]
 800ba2c:	300d      	adds	r0, #13
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	f43f af5c 	beq.w	800b8ec <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800ba34:	f241 5305 	movw	r3, #5381	@ 0x1505
 800ba38:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 800ba3c:	fa12 f383 	uxtah	r3, r2, r3
 800ba40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	2a00      	cmp	r2, #0
 800ba48:	d1f6      	bne.n	800ba38 <HttpDeamonHandleRequest::HandleGet()+0x200>
 800ba4a:	f645 625a 	movw	r2, #24154	@ 0x5e5a
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d012      	beq.n	800ba78 <HttpDeamonHandleRequest::HandleGet()+0x240>
 800ba52:	f648 5249 	movw	r2, #36169	@ 0x8d49
 800ba56:	4293      	cmp	r3, r2
 800ba58:	f47f af48 	bne.w	800b8ec <HttpDeamonHandleRequest::HandleGet()+0xb4>
 800ba5c:	480a      	ldr	r0, [pc, #40]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800ba5e:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800ba62:	f007 fab5 	bl	8012fd0 <remoteconfig::pixel::json_get_status(char*, unsigned long)>
 800ba66:	4603      	mov	r3, r0
 800ba68:	e73e      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800ba6a:	4807      	ldr	r0, [pc, #28]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800ba6c:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800ba70:	f004 fdba 	bl	80105e8 <remoteconfig::dmx::json_get_ports(char*, unsigned long)>
 800ba74:	4603      	mov	r3, r0
 800ba76:	e737      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800ba78:	4803      	ldr	r0, [pc, #12]	@ (800ba88 <HttpDeamonHandleRequest::HandleGet()+0x250>)
 800ba7a:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
 800ba7e:	f007 fb45 	bl	801310c <remoteconfig::pixel::json_get_types(char*, unsigned long)>
 800ba82:	4603      	mov	r3, r0
 800ba84:	e730      	b.n	800b8e8 <HttpDeamonHandleRequest::HandleGet()+0xb0>
 800ba86:	bf00      	nop
 800ba88:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800ba8c:	0801e318 	stmdaeq	r1, {r3, r4, r8, r9, sp, lr, pc}
 800ba90:	0801e2ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sp, lr, pc}
 800ba94:	0801e330 	stmdaeq	r1, {r4, r5, r8, r9, sp, lr, pc}
 800ba98:	0801e33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sp, lr, pc}
 800ba9c:	0801e344 	stmdaeq	r1, {r2, r6, r8, r9, sp, lr, pc}
 800baa0:	0801e350 	stmdaeq	r1, {r4, r6, r8, r9, sp, lr, pc}
 800baa4:	0801e358 	stmdaeq	r1, {r3, r4, r6, r8, r9, sp, lr, pc}
 800baa8:	0801e320 	stmdaeq	r1, {r5, r8, r9, sp, lr, pc}
 800baac:	0801e328 	stmdaeq	r1, {r3, r5, r8, r9, sp, lr, pc}
 800bab0:	2000cd30 	andcs	ip, r0, r0, lsr sp

0800bab4 <HttpDeamonHandleRequest::HandlePost(bool)>:
 800bab4:	b570      	push	{r4, r5, r6, lr}
 800bab6:	4604      	mov	r4, r0
 800bab8:	b082      	sub	sp, #8
 800baba:	b331      	cbz	r1, 800bb0a <HttpDeamonHandleRequest::HandlePost(bool)+0x56>
 800babc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800babe:	8aa1      	ldrh	r1, [r4, #20]
 800bac0:	61e0      	str	r0, [r4, #28]
 800bac2:	60e1      	str	r1, [r4, #12]
 800bac4:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d13c      	bne.n	800bb46 <HttpDeamonHandleRequest::HandlePost(bool)+0x92>
 800bacc:	4d5e      	ldr	r5, [pc, #376]	@ (800bc48 <HttpDeamonHandleRequest::HandlePost(bool)+0x194>)
 800bace:	4b5f      	ldr	r3, [pc, #380]	@ (800bc4c <HttpDeamonHandleRequest::HandlePost(bool)+0x198>)
 800bad0:	782e      	ldrb	r6, [r5, #0]
 800bad2:	460a      	mov	r2, r1
 800bad4:	4601      	mov	r1, r0
 800bad6:	6818      	ldr	r0, [r3, #0]
 800bad8:	f046 0301 	orr.w	r3, r6, #1
 800badc:	702b      	strb	r3, [r5, #0]
 800bade:	f7ff f9c7 	bl	800ae70 <RemoteConfig::HandleSet(void*, unsigned long)>
 800bae2:	782b      	ldrb	r3, [r5, #0]
 800bae4:	07f2      	lsls	r2, r6, #31
 800bae6:	bf4c      	ite	mi
 800bae8:	f043 0301 	orrmi.w	r3, r3, #1
 800baec:	f023 0301 	bicpl.w	r3, r3, #1
 800baf0:	702b      	strb	r3, [r5, #0]
 800baf2:	2300      	movs	r3, #0
 800baf4:	4a56      	ldr	r2, [pc, #344]	@ (800bc50 <HttpDeamonHandleRequest::HandlePost(bool)+0x19c>)
 800baf6:	4857      	ldr	r0, [pc, #348]	@ (800bc54 <HttpDeamonHandleRequest::HandlePost(bool)+0x1a0>)
 800baf8:	6323      	str	r3, [r4, #48]	@ 0x30
 800bafa:	f240 519f 	movw	r1, #1439	@ 0x59f
 800bafe:	f010 fcbd 	bl	801c47c <snprintf>
 800bb02:	60a0      	str	r0, [r4, #8]
 800bb04:	20c8      	movs	r0, #200	@ 0xc8
 800bb06:	b002      	add	sp, #8
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d134      	bne.n	800bb7a <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800bb10:	6985      	ldr	r5, [r0, #24]
 800bb12:	782b      	ldrb	r3, [r5, #0]
 800bb14:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb16:	f040 808c 	bne.w	800bc32 <HttpDeamonHandleRequest::HandlePost(bool)+0x17e>
 800bb1a:	4a4f      	ldr	r2, [pc, #316]	@ (800bc58 <HttpDeamonHandleRequest::HandlePost(bool)+0x1a4>)
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb22:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800bb26:	4283      	cmp	r3, r0
 800bb28:	d12b      	bne.n	800bb82 <HttpDeamonHandleRequest::HandlePost(bool)+0xce>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1f7      	bne.n	800bb1e <HttpDeamonHandleRequest::HandlePost(bool)+0x6a>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800bb34:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d3e3      	bcc.n	800bb04 <HttpDeamonHandleRequest::HandlePost(bool)+0x50>
 800bb3c:	68e1      	ldr	r1, [r4, #12]
 800bb3e:	2900      	cmp	r1, #0
 800bb40:	d0e0      	beq.n	800bb04 <HttpDeamonHandleRequest::HandlePost(bool)+0x50>
 800bb42:	69e0      	ldr	r0, [r4, #28]
 800bb44:	e7be      	b.n	800bac4 <HttpDeamonHandleRequest::HandlePost(bool)+0x10>
 800bb46:	2201      	movs	r2, #1
 800bb48:	f00d f89e 	bl	8018c88 <properties::convert_json_file(char*, unsigned long, bool)>
 800bb4c:	1e05      	subs	r5, r0, #0
 800bb4e:	dd14      	ble.n	800bb7a <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800bb50:	69e3      	ldr	r3, [r4, #28]
 800bb52:	4942      	ldr	r1, [pc, #264]	@ (800bc5c <HttpDeamonHandleRequest::HandlePost(bool)+0x1a8>)
 800bb54:	442b      	add	r3, r5
 800bb56:	2200      	movs	r2, #0
 800bb58:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bb5c:	69e0      	ldr	r0, [r4, #28]
 800bb5e:	f10d 0207 	add.w	r2, sp, #7
 800bb62:	f00d fb3d 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bb66:	bb20      	cbnz	r0, 800bbb2 <HttpDeamonHandleRequest::HandlePost(bool)+0xfe>
 800bb68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0c0      	beq.n	800baf2 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800bb70:	4b36      	ldr	r3, [pc, #216]	@ (800bc4c <HttpDeamonHandleRequest::HandlePost(bool)+0x198>)
 800bb72:	6818      	ldr	r0, [r3, #0]
 800bb74:	7b83      	ldrb	r3, [r0, #14]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d164      	bne.n	800bc44 <HttpDeamonHandleRequest::HandlePost(bool)+0x190>
 800bb7a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800bb7e:	b002      	add	sp, #8
 800bb80:	bd70      	pop	{r4, r5, r6, pc}
 800bb82:	1a1b      	subs	r3, r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bf0c      	ite	eq
 800bb88:	2301      	moveq	r3, #1
 800bb8a:	2300      	movne	r3, #0
 800bb8c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800bb90:	d0d0      	beq.n	800bb34 <HttpDeamonHandleRequest::HandlePost(bool)+0x80>
 800bb92:	782b      	ldrb	r3, [r5, #0]
 800bb94:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb96:	d109      	bne.n	800bbac <HttpDeamonHandleRequest::HandlePost(bool)+0xf8>
 800bb98:	4a31      	ldr	r2, [pc, #196]	@ (800bc60 <HttpDeamonHandleRequest::HandlePost(bool)+0x1ac>)
 800bb9a:	e001      	b.n	800bba0 <HttpDeamonHandleRequest::HandlePost(bool)+0xec>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d0c9      	beq.n	800bb34 <HttpDeamonHandleRequest::HandlePost(bool)+0x80>
 800bba0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800bba4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800bba8:	428b      	cmp	r3, r1
 800bbaa:	d0f7      	beq.n	800bb9c <HttpDeamonHandleRequest::HandlePost(bool)+0xe8>
 800bbac:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 800bbb0:	e7a9      	b.n	800bb06 <HttpDeamonHandleRequest::HandlePost(bool)+0x52>
 800bbb2:	492c      	ldr	r1, [pc, #176]	@ (800bc64 <HttpDeamonHandleRequest::HandlePost(bool)+0x1b0>)
 800bbb4:	69e0      	ldr	r0, [r4, #28]
 800bbb6:	f10d 0207 	add.w	r2, sp, #7
 800bbba:	f00d fb11 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bbbe:	b178      	cbz	r0, 800bbe0 <HttpDeamonHandleRequest::HandlePost(bool)+0x12c>
 800bbc0:	4929      	ldr	r1, [pc, #164]	@ (800bc68 <HttpDeamonHandleRequest::HandlePost(bool)+0x1b4>)
 800bbc2:	69e0      	ldr	r0, [r4, #28]
 800bbc4:	f10d 0207 	add.w	r2, sp, #7
 800bbc8:	f00d fb0a 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bbcc:	bb10      	cbnz	r0, 800bc14 <HttpDeamonHandleRequest::HandlePost(bool)+0x160>
 800bbce:	4a27      	ldr	r2, [pc, #156]	@ (800bc6c <HttpDeamonHandleRequest::HandlePost(bool)+0x1b8>)
 800bbd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bbd4:	6810      	ldr	r0, [r2, #0]
 800bbd6:	b37b      	cbz	r3, 800bc38 <HttpDeamonHandleRequest::HandlePost(bool)+0x184>
 800bbd8:	2104      	movs	r1, #4
 800bbda:	f00d fee1 	bl	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800bbde:	e788      	b.n	800baf2 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800bbe0:	4b23      	ldr	r3, [pc, #140]	@ (800bc70 <HttpDeamonHandleRequest::HandlePost(bool)+0x1bc>)
 800bbe2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800bbe6:	681d      	ldr	r5, [r3, #0]
 800bbe8:	69a8      	ldr	r0, [r5, #24]
 800bbea:	fab6 f186 	clz	r1, r6
 800bbee:	0949      	lsrs	r1, r1, #5
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	f43f af7e 	beq.w	800baf2 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800bbf6:	6803      	ldr	r3, [r0, #0]
 800bbf8:	4a1e      	ldr	r2, [pc, #120]	@ (800bc74 <HttpDeamonHandleRequest::HandlePost(bool)+0x1c0>)
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbfc:	7569      	strb	r1, [r5, #21]
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d106      	bne.n	800bc10 <HttpDeamonHandleRequest::HandlePost(bool)+0x15c>
 800bc02:	2e00      	cmp	r6, #0
 800bc04:	f43f af75 	beq.w	800baf2 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800bc08:	4b1b      	ldr	r3, [pc, #108]	@ (800bc78 <HttpDeamonHandleRequest::HandlePost(bool)+0x1c4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	606b      	str	r3, [r5, #4]
 800bc0e:	e770      	b.n	800baf2 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800bc10:	4798      	blx	r3
 800bc12:	e7f6      	b.n	800bc02 <HttpDeamonHandleRequest::HandlePost(bool)+0x14e>
 800bc14:	69e0      	ldr	r0, [r4, #28]
 800bc16:	4a19      	ldr	r2, [pc, #100]	@ (800bc7c <HttpDeamonHandleRequest::HandlePost(bool)+0x1c8>)
 800bc18:	1e43      	subs	r3, r0, #1
 800bc1a:	f100 0c04 	add.w	ip, r0, #4
 800bc1e:	e001      	b.n	800bc24 <HttpDeamonHandleRequest::HandlePost(bool)+0x170>
 800bc20:	4563      	cmp	r3, ip
 800bc22:	d00b      	beq.n	800bc3c <HttpDeamonHandleRequest::HandlePost(bool)+0x188>
 800bc24:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800bc28:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bc2c:	428e      	cmp	r6, r1
 800bc2e:	d0f7      	beq.n	800bc20 <HttpDeamonHandleRequest::HandlePost(bool)+0x16c>
 800bc30:	e7a3      	b.n	800bb7a <HttpDeamonHandleRequest::HandlePost(bool)+0xc6>
 800bc32:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 800bc36:	e7ac      	b.n	800bb92 <HttpDeamonHandleRequest::HandlePost(bool)+0xde>
 800bc38:	2102      	movs	r1, #2
 800bc3a:	e7ce      	b.n	800bbda <HttpDeamonHandleRequest::HandlePost(bool)+0x126>
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f00d ff57 	bl	8019af0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)>
 800bc42:	e756      	b.n	800baf2 <HttpDeamonHandleRequest::HandlePost(bool)+0x3e>
 800bc44:	f7ff fbb0 	bl	800b3a8 <RemoteConfig::HandleReboot()>
 800bc48:	2000e2f1 	strdcs	lr, [r0], -r1
 800bc4c:	2000cd30 	andcs	ip, r0, r0, lsr sp
 800bc50:	0801e3a0 	stmdaeq	r1, {r5, r7, r8, r9, sp, lr, pc}
 800bc54:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800bc58:	0801e364 	stmdaeq	r1, {r2, r5, r6, r8, r9, sp, lr, pc}
 800bc5c:	0801e37c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, sp, lr, pc}
 800bc60:	0801e374 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sp, lr, pc}
 800bc64:	0801e384 	stmdaeq	r1, {r2, r7, r8, r9, sp, lr, pc}
 800bc68:	0801e38c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sp, lr, pc}
 800bc6c:	2000e3e0 	andcs	lr, r0, r0, ror #7
 800bc70:	2000e2f4 	strdcs	lr, [r0], -r4
 800bc74:	0800b531 	stmdaeq	r0, {r0, r4, r5, r8, sl, ip, sp, pc}
 800bc78:	2001bcd0 	ldrdcs	fp, [r1], -r0
 800bc7c:	0801e398 	stmdaeq	r1, {r3, r4, r7, r8, r9, sp, lr, pc}

0800bc80 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)>:
 800bc80:	b570      	push	{r4, r5, r6, lr}
 800bc82:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bc84:	6141      	str	r1, [r0, #20]
 800bc86:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	6242      	str	r2, [r0, #36]	@ 0x24
 800bc90:	d05f      	beq.n	800bd52 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xd2>
 800bc92:	2bc8      	cmp	r3, #200	@ 0xc8
 800bc94:	d055      	beq.n	800bd42 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xc2>
 800bc96:	f5b3 7fcf 	cmp.w	r3, #414	@ 0x19e
 800bc9a:	dc10      	bgt.n	800bcbe <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x3e>
 800bc9c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800bca0:	db1c      	blt.n	800bcdc <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5c>
 800bca2:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800bca6:	2a0e      	cmp	r2, #14
 800bca8:	d818      	bhi.n	800bcdc <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5c>
 800bcaa:	e8df f002 	tbb	[pc, r2]
 800bcae:	17171772 			@ <UNDEFINED> instruction: 0x17171772
 800bcb2:	17171770 			@ <UNDEFINED> instruction: 0x17171770
 800bcb6:	17171717 			@ <UNDEFINED> instruction: 0x17171717
 800bcba:	00606217 	rsbeq	r6, r0, r7, lsl r2
 800bcbe:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d057      	beq.n	800bd76 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xf6>
 800bcc6:	f240 12f9 	movw	r2, #505	@ 0x1f9
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d04d      	beq.n	800bd6a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xea>
 800bcce:	4e3a      	ldr	r6, [pc, #232]	@ (800bdb8 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x138>)
 800bcd0:	4a3a      	ldr	r2, [pc, #232]	@ (800bdbc <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x13c>)
 800bcd2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800bcd6:	bf08      	it	eq
 800bcd8:	4616      	moveq	r6, r2
 800bcda:	e000      	b.n	800bcde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bcdc:	4e36      	ldr	r6, [pc, #216]	@ (800bdb8 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x138>)
 800bcde:	4838      	ldr	r0, [pc, #224]	@ (800bdc0 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x140>)
 800bce0:	6220      	str	r0, [r4, #32]
 800bce2:	2200      	movs	r2, #0
 800bce4:	6322      	str	r2, [r4, #48]	@ 0x30
 800bce6:	f240 519f 	movw	r1, #1439	@ 0x59f
 800bcea:	e9cd 6600 	strd	r6, r6, [sp]
 800bcee:	4a35      	ldr	r2, [pc, #212]	@ (800bdc4 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x144>)
 800bcf0:	f010 fbc4 	bl	801c47c <snprintf>
 800bcf4:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	@ 0x24
 800bcf8:	60a0      	str	r0, [r4, #8]
 800bcfa:	4933      	ldr	r1, [pc, #204]	@ (800bdc8 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x148>)
 800bcfc:	9003      	str	r0, [sp, #12]
 800bcfe:	9600      	str	r6, [sp, #0]
 800bd00:	6809      	ldr	r1, [r1, #0]
 800bd02:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800bd04:	4a31      	ldr	r2, [pc, #196]	@ (800bdcc <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x14c>)
 800bd06:	3116      	adds	r1, #22
 800bd08:	9101      	str	r1, [sp, #4]
 800bd0a:	4931      	ldr	r1, [pc, #196]	@ (800bdd0 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x150>)
 800bd0c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800bd10:	9102      	str	r1, [sp, #8]
 800bd12:	4628      	mov	r0, r5
 800bd14:	f240 519f 	movw	r1, #1439	@ 0x59f
 800bd18:	f010 fbb0 	bl	801c47c <snprintf>
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800bd20:	4602      	mov	r2, r0
 800bd22:	6860      	ldr	r0, [r4, #4]
 800bd24:	f00b f8d8 	bl	8016ed8 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	68a2      	ldr	r2, [r4, #8]
 800bd2c:	6a21      	ldr	r1, [r4, #32]
 800bd2e:	6860      	ldr	r0, [r4, #4]
 800bd30:	f00b f8d2 	bl	8016ed8 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>
 800bd34:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
 800bd3e:	b004      	add	sp, #16
 800bd40:	bd70      	pop	{r4, r5, r6, pc}
 800bd42:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800bd44:	2901      	cmp	r1, #1
 800bd46:	4615      	mov	r5, r2
 800bd48:	d017      	beq.n	800bd7a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xfa>
 800bd4a:	68a0      	ldr	r0, [r4, #8]
 800bd4c:	4e21      	ldr	r6, [pc, #132]	@ (800bdd4 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x154>)
 800bd4e:	23c8      	movs	r3, #200	@ 0xc8
 800bd50:	e7d3      	b.n	800bcfa <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x7a>
 800bd52:	f7ff fce5 	bl	800b720 <HttpDeamonHandleRequest::ParseRequest()>
 800bd56:	28c8      	cmp	r0, #200	@ 0xc8
 800bd58:	4603      	mov	r3, r0
 800bd5a:	62a0      	str	r0, [r4, #40]	@ 0x28
 800bd5c:	d19b      	bne.n	800bc96 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800bd5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800bd60:	b1cb      	cbz	r3, 800bd96 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x116>
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d01b      	beq.n	800bd9e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x11e>
 800bd66:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800bd68:	e7ef      	b.n	800bd4a <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xca>
 800bd6a:	4e1b      	ldr	r6, [pc, #108]	@ (800bdd8 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x158>)
 800bd6c:	e7b7      	b.n	800bcde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bd6e:	4e1b      	ldr	r6, [pc, #108]	@ (800bddc <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x15c>)
 800bd70:	e7b5      	b.n	800bcde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bd72:	4e1b      	ldr	r6, [pc, #108]	@ (800bde0 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x160>)
 800bd74:	e7b3      	b.n	800bcde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bd76:	4e1b      	ldr	r6, [pc, #108]	@ (800bde4 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x164>)
 800bd78:	e7b1      	b.n	800bcde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bd7a:	f7ff fe9b 	bl	800bab4 <HttpDeamonHandleRequest::HandlePost(bool)>
 800bd7e:	28c8      	cmp	r0, #200	@ 0xc8
 800bd80:	4603      	mov	r3, r0
 800bd82:	62a0      	str	r0, [r4, #40]	@ 0x28
 800bd84:	d187      	bne.n	800bc96 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800bd86:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800bd88:	68a0      	ldr	r0, [r4, #8]
 800bd8a:	4e12      	ldr	r6, [pc, #72]	@ (800bdd4 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x154>)
 800bd8c:	e7b5      	b.n	800bcfa <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x7a>
 800bd8e:	4e16      	ldr	r6, [pc, #88]	@ (800bde8 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x168>)
 800bd90:	e7a5      	b.n	800bcde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bd92:	4e16      	ldr	r6, [pc, #88]	@ (800bdec <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16c>)
 800bd94:	e7a3      	b.n	800bcde <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x5e>
 800bd96:	4620      	mov	r0, r4
 800bd98:	f7ff fd4e 	bl	800b838 <HttpDeamonHandleRequest::HandleGet()>
 800bd9c:	e7ef      	b.n	800bd7e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xfe>
 800bd9e:	2100      	movs	r1, #0
 800bda0:	4620      	mov	r0, r4
 800bda2:	f7ff fe87 	bl	800bab4 <HttpDeamonHandleRequest::HandlePost(bool)>
 800bda6:	28c8      	cmp	r0, #200	@ 0xc8
 800bda8:	4603      	mov	r3, r0
 800bdaa:	62a0      	str	r0, [r4, #40]	@ 0x28
 800bdac:	f47f af73 	bne.w	800bc96 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0x16>
 800bdb0:	68e3      	ldr	r3, [r4, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1d7      	bne.n	800bd66 <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xe6>
 800bdb6:	e7c2      	b.n	800bd3e <HttpDeamonHandleRequest::HandleRequest(unsigned long, char*)+0xbe>
 800bdb8:	0801e408 	stmdaeq	r1, {r3, sl, sp, lr, pc}
 800bdbc:	0801e44c 	stmdaeq	r1, {r2, r3, r6, sl, sp, lr, pc}
 800bdc0:	2000cd34 	andcs	ip, r0, r4, lsr sp
 800bdc4:	0801e4a4 	stmdaeq	r1, {r2, r5, r7, sl, sp, lr, pc}
 800bdc8:	2000e210 	andcs	lr, r0, r0, lsl r2
 800bdcc:	0801e500 	stmdaeq	r1, {r8, sl, sp, lr, pc}
 800bdd0:	0801ec80 	stmdaeq	r1, {r7, sl, fp, sp, lr, pc}
 800bdd4:	0801e4a0 	stmdaeq	r1, {r5, r7, sl, sp, lr, pc}
 800bdd8:	0801e47c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, sp, lr, pc}
 800bddc:	0801e434 	stmdaeq	r1, {r2, r4, r5, sl, sp, lr, pc}
 800bde0:	0801e418 	stmdaeq	r1, {r3, r4, sl, sp, lr, pc}
 800bde4:	0801e464 	stmdaeq	r1, {r2, r5, r6, sl, sp, lr, pc}
 800bde8:	0801e494 	stmdaeq	r1, {r2, r4, r7, sl, sp, lr, pc}
 800bdec:	0801e3fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sp, lr, pc}

0800bdf0 <remoteconfig::json_get_list(char*, unsigned long)>:
 800bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf4:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800be50 <remoteconfig::json_get_list(char*, unsigned long)+0x60>
 800bdf8:	4b12      	ldr	r3, [pc, #72]	@ (800be44 <remoteconfig::json_get_list(char*, unsigned long)+0x54>)
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	f8d8 0000 	ldr.w	r0, [r8]
 800be02:	681c      	ldr	r4, [r3, #0]
 800be04:	460e      	mov	r6, r1
 800be06:	f7fe fef1 	bl	800abec <RemoteConfig::GetStringNode() const>
 800be0a:	4607      	mov	r7, r0
 800be0c:	f8d8 0000 	ldr.w	r0, [r8]
 800be10:	f7fe fef8 	bl	800ac04 <RemoteConfig::GetStringOutput() const>
 800be14:	4b0c      	ldr	r3, [pc, #48]	@ (800be48 <remoteconfig::json_get_list(char*, unsigned long)+0x58>)
 800be16:	7a1a      	ldrb	r2, [r3, #8]
 800be18:	9704      	str	r7, [sp, #16]
 800be1a:	3309      	adds	r3, #9
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	0e23      	lsrs	r3, r4, #24
 800be20:	9302      	str	r3, [sp, #8]
 800be22:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800be2c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	4a06      	ldr	r2, [pc, #24]	@ (800be4c <remoteconfig::json_get_list(char*, unsigned long)+0x5c>)
 800be34:	b2e3      	uxtb	r3, r4
 800be36:	4631      	mov	r1, r6
 800be38:	4628      	mov	r0, r5
 800be3a:	f010 fb1f 	bl	801c47c <snprintf>
 800be3e:	b008      	add	sp, #32
 800be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be44:	2000e230 	andcs	lr, r0, r0, lsr r2
 800be48:	2000cd0c 	andcs	ip, r0, ip, lsl #26
 800be4c:	0801d297 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, ip, lr, pc}
 800be50:	2000cd30 	andcs	ip, r0, r0, lsr sp

0800be54 <remoteconfig::json_get_version(char*, unsigned long)>:
 800be54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800be56:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <remoteconfig::json_get_version(char*, unsigned long)+0x2c>)
 800be58:	9305      	str	r3, [sp, #20]
 800be5a:	2208      	movs	r2, #8
 800be5c:	9204      	str	r2, [sp, #16]
 800be5e:	f1a3 020b 	sub.w	r2, r3, #11
 800be62:	9203      	str	r2, [sp, #12]
 800be64:	220b      	movs	r2, #11
 800be66:	9202      	str	r2, [sp, #8]
 800be68:	3b0e      	subs	r3, #14
 800be6a:	4a06      	ldr	r2, [pc, #24]	@ (800be84 <remoteconfig::json_get_version(char*, unsigned long)+0x30>)
 800be6c:	9201      	str	r2, [sp, #4]
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	4a05      	ldr	r2, [pc, #20]	@ (800be88 <remoteconfig::json_get_version(char*, unsigned long)+0x34>)
 800be72:	2303      	movs	r3, #3
 800be74:	f010 fb02 	bl	801c47c <snprintf>
 800be78:	b007      	add	sp, #28
 800be7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800be7e:	bf00      	nop
 800be80:	2000e3d6 	ldrdcs	lr, [r0], -r6
 800be84:	0801d33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, ip, lr, pc}
 800be88:	0801d2f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r9, ip, lr, pc}

0800be8c <remoteconfig::json_get_uptime(char*, unsigned long)>:
 800be8c:	4b02      	ldr	r3, [pc, #8]	@ (800be98 <remoteconfig::json_get_uptime(char*, unsigned long)+0xc>)
 800be8e:	4a03      	ldr	r2, [pc, #12]	@ (800be9c <remoteconfig::json_get_uptime(char*, unsigned long)+0x10>)
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f010 baf3 	b.w	801c47c <snprintf>
 800be96:	bf00      	nop
 800be98:	2001bcc8 	andcs	fp, r1, r8, asr #25
 800be9c:	0801d34b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, ip, lr, pc}

0800bea0 <remoteconfig::json_get_display(char*, unsigned long)>:
 800bea0:	4b03      	ldr	r3, [pc, #12]	@ (800beb0 <remoteconfig::json_get_display(char*, unsigned long)+0x10>)
 800bea2:	4a04      	ldr	r2, [pc, #16]	@ (800beb4 <remoteconfig::json_get_display(char*, unsigned long)+0x14>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	7d5b      	ldrb	r3, [r3, #21]
 800bea8:	f083 0301 	eor.w	r3, r3, #1
 800beac:	f010 bae6 	b.w	801c47c <snprintf>
 800beb0:	2000e2f4 	strdcs	lr, [r0], -r4
 800beb4:	0801d35a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, ip, lr, pc}

0800beb8 <remoteconfig::json_get_directory(char*, unsigned long)>:
 800beb8:	4a01      	ldr	r2, [pc, #4]	@ (800bec0 <remoteconfig::json_get_directory(char*, unsigned long)+0x8>)
 800beba:	f010 badf 	b.w	801c47c <snprintf>
 800bebe:	bf00      	nop
 800bec0:	0801d369 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, ip, lr, pc}

0800bec4 <get_file_content(char const*, unsigned long&, http::contentTypes&)>:
 800bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec6:	4c0e      	ldr	r4, [pc, #56]	@ (800bf00 <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x3c>)
 800bec8:	230b      	movs	r3, #11
 800beca:	3b01      	subs	r3, #1
 800becc:	d104      	bne.n	800bed8 <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x14>
 800bece:	600b      	str	r3, [r1, #0]
 800bed0:	2105      	movs	r1, #5
 800bed2:	6011      	str	r1, [r2, #0]
 800bed4:	4618      	mov	r0, r3
 800bed6:	e011      	b.n	800befc <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x38>
 800bed8:	6825      	ldr	r5, [r4, #0]
 800beda:	1e47      	subs	r7, r0, #1
 800bedc:	3d01      	subs	r5, #1
 800bede:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800bee2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bee6:	4566      	cmp	r6, ip
 800bee8:	d001      	beq.n	800beee <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x2a>
 800beea:	3410      	adds	r4, #16
 800beec:	e7ed      	b.n	800beca <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x6>
 800beee:	2e00      	cmp	r6, #0
 800bef0:	d1f5      	bne.n	800bede <get_file_content(char const*, unsigned long&, http::contentTypes&)+0x1a>
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	600b      	str	r3, [r1, #0]
 800bef6:	6860      	ldr	r0, [r4, #4]
 800bef8:	68e3      	ldr	r3, [r4, #12]
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befe:	bf00      	nop
 800bf00:	0801ed7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, sp, lr, pc}

0800bf04 <strncpy.isra.0>:
 800bf04:	3901      	subs	r1, #1
 800bf06:	b112      	cbz	r2, 800bf0e <strncpy.isra.0+0xa>
 800bf08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf0c:	b913      	cbnz	r3, 800bf14 <strncpy.isra.0+0x10>
 800bf0e:	4402      	add	r2, r0
 800bf10:	2300      	movs	r3, #0
 800bf12:	e005      	b.n	800bf20 <strncpy.isra.0+0x1c>
 800bf14:	f800 3b01 	strb.w	r3, [r0], #1
 800bf18:	3a01      	subs	r2, #1
 800bf1a:	e7f4      	b.n	800bf06 <strncpy.isra.0+0x2>
 800bf1c:	f800 3b01 	strb.w	r3, [r0], #1
 800bf20:	4290      	cmp	r0, r2
 800bf22:	d1fb      	bne.n	800bf1c <strncpy.isra.0+0x18>
 800bf24:	4770      	bx	lr
	...

0800bf28 <ArtNetNode::Start()>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 800bf2e:	4605      	mov	r5, r0
 800bf30:	f894 38d3 	ldrb.w	r3, [r4, #2259]	@ 0x8d3
 800bf34:	f063 031f 	orn	r3, r3, #31
 800bf38:	f884 38d3 	strb.w	r3, [r4, #2259]	@ 0x8d3
 800bf3c:	4b15      	ldr	r3, [pc, #84]	@ (800bf94 <ArtNetNode::Start()+0x6c>)
 800bf3e:	7e9a      	ldrb	r2, [r3, #26]
 800bf40:	f894 3990 	ldrb.w	r3, [r4, #2448]	@ 0x990
 800bf44:	f002 0202 	and.w	r2, r2, #2
 800bf48:	f003 03e9 	and.w	r3, r3, #233	@ 0xe9
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	4a12      	ldr	r2, [pc, #72]	@ (800bf98 <ArtNetNode::Start()+0x70>)
 800bf50:	f043 0318 	orr.w	r3, r3, #24
 800bf54:	6812      	ldr	r2, [r2, #0]
 800bf56:	f884 3990 	strb.w	r3, [r4, #2448]	@ 0x990
 800bf5a:	7912      	ldrb	r2, [r2, #4]
 800bf5c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800bf60:	f043 0301 	orr.w	r3, r3, #1
 800bf64:	f884 3990 	strb.w	r3, [r4, #2448]	@ 0x990
 800bf68:	2321      	movs	r3, #33	@ 0x21
 800bf6a:	f884 3995 	strb.w	r3, [r4, #2453]	@ 0x995
 800bf6e:	f641 1036 	movw	r0, #6454	@ 0x1936
 800bf72:	f00b f80b 	bl	8016f8c <net::udp_begin(unsigned short)>
 800bf76:	f8c5 0c7c 	str.w	r0, [r5, #3196]	@ 0xc7c
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f002 fa0e 	bl	800e39c <E131Bridge::Start()>
 800bf80:	4b06      	ldr	r3, [pc, #24]	@ (800bf9c <ArtNetNode::Start()+0x74>)
 800bf82:	2102      	movs	r1, #2
 800bf84:	6818      	ldr	r0, [r3, #0]
 800bf86:	f884 1241 	strb.w	r1, [r4, #577]	@ 0x241
 800bf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf8e:	f00d bd07 	b.w	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800bf92:	bf00      	nop
 800bf94:	2000e230 	andcs	lr, r0, r0, lsr r2
 800bf98:	2000e210 	andcs	lr, r0, r0, lsl r2
 800bf9c:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800bfa0 <ArtNetNode::Stop()>:
 800bfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	f002 fa03 	bl	800e3b0 <E131Bridge::Stop()>
 800bfaa:	f504 5793 	add.w	r7, r4, #4704	@ 0x1260
 800bfae:	4e18      	ldr	r6, [pc, #96]	@ (800c010 <ArtNetNode::Stop()+0x70>)
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	f604 48ac 	addw	r8, r4, #3244	@ 0xcac
 800bfb6:	371b      	adds	r7, #27
 800bfb8:	2328      	movs	r3, #40	@ 0x28
 800bfba:	436b      	muls	r3, r5
 800bfbc:	f858 3003 	ldr.w	r3, [r8, r3]
 800bfc0:	b963      	cbnz	r3, 800bfdc <ArtNetNode::Stop()+0x3c>
 800bfc2:	f8d4 0c94 	ldr.w	r0, [r4, #3220]	@ 0xc94
 800bfc6:	b118      	cbz	r0, 800bfd0 <ArtNetNode::Stop()+0x30>
 800bfc8:	6803      	ldr	r3, [r0, #0]
 800bfca:	4629      	mov	r1, r5
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	4798      	blx	r3
 800bfd0:	2324      	movs	r3, #36	@ 0x24
 800bfd2:	436b      	muls	r3, r5
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f8c6 2600 	str.w	r2, [r6, #1536]	@ 0x600
 800bfda:	54fa      	strb	r2, [r7, r3]
 800bfdc:	3501      	adds	r5, #1
 800bfde:	2d22      	cmp	r5, #34	@ 0x22
 800bfe0:	f206 6604 	addw	r6, r6, #1540	@ 0x604
 800bfe4:	d1e8      	bne.n	800bfb8 <ArtNetNode::Stop()+0x18>
 800bfe6:	4b0b      	ldr	r3, [pc, #44]	@ (800c014 <ArtNetNode::Stop()+0x74>)
 800bfe8:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	2100      	movs	r1, #0
 800bff0:	f00d fcd6 	bl	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800bff4:	f894 38d3 	ldrb.w	r3, [r4, #2259]	@ 0x8d3
 800bff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c000:	f884 38d3 	strb.w	r3, [r4, #2259]	@ 0x8d3
 800c004:	2301      	movs	r3, #1
 800c006:	f884 3241 	strb.w	r3, [r4, #577]	@ 0x241
 800c00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c00e:	bf00      	nop
 800c010:	20000080 	andcs	r0, r0, r0, lsl #1
 800c014:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800c018 <ArtNetNode::SetShortName(unsigned long, char const*)>:
 800c018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c01a:	2528      	movs	r5, #40	@ 0x28
 800c01c:	fb05 0501 	mla	r5, r5, r1, r0
 800c020:	460c      	mov	r4, r1
 800c022:	4606      	mov	r6, r0
 800c024:	f605 45b4 	addw	r5, r5, #3252	@ 0xcb4
 800c028:	4611      	mov	r1, r2
 800c02a:	bb4a      	cbnz	r2, 800c080 <ArtNetNode::SetShortName(unsigned long, char const*)+0x68>
 800c02c:	4a17      	ldr	r2, [pc, #92]	@ (800c08c <ArtNetNode::SetShortName(unsigned long, char const*)+0x74>)
 800c02e:	1c63      	adds	r3, r4, #1
 800c030:	2111      	movs	r1, #17
 800c032:	4628      	mov	r0, r5
 800c034:	f010 fa22 	bl	801c47c <snprintf>
 800c038:	2328      	movs	r3, #40	@ 0x28
 800c03a:	fb03 6304 	mla	r3, r3, r4, r6
 800c03e:	2000      	movs	r0, #0
 800c040:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800c044:	f883 0cc5 	strb.w	r0, [r3, #3269]	@ 0xcc5
 800c048:	f896 3241 	ldrb.w	r3, [r6, #577]	@ 0x241
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d115      	bne.n	800c07c <ArtNetNode::SetShortName(unsigned long, char const*)+0x64>
 800c050:	4b0f      	ldr	r3, [pc, #60]	@ (800c090 <ArtNetNode::SetShortName(unsigned long, char const*)+0x78>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	429c      	cmp	r4, r3
 800c056:	d311      	bcc.n	800c07c <ArtNetNode::SetShortName(unsigned long, char const*)+0x64>
 800c058:	1ae4      	subs	r4, r4, r3
 800c05a:	2c03      	cmp	r4, #3
 800c05c:	d80e      	bhi.n	800c07c <ArtNetNode::SetShortName(unsigned long, char const*)+0x64>
 800c05e:	2380      	movs	r3, #128	@ 0x80
 800c060:	2112      	movs	r1, #18
 800c062:	40a3      	lsls	r3, r4
 800c064:	e9cd 1300 	strd	r1, r3, [sp]
 800c068:	9002      	str	r0, [sp, #8]
 800c06a:	480a      	ldr	r0, [pc, #40]	@ (800c094 <ArtNetNode::SetShortName(unsigned long, char const*)+0x7c>)
 800c06c:	fb01 f204 	mul.w	r2, r1, r4
 800c070:	6800      	ldr	r0, [r0, #0]
 800c072:	462b      	mov	r3, r5
 800c074:	3253      	adds	r2, #83	@ 0x53
 800c076:	2119      	movs	r1, #25
 800c078:	f00c fc88 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c07c:	b004      	add	sp, #16
 800c07e:	bd70      	pop	{r4, r5, r6, pc}
 800c080:	2211      	movs	r2, #17
 800c082:	4628      	mov	r0, r5
 800c084:	f7ff ff3e 	bl	800bf04 <strncpy.isra.0>
 800c088:	e7d6      	b.n	800c038 <ArtNetNode::SetShortName(unsigned long, char const*)+0x20>
 800c08a:	bf00      	nop
 800c08c:	0801d491 	stmdaeq	r1, {r0, r4, r7, sl, ip, lr, pc}
 800c090:	20000000 	andcs	r0, r0, r0
 800c094:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800c098 <ArtNetNode::GetLongNameDefault(char*)>:
 800c098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c09a:	4b07      	ldr	r3, [pc, #28]	@ (800c0b8 <ArtNetNode::GetLongNameDefault(char*)+0x20>)
 800c09c:	9302      	str	r3, [sp, #8]
 800c09e:	2304      	movs	r3, #4
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	4b06      	ldr	r3, [pc, #24]	@ (800c0bc <ArtNetNode::GetLongNameDefault(char*)+0x24>)
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	4a06      	ldr	r2, [pc, #24]	@ (800c0c0 <ArtNetNode::GetLongNameDefault(char*)+0x28>)
 800c0a8:	4b06      	ldr	r3, [pc, #24]	@ (800c0c4 <ArtNetNode::GetLongNameDefault(char*)+0x2c>)
 800c0aa:	4608      	mov	r0, r1
 800c0ac:	213f      	movs	r1, #63	@ 0x3f
 800c0ae:	f010 f9e5 	bl	801c47c <snprintf>
 800c0b2:	b005      	add	sp, #20
 800c0b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0b8:	0801d4a5 	stmdaeq	r1, {r0, r2, r5, r7, sl, ip, lr, pc}
 800c0bc:	08020ac6 	stmdaeq	r2, {r1, r2, r6, r7, r9, fp}
 800c0c0:	0801d499 	stmdaeq	r1, {r0, r3, r4, r7, sl, ip, lr, pc}
 800c0c4:	0801d33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, ip, lr, pc}

0800c0c8 <ArtNetNode::SetLongName(char const*)>:
 800c0c8:	b530      	push	{r4, r5, lr}
 800c0ca:	f500 55c7 	add.w	r5, r0, #6368	@ 0x18e0
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	3508      	adds	r5, #8
 800c0d4:	b9e1      	cbnz	r1, 800c110 <ArtNetNode::SetLongName(char const*)+0x48>
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	f7ff ffde 	bl	800c098 <ArtNetNode::GetLongNameDefault(char*)>
 800c0dc:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f894 2241 	ldrb.w	r2, [r4, #577]	@ 0x241
 800c0e6:	f884 3927 	strb.w	r3, [r4, #2343]	@ 0x927
 800c0ea:	2a02      	cmp	r2, #2
 800c0ec:	d115      	bne.n	800c11a <ArtNetNode::SetLongName(char const*)+0x52>
 800c0ee:	9302      	str	r3, [sp, #8]
 800c0f0:	2340      	movs	r3, #64	@ 0x40
 800c0f2:	e9cd 3300 	strd	r3, r3, [sp]
 800c0f6:	480a      	ldr	r0, [pc, #40]	@ (800c120 <ArtNetNode::SetLongName(char const*)+0x58>)
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	2213      	movs	r2, #19
 800c0fe:	2119      	movs	r1, #25
 800c100:	f00c fc44 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c104:	4628      	mov	r0, r5
 800c106:	b005      	add	sp, #20
 800c108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c10c:	f00c ba39 	b.w	8018582 <artnet::display_longname(char const*)>
 800c110:	223f      	movs	r2, #63	@ 0x3f
 800c112:	4628      	mov	r0, r5
 800c114:	f7ff fef6 	bl	800bf04 <strncpy.isra.0>
 800c118:	e7e0      	b.n	800c0dc <ArtNetNode::SetLongName(char const*)+0x14>
 800c11a:	b005      	add	sp, #20
 800c11c:	bd30      	pop	{r4, r5, pc}
 800c11e:	bf00      	nop
 800c120:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800c124 <ArtNetNode::ArtNetNode()>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	4604      	mov	r4, r0
 800c128:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 800c12c:	f002 f8e0 	bl	800e2f0 <E131Bridge::E131Bridge()>
 800c130:	2600      	movs	r6, #0
 800c132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c136:	f8c4 3c7c 	str.w	r3, [r4, #3196]	@ 0xc7c
 800c13a:	f8c4 6c80 	str.w	r6, [r4, #3200]	@ 0xc80
 800c13e:	f8c4 6c88 	str.w	r6, [r4, #3208]	@ 0xc88
 800c142:	f8c4 6c8c 	str.w	r6, [r4, #3212]	@ 0xc8c
 800c146:	f8c4 6c90 	str.w	r6, [r4, #3216]	@ 0xc90
 800c14a:	f8c4 6c94 	str.w	r6, [r4, #3220]	@ 0xc94
 800c14e:	f8c4 6c98 	str.w	r6, [r4, #3224]	@ 0xc98
 800c152:	f8c4 6c9c 	str.w	r6, [r4, #3228]	@ 0xc9c
 800c156:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800c15a:	f8c5 39ac 	str.w	r3, [r5, #2476]	@ 0x9ac
 800c15e:	f8c5 69b0 	str.w	r6, [r5, #2480]	@ 0x9b0
 800c162:	f00a ff13 	bl	8016f8c <net::udp_begin(unsigned short)>
 800c166:	4b56      	ldr	r3, [pc, #344]	@ (800c2c0 <ArtNetNode::ArtNetNode()+0x19c>)
 800c168:	f8c5 09ac 	str.w	r0, [r5, #2476]	@ 0x9ac
 800c16c:	601c      	str	r4, [r3, #0]
 800c16e:	f504 53c5 	add.w	r3, r4, #6304	@ 0x18a0
 800c172:	331c      	adds	r3, #28
 800c174:	f504 52cd 	add.w	r2, r4, #6560	@ 0x19a0
 800c178:	320b      	adds	r2, #11
 800c17a:	4619      	mov	r1, r3
 800c17c:	f801 6b01 	strb.w	r6, [r1], #1
 800c180:	4291      	cmp	r1, r2
 800c182:	d1fb      	bne.n	800c17c <ArtNetNode::ArtNetNode()+0x58>
 800c184:	f504 52c6 	add.w	r2, r4, #6336	@ 0x18c0
 800c188:	494e      	ldr	r1, [pc, #312]	@ (800c2c4 <ArtNetNode::ArtNetNode()+0x1a0>)
 800c18a:	3204      	adds	r2, #4
 800c18c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c190:	f803 0b01 	strb.w	r0, [r3], #1
 800c194:	4293      	cmp	r3, r2
 800c196:	d1f9      	bne.n	800c18c <ArtNetNode::ArtNetNode()+0x68>
 800c198:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 800c19c:	f8a5 38c4 	strh.w	r3, [r5, #2244]	@ 0x8c4
 800c1a0:	f641 1336 	movw	r3, #6454	@ 0x1936
 800c1a4:	f8a5 38ca 	strh.w	r3, [r5, #2250]	@ 0x8ca
 800c1a8:	4b47      	ldr	r3, [pc, #284]	@ (800c2c8 <ArtNetNode::ArtNetNode()+0x1a4>)
 800c1aa:	4948      	ldr	r1, [pc, #288]	@ (800c2cc <ArtNetNode::ArtNetNode()+0x1a8>)
 800c1ac:	781a      	ldrb	r2, [r3, #0]
 800c1ae:	f885 28cc 	strb.w	r2, [r5, #2252]	@ 0x8cc
 800c1b2:	785b      	ldrb	r3, [r3, #1]
 800c1b4:	f885 38cd 	strb.w	r3, [r5, #2253]	@ 0x8cd
 800c1b8:	4b45      	ldr	r3, [pc, #276]	@ (800c2d0 <ArtNetNode::ArtNetNode()+0x1ac>)
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	f885 28d0 	strb.w	r2, [r5, #2256]	@ 0x8d0
 800c1c0:	785b      	ldrb	r3, [r3, #1]
 800c1c2:	f885 38d1 	strb.w	r3, [r5, #2257]	@ 0x8d1
 800c1c6:	4b43      	ldr	r3, [pc, #268]	@ (800c2d4 <ArtNetNode::ArtNetNode()+0x1b0>)
 800c1c8:	785a      	ldrb	r2, [r3, #1]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	f885 28d4 	strb.w	r2, [r5, #2260]	@ 0x8d4
 800c1d0:	f885 38d5 	strb.w	r3, [r5, #2261]	@ 0x8d5
 800c1d4:	f504 52cc 	add.w	r2, r4, #6528	@ 0x1980
 800c1d8:	f504 53cc 	add.w	r3, r4, #6528	@ 0x1980
 800c1dc:	3305      	adds	r3, #5
 800c1de:	320b      	adds	r2, #11
 800c1e0:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c1e4:	f803 0b01 	strb.w	r0, [r3], #1
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d1f9      	bne.n	800c1e0 <ArtNetNode::ArtNetNode()+0xbc>
 800c1ec:	f504 578f 	add.w	r7, r4, #4576	@ 0x11e0
 800c1f0:	2364      	movs	r3, #100	@ 0x64
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	f504 5692 	add.w	r6, r4, #4672	@ 0x1240
 800c1f8:	f885 397e 	strb.w	r3, [r5, #2430]	@ 0x97e
 800c1fc:	361c      	adds	r6, #28
 800c1fe:	463b      	mov	r3, r7
 800c200:	2200      	movs	r2, #0
 800c202:	f803 2b01 	strb.w	r2, [r3], #1
 800c206:	42b3      	cmp	r3, r6
 800c208:	d1fb      	bne.n	800c202 <ArtNetNode::ArtNetNode()+0xde>
 800c20a:	f240 1301 	movw	r3, #257	@ 0x101
 800c20e:	f8a5 3240 	strh.w	r3, [r5, #576]	@ 0x240
 800c212:	f8b5 3989 	ldrh.w	r3, [r5, #2441]	@ 0x989
 800c216:	ba5b      	rev16	r3, r3
 800c218:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c222:	fb02 3311 	mls	r3, r2, r1, r3
 800c226:	f8c5 3204 	str.w	r3, [r5, #516]	@ 0x204
 800c22a:	2100      	movs	r1, #0
 800c22c:	4620      	mov	r0, r4
 800c22e:	f7ff ff4b 	bl	800c0c8 <ArtNetNode::SetLongName(char const*)>
 800c232:	f504 634a 	add.w	r3, r4, #3232	@ 0xca0
 800c236:	461a      	mov	r2, r3
 800c238:	2100      	movs	r1, #0
 800c23a:	f802 1b01 	strb.w	r1, [r2], #1
 800c23e:	4297      	cmp	r7, r2
 800c240:	d1fb      	bne.n	800c23a <ArtNetNode::ArtNetNode()+0x116>
 800c242:	4f25      	ldr	r7, [pc, #148]	@ (800c2d8 <ArtNetNode::ArtNetNode()+0x1b4>)
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	f8c5 21f0 	str.w	r2, [r5, #496]	@ 0x1f0
 800c24a:	f504 528f 	add.w	r2, r4, #4576	@ 0x11e0
 800c24e:	3210      	adds	r2, #16
 800c250:	2102      	movs	r1, #2
 800c252:	4293      	cmp	r3, r2
 800c254:	d12f      	bne.n	800c2b6 <ArtNetNode::ArtNetNode()+0x192>
 800c256:	2500      	movs	r5, #0
 800c258:	4629      	mov	r1, r5
 800c25a:	2200      	movs	r2, #0
 800c25c:	4620      	mov	r0, r4
 800c25e:	3501      	adds	r5, #1
 800c260:	f7ff feda 	bl	800c018 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800c264:	2d22      	cmp	r5, #34	@ 0x22
 800c266:	d1f7      	bne.n	800c258 <ArtNetNode::ArtNetNode()+0x134>
 800c268:	f504 52b9 	add.w	r2, r4, #5920	@ 0x1720
 800c26c:	f504 51b9 	add.w	r1, r4, #5920	@ 0x1720
 800c270:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c274:	4633      	mov	r3, r6
 800c276:	3210      	adds	r2, #16
 800c278:	3104      	adds	r1, #4
 800c27a:	2600      	movs	r6, #0
 800c27c:	f44f 7780 	mov.w	r7, #256	@ 0x100
 800c280:	f04f 0ea0 	mov.w	lr, #160	@ 0xa0
 800c284:	461d      	mov	r5, r3
 800c286:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800c28a:	f805 6b01 	strb.w	r6, [r5], #1
 800c28e:	4285      	cmp	r5, r0
 800c290:	d1fb      	bne.n	800c28a <ArtNetNode::ArtNetNode()+0x166>
 800c292:	811f      	strh	r7, [r3, #8]
 800c294:	829f      	strh	r7, [r3, #20]
 800c296:	f883 e01d 	strb.w	lr, [r3, #29]
 800c29a:	f1a2 030c 	sub.w	r3, r2, #12
 800c29e:	f803 6b01 	strb.w	r6, [r3], #1
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d1fb      	bne.n	800c29e <ArtNetNode::ArtNetNode()+0x17a>
 800c2a6:	4288      	cmp	r0, r1
 800c2a8:	f843 cc0c 	str.w	ip, [r3, #-12]
 800c2ac:	f103 020c 	add.w	r2, r3, #12
 800c2b0:	d104      	bne.n	800c2bc <ArtNetNode::ArtNetNode()+0x198>
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b6:	6099      	str	r1, [r3, #8]
 800c2b8:	3328      	adds	r3, #40	@ 0x28
 800c2ba:	e7ca      	b.n	800c252 <ArtNetNode::ArtNetNode()+0x12e>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	e7e1      	b.n	800c284 <ArtNetNode::ArtNetNode()+0x160>
 800c2c0:	2000d2d4 	ldrdcs	sp, [r0], -r4
 800c2c4:	08020ac6 	stmdaeq	r2, {r1, r2, r6, r7, r9, fp}
 800c2c8:	08020b8b 	stmdaeq	r2, {r0, r1, r3, r7, r8, r9, fp}
 800c2cc:	2000e244 	andcs	lr, r0, r4, asr #4
 800c2d0:	08020b87 	stmdaeq	r2, {r0, r1, r2, r7, r8, r9, fp}
 800c2d4:	08020b89 	stmdaeq	r2, {r0, r3, r7, r8, r9, fp}
 800c2d8:	2000e230 	andcs	lr, r0, r0, lsr r2

0800c2dc <ArtNetNode::SetNetworkDataLossCondition()>:
 800c2dc:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f500 5493 	add.w	r4, r0, #4704	@ 0x1260
 800c2e8:	f500 55b9 	add.w	r5, r0, #5920	@ 0x1720
 800c2ec:	f882 3246 	strb.w	r3, [r2, #582]	@ 0x246
 800c2f0:	f882 3245 	strb.w	r3, [r2, #581]	@ 0x245
 800c2f4:	3508      	adds	r5, #8
 800c2f6:	4623      	mov	r3, r4
 800c2f8:	6819      	ldr	r1, [r3, #0]
 800c2fa:	68de      	ldr	r6, [r3, #12]
 800c2fc:	42f1      	cmn	r1, r6
 800c2fe:	d103      	bne.n	800c308 <ArtNetNode::SetNetworkDataLossCondition()+0x2c>
 800c300:	3324      	adds	r3, #36	@ 0x24
 800c302:	42ab      	cmp	r3, r5
 800c304:	d1f8      	bne.n	800c2f8 <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 800c306:	bd70      	pop	{r4, r5, r6, pc}
 800c308:	f892 3995 	ldrb.w	r3, [r2, #2453]	@ 0x995
 800c30c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c310:	2b40      	cmp	r3, #64	@ 0x40
 800c312:	d00e      	beq.n	800c332 <ArtNetNode::SetNetworkDataLossCondition()+0x56>
 800c314:	d901      	bls.n	800c31a <ArtNetNode::SetNetworkDataLossCondition()+0x3e>
 800c316:	2b80      	cmp	r3, #128	@ 0x80
 800c318:	d012      	beq.n	800c340 <ArtNetNode::SetNetworkDataLossCondition()+0x64>
 800c31a:	4b0c      	ldr	r3, [pc, #48]	@ (800c34c <ArtNetNode::SetNetworkDataLossCondition()+0x70>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	6022      	str	r2, [r4, #0]
 800c320:	60e2      	str	r2, [r4, #12]
 800c322:	3424      	adds	r4, #36	@ 0x24
 800c324:	42ac      	cmp	r4, r5
 800c326:	f8c3 2600 	str.w	r2, [r3, #1536]	@ 0x600
 800c32a:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 800c32e:	d1f6      	bne.n	800c31e <ArtNetNode::SetNetworkDataLossCondition()+0x42>
 800c330:	e7e9      	b.n	800c306 <ArtNetNode::SetNetworkDataLossCondition()+0x2a>
 800c332:	f8d0 0c94 	ldr.w	r0, [r0, #3220]	@ 0xc94
 800c336:	6803      	ldr	r3, [r0, #0]
 800c338:	2101      	movs	r1, #1
 800c33a:	6a1b      	ldr	r3, [r3, #32]
 800c33c:	4798      	blx	r3
 800c33e:	e7ec      	b.n	800c31a <ArtNetNode::SetNetworkDataLossCondition()+0x3e>
 800c340:	f8d0 0c94 	ldr.w	r0, [r0, #3220]	@ 0xc94
 800c344:	6803      	ldr	r3, [r0, #0]
 800c346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c348:	4798      	blx	r3
 800c34a:	e7e6      	b.n	800c31a <ArtNetNode::SetNetworkDataLossCondition()+0x3e>
 800c34c:	20000080 	andcs	r0, r0, r0, lsl #1

0800c350 <ArtNetNode::Process(unsigned long)>:
 800c350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c352:	f8d0 3c88 	ldr.w	r3, [r0, #3208]	@ 0xc88
 800c356:	4604      	mov	r4, r0
 800c358:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 800c35c:	2900      	cmp	r1, #0
 800c35e:	d144      	bne.n	800c3ea <ArtNetNode::Process(unsigned long)+0x9a>
 800c360:	f8d0 2c8c 	ldr.w	r2, [r0, #3212]	@ 0xc8c
 800c364:	1a9b      	subs	r3, r3, r2
 800c366:	f242 720f 	movw	r2, #9999	@ 0x270f
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d908      	bls.n	800c380 <ArtNetNode::Process(unsigned long)+0x30>
 800c36e:	f7ff ffb5 	bl	800c2dc <ArtNetNode::SetNetworkDataLossCondition()>
 800c372:	f895 324a 	ldrb.w	r3, [r5, #586]	@ 0x24a
 800c376:	f023 0302 	bic.w	r3, r3, #2
 800c37a:	f885 324a 	strb.w	r3, [r5, #586]	@ 0x24a
 800c37e:	e002      	b.n	800c386 <ArtNetNode::Process(unsigned long)+0x36>
 800c380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c384:	d2f5      	bcs.n	800c372 <ArtNetNode::Process(unsigned long)+0x22>
 800c386:	f895 38d3 	ldrb.w	r3, [r5, #2259]	@ 0x8d3
 800c38a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c38e:	2bc0      	cmp	r3, #192	@ 0xc0
 800c390:	d10b      	bne.n	800c3aa <ArtNetNode::Process(unsigned long)+0x5a>
 800c392:	4b66      	ldr	r3, [pc, #408]	@ (800c52c <ArtNetNode::Process(unsigned long)+0x1dc>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	2b04      	cmp	r3, #4
 800c39a:	d006      	beq.n	800c3aa <ArtNetNode::Process(unsigned long)+0x5a>
 800c39c:	f895 324a 	ldrb.w	r3, [r5, #586]	@ 0x24a
 800c3a0:	b163      	cbz	r3, 800c3bc <ArtNetNode::Process(unsigned long)+0x6c>
 800c3a2:	2103      	movs	r1, #3
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f001 ff6f 	bl	800e288 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)>
 800c3aa:	f504 5690 	add.w	r6, r4, #4608	@ 0x1200
 800c3ae:	f504 5792 	add.w	r7, r4, #4672	@ 0x1240
 800c3b2:	361c      	adds	r6, #28
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	42b7      	cmp	r7, r6
 800c3b8:	d102      	bne.n	800c3c0 <ArtNetNode::Process(unsigned long)+0x70>
 800c3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3bc:	2102      	movs	r1, #2
 800c3be:	e7f1      	b.n	800c3a4 <ArtNetNode::Process(unsigned long)+0x54>
 800c3c0:	f856 2c0c 	ldr.w	r2, [r6, #-12]
 800c3c4:	b17a      	cbz	r2, 800c3e6 <ArtNetNode::Process(unsigned long)+0x96>
 800c3c6:	f8d4 3c88 	ldr.w	r3, [r4, #3208]	@ 0xc88
 800c3ca:	1a9b      	subs	r3, r3, r2
 800c3cc:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d908      	bls.n	800c3e6 <ArtNetNode::Process(unsigned long)+0x96>
 800c3d4:	4633      	mov	r3, r6
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	f843 1d0c 	str.w	r1, [r3, #-12]!
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800c3e2:	f001 f85d 	bl	800d4a0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800c3e6:	360c      	adds	r6, #12
 800c3e8:	e7e5      	b.n	800c3b6 <ArtNetNode::Process(unsigned long)+0x66>
 800c3ea:	f895 2245 	ldrb.w	r2, [r5, #581]	@ 0x245
 800c3ee:	f8c0 3c8c 	str.w	r3, [r0, #3212]	@ 0xc8c
 800c3f2:	b142      	cbz	r2, 800c406 <ArtNetNode::Process(unsigned long)+0xb6>
 800c3f4:	f8d5 220c 	ldr.w	r2, [r5, #524]	@ 0x20c
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800c3fe:	bf24      	itt	cs
 800c400:	2300      	movcs	r3, #0
 800c402:	f885 3245 	strbcs.w	r3, [r5, #581]	@ 0x245
 800c406:	290b      	cmp	r1, #11
 800c408:	d91f      	bls.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c40a:	f8d4 3c80 	ldr.w	r3, [r4, #3200]	@ 0xc80
 800c40e:	7a9a      	ldrb	r2, [r3, #10]
 800c410:	b9da      	cbnz	r2, 800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c412:	7ada      	ldrb	r2, [r3, #11]
 800c414:	2a0e      	cmp	r2, #14
 800c416:	d118      	bne.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c418:	4945      	ldr	r1, [pc, #276]	@ (800c530 <ArtNetNode::Process(unsigned long)+0x1e0>)
 800c41a:	1e5a      	subs	r2, r3, #1
 800c41c:	1dd8      	adds	r0, r3, #7
 800c41e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800c422:	f811 6b01 	ldrb.w	r6, [r1], #1
 800c426:	42b7      	cmp	r7, r6
 800c428:	d10f      	bne.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c42a:	4282      	cmp	r2, r0
 800c42c:	d1f7      	bne.n	800c41e <ArtNetNode::Process(unsigned long)+0xce>
 800c42e:	891b      	ldrh	r3, [r3, #8]
 800c430:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c434:	d068      	beq.n	800c508 <ArtNetNode::Process(unsigned long)+0x1b8>
 800c436:	d838      	bhi.n	800c4aa <ArtNetNode::Process(unsigned long)+0x15a>
 800c438:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c43c:	d042      	beq.n	800c4c4 <ArtNetNode::Process(unsigned long)+0x174>
 800c43e:	f5b3 4fa4 	cmp.w	r3, #20992	@ 0x5200
 800c442:	d04b      	beq.n	800c4dc <ArtNetNode::Process(unsigned long)+0x18c>
 800c444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c448:	d06a      	beq.n	800c520 <ArtNetNode::Process(unsigned long)+0x1d0>
 800c44a:	f895 38d3 	ldrb.w	r3, [r5, #2259]	@ 0x8d3
 800c44e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c452:	2bc0      	cmp	r3, #192	@ 0xc0
 800c454:	d10c      	bne.n	800c470 <ArtNetNode::Process(unsigned long)+0x120>
 800c456:	4b35      	ldr	r3, [pc, #212]	@ (800c52c <ArtNetNode::Process(unsigned long)+0x1dc>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d007      	beq.n	800c470 <ArtNetNode::Process(unsigned long)+0x120>
 800c460:	f895 324a 	ldrb.w	r3, [r5, #586]	@ 0x24a
 800c464:	2b00      	cmp	r3, #0
 800c466:	d05f      	beq.n	800c528 <ArtNetNode::Process(unsigned long)+0x1d8>
 800c468:	2103      	movs	r1, #3
 800c46a:	4620      	mov	r0, r4
 800c46c:	f001 ff0c 	bl	800e288 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)>
 800c470:	f504 5690 	add.w	r6, r4, #4608	@ 0x1200
 800c474:	f504 5792 	add.w	r7, r4, #4672	@ 0x1240
 800c478:	361c      	adds	r6, #28
 800c47a:	370c      	adds	r7, #12
 800c47c:	42b7      	cmp	r7, r6
 800c47e:	d09c      	beq.n	800c3ba <ArtNetNode::Process(unsigned long)+0x6a>
 800c480:	f856 2c0c 	ldr.w	r2, [r6, #-12]
 800c484:	b17a      	cbz	r2, 800c4a6 <ArtNetNode::Process(unsigned long)+0x156>
 800c486:	f8d4 3c88 	ldr.w	r3, [r4, #3208]	@ 0xc88
 800c48a:	1a9b      	subs	r3, r3, r2
 800c48c:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 800c490:	4293      	cmp	r3, r2
 800c492:	d908      	bls.n	800c4a6 <ArtNetNode::Process(unsigned long)+0x156>
 800c494:	4633      	mov	r3, r6
 800c496:	2100      	movs	r1, #0
 800c498:	f843 1d0c 	str.w	r1, [r3, #-12]!
 800c49c:	4620      	mov	r0, r4
 800c49e:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800c4a2:	f000 fffd 	bl	800d4a0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800c4a6:	360c      	adds	r6, #12
 800c4a8:	e7e8      	b.n	800c47c <ArtNetNode::Process(unsigned long)+0x12c>
 800c4aa:	f5b3 4f19 	cmp.w	r3, #39168	@ 0x9900
 800c4ae:	d033      	beq.n	800c518 <ArtNetNode::Process(unsigned long)+0x1c8>
 800c4b0:	f5b3 4f78 	cmp.w	r3, #63488	@ 0xf800
 800c4b4:	d02c      	beq.n	800c510 <ArtNetNode::Process(unsigned long)+0x1c0>
 800c4b6:	f5b3 4f18 	cmp.w	r3, #38912	@ 0x9800
 800c4ba:	d1c6      	bne.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f001 f93e 	bl	800d73e <ArtNetNode::HandleTimeSync()>
 800c4c2:	e7c2      	b.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c4c4:	f8d4 3c94 	ldr.w	r3, [r4, #3220]	@ 0xc94
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0be      	beq.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fb51 	bl	800cb74 <ArtNetNode::HandleDmx()>
 800c4d2:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	@ 0xc84
 800c4d6:	f8c5 3208 	str.w	r3, [r5, #520]	@ 0x208
 800c4da:	e7b6      	b.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c4dc:	f8d4 3c94 	ldr.w	r3, [r4, #3220]	@ 0xc94
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d0b2      	beq.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c4e4:	f8d5 2208 	ldr.w	r2, [r5, #520]	@ 0x208
 800c4e8:	f8d4 3c84 	ldr.w	r3, [r4, #3204]	@ 0xc84
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d1ac      	bne.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c4f0:	f895 3246 	ldrb.w	r3, [r5, #582]	@ 0x246
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1a8      	bne.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <ArtNetNode::Process(unsigned long)+0x1e4>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f8c5 320c 	str.w	r3, [r5, #524]	@ 0x20c
 800c500:	4620      	mov	r0, r4
 800c502:	f001 f8e1 	bl	800d6c8 <ArtNetNode::HandleSync()>
 800c506:	e7a0      	b.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 f9af 	bl	800c86c <ArtNetNode::HandleAddress()>
 800c50e:	e79c      	b.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c510:	4620      	mov	r0, r4
 800c512:	f000 fe9d 	bl	800d250 <ArtNetNode::HandleIpProg()>
 800c516:	e798      	b.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c518:	4620      	mov	r0, r4
 800c51a:	f001 fe03 	bl	800e124 <ArtNetNode::HandleTrigger()>
 800c51e:	e794      	b.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c520:	4620      	mov	r0, r4
 800c522:	f001 f86d 	bl	800d600 <ArtNetNode::HandlePoll()>
 800c526:	e790      	b.n	800c44a <ArtNetNode::Process(unsigned long)+0xfa>
 800c528:	2102      	movs	r1, #2
 800c52a:	e79e      	b.n	800c46a <ArtNetNode::Process(unsigned long)+0x11a>
 800c52c:	2000e3e0 	andcs	lr, r0, r0, ror #7
 800c530:	08020ac6 	stmdaeq	r2, {r1, r2, r6, r7, r9, fp}
 800c534:	2001bcd0 	ldrdcs	fp, [r1], -r0

0800c538 <lightset::Data::IOutputClear(LightSet*, unsigned long)>:
 800c538:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c53a:	4603      	mov	r3, r0
 800c53c:	f240 6404 	movw	r4, #1540	@ 0x604
 800c540:	fb04 3402 	mla	r4, r4, r2, r3
 800c544:	4608      	mov	r0, r1
 800c546:	4611      	mov	r1, r2
 800c548:	f504 6280 	add.w	r2, r4, #1024	@ 0x400
 800c54c:	4615      	mov	r5, r2
 800c54e:	f504 64c0 	add.w	r4, r4, #1536	@ 0x600
 800c552:	2600      	movs	r6, #0
 800c554:	f805 6b01 	strb.w	r6, [r5], #1
 800c558:	42ac      	cmp	r4, r5
 800c55a:	d1fb      	bne.n	800c554 <lightset::Data::IOutputClear(LightSet*, unsigned long)+0x1c>
 800c55c:	f240 6404 	movw	r4, #1540	@ 0x604
 800c560:	fb04 3401 	mla	r4, r4, r1, r3
 800c564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c568:	f8c4 3600 	str.w	r3, [r4, #1536]	@ 0x600
 800c56c:	2501      	movs	r5, #1
 800c56e:	6804      	ldr	r4, [r0, #0]
 800c570:	9500      	str	r5, [sp, #0]
 800c572:	6924      	ldr	r4, [r4, #16]
 800c574:	47a0      	blx	r4
 800c576:	b002      	add	sp, #8
 800c578:	bd70      	pop	{r4, r5, r6, pc}

0800c57a <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>:
 800c57a:	2328      	movs	r3, #40	@ 0x28
 800c57c:	fb03 0202 	mla	r2, r3, r2, r0
 800c580:	f001 010f 	and.w	r1, r1, #15
 800c584:	f892 3ca3 	ldrb.w	r3, [r2, #3235]	@ 0xca3
 800c588:	f892 2ca4 	ldrb.w	r2, [r2, #3236]	@ 0xca4
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	0112      	lsls	r2, r2, #4
 800c590:	b2d2      	uxtb	r2, r2
 800c592:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 800c596:	4313      	orrs	r3, r2
 800c598:	ea43 0001 	orr.w	r0, r3, r1
 800c59c:	4770      	bx	lr
	...

0800c5a0 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)>:
 800c5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a4:	4b18      	ldr	r3, [pc, #96]	@ (800c608 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x68>)
 800c5a6:	681c      	ldr	r4, [r3, #0]
 800c5a8:	4284      	cmp	r4, r0
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	460d      	mov	r5, r1
 800c5ae:	d827      	bhi.n	800c600 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x60>
 800c5b0:	1b04      	subs	r4, r0, r4
 800c5b2:	2c03      	cmp	r4, #3
 800c5b4:	d824      	bhi.n	800c600 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x60>
 800c5b6:	f04f 080f 	mov.w	r8, #15
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	e9cd 8600 	strd	r8, r6, [sp]
 800c5c0:	4f12      	ldr	r7, [pc, #72]	@ (800c60c <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)+0x6c>)
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	6838      	ldr	r0, [r7, #0]
 800c5c6:	f10d 0216 	add.w	r2, sp, #22
 800c5ca:	2119      	movs	r1, #25
 800c5cc:	f00c fa04 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800c5d0:	0064      	lsls	r4, r4, #1
 800c5d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800c5d6:	2203      	movs	r2, #3
 800c5d8:	40a2      	lsls	r2, r4
 800c5da:	f005 0503 	and.w	r5, r5, #3
 800c5de:	ea23 0302 	bic.w	r3, r3, r2
 800c5e2:	40a5      	lsls	r5, r4
 800c5e4:	432b      	orrs	r3, r5
 800c5e6:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800c5ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	6838      	ldr	r0, [r7, #0]
 800c5f4:	f10d 0316 	add.w	r3, sp, #22
 800c5f8:	4642      	mov	r2, r8
 800c5fa:	2119      	movs	r1, #25
 800c5fc:	f00c f9c6 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c600:	b006      	add	sp, #24
 800c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c606:	bf00      	nop
 800c608:	20000000 	andcs	r0, r0, r0
 800c60c:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800c610 <ArtNetStore::SaveUniverse(unsigned long)>:
 800c610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c612:	4b13      	ldr	r3, [pc, #76]	@ (800c660 <ArtNetStore::SaveUniverse(unsigned long)+0x50>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2228      	movs	r2, #40	@ 0x28
 800c618:	fb02 3300 	mla	r3, r2, r0, r3
 800c61c:	f8d3 2ca8 	ldr.w	r2, [r3, #3240]	@ 0xca8
 800c620:	2a02      	cmp	r2, #2
 800c622:	d01a      	beq.n	800c65a <ArtNetStore::SaveUniverse(unsigned long)+0x4a>
 800c624:	f8b3 3ca0 	ldrh.w	r3, [r3, #3232]	@ 0xca0
 800c628:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c62c:	4b0d      	ldr	r3, [pc, #52]	@ (800c664 <ArtNetStore::SaveUniverse(unsigned long)+0x54>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4283      	cmp	r3, r0
 800c632:	d812      	bhi.n	800c65a <ArtNetStore::SaveUniverse(unsigned long)+0x4a>
 800c634:	1ac0      	subs	r0, r0, r3
 800c636:	2803      	cmp	r0, #3
 800c638:	d80f      	bhi.n	800c65a <ArtNetStore::SaveUniverse(unsigned long)+0x4a>
 800c63a:	2300      	movs	r3, #0
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	2302      	movs	r3, #2
 800c640:	0042      	lsls	r2, r0, #1
 800c642:	fa03 f000 	lsl.w	r0, r3, r0
 800c646:	e9cd 3000 	strd	r3, r0, [sp]
 800c64a:	4807      	ldr	r0, [pc, #28]	@ (800c668 <ArtNetStore::SaveUniverse(unsigned long)+0x58>)
 800c64c:	f10d 0316 	add.w	r3, sp, #22
 800c650:	6800      	ldr	r0, [r0, #0]
 800c652:	3205      	adds	r2, #5
 800c654:	2119      	movs	r1, #25
 800c656:	f00c f999 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c65a:	b007      	add	sp, #28
 800c65c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c660:	2000d2d4 	ldrdcs	sp, [r0], -r4
 800c664:	20000000 	andcs	r0, r0, r0
 800c668:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800c66c <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>:
 800c66c:	2a02      	cmp	r2, #2
 800c66e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c672:	4605      	mov	r5, r0
 800c674:	460c      	mov	r4, r1
 800c676:	4690      	mov	r8, r2
 800c678:	461f      	mov	r7, r3
 800c67a:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 800c67e:	d124      	bne.n	800c6ca <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x5e>
 800c680:	2328      	movs	r3, #40	@ 0x28
 800c682:	fb03 0301 	mla	r3, r3, r1, r0
 800c686:	2202      	movs	r2, #2
 800c688:	f8d3 3ca8 	ldr.w	r3, [r3, #3240]	@ 0xca8
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	bf02      	ittt	eq
 800c690:	f896 324b 	ldrbeq.w	r3, [r6, #587]	@ 0x24b
 800c694:	f103 33ff 	addeq.w	r3, r3, #4294967295	@ 0xffffffff
 800c698:	f886 324b 	strbeq.w	r3, [r6, #587]	@ 0x24b
 800c69c:	2328      	movs	r3, #40	@ 0x28
 800c69e:	fb03 0301 	mla	r3, r3, r1, r0
 800c6a2:	f8c3 2ca8 	str.w	r2, [r3, #3240]	@ 0xca8
 800c6a6:	4642      	mov	r2, r8
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f001 fdbd 	bl	800e22a <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)>
 800c6b0:	f896 3241 	ldrb.w	r3, [r6, #577]	@ 0x241
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d12f      	bne.n	800c718 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0xac>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f7ff ffa9 	bl	800c610 <ArtNetStore::SaveUniverse(unsigned long)>
 800c6be:	4639      	mov	r1, r7
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c6:	f00b bf5d 	b.w	8018584 <artnet::display_universe_switch(unsigned long, unsigned char)>
 800c6ca:	2a01      	cmp	r2, #1
 800c6cc:	d1eb      	bne.n	800c6a6 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x3a>
 800c6ce:	2328      	movs	r3, #40	@ 0x28
 800c6d0:	fb03 0301 	mla	r3, r3, r1, r0
 800c6d4:	f8d3 2ca8 	ldr.w	r2, [r3, #3240]	@ 0xca8
 800c6d8:	2a01      	cmp	r2, #1
 800c6da:	d00a      	beq.n	800c6f2 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x86>
 800c6dc:	f896 324b 	ldrb.w	r3, [r6, #587]	@ 0x24b
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	f886 324b 	strb.w	r3, [r6, #587]	@ 0x24b
 800c6e6:	b922      	cbnz	r2, 800c6f2 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x86>
 800c6e8:	f896 324c 	ldrb.w	r3, [r6, #588]	@ 0x24c
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	f886 324c 	strb.w	r3, [r6, #588]	@ 0x24c
 800c6f2:	f04f 0928 	mov.w	r9, #40	@ 0x28
 800c6f6:	fb09 5904 	mla	r9, r9, r4, r5
 800c6fa:	f007 030f 	and.w	r3, r7, #15
 800c6fe:	f889 3ca2 	strb.w	r3, [r9, #3234]	@ 0xca2
 800c702:	4622      	mov	r2, r4
 800c704:	4639      	mov	r1, r7
 800c706:	4628      	mov	r0, r5
 800c708:	f7ff ff37 	bl	800c57a <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>
 800c70c:	2301      	movs	r3, #1
 800c70e:	f8a9 0ca0 	strh.w	r0, [r9, #3232]	@ 0xca0
 800c712:	f8c9 3ca8 	str.w	r3, [r9, #3240]	@ 0xca8
 800c716:	e7c6      	b.n	800c6a6 <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)+0x3a>
 800c718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c71c <ArtNetNode::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>:
 800c71c:	b430      	push	{r4, r5}
 800c71e:	2428      	movs	r4, #40	@ 0x28
 800c720:	fb04 0401 	mla	r4, r4, r1, r0
 800c724:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800c728:	f884 5ca3 	strb.w	r5, [r4, #3235]	@ 0xca3
 800c72c:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800c730:	f884 5ca4 	strb.w	r5, [r4, #3236]	@ 0xca4
 800c734:	bc30      	pop	{r4, r5}
 800c736:	f003 030f 	and.w	r3, r3, #15
 800c73a:	f7ff bf97 	b.w	800c66c <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>

0800c73e <ArtNetNode::SetSubnetSwitch(unsigned long, unsigned char)>:
 800c73e:	b570      	push	{r4, r5, r6, lr}
 800c740:	2628      	movs	r6, #40	@ 0x28
 800c742:	fb06 0601 	mla	r6, r6, r1, r0
 800c746:	4604      	mov	r4, r0
 800c748:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800c74c:	f886 2ca4 	strb.w	r2, [r6, #3236]	@ 0xca4
 800c750:	460d      	mov	r5, r1
 800c752:	460a      	mov	r2, r1
 800c754:	f8b6 1ca0 	ldrh.w	r1, [r6, #3232]	@ 0xca0
 800c758:	f7ff ff0f 	bl	800c57a <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>
 800c75c:	f894 3241 	ldrb.w	r3, [r4, #577]	@ 0x241
 800c760:	f8a6 0ca0 	strh.w	r0, [r6, #3232]	@ 0xca0
 800c764:	2b02      	cmp	r3, #2
 800c766:	d102      	bne.n	800c76e <ArtNetNode::SetSubnetSwitch(unsigned long, unsigned char)+0x30>
 800c768:	4628      	mov	r0, r5
 800c76a:	f7ff ff51 	bl	800c610 <ArtNetStore::SaveUniverse(unsigned long)>
 800c76e:	bd70      	pop	{r4, r5, r6, pc}

0800c770 <ArtNetNode::SetNetSwitch(unsigned long, unsigned char)>:
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	2628      	movs	r6, #40	@ 0x28
 800c774:	fb06 0601 	mla	r6, r6, r1, r0
 800c778:	4604      	mov	r4, r0
 800c77a:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800c77e:	f886 2ca3 	strb.w	r2, [r6, #3235]	@ 0xca3
 800c782:	460d      	mov	r5, r1
 800c784:	460a      	mov	r2, r1
 800c786:	f8b6 1ca0 	ldrh.w	r1, [r6, #3232]	@ 0xca0
 800c78a:	f7ff fef6 	bl	800c57a <ArtNetNode::MakePortAddress(unsigned short, unsigned long)>
 800c78e:	f894 3241 	ldrb.w	r3, [r4, #577]	@ 0x241
 800c792:	f8a6 0ca0 	strh.w	r0, [r6, #3232]	@ 0xca0
 800c796:	2b02      	cmp	r3, #2
 800c798:	d102      	bne.n	800c7a0 <ArtNetNode::SetNetSwitch(unsigned long, unsigned char)+0x30>
 800c79a:	4628      	mov	r0, r5
 800c79c:	f7ff ff38 	bl	800c610 <ArtNetStore::SaveUniverse(unsigned long)>
 800c7a0:	bd70      	pop	{r4, r5, r6, pc}

0800c7a2 <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>:
 800c7a2:	b538      	push	{r3, r4, r5, lr}
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	2124      	movs	r1, #36	@ 0x24
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	4615      	mov	r5, r2
 800c7ac:	fb01 0004 	mla	r0, r1, r4, r0
 800c7b0:	f241 2278 	movw	r2, #4728	@ 0x1278
 800c7b4:	2d01      	cmp	r5, #1
 800c7b6:	5c82      	ldrb	r2, [r0, r2]
 800c7b8:	fb01 3104 	mla	r1, r1, r4, r3
 800c7bc:	f241 2078 	movw	r0, #4728	@ 0x1278
 800c7c0:	bf0c      	ite	eq
 800c7c2:	f042 0202 	orreq.w	r2, r2, #2
 800c7c6:	f002 02fd 	andne.w	r2, r2, #253	@ 0xfd
 800c7ca:	540a      	strb	r2, [r1, r0]
 800c7cc:	2244      	movs	r2, #68	@ 0x44
 800c7ce:	fb02 3204 	mla	r2, r2, r4, r3
 800c7d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7d6:	f8c2 5200 	str.w	r5, [r2, #512]	@ 0x200
 800c7da:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d109      	bne.n	800c7f6 <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)+0x54>
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f7ff fedb 	bl	800c5a0 <ArtNetStore::SaveMergeMode(unsigned long, lightset::MergeMode)>
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7f2:	f00b becd 	b.w	8018590 <artnet::display_merge_mode(unsigned long, lightset::MergeMode)>
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}

0800c7f8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800c7f8:	b530      	push	{r4, r5, lr}
 800c7fa:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 800c7fe:	f1a1 0408 	sub.w	r4, r1, #8
 800c802:	f892 3995 	ldrb.w	r3, [r2, #2453]	@ 0x995
 800c806:	b087      	sub	sp, #28
 800c808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c80c:	2c04      	cmp	r4, #4
 800c80e:	d806      	bhi.n	800c81e <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800c810:	e8df f004 	tbb	[pc, r4]
 800c814:	05240305 	streq	r0, [r4, #-773]!	@ 0xfffffcfb
 800c818:	f0430005 			@ <UNDEFINED> instruction: 0xf0430005
 800c81c:	0340      	lsls	r0, r0, #13
 800c81e:	f882 3995 	strb.w	r3, [r2, #2453]	@ 0x995
 800c822:	f892 3241 	ldrb.w	r3, [r2, #577]	@ 0x241
 800c826:	f001 0403 	and.w	r4, r1, #3
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	6244      	str	r4, [r0, #36]	@ 0x24
 800c82e:	d118      	bne.n	800c862 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x6a>
 800c830:	2320      	movs	r3, #32
 800c832:	2200      	movs	r2, #0
 800c834:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c838:	480b      	ldr	r0, [pc, #44]	@ (800c868 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x70>)
 800c83a:	f88d 4017 	strb.w	r4, [sp, #23]
 800c83e:	2301      	movs	r3, #1
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	6800      	ldr	r0, [r0, #0]
 800c844:	f10d 0317 	add.w	r3, sp, #23
 800c848:	2212      	movs	r2, #18
 800c84a:	2119      	movs	r1, #25
 800c84c:	f00c f89e 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800c850:	4620      	mov	r0, r4
 800c852:	b007      	add	sp, #28
 800c854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c858:	f00b bea6 	b.w	80185a8 <artnet::display_failsafe(unsigned char)>
 800c85c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c860:	e7dd      	b.n	800c81e <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800c862:	b007      	add	sp, #28
 800c864:	bd30      	pop	{r4, r5, pc}
 800c866:	bf00      	nop
 800c868:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800c86c <ArtNetNode::HandleAddress()>:
 800c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c870:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
 800c874:	f8d0 6c80 	ldr.w	r6, [r0, #3200]	@ 0xc80
 800c878:	2301      	movs	r3, #1
 800c87a:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 800c87e:	7b75      	ldrb	r5, [r6, #13]
 800c880:	4604      	mov	r4, r0
 800c882:	b105      	cbz	r5, 800c886 <ArtNetNode::HandleAddress()+0x1a>
 800c884:	3d01      	subs	r5, #1
 800c886:	7bb3      	ldrb	r3, [r6, #14]
 800c888:	b143      	cbz	r3, 800c89c <ArtNetNode::HandleAddress()+0x30>
 800c88a:	f106 020e 	add.w	r2, r6, #14
 800c88e:	4629      	mov	r1, r5
 800c890:	4620      	mov	r0, r4
 800c892:	f7ff fbc1 	bl	800c018 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800c896:	2306      	movs	r3, #6
 800c898:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 800c89c:	f896 3020 	ldrb.w	r3, [r6, #32]
 800c8a0:	b13b      	cbz	r3, 800c8b2 <ArtNetNode::HandleAddress()+0x46>
 800c8a2:	f106 0120 	add.w	r1, r6, #32
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7ff fc0e 	bl	800c0c8 <ArtNetNode::SetLongName(char const*)>
 800c8ac:	2307      	movs	r3, #7
 800c8ae:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 800c8b2:	f896 2068 	ldrb.w	r2, [r6, #104]	@ 0x68
 800c8b6:	2a00      	cmp	r2, #0
 800c8b8:	d13f      	bne.n	800c93a <ArtNetNode::HandleAddress()+0xce>
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7ff ff3e 	bl	800c73e <ArtNetNode::SetSubnetSwitch(unsigned long, unsigned char)>
 800c8c2:	7b32      	ldrb	r2, [r6, #12]
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	d13d      	bne.n	800c944 <ArtNetNode::HandleAddress()+0xd8>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7ff ff50 	bl	800c770 <ArtNetNode::SetNetSwitch(unsigned long, unsigned char)>
 800c8d0:	f896 3064 	ldrb.w	r3, [r6, #100]	@ 0x64
 800c8d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8d6:	d00c      	beq.n	800c8f2 <ArtNetNode::HandleAddress()+0x86>
 800c8d8:	2228      	movs	r2, #40	@ 0x28
 800c8da:	fb02 4205 	mla	r2, r2, r5, r4
 800c8de:	f8d2 2ca8 	ldr.w	r2, [r2, #3240]	@ 0xca8
 800c8e2:	2a01      	cmp	r2, #1
 800c8e4:	d105      	bne.n	800c8f2 <ArtNetNode::HandleAddress()+0x86>
 800c8e6:	bb93      	cbnz	r3, 800c94e <ArtNetNode::HandleAddress()+0xe2>
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7ff febd 	bl	800c66c <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>
 800c8f2:	f896 2060 	ldrb.w	r2, [r6, #96]	@ 0x60
 800c8f6:	2a7f      	cmp	r2, #127	@ 0x7f
 800c8f8:	d00b      	beq.n	800c912 <ArtNetNode::HandleAddress()+0xa6>
 800c8fa:	2328      	movs	r3, #40	@ 0x28
 800c8fc:	fb03 4305 	mla	r3, r3, r5, r4
 800c900:	f8d3 1ca8 	ldr.w	r1, [r3, #3240]	@ 0xca8
 800c904:	b929      	cbnz	r1, 800c912 <ArtNetNode::HandleAddress()+0xa6>
 800c906:	bb3a      	cbnz	r2, 800c958 <ArtNetNode::HandleAddress()+0xec>
 800c908:	2301      	movs	r3, #1
 800c90a:	4629      	mov	r1, r5
 800c90c:	4620      	mov	r0, r4
 800c90e:	f7ff fead 	bl	800c66c <ArtNetNode::SetUniverseSwitch(unsigned long, lightset::PortDir, unsigned char)>
 800c912:	f896 106a 	ldrb.w	r1, [r6, #106]	@ 0x6a
 800c916:	2913      	cmp	r1, #19
 800c918:	d824      	bhi.n	800c964 <ArtNetNode::HandleAddress()+0xf8>
 800c91a:	b369      	cbz	r1, 800c978 <ArtNetNode::HandleAddress()+0x10c>
 800c91c:	1e4b      	subs	r3, r1, #1
 800c91e:	2b12      	cmp	r3, #18
 800c920:	d82a      	bhi.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800c922:	e8df f003 	tbb	[pc, r3]
 800c926:	a9998977 	ldmibge	r9, {r0, r1, r2, r4, r5, r6, r8, fp, pc}
 800c92a:	b6292929 	strtlt	r2, [r9], -r9, lsr #18
 800c92e:	b6b6b6b6 			@ <UNDEFINED> instruction: 0xb6b6b6b6
 800c932:	ba292929 	blt	8a56dde <_sidata+0xa354d2>
 800c936:	00bababa 	ldrhteq	fp, [sl], sl
 800c93a:	0613      	lsls	r3, r2, #24
 800c93c:	d5c1      	bpl.n	800c8c2 <ArtNetNode::HandleAddress()+0x56>
 800c93e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c942:	e7ba      	b.n	800c8ba <ArtNetNode::HandleAddress()+0x4e>
 800c944:	0610      	lsls	r0, r2, #24
 800c946:	d5c3      	bpl.n	800c8d0 <ArtNetNode::HandleAddress()+0x64>
 800c948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c94c:	e7bc      	b.n	800c8c8 <ArtNetNode::HandleAddress()+0x5c>
 800c94e:	0619      	lsls	r1, r3, #24
 800c950:	d5cf      	bpl.n	800c8f2 <ArtNetNode::HandleAddress()+0x86>
 800c952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c956:	e7c8      	b.n	800c8ea <ArtNetNode::HandleAddress()+0x7e>
 800c958:	0613      	lsls	r3, r2, #24
 800c95a:	d5da      	bpl.n	800c912 <ArtNetNode::HandleAddress()+0xa6>
 800c95c:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 800c960:	460a      	mov	r2, r1
 800c962:	e7d2      	b.n	800c90a <ArtNetNode::HandleAddress()+0x9e>
 800c964:	2973      	cmp	r1, #115	@ 0x73
 800c966:	d81e      	bhi.n	800c9a6 <ArtNetNode::HandleAddress()+0x13a>
 800c968:	296f      	cmp	r1, #111	@ 0x6f
 800c96a:	f200 80ac 	bhi.w	800cac6 <ArtNetNode::HandleAddress()+0x25a>
 800c96e:	2953      	cmp	r1, #83	@ 0x53
 800c970:	d80b      	bhi.n	800c98a <ArtNetNode::HandleAddress()+0x11e>
 800c972:	294f      	cmp	r1, #79	@ 0x4f
 800c974:	f200 809d 	bhi.w	800cab2 <ArtNetNode::HandleAddress()+0x246>
 800c978:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	@ 0xc84
 800c97c:	7b71      	ldrb	r1, [r6, #13]
 800c97e:	4620      	mov	r0, r4
 800c980:	2300      	movs	r3, #0
 800c982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c986:	f000 bd8b 	b.w	800d4a0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800c98a:	3960      	subs	r1, #96	@ 0x60
 800c98c:	2903      	cmp	r1, #3
 800c98e:	d8f3      	bhi.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800c990:	2200      	movs	r2, #0
 800c992:	4629      	mov	r1, r5
 800c994:	4620      	mov	r0, r4
 800c996:	f001 fc1b 	bl	800e1d0 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>
 800c99a:	2202      	movs	r2, #2
 800c99c:	4629      	mov	r1, r5
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f001 fc43 	bl	800e22a <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)>
 800c9a4:	e7e8      	b.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800c9a6:	3170      	adds	r1, #112	@ 0x70
 800c9a8:	b2c9      	uxtb	r1, r1
 800c9aa:	2903      	cmp	r1, #3
 800c9ac:	d8e4      	bhi.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800c9ae:	2328      	movs	r3, #40	@ 0x28
 800c9b0:	fb03 4305 	mla	r3, r3, r5, r4
 800c9b4:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	@ 0xcac
 800c9b8:	b92b      	cbnz	r3, 800c9c6 <ArtNetNode::HandleAddress()+0x15a>
 800c9ba:	f8d4 1c94 	ldr.w	r1, [r4, #3220]	@ 0xc94
 800c9be:	4845      	ldr	r0, [pc, #276]	@ (800cad4 <ArtNetNode::HandleAddress()+0x268>)
 800c9c0:	462a      	mov	r2, r5
 800c9c2:	f7ff fdb9 	bl	800c538 <lightset::Data::IOutputClear(LightSet*, unsigned long)>
 800c9c6:	2328      	movs	r3, #40	@ 0x28
 800c9c8:	fb03 4305 	mla	r3, r3, r5, r4
 800c9cc:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	@ 0xcac
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d1d1      	bne.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800c9d4:	f8d4 1c74 	ldr.w	r1, [r4, #3188]	@ 0xc74
 800c9d8:	483e      	ldr	r0, [pc, #248]	@ (800cad4 <ArtNetNode::HandleAddress()+0x268>)
 800c9da:	462a      	mov	r2, r5
 800c9dc:	f7ff fdac 	bl	800c538 <lightset::Data::IOutputClear(LightSet*, unsigned long)>
 800c9e0:	230c      	movs	r3, #12
 800c9e2:	fb03 4305 	mla	r3, r3, r5, r4
 800c9e6:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 800c9ea:	f1b8 0f01 	cmp.w	r8, #1
 800c9ee:	d10d      	bne.n	800ca0c <ArtNetNode::HandleAddress()+0x1a0>
 800c9f0:	2744      	movs	r7, #68	@ 0x44
 800c9f2:	fb07 4705 	mla	r7, r7, r5, r4
 800c9f6:	f897 3209 	ldrb.w	r3, [r7, #521]	@ 0x209
 800c9fa:	b93b      	cbnz	r3, 800ca0c <ArtNetNode::HandleAddress()+0x1a0>
 800c9fc:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	@ 0xc74
 800ca00:	6803      	ldr	r3, [r0, #0]
 800ca02:	4629      	mov	r1, r5
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	4798      	blx	r3
 800ca08:	f887 8209 	strb.w	r8, [r7, #521]	@ 0x209
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800ca12:	e7b1      	b.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800ca14:	2000      	movs	r0, #0
 800ca16:	f504 52b9 	add.w	r2, r4, #5920	@ 0x1720
 800ca1a:	f887 0246 	strb.w	r0, [r7, #582]	@ 0x246
 800ca1e:	f504 5393 	add.w	r3, r4, #4704	@ 0x1260
 800ca22:	3208      	adds	r2, #8
 800ca24:	7e19      	ldrb	r1, [r3, #24]
 800ca26:	6018      	str	r0, [r3, #0]
 800ca28:	f021 0108 	bic.w	r1, r1, #8
 800ca2c:	60d8      	str	r0, [r3, #12]
 800ca2e:	7619      	strb	r1, [r3, #24]
 800ca30:	3324      	adds	r3, #36	@ 0x24
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d1f6      	bne.n	800ca24 <ArtNetNode::HandleAddress()+0x1b8>
 800ca36:	e79f      	b.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800ca38:	4b27      	ldr	r3, [pc, #156]	@ (800cad8 <ArtNetNode::HandleAddress()+0x26c>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	6818      	ldr	r0, [r3, #0]
 800ca3e:	2102      	movs	r1, #2
 800ca40:	f00c ffd0 	bl	80199e4 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800ca44:	f897 38d3 	ldrb.w	r3, [r7, #2259]	@ 0x8d3
 800ca48:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800ca4c:	f887 38d3 	strb.w	r3, [r7, #2259]	@ 0x8d3
 800ca50:	2301      	movs	r3, #1
 800ca52:	f884 3c68 	strb.w	r3, [r4, #3176]	@ 0xc68
 800ca56:	e78f      	b.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800ca58:	4b1f      	ldr	r3, [pc, #124]	@ (800cad8 <ArtNetNode::HandleAddress()+0x26c>)
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	6818      	ldr	r0, [r3, #0]
 800ca5e:	2100      	movs	r1, #0
 800ca60:	f00c ffc0 	bl	80199e4 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800ca64:	f897 38d3 	ldrb.w	r3, [r7, #2259]	@ 0x8d3
 800ca68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca70:	f887 38d3 	strb.w	r3, [r7, #2259]	@ 0x8d3
 800ca74:	2300      	movs	r3, #0
 800ca76:	e7ec      	b.n	800ca52 <ArtNetNode::HandleAddress()+0x1e6>
 800ca78:	4b17      	ldr	r3, [pc, #92]	@ (800cad8 <ArtNetNode::HandleAddress()+0x26c>)
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	6818      	ldr	r0, [r3, #0]
 800ca7e:	2104      	movs	r1, #4
 800ca80:	f00c ffb0 	bl	80199e4 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800ca84:	f897 38d3 	ldrb.w	r3, [r7, #2259]	@ 0x8d3
 800ca88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca90:	e7ee      	b.n	800ca70 <ArtNetNode::HandleAddress()+0x204>
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7ff feb0 	bl	800c7f8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800ca98:	e76e      	b.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7ff fe7f 	bl	800c7a2 <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>
 800caa4:	2344      	movs	r3, #68	@ 0x44
 800caa6:	fb03 4305 	mla	r3, r3, r5, r4
 800caaa:	2201      	movs	r2, #1
 800caac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800cab0:	e762      	b.n	800c978 <ArtNetNode::HandleAddress()+0x10c>
 800cab2:	2200      	movs	r2, #0
 800cab4:	4629      	mov	r1, r5
 800cab6:	4620      	mov	r0, r4
 800cab8:	f7ff fe73 	bl	800c7a2 <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>
 800cabc:	2344      	movs	r3, #68	@ 0x44
 800cabe:	fb03 4305 	mla	r3, r3, r5, r4
 800cac2:	2200      	movs	r2, #0
 800cac4:	e7f2      	b.n	800caac <ArtNetNode::HandleAddress()+0x240>
 800cac6:	2201      	movs	r2, #1
 800cac8:	4629      	mov	r1, r5
 800caca:	4620      	mov	r0, r4
 800cacc:	f001 fb80 	bl	800e1d0 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>
 800cad0:	2201      	movs	r2, #1
 800cad2:	e763      	b.n	800c99c <ArtNetNode::HandleAddress()+0x130>
 800cad4:	20000080 	andcs	r0, r0, r0, lsl #1
 800cad8:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800cadc <ArtNetNode::CheckMergeTimeouts(unsigned long)>:
 800cadc:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800cae0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cae4:	f241 235c 	movw	r3, #4700	@ 0x125c
 800cae8:	b530      	push	{r4, r5, lr}
 800caea:	58d3      	ldr	r3, [r2, r3]
 800caec:	f8d0 4c88 	ldr.w	r4, [r0, #3208]	@ 0xc88
 800caf0:	f242 7e10 	movw	lr, #10000	@ 0x2710
 800caf4:	eba4 0c03 	sub.w	ip, r4, r3
 800caf8:	45f4      	cmp	ip, lr
 800cafa:	ea4f 03c1 	mov.w	r3, r1, lsl #3
 800cafe:	d90c      	bls.n	800cb1a <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x3e>
 800cb00:	f502 5c93 	add.w	ip, r2, #4704	@ 0x1260
 800cb04:	f241 2e78 	movw	lr, #4728	@ 0x1278
 800cb08:	2500      	movs	r5, #0
 800cb0a:	f8cc 5000 	str.w	r5, [ip]
 800cb0e:	f812 c00e 	ldrb.w	ip, [r2, lr]
 800cb12:	f02c 0c08 	bic.w	ip, ip, #8
 800cb16:	f802 c00e 	strb.w	ip, [r2, lr]
 800cb1a:	440b      	add	r3, r1
 800cb1c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cb20:	f241 2168 	movw	r1, #4712	@ 0x1268
 800cb24:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cb28:	5859      	ldr	r1, [r3, r1]
 800cb2a:	1a64      	subs	r4, r4, r1
 800cb2c:	4294      	cmp	r4, r2
 800cb2e:	d909      	bls.n	800cb44 <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x68>
 800cb30:	f241 226c 	movw	r2, #4716	@ 0x126c
 800cb34:	2400      	movs	r4, #0
 800cb36:	509c      	str	r4, [r3, r2]
 800cb38:	f241 2178 	movw	r1, #4728	@ 0x1278
 800cb3c:	5c5a      	ldrb	r2, [r3, r1]
 800cb3e:	f022 0208 	bic.w	r2, r2, #8
 800cb42:	545a      	strb	r2, [r3, r1]
 800cb44:	2300      	movs	r3, #0
 800cb46:	f500 5c93 	add.w	ip, r0, #4704	@ 0x1260
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f10c 0c18 	add.w	ip, ip, #24
 800cb50:	f81c 2003 	ldrb.w	r2, [ip, r3]
 800cb54:	3324      	adds	r3, #36	@ 0x24
 800cb56:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800cb5a:	f5b3 6f99 	cmp.w	r3, #1224	@ 0x4c8
 800cb5e:	ea41 0102 	orr.w	r1, r1, r2
 800cb62:	d1f5      	bne.n	800cb50 <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x74>
 800cb64:	b929      	cbnz	r1, 800cb72 <ArtNetNode::CheckMergeTimeouts(unsigned long)+0x96>
 800cb66:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800cb6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb6e:	f8a0 3246 	strh.w	r3, [r0, #582]	@ 0x246
 800cb72:	bd30      	pop	{r4, r5, pc}

0800cb74 <ArtNetNode::HandleDmx()>:
 800cb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb78:	f8d0 ac80 	ldr.w	sl, [r0, #3200]	@ 0xc80
 800cb7c:	4abb      	ldr	r2, [pc, #748]	@ (800ce6c <ArtNetNode::HandleDmx()+0x2f8>)
 800cb7e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 800cb82:	ba5b      	rev16	r3, r3
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	b089      	sub	sp, #36	@ 0x24
 800cb88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb8c:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
 800cb90:	bf28      	it	cs
 800cb92:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800cb96:	1856      	adds	r6, r2, r1
 800cb98:	f500 5592 	add.w	r5, r0, #4672	@ 0x1240
 800cb9c:	9305      	str	r3, [sp, #20]
 800cb9e:	18f7      	adds	r7, r6, r3
 800cba0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800cba4:	4681      	mov	r9, r0
 800cba6:	4604      	mov	r4, r0
 800cba8:	351c      	adds	r5, #28
 800cbaa:	f500 68aa 	add.w	r8, r0, #1360	@ 0x550
 800cbae:	2100      	movs	r1, #0
 800cbb0:	9303      	str	r3, [sp, #12]
 800cbb2:	e00d      	b.n	800cbd0 <ArtNetNode::HandleDmx()+0x5c>
 800cbb4:	3428      	adds	r4, #40	@ 0x28
 800cbb6:	4544      	cmp	r4, r8
 800cbb8:	f101 0101 	add.w	r1, r1, #1
 800cbbc:	f105 0524 	add.w	r5, r5, #36	@ 0x24
 800cbc0:	f202 6204 	addw	r2, r2, #1540	@ 0x604
 800cbc4:	f206 6604 	addw	r6, r6, #1540	@ 0x604
 800cbc8:	f207 6704 	addw	r7, r7, #1540	@ 0x604
 800cbcc:	f000 809e 	beq.w	800cd0c <ArtNetNode::HandleDmx()+0x198>
 800cbd0:	f8d4 3ca8 	ldr.w	r3, [r4, #3240]	@ 0xca8
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d1ed      	bne.n	800cbb4 <ArtNetNode::HandleDmx()+0x40>
 800cbd8:	f8d4 3cac 	ldr.w	r3, [r4, #3244]	@ 0xcac
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1e9      	bne.n	800cbb4 <ArtNetNode::HandleDmx()+0x40>
 800cbe0:	f8b4 0ca0 	ldrh.w	r0, [r4, #3232]	@ 0xca0
 800cbe4:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 800cbe8:	4298      	cmp	r0, r3
 800cbea:	d1e3      	bne.n	800cbb4 <ArtNetNode::HandleDmx()+0x40>
 800cbec:	7f2b      	ldrb	r3, [r5, #28]
 800cbee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbf2:	772b      	strb	r3, [r5, #28]
 800cbf4:	9304      	str	r3, [sp, #16]
 800cbf6:	9b03      	ldr	r3, [sp, #12]
 800cbf8:	f893 0246 	ldrb.w	r0, [r3, #582]	@ 0x246
 800cbfc:	b158      	cbz	r0, 800cc16 <ArtNetNode::HandleDmx()+0xa2>
 800cbfe:	f893 0248 	ldrb.w	r0, [r3, #584]	@ 0x248
 800cc02:	b940      	cbnz	r0, 800cc16 <ArtNetNode::HandleDmx()+0xa2>
 800cc04:	4648      	mov	r0, r9
 800cc06:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800cc0a:	f7ff ff67 	bl	800cadc <ArtNetNode::CheckMergeTimeouts(unsigned long)>
 800cc0e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800cc12:	7f2b      	ldrb	r3, [r5, #28]
 800cc14:	9304      	str	r3, [sp, #16]
 800cc16:	9b04      	ldr	r3, [sp, #16]
 800cc18:	6868      	ldr	r0, [r5, #4]
 800cc1a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800cc1e:	f8d9 ec84 	ldr.w	lr, [r9, #3204]	@ 0xc84
 800cc22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800cc26:	9306      	str	r3, [sp, #24]
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f000 8184 	beq.w	800cf36 <ArtNetNode::HandleDmx()+0x3c2>
 800cc2e:	4570      	cmp	r0, lr
 800cc30:	d06f      	beq.n	800cd12 <ArtNetNode::HandleDmx()+0x19e>
 800cc32:	f1bc 0f00 	cmp.w	ip, #0
 800cc36:	d166      	bne.n	800cd06 <ArtNetNode::HandleDmx()+0x192>
 800cc38:	f8c5 e010 	str.w	lr, [r5, #16]
 800cc3c:	9b03      	ldr	r3, [sp, #12]
 800cc3e:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800cc42:	60e8      	str	r0, [r5, #12]
 800cc44:	f893 0246 	ldrb.w	r0, [r3, #582]	@ 0x246
 800cc48:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800cc4c:	f8a5 c014 	strh.w	ip, [r5, #20]
 800cc50:	b918      	cbnz	r0, 800cc5a <ArtNetNode::HandleDmx()+0xe6>
 800cc52:	f240 1001 	movw	r0, #257	@ 0x101
 800cc56:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800cc5a:	9b04      	ldr	r3, [sp, #16]
 800cc5c:	f043 0308 	orr.w	r3, r3, #8
 800cc60:	772b      	strb	r3, [r5, #28]
 800cc62:	9b05      	ldr	r3, [sp, #20]
 800cc64:	f10a 0012 	add.w	r0, sl, #18
 800cc68:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f000 810a 	beq.w	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800cc72:	f103 0b12 	add.w	fp, r3, #18
 800cc76:	44d3      	add	fp, sl
 800cc78:	4603      	mov	r3, r0
 800cc7a:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cc7e:	f80c eb01 	strb.w	lr, [ip], #1
 800cc82:	459b      	cmp	fp, r3
 800cc84:	d1f9      	bne.n	800cc7a <ArtNetNode::HandleDmx()+0x106>
 800cc86:	9b05      	ldr	r3, [sp, #20]
 800cc88:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cc8c:	9b06      	ldr	r3, [sp, #24]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 81cd 	beq.w	800d02e <ArtNetNode::HandleDmx()+0x4ba>
 800cc94:	4613      	mov	r3, r2
 800cc96:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cc9a:	f803 cb01 	strb.w	ip, [r3], #1
 800cc9e:	4583      	cmp	fp, r0
 800cca0:	d1f9      	bne.n	800cc96 <ArtNetNode::HandleDmx()+0x122>
 800cca2:	f8d6 e601 	ldr.w	lr, [r6, #1537]	@ 0x601
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	f8d9 0c94 	ldr.w	r0, [r9, #3220]	@ 0xc94
 800ccac:	f893 c245 	ldrb.w	ip, [r3, #581]	@ 0x245
 800ccb0:	6803      	ldr	r3, [r0, #0]
 800ccb2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800ccb6:	f1bc 0f00 	cmp.w	ip, #0
 800ccba:	d005      	beq.n	800ccc8 <ArtNetNode::HandleDmx()+0x154>
 800ccbc:	f895 c01c 	ldrb.w	ip, [r5, #28]
 800ccc0:	f01c 0c08 	ands.w	ip, ip, #8
 800ccc4:	f000 80e4 	beq.w	800ce90 <ArtNetNode::HandleDmx()+0x31c>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	9206      	str	r2, [sp, #24]
 800ccce:	4673      	mov	r3, lr
 800ccd0:	9104      	str	r1, [sp, #16]
 800ccd2:	47d8      	blx	fp
 800ccd4:	7feb      	ldrb	r3, [r5, #31]
 800ccd6:	9904      	ldr	r1, [sp, #16]
 800ccd8:	9a06      	ldr	r2, [sp, #24]
 800ccda:	b963      	cbnz	r3, 800ccf6 <ArtNetNode::HandleDmx()+0x182>
 800ccdc:	f8d9 0c94 	ldr.w	r0, [r9, #3220]	@ 0xc94
 800cce0:	6803      	ldr	r3, [r0, #0]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	4798      	blx	r3
 800cce6:	9b03      	ldr	r3, [sp, #12]
 800cce8:	9904      	ldr	r1, [sp, #16]
 800ccea:	f04f 0201 	mov.w	r2, #1
 800ccee:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247
 800ccf2:	77ea      	strb	r2, [r5, #31]
 800ccf4:	9a06      	ldr	r2, [sp, #24]
 800ccf6:	9803      	ldr	r0, [sp, #12]
 800ccf8:	f890 324a 	ldrb.w	r3, [r0, #586]	@ 0x24a
 800ccfc:	f043 0302 	orr.w	r3, r3, #2
 800cd00:	f880 324a 	strb.w	r3, [r0, #586]	@ 0x24a
 800cd04:	e756      	b.n	800cbb4 <ArtNetNode::HandleDmx()+0x40>
 800cd06:	45f4      	cmp	ip, lr
 800cd08:	f000 80d3 	beq.w	800ceb2 <ArtNetNode::HandleDmx()+0x33e>
 800cd0c:	b009      	add	sp, #36	@ 0x24
 800cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd12:	f89a e00d 	ldrb.w	lr, [sl, #13]
 800cd16:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800cd1a:	f1bc 0f00 	cmp.w	ip, #0
 800cd1e:	d139      	bne.n	800cd94 <ArtNetNode::HandleDmx()+0x220>
 800cd20:	45de      	cmp	lr, fp
 800cd22:	f000 81dc 	beq.w	800d0de <ArtNetNode::HandleDmx()+0x56a>
 800cd26:	f8b5 c014 	ldrh.w	ip, [r5, #20]
 800cd2a:	45f4      	cmp	ip, lr
 800cd2c:	d0ee      	beq.n	800cd0c <ArtNetNode::HandleDmx()+0x198>
 800cd2e:	6128      	str	r0, [r5, #16]
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800cd36:	60e8      	str	r0, [r5, #12]
 800cd38:	f893 0246 	ldrb.w	r0, [r3, #582]	@ 0x246
 800cd3c:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800cd40:	f8a5 c014 	strh.w	ip, [r5, #20]
 800cd44:	2800      	cmp	r0, #0
 800cd46:	f000 80af 	beq.w	800cea8 <ArtNetNode::HandleDmx()+0x334>
 800cd4a:	9b04      	ldr	r3, [sp, #16]
 800cd4c:	f043 0308 	orr.w	r3, r3, #8
 800cd50:	772b      	strb	r3, [r5, #28]
 800cd52:	9b05      	ldr	r3, [sp, #20]
 800cd54:	f10a 0012 	add.w	r0, sl, #18
 800cd58:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 8092 	beq.w	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800cd62:	f103 0b12 	add.w	fp, r3, #18
 800cd66:	44d3      	add	fp, sl
 800cd68:	4603      	mov	r3, r0
 800cd6a:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cd6e:	f80c eb01 	strb.w	lr, [ip], #1
 800cd72:	459b      	cmp	fp, r3
 800cd74:	d1f9      	bne.n	800cd6a <ArtNetNode::HandleDmx()+0x1f6>
 800cd76:	9b05      	ldr	r3, [sp, #20]
 800cd78:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cd7c:	9b06      	ldr	r3, [sp, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 80cc 	beq.w	800cf1c <ArtNetNode::HandleDmx()+0x3a8>
 800cd84:	4613      	mov	r3, r2
 800cd86:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cd8a:	f803 cb01 	strb.w	ip, [r3], #1
 800cd8e:	4583      	cmp	fp, r0
 800cd90:	d1f9      	bne.n	800cd86 <ArtNetNode::HandleDmx()+0x212>
 800cd92:	e786      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800cd94:	4584      	cmp	ip, r0
 800cd96:	d032      	beq.n	800cdfe <ArtNetNode::HandleDmx()+0x28a>
 800cd98:	45de      	cmp	lr, fp
 800cd9a:	d1b7      	bne.n	800cd0c <ArtNetNode::HandleDmx()+0x198>
 800cd9c:	9b03      	ldr	r3, [sp, #12]
 800cd9e:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800cda2:	f893 c246 	ldrb.w	ip, [r3, #582]	@ 0x246
 800cda6:	6028      	str	r0, [r5, #0]
 800cda8:	f1bc 0f00 	cmp.w	ip, #0
 800cdac:	d103      	bne.n	800cdb6 <ArtNetNode::HandleDmx()+0x242>
 800cdae:	f240 1001 	movw	r0, #257	@ 0x101
 800cdb2:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800cdb6:	9b04      	ldr	r3, [sp, #16]
 800cdb8:	f043 0308 	orr.w	r3, r3, #8
 800cdbc:	772b      	strb	r3, [r5, #28]
 800cdbe:	9b05      	ldr	r3, [sp, #20]
 800cdc0:	f10a 0012 	add.w	r0, sl, #18
 800cdc4:	f106 0c01 	add.w	ip, r6, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d05c      	beq.n	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800cdcc:	f103 0b12 	add.w	fp, r3, #18
 800cdd0:	44d3      	add	fp, sl
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cdd8:	f80c eb01 	strb.w	lr, [ip], #1
 800cddc:	455b      	cmp	r3, fp
 800cdde:	d1f9      	bne.n	800cdd4 <ArtNetNode::HandleDmx()+0x260>
 800cde0:	9b05      	ldr	r3, [sp, #20]
 800cde2:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cde6:	9b06      	ldr	r3, [sp, #24]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 81bf 	beq.w	800d16c <ArtNetNode::HandleDmx()+0x5f8>
 800cdee:	4613      	mov	r3, r2
 800cdf0:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cdf4:	f803 cb01 	strb.w	ip, [r3], #1
 800cdf8:	4558      	cmp	r0, fp
 800cdfa:	d1f9      	bne.n	800cdf0 <ArtNetNode::HandleDmx()+0x27c>
 800cdfc:	e751      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800cdfe:	45de      	cmp	lr, fp
 800ce00:	f000 8122 	beq.w	800d048 <ArtNetNode::HandleDmx()+0x4d4>
 800ce04:	8aa8      	ldrh	r0, [r5, #20]
 800ce06:	4570      	cmp	r0, lr
 800ce08:	f040 81fc 	bne.w	800d204 <ArtNetNode::HandleDmx()+0x690>
 800ce0c:	9b03      	ldr	r3, [sp, #12]
 800ce0e:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800ce12:	f893 c246 	ldrb.w	ip, [r3, #582]	@ 0x246
 800ce16:	60e8      	str	r0, [r5, #12]
 800ce18:	f1bc 0f00 	cmp.w	ip, #0
 800ce1c:	d103      	bne.n	800ce26 <ArtNetNode::HandleDmx()+0x2b2>
 800ce1e:	f240 1001 	movw	r0, #257	@ 0x101
 800ce22:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	f043 0308 	orr.w	r3, r3, #8
 800ce2c:	772b      	strb	r3, [r5, #28]
 800ce2e:	9b05      	ldr	r3, [sp, #20]
 800ce30:	f10a 0012 	add.w	r0, sl, #18
 800ce34:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800ce38:	b32b      	cbz	r3, 800ce86 <ArtNetNode::HandleDmx()+0x312>
 800ce3a:	f103 0b12 	add.w	fp, r3, #18
 800ce3e:	44d3      	add	fp, sl
 800ce40:	4603      	mov	r3, r0
 800ce42:	f813 eb01 	ldrb.w	lr, [r3], #1
 800ce46:	f80c eb01 	strb.w	lr, [ip], #1
 800ce4a:	459b      	cmp	fp, r3
 800ce4c:	d1f9      	bne.n	800ce42 <ArtNetNode::HandleDmx()+0x2ce>
 800ce4e:	9b05      	ldr	r3, [sp, #20]
 800ce50:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800ce54:	9b06      	ldr	r3, [sp, #24]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 8134 	beq.w	800d0c4 <ArtNetNode::HandleDmx()+0x550>
 800ce5c:	4613      	mov	r3, r2
 800ce5e:	f810 cb01 	ldrb.w	ip, [r0], #1
 800ce62:	f803 cb01 	strb.w	ip, [r3], #1
 800ce66:	4583      	cmp	fp, r0
 800ce68:	d1f9      	bne.n	800ce5e <ArtNetNode::HandleDmx()+0x2ea>
 800ce6a:	e71a      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800ce6c:	20000480 	andcs	r0, r0, r0, lsl #9
 800ce70:	9805      	ldr	r0, [sp, #20]
 800ce72:	f8d9 3c88 	ldr.w	r3, [r9, #3208]	@ 0xc88
 800ce76:	60eb      	str	r3, [r5, #12]
 800ce78:	f206 2e01 	addw	lr, r6, #513	@ 0x201
 800ce7c:	f10a 0312 	add.w	r3, sl, #18
 800ce80:	2800      	cmp	r0, #0
 800ce82:	f040 815e 	bne.w	800d142 <ArtNetNode::HandleDmx()+0x5ce>
 800ce86:	9b05      	ldr	r3, [sp, #20]
 800ce88:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	e70a      	b.n	800cca6 <ArtNetNode::HandleDmx()+0x132>
 800ce90:	4673      	mov	r3, lr
 800ce92:	9206      	str	r2, [sp, #24]
 800ce94:	9104      	str	r1, [sp, #16]
 800ce96:	f8cd c000 	str.w	ip, [sp]
 800ce9a:	47d8      	blx	fp
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	9904      	ldr	r1, [sp, #16]
 800cea0:	9a06      	ldr	r2, [sp, #24]
 800cea2:	f885 3020 	strb.w	r3, [r5, #32]
 800cea6:	e726      	b.n	800ccf6 <ArtNetNode::HandleDmx()+0x182>
 800cea8:	f240 1001 	movw	r0, #257	@ 0x101
 800ceac:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800ceb0:	e74b      	b.n	800cd4a <ArtNetNode::HandleDmx()+0x1d6>
 800ceb2:	f8b5 c014 	ldrh.w	ip, [r5, #20]
 800ceb6:	f89a 000d 	ldrb.w	r0, [sl, #13]
 800ceba:	4584      	cmp	ip, r0
 800cebc:	f040 81a8 	bne.w	800d210 <ArtNetNode::HandleDmx()+0x69c>
 800cec0:	9b03      	ldr	r3, [sp, #12]
 800cec2:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800cec6:	f893 c246 	ldrb.w	ip, [r3, #582]	@ 0x246
 800ceca:	60e8      	str	r0, [r5, #12]
 800cecc:	f1bc 0f00 	cmp.w	ip, #0
 800ced0:	f000 8132 	beq.w	800d138 <ArtNetNode::HandleDmx()+0x5c4>
 800ced4:	9b04      	ldr	r3, [sp, #16]
 800ced6:	f043 0308 	orr.w	r3, r3, #8
 800ceda:	772b      	strb	r3, [r5, #28]
 800cedc:	9b05      	ldr	r3, [sp, #20]
 800cede:	f10a 0012 	add.w	r0, sl, #18
 800cee2:	f206 2c01 	addw	ip, r6, #513	@ 0x201
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0cd      	beq.n	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800ceea:	f103 0b12 	add.w	fp, r3, #18
 800ceee:	44d3      	add	fp, sl
 800cef0:	4603      	mov	r3, r0
 800cef2:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cef6:	f80c eb01 	strb.w	lr, [ip], #1
 800cefa:	459b      	cmp	fp, r3
 800cefc:	d1f9      	bne.n	800cef2 <ArtNetNode::HandleDmx()+0x37e>
 800cefe:	9b05      	ldr	r3, [sp, #20]
 800cf00:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cf04:	9b06      	ldr	r3, [sp, #24]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f000 814a 	beq.w	800d1a0 <ArtNetNode::HandleDmx()+0x62c>
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cf12:	f803 cb01 	strb.w	ip, [r3], #1
 800cf16:	4583      	cmp	fp, r0
 800cf18:	d1f9      	bne.n	800cf0e <ArtNetNode::HandleDmx()+0x39a>
 800cf1a:	e6c2      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800cf1c:	4633      	mov	r3, r6
 800cf1e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cf22:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800cf26:	4560      	cmp	r0, ip
 800cf28:	bf38      	it	cc
 800cf2a:	4660      	movcc	r0, ip
 800cf2c:	42bb      	cmp	r3, r7
 800cf2e:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800cf32:	d1f4      	bne.n	800cf1e <ArtNetNode::HandleDmx()+0x3aa>
 800cf34:	e6b5      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800cf36:	f1bc 0f00 	cmp.w	ip, #0
 800cf3a:	f000 813e 	beq.w	800d1ba <ArtNetNode::HandleDmx()+0x646>
 800cf3e:	45f4      	cmp	ip, lr
 800cf40:	d034      	beq.n	800cfac <ArtNetNode::HandleDmx()+0x438>
 800cf42:	f8c5 e004 	str.w	lr, [r5, #4]
 800cf46:	9b03      	ldr	r3, [sp, #12]
 800cf48:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800cf4c:	6028      	str	r0, [r5, #0]
 800cf4e:	f893 0246 	ldrb.w	r0, [r3, #582]	@ 0x246
 800cf52:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800cf56:	f8a5 c008 	strh.w	ip, [r5, #8]
 800cf5a:	b918      	cbnz	r0, 800cf64 <ArtNetNode::HandleDmx()+0x3f0>
 800cf5c:	f240 1001 	movw	r0, #257	@ 0x101
 800cf60:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800cf64:	9b04      	ldr	r3, [sp, #16]
 800cf66:	f043 0308 	orr.w	r3, r3, #8
 800cf6a:	772b      	strb	r3, [r5, #28]
 800cf6c:	9b05      	ldr	r3, [sp, #20]
 800cf6e:	f10a 0012 	add.w	r0, sl, #18
 800cf72:	f106 0c01 	add.w	ip, r6, #1
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d085      	beq.n	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800cf7a:	f103 0b12 	add.w	fp, r3, #18
 800cf7e:	44d3      	add	fp, sl
 800cf80:	4603      	mov	r3, r0
 800cf82:	f813 eb01 	ldrb.w	lr, [r3], #1
 800cf86:	f80c eb01 	strb.w	lr, [ip], #1
 800cf8a:	459b      	cmp	fp, r3
 800cf8c:	d1f9      	bne.n	800cf82 <ArtNetNode::HandleDmx()+0x40e>
 800cf8e:	9b05      	ldr	r3, [sp, #20]
 800cf90:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800cf94:	9b06      	ldr	r3, [sp, #24]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f000 8087 	beq.w	800d0aa <ArtNetNode::HandleDmx()+0x536>
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	f810 cb01 	ldrb.w	ip, [r0], #1
 800cfa2:	f803 cb01 	strb.w	ip, [r3], #1
 800cfa6:	4583      	cmp	fp, r0
 800cfa8:	d1f9      	bne.n	800cf9e <ArtNetNode::HandleDmx()+0x42a>
 800cfaa:	e67a      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800cfac:	f89a 000d 	ldrb.w	r0, [sl, #13]
 800cfb0:	f8b5 e014 	ldrh.w	lr, [r5, #20]
 800cfb4:	4586      	cmp	lr, r0
 800cfb6:	f43f af5b 	beq.w	800ce70 <ArtNetNode::HandleDmx()+0x2fc>
 800cfba:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800cfbe:	4586      	cmp	lr, r0
 800cfc0:	f43f aea4 	beq.w	800cd0c <ArtNetNode::HandleDmx()+0x198>
 800cfc4:	f8c5 c004 	str.w	ip, [r5, #4]
 800cfc8:	9b03      	ldr	r3, [sp, #12]
 800cfca:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800cfce:	6028      	str	r0, [r5, #0]
 800cfd0:	f893 0246 	ldrb.w	r0, [r3, #582]	@ 0x246
 800cfd4:	f89a c00d 	ldrb.w	ip, [sl, #13]
 800cfd8:	f8a5 c008 	strh.w	ip, [r5, #8]
 800cfdc:	b918      	cbnz	r0, 800cfe6 <ArtNetNode::HandleDmx()+0x472>
 800cfde:	f240 1001 	movw	r0, #257	@ 0x101
 800cfe2:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800cfe6:	9b04      	ldr	r3, [sp, #16]
 800cfe8:	f043 0308 	orr.w	r3, r3, #8
 800cfec:	772b      	strb	r3, [r5, #28]
 800cfee:	9b05      	ldr	r3, [sp, #20]
 800cff0:	f10a 0012 	add.w	r0, sl, #18
 800cff4:	f106 0c01 	add.w	ip, r6, #1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f43f af44 	beq.w	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800cffe:	f103 0b12 	add.w	fp, r3, #18
 800d002:	44d3      	add	fp, sl
 800d004:	4603      	mov	r3, r0
 800d006:	f813 eb01 	ldrb.w	lr, [r3], #1
 800d00a:	f80c eb01 	strb.w	lr, [ip], #1
 800d00e:	455b      	cmp	r3, fp
 800d010:	d1f9      	bne.n	800d006 <ArtNetNode::HandleDmx()+0x492>
 800d012:	9b05      	ldr	r3, [sp, #20]
 800d014:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800d018:	9b06      	ldr	r3, [sp, #24]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d07f      	beq.n	800d11e <ArtNetNode::HandleDmx()+0x5aa>
 800d01e:	4613      	mov	r3, r2
 800d020:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d024:	f803 cb01 	strb.w	ip, [r3], #1
 800d028:	4558      	cmp	r0, fp
 800d02a:	d1f9      	bne.n	800d020 <ArtNetNode::HandleDmx()+0x4ac>
 800d02c:	e639      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d02e:	4633      	mov	r3, r6
 800d030:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d034:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800d038:	4560      	cmp	r0, ip
 800d03a:	bf38      	it	cc
 800d03c:	4660      	movcc	r0, ip
 800d03e:	429f      	cmp	r7, r3
 800d040:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800d044:	d1f4      	bne.n	800d030 <ArtNetNode::HandleDmx()+0x4bc>
 800d046:	e62c      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	f8d9 0c88 	ldr.w	r0, [r9, #3208]	@ 0xc88
 800d04e:	f893 c246 	ldrb.w	ip, [r3, #582]	@ 0x246
 800d052:	6028      	str	r0, [r5, #0]
 800d054:	f1bc 0f00 	cmp.w	ip, #0
 800d058:	d103      	bne.n	800d062 <ArtNetNode::HandleDmx()+0x4ee>
 800d05a:	f240 1001 	movw	r0, #257	@ 0x101
 800d05e:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800d062:	9b04      	ldr	r3, [sp, #16]
 800d064:	f043 0308 	orr.w	r3, r3, #8
 800d068:	772b      	strb	r3, [r5, #28]
 800d06a:	9b05      	ldr	r3, [sp, #20]
 800d06c:	f10a 0012 	add.w	r0, sl, #18
 800d070:	f106 0c01 	add.w	ip, r6, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	f43f af06 	beq.w	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800d07a:	f103 0e12 	add.w	lr, r3, #18
 800d07e:	44d6      	add	lr, sl
 800d080:	4603      	mov	r3, r0
 800d082:	f813 bb01 	ldrb.w	fp, [r3], #1
 800d086:	f80c bb01 	strb.w	fp, [ip], #1
 800d08a:	4573      	cmp	r3, lr
 800d08c:	d1f9      	bne.n	800d082 <ArtNetNode::HandleDmx()+0x50e>
 800d08e:	9b05      	ldr	r3, [sp, #20]
 800d090:	f8c6 3601 	str.w	r3, [r6, #1537]	@ 0x601
 800d094:	9b06      	ldr	r3, [sp, #24]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d075      	beq.n	800d186 <ArtNetNode::HandleDmx()+0x612>
 800d09a:	4613      	mov	r3, r2
 800d09c:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d0a0:	f803 cb01 	strb.w	ip, [r3], #1
 800d0a4:	4570      	cmp	r0, lr
 800d0a6:	d1f9      	bne.n	800d09c <ArtNetNode::HandleDmx()+0x528>
 800d0a8:	e5fb      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d0aa:	4633      	mov	r3, r6
 800d0ac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d0b0:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800d0b4:	4560      	cmp	r0, ip
 800d0b6:	bf38      	it	cc
 800d0b8:	4660      	movcc	r0, ip
 800d0ba:	429f      	cmp	r7, r3
 800d0bc:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800d0c0:	d1f4      	bne.n	800d0ac <ArtNetNode::HandleDmx()+0x538>
 800d0c2:	e5ee      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d0c4:	4633      	mov	r3, r6
 800d0c6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d0ca:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800d0ce:	4560      	cmp	r0, ip
 800d0d0:	bf38      	it	cc
 800d0d2:	4660      	movcc	r0, ip
 800d0d4:	429f      	cmp	r7, r3
 800d0d6:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800d0da:	d1f4      	bne.n	800d0c6 <ArtNetNode::HandleDmx()+0x552>
 800d0dc:	e5e1      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d0de:	9805      	ldr	r0, [sp, #20]
 800d0e0:	f8d9 3c88 	ldr.w	r3, [r9, #3208]	@ 0xc88
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	f106 0e01 	add.w	lr, r6, #1
 800d0ea:	f10a 0312 	add.w	r3, sl, #18
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	f43f aec9 	beq.w	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800d0f4:	f100 0c12 	add.w	ip, r0, #18
 800d0f8:	44d4      	add	ip, sl
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f810 bb01 	ldrb.w	fp, [r0], #1
 800d100:	f80e bb01 	strb.w	fp, [lr], #1
 800d104:	4560      	cmp	r0, ip
 800d106:	d1f9      	bne.n	800d0fc <ArtNetNode::HandleDmx()+0x588>
 800d108:	9805      	ldr	r0, [sp, #20]
 800d10a:	f8c6 0601 	str.w	r0, [r6, #1537]	@ 0x601
 800d10e:	4610      	mov	r0, r2
 800d110:	f813 eb01 	ldrb.w	lr, [r3], #1
 800d114:	f800 eb01 	strb.w	lr, [r0], #1
 800d118:	4563      	cmp	r3, ip
 800d11a:	d1f9      	bne.n	800d110 <ArtNetNode::HandleDmx()+0x59c>
 800d11c:	e5c1      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d11e:	4633      	mov	r3, r6
 800d120:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d124:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800d128:	4560      	cmp	r0, ip
 800d12a:	bf38      	it	cc
 800d12c:	4660      	movcc	r0, ip
 800d12e:	42bb      	cmp	r3, r7
 800d130:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800d134:	d1f4      	bne.n	800d120 <ArtNetNode::HandleDmx()+0x5ac>
 800d136:	e5b4      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d138:	f240 1001 	movw	r0, #257	@ 0x101
 800d13c:	f8a3 0246 	strh.w	r0, [r3, #582]	@ 0x246
 800d140:	e6c8      	b.n	800ced4 <ArtNetNode::HandleDmx()+0x360>
 800d142:	f100 0c12 	add.w	ip, r0, #18
 800d146:	44d4      	add	ip, sl
 800d148:	4618      	mov	r0, r3
 800d14a:	f810 bb01 	ldrb.w	fp, [r0], #1
 800d14e:	f80e bb01 	strb.w	fp, [lr], #1
 800d152:	4584      	cmp	ip, r0
 800d154:	d1f9      	bne.n	800d14a <ArtNetNode::HandleDmx()+0x5d6>
 800d156:	9805      	ldr	r0, [sp, #20]
 800d158:	f8c6 0601 	str.w	r0, [r6, #1537]	@ 0x601
 800d15c:	4610      	mov	r0, r2
 800d15e:	f813 eb01 	ldrb.w	lr, [r3], #1
 800d162:	f800 eb01 	strb.w	lr, [r0], #1
 800d166:	459c      	cmp	ip, r3
 800d168:	d1f9      	bne.n	800d15e <ArtNetNode::HandleDmx()+0x5ea>
 800d16a:	e59a      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d16c:	4633      	mov	r3, r6
 800d16e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d172:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800d176:	4560      	cmp	r0, ip
 800d178:	bf38      	it	cc
 800d17a:	4660      	movcc	r0, ip
 800d17c:	42bb      	cmp	r3, r7
 800d17e:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800d182:	d1f4      	bne.n	800d16e <ArtNetNode::HandleDmx()+0x5fa>
 800d184:	e58d      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d186:	4633      	mov	r3, r6
 800d188:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d18c:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800d190:	4560      	cmp	r0, ip
 800d192:	bf38      	it	cc
 800d194:	4660      	movcc	r0, ip
 800d196:	429f      	cmp	r7, r3
 800d198:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800d19c:	d1f4      	bne.n	800d188 <ArtNetNode::HandleDmx()+0x614>
 800d19e:	e580      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d1a0:	4633      	mov	r3, r6
 800d1a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d1a6:	f893 c200 	ldrb.w	ip, [r3, #512]	@ 0x200
 800d1aa:	4560      	cmp	r0, ip
 800d1ac:	bf38      	it	cc
 800d1ae:	4660      	movcc	r0, ip
 800d1b0:	42bb      	cmp	r3, r7
 800d1b2:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 800d1b6:	d1f4      	bne.n	800d1a2 <ArtNetNode::HandleDmx()+0x62e>
 800d1b8:	e573      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d1ba:	f8c5 e004 	str.w	lr, [r5, #4]
 800d1be:	f8d9 3c88 	ldr.w	r3, [r9, #3208]	@ 0xc88
 800d1c2:	602b      	str	r3, [r5, #0]
 800d1c4:	9805      	ldr	r0, [sp, #20]
 800d1c6:	f89a 300d 	ldrb.w	r3, [sl, #13]
 800d1ca:	812b      	strh	r3, [r5, #8]
 800d1cc:	f106 0c01 	add.w	ip, r6, #1
 800d1d0:	f10a 0312 	add.w	r3, sl, #18
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	f43f ae56 	beq.w	800ce86 <ArtNetNode::HandleDmx()+0x312>
 800d1da:	3012      	adds	r0, #18
 800d1dc:	eb0a 0b00 	add.w	fp, sl, r0
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f810 eb01 	ldrb.w	lr, [r0], #1
 800d1e6:	f80c eb01 	strb.w	lr, [ip], #1
 800d1ea:	4583      	cmp	fp, r0
 800d1ec:	d1f9      	bne.n	800d1e2 <ArtNetNode::HandleDmx()+0x66e>
 800d1ee:	9805      	ldr	r0, [sp, #20]
 800d1f0:	f8c6 0601 	str.w	r0, [r6, #1537]	@ 0x601
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	f813 cb01 	ldrb.w	ip, [r3], #1
 800d1fa:	f800 cb01 	strb.w	ip, [r0], #1
 800d1fe:	459b      	cmp	fp, r3
 800d200:	d1f9      	bne.n	800d1f6 <ArtNetNode::HandleDmx()+0x682>
 800d202:	e54e      	b.n	800cca2 <ArtNetNode::HandleDmx()+0x12e>
 800d204:	4803      	ldr	r0, [pc, #12]	@ (800d214 <ArtNetNode::HandleDmx()+0x6a0>)
 800d206:	b009      	add	sp, #36	@ 0x24
 800d208:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20c:	f00f b963 	b.w	801c4d6 <puts>
 800d210:	4801      	ldr	r0, [pc, #4]	@ (800d218 <ArtNetNode::HandleDmx()+0x6a4>)
 800d212:	e7f8      	b.n	800d206 <ArtNetNode::HandleDmx()+0x692>
 800d214:	0801e588 	stmdaeq	r1, {r3, r7, r8, sl, sp, lr, pc}
 800d218:	0801e558 	stmdaeq	r1, {r3, r4, r6, r8, sl, sp, lr, pc}

0800d21c <memcpy.isra.0>:
 800d21c:	440a      	add	r2, r1
 800d21e:	4291      	cmp	r1, r2
 800d220:	d100      	bne.n	800d224 <memcpy.isra.0+0x8>
 800d222:	4770      	bx	lr
 800d224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d228:	f800 3b01 	strb.w	r3, [r0], #1
 800d22c:	e7f7      	b.n	800d21e <memcpy.isra.0+0x2>

0800d22e <memcmp>:
 800d22e:	b510      	push	{r4, lr}
 800d230:	3901      	subs	r1, #1
 800d232:	4402      	add	r2, r0
 800d234:	4290      	cmp	r0, r2
 800d236:	d101      	bne.n	800d23c <memcmp+0xe>
 800d238:	2000      	movs	r0, #0
 800d23a:	e005      	b.n	800d248 <memcmp+0x1a>
 800d23c:	7803      	ldrb	r3, [r0, #0]
 800d23e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d242:	42a3      	cmp	r3, r4
 800d244:	d001      	beq.n	800d24a <memcmp+0x1c>
 800d246:	1b18      	subs	r0, r3, r4
 800d248:	bd10      	pop	{r4, pc}
 800d24a:	3001      	adds	r0, #1
 800d24c:	e7f2      	b.n	800d234 <memcmp+0x6>
	...

0800d250 <ArtNetNode::HandleIpProg()>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	f8d0 4c80 	ldr.w	r4, [r0, #3200]	@ 0xc80
 800d258:	4e6a      	ldr	r6, [pc, #424]	@ (800d404 <ArtNetNode::HandleIpProg()+0x1b4>)
 800d25a:	f894 800e 	ldrb.w	r8, [r4, #14]
 800d25e:	7eb7      	ldrb	r7, [r6, #26]
 800d260:	2300      	movs	r3, #0
 800d262:	7223      	strb	r3, [r4, #8]
 800d264:	f06f 0306 	mvn.w	r3, #6
 800d268:	7263      	strb	r3, [r4, #9]
 800d26a:	f008 03c0 	and.w	r3, r8, #192	@ 0xc0
 800d26e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d270:	b085      	sub	sp, #20
 800d272:	4605      	mov	r5, r0
 800d274:	f3c7 0740 	ubfx	r7, r7, #1, #1
 800d278:	d103      	bne.n	800d282 <ArtNetNode::HandleIpProg()+0x32>
 800d27a:	4b63      	ldr	r3, [pc, #396]	@ (800d408 <ArtNetNode::HandleIpProg()+0x1b8>)
 800d27c:	6818      	ldr	r0, [r3, #0]
 800d27e:	f008 fd88 	bl	8015d92 <Network::EnableDhcp()>
 800d282:	f008 0388 	and.w	r3, r8, #136	@ 0x88
 800d286:	2b88      	cmp	r3, #136	@ 0x88
 800d288:	d104      	bne.n	800d294 <ArtNetNode::HandleIpProg()+0x44>
 800d28a:	4b5f      	ldr	r3, [pc, #380]	@ (800d408 <ArtNetNode::HandleIpProg()+0x1b8>)
 800d28c:	2100      	movs	r1, #0
 800d28e:	6818      	ldr	r0, [r3, #0]
 800d290:	f008 fcf4 	bl	8015c7c <Network::SetIp(unsigned long)>
 800d294:	f008 0384 	and.w	r3, r8, #132	@ 0x84
 800d298:	2b84      	cmp	r3, #132	@ 0x84
 800d29a:	f8df a170 	ldr.w	sl, [pc, #368]	@ 800d40c <ArtNetNode::HandleIpProg()+0x1bc>
 800d29e:	f104 0910 	add.w	r9, r4, #16
 800d2a2:	d10a      	bne.n	800d2ba <ArtNetNode::HandleIpProg()+0x6a>
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	2204      	movs	r2, #4
 800d2aa:	f7ff ffb7 	bl	800d21c <memcpy.isra.0>
 800d2ae:	4b56      	ldr	r3, [pc, #344]	@ (800d408 <ArtNetNode::HandleIpProg()+0x1b8>)
 800d2b0:	f8da 1000 	ldr.w	r1, [sl]
 800d2b4:	6818      	ldr	r0, [r3, #0]
 800d2b6:	f008 fce1 	bl	8015c7c <Network::SetIp(unsigned long)>
 800d2ba:	f008 0382 	and.w	r3, r8, #130	@ 0x82
 800d2be:	2b82      	cmp	r3, #130	@ 0x82
 800d2c0:	d10b      	bne.n	800d2da <ArtNetNode::HandleIpProg()+0x8a>
 800d2c2:	4852      	ldr	r0, [pc, #328]	@ (800d40c <ArtNetNode::HandleIpProg()+0x1bc>)
 800d2c4:	f104 0114 	add.w	r1, r4, #20
 800d2c8:	2204      	movs	r2, #4
 800d2ca:	f7ff ffa7 	bl	800d21c <memcpy.isra.0>
 800d2ce:	4b4e      	ldr	r3, [pc, #312]	@ (800d408 <ArtNetNode::HandleIpProg()+0x1b8>)
 800d2d0:	f8da 1000 	ldr.w	r1, [sl]
 800d2d4:	6818      	ldr	r0, [r3, #0]
 800d2d6:	f008 fcf1 	bl	8015cbc <Network::SetNetmask(unsigned long)>
 800d2da:	f008 0890 	and.w	r8, r8, #144	@ 0x90
 800d2de:	f1b8 0f90 	cmp.w	r8, #144	@ 0x90
 800d2e2:	d10b      	bne.n	800d2fc <ArtNetNode::HandleIpProg()+0xac>
 800d2e4:	4849      	ldr	r0, [pc, #292]	@ (800d40c <ArtNetNode::HandleIpProg()+0x1bc>)
 800d2e6:	f104 011a 	add.w	r1, r4, #26
 800d2ea:	2204      	movs	r2, #4
 800d2ec:	f7ff ff96 	bl	800d21c <memcpy.isra.0>
 800d2f0:	4b45      	ldr	r3, [pc, #276]	@ (800d408 <ArtNetNode::HandleIpProg()+0x1b8>)
 800d2f2:	f8da 1000 	ldr.w	r1, [sl]
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	f008 fcfc 	bl	8015cf4 <Network::SetGatewayIp(unsigned long)>
 800d2fc:	7eb3      	ldrb	r3, [r6, #26]
 800d2fe:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d40c <ArtNetNode::HandleIpProg()+0x1bc>
 800d302:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d306:	019b      	lsls	r3, r3, #6
 800d308:	76a3      	strb	r3, [r4, #26]
 800d30a:	7eb3      	ldrb	r3, [r6, #26]
 800d30c:	f04f 0a00 	mov.w	sl, #0
 800d310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d314:	405f      	eors	r7, r3
 800d316:	2204      	movs	r2, #4
 800d318:	6833      	ldr	r3, [r6, #0]
 800d31a:	f884 a01b 	strb.w	sl, [r4, #27]
 800d31e:	4659      	mov	r1, fp
 800d320:	4648      	mov	r0, r9
 800d322:	f8cb 3000 	str.w	r3, [fp]
 800d326:	f7ff ff82 	bl	800d22e <memcmp>
 800d32a:	2204      	movs	r2, #4
 800d32c:	4680      	mov	r8, r0
 800d32e:	4659      	mov	r1, fp
 800d330:	4648      	mov	r0, r9
 800d332:	f7ff ff73 	bl	800d21c <memcpy.isra.0>
 800d336:	6873      	ldr	r3, [r6, #4]
 800d338:	f8cb 3000 	str.w	r3, [fp]
 800d33c:	f104 0314 	add.w	r3, r4, #20
 800d340:	2204      	movs	r2, #4
 800d342:	4659      	mov	r1, fp
 800d344:	4618      	mov	r0, r3
 800d346:	9303      	str	r3, [sp, #12]
 800d348:	f7ff ff71 	bl	800d22e <memcmp>
 800d34c:	9b03      	ldr	r3, [sp, #12]
 800d34e:	9002      	str	r0, [sp, #8]
 800d350:	2204      	movs	r2, #4
 800d352:	4618      	mov	r0, r3
 800d354:	4659      	mov	r1, fp
 800d356:	f7ff ff61 	bl	800d21c <memcpy.isra.0>
 800d35a:	68b3      	ldr	r3, [r6, #8]
 800d35c:	f8cb 3000 	str.w	r3, [fp]
 800d360:	2204      	movs	r2, #4
 800d362:	4659      	mov	r1, fp
 800d364:	f104 001a 	add.w	r0, r4, #26
 800d368:	f7ff ff61 	bl	800d22e <memcmp>
 800d36c:	9b02      	ldr	r3, [sp, #8]
 800d36e:	ea48 0803 	orr.w	r8, r8, r3
 800d372:	ea58 0800 	orrs.w	r8, r8, r0
 800d376:	f04f 0204 	mov.w	r2, #4
 800d37a:	4659      	mov	r1, fp
 800d37c:	f104 001c 	add.w	r0, r4, #28
 800d380:	bf18      	it	ne
 800d382:	f047 0701 	orrne.w	r7, r7, #1
 800d386:	f7ff ff49 	bl	800d21c <memcpy.isra.0>
 800d38a:	6832      	ldr	r2, [r6, #0]
 800d38c:	f884 a020 	strb.w	sl, [r4, #32]
 800d390:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
 800d394:	f8d5 0c7c 	ldr.w	r0, [r5, #3196]	@ 0xc7c
 800d398:	f8d5 1c80 	ldr.w	r1, [r5, #3200]	@ 0xc80
 800d39c:	f8d5 3c84 	ldr.w	r3, [r5, #3204]	@ 0xc84
 800d3a0:	b12a      	cbz	r2, 800d3ae <ArtNetNode::HandleIpProg()+0x15e>
 800d3a2:	f641 1236 	movw	r2, #6454	@ 0x1936
 800d3a6:	9200      	str	r2, [sp, #0]
 800d3a8:	2222      	movs	r2, #34	@ 0x22
 800d3aa:	f009 fe47 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800d3ae:	b337      	cbz	r7, 800d3fe <ArtNetNode::HandleIpProg()+0x1ae>
 800d3b0:	f505 5480 	add.w	r4, r5, #4096	@ 0x1000
 800d3b4:	7eb3      	ldrb	r3, [r6, #26]
 800d3b6:	f894 2990 	ldrb.w	r2, [r4, #2448]	@ 0x990
 800d3ba:	f003 0302 	and.w	r3, r3, #2
 800d3be:	f022 0202 	bic.w	r2, r2, #2
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	f505 50c6 	add.w	r0, r5, #6336	@ 0x18c0
 800d3c8:	f884 3990 	strb.w	r3, [r4, #2448]	@ 0x990
 800d3cc:	2204      	movs	r2, #4
 800d3ce:	4649      	mov	r1, r9
 800d3d0:	3006      	adds	r0, #6
 800d3d2:	f7ff ff23 	bl	800d21c <memcpy.isra.0>
 800d3d6:	f505 50cc 	add.w	r0, r5, #6528	@ 0x1980
 800d3da:	2204      	movs	r2, #4
 800d3dc:	4649      	mov	r1, r9
 800d3de:	300b      	adds	r0, #11
 800d3e0:	f7ff ff1c 	bl	800d21c <memcpy.isra.0>
 800d3e4:	f894 3242 	ldrb.w	r3, [r4, #578]	@ 0x242
 800d3e8:	b14b      	cbz	r3, 800d3fe <ArtNetNode::HandleIpProg()+0x1ae>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	f8d5 2c84 	ldr.w	r2, [r5, #3204]	@ 0xc84
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	b005      	add	sp, #20
 800d3f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fa:	f000 b851 	b.w	800d4a0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>
 800d3fe:	b005      	add	sp, #20
 800d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d404:	2000e230 	andcs	lr, r0, r0, lsr r2
 800d408:	2000e210 	andcs	lr, r0, r0, lsl r2
 800d40c:	2000d2d8 	ldrdcs	sp, [r0], -r8

0800d410 <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)>:
 800d410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d414:	461f      	mov	r7, r3
 800d416:	2328      	movs	r3, #40	@ 0x28
 800d418:	fb03 0301 	mla	r3, r3, r1, r0
 800d41c:	4604      	mov	r4, r0
 800d41e:	f8d3 2ca8 	ldr.w	r2, [r3, #3240]	@ 0xca8
 800d422:	2a01      	cmp	r2, #1
 800d424:	460d      	mov	r5, r1
 800d426:	d138      	bne.n	800d49a <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)+0x8a>
 800d428:	f8d3 3cac 	ldr.w	r3, [r3, #3244]	@ 0xcac
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d110      	bne.n	800d452 <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)+0x42>
 800d430:	f04f 0824 	mov.w	r8, #36	@ 0x24
 800d434:	fb08 0801 	mla	r8, r8, r1, r0
 800d438:	f241 2978 	movw	r9, #4728	@ 0x1278
 800d43c:	f818 6009 	ldrb.w	r6, [r8, r9]
 800d440:	f000 ff3e 	bl	800e2c0 <ArtNetNode::GetGoodOutput4(unsigned long)>
 800d444:	f006 0676 	and.w	r6, r6, #118	@ 0x76
 800d448:	f020 0076 	bic.w	r0, r0, #118	@ 0x76
 800d44c:	4306      	orrs	r6, r0
 800d44e:	f808 6009 	strb.w	r6, [r8, r9]
 800d452:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800d456:	f241 2178 	movw	r1, #4728	@ 0x1278
 800d45a:	f892 396a 	ldrb.w	r3, [r2, #2410]	@ 0x96a
 800d45e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d462:	f882 396a 	strb.w	r3, [r2, #2410]	@ 0x96a
 800d466:	2324      	movs	r3, #36	@ 0x24
 800d468:	fb03 4305 	mla	r3, r3, r5, r4
 800d46c:	5c59      	ldrb	r1, [r3, r1]
 800d46e:	f882 1972 	strb.w	r1, [r2, #2418]	@ 0x972
 800d472:	f241 2179 	movw	r1, #4729	@ 0x1279
 800d476:	5c5b      	ldrb	r3, [r3, r1]
 800d478:	f882 3991 	strb.w	r3, [r2, #2449]	@ 0x991
 800d47c:	2128      	movs	r1, #40	@ 0x28
 800d47e:	2300      	movs	r3, #0
 800d480:	fb01 4405 	mla	r4, r1, r5, r4
 800d484:	f882 396e 	strb.w	r3, [r2, #2414]	@ 0x96e
 800d488:	f894 1ca2 	ldrb.w	r1, [r4, #3234]	@ 0xca2
 800d48c:	f882 197a 	strb.w	r1, [r2, #2426]	@ 0x97a
 800d490:	f882 3976 	strb.w	r3, [r2, #2422]	@ 0x976
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	3301      	adds	r3, #1
 800d498:	603b      	str	r3, [r7, #0]
 800d49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800d4a0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	b089      	sub	sp, #36	@ 0x24
 800d4a6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d5fc <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x15c>
 800d4aa:	9205      	str	r2, [sp, #20]
 800d4ac:	4a50      	ldr	r2, [pc, #320]	@ (800d5f0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x150>)
 800d4ae:	4699      	mov	r9, r3
 800d4b0:	f8db 3000 	ldr.w	r3, [fp]
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	4688      	mov	r8, r1
 800d4b8:	f500 53c6 	add.w	r3, r0, #6336	@ 0x18c0
 800d4bc:	f500 51c6 	add.w	r1, r0, #6336	@ 0x18c0
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	3306      	adds	r3, #6
 800d4c4:	310a      	adds	r1, #10
 800d4c6:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d4ca:	f803 0b01 	strb.w	r0, [r3], #1
 800d4ce:	428b      	cmp	r3, r1
 800d4d0:	d1f9      	bne.n	800d4c6 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x26>
 800d4d2:	f504 53cc 	add.w	r3, r4, #6528	@ 0x1980
 800d4d6:	f504 52cc 	add.w	r2, r4, #6528	@ 0x1980
 800d4da:	4945      	ldr	r1, [pc, #276]	@ (800d5f0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x150>)
 800d4dc:	330b      	adds	r3, #11
 800d4de:	320f      	adds	r2, #15
 800d4e0:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d4e4:	f803 0b01 	strb.w	r0, [r3], #1
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d1f9      	bne.n	800d4e0 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x40>
 800d4ec:	f504 5acb 	add.w	sl, r4, #6496	@ 0x1960
 800d4f0:	f604 46b4 	addw	r6, r4, #3252	@ 0xcb4
 800d4f4:	2700      	movs	r7, #0
 800d4f6:	f10a 0a0d 	add.w	sl, sl, #13
 800d4fa:	4639      	mov	r1, r7
 800d4fc:	3701      	adds	r7, #1
 800d4fe:	f1b8 0f00 	cmp.w	r8, #0
 800d502:	d001      	beq.n	800d508 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x68>
 800d504:	45b8      	cmp	r8, r7
 800d506:	d166      	bne.n	800d5d6 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x136>
 800d508:	f504 53cb 	add.w	r3, r4, #6496	@ 0x1960
 800d50c:	3309      	adds	r3, #9
 800d50e:	2200      	movs	r2, #0
 800d510:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d514:	4553      	cmp	r3, sl
 800d516:	731a      	strb	r2, [r3, #12]
 800d518:	741a      	strb	r2, [r3, #16]
 800d51a:	d1f9      	bne.n	800d510 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x70>
 800d51c:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 800d520:	f816 3c11 	ldrb.w	r3, [r6, #-17]
 800d524:	f885 38ce 	strb.w	r3, [r5, #2254]	@ 0x8ce
 800d528:	f816 3c10 	ldrb.w	r3, [r6, #-16]
 800d52c:	f885 38cf 	strb.w	r3, [r5, #2255]	@ 0x8cf
 800d530:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800d534:	4630      	mov	r0, r6
 800d536:	f885 798f 	strb.w	r7, [r5, #2447]	@ 0x98f
 800d53a:	f1b8 0f00 	cmp.w	r8, #0
 800d53e:	d10c      	bne.n	800d55a <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xba>
 800d540:	f1b9 0f00 	cmp.w	r9, #0
 800d544:	d009      	beq.n	800d55a <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xba>
 800d546:	f836 3c14 	ldrh.w	r3, [r6, #-20]
 800d54a:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d841      	bhi.n	800d5d6 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x136>
 800d552:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800d556:	429a      	cmp	r2, r3
 800d558:	d33d      	bcc.n	800d5d6 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x136>
 800d55a:	f504 53c6 	add.w	r3, r4, #6336	@ 0x18c0
 800d55e:	3316      	adds	r3, #22
 800d560:	f106 0212 	add.w	r2, r6, #18
 800d564:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d568:	f803 cb01 	strb.w	ip, [r3], #1
 800d56c:	4290      	cmp	r0, r2
 800d56e:	d1f9      	bne.n	800d564 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xc4>
 800d570:	4620      	mov	r0, r4
 800d572:	ab06      	add	r3, sp, #24
 800d574:	aa07      	add	r2, sp, #28
 800d576:	f7ff ff4b 	bl	800d410 <ArtNetNode::ProcessPollRelply(unsigned long, unsigned long&, unsigned long&)>
 800d57a:	f8d4 0c94 	ldr.w	r0, [r4, #3220]	@ 0xc94
 800d57e:	b128      	cbz	r0, 800d58c <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0xec>
 800d580:	6803      	ldr	r3, [r0, #0]
 800d582:	69db      	ldr	r3, [r3, #28]
 800d584:	4798      	blx	r3
 800d586:	ba40      	rev16	r0, r0
 800d588:	f8a5 099e 	strh.w	r0, [r5, #2462]	@ 0x99e
 800d58c:	9b06      	ldr	r3, [sp, #24]
 800d58e:	f885 3969 	strb.w	r3, [r5, #2409]	@ 0x969
 800d592:	f8d5 3200 	ldr.w	r3, [r5, #512]	@ 0x200
 800d596:	4a17      	ldr	r2, [pc, #92]	@ (800d5f4 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x154>)
 800d598:	3301      	adds	r3, #1
 800d59a:	f8c5 3200 	str.w	r3, [r5, #512]	@ 0x200
 800d59e:	9202      	str	r2, [sp, #8]
 800d5a0:	2208      	movs	r2, #8
 800d5a2:	e9cd 3200 	strd	r3, r2, [sp]
 800d5a6:	f504 50c9 	add.w	r0, r4, #6432	@ 0x1920
 800d5aa:	f895 3240 	ldrb.w	r3, [r5, #576]	@ 0x240
 800d5ae:	4a12      	ldr	r2, [pc, #72]	@ (800d5f8 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x158>)
 800d5b0:	2140      	movs	r1, #64	@ 0x40
 800d5b2:	3008      	adds	r0, #8
 800d5b4:	f00e ff62 	bl	801c47c <snprintf>
 800d5b8:	f8db 3000 	ldr.w	r3, [fp]
 800d5bc:	f8d4 0c7c 	ldr.w	r0, [r4, #3196]	@ 0xc7c
 800d5c0:	f504 51c5 	add.w	r1, r4, #6304	@ 0x18a0
 800d5c4:	311c      	adds	r1, #28
 800d5c6:	b133      	cbz	r3, 800d5d6 <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x136>
 800d5c8:	f641 1336 	movw	r3, #6454	@ 0x1936
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	22ef      	movs	r2, #239	@ 0xef
 800d5d0:	9b05      	ldr	r3, [sp, #20]
 800d5d2:	f009 fd33 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800d5d6:	2f22      	cmp	r7, #34	@ 0x22
 800d5d8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800d5dc:	d18d      	bne.n	800d4fa <ArtNetNode::SendPollRelply(unsigned long, unsigned long, artnet::ArtPollQueue*)+0x5a>
 800d5de:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f884 3247 	strb.w	r3, [r4, #583]	@ 0x247
 800d5e8:	b009      	add	sp, #36	@ 0x24
 800d5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ee:	bf00      	nop
 800d5f0:	2000d2dc 	ldrdcs	sp, [r0], -ip
 800d5f4:	0801d4d0 	stmdaeq	r1, {r4, r6, r7, sl, ip, lr, pc}
 800d5f8:	0801d4ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, sl, ip, lr, pc}
 800d5fc:	2000e230 	andcs	lr, r0, r0, lsr r2

0800d600 <ArtNetNode::HandlePoll()>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	f8d0 1c80 	ldr.w	r1, [r0, #3200]	@ 0xc80
 800d606:	7b0a      	ldrb	r2, [r1, #12]
 800d608:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800d60c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800d610:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
 800d614:	7b0a      	ldrb	r2, [r1, #12]
 800d616:	f012 0204 	ands.w	r2, r2, #4
 800d61a:	d04b      	beq.n	800d6b4 <ArtNetNode::HandlePoll()+0xb4>
 800d61c:	f8d3 41fc 	ldr.w	r4, [r3, #508]	@ 0x1fc
 800d620:	f893 5244 	ldrb.w	r5, [r3, #580]	@ 0x244
 800d624:	2201      	movs	r2, #1
 800d626:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
 800d62a:	b97c      	cbnz	r4, 800d64c <ArtNetNode::HandlePoll()+0x4c>
 800d62c:	f8d0 2c84 	ldr.w	r2, [r0, #3204]	@ 0xc84
 800d630:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
 800d634:	b1bd      	cbz	r5, 800d666 <ArtNetNode::HandlePoll()+0x66>
 800d636:	7b4a      	ldrb	r2, [r1, #13]
 800d638:	f893 424d 	ldrb.w	r4, [r3, #589]	@ 0x24d
 800d63c:	42a2      	cmp	r2, r4
 800d63e:	bf28      	it	cs
 800d640:	4622      	movcs	r2, r4
 800d642:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d
 800d646:	4a1e      	ldr	r2, [pc, #120]	@ (800d6c0 <ArtNetNode::HandlePoll()+0xc0>)
 800d648:	68d2      	ldr	r2, [r2, #12]
 800d64a:	e014      	b.n	800d676 <ArtNetNode::HandlePoll()+0x76>
 800d64c:	2d00      	cmp	r5, #0
 800d64e:	d1f2      	bne.n	800d636 <ArtNetNode::HandlePoll()+0x36>
 800d650:	f8d0 5c84 	ldr.w	r5, [r0, #3204]	@ 0xc84
 800d654:	42ac      	cmp	r4, r5
 800d656:	d006      	beq.n	800d666 <ArtNetNode::HandlePoll()+0x66>
 800d658:	4c19      	ldr	r4, [pc, #100]	@ (800d6c0 <ArtNetNode::HandlePoll()+0xc0>)
 800d65a:	f883 2244 	strb.w	r2, [r3, #580]	@ 0x244
 800d65e:	68e4      	ldr	r4, [r4, #12]
 800d660:	f8c3 41f8 	str.w	r4, [r3, #504]	@ 0x1f8
 800d664:	e7e7      	b.n	800d636 <ArtNetNode::HandlePoll()+0x36>
 800d666:	7b4a      	ldrb	r2, [r1, #13]
 800d668:	f883 224d 	strb.w	r2, [r3, #589]	@ 0x24d
 800d66c:	7b0a      	ldrb	r2, [r1, #12]
 800d66e:	0712      	lsls	r2, r2, #28
 800d670:	d5e9      	bpl.n	800d646 <ArtNetNode::HandlePoll()+0x46>
 800d672:	f8d0 2c84 	ldr.w	r2, [r0, #3204]	@ 0xc84
 800d676:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
 800d67a:	7b0b      	ldrb	r3, [r1, #12]
 800d67c:	f013 0301 	ands.w	r3, r3, #1
 800d680:	bf1a      	itte	ne
 800d682:	7bcc      	ldrbne	r4, [r1, #15]
 800d684:	7c4b      	ldrbne	r3, [r1, #17]
 800d686:	f647 74ff 	movweq	r4, #32767	@ 0x7fff
 800d68a:	f241 2210 	movw	r2, #4624	@ 0x1210
 800d68e:	f1a0 050c 	sub.w	r5, r0, #12
 800d692:	f5b2 5f92 	cmp.w	r2, #4672	@ 0x1240
 800d696:	d00c      	beq.n	800d6b2 <ArtNetNode::HandlePoll()+0xb2>
 800d698:	f102 010c 	add.w	r1, r2, #12
 800d69c:	586e      	ldr	r6, [r5, r1]
 800d69e:	b966      	cbnz	r6, 800d6ba <ArtNetNode::HandlePoll()+0xba>
 800d6a0:	4d08      	ldr	r5, [pc, #32]	@ (800d6c4 <ArtNetNode::HandlePoll()+0xc4>)
 800d6a2:	682d      	ldr	r5, [r5, #0]
 800d6a4:	5085      	str	r5, [r0, r2]
 800d6a6:	1881      	adds	r1, r0, r2
 800d6a8:	f8d0 2c84 	ldr.w	r2, [r0, #3204]	@ 0xc84
 800d6ac:	604a      	str	r2, [r1, #4]
 800d6ae:	810c      	strh	r4, [r1, #8]
 800d6b0:	814b      	strh	r3, [r1, #10]
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	f883 2243 	strb.w	r2, [r3, #579]	@ 0x243
 800d6b8:	e7dd      	b.n	800d676 <ArtNetNode::HandlePoll()+0x76>
 800d6ba:	460a      	mov	r2, r1
 800d6bc:	e7e9      	b.n	800d692 <ArtNetNode::HandlePoll()+0x92>
 800d6be:	bf00      	nop
 800d6c0:	2000e230 	andcs	lr, r0, r0, lsr r2
 800d6c4:	2001bcd0 	ldrdcs	fp, [r1], -r0

0800d6c8 <ArtNetNode::HandleSync()>:
 800d6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6cc:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	f896 3245 	ldrb.w	r3, [r6, #581]	@ 0x245
 800d6d6:	b923      	cbnz	r3, 800d6e2 <ArtNetNode::HandleSync()+0x1a>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f886 3245 	strb.w	r3, [r6, #581]	@ 0x245
 800d6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e2:	f500 5793 	add.w	r7, r0, #4704	@ 0x1260
 800d6e6:	2500      	movs	r5, #0
 800d6e8:	371c      	adds	r7, #28
 800d6ea:	f04f 0824 	mov.w	r8, #36	@ 0x24
 800d6ee:	fb08 f305 	mul.w	r3, r8, r5
 800d6f2:	5cfb      	ldrb	r3, [r7, r3]
 800d6f4:	b12b      	cbz	r3, 800d702 <ArtNetNode::HandleSync()+0x3a>
 800d6f6:	f8d4 0c94 	ldr.w	r0, [r4, #3220]	@ 0xc94
 800d6fa:	6803      	ldr	r3, [r0, #0]
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	695b      	ldr	r3, [r3, #20]
 800d700:	4798      	blx	r3
 800d702:	3501      	adds	r5, #1
 800d704:	2d22      	cmp	r5, #34	@ 0x22
 800d706:	d1f2      	bne.n	800d6ee <ArtNetNode::HandleSync()+0x26>
 800d708:	f8d4 0c94 	ldr.w	r0, [r4, #3220]	@ 0xc94
 800d70c:	6803      	ldr	r3, [r0, #0]
 800d70e:	699b      	ldr	r3, [r3, #24]
 800d710:	4798      	blx	r3
 800d712:	f504 5392 	add.w	r3, r4, #4672	@ 0x1240
 800d716:	f504 54b9 	add.w	r4, r4, #5920	@ 0x1720
 800d71a:	331c      	adds	r3, #28
 800d71c:	3404      	adds	r4, #4
 800d71e:	2100      	movs	r1, #0
 800d720:	2201      	movs	r2, #1
 800d722:	42a3      	cmp	r3, r4
 800d724:	d0db      	beq.n	800d6de <ArtNetNode::HandleSync()+0x16>
 800d726:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d72a:	b130      	cbz	r0, 800d73a <ArtNetNode::HandleSync()+0x72>
 800d72c:	7fd8      	ldrb	r0, [r3, #31]
 800d72e:	f883 1020 	strb.w	r1, [r3, #32]
 800d732:	b910      	cbnz	r0, 800d73a <ArtNetNode::HandleSync()+0x72>
 800d734:	77da      	strb	r2, [r3, #31]
 800d736:	f886 2247 	strb.w	r2, [r6, #583]	@ 0x247
 800d73a:	3324      	adds	r3, #36	@ 0x24
 800d73c:	e7f1      	b.n	800d722 <ArtNetNode::HandleSync()+0x5a>

0800d73e <ArtNetNode::HandleTimeSync()>:
 800d73e:	4770      	bx	lr

0800d740 <ArtNetNode::Print()>:
 800d740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	4a2e      	ldr	r2, [pc, #184]	@ (800d800 <ArtNetNode::Print()+0xc0>)
 800d746:	4604      	mov	r4, r0
 800d748:	7853      	ldrb	r3, [r2, #1]
 800d74a:	482e      	ldr	r0, [pc, #184]	@ (800d804 <ArtNetNode::Print()+0xc4>)
 800d74c:	7812      	ldrb	r2, [r2, #0]
 800d74e:	2104      	movs	r1, #4
 800d750:	f00e fe6c 	bl	801c42c <printf>
 800d754:	f504 5880 	add.w	r8, r4, #4096	@ 0x1000
 800d758:	f504 51c7 	add.w	r1, r4, #6368	@ 0x18e0
 800d75c:	482a      	ldr	r0, [pc, #168]	@ (800d808 <ArtNetNode::Print()+0xc8>)
 800d75e:	3108      	adds	r1, #8
 800d760:	f00e fe64 	bl	801c42c <printf>
 800d764:	f898 324b 	ldrb.w	r3, [r8, #587]	@ 0x24b
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d043      	beq.n	800d7f4 <ArtNetNode::Print()+0xb4>
 800d76c:	4827      	ldr	r0, [pc, #156]	@ (800d80c <ArtNetNode::Print()+0xcc>)
 800d76e:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 800d82c <ArtNetNode::Print()+0xec>
 800d772:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 800d830 <ArtNetNode::Print()+0xf0>
 800d776:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 800d834 <ArtNetNode::Print()+0xf4>
 800d77a:	f00e fe57 	bl	801c42c <printf>
 800d77e:	f504 5593 	add.w	r5, r4, #4704	@ 0x1260
 800d782:	4626      	mov	r6, r4
 800d784:	3518      	adds	r5, #24
 800d786:	2700      	movs	r7, #0
 800d788:	f8d6 3ca8 	ldr.w	r3, [r6, #3240]	@ 0xca8
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d121      	bne.n	800d7d4 <ArtNetNode::Print()+0x94>
 800d790:	782b      	ldrb	r3, [r5, #0]
 800d792:	f8b6 2ca0 	ldrh.w	r2, [r6, #3232]	@ 0xca0
 800d796:	f013 0f02 	tst.w	r3, #2
 800d79a:	bf14      	ite	ne
 800d79c:	464b      	movne	r3, r9
 800d79e:	4653      	moveq	r3, sl
 800d7a0:	4639      	mov	r1, r7
 800d7a2:	4658      	mov	r0, fp
 800d7a4:	f00e fe42 	bl	801c42c <printf>
 800d7a8:	4a19      	ldr	r2, [pc, #100]	@ (800d810 <ArtNetNode::Print()+0xd0>)
 800d7aa:	4b1a      	ldr	r3, [pc, #104]	@ (800d814 <ArtNetNode::Print()+0xd4>)
 800d7ac:	f8d6 1cac 	ldr.w	r1, [r6, #3244]	@ 0xcac
 800d7b0:	4819      	ldr	r0, [pc, #100]	@ (800d818 <ArtNetNode::Print()+0xd8>)
 800d7b2:	2900      	cmp	r1, #0
 800d7b4:	bf14      	ite	ne
 800d7b6:	4611      	movne	r1, r2
 800d7b8:	4619      	moveq	r1, r3
 800d7ba:	f00e fe37 	bl	801c42c <printf>
 800d7be:	f995 1001 	ldrsb.w	r1, [r5, #1]
 800d7c2:	4a16      	ldr	r2, [pc, #88]	@ (800d81c <ArtNetNode::Print()+0xdc>)
 800d7c4:	4b16      	ldr	r3, [pc, #88]	@ (800d820 <ArtNetNode::Print()+0xe0>)
 800d7c6:	4817      	ldr	r0, [pc, #92]	@ (800d824 <ArtNetNode::Print()+0xe4>)
 800d7c8:	ea12 0121 	ands.w	r1, r2, r1, asr #32
 800d7cc:	bf38      	it	cc
 800d7ce:	4619      	movcc	r1, r3
 800d7d0:	f00e fe2c 	bl	801c42c <printf>
 800d7d4:	3701      	adds	r7, #1
 800d7d6:	2f22      	cmp	r7, #34	@ 0x22
 800d7d8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800d7dc:	f105 0524 	add.w	r5, r5, #36	@ 0x24
 800d7e0:	d1d2      	bne.n	800d788 <ArtNetNode::Print()+0x48>
 800d7e2:	f898 324b 	ldrb.w	r3, [r8, #587]	@ 0x24b
 800d7e6:	b12b      	cbz	r3, 800d7f4 <ArtNetNode::Print()+0xb4>
 800d7e8:	f898 31f4 	ldrb.w	r3, [r8, #500]	@ 0x1f4
 800d7ec:	b113      	cbz	r3, 800d7f4 <ArtNetNode::Print()+0xb4>
 800d7ee:	480e      	ldr	r0, [pc, #56]	@ (800d828 <ArtNetNode::Print()+0xe8>)
 800d7f0:	f00e fe1c 	bl	801c42c <printf>
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fa:	f001 bb8f 	b.w	800ef1c <E131Bridge::Print()>
 800d7fe:	bf00      	nop
 800d800:	08020b8b 	stmdaeq	r2, {r0, r1, r3, r7, r8, r9, fp}
 800d804:	0801d4f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, sl, ip, lr, pc}
 800d808:	0801d509 	stmdaeq	r1, {r0, r3, r8, sl, ip, lr, pc}
 800d80c:	0801d51b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, ip, lr, pc}
 800d810:	0801d4e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, ip, lr, pc}
 800d814:	0801d4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, lr, pc}
 800d818:	0801d0c2 	stmdaeq	r1, {r1, r6, r7, ip, lr, pc}
 800d81c:	0801d4f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, ip, lr, pc}
 800d820:	0801d4ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, sl, ip, lr, pc}
 800d824:	0801dbeb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 800d828:	0801d538 	stmdaeq	r1, {r3, r4, r5, r8, sl, ip, lr, pc}
 800d82c:	0801d4dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, ip, lr, pc}
 800d830:	0801d4d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, ip, lr, pc}
 800d834:	0801d524 	stmdaeq	r1, {r2, r5, r8, sl, ip, lr, pc}

0800d838 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>:
 800d838:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d83a:	88c6      	ldrh	r6, [r0, #6]
 800d83c:	8885      	ldrh	r5, [r0, #4]
 800d83e:	42ae      	cmp	r6, r5
 800d840:	d216      	bcs.n	800d870 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x38>
 800d842:	4604      	mov	r4, r0
 800d844:	6800      	ldr	r0, [r0, #0]
 800d846:	1bad      	subs	r5, r5, r6
 800d848:	4430      	add	r0, r6
 800d84a:	7a26      	ldrb	r6, [r4, #8]
 800d84c:	b923      	cbnz	r3, 800d858 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x20>
 800d84e:	b926      	cbnz	r6, 800d85a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x22>
 800d850:	9200      	str	r2, [sp, #0]
 800d852:	460b      	mov	r3, r1
 800d854:	4a09      	ldr	r2, [pc, #36]	@ (800d87c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x44>)
 800d856:	e003      	b.n	800d860 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800d858:	b166      	cbz	r6, 800d874 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x3c>
 800d85a:	9200      	str	r2, [sp, #0]
 800d85c:	4a08      	ldr	r2, [pc, #32]	@ (800d880 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x48>)
 800d85e:	460b      	mov	r3, r1
 800d860:	4629      	mov	r1, r5
 800d862:	f00e fe0b 	bl	801c47c <snprintf>
 800d866:	4285      	cmp	r5, r0
 800d868:	bfa2      	ittt	ge
 800d86a:	88e3      	ldrhge	r3, [r4, #6]
 800d86c:	181b      	addge	r3, r3, r0
 800d86e:	80e3      	strhge	r3, [r4, #6]
 800d870:	b002      	add	sp, #8
 800d872:	bd70      	pop	{r4, r5, r6, pc}
 800d874:	9200      	str	r2, [sp, #0]
 800d876:	460b      	mov	r3, r1
 800d878:	4a02      	ldr	r2, [pc, #8]	@ (800d884 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x4c>)
 800d87a:	e7f1      	b.n	800d860 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 800d87c:	0801d221 	stmdaeq	r1, {r0, r5, r9, ip, lr, pc}
 800d880:	0801d216 	stmdaeq	r1, {r1, r2, r4, r9, ip, lr, pc}
 800d884:	0801d222 	stmdaeq	r1, {r1, r5, r9, ip, lr, pc}

0800d888 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800d888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d88a:	460b      	mov	r3, r1
 800d88c:	8885      	ldrh	r5, [r0, #4]
 800d88e:	88c1      	ldrh	r1, [r0, #6]
 800d890:	42a9      	cmp	r1, r5
 800d892:	d214      	bcs.n	800d8be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800d894:	4604      	mov	r4, r0
 800d896:	6800      	ldr	r0, [r0, #0]
 800d898:	1a6d      	subs	r5, r5, r1
 800d89a:	4408      	add	r0, r1
 800d89c:	7a21      	ldrb	r1, [r4, #8]
 800d89e:	b91a      	cbnz	r2, 800d8a8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800d8a0:	b919      	cbnz	r1, 800d8aa <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800d8a2:	4a0a      	ldr	r2, [pc, #40]	@ (800d8cc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800d8a4:	9100      	str	r1, [sp, #0]
 800d8a6:	e002      	b.n	800d8ae <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d8a8:	b159      	cbz	r1, 800d8c2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800d8aa:	9200      	str	r2, [sp, #0]
 800d8ac:	4a08      	ldr	r2, [pc, #32]	@ (800d8d0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	f00e fde4 	bl	801c47c <snprintf>
 800d8b4:	4285      	cmp	r5, r0
 800d8b6:	bfa2      	ittt	ge
 800d8b8:	88e3      	ldrhge	r3, [r4, #6]
 800d8ba:	181b      	addge	r3, r3, r0
 800d8bc:	80e3      	strhge	r3, [r4, #6]
 800d8be:	b003      	add	sp, #12
 800d8c0:	bd30      	pop	{r4, r5, pc}
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	9200      	str	r2, [sp, #0]
 800d8c6:	4a03      	ldr	r2, [pc, #12]	@ (800d8d4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800d8c8:	e7f1      	b.n	800d8ae <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d8ca:	bf00      	nop
 800d8cc:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 800d8d0:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 800d8d4:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

0800d8d8 <ArtNetParamsStore::Copy(artnetparams::Params*)>:
 800d8d8:	b507      	push	{r0, r1, r2, lr}
 800d8da:	2300      	movs	r3, #0
 800d8dc:	2101      	movs	r1, #1
 800d8de:	e9cd 3100 	strd	r3, r1, [sp]
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	4804      	ldr	r0, [pc, #16]	@ (800d8f8 <ArtNetParamsStore::Copy(artnetparams::Params*)+0x20>)
 800d8e6:	23dc      	movs	r3, #220	@ 0xdc
 800d8e8:	6800      	ldr	r0, [r0, #0]
 800d8ea:	2119      	movs	r1, #25
 800d8ec:	f00b f874 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800d8f0:	b003      	add	sp, #12
 800d8f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8f6:	bf00      	nop
 800d8f8:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800d8fc <ArtNetParams::ArtNetParams()>:
 800d8fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d93c <ArtNetParams::ArtNetParams()+0x40>)
 800d8fe:	b570      	push	{r4, r5, r6, lr}
 800d900:	22dc      	movs	r2, #220	@ 0xdc
 800d902:	4604      	mov	r4, r0
 800d904:	2100      	movs	r1, #0
 800d906:	681e      	ldr	r6, [r3, #0]
 800d908:	f00e faac 	bl	801be64 <memset>
 800d90c:	2301      	movs	r3, #1
 800d90e:	7163      	strb	r3, [r4, #5]
 800d910:	2302      	movs	r3, #2
 800d912:	71e3      	strb	r3, [r4, #7]
 800d914:	2303      	movs	r3, #3
 800d916:	7263      	strb	r3, [r4, #9]
 800d918:	2304      	movs	r3, #4
 800d91a:	2500      	movs	r5, #0
 800d91c:	72e3      	strb	r3, [r4, #11]
 800d91e:	2355      	movs	r3, #85	@ 0x55
 800d920:	4630      	mov	r0, r6
 800d922:	71a5      	strb	r5, [r4, #6]
 800d924:	7225      	strb	r5, [r4, #8]
 800d926:	72a5      	strb	r5, [r4, #10]
 800d928:	7325      	strb	r5, [r4, #12]
 800d92a:	7363      	strb	r3, [r4, #13]
 800d92c:	73a5      	strb	r5, [r4, #14]
 800d92e:	f104 0113 	add.w	r1, r4, #19
 800d932:	f7fe fbb1 	bl	800c098 <ArtNetNode::GetLongNameDefault(char*)>
 800d936:	74a5      	strb	r5, [r4, #18]
 800d938:	4620      	mov	r0, r4
 800d93a:	bd70      	pop	{r4, r5, r6, pc}
 800d93c:	2000d2d4 	ldrdcs	sp, [r0], -r4

0800d940 <ArtNetParams::Load()>:
 800d940:	b508      	push	{r3, lr}
 800d942:	2200      	movs	r2, #0
 800d944:	7002      	strb	r2, [r0, #0]
 800d946:	7042      	strb	r2, [r0, #1]
 800d948:	7082      	strb	r2, [r0, #2]
 800d94a:	70c2      	strb	r2, [r0, #3]
 800d94c:	f7ff ffc4 	bl	800d8d8 <ArtNetParamsStore::Copy(artnetparams::Params*)>
 800d950:	2001      	movs	r0, #1
 800d952:	bd08      	pop	{r3, pc}

0800d954 <ArtNetParams::Load(char const*, unsigned long)>:
 800d954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d956:	2500      	movs	r5, #0
 800d958:	b087      	sub	sp, #28
 800d95a:	4604      	mov	r4, r0
 800d95c:	460e      	mov	r6, r1
 800d95e:	4617      	mov	r7, r2
 800d960:	7005      	strb	r5, [r0, #0]
 800d962:	7045      	strb	r5, [r0, #1]
 800d964:	7085      	strb	r5, [r0, #2]
 800d966:	70c5      	strb	r5, [r0, #3]
 800d968:	4602      	mov	r2, r0
 800d96a:	490c      	ldr	r1, [pc, #48]	@ (800d99c <ArtNetParams::Load(char const*, unsigned long)+0x48>)
 800d96c:	a804      	add	r0, sp, #16
 800d96e:	f00b fb0d 	bl	8018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d972:	463a      	mov	r2, r7
 800d974:	4631      	mov	r1, r6
 800d976:	a804      	add	r0, sp, #16
 800d978:	f00b fb0c 	bl	8018f94 <ReadConfigFile::Read(char const*, unsigned int)>
 800d97c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800d980:	23dc      	movs	r3, #220	@ 0xdc
 800d982:	4807      	ldr	r0, [pc, #28]	@ (800d9a0 <ArtNetParams::Load(char const*, unsigned long)+0x4c>)
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	462a      	mov	r2, r5
 800d988:	4623      	mov	r3, r4
 800d98a:	2119      	movs	r1, #25
 800d98c:	6800      	ldr	r0, [r0, #0]
 800d98e:	f00a fffd 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800d992:	a804      	add	r0, sp, #16
 800d994:	f00b fafd 	bl	8018f92 <ReadConfigFile::~ReadConfigFile()>
 800d998:	b007      	add	sp, #28
 800d99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99c:	0800dd41 	stmdaeq	r0, {r0, r6, r8, sl, fp, ip, lr, pc}
 800d9a0:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800d9a4 <ArtNetParams::SetBool(unsigned char, unsigned long)>:
 800d9a4:	6803      	ldr	r3, [r0, #0]
 800d9a6:	b111      	cbz	r1, 800d9ae <ArtNetParams::SetBool(unsigned char, unsigned long)+0xa>
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	6003      	str	r3, [r0, #0]
 800d9ac:	4770      	bx	lr
 800d9ae:	ea23 0302 	bic.w	r3, r3, r2
 800d9b2:	e7fa      	b.n	800d9aa <ArtNetParams::SetBool(unsigned char, unsigned long)+0x6>

0800d9b4 <ArtNetParams::callbackFunction(char const*)>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	f8df b338 	ldr.w	fp, [pc, #824]	@ 800dcf4 <ArtNetParams::callbackFunction(char const*)+0x340>
 800d9bc:	b093      	sub	sp, #76	@ 0x4c
 800d9be:	4604      	mov	r4, r0
 800d9c0:	460e      	mov	r6, r1
 800d9c2:	f100 0853 	add.w	r8, r0, #83	@ 0x53
 800d9c6:	2500      	movs	r5, #0
 800d9c8:	466a      	mov	r2, sp
 800d9ca:	4659      	mov	r1, fp
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f00b fbc2 	bl	8019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d9d2:	b9c0      	cbnz	r0, 800da06 <ArtNetParams::callbackFunction(char const*)+0x52>
 800d9d4:	f8bd 1000 	ldrh.w	r1, [sp]
 800d9d8:	b161      	cbz	r1, 800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800d9da:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800d9de:	f8a3 1005 	strh.w	r1, [r3, #5]
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	40ab      	lsls	r3, r5
 800d9e6:	3501      	adds	r5, #1
 800d9e8:	b2ad      	uxth	r5, r5
 800d9ea:	42a9      	cmp	r1, r5
 800d9ec:	6822      	ldr	r2, [r4, #0]
 800d9ee:	d006      	beq.n	800d9fe <ArtNetParams::callbackFunction(char const*)+0x4a>
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	6023      	str	r3, [r4, #0]
 800d9f4:	b013      	add	sp, #76	@ 0x4c
 800d9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fa:	464d      	mov	r5, r9
 800d9fc:	e7e4      	b.n	800d9c8 <ArtNetParams::callbackFunction(char const*)+0x14>
 800d9fe:	ea22 0203 	bic.w	r2, r2, r3
 800da02:	6022      	str	r2, [r4, #0]
 800da04:	e7f6      	b.n	800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800da06:	49af      	ldr	r1, [pc, #700]	@ (800dcc4 <ArtNetParams::callbackFunction(char const*)+0x310>)
 800da08:	2712      	movs	r7, #18
 800da0a:	2307      	movs	r3, #7
 800da0c:	436f      	muls	r7, r5
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	aa02      	add	r2, sp, #8
 800da12:	ab01      	add	r3, sp, #4
 800da14:	4439      	add	r1, r7
 800da16:	4630      	mov	r0, r6
 800da18:	f00b faf2 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d15f      	bne.n	800dae0 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800da20:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800da24:	f043 0320 	orr.w	r3, r3, #32
 800da28:	2b69      	cmp	r3, #105	@ 0x69
 800da2a:	d12e      	bne.n	800da8a <ArtNetParams::callbackFunction(char const*)+0xd6>
 800da2c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800da30:	f043 0320 	orr.w	r3, r3, #32
 800da34:	2b6e      	cmp	r3, #110	@ 0x6e
 800da36:	d151      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800da38:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800da3c:	f043 0320 	orr.w	r3, r3, #32
 800da40:	2b70      	cmp	r3, #112	@ 0x70
 800da42:	d14b      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800da44:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800da48:	f043 0320 	orr.w	r3, r3, #32
 800da4c:	2b75      	cmp	r3, #117	@ 0x75
 800da4e:	d145      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800da50:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800da54:	f043 0320 	orr.w	r3, r3, #32
 800da58:	3b74      	subs	r3, #116	@ 0x74
 800da5a:	bf18      	it	ne
 800da5c:	2301      	movne	r3, #1
 800da5e:	2b02      	cmp	r3, #2
 800da60:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800da64:	f8b4 200d 	ldrh.w	r2, [r4, #13]
 800da68:	f04f 0103 	mov.w	r1, #3
 800da6c:	fa01 f105 	lsl.w	r1, r1, r5
 800da70:	bf18      	it	ne
 800da72:	2301      	movne	r3, #1
 800da74:	ea22 0201 	bic.w	r2, r2, r1
 800da78:	bf0b      	itete	eq
 800da7a:	40ab      	lsleq	r3, r5
 800da7c:	fa03 f505 	lslne.w	r5, r3, r5
 800da80:	431a      	orreq	r2, r3
 800da82:	432a      	orrne	r2, r5
 800da84:	f8a4 200d 	strh.w	r2, [r4, #13]
 800da88:	e7b4      	b.n	800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800da8a:	2b64      	cmp	r3, #100	@ 0x64
 800da8c:	d126      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800da8e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800da92:	f043 0320 	orr.w	r3, r3, #32
 800da96:	2b69      	cmp	r3, #105	@ 0x69
 800da98:	d120      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800da9a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800da9e:	f043 0320 	orr.w	r3, r3, #32
 800daa2:	2b73      	cmp	r3, #115	@ 0x73
 800daa4:	d11a      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800daa6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800daaa:	f043 0320 	orr.w	r3, r3, #32
 800daae:	2b61      	cmp	r3, #97	@ 0x61
 800dab0:	d114      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800dab2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800dab6:	f043 0320 	orr.w	r3, r3, #32
 800daba:	2b62      	cmp	r3, #98	@ 0x62
 800dabc:	d10e      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800dabe:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800dac2:	f043 0320 	orr.w	r3, r3, #32
 800dac6:	2b6c      	cmp	r3, #108	@ 0x6c
 800dac8:	d108      	bne.n	800dadc <ArtNetParams::callbackFunction(char const*)+0x128>
 800daca:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800dace:	f043 0320 	orr.w	r3, r3, #32
 800dad2:	2b65      	cmp	r3, #101	@ 0x65
 800dad4:	bf0c      	ite	eq
 800dad6:	2302      	moveq	r3, #2
 800dad8:	2301      	movne	r3, #1
 800dada:	e7c0      	b.n	800da5e <ArtNetParams::callbackFunction(char const*)+0xaa>
 800dadc:	2301      	movs	r3, #1
 800dade:	e7be      	b.n	800da5e <ArtNetParams::callbackFunction(char const*)+0xaa>
 800dae0:	4979      	ldr	r1, [pc, #484]	@ (800dcc8 <ArtNetParams::callbackFunction(char const*)+0x314>)
 800dae2:	f04f 0a03 	mov.w	sl, #3
 800dae6:	ab01      	add	r3, sp, #4
 800dae8:	aa02      	add	r2, sp, #8
 800daea:	4439      	add	r1, r7
 800daec:	4630      	mov	r0, r6
 800daee:	f8cd a004 	str.w	sl, [sp, #4]
 800daf2:	f00b fa85 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800daf6:	b9f8      	cbnz	r0, 800db38 <ArtNetParams::callbackFunction(char const*)+0x184>
 800daf8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800dafc:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 800db00:	006d      	lsls	r5, r5, #1
 800db02:	f042 0220 	orr.w	r2, r2, #32
 800db06:	fa0a fa05 	lsl.w	sl, sl, r5
 800db0a:	2a6c      	cmp	r2, #108	@ 0x6c
 800db0c:	ea23 030a 	bic.w	r3, r3, sl
 800db10:	d10d      	bne.n	800db2e <ArtNetParams::callbackFunction(char const*)+0x17a>
 800db12:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800db16:	f042 0220 	orr.w	r2, r2, #32
 800db1a:	2a74      	cmp	r2, #116	@ 0x74
 800db1c:	d107      	bne.n	800db2e <ArtNetParams::callbackFunction(char const*)+0x17a>
 800db1e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800db22:	f040 0020 	orr.w	r0, r0, #32
 800db26:	f1a0 0170 	sub.w	r1, r0, #112	@ 0x70
 800db2a:	4248      	negs	r0, r1
 800db2c:	4148      	adcs	r0, r1
 800db2e:	40a8      	lsls	r0, r5
 800db30:	4303      	orrs	r3, r0
 800db32:	f8a4 300f 	strh.w	r3, [r4, #15]
 800db36:	e75d      	b.n	800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800db38:	4864      	ldr	r0, [pc, #400]	@ (800dccc <ArtNetParams::callbackFunction(char const*)+0x318>)
 800db3a:	2311      	movs	r3, #17
 800db3c:	210e      	movs	r1, #14
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	fb01 0105 	mla	r1, r1, r5, r0
 800db44:	ab01      	add	r3, sp, #4
 800db46:	4642      	mov	r2, r8
 800db48:	4630      	mov	r0, r6
 800db4a:	f00b fa59 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800db4e:	f105 0901 	add.w	r9, r5, #1
 800db52:	bb08      	cbnz	r0, 800db98 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800db54:	9b01      	ldr	r3, [sp, #4]
 800db56:	4a5e      	ldr	r2, [pc, #376]	@ (800dcd0 <ArtNetParams::callbackFunction(char const*)+0x31c>)
 800db58:	4427      	add	r7, r4
 800db5a:	441f      	add	r7, r3
 800db5c:	2111      	movs	r1, #17
 800db5e:	f887 0053 	strb.w	r0, [r7, #83]	@ 0x53
 800db62:	464b      	mov	r3, r9
 800db64:	a802      	add	r0, sp, #8
 800db66:	f00e fc89 	bl	801c47c <snprintf>
 800db6a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800db6e:	a902      	add	r1, sp, #8
 800db70:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800db74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db78:	4293      	cmp	r3, r2
 800db7a:	d001      	beq.n	800db80 <ArtNetParams::callbackFunction(char const*)+0x1cc>
 800db7c:	1a9b      	subs	r3, r3, r2
 800db7e:	e001      	b.n	800db84 <ArtNetParams::callbackFunction(char const*)+0x1d0>
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1f5      	bne.n	800db70 <ArtNetParams::callbackFunction(char const*)+0x1bc>
 800db84:	2280      	movs	r2, #128	@ 0x80
 800db86:	6821      	ldr	r1, [r4, #0]
 800db88:	40aa      	lsls	r2, r5
 800db8a:	b91b      	cbnz	r3, 800db94 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800db8c:	ea21 0102 	bic.w	r1, r1, r2
 800db90:	6021      	str	r1, [r4, #0]
 800db92:	e72f      	b.n	800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800db94:	430a      	orrs	r2, r1
 800db96:	e734      	b.n	800da02 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800db98:	f1b9 0f04 	cmp.w	r9, #4
 800db9c:	f10b 0b10 	add.w	fp, fp, #16
 800dba0:	f108 0812 	add.w	r8, r8, #18
 800dba4:	f47f af29 	bne.w	800d9fa <ArtNetParams::callbackFunction(char const*)+0x46>
 800dba8:	2708      	movs	r7, #8
 800dbaa:	494a      	ldr	r1, [pc, #296]	@ (800dcd4 <ArtNetParams::callbackFunction(char const*)+0x320>)
 800dbac:	9700      	str	r7, [sp, #0]
 800dbae:	466b      	mov	r3, sp
 800dbb0:	eb0d 0207 	add.w	r2, sp, r7
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f00b fa23 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800dbba:	bb50      	cbnz	r0, 800dc12 <ArtNetParams::callbackFunction(char const*)+0x25e>
 800dbbc:	4946      	ldr	r1, [pc, #280]	@ (800dcd8 <ArtNetParams::callbackFunction(char const*)+0x324>)
 800dbbe:	464a      	mov	r2, r9
 800dbc0:	eb0d 0007 	add.w	r0, sp, r7
 800dbc4:	f7ff fb33 	bl	800d22e <memcmp>
 800dbc8:	6825      	ldr	r5, [r4, #0]
 800dbca:	b1a0      	cbz	r0, 800dbf6 <ArtNetParams::callbackFunction(char const*)+0x242>
 800dbcc:	4943      	ldr	r1, [pc, #268]	@ (800dcdc <ArtNetParams::callbackFunction(char const*)+0x328>)
 800dbce:	4652      	mov	r2, sl
 800dbd0:	eb0d 0007 	add.w	r0, sp, r7
 800dbd4:	f7ff fb2b 	bl	800d22e <memcmp>
 800dbd8:	b198      	cbz	r0, 800dc02 <ArtNetParams::callbackFunction(char const*)+0x24e>
 800dbda:	4941      	ldr	r1, [pc, #260]	@ (800dce0 <ArtNetParams::callbackFunction(char const*)+0x32c>)
 800dbdc:	2202      	movs	r2, #2
 800dbde:	eb0d 0007 	add.w	r0, sp, r7
 800dbe2:	f7ff fb24 	bl	800d22e <memcmp>
 800dbe6:	b180      	cbz	r0, 800dc0a <ArtNetParams::callbackFunction(char const*)+0x256>
 800dbe8:	493e      	ldr	r1, [pc, #248]	@ (800dce4 <ArtNetParams::callbackFunction(char const*)+0x330>)
 800dbea:	463a      	mov	r2, r7
 800dbec:	eb0d 0007 	add.w	r0, sp, r7
 800dbf0:	f7ff fb1d 	bl	800d22e <memcmp>
 800dbf4:	b158      	cbz	r0, 800dc0e <ArtNetParams::callbackFunction(char const*)+0x25a>
 800dbf6:	f025 0520 	bic.w	r5, r5, #32
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	6025      	str	r5, [r4, #0]
 800dbfe:	74a3      	strb	r3, [r4, #18]
 800dc00:	e6f8      	b.n	800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800dc02:	2301      	movs	r3, #1
 800dc04:	f045 0520 	orr.w	r5, r5, #32
 800dc08:	e7f8      	b.n	800dbfc <ArtNetParams::callbackFunction(char const*)+0x248>
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	e7fa      	b.n	800dc04 <ArtNetParams::callbackFunction(char const*)+0x250>
 800dc0e:	2303      	movs	r3, #3
 800dc10:	e7f8      	b.n	800dc04 <ArtNetParams::callbackFunction(char const*)+0x250>
 800dc12:	233f      	movs	r3, #63	@ 0x3f
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	4934      	ldr	r1, [pc, #208]	@ (800dce8 <ArtNetParams::callbackFunction(char const*)+0x334>)
 800dc18:	466b      	mov	r3, sp
 800dc1a:	f104 0213 	add.w	r2, r4, #19
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f00b f9ee 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800dc24:	b9e0      	cbnz	r0, 800dc60 <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800dc26:	9b00      	ldr	r3, [sp, #0]
 800dc28:	4423      	add	r3, r4
 800dc2a:	a902      	add	r1, sp, #8
 800dc2c:	74d8      	strb	r0, [r3, #19]
 800dc2e:	4b2f      	ldr	r3, [pc, #188]	@ (800dcec <ArtNetParams::callbackFunction(char const*)+0x338>)
 800dc30:	6818      	ldr	r0, [r3, #0]
 800dc32:	f7fe fa31 	bl	800c098 <ArtNetNode::GetLongNameDefault(char*)>
 800dc36:	f104 0012 	add.w	r0, r4, #18
 800dc3a:	a902      	add	r1, sp, #8
 800dc3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800dc40:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d001      	beq.n	800dc4c <ArtNetParams::callbackFunction(char const*)+0x298>
 800dc48:	1a9b      	subs	r3, r3, r2
 800dc4a:	e001      	b.n	800dc50 <ArtNetParams::callbackFunction(char const*)+0x29c>
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1f5      	bne.n	800dc3c <ArtNetParams::callbackFunction(char const*)+0x288>
 800dc50:	6822      	ldr	r2, [r4, #0]
 800dc52:	b913      	cbnz	r3, 800dc5a <ArtNetParams::callbackFunction(char const*)+0x2a6>
 800dc54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc58:	e6d3      	b.n	800da02 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800dc5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc5e:	e6d0      	b.n	800da02 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800dc60:	4f23      	ldr	r7, [pc, #140]	@ (800dcf0 <ArtNetParams::callbackFunction(char const*)+0x33c>)
 800dc62:	2500      	movs	r5, #0
 800dc64:	ab01      	add	r3, sp, #4
 800dc66:	aa02      	add	r2, sp, #8
 800dc68:	4639      	mov	r1, r7
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc70:	f00b f9c6 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d13f      	bne.n	800dcf8 <ArtNetParams::callbackFunction(char const*)+0x344>
 800dc78:	f8b4 309c 	ldrh.w	r3, [r4, #156]	@ 0x9c
 800dc7c:	006d      	lsls	r5, r5, #1
 800dc7e:	2203      	movs	r2, #3
 800dc80:	40aa      	lsls	r2, r5
 800dc82:	ea23 0302 	bic.w	r3, r3, r2
 800dc86:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800dc8a:	f042 0220 	orr.w	r2, r2, #32
 800dc8e:	2a73      	cmp	r2, #115	@ 0x73
 800dc90:	d113      	bne.n	800dcba <ArtNetParams::callbackFunction(char const*)+0x306>
 800dc92:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800dc96:	f042 0220 	orr.w	r2, r2, #32
 800dc9a:	2a61      	cmp	r2, #97	@ 0x61
 800dc9c:	d10d      	bne.n	800dcba <ArtNetParams::callbackFunction(char const*)+0x306>
 800dc9e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800dca2:	f042 0220 	orr.w	r2, r2, #32
 800dca6:	2a63      	cmp	r2, #99	@ 0x63
 800dca8:	d107      	bne.n	800dcba <ArtNetParams::callbackFunction(char const*)+0x306>
 800dcaa:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800dcae:	f040 0020 	orr.w	r0, r0, #32
 800dcb2:	f1a0 026e 	sub.w	r2, r0, #110	@ 0x6e
 800dcb6:	4250      	negs	r0, r2
 800dcb8:	4150      	adcs	r0, r2
 800dcba:	40a8      	lsls	r0, r5
 800dcbc:	4303      	orrs	r3, r0
 800dcbe:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 800dcc2:	e697      	b.n	800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800dcc4:	080214fc 	stmdaeq	r2, {r2, r3, r4, r5, r6, r7, sl, ip}
 800dcc8:	08021544 	stmdaeq	r2, {r2, r6, r8, sl, ip}
 800dccc:	080214c4 	stmdaeq	r2, {r2, r6, r7, sl, ip}
 800dcd0:	0801d491 	stmdaeq	r1, {r0, r4, r7, sl, ip, lr, pc}
 800dcd4:	08021489 	stmdaeq	r2, {r0, r3, r7, sl, ip}
 800dcd8:	0801d554 	stmdaeq	r1, {r2, r4, r6, r8, sl, ip, lr, pc}
 800dcdc:	0801d559 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, ip, lr, pc}
 800dce0:	0801cdaf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, sl, fp, lr, pc}
 800dce4:	0801d55d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, ip, lr, pc}
 800dce8:	080214ba 	stmdaeq	r2, {r1, r3, r4, r5, r7, sl, ip}
 800dcec:	2000d2d4 	ldrdcs	sp, [r0], -r4
 800dcf0:	08020adc 	stmdaeq	r2, {r2, r3, r4, r6, r7, r9, fp}
 800dcf4:	0802158c 	stmdaeq	r2, {r2, r3, r7, r8, sl, ip}
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	2d04      	cmp	r5, #4
 800dcfc:	f107 0710 	add.w	r7, r7, #16
 800dd00:	d1b0      	bne.n	800dc64 <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800dd02:	490d      	ldr	r1, [pc, #52]	@ (800dd38 <ArtNetParams::callbackFunction(char const*)+0x384>)
 800dd04:	aa01      	add	r2, sp, #4
 800dd06:	4630      	mov	r0, r6
 800dd08:	f00b fa6a 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd0c:	b948      	cbnz	r0, 800dd22 <ArtNetParams::callbackFunction(char const*)+0x36e>
 800dd0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800dd12:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dd16:	4620      	mov	r0, r4
 800dd18:	b013      	add	sp, #76	@ 0x4c
 800dd1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1e:	f7ff be41 	b.w	800d9a4 <ArtNetParams::SetBool(unsigned char, unsigned long)>
 800dd22:	4906      	ldr	r1, [pc, #24]	@ (800dd3c <ArtNetParams::callbackFunction(char const*)+0x388>)
 800dd24:	aa01      	add	r2, sp, #4
 800dd26:	4630      	mov	r0, r6
 800dd28:	f00b fa5a 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	f47f ae61 	bne.w	800d9f4 <ArtNetParams::callbackFunction(char const*)+0x40>
 800dd32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dd36:	e7ec      	b.n	800dd12 <ArtNetParams::callbackFunction(char const*)+0x35e>
 800dd38:	08020ace 	stmdaeq	r2, {r1, r2, r3, r6, r7, r9, fp}
 800dd3c:	08021492 	stmdaeq	r2, {r1, r4, r7, sl, ip}

0800dd40 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800dd40:	f7ff be38 	b.w	800d9b4 <ArtNetParams::callbackFunction(char const*)>

0800dd44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)>:
 800dd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd48:	4604      	mov	r4, r0
 800dd4a:	b089      	sub	sp, #36	@ 0x24
 800dd4c:	4615      	mov	r5, r2
 800dd4e:	461e      	mov	r6, r3
 800dd50:	2900      	cmp	r1, #0
 800dd52:	f000 8081 	beq.w	800de58 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x114>
 800dd56:	22dc      	movs	r2, #220	@ 0xdc
 800dd58:	f00e f86d 	bl	801be36 <memmove>
 800dd5c:	462a      	mov	r2, r5
 800dd5e:	4625      	mov	r5, r4
 800dd60:	4633      	mov	r3, r6
 800dd62:	498d      	ldr	r1, [pc, #564]	@ (800df98 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x254>)
 800dd64:	a805      	add	r0, sp, #20
 800dd66:	f00b f83b 	bl	8018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 800dd6a:	f855 3b13 	ldr.w	r3, [r5], #19
 800dd6e:	065b      	lsls	r3, r3, #25
 800dd70:	d404      	bmi.n	800dd7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x38>
 800dd72:	4b8a      	ldr	r3, [pc, #552]	@ (800df9c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 800dd74:	4629      	mov	r1, r5
 800dd76:	6818      	ldr	r0, [r3, #0]
 800dd78:	f7fe f98e 	bl	800c098 <ArtNetNode::GetLongNameDefault(char*)>
 800dd7c:	6823      	ldr	r3, [r4, #0]
 800dd7e:	4988      	ldr	r1, [pc, #544]	@ (800dfa0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x25c>)
 800dd80:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800dd84:	462a      	mov	r2, r5
 800dd86:	a805      	add	r0, sp, #20
 800dd88:	f7ff fd56 	bl	800d838 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800dd8c:	7ca3      	ldrb	r3, [r4, #18]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d065      	beq.n	800de5e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x11a>
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d065      	beq.n	800de62 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x11e>
 800dd96:	4a83      	ldr	r2, [pc, #524]	@ (800dfa4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x260>)
 800dd98:	4983      	ldr	r1, [pc, #524]	@ (800dfa8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x264>)
 800dd9a:	2b03      	cmp	r3, #3
 800dd9c:	bf18      	it	ne
 800dd9e:	460a      	movne	r2, r1
 800dda0:	46a0      	mov	r8, r4
 800dda2:	4982      	ldr	r1, [pc, #520]	@ (800dfac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x268>)
 800dda4:	f858 3b53 	ldr.w	r3, [r8], #83
 800dda8:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800dffc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2b8>
 800ddac:	f8df 9250 	ldr.w	r9, [pc, #592]	@ 800e000 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2bc>
 800ddb0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 800e004 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2c0>
 800ddb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ddb8:	a805      	add	r0, sp, #20
 800ddba:	f7ff fd3d 	bl	800d838 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800ddbe:	2500      	movs	r5, #0
 800ddc0:	f8d9 3000 	ldr.w	r3, [r9]
 800ddc4:	42ab      	cmp	r3, r5
 800ddc6:	d84e      	bhi.n	800de66 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x122>
 800ddc8:	4979      	ldr	r1, [pc, #484]	@ (800dfb0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 800ddca:	f8df 823c 	ldr.w	r8, [pc, #572]	@ 800e008 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2c4>
 800ddce:	4e79      	ldr	r6, [pc, #484]	@ (800dfb4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x270>)
 800ddd0:	4f79      	ldr	r7, [pc, #484]	@ (800dfb8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x274>)
 800ddd2:	a805      	add	r0, sp, #20
 800ddd4:	f00b f8c0 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 800ddd8:	2500      	movs	r5, #0
 800ddda:	f8d9 3000 	ldr.w	r3, [r9]
 800ddde:	42ab      	cmp	r3, r5
 800dde0:	f200 80b2 	bhi.w	800df48 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x204>
 800dde4:	4975      	ldr	r1, [pc, #468]	@ (800dfbc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x278>)
 800dde6:	f8df 8224 	ldr.w	r8, [pc, #548]	@ 800e00c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2c8>
 800ddea:	4e75      	ldr	r6, [pc, #468]	@ (800dfc0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x27c>)
 800ddec:	4f75      	ldr	r7, [pc, #468]	@ (800dfc4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x280>)
 800ddee:	a805      	add	r0, sp, #20
 800ddf0:	f00b f8b2 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 800ddf4:	2500      	movs	r5, #0
 800ddf6:	f8d9 3000 	ldr.w	r3, [r9]
 800ddfa:	42ab      	cmp	r3, r5
 800ddfc:	f200 80b8 	bhi.w	800df70 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>
 800de00:	6822      	ldr	r2, [r4, #0]
 800de02:	4971      	ldr	r1, [pc, #452]	@ (800dfc8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x284>)
 800de04:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800de08:	a805      	add	r0, sp, #20
 800de0a:	f7ff fd3d 	bl	800d888 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800de0e:	496f      	ldr	r1, [pc, #444]	@ (800dfcc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x288>)
 800de10:	a805      	add	r0, sp, #20
 800de12:	f00b f8a1 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 800de16:	6822      	ldr	r2, [r4, #0]
 800de18:	496d      	ldr	r1, [pc, #436]	@ (800dfd0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x28c>)
 800de1a:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 800de1e:	a805      	add	r0, sp, #20
 800de20:	f7ff fd32 	bl	800d888 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800de24:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800de28:	b17b      	cbz	r3, 800de4a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x106>
 800de2a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800de2e:	9b05      	ldr	r3, [sp, #20]
 800de30:	4413      	add	r3, r2
 800de32:	227d      	movs	r2, #125	@ 0x7d
 800de34:	f803 2c01 	strb.w	r2, [r3, #-1]
 800de38:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800de3c:	9905      	ldr	r1, [sp, #20]
 800de3e:	54ca      	strb	r2, [r1, r3]
 800de40:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800de44:	3301      	adds	r3, #1
 800de46:	f8ad 301a 	strh.w	r3, [sp, #26]
 800de4a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800de4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	b009      	add	sp, #36	@ 0x24
 800de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de58:	f7ff fd3e 	bl	800d8d8 <ArtNetParamsStore::Copy(artnetparams::Params*)>
 800de5c:	e77e      	b.n	800dd5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x18>
 800de5e:	4a5d      	ldr	r2, [pc, #372]	@ (800dfd4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x290>)
 800de60:	e79e      	b.n	800dda0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x5c>
 800de62:	4a5d      	ldr	r2, [pc, #372]	@ (800dfd8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x294>)
 800de64:	e79c      	b.n	800dda0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x5c>
 800de66:	f8db 6000 	ldr.w	r6, [fp]
 800de6a:	442e      	add	r6, r5
 800de6c:	2e21      	cmp	r6, #33	@ 0x21
 800de6e:	d8ab      	bhi.n	800ddc8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 800de70:	006b      	lsls	r3, r5, #1
 800de72:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800de76:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800de7a:	9303      	str	r3, [sp, #12]
 800de7c:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 800de80:	42b9      	cmp	r1, r7
 800de82:	f8b3 2005 	ldrh.w	r2, [r3, #5]
 800de86:	f8d4 c000 	ldr.w	ip, [r4]
 800de8a:	d220      	bcs.n	800dece <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x18a>
 800de8c:	2002      	movs	r0, #2
 800de8e:	fa00 fe05 	lsl.w	lr, r0, r5
 800de92:	4b52      	ldr	r3, [pc, #328]	@ (800dfdc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x298>)
 800de94:	9805      	ldr	r0, [sp, #20]
 800de96:	ea3e 0c0c 	bics.w	ip, lr, ip
 800de9a:	4408      	add	r0, r1
 800de9c:	eba7 0701 	sub.w	r7, r7, r1
 800dea0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800dea4:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800dea8:	d003      	beq.n	800deb2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x16e>
 800deaa:	b921      	cbnz	r1, 800deb6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x172>
 800deac:	9200      	str	r2, [sp, #0]
 800deae:	4a4c      	ldr	r2, [pc, #304]	@ (800dfe0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x29c>)
 800deb0:	e003      	b.n	800deba <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x176>
 800deb2:	2900      	cmp	r1, #0
 800deb4:	d037      	beq.n	800df26 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1e2>
 800deb6:	9200      	str	r2, [sp, #0]
 800deb8:	4a4a      	ldr	r2, [pc, #296]	@ (800dfe4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2a0>)
 800deba:	4639      	mov	r1, r7
 800debc:	f00e fade 	bl	801c47c <snprintf>
 800dec0:	4287      	cmp	r7, r0
 800dec2:	bfa2      	ittt	ge
 800dec4:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 800dec8:	18c0      	addge	r0, r0, r3
 800deca:	f8ad 001a 	strhge.w	r0, [sp, #26]
 800dece:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 800ded2:	4945      	ldr	r1, [pc, #276]	@ (800dfe8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2a4>)
 800ded4:	006a      	lsls	r2, r5, #1
 800ded6:	4113      	asrs	r3, r2
 800ded8:	f013 0303 	ands.w	r3, r3, #3
 800dedc:	f04f 0212 	mov.w	r2, #18
 800dee0:	fb02 1105 	mla	r1, r2, r5, r1
 800dee4:	d022      	beq.n	800df2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1e8>
 800dee6:	4a41      	ldr	r2, [pc, #260]	@ (800dfec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2a8>)
 800dee8:	4841      	ldr	r0, [pc, #260]	@ (800dff0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2ac>)
 800deea:	2b02      	cmp	r3, #2
 800deec:	bf18      	it	ne
 800deee:	4602      	movne	r2, r0
 800def0:	3b01      	subs	r3, #1
 800def2:	bf18      	it	ne
 800def4:	2301      	movne	r3, #1
 800def6:	a805      	add	r0, sp, #20
 800def8:	f7ff fc9e 	bl	800d838 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800defc:	6822      	ldr	r2, [r4, #0]
 800defe:	2380      	movs	r3, #128	@ 0x80
 800df00:	40ab      	lsls	r3, r5
 800df02:	401a      	ands	r2, r3
 800df04:	4293      	cmp	r3, r2
 800df06:	bf0c      	ite	eq
 800df08:	2701      	moveq	r7, #1
 800df0a:	2700      	movne	r7, #0
 800df0c:	d110      	bne.n	800df30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1ec>
 800df0e:	4642      	mov	r2, r8
 800df10:	4651      	mov	r1, sl
 800df12:	463b      	mov	r3, r7
 800df14:	a805      	add	r0, sp, #20
 800df16:	f7ff fc8f 	bl	800d838 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800df1a:	3501      	adds	r5, #1
 800df1c:	f10a 0a0e 	add.w	sl, sl, #14
 800df20:	f108 0812 	add.w	r8, r8, #18
 800df24:	e74c      	b.n	800ddc0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x7c>
 800df26:	9200      	str	r2, [sp, #0]
 800df28:	4a32      	ldr	r2, [pc, #200]	@ (800dff4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2b0>)
 800df2a:	e7c6      	b.n	800deba <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x176>
 800df2c:	4a32      	ldr	r2, [pc, #200]	@ (800dff8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x2b4>)
 800df2e:	e7df      	b.n	800def0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1ac>
 800df30:	2328      	movs	r3, #40	@ 0x28
 800df32:	435e      	muls	r6, r3
 800df34:	4b19      	ldr	r3, [pc, #100]	@ (800df9c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 800df36:	6819      	ldr	r1, [r3, #0]
 800df38:	f606 46b4 	addw	r6, r6, #3252	@ 0xcb4
 800df3c:	2212      	movs	r2, #18
 800df3e:	4431      	add	r1, r6
 800df40:	4640      	mov	r0, r8
 800df42:	f00d ff78 	bl	801be36 <memmove>
 800df46:	e7e2      	b.n	800df0e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x1ca>
 800df48:	f8b4 300f 	ldrh.w	r3, [r4, #15]
 800df4c:	006a      	lsls	r2, r5, #1
 800df4e:	4113      	asrs	r3, r2
 800df50:	f003 0303 	and.w	r3, r3, #3
 800df54:	2b00      	cmp	r3, #0
 800df56:	4641      	mov	r1, r8
 800df58:	bf15      	itete	ne
 800df5a:	2301      	movne	r3, #1
 800df5c:	2300      	moveq	r3, #0
 800df5e:	4632      	movne	r2, r6
 800df60:	463a      	moveq	r2, r7
 800df62:	a805      	add	r0, sp, #20
 800df64:	f7ff fc68 	bl	800d838 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800df68:	3501      	adds	r5, #1
 800df6a:	f108 0812 	add.w	r8, r8, #18
 800df6e:	e734      	b.n	800ddda <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0x96>
 800df70:	f8b4 309c 	ldrh.w	r3, [r4, #156]	@ 0x9c
 800df74:	006a      	lsls	r2, r5, #1
 800df76:	4113      	asrs	r3, r2
 800df78:	f003 0303 	and.w	r3, r3, #3
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	4641      	mov	r1, r8
 800df80:	bf15      	itete	ne
 800df82:	2301      	movne	r3, #1
 800df84:	2300      	moveq	r3, #0
 800df86:	4632      	movne	r2, r6
 800df88:	463a      	moveq	r2, r7
 800df8a:	a805      	add	r0, sp, #20
 800df8c:	f7ff fc54 	bl	800d838 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 800df90:	3501      	adds	r5, #1
 800df92:	f108 0810 	add.w	r8, r8, #16
 800df96:	e72e      	b.n	800ddf6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned long, unsigned long&)+0xb2>
 800df98:	08020b7c 	stmdaeq	r2, {r2, r3, r4, r5, r6, r8, r9, fp}
 800df9c:	2000d2d4 	ldrdcs	sp, [r0], -r4
 800dfa0:	080214ba 	stmdaeq	r2, {r1, r3, r4, r5, r7, sl, ip}
 800dfa4:	0801d55d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, ip, lr, pc}
 800dfa8:	0801d554 	stmdaeq	r1, {r2, r4, r6, r8, sl, ip, lr, pc}
 800dfac:	08021489 	stmdaeq	r2, {r0, r3, r7, sl, ip}
 800dfb0:	0801d58f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, ip, lr, pc}
 800dfb4:	0801d57b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, sl, ip, lr, pc}
 800dfb8:	0801d57f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, sl, ip, lr, pc}
 800dfbc:	0801d59a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sl, ip, lr, pc}
 800dfc0:	0801d583 	stmdaeq	r1, {r0, r1, r7, r8, sl, ip, lr, pc}
 800dfc4:	0801d588 	stmdaeq	r1, {r3, r7, r8, sl, ip, lr, pc}
 800dfc8:	08020ace 	stmdaeq	r2, {r1, r2, r3, r6, r7, r9, fp}
 800dfcc:	0801d1dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, ip, lr, pc}
 800dfd0:	08021492 	stmdaeq	r2, {r1, r4, r7, sl, ip}
 800dfd4:	0801d559 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, ip, lr, pc}
 800dfd8:	0801cdaf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, sl, fp, lr, pc}
 800dfdc:	0802158c 	stmdaeq	r2, {r2, r3, r7, r8, sl, ip}
 800dfe0:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 800dfe4:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 800dfe8:	080214fc 	stmdaeq	r2, {r2, r3, r4, r5, r6, r7, sl, ip}
 800dfec:	0801d573 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, sl, ip, lr, pc}
 800dff0:	0801d56c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, ip, lr, pc}
 800dff4:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}
 800dff8:	0801d566 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, ip, lr, pc}
 800dffc:	080214c4 	stmdaeq	r2, {r2, r6, r7, sl, ip}
 800e000:	2000d2e0 	andcs	sp, r0, r0, ror #5
 800e004:	20000000 	andcs	r0, r0, r0
 800e008:	08021544 	stmdaeq	r2, {r2, r6, r8, sl, ip}
 800e00c:	08020adc 	stmdaeq	r2, {r2, r3, r4, r6, r7, r9, fp}

0800e010 <ArtNetParams::Set()>:
 800e010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800e11c <ArtNetParams::Set()+0x10c>
 800e018:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800e120 <ArtNetParams::Set()+0x110>
 800e01c:	f8da 3000 	ldr.w	r3, [sl]
 800e020:	2b22      	cmp	r3, #34	@ 0x22
 800e022:	4605      	mov	r5, r0
 800e024:	d806      	bhi.n	800e034 <ArtNetParams::Set()+0x24>
 800e026:	f1c3 0322 	rsb	r3, r3, #34	@ 0x22
 800e02a:	2b04      	cmp	r3, #4
 800e02c:	bf28      	it	cs
 800e02e:	2304      	movcs	r3, #4
 800e030:	f8c9 3000 	str.w	r3, [r9]
 800e034:	4b38      	ldr	r3, [pc, #224]	@ (800e118 <ArtNetParams::Set()+0x108>)
 800e036:	681c      	ldr	r4, [r3, #0]
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	0658      	lsls	r0, r3, #25
 800e03c:	d504      	bpl.n	800e048 <ArtNetParams::Set()+0x38>
 800e03e:	f105 0113 	add.w	r1, r5, #19
 800e042:	4620      	mov	r0, r4
 800e044:	f7fe f840 	bl	800c0c8 <ArtNetNode::SetLongName(char const*)>
 800e048:	f105 0853 	add.w	r8, r5, #83	@ 0x53
 800e04c:	2700      	movs	r7, #0
 800e04e:	f44f 0b80 	mov.w	fp, #4194304	@ 0x400000
 800e052:	e03f      	b.n	800e0d4 <ArtNetParams::Set()+0xc4>
 800e054:	f8da 6000 	ldr.w	r6, [sl]
 800e058:	443e      	add	r6, r7
 800e05a:	2e21      	cmp	r6, #33	@ 0x21
 800e05c:	d83e      	bhi.n	800e0dc <ArtNetParams::Set()+0xcc>
 800e05e:	682a      	ldr	r2, [r5, #0]
 800e060:	2380      	movs	r3, #128	@ 0x80
 800e062:	40bb      	lsls	r3, r7
 800e064:	4393      	bics	r3, r2
 800e066:	bf0c      	ite	eq
 800e068:	4642      	moveq	r2, r8
 800e06a:	2200      	movne	r2, #0
 800e06c:	4631      	mov	r1, r6
 800e06e:	4620      	mov	r0, r4
 800e070:	f7fd ffd2 	bl	800c018 <ArtNetNode::SetShortName(unsigned long, char const*)>
 800e074:	f8b5 200f 	ldrh.w	r2, [r5, #15]
 800e078:	007b      	lsls	r3, r7, #1
 800e07a:	411a      	asrs	r2, r3
 800e07c:	f002 0203 	and.w	r2, r2, #3
 800e080:	4631      	mov	r1, r6
 800e082:	4620      	mov	r0, r4
 800e084:	9301      	str	r3, [sp, #4]
 800e086:	f7fe fb8c 	bl	800c7a2 <ArtNetNode::SetMergeMode(unsigned long, lightset::MergeMode)>
 800e08a:	9b01      	ldr	r3, [sp, #4]
 800e08c:	f8b5 209c 	ldrh.w	r2, [r5, #156]	@ 0x9c
 800e090:	411a      	asrs	r2, r3
 800e092:	f002 0203 	and.w	r2, r2, #3
 800e096:	4631      	mov	r1, r6
 800e098:	4620      	mov	r0, r4
 800e09a:	f000 f899 	bl	800e1d0 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>
 800e09e:	682a      	ldr	r2, [r5, #0]
 800e0a0:	fa0b f307 	lsl.w	r3, fp, r7
 800e0a4:	4393      	bics	r3, r2
 800e0a6:	d112      	bne.n	800e0ce <ArtNetParams::Set()+0xbe>
 800e0a8:	442e      	add	r6, r5
 800e0aa:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e0ae:	f896 20b0 	ldrb.w	r2, [r6, #176]	@ 0xb0
 800e0b2:	f883 297e 	strb.w	r2, [r3, #2430]	@ 0x97e
 800e0b6:	1e51      	subs	r1, r2, #1
 800e0b8:	4623      	mov	r3, r4
 800e0ba:	f504 70cc 	add.w	r0, r4, #408	@ 0x198
 800e0be:	b2c9      	uxtb	r1, r1
 800e0c0:	29c7      	cmp	r1, #199	@ 0xc7
 800e0c2:	bf98      	it	ls
 800e0c4:	f883 2ad9 	strbls.w	r2, [r3, #2777]	@ 0xad9
 800e0c8:	330c      	adds	r3, #12
 800e0ca:	4283      	cmp	r3, r0
 800e0cc:	d1f8      	bne.n	800e0c0 <ArtNetParams::Set()+0xb0>
 800e0ce:	3701      	adds	r7, #1
 800e0d0:	f108 0812 	add.w	r8, r8, #18
 800e0d4:	f8d9 3000 	ldr.w	r3, [r9]
 800e0d8:	42bb      	cmp	r3, r7
 800e0da:	d8bb      	bhi.n	800e054 <ArtNetParams::Set()+0x44>
 800e0dc:	7ca9      	ldrb	r1, [r5, #18]
 800e0de:	2903      	cmp	r1, #3
 800e0e0:	bf9a      	itte	ls
 800e0e2:	3108      	addls	r1, #8
 800e0e4:	b2c9      	uxtbls	r1, r1
 800e0e6:	2108      	movhi	r1, #8
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f7fe fb85 	bl	800c7f8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800e0ee:	682a      	ldr	r2, [r5, #0]
 800e0f0:	0391      	lsls	r1, r2, #14
 800e0f2:	bf42      	ittt	mi
 800e0f4:	f504 5380 	addmi.w	r3, r4, #4096	@ 0x1000
 800e0f8:	2101      	movmi	r1, #1
 800e0fa:	f883 11f4 	strbmi.w	r1, [r3, #500]	@ 0x1f4
 800e0fe:	0513      	lsls	r3, r2, #20
 800e100:	bf41      	itttt	mi
 800e102:	f504 5280 	addmi.w	r2, r4, #4096	@ 0x1000
 800e106:	2301      	movmi	r3, #1
 800e108:	f882 3248 	strbmi.w	r3, [r2, #584]	@ 0x248
 800e10c:	f884 302e 	strbmi.w	r3, [r4, #46]	@ 0x2e
 800e110:	b003      	add	sp, #12
 800e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	bf00      	nop
 800e118:	2000d2d4 	ldrdcs	sp, [r0], -r4
 800e11c:	20000000 	andcs	r0, r0, r0
 800e120:	2000d2e0 	andcs	sp, r0, r0, ror #5

0800e124 <ArtNetNode::HandleTrigger()>:
 800e124:	b410      	push	{r4}
 800e126:	f8d0 1c80 	ldr.w	r1, [r0, #3200]	@ 0xc80
 800e12a:	7b8a      	ldrb	r2, [r1, #14]
 800e12c:	2aff      	cmp	r2, #255	@ 0xff
 800e12e:	d102      	bne.n	800e136 <ArtNetNode::HandleTrigger()+0x12>
 800e130:	7bcb      	ldrb	r3, [r1, #15]
 800e132:	2bff      	cmp	r3, #255	@ 0xff
 800e134:	d007      	beq.n	800e146 <ArtNetNode::HandleTrigger()+0x22>
 800e136:	4b09      	ldr	r3, [pc, #36]	@ (800e15c <ArtNetNode::HandleTrigger()+0x38>)
 800e138:	781c      	ldrb	r4, [r3, #0]
 800e13a:	4294      	cmp	r4, r2
 800e13c:	d10b      	bne.n	800e156 <ArtNetNode::HandleTrigger()+0x32>
 800e13e:	7bca      	ldrb	r2, [r1, #15]
 800e140:	785b      	ldrb	r3, [r3, #1]
 800e142:	429a      	cmp	r2, r3
 800e144:	d107      	bne.n	800e156 <ArtNetNode::HandleTrigger()+0x32>
 800e146:	f8d0 0c9c 	ldr.w	r0, [r0, #3228]	@ 0xc9c
 800e14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e14e:	6803      	ldr	r3, [r0, #0]
 800e150:	3110      	adds	r1, #16
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	4718      	bx	r3
 800e156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	08020b87 	stmdaeq	r2, {r0, r1, r2, r7, r8, r9, fp}

0800e160 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)>:
 800e160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e164:	4b18      	ldr	r3, [pc, #96]	@ (800e1c8 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x68>)
 800e166:	681c      	ldr	r4, [r3, #0]
 800e168:	4284      	cmp	r4, r0
 800e16a:	b086      	sub	sp, #24
 800e16c:	460d      	mov	r5, r1
 800e16e:	d827      	bhi.n	800e1c0 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x60>
 800e170:	1b04      	subs	r4, r0, r4
 800e172:	2c03      	cmp	r4, #3
 800e174:	d824      	bhi.n	800e1c0 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x60>
 800e176:	f04f 089c 	mov.w	r8, #156	@ 0x9c
 800e17a:	2600      	movs	r6, #0
 800e17c:	e9cd 8600 	strd	r8, r6, [sp]
 800e180:	4f12      	ldr	r7, [pc, #72]	@ (800e1cc <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)+0x6c>)
 800e182:	2302      	movs	r3, #2
 800e184:	6838      	ldr	r0, [r7, #0]
 800e186:	f10d 0216 	add.w	r2, sp, #22
 800e18a:	2119      	movs	r1, #25
 800e18c:	f00a fc24 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800e190:	0064      	lsls	r4, r4, #1
 800e192:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e196:	2203      	movs	r2, #3
 800e198:	40a2      	lsls	r2, r4
 800e19a:	f005 0503 	and.w	r5, r5, #3
 800e19e:	ea23 0302 	bic.w	r3, r3, r2
 800e1a2:	40a5      	lsls	r5, r4
 800e1a4:	432b      	orrs	r3, r5
 800e1a6:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800e1aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1ae:	2302      	movs	r3, #2
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	6838      	ldr	r0, [r7, #0]
 800e1b4:	f10d 0316 	add.w	r3, sp, #22
 800e1b8:	4642      	mov	r2, r8
 800e1ba:	2119      	movs	r1, #25
 800e1bc:	f00a fbe6 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800e1c0:	b006      	add	sp, #24
 800e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c6:	bf00      	nop
 800e1c8:	20000000 	andcs	r0, r0, r0
 800e1cc:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800e1d0 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)>:
 800e1d0:	2921      	cmp	r1, #33	@ 0x21
 800e1d2:	b538      	push	{r3, r4, r5, lr}
 800e1d4:	460c      	mov	r4, r1
 800e1d6:	4615      	mov	r5, r2
 800e1d8:	d826      	bhi.n	800e228 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)+0x58>
 800e1da:	2328      	movs	r3, #40	@ 0x28
 800e1dc:	fb03 0301 	mla	r3, r3, r1, r0
 800e1e0:	2d01      	cmp	r5, #1
 800e1e2:	f8c3 2cac 	str.w	r2, [r3, #3244]	@ 0xcac
 800e1e6:	f04f 0224 	mov.w	r2, #36	@ 0x24
 800e1ea:	fb02 0101 	mla	r1, r2, r1, r0
 800e1ee:	f241 2378 	movw	r3, #4728	@ 0x1278
 800e1f2:	fb02 0204 	mla	r2, r2, r4, r0
 800e1f6:	5ccb      	ldrb	r3, [r1, r3]
 800e1f8:	f241 2178 	movw	r1, #4728	@ 0x1278
 800e1fc:	bf0c      	ite	eq
 800e1fe:	f043 0301 	orreq.w	r3, r3, #1
 800e202:	f003 03fe 	andne.w	r3, r3, #254	@ 0xfe
 800e206:	5453      	strb	r3, [r2, r1]
 800e208:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800e20c:	f890 3241 	ldrb.w	r3, [r0, #577]	@ 0x241
 800e210:	2b02      	cmp	r3, #2
 800e212:	d109      	bne.n	800e228 <ArtNetNode::SetPortProtocol4(unsigned long, artnet::PortProtocol)+0x58>
 800e214:	4629      	mov	r1, r5
 800e216:	4620      	mov	r0, r4
 800e218:	f7ff ffa2 	bl	800e160 <ArtNetStore::SavePortProtocol(unsigned long, artnet::PortProtocol)>
 800e21c:	4629      	mov	r1, r5
 800e21e:	4620      	mov	r0, r4
 800e220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e224:	f00a b9ba 	b.w	801859c <artnet::display_port_protocol(unsigned long, artnet::PortProtocol)>
 800e228:	bd38      	pop	{r3, r4, r5, pc}

0800e22a <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)>:
 800e22a:	2a02      	cmp	r2, #2
 800e22c:	b430      	push	{r4, r5}
 800e22e:	d01c      	beq.n	800e26a <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x40>
 800e230:	2428      	movs	r4, #40	@ 0x28
 800e232:	fb04 0401 	mla	r4, r4, r1, r0
 800e236:	f8b4 3ca0 	ldrh.w	r3, [r4, #3232]	@ 0xca0
 800e23a:	f8d4 4ca8 	ldr.w	r4, [r4, #3240]	@ 0xca8
 800e23e:	1aa5      	subs	r5, r4, r2
 800e240:	426c      	negs	r4, r5
 800e242:	416c      	adcs	r4, r5
 800e244:	2528      	movs	r5, #40	@ 0x28
 800e246:	fb05 0501 	mla	r5, r5, r1, r0
 800e24a:	f8d5 5cac 	ldr.w	r5, [r5, #3244]	@ 0xcac
 800e24e:	2d01      	cmp	r5, #1
 800e250:	d117      	bne.n	800e282 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x58>
 800e252:	b96c      	cbnz	r4, 800e270 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x46>
 800e254:	230c      	movs	r3, #12
 800e256:	fb03 0301 	mla	r3, r3, r1, r0
 800e25a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e25c:	2a01      	cmp	r2, #1
 800e25e:	d810      	bhi.n	800e282 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x58>
 800e260:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800e262:	2202      	movs	r2, #2
 800e264:	bc30      	pop	{r4, r5}
 800e266:	f000 b8f5 	b.w	800e454 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>
 800e26a:	2300      	movs	r3, #0
 800e26c:	461c      	mov	r4, r3
 800e26e:	e7e9      	b.n	800e244 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x1a>
 800e270:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
 800e274:	f894 41f4 	ldrb.w	r4, [r4, #500]	@ 0x1f4
 800e278:	b10c      	cbz	r4, 800e27e <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x54>
 800e27a:	3301      	adds	r3, #1
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1f0      	bne.n	800e264 <ArtNetNode::SetUniverse4(unsigned long, lightset::PortDir)+0x3a>
 800e282:	bc30      	pop	{r4, r5}
 800e284:	4770      	bx	lr
	...

0800e288 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)>:
 800e288:	4b0b      	ldr	r3, [pc, #44]	@ (800e2b8 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x30>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	428a      	cmp	r2, r1
 800e28e:	f1a1 0202 	sub.w	r2, r1, #2
 800e292:	bf18      	it	ne
 800e294:	6019      	strne	r1, [r3, #0]
 800e296:	4253      	negs	r3, r2
 800e298:	4153      	adcs	r3, r2
 800e29a:	f880 3c68 	strb.w	r3, [r0, #3176]	@ 0xc68
 800e29e:	f600 1308 	addw	r3, r0, #2312	@ 0x908
 800e2a2:	f890 2209 	ldrb.w	r2, [r0, #521]	@ 0x209
 800e2a6:	b932      	cbnz	r2, 800e2b6 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x2e>
 800e2a8:	3044      	adds	r0, #68	@ 0x44
 800e2aa:	4298      	cmp	r0, r3
 800e2ac:	d1f9      	bne.n	800e2a2 <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x1a>
 800e2ae:	4b03      	ldr	r3, [pc, #12]	@ (800e2bc <ArtNetNode::SetLedBlinkMode4(hardware::ledblink::Mode)+0x34>)
 800e2b0:	6818      	ldr	r0, [r3, #0]
 800e2b2:	f00b bb75 	b.w	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800e2b6:	4770      	bx	lr
 800e2b8:	2000d2e4 	andcs	sp, r0, r4, ror #5
 800e2bc:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800e2c0 <ArtNetNode::GetGoodOutput4(unsigned long)>:
 800e2c0:	230c      	movs	r3, #12
 800e2c2:	fb03 0301 	mla	r3, r3, r1, r0
 800e2c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d10d      	bne.n	800e2e8 <ArtNetNode::GetGoodOutput4(unsigned long)+0x28>
 800e2cc:	2344      	movs	r3, #68	@ 0x44
 800e2ce:	fb03 0001 	mla	r0, r3, r1, r0
 800e2d2:	f890 3208 	ldrb.w	r3, [r0, #520]	@ 0x208
 800e2d6:	f890 0209 	ldrb.w	r0, [r0, #521]	@ 0x209
 800e2da:	01c0      	lsls	r0, r0, #7
 800e2dc:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800e2e0:	f040 0001 	orr.w	r0, r0, #1
 800e2e4:	b2c0      	uxtb	r0, r0
 800e2e6:	4770      	bx	lr
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	4770      	bx	lr

0800e2ec <LightSet::Blackout(bool)>:
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop

0800e2f0 <E131Bridge::E131Bridge()>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2fa:	4927      	ldr	r1, [pc, #156]	@ (800e398 <E131Bridge::E131Bridge()+0xa8>)
 800e2fc:	6020      	str	r0, [r4, #0]
 800e2fe:	e9c4 2201 	strd	r2, r2, [r4, #4]
 800e302:	2001      	movs	r0, #1
 800e304:	f884 0c68 	strb.w	r0, [r4, #3176]	@ 0xc68
 800e308:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800e30c:	600c      	str	r4, [r1, #0]
 800e30e:	60e2      	str	r2, [r4, #12]
 800e310:	f8c4 2c74 	str.w	r2, [r4, #3188]	@ 0xc74
 800e314:	f8c4 2c78 	str.w	r2, [r4, #3192]	@ 0xc78
 800e318:	4603      	mov	r3, r0
 800e31a:	f504 71e4 	add.w	r1, r4, #456	@ 0x1c8
 800e31e:	f843 2b04 	str.w	r2, [r3], #4
 800e322:	428b      	cmp	r3, r1
 800e324:	d1fb      	bne.n	800e31e <E131Bridge::E131Bridge()+0x2e>
 800e326:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800e32a:	f504 72ea 	add.w	r2, r4, #468	@ 0x1d4
 800e32e:	2102      	movs	r1, #2
 800e330:	f843 1c08 	str.w	r1, [r3, #-8]
 800e334:	330c      	adds	r3, #12
 800e336:	429a      	cmp	r2, r3
 800e338:	d1fa      	bne.n	800e330 <E131Bridge::E131Bridge()+0x40>
 800e33a:	f104 0310 	add.w	r3, r4, #16
 800e33e:	2200      	movs	r2, #0
 800e340:	f843 2b04 	str.w	r2, [r3], #4
 800e344:	4298      	cmp	r0, r3
 800e346:	d1fb      	bne.n	800e340 <E131Bridge::E131Bridge()+0x50>
 800e348:	2301      	movs	r3, #1
 800e34a:	6262      	str	r2, [r4, #36]	@ 0x24
 800e34c:	f884 3020 	strb.w	r3, [r4, #32]
 800e350:	f504 6c2d 	add.w	ip, r4, #2768	@ 0xad0
 800e354:	f504 7203 	add.w	r2, r4, #524	@ 0x20c
 800e358:	f604 3e14 	addw	lr, r4, #2836	@ 0xb14
 800e35c:	2100      	movs	r1, #0
 800e35e:	2064      	movs	r0, #100	@ 0x64
 800e360:	f1a2 0344 	sub.w	r3, r2, #68	@ 0x44
 800e364:	f843 1b04 	str.w	r1, [r3], #4
 800e368:	4293      	cmp	r3, r2
 800e36a:	d1fb      	bne.n	800e364 <E131Bridge::E131Bridge()+0x74>
 800e36c:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800e370:	4572      	cmp	r2, lr
 800e372:	f8cc 1008 	str.w	r1, [ip, #8]
 800e376:	f8cc 1000 	str.w	r1, [ip]
 800e37a:	f8cc 1004 	str.w	r1, [ip, #4]
 800e37e:	f88c 0009 	strb.w	r0, [ip, #9]
 800e382:	f10c 0c0c 	add.w	ip, ip, #12
 800e386:	d1eb      	bne.n	800e360 <E131Bridge::E131Bridge()+0x70>
 800e388:	f44f 50ae 	mov.w	r0, #5568	@ 0x15c0
 800e38c:	f008 fdfe 	bl	8016f8c <net::udp_begin(unsigned short)>
 800e390:	6020      	str	r0, [r4, #0]
 800e392:	4620      	mov	r0, r4
 800e394:	bd10      	pop	{r4, pc}
 800e396:	bf00      	nop
 800e398:	2000d2e8 	andcs	sp, r0, r8, ror #5

0800e39c <E131Bridge::Start()>:
 800e39c:	4603      	mov	r3, r0
 800e39e:	4a03      	ldr	r2, [pc, #12]	@ (800e3ac <E131Bridge::Start()+0x10>)
 800e3a0:	2102      	movs	r1, #2
 800e3a2:	6810      	ldr	r0, [r2, #0]
 800e3a4:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
 800e3a8:	f00b bafa 	b.w	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800e3ac:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800e3b0 <E131Bridge::Stop()>:
 800e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	2400      	movs	r4, #0
 800e3b6:	4d0e      	ldr	r5, [pc, #56]	@ (800e3f0 <E131Bridge::Stop()+0x40>)
 800e3b8:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
 800e3bc:	4606      	mov	r6, r0
 800e3be:	4627      	mov	r7, r4
 800e3c0:	f8d6 3c74 	ldr.w	r3, [r6, #3188]	@ 0xc74
 800e3c4:	4621      	mov	r1, r4
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	b113      	cbz	r3, 800e3d0 <E131Bridge::Stop()+0x20>
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	4798      	blx	r3
 800e3d0:	3401      	adds	r4, #1
 800e3d2:	2c22      	cmp	r4, #34	@ 0x22
 800e3d4:	f8c5 7600 	str.w	r7, [r5, #1536]	@ 0x600
 800e3d8:	f205 6504 	addw	r5, r5, #1540	@ 0x604
 800e3dc:	d1f0      	bne.n	800e3c0 <E131Bridge::Stop()+0x10>
 800e3de:	4b05      	ldr	r3, [pc, #20]	@ (800e3f4 <E131Bridge::Stop()+0x44>)
 800e3e0:	f886 7028 	strb.w	r7, [r6, #40]	@ 0x28
 800e3e4:	6818      	ldr	r0, [r3, #0]
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e3ec:	f00b bad8 	b.w	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800e3f0:	20000080 	andcs	r0, r0, r0, lsl #1
 800e3f4:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800e3f8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	461c      	mov	r4, r3
 800e3fc:	b1c9      	cbz	r1, 800e432 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800e3fe:	8b41      	ldrh	r1, [r0, #26]
 800e400:	f100 051a 	add.w	r5, r0, #26
 800e404:	b159      	cbz	r1, 800e41e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800e406:	42a1      	cmp	r1, r4
 800e408:	d01a      	beq.n	800e440 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800e40a:	f500 73cc 	add.w	r3, r0, #408	@ 0x198
 800e40e:	e001      	b.n	800e414 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1c>
 800e410:	4283      	cmp	r3, r0
 800e412:	d016      	beq.n	800e442 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800e414:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 800e416:	428a      	cmp	r2, r1
 800e418:	f100 000c 	add.w	r0, r0, #12
 800e41c:	d1f8      	bne.n	800e410 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x18>
 800e41e:	ba20      	rev	r0, r4
 800e420:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800e424:	802c      	strh	r4, [r5, #0]
 800e426:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800e42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e42e:	f008 b995 	b.w	801675c <net::igmp_join(unsigned long)>
 800e432:	b12a      	cbz	r2, 800e440 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800e434:	8b81      	ldrh	r1, [r0, #28]
 800e436:	f100 051c 	add.w	r5, r0, #28
 800e43a:	2900      	cmp	r1, #0
 800e43c:	d0ef      	beq.n	800e41e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800e43e:	e7e2      	b.n	800e406 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xe>
 800e440:	bd38      	pop	{r3, r4, r5, pc}
 800e442:	ba08      	rev	r0, r1
 800e444:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800e448:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800e44c:	f008 f9a4 	bl	8016798 <net::igmp_leave(unsigned long)>
 800e450:	e7e5      	b.n	800e41e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x26>
 800e452:	bf00      	nop

0800e454 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)>:
 800e454:	2a02      	cmp	r2, #2
 800e456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e458:	4606      	mov	r6, r0
 800e45a:	460c      	mov	r4, r1
 800e45c:	461f      	mov	r7, r3
 800e45e:	d01b      	beq.n	800e498 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x44>
 800e460:	2a01      	cmp	r2, #1
 800e462:	d000      	beq.n	800e466 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x12>
 800e464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e466:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e46a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e46e:	004d      	lsls	r5, r1, #1
 800e470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e472:	2a01      	cmp	r2, #1
 800e474:	d01e      	beq.n	800e4b4 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x60>
 800e476:	7fc3      	ldrb	r3, [r0, #31]
 800e478:	3301      	adds	r3, #1
 800e47a:	77c3      	strb	r3, [r0, #31]
 800e47c:	ba38      	rev	r0, r7
 800e47e:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800e482:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800e486:	4425      	add	r5, r4
 800e488:	f008 f968 	bl	801675c <net::igmp_join(unsigned long)>
 800e48c:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800e490:	2301      	movs	r3, #1
 800e492:	6343      	str	r3, [r0, #52]	@ 0x34
 800e494:	8607      	strh	r7, [r0, #48]	@ 0x30
 800e496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e498:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e49c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e4a0:	004d      	lsls	r5, r1, #1
 800e4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d023      	beq.n	800e4f0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x9c>
 800e4a8:	4425      	add	r5, r4
 800e4aa:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	636b      	str	r3, [r5, #52]	@ 0x34
 800e4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4b4:	f8b3 c030 	ldrh.w	ip, [r3, #48]	@ 0x30
 800e4b8:	45bc      	cmp	ip, r7
 800e4ba:	d0d3      	beq.n	800e464 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x10>
 800e4bc:	4601      	mov	r1, r0
 800e4be:	2200      	movs	r2, #0
 800e4c0:	4294      	cmp	r4, r2
 800e4c2:	f102 0201 	add.w	r2, r2, #1
 800e4c6:	d002      	beq.n	800e4ce <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x7a>
 800e4c8:	8e0b      	ldrh	r3, [r1, #48]	@ 0x30
 800e4ca:	4563      	cmp	r3, ip
 800e4cc:	d0d6      	beq.n	800e47c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x28>
 800e4ce:	2a22      	cmp	r2, #34	@ 0x22
 800e4d0:	f101 010c 	add.w	r1, r1, #12
 800e4d4:	d1f4      	bne.n	800e4c0 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x6c>
 800e4d6:	ea4f 200c 	mov.w	r0, ip, lsl #8
 800e4da:	f400 007f 	and.w	r0, r0, #16711680	@ 0xff0000
 800e4de:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
 800e4e2:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800e4e6:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800e4ea:	f008 f955 	bl	8016798 <net::igmp_leave(unsigned long)>
 800e4ee:	e7c5      	b.n	800e47c <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x28>
 800e4f0:	7fc3      	ldrb	r3, [r0, #31]
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	77c3      	strb	r3, [r0, #31]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	e003      	b.n	800e504 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xb0>
 800e4fc:	2a22      	cmp	r2, #34	@ 0x22
 800e4fe:	f103 030c 	add.w	r3, r3, #12
 800e502:	d007      	beq.n	800e514 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xc0>
 800e504:	4294      	cmp	r4, r2
 800e506:	f102 0201 	add.w	r2, r2, #1
 800e50a:	d0f7      	beq.n	800e4fc <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xa8>
 800e50c:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 800e50e:	42b9      	cmp	r1, r7
 800e510:	d1f4      	bne.n	800e4fc <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0xa8>
 800e512:	e7c9      	b.n	800e4a8 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x54>
 800e514:	ba38      	rev	r0, r7
 800e516:	f440 407f 	orr.w	r0, r0, #65280	@ 0xff00
 800e51a:	f040 00ef 	orr.w	r0, r0, #239	@ 0xef
 800e51e:	f008 f93b 	bl	8016798 <net::igmp_leave(unsigned long)>
 800e522:	e7c1      	b.n	800e4a8 <E131Bridge::SetUniverse(unsigned long, lightset::PortDir, unsigned short)+0x54>

0800e524 <E131Bridge::CheckMergeTimeouts(unsigned long)>:
 800e524:	eb01 1301 	add.w	r3, r1, r1, lsl #4
 800e528:	b530      	push	{r4, r5, lr}
 800e52a:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
 800e52e:	6844      	ldr	r4, [r0, #4]
 800e530:	009a      	lsls	r2, r3, #2
 800e532:	f8de 31c8 	ldr.w	r3, [lr, #456]	@ 0x1c8
 800e536:	f242 7510 	movw	r5, #10000	@ 0x2710
 800e53a:	eba4 0c03 	sub.w	ip, r4, r3
 800e53e:	45ac      	cmp	ip, r5
 800e540:	ea4f 1301 	mov.w	r3, r1, lsl #4
 800e544:	d90c      	bls.n	800e560 <E131Bridge::CheckMergeTimeouts(unsigned long)+0x3c>
 800e546:	f502 72e8 	add.w	r2, r2, #464	@ 0x1d0
 800e54a:	2400      	movs	r4, #0
 800e54c:	f8ce 41cc 	str.w	r4, [lr, #460]	@ 0x1cc
 800e550:	5084      	str	r4, [r0, r2]
 800e552:	4402      	add	r2, r0
 800e554:	6054      	str	r4, [r2, #4]
 800e556:	6094      	str	r4, [r2, #8]
 800e558:	60d4      	str	r4, [r2, #12]
 800e55a:	f88e 4208 	strb.w	r4, [lr, #520]	@ 0x208
 800e55e:	6844      	ldr	r4, [r0, #4]
 800e560:	4419      	add	r1, r3
 800e562:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800e566:	0089      	lsls	r1, r1, #2
 800e568:	f8dc 31e4 	ldr.w	r3, [ip, #484]	@ 0x1e4
 800e56c:	1ae4      	subs	r4, r4, r3
 800e56e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e572:	429c      	cmp	r4, r3
 800e574:	d90b      	bls.n	800e58e <E131Bridge::CheckMergeTimeouts(unsigned long)+0x6a>
 800e576:	f501 73f6 	add.w	r3, r1, #492	@ 0x1ec
 800e57a:	18c1      	adds	r1, r0, r3
 800e57c:	2200      	movs	r2, #0
 800e57e:	f8cc 21e8 	str.w	r2, [ip, #488]	@ 0x1e8
 800e582:	50c2      	str	r2, [r0, r3]
 800e584:	604a      	str	r2, [r1, #4]
 800e586:	608a      	str	r2, [r1, #8]
 800e588:	60ca      	str	r2, [r1, #12]
 800e58a:	f88c 2208 	strb.w	r2, [ip, #520]	@ 0x208
 800e58e:	4603      	mov	r3, r0
 800e590:	f600 1c08 	addw	ip, r0, #2312	@ 0x908
 800e594:	2200      	movs	r2, #0
 800e596:	f893 1208 	ldrb.w	r1, [r3, #520]	@ 0x208
 800e59a:	3344      	adds	r3, #68	@ 0x44
 800e59c:	459c      	cmp	ip, r3
 800e59e:	ea42 0201 	orr.w	r2, r2, r1
 800e5a2:	d1f8      	bne.n	800e596 <E131Bridge::CheckMergeTimeouts(unsigned long)+0x72>
 800e5a4:	b922      	cbnz	r2, 800e5b0 <E131Bridge::CheckMergeTimeouts(unsigned long)+0x8c>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 800e5ac:	f880 202a 	strb.w	r2, [r0, #42]	@ 0x2a
 800e5b0:	bd30      	pop	{r4, r5, pc}
 800e5b2:	bf00      	nop

0800e5b4 <E131Bridge::IsPriorityTimeOut(unsigned long) const>:
 800e5b4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800e5b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e5bc:	6843      	ldr	r3, [r0, #4]
 800e5be:	e9d1 2079 	ldrd	r2, r0, [r1, #484]	@ 0x1e4
 800e5c2:	b410      	push	{r4}
 800e5c4:	f8d1 41cc 	ldr.w	r4, [r1, #460]	@ 0x1cc
 800e5c8:	1a9a      	subs	r2, r3, r2
 800e5ca:	b94c      	cbnz	r4, 800e5e0 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x2c>
 800e5cc:	b128      	cbz	r0, 800e5da <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x26>
 800e5ce:	f242 7010 	movw	r0, #10000	@ 0x2710
 800e5d2:	4282      	cmp	r2, r0
 800e5d4:	bf94      	ite	ls
 800e5d6:	2000      	movls	r0, #0
 800e5d8:	2001      	movhi	r0, #1
 800e5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5de:	4770      	bx	lr
 800e5e0:	f8d1 11c8 	ldr.w	r1, [r1, #456]	@ 0x1c8
 800e5e4:	1a5b      	subs	r3, r3, r1
 800e5e6:	b128      	cbz	r0, 800e5f4 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x40>
 800e5e8:	f242 700f 	movw	r0, #9999	@ 0x270f
 800e5ec:	4283      	cmp	r3, r0
 800e5ee:	d8f0      	bhi.n	800e5d2 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x1e>
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	e7f2      	b.n	800e5da <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x26>
 800e5f4:	f242 7010 	movw	r0, #10000	@ 0x2710
 800e5f8:	4283      	cmp	r3, r0
 800e5fa:	e7eb      	b.n	800e5d4 <E131Bridge::IsPriorityTimeOut(unsigned long) const+0x20>

0800e5fc <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800e5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fe:	2301      	movs	r3, #1
 800e600:	4606      	mov	r6, r0
 800e602:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 800e606:	b109      	cbz	r1, 800e60c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10>
 800e608:	2a00      	cmp	r2, #0
 800e60a:	d14c      	bne.n	800e6a6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xaa>
 800e60c:	f04f 0e00 	mov.w	lr, #0
 800e610:	483e      	ldr	r0, [pc, #248]	@ (800e70c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x110>)
 800e612:	f506 73f6 	add.w	r3, r6, #492	@ 0x1ec
 800e616:	f606 2cf4 	addw	ip, r6, #2804	@ 0xaf4
 800e61a:	4677      	mov	r7, lr
 800e61c:	7f5c      	ldrb	r4, [r3, #29]
 800e61e:	b174      	cbz	r4, 800e63e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x42>
 800e620:	b111      	cbz	r1, 800e628 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800e622:	f853 5c20 	ldr.w	r5, [r3, #-32]
 800e626:	bb55      	cbnz	r5, 800e67e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800e628:	b112      	cbz	r2, 800e630 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x34>
 800e62a:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800e62e:	bb95      	cbnz	r5, 800e696 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9a>
 800e630:	f896 502a 	ldrb.w	r5, [r6, #42]	@ 0x2a
 800e634:	b91d      	cbnz	r5, 800e63e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x42>
 800e636:	f8c0 5600 	str.w	r5, [r0, #1536]	@ 0x600
 800e63a:	46a6      	mov	lr, r4
 800e63c:	775d      	strb	r5, [r3, #29]
 800e63e:	3344      	adds	r3, #68	@ 0x44
 800e640:	459c      	cmp	ip, r3
 800e642:	f200 6004 	addw	r0, r0, #1540	@ 0x604
 800e646:	d1e9      	bne.n	800e61c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x20>
 800e648:	f1be 0f00 	cmp.w	lr, #0
 800e64c:	d00b      	beq.n	800e666 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e64e:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800e650:	2901      	cmp	r1, #1
 800e652:	d04f      	beq.n	800e6f4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xf8>
 800e654:	2902      	cmp	r1, #2
 800e656:	d106      	bne.n	800e666 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e658:	f8d6 0c74 	ldr.w	r0, [r6, #3188]	@ 0xc74
 800e65c:	4a2c      	ldr	r2, [pc, #176]	@ (800e710 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>)
 800e65e:	6803      	ldr	r3, [r0, #0]
 800e660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e662:	4293      	cmp	r3, r2
 800e664:	d14f      	bne.n	800e706 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10a>
 800e666:	4b2b      	ldr	r3, [pc, #172]	@ (800e714 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x118>)
 800e668:	2102      	movs	r1, #2
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	f00b f998 	bl	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800e670:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 800e674:	f023 0302 	bic.w	r3, r3, #2
 800e678:	f886 3021 	strb.w	r3, [r6, #33]	@ 0x21
 800e67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e67e:	771f      	strb	r7, [r3, #28]
 800e680:	f843 7c20 	str.w	r7, [r3, #-32]
 800e684:	f843 7c1c 	str.w	r7, [r3, #-28]
 800e688:	f843 7c18 	str.w	r7, [r3, #-24]
 800e68c:	f843 7c14 	str.w	r7, [r3, #-20]
 800e690:	f843 7c10 	str.w	r7, [r3, #-16]
 800e694:	e7c8      	b.n	800e628 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800e696:	f843 7c04 	str.w	r7, [r3, #-4]
 800e69a:	601f      	str	r7, [r3, #0]
 800e69c:	605f      	str	r7, [r3, #4]
 800e69e:	609f      	str	r7, [r3, #8]
 800e6a0:	60df      	str	r7, [r3, #12]
 800e6a2:	771f      	strb	r7, [r3, #28]
 800e6a4:	e7c4      	b.n	800e630 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x34>
 800e6a6:	f04f 0e00 	mov.w	lr, #0
 800e6aa:	f8c0 3029 	str.w	r3, [r0, #41]	@ 0x29
 800e6ae:	f880 3020 	strb.w	r3, [r0, #32]
 800e6b2:	4a16      	ldr	r2, [pc, #88]	@ (800e70c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x110>)
 800e6b4:	4c18      	ldr	r4, [pc, #96]	@ (800e718 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11c>)
 800e6b6:	f500 73ea 	add.w	r3, r0, #468	@ 0x1d4
 800e6ba:	4671      	mov	r1, lr
 800e6bc:	e005      	b.n	800e6ca <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xce>
 800e6be:	f202 6204 	addw	r2, r2, #1540	@ 0x604
 800e6c2:	42a2      	cmp	r2, r4
 800e6c4:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 800e6c8:	d0be      	beq.n	800e648 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x4c>
 800e6ca:	f893 0035 	ldrb.w	r0, [r3, #53]	@ 0x35
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d0f5      	beq.n	800e6be <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xc2>
 800e6d2:	f843 1c08 	str.w	r1, [r3, #-8]
 800e6d6:	f843 1c04 	str.w	r1, [r3, #-4]
 800e6da:	6019      	str	r1, [r3, #0]
 800e6dc:	6059      	str	r1, [r3, #4]
 800e6de:	6099      	str	r1, [r3, #8]
 800e6e0:	6159      	str	r1, [r3, #20]
 800e6e2:	6199      	str	r1, [r3, #24]
 800e6e4:	61d9      	str	r1, [r3, #28]
 800e6e6:	6219      	str	r1, [r3, #32]
 800e6e8:	6259      	str	r1, [r3, #36]	@ 0x24
 800e6ea:	4686      	mov	lr, r0
 800e6ec:	f8c2 1600 	str.w	r1, [r2, #1536]	@ 0x600
 800e6f0:	8699      	strh	r1, [r3, #52]	@ 0x34
 800e6f2:	e7e4      	b.n	800e6be <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xc2>
 800e6f4:	f8d6 0c74 	ldr.w	r0, [r6, #3188]	@ 0xc74
 800e6f8:	4a08      	ldr	r2, [pc, #32]	@ (800e71c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x120>)
 800e6fa:	6803      	ldr	r3, [r0, #0]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d0b1      	beq.n	800e666 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e702:	4798      	blx	r3
 800e704:	e7af      	b.n	800e666 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e706:	4798      	blx	r3
 800e708:	e7ad      	b.n	800e666 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e70a:	bf00      	nop
 800e70c:	20000080 	andcs	r0, r0, r0, lsl #1
 800e710:	08009511 	stmdaeq	r0, {r0, r4, r8, sl, ip, pc}
 800e714:	2000e3e0 	andcs	lr, r0, r0, ror #7
 800e718:	2000cd08 	andcs	ip, r0, r8, lsl #26
 800e71c:	0800e2ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sp, lr, pc}

0800e720 <E131Bridge::HandleDmx()>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	f8d0 ac6c 	ldr.w	sl, [r0, #3180]	@ 0xc6c
 800e728:	4fa3      	ldr	r7, [pc, #652]	@ (800e9b8 <E131Bridge::HandleDmx()+0x298>)
 800e72a:	f8ba 307b 	ldrh.w	r3, [sl, #123]	@ 0x7b
 800e72e:	b08b      	sub	sp, #44	@ 0x2c
 800e730:	ba5b      	rev16	r3, r3
 800e732:	b29b      	uxth	r3, r3
 800e734:	f10a 027e 	add.w	r2, sl, #126	@ 0x7e
 800e738:	9208      	str	r2, [sp, #32]
 800e73a:	f1a7 0802 	sub.w	r8, r7, #2
 800e73e:	1e5a      	subs	r2, r3, #1
 800e740:	4681      	mov	r9, r0
 800e742:	9309      	str	r3, [sp, #36]	@ 0x24
 800e744:	9207      	str	r2, [sp, #28]
 800e746:	4604      	mov	r4, r0
 800e748:	4498      	add	r8, r3
 800e74a:	f500 75e8 	add.w	r5, r0, #464	@ 0x1d0
 800e74e:	2600      	movs	r6, #0
 800e750:	e00b      	b.n	800e76a <E131Bridge::HandleDmx()+0x4a>
 800e752:	3601      	adds	r6, #1
 800e754:	2e22      	cmp	r6, #34	@ 0x22
 800e756:	f104 040c 	add.w	r4, r4, #12
 800e75a:	f207 6704 	addw	r7, r7, #1540	@ 0x604
 800e75e:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 800e762:	f208 6804 	addw	r8, r8, #1540	@ 0x604
 800e766:	f000 81b4 	beq.w	800ead2 <E131Bridge::HandleDmx()+0x3b2>
 800e76a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d1f0      	bne.n	800e752 <E131Bridge::HandleDmx()+0x32>
 800e770:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e772:	f8ba 2071 	ldrh.w	r2, [sl, #113]	@ 0x71
 800e776:	ba5b      	rev16	r3, r3
 800e778:	b29b      	uxth	r3, r3
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d1e9      	bne.n	800e752 <E131Bridge::HandleDmx()+0x32>
 800e77e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800e782:	f8d9 bc70 	ldr.w	fp, [r9, #3184]	@ 0xc70
 800e786:	69aa      	ldr	r2, [r5, #24]
 800e788:	9304      	str	r3, [sp, #16]
 800e78a:	455b      	cmp	r3, fp
 800e78c:	9203      	str	r2, [sp, #12]
 800e78e:	f000 80c2 	beq.w	800e916 <E131Bridge::HandleDmx()+0x1f6>
 800e792:	455a      	cmp	r2, fp
 800e794:	f040 80da 	bne.w	800e94c <E131Bridge::HandleDmx()+0x22c>
 800e798:	f8d9 2c6c 	ldr.w	r2, [r9, #3180]	@ 0xc6c
 800e79c:	f04f 0b00 	mov.w	fp, #0
 800e7a0:	3215      	adds	r2, #21
 800e7a2:	f105 031b 	add.w	r3, r5, #27
 800e7a6:	f105 0c2b 	add.w	ip, r5, #43	@ 0x2b
 800e7aa:	e002      	b.n	800e7b2 <E131Bridge::HandleDmx()+0x92>
 800e7ac:	4563      	cmp	r3, ip
 800e7ae:	f000 80db 	beq.w	800e968 <E131Bridge::HandleDmx()+0x248>
 800e7b2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e7b6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e7ba:	4288      	cmp	r0, r1
 800e7bc:	d0f6      	beq.n	800e7ac <E131Bridge::HandleDmx()+0x8c>
 800e7be:	f1bb 0f00 	cmp.w	fp, #0
 800e7c2:	f000 80c3 	beq.w	800e94c <E131Bridge::HandleDmx()+0x22c>
 800e7c6:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e7ca:	f04f 0b00 	mov.w	fp, #0
 800e7ce:	7c2a      	ldrb	r2, [r5, #16]
 800e7d0:	742b      	strb	r3, [r5, #16]
 800e7d2:	3313      	adds	r3, #19
 800e7d4:	1a9b      	subs	r3, r3, r2
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b13      	cmp	r3, #19
 800e7da:	d9ba      	bls.n	800e752 <E131Bridge::HandleDmx()+0x32>
 800e7dc:	f99a 3070 	ldrsb.w	r3, [sl, #112]	@ 0x70
 800e7e0:	f89a 2070 	ldrb.w	r2, [sl, #112]	@ 0x70
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dbb4      	blt.n	800e752 <E131Bridge::HandleDmx()+0x32>
 800e7e8:	0652      	lsls	r2, r2, #25
 800e7ea:	f100 81d3 	bmi.w	800eb94 <E131Bridge::HandleDmx()+0x474>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	9306      	str	r3, [sp, #24]
 800e7f2:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800e7f6:	b133      	cbz	r3, 800e806 <E131Bridge::HandleDmx()+0xe6>
 800e7f8:	f899 302e 	ldrb.w	r3, [r9, #46]	@ 0x2e
 800e7fc:	b91b      	cbnz	r3, 800e806 <E131Bridge::HandleDmx()+0xe6>
 800e7fe:	4631      	mov	r1, r6
 800e800:	4648      	mov	r0, r9
 800e802:	f7ff fe8f 	bl	800e524 <E131Bridge::CheckMergeTimeouts(unsigned long)>
 800e806:	f89a 206c 	ldrb.w	r2, [sl, #108]	@ 0x6c
 800e80a:	f899 3020 	ldrb.w	r3, [r9, #32]
 800e80e:	9205      	str	r2, [sp, #20]
 800e810:	429a      	cmp	r2, r3
 800e812:	f080 80d3 	bcs.w	800e9bc <E131Bridge::HandleDmx()+0x29c>
 800e816:	4631      	mov	r1, r6
 800e818:	4648      	mov	r0, r9
 800e81a:	f7ff fecb 	bl	800e5b4 <E131Bridge::IsPriorityTimeOut(unsigned long) const>
 800e81e:	2800      	cmp	r0, #0
 800e820:	d097      	beq.n	800e752 <E131Bridge::HandleDmx()+0x32>
 800e822:	9a05      	ldr	r2, [sp, #20]
 800e824:	f889 2020 	strb.w	r2, [r9, #32]
 800e828:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800e82c:	9305      	str	r3, [sp, #20]
 800e82e:	9b04      	ldr	r3, [sp, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	f040 80d6 	bne.w	800e9e2 <E131Bridge::HandleDmx()+0x2c2>
 800e836:	9b03      	ldr	r3, [sp, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 81b5 	beq.w	800eba8 <E131Bridge::HandleDmx()+0x488>
 800e83e:	9b06      	ldr	r3, [sp, #24]
 800e840:	2b00      	cmp	r3, #0
 800e842:	f000 8175 	beq.w	800eb30 <E131Bridge::HandleDmx()+0x410>
 800e846:	f1bb 0f00 	cmp.w	fp, #0
 800e84a:	f040 8175 	bne.w	800eb38 <E131Bridge::HandleDmx()+0x418>
 800e84e:	f8d9 3c70 	ldr.w	r3, [r9, #3184]	@ 0xc70
 800e852:	f845 3c04 	str.w	r3, [r5, #-4]
 800e856:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e85a:	742b      	strb	r3, [r5, #16]
 800e85c:	f10a 0216 	add.w	r2, sl, #22
 800e860:	462b      	mov	r3, r5
 800e862:	f105 0010 	add.w	r0, r5, #16
 800e866:	f852 1b04 	ldr.w	r1, [r2], #4
 800e86a:	f843 1b04 	str.w	r1, [r3], #4
 800e86e:	4283      	cmp	r3, r0
 800e870:	d1f9      	bne.n	800e866 <E131Bridge::HandleDmx()+0x146>
 800e872:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e876:	f845 3c08 	str.w	r3, [r5, #-8]
 800e87a:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800e87e:	b923      	cbnz	r3, 800e88a <E131Bridge::HandleDmx()+0x16a>
 800e880:	2301      	movs	r3, #1
 800e882:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800e886:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800e88a:	2301      	movs	r3, #1
 800e88c:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e890:	9b07      	ldr	r3, [sp, #28]
 800e892:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800e896:	2b00      	cmp	r3, #0
 800e898:	f000 81b6 	beq.w	800ec08 <E131Bridge::HandleDmx()+0x4e8>
 800e89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e89e:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800e8a2:	9b08      	ldr	r3, [sp, #32]
 800e8a4:	4450      	add	r0, sl
 800e8a6:	463a      	mov	r2, r7
 800e8a8:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e8ac:	f802 1b01 	strb.w	r1, [r2], #1
 800e8b0:	4298      	cmp	r0, r3
 800e8b2:	d1f9      	bne.n	800e8a8 <E131Bridge::HandleDmx()+0x188>
 800e8b4:	9b07      	ldr	r3, [sp, #28]
 800e8b6:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800e8ba:	f1bc 0f00 	cmp.w	ip, #0
 800e8be:	f000 8250 	beq.w	800ed62 <E131Bridge::HandleDmx()+0x642>
 800e8c2:	9a05      	ldr	r2, [sp, #20]
 800e8c4:	9b08      	ldr	r3, [sp, #32]
 800e8c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e8ca:	f802 1b01 	strb.w	r1, [r2], #1
 800e8ce:	4298      	cmp	r0, r3
 800e8d0:	d1f9      	bne.n	800e8c6 <E131Bridge::HandleDmx()+0x1a6>
 800e8d2:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800e8d6:	069b      	lsls	r3, r3, #26
 800e8d8:	f100 80c7 	bmi.w	800ea6a <E131Bridge::HandleDmx()+0x34a>
 800e8dc:	f8ba 306d 	ldrh.w	r3, [sl, #109]	@ 0x6d
 800e8e0:	b29a      	uxth	r2, r3
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	f000 80c4 	beq.w	800ea70 <E131Bridge::HandleDmx()+0x350>
 800e8e8:	f899 202c 	ldrb.w	r2, [r9, #44]	@ 0x2c
 800e8ec:	2a00      	cmp	r2, #0
 800e8ee:	f040 80bf 	bne.w	800ea70 <E131Bridge::HandleDmx()+0x350>
 800e8f2:	9a06      	ldr	r2, [sp, #24]
 800e8f4:	ba5b      	rev16	r3, r3
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	b91a      	cbnz	r2, 800e902 <E131Bridge::HandleDmx()+0x1e2>
 800e8fa:	f1bb 0f00 	cmp.w	fp, #0
 800e8fe:	f000 8219 	beq.w	800ed34 <E131Bridge::HandleDmx()+0x614>
 800e902:	9906      	ldr	r1, [sp, #24]
 800e904:	465a      	mov	r2, fp
 800e906:	4648      	mov	r0, r9
 800e908:	f7ff fd76 	bl	800e3f8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800e90c:	f240 1301 	movw	r3, #257	@ 0x101
 800e910:	f8a9 302b 	strh.w	r3, [r9, #43]	@ 0x2b
 800e914:	e0b1      	b.n	800ea7a <E131Bridge::HandleDmx()+0x35a>
 800e916:	f8d9 2c6c 	ldr.w	r2, [r9, #3180]	@ 0xc6c
 800e91a:	3215      	adds	r2, #21
 800e91c:	1e6b      	subs	r3, r5, #1
 800e91e:	4610      	mov	r0, r2
 800e920:	f105 0e0f 	add.w	lr, r5, #15
 800e924:	e001      	b.n	800e92a <E131Bridge::HandleDmx()+0x20a>
 800e926:	4573      	cmp	r3, lr
 800e928:	d03f      	beq.n	800e9aa <E131Bridge::HandleDmx()+0x28a>
 800e92a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e92e:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 800e932:	4561      	cmp	r1, ip
 800e934:	d0f7      	beq.n	800e926 <E131Bridge::HandleDmx()+0x206>
 800e936:	9b03      	ldr	r3, [sp, #12]
 800e938:	455b      	cmp	r3, fp
 800e93a:	eba1 010c 	sub.w	r1, r1, ip
 800e93e:	f000 80cb 	beq.w	800ead8 <E131Bridge::HandleDmx()+0x3b8>
 800e942:	b919      	cbnz	r1, 800e94c <E131Bridge::HandleDmx()+0x22c>
 800e944:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e948:	468b      	mov	fp, r1
 800e94a:	e740      	b.n	800e7ce <E131Bridge::HandleDmx()+0xae>
 800e94c:	f99a 2070 	ldrsb.w	r2, [sl, #112]	@ 0x70
 800e950:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800e954:	2a00      	cmp	r2, #0
 800e956:	f6ff aefc 	blt.w	800e752 <E131Bridge::HandleDmx()+0x32>
 800e95a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800e95e:	f47f aef8 	bne.w	800e752 <E131Bridge::HandleDmx()+0x32>
 800e962:	9306      	str	r3, [sp, #24]
 800e964:	469b      	mov	fp, r3
 800e966:	e744      	b.n	800e7f2 <E131Bridge::HandleDmx()+0xd2>
 800e968:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e96c:	f103 0213 	add.w	r2, r3, #19
 800e970:	b2d2      	uxtb	r2, r2
 800e972:	f1bb 0f00 	cmp.w	fp, #0
 800e976:	f47f af2a 	bne.w	800e7ce <E131Bridge::HandleDmx()+0xae>
 800e97a:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800e97e:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800e982:	1a52      	subs	r2, r2, r1
 800e984:	b2d2      	uxtb	r2, r2
 800e986:	2a13      	cmp	r2, #19
 800e988:	f67f aee3 	bls.w	800e752 <E131Bridge::HandleDmx()+0x32>
 800e98c:	f99a 3070 	ldrsb.w	r3, [sl, #112]	@ 0x70
 800e990:	f89a 2070 	ldrb.w	r2, [sl, #112]	@ 0x70
 800e994:	2b00      	cmp	r3, #0
 800e996:	f6ff aedc 	blt.w	800e752 <E131Bridge::HandleDmx()+0x32>
 800e99a:	0651      	lsls	r1, r2, #25
 800e99c:	f100 80ef 	bmi.w	800eb7e <E131Bridge::HandleDmx()+0x45e>
 800e9a0:	f8cd b018 	str.w	fp, [sp, #24]
 800e9a4:	f04f 0b01 	mov.w	fp, #1
 800e9a8:	e723      	b.n	800e7f2 <E131Bridge::HandleDmx()+0xd2>
 800e9aa:	9b03      	ldr	r3, [sp, #12]
 800e9ac:	455b      	cmp	r3, fp
 800e9ae:	f47f af0a 	bne.w	800e7c6 <E131Bridge::HandleDmx()+0xa6>
 800e9b2:	f04f 0b01 	mov.w	fp, #1
 800e9b6:	e6f4      	b.n	800e7a2 <E131Bridge::HandleDmx()+0x82>
 800e9b8:	20000080 	andcs	r0, r0, r0, lsl #1
 800e9bc:	f67f af34 	bls.w	800e828 <E131Bridge::HandleDmx()+0x108>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	f845 3c04 	str.w	r3, [r5, #-4]
 800e9c6:	61ab      	str	r3, [r5, #24]
 800e9c8:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800e9cc:	f89a 306c 	ldrb.w	r3, [sl, #108]	@ 0x6c
 800e9d0:	f889 3020 	strb.w	r3, [r9, #32]
 800e9d4:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800e9d8:	9305      	str	r3, [sp, #20]
 800e9da:	9b04      	ldr	r3, [sp, #16]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f43f af2a 	beq.w	800e836 <E131Bridge::HandleDmx()+0x116>
 800e9e2:	9b06      	ldr	r3, [sp, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d17c      	bne.n	800eae2 <E131Bridge::HandleDmx()+0x3c2>
 800e9e8:	9b03      	ldr	r3, [sp, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f000 8146 	beq.w	800ec7c <E131Bridge::HandleDmx()+0x55c>
 800e9f0:	f1bb 0f00 	cmp.w	fp, #0
 800e9f4:	f43f af6d 	beq.w	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800e9f8:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800e9fc:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800ea00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea04:	616b      	str	r3, [r5, #20]
 800ea06:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800ea0a:	b923      	cbnz	r3, 800ea16 <E131Bridge::HandleDmx()+0x2f6>
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800ea12:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800ea16:	2301      	movs	r3, #1
 800ea18:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800ea1c:	9b07      	ldr	r3, [sp, #28]
 800ea1e:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800ea22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f000 80ee 	beq.w	800ec08 <E131Bridge::HandleDmx()+0x4e8>
 800ea2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea2e:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800ea32:	9b08      	ldr	r3, [sp, #32]
 800ea34:	4450      	add	r0, sl
 800ea36:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ea3a:	f802 1b01 	strb.w	r1, [r2], #1
 800ea3e:	4283      	cmp	r3, r0
 800ea40:	d1f9      	bne.n	800ea36 <E131Bridge::HandleDmx()+0x316>
 800ea42:	9b07      	ldr	r3, [sp, #28]
 800ea44:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800ea48:	f1bc 0f00 	cmp.w	ip, #0
 800ea4c:	f000 8165 	beq.w	800ed1a <E131Bridge::HandleDmx()+0x5fa>
 800ea50:	9a05      	ldr	r2, [sp, #20]
 800ea52:	9b08      	ldr	r3, [sp, #32]
 800ea54:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ea58:	f802 1b01 	strb.w	r1, [r2], #1
 800ea5c:	4283      	cmp	r3, r0
 800ea5e:	d1f9      	bne.n	800ea54 <E131Bridge::HandleDmx()+0x334>
 800ea60:	f89a 3070 	ldrb.w	r3, [sl, #112]	@ 0x70
 800ea64:	069b      	lsls	r3, r3, #26
 800ea66:	f57f af39 	bpl.w	800e8dc <E131Bridge::HandleDmx()+0x1bc>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f889 302c 	strb.w	r3, [r9, #44]	@ 0x2c
 800ea70:	f899 302b 	ldrb.w	r3, [r9, #43]	@ 0x2b
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 808a 	beq.w	800eb8e <E131Bridge::HandleDmx()+0x46e>
 800ea7a:	f8d9 0c74 	ldr.w	r0, [r9, #3188]	@ 0xc74
 800ea7e:	f899 202f 	ldrb.w	r2, [r9, #47]	@ 0x2f
 800ea82:	6803      	ldr	r3, [r0, #0]
 800ea84:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800ea88:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 800ea8c:	2a00      	cmp	r2, #0
 800ea8e:	f000 8083 	beq.w	800eb98 <E131Bridge::HandleDmx()+0x478>
 800ea92:	6803      	ldr	r3, [r0, #0]
 800ea94:	9a05      	ldr	r2, [sp, #20]
 800ea96:	2101      	movs	r1, #1
 800ea98:	9100      	str	r1, [sp, #0]
 800ea9a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800ea9e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	47d8      	blx	fp
 800eaa6:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 800eaaa:	b95b      	cbnz	r3, 800eac4 <E131Bridge::HandleDmx()+0x3a4>
 800eaac:	f8d9 0c74 	ldr.w	r0, [r9, #3188]	@ 0xc74
 800eab0:	6803      	ldr	r3, [r0, #0]
 800eab2:	4631      	mov	r1, r6
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	4798      	blx	r3
 800eab8:	f04f 0301 	mov.w	r3, #1
 800eabc:	f885 3039 	strb.w	r3, [r5, #57]	@ 0x39
 800eac0:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800eac4:	f899 3021 	ldrb.w	r3, [r9, #33]	@ 0x21
 800eac8:	f043 0302 	orr.w	r3, r3, #2
 800eacc:	f889 3021 	strb.w	r3, [r9, #33]	@ 0x21
 800ead0:	e63f      	b.n	800e752 <E131Bridge::HandleDmx()+0x32>
 800ead2:	b00b      	add	sp, #44	@ 0x2c
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead8:	fab1 fb81 	clz	fp, r1
 800eadc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800eae0:	e65f      	b.n	800e7a2 <E131Bridge::HandleDmx()+0x82>
 800eae2:	9b03      	ldr	r3, [sp, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f040 8093 	bne.w	800ec10 <E131Bridge::HandleDmx()+0x4f0>
 800eaea:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800eaee:	742b      	strb	r3, [r5, #16]
 800eaf0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800eaf4:	f845 3c08 	str.w	r3, [r5, #-8]
 800eaf8:	9b07      	ldr	r3, [sp, #28]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 8084 	beq.w	800ec08 <E131Bridge::HandleDmx()+0x4e8>
 800eb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb02:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800eb06:	9b08      	ldr	r3, [sp, #32]
 800eb08:	4452      	add	r2, sl
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb10:	f801 0b01 	strb.w	r0, [r1], #1
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d1f9      	bne.n	800eb0c <E131Bridge::HandleDmx()+0x3ec>
 800eb18:	9b07      	ldr	r3, [sp, #28]
 800eb1a:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800eb1e:	9905      	ldr	r1, [sp, #20]
 800eb20:	9b08      	ldr	r3, [sp, #32]
 800eb22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb26:	f801 0b01 	strb.w	r0, [r1], #1
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d1f9      	bne.n	800eb22 <E131Bridge::HandleDmx()+0x402>
 800eb2e:	e6d0      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800eb30:	f1bb 0f00 	cmp.w	fp, #0
 800eb34:	f43f ae8b 	beq.w	800e84e <E131Bridge::HandleDmx()+0x12e>
 800eb38:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800eb3c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800eb40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800eb44:	616b      	str	r3, [r5, #20]
 800eb46:	9b07      	ldr	r3, [sp, #28]
 800eb48:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d05b      	beq.n	800ec08 <E131Bridge::HandleDmx()+0x4e8>
 800eb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb52:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800eb56:	9b08      	ldr	r3, [sp, #32]
 800eb58:	4452      	add	r2, sl
 800eb5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb5e:	f801 0b01 	strb.w	r0, [r1], #1
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d1f9      	bne.n	800eb5a <E131Bridge::HandleDmx()+0x43a>
 800eb66:	9b07      	ldr	r3, [sp, #28]
 800eb68:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800eb6c:	9905      	ldr	r1, [sp, #20]
 800eb6e:	9b08      	ldr	r3, [sp, #32]
 800eb70:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb74:	f801 0b01 	strb.w	r0, [r1], #1
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d1f9      	bne.n	800eb70 <E131Bridge::HandleDmx()+0x450>
 800eb7c:	e6a9      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800eb7e:	4659      	mov	r1, fp
 800eb80:	f04f 0b01 	mov.w	fp, #1
 800eb84:	465a      	mov	r2, fp
 800eb86:	4648      	mov	r0, r9
 800eb88:	f7ff fd38 	bl	800e5fc <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800eb8c:	e5e1      	b.n	800e752 <E131Bridge::HandleDmx()+0x32>
 800eb8e:	f8d9 0c74 	ldr.w	r0, [r9, #3188]	@ 0xc74
 800eb92:	e77e      	b.n	800ea92 <E131Bridge::HandleDmx()+0x372>
 800eb94:	2101      	movs	r1, #1
 800eb96:	e7f5      	b.n	800eb84 <E131Bridge::HandleDmx()+0x464>
 800eb98:	9200      	str	r2, [sp, #0]
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	9a05      	ldr	r2, [sp, #20]
 800eb9e:	47d8      	blx	fp
 800eba0:	2301      	movs	r3, #1
 800eba2:	f885 303a 	strb.w	r3, [r5, #58]	@ 0x3a
 800eba6:	e78d      	b.n	800eac4 <E131Bridge::HandleDmx()+0x3a4>
 800eba8:	f8d9 3c70 	ldr.w	r3, [r9, #3184]	@ 0xc70
 800ebac:	f845 3c04 	str.w	r3, [r5, #-4]
 800ebb0:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800ebb4:	742b      	strb	r3, [r5, #16]
 800ebb6:	f10a 0216 	add.w	r2, sl, #22
 800ebba:	462b      	mov	r3, r5
 800ebbc:	f105 0010 	add.w	r0, r5, #16
 800ebc0:	f852 1b04 	ldr.w	r1, [r2], #4
 800ebc4:	f843 1b04 	str.w	r1, [r3], #4
 800ebc8:	4283      	cmp	r3, r0
 800ebca:	d1f9      	bne.n	800ebc0 <E131Bridge::HandleDmx()+0x4a0>
 800ebcc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ebd0:	f845 3c08 	str.w	r3, [r5, #-8]
 800ebd4:	9b07      	ldr	r3, [sp, #28]
 800ebd6:	b1bb      	cbz	r3, 800ec08 <E131Bridge::HandleDmx()+0x4e8>
 800ebd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebda:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 800ebde:	9b08      	ldr	r3, [sp, #32]
 800ebe0:	4452      	add	r2, sl
 800ebe2:	4639      	mov	r1, r7
 800ebe4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ebe8:	f801 0b01 	strb.w	r0, [r1], #1
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d1f9      	bne.n	800ebe4 <E131Bridge::HandleDmx()+0x4c4>
 800ebf0:	9b07      	ldr	r3, [sp, #28]
 800ebf2:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800ebf6:	9905      	ldr	r1, [sp, #20]
 800ebf8:	9b08      	ldr	r3, [sp, #32]
 800ebfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ebfe:	f801 0b01 	strb.w	r0, [r1], #1
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d1f9      	bne.n	800ebfa <E131Bridge::HandleDmx()+0x4da>
 800ec06:	e664      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ec08:	9b07      	ldr	r3, [sp, #28]
 800ec0a:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800ec0e:	e660      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ec10:	f1bb 0f00 	cmp.w	fp, #0
 800ec14:	f47f ae5d 	bne.w	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ec18:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800ec1c:	742b      	strb	r3, [r5, #16]
 800ec1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ec22:	f845 3c08 	str.w	r3, [r5, #-8]
 800ec26:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800ec2a:	b923      	cbnz	r3, 800ec36 <E131Bridge::HandleDmx()+0x516>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800ec32:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800ec36:	2301      	movs	r3, #1
 800ec38:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800ec3c:	9b07      	ldr	r3, [sp, #28]
 800ec3e:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d0e0      	beq.n	800ec08 <E131Bridge::HandleDmx()+0x4e8>
 800ec46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec48:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800ec4c:	9b08      	ldr	r3, [sp, #32]
 800ec4e:	4450      	add	r0, sl
 800ec50:	463a      	mov	r2, r7
 800ec52:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ec56:	f802 1b01 	strb.w	r1, [r2], #1
 800ec5a:	4283      	cmp	r3, r0
 800ec5c:	d1f9      	bne.n	800ec52 <E131Bridge::HandleDmx()+0x532>
 800ec5e:	9b07      	ldr	r3, [sp, #28]
 800ec60:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800ec64:	f1bc 0f00 	cmp.w	ip, #0
 800ec68:	d04a      	beq.n	800ed00 <E131Bridge::HandleDmx()+0x5e0>
 800ec6a:	9a05      	ldr	r2, [sp, #20]
 800ec6c:	9b08      	ldr	r3, [sp, #32]
 800ec6e:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ec72:	f802 1b01 	strb.w	r1, [r2], #1
 800ec76:	4283      	cmp	r3, r0
 800ec78:	d1f9      	bne.n	800ec6e <E131Bridge::HandleDmx()+0x54e>
 800ec7a:	e62a      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ec7c:	f8d9 3c70 	ldr.w	r3, [r9, #3184]	@ 0xc70
 800ec80:	61ab      	str	r3, [r5, #24]
 800ec82:	f89a 306f 	ldrb.w	r3, [sl, #111]	@ 0x6f
 800ec86:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
 800ec8a:	f105 021c 	add.w	r2, r5, #28
 800ec8e:	f10a 0316 	add.w	r3, sl, #22
 800ec92:	f10a 0026 	add.w	r0, sl, #38	@ 0x26
 800ec96:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec9a:	f842 1b04 	str.w	r1, [r2], #4
 800ec9e:	4298      	cmp	r0, r3
 800eca0:	d1f9      	bne.n	800ec96 <E131Bridge::HandleDmx()+0x576>
 800eca2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800eca6:	616b      	str	r3, [r5, #20]
 800eca8:	f899 302a 	ldrb.w	r3, [r9, #42]	@ 0x2a
 800ecac:	b923      	cbnz	r3, 800ecb8 <E131Bridge::HandleDmx()+0x598>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	f889 302a 	strb.w	r3, [r9, #42]	@ 0x2a
 800ecb4:	f889 302d 	strb.w	r3, [r9, #45]	@ 0x2d
 800ecb8:	2301      	movs	r3, #1
 800ecba:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800ecbe:	9b07      	ldr	r3, [sp, #28]
 800ecc0:	f8d5 c030 	ldr.w	ip, [r5, #48]	@ 0x30
 800ecc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d09d      	beq.n	800ec08 <E131Bridge::HandleDmx()+0x4e8>
 800eccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecce:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 800ecd2:	9b08      	ldr	r3, [sp, #32]
 800ecd4:	4450      	add	r0, sl
 800ecd6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ecda:	f802 1b01 	strb.w	r1, [r2], #1
 800ecde:	4283      	cmp	r3, r0
 800ece0:	d1f9      	bne.n	800ecd6 <E131Bridge::HandleDmx()+0x5b6>
 800ece2:	9b07      	ldr	r3, [sp, #28]
 800ece4:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800ece8:	f1bc 0f00 	cmp.w	ip, #0
 800ecec:	d02c      	beq.n	800ed48 <E131Bridge::HandleDmx()+0x628>
 800ecee:	9a05      	ldr	r2, [sp, #20]
 800ecf0:	9b08      	ldr	r3, [sp, #32]
 800ecf2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ecf6:	f802 1b01 	strb.w	r1, [r2], #1
 800ecfa:	4283      	cmp	r3, r0
 800ecfc:	d1f9      	bne.n	800ecf2 <E131Bridge::HandleDmx()+0x5d2>
 800ecfe:	e5e8      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ed00:	1e7b      	subs	r3, r7, #1
 800ed02:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ed06:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800ed0a:	428a      	cmp	r2, r1
 800ed0c:	bf38      	it	cc
 800ed0e:	460a      	movcc	r2, r1
 800ed10:	4598      	cmp	r8, r3
 800ed12:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800ed16:	d1f4      	bne.n	800ed02 <E131Bridge::HandleDmx()+0x5e2>
 800ed18:	e5db      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ed1a:	1e7b      	subs	r3, r7, #1
 800ed1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ed20:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800ed24:	428a      	cmp	r2, r1
 800ed26:	bf38      	it	cc
 800ed28:	460a      	movcc	r2, r1
 800ed2a:	4543      	cmp	r3, r8
 800ed2c:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800ed30:	d1f4      	bne.n	800ed1c <E131Bridge::HandleDmx()+0x5fc>
 800ed32:	e5ce      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ed34:	69aa      	ldr	r2, [r5, #24]
 800ed36:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800ed3a:	3a00      	subs	r2, #0
 800ed3c:	bf18      	it	ne
 800ed3e:	2201      	movne	r2, #1
 800ed40:	3900      	subs	r1, #0
 800ed42:	bf18      	it	ne
 800ed44:	2101      	movne	r1, #1
 800ed46:	e5de      	b.n	800e906 <E131Bridge::HandleDmx()+0x1e6>
 800ed48:	1e7b      	subs	r3, r7, #1
 800ed4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ed4e:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800ed52:	428a      	cmp	r2, r1
 800ed54:	bf38      	it	cc
 800ed56:	460a      	movcc	r2, r1
 800ed58:	4543      	cmp	r3, r8
 800ed5a:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800ed5e:	d1f4      	bne.n	800ed4a <E131Bridge::HandleDmx()+0x62a>
 800ed60:	e5b7      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>
 800ed62:	1e7b      	subs	r3, r7, #1
 800ed64:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ed68:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 800ed6c:	428a      	cmp	r2, r1
 800ed6e:	bf38      	it	cc
 800ed70:	460a      	movcc	r2, r1
 800ed72:	4543      	cmp	r3, r8
 800ed74:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 800ed78:	d1f4      	bne.n	800ed64 <E131Bridge::HandleDmx()+0x644>
 800ed7a:	e5aa      	b.n	800e8d2 <E131Bridge::HandleDmx()+0x1b2>

0800ed7c <E131Bridge::IsValidRoot()>:
 800ed7c:	b410      	push	{r4}
 800ed7e:	f8d0 4c6c 	ldr.w	r4, [r0, #3180]	@ 0xc6c
 800ed82:	4a11      	ldr	r2, [pc, #68]	@ (800edc8 <E131Bridge::IsValidRoot()+0x4c>)
 800ed84:	1ce3      	adds	r3, r4, #3
 800ed86:	f104 0c0f 	add.w	ip, r4, #15
 800ed8a:	e001      	b.n	800ed90 <E131Bridge::IsValidRoot()+0x14>
 800ed8c:	4563      	cmp	r3, ip
 800ed8e:	d009      	beq.n	800eda4 <E131Bridge::IsValidRoot()+0x28>
 800ed90:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ed94:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ed98:	4288      	cmp	r0, r1
 800ed9a:	d0f7      	beq.n	800ed8c <E131Bridge::IsValidRoot()+0x10>
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda2:	4770      	bx	lr
 800eda4:	f8d4 0012 	ldr.w	r0, [r4, #18]
 800eda8:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800edac:	d007      	beq.n	800edbe <E131Bridge::IsValidRoot()+0x42>
 800edae:	f1a0 6000 	sub.w	r0, r0, #134217728	@ 0x8000000
 800edb2:	fab0 f080 	clz	r0, r0
 800edb6:	0940      	lsrs	r0, r0, #5
 800edb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	2001      	movs	r0, #1
 800edc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	08020b8d 	stmdaeq	r2, {r0, r2, r3, r7, r8, r9, fp}

0800edcc <E131Bridge::Process()>:
 800edcc:	f890 202b 	ldrb.w	r2, [r0, #43]	@ 0x2b
 800edd0:	6843      	ldr	r3, [r0, #4]
 800edd2:	2100      	movs	r1, #0
 800edd4:	b510      	push	{r4, lr}
 800edd6:	4604      	mov	r4, r0
 800edd8:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800eddc:	6083      	str	r3, [r0, #8]
 800edde:	b112      	cbz	r2, 800ede6 <E131Bridge::Process()+0x1a>
 800ede0:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 800ede4:	b1ea      	cbz	r2, 800ee22 <E131Bridge::Process()+0x56>
 800ede6:	f8d4 3c74 	ldr.w	r3, [r4, #3188]	@ 0xc74
 800edea:	b14b      	cbz	r3, 800ee00 <E131Bridge::Process()+0x34>
 800edec:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	@ 0xc6c
 800edf0:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800edf4:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 800edf8:	d01c      	beq.n	800ee34 <E131Bridge::Process()+0x68>
 800edfa:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 800edfe:	d033      	beq.n	800ee68 <E131Bridge::Process()+0x9c>
 800ee00:	f894 3c68 	ldrb.w	r3, [r4, #3176]	@ 0xc68
 800ee04:	b163      	cbz	r3, 800ee20 <E131Bridge::Process()+0x54>
 800ee06:	4b1c      	ldr	r3, [pc, #112]	@ (800ee78 <E131Bridge::Process()+0xac>)
 800ee08:	6818      	ldr	r0, [r3, #0]
 800ee0a:	6943      	ldr	r3, [r0, #20]
 800ee0c:	2b04      	cmp	r3, #4
 800ee0e:	d007      	beq.n	800ee20 <E131Bridge::Process()+0x54>
 800ee10:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800ee14:	bb1b      	cbnz	r3, 800ee5e <E131Bridge::Process()+0x92>
 800ee16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee1a:	2102      	movs	r1, #2
 800ee1c:	f00a bdc0 	b.w	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800ee20:	bd10      	pop	{r4, pc}
 800ee22:	6900      	ldr	r0, [r0, #16]
 800ee24:	f640 11c3 	movw	r1, #2499	@ 0x9c3
 800ee28:	1a1b      	subs	r3, r3, r0
 800ee2a:	428b      	cmp	r3, r1
 800ee2c:	bf88      	it	hi
 800ee2e:	f884 202b 	strbhi.w	r2, [r4, #43]	@ 0x2b
 800ee32:	e7d8      	b.n	800ede6 <E131Bridge::Process()+0x1a>
 800ee34:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800ee38:	2a02      	cmp	r2, #2
 800ee3a:	d1e1      	bne.n	800ee00 <E131Bridge::Process()+0x34>
 800ee3c:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 800ee40:	2aa1      	cmp	r2, #161	@ 0xa1
 800ee42:	d1dd      	bne.n	800ee00 <E131Bridge::Process()+0x34>
 800ee44:	f8b3 2077 	ldrh.w	r2, [r3, #119]	@ 0x77
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	d1d9      	bne.n	800ee00 <E131Bridge::Process()+0x34>
 800ee4c:	f8b3 3079 	ldrh.w	r3, [r3, #121]	@ 0x79
 800ee50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee54:	d1d4      	bne.n	800ee00 <E131Bridge::Process()+0x34>
 800ee56:	4620      	mov	r0, r4
 800ee58:	f7ff fc62 	bl	800e720 <E131Bridge::HandleDmx()>
 800ee5c:	e7d0      	b.n	800ee00 <E131Bridge::Process()+0x34>
 800ee5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee62:	2103      	movs	r1, #3
 800ee64:	f00a bd9c 	b.w	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800ee68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee6e:	d1c7      	bne.n	800ee00 <E131Bridge::Process()+0x34>
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 f803 	bl	800ee7c <E131Bridge::HandleSynchronization()>
 800ee76:	e7c3      	b.n	800ee00 <E131Bridge::Process()+0x34>
 800ee78:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800ee7c <E131Bridge::HandleSynchronization()>:
 800ee7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee80:	f8d0 3c6c 	ldr.w	r3, [r0, #3180]	@ 0xc6c
 800ee84:	8b42      	ldrh	r2, [r0, #26]
 800ee86:	f8b3 302d 	ldrh.w	r3, [r3, #45]	@ 0x2d
 800ee8a:	ba5b      	rev16	r3, r3
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	4604      	mov	r4, r0
 800ee92:	d009      	beq.n	800eea8 <E131Bridge::HandleSynchronization()+0x2c>
 800ee94:	8b82      	ldrh	r2, [r0, #28]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d006      	beq.n	800eea8 <E131Bridge::HandleSynchronization()+0x2c>
 800ee9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ef18 <E131Bridge::HandleSynchronization()+0x9c>)
 800ee9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eea0:	6818      	ldr	r0, [r3, #0]
 800eea2:	2102      	movs	r1, #2
 800eea4:	f00a bd7c 	b.w	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 800eea8:	6863      	ldr	r3, [r4, #4]
 800eeaa:	6123      	str	r3, [r4, #16]
 800eeac:	2500      	movs	r5, #0
 800eeae:	f204 260a 	addw	r6, r4, #522	@ 0x20a
 800eeb2:	2744      	movs	r7, #68	@ 0x44
 800eeb4:	fb07 f305 	mul.w	r3, r7, r5
 800eeb8:	5cf3      	ldrb	r3, [r6, r3]
 800eeba:	b12b      	cbz	r3, 800eec8 <E131Bridge::HandleSynchronization()+0x4c>
 800eebc:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	@ 0xc74
 800eec0:	6803      	ldr	r3, [r0, #0]
 800eec2:	4629      	mov	r1, r5
 800eec4:	695b      	ldr	r3, [r3, #20]
 800eec6:	4798      	blx	r3
 800eec8:	3501      	adds	r5, #1
 800eeca:	2d22      	cmp	r5, #34	@ 0x22
 800eecc:	d1f2      	bne.n	800eeb4 <E131Bridge::HandleSynchronization()+0x38>
 800eece:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	@ 0xc74
 800eed2:	6803      	ldr	r3, [r0, #0]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	4798      	blx	r3
 800eed8:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 800eedc:	f504 612d 	add.w	r1, r4, #2768	@ 0xad0
 800eee0:	2000      	movs	r0, #0
 800eee2:	2201      	movs	r2, #1
 800eee4:	428b      	cmp	r3, r1
 800eee6:	d107      	bne.n	800eef8 <E131Bridge::HandleSynchronization()+0x7c>
 800eee8:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	@ 0xc78
 800eeec:	b190      	cbz	r0, 800ef14 <E131Bridge::HandleSynchronization()+0x98>
 800eeee:	6803      	ldr	r3, [r0, #0]
 800eef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	4718      	bx	r3
 800eef8:	f893 5042 	ldrb.w	r5, [r3, #66]	@ 0x42
 800eefc:	b145      	cbz	r5, 800ef10 <E131Bridge::HandleSynchronization()+0x94>
 800eefe:	f893 5041 	ldrb.w	r5, [r3, #65]	@ 0x41
 800ef02:	f883 0042 	strb.w	r0, [r3, #66]	@ 0x42
 800ef06:	b91d      	cbnz	r5, 800ef10 <E131Bridge::HandleSynchronization()+0x94>
 800ef08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ef0c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ef10:	3344      	adds	r3, #68	@ 0x44
 800ef12:	e7e7      	b.n	800eee4 <E131Bridge::HandleSynchronization()+0x68>
 800ef14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef18:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800ef1c <E131Bridge::Print()>:
 800ef1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef20:	4b19      	ldr	r3, [pc, #100]	@ (800ef88 <E131Bridge::Print()+0x6c>)
 800ef22:	4604      	mov	r4, r0
 800ef24:	785a      	ldrb	r2, [r3, #1]
 800ef26:	7819      	ldrb	r1, [r3, #0]
 800ef28:	4818      	ldr	r0, [pc, #96]	@ (800ef8c <E131Bridge::Print()+0x70>)
 800ef2a:	f00d fa7f 	bl	801c42c <printf>
 800ef2e:	7fe3      	ldrb	r3, [r4, #31]
 800ef30:	b1fb      	cbz	r3, 800ef72 <E131Bridge::Print()+0x56>
 800ef32:	4817      	ldr	r0, [pc, #92]	@ (800ef90 <E131Bridge::Print()+0x74>)
 800ef34:	4f17      	ldr	r7, [pc, #92]	@ (800ef94 <E131Bridge::Print()+0x78>)
 800ef36:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800ef9c <E131Bridge::Print()+0x80>
 800ef3a:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800efa0 <E131Bridge::Print()+0x84>
 800ef3e:	f00d fa75 	bl	801c42c <printf>
 800ef42:	4626      	mov	r6, r4
 800ef44:	2500      	movs	r5, #0
 800ef46:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d10d      	bne.n	800ef68 <E131Bridge::Print()+0x4c>
 800ef4c:	2344      	movs	r3, #68	@ 0x44
 800ef4e:	f504 7200 	add.w	r2, r4, #512	@ 0x200
 800ef52:	436b      	muls	r3, r5
 800ef54:	4629      	mov	r1, r5
 800ef56:	58d3      	ldr	r3, [r2, r3]
 800ef58:	8e32      	ldrh	r2, [r6, #48]	@ 0x30
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	bf14      	ite	ne
 800ef5e:	463b      	movne	r3, r7
 800ef60:	4643      	moveq	r3, r8
 800ef62:	4648      	mov	r0, r9
 800ef64:	f00d fa62 	bl	801c42c <printf>
 800ef68:	3501      	adds	r5, #1
 800ef6a:	2d22      	cmp	r5, #34	@ 0x22
 800ef6c:	f106 060c 	add.w	r6, r6, #12
 800ef70:	d1e9      	bne.n	800ef46 <E131Bridge::Print()+0x2a>
 800ef72:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800ef76:	b123      	cbz	r3, 800ef82 <E131Bridge::Print()+0x66>
 800ef78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef7c:	4806      	ldr	r0, [pc, #24]	@ (800ef98 <E131Bridge::Print()+0x7c>)
 800ef7e:	f00d ba55 	b.w	801c42c <printf>
 800ef82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef86:	bf00      	nop
 800ef88:	08020b99 	stmdaeq	r2, {r0, r3, r4, r7, r8, r9, fp}
 800ef8c:	0801d5a4 	stmdaeq	r1, {r2, r5, r7, r8, sl, ip, lr, pc}
 800ef90:	0801d51b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, ip, lr, pc}
 800ef94:	0801d4dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, ip, lr, pc}
 800ef98:	0801d5cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, ip, lr, pc}
 800ef9c:	0801d4d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, ip, lr, pc}
 800efa0:	0801d5b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, sl, ip, lr, pc}

0800efa4 <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)>:
 800efa4:	b507      	push	{r0, r1, r2, lr}
 800efa6:	2300      	movs	r3, #0
 800efa8:	2101      	movs	r1, #1
 800efaa:	e9cd 3100 	strd	r3, r1, [sp]
 800efae:	4602      	mov	r2, r0
 800efb0:	4804      	ldr	r0, [pc, #16]	@ (800efc4 <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)+0x20>)
 800efb2:	2329      	movs	r3, #41	@ 0x29
 800efb4:	6800      	ldr	r0, [r0, #0]
 800efb6:	2109      	movs	r1, #9
 800efb8:	f009 fd0e 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 800efbc:	b003      	add	sp, #12
 800efbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800efc2:	bf00      	nop
 800efc4:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800efc8 <RDMDeviceParams::RDMDeviceParams()>:
 800efc8:	b510      	push	{r4, lr}
 800efca:	2225      	movs	r2, #37	@ 0x25
 800efcc:	4604      	mov	r4, r0
 800efce:	2100      	movs	r1, #0
 800efd0:	f00c ff48 	bl	801be64 <memset>
 800efd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800efd8:	237f      	movs	r3, #127	@ 0x7f
 800efda:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 800efde:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 800efe2:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
 800efe6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800efea:	4620      	mov	r0, r4
 800efec:	bd10      	pop	{r4, pc}

0800efee <RDMDeviceParams::Load()>:
 800efee:	b508      	push	{r3, lr}
 800eff0:	f7ff ffd8 	bl	800efa4 <RDMDeviceParamsStore::Copy(rdm::deviceparams::Params*)>
 800eff4:	bd08      	pop	{r3, pc}
	...

0800eff8 <RDMDeviceParams::Set(RDMDevice*)>:
 800eff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800effc:	6803      	ldr	r3, [r0, #0]
 800effe:	460c      	mov	r4, r1
 800f000:	07d9      	lsls	r1, r3, #31
 800f002:	b087      	sub	sp, #28
 800f004:	4605      	mov	r5, r0
 800f006:	d52d      	bpl.n	800f064 <RDMDeviceParams::Set(RDMDevice*)+0x6c>
 800f008:	f890 6024 	ldrb.w	r6, [r0, #36]	@ 0x24
 800f00c:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800f010:	2e20      	cmp	r6, #32
 800f012:	f100 0104 	add.w	r1, r0, #4
 800f016:	bf28      	it	cs
 800f018:	2620      	movcs	r6, #32
 800f01a:	b39b      	cbz	r3, 800f084 <RDMDeviceParams::Set(RDMDevice*)+0x8c>
 800f01c:	f104 0320 	add.w	r3, r4, #32
 800f020:	2701      	movs	r7, #1
 800f022:	4632      	mov	r2, r6
 800f024:	4618      	mov	r0, r3
 800f026:	f04f 0900 	mov.w	r9, #0
 800f02a:	f00c ff04 	bl	801be36 <memmove>
 800f02e:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
 800f032:	e9cd 7901 	strd	r7, r9, [sp, #4]
 800f036:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 800f094 <RDMDeviceParams::Set(RDMDevice*)+0x9c>
 800f03a:	9600      	str	r6, [sp, #0]
 800f03c:	4603      	mov	r3, r0
 800f03e:	2204      	movs	r2, #4
 800f040:	f8d8 0000 	ldr.w	r0, [r8]
 800f044:	f88d 6017 	strb.w	r6, [sp, #23]
 800f048:	2109      	movs	r1, #9
 800f04a:	f009 fc9f 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800f04e:	e9cd 7901 	strd	r7, r9, [sp, #4]
 800f052:	9700      	str	r7, [sp, #0]
 800f054:	f8d8 0000 	ldr.w	r0, [r8]
 800f058:	f10d 0317 	add.w	r3, sp, #23
 800f05c:	2224      	movs	r2, #36	@ 0x24
 800f05e:	2109      	movs	r1, #9
 800f060:	f009 fc94 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800f064:	682b      	ldr	r3, [r5, #0]
 800f066:	079a      	lsls	r2, r3, #30
 800f068:	bf44      	itt	mi
 800f06a:	f8b5 2025 	ldrhmi.w	r2, [r5, #37]	@ 0x25
 800f06e:	f8a4 2040 	strhmi.w	r2, [r4, #64]	@ 0x40
 800f072:	075b      	lsls	r3, r3, #29
 800f074:	bf44      	itt	mi
 800f076:	f8b5 3027 	ldrhmi.w	r3, [r5, #39]	@ 0x27
 800f07a:	f8a4 3042 	strhmi.w	r3, [r4, #66]	@ 0x42
 800f07e:	b007      	add	sp, #28
 800f080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f084:	4632      	mov	r2, r6
 800f086:	4620      	mov	r0, r4
 800f088:	f00c fed5 	bl	801be36 <memmove>
 800f08c:	f884 6051 	strb.w	r6, [r4, #81]	@ 0x51
 800f090:	e7e8      	b.n	800f064 <RDMDeviceParams::Set(RDMDevice*)+0x6c>
 800f092:	bf00      	nop
 800f094:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800f098 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 800f098:	4770      	bx	lr

0800f09a <RDMDeviceResponder::DmxStartAddressUpdate()>:
 800f09a:	4770      	bx	lr

0800f09c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)>:
 800f09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09e:	4604      	mov	r4, r0
 800f0a0:	3004      	adds	r0, #4
 800f0a2:	460f      	mov	r7, r1
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	461d      	mov	r5, r3
 800f0a8:	f001 f870 	bl	801018c <RDMDevice::RDMDevice()>
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	4b24      	ldr	r3, [pc, #144]	@ (800f140 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa4>)
 800f0b0:	f840 3b57 	str.w	r3, [r0], #87
 800f0b4:	f000 fd54 	bl	800fb60 <RDMIdentify::RDMIdentify()>
 800f0b8:	4a22      	ldr	r2, [pc, #136]	@ (800f144 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa8>)
 800f0ba:	66a7      	str	r7, [r4, #104]	@ 0x68
 800f0bc:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 800f0c0:	6011      	str	r1, [r2, #0]
 800f0c2:	4a21      	ldr	r2, [pc, #132]	@ (800f148 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xac>)
 800f0c4:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 800f0c8:	6011      	str	r1, [r2, #0]
 800f0ca:	4a20      	ldr	r2, [pc, #128]	@ (800f14c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xb0>)
 800f0cc:	6014      	str	r4, [r2, #0]
 800f0ce:	2265      	movs	r2, #101	@ 0x65
 800f0d0:	f884 2097 	strb.w	r2, [r4, #151]	@ 0x97
 800f0d4:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 800f0e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f0e6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 800f0ea:	6623      	str	r3, [r4, #96]	@ 0x60
 800f0ec:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 800f0f0:	f104 0271 	add.w	r2, r4, #113	@ 0x71
 800f0f4:	f104 0184 	add.w	r1, r4, #132	@ 0x84
 800f0f8:	f802 3b01 	strb.w	r3, [r2], #1
 800f0fc:	428a      	cmp	r2, r1
 800f0fe:	d1fb      	bne.n	800f0f8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0x5c>
 800f100:	f104 0397 	add.w	r3, r4, #151	@ 0x97
 800f104:	2200      	movs	r2, #0
 800f106:	f801 2b01 	strb.w	r2, [r1], #1
 800f10a:	428b      	cmp	r3, r1
 800f10c:	d1fb      	bne.n	800f106 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0x6a>
 800f10e:	f884 607e 	strb.w	r6, [r4, #126]	@ 0x7e
 800f112:	f884 507d 	strb.w	r5, [r4, #125]	@ 0x7d
 800f116:	f7fb fc03 	bl	800a920 <RDMSoftwareVersion::GetVersion()>
 800f11a:	66e0      	str	r0, [r4, #108]	@ 0x6c
 800f11c:	f7fb fc04 	bl	800a928 <RDMSoftwareVersion::GetVersionLength()>
 800f120:	f105 4380 	add.w	r3, r5, #1073741824	@ 0x40000000
 800f124:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800f126:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
 800f12a:	3b01      	subs	r3, #1
 800f12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	b91b      	cbnz	r3, 800f13c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned long, unsigned long)+0xa0>
 800f134:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f138:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 800f13c:	4620      	mov	r0, r4
 800f13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f140:	08020ba4 	stmdaeq	r2, {r2, r5, r7, r8, r9, fp}
 800f144:	2000d2f8 	strdcs	sp, [r0], -r8
 800f148:	2000d2fc 	strdcs	sp, [r0], -ip
 800f14c:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800f150 <RDMDeviceResponder::Init()>:
 800f150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f152:	2301      	movs	r3, #1
 800f154:	4604      	mov	r4, r0
 800f156:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
 800f15a:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
 800f15e:	2a20      	cmp	r2, #32
 800f160:	bf28      	it	cs
 800f162:	2220      	movcs	r2, #32
 800f164:	b087      	sub	sp, #28
 800f166:	3004      	adds	r0, #4
 800f168:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 800f16c:	4611      	mov	r1, r2
 800f16e:	3901      	subs	r1, #1
 800f170:	d275      	bcs.n	800f25e <RDMDeviceResponder::Init()+0x10e>
 800f172:	2501      	movs	r5, #1
 800f174:	2700      	movs	r7, #0
 800f176:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800f17a:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800f17e:	4e49      	ldr	r6, [pc, #292]	@ (800f2a4 <RDMDeviceResponder::Init()+0x154>)
 800f180:	9200      	str	r2, [sp, #0]
 800f182:	6830      	ldr	r0, [r6, #0]
 800f184:	f88d 2017 	strb.w	r2, [sp, #23]
 800f188:	2109      	movs	r1, #9
 800f18a:	2204      	movs	r2, #4
 800f18c:	f009 fbfe 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800f190:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800f194:	9500      	str	r5, [sp, #0]
 800f196:	6830      	ldr	r0, [r6, #0]
 800f198:	f10d 0317 	add.w	r3, sp, #23
 800f19c:	2224      	movs	r2, #36	@ 0x24
 800f19e:	2109      	movs	r1, #9
 800f1a0:	f009 fbf4 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800f1a4:	f06f 0522 	mvn.w	r5, #34	@ 0x22
 800f1a8:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800f1ac:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 800f1b0:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f1b4:	1b2d      	subs	r5, r5, r4
 800f1b6:	18a9      	adds	r1, r5, r2
 800f1b8:	4288      	cmp	r0, r1
 800f1ba:	d854      	bhi.n	800f266 <RDMDeviceResponder::Init()+0x116>
 800f1bc:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800f1c0:	f7fb fbb4 	bl	800a92c <RDMSoftwareVersion::GetVersionId()>
 800f1c4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 800f1c8:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	f884 2071 	strb.w	r2, [r4, #113]	@ 0x71
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
 800f1d8:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
 800f1dc:	0a1a      	lsrs	r2, r3, #8
 800f1de:	0e03      	lsrs	r3, r0, #24
 800f1e0:	f884 3077 	strb.w	r3, [r4, #119]	@ 0x77
 800f1e4:	0c03      	lsrs	r3, r0, #16
 800f1e6:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
 800f1ea:	0a03      	lsrs	r3, r0, #8
 800f1ec:	f884 3079 	strb.w	r3, [r4, #121]	@ 0x79
 800f1f0:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800f1f4:	f884 2075 	strb.w	r2, [r4, #117]	@ 0x75
 800f1f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1fc:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800f1fe:	f884 007a 	strb.w	r0, [r4, #122]	@ 0x7a
 800f202:	3b01      	subs	r3, #1
 800f204:	f8b4 6064 	ldrh.w	r6, [r4, #100]	@ 0x64
 800f208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f20c:	685d      	ldr	r5, [r3, #4]
 800f20e:	bb7d      	cbnz	r5, 800f270 <RDMDeviceResponder::Init()+0x120>
 800f210:	f8b4 009c 	ldrh.w	r0, [r4, #156]	@ 0x9c
 800f214:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800f218:	0a03      	lsrs	r3, r0, #8
 800f21a:	f884 507c 	strb.w	r5, [r4, #124]	@ 0x7c
 800f21e:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
 800f222:	0a33      	lsrs	r3, r6, #8
 800f224:	b2c0      	uxtb	r0, r0
 800f226:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
 800f22a:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800f22e:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
 800f232:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
 800f236:	f884 6082 	strb.w	r6, [r4, #130]	@ 0x82
 800f23a:	f104 0371 	add.w	r3, r4, #113	@ 0x71
 800f23e:	f104 0284 	add.w	r2, r4, #132	@ 0x84
 800f242:	f813 1b01 	ldrb.w	r1, [r3], #1
 800f246:	7499      	strb	r1, [r3, #18]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d1fa      	bne.n	800f242 <RDMDeviceResponder::Init()+0xf2>
 800f24c:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800f250:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800f254:	4413      	add	r3, r2
 800f256:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800f25a:	b007      	add	sp, #28
 800f25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f25e:	f810 5b01 	ldrb.w	r5, [r0], #1
 800f262:	77c5      	strb	r5, [r0, #31]
 800f264:	e783      	b.n	800f16e <RDMDeviceResponder::Init()+0x1e>
 800f266:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800f26a:	440b      	add	r3, r1
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	e7a2      	b.n	800f1b6 <RDMDeviceResponder::Init()+0x66>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	4628      	mov	r0, r5
 800f274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f276:	4798      	blx	r3
 800f278:	0a00      	lsrs	r0, r0, #8
 800f27a:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 800f27e:	682b      	ldr	r3, [r5, #0]
 800f280:	4628      	mov	r0, r5
 800f282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f284:	4798      	blx	r3
 800f286:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 800f28a:	682b      	ldr	r3, [r5, #0]
 800f28c:	4628      	mov	r0, r5
 800f28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f290:	4798      	blx	r3
 800f292:	0a00      	lsrs	r0, r0, #8
 800f294:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
 800f298:	682b      	ldr	r3, [r5, #0]
 800f29a:	4628      	mov	r0, r5
 800f29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f29e:	4798      	blx	r3
 800f2a0:	e7bf      	b.n	800f222 <RDMDeviceResponder::Init()+0xd2>
 800f2a2:	bf00      	nop
 800f2a4:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800f2a8 <RDMDeviceResponder::Print()>:
 800f2a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	3004      	adds	r0, #4
 800f2ae:	f000 ffbd 	bl	801022c <RDMDevice::Print()>
 800f2b2:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800f2b6:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800f2b8:	481b      	ldr	r0, [pc, #108]	@ (800f328 <RDMDeviceResponder::Print()+0x80>)
 800f2ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800f2c4:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 800f2c6:	f00d f906 	bl	801c4d6 <puts>
 800f2ca:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 800f2ce:	f894 1071 	ldrb.w	r1, [r4, #113]	@ 0x71
 800f2d2:	4816      	ldr	r0, [pc, #88]	@ (800f32c <RDMDeviceResponder::Print()+0x84>)
 800f2d4:	f00d f8aa 	bl	801c42c <printf>
 800f2d8:	f8b4 107f 	ldrh.w	r1, [r4, #127]	@ 0x7f
 800f2dc:	4814      	ldr	r0, [pc, #80]	@ (800f330 <RDMDeviceResponder::Print()+0x88>)
 800f2de:	ba49      	rev16	r1, r1
 800f2e0:	b289      	uxth	r1, r1
 800f2e2:	f00d f8a3 	bl	801c42c <printf>
 800f2e6:	f8b4 107b 	ldrh.w	r1, [r4, #123]	@ 0x7b
 800f2ea:	4812      	ldr	r0, [pc, #72]	@ (800f334 <RDMDeviceResponder::Print()+0x8c>)
 800f2ec:	ba49      	rev16	r1, r1
 800f2ee:	b289      	uxth	r1, r1
 800f2f0:	3508      	adds	r5, #8
 800f2f2:	f00d f89b 	bl	801c42c <printf>
 800f2f6:	9500      	str	r5, [sp, #0]
 800f2f8:	f894 207e 	ldrb.w	r2, [r4, #126]	@ 0x7e
 800f2fc:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 800f300:	480d      	ldr	r0, [pc, #52]	@ (800f338 <RDMDeviceResponder::Print()+0x90>)
 800f302:	b2f3      	uxtb	r3, r6
 800f304:	f00d f892 	bl	801c42c <printf>
 800f308:	f8b4 1081 	ldrh.w	r1, [r4, #129]	@ 0x81
 800f30c:	480b      	ldr	r0, [pc, #44]	@ (800f33c <RDMDeviceResponder::Print()+0x94>)
 800f30e:	ba49      	rev16	r1, r1
 800f310:	b289      	uxth	r1, r1
 800f312:	f00d f88b 	bl	801c42c <printf>
 800f316:	f894 1083 	ldrb.w	r1, [r4, #131]	@ 0x83
 800f31a:	4809      	ldr	r0, [pc, #36]	@ (800f340 <RDMDeviceResponder::Print()+0x98>)
 800f31c:	b002      	add	sp, #8
 800f31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f322:	f00d b883 	b.w	801c42c <printf>
 800f326:	bf00      	nop
 800f328:	0801d5e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, sl, ip, lr, pc}
 800f32c:	0801d602 	stmdaeq	r1, {r1, r9, sl, ip, lr, pc}
 800f330:	0801d61b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, lr, pc}
 800f334:	0801d633 	stmdaeq	r1, {r0, r1, r4, r5, r9, sl, ip, lr, pc}
 800f338:	0801d64b 	stmdaeq	r1, {r0, r1, r3, r6, r9, sl, ip, lr, pc}
 800f33c:	0801d669 	stmdaeq	r1, {r0, r3, r5, r6, r9, sl, ip, lr, pc}
 800f340:	0801d681 	stmdaeq	r1, {r0, r7, r9, sl, ip, lr, pc}

0800f344 <memcpy.isra.0>:
 800f344:	440a      	add	r2, r1
 800f346:	4291      	cmp	r1, r2
 800f348:	d100      	bne.n	800f34c <memcpy.isra.0+0x8>
 800f34a:	4770      	bx	lr
 800f34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f350:	f800 3b01 	strb.w	r3, [r0], #1
 800f354:	e7f7      	b.n	800f346 <memcpy.isra.0+0x2>
	...

0800f358 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800f358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f35c:	790c      	ldrb	r4, [r1, #4]
 800f35e:	f890 3052 	ldrb.w	r3, [r0, #82]	@ 0x52
 800f362:	6809      	ldr	r1, [r1, #0]
 800f364:	2c20      	cmp	r4, #32
 800f366:	b086      	sub	sp, #24
 800f368:	4605      	mov	r5, r0
 800f36a:	bf28      	it	cs
 800f36c:	2420      	movcs	r4, #32
 800f36e:	b313      	cbz	r3, 800f3b6 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x5e>
 800f370:	f100 0820 	add.w	r8, r0, #32
 800f374:	4622      	mov	r2, r4
 800f376:	4640      	mov	r0, r8
 800f378:	f7ff ffe4 	bl	800f344 <memcpy.isra.0>
 800f37c:	2700      	movs	r7, #0
 800f37e:	f885 4050 	strb.w	r4, [r5, #80]	@ 0x50
 800f382:	2501      	movs	r5, #1
 800f384:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800f388:	4e0e      	ldr	r6, [pc, #56]	@ (800f3c4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x6c>)
 800f38a:	9400      	str	r4, [sp, #0]
 800f38c:	6830      	ldr	r0, [r6, #0]
 800f38e:	f88d 4017 	strb.w	r4, [sp, #23]
 800f392:	4643      	mov	r3, r8
 800f394:	2204      	movs	r2, #4
 800f396:	2109      	movs	r1, #9
 800f398:	f009 faf8 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800f39c:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800f3a0:	9500      	str	r5, [sp, #0]
 800f3a2:	6830      	ldr	r0, [r6, #0]
 800f3a4:	f10d 0317 	add.w	r3, sp, #23
 800f3a8:	2224      	movs	r2, #36	@ 0x24
 800f3aa:	2109      	movs	r1, #9
 800f3ac:	f009 faee 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 800f3b0:	b006      	add	sp, #24
 800f3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b6:	4622      	mov	r2, r4
 800f3b8:	f7ff ffc4 	bl	800f344 <memcpy.isra.0>
 800f3bc:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
 800f3c0:	e7f6      	b.n	800f3b0 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x58>
 800f3c2:	bf00      	nop
 800f3c4:	2000e2dc 	ldrdcs	lr, [r0], -ip

0800f3c8 <RDMDeviceResponder::SetFactoryDefaults()>:
 800f3c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	4669      	mov	r1, sp
 800f3ce:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800f3d2:	f88d 3004 	strb.w	r3, [sp, #4]
 800f3d6:	3004      	adds	r0, #4
 800f3d8:	9000      	str	r0, [sp, #0]
 800f3da:	f06f 0522 	mvn.w	r5, #34	@ 0x22
 800f3de:	f7ff ffbb 	bl	800f358 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800f3e2:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800f3e6:	f894 1054 	ldrb.w	r1, [r4, #84]	@ 0x54
 800f3ea:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f3ee:	1b2d      	subs	r5, r5, r4
 800f3f0:	18a8      	adds	r0, r5, r2
 800f3f2:	4288      	cmp	r0, r1
 800f3f4:	d361      	bcc.n	800f4ba <RDMDeviceResponder::SetFactoryDefaults()+0xf2>
 800f3f6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
 800f400:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	685d      	ldr	r5, [r3, #4]
 800f406:	b1f5      	cbz	r5, 800f446 <RDMDeviceResponder::SetFactoryDefaults()+0x7e>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	4628      	mov	r0, r5
 800f40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f40e:	4798      	blx	r3
 800f410:	0a00      	lsrs	r0, r0, #8
 800f412:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 800f416:	682b      	ldr	r3, [r5, #0]
 800f418:	4628      	mov	r0, r5
 800f41a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f41c:	4798      	blx	r3
 800f41e:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
 800f422:	682b      	ldr	r3, [r5, #0]
 800f424:	4628      	mov	r0, r5
 800f426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f428:	4798      	blx	r3
 800f42a:	0a00      	lsrs	r0, r0, #8
 800f42c:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
 800f430:	682b      	ldr	r3, [r5, #0]
 800f432:	4628      	mov	r0, r5
 800f434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f436:	4798      	blx	r3
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	4629      	mov	r1, r5
 800f442:	4620      	mov	r0, r4
 800f444:	4798      	blx	r3
 800f446:	f8b4 509c 	ldrh.w	r5, [r4, #156]	@ 0x9c
 800f44a:	1e6b      	subs	r3, r5, #1
 800f44c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f450:	d217      	bcs.n	800f482 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800f452:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800f456:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800f458:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f45c:	3b01      	subs	r3, #1
 800f45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f462:	6858      	ldr	r0, [r3, #4]
 800f464:	b168      	cbz	r0, 800f482 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800f466:	6803      	ldr	r3, [r0, #0]
 800f468:	4629      	mov	r1, r5
 800f46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f46c:	4798      	blx	r3
 800f46e:	b120      	cbz	r0, 800f47a <RDMDeviceResponder::SetFactoryDefaults()+0xb2>
 800f470:	0a2b      	lsrs	r3, r5, #8
 800f472:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
 800f476:	f884 5080 	strb.w	r5, [r4, #128]	@ 0x80
 800f47a:	6823      	ldr	r3, [r4, #0]
 800f47c:	4620      	mov	r0, r4
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	4798      	blx	r3
 800f482:	f104 0171 	add.w	r1, r4, #113	@ 0x71
 800f486:	2213      	movs	r2, #19
 800f488:	f104 0084 	add.w	r0, r4, #132	@ 0x84
 800f48c:	f7ff ff5a 	bl	800f344 <memcpy.isra.0>
 800f490:	2601      	movs	r6, #1
 800f492:	2100      	movs	r1, #0
 800f494:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800f498:	4299      	cmp	r1, r3
 800f49a:	d313      	bcc.n	800f4c4 <RDMDeviceResponder::SetFactoryDefaults()+0xfc>
 800f49c:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800f4a0:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800f4a4:	4413      	add	r3, r2
 800f4a6:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
 800f4b0:	b002      	add	sp, #8
 800f4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4b6:	f7fb ba13 	b.w	800a8e0 <rdm::device::responder::factorydefaults()>
 800f4ba:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f4be:	4403      	add	r3, r0
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	e795      	b.n	800f3f0 <RDMDeviceResponder::SetFactoryDefaults()+0x28>
 800f4c4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800f4c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4ca:	b193      	cbz	r3, 800f4f2 <RDMDeviceResponder::SetFactoryDefaults()+0x12a>
 800f4cc:	7a1a      	ldrb	r2, [r3, #8]
 800f4ce:	b982      	cbnz	r2, 800f4f2 <RDMDeviceResponder::SetFactoryDefaults()+0x12a>
 800f4d0:	f103 0015 	add.w	r0, r3, #21
 800f4d4:	f890 5023 	ldrb.w	r5, [r0, #35]	@ 0x23
 800f4d8:	b125      	cbz	r5, 800f4e4 <RDMDeviceResponder::SetFactoryDefaults()+0x11c>
 800f4da:	3201      	adds	r2, #1
 800f4dc:	2a20      	cmp	r2, #32
 800f4de:	f800 5f01 	strb.w	r5, [r0, #1]!
 800f4e2:	d1f7      	bne.n	800f4d4 <RDMDeviceResponder::SetFactoryDefaults()+0x10c>
 800f4e4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800f4e8:	899a      	ldrh	r2, [r3, #12]
 800f4ea:	825a      	strh	r2, [r3, #18]
 800f4ec:	7b9a      	ldrb	r2, [r3, #14]
 800f4ee:	751a      	strb	r2, [r3, #20]
 800f4f0:	721e      	strb	r6, [r3, #8]
 800f4f2:	3101      	adds	r1, #1
 800f4f4:	e7ce      	b.n	800f494 <RDMDeviceResponder::SetFactoryDefaults()+0xcc>

0800f4f6 <RDMHandler::RDMHandler(bool)>:
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800f4fc:	7001      	strb	r1, [r0, #0]
 800f4fe:	7042      	strb	r2, [r0, #1]
 800f500:	4770      	bx	lr

0800f502 <RDMHandler::HandleString(char const*, unsigned long)>:
 800f502:	6883      	ldr	r3, [r0, #8]
 800f504:	f803 2f17 	strb.w	r2, [r3, #23]!
 800f508:	440a      	add	r2, r1
 800f50a:	4291      	cmp	r1, r2
 800f50c:	d100      	bne.n	800f510 <RDMHandler::HandleString(char const*, unsigned long)+0xe>
 800f50e:	4770      	bx	lr
 800f510:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f514:	f803 0f01 	strb.w	r0, [r3, #1]!
 800f518:	e7f7      	b.n	800f50a <RDMHandler::HandleString(char const*, unsigned long)+0x8>
	...

0800f51c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 800f522:	25cc      	movs	r5, #204	@ 0xcc
 800f524:	701d      	strb	r5, [r3, #0]
 800f526:	7825      	ldrb	r5, [r4, #0]
 800f528:	705d      	strb	r5, [r3, #1]
 800f52a:	7ba5      	ldrb	r5, [r4, #14]
 800f52c:	73dd      	strb	r5, [r3, #15]
 800f52e:	2500      	movs	r5, #0
 800f530:	745d      	strb	r5, [r3, #17]
 800f532:	7c65      	ldrb	r5, [r4, #17]
 800f534:	749d      	strb	r5, [r3, #18]
 800f536:	7ca5      	ldrb	r5, [r4, #18]
 800f538:	74dd      	strb	r5, [r3, #19]
 800f53a:	7ce5      	ldrb	r5, [r4, #19]
 800f53c:	3501      	adds	r5, #1
 800f53e:	751d      	strb	r5, [r3, #20]
 800f540:	7d25      	ldrb	r5, [r4, #20]
 800f542:	755d      	strb	r5, [r3, #21]
 800f544:	7d65      	ldrb	r5, [r4, #21]
 800f546:	759d      	strb	r5, [r3, #22]
 800f548:	b119      	cbz	r1, 800f552 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800f54a:	1e4d      	subs	r5, r1, #1
 800f54c:	2d01      	cmp	r5, #1
 800f54e:	d91f      	bls.n	800f590 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x74>
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	7dda      	ldrb	r2, [r3, #23]
 800f554:	7419      	strb	r1, [r3, #16]
 800f556:	3218      	adds	r2, #24
 800f558:	709a      	strb	r2, [r3, #2]
 800f55a:	4a14      	ldr	r2, [pc, #80]	@ (800f5ac <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x90>)
 800f55c:	6812      	ldr	r2, [r2, #0]
 800f55e:	1de1      	adds	r1, r4, #7
 800f560:	1c9d      	adds	r5, r3, #2
 800f562:	3249      	adds	r2, #73	@ 0x49
 800f564:	340d      	adds	r4, #13
 800f566:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800f56a:	f805 6f01 	strb.w	r6, [r5, #1]!
 800f56e:	42a1      	cmp	r1, r4
 800f570:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800f574:	71ae      	strb	r6, [r5, #6]
 800f576:	d1f6      	bne.n	800f566 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 800f578:	2200      	movs	r2, #0
 800f57a:	6884      	ldr	r4, [r0, #8]
 800f57c:	7899      	ldrb	r1, [r3, #2]
 800f57e:	4613      	mov	r3, r2
 800f580:	4291      	cmp	r1, r2
 800f582:	d80e      	bhi.n	800f5a2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x86>
 800f584:	0a1d      	lsrs	r5, r3, #8
 800f586:	54a5      	strb	r5, [r4, r2]
 800f588:	6882      	ldr	r2, [r0, #8]
 800f58a:	440a      	add	r2, r1
 800f58c:	7053      	strb	r3, [r2, #1]
 800f58e:	e7df      	b.n	800f550 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 800f590:	7419      	strb	r1, [r3, #16]
 800f592:	2102      	movs	r1, #2
 800f594:	251a      	movs	r5, #26
 800f596:	75d9      	strb	r1, [r3, #23]
 800f598:	0a11      	lsrs	r1, r2, #8
 800f59a:	709d      	strb	r5, [r3, #2]
 800f59c:	7619      	strb	r1, [r3, #24]
 800f59e:	765a      	strb	r2, [r3, #25]
 800f5a0:	e7db      	b.n	800f55a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 800f5a2:	5ca5      	ldrb	r5, [r4, r2]
 800f5a4:	442b      	add	r3, r5
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	3201      	adds	r2, #1
 800f5aa:	e7e9      	b.n	800f580 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 800f5ac:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800f5b0 <RDMHandler::RespondMessageAck()>:
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	f7ff bfb2 	b.w	800f51c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800f5b8 <RDMHandler::GetDeviceInfo(unsigned short)>:
 800f5b8:	4b1c      	ldr	r3, [pc, #112]	@ (800f62c <RDMHandler::GetDeviceInfo(unsigned short)+0x74>)
 800f5ba:	b510      	push	{r4, lr}
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4604      	mov	r4, r0
 800f5c0:	b351      	cbz	r1, 800f618 <RDMHandler::GetDeviceInfo(unsigned short)+0x60>
 800f5c2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800f5c6:	3901      	subs	r1, #1
 800f5c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f5ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f5ce:	8a11      	ldrh	r1, [r2, #16]
 800f5d0:	0a09      	lsrs	r1, r1, #8
 800f5d2:	f883 108e 	strb.w	r1, [r3, #142]	@ 0x8e
 800f5d6:	8a11      	ldrh	r1, [r2, #16]
 800f5d8:	f883 108f 	strb.w	r1, [r3, #143]	@ 0x8f
 800f5dc:	7d11      	ldrb	r1, [r2, #20]
 800f5de:	f883 1090 	strb.w	r1, [r3, #144]	@ 0x90
 800f5e2:	7d51      	ldrb	r1, [r2, #21]
 800f5e4:	f883 1091 	strb.w	r1, [r3, #145]	@ 0x91
 800f5e8:	8a51      	ldrh	r1, [r2, #18]
 800f5ea:	0a09      	lsrs	r1, r1, #8
 800f5ec:	f883 1092 	strb.w	r1, [r3, #146]	@ 0x92
 800f5f0:	8a51      	ldrh	r1, [r2, #18]
 800f5f2:	f883 1093 	strb.w	r1, [r3, #147]	@ 0x93
 800f5f6:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 800f5fa:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
 800f5fe:	f103 0184 	add.w	r1, r3, #132	@ 0x84
 800f602:	68a0      	ldr	r0, [r4, #8]
 800f604:	2213      	movs	r2, #19
 800f606:	75c2      	strb	r2, [r0, #23]
 800f608:	3018      	adds	r0, #24
 800f60a:	f7ff fe9b 	bl	800f344 <memcpy.isra.0>
 800f60e:	4620      	mov	r0, r4
 800f610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f614:	f7ff bfcc 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f618:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800f61c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
 800f620:	0a11      	lsrs	r1, r2, #8
 800f622:	f883 1075 	strb.w	r1, [r3, #117]	@ 0x75
 800f626:	f103 0171 	add.w	r1, r3, #113	@ 0x71
 800f62a:	e7ea      	b.n	800f602 <RDMHandler::GetDeviceInfo(unsigned short)+0x4a>
 800f62c:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800f630 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 800f630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f634:	6887      	ldr	r7, [r0, #8]
 800f636:	2301      	movs	r3, #1
 800f638:	75fb      	strb	r3, [r7, #23]
 800f63a:	4b2c      	ldr	r3, [pc, #176]	@ (800f6ec <RDMHandler::GetFactoryDefaults(unsigned short)+0xbc>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f893 1099 	ldrb.w	r1, [r3, #153]	@ 0x99
 800f642:	b309      	cbz	r1, 800f688 <RDMHandler::GetFactoryDefaults(unsigned short)+0x58>
 800f644:	f06f 0e22 	mvn.w	lr, #34	@ 0x22
 800f648:	f8b3 5048 	ldrh.w	r5, [r3, #72]	@ 0x48
 800f64c:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 800f650:	f893 c054 	ldrb.w	ip, [r3, #84]	@ 0x54
 800f654:	f103 0423 	add.w	r4, r3, #35	@ 0x23
 800f658:	ebae 0e03 	sub.w	lr, lr, r3
 800f65c:	eb0e 0604 	add.w	r6, lr, r4
 800f660:	45b4      	cmp	ip, r6
 800f662:	d813      	bhi.n	800f68c <RDMHandler::GetFactoryDefaults(unsigned short)+0x5c>
 800f664:	4295      	cmp	r5, r2
 800f666:	d130      	bne.n	800f6ca <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800f668:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f66c:	f893 507d 	ldrb.w	r5, [r3, #125]	@ 0x7d
 800f670:	f8b3 409a 	ldrh.w	r4, [r3, #154]	@ 0x9a
 800f674:	442a      	add	r2, r5
 800f676:	4294      	cmp	r4, r2
 800f678:	d127      	bne.n	800f6ca <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800f67a:	f8b3 c064 	ldrh.w	ip, [r3, #100]	@ 0x64
 800f67e:	2500      	movs	r5, #0
 800f680:	f06f 0e14 	mvn.w	lr, #20
 800f684:	4565      	cmp	r5, ip
 800f686:	d306      	bcc.n	800f696 <RDMHandler::GetFactoryDefaults(unsigned short)+0x66>
 800f688:	460b      	mov	r3, r1
 800f68a:	e022      	b.n	800f6d2 <RDMHandler::GetFactoryDefaults(unsigned short)+0xa2>
 800f68c:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800f690:	4432      	add	r2, r6
 800f692:	b292      	uxth	r2, r2
 800f694:	e7e2      	b.n	800f65c <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800f696:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f698:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800f69c:	b31a      	cbz	r2, 800f6e6 <RDMHandler::GetFactoryDefaults(unsigned short)+0xb6>
 800f69e:	7a14      	ldrb	r4, [r2, #8]
 800f6a0:	b19c      	cbz	r4, 800f6ca <RDMHandler::GetFactoryDefaults(unsigned short)+0x9a>
 800f6a2:	7d16      	ldrb	r6, [r2, #20]
 800f6a4:	8a54      	ldrh	r4, [r2, #18]
 800f6a6:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 800f6aa:	f892 9036 	ldrb.w	r9, [r2, #54]	@ 0x36
 800f6ae:	4434      	add	r4, r6
 800f6b0:	b2a4      	uxth	r4, r4
 800f6b2:	f102 0615 	add.w	r6, r2, #21
 800f6b6:	ebae 0a02 	sub.w	sl, lr, r2
 800f6ba:	eb0a 0b06 	add.w	fp, sl, r6
 800f6be:	45cb      	cmp	fp, r9
 800f6c0:	d30c      	bcc.n	800f6dc <RDMHandler::GetFactoryDefaults(unsigned short)+0xac>
 800f6c2:	45a0      	cmp	r8, r4
 800f6c4:	d00f      	beq.n	800f6e6 <RDMHandler::GetFactoryDefaults(unsigned short)+0xb6>
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	7211      	strb	r1, [r2, #8]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	763b      	strb	r3, [r7, #24]
 800f6d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d8:	f7ff bf6a 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f6dc:	f816 bf01 	ldrb.w	fp, [r6, #1]!
 800f6e0:	445c      	add	r4, fp
 800f6e2:	b2a4      	uxth	r4, r4
 800f6e4:	e7e9      	b.n	800f6ba <RDMHandler::GetFactoryDefaults(unsigned short)+0x8a>
 800f6e6:	3501      	adds	r5, #1
 800f6e8:	e7cc      	b.n	800f684 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 800f6ea:	bf00      	nop
 800f6ec:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800f6f0 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	4905      	ldr	r1, [pc, #20]	@ (800f708 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 800f6f4:	4604      	mov	r4, r0
 800f6f6:	220e      	movs	r2, #14
 800f6f8:	f7ff ff03 	bl	800f502 <RDMHandler::HandleString(char const*, unsigned long)>
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f702:	f7ff bf55 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f706:	bf00      	nop
 800f708:	0801d33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, ip, lr, pc}

0800f70c <RDMHandler::GetDeviceLabel(unsigned short)>:
 800f70c:	4b0d      	ldr	r3, [pc, #52]	@ (800f744 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800f70e:	b510      	push	{r4, lr}
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4604      	mov	r4, r0
 800f714:	b189      	cbz	r1, 800f73a <RDMHandler::GetDeviceLabel(unsigned short)+0x2e>
 800f716:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800f71a:	3901      	subs	r1, #1
 800f71c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f71e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f722:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 800f726:	f103 0116 	add.w	r1, r3, #22
 800f72a:	4620      	mov	r0, r4
 800f72c:	f7ff fee9 	bl	800f502 <RDMHandler::HandleString(char const*, unsigned long)>
 800f730:	4620      	mov	r0, r4
 800f732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f736:	f7ff bf3b 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f73a:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 800f73e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800f742:	e7f2      	b.n	800f72a <RDMHandler::GetDeviceLabel(unsigned short)+0x1e>
 800f744:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800f748 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 800f748:	6883      	ldr	r3, [r0, #8]
 800f74a:	2201      	movs	r2, #1
 800f74c:	75da      	strb	r2, [r3, #23]
 800f74e:	4a02      	ldr	r2, [pc, #8]	@ (800f758 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 800f750:	7812      	ldrb	r2, [r2, #0]
 800f752:	761a      	strb	r2, [r3, #24]
 800f754:	f7ff bf2c 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f758:	2000d2f5 	strdcs	sp, [r0], -r5

0800f75c <RDMHandler::GetManufacturerLabel(unsigned short)>:
 800f75c:	4b0a      	ldr	r3, [pc, #40]	@ (800f788 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 800f75e:	b510      	push	{r4, lr}
 800f760:	4619      	mov	r1, r3
 800f762:	4604      	mov	r4, r0
 800f764:	461a      	mov	r2, r3
 800f766:	3301      	adds	r3, #1
 800f768:	7810      	ldrb	r0, [r2, #0]
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d1fa      	bne.n	800f764 <RDMHandler::GetManufacturerLabel(unsigned short)+0x8>
 800f76e:	1a52      	subs	r2, r2, r1
 800f770:	2a20      	cmp	r2, #32
 800f772:	4620      	mov	r0, r4
 800f774:	4904      	ldr	r1, [pc, #16]	@ (800f788 <RDMHandler::GetManufacturerLabel(unsigned short)+0x2c>)
 800f776:	bf28      	it	cs
 800f778:	2220      	movcs	r2, #32
 800f77a:	f7ff fec2 	bl	800f502 <RDMHandler::HandleString(char const*, unsigned long)>
 800f77e:	4620      	mov	r0, r4
 800f780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f784:	f7ff bf14 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f788:	08020daf 	stmdaeq	r2, {r0, r1, r2, r3, r5, r7, r8, sl, fp}

0800f78c <RDMHandler::RespondMessageNack(unsigned short)>:
 800f78c:	460a      	mov	r2, r1
 800f78e:	2102      	movs	r1, #2
 800f790:	f7ff bec4 	b.w	800f51c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800f794 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 800f794:	b510      	push	{r4, lr}
 800f796:	6843      	ldr	r3, [r0, #4]
 800f798:	7d9a      	ldrb	r2, [r3, #22]
 800f79a:	2a01      	cmp	r2, #1
 800f79c:	4604      	mov	r4, r0
 800f79e:	d004      	beq.n	800f7aa <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7a6:	f7ff bff1 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800f7aa:	7ddb      	ldrb	r3, [r3, #23]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d003      	beq.n	800f7b8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800f7b0:	2bff      	cmp	r3, #255	@ 0xff
 800f7b2:	d001      	beq.n	800f7b8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800f7b4:	2106      	movs	r1, #6
 800f7b6:	e7f4      	b.n	800f7a2 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800f7b8:	68a2      	ldr	r2, [r4, #8]
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	2bff      	cmp	r3, #255	@ 0xff
 800f7be:	75d1      	strb	r1, [r2, #23]
 800f7c0:	d102      	bne.n	800f7c8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 800f7c2:	2104      	movs	r1, #4
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	e7ec      	b.n	800f7a2 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800f7c8:	4b03      	ldr	r3, [pc, #12]	@ (800f7d8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 800f7ca:	6818      	ldr	r0, [r3, #0]
 800f7cc:	f00a fb0a 	bl	8019de4 <Hardware::Reboot()>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d0f6      	beq.n	800f7c2 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 800f7d4:	bd10      	pop	{r4, pc}
 800f7d6:	bf00      	nop
 800f7d8:	2000e3e0 	andcs	lr, r0, r0, ror #7

0800f7dc <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 800f7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7de:	6843      	ldr	r3, [r0, #4]
 800f7e0:	7d9a      	ldrb	r2, [r3, #22]
 800f7e2:	2a01      	cmp	r2, #1
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	460d      	mov	r5, r1
 800f7e8:	d004      	beq.n	800f7f4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 800f7ea:	2101      	movs	r1, #1
 800f7ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7f0:	f7ff bfcc 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800f7f4:	7ddb      	ldrb	r3, [r3, #23]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d901      	bls.n	800f7fe <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800f7fa:	2106      	movs	r1, #6
 800f7fc:	e7f6      	b.n	800f7ec <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 800f7fe:	4912      	ldr	r1, [pc, #72]	@ (800f848 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 800f800:	4f12      	ldr	r7, [pc, #72]	@ (800f84c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 800f802:	680e      	ldr	r6, [r1, #0]
 800f804:	4912      	ldr	r1, [pc, #72]	@ (800f850 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 800f806:	6808      	ldr	r0, [r1, #0]
 800f808:	4912      	ldr	r1, [pc, #72]	@ (800f854 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800f80a:	b98b      	cbnz	r3, 800f830 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x54>
 800f80c:	700b      	strb	r3, [r1, #0]
 800f80e:	461a      	mov	r2, r3
 800f810:	2102      	movs	r1, #2
 800f812:	f00a f8e7 	bl	80199e4 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800f816:	7839      	ldrb	r1, [r7, #0]
 800f818:	b111      	cbz	r1, 800f820 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800f81a:	4630      	mov	r0, r6
 800f81c:	f000 f9a7 	bl	800fb6e <RDMIdentify::Off(rdm::identify::Mode)>
 800f820:	b98d      	cbnz	r5, 800f846 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6a>
 800f822:	68a3      	ldr	r3, [r4, #8]
 800f824:	75dd      	strb	r5, [r3, #23]
 800f826:	4620      	mov	r0, r4
 800f828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f82c:	f7ff bec0 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f830:	700a      	strb	r2, [r1, #0]
 800f832:	2104      	movs	r1, #4
 800f834:	f00a f8d6 	bl	80199e4 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 800f838:	7839      	ldrb	r1, [r7, #0]
 800f83a:	2900      	cmp	r1, #0
 800f83c:	d0f0      	beq.n	800f820 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800f83e:	4630      	mov	r0, r6
 800f840:	f000 f994 	bl	800fb6c <RDMIdentify::On(rdm::identify::Mode)>
 800f844:	e7ec      	b.n	800f820 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 800f846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f848:	2000d2f0 	strdcs	sp, [r0], -r0
 800f84c:	2000d2f4 	strdcs	sp, [r0], -r4
 800f850:	2000e3e0 	andcs	lr, r0, r0, ror #7
 800f854:	2000d2f5 	strdcs	sp, [r0], -r5

0800f858 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 800f858:	b538      	push	{r3, r4, r5, lr}
 800f85a:	6843      	ldr	r3, [r0, #4]
 800f85c:	7d9b      	ldrb	r3, [r3, #22]
 800f85e:	4604      	mov	r4, r0
 800f860:	460d      	mov	r5, r1
 800f862:	b123      	cbz	r3, 800f86e <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 800f864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f868:	2101      	movs	r1, #1
 800f86a:	f7ff bf8f 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800f86e:	4b06      	ldr	r3, [pc, #24]	@ (800f888 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 800f870:	6818      	ldr	r0, [r3, #0]
 800f872:	f7ff fda9 	bl	800f3c8 <RDMDeviceResponder::SetFactoryDefaults()>
 800f876:	b935      	cbnz	r5, 800f886 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 800f878:	68a3      	ldr	r3, [r4, #8]
 800f87a:	75dd      	strb	r5, [r3, #23]
 800f87c:	4620      	mov	r0, r4
 800f87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f882:	f7ff be95 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f886:	bd38      	pop	{r3, r4, r5, pc}
 800f888:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800f88c <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 800f88c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f88e:	6843      	ldr	r3, [r0, #4]
 800f890:	460d      	mov	r5, r1
 800f892:	7d99      	ldrb	r1, [r3, #22]
 800f894:	2920      	cmp	r1, #32
 800f896:	4604      	mov	r4, r0
 800f898:	d905      	bls.n	800f8a6 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1a>
 800f89a:	2101      	movs	r1, #1
 800f89c:	b003      	add	sp, #12
 800f89e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f8a2:	f7ff bf73 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800f8a6:	4817      	ldr	r0, [pc, #92]	@ (800f904 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x78>)
 800f8a8:	6800      	ldr	r0, [r0, #0]
 800f8aa:	b302      	cbz	r2, 800f8ee <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x62>
 800f8ac:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800f8b0:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 800f8b2:	3a01      	subs	r2, #1
 800f8b4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f8b8:	b1b9      	cbz	r1, 800f8ea <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x5e>
 800f8ba:	3316      	adds	r3, #22
 800f8bc:	f100 0615 	add.w	r6, r0, #21
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	3201      	adds	r2, #1
 800f8c4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f8c8:	f806 7f01 	strb.w	r7, [r6, #1]!
 800f8cc:	2a20      	cmp	r2, #32
 800f8ce:	d001      	beq.n	800f8d4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x48>
 800f8d0:	4291      	cmp	r1, r2
 800f8d2:	d8f6      	bhi.n	800f8c2 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x36>
 800f8d4:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
 800f8d8:	b995      	cbnz	r5, 800f900 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x74>
 800f8da:	68a3      	ldr	r3, [r4, #8]
 800f8dc:	4620      	mov	r0, r4
 800f8de:	75dd      	strb	r5, [r3, #23]
 800f8e0:	b003      	add	sp, #12
 800f8e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f8e6:	f7ff be63 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800f8ea:	460a      	mov	r2, r1
 800f8ec:	e7f2      	b.n	800f8d4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x48>
 800f8ee:	3317      	adds	r3, #23
 800f8f0:	f88d 1004 	strb.w	r1, [sp, #4]
 800f8f4:	3004      	adds	r0, #4
 800f8f6:	4669      	mov	r1, sp
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	f7ff fd2d 	bl	800f358 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800f8fe:	e7eb      	b.n	800f8d8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4c>
 800f900:	b003      	add	sp, #12
 800f902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f904:	2000d2ec 	andcs	sp, r0, ip, ror #5

0800f908 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 800f908:	b4f0      	push	{r4, r5, r6, r7}
 800f90a:	4615      	mov	r5, r2
 800f90c:	f005 04ef 	and.w	r4, r5, #239	@ 0xef
 800f910:	2c20      	cmp	r4, #32
 800f912:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800f916:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f91a:	d003      	beq.n	800f924 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800f91c:	2105      	movs	r1, #5
 800f91e:	bcf0      	pop	{r4, r5, r6, r7}
 800f920:	f7ff bf34 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800f924:	4c28      	ldr	r4, [pc, #160]	@ (800f9c8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>)
 800f926:	6824      	ldr	r4, [r4, #0]
 800f928:	88a4      	ldrh	r4, [r4, #4]
 800f92a:	4294      	cmp	r4, r2
 800f92c:	d205      	bcs.n	800f93a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x32>
 800f92e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800f932:	42a2      	cmp	r2, r4
 800f934:	d001      	beq.n	800f93a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x32>
 800f936:	2109      	movs	r1, #9
 800f938:	e7f1      	b.n	800f91e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800f93a:	4c24      	ldr	r4, [pc, #144]	@ (800f9cc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc4>)
 800f93c:	4f24      	ldr	r7, [pc, #144]	@ (800f9d0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc8>)
 800f93e:	f8b4 c000 	ldrh.w	ip, [r4]
 800f942:	459c      	cmp	ip, r3
 800f944:	d108      	bne.n	800f958 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x50>
 800f946:	f890 c000 	ldrb.w	ip, [r0]
 800f94a:	7da7      	ldrb	r7, [r4, #22]
 800f94c:	7de3      	ldrb	r3, [r4, #23]
 800f94e:	f1bc 0f00 	cmp.w	ip, #0
 800f952:	d106      	bne.n	800f962 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5a>
 800f954:	b93b      	cbnz	r3, 800f966 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800f956:	e002      	b.n	800f95e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x56>
 800f958:	3418      	adds	r4, #24
 800f95a:	42bc      	cmp	r4, r7
 800f95c:	d1ef      	bne.n	800f93e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 800f95e:	2100      	movs	r1, #0
 800f960:	e7dd      	b.n	800f91e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800f962:	2f00      	cmp	r7, #0
 800f964:	d0fb      	beq.n	800f95e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x56>
 800f966:	2d20      	cmp	r5, #32
 800f968:	d11b      	bne.n	800f9a2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x9a>
 800f96a:	bb59      	cbnz	r1, 800f9c4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xbc>
 800f96c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f970:	429a      	cmp	r2, r3
 800f972:	d0e0      	beq.n	800f936 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2e>
 800f974:	6863      	ldr	r3, [r4, #4]
 800f976:	b913      	cbnz	r3, 800f97e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x76>
 800f978:	68a1      	ldr	r1, [r4, #8]
 800f97a:	07cd      	lsls	r5, r1, #31
 800f97c:	d5ce      	bpl.n	800f91c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x14>
 800f97e:	7d21      	ldrb	r1, [r4, #20]
 800f980:	42b1      	cmp	r1, r6
 800f982:	d001      	beq.n	800f988 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x80>
 800f984:	2101      	movs	r1, #1
 800f986:	e7ca      	b.n	800f91e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16>
 800f988:	68a1      	ldr	r1, [r4, #8]
 800f98a:	104d      	asrs	r5, r1, #1
 800f98c:	eb00 0461 	add.w	r4, r0, r1, asr #1
 800f990:	07c9      	lsls	r1, r1, #31
 800f992:	bf48      	it	mi
 800f994:	5941      	ldrmi	r1, [r0, r5]
 800f996:	4620      	mov	r0, r4
 800f998:	bf48      	it	mi
 800f99a:	58cb      	ldrmi	r3, [r1, r3]
 800f99c:	bcf0      	pop	{r4, r5, r6, r7}
 800f99e:	4611      	mov	r1, r2
 800f9a0:	4718      	bx	r3
 800f9a2:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800f9a6:	f003 0401 	and.w	r4, r3, #1
 800f9aa:	b90d      	cbnz	r5, 800f9b0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xa8>
 800f9ac:	2c00      	cmp	r4, #0
 800f9ae:	d0b5      	beq.n	800f91c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x14>
 800f9b0:	105e      	asrs	r6, r3, #1
 800f9b2:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800f9b6:	b10c      	cbz	r4, 800f9bc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb4>
 800f9b8:	5980      	ldr	r0, [r0, r6]
 800f9ba:	5945      	ldr	r5, [r0, r5]
 800f9bc:	4618      	mov	r0, r3
 800f9be:	462b      	mov	r3, r5
 800f9c0:	bcf0      	pop	{r4, r5, r6, r7}
 800f9c2:	4718      	bx	r3
 800f9c4:	bcf0      	pop	{r4, r5, r6, r7}
 800f9c6:	4770      	bx	lr
 800f9c8:	2000d2fc 	strdcs	sp, [r0], -ip
 800f9cc:	08020bb4 	stmdaeq	r2, {r2, r4, r5, r7, r8, r9, fp}
 800f9d0:	08020d94 	stmdaeq	r2, {r2, r4, r7, r8, sl, fp}

0800f9d4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 800f9d4:	23ff      	movs	r3, #255	@ 0xff
 800f9d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9da:	7013      	strb	r3, [r2, #0]
 800f9dc:	7bcb      	ldrb	r3, [r1, #15]
 800f9de:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800f9e2:	4607      	mov	r7, r0
 800f9e4:	468a      	mov	sl, r1
 800f9e6:	4614      	mov	r4, r2
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d079      	beq.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f9ec:	7c0b      	ldrb	r3, [r1, #16]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d176      	bne.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800f9f2:	4b58      	ldr	r3, [pc, #352]	@ (800fb54 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x180>)
 800f9f4:	1c8e      	adds	r6, r1, #2
 800f9f6:	2206      	movs	r2, #6
 800f9f8:	4957      	ldr	r1, [pc, #348]	@ (800fb58 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x184>)
 800f9fa:	f8d3 8000 	ldr.w	r8, [r3]
 800f9fe:	4630      	mov	r0, r6
 800fa00:	f7fd fc15 	bl	800d22e <memcmp>
 800fa04:	f108 094a 	add.w	r9, r8, #74	@ 0x4a
 800fa08:	4605      	mov	r5, r0
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d06b      	beq.n	800fae6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x112>
 800fa0e:	4630      	mov	r0, r6
 800fa10:	2202      	movs	r2, #2
 800fa12:	4649      	mov	r1, r9
 800fa14:	f7fd fc0b 	bl	800d22e <memcmp>
 800fa18:	4606      	mov	r6, r0
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	d160      	bne.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fa1e:	f10a 0b04 	add.w	fp, sl, #4
 800fa22:	494d      	ldr	r1, [pc, #308]	@ (800fb58 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x184>)
 800fa24:	2204      	movs	r2, #4
 800fa26:	4658      	mov	r0, fp
 800fa28:	f7fd fc01 	bl	800d22e <memcmp>
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d059      	beq.n	800fae6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x112>
 800fa32:	f108 014c 	add.w	r1, r8, #76	@ 0x4c
 800fa36:	2204      	movs	r2, #4
 800fa38:	4658      	mov	r0, fp
 800fa3a:	f7fd fbf8 	bl	800d22e <memcmp>
 800fa3e:	fab0 f580 	clz	r5, r0
 800fa42:	096d      	lsrs	r5, r5, #5
 800fa44:	4631      	mov	r1, r6
 800fa46:	f89a 2013 	ldrb.w	r2, [sl, #19]
 800fa4a:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 800fa4e:	b90d      	cbnz	r5, 800fa54 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x80>
 800fa50:	2900      	cmp	r1, #0
 800fa52:	d045      	beq.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fa54:	2a10      	cmp	r2, #16
 800fa56:	d16f      	bne.n	800fb38 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x164>
 800fa58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa5c:	d145      	bne.n	800faea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x116>
 800fa5e:	787b      	ldrb	r3, [r7, #1]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d13d      	bne.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fa64:	2206      	movs	r2, #6
 800fa66:	4649      	mov	r1, r9
 800fa68:	f10a 0017 	add.w	r0, sl, #23
 800fa6c:	f7fd fbdf 	bl	800d22e <memcmp>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	dc35      	bgt.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fa74:	2206      	movs	r2, #6
 800fa76:	f10a 011d 	add.w	r1, sl, #29
 800fa7a:	4648      	mov	r0, r9
 800fa7c:	f7fd fbd7 	bl	800d22e <memcmp>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	dc2d      	bgt.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fa84:	23fe      	movs	r3, #254	@ 0xfe
 800fa86:	7023      	strb	r3, [r4, #0]
 800fa88:	7063      	strb	r3, [r4, #1]
 800fa8a:	70a3      	strb	r3, [r4, #2]
 800fa8c:	70e3      	strb	r3, [r4, #3]
 800fa8e:	7123      	strb	r3, [r4, #4]
 800fa90:	7163      	strb	r3, [r4, #5]
 800fa92:	71a3      	strb	r3, [r4, #6]
 800fa94:	23aa      	movs	r3, #170	@ 0xaa
 800fa96:	71e3      	strb	r3, [r4, #7]
 800fa98:	f108 0249 	add.w	r2, r8, #73	@ 0x49
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	f108 084f 	add.w	r8, r8, #79	@ 0x4f
 800faa2:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 800faa6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800faaa:	f060 0055 	orn	r0, r0, #85	@ 0x55
 800faae:	7208      	strb	r0, [r1, #8]
 800fab0:	7810      	ldrb	r0, [r2, #0]
 800fab2:	f040 0055 	orr.w	r0, r0, #85	@ 0x55
 800fab6:	7248      	strb	r0, [r1, #9]
 800fab8:	7810      	ldrb	r0, [r2, #0]
 800faba:	4542      	cmp	r2, r8
 800fabc:	4403      	add	r3, r0
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	f101 0102 	add.w	r1, r1, #2
 800fac4:	d1ef      	bne.n	800faa6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xd2>
 800fac6:	0a1a      	lsrs	r2, r3, #8
 800fac8:	f062 0155 	orn	r1, r2, #85	@ 0x55
 800facc:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 800fad0:	7562      	strb	r2, [r4, #21]
 800fad2:	f063 0255 	orn	r2, r3, #85	@ 0x55
 800fad6:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800fada:	7521      	strb	r1, [r4, #20]
 800fadc:	75a2      	strb	r2, [r4, #22]
 800fade:	75e3      	strb	r3, [r4, #23]
 800fae0:	b003      	add	sp, #12
 800fae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae6:	2101      	movs	r1, #1
 800fae8:	e7ad      	b.n	800fa46 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 800faea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800faee:	d11a      	bne.n	800fb26 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x152>
 800faf0:	f89a 3016 	ldrb.w	r3, [sl, #22]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1f3      	bne.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800faf8:	707b      	strb	r3, [r7, #1]
 800fafa:	2900      	cmp	r1, #0
 800fafc:	d1f0      	bne.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fafe:	2d00      	cmp	r5, #0
 800fb00:	d0ee      	beq.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fb02:	2302      	movs	r3, #2
 800fb04:	75e3      	strb	r3, [r4, #23]
 800fb06:	4b15      	ldr	r3, [pc, #84]	@ (800fb5c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x188>)
 800fb08:	7661      	strb	r1, [r4, #25]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	7621      	strb	r1, [r4, #24]
 800fb0e:	889b      	ldrh	r3, [r3, #4]
 800fb10:	3b00      	subs	r3, #0
 800fb12:	bf18      	it	ne
 800fb14:	2301      	movne	r3, #1
 800fb16:	005b      	lsls	r3, r3, #1
 800fb18:	4638      	mov	r0, r7
 800fb1a:	7663      	strb	r3, [r4, #25]
 800fb1c:	b003      	add	sp, #12
 800fb1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb22:	f7ff bd45 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800fb26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb2a:	d1d9      	bne.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fb2c:	f89a 3016 	ldrb.w	r3, [sl, #22]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1d5      	bne.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fb34:	2301      	movs	r3, #1
 800fb36:	e7df      	b.n	800faf8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x124>
 800fb38:	f8ba 0011 	ldrh.w	r0, [sl, #17]
 800fb3c:	ba40      	rev16	r0, r0
 800fb3e:	b280      	uxth	r0, r0
 800fb40:	9001      	str	r0, [sp, #4]
 800fb42:	f89a 0016 	ldrb.w	r0, [sl, #22]
 800fb46:	9000      	str	r0, [sp, #0]
 800fb48:	ba5b      	rev16	r3, r3
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	4638      	mov	r0, r7
 800fb4e:	f7ff fedb 	bl	800f908 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800fb52:	e7c5      	b.n	800fae0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x10c>
 800fb54:	2000d2ec 	andcs	sp, r0, ip, ror #5
 800fb58:	08020d94 	stmdaeq	r2, {r2, r4, r7, r8, sl, fp}
 800fb5c:	2000d2fc 	strdcs	sp, [r0], -ip

0800fb60 <RDMIdentify::RDMIdentify()>:
 800fb60:	4b01      	ldr	r3, [pc, #4]	@ (800fb68 <RDMIdentify::RDMIdentify()+0x8>)
 800fb62:	6018      	str	r0, [r3, #0]
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	2000d2f0 	strdcs	sp, [r0], -r0

0800fb6c <RDMIdentify::On(rdm::identify::Mode)>:
 800fb6c:	4770      	bx	lr

0800fb6e <RDMIdentify::Off(rdm::identify::Mode)>:
 800fb6e:	4770      	bx	lr

0800fb70 <memcpy.isra.0>:
 800fb70:	440a      	add	r2, r1
 800fb72:	4291      	cmp	r1, r2
 800fb74:	d100      	bne.n	800fb78 <memcpy.isra.0+0x8>
 800fb76:	4770      	bx	lr
 800fb78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb7c:	f800 3b01 	strb.w	r3, [r0], #1
 800fb80:	e7f7      	b.n	800fb72 <memcpy.isra.0+0x2>
	...

0800fb84 <LLRPDevice::HandleRequestMessage()>:
 800fb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb88:	4e43      	ldr	r6, [pc, #268]	@ (800fc98 <LLRPDevice::HandleRequestMessage()+0x114>)
 800fb8a:	4f44      	ldr	r7, [pc, #272]	@ (800fc9c <LLRPDevice::HandleRequestMessage()+0x118>)
 800fb8c:	6835      	ldr	r5, [r6, #0]
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	f895 4042 	ldrb.w	r4, [r5, #66]	@ 0x42
 800fb94:	f8b5 3043 	ldrh.w	r3, [r5, #67]	@ 0x43
 800fb98:	0424      	lsls	r4, r4, #16
 800fb9a:	ba5b      	rev16	r3, r3
 800fb9c:	b089      	sub	sp, #36	@ 0x24
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 800fba4:	431c      	orrs	r4, r3
 800fba6:	2206      	movs	r2, #6
 800fba8:	314a      	adds	r1, #74	@ 0x4a
 800fbaa:	a802      	add	r0, sp, #8
 800fbac:	f7ff ffe0 	bl	800fb70 <memcpy.isra.0>
 800fbb0:	2c12      	cmp	r4, #18
 800fbb2:	d909      	bls.n	800fbc8 <LLRPDevice::HandleRequestMessage()+0x44>
 800fbb4:	f105 0954 	add.w	r9, r5, #84	@ 0x54
 800fbb8:	f04f 0800 	mov.w	r8, #0
 800fbbc:	3c12      	subs	r4, #18
 800fbbe:	2306      	movs	r3, #6
 800fbc0:	fbb4 f4f3 	udiv	r4, r4, r3
 800fbc4:	45a0      	cmp	r8, r4
 800fbc6:	d15b      	bne.n	800fc80 <LLRPDevice::HandleRequestMessage()+0xfc>
 800fbc8:	2206      	movs	r2, #6
 800fbca:	a902      	add	r1, sp, #8
 800fbcc:	f105 0046 	add.w	r0, r5, #70	@ 0x46
 800fbd0:	f7fd fb2d 	bl	800d22e <memcmp>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	dc50      	bgt.n	800fc7a <LLRPDevice::HandleRequestMessage()+0xf6>
 800fbd8:	2206      	movs	r2, #6
 800fbda:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
 800fbde:	a802      	add	r0, sp, #8
 800fbe0:	f7fd fb25 	bl	800d22e <memcmp>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	dc48      	bgt.n	800fc7a <LLRPDevice::HandleRequestMessage()+0xf6>
 800fbe8:	6834      	ldr	r4, [r6, #0]
 800fbea:	2210      	movs	r2, #16
 800fbec:	f104 0517 	add.w	r5, r4, #23
 800fbf0:	4629      	mov	r1, r5
 800fbf2:	eb0d 0002 	add.w	r0, sp, r2
 800fbf6:	f7ff ffbb 	bl	800fb70 <memcpy.isra.0>
 800fbfa:	2343      	movs	r3, #67	@ 0x43
 800fbfc:	74a3      	strb	r3, [r4, #18]
 800fbfe:	4b28      	ldr	r3, [pc, #160]	@ (800fca0 <LLRPDevice::HandleRequestMessage()+0x11c>)
 800fc00:	4628      	mov	r0, r5
 800fc02:	6819      	ldr	r1, [r3, #0]
 800fc04:	4d27      	ldr	r5, [pc, #156]	@ (800fca4 <LLRPDevice::HandleRequestMessage()+0x120>)
 800fc06:	2210      	movs	r2, #16
 800fc08:	f7ff ffb2 	bl	800fb70 <memcpy.isra.0>
 800fc0c:	232c      	movs	r3, #44	@ 0x2c
 800fc0e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800fc12:	2300      	movs	r3, #0
 800fc14:	2210      	movs	r2, #16
 800fc16:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 800fc1a:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
 800fc1e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800fc22:	2302      	movs	r3, #2
 800fc24:	eb0d 0102 	add.w	r1, sp, r2
 800fc28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fc2c:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 800fc30:	f7ff ff9e 	bl	800fb70 <memcpy.isra.0>
 800fc34:	6839      	ldr	r1, [r7, #0]
 800fc36:	2311      	movs	r3, #17
 800fc38:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800fc42:	2206      	movs	r2, #6
 800fc44:	314a      	adds	r1, #74	@ 0x4a
 800fc46:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 800fc4a:	f7ff ff91 	bl	800fb70 <memcpy.isra.0>
 800fc4e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800fc52:	2206      	movs	r2, #6
 800fc54:	4629      	mov	r1, r5
 800fc56:	f7ff ff8b 	bl	800fb70 <memcpy.isra.0>
 800fc5a:	23ff      	movs	r3, #255	@ 0xff
 800fc5c:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
 800fc60:	4b11      	ldr	r3, [pc, #68]	@ (800fca8 <LLRPDevice::HandleRequestMessage()+0x124>)
 800fc62:	6818      	ldr	r0, [r3, #0]
 800fc64:	f855 3c14 	ldr.w	r3, [r5, #-20]
 800fc68:	b13b      	cbz	r3, 800fc7a <LLRPDevice::HandleRequestMessage()+0xf6>
 800fc6a:	f241 53c1 	movw	r3, #5569	@ 0x15c1
 800fc6e:	9300      	str	r3, [sp, #0]
 800fc70:	2253      	movs	r2, #83	@ 0x53
 800fc72:	4b0e      	ldr	r3, [pc, #56]	@ (800fcac <LLRPDevice::HandleRequestMessage()+0x128>)
 800fc74:	4621      	mov	r1, r4
 800fc76:	f007 f9e1 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800fc7a:	b009      	add	sp, #36	@ 0x24
 800fc7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc80:	2206      	movs	r2, #6
 800fc82:	a902      	add	r1, sp, #8
 800fc84:	4648      	mov	r0, r9
 800fc86:	f7fd fad2 	bl	800d22e <memcmp>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d0f5      	beq.n	800fc7a <LLRPDevice::HandleRequestMessage()+0xf6>
 800fc8e:	f109 0906 	add.w	r9, r9, #6
 800fc92:	f108 0801 	add.w	r8, r8, #1
 800fc96:	e795      	b.n	800fbc4 <LLRPDevice::HandleRequestMessage()+0x40>
 800fc98:	2000d404 	andcs	sp, r0, r4, lsl #8
 800fc9c:	2000d2ec 	andcs	sp, r0, ip, ror #5
 800fca0:	2000e3e0 	andcs	lr, r0, r0, ror #7
 800fca4:	2000e244 	andcs	lr, r0, r4, asr #4
 800fca8:	2000d40c 	andcs	sp, r0, ip, lsl #8
 800fcac:	86faffef 	ldrbthi	pc, [sl], pc, ror #31	@ <UNPREDICTABLE>

0800fcb0 <LLRPDevice::HandleRdmCommand()>:
 800fcb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcb4:	4b21      	ldr	r3, [pc, #132]	@ (800fd3c <LLRPDevice::HandleRdmCommand()+0x8c>)
 800fcb6:	4f22      	ldr	r7, [pc, #136]	@ (800fd40 <LLRPDevice::HandleRdmCommand()+0x90>)
 800fcb8:	681c      	ldr	r4, [r3, #0]
 800fcba:	f104 0946 	add.w	r9, r4, #70	@ 0x46
 800fcbe:	b087      	sub	sp, #28
 800fcc0:	463a      	mov	r2, r7
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	f7ff fe86 	bl	800f9d4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 800fcc8:	783b      	ldrb	r3, [r7, #0]
 800fcca:	2bcc      	cmp	r3, #204	@ 0xcc
 800fccc:	d132      	bne.n	800fd34 <LLRPDevice::HandleRdmCommand()+0x84>
 800fcce:	f104 0817 	add.w	r8, r4, #23
 800fcd2:	2210      	movs	r2, #16
 800fcd4:	4641      	mov	r1, r8
 800fcd6:	a802      	add	r0, sp, #8
 800fcd8:	f7ff ff4a 	bl	800fb70 <memcpy.isra.0>
 800fcdc:	78be      	ldrb	r6, [r7, #2]
 800fcde:	4b19      	ldr	r3, [pc, #100]	@ (800fd44 <LLRPDevice::HandleRdmCommand()+0x94>)
 800fce0:	f106 0537 	add.w	r5, r6, #55	@ 0x37
 800fce4:	b2ed      	uxtb	r5, r5
 800fce6:	6819      	ldr	r1, [r3, #0]
 800fce8:	74a5      	strb	r5, [r4, #18]
 800fcea:	2210      	movs	r2, #16
 800fcec:	4640      	mov	r0, r8
 800fcee:	f7ff ff3f 	bl	800fb70 <memcpy.isra.0>
 800fcf2:	f106 0320 	add.w	r3, r6, #32
 800fcf6:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 800fcfa:	2210      	movs	r2, #16
 800fcfc:	a902      	add	r1, sp, #8
 800fcfe:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 800fd02:	f7ff ff35 	bl	800fb70 <memcpy.isra.0>
 800fd06:	1d73      	adds	r3, r6, #5
 800fd08:	1c72      	adds	r2, r6, #1
 800fd0a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800fd0e:	b2d2      	uxtb	r2, r2
 800fd10:	4648      	mov	r0, r9
 800fd12:	1c79      	adds	r1, r7, #1
 800fd14:	f7ff ff2c 	bl	800fb70 <memcpy.isra.0>
 800fd18:	4b0b      	ldr	r3, [pc, #44]	@ (800fd48 <LLRPDevice::HandleRdmCommand()+0x98>)
 800fd1a:	6818      	ldr	r0, [r3, #0]
 800fd1c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd4c <LLRPDevice::HandleRdmCommand()+0x9c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f105 0210 	add.w	r2, r5, #16
 800fd24:	b133      	cbz	r3, 800fd34 <LLRPDevice::HandleRdmCommand()+0x84>
 800fd26:	f241 53c1 	movw	r3, #5569	@ 0x15c1
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	4621      	mov	r1, r4
 800fd2e:	4b08      	ldr	r3, [pc, #32]	@ (800fd50 <LLRPDevice::HandleRdmCommand()+0xa0>)
 800fd30:	f007 f984 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 800fd34:	b007      	add	sp, #28
 800fd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd3a:	bf00      	nop
 800fd3c:	2000d404 	andcs	sp, r0, r4, lsl #8
 800fd40:	2000d300 	andcs	sp, r0, r0, lsl #6
 800fd44:	2000e3e0 	andcs	lr, r0, r0, ror #7
 800fd48:	2000d40c 	andcs	sp, r0, ip, lsl #8
 800fd4c:	2000e230 	andcs	lr, r0, r0, lsr r2
 800fd50:	86faffef 	ldrbthi	pc, [sl], pc, ror #31	@ <UNPREDICTABLE>

0800fd54 <LLRPDevice::DumpCommon()>:
 800fd54:	4770      	bx	lr

0800fd56 <memcpy.isra.0>:
 800fd56:	440a      	add	r2, r1
 800fd58:	4291      	cmp	r1, r2
 800fd5a:	d100      	bne.n	800fd5e <memcpy.isra.0+0x8>
 800fd5c:	4770      	bx	lr
 800fd5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd62:	f800 3b01 	strb.w	r3, [r0], #1
 800fd66:	e7f7      	b.n	800fd58 <memcpy.isra.0+0x2>

0800fd68 <RDMHandler::GetInterfaceList(unsigned short)>:
 800fd68:	6883      	ldr	r3, [r0, #8]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	761a      	strb	r2, [r3, #24]
 800fd6e:	765a      	strb	r2, [r3, #25]
 800fd70:	769a      	strb	r2, [r3, #26]
 800fd72:	2101      	movs	r1, #1
 800fd74:	771a      	strb	r2, [r3, #28]
 800fd76:	2206      	movs	r2, #6
 800fd78:	76d9      	strb	r1, [r3, #27]
 800fd7a:	775a      	strb	r2, [r3, #29]
 800fd7c:	75da      	strb	r2, [r3, #23]
 800fd7e:	f7ff bc17 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
	...

0800fd84 <RDMHandler::GetInterfaceName(unsigned short)>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	4604      	mov	r4, r0
 800fd8e:	3117      	adds	r1, #23
 800fd90:	f105 0018 	add.w	r0, r5, #24
 800fd94:	f7ff ffdf 	bl	800fd56 <memcpy.isra.0>
 800fd98:	4a0d      	ldr	r2, [pc, #52]	@ (800fdd0 <RDMHandler::GetInterfaceName(unsigned short)+0x4c>)
 800fd9a:	6813      	ldr	r3, [r2, #0]
 800fd9c:	f105 001c 	add.w	r0, r5, #28
 800fda0:	3306      	adds	r3, #6
 800fda2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800fda6:	f800 1b01 	strb.w	r1, [r0], #1
 800fdaa:	2900      	cmp	r1, #0
 800fdac:	d1f9      	bne.n	800fda2 <RDMHandler::GetInterfaceName(unsigned short)+0x1e>
 800fdae:	6812      	ldr	r2, [r2, #0]
 800fdb0:	3206      	adds	r2, #6
 800fdb2:	4611      	mov	r1, r2
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	3101      	adds	r1, #1
 800fdb8:	7818      	ldrb	r0, [r3, #0]
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d1fa      	bne.n	800fdb4 <RDMHandler::GetInterfaceName(unsigned short)+0x30>
 800fdbe:	1a9b      	subs	r3, r3, r2
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	75eb      	strb	r3, [r5, #23]
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdca:	f7ff bbf1 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800fdce:	bf00      	nop
 800fdd0:	2000e210 	andcs	lr, r0, r0, lsl r2

0800fdd4 <RDMHandler::GetHardwareAddress(unsigned short)>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fdda:	4604      	mov	r4, r0
 800fddc:	2204      	movs	r2, #4
 800fdde:	f105 0018 	add.w	r0, r5, #24
 800fde2:	3117      	adds	r1, #23
 800fde4:	f7ff ffb7 	bl	800fd56 <memcpy.isra.0>
 800fde8:	f105 001c 	add.w	r0, r5, #28
 800fdec:	4905      	ldr	r1, [pc, #20]	@ (800fe04 <RDMHandler::GetHardwareAddress(unsigned short)+0x30>)
 800fdee:	2206      	movs	r2, #6
 800fdf0:	f7ff ffb1 	bl	800fd56 <memcpy.isra.0>
 800fdf4:	230a      	movs	r3, #10
 800fdf6:	75eb      	strb	r3, [r5, #23]
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdfe:	f7ff bbd7 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800fe02:	bf00      	nop
 800fe04:	2000e244 	andcs	lr, r0, r4, asr #4

0800fe08 <RDMHandler::GetDHCPMode(unsigned short)>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fe0e:	4604      	mov	r4, r0
 800fe10:	2204      	movs	r2, #4
 800fe12:	f105 0018 	add.w	r0, r5, #24
 800fe16:	3117      	adds	r1, #23
 800fe18:	f7ff ff9d 	bl	800fd56 <memcpy.isra.0>
 800fe1c:	4b05      	ldr	r3, [pc, #20]	@ (800fe34 <RDMHandler::GetDHCPMode(unsigned short)+0x2c>)
 800fe1e:	7e9b      	ldrb	r3, [r3, #26]
 800fe20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fe24:	772b      	strb	r3, [r5, #28]
 800fe26:	2305      	movs	r3, #5
 800fe28:	75eb      	strb	r3, [r5, #23]
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe30:	f7ff bbbe 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800fe34:	2000e230 	andcs	lr, r0, r0, lsr r2

0800fe38 <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 800fe38:	4b0b      	ldr	r3, [pc, #44]	@ (800fe68 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x30>)
 800fe3a:	6842      	ldr	r2, [r0, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	7919      	ldrb	r1, [r3, #4]
 800fe40:	b911      	cbnz	r1, 800fe48 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 800fe42:	210b      	movs	r1, #11
 800fe44:	f7ff bca2 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800fe48:	7ed2      	ldrb	r2, [r2, #27]
 800fe4a:	2a01      	cmp	r2, #1
 800fe4c:	d809      	bhi.n	800fe62 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 800fe4e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 800fe52:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800fe56:	f042 0208 	orr.w	r2, r2, #8
 800fe5a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800fe5e:	f7ff bba7 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800fe62:	2106      	movs	r1, #6
 800fe64:	e7ee      	b.n	800fe44 <RDMHandler::SetDHCPMode(bool, unsigned short)+0xc>
 800fe66:	bf00      	nop
 800fe68:	2000e210 	andcs	lr, r0, r0, lsl r2

0800fe6c <RDMHandler::GetNameServers(unsigned short)>:
 800fe6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe6e:	6843      	ldr	r3, [r0, #4]
 800fe70:	7ddb      	ldrb	r3, [r3, #23]
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	4604      	mov	r4, r0
 800fe76:	d905      	bls.n	800fe84 <RDMHandler::GetNameServers(unsigned short)+0x18>
 800fe78:	2106      	movs	r1, #6
 800fe7a:	b003      	add	sp, #12
 800fe7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe80:	f7ff bc84 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800fe84:	4a0b      	ldr	r2, [pc, #44]	@ (800feb4 <RDMHandler::GetNameServers(unsigned short)+0x48>)
 800fe86:	6885      	ldr	r5, [r0, #8]
 800fe88:	6812      	ldr	r2, [r2, #0]
 800fe8a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800fe8e:	f105 0019 	add.w	r0, r5, #25
 800fe92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fe96:	9201      	str	r2, [sp, #4]
 800fe98:	2204      	movs	r2, #4
 800fe9a:	762b      	strb	r3, [r5, #24]
 800fe9c:	eb0d 0102 	add.w	r1, sp, r2
 800fea0:	f7ff ff59 	bl	800fd56 <memcpy.isra.0>
 800fea4:	2305      	movs	r3, #5
 800fea6:	4620      	mov	r0, r4
 800fea8:	75eb      	strb	r3, [r5, #23]
 800feaa:	b003      	add	sp, #12
 800feac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800feb0:	f7ff bb7e 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800feb4:	2000e210 	andcs	lr, r0, r0, lsl r2

0800feb8 <RDMHandler::GetZeroconf(unsigned short)>:
 800feb8:	b538      	push	{r3, r4, r5, lr}
 800feba:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800febe:	4604      	mov	r4, r0
 800fec0:	2204      	movs	r2, #4
 800fec2:	3117      	adds	r1, #23
 800fec4:	f105 0018 	add.w	r0, r5, #24
 800fec8:	f7ff ff45 	bl	800fd56 <memcpy.isra.0>
 800fecc:	4b07      	ldr	r3, [pc, #28]	@ (800feec <RDMHandler::GetZeroconf(unsigned short)+0x34>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	795b      	ldrb	r3, [r3, #5]
 800fed2:	b11b      	cbz	r3, 800fedc <RDMHandler::GetZeroconf(unsigned short)+0x24>
 800fed4:	4b06      	ldr	r3, [pc, #24]	@ (800fef0 <RDMHandler::GetZeroconf(unsigned short)+0x38>)
 800fed6:	7e9b      	ldrb	r3, [r3, #26]
 800fed8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fedc:	772b      	strb	r3, [r5, #28]
 800fede:	2305      	movs	r3, #5
 800fee0:	75eb      	strb	r3, [r5, #23]
 800fee2:	4620      	mov	r0, r4
 800fee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fee8:	f7ff bb62 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800feec:	2000e210 	andcs	lr, r0, r0, lsl r2
 800fef0:	2000e230 	andcs	lr, r0, r0, lsr r2

0800fef4 <RDMHandler::SetZeroconf(bool, unsigned short)>:
 800fef4:	4b10      	ldr	r3, [pc, #64]	@ (800ff38 <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 800fef6:	6842      	ldr	r2, [r0, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	7959      	ldrb	r1, [r3, #5]
 800fefc:	b510      	push	{r4, lr}
 800fefe:	4604      	mov	r4, r0
 800ff00:	b921      	cbnz	r1, 800ff0c <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 800ff02:	210b      	movs	r1, #11
 800ff04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff08:	f7ff bc40 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800ff0c:	7ed2      	ldrb	r2, [r2, #27]
 800ff0e:	2a01      	cmp	r2, #1
 800ff10:	d109      	bne.n	800ff26 <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 800ff12:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ff16:	f042 0210 	orr.w	r2, r2, #16
 800ff1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800ff1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff22:	f7ff bb45 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800ff26:	b92a      	cbnz	r2, 800ff34 <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 800ff28:	4618      	mov	r0, r3
 800ff2a:	4611      	mov	r1, r2
 800ff2c:	f005 ff38 	bl	8015da0 <Network::SetQueuedStaticIp(unsigned long, unsigned long)>
 800ff30:	4620      	mov	r0, r4
 800ff32:	e7f4      	b.n	800ff1e <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 800ff34:	2106      	movs	r1, #6
 800ff36:	e7e5      	b.n	800ff04 <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 800ff38:	2000e210 	andcs	lr, r0, r0, lsl r2

0800ff3c <RDMHandler::RenewDhcp(bool, unsigned short)>:
 800ff3c:	b510      	push	{r4, lr}
 800ff3e:	4b09      	ldr	r3, [pc, #36]	@ (800ff64 <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 800ff40:	7e9b      	ldrb	r3, [r3, #26]
 800ff42:	079b      	lsls	r3, r3, #30
 800ff44:	4604      	mov	r4, r0
 800ff46:	d404      	bmi.n	800ff52 <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 800ff48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff4c:	210b      	movs	r1, #11
 800ff4e:	f7ff bc1d 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 800ff52:	4b05      	ldr	r3, [pc, #20]	@ (800ff68 <RDMHandler::RenewDhcp(bool, unsigned short)+0x2c>)
 800ff54:	6818      	ldr	r0, [r3, #0]
 800ff56:	f005 ff1c 	bl	8015d92 <Network::EnableDhcp()>
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff60:	f7ff bb26 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800ff64:	2000e230 	andcs	lr, r0, r0, lsr r2
 800ff68:	2000e210 	andcs	lr, r0, r0, lsl r2

0800ff6c <RDMHandler::GetAddressNetmask(unsigned short)>:
 800ff6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff6e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800ff72:	4e11      	ldr	r6, [pc, #68]	@ (800ffb8 <RDMHandler::GetAddressNetmask(unsigned short)+0x4c>)
 800ff74:	4604      	mov	r4, r0
 800ff76:	6833      	ldr	r3, [r6, #0]
 800ff78:	9301      	str	r3, [sp, #4]
 800ff7a:	f105 0018 	add.w	r0, r5, #24
 800ff7e:	2204      	movs	r2, #4
 800ff80:	3117      	adds	r1, #23
 800ff82:	f7ff fee8 	bl	800fd56 <memcpy.isra.0>
 800ff86:	2204      	movs	r2, #4
 800ff88:	eb0d 0102 	add.w	r1, sp, r2
 800ff8c:	f105 001c 	add.w	r0, r5, #28
 800ff90:	f7ff fee1 	bl	800fd56 <memcpy.isra.0>
 800ff94:	6870      	ldr	r0, [r6, #4]
 800ff96:	f00c fcef 	bl	801c978 <__popcountsi2>
 800ff9a:	7eb3      	ldrb	r3, [r6, #26]
 800ff9c:	f885 0020 	strb.w	r0, [r5, #32]
 800ffa0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ffa4:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	230a      	movs	r3, #10
 800ffac:	75eb      	strb	r3, [r5, #23]
 800ffae:	b002      	add	sp, #8
 800ffb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffb4:	f7ff bafc 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800ffb8:	2000e230 	andcs	lr, r0, r0, lsr r2

0800ffbc <RDMHandler::GetStaticAddress(unsigned short)>:
 800ffbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffbe:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800ffc2:	4e0f      	ldr	r6, [pc, #60]	@ (8010000 <RDMHandler::GetStaticAddress(unsigned short)+0x44>)
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	6833      	ldr	r3, [r6, #0]
 800ffc8:	9301      	str	r3, [sp, #4]
 800ffca:	f105 0018 	add.w	r0, r5, #24
 800ffce:	2204      	movs	r2, #4
 800ffd0:	3117      	adds	r1, #23
 800ffd2:	f7ff fec0 	bl	800fd56 <memcpy.isra.0>
 800ffd6:	2204      	movs	r2, #4
 800ffd8:	eb0d 0102 	add.w	r1, sp, r2
 800ffdc:	f105 001c 	add.w	r0, r5, #28
 800ffe0:	f7ff feb9 	bl	800fd56 <memcpy.isra.0>
 800ffe4:	6870      	ldr	r0, [r6, #4]
 800ffe6:	f00c fcc7 	bl	801c978 <__popcountsi2>
 800ffea:	2309      	movs	r3, #9
 800ffec:	f885 0020 	strb.w	r0, [r5, #32]
 800fff0:	4620      	mov	r0, r4
 800fff2:	75eb      	strb	r3, [r5, #23]
 800fff4:	b002      	add	sp, #8
 800fff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fffa:	f7ff bad9 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 800fffe:	bf00      	nop
 8010000:	2000e230 	andcs	lr, r0, r0, lsr r2

08010004 <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 8010004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010006:	6845      	ldr	r5, [r0, #4]
 8010008:	7dab      	ldrb	r3, [r5, #22]
 801000a:	2b09      	cmp	r3, #9
 801000c:	4604      	mov	r4, r0
 801000e:	d005      	beq.n	801001c <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 8010010:	2101      	movs	r1, #1
 8010012:	b003      	add	sp, #12
 8010014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010018:	f7ff bbb8 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 801001c:	2204      	movs	r2, #4
 801001e:	eb0d 0002 	add.w	r0, sp, r2
 8010022:	f105 011b 	add.w	r1, r5, #27
 8010026:	f7ff fe96 	bl	800fd56 <memcpy.isra.0>
 801002a:	4b09      	ldr	r3, [pc, #36]	@ (8010050 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x4c>)
 801002c:	7fea      	ldrb	r2, [r5, #31]
 801002e:	6818      	ldr	r0, [r3, #0]
 8010030:	9901      	ldr	r1, [sp, #4]
 8010032:	b12a      	cbz	r2, 8010040 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x3c>
 8010034:	f1c2 0220 	rsb	r2, r2, #32
 8010038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801003c:	4093      	lsls	r3, r2
 801003e:	ba1a      	rev	r2, r3
 8010040:	f005 feae 	bl	8015da0 <Network::SetQueuedStaticIp(unsigned long, unsigned long)>
 8010044:	4620      	mov	r0, r4
 8010046:	b003      	add	sp, #12
 8010048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801004c:	f7ff bab0 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 8010050:	2000e210 	andcs	lr, r0, r0, lsl r2

08010054 <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 8010054:	4b08      	ldr	r3, [pc, #32]	@ (8010078 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 8010056:	b510      	push	{r4, lr}
 8010058:	4604      	mov	r4, r0
 801005a:	6818      	ldr	r0, [r3, #0]
 801005c:	f005 fec2 	bl	8015de4 <Network::ApplyQueuedConfig()>
 8010060:	b120      	cbz	r0, 801006c <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 8010062:	4620      	mov	r0, r4
 8010064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010068:	f7ff baa2 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 801006c:	4620      	mov	r0, r4
 801006e:	2101      	movs	r1, #1
 8010070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010074:	f7ff bb8a 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 8010078:	2000e210 	andcs	lr, r0, r0, lsl r2

0801007c <RDMHandler::GetDefaultRoute(unsigned short)>:
 801007c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801007e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010082:	4b0c      	ldr	r3, [pc, #48]	@ (80100b4 <RDMHandler::GetDefaultRoute(unsigned short)+0x38>)
 8010084:	4604      	mov	r4, r0
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	9301      	str	r3, [sp, #4]
 801008a:	f105 0018 	add.w	r0, r5, #24
 801008e:	2204      	movs	r2, #4
 8010090:	3117      	adds	r1, #23
 8010092:	f7ff fe60 	bl	800fd56 <memcpy.isra.0>
 8010096:	2204      	movs	r2, #4
 8010098:	f105 001c 	add.w	r0, r5, #28
 801009c:	eb0d 0102 	add.w	r1, sp, r2
 80100a0:	f7ff fe59 	bl	800fd56 <memcpy.isra.0>
 80100a4:	2308      	movs	r3, #8
 80100a6:	4620      	mov	r0, r4
 80100a8:	75eb      	strb	r3, [r5, #23]
 80100aa:	b003      	add	sp, #12
 80100ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100b0:	f7ff ba7e 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 80100b4:	2000e230 	andcs	lr, r0, r0, lsr r2

080100b8 <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 80100b8:	b513      	push	{r0, r1, r4, lr}
 80100ba:	6841      	ldr	r1, [r0, #4]
 80100bc:	7d8b      	ldrb	r3, [r1, #22]
 80100be:	2b08      	cmp	r3, #8
 80100c0:	4604      	mov	r4, r0
 80100c2:	d005      	beq.n	80100d0 <RDMHandler::SetDefaultRoute(bool, unsigned short)+0x18>
 80100c4:	2101      	movs	r1, #1
 80100c6:	b002      	add	sp, #8
 80100c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100cc:	f7ff bb5e 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 80100d0:	2204      	movs	r2, #4
 80100d2:	eb0d 0002 	add.w	r0, sp, r2
 80100d6:	311b      	adds	r1, #27
 80100d8:	f7ff fe3d 	bl	800fd56 <memcpy.isra.0>
 80100dc:	4b05      	ldr	r3, [pc, #20]	@ (80100f4 <RDMHandler::SetDefaultRoute(bool, unsigned short)+0x3c>)
 80100de:	9901      	ldr	r1, [sp, #4]
 80100e0:	6818      	ldr	r0, [r3, #0]
 80100e2:	f005 fe71 	bl	8015dc8 <Network::SetQueuedDefaultRoute(unsigned long)>
 80100e6:	4620      	mov	r0, r4
 80100e8:	b002      	add	sp, #8
 80100ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100ee:	f7ff ba5f 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 80100f2:	bf00      	nop
 80100f4:	2000e210 	andcs	lr, r0, r0, lsl r2

080100f8 <RDMHandler::GetHostName(unsigned short)>:
 80100f8:	4b09      	ldr	r3, [pc, #36]	@ (8010120 <RDMHandler::GetHostName(unsigned short)+0x28>)
 80100fa:	6819      	ldr	r1, [r3, #0]
 80100fc:	3116      	adds	r1, #22
 80100fe:	b510      	push	{r4, lr}
 8010100:	460b      	mov	r3, r1
 8010102:	4604      	mov	r4, r0
 8010104:	461a      	mov	r2, r3
 8010106:	3301      	adds	r3, #1
 8010108:	7810      	ldrb	r0, [r2, #0]
 801010a:	2800      	cmp	r0, #0
 801010c:	d1fa      	bne.n	8010104 <RDMHandler::GetHostName(unsigned short)+0xc>
 801010e:	4620      	mov	r0, r4
 8010110:	1a52      	subs	r2, r2, r1
 8010112:	f7ff f9f6 	bl	800f502 <RDMHandler::HandleString(char const*, unsigned long)>
 8010116:	4620      	mov	r0, r4
 8010118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801011c:	f7ff ba48 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 8010120:	2000e210 	andcs	lr, r0, r0, lsl r2

08010124 <RDMHandler::SetHostName(bool, unsigned short)>:
 8010124:	b510      	push	{r4, lr}
 8010126:	6841      	ldr	r1, [r0, #4]
 8010128:	7d8b      	ldrb	r3, [r1, #22]
 801012a:	2b3f      	cmp	r3, #63	@ 0x3f
 801012c:	4604      	mov	r4, r0
 801012e:	d904      	bls.n	801013a <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 8010130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010134:	2102      	movs	r1, #2
 8010136:	f7ff bb29 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
 801013a:	440b      	add	r3, r1
 801013c:	2200      	movs	r2, #0
 801013e:	75da      	strb	r2, [r3, #23]
 8010140:	4b04      	ldr	r3, [pc, #16]	@ (8010154 <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 8010142:	3117      	adds	r1, #23
 8010144:	6818      	ldr	r0, [r3, #0]
 8010146:	f005 fdf3 	bl	8015d30 <Network::SetHostName(char const*)>
 801014a:	4620      	mov	r0, r4
 801014c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010150:	f7ff ba2e 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 8010154:	2000e210 	andcs	lr, r0, r0, lsl r2

08010158 <RDMHandler::GetDomainName(unsigned short)>:
 8010158:	4b09      	ldr	r3, [pc, #36]	@ (8010180 <RDMHandler::GetDomainName(unsigned short)+0x28>)
 801015a:	6819      	ldr	r1, [r3, #0]
 801015c:	3156      	adds	r1, #86	@ 0x56
 801015e:	b510      	push	{r4, lr}
 8010160:	460b      	mov	r3, r1
 8010162:	4604      	mov	r4, r0
 8010164:	461a      	mov	r2, r3
 8010166:	3301      	adds	r3, #1
 8010168:	7810      	ldrb	r0, [r2, #0]
 801016a:	2800      	cmp	r0, #0
 801016c:	d1fa      	bne.n	8010164 <RDMHandler::GetDomainName(unsigned short)+0xc>
 801016e:	4620      	mov	r0, r4
 8010170:	1a52      	subs	r2, r2, r1
 8010172:	f7ff f9c6 	bl	800f502 <RDMHandler::HandleString(char const*, unsigned long)>
 8010176:	4620      	mov	r0, r4
 8010178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801017c:	f7ff ba18 	b.w	800f5b0 <RDMHandler::RespondMessageAck()>
 8010180:	2000e210 	andcs	lr, r0, r0, lsl r2

08010184 <RDMHandler::SetDomainName(bool, unsigned short)>:
 8010184:	210b      	movs	r1, #11
 8010186:	f7ff bb01 	b.w	800f78c <RDMHandler::RespondMessageNack(unsigned short)>
	...

0801018c <RDMDevice::RDMDevice()>:
 801018c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8010190:	b513      	push	{r0, r1, r4, lr}
 8010192:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8010196:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 801019a:	2300      	movs	r3, #0
 801019c:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 80101a0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 80101a4:	f880 3052 	strb.w	r3, [r0, #82]	@ 0x52
 80101a8:	4b1c      	ldr	r3, [pc, #112]	@ (801021c <RDMDevice::RDMDevice()+0x90>)
 80101aa:	491d      	ldr	r1, [pc, #116]	@ (8010220 <RDMDevice::RDMDevice()+0x94>)
 80101ac:	6018      	str	r0, [r3, #0]
 80101ae:	4b1d      	ldr	r3, [pc, #116]	@ (8010224 <RDMDevice::RDMDevice()+0x98>)
 80101b0:	781a      	ldrb	r2, [r3, #0]
 80101b2:	f880 2046 	strb.w	r2, [r0, #70]	@ 0x46
 80101b6:	785b      	ldrb	r3, [r3, #1]
 80101b8:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 80101bc:	466a      	mov	r2, sp
 80101be:	2306      	movs	r3, #6
 80101c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101c4:	f802 4b01 	strb.w	r4, [r2], #1
 80101c8:	3b01      	subs	r3, #1
 80101ca:	d1f9      	bne.n	80101c0 <RDMDevice::RDMDevice()+0x34>
 80101cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80101d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80101d4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80101d8:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80101dc:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 80101e0:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 80101e4:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 80101e8:	f880 304f 	strb.w	r3, [r0, #79]	@ 0x4f
 80101ec:	4a0e      	ldr	r2, [pc, #56]	@ (8010228 <RDMDevice::RDMDevice()+0x9c>)
 80101ee:	f880 104a 	strb.w	r1, [r0, #74]	@ 0x4a
 80101f2:	2319      	movs	r3, #25
 80101f4:	f880 104d 	strb.w	r1, [r0, #77]	@ 0x4d
 80101f8:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 80101fc:	f880 404b 	strb.w	r4, [r0, #75]	@ 0x4b
 8010200:	f880 404c 	strb.w	r4, [r0, #76]	@ 0x4c
 8010204:	4603      	mov	r3, r0
 8010206:	f100 0119 	add.w	r1, r0, #25
 801020a:	f812 4b01 	ldrb.w	r4, [r2], #1
 801020e:	f803 4b01 	strb.w	r4, [r3], #1
 8010212:	4299      	cmp	r1, r3
 8010214:	d1f9      	bne.n	801020a <RDMDevice::RDMDevice()+0x7e>
 8010216:	b002      	add	sp, #8
 8010218:	bd10      	pop	{r4, pc}
 801021a:	bf00      	nop
 801021c:	2000d410 	andcs	sp, r0, r0, lsl r4
 8010220:	2000e244 	andcs	lr, r0, r4, asr #4
 8010224:	08020dad 	stmdaeq	r2, {r0, r2, r3, r5, r7, r8, sl, fp}
 8010228:	08020dcb 	stmdaeq	r2, {r0, r1, r3, r6, r7, r8, sl, fp}

0801022c <RDMDevice::Print()>:
 801022c:	b513      	push	{r0, r1, r4, lr}
 801022e:	4604      	mov	r4, r0
 8010230:	481f      	ldr	r0, [pc, #124]	@ (80102b0 <RDMDevice::Print()+0x84>)
 8010232:	f00c f950 	bl	801c4d6 <puts>
 8010236:	4b1f      	ldr	r3, [pc, #124]	@ (80102b4 <RDMDevice::Print()+0x88>)
 8010238:	461a      	mov	r2, r3
 801023a:	4619      	mov	r1, r3
 801023c:	3301      	adds	r3, #1
 801023e:	7808      	ldrb	r0, [r1, #0]
 8010240:	2800      	cmp	r0, #0
 8010242:	d1fa      	bne.n	801023a <RDMDevice::Print()+0xe>
 8010244:	1a89      	subs	r1, r1, r2
 8010246:	2920      	cmp	r1, #32
 8010248:	bf28      	it	cs
 801024a:	2120      	movcs	r1, #32
 801024c:	4a19      	ldr	r2, [pc, #100]	@ (80102b4 <RDMDevice::Print()+0x88>)
 801024e:	481a      	ldr	r0, [pc, #104]	@ (80102b8 <RDMDevice::Print()+0x8c>)
 8010250:	f00c f8ec 	bl	801c42c <printf>
 8010254:	f894 2047 	ldrb.w	r2, [r4, #71]	@ 0x47
 8010258:	f894 1046 	ldrb.w	r1, [r4, #70]	@ 0x46
 801025c:	4817      	ldr	r0, [pc, #92]	@ (80102bc <RDMDevice::Print()+0x90>)
 801025e:	f00c f8e5 	bl	801c42c <printf>
 8010262:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 801026c:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
 8010270:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 8010274:	4812      	ldr	r0, [pc, #72]	@ (80102c0 <RDMDevice::Print()+0x94>)
 8010276:	f00c f8d9 	bl	801c42c <printf>
 801027a:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 801027e:	4811      	ldr	r0, [pc, #68]	@ (80102c4 <RDMDevice::Print()+0x98>)
 8010280:	f104 0220 	add.w	r2, r4, #32
 8010284:	f00c f8d2 	bl	801c42c <printf>
 8010288:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801028c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8010290:	480d      	ldr	r0, [pc, #52]	@ (80102c8 <RDMDevice::Print()+0x9c>)
 8010292:	0a09      	lsrs	r1, r1, #8
 8010294:	f00c f8ca 	bl	801c42c <printf>
 8010298:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 801029c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80102a0:	480a      	ldr	r0, [pc, #40]	@ (80102cc <RDMDevice::Print()+0xa0>)
 80102a2:	0a09      	lsrs	r1, r1, #8
 80102a4:	b002      	add	sp, #8
 80102a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102aa:	f00c b8bf 	b.w	801c42c <printf>
 80102ae:	bf00      	nop
 80102b0:	0801d699 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, ip, lr, pc}
 80102b4:	08020daf 	stmdaeq	r2, {r0, r1, r2, r3, r5, r7, r8, sl, fp}
 80102b8:	0801d6b2 	stmdaeq	r1, {r1, r4, r5, r7, r9, sl, ip, lr, pc}
 80102bc:	0801d6cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r9, sl, ip, lr, pc}
 80102c0:	0801d6ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, ip, lr, pc}
 80102c4:	0801d713 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, ip, lr, pc}
 80102c8:	0801d72e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, sl, ip, lr, pc}
 80102cc:	0801d74d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, ip, lr, pc}

080102d0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>:
 80102d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102d2:	88c6      	ldrh	r6, [r0, #6]
 80102d4:	8885      	ldrh	r5, [r0, #4]
 80102d6:	42ae      	cmp	r6, r5
 80102d8:	d216      	bcs.n	8010308 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x38>
 80102da:	4604      	mov	r4, r0
 80102dc:	6800      	ldr	r0, [r0, #0]
 80102de:	1bad      	subs	r5, r5, r6
 80102e0:	4430      	add	r0, r6
 80102e2:	7a26      	ldrb	r6, [r4, #8]
 80102e4:	b923      	cbnz	r3, 80102f0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x20>
 80102e6:	b926      	cbnz	r6, 80102f2 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x22>
 80102e8:	9200      	str	r2, [sp, #0]
 80102ea:	460b      	mov	r3, r1
 80102ec:	4a09      	ldr	r2, [pc, #36]	@ (8010314 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x44>)
 80102ee:	e003      	b.n	80102f8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 80102f0:	b166      	cbz	r6, 801030c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x3c>
 80102f2:	9200      	str	r2, [sp, #0]
 80102f4:	4a08      	ldr	r2, [pc, #32]	@ (8010318 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x48>)
 80102f6:	460b      	mov	r3, r1
 80102f8:	4629      	mov	r1, r5
 80102fa:	f00c f8bf 	bl	801c47c <snprintf>
 80102fe:	4285      	cmp	r5, r0
 8010300:	bfa2      	ittt	ge
 8010302:	88e3      	ldrhge	r3, [r4, #6]
 8010304:	181b      	addge	r3, r3, r0
 8010306:	80e3      	strhge	r3, [r4, #6]
 8010308:	b002      	add	sp, #8
 801030a:	bd70      	pop	{r4, r5, r6, pc}
 801030c:	9200      	str	r2, [sp, #0]
 801030e:	460b      	mov	r3, r1
 8010310:	4a02      	ldr	r2, [pc, #8]	@ (801031c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x4c>)
 8010312:	e7f1      	b.n	80102f8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 8010314:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 8010318:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 801031c:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

08010320 <StoreDmxSend::Copy(dmxsendparams::Params*)>:
 8010320:	b507      	push	{r0, r1, r2, lr}
 8010322:	2300      	movs	r3, #0
 8010324:	2101      	movs	r1, #1
 8010326:	e9cd 3100 	strd	r3, r1, [sp]
 801032a:	4602      	mov	r2, r0
 801032c:	4803      	ldr	r0, [pc, #12]	@ (801033c <StoreDmxSend::Copy(dmxsendparams::Params*)+0x1c>)
 801032e:	230a      	movs	r3, #10
 8010330:	6800      	ldr	r0, [r0, #0]
 8010332:	f008 fb51 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 8010336:	b003      	add	sp, #12
 8010338:	f85d fb04 	ldr.w	pc, [sp], #4
 801033c:	2000e2dc 	ldrdcs	lr, [r0], -ip

08010340 <DmxParams::DmxParams()>:
 8010340:	2200      	movs	r2, #0
 8010342:	7002      	strb	r2, [r0, #0]
 8010344:	7042      	strb	r2, [r0, #1]
 8010346:	7082      	strb	r2, [r0, #2]
 8010348:	70c2      	strb	r2, [r0, #3]
 801034a:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 801034e:	7142      	strb	r2, [r0, #5]
 8010350:	71c2      	strb	r2, [r0, #7]
 8010352:	2228      	movs	r2, #40	@ 0x28
 8010354:	7101      	strb	r1, [r0, #4]
 8010356:	7202      	strb	r2, [r0, #8]
 8010358:	210c      	movs	r1, #12
 801035a:	22ff      	movs	r2, #255	@ 0xff
 801035c:	7181      	strb	r1, [r0, #6]
 801035e:	7242      	strb	r2, [r0, #9]
 8010360:	4770      	bx	lr

08010362 <DmxParams::Load()>:
 8010362:	b508      	push	{r3, lr}
 8010364:	2200      	movs	r2, #0
 8010366:	7002      	strb	r2, [r0, #0]
 8010368:	7042      	strb	r2, [r0, #1]
 801036a:	7082      	strb	r2, [r0, #2]
 801036c:	70c2      	strb	r2, [r0, #3]
 801036e:	f7ff ffd7 	bl	8010320 <StoreDmxSend::Copy(dmxsendparams::Params*)>
 8010372:	bd08      	pop	{r3, pc}

08010374 <DmxParams::Load(char const*, unsigned long)>:
 8010374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010376:	2500      	movs	r5, #0
 8010378:	b087      	sub	sp, #28
 801037a:	4604      	mov	r4, r0
 801037c:	460e      	mov	r6, r1
 801037e:	4617      	mov	r7, r2
 8010380:	7005      	strb	r5, [r0, #0]
 8010382:	7045      	strb	r5, [r0, #1]
 8010384:	7085      	strb	r5, [r0, #2]
 8010386:	70c5      	strb	r5, [r0, #3]
 8010388:	4602      	mov	r2, r0
 801038a:	490c      	ldr	r1, [pc, #48]	@ (80103bc <DmxParams::Load(char const*, unsigned long)+0x48>)
 801038c:	a804      	add	r0, sp, #16
 801038e:	f008 fdfd 	bl	8018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010392:	463a      	mov	r2, r7
 8010394:	4631      	mov	r1, r6
 8010396:	a804      	add	r0, sp, #16
 8010398:	f008 fdfc 	bl	8018f94 <ReadConfigFile::Read(char const*, unsigned int)>
 801039c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80103a0:	230a      	movs	r3, #10
 80103a2:	4807      	ldr	r0, [pc, #28]	@ (80103c0 <DmxParams::Load(char const*, unsigned long)+0x4c>)
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	462a      	mov	r2, r5
 80103a8:	4623      	mov	r3, r4
 80103aa:	2101      	movs	r1, #1
 80103ac:	6800      	ldr	r0, [r0, #0]
 80103ae:	f008 faed 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80103b2:	a804      	add	r0, sp, #16
 80103b4:	f008 fded 	bl	8018f92 <ReadConfigFile::~ReadConfigFile()>
 80103b8:	b007      	add	sp, #28
 80103ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103bc:	08010499 	stmdaeq	r1, {r0, r3, r4, r7, sl}
 80103c0:	2000e2dc 	ldrdcs	lr, [r0], -ip

080103c4 <DmxParams::callbackFunction(char const*)>:
 80103c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103c6:	460d      	mov	r5, r1
 80103c8:	4604      	mov	r4, r0
 80103ca:	492f      	ldr	r1, [pc, #188]	@ (8010488 <DmxParams::callbackFunction(char const*)+0xc4>)
 80103cc:	f10d 0206 	add.w	r2, sp, #6
 80103d0:	4628      	mov	r0, r5
 80103d2:	f008 fec0 	bl	8019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80103d6:	b9a0      	cbnz	r0, 8010402 <DmxParams::callbackFunction(char const*)+0x3e>
 80103d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	2a5b      	cmp	r2, #91	@ 0x5b
 80103e0:	d907      	bls.n	80103f2 <DmxParams::callbackFunction(char const*)+0x2e>
 80103e2:	2ab0      	cmp	r2, #176	@ 0xb0
 80103e4:	d005      	beq.n	80103f2 <DmxParams::callbackFunction(char const*)+0x2e>
 80103e6:	80a2      	strh	r2, [r4, #4]
 80103e8:	f043 0301 	orr.w	r3, r3, #1
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	b003      	add	sp, #12
 80103f0:	bd30      	pop	{r4, r5, pc}
 80103f2:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 80103f6:	7122      	strb	r2, [r4, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	7162      	strb	r2, [r4, #5]
 80103fc:	f023 0301 	bic.w	r3, r3, #1
 8010400:	e7f4      	b.n	80103ec <DmxParams::callbackFunction(char const*)+0x28>
 8010402:	4922      	ldr	r1, [pc, #136]	@ (801048c <DmxParams::callbackFunction(char const*)+0xc8>)
 8010404:	f10d 0206 	add.w	r2, sp, #6
 8010408:	4628      	mov	r0, r5
 801040a:	f008 fea4 	bl	8019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801040e:	b970      	cbnz	r0, 801042e <DmxParams::callbackFunction(char const*)+0x6a>
 8010410:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	2a0c      	cmp	r2, #12
 8010418:	bf93      	iteet	ls
 801041a:	220c      	movls	r2, #12
 801041c:	80e2      	strhhi	r2, [r4, #6]
 801041e:	f043 0302 	orrhi.w	r3, r3, #2
 8010422:	71a2      	strbls	r2, [r4, #6]
 8010424:	bf9c      	itt	ls
 8010426:	71e0      	strbls	r0, [r4, #7]
 8010428:	f023 0302 	bicls.w	r3, r3, #2
 801042c:	e7de      	b.n	80103ec <DmxParams::callbackFunction(char const*)+0x28>
 801042e:	4918      	ldr	r1, [pc, #96]	@ (8010490 <DmxParams::callbackFunction(char const*)+0xcc>)
 8010430:	f10d 0205 	add.w	r2, sp, #5
 8010434:	4628      	mov	r0, r5
 8010436:	f008 fed3 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801043a:	b950      	cbnz	r0, 8010452 <DmxParams::callbackFunction(char const*)+0x8e>
 801043c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010440:	6823      	ldr	r3, [r4, #0]
 8010442:	7222      	strb	r2, [r4, #8]
 8010444:	2a28      	cmp	r2, #40	@ 0x28
 8010446:	bf14      	ite	ne
 8010448:	f043 0304 	orrne.w	r3, r3, #4
 801044c:	f023 0304 	biceq.w	r3, r3, #4
 8010450:	e7cc      	b.n	80103ec <DmxParams::callbackFunction(char const*)+0x28>
 8010452:	4910      	ldr	r1, [pc, #64]	@ (8010494 <DmxParams::callbackFunction(char const*)+0xd0>)
 8010454:	f10d 0206 	add.w	r2, sp, #6
 8010458:	4628      	mov	r0, r5
 801045a:	f008 fe7c 	bl	8019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801045e:	2800      	cmp	r0, #0
 8010460:	d1c5      	bne.n	80103ee <DmxParams::callbackFunction(char const*)+0x2a>
 8010462:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	1e91      	subs	r1, r2, #2
 801046a:	f5b1 7fff 	cmp.w	r1, #510	@ 0x1fe
 801046e:	bf3b      	ittet	cc
 8010470:	0852      	lsrcc	r2, r2, #1
 8010472:	f102 32ff 	addcc.w	r2, r2, #4294967295	@ 0xffffffff
 8010476:	22ff      	movcs	r2, #255	@ 0xff
 8010478:	7262      	strbcc	r2, [r4, #9]
 801047a:	bf32      	itee	cc
 801047c:	f043 0308 	orrcc.w	r3, r3, #8
 8010480:	7262      	strbcs	r2, [r4, #9]
 8010482:	f023 0308 	biccs.w	r3, r3, #8
 8010486:	e7b1      	b.n	80103ec <DmxParams::callbackFunction(char const*)+0x28>
 8010488:	08020e07 	stmdaeq	r2, {r0, r1, r2, r9, sl, fp}
 801048c:	08020dfe 	stmdaeq	r2, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp}
 8010490:	08020df1 	stmdaeq	r2, {r0, r4, r5, r6, r7, r8, sl, fp}
 8010494:	08020de5 	stmdaeq	r2, {r0, r2, r5, r6, r7, r8, sl, fp}

08010498 <DmxParams::staticCallbackFunction(void*, char const*)>:
 8010498:	f7ff bf94 	b.w	80103c4 <DmxParams::callbackFunction(char const*)>

0801049c <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)>:
 801049c:	b570      	push	{r4, r5, r6, lr}
 801049e:	4604      	mov	r4, r0
 80104a0:	b086      	sub	sp, #24
 80104a2:	4615      	mov	r5, r2
 80104a4:	461e      	mov	r6, r3
 80104a6:	b369      	cbz	r1, 8010504 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x68>
 80104a8:	220a      	movs	r2, #10
 80104aa:	f00b fcc4 	bl	801be36 <memmove>
 80104ae:	462a      	mov	r2, r5
 80104b0:	4930      	ldr	r1, [pc, #192]	@ (8010574 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xd8>)
 80104b2:	4633      	mov	r3, r6
 80104b4:	a803      	add	r0, sp, #12
 80104b6:	f008 fc93 	bl	8018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	88a2      	ldrh	r2, [r4, #4]
 80104be:	492e      	ldr	r1, [pc, #184]	@ (8010578 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xdc>)
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	a803      	add	r0, sp, #12
 80104c6:	f7ff ff03 	bl	80102d0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	88e2      	ldrh	r2, [r4, #6]
 80104ce:	492b      	ldr	r1, [pc, #172]	@ (801057c <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe0>)
 80104d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80104d4:	a803      	add	r0, sp, #12
 80104d6:	f7ff fefb 	bl	80102d0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 80104da:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80104de:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80104e2:	7a23      	ldrb	r3, [r4, #8]
 80104e4:	6821      	ldr	r1, [r4, #0]
 80104e6:	42aa      	cmp	r2, r5
 80104e8:	d21d      	bcs.n	8010526 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x8a>
 80104ea:	9803      	ldr	r0, [sp, #12]
 80104ec:	0749      	lsls	r1, r1, #29
 80104ee:	4410      	add	r0, r2
 80104f0:	eba5 0502 	sub.w	r5, r5, r2
 80104f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80104f8:	d407      	bmi.n	801050a <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 80104fa:	b93a      	cbnz	r2, 801050c <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x70>
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	4a20      	ldr	r2, [pc, #128]	@ (8010580 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe4>)
 8010500:	4b20      	ldr	r3, [pc, #128]	@ (8010584 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe8>)
 8010502:	e006      	b.n	8010512 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x76>
 8010504:	f7ff ff0c 	bl	8010320 <StoreDmxSend::Copy(dmxsendparams::Params*)>
 8010508:	e7d1      	b.n	80104ae <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x12>
 801050a:	b37a      	cbz	r2, 801056c <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xd0>
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	4a1e      	ldr	r2, [pc, #120]	@ (8010588 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xec>)
 8010510:	4b1c      	ldr	r3, [pc, #112]	@ (8010584 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe8>)
 8010512:	4629      	mov	r1, r5
 8010514:	f00b ffb2 	bl	801c47c <snprintf>
 8010518:	4285      	cmp	r5, r0
 801051a:	bfa2      	ittt	ge
 801051c:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010520:	18c0      	addge	r0, r0, r3
 8010522:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8010526:	7a62      	ldrb	r2, [r4, #9]
 8010528:	6823      	ldr	r3, [r4, #0]
 801052a:	4918      	ldr	r1, [pc, #96]	@ (801058c <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xf0>)
 801052c:	3201      	adds	r2, #1
 801052e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010532:	0052      	lsls	r2, r2, #1
 8010534:	a803      	add	r0, sp, #12
 8010536:	f7ff fecb 	bl	80102d0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 801053a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801053e:	b17b      	cbz	r3, 8010560 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 8010540:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010544:	9b03      	ldr	r3, [sp, #12]
 8010546:	4413      	add	r3, r2
 8010548:	227d      	movs	r2, #125	@ 0x7d
 801054a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801054e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010552:	9903      	ldr	r1, [sp, #12]
 8010554:	54ca      	strb	r2, [r1, r3]
 8010556:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801055a:	3301      	adds	r3, #1
 801055c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010560:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010566:	601a      	str	r2, [r3, #0]
 8010568:	b006      	add	sp, #24
 801056a:	bd70      	pop	{r4, r5, r6, pc}
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	4a08      	ldr	r2, [pc, #32]	@ (8010590 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xf4>)
 8010570:	4b04      	ldr	r3, [pc, #16]	@ (8010584 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0xe8>)
 8010572:	e7ce      	b.n	8010512 <DmxParams::Builder(dmxsendparams::Params const*, char*, unsigned long, unsigned long&)+0x76>
 8010574:	08020e12 	stmdaeq	r2, {r1, r4, r9, sl, fp}
 8010578:	08020e07 	stmdaeq	r2, {r0, r1, r2, r9, sl, fp}
 801057c:	08020dfe 	stmdaeq	r2, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp}
 8010580:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 8010584:	08020df1 	stmdaeq	r2, {r0, r4, r5, r6, r7, r8, sl, fp}
 8010588:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 801058c:	08020de5 	stmdaeq	r2, {r0, r2, r5, r6, r7, r8, sl, fp}
 8010590:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

08010594 <DmxParams::Set(Dmx*)>:
 8010594:	b538      	push	{r3, r4, r5, lr}
 8010596:	6803      	ldr	r3, [r0, #0]
 8010598:	4604      	mov	r4, r0
 801059a:	07d8      	lsls	r0, r3, #31
 801059c:	460d      	mov	r5, r1
 801059e:	d503      	bpl.n	80105a8 <DmxParams::Set(Dmx*)+0x14>
 80105a0:	88a1      	ldrh	r1, [r4, #4]
 80105a2:	4628      	mov	r0, r5
 80105a4:	f000 fcca 	bl	8010f3c <Dmx::SetDmxBreakTime(unsigned long)>
 80105a8:	6823      	ldr	r3, [r4, #0]
 80105aa:	0799      	lsls	r1, r3, #30
 80105ac:	d503      	bpl.n	80105b6 <DmxParams::Set(Dmx*)+0x22>
 80105ae:	88e1      	ldrh	r1, [r4, #6]
 80105b0:	4628      	mov	r0, r5
 80105b2:	f000 fcf9 	bl	8010fa8 <Dmx::SetDmxMabTime(unsigned long)>
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	075a      	lsls	r2, r3, #29
 80105ba:	d507      	bpl.n	80105cc <DmxParams::Set(Dmx*)+0x38>
 80105bc:	7a21      	ldrb	r1, [r4, #8]
 80105be:	b111      	cbz	r1, 80105c6 <DmxParams::Set(Dmx*)+0x32>
 80105c0:	4b08      	ldr	r3, [pc, #32]	@ (80105e4 <DmxParams::Set(Dmx*)+0x50>)
 80105c2:	fbb3 f1f1 	udiv	r1, r3, r1
 80105c6:	4628      	mov	r0, r5
 80105c8:	f000 fd24 	bl	8011014 <Dmx::SetDmxPeriodTime(unsigned long)>
 80105cc:	6823      	ldr	r3, [r4, #0]
 80105ce:	071b      	lsls	r3, r3, #28
 80105d0:	d507      	bpl.n	80105e2 <DmxParams::Set(Dmx*)+0x4e>
 80105d2:	7a61      	ldrb	r1, [r4, #9]
 80105d4:	3101      	adds	r1, #1
 80105d6:	4628      	mov	r0, r5
 80105d8:	0049      	lsls	r1, r1, #1
 80105da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105de:	f000 bd49 	b.w	8011074 <Dmx::SetDmxSlots(unsigned short)>
 80105e2:	bd38      	pop	{r3, r4, r5, pc}
 80105e4:	000f4240 	andeq	r4, pc, r0, asr #4

080105e8 <remoteconfig::dmx::json_get_ports(char*, unsigned long)>:
 80105e8:	235b      	movs	r3, #91	@ 0x5b
 80105ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105ee:	4604      	mov	r4, r0
 80105f0:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8010650 <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x68>
 80105f4:	f800 3b01 	strb.w	r3, [r0], #1
 80105f8:	f8d9 3000 	ldr.w	r3, [r9]
 80105fc:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8010654 <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x6c>
 8010600:	695a      	ldr	r2, [r3, #20]
 8010602:	4f11      	ldr	r7, [pc, #68]	@ (8010648 <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x60>)
 8010604:	2a01      	cmp	r2, #1
 8010606:	bf0c      	ite	eq
 8010608:	4643      	moveq	r3, r8
 801060a:	463b      	movne	r3, r7
 801060c:	460e      	mov	r6, r1
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	4a0e      	ldr	r2, [pc, #56]	@ (801064c <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x64>)
 8010612:	2341      	movs	r3, #65	@ 0x41
 8010614:	3901      	subs	r1, #1
 8010616:	f00b ff31 	bl	801c47c <snprintf>
 801061a:	f8d9 3000 	ldr.w	r3, [r9]
 801061e:	4a0b      	ldr	r2, [pc, #44]	@ (801064c <remoteconfig::dmx::json_get_ports(char*, unsigned long)+0x64>)
 8010620:	699b      	ldr	r3, [r3, #24]
 8010622:	1c45      	adds	r5, r0, #1
 8010624:	2b01      	cmp	r3, #1
 8010626:	bf08      	it	eq
 8010628:	4647      	moveq	r7, r8
 801062a:	1960      	adds	r0, r4, r5
 801062c:	9700      	str	r7, [sp, #0]
 801062e:	2342      	movs	r3, #66	@ 0x42
 8010630:	1b71      	subs	r1, r6, r5
 8010632:	f00b ff23 	bl	801c47c <snprintf>
 8010636:	4428      	add	r0, r5
 8010638:	4404      	add	r4, r0
 801063a:	235d      	movs	r3, #93	@ 0x5d
 801063c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010640:	b003      	add	sp, #12
 8010642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010646:	bf00      	nop
 8010648:	0801d56c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, ip, lr, pc}
 801064c:	0801d76c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sl, ip, lr, pc}
 8010650:	2000d414 	andcs	sp, r0, r4, lsl r4
 8010654:	0801d566 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, ip, lr, pc}

08010658 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)>:
 8010658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065c:	f040 0420 	orr.w	r4, r0, #32
 8010660:	460d      	mov	r5, r1
 8010662:	f1a4 0161 	sub.w	r1, r4, #97	@ 0x61
 8010666:	2901      	cmp	r1, #1
 8010668:	b088      	sub	sp, #32
 801066a:	4616      	mov	r6, r2
 801066c:	d81f      	bhi.n	80106ae <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x56>
 801066e:	4b11      	ldr	r3, [pc, #68]	@ (80106b4 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x5c>)
 8010670:	6818      	ldr	r0, [r3, #0]
 8010672:	f000 fbf7 	bl	8010e64 <Dmx::GetTotalStatistics(unsigned long)>
 8010676:	6802      	ldr	r2, [r0, #0]
 8010678:	6841      	ldr	r1, [r0, #4]
 801067a:	6947      	ldr	r7, [r0, #20]
 801067c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8010680:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8010684:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8010688:	6900      	ldr	r0, [r0, #16]
 801068a:	9200      	str	r2, [sp, #0]
 801068c:	f1a4 0320 	sub.w	r3, r4, #32
 8010690:	e9cd 8005 	strd	r8, r0, [sp, #20]
 8010694:	e9cd 1701 	strd	r1, r7, [sp, #4]
 8010698:	e9cd ce03 	strd	ip, lr, [sp, #12]
 801069c:	4a06      	ldr	r2, [pc, #24]	@ (80106b8 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x60>)
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	4631      	mov	r1, r6
 80106a2:	4628      	mov	r0, r5
 80106a4:	f00b feea 	bl	801c47c <snprintf>
 80106a8:	b008      	add	sp, #32
 80106aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ae:	2000      	movs	r0, #0
 80106b0:	e7fa      	b.n	80106a8 <remoteconfig::dmx::json_get_portstatus(char, char*, unsigned long)+0x50>
 80106b2:	bf00      	nop
 80106b4:	2000d414 	andcs	sp, r0, r4, lsl r4
 80106b8:	0801d78c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, ip, lr, pc}

080106bc <Dmx::StopData(unsigned long) [clone .part.0]>:
 80106bc:	b430      	push	{r4, r5}
 80106be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80106c2:	4d1f      	ldr	r5, [pc, #124]	@ (8010740 <Dmx::StopData(unsigned long) [clone .part.0]+0x84>)
 80106c4:	4a1f      	ldr	r2, [pc, #124]	@ (8010744 <Dmx::StopData(unsigned long) [clone .part.0]+0x88>)
 80106c6:	6940      	ldr	r0, [r0, #20]
 80106c8:	4b1f      	ldr	r3, [pc, #124]	@ (8010748 <Dmx::StopData(unsigned long) [clone .part.0]+0x8c>)
 80106ca:	2400      	movs	r4, #0
 80106cc:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
 80106d0:	4d1e      	ldr	r5, [pc, #120]	@ (801074c <Dmx::StopData(unsigned long) [clone .part.0]+0x90>)
 80106d2:	2900      	cmp	r1, #0
 80106d4:	bf18      	it	ne
 80106d6:	4613      	movne	r3, r2
 80106d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010750 <Dmx::StopData(unsigned long) [clone .part.0]+0x94>)
 80106da:	bf18      	it	ne
 80106dc:	462a      	movne	r2, r5
 80106de:	b9e8      	cbnz	r0, 801071c <Dmx::StopData(unsigned long) [clone .part.0]+0x60>
 80106e0:	4b1c      	ldr	r3, [pc, #112]	@ (8010754 <Dmx::StopData(unsigned long) [clone .part.0]+0x98>)
 80106e2:	f44f 7405 	mov.w	r4, #532	@ 0x214
 80106e6:	fb04 3101 	mla	r1, r4, r1, r3
 80106ea:	e002      	b.n	80106f2 <Dmx::StopData(unsigned long) [clone .part.0]+0x36>
 80106ec:	f8d1 3210 	ldr.w	r3, [r1, #528]	@ 0x210
 80106f0:	b193      	cbz	r3, 8010718 <Dmx::StopData(unsigned long) [clone .part.0]+0x5c>
 80106f2:	f8d1 3210 	ldr.w	r3, [r1, #528]	@ 0x210
 80106f6:	2b04      	cmp	r3, #4
 80106f8:	d1f8      	bne.n	80106ec <Dmx::StopData(unsigned long) [clone .part.0]+0x30>
 80106fa:	6813      	ldr	r3, [r2, #0]
 80106fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010700:	6013      	str	r3, [r2, #0]
 8010702:	f3bf 8f5f 	dmb	sy
 8010706:	6813      	ldr	r3, [r2, #0]
 8010708:	065b      	lsls	r3, r3, #25
 801070a:	d5fa      	bpl.n	8010702 <Dmx::StopData(unsigned long) [clone .part.0]+0x46>
 801070c:	f8c1 0210 	str.w	r0, [r1, #528]	@ 0x210
 8010710:	f8d1 3210 	ldr.w	r3, [r1, #528]	@ 0x210
 8010714:	2b00      	cmp	r3, #0
 8010716:	d1ec      	bne.n	80106f2 <Dmx::StopData(unsigned long) [clone .part.0]+0x36>
 8010718:	bc30      	pop	{r4, r5}
 801071a:	4770      	bx	lr
 801071c:	6818      	ldr	r0, [r3, #0]
 801071e:	4a0e      	ldr	r2, [pc, #56]	@ (8010758 <Dmx::StopData(unsigned long) [clone .part.0]+0x9c>)
 8010720:	f020 0020 	bic.w	r0, r0, #32
 8010724:	6018      	str	r0, [r3, #0]
 8010726:	6818      	ldr	r0, [r3, #0]
 8010728:	f020 0010 	bic.w	r0, r0, #16
 801072c:	6018      	str	r0, [r3, #0]
 801072e:	f240 531c 	movw	r3, #1308	@ 0x51c
 8010732:	fb03 2301 	mla	r3, r3, r1, r2
 8010736:	f8c3 4518 	str.w	r4, [r3, #1304]	@ 0x518
 801073a:	bc30      	pop	{r4, r5}
 801073c:	4770      	bx	lr
 801073e:	bf00      	nop
 8010740:	2000deac 	andcs	sp, r0, ip, lsr #29
 8010744:	4001140c 	andmi	r1, r1, ip, lsl #8
 8010748:	4000480c 	andmi	r4, r0, ip, lsl #16
 801074c:	40011400 	andmi	r1, r1, r0, lsl #8
 8010750:	40004800 	andmi	r4, r0, r0, lsl #16
 8010754:	2001c000 	andcs	ip, r1, r0
 8010758:	2000d424 	andcs	sp, r0, r4, lsr #8

0801075c <TIMER1_IRQHandler>:
 801075c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010760:	691a      	ldr	r2, [r3, #16]
 8010762:	0712      	lsls	r2, r2, #28
 8010764:	d53a      	bpl.n	80107dc <TIMER1_IRQHandler+0x80>
 8010766:	493a      	ldr	r1, [pc, #232]	@ (8010850 <TIMER1_IRQHandler+0xf4>)
 8010768:	f8d1 2210 	ldr.w	r2, [r1, #528]	@ 0x210
 801076c:	2a02      	cmp	r2, #2
 801076e:	b430      	push	{r4, r5}
 8010770:	d03a      	beq.n	80107e8 <TIMER1_IRQHandler+0x8c>
 8010772:	2a04      	cmp	r2, #4
 8010774:	d051      	beq.n	801081a <TIMER1_IRQHandler+0xbe>
 8010776:	2a01      	cmp	r2, #1
 8010778:	d124      	bne.n	80107c4 <TIMER1_IRQHandler+0x68>
 801077a:	4a36      	ldr	r2, [pc, #216]	@ (8010854 <TIMER1_IRQHandler+0xf8>)
 801077c:	f8d2 4400 	ldr.w	r4, [r2, #1024]	@ 0x400
 8010780:	f8d2 040c 	ldr.w	r0, [r2, #1036]	@ 0x40c
 8010784:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 8010788:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 801078c:	f444 1400 	orr.w	r4, r4, #2097152	@ 0x200000
 8010790:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 8010794:	f8c2 4400 	str.w	r4, [r2, #1024]	@ 0x400
 8010798:	f8c2 040c 	str.w	r0, [r2, #1036]	@ 0x40c
 801079c:	f8d2 4420 	ldr.w	r4, [r2, #1056]	@ 0x420
 80107a0:	f8d2 0424 	ldr.w	r0, [r2, #1060]	@ 0x424
 80107a4:	f8c2 4420 	str.w	r4, [r2, #1056]	@ 0x420
 80107a8:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 80107ac:	f440 60e0 	orr.w	r0, r0, #1792	@ 0x700
 80107b0:	f8c2 0424 	str.w	r0, [r2, #1060]	@ 0x424
 80107b4:	2402      	movs	r4, #2
 80107b6:	4828      	ldr	r0, [pc, #160]	@ (8010858 <TIMER1_IRQHandler+0xfc>)
 80107b8:	f8c1 4210 	str.w	r4, [r1, #528]	@ 0x210
 80107bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80107be:	6841      	ldr	r1, [r0, #4]
 80107c0:	440a      	add	r2, r1
 80107c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80107c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80107c8:	f06f 0208 	mvn.w	r2, #8
 80107cc:	611a      	str	r2, [r3, #16]
 80107ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80107d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107d6:	bc30      	pop	{r4, r5}
 80107d8:	611a      	str	r2, [r3, #16]
 80107da:	4770      	bx	lr
 80107dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80107e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107e4:	611a      	str	r2, [r3, #16]
 80107e6:	4770      	bx	lr
 80107e8:	4b1c      	ldr	r3, [pc, #112]	@ (801085c <TIMER1_IRQHandler+0x100>)
 80107ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80107ec:	f022 0201 	bic.w	r2, r2, #1
 80107f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80107f2:	6898      	ldr	r0, [r3, #8]
 80107f4:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80107f8:	6098      	str	r0, [r3, #8]
 80107fa:	f8b1 0204 	ldrh.w	r0, [r1, #516]	@ 0x204
 80107fe:	6659      	str	r1, [r3, #100]	@ 0x64
 8010800:	f04f 2440 	mov.w	r4, #1073758208	@ 0x40004000
 8010804:	f042 0211 	orr.w	r2, r2, #17
 8010808:	65d8      	str	r0, [r3, #92]	@ 0x5c
 801080a:	659a      	str	r2, [r3, #88]	@ 0x58
 801080c:	f8d4 3814 	ldr.w	r3, [r4, #2068]	@ 0x814
 8010810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010814:	f8c4 3814 	str.w	r3, [r4, #2068]	@ 0x814
 8010818:	e7d4      	b.n	80107c4 <TIMER1_IRQHandler+0x68>
 801081a:	4a0e      	ldr	r2, [pc, #56]	@ (8010854 <TIMER1_IRQHandler+0xf8>)
 801081c:	f8d2 0400 	ldr.w	r0, [r2, #1024]	@ 0x400
 8010820:	f8d2 440c 	ldr.w	r4, [r2, #1036]	@ 0x40c
 8010824:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8010828:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801082c:	f424 1440 	bic.w	r4, r4, #3145728	@ 0x300000
 8010830:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8010834:	f8c2 0400 	str.w	r0, [r2, #1024]	@ 0x400
 8010838:	f8c2 440c 	str.w	r4, [r2, #1036]	@ 0x40c
 801083c:	4806      	ldr	r0, [pc, #24]	@ (8010858 <TIMER1_IRQHandler+0xfc>)
 801083e:	f8c2 5428 	str.w	r5, [r2, #1064]	@ 0x428
 8010842:	2201      	movs	r2, #1
 8010844:	f8c1 2210 	str.w	r2, [r1, #528]	@ 0x210
 8010848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801084a:	6801      	ldr	r1, [r0, #0]
 801084c:	e7b8      	b.n	80107c0 <TIMER1_IRQHandler+0x64>
 801084e:	bf00      	nop
 8010850:	2001c000 	andcs	ip, r1, r0
 8010854:	40020000 	andmi	r0, r2, r0
 8010858:	2000d418 	andcs	sp, r0, r8, lsl r4
 801085c:	40026000 	andmi	r6, r2, r0

08010860 <TIMER4_IRQHandler>:
 8010860:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010864:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	@ 0xc10
 8010868:	0752      	lsls	r2, r2, #29
 801086a:	d53e      	bpl.n	80108ea <TIMER4_IRQHandler+0x8a>
 801086c:	4940      	ldr	r1, [pc, #256]	@ (8010970 <TIMER4_IRQHandler+0x110>)
 801086e:	f8d1 2424 	ldr.w	r2, [r1, #1060]	@ 0x424
 8010872:	2a02      	cmp	r2, #2
 8010874:	b430      	push	{r4, r5}
 8010876:	d03f      	beq.n	80108f8 <TIMER4_IRQHandler+0x98>
 8010878:	2a04      	cmp	r2, #4
 801087a:	d05e      	beq.n	801093a <TIMER4_IRQHandler+0xda>
 801087c:	2a01      	cmp	r2, #1
 801087e:	d126      	bne.n	80108ce <TIMER4_IRQHandler+0x6e>
 8010880:	4a3c      	ldr	r2, [pc, #240]	@ (8010974 <TIMER4_IRQHandler+0x114>)
 8010882:	f8d2 4800 	ldr.w	r4, [r2, #2048]	@ 0x800
 8010886:	f8d2 080c 	ldr.w	r0, [r2, #2060]	@ 0x80c
 801088a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
 801088e:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 8010892:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 8010896:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 801089a:	f8c2 4800 	str.w	r4, [r2, #2048]	@ 0x800
 801089e:	f8c2 080c 	str.w	r0, [r2, #2060]	@ 0x80c
 80108a2:	f8d2 0820 	ldr.w	r0, [r2, #2080]	@ 0x820
 80108a6:	f8d2 5824 	ldr.w	r5, [r2, #2084]	@ 0x824
 80108aa:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 80108ae:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80108b2:	f8c2 0820 	str.w	r0, [r2, #2080]	@ 0x820
 80108b6:	2402      	movs	r4, #2
 80108b8:	482f      	ldr	r0, [pc, #188]	@ (8010978 <TIMER4_IRQHandler+0x118>)
 80108ba:	f8c2 5824 	str.w	r5, [r2, #2084]	@ 0x824
 80108be:	f8c1 4424 	str.w	r4, [r1, #1060]	@ 0x424
 80108c2:	f8d3 2c24 	ldr.w	r2, [r3, #3108]	@ 0xc24
 80108c6:	6841      	ldr	r1, [r0, #4]
 80108c8:	440a      	add	r2, r1
 80108ca:	f8c3 2c38 	str.w	r2, [r3, #3128]	@ 0xc38
 80108ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80108d2:	f06f 0204 	mvn.w	r2, #4
 80108d6:	f8c3 2c10 	str.w	r2, [r3, #3088]	@ 0xc10
 80108da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80108de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80108e2:	bc30      	pop	{r4, r5}
 80108e4:	f8c3 2c10 	str.w	r2, [r3, #3088]	@ 0xc10
 80108e8:	4770      	bx	lr
 80108ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80108ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80108f2:	f8c3 2c10 	str.w	r2, [r3, #3088]	@ 0xc10
 80108f6:	4770      	bx	lr
 80108f8:	4b20      	ldr	r3, [pc, #128]	@ (801097c <TIMER4_IRQHandler+0x11c>)
 80108fa:	4c21      	ldr	r4, [pc, #132]	@ (8010980 <TIMER4_IRQHandler+0x120>)
 80108fc:	f8d3 24a0 	ldr.w	r2, [r3, #1184]	@ 0x4a0
 8010900:	f022 0201 	bic.w	r2, r2, #1
 8010904:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
 8010908:	f8d3 040c 	ldr.w	r0, [r3, #1036]	@ 0x40c
 801090c:	f440 1000 	orr.w	r0, r0, #2097152	@ 0x200000
 8010910:	f8c3 040c 	str.w	r0, [r3, #1036]	@ 0x40c
 8010914:	f042 0211 	orr.w	r2, r2, #17
 8010918:	f501 7005 	add.w	r0, r1, #532	@ 0x214
 801091c:	f8b1 1418 	ldrh.w	r1, [r1, #1048]	@ 0x418
 8010920:	f8c3 04ac 	str.w	r0, [r3, #1196]	@ 0x4ac
 8010924:	f8c3 14a4 	str.w	r1, [r3, #1188]	@ 0x4a4
 8010928:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
 801092c:	f8d4 3414 	ldr.w	r3, [r4, #1044]	@ 0x414
 8010930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010934:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
 8010938:	e7c9      	b.n	80108ce <TIMER4_IRQHandler+0x6e>
 801093a:	4a0e      	ldr	r2, [pc, #56]	@ (8010974 <TIMER4_IRQHandler+0x114>)
 801093c:	f8d2 0800 	ldr.w	r0, [r2, #2048]	@ 0x800
 8010940:	f8d2 480c 	ldr.w	r4, [r2, #2060]	@ 0x80c
 8010944:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 8010948:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 801094c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
 8010950:	2540      	movs	r5, #64	@ 0x40
 8010952:	f8c2 0800 	str.w	r0, [r2, #2048]	@ 0x800
 8010956:	f8c2 480c 	str.w	r4, [r2, #2060]	@ 0x80c
 801095a:	4807      	ldr	r0, [pc, #28]	@ (8010978 <TIMER4_IRQHandler+0x118>)
 801095c:	f8c2 5828 	str.w	r5, [r2, #2088]	@ 0x828
 8010960:	2201      	movs	r2, #1
 8010962:	f8c1 2424 	str.w	r2, [r1, #1060]	@ 0x424
 8010966:	f8d3 2c24 	ldr.w	r2, [r3, #3108]	@ 0xc24
 801096a:	6801      	ldr	r1, [r0, #0]
 801096c:	e7ac      	b.n	80108c8 <TIMER4_IRQHandler+0x68>
 801096e:	bf00      	nop
 8010970:	2001c000 	andcs	ip, r1, r0
 8010974:	40020000 	andmi	r0, r2, r0
 8010978:	2000d418 	andcs	sp, r0, r8, lsl r4
 801097c:	40026000 	andmi	r6, r2, r0
 8010980:	40011000 	andmi	r1, r1, r0

08010984 <TIMER6_IRQHandler>:
 8010984:	4b06      	ldr	r3, [pc, #24]	@ (80109a0 <TIMER6_IRQHandler+0x1c>)
 8010986:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 801098a:	07da      	lsls	r2, r3, #31
 801098c:	bf41      	itttt	mi
 801098e:	4905      	ldrmi	r1, [pc, #20]	@ (80109a4 <TIMER6_IRQHandler+0x20>)
 8010990:	684a      	ldrmi	r2, [r1, #4]
 8010992:	3201      	addmi	r2, #1
 8010994:	604a      	strmi	r2, [r1, #4]
 8010996:	4a02      	ldr	r2, [pc, #8]	@ (80109a0 <TIMER6_IRQHandler+0x1c>)
 8010998:	43db      	mvns	r3, r3
 801099a:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
 801099e:	4770      	bx	lr
 80109a0:	40001000 	andmi	r1, r0, r0
 80109a4:	2001bcc8 	andcs	fp, r1, r8, asr #25

080109a8 <DMA0_Channel3_IRQHandler>:
 80109a8:	4b17      	ldr	r3, [pc, #92]	@ (8010a08 <DMA0_Channel3_IRQHandler+0x60>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80109ae:	0110      	lsls	r0, r2, #4
 80109b0:	d516      	bpl.n	80109e0 <DMA0_Channel3_IRQHandler+0x38>
 80109b2:	06ca      	lsls	r2, r1, #27
 80109b4:	d514      	bpl.n	80109e0 <DMA0_Channel3_IRQHandler+0x38>
 80109b6:	b510      	push	{r4, lr}
 80109b8:	4c14      	ldr	r4, [pc, #80]	@ (8010a0c <DMA0_Channel3_IRQHandler+0x64>)
 80109ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80109bc:	f8d4 120c 	ldr.w	r1, [r4, #524]	@ 0x20c
 80109c0:	f022 0298 	bic.w	r2, r2, #152	@ 0x98
 80109c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80109c6:	b989      	cbnz	r1, 80109ec <DMA0_Channel3_IRQHandler+0x44>
 80109c8:	f8c4 1210 	str.w	r1, [r4, #528]	@ 0x210
 80109cc:	4a10      	ldr	r2, [pc, #64]	@ (8010a10 <DMA0_Channel3_IRQHandler+0x68>)
 80109ce:	6813      	ldr	r3, [r2, #0]
 80109d0:	3301      	adds	r3, #1
 80109d2:	6013      	str	r3, [r2, #0]
 80109d4:	4a0c      	ldr	r2, [pc, #48]	@ (8010a08 <DMA0_Channel3_IRQHandler+0x60>)
 80109d6:	6893      	ldr	r3, [r2, #8]
 80109d8:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 80109dc:	6093      	str	r3, [r2, #8]
 80109de:	bd10      	pop	{r4, pc}
 80109e0:	4a09      	ldr	r2, [pc, #36]	@ (8010a08 <DMA0_Channel3_IRQHandler+0x60>)
 80109e2:	6893      	ldr	r3, [r2, #8]
 80109e4:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 80109e8:	6093      	str	r3, [r2, #8]
 80109ea:	4770      	bx	lr
 80109ec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80109f0:	4b08      	ldr	r3, [pc, #32]	@ (8010a14 <DMA0_Channel3_IRQHandler+0x6c>)
 80109f2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	2102      	movs	r1, #2
 80109f8:	441a      	add	r2, r3
 80109fa:	f00a fa5b 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 80109fe:	2304      	movs	r3, #4
 8010a00:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
 8010a04:	e7e2      	b.n	80109cc <DMA0_Channel3_IRQHandler+0x24>
 8010a06:	bf00      	nop
 8010a08:	40026000 	andmi	r6, r2, r0
 8010a0c:	2001c000 	andcs	ip, r1, r0
 8010a10:	2000de74 	andcs	sp, r0, r4, ror lr
 8010a14:	2000d418 	andcs	sp, r0, r8, lsl r4

08010a18 <DMA1_Channel6_IRQHandler>:
 8010a18:	4b1c      	ldr	r3, [pc, #112]	@ (8010a8c <DMA1_Channel6_IRQHandler+0x74>)
 8010a1a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8010a1e:	f8d3 14a0 	ldr.w	r1, [r3, #1184]	@ 0x4a0
 8010a22:	0290      	lsls	r0, r2, #10
 8010a24:	d51a      	bpl.n	8010a5c <DMA1_Channel6_IRQHandler+0x44>
 8010a26:	06ca      	lsls	r2, r1, #27
 8010a28:	d518      	bpl.n	8010a5c <DMA1_Channel6_IRQHandler+0x44>
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	4c18      	ldr	r4, [pc, #96]	@ (8010a90 <DMA1_Channel6_IRQHandler+0x78>)
 8010a2e:	f8d3 24a0 	ldr.w	r2, [r3, #1184]	@ 0x4a0
 8010a32:	f8d4 1420 	ldr.w	r1, [r4, #1056]	@ 0x420
 8010a36:	f022 0298 	bic.w	r2, r2, #152	@ 0x98
 8010a3a:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0
 8010a3e:	b9a9      	cbnz	r1, 8010a6c <DMA1_Channel6_IRQHandler+0x54>
 8010a40:	f8c4 1424 	str.w	r1, [r4, #1060]	@ 0x424
 8010a44:	4a13      	ldr	r2, [pc, #76]	@ (8010a94 <DMA1_Channel6_IRQHandler+0x7c>)
 8010a46:	69d3      	ldr	r3, [r2, #28]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	61d3      	str	r3, [r2, #28]
 8010a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8010a8c <DMA1_Channel6_IRQHandler+0x74>)
 8010a4e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8010a52:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8010a56:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
 8010a5a:	bd10      	pop	{r4, pc}
 8010a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8010a8c <DMA1_Channel6_IRQHandler+0x74>)
 8010a5e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8010a62:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8010a66:	f8c2 340c 	str.w	r3, [r2, #1036]	@ 0x40c
 8010a6a:	4770      	bx	lr
 8010a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a98 <DMA1_Channel6_IRQHandler+0x80>)
 8010a6e:	480b      	ldr	r0, [pc, #44]	@ (8010a9c <DMA1_Channel6_IRQHandler+0x84>)
 8010a70:	689b      	ldr	r3, [r3, #8]
 8010a72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8010a76:	2101      	movs	r1, #1
 8010a78:	f8d2 2c24 	ldr.w	r2, [r2, #3108]	@ 0xc24
 8010a7c:	441a      	add	r2, r3
 8010a7e:	f00a fa19 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 8010a82:	2304      	movs	r3, #4
 8010a84:	f8c4 3424 	str.w	r3, [r4, #1060]	@ 0x424
 8010a88:	e7dc      	b.n	8010a44 <DMA1_Channel6_IRQHandler+0x2c>
 8010a8a:	bf00      	nop
 8010a8c:	40026000 	andmi	r6, r2, r0
 8010a90:	2001c000 	andcs	ip, r1, r0
 8010a94:	2000de74 	andcs	sp, r0, r4, ror lr
 8010a98:	2000d418 	andcs	sp, r0, r8, lsl r4
 8010a9c:	40000c00 	andmi	r0, r0, r0, lsl #24

08010aa0 <Dmx::Dmx()>:
 8010aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	49a7      	ldr	r1, [pc, #668]	@ (8010d44 <Dmx::Dmx()+0x2a4>)
 8010aa6:	4ba8      	ldr	r3, [pc, #672]	@ (8010d48 <Dmx::Dmx()+0x2a8>)
 8010aa8:	f8df b2d0 	ldr.w	fp, [pc, #720]	@ 8010d7c <Dmx::Dmx()+0x2dc>
 8010aac:	6008      	str	r0, [r1, #0]
 8010aae:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8010ab2:	e9c0 2200 	strd	r2, r2, [r0]
 8010ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010aba:	6102      	str	r2, [r0, #16]
 8010abc:	21b0      	movs	r1, #176	@ 0xb0
 8010abe:	220c      	movs	r2, #12
 8010ac0:	2500      	movs	r5, #0
 8010ac2:	e9c3 1200 	strd	r1, r2, [r3]
 8010ac6:	4ea1      	ldr	r6, [pc, #644]	@ (8010d4c <Dmx::Dmx()+0x2ac>)
 8010ac8:	7705      	strb	r5, [r0, #28]
 8010aca:	f44f 620c 	mov.w	r2, #2240	@ 0x8c0
 8010ace:	b08f      	sub	sp, #60	@ 0x3c
 8010ad0:	4607      	mov	r7, r0
 8010ad2:	609a      	str	r2, [r3, #8]
 8010ad4:	46d8      	mov	r8, fp
 8010ad6:	f100 0910 	add.w	r9, r0, #16
 8010ada:	f04f 0a01 	mov.w	sl, #1
 8010ade:	462c      	mov	r4, r5
 8010ae0:	e9d6 0300 	ldrd	r0, r3, [r6]
 8010ae4:	2202      	movs	r2, #2
 8010ae6:	2101      	movs	r1, #1
 8010ae8:	9303      	str	r3, [sp, #12]
 8010aea:	9002      	str	r0, [sp, #8]
 8010aec:	f009 fea8 	bl	801a840 <gpio_mode_set>
 8010af0:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8010af4:	2100      	movs	r1, #0
 8010af6:	2202      	movs	r2, #2
 8010af8:	f009 fec4 	bl	801a884 <gpio_output_options_set>
 8010afc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010b00:	f849 3c08 	str.w	r3, [r9, #-8]
 8010b04:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	4b91      	ldr	r3, [pc, #580]	@ (8010d50 <Dmx::Dmx()+0x2b0>)
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010b12:	f000 8110 	beq.w	8010d36 <Dmx::Dmx()+0x296>
 8010b16:	f8c9 a000 	str.w	sl, [r9]
 8010b1a:	b113      	cbz	r3, 8010b22 <Dmx::Dmx()+0x82>
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	f7ff fdcd 	bl	80106bc <Dmx::StopData(unsigned long) [clone .part.0]>
 8010b22:	e9d6 3200 	ldrd	r3, r2, [r6]
 8010b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8010b28:	498a      	ldr	r1, [pc, #552]	@ (8010d54 <Dmx::Dmx()+0x2b4>)
 8010b2a:	f240 521c 	movw	r2, #1308	@ 0x51c
 8010b2e:	f44f 7305 	mov.w	r3, #532	@ 0x214
 8010b32:	fb02 1205 	mla	r2, r2, r5, r1
 8010b36:	fb03 b305 	mla	r3, r3, r5, fp
 8010b3a:	f8c2 4518 	str.w	r4, [r2, #1304]	@ 0x518
 8010b3e:	f8c3 4210 	str.w	r4, [r3, #528]	@ 0x210
 8010b42:	f240 2301 	movw	r3, #513	@ 0x201
 8010b46:	f8c8 420c 	str.w	r4, [r8, #524]	@ 0x20c
 8010b4a:	f8c8 3204 	str.w	r3, [r8, #516]	@ 0x204
 8010b4e:	4640      	mov	r0, r8
 8010b50:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010b54:	2100      	movs	r1, #0
 8010b56:	f00b f985 	bl	801be64 <memset>
 8010b5a:	3608      	adds	r6, #8
 8010b5c:	f508 7805 	add.w	r8, r8, #532	@ 0x214
 8010b60:	b90d      	cbnz	r5, 8010b66 <Dmx::Dmx()+0xc6>
 8010b62:	2501      	movs	r5, #1
 8010b64:	e7bc      	b.n	8010ae0 <Dmx::Dmx()+0x40>
 8010b66:	4e7c      	ldr	r6, [pc, #496]	@ (8010d58 <Dmx::Dmx()+0x2b8>)
 8010b68:	4d7c      	ldr	r5, [pc, #496]	@ (8010d5c <Dmx::Dmx()+0x2bc>)
 8010b6a:	f640 4015 	movw	r0, #3093	@ 0xc15
 8010b6e:	f009 fee9 	bl	801a944 <rcu_periph_clock_enable>
 8010b72:	f640 4016 	movw	r0, #3094	@ 0xc16
 8010b76:	f009 fee5 	bl	801a944 <rcu_periph_clock_enable>
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	2103      	movs	r1, #3
 8010b7e:	f009 fac5 	bl	801a10c <dma_deinit>
 8010b82:	f04f 0b40 	mov.w	fp, #64	@ 0x40
 8010b86:	4b76      	ldr	r3, [pc, #472]	@ (8010d60 <Dmx::Dmx()+0x2c0>)
 8010b88:	9305      	str	r3, [sp, #20]
 8010b8a:	aa05      	add	r2, sp, #20
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f44f 3900 	mov.w	r9, #131072	@ 0x20000
 8010b92:	2103      	movs	r1, #3
 8010b94:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8010b98:	9408      	str	r4, [sp, #32]
 8010b9a:	f8cd a018 	str.w	sl, [sp, #24]
 8010b9e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010ba0:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8010ba4:	f009 faea 	bl	801a17c <dma_single_data_mode_init>
 8010ba8:	4630      	mov	r0, r6
 8010baa:	2103      	movs	r1, #3
 8010bac:	f009 fb6c 	bl	801a288 <dma_circulation_disable>
 8010bb0:	2204      	movs	r2, #4
 8010bb2:	2103      	movs	r1, #3
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f009 fb6f 	bl	801a298 <dma_channel_subperipheral_select>
 8010bba:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 8010bbc:	f04f 0810 	mov.w	r8, #16
 8010bc0:	f023 0398 	bic.w	r3, r3, #152	@ 0x98
 8010bc4:	65b3      	str	r3, [r6, #88]	@ 0x58
 8010bc6:	f885 830e 	strb.w	r8, [r5, #782]	@ 0x30e
 8010bca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010bce:	602b      	str	r3, [r5, #0]
 8010bd0:	4864      	ldr	r0, [pc, #400]	@ (8010d64 <Dmx::Dmx()+0x2c4>)
 8010bd2:	2106      	movs	r1, #6
 8010bd4:	f009 fa9a 	bl	801a10c <dma_deinit>
 8010bd8:	4b63      	ldr	r3, [pc, #396]	@ (8010d68 <Dmx::Dmx()+0x2c8>)
 8010bda:	4862      	ldr	r0, [pc, #392]	@ (8010d64 <Dmx::Dmx()+0x2c4>)
 8010bdc:	9305      	str	r3, [sp, #20]
 8010bde:	aa05      	add	r2, sp, #20
 8010be0:	2106      	movs	r1, #6
 8010be2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8010be6:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8010bea:	f8cd a018 	str.w	sl, [sp, #24]
 8010bee:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8010bf2:	f009 fac3 	bl	801a17c <dma_single_data_mode_init>
 8010bf6:	485b      	ldr	r0, [pc, #364]	@ (8010d64 <Dmx::Dmx()+0x2c4>)
 8010bf8:	2106      	movs	r1, #6
 8010bfa:	f009 fb45 	bl	801a288 <dma_circulation_disable>
 8010bfe:	4859      	ldr	r0, [pc, #356]	@ (8010d64 <Dmx::Dmx()+0x2c4>)
 8010c00:	2205      	movs	r2, #5
 8010c02:	2106      	movs	r1, #6
 8010c04:	f009 fb48 	bl	801a298 <dma_channel_subperipheral_select>
 8010c08:	f8d6 34a0 	ldr.w	r3, [r6, #1184]	@ 0x4a0
 8010c0c:	f023 0398 	bic.w	r3, r3, #152	@ 0x98
 8010c10:	f8c6 34a0 	str.w	r3, [r6, #1184]	@ 0x4a0
 8010c14:	f885 8345 	strb.w	r8, [r5, #837]	@ 0x345
 8010c18:	2320      	movs	r3, #32
 8010c1a:	60ab      	str	r3, [r5, #8]
 8010c1c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8010c20:	f009 fe90 	bl	801a944 <rcu_periph_clock_enable>
 8010c24:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c28:	f009 ff48 	bl	801aabc <timer_deinit>
 8010c2c:	a805      	add	r0, sp, #20
 8010c2e:	f009 ffeb 	bl	801ac08 <timer_struct_para_init>
 8010c32:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010c36:	a905      	add	r1, sp, #20
 8010c38:	f04f 09ef 	mov.w	r9, #239	@ 0xef
 8010c3c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c40:	9406      	str	r4, [sp, #24]
 8010c42:	f88d 4020 	strb.w	r4, [sp, #32]
 8010c46:	9607      	str	r6, [sp, #28]
 8010c48:	f8cd 9014 	str.w	r9, [sp, #20]
 8010c4c:	f009 ffe4 	bl	801ac18 <timer_init>
 8010c50:	4631      	mov	r1, r6
 8010c52:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c56:	f00a f985 	bl	801af64 <timer_flag_clear>
 8010c5a:	4631      	mov	r1, r6
 8010c5c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c60:	f00a f987 	bl	801af72 <timer_interrupt_flag_clear>
 8010c64:	4642      	mov	r2, r8
 8010c66:	2102      	movs	r1, #2
 8010c68:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c6c:	f00a f8fc 	bl	801ae68 <timer_channel_output_mode_config>
 8010c70:	4632      	mov	r2, r6
 8010c72:	2102      	movs	r1, #2
 8010c74:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c78:	f00a f91c 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 8010c7c:	2108      	movs	r1, #8
 8010c7e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c82:	f00a f972 	bl	801af6a <timer_interrupt_enable>
 8010c86:	f885 431c 	strb.w	r4, [r5, #796]	@ 0x31c
 8010c8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8010c8e:	602b      	str	r3, [r5, #0]
 8010c90:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010c94:	f009 fff4 	bl	801ac80 <timer_enable>
 8010c98:	f241 0003 	movw	r0, #4099	@ 0x1003
 8010c9c:	f009 fe52 	bl	801a944 <rcu_periph_clock_enable>
 8010ca0:	4832      	ldr	r0, [pc, #200]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010ca2:	f009 ff0b 	bl	801aabc <timer_deinit>
 8010ca6:	a805      	add	r0, sp, #20
 8010ca8:	f009 ffae 	bl	801ac08 <timer_struct_para_init>
 8010cac:	a905      	add	r1, sp, #20
 8010cae:	482f      	ldr	r0, [pc, #188]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010cb0:	f8cd 9014 	str.w	r9, [sp, #20]
 8010cb4:	e9cd 4606 	strd	r4, r6, [sp, #24]
 8010cb8:	f88d 4020 	strb.w	r4, [sp, #32]
 8010cbc:	f009 ffac 	bl	801ac18 <timer_init>
 8010cc0:	4631      	mov	r1, r6
 8010cc2:	482a      	ldr	r0, [pc, #168]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010cc4:	f00a f94e 	bl	801af64 <timer_flag_clear>
 8010cc8:	4631      	mov	r1, r6
 8010cca:	4828      	ldr	r0, [pc, #160]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010ccc:	f00a f951 	bl	801af72 <timer_interrupt_flag_clear>
 8010cd0:	4642      	mov	r2, r8
 8010cd2:	4826      	ldr	r0, [pc, #152]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	f00a f8c7 	bl	801ae68 <timer_channel_output_mode_config>
 8010cda:	4632      	mov	r2, r6
 8010cdc:	4823      	ldr	r0, [pc, #140]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010cde:	2101      	movs	r1, #1
 8010ce0:	f00a f8e8 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 8010ce4:	4821      	ldr	r0, [pc, #132]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010ce6:	2104      	movs	r1, #4
 8010ce8:	f00a f93f 	bl	801af6a <timer_interrupt_enable>
 8010cec:	f885 4332 	strb.w	r4, [r5, #818]	@ 0x332
 8010cf0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010cf4:	606b      	str	r3, [r5, #4]
 8010cf6:	481d      	ldr	r0, [pc, #116]	@ (8010d6c <Dmx::Dmx()+0x2cc>)
 8010cf8:	f04f 0802 	mov.w	r8, #2
 8010cfc:	f009 ffc0 	bl	801ac80 <timer_enable>
 8010d00:	491b      	ldr	r1, [pc, #108]	@ (8010d70 <Dmx::Dmx()+0x2d0>)
 8010d02:	481c      	ldr	r0, [pc, #112]	@ (8010d74 <Dmx::Dmx()+0x2d4>)
 8010d04:	f8cd 8000 	str.w	r8, [sp]
 8010d08:	2300      	movs	r3, #0
 8010d0a:	2208      	movs	r2, #8
 8010d0c:	f00a fa38 	bl	801b180 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
 8010d10:	f885 4327 	strb.w	r4, [r5, #807]	@ 0x327
 8010d14:	2680      	movs	r6, #128	@ 0x80
 8010d16:	606e      	str	r6, [r5, #4]
 8010d18:	4915      	ldr	r1, [pc, #84]	@ (8010d70 <Dmx::Dmx()+0x2d0>)
 8010d1a:	4817      	ldr	r0, [pc, #92]	@ (8010d78 <Dmx::Dmx()+0x2d8>)
 8010d1c:	f8cd 8000 	str.w	r8, [sp]
 8010d20:	2300      	movs	r3, #0
 8010d22:	2208      	movs	r2, #8
 8010d24:	f00a fa2c 	bl	801b180 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
 8010d28:	f885 4347 	strb.w	r4, [r5, #839]	@ 0x347
 8010d2c:	60ae      	str	r6, [r5, #8]
 8010d2e:	4638      	mov	r0, r7
 8010d30:	b00f      	add	sp, #60	@ 0x3c
 8010d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f43f aef6 	beq.w	8010b28 <Dmx::Dmx()+0x88>
 8010d3c:	4638      	mov	r0, r7
 8010d3e:	f7ff fcbd 	bl	80106bc <Dmx::StopData(unsigned long) [clone .part.0]>
 8010d42:	e6f1      	b.n	8010b28 <Dmx::Dmx()+0x88>
 8010d44:	2000d414 	andcs	sp, r0, r4, lsl r4
 8010d48:	2000d418 	andcs	sp, r0, r8, lsl r4
 8010d4c:	08020e20 	stmdaeq	r2, {r5, r9, sl, fp}
 8010d50:	2000deac 	andcs	sp, r0, ip, lsr #29
 8010d54:	2000d424 	andcs	sp, r0, r4, lsr #8
 8010d58:	40026000 	andmi	r6, r2, r0
 8010d5c:	e000e100 	and	lr, r0, r0, lsl #2
 8010d60:	40004804 	andmi	r4, r0, r4, lsl #16
 8010d64:	40026400 	andmi	r6, r2, r0, lsl #8
 8010d68:	40011404 	andmi	r1, r1, r4, lsl #8
 8010d6c:	40000c00 	andmi	r0, r0, r0, lsl #24
 8010d70:	0003d090 	muleq	r3, r0, r0
 8010d74:	40004800 	andmi	r4, r0, r0, lsl #16
 8010d78:	40011400 	andmi	r1, r1, r0, lsl #8
 8010d7c:	2001c000 	andcs	ip, r1, r0

08010d80 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)>:
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8010d88:	4615      	mov	r5, r2
 8010d8a:	6972      	ldr	r2, [r6, #20]
 8010d8c:	42aa      	cmp	r2, r5
 8010d8e:	461f      	mov	r7, r3
 8010d90:	460c      	mov	r4, r1
 8010d92:	d021      	beq.n	8010dd8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x58>
 8010d94:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8010e50 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd0>
 8010d98:	6175      	str	r5, [r6, #20]
 8010d9a:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 8010d9e:	b10b      	cbz	r3, 8010da4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x24>
 8010da0:	f7ff fc8c 	bl	80106bc <Dmx::StopData(unsigned long) [clone .part.0]>
 8010da4:	b975      	cbnz	r5, 8010dc4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x44>
 8010da6:	4b29      	ldr	r3, [pc, #164]	@ (8010e4c <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xcc>)
 8010da8:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 8010dac:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8010db0:	6852      	ldr	r2, [r2, #4]
 8010db2:	619a      	str	r2, [r3, #24]
 8010db4:	b127      	cbz	r7, 8010dc0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x40>
 8010db6:	6975      	ldr	r5, [r6, #20]
 8010db8:	b9cd      	cbnz	r5, 8010dee <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x6e>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 8010dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc4:	2d01      	cmp	r5, #1
 8010dc6:	d1f5      	bne.n	8010db4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x34>
 8010dc8:	4b20      	ldr	r3, [pc, #128]	@ (8010e4c <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xcc>)
 8010dca:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 8010dce:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8010dd2:	6852      	ldr	r2, [r2, #4]
 8010dd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8010dd6:	e7ed      	b.n	8010db4 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x34>
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d134      	bne.n	8010e46 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xc6>
 8010ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8010e50 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd0>)
 8010dde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d0ec      	beq.n	8010dc0 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x40>
 8010de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dea:	f7ff bc67 	b.w	80106bc <Dmx::StopData(unsigned long) [clone .part.0]>
 8010dee:	4b19      	ldr	r3, [pc, #100]	@ (8010e54 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd4>)
 8010df0:	4919      	ldr	r1, [pc, #100]	@ (8010e58 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd8>)
 8010df2:	f240 521c 	movw	r2, #1308	@ 0x51c
 8010df6:	fb02 3304 	mla	r3, r2, r4, r3
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f8c3 2518 	str.w	r2, [r3, #1304]	@ 0x518
 8010e00:	4b16      	ldr	r3, [pc, #88]	@ (8010e5c <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xdc>)
 8010e02:	4a17      	ldr	r2, [pc, #92]	@ (8010e60 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xe0>)
 8010e04:	2c00      	cmp	r4, #0
 8010e06:	bf18      	it	ne
 8010e08:	4619      	movne	r1, r3
 8010e0a:	f1a3 030c 	sub.w	r3, r3, #12
 8010e0e:	bf18      	it	ne
 8010e10:	461a      	movne	r2, r3
 8010e12:	f3bf 8f5f 	dmb	sy
 8010e16:	6813      	ldr	r3, [r2, #0]
 8010e18:	061b      	lsls	r3, r3, #24
 8010e1a:	d5fa      	bpl.n	8010e12 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x92>
 8010e1c:	6813      	ldr	r3, [r2, #0]
 8010e1e:	f023 0320 	bic.w	r3, r3, #32
 8010e22:	6013      	str	r3, [r2, #0]
 8010e24:	6813      	ldr	r3, [r2, #0]
 8010e26:	f023 0310 	bic.w	r3, r3, #16
 8010e2a:	6013      	str	r3, [r2, #0]
 8010e2c:	680b      	ldr	r3, [r1, #0]
 8010e2e:	f043 0320 	orr.w	r3, r3, #32
 8010e32:	600b      	str	r3, [r1, #0]
 8010e34:	680b      	ldr	r3, [r1, #0]
 8010e36:	2202      	movs	r2, #2
 8010e38:	f043 0310 	orr.w	r3, r3, #16
 8010e3c:	600b      	str	r3, [r1, #0]
 8010e3e:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
 8010e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e46:	f8df 8008 	ldr.w	r8, [pc, #8]	@ 8010e50 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0xd0>
 8010e4a:	e7b5      	b.n	8010db8 <Dmx::SetPortDirection(unsigned long, dmx::PortDirection, bool)+0x38>
 8010e4c:	08020e20 	stmdaeq	r2, {r5, r9, sl, fp}
 8010e50:	2000deac 	andcs	sp, r0, ip, lsr #29
 8010e54:	2000d424 	andcs	sp, r0, r4, lsr #8
 8010e58:	4000480c 	andmi	r4, r0, ip, lsl #16
 8010e5c:	4001140c 	andmi	r1, r1, ip, lsl #8
 8010e60:	40004800 	andmi	r4, r0, r0, lsl #16

08010e64 <Dmx::GetTotalStatistics(unsigned long)>:
 8010e64:	4b06      	ldr	r3, [pc, #24]	@ (8010e80 <Dmx::GetTotalStatistics(unsigned long)+0x1c>)
 8010e66:	4807      	ldr	r0, [pc, #28]	@ (8010e84 <Dmx::GetTotalStatistics(unsigned long)+0x20>)
 8010e68:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010e6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010e70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010e74:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	6043      	str	r3, [r0, #4]
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	2000de5c 	andcs	sp, r0, ip, asr lr
 8010e84:	2000de74 	andcs	sp, r0, r4, ror lr

08010e88 <Dmx::StartDmxOutput(unsigned long)>:
 8010e88:	b538      	push	{r3, r4, r5, lr}
 8010e8a:	b339      	cbz	r1, 8010edc <Dmx::StartDmxOutput(unsigned long)+0x54>
 8010e8c:	2901      	cmp	r1, #1
 8010e8e:	d124      	bne.n	8010eda <Dmx::StartDmxOutput(unsigned long)+0x52>
 8010e90:	4c25      	ldr	r4, [pc, #148]	@ (8010f28 <Dmx::StartDmxOutput(unsigned long)+0xa0>)
 8010e92:	2106      	movs	r1, #6
 8010e94:	4620      	mov	r0, r4
 8010e96:	f00a f94d 	bl	801b134 <usart_flag_get>
 8010e9a:	2801      	cmp	r0, #1
 8010e9c:	d1f9      	bne.n	8010e92 <Dmx::StartDmxOutput(unsigned long)+0xa>
 8010e9e:	4b23      	ldr	r3, [pc, #140]	@ (8010f2c <Dmx::StartDmxOutput(unsigned long)+0xa4>)
 8010ea0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8010ea4:	f8d3 180c 	ldr.w	r1, [r3, #2060]	@ 0x80c
 8010ea8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8010eac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010eb0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8010eb4:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8010eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8010f30 <Dmx::StartDmxOutput(unsigned long)+0xa8>)
 8010eba:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8010ebe:	2540      	movs	r5, #64	@ 0x40
 8010ec0:	f8c3 180c 	str.w	r1, [r3, #2060]	@ 0x80c
 8010ec4:	f8c3 5828 	str.w	r5, [r3, #2088]	@ 0x828
 8010ec8:	f8d4 3c24 	ldr.w	r3, [r4, #3108]	@ 0xc24
 8010ecc:	6811      	ldr	r1, [r2, #0]
 8010ece:	4a19      	ldr	r2, [pc, #100]	@ (8010f34 <Dmx::StartDmxOutput(unsigned long)+0xac>)
 8010ed0:	440b      	add	r3, r1
 8010ed2:	f8c4 3c38 	str.w	r3, [r4, #3128]	@ 0xc38
 8010ed6:	f8c2 0424 	str.w	r0, [r2, #1060]	@ 0x424
 8010eda:	bd38      	pop	{r3, r4, r5, pc}
 8010edc:	4c16      	ldr	r4, [pc, #88]	@ (8010f38 <Dmx::StartDmxOutput(unsigned long)+0xb0>)
 8010ede:	2106      	movs	r1, #6
 8010ee0:	4620      	mov	r0, r4
 8010ee2:	f00a f927 	bl	801b134 <usart_flag_get>
 8010ee6:	2801      	cmp	r0, #1
 8010ee8:	d1f9      	bne.n	8010ede <Dmx::StartDmxOutput(unsigned long)+0x56>
 8010eea:	4b10      	ldr	r3, [pc, #64]	@ (8010f2c <Dmx::StartDmxOutput(unsigned long)+0xa4>)
 8010eec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8010ef0:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 8010ef4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8010ef8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8010efc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
 8010f00:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8010f04:	4a0a      	ldr	r2, [pc, #40]	@ (8010f30 <Dmx::StartDmxOutput(unsigned long)+0xa8>)
 8010f06:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8010f0a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8010f0e:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 8010f12:	f8c3 5428 	str.w	r5, [r3, #1064]	@ 0x428
 8010f16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010f18:	6811      	ldr	r1, [r2, #0]
 8010f1a:	4a06      	ldr	r2, [pc, #24]	@ (8010f34 <Dmx::StartDmxOutput(unsigned long)+0xac>)
 8010f1c:	440b      	add	r3, r1
 8010f1e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010f20:	f8c2 0210 	str.w	r0, [r2, #528]	@ 0x210
 8010f24:	bd38      	pop	{r3, r4, r5, pc}
 8010f26:	bf00      	nop
 8010f28:	40011400 	andmi	r1, r1, r0, lsl #8
 8010f2c:	40020000 	andmi	r0, r2, r0
 8010f30:	2000d418 	andcs	sp, r0, r8, lsl r4
 8010f34:	2001c000 	andcs	ip, r1, r0
 8010f38:	40004800 	andmi	r4, r0, r0, lsl #16

08010f3c <Dmx::SetDmxBreakTime(unsigned long)>:
 8010f3c:	4a15      	ldr	r2, [pc, #84]	@ (8010f94 <Dmx::SetDmxBreakTime(unsigned long)+0x58>)
 8010f3e:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 8010f42:	f8d2 2418 	ldr.w	r2, [r2, #1048]	@ 0x418
 8010f46:	b410      	push	{r4}
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	4c13      	ldr	r4, [pc, #76]	@ (8010f98 <Dmx::SetDmxBreakTime(unsigned long)+0x5c>)
 8010f4c:	bf38      	it	cc
 8010f4e:	4613      	movcc	r3, r2
 8010f50:	469c      	mov	ip, r3
 8010f52:	295c      	cmp	r1, #92	@ 0x5c
 8010f54:	6863      	ldr	r3, [r4, #4]
 8010f56:	6842      	ldr	r2, [r0, #4]
 8010f58:	bf38      	it	cc
 8010f5a:	215c      	movcc	r1, #92	@ 0x5c
 8010f5c:	440b      	add	r3, r1
 8010f5e:	6021      	str	r1, [r4, #0]
 8010f60:	212c      	movs	r1, #44	@ 0x2c
 8010f62:	fb01 330c 	mla	r3, r1, ip, r3
 8010f66:	b16a      	cbz	r2, 8010f84 <Dmx::SetDmxBreakTime(unsigned long)+0x48>
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d205      	bcs.n	8010f78 <Dmx::SetDmxBreakTime(unsigned long)+0x3c>
 8010f6c:	185a      	adds	r2, r3, r1
 8010f6e:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 8010f72:	428a      	cmp	r2, r1
 8010f74:	bf38      	it	cc
 8010f76:	460a      	movcc	r2, r1
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	60a3      	str	r3, [r4, #8]
 8010f7c:	6002      	str	r2, [r0, #0]
 8010f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f82:	4770      	bx	lr
 8010f84:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010f88:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 8010f8c:	428a      	cmp	r2, r1
 8010f8e:	bf38      	it	cc
 8010f90:	460a      	movcc	r2, r1
 8010f92:	e7f1      	b.n	8010f78 <Dmx::SetDmxBreakTime(unsigned long)+0x3c>
 8010f94:	2001c000 	andcs	ip, r1, r0
 8010f98:	2000d418 	andcs	sp, r0, r8, lsl r4

08010f9c <Dmx::GetDmxBreakTime() const>:
 8010f9c:	4b01      	ldr	r3, [pc, #4]	@ (8010fa4 <Dmx::GetDmxBreakTime() const+0x8>)
 8010f9e:	6818      	ldr	r0, [r3, #0]
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop
 8010fa4:	2000d418 	andcs	sp, r0, r8, lsl r4

08010fa8 <Dmx::SetDmxMabTime(unsigned long)>:
 8010fa8:	4a15      	ldr	r2, [pc, #84]	@ (8011000 <Dmx::SetDmxMabTime(unsigned long)+0x58>)
 8010faa:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 8010fae:	f8d2 2418 	ldr.w	r2, [r2, #1048]	@ 0x418
 8010fb2:	b410      	push	{r4}
 8010fb4:	4293      	cmp	r3, r2
 8010fb6:	4c13      	ldr	r4, [pc, #76]	@ (8011004 <Dmx::SetDmxMabTime(unsigned long)+0x5c>)
 8010fb8:	bf38      	it	cc
 8010fba:	4613      	movcc	r3, r2
 8010fbc:	469c      	mov	ip, r3
 8010fbe:	290c      	cmp	r1, #12
 8010fc0:	6823      	ldr	r3, [r4, #0]
 8010fc2:	6842      	ldr	r2, [r0, #4]
 8010fc4:	bf38      	it	cc
 8010fc6:	210c      	movcc	r1, #12
 8010fc8:	440b      	add	r3, r1
 8010fca:	6061      	str	r1, [r4, #4]
 8010fcc:	212c      	movs	r1, #44	@ 0x2c
 8010fce:	fb01 330c 	mla	r3, r1, ip, r3
 8010fd2:	b16a      	cbz	r2, 8010ff0 <Dmx::SetDmxMabTime(unsigned long)+0x48>
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d205      	bcs.n	8010fe4 <Dmx::SetDmxMabTime(unsigned long)+0x3c>
 8010fd8:	185a      	adds	r2, r3, r1
 8010fda:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 8010fde:	428a      	cmp	r2, r1
 8010fe0:	bf38      	it	cc
 8010fe2:	460a      	movcc	r2, r1
 8010fe4:	1ad3      	subs	r3, r2, r3
 8010fe6:	60a3      	str	r3, [r4, #8]
 8010fe8:	6002      	str	r2, [r0, #0]
 8010fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fee:	4770      	bx	lr
 8010ff0:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010ff4:	f240 41b4 	movw	r1, #1204	@ 0x4b4
 8010ff8:	428a      	cmp	r2, r1
 8010ffa:	bf38      	it	cc
 8010ffc:	460a      	movcc	r2, r1
 8010ffe:	e7f1      	b.n	8010fe4 <Dmx::SetDmxMabTime(unsigned long)+0x3c>
 8011000:	2001c000 	andcs	ip, r1, r0
 8011004:	2000d418 	andcs	sp, r0, r8, lsl r4

08011008 <Dmx::GetDmxMabTime() const>:
 8011008:	4b01      	ldr	r3, [pc, #4]	@ (8011010 <Dmx::GetDmxMabTime() const+0x8>)
 801100a:	6858      	ldr	r0, [r3, #4]
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop
 8011010:	2000d418 	andcs	sp, r0, r8, lsl r4

08011014 <Dmx::SetDmxPeriodTime(unsigned long)>:
 8011014:	4a15      	ldr	r2, [pc, #84]	@ (801106c <Dmx::SetDmxPeriodTime(unsigned long)+0x58>)
 8011016:	6041      	str	r1, [r0, #4]
 8011018:	f8d2 3204 	ldr.w	r3, [r2, #516]	@ 0x204
 801101c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	@ 0x418
 8011020:	4293      	cmp	r3, r2
 8011022:	bf38      	it	cc
 8011024:	4613      	movcc	r3, r2
 8011026:	4a12      	ldr	r2, [pc, #72]	@ (8011070 <Dmx::SetDmxPeriodTime(unsigned long)+0x5c>)
 8011028:	b510      	push	{r4, lr}
 801102a:	469c      	mov	ip, r3
 801102c:	e9d2 3400 	ldrd	r3, r4, [r2]
 8011030:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 8011034:	4423      	add	r3, r4
 8011036:	fb0e 330c 	mla	r3, lr, ip, r3
 801103a:	b161      	cbz	r1, 8011056 <Dmx::SetDmxPeriodTime(unsigned long)+0x42>
 801103c:	4299      	cmp	r1, r3
 801103e:	d206      	bcs.n	801104e <Dmx::SetDmxPeriodTime(unsigned long)+0x3a>
 8011040:	eb03 010e 	add.w	r1, r3, lr
 8011044:	f240 4cb4 	movw	ip, #1204	@ 0x4b4
 8011048:	4561      	cmp	r1, ip
 801104a:	bf38      	it	cc
 801104c:	4661      	movcc	r1, ip
 801104e:	1acb      	subs	r3, r1, r3
 8011050:	6001      	str	r1, [r0, #0]
 8011052:	6093      	str	r3, [r2, #8]
 8011054:	bd10      	pop	{r4, pc}
 8011056:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 801105a:	f240 4cb4 	movw	ip, #1204	@ 0x4b4
 801105e:	4561      	cmp	r1, ip
 8011060:	bf38      	it	cc
 8011062:	4661      	movcc	r1, ip
 8011064:	1acb      	subs	r3, r1, r3
 8011066:	6001      	str	r1, [r0, #0]
 8011068:	6093      	str	r3, [r2, #8]
 801106a:	bd10      	pop	{r4, pc}
 801106c:	2001c000 	andcs	ip, r1, r0
 8011070:	2000d418 	andcs	sp, r0, r8, lsl r4

08011074 <Dmx::SetDmxSlots(unsigned short)>:
 8011074:	1e8b      	subs	r3, r1, #2
 8011076:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 801107a:	d829      	bhi.n	80110d0 <Dmx::SetDmxSlots(unsigned short)+0x5c>
 801107c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8011080:	428a      	cmp	r2, r1
 8011082:	bf28      	it	cs
 8011084:	460a      	movcs	r2, r1
 8011086:	428b      	cmp	r3, r1
 8011088:	bf28      	it	cs
 801108a:	460b      	movcs	r3, r1
 801108c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011090:	b430      	push	{r4, r5}
 8011092:	4d12      	ldr	r5, [pc, #72]	@ (80110dc <Dmx::SetDmxSlots(unsigned short)+0x68>)
 8011094:	6101      	str	r1, [r0, #16]
 8011096:	f8d5 4204 	ldr.w	r4, [r5, #516]	@ 0x204
 801109a:	f8d5 5418 	ldr.w	r5, [r5, #1048]	@ 0x418
 801109e:	4910      	ldr	r1, [pc, #64]	@ (80110e0 <Dmx::SetDmxSlots(unsigned short)+0x6c>)
 80110a0:	6842      	ldr	r2, [r0, #4]
 80110a2:	680b      	ldr	r3, [r1, #0]
 80110a4:	42ac      	cmp	r4, r5
 80110a6:	bf38      	it	cc
 80110a8:	462c      	movcc	r4, r5
 80110aa:	46a4      	mov	ip, r4
 80110ac:	684c      	ldr	r4, [r1, #4]
 80110ae:	4423      	add	r3, r4
 80110b0:	242c      	movs	r4, #44	@ 0x2c
 80110b2:	fb04 330c 	mla	r3, r4, ip, r3
 80110b6:	b962      	cbnz	r2, 80110d2 <Dmx::SetDmxSlots(unsigned short)+0x5e>
 80110b8:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80110bc:	f240 44b4 	movw	r4, #1204	@ 0x4b4
 80110c0:	42a2      	cmp	r2, r4
 80110c2:	bf38      	it	cc
 80110c4:	4622      	movcc	r2, r4
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	bc30      	pop	{r4, r5}
 80110ca:	6002      	str	r2, [r0, #0]
 80110cc:	608b      	str	r3, [r1, #8]
 80110ce:	4770      	bx	lr
 80110d0:	4770      	bx	lr
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d2f7      	bcs.n	80110c6 <Dmx::SetDmxSlots(unsigned short)+0x52>
 80110d6:	191a      	adds	r2, r3, r4
 80110d8:	e7f0      	b.n	80110bc <Dmx::SetDmxSlots(unsigned short)+0x48>
 80110da:	bf00      	nop
 80110dc:	2001c000 	andcs	ip, r1, r0
 80110e0:	2000d418 	andcs	sp, r0, r8, lsl r4

080110e4 <Dmx::GetOutputStyle(unsigned long) const>:
 80110e4:	4b03      	ldr	r3, [pc, #12]	@ (80110f4 <Dmx::GetOutputStyle(unsigned long) const+0x10>)
 80110e6:	f44f 7205 	mov.w	r2, #532	@ 0x214
 80110ea:	fb02 3301 	mla	r3, r2, r1, r3
 80110ee:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 80110f2:	4770      	bx	lr
 80110f4:	2001c000 	andcs	ip, r1, r0

080110f8 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)>:
 80110f8:	f44f 7c05 	mov.w	ip, #532	@ 0x214
 80110fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fe:	fb0c fc01 	mul.w	ip, ip, r1
 8011102:	460c      	mov	r4, r1
 8011104:	4611      	mov	r1, r2
 8011106:	6902      	ldr	r2, [r0, #16]
 8011108:	4f21      	ldr	r7, [pc, #132]	@ (8011190 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x98>)
 801110a:	4293      	cmp	r3, r2
 801110c:	bf28      	it	cs
 801110e:	4613      	movcs	r3, r2
 8011110:	1c5a      	adds	r2, r3, #1
 8011112:	461d      	mov	r5, r3
 8011114:	eb07 030c 	add.w	r3, r7, ip
 8011118:	4606      	mov	r6, r0
 801111a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 801111e:	2201      	movs	r2, #1
 8011120:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 8011124:	1898      	adds	r0, r3, r2
 8011126:	2300      	movs	r3, #0
 8011128:	f807 300c 	strb.w	r3, [r7, ip]
 801112c:	b115      	cbz	r5, 8011134 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x3c>
 801112e:	462a      	mov	r2, r5
 8011130:	f00a fe81 	bl	801be36 <memmove>
 8011134:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011138:	68a3      	ldr	r3, [r4, #8]
 801113a:	42ab      	cmp	r3, r5
 801113c:	d100      	bne.n	8011140 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x48>
 801113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011140:	60a5      	str	r5, [r4, #8]
 8011142:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8011146:	f8d7 4418 	ldr.w	r4, [r7, #1048]	@ 0x418
 801114a:	4912      	ldr	r1, [pc, #72]	@ (8011194 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x9c>)
 801114c:	6872      	ldr	r2, [r6, #4]
 801114e:	680b      	ldr	r3, [r1, #0]
 8011150:	42a0      	cmp	r0, r4
 8011152:	bf38      	it	cc
 8011154:	4620      	movcc	r0, r4
 8011156:	684c      	ldr	r4, [r1, #4]
 8011158:	4423      	add	r3, r4
 801115a:	242c      	movs	r4, #44	@ 0x2c
 801115c:	fb04 3300 	mla	r3, r4, r0, r3
 8011160:	b15a      	cbz	r2, 801117a <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x82>
 8011162:	429a      	cmp	r2, r3
 8011164:	d205      	bcs.n	8011172 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x7a>
 8011166:	191a      	adds	r2, r3, r4
 8011168:	f240 40b4 	movw	r0, #1204	@ 0x4b4
 801116c:	4282      	cmp	r2, r0
 801116e:	bf38      	it	cc
 8011170:	4602      	movcc	r2, r0
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	6032      	str	r2, [r6, #0]
 8011176:	608b      	str	r3, [r1, #8]
 8011178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801117a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 801117e:	f240 40b4 	movw	r0, #1204	@ 0x4b4
 8011182:	4282      	cmp	r2, r0
 8011184:	bf38      	it	cc
 8011186:	4602      	movcc	r2, r0
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	6032      	str	r2, [r6, #0]
 801118c:	608b      	str	r3, [r1, #8]
 801118e:	e7f3      	b.n	8011178 <Dmx::SetSendDataWithoutSC(unsigned long, unsigned char const*, unsigned long)+0x80>
 8011190:	2001c000 	andcs	ip, r1, r0
 8011194:	2000d418 	andcs	sp, r0, r8, lsl r4

08011198 <Dmx::Blackout()>:
 8011198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801119c:	f100 0610 	add.w	r6, r0, #16
 80111a0:	4d29      	ldr	r5, [pc, #164]	@ (8011248 <Dmx::Blackout()+0xb0>)
 80111a2:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80111a6:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8011260 <Dmx::Blackout()+0xc8>
 80111aa:	4607      	mov	r7, r0
 80111ac:	2400      	movs	r4, #0
 80111ae:	f240 2901 	movw	r9, #513	@ 0x201
 80111b2:	b99b      	cbnz	r3, 80111dc <Dmx::Blackout()+0x44>
 80111b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80111b8:	b11b      	cbz	r3, 80111c2 <Dmx::Blackout()+0x2a>
 80111ba:	4621      	mov	r1, r4
 80111bc:	4638      	mov	r0, r7
 80111be:	f7ff fa7d 	bl	80106bc <Dmx::StopData(unsigned long) [clone .part.0]>
 80111c2:	f8c5 9204 	str.w	r9, [r5, #516]	@ 0x204
 80111c6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80111ca:	2100      	movs	r1, #0
 80111cc:	4628      	mov	r0, r5
 80111ce:	f00a fe49 	bl	801be64 <memset>
 80111d2:	6833      	ldr	r3, [r6, #0]
 80111d4:	b983      	cbnz	r3, 80111f8 <Dmx::Blackout()+0x60>
 80111d6:	2301      	movs	r3, #1
 80111d8:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 80111dc:	f505 7505 	add.w	r5, r5, #532	@ 0x214
 80111e0:	b944      	cbnz	r4, 80111f4 <Dmx::Blackout()+0x5c>
 80111e2:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80111e6:	2401      	movs	r4, #1
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0e3      	beq.n	80111b4 <Dmx::Blackout()+0x1c>
 80111ec:	f505 7505 	add.w	r5, r5, #532	@ 0x214
 80111f0:	2c00      	cmp	r4, #0
 80111f2:	d0f6      	beq.n	80111e2 <Dmx::Blackout()+0x4a>
 80111f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111f8:	4b14      	ldr	r3, [pc, #80]	@ (801124c <Dmx::Blackout()+0xb4>)
 80111fa:	4815      	ldr	r0, [pc, #84]	@ (8011250 <Dmx::Blackout()+0xb8>)
 80111fc:	4915      	ldr	r1, [pc, #84]	@ (8011254 <Dmx::Blackout()+0xbc>)
 80111fe:	f240 521c 	movw	r2, #1308	@ 0x51c
 8011202:	fb02 3304 	mla	r3, r2, r4, r3
 8011206:	4a14      	ldr	r2, [pc, #80]	@ (8011258 <Dmx::Blackout()+0xc0>)
 8011208:	2c01      	cmp	r4, #1
 801120a:	bf18      	it	ne
 801120c:	4611      	movne	r1, r2
 801120e:	4a13      	ldr	r2, [pc, #76]	@ (801125c <Dmx::Blackout()+0xc4>)
 8011210:	bf18      	it	ne
 8011212:	4602      	movne	r2, r0
 8011214:	2000      	movs	r0, #0
 8011216:	f8c3 0518 	str.w	r0, [r3, #1304]	@ 0x518
 801121a:	f3bf 8f5f 	dmb	sy
 801121e:	6813      	ldr	r3, [r2, #0]
 8011220:	061b      	lsls	r3, r3, #24
 8011222:	d5fa      	bpl.n	801121a <Dmx::Blackout()+0x82>
 8011224:	6813      	ldr	r3, [r2, #0]
 8011226:	f023 0320 	bic.w	r3, r3, #32
 801122a:	6013      	str	r3, [r2, #0]
 801122c:	6813      	ldr	r3, [r2, #0]
 801122e:	f023 0310 	bic.w	r3, r3, #16
 8011232:	6013      	str	r3, [r2, #0]
 8011234:	680b      	ldr	r3, [r1, #0]
 8011236:	f043 0320 	orr.w	r3, r3, #32
 801123a:	600b      	str	r3, [r1, #0]
 801123c:	680b      	ldr	r3, [r1, #0]
 801123e:	f043 0310 	orr.w	r3, r3, #16
 8011242:	600b      	str	r3, [r1, #0]
 8011244:	2302      	movs	r3, #2
 8011246:	e7c7      	b.n	80111d8 <Dmx::Blackout()+0x40>
 8011248:	2001c000 	andcs	ip, r1, r0
 801124c:	2000d424 	andcs	sp, r0, r4, lsr #8
 8011250:	40004800 	andmi	r4, r0, r0, lsl #16
 8011254:	4001140c 	andmi	r1, r1, ip, lsl #8
 8011258:	4000480c 	andmi	r4, r0, ip, lsl #16
 801125c:	40011400 	andmi	r1, r1, r0, lsl #8
 8011260:	2000deac 	andcs	sp, r0, ip, lsr #29

08011264 <Dmx::FullOn()>:
 8011264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011268:	f100 0610 	add.w	r6, r0, #16
 801126c:	4c2b      	ldr	r4, [pc, #172]	@ (801131c <Dmx::FullOn()+0xb8>)
 801126e:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8011272:	4607      	mov	r7, r0
 8011274:	2500      	movs	r5, #0
 8011276:	b143      	cbz	r3, 801128a <Dmx::FullOn()+0x26>
 8011278:	f504 7405 	add.w	r4, r4, #532	@ 0x214
 801127c:	2d00      	cmp	r5, #0
 801127e:	d148      	bne.n	8011312 <Dmx::FullOn()+0xae>
 8011280:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8011284:	2501      	movs	r5, #1
 8011286:	2b00      	cmp	r3, #0
 8011288:	d1f6      	bne.n	8011278 <Dmx::FullOn()+0x14>
 801128a:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8011330 <Dmx::FullOn()+0xcc>
 801128e:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
 8011292:	b11b      	cbz	r3, 801129c <Dmx::FullOn()+0x38>
 8011294:	4629      	mov	r1, r5
 8011296:	4638      	mov	r0, r7
 8011298:	f7ff fa10 	bl	80106bc <Dmx::StopData(unsigned long) [clone .part.0]>
 801129c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80112a0:	21ff      	movs	r1, #255	@ 0xff
 80112a2:	4620      	mov	r0, r4
 80112a4:	f00a fdde 	bl	801be64 <memset>
 80112a8:	f240 2201 	movw	r2, #513	@ 0x201
 80112ac:	2300      	movs	r3, #0
 80112ae:	7023      	strb	r3, [r4, #0]
 80112b0:	f8c4 2204 	str.w	r2, [r4, #516]	@ 0x204
 80112b4:	6832      	ldr	r2, [r6, #0]
 80112b6:	b372      	cbz	r2, 8011316 <Dmx::FullOn()+0xb2>
 80112b8:	4a19      	ldr	r2, [pc, #100]	@ (8011320 <Dmx::FullOn()+0xbc>)
 80112ba:	f240 511c 	movw	r1, #1308	@ 0x51c
 80112be:	fb01 2205 	mla	r2, r1, r5, r2
 80112c2:	2d01      	cmp	r5, #1
 80112c4:	f8c2 3518 	str.w	r3, [r2, #1304]	@ 0x518
 80112c8:	4b16      	ldr	r3, [pc, #88]	@ (8011324 <Dmx::FullOn()+0xc0>)
 80112ca:	4917      	ldr	r1, [pc, #92]	@ (8011328 <Dmx::FullOn()+0xc4>)
 80112cc:	4a17      	ldr	r2, [pc, #92]	@ (801132c <Dmx::FullOn()+0xc8>)
 80112ce:	bf18      	it	ne
 80112d0:	4619      	movne	r1, r3
 80112d2:	f1a3 030c 	sub.w	r3, r3, #12
 80112d6:	bf18      	it	ne
 80112d8:	461a      	movne	r2, r3
 80112da:	f3bf 8f5f 	dmb	sy
 80112de:	6813      	ldr	r3, [r2, #0]
 80112e0:	061b      	lsls	r3, r3, #24
 80112e2:	d5fa      	bpl.n	80112da <Dmx::FullOn()+0x76>
 80112e4:	6813      	ldr	r3, [r2, #0]
 80112e6:	f023 0320 	bic.w	r3, r3, #32
 80112ea:	6013      	str	r3, [r2, #0]
 80112ec:	6813      	ldr	r3, [r2, #0]
 80112ee:	f023 0310 	bic.w	r3, r3, #16
 80112f2:	6013      	str	r3, [r2, #0]
 80112f4:	680b      	ldr	r3, [r1, #0]
 80112f6:	f043 0320 	orr.w	r3, r3, #32
 80112fa:	600b      	str	r3, [r1, #0]
 80112fc:	680b      	ldr	r3, [r1, #0]
 80112fe:	f043 0310 	orr.w	r3, r3, #16
 8011302:	600b      	str	r3, [r1, #0]
 8011304:	2302      	movs	r3, #2
 8011306:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
 801130a:	f504 7405 	add.w	r4, r4, #532	@ 0x214
 801130e:	2d00      	cmp	r5, #0
 8011310:	d0b6      	beq.n	8011280 <Dmx::FullOn()+0x1c>
 8011312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011316:	2301      	movs	r3, #1
 8011318:	e7f5      	b.n	8011306 <Dmx::FullOn()+0xa2>
 801131a:	bf00      	nop
 801131c:	2001c000 	andcs	ip, r1, r0
 8011320:	2000d424 	andcs	sp, r0, r4, lsr #8
 8011324:	4000480c 	andmi	r4, r0, ip, lsl #16
 8011328:	4001140c 	andmi	r1, r1, ip, lsl #8
 801132c:	40011400 	andmi	r1, r1, r0, lsl #8
 8011330:	2000deac 	andcs	sp, r0, ip, lsr #29

08011334 <Dmx::StartOutput(unsigned long)>:
 8011334:	4a0a      	ldr	r2, [pc, #40]	@ (8011360 <Dmx::StartOutput(unsigned long)+0x2c>)
 8011336:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801133a:	2a01      	cmp	r2, #1
 801133c:	d000      	beq.n	8011340 <Dmx::StartOutput(unsigned long)+0xc>
 801133e:	4770      	bx	lr
 8011340:	4a08      	ldr	r2, [pc, #32]	@ (8011364 <Dmx::StartOutput(unsigned long)+0x30>)
 8011342:	f44f 7c05 	mov.w	ip, #532	@ 0x214
 8011346:	fb0c 2301 	mla	r3, ip, r1, r2
 801134a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 801134e:	2a00      	cmp	r2, #0
 8011350:	d1f5      	bne.n	801133e <Dmx::StartOutput(unsigned long)+0xa>
 8011352:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1f1      	bne.n	801133e <Dmx::StartOutput(unsigned long)+0xa>
 801135a:	f7ff bd95 	b.w	8010e88 <Dmx::StartDmxOutput(unsigned long)>
 801135e:	bf00      	nop
 8011360:	2000deac 	andcs	sp, r0, ip, lsr #29
 8011364:	2001c000 	andcs	ip, r1, r0

08011368 <Dmx::Sync()>:
 8011368:	b538      	push	{r3, r4, r5, lr}
 801136a:	4c17      	ldr	r4, [pc, #92]	@ (80113c8 <Dmx::Sync()+0x60>)
 801136c:	f894 3208 	ldrb.w	r3, [r4, #520]	@ 0x208
 8011370:	4605      	mov	r5, r0
 8011372:	b133      	cbz	r3, 8011382 <Dmx::Sync()+0x1a>
 8011374:	4b15      	ldr	r3, [pc, #84]	@ (80113cc <Dmx::Sync()+0x64>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2200      	movs	r2, #0
 801137a:	2b01      	cmp	r3, #1
 801137c:	f884 2208 	strb.w	r2, [r4, #520]	@ 0x208
 8011380:	d017      	beq.n	80113b2 <Dmx::Sync()+0x4a>
 8011382:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 8011386:	b133      	cbz	r3, 8011396 <Dmx::Sync()+0x2e>
 8011388:	4a10      	ldr	r2, [pc, #64]	@ (80113cc <Dmx::Sync()+0x64>)
 801138a:	6851      	ldr	r1, [r2, #4]
 801138c:	2300      	movs	r3, #0
 801138e:	2901      	cmp	r1, #1
 8011390:	f884 341c 	strb.w	r3, [r4, #1052]	@ 0x41c
 8011394:	d000      	beq.n	8011398 <Dmx::Sync()+0x30>
 8011396:	bd38      	pop	{r3, r4, r5, pc}
 8011398:	f8d4 3420 	ldr.w	r3, [r4, #1056]	@ 0x420
 801139c:	2b00      	cmp	r3, #0
 801139e:	d1fa      	bne.n	8011396 <Dmx::Sync()+0x2e>
 80113a0:	f8d4 3424 	ldr.w	r3, [r4, #1060]	@ 0x424
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d1f6      	bne.n	8011396 <Dmx::Sync()+0x2e>
 80113a8:	4628      	mov	r0, r5
 80113aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113ae:	f7ff bd6b 	b.w	8010e88 <Dmx::StartDmxOutput(unsigned long)>
 80113b2:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d1e3      	bne.n	8011382 <Dmx::Sync()+0x1a>
 80113ba:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
 80113be:	2900      	cmp	r1, #0
 80113c0:	d1df      	bne.n	8011382 <Dmx::Sync()+0x1a>
 80113c2:	f7ff fd61 	bl	8010e88 <Dmx::StartDmxOutput(unsigned long)>
 80113c6:	e7dc      	b.n	8011382 <Dmx::Sync()+0x1a>
 80113c8:	2001c000 	andcs	ip, r1, r0
 80113cc:	2000deac 	andcs	sp, r0, ip, lsr #29

080113d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>:
 80113d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113d2:	88c6      	ldrh	r6, [r0, #6]
 80113d4:	8885      	ldrh	r5, [r0, #4]
 80113d6:	42ae      	cmp	r6, r5
 80113d8:	d216      	bcs.n	8011408 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x38>
 80113da:	4604      	mov	r4, r0
 80113dc:	6800      	ldr	r0, [r0, #0]
 80113de:	1bad      	subs	r5, r5, r6
 80113e0:	4430      	add	r0, r6
 80113e2:	7a26      	ldrb	r6, [r4, #8]
 80113e4:	b923      	cbnz	r3, 80113f0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x20>
 80113e6:	b926      	cbnz	r6, 80113f2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x22>
 80113e8:	9200      	str	r2, [sp, #0]
 80113ea:	460b      	mov	r3, r1
 80113ec:	4a09      	ldr	r2, [pc, #36]	@ (8011414 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x44>)
 80113ee:	e003      	b.n	80113f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 80113f0:	b166      	cbz	r6, 801140c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x3c>
 80113f2:	9200      	str	r2, [sp, #0]
 80113f4:	4a08      	ldr	r2, [pc, #32]	@ (8011418 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x48>)
 80113f6:	460b      	mov	r3, r1
 80113f8:	4629      	mov	r1, r5
 80113fa:	f00b f83f 	bl	801c47c <snprintf>
 80113fe:	4285      	cmp	r5, r0
 8011400:	bfa2      	ittt	ge
 8011402:	88e3      	ldrhge	r3, [r4, #6]
 8011404:	181b      	addge	r3, r3, r0
 8011406:	80e3      	strhge	r3, [r4, #6]
 8011408:	b002      	add	sp, #8
 801140a:	bd70      	pop	{r4, r5, r6, pc}
 801140c:	9200      	str	r2, [sp, #0]
 801140e:	460b      	mov	r3, r1
 8011410:	4a02      	ldr	r2, [pc, #8]	@ (801141c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x4c>)
 8011412:	e7f1      	b.n	80113f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 8011414:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 8011418:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 801141c:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

08011420 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>:
 8011420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011422:	88c6      	ldrh	r6, [r0, #6]
 8011424:	8885      	ldrh	r5, [r0, #4]
 8011426:	42ae      	cmp	r6, r5
 8011428:	d216      	bcs.n	8011458 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x38>
 801142a:	4604      	mov	r4, r0
 801142c:	6800      	ldr	r0, [r0, #0]
 801142e:	1bad      	subs	r5, r5, r6
 8011430:	4430      	add	r0, r6
 8011432:	7a26      	ldrb	r6, [r4, #8]
 8011434:	b923      	cbnz	r3, 8011440 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x20>
 8011436:	b926      	cbnz	r6, 8011442 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x22>
 8011438:	9200      	str	r2, [sp, #0]
 801143a:	460b      	mov	r3, r1
 801143c:	4a09      	ldr	r2, [pc, #36]	@ (8011464 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x44>)
 801143e:	e003      	b.n	8011448 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 8011440:	b166      	cbz	r6, 801145c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x3c>
 8011442:	9200      	str	r2, [sp, #0]
 8011444:	4a08      	ldr	r2, [pc, #32]	@ (8011468 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x48>)
 8011446:	460b      	mov	r3, r1
 8011448:	4629      	mov	r1, r5
 801144a:	f00b f817 	bl	801c47c <snprintf>
 801144e:	4285      	cmp	r5, r0
 8011450:	bfa2      	ittt	ge
 8011452:	88e3      	ldrhge	r3, [r4, #6]
 8011454:	181b      	addge	r3, r3, r0
 8011456:	80e3      	strhge	r3, [r4, #6]
 8011458:	b002      	add	sp, #8
 801145a:	bd70      	pop	{r4, r5, r6, pc}
 801145c:	9200      	str	r2, [sp, #0]
 801145e:	460b      	mov	r3, r1
 8011460:	4a02      	ldr	r2, [pc, #8]	@ (801146c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x4c>)
 8011462:	e7f1      	b.n	8011448 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]+0x28>
 8011464:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 8011468:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 801146c:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

08011470 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>:
 8011470:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011472:	88c6      	ldrh	r6, [r0, #6]
 8011474:	8885      	ldrh	r5, [r0, #4]
 8011476:	42ae      	cmp	r6, r5
 8011478:	d216      	bcs.n	80114a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x38>
 801147a:	4604      	mov	r4, r0
 801147c:	6800      	ldr	r0, [r0, #0]
 801147e:	1bad      	subs	r5, r5, r6
 8011480:	4430      	add	r0, r6
 8011482:	7a26      	ldrb	r6, [r4, #8]
 8011484:	b923      	cbnz	r3, 8011490 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x20>
 8011486:	b926      	cbnz	r6, 8011492 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x22>
 8011488:	9200      	str	r2, [sp, #0]
 801148a:	460b      	mov	r3, r1
 801148c:	4a09      	ldr	r2, [pc, #36]	@ (80114b4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x44>)
 801148e:	e003      	b.n	8011498 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 8011490:	b166      	cbz	r6, 80114ac <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x3c>
 8011492:	9200      	str	r2, [sp, #0]
 8011494:	4a08      	ldr	r2, [pc, #32]	@ (80114b8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x48>)
 8011496:	460b      	mov	r3, r1
 8011498:	4629      	mov	r1, r5
 801149a:	f00a ffef 	bl	801c47c <snprintf>
 801149e:	4285      	cmp	r5, r0
 80114a0:	bfa2      	ittt	ge
 80114a2:	88e3      	ldrhge	r3, [r4, #6]
 80114a4:	181b      	addge	r3, r3, r0
 80114a6:	80e3      	strhge	r3, [r4, #6]
 80114a8:	b002      	add	sp, #8
 80114aa:	bd70      	pop	{r4, r5, r6, pc}
 80114ac:	9200      	str	r2, [sp, #0]
 80114ae:	460b      	mov	r3, r1
 80114b0:	4a02      	ldr	r2, [pc, #8]	@ (80114bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x4c>)
 80114b2:	e7f1      	b.n	8011498 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]+0x28>
 80114b4:	0801d221 	stmdaeq	r1, {r0, r5, r9, ip, lr, pc}
 80114b8:	0801d216 	stmdaeq	r1, {r1, r2, r4, r9, ip, lr, pc}
 80114bc:	0801d222 	stmdaeq	r1, {r1, r5, r9, ip, lr, pc}

080114c0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>:
 80114c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114c4:	8885      	ldrh	r5, [r0, #4]
 80114c6:	4698      	mov	r8, r3
 80114c8:	88c3      	ldrh	r3, [r0, #6]
 80114ca:	42ab      	cmp	r3, r5
 80114cc:	4604      	mov	r4, r0
 80114ce:	d229      	bcs.n	8011524 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x64>
 80114d0:	6826      	ldr	r6, [r4, #0]
 80114d2:	f894 a008 	ldrb.w	sl, [r4, #8]
 80114d6:	4691      	mov	r9, r2
 80114d8:	ee10 0a10 	vmov	r0, s0
 80114dc:	460f      	mov	r7, r1
 80114de:	441e      	add	r6, r3
 80114e0:	1aed      	subs	r5, r5, r3
 80114e2:	f7f7 feab 	bl	800923c <__aeabi_f2d>
 80114e6:	f1b9 0f00 	cmp.w	r9, #0
 80114ea:	d109      	bne.n	8011500 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x40>
 80114ec:	f1ba 0f00 	cmp.w	sl, #0
 80114f0:	d109      	bne.n	8011506 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x46>
 80114f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114f6:	4a10      	ldr	r2, [pc, #64]	@ (8011538 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x78>)
 80114f8:	f8cd 8000 	str.w	r8, [sp]
 80114fc:	463b      	mov	r3, r7
 80114fe:	e008      	b.n	8011512 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x52>
 8011500:	f1ba 0f00 	cmp.w	sl, #0
 8011504:	d011      	beq.n	801152a <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x6a>
 8011506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801150a:	4a0c      	ldr	r2, [pc, #48]	@ (801153c <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x7c>)
 801150c:	f8cd 8000 	str.w	r8, [sp]
 8011510:	463b      	mov	r3, r7
 8011512:	4629      	mov	r1, r5
 8011514:	4630      	mov	r0, r6
 8011516:	f00a ffb1 	bl	801c47c <snprintf>
 801151a:	4285      	cmp	r5, r0
 801151c:	bfa2      	ittt	ge
 801151e:	88e3      	ldrhge	r3, [r4, #6]
 8011520:	181b      	addge	r3, r3, r0
 8011522:	80e3      	strhge	r3, [r4, #6]
 8011524:	b004      	add	sp, #16
 8011526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801152a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801152e:	4a04      	ldr	r2, [pc, #16]	@ (8011540 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x80>)
 8011530:	f8cd 8000 	str.w	r8, [sp]
 8011534:	463b      	mov	r3, r7
 8011536:	e7ec      	b.n	8011512 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]+0x52>
 8011538:	0801d82d 	stmdaeq	r1, {r0, r2, r3, r5, fp, ip, lr, pc}
 801153c:	0801d822 	stmdaeq	r1, {r1, r5, fp, ip, lr, pc}
 8011540:	0801d82e 	stmdaeq	r1, {r1, r2, r3, r5, fp, ip, lr, pc}

08011544 <pixel::pixel_convert_TxH(unsigned char)>:
 8011544:	28f0      	cmp	r0, #240	@ 0xf0
 8011546:	d017      	beq.n	8011578 <pixel::pixel_convert_TxH(unsigned char)+0x34>
 8011548:	d80c      	bhi.n	8011564 <pixel::pixel_convert_TxH(unsigned char)+0x20>
 801154a:	28c0      	cmp	r0, #192	@ 0xc0
 801154c:	d017      	beq.n	801157e <pixel::pixel_convert_TxH(unsigned char)+0x3a>
 801154e:	28e0      	cmp	r0, #224	@ 0xe0
 8011550:	d018      	beq.n	8011584 <pixel::pixel_convert_TxH(unsigned char)+0x40>
 8011552:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8011598 <pixel::pixel_convert_TxH(unsigned char)+0x54>
 8011556:	2880      	cmp	r0, #128	@ 0x80
 8011558:	eef4 7a04 	vmov.f32	s15, #68	@ 0x3e200000  0.1562500
 801155c:	bf08      	it	eq
 801155e:	eeb0 0a67 	vmoveq.f32	s0, s15
 8011562:	4770      	bx	lr
 8011564:	28fc      	cmp	r0, #252	@ 0xfc
 8011566:	d010      	beq.n	801158a <pixel::pixel_convert_TxH(unsigned char)+0x46>
 8011568:	28fe      	cmp	r0, #254	@ 0xfe
 801156a:	d011      	beq.n	8011590 <pixel::pixel_convert_TxH(unsigned char)+0x4c>
 801156c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8011598 <pixel::pixel_convert_TxH(unsigned char)+0x54>
 8011570:	28f8      	cmp	r0, #248	@ 0xf8
 8011572:	eef6 7a09 	vmov.f32	s15, #105	@ 0x3f480000  0.7812500
 8011576:	e7f1      	b.n	801155c <pixel::pixel_convert_TxH(unsigned char)+0x18>
 8011578:	eeb6 0a04 	vmov.f32	s0, #100	@ 0x3f200000  0.625
 801157c:	4770      	bx	lr
 801157e:	eeb5 0a04 	vmov.f32	s0, #84	@ 0x3ea00000  0.3125000
 8011582:	4770      	bx	lr
 8011584:	eeb5 0a0e 	vmov.f32	s0, #94	@ 0x3ef00000  0.4687500
 8011588:	4770      	bx	lr
 801158a:	eeb6 0a0e 	vmov.f32	s0, #110	@ 0x3f700000  0.9375000
 801158e:	4770      	bx	lr
 8011590:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801159c <pixel::pixel_convert_TxH(unsigned char)+0x58>
 8011594:	4770      	bx	lr
 8011596:	bf00      	nop
 8011598:	00000000 	andeq	r0, r0, r0
 801159c:	3f8c0000 	svccc	0x008c0000

080115a0 <pixel::pixel_convert_TxH(float)>:
 80115a0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8011634 <pixel::pixel_convert_TxH(float)+0x94>
 80115a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80115a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ac:	d433      	bmi.n	8011616 <pixel::pixel_convert_TxH(float)+0x76>
 80115ae:	eef4 7a0e 	vmov.f32	s15, #78	@ 0x3e700000  0.2343750
 80115b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80115b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ba:	d42e      	bmi.n	801161a <pixel::pixel_convert_TxH(float)+0x7a>
 80115bc:	eef5 7a09 	vmov.f32	s15, #89	@ 0x3ec80000  0.3906250
 80115c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80115c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c8:	d429      	bmi.n	801161e <pixel::pixel_convert_TxH(float)+0x7e>
 80115ca:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8011638 <pixel::pixel_convert_TxH(float)+0x98>
 80115ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80115d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d6:	d424      	bmi.n	8011622 <pixel::pixel_convert_TxH(float)+0x82>
 80115d8:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801163c <pixel::pixel_convert_TxH(float)+0x9c>
 80115dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80115e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e4:	d41f      	bmi.n	8011626 <pixel::pixel_convert_TxH(float)+0x86>
 80115e6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8011640 <pixel::pixel_convert_TxH(float)+0xa0>
 80115ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80115ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f2:	d41a      	bmi.n	801162a <pixel::pixel_convert_TxH(float)+0x8a>
 80115f4:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8011644 <pixel::pixel_convert_TxH(float)+0xa4>
 80115f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80115fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011600:	d415      	bmi.n	801162e <pixel::pixel_convert_TxH(float)+0x8e>
 8011602:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8011648 <pixel::pixel_convert_TxH(float)+0xa8>
 8011606:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160e:	bf4c      	ite	mi
 8011610:	20fe      	movmi	r0, #254	@ 0xfe
 8011612:	2000      	movpl	r0, #0
 8011614:	4770      	bx	lr
 8011616:	2000      	movs	r0, #0
 8011618:	4770      	bx	lr
 801161a:	2080      	movs	r0, #128	@ 0x80
 801161c:	4770      	bx	lr
 801161e:	20c0      	movs	r0, #192	@ 0xc0
 8011620:	4770      	bx	lr
 8011622:	20e0      	movs	r0, #224	@ 0xe0
 8011624:	4770      	bx	lr
 8011626:	20f0      	movs	r0, #240	@ 0xf0
 8011628:	4770      	bx	lr
 801162a:	20f8      	movs	r0, #248	@ 0xf8
 801162c:	4770      	bx	lr
 801162e:	20fc      	movs	r0, #252	@ 0xfc
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	3da00000 	stccc	0, cr0, [r0]
 8011638:	3f0c0000 	svccc	0x000c0000
 801163c:	3f340000 	svccc	0x00340000
 8011640:	3f5c0000 	svccc	0x005c0000
 8011644:	3f820000 	svccc	0x00820000
 8011648:	3f960000 	svccc	0x00960000

0801164c <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>:
 801164c:	b507      	push	{r0, r1, r2, lr}
 801164e:	2300      	movs	r3, #0
 8011650:	2101      	movs	r1, #1
 8011652:	e9cd 3100 	strd	r3, r1, [sp]
 8011656:	4602      	mov	r2, r0
 8011658:	4804      	ldr	r0, [pc, #16]	@ (801166c <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)+0x20>)
 801165a:	2326      	movs	r3, #38	@ 0x26
 801165c:	6800      	ldr	r0, [r0, #0]
 801165e:	2102      	movs	r1, #2
 8011660:	f007 f9ba 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 8011664:	b003      	add	sp, #12
 8011666:	f85d fb04 	ldr.w	pc, [sp], #4
 801166a:	bf00      	nop
 801166c:	2000e2dc 	ldrdcs	lr, [r0], -ip

08011670 <PixelDmxParams::PixelDmxParams()>:
 8011670:	2103      	movs	r1, #3
 8011672:	7101      	strb	r1, [r0, #4]
 8011674:	f06f 0155 	mvn.w	r1, #85	@ 0x55
 8011678:	7141      	strb	r1, [r0, #5]
 801167a:	2101      	movs	r1, #1
 801167c:	71c1      	strb	r1, [r0, #7]
 801167e:	73c1      	strb	r1, [r0, #15]
 8011680:	7441      	strb	r1, [r0, #17]
 8011682:	7581      	strb	r1, [r0, #22]
 8011684:	2105      	movs	r1, #5
 8011686:	b530      	push	{r4, r5, lr}
 8011688:	7601      	strb	r1, [r0, #24]
 801168a:	253d      	movs	r5, #61	@ 0x3d
 801168c:	210d      	movs	r1, #13
 801168e:	7305      	strb	r5, [r0, #12]
 8011690:	7701      	strb	r1, [r0, #28]
 8011692:	25ff      	movs	r5, #255	@ 0xff
 8011694:	2111      	movs	r1, #17
 8011696:	2200      	movs	r2, #0
 8011698:	2409      	movs	r4, #9
 801169a:	7385      	strb	r5, [r0, #14]
 801169c:	7781      	strb	r1, [r0, #30]
 801169e:	2506      	movs	r5, #6
 80116a0:	2115      	movs	r1, #21
 80116a2:	7002      	strb	r2, [r0, #0]
 80116a4:	7042      	strb	r2, [r0, #1]
 80116a6:	7082      	strb	r2, [r0, #2]
 80116a8:	70c2      	strb	r2, [r0, #3]
 80116aa:	7182      	strb	r2, [r0, #6]
 80116ac:	7202      	strb	r2, [r0, #8]
 80116ae:	7282      	strb	r2, [r0, #10]
 80116b0:	72c4      	strb	r4, [r0, #11]
 80116b2:	7342      	strb	r2, [r0, #13]
 80116b4:	7482      	strb	r2, [r0, #18]
 80116b6:	74c5      	strb	r5, [r0, #19]
 80116b8:	7502      	strb	r2, [r0, #20]
 80116ba:	7542      	strb	r2, [r0, #21]
 80116bc:	7242      	strb	r2, [r0, #9]
 80116be:	7402      	strb	r2, [r0, #16]
 80116c0:	75c2      	strb	r2, [r0, #23]
 80116c2:	7642      	strb	r2, [r0, #25]
 80116c4:	7684      	strb	r4, [r0, #26]
 80116c6:	76c2      	strb	r2, [r0, #27]
 80116c8:	7742      	strb	r2, [r0, #29]
 80116ca:	77c2      	strb	r2, [r0, #31]
 80116cc:	f880 1020 	strb.w	r1, [r0, #32]
 80116d0:	2119      	movs	r1, #25
 80116d2:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22
 80116d6:	211d      	movs	r1, #29
 80116d8:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
 80116dc:	f880 2023 	strb.w	r2, [r0, #35]	@ 0x23
 80116e0:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80116e4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 80116e8:	bd30      	pop	{r4, r5, pc}
	...

080116ec <PixelDmxParams::callbackFunction(char const*)>:
 80116ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f0:	4604      	mov	r4, r0
 80116f2:	b088      	sub	sp, #32
 80116f4:	460d      	mov	r5, r1
 80116f6:	b929      	cbnz	r1, 8011704 <PixelDmxParams::callbackFunction(char const*)+0x18>
 80116f8:	4b8d      	ldr	r3, [pc, #564]	@ (8011930 <PixelDmxParams::callbackFunction(char const*)+0x244>)
 80116fa:	4a8e      	ldr	r2, [pc, #568]	@ (8011934 <PixelDmxParams::callbackFunction(char const*)+0x248>)
 80116fc:	488e      	ldr	r0, [pc, #568]	@ (8011938 <PixelDmxParams::callbackFunction(char const*)+0x24c>)
 80116fe:	217a      	movs	r1, #122	@ 0x7a
 8011700:	f00a ff74 	bl	801c5ec <__assert_func>
 8011704:	2308      	movs	r3, #8
 8011706:	9302      	str	r3, [sp, #8]
 8011708:	498c      	ldr	r1, [pc, #560]	@ (801193c <PixelDmxParams::callbackFunction(char const*)+0x250>)
 801170a:	446b      	add	r3, sp
 801170c:	aa04      	add	r2, sp, #16
 801170e:	4628      	mov	r0, r5
 8011710:	f007 fc76 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 8011714:	b9a0      	cbnz	r0, 8011740 <PixelDmxParams::callbackFunction(char const*)+0x54>
 8011716:	9b02      	ldr	r3, [sp, #8]
 8011718:	3320      	adds	r3, #32
 801171a:	446b      	add	r3, sp
 801171c:	f803 0c10 	strb.w	r0, [r3, #-16]
 8011720:	a804      	add	r0, sp, #16
 8011722:	f001 fc81 	bl	8013028 <pixel::pixel_get_type(char const*)>
 8011726:	6823      	ldr	r3, [r4, #0]
 8011728:	280e      	cmp	r0, #14
 801172a:	bf0d      	iteet	eq
 801172c:	2203      	moveq	r2, #3
 801172e:	7120      	strbne	r0, [r4, #4]
 8011730:	f043 0301 	orrne.w	r3, r3, #1
 8011734:	7122      	strbeq	r2, [r4, #4]
 8011736:	bf08      	it	eq
 8011738:	f023 0301 	biceq.w	r3, r3, #1
 801173c:	6023      	str	r3, [r4, #0]
 801173e:	e033      	b.n	80117a8 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 8011740:	497f      	ldr	r1, [pc, #508]	@ (8011940 <PixelDmxParams::callbackFunction(char const*)+0x254>)
 8011742:	f10d 0202 	add.w	r2, sp, #2
 8011746:	4628      	mov	r0, r5
 8011748:	f007 fd05 	bl	8019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801174c:	b990      	cbnz	r0, 8011774 <PixelDmxParams::callbackFunction(char const*)+0x88>
 801174e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011752:	6823      	ldr	r3, [r4, #0]
 8011754:	1e51      	subs	r1, r2, #1
 8011756:	f5b1 7f2a 	cmp.w	r1, #680	@ 0x2a8
 801175a:	bf2d      	iteet	cs
 801175c:	f06f 0255 	mvncs.w	r2, #85	@ 0x55
 8011760:	f8a4 2005 	strhcc.w	r2, [r4, #5]
 8011764:	f043 0302 	orrcc.w	r3, r3, #2
 8011768:	7162      	strbcs	r2, [r4, #5]
 801176a:	bf24      	itt	cs
 801176c:	71a0      	strbcs	r0, [r4, #6]
 801176e:	f023 0302 	biccs.w	r3, r3, #2
 8011772:	e7e3      	b.n	801173c <PixelDmxParams::callbackFunction(char const*)+0x50>
 8011774:	2303      	movs	r3, #3
 8011776:	9302      	str	r3, [sp, #8]
 8011778:	4972      	ldr	r1, [pc, #456]	@ (8011944 <PixelDmxParams::callbackFunction(char const*)+0x258>)
 801177a:	ab02      	add	r3, sp, #8
 801177c:	aa04      	add	r2, sp, #16
 801177e:	4628      	mov	r0, r5
 8011780:	f007 fc3e 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 8011784:	b998      	cbnz	r0, 80117ae <PixelDmxParams::callbackFunction(char const*)+0xc2>
 8011786:	9b02      	ldr	r3, [sp, #8]
 8011788:	3320      	adds	r3, #32
 801178a:	446b      	add	r3, sp
 801178c:	f803 0c10 	strb.w	r0, [r3, #-16]
 8011790:	a804      	add	r0, sp, #16
 8011792:	f001 fc79 	bl	8013088 <pixel::pixel_get_map(char const*)>
 8011796:	6823      	ldr	r3, [r4, #0]
 8011798:	74e0      	strb	r0, [r4, #19]
 801179a:	2806      	cmp	r0, #6
 801179c:	bf14      	ite	ne
 801179e:	f443 7300 	orrne.w	r3, r3, #512	@ 0x200
 80117a2:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 80117a6:	6023      	str	r3, [r4, #0]
 80117a8:	b008      	add	sp, #32
 80117aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ae:	4966      	ldr	r1, [pc, #408]	@ (8011948 <PixelDmxParams::callbackFunction(char const*)+0x25c>)
 80117b0:	aa01      	add	r2, sp, #4
 80117b2:	4628      	mov	r0, r5
 80117b4:	f007 fc3d 	bl	8019032 <Sscan::Float(char const*, char const*, float&)>
 80117b8:	b968      	cbnz	r0, 80117d6 <PixelDmxParams::callbackFunction(char const*)+0xea>
 80117ba:	ed9d 0a01 	vldr	s0, [sp, #4]
 80117be:	f7ff feef 	bl	80115a0 <pixel::pixel_convert_TxH(float)>
 80117c2:	6823      	ldr	r3, [r4, #0]
 80117c4:	b120      	cbz	r0, 80117d0 <PixelDmxParams::callbackFunction(char const*)+0xe4>
 80117c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80117ca:	6023      	str	r3, [r4, #0]
 80117cc:	7520      	strb	r0, [r4, #20]
 80117ce:	e7eb      	b.n	80117a8 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 80117d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80117d4:	e7f9      	b.n	80117ca <PixelDmxParams::callbackFunction(char const*)+0xde>
 80117d6:	495d      	ldr	r1, [pc, #372]	@ (801194c <PixelDmxParams::callbackFunction(char const*)+0x260>)
 80117d8:	aa01      	add	r2, sp, #4
 80117da:	4628      	mov	r0, r5
 80117dc:	f007 fc29 	bl	8019032 <Sscan::Float(char const*, char const*, float&)>
 80117e0:	b968      	cbnz	r0, 80117fe <PixelDmxParams::callbackFunction(char const*)+0x112>
 80117e2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80117e6:	f7ff fedb 	bl	80115a0 <pixel::pixel_convert_TxH(float)>
 80117ea:	6823      	ldr	r3, [r4, #0]
 80117ec:	b120      	cbz	r0, 80117f8 <PixelDmxParams::callbackFunction(char const*)+0x10c>
 80117ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80117f2:	6023      	str	r3, [r4, #0]
 80117f4:	7560      	strb	r0, [r4, #21]
 80117f6:	e7d7      	b.n	80117a8 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 80117f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80117fc:	e7f9      	b.n	80117f2 <PixelDmxParams::callbackFunction(char const*)+0x106>
 80117fe:	4954      	ldr	r1, [pc, #336]	@ (8011950 <PixelDmxParams::callbackFunction(char const*)+0x264>)
 8011800:	f10d 0202 	add.w	r2, sp, #2
 8011804:	4628      	mov	r0, r5
 8011806:	f007 fca6 	bl	8019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801180a:	b998      	cbnz	r0, 8011834 <PixelDmxParams::callbackFunction(char const*)+0x148>
 801180c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8011810:	6823      	ldr	r3, [r4, #0]
 8011812:	1e8a      	subs	r2, r1, #2
 8011814:	b292      	uxth	r2, r2
 8011816:	f240 25a6 	movw	r5, #678	@ 0x2a6
 801181a:	42aa      	cmp	r2, r5
 801181c:	bf81      	itttt	hi
 801181e:	2201      	movhi	r2, #1
 8011820:	7462      	strbhi	r2, [r4, #17]
 8011822:	74a0      	strbhi	r0, [r4, #18]
 8011824:	f423 7380 	bichi.w	r3, r3, #256	@ 0x100
 8011828:	bf9c      	itt	ls
 801182a:	f8a4 1011 	strhls.w	r1, [r4, #17]
 801182e:	f443 7380 	orrls.w	r3, r3, #256	@ 0x100
 8011832:	e783      	b.n	801173c <PixelDmxParams::callbackFunction(char const*)+0x50>
 8011834:	4947      	ldr	r1, [pc, #284]	@ (8011954 <PixelDmxParams::callbackFunction(char const*)+0x268>)
 8011836:	aa03      	add	r2, sp, #12
 8011838:	4628      	mov	r0, r5
 801183a:	f007 fca8 	bl	801918e <Sscan::Uint32(char const*, char const*, unsigned long&)>
 801183e:	b960      	cbnz	r0, 801185a <PixelDmxParams::callbackFunction(char const*)+0x16e>
 8011840:	9a03      	ldr	r2, [sp, #12]
 8011842:	4945      	ldr	r1, [pc, #276]	@ (8011958 <PixelDmxParams::callbackFunction(char const*)+0x26c>)
 8011844:	6823      	ldr	r3, [r4, #0]
 8011846:	f8c4 200a 	str.w	r2, [r4, #10]
 801184a:	428a      	cmp	r2, r1
 801184c:	bf14      	ite	ne
 801184e:	f043 0310 	orrne.w	r3, r3, #16
 8011852:	f023 0310 	biceq.w	r3, r3, #16
 8011856:	6023      	str	r3, [r4, #0]
 8011858:	e7a6      	b.n	80117a8 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 801185a:	4940      	ldr	r1, [pc, #256]	@ (801195c <PixelDmxParams::callbackFunction(char const*)+0x270>)
 801185c:	f10d 0201 	add.w	r2, sp, #1
 8011860:	4628      	mov	r0, r5
 8011862:	f007 fcbd 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011866:	b988      	cbnz	r0, 801188c <PixelDmxParams::callbackFunction(char const*)+0x1a0>
 8011868:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	1e4a      	subs	r2, r1, #1
 8011870:	b2d2      	uxtb	r2, r2
 8011872:	2afd      	cmp	r2, #253	@ 0xfd
 8011874:	bf89      	itett	hi
 8011876:	f023 0320 	bichi.w	r3, r3, #32
 801187a:	f043 0320 	orrls.w	r3, r3, #32
 801187e:	6023      	strhi	r3, [r4, #0]
 8011880:	23ff      	movhi	r3, #255	@ 0xff
 8011882:	bf9a      	itte	ls
 8011884:	6023      	strls	r3, [r4, #0]
 8011886:	73a1      	strbls	r1, [r4, #14]
 8011888:	73a3      	strbhi	r3, [r4, #14]
 801188a:	e78d      	b.n	80117a8 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 801188c:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8011968 <PixelDmxParams::callbackFunction(char const*)+0x27c>
 8011890:	2600      	movs	r6, #0
 8011892:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8011896:	f10d 0202 	add.w	r2, sp, #2
 801189a:	4641      	mov	r1, r8
 801189c:	4628      	mov	r0, r5
 801189e:	f007 fc5a 	bl	8019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80118a2:	b960      	cbnz	r0, 80118be <PixelDmxParams::callbackFunction(char const*)+0x1d2>
 80118a4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80118a8:	6823      	ldr	r3, [r4, #0]
 80118aa:	fa07 f006 	lsl.w	r0, r7, r6
 80118ae:	f106 0208 	add.w	r2, r6, #8
 80118b2:	b1f9      	cbz	r1, 80118f4 <PixelDmxParams::callbackFunction(char const*)+0x208>
 80118b4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80118b8:	4303      	orrs	r3, r0
 80118ba:	80d1      	strh	r1, [r2, #6]
 80118bc:	6023      	str	r3, [r4, #0]
 80118be:	3601      	adds	r6, #1
 80118c0:	2e08      	cmp	r6, #8
 80118c2:	f108 0814 	add.w	r8, r8, #20
 80118c6:	d1e6      	bne.n	8011896 <PixelDmxParams::callbackFunction(char const*)+0x1aa>
 80118c8:	4925      	ldr	r1, [pc, #148]	@ (8011960 <PixelDmxParams::callbackFunction(char const*)+0x274>)
 80118ca:	f10d 0201 	add.w	r2, sp, #1
 80118ce:	4628      	mov	r0, r5
 80118d0:	f007 fc86 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80118d4:	b9b0      	cbnz	r0, 8011904 <PixelDmxParams::callbackFunction(char const*)+0x218>
 80118d6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80118da:	6823      	ldr	r3, [r4, #0]
 80118dc:	1e91      	subs	r1, r2, #2
 80118de:	2906      	cmp	r1, #6
 80118e0:	bf8d      	iteet	hi
 80118e2:	2201      	movhi	r2, #1
 80118e4:	73e2      	strbls	r2, [r4, #15]
 80118e6:	f043 0340 	orrls.w	r3, r3, #64	@ 0x40
 80118ea:	73e2      	strbhi	r2, [r4, #15]
 80118ec:	bf88      	it	hi
 80118ee:	f023 0340 	bichi.w	r3, r3, #64	@ 0x40
 80118f2:	e723      	b.n	801173c <PixelDmxParams::callbackFunction(char const*)+0x50>
 80118f4:	00b1      	lsls	r1, r6, #2
 80118f6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80118fa:	3101      	adds	r1, #1
 80118fc:	80d1      	strh	r1, [r2, #6]
 80118fe:	ea23 0300 	bic.w	r3, r3, r0
 8011902:	e7db      	b.n	80118bc <PixelDmxParams::callbackFunction(char const*)+0x1d0>
 8011904:	4917      	ldr	r1, [pc, #92]	@ (8011964 <PixelDmxParams::callbackFunction(char const*)+0x278>)
 8011906:	f10d 0201 	add.w	r2, sp, #1
 801190a:	4628      	mov	r0, r5
 801190c:	f007 fc68 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011910:	2800      	cmp	r0, #0
 8011912:	f47f af49 	bne.w	80117a8 <PixelDmxParams::callbackFunction(char const*)+0xbc>
 8011916:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801191a:	6823      	ldr	r3, [r4, #0]
 801191c:	1e51      	subs	r1, r2, #1
 801191e:	2904      	cmp	r1, #4
 8011920:	bf99      	ittee	ls
 8011922:	7422      	strbls	r2, [r4, #16]
 8011924:	f043 0308 	orrls.w	r3, r3, #8
 8011928:	7420      	strbhi	r0, [r4, #16]
 801192a:	f023 0308 	bichi.w	r3, r3, #8
 801192e:	e705      	b.n	801173c <PixelDmxParams::callbackFunction(char const*)+0x50>
 8011930:	0801d837 	stmdaeq	r1, {r0, r1, r2, r4, r5, fp, ip, lr, pc}
 8011934:	0801d848 	stmdaeq	r1, {r3, r6, fp, ip, lr, pc}
 8011938:	0801d859 	stmdaeq	r1, {r0, r3, r4, r6, fp, ip, lr, pc}
 801193c:	080213d4 	stmdaeq	r2, {r2, r4, r6, r7, r8, r9, ip}
 8011940:	080213aa 	stmdaeq	r2, {r1, r3, r5, r7, r8, r9, ip}
 8011944:	080213c4 	stmdaeq	r2, {r2, r6, r7, r8, r9, ip}
 8011948:	080213bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, r9, ip}
 801194c:	080213b4 	stmdaeq	r2, {r2, r4, r5, r7, r8, r9, ip}
 8011950:	0802139a 	stmdaeq	r2, {r1, r3, r4, r7, r8, r9, ip}
 8011954:	0802138b 	stmdaeq	r2, {r0, r1, r3, r7, r8, r9, ip}
 8011958:	003d0900 	eorseq	r0, sp, r0, lsl #18
 801195c:	08021379 	stmdaeq	r2, {r0, r3, r4, r5, r6, r8, r9, ip}
 8011960:	0802136e 	stmdaeq	r2, {r1, r2, r3, r5, r6, r8, r9, ip}
 8011964:	08021361 	stmdaeq	r2, {r0, r5, r6, r8, r9, ip}
 8011968:	080213e9 	stmdaeq	r2, {r0, r3, r5, r6, r7, r8, r9, ip}

0801196c <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	460d      	mov	r5, r1
 8011970:	4604      	mov	r4, r0
 8011972:	b930      	cbnz	r0, 8011982 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x16>
 8011974:	4b0a      	ldr	r3, [pc, #40]	@ (80119a0 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x34>)
 8011976:	4a0b      	ldr	r2, [pc, #44]	@ (80119a4 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x38>)
 8011978:	480b      	ldr	r0, [pc, #44]	@ (80119a8 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x3c>)
 801197a:	f240 11b5 	movw	r1, #437	@ 0x1b5
 801197e:	f00a fe35 	bl	801c5ec <__assert_func>
 8011982:	b935      	cbnz	r5, 8011992 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x26>
 8011984:	4b09      	ldr	r3, [pc, #36]	@ (80119ac <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x40>)
 8011986:	4a07      	ldr	r2, [pc, #28]	@ (80119a4 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x38>)
 8011988:	4807      	ldr	r0, [pc, #28]	@ (80119a8 <PixelDmxParams::staticCallbackFunction(void*, char const*)+0x3c>)
 801198a:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 801198e:	f00a fe2d 	bl	801c5ec <__assert_func>
 8011992:	4629      	mov	r1, r5
 8011994:	4620      	mov	r0, r4
 8011996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801199a:	f7ff bea7 	b.w	80116ec <PixelDmxParams::callbackFunction(char const*)>
 801199e:	bf00      	nop
 80119a0:	0801d877 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, fp, ip, lr, pc}
 80119a4:	0801d884 	stmdaeq	r1, {r2, r7, fp, ip, lr, pc}
 80119a8:	0801d859 	stmdaeq	r1, {r0, r3, r4, r6, fp, ip, lr, pc}
 80119ac:	0801cd29 	stmdaeq	r1, {r0, r3, r5, r8, sl, fp, lr, pc}

080119b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)>:
 80119b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119b2:	4604      	mov	r4, r0
 80119b4:	b087      	sub	sp, #28
 80119b6:	460e      	mov	r6, r1
 80119b8:	461f      	mov	r7, r3
 80119ba:	4615      	mov	r5, r2
 80119bc:	b932      	cbnz	r2, 80119cc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x1c>
 80119be:	4b87      	ldr	r3, [pc, #540]	@ (8011bdc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>)
 80119c0:	4a87      	ldr	r2, [pc, #540]	@ (8011be0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 80119c2:	4888      	ldr	r0, [pc, #544]	@ (8011be4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 80119c4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80119c8:	f00a fe10 	bl	801c5ec <__assert_func>
 80119cc:	2e00      	cmp	r6, #0
 80119ce:	f000 8092 	beq.w	8011af6 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x146>
 80119d2:	2226      	movs	r2, #38	@ 0x26
 80119d4:	4631      	mov	r1, r6
 80119d6:	4620      	mov	r0, r4
 80119d8:	f00a fa2d 	bl	801be36 <memmove>
 80119dc:	4982      	ldr	r1, [pc, #520]	@ (8011be8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x238>)
 80119de:	463b      	mov	r3, r7
 80119e0:	462a      	mov	r2, r5
 80119e2:	a803      	add	r0, sp, #12
 80119e4:	f007 f9fc 	bl	8018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 80119e8:	7920      	ldrb	r0, [r4, #4]
 80119ea:	f001 fb11 	bl	8013010 <pixel::pixel_get_type(pixel::Type)>
 80119ee:	6823      	ldr	r3, [r4, #0]
 80119f0:	497e      	ldr	r1, [pc, #504]	@ (8011bec <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x23c>)
 80119f2:	4602      	mov	r2, r0
 80119f4:	f003 0301 	and.w	r3, r3, #1
 80119f8:	a803      	add	r0, sp, #12
 80119fa:	f7ff fd39 	bl	8011470 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 80119fe:	6823      	ldr	r3, [r4, #0]
 8011a00:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8011a04:	497a      	ldr	r1, [pc, #488]	@ (8011bf0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x240>)
 8011a06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011a0a:	a803      	add	r0, sp, #12
 8011a0c:	f7ff fd08 	bl	8011420 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 8011a10:	4978      	ldr	r1, [pc, #480]	@ (8011bf4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x244>)
 8011a12:	a803      	add	r0, sp, #12
 8011a14:	f007 faa0 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	059e      	lsls	r6, r3, #22
 8011a1c:	d407      	bmi.n	8011a2e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x7e>
 8011a1e:	7923      	ldrb	r3, [r4, #4]
 8011a20:	3b01      	subs	r3, #1
 8011a22:	2b09      	cmp	r3, #9
 8011a24:	bf96      	itet	ls
 8011a26:	4a74      	ldrls	r2, [pc, #464]	@ (8011bf8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x248>)
 8011a28:	2302      	movhi	r3, #2
 8011a2a:	56d3      	ldrsbls	r3, [r2, r3]
 8011a2c:	74e3      	strb	r3, [r4, #19]
 8011a2e:	7ce0      	ldrb	r0, [r4, #19]
 8011a30:	f001 fb60 	bl	80130f4 <pixel::pixel_get_map(pixel::Map)>
 8011a34:	6823      	ldr	r3, [r4, #0]
 8011a36:	4971      	ldr	r1, [pc, #452]	@ (8011bfc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x24c>)
 8011a38:	4602      	mov	r2, r0
 8011a3a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8011a3e:	a803      	add	r0, sp, #12
 8011a40:	f7ff fd16 	bl	8011470 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, int) [clone .isra.0]>
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011a4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011a4e:	d011      	beq.n	8011a74 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 8011a50:	f7f8 f8b6 	bl	8009bc0 <PixelConfiguration::Get()>
 8011a54:	7923      	ldrb	r3, [r4, #4]
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d051      	beq.n	8011afe <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x14e>
 8011a5a:	3b08      	subs	r3, #8
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	bf8c      	ite	hi
 8011a60:	23f0      	movhi	r3, #240	@ 0xf0
 8011a62:	23fc      	movls	r3, #252	@ 0xfc
 8011a64:	6822      	ldr	r2, [r4, #0]
 8011a66:	0555      	lsls	r5, r2, #21
 8011a68:	bf5c      	itt	pl
 8011a6a:	21c0      	movpl	r1, #192	@ 0xc0
 8011a6c:	7521      	strbpl	r1, [r4, #20]
 8011a6e:	0510      	lsls	r0, r2, #20
 8011a70:	bf58      	it	pl
 8011a72:	7563      	strbpl	r3, [r4, #21]
 8011a74:	4962      	ldr	r1, [pc, #392]	@ (8011c00 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x250>)
 8011a76:	a803      	add	r0, sp, #12
 8011a78:	f007 fa6e 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 8011a7c:	7d20      	ldrb	r0, [r4, #20]
 8011a7e:	f7ff fd61 	bl	8011544 <pixel::pixel_convert_TxH(unsigned char)>
 8011a82:	6822      	ldr	r2, [r4, #0]
 8011a84:	495f      	ldr	r1, [pc, #380]	@ (8011c04 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x254>)
 8011a86:	2302      	movs	r3, #2
 8011a88:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8011a8c:	a803      	add	r0, sp, #12
 8011a8e:	f7ff fd17 	bl	80114c0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>
 8011a92:	7d60      	ldrb	r0, [r4, #21]
 8011a94:	f7ff fd56 	bl	8011544 <pixel::pixel_convert_TxH(unsigned char)>
 8011a98:	6822      	ldr	r2, [r4, #0]
 8011a9a:	495b      	ldr	r1, [pc, #364]	@ (8011c08 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x258>)
 8011a9c:	2302      	movs	r3, #2
 8011a9e:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 8011aa2:	a803      	add	r0, sp, #12
 8011aa4:	f7ff fd0c 	bl	80114c0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, int) [clone .isra.0]>
 8011aa8:	4958      	ldr	r1, [pc, #352]	@ (8011c0c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x25c>)
 8011aaa:	a803      	add	r0, sp, #12
 8011aac:	f007 fa54 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 8011ab0:	6823      	ldr	r3, [r4, #0]
 8011ab2:	f8b4 2011 	ldrh.w	r2, [r4, #17]
 8011ab6:	4956      	ldr	r1, [pc, #344]	@ (8011c10 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x260>)
 8011ab8:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8011abc:	a803      	add	r0, sp, #12
 8011abe:	f7ff fcaf 	bl	8011420 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 8011ac2:	4954      	ldr	r1, [pc, #336]	@ (8011c14 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x264>)
 8011ac4:	a803      	add	r0, sp, #12
 8011ac6:	f007 fa47 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 8011aca:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011ace:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011ad2:	f8d4 300a 	ldr.w	r3, [r4, #10]
 8011ad6:	6821      	ldr	r1, [r4, #0]
 8011ad8:	42aa      	cmp	r2, r5
 8011ada:	d221      	bcs.n	8011b20 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x170>
 8011adc:	9803      	ldr	r0, [sp, #12]
 8011ade:	06c9      	lsls	r1, r1, #27
 8011ae0:	4410      	add	r0, r2
 8011ae2:	eba5 0502 	sub.w	r5, r5, r2
 8011ae6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011aea:	d40a      	bmi.n	8011b02 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x152>
 8011aec:	b95a      	cbnz	r2, 8011b06 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x156>
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	4a49      	ldr	r2, [pc, #292]	@ (8011c18 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x268>)
 8011af2:	4b4a      	ldr	r3, [pc, #296]	@ (8011c1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 8011af4:	e00a      	b.n	8011b0c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x15c>
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7ff fda8 	bl	801164c <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>
 8011afc:	e76e      	b.n	80119dc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x2c>
 8011afe:	23f8      	movs	r3, #248	@ 0xf8
 8011b00:	e7b0      	b.n	8011a64 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0xb4>
 8011b02:	2a00      	cmp	r2, #0
 8011b04:	d066      	beq.n	8011bd4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x224>
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	4a45      	ldr	r2, [pc, #276]	@ (8011c20 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x270>)
 8011b0a:	4b44      	ldr	r3, [pc, #272]	@ (8011c1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	f00a fcb5 	bl	801c47c <snprintf>
 8011b12:	4285      	cmp	r5, r0
 8011b14:	bfa2      	ittt	ge
 8011b16:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8011b1a:	18c0      	addge	r0, r0, r3
 8011b1c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8011b20:	4940      	ldr	r1, [pc, #256]	@ (8011c24 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x274>)
 8011b22:	4e41      	ldr	r6, [pc, #260]	@ (8011c28 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x278>)
 8011b24:	a803      	add	r0, sp, #12
 8011b26:	f007 fa17 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 8011b2a:	6823      	ldr	r3, [r4, #0]
 8011b2c:	7ba2      	ldrb	r2, [r4, #14]
 8011b2e:	493f      	ldr	r1, [pc, #252]	@ (8011c2c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x27c>)
 8011b30:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011b34:	a803      	add	r0, sp, #12
 8011b36:	f7ff fc4b 	bl	80113d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8011b3a:	2500      	movs	r5, #0
 8011b3c:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8011b40:	6822      	ldr	r2, [r4, #0]
 8011b42:	fa07 f305 	lsl.w	r3, r7, r5
 8011b46:	4393      	bics	r3, r2
 8011b48:	f105 0208 	add.w	r2, r5, #8
 8011b4c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8011b50:	bf0c      	ite	eq
 8011b52:	2301      	moveq	r3, #1
 8011b54:	2300      	movne	r3, #0
 8011b56:	4631      	mov	r1, r6
 8011b58:	88d2      	ldrh	r2, [r2, #6]
 8011b5a:	a803      	add	r0, sp, #12
 8011b5c:	3501      	adds	r5, #1
 8011b5e:	f7ff fc5f 	bl	8011420 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, int) [clone .isra.0]>
 8011b62:	2d08      	cmp	r5, #8
 8011b64:	f106 0614 	add.w	r6, r6, #20
 8011b68:	d1ea      	bne.n	8011b40 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x190>
 8011b6a:	6823      	ldr	r3, [r4, #0]
 8011b6c:	7be2      	ldrb	r2, [r4, #15]
 8011b6e:	4930      	ldr	r1, [pc, #192]	@ (8011c30 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x280>)
 8011b70:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011b74:	a803      	add	r0, sp, #12
 8011b76:	f7ff fc2b 	bl	80113d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8011b7a:	492e      	ldr	r1, [pc, #184]	@ (8011c34 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x284>)
 8011b7c:	a803      	add	r0, sp, #12
 8011b7e:	f007 f9eb 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	7c22      	ldrb	r2, [r4, #16]
 8011b86:	492c      	ldr	r1, [pc, #176]	@ (8011c38 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x288>)
 8011b88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011b8c:	a803      	add	r0, sp, #12
 8011b8e:	f7ff fc1f 	bl	80113d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8011b92:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011b96:	b17b      	cbz	r3, 8011bb8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x208>
 8011b98:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011b9c:	9b03      	ldr	r3, [sp, #12]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	227d      	movs	r2, #125	@ 0x7d
 8011ba2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011ba6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011baa:	9903      	ldr	r1, [sp, #12]
 8011bac:	54ca      	strb	r2, [r1, r3]
 8011bae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011bb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011bba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011bbe:	6013      	str	r3, [r2, #0]
 8011bc0:	4907      	ldr	r1, [pc, #28]	@ (8011be0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	4a07      	ldr	r2, [pc, #28]	@ (8011be4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 8011bc6:	481d      	ldr	r0, [pc, #116]	@ (8011c3c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x28c>)
 8011bc8:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 8011bcc:	f00a fc2e 	bl	801c42c <printf>
 8011bd0:	b007      	add	sp, #28
 8011bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bd4:	9300      	str	r3, [sp, #0]
 8011bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8011c40 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x290>)
 8011bd8:	4b10      	ldr	r3, [pc, #64]	@ (8011c1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x26c>)
 8011bda:	e797      	b.n	8011b0c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned long, unsigned long&)+0x15c>
 8011bdc:	0801d89b 	stmdaeq	r1, {r0, r1, r3, r4, r7, fp, ip, lr, pc}
 8011be0:	0801d8ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, fp, ip, lr, pc}
 8011be4:	0801d859 	stmdaeq	r1, {r0, r3, r4, r6, fp, ip, lr, pc}
 8011be8:	080213dd 	stmdaeq	r2, {r0, r2, r3, r4, r6, r7, r8, r9, ip}
 8011bec:	080213d4 	stmdaeq	r2, {r2, r4, r6, r7, r8, r9, ip}
 8011bf0:	080213aa 	stmdaeq	r2, {r1, r3, r5, r7, r8, r9, ip}
 8011bf4:	0801d8b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, fp, ip, lr, pc}
 8011bf8:	08020e30 	stmdaeq	r2, {r4, r5, r9, sl, fp}
 8011bfc:	080213c4 	stmdaeq	r2, {r2, r6, r7, r8, r9, ip}
 8011c00:	0801d8ca 	stmdaeq	r1, {r1, r3, r6, r7, fp, ip, lr, pc}
 8011c04:	080213bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, r9, ip}
 8011c08:	080213b4 	stmdaeq	r2, {r2, r4, r5, r7, r8, r9, ip}
 8011c0c:	0801d8e0 	stmdaeq	r1, {r5, r6, r7, fp, ip, lr, pc}
 8011c10:	0802139a 	stmdaeq	r2, {r1, r3, r4, r7, r8, r9, ip}
 8011c14:	0801d8e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, fp, ip, lr, pc}
 8011c18:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 8011c1c:	0802138b 	stmdaeq	r2, {r0, r1, r3, r7, r8, r9, ip}
 8011c20:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 8011c24:	0801d8fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, fp, ip, lr, pc}
 8011c28:	080213e9 	stmdaeq	r2, {r0, r3, r5, r6, r7, r8, r9, ip}
 8011c2c:	08021379 	stmdaeq	r2, {r0, r3, r4, r5, r6, r8, r9, ip}
 8011c30:	0802136e 	stmdaeq	r2, {r1, r2, r3, r5, r6, r8, r9, ip}
 8011c34:	0801d909 	stmdaeq	r1, {r0, r3, r8, fp, ip, lr, pc}
 8011c38:	08021361 	stmdaeq	r2, {r0, r5, r6, r8, r9, ip}
 8011c3c:	0801d916 	stmdaeq	r1, {r1, r2, r4, r8, fp, ip, lr, pc}
 8011c40:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

08011c44 <PixelDmxParams::Set()>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	4604      	mov	r4, r0
 8011c48:	f7f7 ffba 	bl	8009bc0 <PixelConfiguration::Get()>
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	07dd      	lsls	r5, r3, #31
 8011c50:	bf44      	itt	mi
 8011c52:	7922      	ldrbmi	r2, [r4, #4]
 8011c54:	60c2      	strmi	r2, [r0, #12]
 8011c56:	0799      	lsls	r1, r3, #30
 8011c58:	d505      	bpl.n	8011c66 <PixelDmxParams::Set()+0x22>
 8011c5a:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	bf08      	it	eq
 8011c62:	22aa      	moveq	r2, #170	@ 0xaa
 8011c64:	6002      	str	r2, [r0, #0]
 8011c66:	059a      	lsls	r2, r3, #22
 8011c68:	bf44      	itt	mi
 8011c6a:	7ce2      	ldrbmi	r2, [r4, #19]
 8011c6c:	6102      	strmi	r2, [r0, #16]
 8011c6e:	055d      	lsls	r5, r3, #21
 8011c70:	bf44      	itt	mi
 8011c72:	7d22      	ldrbmi	r2, [r4, #20]
 8011c74:	7542      	strbmi	r2, [r0, #21]
 8011c76:	0519      	lsls	r1, r3, #20
 8011c78:	bf44      	itt	mi
 8011c7a:	7d62      	ldrbmi	r2, [r4, #21]
 8011c7c:	7582      	strbmi	r2, [r0, #22]
 8011c7e:	06da      	lsls	r2, r3, #27
 8011c80:	bf44      	itt	mi
 8011c82:	f8d4 200a 	ldrmi.w	r2, [r4, #10]
 8011c86:	6042      	strmi	r2, [r0, #4]
 8011c88:	069d      	lsls	r5, r3, #26
 8011c8a:	4d0e      	ldr	r5, [pc, #56]	@ (8011cc4 <PixelDmxParams::Set()+0x80>)
 8011c8c:	bf44      	itt	mi
 8011c8e:	7ba3      	ldrbmi	r3, [r4, #14]
 8011c90:	75c3      	strbmi	r3, [r0, #23]
 8011c92:	682b      	ldr	r3, [r5, #0]
 8011c94:	b92b      	cbnz	r3, 8011ca2 <PixelDmxParams::Set()+0x5e>
 8011c96:	4b0c      	ldr	r3, [pc, #48]	@ (8011cc8 <PixelDmxParams::Set()+0x84>)
 8011c98:	4a0c      	ldr	r2, [pc, #48]	@ (8011ccc <PixelDmxParams::Set()+0x88>)
 8011c9a:	480d      	ldr	r0, [pc, #52]	@ (8011cd0 <PixelDmxParams::Set()+0x8c>)
 8011c9c:	21a4      	movs	r1, #164	@ 0xa4
 8011c9e:	f00a fca5 	bl	801c5ec <__assert_func>
 8011ca2:	6822      	ldr	r2, [r4, #0]
 8011ca4:	682b      	ldr	r3, [r5, #0]
 8011ca6:	0750      	lsls	r0, r2, #29
 8011ca8:	bf44      	itt	mi
 8011caa:	f8b4 1007 	ldrhmi.w	r1, [r4, #7]
 8011cae:	62d9      	strmi	r1, [r3, #44]	@ 0x2c
 8011cb0:	05d1      	lsls	r1, r2, #23
 8011cb2:	bf44      	itt	mi
 8011cb4:	f8b4 1011 	ldrhmi.w	r1, [r4, #17]
 8011cb8:	6219      	strmi	r1, [r3, #32]
 8011cba:	0652      	lsls	r2, r2, #25
 8011cbc:	bf44      	itt	mi
 8011cbe:	7be2      	ldrbmi	r2, [r4, #15]
 8011cc0:	61da      	strmi	r2, [r3, #28]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	20000078 	andcs	r0, r0, r8, ror r0
 8011cc8:	0801cd23 	stmdaeq	r1, {r0, r1, r5, r8, sl, fp, lr, pc}
 8011ccc:	0801cd36 	stmdaeq	r1, {r1, r2, r4, r5, r8, sl, fp, lr, pc}
 8011cd0:	0801d932 	stmdaeq	r1, {r1, r4, r5, r8, fp, ip, lr, pc}

08011cd4 <PixelDmxParams::Dump()>:
 8011cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	4b38      	ldr	r3, [pc, #224]	@ (8011dbc <PixelDmxParams::Dump()+0xe8>)
 8011cda:	4a39      	ldr	r2, [pc, #228]	@ (8011dc0 <PixelDmxParams::Dump()+0xec>)
 8011cdc:	4939      	ldr	r1, [pc, #228]	@ (8011dc4 <PixelDmxParams::Dump()+0xf0>)
 8011cde:	483a      	ldr	r0, [pc, #232]	@ (8011dc8 <PixelDmxParams::Dump()+0xf4>)
 8011ce0:	4e3a      	ldr	r6, [pc, #232]	@ (8011dcc <PixelDmxParams::Dump()+0xf8>)
 8011ce2:	f00a fba3 	bl	801c42c <printf>
 8011ce6:	7920      	ldrb	r0, [r4, #4]
 8011ce8:	f001 f992 	bl	8013010 <pixel::pixel_get_type(pixel::Type)>
 8011cec:	7923      	ldrb	r3, [r4, #4]
 8011cee:	4938      	ldr	r1, [pc, #224]	@ (8011dd0 <PixelDmxParams::Dump()+0xfc>)
 8011cf0:	4602      	mov	r2, r0
 8011cf2:	4838      	ldr	r0, [pc, #224]	@ (8011dd4 <PixelDmxParams::Dump()+0x100>)
 8011cf4:	f00a fb9a 	bl	801c42c <printf>
 8011cf8:	7ce5      	ldrb	r5, [r4, #19]
 8011cfa:	4628      	mov	r0, r5
 8011cfc:	f001 f9fa 	bl	80130f4 <pixel::pixel_get_map(pixel::Map)>
 8011d00:	462a      	mov	r2, r5
 8011d02:	4603      	mov	r3, r0
 8011d04:	4934      	ldr	r1, [pc, #208]	@ (8011dd8 <PixelDmxParams::Dump()+0x104>)
 8011d06:	4835      	ldr	r0, [pc, #212]	@ (8011ddc <PixelDmxParams::Dump()+0x108>)
 8011d08:	f00a fb90 	bl	801c42c <printf>
 8011d0c:	7d25      	ldrb	r5, [r4, #20]
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f7ff fc18 	bl	8011544 <pixel::pixel_convert_TxH(unsigned char)>
 8011d14:	ee10 0a10 	vmov	r0, s0
 8011d18:	f7f7 fa90 	bl	800923c <__aeabi_f2d>
 8011d1c:	9500      	str	r5, [sp, #0]
 8011d1e:	4602      	mov	r2, r0
 8011d20:	460b      	mov	r3, r1
 8011d22:	482f      	ldr	r0, [pc, #188]	@ (8011de0 <PixelDmxParams::Dump()+0x10c>)
 8011d24:	492f      	ldr	r1, [pc, #188]	@ (8011de4 <PixelDmxParams::Dump()+0x110>)
 8011d26:	f00a fb81 	bl	801c42c <printf>
 8011d2a:	7d65      	ldrb	r5, [r4, #21]
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	f7ff fc09 	bl	8011544 <pixel::pixel_convert_TxH(unsigned char)>
 8011d32:	ee10 0a10 	vmov	r0, s0
 8011d36:	f7f7 fa81 	bl	800923c <__aeabi_f2d>
 8011d3a:	9500      	str	r5, [sp, #0]
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	460b      	mov	r3, r1
 8011d40:	4827      	ldr	r0, [pc, #156]	@ (8011de0 <PixelDmxParams::Dump()+0x10c>)
 8011d42:	4929      	ldr	r1, [pc, #164]	@ (8011de8 <PixelDmxParams::Dump()+0x114>)
 8011d44:	f00a fb72 	bl	801c42c <printf>
 8011d48:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8011d4c:	4927      	ldr	r1, [pc, #156]	@ (8011dec <PixelDmxParams::Dump()+0x118>)
 8011d4e:	4828      	ldr	r0, [pc, #160]	@ (8011df0 <PixelDmxParams::Dump()+0x11c>)
 8011d50:	f00a fb6c 	bl	801c42c <printf>
 8011d54:	2500      	movs	r5, #0
 8011d56:	f105 0308 	add.w	r3, r5, #8
 8011d5a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011d5e:	4631      	mov	r1, r6
 8011d60:	88da      	ldrh	r2, [r3, #6]
 8011d62:	4823      	ldr	r0, [pc, #140]	@ (8011df0 <PixelDmxParams::Dump()+0x11c>)
 8011d64:	3501      	adds	r5, #1
 8011d66:	f00a fb61 	bl	801c42c <printf>
 8011d6a:	2d08      	cmp	r5, #8
 8011d6c:	f106 0614 	add.w	r6, r6, #20
 8011d70:	d1f1      	bne.n	8011d56 <PixelDmxParams::Dump()+0x82>
 8011d72:	7be2      	ldrb	r2, [r4, #15]
 8011d74:	491f      	ldr	r1, [pc, #124]	@ (8011df4 <PixelDmxParams::Dump()+0x120>)
 8011d76:	481e      	ldr	r0, [pc, #120]	@ (8011df0 <PixelDmxParams::Dump()+0x11c>)
 8011d78:	f00a fb58 	bl	801c42c <printf>
 8011d7c:	f8b4 2011 	ldrh.w	r2, [r4, #17]
 8011d80:	491d      	ldr	r1, [pc, #116]	@ (8011df8 <PixelDmxParams::Dump()+0x124>)
 8011d82:	481b      	ldr	r0, [pc, #108]	@ (8011df0 <PixelDmxParams::Dump()+0x11c>)
 8011d84:	f00a fb52 	bl	801c42c <printf>
 8011d88:	f8d4 200a 	ldr.w	r2, [r4, #10]
 8011d8c:	491b      	ldr	r1, [pc, #108]	@ (8011dfc <PixelDmxParams::Dump()+0x128>)
 8011d8e:	481c      	ldr	r0, [pc, #112]	@ (8011e00 <PixelDmxParams::Dump()+0x12c>)
 8011d90:	f00a fb4c 	bl	801c42c <printf>
 8011d94:	7ba2      	ldrb	r2, [r4, #14]
 8011d96:	491b      	ldr	r1, [pc, #108]	@ (8011e04 <PixelDmxParams::Dump()+0x130>)
 8011d98:	4815      	ldr	r0, [pc, #84]	@ (8011df0 <PixelDmxParams::Dump()+0x11c>)
 8011d9a:	f00a fb47 	bl	801c42c <printf>
 8011d9e:	f8b4 2007 	ldrh.w	r2, [r4, #7]
 8011da2:	4919      	ldr	r1, [pc, #100]	@ (8011e08 <PixelDmxParams::Dump()+0x134>)
 8011da4:	4812      	ldr	r0, [pc, #72]	@ (8011df0 <PixelDmxParams::Dump()+0x11c>)
 8011da6:	f00a fb41 	bl	801c42c <printf>
 8011daa:	7c22      	ldrb	r2, [r4, #16]
 8011dac:	4917      	ldr	r1, [pc, #92]	@ (8011e0c <PixelDmxParams::Dump()+0x138>)
 8011dae:	4810      	ldr	r0, [pc, #64]	@ (8011df0 <PixelDmxParams::Dump()+0x11c>)
 8011db0:	b002      	add	sp, #8
 8011db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011db6:	f00a bb39 	b.w	801c42c <printf>
 8011dba:	bf00      	nop
 8011dbc:	080213dd 	stmdaeq	r2, {r0, r2, r3, r4, r6, r7, r8, r9, ip}
 8011dc0:	0801d954 	stmdaeq	r1, {r2, r4, r6, r8, fp, ip, lr, pc}
 8011dc4:	0801d859 	stmdaeq	r1, {r0, r3, r4, r6, fp, ip, lr, pc}
 8011dc8:	0801d959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp, ip, lr, pc}
 8011dcc:	080213e9 	stmdaeq	r2, {r0, r3, r5, r6, r7, r8, r9, ip}
 8011dd0:	080213d4 	stmdaeq	r2, {r2, r4, r6, r7, r8, r9, ip}
 8011dd4:	0801d967 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, fp, ip, lr, pc}
 8011dd8:	080213c4 	stmdaeq	r2, {r2, r6, r7, r8, r9, ip}
 8011ddc:	0801d974 	stmdaeq	r1, {r2, r4, r5, r6, r8, fp, ip, lr, pc}
 8011de0:	0801d981 	stmdaeq	r1, {r0, r7, r8, fp, ip, lr, pc}
 8011de4:	080213bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, r9, ip}
 8011de8:	080213b4 	stmdaeq	r2, {r2, r4, r5, r7, r8, r9, ip}
 8011dec:	080213aa 	stmdaeq	r2, {r1, r3, r5, r7, r8, r9, ip}
 8011df0:	0801d992 	stmdaeq	r1, {r1, r4, r7, r8, fp, ip, lr, pc}
 8011df4:	0802136e 	stmdaeq	r2, {r1, r2, r3, r5, r6, r8, r9, ip}
 8011df8:	0802139a 	stmdaeq	r2, {r1, r3, r4, r7, r8, r9, ip}
 8011dfc:	0802138b 	stmdaeq	r2, {r0, r1, r3, r7, r8, r9, ip}
 8011e00:	0801d99a 	stmdaeq	r1, {r1, r3, r4, r7, r8, fp, ip, lr, pc}
 8011e04:	08021379 	stmdaeq	r2, {r0, r3, r4, r5, r6, r8, r9, ip}
 8011e08:	080214a8 	stmdaeq	r2, {r3, r5, r7, sl, ip}
 8011e0c:	08021361 	stmdaeq	r2, {r0, r5, r6, r8, r9, ip}

08011e10 <PixelDmxParams::Load()>:
 8011e10:	b570      	push	{r4, r5, r6, lr}
 8011e12:	4e0e      	ldr	r6, [pc, #56]	@ (8011e4c <PixelDmxParams::Load()+0x3c>)
 8011e14:	4d0e      	ldr	r5, [pc, #56]	@ (8011e50 <PixelDmxParams::Load()+0x40>)
 8011e16:	4604      	mov	r4, r0
 8011e18:	4632      	mov	r2, r6
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	2352      	movs	r3, #82	@ 0x52
 8011e1e:	480d      	ldr	r0, [pc, #52]	@ (8011e54 <PixelDmxParams::Load()+0x44>)
 8011e20:	f00a fb04 	bl	801c42c <printf>
 8011e24:	2300      	movs	r3, #0
 8011e26:	7023      	strb	r3, [r4, #0]
 8011e28:	7063      	strb	r3, [r4, #1]
 8011e2a:	70a3      	strb	r3, [r4, #2]
 8011e2c:	70e3      	strb	r3, [r4, #3]
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f7ff fc0c 	bl	801164c <PixelDmxParamsStore::Copy(pixeldmxparams::Params*)>
 8011e34:	4620      	mov	r0, r4
 8011e36:	f7ff ff4d 	bl	8011cd4 <PixelDmxParams::Dump()>
 8011e3a:	4632      	mov	r2, r6
 8011e3c:	4629      	mov	r1, r5
 8011e3e:	4806      	ldr	r0, [pc, #24]	@ (8011e58 <PixelDmxParams::Load()+0x48>)
 8011e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e44:	2362      	movs	r3, #98	@ 0x62
 8011e46:	f00a baf1 	b.w	801c42c <printf>
 8011e4a:	bf00      	nop
 8011e4c:	0801d9a2 	stmdaeq	r1, {r1, r5, r7, r8, fp, ip, lr, pc}
 8011e50:	0801d859 	stmdaeq	r1, {r0, r3, r4, r6, fp, ip, lr, pc}
 8011e54:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 8011e58:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}

08011e5c <PixelDmxParams::Load(char const*, unsigned long)>:
 8011e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e5e:	2366      	movs	r3, #102	@ 0x66
 8011e60:	460e      	mov	r6, r1
 8011e62:	b087      	sub	sp, #28
 8011e64:	4604      	mov	r4, r0
 8011e66:	4617      	mov	r7, r2
 8011e68:	491d      	ldr	r1, [pc, #116]	@ (8011ee0 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 8011e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8011ee4 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 8011e6c:	481e      	ldr	r0, [pc, #120]	@ (8011ee8 <PixelDmxParams::Load(char const*, unsigned long)+0x8c>)
 8011e6e:	f00a fadd 	bl	801c42c <printf>
 8011e72:	b92e      	cbnz	r6, 8011e80 <PixelDmxParams::Load(char const*, unsigned long)+0x24>
 8011e74:	4b1d      	ldr	r3, [pc, #116]	@ (8011eec <PixelDmxParams::Load(char const*, unsigned long)+0x90>)
 8011e76:	4a1b      	ldr	r2, [pc, #108]	@ (8011ee4 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 8011e78:	4819      	ldr	r0, [pc, #100]	@ (8011ee0 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 8011e7a:	2168      	movs	r1, #104	@ 0x68
 8011e7c:	f00a fbb6 	bl	801c5ec <__assert_func>
 8011e80:	b92f      	cbnz	r7, 8011e8e <PixelDmxParams::Load(char const*, unsigned long)+0x32>
 8011e82:	4b1b      	ldr	r3, [pc, #108]	@ (8011ef0 <PixelDmxParams::Load(char const*, unsigned long)+0x94>)
 8011e84:	4a17      	ldr	r2, [pc, #92]	@ (8011ee4 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 8011e86:	4816      	ldr	r0, [pc, #88]	@ (8011ee0 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 8011e88:	2169      	movs	r1, #105	@ 0x69
 8011e8a:	f00a fbaf 	bl	801c5ec <__assert_func>
 8011e8e:	2500      	movs	r5, #0
 8011e90:	4622      	mov	r2, r4
 8011e92:	4918      	ldr	r1, [pc, #96]	@ (8011ef4 <PixelDmxParams::Load(char const*, unsigned long)+0x98>)
 8011e94:	7025      	strb	r5, [r4, #0]
 8011e96:	7065      	strb	r5, [r4, #1]
 8011e98:	70a5      	strb	r5, [r4, #2]
 8011e9a:	70e5      	strb	r5, [r4, #3]
 8011e9c:	a804      	add	r0, sp, #16
 8011e9e:	f007 f875 	bl	8018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8011ea2:	463a      	mov	r2, r7
 8011ea4:	4631      	mov	r1, r6
 8011ea6:	a804      	add	r0, sp, #16
 8011ea8:	f007 f874 	bl	8018f94 <ReadConfigFile::Read(char const*, unsigned int)>
 8011eac:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8011eb0:	2326      	movs	r3, #38	@ 0x26
 8011eb2:	4811      	ldr	r0, [pc, #68]	@ (8011ef8 <PixelDmxParams::Load(char const*, unsigned long)+0x9c>)
 8011eb4:	9300      	str	r3, [sp, #0]
 8011eb6:	462a      	mov	r2, r5
 8011eb8:	4623      	mov	r3, r4
 8011eba:	2102      	movs	r1, #2
 8011ebc:	6800      	ldr	r0, [r0, #0]
 8011ebe:	f006 fd65 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	f7ff ff06 	bl	8011cd4 <PixelDmxParams::Dump()>
 8011ec8:	4a06      	ldr	r2, [pc, #24]	@ (8011ee4 <PixelDmxParams::Load(char const*, unsigned long)+0x88>)
 8011eca:	4905      	ldr	r1, [pc, #20]	@ (8011ee0 <PixelDmxParams::Load(char const*, unsigned long)+0x84>)
 8011ecc:	480b      	ldr	r0, [pc, #44]	@ (8011efc <PixelDmxParams::Load(char const*, unsigned long)+0xa0>)
 8011ece:	2376      	movs	r3, #118	@ 0x76
 8011ed0:	f00a faac 	bl	801c42c <printf>
 8011ed4:	a804      	add	r0, sp, #16
 8011ed6:	f007 f85c 	bl	8018f92 <ReadConfigFile::~ReadConfigFile()>
 8011eda:	b007      	add	sp, #28
 8011edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	0801d859 	stmdaeq	r1, {r0, r3, r4, r6, fp, ip, lr, pc}
 8011ee4:	0801d9a2 	stmdaeq	r1, {r1, r5, r7, r8, fp, ip, lr, pc}
 8011ee8:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 8011eec:	0801d89b 	stmdaeq	r1, {r0, r1, r3, r4, r7, fp, ip, lr, pc}
 8011ef0:	0801cbfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, lr, pc}
 8011ef4:	0801196d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, fp, ip}
 8011ef8:	2000e2dc 	ldrdcs	lr, [r0], -ip
 8011efc:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}

08011f00 <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 8011f00:	2000      	movs	r0, #0
 8011f02:	4770      	bx	lr

08011f04 <WS28xxDmxMulti::GetDmxStartAddress()>:
 8011f04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop

08011f0c <WS28xxDmxMulti::GetDmxFootprint()>:
 8011f0c:	2000      	movs	r0, #0
 8011f0e:	4770      	bx	lr

08011f10 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8011f10:	b538      	push	{r3, r4, r5, lr}
 8011f12:	6845      	ldr	r5, [r0, #4]
 8011f14:	4b06      	ldr	r3, [pc, #24]	@ (8011f30 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x20>)
 8011f16:	6003      	str	r3, [r0, #0]
 8011f18:	4604      	mov	r4, r0
 8011f1a:	b135      	cbz	r5, 8011f2a <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1a>
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	f001 fc35 	bl	801378c <WS28xxMulti::~WS28xxMulti()>
 8011f22:	2104      	movs	r1, #4
 8011f24:	4628      	mov	r0, r5
 8011f26:	f00a fcd5 	bl	801c8d4 <operator delete(void*, unsigned int)>
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	bd38      	pop	{r3, r4, r5, pc}
 8011f2e:	bf00      	nop
 8011f30:	08020e6c 	stmdaeq	r2, {r2, r3, r5, r6, r9, sl, fp}

08011f34 <WS28xxDmxMulti::Sync()>:
 8011f34:	b510      	push	{r4, lr}
 8011f36:	4604      	mov	r4, r0
 8011f38:	6860      	ldr	r0, [r4, #4]
 8011f3a:	f001 fe63 	bl	8013c04 <WS28xxMulti::IsUpdating()>
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	d1fa      	bne.n	8011f38 <WS28xxDmxMulti::Sync()+0x4>
 8011f42:	6860      	ldr	r0, [r4, #4]
 8011f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f48:	f001 bd6a 	b.w	8013a20 <WS28xxMulti::Update()>

08011f4c <WS28xxDmxMulti::FullOn()>:
 8011f4c:	b510      	push	{r4, lr}
 8011f4e:	4604      	mov	r4, r0
 8011f50:	6860      	ldr	r0, [r4, #4]
 8011f52:	f001 fe57 	bl	8013c04 <WS28xxMulti::IsUpdating()>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d1fa      	bne.n	8011f50 <WS28xxDmxMulti::FullOn()+0x4>
 8011f5a:	6860      	ldr	r0, [r4, #4]
 8011f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f60:	f002 be62 	b.w	8014c28 <WS28xxMulti::FullOn()>

08011f64 <WS28xxDmxMulti::Print()>:
 8011f64:	b530      	push	{r4, r5, lr}
 8011f66:	4d69      	ldr	r5, [pc, #420]	@ (801210c <WS28xxDmxMulti::Print()+0x1a8>)
 8011f68:	682c      	ldr	r4, [r5, #0]
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	2c00      	cmp	r4, #0
 8011f6e:	f000 80a2 	beq.w	80120b6 <WS28xxDmxMulti::Print()+0x152>
 8011f72:	4867      	ldr	r0, [pc, #412]	@ (8012110 <WS28xxDmxMulti::Print()+0x1ac>)
 8011f74:	f00a faaf 	bl	801c4d6 <puts>
 8011f78:	68e0      	ldr	r0, [r4, #12]
 8011f7a:	f001 f849 	bl	8013010 <pixel::pixel_get_type(pixel::Type)>
 8011f7e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8011f82:	4601      	mov	r1, r0
 8011f84:	4863      	ldr	r0, [pc, #396]	@ (8012114 <WS28xxDmxMulti::Print()+0x1b0>)
 8011f86:	f00a fa51 	bl	801c42c <printf>
 8011f8a:	4863      	ldr	r0, [pc, #396]	@ (8012118 <WS28xxDmxMulti::Print()+0x1b4>)
 8011f8c:	6821      	ldr	r1, [r4, #0]
 8011f8e:	f00a fa4d 	bl	801c42c <printf>
 8011f92:	7d23      	ldrb	r3, [r4, #20]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d12c      	bne.n	8011ff2 <WS28xxDmxMulti::Print()+0x8e>
 8011f98:	68e0      	ldr	r0, [r4, #12]
 8011f9a:	f1a0 010b 	sub.w	r1, r0, #11
 8011f9e:	2901      	cmp	r1, #1
 8011fa0:	d94b      	bls.n	801203a <WS28xxDmxMulti::Print()+0xd6>
 8011fa2:	6861      	ldr	r1, [r4, #4]
 8011fa4:	485d      	ldr	r0, [pc, #372]	@ (801211c <WS28xxDmxMulti::Print()+0x1b8>)
 8011fa6:	f00a fa41 	bl	801c42c <printf>
 8011faa:	69a1      	ldr	r1, [r4, #24]
 8011fac:	485c      	ldr	r0, [pc, #368]	@ (8012120 <WS28xxDmxMulti::Print()+0x1bc>)
 8011fae:	f00a fa3d 	bl	801c42c <printf>
 8011fb2:	485c      	ldr	r0, [pc, #368]	@ (8012124 <WS28xxDmxMulti::Print()+0x1c0>)
 8011fb4:	f00a fa8f 	bl	801c4d6 <puts>
 8011fb8:	69e1      	ldr	r1, [r4, #28]
 8011fba:	485b      	ldr	r0, [pc, #364]	@ (8012128 <WS28xxDmxMulti::Print()+0x1c4>)
 8011fbc:	f00a fa36 	bl	801c42c <printf>
 8011fc0:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8011fc4:	4859      	ldr	r0, [pc, #356]	@ (801212c <WS28xxDmxMulti::Print()+0x1c8>)
 8011fc6:	f00a fa31 	bl	801c42c <printf>
 8011fca:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011fcc:	4858      	ldr	r0, [pc, #352]	@ (8012130 <WS28xxDmxMulti::Print()+0x1cc>)
 8011fce:	f00a fa2d 	bl	801c42c <printf>
 8011fd2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011fd4:	4857      	ldr	r0, [pc, #348]	@ (8012134 <WS28xxDmxMulti::Print()+0x1d0>)
 8011fd6:	f00a fa29 	bl	801c42c <printf>
 8011fda:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 8011fdc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8011fde:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8011fe0:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8011fe2:	9001      	str	r0, [sp, #4]
 8011fe4:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
 8011fe6:	9400      	str	r4, [sp, #0]
 8011fe8:	4853      	ldr	r0, [pc, #332]	@ (8012138 <WS28xxDmxMulti::Print()+0x1d4>)
 8011fea:	f00a fa1f 	bl	801c42c <printf>
 8011fee:	b003      	add	sp, #12
 8011ff0:	bd30      	pop	{r4, r5, pc}
 8011ff2:	6920      	ldr	r0, [r4, #16]
 8011ff4:	f001 f87e 	bl	80130f4 <pixel::pixel_get_map(pixel::Map)>
 8011ff8:	6922      	ldr	r2, [r4, #16]
 8011ffa:	4601      	mov	r1, r0
 8011ffc:	484f      	ldr	r0, [pc, #316]	@ (801213c <WS28xxDmxMulti::Print()+0x1d8>)
 8011ffe:	f00a fa15 	bl	801c42c <printf>
 8012002:	7d65      	ldrb	r5, [r4, #21]
 8012004:	2dff      	cmp	r5, #255	@ 0xff
 8012006:	d01d      	beq.n	8012044 <WS28xxDmxMulti::Print()+0xe0>
 8012008:	2ddf      	cmp	r5, #223	@ 0xdf
 801200a:	d944      	bls.n	8012096 <WS28xxDmxMulti::Print()+0x132>
 801200c:	f1a5 0ce0 	sub.w	ip, r5, #224	@ 0xe0
 8012010:	f1bc 0f1e 	cmp.w	ip, #30
 8012014:	d816      	bhi.n	8012044 <WS28xxDmxMulti::Print()+0xe0>
 8012016:	e8df f00c 	tbb	[pc, ip]
 801201a:	1515156b 	ldrne	r1, [r5, #-1387]	@ 0xfffffa95
 801201e:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 8012022:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 8012026:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 801202a:	15151571 	ldrne	r1, [r5, #-1393]	@ 0xfffffa8f
 801202e:	15151515 	ldrne	r1, [r5, #-1301]	@ 0xfffffaeb
 8012032:	15151556 	ldrne	r1, [r5, #-1366]	@ 0xfffffaaa
 8012036:	005c1559 	subseq	r1, ip, r9, asr r5
 801203a:	7de1      	ldrb	r1, [r4, #23]
 801203c:	4840      	ldr	r0, [pc, #256]	@ (8012140 <WS28xxDmxMulti::Print()+0x1dc>)
 801203e:	f00a f9f5 	bl	801c42c <printf>
 8012042:	e7ae      	b.n	8011fa2 <WS28xxDmxMulti::Print()+0x3e>
 8012044:	2200      	movs	r2, #0
 8012046:	2300      	movs	r3, #0
 8012048:	483e      	ldr	r0, [pc, #248]	@ (8012144 <WS28xxDmxMulti::Print()+0x1e0>)
 801204a:	9500      	str	r5, [sp, #0]
 801204c:	f00a f9ee 	bl	801c42c <printf>
 8012050:	7da1      	ldrb	r1, [r4, #22]
 8012052:	29ff      	cmp	r1, #255	@ 0xff
 8012054:	d018      	beq.n	8012088 <WS28xxDmxMulti::Print()+0x124>
 8012056:	29df      	cmp	r1, #223	@ 0xdf
 8012058:	d925      	bls.n	80120a6 <WS28xxDmxMulti::Print()+0x142>
 801205a:	f1a1 0ee0 	sub.w	lr, r1, #224	@ 0xe0
 801205e:	f1be 0f1e 	cmp.w	lr, #30
 8012062:	d811      	bhi.n	8012088 <WS28xxDmxMulti::Print()+0x124>
 8012064:	e8df f00e 	tbb	[pc, lr]
 8012068:	10101041 	andsne	r1, r0, r1, asr #32
 801206c:	10101010 	andsne	r1, r0, r0, lsl r0
 8012070:	10101010 	andsne	r1, r0, r0, lsl r0
 8012074:	10101010 	andsne	r1, r0, r0, lsl r0
 8012078:	10101047 	andsne	r1, r0, r7, asr #32
 801207c:	10101010 	andsne	r1, r0, r0, lsl r0
 8012080:	1010103e 	andsne	r1, r0, lr, lsr r0
 8012084:	0038103b 	eorseq	r1, r8, fp, lsr r0
 8012088:	2200      	movs	r2, #0
 801208a:	2300      	movs	r3, #0
 801208c:	9100      	str	r1, [sp, #0]
 801208e:	482e      	ldr	r0, [pc, #184]	@ (8012148 <WS28xxDmxMulti::Print()+0x1e4>)
 8012090:	f00a f9cc 	bl	801c42c <printf>
 8012094:	e785      	b.n	8011fa2 <WS28xxDmxMulti::Print()+0x3e>
 8012096:	2d80      	cmp	r5, #128	@ 0x80
 8012098:	f04f 0200 	mov.w	r2, #0
 801209c:	d033      	beq.n	8012106 <WS28xxDmxMulti::Print()+0x1a2>
 801209e:	2dc0      	cmp	r5, #192	@ 0xc0
 80120a0:	d1d1      	bne.n	8012046 <WS28xxDmxMulti::Print()+0xe2>
 80120a2:	4b2a      	ldr	r3, [pc, #168]	@ (801214c <WS28xxDmxMulti::Print()+0x1e8>)
 80120a4:	e7d0      	b.n	8012048 <WS28xxDmxMulti::Print()+0xe4>
 80120a6:	2980      	cmp	r1, #128	@ 0x80
 80120a8:	f04f 0200 	mov.w	r2, #0
 80120ac:	d029      	beq.n	8012102 <WS28xxDmxMulti::Print()+0x19e>
 80120ae:	29c0      	cmp	r1, #192	@ 0xc0
 80120b0:	d1eb      	bne.n	801208a <WS28xxDmxMulti::Print()+0x126>
 80120b2:	4b26      	ldr	r3, [pc, #152]	@ (801214c <WS28xxDmxMulti::Print()+0x1e8>)
 80120b4:	e7ea      	b.n	801208c <WS28xxDmxMulti::Print()+0x128>
 80120b6:	4b26      	ldr	r3, [pc, #152]	@ (8012150 <WS28xxDmxMulti::Print()+0x1ec>)
 80120b8:	4a26      	ldr	r2, [pc, #152]	@ (8012154 <WS28xxDmxMulti::Print()+0x1f0>)
 80120ba:	4827      	ldr	r0, [pc, #156]	@ (8012158 <WS28xxDmxMulti::Print()+0x1f4>)
 80120bc:	21a4      	movs	r1, #164	@ 0xa4
 80120be:	f00a fa95 	bl	801c5ec <__assert_func>
 80120c2:	682c      	ldr	r4, [r5, #0]
 80120c4:	e755      	b.n	8011f72 <WS28xxDmxMulti::Print()+0xe>
 80120c6:	4b25      	ldr	r3, [pc, #148]	@ (801215c <WS28xxDmxMulti::Print()+0x1f8>)
 80120c8:	2200      	movs	r2, #0
 80120ca:	e7bd      	b.n	8012048 <WS28xxDmxMulti::Print()+0xe4>
 80120cc:	4b24      	ldr	r3, [pc, #144]	@ (8012160 <WS28xxDmxMulti::Print()+0x1fc>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	e7ba      	b.n	8012048 <WS28xxDmxMulti::Print()+0xe4>
 80120d2:	4b24      	ldr	r3, [pc, #144]	@ (8012164 <WS28xxDmxMulti::Print()+0x200>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	e7b7      	b.n	8012048 <WS28xxDmxMulti::Print()+0xe4>
 80120d8:	4b22      	ldr	r3, [pc, #136]	@ (8012164 <WS28xxDmxMulti::Print()+0x200>)
 80120da:	2200      	movs	r2, #0
 80120dc:	e7d6      	b.n	801208c <WS28xxDmxMulti::Print()+0x128>
 80120de:	4b20      	ldr	r3, [pc, #128]	@ (8012160 <WS28xxDmxMulti::Print()+0x1fc>)
 80120e0:	2200      	movs	r2, #0
 80120e2:	e7d3      	b.n	801208c <WS28xxDmxMulti::Print()+0x128>
 80120e4:	4b1d      	ldr	r3, [pc, #116]	@ (801215c <WS28xxDmxMulti::Print()+0x1f8>)
 80120e6:	2200      	movs	r2, #0
 80120e8:	e7d0      	b.n	801208c <WS28xxDmxMulti::Print()+0x128>
 80120ea:	4b1f      	ldr	r3, [pc, #124]	@ (8012168 <WS28xxDmxMulti::Print()+0x204>)
 80120ec:	2200      	movs	r2, #0
 80120ee:	e7cd      	b.n	801208c <WS28xxDmxMulti::Print()+0x128>
 80120f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012168 <WS28xxDmxMulti::Print()+0x204>)
 80120f2:	2200      	movs	r2, #0
 80120f4:	e7a8      	b.n	8012048 <WS28xxDmxMulti::Print()+0xe4>
 80120f6:	4b1d      	ldr	r3, [pc, #116]	@ (801216c <WS28xxDmxMulti::Print()+0x208>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	e7c7      	b.n	801208c <WS28xxDmxMulti::Print()+0x128>
 80120fc:	4b1b      	ldr	r3, [pc, #108]	@ (801216c <WS28xxDmxMulti::Print()+0x208>)
 80120fe:	2200      	movs	r2, #0
 8012100:	e7a2      	b.n	8012048 <WS28xxDmxMulti::Print()+0xe4>
 8012102:	4b1b      	ldr	r3, [pc, #108]	@ (8012170 <WS28xxDmxMulti::Print()+0x20c>)
 8012104:	e7c2      	b.n	801208c <WS28xxDmxMulti::Print()+0x128>
 8012106:	4b1a      	ldr	r3, [pc, #104]	@ (8012170 <WS28xxDmxMulti::Print()+0x20c>)
 8012108:	e79e      	b.n	8012048 <WS28xxDmxMulti::Print()+0xe4>
 801210a:	bf00      	nop
 801210c:	20000078 	andcs	r0, r0, r8, ror r0
 8012110:	0801e5f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, sl, sp, lr, pc}
 8012114:	0801e60c 	stmdaeq	r1, {r2, r3, r9, sl, sp, lr, pc}
 8012118:	0801e630 	stmdaeq	r1, {r4, r5, r9, sl, sp, lr, pc}
 801211c:	0801e69c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, sp, lr, pc}
 8012120:	0801e6b0 	stmdaeq	r1, {r4, r5, r7, r9, sl, sp, lr, pc}
 8012124:	0801e6c4 	stmdaeq	r1, {r2, r6, r7, r9, sl, sp, lr, pc}
 8012128:	0801e6dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, sp, lr, pc}
 801212c:	0801e6f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, sl, sp, lr, pc}
 8012130:	0801e718 	stmdaeq	r1, {r3, r4, r8, r9, sl, sp, lr, pc}
 8012134:	0801e730 	stmdaeq	r1, {r4, r5, r8, r9, sl, sp, lr, pc}
 8012138:	0801e748 	stmdaeq	r1, {r3, r6, r8, r9, sl, sp, lr, pc}
 801213c:	0801e640 	stmdaeq	r1, {r6, r9, sl, sp, lr, pc}
 8012140:	0801e684 	stmdaeq	r1, {r2, r7, r9, sl, sp, lr, pc}
 8012144:	0801e654 	stmdaeq	r1, {r2, r4, r6, r9, sl, sp, lr, pc}
 8012148:	0801e66c 	stmdaeq	r1, {r2, r3, r5, r6, r9, sl, sp, lr, pc}
 801214c:	3fd40000 	svccc	0x00d40000
 8012150:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8012154:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 8012158:	0801e5d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, sp, lr, pc}
 801215c:	3fe90000 	svccc	0x00e90000
 8012160:	3fee0000 	svccc	0x00ee0000
 8012164:	3ff18000 	svccc	0x00f18000
 8012168:	3fde0000 	svccc	0x00de0000
 801216c:	3fe40000 	svccc	0x00e40000
 8012170:	3fc40000 	svccc	0x00c40000

08012174 <WS28xxDmxMulti::Start(unsigned long)>:
 8012174:	b530      	push	{r4, r5, lr}
 8012176:	b083      	sub	sp, #12
 8012178:	460d      	mov	r5, r1
 801217a:	4604      	mov	r4, r0
 801217c:	4a0a      	ldr	r2, [pc, #40]	@ (80121a8 <WS28xxDmxMulti::Start(unsigned long)+0x34>)
 801217e:	490b      	ldr	r1, [pc, #44]	@ (80121ac <WS28xxDmxMulti::Start(unsigned long)+0x38>)
 8012180:	480b      	ldr	r0, [pc, #44]	@ (80121b0 <WS28xxDmxMulti::Start(unsigned long)+0x3c>)
 8012182:	9500      	str	r5, [sp, #0]
 8012184:	234b      	movs	r3, #75	@ 0x4b
 8012186:	f00a f951 	bl	801c42c <printf>
 801218a:	68a0      	ldr	r0, [r4, #8]
 801218c:	b128      	cbz	r0, 801219a <WS28xxDmxMulti::Start(unsigned long)+0x26>
 801218e:	2101      	movs	r1, #1
 8012190:	40a9      	lsls	r1, r5
 8012192:	4301      	orrs	r1, r0
 8012194:	60a1      	str	r1, [r4, #8]
 8012196:	b003      	add	sp, #12
 8012198:	bd30      	pop	{r4, r5, pc}
 801219a:	4b06      	ldr	r3, [pc, #24]	@ (80121b4 <WS28xxDmxMulti::Start(unsigned long)+0x40>)
 801219c:	2204      	movs	r2, #4
 801219e:	f8c3 2818 	str.w	r2, [r3, #2072]	@ 0x818
 80121a2:	68a0      	ldr	r0, [r4, #8]
 80121a4:	e7f3      	b.n	801218e <WS28xxDmxMulti::Start(unsigned long)+0x1a>
 80121a6:	bf00      	nop
 80121a8:	0801e75c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, sp, lr, pc}
 80121ac:	0801e77c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, sl, sp, lr, pc}
 80121b0:	0801e784 	stmdaeq	r1, {r2, r7, r8, r9, sl, sp, lr, pc}
 80121b4:	40020000 	andmi	r0, r2, r0

080121b8 <WS28xxDmxMulti::Blackout(bool)>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4604      	mov	r4, r0
 80121bc:	460d      	mov	r5, r1
 80121be:	7301      	strb	r1, [r0, #12]
 80121c0:	6860      	ldr	r0, [r4, #4]
 80121c2:	f001 fd1f 	bl	8013c04 <WS28xxMulti::IsUpdating()>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d1fa      	bne.n	80121c0 <WS28xxDmxMulti::Blackout(bool)+0x8>
 80121ca:	6860      	ldr	r0, [r4, #4]
 80121cc:	b11d      	cbz	r5, 80121d6 <WS28xxDmxMulti::Blackout(bool)+0x1e>
 80121ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121d2:	f002 bc23 	b.w	8014a1c <WS28xxMulti::Blackout()>
 80121d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121da:	f001 bc21 	b.w	8013a20 <WS28xxMulti::Update()>
 80121de:	bf00      	nop

080121e0 <WS28xxDmxMulti::Stop(unsigned long)>:
 80121e0:	b530      	push	{r4, r5, lr}
 80121e2:	b083      	sub	sp, #12
 80121e4:	460c      	mov	r4, r1
 80121e6:	4605      	mov	r5, r0
 80121e8:	4a0b      	ldr	r2, [pc, #44]	@ (8012218 <WS28xxDmxMulti::Stop(unsigned long)+0x38>)
 80121ea:	490c      	ldr	r1, [pc, #48]	@ (801221c <WS28xxDmxMulti::Stop(unsigned long)+0x3c>)
 80121ec:	480c      	ldr	r0, [pc, #48]	@ (8012220 <WS28xxDmxMulti::Stop(unsigned long)+0x40>)
 80121ee:	9400      	str	r4, [sp, #0]
 80121f0:	2357      	movs	r3, #87	@ 0x57
 80121f2:	f00a f91b 	bl	801c42c <printf>
 80121f6:	68ab      	ldr	r3, [r5, #8]
 80121f8:	2201      	movs	r2, #1
 80121fa:	40a2      	lsls	r2, r4
 80121fc:	4213      	tst	r3, r2
 80121fe:	bf1c      	itt	ne
 8012200:	4393      	bicne	r3, r2
 8012202:	60ab      	strne	r3, [r5, #8]
 8012204:	b10b      	cbz	r3, 801220a <WS28xxDmxMulti::Stop(unsigned long)+0x2a>
 8012206:	b003      	add	sp, #12
 8012208:	bd30      	pop	{r4, r5, pc}
 801220a:	4806      	ldr	r0, [pc, #24]	@ (8012224 <WS28xxDmxMulti::Stop(unsigned long)+0x44>)
 801220c:	2104      	movs	r1, #4
 801220e:	f8c0 1828 	str.w	r1, [r0, #2088]	@ 0x828
 8012212:	b003      	add	sp, #12
 8012214:	bd30      	pop	{r4, r5, pc}
 8012216:	bf00      	nop
 8012218:	0801e75c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, sp, lr, pc}
 801221c:	0801e79c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, sp, lr, pc}
 8012220:	0801e784 	stmdaeq	r1, {r2, r7, r8, r9, sl, sp, lr, pc}
 8012224:	40020000 	andmi	r0, r2, r0

08012228 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8012228:	b538      	push	{r3, r4, r5, lr}
 801222a:	6845      	ldr	r5, [r0, #4]
 801222c:	4b08      	ldr	r3, [pc, #32]	@ (8012250 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x28>)
 801222e:	6003      	str	r3, [r0, #0]
 8012230:	4604      	mov	r4, r0
 8012232:	b135      	cbz	r5, 8012242 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1a>
 8012234:	4628      	mov	r0, r5
 8012236:	f001 faa9 	bl	801378c <WS28xxMulti::~WS28xxMulti()>
 801223a:	2104      	movs	r1, #4
 801223c:	4628      	mov	r0, r5
 801223e:	f00a fb49 	bl	801c8d4 <operator delete(void*, unsigned int)>
 8012242:	4620      	mov	r0, r4
 8012244:	2110      	movs	r1, #16
 8012246:	f00a fb45 	bl	801c8d4 <operator delete(void*, unsigned int)>
 801224a:	4620      	mov	r0, r4
 801224c:	bd38      	pop	{r3, r4, r5, pc}
 801224e:	bf00      	nop
 8012250:	08020e6c 	stmdaeq	r2, {r2, r3, r5, r6, r9, sl, fp}

08012254 <WS28xxDmxMulti::WS28xxDmxMulti()>:
 8012254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012256:	4605      	mov	r5, r0
 8012258:	48b4      	ldr	r0, [pc, #720]	@ (801252c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2d8>)
 801225a:	4eb5      	ldr	r6, [pc, #724]	@ (8012530 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2dc>)
 801225c:	4ab5      	ldr	r2, [pc, #724]	@ (8012534 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e0>)
 801225e:	49b6      	ldr	r1, [pc, #728]	@ (8012538 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e4>)
 8012260:	2300      	movs	r3, #0
 8012262:	e9c5 0300 	strd	r0, r3, [r5]
 8012266:	60ab      	str	r3, [r5, #8]
 8012268:	732b      	strb	r3, [r5, #12]
 801226a:	48b4      	ldr	r0, [pc, #720]	@ (801253c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 801226c:	2335      	movs	r3, #53	@ 0x35
 801226e:	f00a f8dd 	bl	801c42c <printf>
 8012272:	6834      	ldr	r4, [r6, #0]
 8012274:	2c00      	cmp	r4, #0
 8012276:	f000 8199 	beq.w	80125ac <WS28xxDmxMulti::WS28xxDmxMulti()+0x358>
 801227a:	4ab1      	ldr	r2, [pc, #708]	@ (8012540 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 801227c:	49b1      	ldr	r1, [pc, #708]	@ (8012544 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f0>)
 801227e:	48af      	ldr	r0, [pc, #700]	@ (801253c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 8012280:	2367      	movs	r3, #103	@ 0x67
 8012282:	f00a f8d3 	bl	801c42c <printf>
 8012286:	4aae      	ldr	r2, [pc, #696]	@ (8012540 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8012288:	49af      	ldr	r1, [pc, #700]	@ (8012548 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 801228a:	48ac      	ldr	r0, [pc, #688]	@ (801253c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 801228c:	2397      	movs	r3, #151	@ 0x97
 801228e:	f00a f8cd 	bl	801c42c <printf>
 8012292:	68e2      	ldr	r2, [r4, #12]
 8012294:	6827      	ldr	r7, [r4, #0]
 8012296:	2a07      	cmp	r2, #7
 8012298:	f000 80dd 	beq.w	8012456 <WS28xxDmxMulti::WS28xxDmxMulti()+0x202>
 801229c:	f5b7 7f2a 	cmp.w	r7, #680	@ 0x2a8
 80122a0:	f1a2 030b 	sub.w	r3, r2, #11
 80122a4:	bf28      	it	cs
 80122a6:	f44f 772a 	movcs.w	r7, #680	@ 0x2a8
 80122aa:	2103      	movs	r1, #3
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	6926      	ldr	r6, [r4, #16]
 80122b0:	6027      	str	r7, [r4, #0]
 80122b2:	60a1      	str	r1, [r4, #8]
 80122b4:	f200 8161 	bhi.w	801257a <WS28xxDmxMulti::WS28xxDmxMulti()+0x326>
 80122b8:	7de2      	ldrb	r2, [r4, #23]
 80122ba:	2a1f      	cmp	r2, #31
 80122bc:	bf8c      	ite	hi
 80122be:	22ff      	movhi	r2, #255	@ 0xff
 80122c0:	f062 021f 	ornls	r2, r2, #31
 80122c4:	75e2      	strb	r2, [r4, #23]
 80122c6:	2200      	movs	r2, #0
 80122c8:	2e06      	cmp	r6, #6
 80122ca:	7522      	strb	r2, [r4, #20]
 80122cc:	f000 80e5 	beq.w	801249a <WS28xxDmxMulti::WS28xxDmxMulti()+0x246>
 80122d0:	6866      	ldr	r6, [r4, #4]
 80122d2:	2e00      	cmp	r6, #0
 80122d4:	f040 80ae 	bne.w	8012434 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1e0>
 80122d8:	4e9c      	ldr	r6, [pc, #624]	@ (801254c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f8>)
 80122da:	6066      	str	r6, [r4, #4]
 80122dc:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80122e0:	0057      	lsls	r7, r2, #1
 80122e2:	489b      	ldr	r0, [pc, #620]	@ (8012550 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 80122e4:	fbb0 f3f7 	udiv	r3, r0, r7
 80122e8:	61a3      	str	r3, [r4, #24]
 80122ea:	4a95      	ldr	r2, [pc, #596]	@ (8012540 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 80122ec:	4996      	ldr	r1, [pc, #600]	@ (8012548 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 80122ee:	4899      	ldr	r0, [pc, #612]	@ (8012554 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 80122f0:	23f2      	movs	r3, #242	@ 0xf2
 80122f2:	f00a f89b 	bl	801c42c <printf>
 80122f6:	7d20      	ldrb	r0, [r4, #20]
 80122f8:	2800      	cmp	r0, #0
 80122fa:	d13f      	bne.n	801237c <WS28xxDmxMulti::WS28xxDmxMulti()+0x128>
 80122fc:	68e6      	ldr	r6, [r4, #12]
 80122fe:	b126      	cbz	r6, 801230a <WS28xxDmxMulti::WS28xxDmxMulti()+0xb6>
 8012300:	f1a6 010b 	sub.w	r1, r6, #11
 8012304:	2901      	cmp	r1, #1
 8012306:	bf88      	it	hi
 8012308:	60e0      	strhi	r0, [r4, #12]
 801230a:	4a8d      	ldr	r2, [pc, #564]	@ (8012540 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 801230c:	498e      	ldr	r1, [pc, #568]	@ (8012548 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 801230e:	488b      	ldr	r0, [pc, #556]	@ (801253c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e8>)
 8012310:	2397      	movs	r3, #151	@ 0x97
 8012312:	f00a f88b 	bl	801c42c <printf>
 8012316:	68e0      	ldr	r0, [r4, #12]
 8012318:	6827      	ldr	r7, [r4, #0]
 801231a:	2807      	cmp	r0, #7
 801231c:	f000 80da 	beq.w	80124d4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x280>
 8012320:	f5b7 7f2a 	cmp.w	r7, #680	@ 0x2a8
 8012324:	f1a0 020b 	sub.w	r2, r0, #11
 8012328:	bf28      	it	cs
 801232a:	f44f 772a 	movcs.w	r7, #680	@ 0x2a8
 801232e:	2603      	movs	r6, #3
 8012330:	2a01      	cmp	r2, #1
 8012332:	4639      	mov	r1, r7
 8012334:	6027      	str	r7, [r4, #0]
 8012336:	60a6      	str	r6, [r4, #8]
 8012338:	6927      	ldr	r7, [r4, #16]
 801233a:	f200 80ee 	bhi.w	801251a <WS28xxDmxMulti::WS28xxDmxMulti()+0x2c6>
 801233e:	7de0      	ldrb	r0, [r4, #23]
 8012340:	281f      	cmp	r0, #31
 8012342:	bf8c      	ite	hi
 8012344:	20ff      	movhi	r0, #255	@ 0xff
 8012346:	f060 001f 	ornls	r0, r0, #31
 801234a:	2200      	movs	r2, #0
 801234c:	2f06      	cmp	r7, #6
 801234e:	75e0      	strb	r0, [r4, #23]
 8012350:	7522      	strb	r2, [r4, #20]
 8012352:	f000 813d 	beq.w	80125d0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x37c>
 8012356:	6867      	ldr	r7, [r4, #4]
 8012358:	2f00      	cmp	r7, #0
 801235a:	f040 80a3 	bne.w	80124a4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x250>
 801235e:	4f7b      	ldr	r7, [pc, #492]	@ (801254c <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f8>)
 8012360:	6067      	str	r7, [r4, #4]
 8012362:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8012366:	0051      	lsls	r1, r2, #1
 8012368:	4e79      	ldr	r6, [pc, #484]	@ (8012550 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 801236a:	fbb6 f7f1 	udiv	r7, r6, r1
 801236e:	4a74      	ldr	r2, [pc, #464]	@ (8012540 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 8012370:	4975      	ldr	r1, [pc, #468]	@ (8012548 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f4>)
 8012372:	4878      	ldr	r0, [pc, #480]	@ (8012554 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 8012374:	61a7      	str	r7, [r4, #24]
 8012376:	23f2      	movs	r3, #242	@ 0xf2
 8012378:	f00a f858 	bl	801c42c <printf>
 801237c:	68e1      	ldr	r1, [r4, #12]
 801237e:	4a76      	ldr	r2, [pc, #472]	@ (8012558 <WS28xxDmxMulti::WS28xxDmxMulti()+0x304>)
 8012380:	6a20      	ldr	r0, [r4, #32]
 8012382:	4b76      	ldr	r3, [pc, #472]	@ (801255c <WS28xxDmxMulti::WS28xxDmxMulti()+0x308>)
 8012384:	6827      	ldr	r7, [r4, #0]
 8012386:	2907      	cmp	r1, #7
 8012388:	bf16      	itet	ne
 801238a:	4613      	movne	r3, r2
 801238c:	f44f 72c0 	moveq.w	r2, #384	@ 0x180
 8012390:	f44f 72ff 	movne.w	r2, #510	@ 0x1fe
 8012394:	f04f 0600 	mov.w	r6, #0
 8012398:	8762      	strh	r2, [r4, #58]	@ 0x3a
 801239a:	f8c4 3036 	str.w	r3, [r4, #54]	@ 0x36
 801239e:	86a6      	strh	r6, [r4, #52]	@ 0x34
 80123a0:	bf0c      	ite	eq
 80123a2:	2281      	moveq	r2, #129	@ 0x81
 80123a4:	22ab      	movne	r2, #171	@ 0xab
 80123a6:	2800      	cmp	r0, #0
 80123a8:	d04f      	beq.n	801244a <WS28xxDmxMulti::WS28xxDmxMulti()+0x1f6>
 80123aa:	42b8      	cmp	r0, r7
 80123ac:	d84d      	bhi.n	801244a <WS28xxDmxMulti::WS28xxDmxMulti()+0x1f6>
 80123ae:	fbb7 f3f0 	udiv	r3, r7, r0
 80123b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80123b6:	3101      	adds	r1, #1
 80123b8:	fa1f fe81 	uxth.w	lr, r1
 80123bc:	69e6      	ldr	r6, [r4, #28]
 80123be:	68a2      	ldr	r2, [r4, #8]
 80123c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80123c2:	2e08      	cmp	r6, #8
 80123c4:	bf28      	it	cs
 80123c6:	2608      	movcs	r6, #8
 80123c8:	fb16 fc0e 	smulbb	ip, r6, lr
 80123cc:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 80123d0:	fb02 f303 	mul.w	r3, r2, r3
 80123d4:	62a1      	str	r1, [r4, #40]	@ 0x28
 80123d6:	4a5a      	ldr	r2, [pc, #360]	@ (8012540 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2ec>)
 80123d8:	495a      	ldr	r1, [pc, #360]	@ (8012544 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2f0>)
 80123da:	6323      	str	r3, [r4, #48]	@ 0x30
 80123dc:	61e6      	str	r6, [r4, #28]
 80123de:	2392      	movs	r3, #146	@ 0x92
 80123e0:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 80123e2:	485c      	ldr	r0, [pc, #368]	@ (8012554 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 80123e4:	4f5e      	ldr	r7, [pc, #376]	@ (8012560 <WS28xxDmxMulti::WS28xxDmxMulti()+0x30c>)
 80123e6:	f00a f821 	bl	801c42c <printf>
 80123ea:	2004      	movs	r0, #4
 80123ec:	f00a fa74 	bl	801c8d8 <operator new(unsigned int)>
 80123f0:	4604      	mov	r4, r0
 80123f2:	f002 f8b9 	bl	8014568 <WS28xxMulti::WS28xxMulti()>
 80123f6:	4620      	mov	r0, r4
 80123f8:	606c      	str	r4, [r5, #4]
 80123fa:	f002 fb0f 	bl	8014a1c <WS28xxMulti::Blackout()>
 80123fe:	f640 4002 	movw	r0, #3074	@ 0xc02
 8012402:	f008 fa9f 	bl	801a944 <rcu_periph_clock_enable>
 8012406:	4857      	ldr	r0, [pc, #348]	@ (8012564 <WS28xxDmxMulti::WS28xxDmxMulti()+0x310>)
 8012408:	2304      	movs	r3, #4
 801240a:	2200      	movs	r2, #0
 801240c:	2101      	movs	r1, #1
 801240e:	f008 fa17 	bl	801a840 <gpio_mode_set>
 8012412:	4854      	ldr	r0, [pc, #336]	@ (8012564 <WS28xxDmxMulti::WS28xxDmxMulti()+0x310>)
 8012414:	2304      	movs	r3, #4
 8012416:	2202      	movs	r2, #2
 8012418:	2100      	movs	r1, #0
 801241a:	f008 fa33 	bl	801a884 <gpio_output_options_set>
 801241e:	2304      	movs	r3, #4
 8012420:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8012424:	4a43      	ldr	r2, [pc, #268]	@ (8012534 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e0>)
 8012426:	4944      	ldr	r1, [pc, #272]	@ (8012538 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2e4>)
 8012428:	484a      	ldr	r0, [pc, #296]	@ (8012554 <WS28xxDmxMulti::WS28xxDmxMulti()+0x300>)
 801242a:	2342      	movs	r3, #66	@ 0x42
 801242c:	f009 fffe 	bl	801c42c <printf>
 8012430:	4628      	mov	r0, r5
 8012432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012434:	484c      	ldr	r0, [pc, #304]	@ (8012568 <WS28xxDmxMulti::WS28xxDmxMulti()+0x314>)
 8012436:	4286      	cmp	r6, r0
 8012438:	d831      	bhi.n	801249e <WS28xxDmxMulti::WS28xxDmxMulti()+0x24a>
 801243a:	4b4c      	ldr	r3, [pc, #304]	@ (801256c <WS28xxDmxMulti::WS28xxDmxMulti()+0x318>)
 801243c:	fbb3 f1f6 	udiv	r1, r3, r6
 8012440:	fb07 f101 	mul.w	r1, r7, r1
 8012444:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8012448:	e74b      	b.n	80122e2 <WS28xxDmxMulti::WS28xxDmxMulti()+0x8e>
 801244a:	f04f 0e01 	mov.w	lr, #1
 801244e:	6227      	str	r7, [r4, #32]
 8012450:	4671      	mov	r1, lr
 8012452:	4673      	mov	r3, lr
 8012454:	e7b2      	b.n	80123bc <WS28xxDmxMulti::WS28xxDmxMulti()+0x168>
 8012456:	6923      	ldr	r3, [r4, #16]
 8012458:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 801245c:	bf28      	it	cs
 801245e:	f44f 7700 	movcs.w	r7, #512	@ 0x200
 8012462:	2104      	movs	r1, #4
 8012464:	2601      	movs	r6, #1
 8012466:	2b06      	cmp	r3, #6
 8012468:	6027      	str	r7, [r4, #0]
 801246a:	60a1      	str	r1, [r4, #8]
 801246c:	7526      	strb	r6, [r4, #20]
 801246e:	f000 8106 	beq.w	801267e <WS28xxDmxMulti::WS28xxDmxMulti()+0x42a>
 8012472:	7d60      	ldrb	r0, [r4, #21]
 8012474:	f894 e016 	ldrb.w	lr, [r4, #22]
 8012478:	4586      	cmp	lr, r0
 801247a:	d81e      	bhi.n	80124ba <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 801247c:	2600      	movs	r6, #0
 801247e:	2a03      	cmp	r2, #3
 8012480:	f8a4 6015 	strh.w	r6, [r4, #21]
 8012484:	f000 808f 	beq.w	80125a6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x352>
 8012488:	3a08      	subs	r2, #8
 801248a:	2a02      	cmp	r2, #2
 801248c:	f200 80cf 	bhi.w	801262e <WS28xxDmxMulti::WS28xxDmxMulti()+0x3da>
 8012490:	23fc      	movs	r3, #252	@ 0xfc
 8012492:	75a3      	strb	r3, [r4, #22]
 8012494:	20c0      	movs	r0, #192	@ 0xc0
 8012496:	7560      	strb	r0, [r4, #21]
 8012498:	e011      	b.n	80124be <WS28xxDmxMulti::WS28xxDmxMulti()+0x26a>
 801249a:	6122      	str	r2, [r4, #16]
 801249c:	e718      	b.n	80122d0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x7c>
 801249e:	6060      	str	r0, [r4, #4]
 80124a0:	2700      	movs	r7, #0
 80124a2:	e71e      	b.n	80122e2 <WS28xxDmxMulti::WS28xxDmxMulti()+0x8e>
 80124a4:	4e30      	ldr	r6, [pc, #192]	@ (8012568 <WS28xxDmxMulti::WS28xxDmxMulti()+0x314>)
 80124a6:	42b7      	cmp	r7, r6
 80124a8:	d864      	bhi.n	8012574 <WS28xxDmxMulti::WS28xxDmxMulti()+0x320>
 80124aa:	4b30      	ldr	r3, [pc, #192]	@ (801256c <WS28xxDmxMulti::WS28xxDmxMulti()+0x318>)
 80124ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80124b0:	fb01 f000 	mul.w	r0, r1, r0
 80124b4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80124b8:	e756      	b.n	8012368 <WS28xxDmxMulti::WS28xxDmxMulti()+0x114>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d0ea      	beq.n	8012494 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 80124be:	fb07 f101 	mul.w	r1, r7, r1
 80124c2:	4e2b      	ldr	r6, [pc, #172]	@ (8012570 <WS28xxDmxMulti::WS28xxDmxMulti()+0x31c>)
 80124c4:	4f22      	ldr	r7, [pc, #136]	@ (8012550 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2fc>)
 80124c6:	6066      	str	r6, [r4, #4]
 80124c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80124cc:	004a      	lsls	r2, r1, #1
 80124ce:	fbb7 f3f2 	udiv	r3, r7, r2
 80124d2:	e709      	b.n	80122e8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x94>
 80124d4:	f5b7 7f00 	cmp.w	r7, #512	@ 0x200
 80124d8:	bf28      	it	cs
 80124da:	f44f 7700 	movcs.w	r7, #512	@ 0x200
 80124de:	4639      	mov	r1, r7
 80124e0:	6027      	str	r7, [r4, #0]
 80124e2:	6927      	ldr	r7, [r4, #16]
 80124e4:	2604      	movs	r6, #4
 80124e6:	2301      	movs	r3, #1
 80124e8:	2f06      	cmp	r7, #6
 80124ea:	60a6      	str	r6, [r4, #8]
 80124ec:	7523      	strb	r3, [r4, #20]
 80124ee:	f000 80cb 	beq.w	8012688 <WS28xxDmxMulti::WS28xxDmxMulti()+0x434>
 80124f2:	7d63      	ldrb	r3, [r4, #21]
 80124f4:	f894 e016 	ldrb.w	lr, [r4, #22]
 80124f8:	459e      	cmp	lr, r3
 80124fa:	d86d      	bhi.n	80125d8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 80124fc:	2200      	movs	r2, #0
 80124fe:	2803      	cmp	r0, #3
 8012500:	f8a4 2015 	strh.w	r2, [r4, #21]
 8012504:	f000 80a7 	beq.w	8012656 <WS28xxDmxMulti::WS28xxDmxMulti()+0x402>
 8012508:	3808      	subs	r0, #8
 801250a:	2802      	cmp	r0, #2
 801250c:	f200 80b5 	bhi.w	801267a <WS28xxDmxMulti::WS28xxDmxMulti()+0x426>
 8012510:	27fc      	movs	r7, #252	@ 0xfc
 8012512:	75a7      	strb	r7, [r4, #22]
 8012514:	23c0      	movs	r3, #192	@ 0xc0
 8012516:	7563      	strb	r3, [r4, #21]
 8012518:	e060      	b.n	80125dc <WS28xxDmxMulti::WS28xxDmxMulti()+0x388>
 801251a:	2800      	cmp	r0, #0
 801251c:	d169      	bne.n	80125f2 <WS28xxDmxMulti::WS28xxDmxMulti()+0x39e>
 801251e:	2f06      	cmp	r7, #6
 8012520:	7520      	strb	r0, [r4, #20]
 8012522:	f47f af18 	bne.w	8012356 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 8012526:	6120      	str	r0, [r4, #16]
 8012528:	e715      	b.n	8012356 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 801252a:	bf00      	nop
 801252c:	08020e6c 	stmdaeq	r2, {r2, r3, r5, r6, r9, sl, fp}
 8012530:	20000078 	andcs	r0, r0, r8, ror r0
 8012534:	0801e7a4 	stmdaeq	r1, {r2, r5, r7, r8, r9, sl, sp, lr, pc}
 8012538:	0801e75c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, sp, lr, pc}
 801253c:	0801e7b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 8012540:	0801e7c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sl, sp, lr, pc}
 8012544:	0801e5d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, sp, lr, pc}
 8012548:	0801e7d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, sp, lr, pc}
 801254c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8012550:	000f4240 	andeq	r4, pc, r0, asr #4
 8012554:	0801e7fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 8012558:	015400aa 	cmpeq	r4, sl, lsr #1
 801255c:	01000080 	smlabbeq	r0, r0, r0, r0
 8012560:	40020000 	andmi	r0, r2, r0
 8012564:	40020800 	andmi	r0, r2, r0, lsl #16
 8012568:	017d7840 	cmneq	sp, r0, asr #16
 801256c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8012570:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8012574:	6066      	str	r6, [r4, #4]
 8012576:	2100      	movs	r1, #0
 8012578:	e6f6      	b.n	8012368 <WS28xxDmxMulti::WS28xxDmxMulti()+0x114>
 801257a:	2a00      	cmp	r2, #0
 801257c:	f43f aea4 	beq.w	80122c8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x74>
 8012580:	2a0d      	cmp	r2, #13
 8012582:	d01b      	beq.n	80125bc <WS28xxDmxMulti::WS28xxDmxMulti()+0x368>
 8012584:	2001      	movs	r0, #1
 8012586:	2a0e      	cmp	r2, #14
 8012588:	7520      	strb	r0, [r4, #20]
 801258a:	d140      	bne.n	801260e <WS28xxDmxMulti::WS28xxDmxMulti()+0x3ba>
 801258c:	2e06      	cmp	r6, #6
 801258e:	7d60      	ldrb	r0, [r4, #21]
 8012590:	7da3      	ldrb	r3, [r4, #22]
 8012592:	60e1      	str	r1, [r4, #12]
 8012594:	bf04      	itt	eq
 8012596:	2202      	moveq	r2, #2
 8012598:	6122      	streq	r2, [r4, #16]
 801259a:	4283      	cmp	r3, r0
 801259c:	d88d      	bhi.n	80124ba <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 801259e:	f04f 0c00 	mov.w	ip, #0
 80125a2:	f8a4 c015 	strh.w	ip, [r4, #21]
 80125a6:	23f8      	movs	r3, #248	@ 0xf8
 80125a8:	75a3      	strb	r3, [r4, #22]
 80125aa:	e773      	b.n	8012494 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 80125ac:	4b39      	ldr	r3, [pc, #228]	@ (8012694 <WS28xxDmxMulti::WS28xxDmxMulti()+0x440>)
 80125ae:	4a3a      	ldr	r2, [pc, #232]	@ (8012698 <WS28xxDmxMulti::WS28xxDmxMulti()+0x444>)
 80125b0:	483a      	ldr	r0, [pc, #232]	@ (801269c <WS28xxDmxMulti::WS28xxDmxMulti()+0x448>)
 80125b2:	21a4      	movs	r1, #164	@ 0xa4
 80125b4:	f00a f81a 	bl	801c5ec <__assert_func>
 80125b8:	6834      	ldr	r4, [r6, #0]
 80125ba:	e65e      	b.n	801227a <WS28xxDmxMulti::WS28xxDmxMulti()+0x26>
 80125bc:	2100      	movs	r1, #0
 80125be:	2e06      	cmp	r6, #6
 80125c0:	7521      	strb	r1, [r4, #20]
 80125c2:	d007      	beq.n	80125d4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x380>
 80125c4:	6866      	ldr	r6, [r4, #4]
 80125c6:	2e00      	cmp	r6, #0
 80125c8:	f43f ae86 	beq.w	80122d8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x84>
 80125cc:	4834      	ldr	r0, [pc, #208]	@ (80126a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x44c>)
 80125ce:	e732      	b.n	8012436 <WS28xxDmxMulti::WS28xxDmxMulti()+0x1e2>
 80125d0:	6122      	str	r2, [r4, #16]
 80125d2:	e6c0      	b.n	8012356 <WS28xxDmxMulti::WS28xxDmxMulti()+0x102>
 80125d4:	6121      	str	r1, [r4, #16]
 80125d6:	e7f5      	b.n	80125c4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x370>
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d09b      	beq.n	8012514 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2c0>
 80125dc:	fb06 fc01 	mul.w	ip, r6, r1
 80125e0:	4a30      	ldr	r2, [pc, #192]	@ (80126a4 <WS28xxDmxMulti::WS28xxDmxMulti()+0x450>)
 80125e2:	4e31      	ldr	r6, [pc, #196]	@ (80126a8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x454>)
 80125e4:	6062      	str	r2, [r4, #4]
 80125e6:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 80125ea:	0048      	lsls	r0, r1, #1
 80125ec:	fbb6 f7f0 	udiv	r7, r6, r0
 80125f0:	e6bd      	b.n	801236e <WS28xxDmxMulti::WS28xxDmxMulti()+0x11a>
 80125f2:	280d      	cmp	r0, #13
 80125f4:	d11e      	bne.n	8012634 <WS28xxDmxMulti::WS28xxDmxMulti()+0x3e0>
 80125f6:	2f06      	cmp	r7, #6
 80125f8:	6867      	ldr	r7, [r4, #4]
 80125fa:	f04f 0300 	mov.w	r3, #0
 80125fe:	7523      	strb	r3, [r4, #20]
 8012600:	bf08      	it	eq
 8012602:	6123      	streq	r3, [r4, #16]
 8012604:	2f00      	cmp	r7, #0
 8012606:	f43f aeaa 	beq.w	801235e <WS28xxDmxMulti::WS28xxDmxMulti()+0x10a>
 801260a:	4e25      	ldr	r6, [pc, #148]	@ (80126a0 <WS28xxDmxMulti::WS28xxDmxMulti()+0x44c>)
 801260c:	e74b      	b.n	80124a6 <WS28xxDmxMulti::WS28xxDmxMulti()+0x252>
 801260e:	2e06      	cmp	r6, #6
 8012610:	f47f af2f 	bne.w	8012472 <WS28xxDmxMulti::WS28xxDmxMulti()+0x21e>
 8012614:	1e53      	subs	r3, r2, #1
 8012616:	2b09      	cmp	r3, #9
 8012618:	d931      	bls.n	801267e <WS28xxDmxMulti::WS28xxDmxMulti()+0x42a>
 801261a:	7d60      	ldrb	r0, [r4, #21]
 801261c:	7da6      	ldrb	r6, [r4, #22]
 801261e:	2202      	movs	r2, #2
 8012620:	4286      	cmp	r6, r0
 8012622:	6122      	str	r2, [r4, #16]
 8012624:	f63f af49 	bhi.w	80124ba <WS28xxDmxMulti::WS28xxDmxMulti()+0x266>
 8012628:	2000      	movs	r0, #0
 801262a:	f8a4 0015 	strh.w	r0, [r4, #21]
 801262e:	23f0      	movs	r3, #240	@ 0xf0
 8012630:	75a3      	strb	r3, [r4, #22]
 8012632:	e72f      	b.n	8012494 <WS28xxDmxMulti::WS28xxDmxMulti()+0x240>
 8012634:	2301      	movs	r3, #1
 8012636:	280e      	cmp	r0, #14
 8012638:	7523      	strb	r3, [r4, #20]
 801263a:	d10e      	bne.n	801265a <WS28xxDmxMulti::WS28xxDmxMulti()+0x406>
 801263c:	2f06      	cmp	r7, #6
 801263e:	bf04      	itt	eq
 8012640:	2302      	moveq	r3, #2
 8012642:	6123      	streq	r3, [r4, #16]
 8012644:	7da7      	ldrb	r7, [r4, #22]
 8012646:	7d63      	ldrb	r3, [r4, #21]
 8012648:	60e6      	str	r6, [r4, #12]
 801264a:	429f      	cmp	r7, r3
 801264c:	d8c4      	bhi.n	80125d8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 801264e:	2600      	movs	r6, #0
 8012650:	f8a4 6015 	strh.w	r6, [r4, #21]
 8012654:	2603      	movs	r6, #3
 8012656:	27f8      	movs	r7, #248	@ 0xf8
 8012658:	e75b      	b.n	8012512 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2be>
 801265a:	2f06      	cmp	r7, #6
 801265c:	f47f af49 	bne.w	80124f2 <WS28xxDmxMulti::WS28xxDmxMulti()+0x29e>
 8012660:	1e47      	subs	r7, r0, #1
 8012662:	2f09      	cmp	r7, #9
 8012664:	d910      	bls.n	8012688 <WS28xxDmxMulti::WS28xxDmxMulti()+0x434>
 8012666:	7d63      	ldrb	r3, [r4, #21]
 8012668:	f894 c016 	ldrb.w	ip, [r4, #22]
 801266c:	2002      	movs	r0, #2
 801266e:	459c      	cmp	ip, r3
 8012670:	6120      	str	r0, [r4, #16]
 8012672:	d8b1      	bhi.n	80125d8 <WS28xxDmxMulti::WS28xxDmxMulti()+0x384>
 8012674:	2200      	movs	r2, #0
 8012676:	f8a4 2015 	strh.w	r2, [r4, #21]
 801267a:	27f0      	movs	r7, #240	@ 0xf0
 801267c:	e749      	b.n	8012512 <WS28xxDmxMulti::WS28xxDmxMulti()+0x2be>
 801267e:	480b      	ldr	r0, [pc, #44]	@ (80126ac <WS28xxDmxMulti::WS28xxDmxMulti()+0x458>)
 8012680:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8012684:	6123      	str	r3, [r4, #16]
 8012686:	e6f4      	b.n	8012472 <WS28xxDmxMulti::WS28xxDmxMulti()+0x21e>
 8012688:	4a08      	ldr	r2, [pc, #32]	@ (80126ac <WS28xxDmxMulti::WS28xxDmxMulti()+0x458>)
 801268a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 801268e:	6127      	str	r7, [r4, #16]
 8012690:	e72f      	b.n	80124f2 <WS28xxDmxMulti::WS28xxDmxMulti()+0x29e>
 8012692:	bf00      	nop
 8012694:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8012698:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 801269c:	0801e5d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, sp, lr, pc}
 80126a0:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80126a4:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80126a8:	000f4240 	andeq	r4, pc, r0, asr #4
 80126ac:	08020e3c 	stmdaeq	r2, {r2, r3, r4, r5, r9, sl, fp}

080126b0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>:
 80126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	b0a1      	sub	sp, #132	@ 0x84
 80126b6:	4604      	mov	r4, r0
 80126b8:	460f      	mov	r7, r1
 80126ba:	9305      	str	r3, [sp, #20]
 80126bc:	4692      	mov	sl, r2
 80126be:	2a00      	cmp	r2, #0
 80126c0:	f000 8244 	beq.w	8012b4c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x49c>
 80126c4:	9b05      	ldr	r3, [sp, #20]
 80126c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80126ca:	f200 824a 	bhi.w	8012b62 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4b2>
 80126ce:	4d98      	ldr	r5, [pc, #608]	@ (8012930 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x280>)
 80126d0:	682e      	ldr	r6, [r5, #0]
 80126d2:	2e00      	cmp	r6, #0
 80126d4:	f000 8250 	beq.w	8012b78 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4c8>
 80126d8:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 80126da:	fbb7 f5f0 	udiv	r5, r7, r0
 80126de:	fb00 7115 	mls	r1, r0, r5, r7
 80126e2:	eb06 0241 	add.w	r2, r6, r1, lsl #1
 80126e6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80126e8:	f8b2 8034 	ldrh.w	r8, [r2, #52]	@ 0x34
 80126ec:	68b3      	ldr	r3, [r6, #8]
 80126ee:	9f05      	ldr	r7, [sp, #20]
 80126f0:	fbb7 f7f3 	udiv	r7, r7, r3
 80126f4:	4447      	add	r7, r8
 80126f6:	4287      	cmp	r7, r0
 80126f8:	68f1      	ldr	r1, [r6, #12]
 80126fa:	f8d6 b020 	ldr.w	fp, [r6, #32]
 80126fe:	f896 9014 	ldrb.w	r9, [r6, #20]
 8012702:	9106      	str	r1, [sp, #24]
 8012704:	bf28      	it	cs
 8012706:	4607      	movcs	r7, r0
 8012708:	2b03      	cmp	r3, #3
 801270a:	f000 8093 	beq.w	8012834 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x184>
 801270e:	2b04      	cmp	r3, #4
 8012710:	f040 8215 	bne.w	8012b3e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x48e>
 8012714:	f1b9 0f00 	cmp.w	r9, #0
 8012718:	f000 8236 	beq.w	8012b88 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4d8>
 801271c:	4547      	cmp	r7, r8
 801271e:	f240 8086 	bls.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012722:	9e05      	ldr	r6, [sp, #20]
 8012724:	2e00      	cmp	r6, #0
 8012726:	f000 8082 	beq.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801272a:	eba7 0c08 	sub.w	ip, r7, r8
 801272e:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8012732:	fb0b f808 	mul.w	r8, fp, r8
 8012736:	4656      	mov	r6, sl
 8012738:	9206      	str	r2, [sp, #24]
 801273a:	f04f 0900 	mov.w	r9, #0
 801273e:	f1bb 0f00 	cmp.w	fp, #0
 8012742:	d068      	beq.n	8012816 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x166>
 8012744:	f01b 0303 	ands.w	r3, fp, #3
 8012748:	4647      	mov	r7, r8
 801274a:	eb0b 0a08 	add.w	sl, fp, r8
 801274e:	d02d      	beq.n	80127ac <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xfc>
 8012750:	2b01      	cmp	r3, #1
 8012752:	d01c      	beq.n	801278e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xde>
 8012754:	2b02      	cmp	r3, #2
 8012756:	d00d      	beq.n	8012774 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xc4>
 8012758:	78f0      	ldrb	r0, [r6, #3]
 801275a:	9002      	str	r0, [sp, #8]
 801275c:	78b7      	ldrb	r7, [r6, #2]
 801275e:	9701      	str	r7, [sp, #4]
 8012760:	7871      	ldrb	r1, [r6, #1]
 8012762:	9100      	str	r1, [sp, #0]
 8012764:	7833      	ldrb	r3, [r6, #0]
 8012766:	6860      	ldr	r0, [r4, #4]
 8012768:	4642      	mov	r2, r8
 801276a:	4629      	mov	r1, r5
 801276c:	f002 fb60 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012770:	f108 0701 	add.w	r7, r8, #1
 8012774:	78f2      	ldrb	r2, [r6, #3]
 8012776:	9202      	str	r2, [sp, #8]
 8012778:	78b3      	ldrb	r3, [r6, #2]
 801277a:	9301      	str	r3, [sp, #4]
 801277c:	7870      	ldrb	r0, [r6, #1]
 801277e:	9000      	str	r0, [sp, #0]
 8012780:	463a      	mov	r2, r7
 8012782:	7833      	ldrb	r3, [r6, #0]
 8012784:	6860      	ldr	r0, [r4, #4]
 8012786:	4629      	mov	r1, r5
 8012788:	f002 fb52 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801278c:	3701      	adds	r7, #1
 801278e:	78f1      	ldrb	r1, [r6, #3]
 8012790:	9102      	str	r1, [sp, #8]
 8012792:	78b2      	ldrb	r2, [r6, #2]
 8012794:	9201      	str	r2, [sp, #4]
 8012796:	7873      	ldrb	r3, [r6, #1]
 8012798:	9300      	str	r3, [sp, #0]
 801279a:	463a      	mov	r2, r7
 801279c:	7833      	ldrb	r3, [r6, #0]
 801279e:	6860      	ldr	r0, [r4, #4]
 80127a0:	4629      	mov	r1, r5
 80127a2:	3701      	adds	r7, #1
 80127a4:	f002 fb44 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80127a8:	4557      	cmp	r7, sl
 80127aa:	d034      	beq.n	8012816 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x166>
 80127ac:	78f1      	ldrb	r1, [r6, #3]
 80127ae:	9102      	str	r1, [sp, #8]
 80127b0:	78b2      	ldrb	r2, [r6, #2]
 80127b2:	9201      	str	r2, [sp, #4]
 80127b4:	7870      	ldrb	r0, [r6, #1]
 80127b6:	7833      	ldrb	r3, [r6, #0]
 80127b8:	9000      	str	r0, [sp, #0]
 80127ba:	463a      	mov	r2, r7
 80127bc:	6860      	ldr	r0, [r4, #4]
 80127be:	4629      	mov	r1, r5
 80127c0:	f002 fb36 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80127c4:	78f3      	ldrb	r3, [r6, #3]
 80127c6:	9302      	str	r3, [sp, #8]
 80127c8:	78b1      	ldrb	r1, [r6, #2]
 80127ca:	9101      	str	r1, [sp, #4]
 80127cc:	7870      	ldrb	r0, [r6, #1]
 80127ce:	9000      	str	r0, [sp, #0]
 80127d0:	1c7a      	adds	r2, r7, #1
 80127d2:	7833      	ldrb	r3, [r6, #0]
 80127d4:	6860      	ldr	r0, [r4, #4]
 80127d6:	9204      	str	r2, [sp, #16]
 80127d8:	4629      	mov	r1, r5
 80127da:	f002 fb29 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80127de:	78f2      	ldrb	r2, [r6, #3]
 80127e0:	9202      	str	r2, [sp, #8]
 80127e2:	78b3      	ldrb	r3, [r6, #2]
 80127e4:	9301      	str	r3, [sp, #4]
 80127e6:	7871      	ldrb	r1, [r6, #1]
 80127e8:	9a04      	ldr	r2, [sp, #16]
 80127ea:	7833      	ldrb	r3, [r6, #0]
 80127ec:	9100      	str	r1, [sp, #0]
 80127ee:	6860      	ldr	r0, [r4, #4]
 80127f0:	3201      	adds	r2, #1
 80127f2:	4629      	mov	r1, r5
 80127f4:	f002 fb1c 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80127f8:	78f0      	ldrb	r0, [r6, #3]
 80127fa:	9002      	str	r0, [sp, #8]
 80127fc:	78b2      	ldrb	r2, [r6, #2]
 80127fe:	9201      	str	r2, [sp, #4]
 8012800:	7871      	ldrb	r1, [r6, #1]
 8012802:	7833      	ldrb	r3, [r6, #0]
 8012804:	9100      	str	r1, [sp, #0]
 8012806:	1cfa      	adds	r2, r7, #3
 8012808:	6860      	ldr	r0, [r4, #4]
 801280a:	4629      	mov	r1, r5
 801280c:	3704      	adds	r7, #4
 801280e:	f002 fb0f 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012812:	4557      	cmp	r7, sl
 8012814:	d1ca      	bne.n	80127ac <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0xfc>
 8012816:	9f06      	ldr	r7, [sp, #24]
 8012818:	45b9      	cmp	r9, r7
 801281a:	d008      	beq.n	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801281c:	9805      	ldr	r0, [sp, #20]
 801281e:	f109 0901 	add.w	r9, r9, #1
 8012822:	ebb0 0f89 	cmp.w	r0, r9, lsl #2
 8012826:	44d8      	add	r8, fp
 8012828:	f106 0604 	add.w	r6, r6, #4
 801282c:	d887      	bhi.n	801273e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x8e>
 801282e:	b021      	add	sp, #132	@ 0x84
 8012830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012834:	493f      	ldr	r1, [pc, #252]	@ (8012934 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x284>)
 8012836:	2248      	movs	r2, #72	@ 0x48
 8012838:	a80e      	add	r0, sp, #56	@ 0x38
 801283a:	f009 faf1 	bl	801be20 <memcpy>
 801283e:	6933      	ldr	r3, [r6, #16]
 8012840:	9304      	str	r3, [sp, #16]
 8012842:	2b05      	cmp	r3, #5
 8012844:	f200 8259 	bhi.w	8012cfa <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x64a>
 8012848:	f1b9 0f00 	cmp.w	r9, #0
 801284c:	f040 80be 	bne.w	80129cc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x31c>
 8012850:	4547      	cmp	r7, r8
 8012852:	d9ec      	bls.n	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012854:	9805      	ldr	r0, [sp, #20]
 8012856:	2800      	cmp	r0, #0
 8012858:	d0e9      	beq.n	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 801285a:	9a06      	ldr	r2, [sp, #24]
 801285c:	2a00      	cmp	r2, #0
 801285e:	f000 819a 	beq.w	8012b96 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x4e6>
 8012862:	f1a2 000b 	sub.w	r0, r2, #11
 8012866:	eba7 0c08 	sub.w	ip, r7, r8
 801286a:	9f04      	ldr	r7, [sp, #16]
 801286c:	fb0b fe08 	mul.w	lr, fp, r8
 8012870:	2801      	cmp	r0, #1
 8012872:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8012876:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801287a:	f10e 0201 	add.w	r2, lr, #1
 801287e:	f240 825d 	bls.w	8012d3c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x68c>
 8012882:	f1a8 0603 	sub.w	r6, r8, #3
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	9208      	str	r2, [sp, #32]
 801288a:	960a      	str	r6, [sp, #40]	@ 0x28
 801288c:	f8cd 901c 	str.w	r9, [sp, #28]
 8012890:	930d      	str	r3, [sp, #52]	@ 0x34
 8012892:	f1bb 0f00 	cmp.w	fp, #0
 8012896:	f000 808a 	beq.w	80129ae <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2fe>
 801289a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801289c:	9807      	ldr	r0, [sp, #28]
 801289e:	3780      	adds	r7, #128	@ 0x80
 80128a0:	eb0d 0807 	add.w	r8, sp, r7
 80128a4:	e958 2311 	ldrd	r2, r3, [r8, #-68]	@ 0x44
 80128a8:	f858 1c48 	ldr.w	r1, [r8, #-72]
 80128ac:	18c3      	adds	r3, r0, r3
 80128ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80128b0:	1847      	adds	r7, r0, r1
 80128b2:	1886      	adds	r6, r0, r2
 80128b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128b6:	f81a 1007 	ldrb.w	r1, [sl, r7]
 80128ba:	f81a 0006 	ldrb.w	r0, [sl, r6]
 80128be:	970b      	str	r7, [sp, #44]	@ 0x2c
 80128c0:	960c      	str	r6, [sp, #48]	@ 0x30
 80128c2:	eb0a 0807 	add.w	r8, sl, r7
 80128c6:	eb0a 0706 	add.w	r7, sl, r6
 80128ca:	eb0a 0602 	add.w	r6, sl, r2
 80128ce:	9a06      	ldr	r2, [sp, #24]
 80128d0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80128d4:	2a0d      	cmp	r2, #13
 80128d6:	f040 82ec 	bne.w	8012eb2 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x802>
 80128da:	9a08      	ldr	r2, [sp, #32]
 80128dc:	f01b 0f01 	tst.w	fp, #1
 80128e0:	4691      	mov	r9, r2
 80128e2:	445a      	add	r2, fp
 80128e4:	9204      	str	r2, [sp, #16]
 80128e6:	d147      	bne.n	8012978 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2c8>
 80128e8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80128ec:	43d8      	mvns	r0, r3
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	43c9      	mvns	r1, r1
 80128f2:	0883      	lsrs	r3, r0, #2
 80128f4:	f3c1 1281 	ubfx	r2, r1, #6, #2
 80128f8:	f003 0030 	and.w	r0, r3, #48	@ 0x30
 80128fc:	0909      	lsrs	r1, r1, #4
 80128fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012902:	f001 030c 	and.w	r3, r1, #12
 8012906:	4310      	orrs	r0, r2
 8012908:	4318      	orrs	r0, r3
 801290a:	f040 03c0 	orr.w	r3, r0, #192	@ 0xc0
 801290e:	464a      	mov	r2, r9
 8012910:	6860      	ldr	r0, [r4, #4]
 8012912:	4629      	mov	r1, r5
 8012914:	f001 fbb0 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012918:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801291a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801291c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801291e:	f81a 1000 	ldrb.w	r1, [sl, r0]
 8012922:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8012926:	f81a 0002 	ldrb.w	r0, [sl, r2]
 801292a:	f109 0901 	add.w	r9, r9, #1
 801292e:	e023      	b.n	8012978 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x2c8>
 8012930:	20000078 	andcs	r0, r0, r8, ror r0
 8012934:	0801c9a0 	stmdaeq	r1, {r5, r7, r8, fp, lr, pc}
 8012938:	7830      	ldrb	r0, [r6, #0]
 801293a:	9000      	str	r0, [sp, #0]
 801293c:	f898 1000 	ldrb.w	r1, [r8]
 8012940:	9102      	str	r1, [sp, #8]
 8012942:	43c3      	mvns	r3, r0
 8012944:	089a      	lsrs	r2, r3, #2
 8012946:	43cb      	mvns	r3, r1
 8012948:	f002 0030 	and.w	r0, r2, #48	@ 0x30
 801294c:	0919      	lsrs	r1, r3, #4
 801294e:	f3c3 1281 	ubfx	r2, r3, #6, #2
 8012952:	4310      	orrs	r0, r2
 8012954:	f001 030c 	and.w	r3, r1, #12
 8012958:	4318      	orrs	r0, r3
 801295a:	f040 03c0 	orr.w	r3, r0, #192	@ 0xc0
 801295e:	7838      	ldrb	r0, [r7, #0]
 8012960:	9001      	str	r0, [sp, #4]
 8012962:	6860      	ldr	r0, [r4, #4]
 8012964:	464a      	mov	r2, r9
 8012966:	4629      	mov	r1, r5
 8012968:	f001 fb86 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801296c:	f898 1000 	ldrb.w	r1, [r8]
 8012970:	7838      	ldrb	r0, [r7, #0]
 8012972:	7833      	ldrb	r3, [r6, #0]
 8012974:	f109 0901 	add.w	r9, r9, #1
 8012978:	43da      	mvns	r2, r3
 801297a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801297e:	0890      	lsrs	r0, r2, #2
 8012980:	43c9      	mvns	r1, r1
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	f3c1 1281 	ubfx	r2, r1, #6, #2
 8012988:	f000 0330 	and.w	r3, r0, #48	@ 0x30
 801298c:	0909      	lsrs	r1, r1, #4
 801298e:	f001 000c 	and.w	r0, r1, #12
 8012992:	4313      	orrs	r3, r2
 8012994:	4303      	orrs	r3, r0
 8012996:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801299a:	464a      	mov	r2, r9
 801299c:	6860      	ldr	r0, [r4, #4]
 801299e:	4629      	mov	r1, r5
 80129a0:	f001 fb6a 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80129a4:	9b04      	ldr	r3, [sp, #16]
 80129a6:	f109 0901 	add.w	r9, r9, #1
 80129aa:	454b      	cmp	r3, r9
 80129ac:	d1c4      	bne.n	8012938 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x288>
 80129ae:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80129b0:	9e07      	ldr	r6, [sp, #28]
 80129b2:	42b7      	cmp	r7, r6
 80129b4:	f43f af3b 	beq.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80129b8:	9a08      	ldr	r2, [sp, #32]
 80129ba:	9905      	ldr	r1, [sp, #20]
 80129bc:	3603      	adds	r6, #3
 80129be:	445a      	add	r2, fp
 80129c0:	42b1      	cmp	r1, r6
 80129c2:	9607      	str	r6, [sp, #28]
 80129c4:	9208      	str	r2, [sp, #32]
 80129c6:	f63f af64 	bhi.w	8012892 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1e2>
 80129ca:	e730      	b.n	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80129cc:	4547      	cmp	r7, r8
 80129ce:	f67f af2e 	bls.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80129d2:	9e05      	ldr	r6, [sp, #20]
 80129d4:	2e00      	cmp	r6, #0
 80129d6:	f43f af2a 	beq.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 80129da:	eba7 0c08 	sub.w	ip, r7, r8
 80129de:	9f04      	ldr	r7, [sp, #16]
 80129e0:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 80129e4:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 80129e8:	fb0b f208 	mul.w	r2, fp, r8
 80129ec:	f1ae 0303 	sub.w	r3, lr, #3
 80129f0:	0088      	lsls	r0, r1, #2
 80129f2:	2600      	movs	r6, #0
 80129f4:	9208      	str	r2, [sp, #32]
 80129f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129f8:	900c      	str	r0, [sp, #48]	@ 0x30
 80129fa:	9604      	str	r6, [sp, #16]
 80129fc:	f1bb 0f00 	cmp.w	fp, #0
 8012a00:	f000 808e 	beq.w	8012b20 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x470>
 8012a04:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8012a06:	9904      	ldr	r1, [sp, #16]
 8012a08:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012a0c:	3780      	adds	r7, #128	@ 0x80
 8012a0e:	eb0d 0807 	add.w	r8, sp, r7
 8012a12:	e958 7311 	ldrd	r7, r3, [r8, #-68]	@ 0x44
 8012a16:	f858 2c48 	ldr.w	r2, [r8, #-72]
 8012a1a:	1888      	adds	r0, r1, r2
 8012a1c:	9006      	str	r0, [sp, #24]
 8012a1e:	19ca      	adds	r2, r1, r7
 8012a20:	eb0a 0700 	add.w	r7, sl, r0
 8012a24:	4660      	mov	r0, ip
 8012a26:	4419      	add	r1, r3
 8012a28:	4458      	add	r0, fp
 8012a2a:	f01b 0303 	ands.w	r3, fp, #3
 8012a2e:	4666      	mov	r6, ip
 8012a30:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a32:	910a      	str	r1, [sp, #40]	@ 0x28
 8012a34:	eb0a 0802 	add.w	r8, sl, r2
 8012a38:	eb0a 0901 	add.w	r9, sl, r1
 8012a3c:	9007      	str	r0, [sp, #28]
 8012a3e:	d039      	beq.n	8012ab4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x404>
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d023      	beq.n	8012a8c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x3dc>
 8012a44:	2b02      	cmp	r3, #2
 8012a46:	d010      	beq.n	8012a6a <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x3ba>
 8012a48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a4c:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012a50:	9101      	str	r1, [sp, #4]
 8012a52:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8012a56:	9a06      	ldr	r2, [sp, #24]
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8012a5e:	6860      	ldr	r0, [r4, #4]
 8012a60:	4662      	mov	r2, ip
 8012a62:	4629      	mov	r1, r5
 8012a64:	f001 f8d6 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012a68:	3601      	adds	r6, #1
 8012a6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a6e:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8012a72:	9001      	str	r0, [sp, #4]
 8012a74:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8012a78:	9906      	ldr	r1, [sp, #24]
 8012a7a:	9200      	str	r2, [sp, #0]
 8012a7c:	f81a 3001 	ldrb.w	r3, [sl, r1]
 8012a80:	6860      	ldr	r0, [r4, #4]
 8012a82:	4632      	mov	r2, r6
 8012a84:	4629      	mov	r1, r5
 8012a86:	f001 f8c5 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012a8a:	3601      	adds	r6, #1
 8012a8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a90:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8012a94:	9301      	str	r3, [sp, #4]
 8012a96:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012a9a:	9806      	ldr	r0, [sp, #24]
 8012a9c:	9100      	str	r1, [sp, #0]
 8012a9e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8012aa2:	6860      	ldr	r0, [r4, #4]
 8012aa4:	4632      	mov	r2, r6
 8012aa6:	4629      	mov	r1, r5
 8012aa8:	f001 f8b4 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012aac:	9b07      	ldr	r3, [sp, #28]
 8012aae:	3601      	adds	r6, #1
 8012ab0:	429e      	cmp	r6, r3
 8012ab2:	d035      	beq.n	8012b20 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x470>
 8012ab4:	f899 0000 	ldrb.w	r0, [r9]
 8012ab8:	9001      	str	r0, [sp, #4]
 8012aba:	f898 3000 	ldrb.w	r3, [r8]
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	4632      	mov	r2, r6
 8012ac2:	783b      	ldrb	r3, [r7, #0]
 8012ac4:	6860      	ldr	r0, [r4, #4]
 8012ac6:	4629      	mov	r1, r5
 8012ac8:	f001 f8a4 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012acc:	f899 2000 	ldrb.w	r2, [r9]
 8012ad0:	9201      	str	r2, [sp, #4]
 8012ad2:	f898 1000 	ldrb.w	r1, [r8]
 8012ad6:	9100      	str	r1, [sp, #0]
 8012ad8:	1c72      	adds	r2, r6, #1
 8012ada:	783b      	ldrb	r3, [r7, #0]
 8012adc:	6860      	ldr	r0, [r4, #4]
 8012ade:	9206      	str	r2, [sp, #24]
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	f001 f897 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012ae6:	f899 0000 	ldrb.w	r0, [r9]
 8012aea:	9001      	str	r0, [sp, #4]
 8012aec:	f898 3000 	ldrb.w	r3, [r8]
 8012af0:	9a06      	ldr	r2, [sp, #24]
 8012af2:	9300      	str	r3, [sp, #0]
 8012af4:	783b      	ldrb	r3, [r7, #0]
 8012af6:	6860      	ldr	r0, [r4, #4]
 8012af8:	3201      	adds	r2, #1
 8012afa:	4629      	mov	r1, r5
 8012afc:	f001 f88a 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012b00:	f899 2000 	ldrb.w	r2, [r9]
 8012b04:	9201      	str	r2, [sp, #4]
 8012b06:	f898 1000 	ldrb.w	r1, [r8]
 8012b0a:	9100      	str	r1, [sp, #0]
 8012b0c:	783b      	ldrb	r3, [r7, #0]
 8012b0e:	6860      	ldr	r0, [r4, #4]
 8012b10:	1cf2      	adds	r2, r6, #3
 8012b12:	4629      	mov	r1, r5
 8012b14:	f001 f87e 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012b18:	9b07      	ldr	r3, [sp, #28]
 8012b1a:	3604      	adds	r6, #4
 8012b1c:	429e      	cmp	r6, r3
 8012b1e:	d1c9      	bne.n	8012ab4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x404>
 8012b20:	9f04      	ldr	r7, [sp, #16]
 8012b22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012b24:	42b7      	cmp	r7, r6
 8012b26:	f43f ae82 	beq.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012b2a:	9a08      	ldr	r2, [sp, #32]
 8012b2c:	9905      	ldr	r1, [sp, #20]
 8012b2e:	3703      	adds	r7, #3
 8012b30:	445a      	add	r2, fp
 8012b32:	42b9      	cmp	r1, r7
 8012b34:	9704      	str	r7, [sp, #16]
 8012b36:	9208      	str	r2, [sp, #32]
 8012b38:	f63f af60 	bhi.w	80129fc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x34c>
 8012b3c:	e677      	b.n	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012b3e:	4b74      	ldr	r3, [pc, #464]	@ (8012d10 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x660>)
 8012b40:	4a74      	ldr	r2, [pc, #464]	@ (8012d14 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8012b42:	4875      	ldr	r0, [pc, #468]	@ (8012d18 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8012b44:	21c8      	movs	r1, #200	@ 0xc8
 8012b46:	f009 fd51 	bl	801c5ec <__assert_func>
 8012b4a:	e5e3      	b.n	8012714 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x64>
 8012b4c:	4b73      	ldr	r3, [pc, #460]	@ (8012d1c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x66c>)
 8012b4e:	4a71      	ldr	r2, [pc, #452]	@ (8012d14 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8012b50:	4871      	ldr	r0, [pc, #452]	@ (8012d18 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8012b52:	2165      	movs	r1, #101	@ 0x65
 8012b54:	f009 fd4a 	bl	801c5ec <__assert_func>
 8012b58:	9b05      	ldr	r3, [sp, #20]
 8012b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b5e:	f67f adb6 	bls.w	80126ce <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1e>
 8012b62:	4d6f      	ldr	r5, [pc, #444]	@ (8012d20 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x670>)
 8012b64:	4b6f      	ldr	r3, [pc, #444]	@ (8012d24 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x674>)
 8012b66:	4a6b      	ldr	r2, [pc, #428]	@ (8012d14 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8012b68:	486b      	ldr	r0, [pc, #428]	@ (8012d18 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8012b6a:	2166      	movs	r1, #102	@ 0x66
 8012b6c:	f009 fd3e 	bl	801c5ec <__assert_func>
 8012b70:	682e      	ldr	r6, [r5, #0]
 8012b72:	2e00      	cmp	r6, #0
 8012b74:	f47f adb0 	bne.w	80126d8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x28>
 8012b78:	4b6b      	ldr	r3, [pc, #428]	@ (8012d28 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x678>)
 8012b7a:	4a6c      	ldr	r2, [pc, #432]	@ (8012d2c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x67c>)
 8012b7c:	486c      	ldr	r0, [pc, #432]	@ (8012d30 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x680>)
 8012b7e:	21a4      	movs	r1, #164	@ 0xa4
 8012b80:	f009 fd34 	bl	801c5ec <__assert_func>
 8012b84:	682e      	ldr	r6, [r5, #0]
 8012b86:	e5a7      	b.n	80126d8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x28>
 8012b88:	4b6a      	ldr	r3, [pc, #424]	@ (8012d34 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x684>)
 8012b8a:	4a62      	ldr	r2, [pc, #392]	@ (8012d14 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8012b8c:	4862      	ldr	r0, [pc, #392]	@ (8012d18 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8012b8e:	21c9      	movs	r1, #201	@ 0xc9
 8012b90:	f009 fd2c 	bl	801c5ec <__assert_func>
 8012b94:	e5c2      	b.n	801271c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x6c>
 8012b96:	9e04      	ldr	r6, [sp, #16]
 8012b98:	9806      	ldr	r0, [sp, #24]
 8012b9a:	9004      	str	r0, [sp, #16]
 8012b9c:	eba7 0e08 	sub.w	lr, r7, r8
 8012ba0:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
 8012ba4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8012ba8:	fb0b f108 	mul.w	r1, fp, r8
 8012bac:	f1ac 0303 	sub.w	r3, ip, #3
 8012bb0:	00ba      	lsls	r2, r7, #2
 8012bb2:	9108      	str	r1, [sp, #32]
 8012bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012bb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8012bb8:	f1bb 0f00 	cmp.w	fp, #0
 8012bbc:	f000 808e 	beq.w	8012cdc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x62c>
 8012bc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012bc2:	9904      	ldr	r1, [sp, #16]
 8012bc4:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012bc8:	3680      	adds	r6, #128	@ 0x80
 8012bca:	eb0d 0806 	add.w	r8, sp, r6
 8012bce:	e958 2311 	ldrd	r2, r3, [r8, #-68]	@ 0x44
 8012bd2:	f858 7c48 	ldr.w	r7, [r8, #-72]
 8012bd6:	19c8      	adds	r0, r1, r7
 8012bd8:	9006      	str	r0, [sp, #24]
 8012bda:	eb0a 0700 	add.w	r7, sl, r0
 8012bde:	4670      	mov	r0, lr
 8012be0:	188a      	adds	r2, r1, r2
 8012be2:	4458      	add	r0, fp
 8012be4:	4419      	add	r1, r3
 8012be6:	f01b 0303 	ands.w	r3, fp, #3
 8012bea:	4676      	mov	r6, lr
 8012bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bee:	910a      	str	r1, [sp, #40]	@ 0x28
 8012bf0:	eb0a 0802 	add.w	r8, sl, r2
 8012bf4:	eb0a 0901 	add.w	r9, sl, r1
 8012bf8:	9007      	str	r0, [sp, #28]
 8012bfa:	d039      	beq.n	8012c70 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x5c0>
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d023      	beq.n	8012c48 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x598>
 8012c00:	2b02      	cmp	r3, #2
 8012c02:	d010      	beq.n	8012c26 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x576>
 8012c04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c08:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012c0c:	9101      	str	r1, [sp, #4]
 8012c0e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8012c12:	9a06      	ldr	r2, [sp, #24]
 8012c14:	9300      	str	r3, [sp, #0]
 8012c16:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8012c1a:	6860      	ldr	r0, [r4, #4]
 8012c1c:	4672      	mov	r2, lr
 8012c1e:	4629      	mov	r1, r5
 8012c20:	f001 f906 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012c24:	3601      	adds	r6, #1
 8012c26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c2a:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8012c2e:	9001      	str	r0, [sp, #4]
 8012c30:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8012c34:	9906      	ldr	r1, [sp, #24]
 8012c36:	9200      	str	r2, [sp, #0]
 8012c38:	f81a 3001 	ldrb.w	r3, [sl, r1]
 8012c3c:	6860      	ldr	r0, [r4, #4]
 8012c3e:	4632      	mov	r2, r6
 8012c40:	4629      	mov	r1, r5
 8012c42:	f001 f8f5 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012c46:	3601      	adds	r6, #1
 8012c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012c4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c4c:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8012c50:	9301      	str	r3, [sp, #4]
 8012c52:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012c56:	9806      	ldr	r0, [sp, #24]
 8012c58:	9100      	str	r1, [sp, #0]
 8012c5a:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8012c5e:	6860      	ldr	r0, [r4, #4]
 8012c60:	4632      	mov	r2, r6
 8012c62:	4629      	mov	r1, r5
 8012c64:	f001 f8e4 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012c68:	9b07      	ldr	r3, [sp, #28]
 8012c6a:	3601      	adds	r6, #1
 8012c6c:	429e      	cmp	r6, r3
 8012c6e:	d035      	beq.n	8012cdc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x62c>
 8012c70:	f899 0000 	ldrb.w	r0, [r9]
 8012c74:	9001      	str	r0, [sp, #4]
 8012c76:	f898 3000 	ldrb.w	r3, [r8]
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	4632      	mov	r2, r6
 8012c7e:	783b      	ldrb	r3, [r7, #0]
 8012c80:	6860      	ldr	r0, [r4, #4]
 8012c82:	4629      	mov	r1, r5
 8012c84:	f001 f8d4 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012c88:	f899 2000 	ldrb.w	r2, [r9]
 8012c8c:	9201      	str	r2, [sp, #4]
 8012c8e:	f898 1000 	ldrb.w	r1, [r8]
 8012c92:	9100      	str	r1, [sp, #0]
 8012c94:	1c72      	adds	r2, r6, #1
 8012c96:	783b      	ldrb	r3, [r7, #0]
 8012c98:	6860      	ldr	r0, [r4, #4]
 8012c9a:	9206      	str	r2, [sp, #24]
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	f001 f8c7 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012ca2:	f899 0000 	ldrb.w	r0, [r9]
 8012ca6:	9001      	str	r0, [sp, #4]
 8012ca8:	f898 3000 	ldrb.w	r3, [r8]
 8012cac:	9a06      	ldr	r2, [sp, #24]
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	783b      	ldrb	r3, [r7, #0]
 8012cb2:	6860      	ldr	r0, [r4, #4]
 8012cb4:	3201      	adds	r2, #1
 8012cb6:	4629      	mov	r1, r5
 8012cb8:	f001 f8ba 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012cbc:	f899 2000 	ldrb.w	r2, [r9]
 8012cc0:	9201      	str	r2, [sp, #4]
 8012cc2:	f898 1000 	ldrb.w	r1, [r8]
 8012cc6:	9100      	str	r1, [sp, #0]
 8012cc8:	783b      	ldrb	r3, [r7, #0]
 8012cca:	6860      	ldr	r0, [r4, #4]
 8012ccc:	1cf2      	adds	r2, r6, #3
 8012cce:	4629      	mov	r1, r5
 8012cd0:	f001 f8ae 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8012cd4:	9b07      	ldr	r3, [sp, #28]
 8012cd6:	3604      	adds	r6, #4
 8012cd8:	429e      	cmp	r6, r3
 8012cda:	d1c9      	bne.n	8012c70 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x5c0>
 8012cdc:	9f04      	ldr	r7, [sp, #16]
 8012cde:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8012ce0:	42b7      	cmp	r7, r6
 8012ce2:	f43f ada4 	beq.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012ce6:	9a08      	ldr	r2, [sp, #32]
 8012ce8:	9905      	ldr	r1, [sp, #20]
 8012cea:	3703      	adds	r7, #3
 8012cec:	445a      	add	r2, fp
 8012cee:	428f      	cmp	r7, r1
 8012cf0:	9704      	str	r7, [sp, #16]
 8012cf2:	9208      	str	r2, [sp, #32]
 8012cf4:	f4ff af60 	bcc.w	8012bb8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x508>
 8012cf8:	e599      	b.n	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8012d38 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x688>)
 8012cfc:	4a05      	ldr	r2, [pc, #20]	@ (8012d14 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x664>)
 8012cfe:	4806      	ldr	r0, [pc, #24]	@ (8012d18 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x668>)
 8012d00:	21b3      	movs	r1, #179	@ 0xb3
 8012d02:	f009 fc73 	bl	801c5ec <__assert_func>
 8012d06:	f1b9 0f00 	cmp.w	r9, #0
 8012d0a:	f47f ae5f 	bne.w	80129cc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x31c>
 8012d0e:	e59f      	b.n	8012850 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x1a0>
 8012d10:	0801e898 	stmdaeq	r1, {r3, r4, r7, fp, sp, lr, pc}
 8012d14:	0801e820 	stmdaeq	r1, {r5, fp, sp, lr, pc}
 8012d18:	0801e75c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, sp, lr, pc}
 8012d1c:	0801e80c 	stmdaeq	r1, {r2, r3, fp, sp, lr, pc}
 8012d20:	20000078 	andcs	r0, r0, r8, ror r0
 8012d24:	0801e828 	stmdaeq	r1, {r3, r5, fp, sp, lr, pc}
 8012d28:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8012d2c:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 8012d30:	0801e5d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, sp, lr, pc}
 8012d34:	0801e8b0 	stmdaeq	r1, {r4, r5, r7, fp, sp, lr, pc}
 8012d38:	0801e850 	stmdaeq	r1, {r4, r6, fp, sp, lr, pc}
 8012d3c:	f1a8 0103 	sub.w	r1, r8, #3
 8012d40:	0098      	lsls	r0, r3, #2
 8012d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d44:	910c      	str	r1, [sp, #48]	@ 0x30
 8012d46:	f8cd 9020 	str.w	r9, [sp, #32]
 8012d4a:	900d      	str	r0, [sp, #52]	@ 0x34
 8012d4c:	f1bb 0f00 	cmp.w	fp, #0
 8012d50:	f000 80a0 	beq.w	8012e94 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x7e4>
 8012d54:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8012d56:	9908      	ldr	r1, [sp, #32]
 8012d58:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8012d5c:	3780      	adds	r7, #128	@ 0x80
 8012d5e:	eb0d 0907 	add.w	r9, sp, r7
 8012d62:	4667      	mov	r7, ip
 8012d64:	f859 3c48 	ldr.w	r3, [r9, #-72]
 8012d68:	18c8      	adds	r0, r1, r3
 8012d6a:	e959 2311 	ldrd	r2, r3, [r9, #-68]	@ 0x44
 8012d6e:	188a      	adds	r2, r1, r2
 8012d70:	4419      	add	r1, r3
 8012d72:	eb0a 0301 	add.w	r3, sl, r1
 8012d76:	920a      	str	r2, [sp, #40]	@ 0x28
 8012d78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012d7a:	eb0a 0902 	add.w	r9, sl, r2
 8012d7e:	f01b 0103 	ands.w	r1, fp, #3
 8012d82:	eb0b 020c 	add.w	r2, fp, ip
 8012d86:	9006      	str	r0, [sp, #24]
 8012d88:	eb0a 0800 	add.w	r8, sl, r0
 8012d8c:	9304      	str	r3, [sp, #16]
 8012d8e:	9207      	str	r2, [sp, #28]
 8012d90:	d03e      	beq.n	8012e10 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x760>
 8012d92:	2901      	cmp	r1, #1
 8012d94:	d026      	beq.n	8012de4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x734>
 8012d96:	2902      	cmp	r1, #2
 8012d98:	d011      	beq.n	8012dbe <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x70e>
 8012d9a:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8012d9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012da0:	7df3      	ldrb	r3, [r6, #23]
 8012da2:	9202      	str	r2, [sp, #8]
 8012da4:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8012da8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012daa:	9001      	str	r0, [sp, #4]
 8012dac:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012db0:	9100      	str	r1, [sp, #0]
 8012db2:	6860      	ldr	r0, [r4, #4]
 8012db4:	4662      	mov	r2, ip
 8012db6:	4629      	mov	r1, r5
 8012db8:	f001 f95e 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012dbc:	3701      	adds	r7, #1
 8012dbe:	9806      	ldr	r0, [sp, #24]
 8012dc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012dc2:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8012dc6:	7df3      	ldrb	r3, [r6, #23]
 8012dc8:	9202      	str	r2, [sp, #8]
 8012dca:	f81a 0001 	ldrb.w	r0, [sl, r1]
 8012dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012dd0:	9001      	str	r0, [sp, #4]
 8012dd2:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012dd6:	9100      	str	r1, [sp, #0]
 8012dd8:	463a      	mov	r2, r7
 8012dda:	6860      	ldr	r0, [r4, #4]
 8012ddc:	4629      	mov	r1, r5
 8012dde:	f001 f94b 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012de2:	3701      	adds	r7, #1
 8012de4:	9b06      	ldr	r3, [sp, #24]
 8012de6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012de8:	f81a c003 	ldrb.w	ip, [sl, r3]
 8012dec:	f81a e000 	ldrb.w	lr, [sl, r0]
 8012df0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012df2:	7df3      	ldrb	r3, [r6, #23]
 8012df4:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012df8:	9100      	str	r1, [sp, #0]
 8012dfa:	e9cd ec01 	strd	lr, ip, [sp, #4]
 8012dfe:	463a      	mov	r2, r7
 8012e00:	6860      	ldr	r0, [r4, #4]
 8012e02:	4629      	mov	r1, r5
 8012e04:	f001 f938 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e08:	9b07      	ldr	r3, [sp, #28]
 8012e0a:	3701      	adds	r7, #1
 8012e0c:	42bb      	cmp	r3, r7
 8012e0e:	d041      	beq.n	8012e94 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x7e4>
 8012e10:	f898 0000 	ldrb.w	r0, [r8]
 8012e14:	7df3      	ldrb	r3, [r6, #23]
 8012e16:	9002      	str	r0, [sp, #8]
 8012e18:	f899 2000 	ldrb.w	r2, [r9]
 8012e1c:	9904      	ldr	r1, [sp, #16]
 8012e1e:	9201      	str	r2, [sp, #4]
 8012e20:	7808      	ldrb	r0, [r1, #0]
 8012e22:	9000      	str	r0, [sp, #0]
 8012e24:	463a      	mov	r2, r7
 8012e26:	6860      	ldr	r0, [r4, #4]
 8012e28:	4629      	mov	r1, r5
 8012e2a:	f001 f925 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e2e:	f898 2000 	ldrb.w	r2, [r8]
 8012e32:	7df3      	ldrb	r3, [r6, #23]
 8012e34:	9202      	str	r2, [sp, #8]
 8012e36:	f899 1000 	ldrb.w	r1, [r9]
 8012e3a:	9804      	ldr	r0, [sp, #16]
 8012e3c:	9101      	str	r1, [sp, #4]
 8012e3e:	7802      	ldrb	r2, [r0, #0]
 8012e40:	9200      	str	r2, [sp, #0]
 8012e42:	6860      	ldr	r0, [r4, #4]
 8012e44:	1c7a      	adds	r2, r7, #1
 8012e46:	4629      	mov	r1, r5
 8012e48:	9206      	str	r2, [sp, #24]
 8012e4a:	f001 f915 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e4e:	f898 1000 	ldrb.w	r1, [r8]
 8012e52:	7df3      	ldrb	r3, [r6, #23]
 8012e54:	9102      	str	r1, [sp, #8]
 8012e56:	f899 0000 	ldrb.w	r0, [r9]
 8012e5a:	9904      	ldr	r1, [sp, #16]
 8012e5c:	9001      	str	r0, [sp, #4]
 8012e5e:	7808      	ldrb	r0, [r1, #0]
 8012e60:	9a06      	ldr	r2, [sp, #24]
 8012e62:	9000      	str	r0, [sp, #0]
 8012e64:	6860      	ldr	r0, [r4, #4]
 8012e66:	3201      	adds	r2, #1
 8012e68:	4629      	mov	r1, r5
 8012e6a:	f001 f905 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e6e:	f898 2000 	ldrb.w	r2, [r8]
 8012e72:	7df3      	ldrb	r3, [r6, #23]
 8012e74:	9202      	str	r2, [sp, #8]
 8012e76:	f899 1000 	ldrb.w	r1, [r9]
 8012e7a:	9804      	ldr	r0, [sp, #16]
 8012e7c:	9101      	str	r1, [sp, #4]
 8012e7e:	7802      	ldrb	r2, [r0, #0]
 8012e80:	9200      	str	r2, [sp, #0]
 8012e82:	6860      	ldr	r0, [r4, #4]
 8012e84:	1cfa      	adds	r2, r7, #3
 8012e86:	4629      	mov	r1, r5
 8012e88:	f001 f8f6 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012e8c:	9b07      	ldr	r3, [sp, #28]
 8012e8e:	3704      	adds	r7, #4
 8012e90:	42bb      	cmp	r3, r7
 8012e92:	d1bd      	bne.n	8012e10 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x760>
 8012e94:	9f08      	ldr	r7, [sp, #32]
 8012e96:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8012e98:	4287      	cmp	r7, r0
 8012e9a:	f43f acc8 	beq.w	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ea0:	9905      	ldr	r1, [sp, #20]
 8012ea2:	3703      	adds	r7, #3
 8012ea4:	445a      	add	r2, fp
 8012ea6:	42b9      	cmp	r1, r7
 8012ea8:	9708      	str	r7, [sp, #32]
 8012eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8012eac:	f63f af4e 	bhi.w	8012d4c <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x69c>
 8012eb0:	e4bd      	b.n	801282e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x17e>
 8012eb2:	4b03      	ldr	r3, [pc, #12]	@ (8012ec0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x810>)
 8012eb4:	4a03      	ldr	r2, [pc, #12]	@ (8012ec4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x814>)
 8012eb6:	4804      	ldr	r0, [pc, #16]	@ (8012ec8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)+0x818>)
 8012eb8:	21a2      	movs	r1, #162	@ 0xa2
 8012eba:	f009 fb97 	bl	801c5ec <__assert_func>
 8012ebe:	bf00      	nop
 8012ec0:	0801e888 	stmdaeq	r1, {r3, r7, fp, sp, lr, pc}
 8012ec4:	0801e88c 	stmdaeq	r1, {r2, r3, r7, fp, sp, lr, pc}
 8012ec8:	0801e75c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, sp, lr, pc}

08012ecc <WS28xxDmxMulti::Sync(unsigned long)>:
 8012ecc:	2921      	cmp	r1, #33	@ 0x21
 8012ece:	b570      	push	{r4, r5, r6, lr}
 8012ed0:	460c      	mov	r4, r1
 8012ed2:	4605      	mov	r5, r0
 8012ed4:	d810      	bhi.n	8012ef8 <WS28xxDmxMulti::Sync(unsigned long)+0x2c>
 8012ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8012f08 <WS28xxDmxMulti::Sync(unsigned long)+0x3c>)
 8012ed8:	f240 6304 	movw	r3, #1540	@ 0x604
 8012edc:	fb04 f303 	mul.w	r3, r4, r3
 8012ee0:	18d1      	adds	r1, r2, r3
 8012ee2:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 8012ee6:	4402      	add	r2, r0
 8012ee8:	f8d1 3600 	ldr.w	r3, [r1, #1536]	@ 0x600
 8012eec:	4628      	mov	r0, r5
 8012eee:	4621      	mov	r1, r4
 8012ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ef4:	f7ff bbdc 	b.w	80126b0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 8012ef8:	4b04      	ldr	r3, [pc, #16]	@ (8012f0c <WS28xxDmxMulti::Sync(unsigned long)+0x40>)
 8012efa:	4a05      	ldr	r2, [pc, #20]	@ (8012f10 <WS28xxDmxMulti::Sync(unsigned long)+0x44>)
 8012efc:	4805      	ldr	r0, [pc, #20]	@ (8012f14 <WS28xxDmxMulti::Sync(unsigned long)+0x48>)
 8012efe:	21b5      	movs	r1, #181	@ 0xb5
 8012f00:	f009 fb74 	bl	801c5ec <__assert_func>
 8012f04:	e7e7      	b.n	8012ed6 <WS28xxDmxMulti::Sync(unsigned long)+0xa>
 8012f06:	bf00      	nop
 8012f08:	20000080 	andcs	r0, r0, r0, lsl #1
 8012f0c:	0801e8c0 	stmdaeq	r1, {r6, r7, fp, sp, lr, pc}
 8012f10:	0801e8d4 	stmdaeq	r1, {r2, r4, r6, r7, fp, sp, lr, pc}
 8012f14:	0801e8dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, fp, sp, lr, pc}

08012f18 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)>:
 8012f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8012f20:	b143      	cbz	r3, 8012f34 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x1c>
 8012f22:	4d23      	ldr	r5, [pc, #140]	@ (8012fb0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x98>)
 8012f24:	682f      	ldr	r7, [r5, #0]
 8012f26:	4606      	mov	r6, r0
 8012f28:	460c      	mov	r4, r1
 8012f2a:	2f00      	cmp	r7, #0
 8012f2c:	d038      	beq.n	8012fa0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x88>
 8012f2e:	8fb8      	ldrh	r0, [r7, #60]	@ 0x3c
 8012f30:	4284      	cmp	r4, r0
 8012f32:	d001      	beq.n	8012f38 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x20>
 8012f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f38:	4c1e      	ldr	r4, [pc, #120]	@ (8012fb4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x9c>)
 8012f3a:	2500      	movs	r5, #0
 8012f3c:	f242 6818 	movw	r8, #9752	@ 0x2618
 8012f40:	e00e      	b.n	8012f60 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x48>
 8012f42:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8012f46:	f814 f008 	pld	[r4, r8]
 8012f4a:	4622      	mov	r2, r4
 8012f4c:	4629      	mov	r1, r5
 8012f4e:	4630      	mov	r0, r6
 8012f50:	f7ff fbae 	bl	80126b0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 8012f54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012f56:	3501      	adds	r5, #1
 8012f58:	429d      	cmp	r5, r3
 8012f5a:	f204 6404 	addw	r4, r4, #1540	@ 0x604
 8012f5e:	d81a      	bhi.n	8012f96 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x7e>
 8012f60:	2d22      	cmp	r5, #34	@ 0x22
 8012f62:	d1ee      	bne.n	8012f42 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 8012f64:	4b14      	ldr	r3, [pc, #80]	@ (8012fb8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa0>)
 8012f66:	4a15      	ldr	r2, [pc, #84]	@ (8012fbc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa4>)
 8012f68:	4815      	ldr	r0, [pc, #84]	@ (8012fc0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xa8>)
 8012f6a:	21b5      	movs	r1, #181	@ 0xb5
 8012f6c:	f009 fb3e 	bl	801c5ec <__assert_func>
 8012f70:	f504 5218 	add.w	r2, r4, #9728	@ 0x2600
 8012f74:	3218      	adds	r2, #24
 8012f76:	4629      	mov	r1, r5
 8012f78:	f892 f000 	pld	[r2]
 8012f7c:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8012f80:	4622      	mov	r2, r4
 8012f82:	4630      	mov	r0, r6
 8012f84:	f7ff fb94 	bl	80126b0 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long)>
 8012f88:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8012f8a:	2922      	cmp	r1, #34	@ 0x22
 8012f8c:	f04f 0523 	mov.w	r5, #35	@ 0x23
 8012f90:	f204 6404 	addw	r4, r4, #1540	@ 0x604
 8012f94:	d8d5      	bhi.n	8012f42 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x2a>
 8012f96:	6870      	ldr	r0, [r6, #4]
 8012f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f9c:	f000 bd40 	b.w	8013a20 <WS28xxMulti::Update()>
 8012fa0:	4b08      	ldr	r3, [pc, #32]	@ (8012fc4 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xac>)
 8012fa2:	4a09      	ldr	r2, [pc, #36]	@ (8012fc8 <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xb0>)
 8012fa4:	4809      	ldr	r0, [pc, #36]	@ (8012fcc <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0xb4>)
 8012fa6:	21a4      	movs	r1, #164	@ 0xa4
 8012fa8:	f009 fb20 	bl	801c5ec <__assert_func>
 8012fac:	682f      	ldr	r7, [r5, #0]
 8012fae:	e7be      	b.n	8012f2e <WS28xxDmxMulti::SetData(unsigned long, unsigned char const*, unsigned long, bool)+0x16>
 8012fb0:	20000078 	andcs	r0, r0, r8, ror r0
 8012fb4:	20000480 	andcs	r0, r0, r0, lsl #9
 8012fb8:	0801e8c0 	stmdaeq	r1, {r6, r7, fp, sp, lr, pc}
 8012fbc:	0801e8d4 	stmdaeq	r1, {r2, r4, r6, r7, fp, sp, lr, pc}
 8012fc0:	0801e8dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, fp, sp, lr, pc}
 8012fc4:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8012fc8:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 8012fcc:	0801e5d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, sp, lr, pc}

08012fd0 <remoteconfig::pixel::json_get_status(char*, unsigned long)>:
 8012fd0:	b570      	push	{r4, r5, r6, lr}
 8012fd2:	4e0a      	ldr	r6, [pc, #40]	@ (8012ffc <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x2c>)
 8012fd4:	6833      	ldr	r3, [r6, #0]
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	460d      	mov	r5, r1
 8012fda:	b933      	cbnz	r3, 8012fea <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x1a>
 8012fdc:	4b08      	ldr	r3, [pc, #32]	@ (8013000 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x30>)
 8012fde:	4a09      	ldr	r2, [pc, #36]	@ (8013004 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x34>)
 8012fe0:	4809      	ldr	r0, [pc, #36]	@ (8013008 <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x38>)
 8012fe2:	f240 110d 	movw	r1, #269	@ 0x10d
 8012fe6:	f009 fb01 	bl	801c5ec <__assert_func>
 8012fea:	6833      	ldr	r3, [r6, #0]
 8012fec:	4a07      	ldr	r2, [pc, #28]	@ (801300c <remoteconfig::pixel::json_get_status(char*, unsigned long)+0x3c>)
 8012fee:	699b      	ldr	r3, [r3, #24]
 8012ff0:	4629      	mov	r1, r5
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ff8:	f009 ba40 	b.w	801c47c <snprintf>
 8012ffc:	2000007c 	andcs	r0, r0, ip, ror r0
 8013000:	0801cd23 	stmdaeq	r1, {r0, r1, r5, r8, sl, fp, lr, pc}
 8013004:	0801cd36 	stmdaeq	r1, {r1, r2, r4, r5, r8, sl, fp, lr, pc}
 8013008:	0801d9a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, fp, ip, lr, pc}
 801300c:	0801d9c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, fp, ip, lr, pc}

08013010 <pixel::pixel_get_type(pixel::Type)>:
 8013010:	280d      	cmp	r0, #13
 8013012:	bfda      	itte	le
 8013014:	4b02      	ldrle	r3, [pc, #8]	@ (8013020 <pixel::pixel_get_type(pixel::Type)+0x10>)
 8013016:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 801301a:	4802      	ldrgt	r0, [pc, #8]	@ (8013024 <pixel::pixel_get_type(pixel::Type)+0x14>)
 801301c:	4770      	bx	lr
 801301e:	bf00      	nop
 8013020:	08020ec0 	stmdaeq	r2, {r6, r7, r9, sl, fp}
 8013024:	0801d9dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, ip, lr, pc}

08013028 <pixel::pixel_get_type(char const*)>:
 8013028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801302a:	4604      	mov	r4, r0
 801302c:	b928      	cbnz	r0, 801303a <pixel::pixel_get_type(char const*)+0x12>
 801302e:	4b12      	ldr	r3, [pc, #72]	@ (8013078 <pixel::pixel_get_type(char const*)+0x50>)
 8013030:	4a12      	ldr	r2, [pc, #72]	@ (801307c <pixel::pixel_get_type(char const*)+0x54>)
 8013032:	4813      	ldr	r0, [pc, #76]	@ (8013080 <pixel::pixel_get_type(char const*)+0x58>)
 8013034:	213c      	movs	r1, #60	@ 0x3c
 8013036:	f009 fad9 	bl	801c5ec <__assert_func>
 801303a:	4912      	ldr	r1, [pc, #72]	@ (8013084 <pixel::pixel_get_type(char const*)+0x5c>)
 801303c:	2000      	movs	r0, #0
 801303e:	1e66      	subs	r6, r4, #1
 8013040:	1e4d      	subs	r5, r1, #1
 8013042:	e000      	b.n	8013046 <pixel::pixel_get_type(char const*)+0x1e>
 8013044:	b1ba      	cbz	r2, 8013076 <pixel::pixel_get_type(char const*)+0x4e>
 8013046:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801304a:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 801304e:	2b19      	cmp	r3, #25
 8013050:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8013054:	f1a3 0c41 	sub.w	ip, r3, #65	@ 0x41
 8013058:	4617      	mov	r7, r2
 801305a:	bf98      	it	ls
 801305c:	f102 0720 	addls.w	r7, r2, #32
 8013060:	f1bc 0f19 	cmp.w	ip, #25
 8013064:	bf98      	it	ls
 8013066:	3320      	addls	r3, #32
 8013068:	42bb      	cmp	r3, r7
 801306a:	d0eb      	beq.n	8013044 <pixel::pixel_get_type(char const*)+0x1c>
 801306c:	3001      	adds	r0, #1
 801306e:	280e      	cmp	r0, #14
 8013070:	f101 0108 	add.w	r1, r1, #8
 8013074:	d1e3      	bne.n	801303e <pixel::pixel_get_type(char const*)+0x16>
 8013076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013078:	0801d9e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, fp, ip, lr, pc}
 801307c:	0801d9f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, fp, ip, lr, pc}
 8013080:	0801da06 	stmdaeq	r1, {r1, r2, r9, fp, ip, lr, pc}
 8013084:	08020ec0 	stmdaeq	r2, {r6, r7, r9, sl, fp}

08013088 <pixel::pixel_get_map(char const*)>:
 8013088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308a:	4604      	mov	r4, r0
 801308c:	b928      	cbnz	r0, 801309a <pixel::pixel_get_map(char const*)+0x12>
 801308e:	4b15      	ldr	r3, [pc, #84]	@ (80130e4 <pixel::pixel_get_map(char const*)+0x5c>)
 8013090:	4a15      	ldr	r2, [pc, #84]	@ (80130e8 <pixel::pixel_get_map(char const*)+0x60>)
 8013092:	4816      	ldr	r0, [pc, #88]	@ (80130ec <pixel::pixel_get_map(char const*)+0x64>)
 8013094:	214a      	movs	r1, #74	@ 0x4a
 8013096:	f009 faa9 	bl	801c5ec <__assert_func>
 801309a:	4b15      	ldr	r3, [pc, #84]	@ (80130f0 <pixel::pixel_get_map(char const*)+0x68>)
 801309c:	2000      	movs	r0, #0
 801309e:	1e5d      	subs	r5, r3, #1
 80130a0:	1e66      	subs	r6, r4, #1
 80130a2:	f103 0c02 	add.w	ip, r3, #2
 80130a6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80130aa:	f1a2 0141 	sub.w	r1, r2, #65	@ 0x41
 80130ae:	2919      	cmp	r1, #25
 80130b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80130b4:	f1a1 0e41 	sub.w	lr, r1, #65	@ 0x41
 80130b8:	4617      	mov	r7, r2
 80130ba:	bf98      	it	ls
 80130bc:	f102 0720 	addls.w	r7, r2, #32
 80130c0:	f1be 0f19 	cmp.w	lr, #25
 80130c4:	bf98      	it	ls
 80130c6:	3120      	addls	r1, #32
 80130c8:	42b9      	cmp	r1, r7
 80130ca:	d005      	beq.n	80130d8 <pixel::pixel_get_map(char const*)+0x50>
 80130cc:	3001      	adds	r0, #1
 80130ce:	2806      	cmp	r0, #6
 80130d0:	f103 0304 	add.w	r3, r3, #4
 80130d4:	d1e3      	bne.n	801309e <pixel::pixel_get_map(char const*)+0x16>
 80130d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130d8:	2a00      	cmp	r2, #0
 80130da:	d0fc      	beq.n	80130d6 <pixel::pixel_get_map(char const*)+0x4e>
 80130dc:	4565      	cmp	r5, ip
 80130de:	d1e2      	bne.n	80130a6 <pixel::pixel_get_map(char const*)+0x1e>
 80130e0:	e7f9      	b.n	80130d6 <pixel::pixel_get_map(char const*)+0x4e>
 80130e2:	bf00      	nop
 80130e4:	0801d9e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, fp, ip, lr, pc}
 80130e8:	0801da18 	stmdaeq	r1, {r3, r4, r9, fp, ip, lr, pc}
 80130ec:	0801da06 	stmdaeq	r1, {r1, r2, r9, fp, ip, lr, pc}
 80130f0:	08020ea8 	stmdaeq	r2, {r3, r5, r7, r9, sl, fp}

080130f4 <pixel::pixel_get_map(pixel::Map)>:
 80130f4:	2805      	cmp	r0, #5
 80130f6:	bfda      	itte	le
 80130f8:	4b02      	ldrle	r3, [pc, #8]	@ (8013104 <pixel::pixel_get_map(pixel::Map)+0x10>)
 80130fa:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 80130fe:	4802      	ldrgt	r0, [pc, #8]	@ (8013108 <pixel::pixel_get_map(pixel::Map)+0x14>)
 8013100:	4770      	bx	lr
 8013102:	bf00      	nop
 8013104:	08020ea8 	stmdaeq	r2, {r3, r5, r7, r9, sl, fp}
 8013108:	0801da26 	stmdaeq	r1, {r1, r2, r5, r9, fp, ip, lr, pc}

0801310c <remoteconfig::pixel::json_get_types(char*, unsigned long)>:
 801310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013110:	f1a1 0802 	sub.w	r8, r1, #2
 8013114:	4a15      	ldr	r2, [pc, #84]	@ (801316c <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x60>)
 8013116:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 801317c <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x70>
 801311a:	f8df a064 	ldr.w	sl, [pc, #100]	@ 8013180 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x74>
 801311e:	460d      	mov	r5, r1
 8013120:	4641      	mov	r1, r8
 8013122:	4606      	mov	r6, r0
 8013124:	f009 f9aa 	bl	801c47c <snprintf>
 8013128:	2700      	movs	r7, #0
 801312a:	4604      	mov	r4, r0
 801312c:	eb07 0309 	add.w	r3, r7, r9
 8013130:	3708      	adds	r7, #8
 8013132:	2f78      	cmp	r7, #120	@ 0x78
 8013134:	eb06 0004 	add.w	r0, r6, r4
 8013138:	d111      	bne.n	801315e <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x52>
 801313a:	235d      	movs	r3, #93	@ 0x5d
 801313c:	1c67      	adds	r7, r4, #1
 801313e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8013142:	42bd      	cmp	r5, r7
 8013144:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013148:	5533      	strb	r3, [r6, r4]
 801314a:	d205      	bcs.n	8013158 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x4c>
 801314c:	4b08      	ldr	r3, [pc, #32]	@ (8013170 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x64>)
 801314e:	4a09      	ldr	r2, [pc, #36]	@ (8013174 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x68>)
 8013150:	4809      	ldr	r0, [pc, #36]	@ (8013178 <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x6c>)
 8013152:	216e      	movs	r1, #110	@ 0x6e
 8013154:	f009 fa4a 	bl	801c5ec <__assert_func>
 8013158:	4638      	mov	r0, r7
 801315a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801315e:	eba8 0104 	sub.w	r1, r8, r4
 8013162:	4652      	mov	r2, sl
 8013164:	f009 f98a 	bl	801c47c <snprintf>
 8013168:	4404      	add	r4, r0
 801316a:	e7df      	b.n	801312c <remoteconfig::pixel::json_get_types(char*, unsigned long)+0x20>
 801316c:	0801da30 	stmdaeq	r1, {r4, r5, r9, fp, ip, lr, pc}
 8013170:	0801da3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r9, fp, ip, lr, pc}
 8013174:	0801da55 	stmdaeq	r1, {r0, r2, r4, r6, r9, fp, ip, lr, pc}
 8013178:	0801da06 	stmdaeq	r1, {r1, r2, r9, fp, ip, lr, pc}
 801317c:	08020ec0 	stmdaeq	r2, {r6, r7, r9, sl, fp}
 8013180:	0801d21b 	stmdaeq	r1, {r0, r1, r3, r4, r9, ip, lr, pc}

08013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>:
 8013184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013188:	4607      	mov	r7, r0
 801318a:	4688      	mov	r8, r1
 801318c:	f3c2 4907 	ubfx	r9, r2, #16, #8
 8013190:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8013194:	b2d4      	uxtb	r4, r2
 8013196:	f7f6 fd13 	bl	8009bc0 <PixelConfiguration::Get()>
 801319a:	68c3      	ldr	r3, [r0, #12]
 801319c:	4e29      	ldr	r6, [pc, #164]	@ (8013244 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xc0>)
 801319e:	2b0d      	cmp	r3, #13
 80131a0:	d846      	bhi.n	8013230 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xac>
 80131a2:	e8df f003 	tbb	[pc, r3]
 80131a6:	45454507 	strbmi	r4, [r5, #-1287]	@ 0xfffffaf9
 80131aa:	30454545 	subcc	r4, r5, r5, asr #10
 80131ae:	12454545 	subne	r4, r5, #289406976	@ 0x11400000
 80131b2:	e9cd1d12 	stmib	sp, {r1, r4, r8, sl, fp, ip}^
 80131b6:	a400      	add	r4, pc, #0	@ (adr r4, 80131b8 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x34>)
 80131b8:	464b      	mov	r3, r9
 80131ba:	6830      	ldr	r0, [r6, #0]
 80131bc:	4642      	mov	r2, r8
 80131be:	4639      	mov	r1, r7
 80131c0:	f000 fe36 	bl	8013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 80131c4:	b004      	add	sp, #16
 80131c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ca:	e9cd a401 	strd	sl, r4, [sp, #4]
 80131ce:	f8cd 9000 	str.w	r9, [sp]
 80131d2:	23ff      	movs	r3, #255	@ 0xff
 80131d4:	6830      	ldr	r0, [r6, #0]
 80131d6:	4642      	mov	r2, r8
 80131d8:	4639      	mov	r1, r7
 80131da:	f000 ff4d 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 80131de:	e7f1      	b.n	80131c4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 80131e0:	ea6f 1519 	mvn.w	r5, r9, lsr #4
 80131e4:	f089 03c0 	eor.w	r3, r9, #192	@ 0xc0
 80131e8:	f005 050c 	and.w	r5, r5, #12
 80131ec:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 80131f0:	ea6f 0394 	mvn.w	r3, r4, lsr #2
 80131f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80131f8:	432b      	orrs	r3, r5
 80131fa:	e9cd a901 	strd	sl, r9, [sp, #4]
 80131fe:	9400      	str	r4, [sp, #0]
 8013200:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8013204:	e7e6      	b.n	80131d4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x50>
 8013206:	45d1      	cmp	r9, sl
 8013208:	6830      	ldr	r0, [r6, #0]
 801320a:	f04f 0300 	mov.w	r3, #0
 801320e:	d109      	bne.n	8013224 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xa0>
 8013210:	45a1      	cmp	r9, r4
 8013212:	d107      	bne.n	8013224 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0xa0>
 8013214:	e9cd 3901 	strd	r3, r9, [sp, #4]
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	4642      	mov	r2, r8
 801321c:	4639      	mov	r1, r7
 801321e:	f001 fe07 	bl	8014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8013222:	e7cf      	b.n	80131c4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 8013224:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8013228:	f8cd a000 	str.w	sl, [sp]
 801322c:	464b      	mov	r3, r9
 801322e:	e7f4      	b.n	801321a <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x96>
 8013230:	e9cd a400 	strd	sl, r4, [sp]
 8013234:	464b      	mov	r3, r9
 8013236:	6830      	ldr	r0, [r6, #0]
 8013238:	4642      	mov	r2, r8
 801323a:	4639      	mov	r1, r7
 801323c:	f000 fcea 	bl	8013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>
 8013240:	e7c0      	b.n	80131c4 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]+0x40>
 8013242:	bf00      	nop
 8013244:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc

08013248 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>:
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	4605      	mov	r5, r0
 801324c:	2400      	movs	r4, #0
 801324e:	f7f6 fcb7 	bl	8009bc0 <PixelConfiguration::Get()>
 8013252:	6803      	ldr	r3, [r0, #0]
 8013254:	429c      	cmp	r4, r3
 8013256:	d300      	bcc.n	801325a <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x12>
 8013258:	bd38      	pop	{r3, r4, r5, pc}
 801325a:	4621      	mov	r1, r4
 801325c:	2200      	movs	r2, #0
 801325e:	4628      	mov	r0, r5
 8013260:	f7ff ff90 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8013264:	3401      	adds	r4, #1
 8013266:	e7f2      	b.n	801324e <PixelPatterns::Clear(unsigned long) [clone .isra.0]+0x6>

08013268 <PixelPatterns::PixelPatterns(unsigned long)>:
 8013268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801326a:	233a      	movs	r3, #58	@ 0x3a
 801326c:	4a19      	ldr	r2, [pc, #100]	@ (80132d4 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 801326e:	460c      	mov	r4, r1
 8013270:	4605      	mov	r5, r0
 8013272:	4919      	ldr	r1, [pc, #100]	@ (80132d8 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 8013274:	4819      	ldr	r0, [pc, #100]	@ (80132dc <PixelPatterns::PixelPatterns(unsigned long)+0x74>)
 8013276:	f009 f8d9 	bl	801c42c <printf>
 801327a:	4a17      	ldr	r2, [pc, #92]	@ (80132d8 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 801327c:	4915      	ldr	r1, [pc, #84]	@ (80132d4 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 801327e:	4818      	ldr	r0, [pc, #96]	@ (80132e0 <PixelPatterns::PixelPatterns(unsigned long)+0x78>)
 8013280:	9400      	str	r4, [sp, #0]
 8013282:	233b      	movs	r3, #59	@ 0x3b
 8013284:	f009 f8d2 	bl	801c42c <printf>
 8013288:	4b16      	ldr	r3, [pc, #88]	@ (80132e4 <PixelPatterns::PixelPatterns(unsigned long)+0x7c>)
 801328a:	4a17      	ldr	r2, [pc, #92]	@ (80132e8 <PixelPatterns::PixelPatterns(unsigned long)+0x80>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	6013      	str	r3, [r2, #0]
 8013290:	b92b      	cbnz	r3, 801329e <PixelPatterns::PixelPatterns(unsigned long)+0x36>
 8013292:	4b16      	ldr	r3, [pc, #88]	@ (80132ec <PixelPatterns::PixelPatterns(unsigned long)+0x84>)
 8013294:	4a0f      	ldr	r2, [pc, #60]	@ (80132d4 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 8013296:	4810      	ldr	r0, [pc, #64]	@ (80132d8 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 8013298:	2142      	movs	r1, #66	@ 0x42
 801329a:	f009 f9a7 	bl	801c5ec <__assert_func>
 801329e:	4b14      	ldr	r3, [pc, #80]	@ (80132f0 <PixelPatterns::PixelPatterns(unsigned long)+0x88>)
 80132a0:	2c08      	cmp	r4, #8
 80132a2:	bf28      	it	cs
 80132a4:	2408      	movcs	r4, #8
 80132a6:	601c      	str	r4, [r3, #0]
 80132a8:	4b12      	ldr	r3, [pc, #72]	@ (80132f4 <PixelPatterns::PixelPatterns(unsigned long)+0x8c>)
 80132aa:	2200      	movs	r2, #0
 80132ac:	6818      	ldr	r0, [r3, #0]
 80132ae:	4b12      	ldr	r3, [pc, #72]	@ (80132f8 <PixelPatterns::PixelPatterns(unsigned long)+0x90>)
 80132b0:	4611      	mov	r1, r2
 80132b2:	3201      	adds	r2, #1
 80132b4:	2a08      	cmp	r2, #8
 80132b6:	61d9      	str	r1, [r3, #28]
 80132b8:	6018      	str	r0, [r3, #0]
 80132ba:	6199      	str	r1, [r3, #24]
 80132bc:	f103 0320 	add.w	r3, r3, #32
 80132c0:	d1f7      	bne.n	80132b2 <PixelPatterns::PixelPatterns(unsigned long)+0x4a>
 80132c2:	4a04      	ldr	r2, [pc, #16]	@ (80132d4 <PixelPatterns::PixelPatterns(unsigned long)+0x6c>)
 80132c4:	4904      	ldr	r1, [pc, #16]	@ (80132d8 <PixelPatterns::PixelPatterns(unsigned long)+0x70>)
 80132c6:	480d      	ldr	r0, [pc, #52]	@ (80132fc <PixelPatterns::PixelPatterns(unsigned long)+0x94>)
 80132c8:	234e      	movs	r3, #78	@ 0x4e
 80132ca:	f009 f8af 	bl	801c42c <printf>
 80132ce:	4628      	mov	r0, r5
 80132d0:	b003      	add	sp, #12
 80132d2:	bd30      	pop	{r4, r5, pc}
 80132d4:	0801da64 	stmdaeq	r1, {r2, r5, r6, r9, fp, ip, lr, pc}
 80132d8:	0801da72 	stmdaeq	r1, {r1, r4, r5, r6, r9, fp, ip, lr, pc}
 80132dc:	0801cc0f 	stmdaeq	r1, {r0, r1, r2, r3, sl, fp, lr, pc}
 80132e0:	0801da91 	stmdaeq	r1, {r0, r4, r7, r9, fp, ip, lr, pc}
 80132e4:	2000dfc4 	andcs	sp, r0, r4, asr #31
 80132e8:	2000dfbc 			@ <UNDEFINED> instruction: 0x2000dfbc
 80132ec:	0801dab4 	stmdaeq	r1, {r2, r4, r5, r7, r9, fp, ip, lr, pc}
 80132f0:	2000dfb8 			@ <UNDEFINED> instruction: 0x2000dfb8
 80132f4:	2001bcd0 	ldrdcs	fp, [r1], -r0
 80132f8:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8
 80132fc:	0801cc44 	stmdaeq	r1, {r2, r6, sl, fp, lr, pc}

08013300 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8013300:	2805      	cmp	r0, #5
 8013302:	bfdd      	ittte	le
 8013304:	4b02      	ldrle	r3, [pc, #8]	@ (8013310 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8013306:	220e      	movle	r2, #14
 8013308:	fb02 3000 	mlale	r0, r2, r0, r3
 801330c:	4801      	ldrgt	r0, [pc, #4]	@ (8013314 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 801330e:	4770      	bx	lr
 8013310:	08020f30 	stmdaeq	r2, {r4, r5, r8, r9, sl, fp}
 8013314:	0801d9dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, ip, lr, pc}

08013318 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)>:
 8013318:	b5e0      	push	{r5, r6, r7, lr}
 801331a:	4608      	mov	r0, r1
 801331c:	460d      	mov	r5, r1
 801331e:	4617      	mov	r7, r2
 8013320:	461e      	mov	r6, r3
 8013322:	f7ff ff91 	bl	8013248 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8013326:	4906      	ldr	r1, [pc, #24]	@ (8013340 <PixelPatterns::RainbowCycle(unsigned long, unsigned long, pixelpatterns::Direction)+0x28>)
 8013328:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 801332c:	2301      	movs	r3, #1
 801332e:	61cb      	str	r3, [r1, #28]
 8013330:	22ff      	movs	r2, #255	@ 0xff
 8013332:	2300      	movs	r3, #0
 8013334:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8013338:	604f      	str	r7, [r1, #4]
 801333a:	618e      	str	r6, [r1, #24]
 801333c:	bde0      	pop	{r5, r6, r7, pc}
 801333e:	bf00      	nop
 8013340:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

08013344 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 8013344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013346:	4c0c      	ldr	r4, [pc, #48]	@ (8013378 <PixelPatterns::TheaterChase(unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x34>)
 8013348:	460d      	mov	r5, r1
 801334a:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 801334e:	4608      	mov	r0, r1
 8013350:	4617      	mov	r7, r2
 8013352:	461e      	mov	r6, r3
 8013354:	f7ff ff78 	bl	8013248 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8013358:	2302      	movs	r3, #2
 801335a:	61e3      	str	r3, [r4, #28]
 801335c:	9b06      	ldr	r3, [sp, #24]
 801335e:	6063      	str	r3, [r4, #4]
 8013360:	f7f6 fc2e 	bl	8009bc0 <PixelConfiguration::Get()>
 8013364:	6803      	ldr	r3, [r0, #0]
 8013366:	6123      	str	r3, [r4, #16]
 8013368:	2300      	movs	r3, #0
 801336a:	6163      	str	r3, [r4, #20]
 801336c:	9b07      	ldr	r3, [sp, #28]
 801336e:	61a3      	str	r3, [r4, #24]
 8013370:	e9c4 7602 	strd	r7, r6, [r4, #8]
 8013374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013376:	bf00      	nop
 8013378:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

0801337c <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 801337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801337e:	4c0b      	ldr	r4, [pc, #44]	@ (80133ac <PixelPatterns::ColourWipe(unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 8013380:	460d      	mov	r5, r1
 8013382:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8013386:	4608      	mov	r0, r1
 8013388:	4616      	mov	r6, r2
 801338a:	461f      	mov	r7, r3
 801338c:	f7ff ff5c 	bl	8013248 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 8013390:	2303      	movs	r3, #3
 8013392:	61e3      	str	r3, [r4, #28]
 8013394:	6067      	str	r7, [r4, #4]
 8013396:	f7f6 fc13 	bl	8009bc0 <PixelConfiguration::Get()>
 801339a:	6803      	ldr	r3, [r0, #0]
 801339c:	6123      	str	r3, [r4, #16]
 801339e:	2300      	movs	r3, #0
 80133a0:	6163      	str	r3, [r4, #20]
 80133a2:	9b06      	ldr	r3, [sp, #24]
 80133a4:	60a6      	str	r6, [r4, #8]
 80133a6:	61a3      	str	r3, [r4, #24]
 80133a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133aa:	bf00      	nop
 80133ac:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

080133b0 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)>:
 80133b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133b2:	4608      	mov	r0, r1
 80133b4:	460d      	mov	r5, r1
 80133b6:	4616      	mov	r6, r2
 80133b8:	461f      	mov	r7, r3
 80133ba:	f7ff ff45 	bl	8013248 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 80133be:	f7f6 fbff 	bl	8009bc0 <PixelConfiguration::Get()>
 80133c2:	4911      	ldr	r1, [pc, #68]	@ (8013408 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x58>)
 80133c4:	6800      	ldr	r0, [r0, #0]
 80133c6:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80133ca:	2304      	movs	r3, #4
 80133cc:	61cb      	str	r3, [r1, #28]
 80133ce:	608e      	str	r6, [r1, #8]
 80133d0:	1e43      	subs	r3, r0, #1
 80133d2:	4e0e      	ldr	r6, [pc, #56]	@ (801340c <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x5c>)
 80133d4:	604f      	str	r7, [r1, #4]
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	b29b      	uxth	r3, r3
 80133da:	6835      	ldr	r5, [r6, #0]
 80133dc:	610b      	str	r3, [r1, #16]
 80133de:	2300      	movs	r3, #0
 80133e0:	614b      	str	r3, [r1, #20]
 80133e2:	b96d      	cbnz	r5, 8013400 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x50>
 80133e4:	0084      	lsls	r4, r0, #2
 80133e6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80133ea:	4298      	cmp	r0, r3
 80133ec:	bf34      	ite	cc
 80133ee:	4620      	movcc	r0, r4
 80133f0:	f04f 30ff 	movcs.w	r0, #4294967295	@ 0xffffffff
 80133f4:	f009 fa72 	bl	801c8dc <operator new[](unsigned int)>
 80133f8:	6030      	str	r0, [r6, #0]
 80133fa:	4404      	add	r4, r0
 80133fc:	42a0      	cmp	r0, r4
 80133fe:	d100      	bne.n	8013402 <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x52>
 8013400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013402:	f840 5b04 	str.w	r5, [r0], #4
 8013406:	e7f9      	b.n	80133fc <PixelPatterns::Scanner(unsigned long, unsigned long, unsigned long)+0x4c>
 8013408:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8
 801340c:	2000deb4 			@ <UNDEFINED> instruction: 0x2000deb4

08013410 <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)>:
 8013410:	b5e0      	push	{r5, r6, r7, lr}
 8013412:	4608      	mov	r0, r1
 8013414:	460d      	mov	r5, r1
 8013416:	461e      	mov	r6, r3
 8013418:	4617      	mov	r7, r2
 801341a:	f7ff ff15 	bl	8013248 <PixelPatterns::Clear(unsigned long) [clone .isra.0]>
 801341e:	4908      	ldr	r1, [pc, #32]	@ (8013440 <PixelPatterns::Fade(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, pixelpatterns::Direction)+0x30>)
 8013420:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8013424:	2305      	movs	r3, #5
 8013426:	61cb      	str	r3, [r1, #28]
 8013428:	9b05      	ldr	r3, [sp, #20]
 801342a:	604b      	str	r3, [r1, #4]
 801342c:	9b04      	ldr	r3, [sp, #16]
 801342e:	610b      	str	r3, [r1, #16]
 8013430:	2300      	movs	r3, #0
 8013432:	614b      	str	r3, [r1, #20]
 8013434:	9b06      	ldr	r3, [sp, #24]
 8013436:	618b      	str	r3, [r1, #24]
 8013438:	e9c1 7602 	strd	r7, r6, [r1, #8]
 801343c:	bde0      	pop	{r5, r6, r7, pc}
 801343e:	bf00      	nop
 8013440:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

08013444 <PixelPatterns::Wheel(unsigned char)>:
 8013444:	43cb      	mvns	r3, r1
 8013446:	b2db      	uxtb	r3, r3
 8013448:	2b54      	cmp	r3, #84	@ 0x54
 801344a:	d807      	bhi.n	801345c <PixelPatterns::Wheel(unsigned char)+0x18>
 801344c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013450:	b2db      	uxtb	r3, r3
 8013452:	0418      	lsls	r0, r3, #16
 8013454:	f480 007f 	eor.w	r0, r0, #16711680	@ 0xff0000
 8013458:	4318      	orrs	r0, r3
 801345a:	4770      	bx	lr
 801345c:	2ba9      	cmp	r3, #169	@ 0xa9
 801345e:	d809      	bhi.n	8013474 <PixelPatterns::Wheel(unsigned char)+0x30>
 8013460:	f1c1 01aa 	rsb	r1, r1, #170	@ 0xaa
 8013464:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013468:	b2c9      	uxtb	r1, r1
 801346a:	43c8      	mvns	r0, r1
 801346c:	b2c0      	uxtb	r0, r0
 801346e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8013472:	4770      	bx	lr
 8013474:	f1c1 0155 	rsb	r1, r1, #85	@ 0x55
 8013478:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801347c:	b2c9      	uxtb	r1, r1
 801347e:	0208      	lsls	r0, r1, #8
 8013480:	f480 407f 	eor.w	r0, r0, #65280	@ 0xff00
 8013484:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8013488:	4770      	bx	lr
	...

0801348c <PixelPatterns::Increment(unsigned long)>:
 801348c:	4a0d      	ldr	r2, [pc, #52]	@ (80134c4 <PixelPatterns::Increment(unsigned long)+0x38>)
 801348e:	b510      	push	{r4, lr}
 8013490:	014c      	lsls	r4, r1, #5
 8013492:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8013496:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 801349a:	b938      	cbnz	r0, 80134ac <PixelPatterns::Increment(unsigned long)+0x20>
 801349c:	690c      	ldr	r4, [r1, #16]
 801349e:	3301      	adds	r3, #1
 80134a0:	42a3      	cmp	r3, r4
 80134a2:	bf14      	ite	ne
 80134a4:	461a      	movne	r2, r3
 80134a6:	4602      	moveq	r2, r0
 80134a8:	614a      	str	r2, [r1, #20]
 80134aa:	bd10      	pop	{r4, pc}
 80134ac:	b92b      	cbnz	r3, 80134ba <PixelPatterns::Increment(unsigned long)+0x2e>
 80134ae:	4422      	add	r2, r4
 80134b0:	6913      	ldr	r3, [r2, #16]
 80134b2:	3b01      	subs	r3, #1
 80134b4:	b29b      	uxth	r3, r3
 80134b6:	6153      	str	r3, [r2, #20]
 80134b8:	e7f7      	b.n	80134aa <PixelPatterns::Increment(unsigned long)+0x1e>
 80134ba:	3b01      	subs	r3, #1
 80134bc:	614b      	str	r3, [r1, #20]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d1f3      	bne.n	80134aa <PixelPatterns::Increment(unsigned long)+0x1e>
 80134c2:	e7f4      	b.n	80134ae <PixelPatterns::Increment(unsigned long)+0x22>
 80134c4:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

080134c8 <PixelPatterns::RainbowCycleUpdate(unsigned long)>:
 80134c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ca:	4b12      	ldr	r3, [pc, #72]	@ (8013514 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x4c>)
 80134cc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80134d0:	4606      	mov	r6, r0
 80134d2:	695f      	ldr	r7, [r3, #20]
 80134d4:	460c      	mov	r4, r1
 80134d6:	2500      	movs	r5, #0
 80134d8:	f7f6 fb72 	bl	8009bc0 <PixelConfiguration::Get()>
 80134dc:	6803      	ldr	r3, [r0, #0]
 80134de:	429d      	cmp	r5, r3
 80134e0:	d305      	bcc.n	80134ee <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x26>
 80134e2:	4621      	mov	r1, r4
 80134e4:	4630      	mov	r0, r6
 80134e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80134ea:	f7ff bfcf 	b.w	801348c <PixelPatterns::Increment(unsigned long)>
 80134ee:	f7f6 fb67 	bl	8009bc0 <PixelConfiguration::Get()>
 80134f2:	0229      	lsls	r1, r5, #8
 80134f4:	6803      	ldr	r3, [r0, #0]
 80134f6:	fbb1 f1f3 	udiv	r1, r1, r3
 80134fa:	4439      	add	r1, r7
 80134fc:	b2c9      	uxtb	r1, r1
 80134fe:	4630      	mov	r0, r6
 8013500:	f7ff ffa0 	bl	8013444 <PixelPatterns::Wheel(unsigned char)>
 8013504:	4629      	mov	r1, r5
 8013506:	4602      	mov	r2, r0
 8013508:	4620      	mov	r0, r4
 801350a:	f7ff fe3b 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 801350e:	3501      	adds	r5, #1
 8013510:	e7e2      	b.n	80134d8 <PixelPatterns::RainbowCycleUpdate(unsigned long)+0x10>
 8013512:	bf00      	nop
 8013514:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

08013518 <PixelPatterns::TheaterChaseUpdate(unsigned long)>:
 8013518:	4b13      	ldr	r3, [pc, #76]	@ (8013568 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x50>)
 801351a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801351e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013522:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8013526:	f8d3 9014 	ldr.w	r9, [r3, #20]
 801352a:	f8df a040 	ldr.w	sl, [pc, #64]	@ 801356c <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x54>
 801352e:	4606      	mov	r6, r0
 8013530:	460c      	mov	r4, r1
 8013532:	2500      	movs	r5, #0
 8013534:	f7f6 fb44 	bl	8009bc0 <PixelConfiguration::Get()>
 8013538:	6803      	ldr	r3, [r0, #0]
 801353a:	429d      	cmp	r5, r3
 801353c:	d305      	bcc.n	801354a <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x32>
 801353e:	4621      	mov	r1, r4
 8013540:	4630      	mov	r0, r6
 8013542:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013546:	f7ff bfa1 	b.w	801348c <PixelPatterns::Increment(unsigned long)>
 801354a:	eb05 0309 	add.w	r3, r5, r9
 801354e:	fb0a f303 	mul.w	r3, sl, r3
 8013552:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 8013556:	4629      	mov	r1, r5
 8013558:	bf94      	ite	ls
 801355a:	463a      	movls	r2, r7
 801355c:	4642      	movhi	r2, r8
 801355e:	4620      	mov	r0, r4
 8013560:	f7ff fe10 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8013564:	3501      	adds	r5, #1
 8013566:	e7e5      	b.n	8013534 <PixelPatterns::TheaterChaseUpdate(unsigned long)+0x1c>
 8013568:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8
 801356c:	aaaaaaab 	bge	6abe020 <__stack_size+0x6ab6020>

08013570 <PixelPatterns::ColourWipeUpdate(unsigned long)>:
 8013570:	b538      	push	{r3, r4, r5, lr}
 8013572:	4b08      	ldr	r3, [pc, #32]	@ (8013594 <PixelPatterns::ColourWipeUpdate(unsigned long)+0x24>)
 8013574:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013578:	460c      	mov	r4, r1
 801357a:	4605      	mov	r5, r0
 801357c:	6959      	ldr	r1, [r3, #20]
 801357e:	689a      	ldr	r2, [r3, #8]
 8013580:	4620      	mov	r0, r4
 8013582:	f7ff fdff 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 8013586:	4621      	mov	r1, r4
 8013588:	4628      	mov	r0, r5
 801358a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801358e:	f7ff bf7d 	b.w	801348c <PixelPatterns::Increment(unsigned long)>
 8013592:	bf00      	nop
 8013594:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

08013598 <PixelPatterns::ScannerUpdate(unsigned long)>:
 8013598:	4b26      	ldr	r3, [pc, #152]	@ (8013634 <PixelPatterns::ScannerUpdate(unsigned long)+0x9c>)
 801359a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80135a2:	e9d3 2b04 	ldrd	r2, fp, [r3, #16]
 80135a6:	689f      	ldr	r7, [r3, #8]
 80135a8:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8013638 <PixelPatterns::ScannerUpdate(unsigned long)+0xa0>
 80135ac:	9001      	str	r0, [sp, #4]
 80135ae:	460e      	mov	r6, r1
 80135b0:	2400      	movs	r4, #0
 80135b2:	eba2 090b 	sub.w	r9, r2, fp
 80135b6:	f7f6 fb03 	bl	8009bc0 <PixelConfiguration::Get()>
 80135ba:	6803      	ldr	r3, [r0, #0]
 80135bc:	429c      	cmp	r4, r3
 80135be:	d306      	bcc.n	80135ce <PixelPatterns::ScannerUpdate(unsigned long)+0x36>
 80135c0:	9801      	ldr	r0, [sp, #4]
 80135c2:	4631      	mov	r1, r6
 80135c4:	b003      	add	sp, #12
 80135c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ca:	f7ff bf5f 	b.w	801348c <PixelPatterns::Increment(unsigned long)>
 80135ce:	455c      	cmp	r4, fp
 80135d0:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80135d4:	d10a      	bne.n	80135ec <PixelPatterns::ScannerUpdate(unsigned long)+0x54>
 80135d6:	463a      	mov	r2, r7
 80135d8:	4621      	mov	r1, r4
 80135da:	4630      	mov	r0, r6
 80135dc:	f7ff fdd2 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80135e0:	f8d8 3000 	ldr.w	r3, [r8]
 80135e4:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80135e8:	3401      	adds	r4, #1
 80135ea:	e7e4      	b.n	80135b6 <PixelPatterns::ScannerUpdate(unsigned long)+0x1e>
 80135ec:	45a1      	cmp	r9, r4
 80135ee:	d109      	bne.n	8013604 <PixelPatterns::ScannerUpdate(unsigned long)+0x6c>
 80135f0:	463a      	mov	r2, r7
 80135f2:	4649      	mov	r1, r9
 80135f4:	4630      	mov	r0, r6
 80135f6:	f7ff fdc5 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80135fa:	f8d8 2000 	ldr.w	r2, [r8]
 80135fe:	f842 700a 	str.w	r7, [r2, sl]
 8013602:	e7f1      	b.n	80135e8 <PixelPatterns::ScannerUpdate(unsigned long)+0x50>
 8013604:	f8d8 2000 	ldr.w	r2, [r8]
 8013608:	f852 200a 	ldr.w	r2, [r2, sl]
 801360c:	f3c2 2546 	ubfx	r5, r2, #9, #7
 8013610:	f3c2 4146 	ubfx	r1, r2, #17, #7
 8013614:	022d      	lsls	r5, r5, #8
 8013616:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 801361a:	f3c2 0246 	ubfx	r2, r2, #1, #7
 801361e:	4315      	orrs	r5, r2
 8013620:	462a      	mov	r2, r5
 8013622:	4621      	mov	r1, r4
 8013624:	4630      	mov	r0, r6
 8013626:	f7ff fdad 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 801362a:	f8d8 2000 	ldr.w	r2, [r8]
 801362e:	f842 500a 	str.w	r5, [r2, sl]
 8013632:	e7d9      	b.n	80135e8 <PixelPatterns::ScannerUpdate(unsigned long)+0x50>
 8013634:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8
 8013638:	2000deb4 			@ <UNDEFINED> instruction: 0x2000deb4

0801363c <PixelPatterns::FadeUpdate(unsigned long)>:
 801363c:	4a20      	ldr	r2, [pc, #128]	@ (80136c0 <PixelPatterns::FadeUpdate(unsigned long)+0x84>)
 801363e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8013642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013644:	e9d2 7302 	ldrd	r7, r3, [r2, #8]
 8013648:	460c      	mov	r4, r1
 801364a:	e9d2 1604 	ldrd	r1, r6, [r2, #16]
 801364e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013652:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8013656:	4372      	muls	r2, r6
 8013658:	4605      	mov	r5, r0
 801365a:	1b88      	subs	r0, r1, r6
 801365c:	fb00 220c 	mla	r2, r0, ip, r2
 8013660:	fbb2 f2f1 	udiv	r2, r2, r1
 8013664:	0212      	lsls	r2, r2, #8
 8013666:	fa1f fc82 	uxth.w	ip, r2
 801366a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801366e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8013672:	4372      	muls	r2, r6
 8013674:	fb00 220e 	mla	r2, r0, lr, r2
 8013678:	b2db      	uxtb	r3, r3
 801367a:	fbb2 f2f1 	udiv	r2, r2, r1
 801367e:	0412      	lsls	r2, r2, #16
 8013680:	b2ff      	uxtb	r7, r7
 8013682:	4373      	muls	r3, r6
 8013684:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013688:	fb00 3307 	mla	r3, r0, r7, r3
 801368c:	ea4c 0202 	orr.w	r2, ip, r2
 8013690:	fbb3 f3f1 	udiv	r3, r3, r1
 8013694:	b2db      	uxtb	r3, r3
 8013696:	ea42 0603 	orr.w	r6, r2, r3
 801369a:	2700      	movs	r7, #0
 801369c:	f7f6 fa90 	bl	8009bc0 <PixelConfiguration::Get()>
 80136a0:	6803      	ldr	r3, [r0, #0]
 80136a2:	429f      	cmp	r7, r3
 80136a4:	d305      	bcc.n	80136b2 <PixelPatterns::FadeUpdate(unsigned long)+0x76>
 80136a6:	4621      	mov	r1, r4
 80136a8:	4628      	mov	r0, r5
 80136aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80136ae:	f7ff beed 	b.w	801348c <PixelPatterns::Increment(unsigned long)>
 80136b2:	4639      	mov	r1, r7
 80136b4:	4632      	mov	r2, r6
 80136b6:	4620      	mov	r0, r4
 80136b8:	f7ff fd64 	bl	8013184 <PixelPatterns::SetPixelColour(unsigned long, unsigned long, unsigned long) [clone .isra.0]>
 80136bc:	3701      	adds	r7, #1
 80136be:	e7ed      	b.n	801369c <PixelPatterns::FadeUpdate(unsigned long)+0x60>
 80136c0:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

080136c4 <PixelPatterns::PortUpdate(unsigned long, unsigned long)>:
 80136c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c6:	4b12      	ldr	r3, [pc, #72]	@ (8013710 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x4c>)
 80136c8:	014e      	lsls	r6, r1, #5
 80136ca:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 80136ce:	599c      	ldr	r4, [r3, r6]
 80136d0:	686f      	ldr	r7, [r5, #4]
 80136d2:	1b14      	subs	r4, r2, r4
 80136d4:	42bc      	cmp	r4, r7
 80136d6:	d309      	bcc.n	80136ec <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x28>
 80136d8:	519a      	str	r2, [r3, r6]
 80136da:	69eb      	ldr	r3, [r5, #28]
 80136dc:	3b01      	subs	r3, #1
 80136de:	2b04      	cmp	r3, #4
 80136e0:	d804      	bhi.n	80136ec <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x28>
 80136e2:	e8df f003 	tbb	[pc, r3]
 80136e6:	0f0c0905 	svceq	0x000c0905
 80136ea:	20000012 	andcs	r0, r0, r2, lsl r0
 80136ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136f0:	f7ff feea 	bl	80134c8 <PixelPatterns::RainbowCycleUpdate(unsigned long)>
 80136f4:	2001      	movs	r0, #1
 80136f6:	e7fa      	b.n	80136ee <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x2a>
 80136f8:	f7ff ff0e 	bl	8013518 <PixelPatterns::TheaterChaseUpdate(unsigned long)>
 80136fc:	e7fa      	b.n	80136f4 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 80136fe:	f7ff ff37 	bl	8013570 <PixelPatterns::ColourWipeUpdate(unsigned long)>
 8013702:	e7f7      	b.n	80136f4 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8013704:	f7ff ff48 	bl	8013598 <PixelPatterns::ScannerUpdate(unsigned long)>
 8013708:	e7f4      	b.n	80136f4 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 801370a:	f7ff ff97 	bl	801363c <PixelPatterns::FadeUpdate(unsigned long)>
 801370e:	e7f1      	b.n	80136f4 <PixelPatterns::PortUpdate(unsigned long, unsigned long)+0x30>
 8013710:	2000deb8 			@ <UNDEFINED> instruction: 0x2000deb8

08013714 <TIMER3_IRQHandler>:
 8013714:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013718:	f8d3 2810 	ldr.w	r2, [r3, #2064]	@ 0x810
 801371c:	0791      	lsls	r1, r2, #30
 801371e:	d52b      	bpl.n	8013778 <TIMER3_IRQHandler+0x64>
 8013720:	b410      	push	{r4}
 8013722:	f8d3 4400 	ldr.w	r4, [r3, #1024]	@ 0x400
 8013726:	4817      	ldr	r0, [pc, #92]	@ (8013784 <TIMER3_IRQHandler+0x70>)
 8013728:	f024 0101 	bic.w	r1, r4, #1
 801372c:	f8c3 1400 	str.w	r1, [r3, #1024]	@ 0x400
 8013730:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 8013734:	4c14      	ldr	r4, [pc, #80]	@ (8013788 <TIMER3_IRQHandler+0x74>)
 8013736:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 801373a:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 801373e:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 8013742:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 8013746:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 801374a:	f8d3 140c 	ldr.w	r1, [r3, #1036]	@ 0x40c
 801374e:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8013752:	f8c3 140c 	str.w	r1, [r3, #1036]	@ 0x40c
 8013756:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 801375a:	2300      	movs	r3, #0
 801375c:	7023      	strb	r3, [r4, #0]
 801375e:	f44f 517f 	mov.w	r1, #16320	@ 0x3fc0
 8013762:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 8013766:	43d2      	mvns	r2, r2
 8013768:	f8c0 1828 	str.w	r1, [r0, #2088]	@ 0x828
 801376c:	6184      	str	r4, [r0, #24]
 801376e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013772:	f8cc 2810 	str.w	r2, [ip, #2064]	@ 0x810
 8013776:	4770      	bx	lr
 8013778:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 801377c:	43d1      	mvns	r1, r2
 801377e:	f8c0 1810 	str.w	r1, [r0, #2064]	@ 0x810
 8013782:	4770      	bx	lr
 8013784:	40020000 	andmi	r0, r2, r0
 8013788:	2000dfc8 	andcs	sp, r0, r8, asr #31

0801378c <WS28xxMulti::~WS28xxMulti()>:
 801378c:	b570      	push	{r4, r5, r6, lr}
 801378e:	4e0a      	ldr	r6, [pc, #40]	@ (80137b8 <WS28xxMulti::~WS28xxMulti()+0x2c>)
 8013790:	4d0a      	ldr	r5, [pc, #40]	@ (80137bc <WS28xxMulti::~WS28xxMulti()+0x30>)
 8013792:	4632      	mov	r2, r6
 8013794:	4604      	mov	r4, r0
 8013796:	4629      	mov	r1, r5
 8013798:	23c6      	movs	r3, #198	@ 0xc6
 801379a:	4809      	ldr	r0, [pc, #36]	@ (80137c0 <WS28xxMulti::~WS28xxMulti()+0x34>)
 801379c:	f008 fe46 	bl	801c42c <printf>
 80137a0:	4b08      	ldr	r3, [pc, #32]	@ (80137c4 <WS28xxMulti::~WS28xxMulti()+0x38>)
 80137a2:	2000      	movs	r0, #0
 80137a4:	6018      	str	r0, [r3, #0]
 80137a6:	4632      	mov	r2, r6
 80137a8:	4629      	mov	r1, r5
 80137aa:	23ca      	movs	r3, #202	@ 0xca
 80137ac:	4806      	ldr	r0, [pc, #24]	@ (80137c8 <WS28xxMulti::~WS28xxMulti()+0x3c>)
 80137ae:	f008 fe3d 	bl	801c42c <printf>
 80137b2:	4620      	mov	r0, r4
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	bf00      	nop
 80137b8:	0801e904 	stmdaeq	r1, {r2, r8, fp, sp, lr, pc}
 80137bc:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 80137c0:	0801e7b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 80137c4:	2000dfc4 	andcs	sp, r0, r4, asr #31
 80137c8:	0801e7fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}

080137cc <WS28xxMulti::Setup(unsigned char, unsigned char)>:
 80137cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137d0:	23ce      	movs	r3, #206	@ 0xce
 80137d2:	b093      	sub	sp, #76	@ 0x4c
 80137d4:	460d      	mov	r5, r1
 80137d6:	4614      	mov	r4, r2
 80137d8:	4983      	ldr	r1, [pc, #524]	@ (80139e8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 80137da:	4a84      	ldr	r2, [pc, #528]	@ (80139ec <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 80137dc:	4607      	mov	r7, r0
 80137de:	4884      	ldr	r0, [pc, #528]	@ (80139f0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x224>)
 80137e0:	f008 fe24 	bl	801c42c <printf>
 80137e4:	4628      	mov	r0, r5
 80137e6:	f009 f8c7 	bl	801c978 <__popcountsi2>
 80137ea:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80137ee:	fb05 f600 	mul.w	r6, r5, r0
 80137f2:	4620      	mov	r0, r4
 80137f4:	f009 f8c0 	bl	801c978 <__popcountsi2>
 80137f8:	fb00 f505 	mul.w	r5, r0, r5
 80137fc:	08f6      	lsrs	r6, r6, #3
 80137fe:	f240 182b 	movw	r8, #299	@ 0x12b
 8013802:	08ed      	lsrs	r5, r5, #3
 8013804:	23db      	movs	r3, #219	@ 0xdb
 8013806:	4a78      	ldr	r2, [pc, #480]	@ (80139e8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 8013808:	4978      	ldr	r1, [pc, #480]	@ (80139ec <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 801380a:	487a      	ldr	r0, [pc, #488]	@ (80139f4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x228>)
 801380c:	f8cd 8000 	str.w	r8, [sp]
 8013810:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8013814:	f008 fe0a 	bl	801c42c <printf>
 8013818:	f241 0001 	movw	r0, #4097	@ 0x1001
 801381c:	f007 f892 	bl	801a944 <rcu_periph_clock_enable>
 8013820:	4875      	ldr	r0, [pc, #468]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8013822:	f007 f94b 	bl	801aabc <timer_deinit>
 8013826:	f04f 0900 	mov.w	r9, #0
 801382a:	4873      	ldr	r0, [pc, #460]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801382c:	f8cd 801c 	str.w	r8, [sp, #28]
 8013830:	a905      	add	r1, sp, #20
 8013832:	e9cd 9905 	strd	r9, r9, [sp, #20]
 8013836:	f007 f9ef 	bl	801ac18 <timer_init>
 801383a:	486f      	ldr	r0, [pc, #444]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801383c:	2101      	movs	r1, #1
 801383e:	f007 fb85 	bl	801af4c <timer_master_slave_mode_config>
 8013842:	486d      	ldr	r0, [pc, #436]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8013844:	2130      	movs	r1, #48	@ 0x30
 8013846:	f007 fb71 	bl	801af2c <timer_master_output_trigger_source_select>
 801384a:	486b      	ldr	r0, [pc, #428]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801384c:	2210      	movs	r2, #16
 801384e:	4649      	mov	r1, r9
 8013850:	f007 fb0a 	bl	801ae68 <timer_channel_output_mode_config>
 8013854:	4868      	ldr	r0, [pc, #416]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8013856:	2210      	movs	r2, #16
 8013858:	2102      	movs	r1, #2
 801385a:	f007 fb05 	bl	801ae68 <timer_channel_output_mode_config>
 801385e:	4866      	ldr	r0, [pc, #408]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8013860:	2210      	movs	r2, #16
 8013862:	2103      	movs	r1, #3
 8013864:	f007 fb00 	bl	801ae68 <timer_channel_output_mode_config>
 8013868:	4863      	ldr	r0, [pc, #396]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 801386a:	2201      	movs	r2, #1
 801386c:	4649      	mov	r1, r9
 801386e:	f007 fb21 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 8013872:	4861      	ldr	r0, [pc, #388]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8013874:	4632      	mov	r2, r6
 8013876:	2102      	movs	r1, #2
 8013878:	f007 fb1c 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 801387c:	462a      	mov	r2, r5
 801387e:	2103      	movs	r1, #3
 8013880:	485d      	ldr	r0, [pc, #372]	@ (80139f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x22c>)
 8013882:	f007 fb17 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 8013886:	f241 0002 	movw	r0, #4098	@ 0x1002
 801388a:	f007 f85b 	bl	801a944 <rcu_periph_clock_enable>
 801388e:	485b      	ldr	r0, [pc, #364]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 8013890:	f007 f914 	bl	801aabc <timer_deinit>
 8013894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013898:	4858      	ldr	r0, [pc, #352]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 801389a:	9307      	str	r3, [sp, #28]
 801389c:	a905      	add	r1, sp, #20
 801389e:	e9cd 9905 	strd	r9, r9, [sp, #20]
 80138a2:	f007 f9b9 	bl	801ac18 <timer_init>
 80138a6:	4855      	ldr	r0, [pc, #340]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80138a8:	2101      	movs	r1, #1
 80138aa:	f007 fb4f 	bl	801af4c <timer_master_slave_mode_config>
 80138ae:	4853      	ldr	r0, [pc, #332]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80138b0:	2107      	movs	r1, #7
 80138b2:	f007 fb43 	bl	801af3c <timer_slave_mode_select>
 80138b6:	4851      	ldr	r0, [pc, #324]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80138b8:	2120      	movs	r1, #32
 80138ba:	f007 fb2f 	bl	801af1c <timer_input_trigger_source_select>
 80138be:	484f      	ldr	r0, [pc, #316]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80138c0:	2210      	movs	r2, #16
 80138c2:	4649      	mov	r1, r9
 80138c4:	f007 fad0 	bl	801ae68 <timer_channel_output_mode_config>
 80138c8:	683a      	ldr	r2, [r7, #0]
 80138ca:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 80138ce:	3201      	adds	r2, #1
 80138d0:	4282      	cmp	r2, r0
 80138d2:	d87e      	bhi.n	80139d2 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x206>
 80138d4:	b292      	uxth	r2, r2
 80138d6:	4849      	ldr	r0, [pc, #292]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80138d8:	2100      	movs	r1, #0
 80138da:	f007 faeb 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 80138de:	4847      	ldr	r0, [pc, #284]	@ (80139fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x230>)
 80138e0:	2102      	movs	r1, #2
 80138e2:	f007 fb42 	bl	801af6a <timer_interrupt_enable>
 80138e6:	4946      	ldr	r1, [pc, #280]	@ (8013a00 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x234>)
 80138e8:	2400      	movs	r4, #0
 80138ea:	f881 431e 	strb.w	r4, [r1, #798]	@ 0x31e
 80138ee:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 80138f2:	600f      	str	r7, [r1, #0]
 80138f4:	f640 4015 	movw	r0, #3093	@ 0xc15
 80138f8:	f007 f824 	bl	801a944 <rcu_periph_clock_enable>
 80138fc:	2104      	movs	r1, #4
 80138fe:	4841      	ldr	r0, [pc, #260]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8013900:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 8013a18 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x24c>
 8013904:	4e40      	ldr	r6, [pc, #256]	@ (8013a08 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x23c>)
 8013906:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8013a1c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x250>
 801390a:	f006 fbff 	bl	801a10c <dma_deinit>
 801390e:	a809      	add	r0, sp, #36	@ 0x24
 8013910:	f006 fc28 	bl	801a164 <dma_single_data_para_struct_init>
 8013914:	2501      	movs	r5, #1
 8013916:	2740      	movs	r7, #64	@ 0x40
 8013918:	aa09      	add	r2, sp, #36	@ 0x24
 801391a:	9609      	str	r6, [sp, #36]	@ 0x24
 801391c:	4839      	ldr	r0, [pc, #228]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 801391e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013920:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8013924:	2104      	movs	r1, #4
 8013926:	e9cd 950b 	strd	r9, r5, [sp, #44]	@ 0x2c
 801392a:	950a      	str	r5, [sp, #40]	@ 0x28
 801392c:	9411      	str	r4, [sp, #68]	@ 0x44
 801392e:	960d      	str	r6, [sp, #52]	@ 0x34
 8013930:	f006 fc24 	bl	801a17c <dma_single_data_mode_init>
 8013934:	4833      	ldr	r0, [pc, #204]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8013936:	2104      	movs	r1, #4
 8013938:	f006 fca6 	bl	801a288 <dma_circulation_disable>
 801393c:	2205      	movs	r2, #5
 801393e:	4831      	ldr	r0, [pc, #196]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8013940:	2104      	movs	r1, #4
 8013942:	f006 fca9 	bl	801a298 <dma_channel_subperipheral_select>
 8013946:	2107      	movs	r1, #7
 8013948:	482e      	ldr	r0, [pc, #184]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 801394a:	f006 fbdf 	bl	801a10c <dma_deinit>
 801394e:	a809      	add	r0, sp, #36	@ 0x24
 8013950:	f006 fc08 	bl	801a164 <dma_single_data_para_struct_init>
 8013954:	4b2d      	ldr	r3, [pc, #180]	@ (8013a0c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x240>)
 8013956:	482b      	ldr	r0, [pc, #172]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8013958:	930b      	str	r3, [sp, #44]	@ 0x2c
 801395a:	aa09      	add	r2, sp, #36	@ 0x24
 801395c:	2107      	movs	r1, #7
 801395e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013960:	940c      	str	r4, [sp, #48]	@ 0x30
 8013962:	950a      	str	r5, [sp, #40]	@ 0x28
 8013964:	960d      	str	r6, [sp, #52]	@ 0x34
 8013966:	9411      	str	r4, [sp, #68]	@ 0x44
 8013968:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801396c:	f006 fc06 	bl	801a17c <dma_single_data_mode_init>
 8013970:	4824      	ldr	r0, [pc, #144]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8013972:	2107      	movs	r1, #7
 8013974:	f006 fc88 	bl	801a288 <dma_circulation_disable>
 8013978:	2205      	movs	r2, #5
 801397a:	4822      	ldr	r0, [pc, #136]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 801397c:	2107      	movs	r1, #7
 801397e:	f006 fc8b 	bl	801a298 <dma_channel_subperipheral_select>
 8013982:	2102      	movs	r1, #2
 8013984:	481f      	ldr	r0, [pc, #124]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8013986:	f006 fbc1 	bl	801a10c <dma_deinit>
 801398a:	a809      	add	r0, sp, #36	@ 0x24
 801398c:	f006 fbea 	bl	801a164 <dma_single_data_para_struct_init>
 8013990:	aa09      	add	r2, sp, #36	@ 0x24
 8013992:	481c      	ldr	r0, [pc, #112]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 8013994:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013996:	2102      	movs	r1, #2
 8013998:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 801399c:	950c      	str	r5, [sp, #48]	@ 0x30
 801399e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80139a2:	950a      	str	r5, [sp, #40]	@ 0x28
 80139a4:	960d      	str	r6, [sp, #52]	@ 0x34
 80139a6:	9411      	str	r4, [sp, #68]	@ 0x44
 80139a8:	f006 fbe8 	bl	801a17c <dma_single_data_mode_init>
 80139ac:	4815      	ldr	r0, [pc, #84]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 80139ae:	2102      	movs	r1, #2
 80139b0:	f006 fc6a 	bl	801a288 <dma_circulation_disable>
 80139b4:	4813      	ldr	r0, [pc, #76]	@ (8013a04 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x238>)
 80139b6:	2205      	movs	r2, #5
 80139b8:	2102      	movs	r1, #2
 80139ba:	f006 fc6d 	bl	801a298 <dma_channel_subperipheral_select>
 80139be:	4a0b      	ldr	r2, [pc, #44]	@ (80139ec <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 80139c0:	4909      	ldr	r1, [pc, #36]	@ (80139e8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 80139c2:	4813      	ldr	r0, [pc, #76]	@ (8013a10 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x244>)
 80139c4:	f240 137b 	movw	r3, #379	@ 0x17b
 80139c8:	f008 fd30 	bl	801c42c <printf>
 80139cc:	b013      	add	sp, #76	@ 0x4c
 80139ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139d2:	4a06      	ldr	r2, [pc, #24]	@ (80139ec <WS28xxMulti::Setup(unsigned char, unsigned char)+0x220>)
 80139d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013a14 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x248>)
 80139d6:	4804      	ldr	r0, [pc, #16]	@ (80139e8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x21c>)
 80139d8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80139dc:	f008 fe06 	bl	801c5ec <__assert_func>
 80139e0:	683a      	ldr	r2, [r7, #0]
 80139e2:	3201      	adds	r2, #1
 80139e4:	e776      	b.n	80138d4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x108>
 80139e6:	bf00      	nop
 80139e8:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 80139ec:	0801e934 	stmdaeq	r1, {r2, r4, r5, r8, fp, sp, lr, pc}
 80139f0:	0801e7b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 80139f4:	0801e93c 	stmdaeq	r1, {r2, r3, r4, r5, r8, fp, sp, lr, pc}
 80139f8:	40000400 	andmi	r0, r0, r0, lsl #8
 80139fc:	40000800 	andmi	r0, r0, r0, lsl #16
 8013a00:	e000e100 	and	lr, r0, r0, lsl #2
 8013a04:	40026000 	andmi	r6, r2, r0
 8013a08:	40020818 	andmi	r0, r2, r8, lsl r8
 8013a0c:	20020000 	andcs	r0, r2, r0
 8013a10:	0801e7fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 8013a14:	0801e978 	stmdaeq	r1, {r3, r4, r5, r6, r8, fp, sp, lr, pc}
 8013a18:	08020fac 	stmdaeq	r2, {r2, r3, r5, r7, r8, r9, sl, fp}
 8013a1c:	40020828 	andmi	r0, r2, r8, lsr #16

08013a20 <WS28xxMulti::Update()>:
 8013a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a22:	4c6b      	ldr	r4, [pc, #428]	@ (8013bd0 <WS28xxMulti::Update()+0x1b0>)
 8013a24:	7823      	ldrb	r3, [r4, #0]
 8013a26:	4605      	mov	r5, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f040 80c0 	bne.w	8013bae <WS28xxMulti::Update()+0x18e>
 8013a2e:	4a69      	ldr	r2, [pc, #420]	@ (8013bd4 <WS28xxMulti::Update()+0x1b4>)
 8013a30:	6828      	ldr	r0, [r5, #0]
 8013a32:	f8d2 3410 	ldr.w	r3, [r2, #1040]	@ 0x410
 8013a36:	4f68      	ldr	r7, [pc, #416]	@ (8013bd8 <WS28xxMulti::Update()+0x1b8>)
 8013a38:	0841      	lsrs	r1, r0, #1
 8013a3a:	f023 0001 	bic.w	r0, r3, #1
 8013a3e:	f8c2 0410 	str.w	r0, [r2, #1040]	@ 0x410
 8013a42:	f040 0301 	orr.w	r3, r0, #1
 8013a46:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8013a4a:	f5a7 4600 	sub.w	r6, r7, #32768	@ 0x8000
 8013a4e:	f040 003d 	orr.w	r0, r0, #61	@ 0x3d
 8013a52:	f8c2 0408 	str.w	r0, [r2, #1032]	@ 0x408
 8013a56:	f8c2 641c 	str.w	r6, [r2, #1052]	@ 0x41c
 8013a5a:	f8c2 7418 	str.w	r7, [r2, #1048]	@ 0x418
 8013a5e:	f8c2 1414 	str.w	r1, [r2, #1044]	@ 0x414
 8013a62:	f8c2 3410 	str.w	r3, [r2, #1040]	@ 0x410
 8013a66:	f8d2 7414 	ldr.w	r7, [r2, #1044]	@ 0x414
 8013a6a:	2f00      	cmp	r7, #0
 8013a6c:	d1fb      	bne.n	8013a66 <WS28xxMulti::Update()+0x46>
 8013a6e:	495b      	ldr	r1, [pc, #364]	@ (8013bdc <WS28xxMulti::Update()+0x1bc>)
 8013a70:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 8013a74:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8013a78:	2301      	movs	r3, #1
 8013a7a:	628a      	str	r2, [r1, #40]	@ 0x28
 8013a7c:	7023      	strb	r3, [r4, #0]
 8013a7e:	f8dc 4800 	ldr.w	r4, [ip, #2048]	@ 0x800
 8013a82:	f024 0001 	bic.w	r0, r4, #1
 8013a86:	f8cc 0800 	str.w	r0, [ip, #2048]	@ 0x800
 8013a8a:	f8cc 7824 	str.w	r7, [ip, #2084]	@ 0x824
 8013a8e:	f8dc 1400 	ldr.w	r1, [ip, #1024]	@ 0x400
 8013a92:	4c53      	ldr	r4, [pc, #332]	@ (8013be0 <WS28xxMulti::Update()+0x1c0>)
 8013a94:	f021 0201 	bic.w	r2, r1, #1
 8013a98:	f8cc 2400 	str.w	r2, [ip, #1024]	@ 0x400
 8013a9c:	f8cc 7424 	str.w	r7, [ip, #1060]	@ 0x424
 8013aa0:	6827      	ldr	r7, [r4, #0]
 8013aa2:	2f00      	cmp	r7, #0
 8013aa4:	f000 808b 	beq.w	8013bbe <WS28xxMulti::Update()+0x19e>
 8013aa8:	7d3b      	ldrb	r3, [r7, #20]
 8013aaa:	4c4a      	ldr	r4, [pc, #296]	@ (8013bd4 <WS28xxMulti::Update()+0x1b4>)
 8013aac:	4f4d      	ldr	r7, [pc, #308]	@ (8013be4 <WS28xxMulti::Update()+0x1c4>)
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d053      	beq.n	8013b5a <WS28xxMulti::Update()+0x13a>
 8013ab2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8013ab4:	f020 0101 	bic.w	r1, r0, #1
 8013ab8:	6721      	str	r1, [r4, #112]	@ 0x70
 8013aba:	2220      	movs	r2, #32
 8013abc:	2104      	movs	r1, #4
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f006 fc0f 	bl	801a2e2 <dma_interrupt_flag_clear>
 8013ac4:	67e7      	str	r7, [r4, #124]	@ 0x7c
 8013ac6:	882b      	ldrh	r3, [r5, #0]
 8013ac8:	6763      	str	r3, [r4, #116]	@ 0x74
 8013aca:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8013acc:	f042 0001 	orr.w	r0, r2, #1
 8013ad0:	6720      	str	r0, [r4, #112]	@ 0x70
 8013ad2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8013ad6:	f021 0301 	bic.w	r3, r1, #1
 8013ada:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8013ade:	2220      	movs	r2, #32
 8013ae0:	2107      	movs	r1, #7
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f006 fbfd 	bl	801a2e2 <dma_interrupt_flag_clear>
 8013ae8:	f8c4 60c4 	str.w	r6, [r4, #196]	@ 0xc4
 8013aec:	882e      	ldrh	r6, [r5, #0]
 8013aee:	f8c4 60bc 	str.w	r6, [r4, #188]	@ 0xbc
 8013af2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8013af6:	f040 0101 	orr.w	r1, r0, #1
 8013afa:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 8013afe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013b00:	f023 0601 	bic.w	r6, r3, #1
 8013b04:	2220      	movs	r2, #32
 8013b06:	2102      	movs	r1, #2
 8013b08:	4620      	mov	r0, r4
 8013b0a:	6426      	str	r6, [r4, #64]	@ 0x40
 8013b0c:	f006 fbe9 	bl	801a2e2 <dma_interrupt_flag_clear>
 8013b10:	64e7      	str	r7, [r4, #76]	@ 0x4c
 8013b12:	882f      	ldrh	r7, [r5, #0]
 8013b14:	6467      	str	r7, [r4, #68]	@ 0x44
 8013b16:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8013b18:	4833      	ldr	r0, [pc, #204]	@ (8013be8 <WS28xxMulti::Update()+0x1c8>)
 8013b1a:	f045 0201 	orr.w	r2, r5, #1
 8013b1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013b22:	6422      	str	r2, [r4, #64]	@ 0x40
 8013b24:	f007 f8b3 	bl	801ac8e <timer_dma_enable>
 8013b28:	482f      	ldr	r0, [pc, #188]	@ (8013be8 <WS28xxMulti::Update()+0x1c8>)
 8013b2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013b2e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8013b32:	f007 f8ac 	bl	801ac8e <timer_dma_enable>
 8013b36:	482c      	ldr	r0, [pc, #176]	@ (8013be8 <WS28xxMulti::Update()+0x1c8>)
 8013b38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8013b3c:	f007 f8a7 	bl	801ac8e <timer_dma_enable>
 8013b40:	f8d4 0800 	ldr.w	r0, [r4, #2048]	@ 0x800
 8013b44:	f040 0101 	orr.w	r1, r0, #1
 8013b48:	f8c4 1800 	str.w	r1, [r4, #2048]	@ 0x800
 8013b4c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 8013b50:	f043 0601 	orr.w	r6, r3, #1
 8013b54:	f8c4 6400 	str.w	r6, [r4, #1024]	@ 0x400
 8013b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b5a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8013b5e:	f020 0101 	bic.w	r1, r0, #1
 8013b62:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
 8013b66:	2220      	movs	r2, #32
 8013b68:	2107      	movs	r1, #7
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	f006 fbb9 	bl	801a2e2 <dma_interrupt_flag_clear>
 8013b70:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
 8013b74:	882b      	ldrh	r3, [r5, #0]
 8013b76:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8013b7a:	f8d4 70b8 	ldr.w	r7, [r4, #184]	@ 0xb8
 8013b7e:	f047 0001 	orr.w	r0, r7, #1
 8013b82:	f8c4 00b8 	str.w	r0, [r4, #184]	@ 0xb8
 8013b86:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8013b88:	f021 0301 	bic.w	r3, r1, #1
 8013b8c:	2220      	movs	r2, #32
 8013b8e:	2102      	movs	r1, #2
 8013b90:	4620      	mov	r0, r4
 8013b92:	6423      	str	r3, [r4, #64]	@ 0x40
 8013b94:	f006 fba5 	bl	801a2e2 <dma_interrupt_flag_clear>
 8013b98:	64e6      	str	r6, [r4, #76]	@ 0x4c
 8013b9a:	882d      	ldrh	r5, [r5, #0]
 8013b9c:	6465      	str	r5, [r4, #68]	@ 0x44
 8013b9e:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8013ba0:	4811      	ldr	r0, [pc, #68]	@ (8013be8 <WS28xxMulti::Update()+0x1c8>)
 8013ba2:	f046 0201 	orr.w	r2, r6, #1
 8013ba6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013baa:	6422      	str	r2, [r4, #64]	@ 0x40
 8013bac:	e7bf      	b.n	8013b2e <WS28xxMulti::Update()+0x10e>
 8013bae:	4b0f      	ldr	r3, [pc, #60]	@ (8013bec <WS28xxMulti::Update()+0x1cc>)
 8013bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8013bf0 <WS28xxMulti::Update()+0x1d0>)
 8013bb2:	4810      	ldr	r0, [pc, #64]	@ (8013bf4 <WS28xxMulti::Update()+0x1d4>)
 8013bb4:	f240 2167 	movw	r1, #615	@ 0x267
 8013bb8:	f008 fd18 	bl	801c5ec <__assert_func>
 8013bbc:	e737      	b.n	8013a2e <WS28xxMulti::Update()+0xe>
 8013bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8013bf8 <WS28xxMulti::Update()+0x1d8>)
 8013bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8013bfc <WS28xxMulti::Update()+0x1dc>)
 8013bc2:	480f      	ldr	r0, [pc, #60]	@ (8013c00 <WS28xxMulti::Update()+0x1e0>)
 8013bc4:	f240 110d 	movw	r1, #269	@ 0x10d
 8013bc8:	f008 fd10 	bl	801c5ec <__assert_func>
 8013bcc:	6827      	ldr	r7, [r4, #0]
 8013bce:	e76b      	b.n	8013aa8 <WS28xxMulti::Update()+0x88>
 8013bd0:	2000dfc8 	andcs	sp, r0, r8, asr #31
 8013bd4:	40026000 	andmi	r6, r2, r0
 8013bd8:	20028000 	andcs	r8, r2, r0
 8013bdc:	40020000 	andmi	r0, r2, r0
 8013be0:	2000007c 	andcs	r0, r0, ip, ror r0
 8013be4:	08020fac 	stmdaeq	r2, {r2, r3, r5, r7, r8, r9, sl, fp}
 8013be8:	40000400 	andmi	r0, r0, r0, lsl #8
 8013bec:	0801e9f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, fp, sp, lr, pc}
 8013bf0:	0801ea04 	stmdaeq	r1, {r2, r9, fp, sp, lr, pc}
 8013bf4:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 8013bf8:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8013bfc:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 8013c00:	0801e998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr, pc}

08013c04 <WS28xxMulti::IsUpdating()>:
 8013c04:	f3bf 8f5f 	dmb	sy
 8013c08:	4b01      	ldr	r3, [pc, #4]	@ (8013c10 <WS28xxMulti::IsUpdating()+0xc>)
 8013c0a:	7818      	ldrb	r0, [r3, #0]
 8013c0c:	4770      	bx	lr
 8013c0e:	bf00      	nop
 8013c10:	2000dfc8 	andcs	sp, r0, r8, asr #31

08013c14 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>:
 8013c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c18:	2907      	cmp	r1, #7
 8013c1a:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8013c1e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8013c22:	4688      	mov	r8, r1
 8013c24:	4617      	mov	r7, r2
 8013c26:	461d      	mov	r5, r3
 8013c28:	f200 80f1 	bhi.w	8013e0e <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x1fa>
 8013c2c:	4a7c      	ldr	r2, [pc, #496]	@ (8013e20 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x20c>)
 8013c2e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8013c32:	f108 0106 	add.w	r1, r8, #6
 8013c36:	eb02 1803 	add.w	r8, r2, r3, lsl #4
 8013c3a:	fa5f fc81 	uxtb.w	ip, r1
 8013c3e:	f108 7788 	add.w	r7, r8, #17825792	@ 0x1100000
 8013c42:	eb0c 03c7 	add.w	r3, ip, r7, lsl #3
 8013c46:	00f9      	lsls	r1, r7, #3
 8013c48:	009a      	lsls	r2, r3, #2
 8013c4a:	062f      	lsls	r7, r5, #24
 8013c4c:	bf4c      	ite	mi
 8013c4e:	2000      	movmi	r0, #0
 8013c50:	2001      	movpl	r0, #1
 8013c52:	6010      	str	r0, [r2, #0]
 8013c54:	f101 0080 	add.w	r0, r1, #128	@ 0x80
 8013c58:	4460      	add	r0, ip
 8013c5a:	0632      	lsls	r2, r6, #24
 8013c5c:	ea4f 0780 	mov.w	r7, r0, lsl #2
 8013c60:	f501 7380 	add.w	r3, r1, #256	@ 0x100
 8013c64:	bf4c      	ite	mi
 8013c66:	2200      	movmi	r2, #0
 8013c68:	2201      	movpl	r2, #1
 8013c6a:	4463      	add	r3, ip
 8013c6c:	0098      	lsls	r0, r3, #2
 8013c6e:	603a      	str	r2, [r7, #0]
 8013c70:	0627      	lsls	r7, r4, #24
 8013c72:	f101 0710 	add.w	r7, r1, #16
 8013c76:	bf4c      	ite	mi
 8013c78:	2200      	movmi	r2, #0
 8013c7a:	2201      	movpl	r2, #1
 8013c7c:	4467      	add	r7, ip
 8013c7e:	6002      	str	r2, [r0, #0]
 8013c80:	f101 0390 	add.w	r3, r1, #144	@ 0x90
 8013c84:	0668      	lsls	r0, r5, #25
 8013c86:	ea4f 0287 	mov.w	r2, r7, lsl #2
 8013c8a:	bf4c      	ite	mi
 8013c8c:	2000      	movmi	r0, #0
 8013c8e:	2001      	movpl	r0, #1
 8013c90:	4463      	add	r3, ip
 8013c92:	6010      	str	r0, [r2, #0]
 8013c94:	0677      	lsls	r7, r6, #25
 8013c96:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013c9a:	f501 7788 	add.w	r7, r1, #272	@ 0x110
 8013c9e:	bf4c      	ite	mi
 8013ca0:	2000      	movmi	r0, #0
 8013ca2:	2001      	movpl	r0, #1
 8013ca4:	4467      	add	r7, ip
 8013ca6:	6010      	str	r0, [r2, #0]
 8013ca8:	00bb      	lsls	r3, r7, #2
 8013caa:	0660      	lsls	r0, r4, #25
 8013cac:	f101 0220 	add.w	r2, r1, #32
 8013cb0:	bf4c      	ite	mi
 8013cb2:	2000      	movmi	r0, #0
 8013cb4:	2001      	movpl	r0, #1
 8013cb6:	4462      	add	r2, ip
 8013cb8:	6018      	str	r0, [r3, #0]
 8013cba:	06af      	lsls	r7, r5, #26
 8013cbc:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8013cc0:	f101 07a0 	add.w	r7, r1, #160	@ 0xa0
 8013cc4:	bf4c      	ite	mi
 8013cc6:	2000      	movmi	r0, #0
 8013cc8:	2001      	movpl	r0, #1
 8013cca:	4467      	add	r7, ip
 8013ccc:	6018      	str	r0, [r3, #0]
 8013cce:	00ba      	lsls	r2, r7, #2
 8013cd0:	06b0      	lsls	r0, r6, #26
 8013cd2:	f501 7390 	add.w	r3, r1, #288	@ 0x120
 8013cd6:	bf4c      	ite	mi
 8013cd8:	2000      	movmi	r0, #0
 8013cda:	2001      	movpl	r0, #1
 8013cdc:	4463      	add	r3, ip
 8013cde:	6010      	str	r0, [r2, #0]
 8013ce0:	06a7      	lsls	r7, r4, #26
 8013ce2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013ce6:	f101 0730 	add.w	r7, r1, #48	@ 0x30
 8013cea:	bf4c      	ite	mi
 8013cec:	2000      	movmi	r0, #0
 8013cee:	2001      	movpl	r0, #1
 8013cf0:	4467      	add	r7, ip
 8013cf2:	6010      	str	r0, [r2, #0]
 8013cf4:	00bb      	lsls	r3, r7, #2
 8013cf6:	06e8      	lsls	r0, r5, #27
 8013cf8:	f101 02b0 	add.w	r2, r1, #176	@ 0xb0
 8013cfc:	bf4c      	ite	mi
 8013cfe:	2000      	movmi	r0, #0
 8013d00:	2001      	movpl	r0, #1
 8013d02:	4462      	add	r2, ip
 8013d04:	6018      	str	r0, [r3, #0]
 8013d06:	06f7      	lsls	r7, r6, #27
 8013d08:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8013d0c:	f501 7798 	add.w	r7, r1, #304	@ 0x130
 8013d10:	bf4c      	ite	mi
 8013d12:	2000      	movmi	r0, #0
 8013d14:	2001      	movpl	r0, #1
 8013d16:	4467      	add	r7, ip
 8013d18:	6018      	str	r0, [r3, #0]
 8013d1a:	00ba      	lsls	r2, r7, #2
 8013d1c:	06e0      	lsls	r0, r4, #27
 8013d1e:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8013d22:	bf4c      	ite	mi
 8013d24:	2000      	movmi	r0, #0
 8013d26:	2001      	movpl	r0, #1
 8013d28:	4463      	add	r3, ip
 8013d2a:	6010      	str	r0, [r2, #0]
 8013d2c:	072f      	lsls	r7, r5, #28
 8013d2e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013d32:	f101 07c0 	add.w	r7, r1, #192	@ 0xc0
 8013d36:	bf4c      	ite	mi
 8013d38:	2000      	movmi	r0, #0
 8013d3a:	2001      	movpl	r0, #1
 8013d3c:	4467      	add	r7, ip
 8013d3e:	6010      	str	r0, [r2, #0]
 8013d40:	00bb      	lsls	r3, r7, #2
 8013d42:	0730      	lsls	r0, r6, #28
 8013d44:	f501 72a0 	add.w	r2, r1, #320	@ 0x140
 8013d48:	bf4c      	ite	mi
 8013d4a:	2000      	movmi	r0, #0
 8013d4c:	2001      	movpl	r0, #1
 8013d4e:	4462      	add	r2, ip
 8013d50:	6018      	str	r0, [r3, #0]
 8013d52:	0727      	lsls	r7, r4, #28
 8013d54:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8013d58:	f101 0750 	add.w	r7, r1, #80	@ 0x50
 8013d5c:	bf4c      	ite	mi
 8013d5e:	2000      	movmi	r0, #0
 8013d60:	2001      	movpl	r0, #1
 8013d62:	4467      	add	r7, ip
 8013d64:	6018      	str	r0, [r3, #0]
 8013d66:	00ba      	lsls	r2, r7, #2
 8013d68:	0768      	lsls	r0, r5, #29
 8013d6a:	f101 03d0 	add.w	r3, r1, #208	@ 0xd0
 8013d6e:	bf4c      	ite	mi
 8013d70:	2000      	movmi	r0, #0
 8013d72:	2001      	movpl	r0, #1
 8013d74:	4463      	add	r3, ip
 8013d76:	6010      	str	r0, [r2, #0]
 8013d78:	0777      	lsls	r7, r6, #29
 8013d7a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013d7e:	f501 77a8 	add.w	r7, r1, #336	@ 0x150
 8013d82:	bf4c      	ite	mi
 8013d84:	2000      	movmi	r0, #0
 8013d86:	2001      	movpl	r0, #1
 8013d88:	4467      	add	r7, ip
 8013d8a:	6010      	str	r0, [r2, #0]
 8013d8c:	00bb      	lsls	r3, r7, #2
 8013d8e:	0760      	lsls	r0, r4, #29
 8013d90:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8013d94:	bf4c      	ite	mi
 8013d96:	2000      	movmi	r0, #0
 8013d98:	2001      	movpl	r0, #1
 8013d9a:	4462      	add	r2, ip
 8013d9c:	6018      	str	r0, [r3, #0]
 8013d9e:	07af      	lsls	r7, r5, #30
 8013da0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8013da4:	f101 07e0 	add.w	r7, r1, #224	@ 0xe0
 8013da8:	bf4c      	ite	mi
 8013daa:	2000      	movmi	r0, #0
 8013dac:	2001      	movpl	r0, #1
 8013dae:	4467      	add	r7, ip
 8013db0:	6018      	str	r0, [r3, #0]
 8013db2:	00ba      	lsls	r2, r7, #2
 8013db4:	07b0      	lsls	r0, r6, #30
 8013db6:	f501 73b0 	add.w	r3, r1, #352	@ 0x160
 8013dba:	bf4c      	ite	mi
 8013dbc:	2000      	movmi	r0, #0
 8013dbe:	2001      	movpl	r0, #1
 8013dc0:	4463      	add	r3, ip
 8013dc2:	07a7      	lsls	r7, r4, #30
 8013dc4:	f101 0770 	add.w	r7, r1, #112	@ 0x70
 8013dc8:	6010      	str	r0, [r2, #0]
 8013dca:	4467      	add	r7, ip
 8013dcc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013dd0:	bf4c      	ite	mi
 8013dd2:	2000      	movmi	r0, #0
 8013dd4:	2001      	movpl	r0, #1
 8013dd6:	00bb      	lsls	r3, r7, #2
 8013dd8:	07ed      	lsls	r5, r5, #31
 8013dda:	f101 05f0 	add.w	r5, r1, #240	@ 0xf0
 8013dde:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 8013de2:	6010      	str	r0, [r2, #0]
 8013de4:	4465      	add	r5, ip
 8013de6:	bf54      	ite	pl
 8013de8:	2001      	movpl	r0, #1
 8013dea:	2000      	movmi	r0, #0
 8013dec:	4461      	add	r1, ip
 8013dee:	07f6      	lsls	r6, r6, #31
 8013df0:	6018      	str	r0, [r3, #0]
 8013df2:	bf54      	ite	pl
 8013df4:	2601      	movpl	r6, #1
 8013df6:	2600      	movmi	r6, #0
 8013df8:	00aa      	lsls	r2, r5, #2
 8013dfa:	07e4      	lsls	r4, r4, #31
 8013dfc:	ea4f 0081 	mov.w	r0, r1, lsl #2
 8013e00:	bf54      	ite	pl
 8013e02:	2401      	movpl	r4, #1
 8013e04:	2400      	movmi	r4, #0
 8013e06:	6016      	str	r6, [r2, #0]
 8013e08:	6004      	str	r4, [r0, #0]
 8013e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e0e:	4b05      	ldr	r3, [pc, #20]	@ (8013e24 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x210>)
 8013e10:	4a05      	ldr	r2, [pc, #20]	@ (8013e28 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x214>)
 8013e12:	4806      	ldr	r0, [pc, #24]	@ (8013e2c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x218>)
 8013e14:	f240 3126 	movw	r1, #806	@ 0x326
 8013e18:	f008 fbe8 	bl	801c5ec <__assert_func>
 8013e1c:	e706      	b.n	8013c2c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x18>
 8013e1e:	bf00      	nop
 8013e20:	20028000 	andcs	r8, r2, r0
 8013e24:	0801ea0c 	stmdaeq	r1, {r2, r3, r9, fp, sp, lr, pc}
 8013e28:	0801ea2c 	stmdaeq	r1, {r2, r3, r5, r9, fp, sp, lr, pc}
 8013e2c:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}

08013e30 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)>:
 8013e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e34:	290f      	cmp	r1, #15
 8013e36:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8013e3a:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 8013e3e:	4688      	mov	r8, r1
 8013e40:	4681      	mov	r9, r0
 8013e42:	4615      	mov	r5, r2
 8013e44:	461f      	mov	r7, r3
 8013e46:	f200 80f8 	bhi.w	801403a <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x20a>
 8013e4a:	f8d9 3000 	ldr.w	r3, [r9]
 8013e4e:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 8013e52:	f080 80ff 	bcs.w	8014054 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x224>
 8013e56:	4a83      	ldr	r2, [pc, #524]	@ (8014064 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x234>)
 8013e58:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8013e5c:	f108 0106 	add.w	r1, r8, #6
 8013e60:	eb02 1800 	add.w	r8, r2, r0, lsl #4
 8013e64:	fa5f fc81 	uxtb.w	ip, r1
 8013e68:	f108 7588 	add.w	r5, r8, #17825792	@ 0x1100000
 8013e6c:	00e9      	lsls	r1, r5, #3
 8013e6e:	eb0c 03c5 	add.w	r3, ip, r5, lsl #3
 8013e72:	0638      	lsls	r0, r7, #24
 8013e74:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013e78:	f101 0580 	add.w	r5, r1, #128	@ 0x80
 8013e7c:	bf54      	ite	pl
 8013e7e:	2000      	movpl	r0, #0
 8013e80:	2001      	movmi	r0, #1
 8013e82:	4465      	add	r5, ip
 8013e84:	6010      	str	r0, [r2, #0]
 8013e86:	00ab      	lsls	r3, r5, #2
 8013e88:	f501 7280 	add.w	r2, r1, #256	@ 0x100
 8013e8c:	0635      	lsls	r5, r6, #24
 8013e8e:	bf54      	ite	pl
 8013e90:	2000      	movpl	r0, #0
 8013e92:	2001      	movmi	r0, #1
 8013e94:	4462      	add	r2, ip
 8013e96:	6018      	str	r0, [r3, #0]
 8013e98:	0095      	lsls	r5, r2, #2
 8013e9a:	0620      	lsls	r0, r4, #24
 8013e9c:	f101 0310 	add.w	r3, r1, #16
 8013ea0:	bf54      	ite	pl
 8013ea2:	2000      	movpl	r0, #0
 8013ea4:	2001      	movmi	r0, #1
 8013ea6:	4463      	add	r3, ip
 8013ea8:	6028      	str	r0, [r5, #0]
 8013eaa:	009a      	lsls	r2, r3, #2
 8013eac:	f017 0540 	ands.w	r5, r7, #64	@ 0x40
 8013eb0:	f101 0090 	add.w	r0, r1, #144	@ 0x90
 8013eb4:	bf18      	it	ne
 8013eb6:	2501      	movne	r5, #1
 8013eb8:	4460      	add	r0, ip
 8013eba:	6015      	str	r5, [r2, #0]
 8013ebc:	0083      	lsls	r3, r0, #2
 8013ebe:	f016 0240 	ands.w	r2, r6, #64	@ 0x40
 8013ec2:	f501 7588 	add.w	r5, r1, #272	@ 0x110
 8013ec6:	bf18      	it	ne
 8013ec8:	2201      	movne	r2, #1
 8013eca:	4465      	add	r5, ip
 8013ecc:	601a      	str	r2, [r3, #0]
 8013ece:	f014 0040 	ands.w	r0, r4, #64	@ 0x40
 8013ed2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8013ed6:	f101 0220 	add.w	r2, r1, #32
 8013eda:	bf18      	it	ne
 8013edc:	2001      	movne	r0, #1
 8013ede:	4462      	add	r2, ip
 8013ee0:	6018      	str	r0, [r3, #0]
 8013ee2:	0095      	lsls	r5, r2, #2
 8013ee4:	f017 0320 	ands.w	r3, r7, #32
 8013ee8:	f101 00a0 	add.w	r0, r1, #160	@ 0xa0
 8013eec:	bf18      	it	ne
 8013eee:	2301      	movne	r3, #1
 8013ef0:	4460      	add	r0, ip
 8013ef2:	602b      	str	r3, [r5, #0]
 8013ef4:	0082      	lsls	r2, r0, #2
 8013ef6:	f016 0520 	ands.w	r5, r6, #32
 8013efa:	f501 7390 	add.w	r3, r1, #288	@ 0x120
 8013efe:	bf18      	it	ne
 8013f00:	2501      	movne	r5, #1
 8013f02:	4463      	add	r3, ip
 8013f04:	6015      	str	r5, [r2, #0]
 8013f06:	f014 0020 	ands.w	r0, r4, #32
 8013f0a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013f0e:	f101 0530 	add.w	r5, r1, #48	@ 0x30
 8013f12:	bf18      	it	ne
 8013f14:	2001      	movne	r0, #1
 8013f16:	4465      	add	r5, ip
 8013f18:	6010      	str	r0, [r2, #0]
 8013f1a:	00ab      	lsls	r3, r5, #2
 8013f1c:	f017 0210 	ands.w	r2, r7, #16
 8013f20:	f101 00b0 	add.w	r0, r1, #176	@ 0xb0
 8013f24:	bf18      	it	ne
 8013f26:	2201      	movne	r2, #1
 8013f28:	4460      	add	r0, ip
 8013f2a:	601a      	str	r2, [r3, #0]
 8013f2c:	0085      	lsls	r5, r0, #2
 8013f2e:	f016 0310 	ands.w	r3, r6, #16
 8013f32:	f501 7298 	add.w	r2, r1, #304	@ 0x130
 8013f36:	bf18      	it	ne
 8013f38:	2301      	movne	r3, #1
 8013f3a:	4462      	add	r2, ip
 8013f3c:	602b      	str	r3, [r5, #0]
 8013f3e:	f014 0010 	ands.w	r0, r4, #16
 8013f42:	ea4f 0582 	mov.w	r5, r2, lsl #2
 8013f46:	f101 0340 	add.w	r3, r1, #64	@ 0x40
 8013f4a:	bf18      	it	ne
 8013f4c:	2001      	movne	r0, #1
 8013f4e:	4463      	add	r3, ip
 8013f50:	6028      	str	r0, [r5, #0]
 8013f52:	009a      	lsls	r2, r3, #2
 8013f54:	f017 0508 	ands.w	r5, r7, #8
 8013f58:	f101 00c0 	add.w	r0, r1, #192	@ 0xc0
 8013f5c:	bf18      	it	ne
 8013f5e:	2501      	movne	r5, #1
 8013f60:	4460      	add	r0, ip
 8013f62:	6015      	str	r5, [r2, #0]
 8013f64:	0083      	lsls	r3, r0, #2
 8013f66:	f016 0208 	ands.w	r2, r6, #8
 8013f6a:	f501 75a0 	add.w	r5, r1, #320	@ 0x140
 8013f6e:	bf18      	it	ne
 8013f70:	2201      	movne	r2, #1
 8013f72:	4465      	add	r5, ip
 8013f74:	601a      	str	r2, [r3, #0]
 8013f76:	f014 0008 	ands.w	r0, r4, #8
 8013f7a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8013f7e:	f101 0250 	add.w	r2, r1, #80	@ 0x50
 8013f82:	bf18      	it	ne
 8013f84:	2001      	movne	r0, #1
 8013f86:	4462      	add	r2, ip
 8013f88:	6018      	str	r0, [r3, #0]
 8013f8a:	0095      	lsls	r5, r2, #2
 8013f8c:	f017 0304 	ands.w	r3, r7, #4
 8013f90:	f101 00d0 	add.w	r0, r1, #208	@ 0xd0
 8013f94:	bf18      	it	ne
 8013f96:	2301      	movne	r3, #1
 8013f98:	4460      	add	r0, ip
 8013f9a:	602b      	str	r3, [r5, #0]
 8013f9c:	0082      	lsls	r2, r0, #2
 8013f9e:	f016 0504 	ands.w	r5, r6, #4
 8013fa2:	f501 73a8 	add.w	r3, r1, #336	@ 0x150
 8013fa6:	bf18      	it	ne
 8013fa8:	2501      	movne	r5, #1
 8013faa:	4463      	add	r3, ip
 8013fac:	6015      	str	r5, [r2, #0]
 8013fae:	f014 0004 	ands.w	r0, r4, #4
 8013fb2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013fb6:	f101 0560 	add.w	r5, r1, #96	@ 0x60
 8013fba:	bf18      	it	ne
 8013fbc:	2001      	movne	r0, #1
 8013fbe:	4465      	add	r5, ip
 8013fc0:	6010      	str	r0, [r2, #0]
 8013fc2:	00ab      	lsls	r3, r5, #2
 8013fc4:	f017 0202 	ands.w	r2, r7, #2
 8013fc8:	f101 00e0 	add.w	r0, r1, #224	@ 0xe0
 8013fcc:	bf18      	it	ne
 8013fce:	2201      	movne	r2, #1
 8013fd0:	4460      	add	r0, ip
 8013fd2:	601a      	str	r2, [r3, #0]
 8013fd4:	0085      	lsls	r5, r0, #2
 8013fd6:	f016 0302 	ands.w	r3, r6, #2
 8013fda:	f501 72b0 	add.w	r2, r1, #352	@ 0x160
 8013fde:	bf18      	it	ne
 8013fe0:	2301      	movne	r3, #1
 8013fe2:	4462      	add	r2, ip
 8013fe4:	602b      	str	r3, [r5, #0]
 8013fe6:	f014 0002 	ands.w	r0, r4, #2
 8013fea:	ea4f 0582 	mov.w	r5, r2, lsl #2
 8013fee:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 8013ff2:	4463      	add	r3, ip
 8013ff4:	bf18      	it	ne
 8013ff6:	2001      	movne	r0, #1
 8013ff8:	6028      	str	r0, [r5, #0]
 8013ffa:	009a      	lsls	r2, r3, #2
 8013ffc:	f017 0701 	ands.w	r7, r7, #1
 8014000:	f101 05f0 	add.w	r5, r1, #240	@ 0xf0
 8014004:	4465      	add	r5, ip
 8014006:	bf1c      	itt	ne
 8014008:	2301      	movne	r3, #1
 801400a:	6013      	strne	r3, [r2, #0]
 801400c:	ea4f 0085 	mov.w	r0, r5, lsl #2
 8014010:	bf08      	it	eq
 8014012:	6017      	streq	r7, [r2, #0]
 8014014:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 8014018:	f016 0601 	ands.w	r6, r6, #1
 801401c:	bf18      	it	ne
 801401e:	2501      	movne	r5, #1
 8014020:	4461      	add	r1, ip
 8014022:	bf14      	ite	ne
 8014024:	6005      	strne	r5, [r0, #0]
 8014026:	6006      	streq	r6, [r0, #0]
 8014028:	008b      	lsls	r3, r1, #2
 801402a:	f014 0401 	ands.w	r4, r4, #1
 801402e:	bf1a      	itte	ne
 8014030:	2501      	movne	r5, #1
 8014032:	601d      	strne	r5, [r3, #0]
 8014034:	601c      	streq	r4, [r3, #0]
 8014036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801403a:	4b0b      	ldr	r3, [pc, #44]	@ (8014068 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x238>)
 801403c:	4a0b      	ldr	r2, [pc, #44]	@ (801406c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x23c>)
 801403e:	480c      	ldr	r0, [pc, #48]	@ (8014070 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x240>)
 8014040:	f240 3143 	movw	r1, #835	@ 0x343
 8014044:	f008 fad2 	bl	801c5ec <__assert_func>
 8014048:	f8d9 3000 	ldr.w	r3, [r9]
 801404c:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 8014050:	f4ff af01 	bcc.w	8013e56 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x26>
 8014054:	4b07      	ldr	r3, [pc, #28]	@ (8014074 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x244>)
 8014056:	4a05      	ldr	r2, [pc, #20]	@ (801406c <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x23c>)
 8014058:	4805      	ldr	r0, [pc, #20]	@ (8014070 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x240>)
 801405a:	f44f 7151 	mov.w	r1, #836	@ 0x344
 801405e:	f008 fac5 	bl	801c5ec <__assert_func>
 8014062:	e6f8      	b.n	8013e56 <WS28xxMulti::SetColourWS2801(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char)+0x26>
 8014064:	20020000 	andcs	r0, r2, r0
 8014068:	0801ea3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, sp, lr, pc}
 801406c:	0801ea4c 	stmdaeq	r1, {r2, r3, r6, r9, fp, sp, lr, pc}
 8014070:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 8014074:	0801ea5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, fp, sp, lr, pc}

08014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8014078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801407c:	290f      	cmp	r1, #15
 801407e:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8014082:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8014086:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801408a:	460c      	mov	r4, r1
 801408c:	4682      	mov	sl, r0
 801408e:	4691      	mov	r9, r2
 8014090:	461d      	mov	r5, r3
 8014092:	f200 808a 	bhi.w	80141aa <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
 8014096:	f8da 3000 	ldr.w	r3, [sl]
 801409a:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 801409e:	f080 8091 	bcs.w	80141c4 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x14c>
 80140a2:	4a4c      	ldr	r2, [pc, #304]	@ (80141d4 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 80140a4:	3406      	adds	r4, #6
 80140a6:	eb02 1189 	add.w	r1, r2, r9, lsl #6
 80140aa:	b2e0      	uxtb	r0, r4
 80140ac:	f101 7488 	add.w	r4, r1, #17825792	@ 0x1100000
 80140b0:	3430      	adds	r4, #48	@ 0x30
 80140b2:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80140b6:	f10c 0080 	add.w	r0, ip, #128	@ 0x80
 80140ba:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 80140be:	ebaa 098c 	sub.w	r9, sl, ip, lsl #2
 80140c2:	4663      	mov	r3, ip
 80140c4:	ea5f 6149 	movs.w	r1, r9, lsl #25
 80140c8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80140cc:	f04f 0401 	mov.w	r4, #1
 80140d0:	f04f 0380 	mov.w	r3, #128	@ 0x80
 80140d4:	d53d      	bpl.n	8014152 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xda>
 80140d6:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 80140da:	f015 0180 	ands.w	r1, r5, #128	@ 0x80
 80140de:	f5a2 6380 	sub.w	r3, r2, #1024	@ 0x400
 80140e2:	bf0c      	ite	eq
 80140e4:	f8cc 1000 	streq.w	r1, [ip]
 80140e8:	f8cc 4000 	strne.w	r4, [ip]
 80140ec:	f5a2 7900 	sub.w	r9, r2, #512	@ 0x200
 80140f0:	f016 0080 	ands.w	r0, r6, #128	@ 0x80
 80140f4:	bf0c      	ite	eq
 80140f6:	6018      	streq	r0, [r3, #0]
 80140f8:	601c      	strne	r4, [r3, #0]
 80140fa:	f017 0180 	ands.w	r1, r7, #128	@ 0x80
 80140fe:	bf0c      	ite	eq
 8014100:	f8c9 1000 	streq.w	r1, [r9]
 8014104:	f8c9 4000 	strne.w	r4, [r9]
 8014108:	f018 0380 	ands.w	r3, r8, #128	@ 0x80
 801410c:	bf0c      	ite	eq
 801410e:	6013      	streq	r3, [r2, #0]
 8014110:	6014      	strne	r4, [r2, #0]
 8014112:	2340      	movs	r3, #64	@ 0x40
 8014114:	3240      	adds	r2, #64	@ 0x40
 8014116:	e01a      	b.n	801414e <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd6>
 8014118:	6014      	str	r4, [r2, #0]
 801411a:	f5a9 6c80 	sub.w	ip, r9, #1024	@ 0x400
 801411e:	ea11 0006 	ands.w	r0, r1, r6
 8014122:	f5a9 7300 	sub.w	r3, r9, #512	@ 0x200
 8014126:	bf0c      	ite	eq
 8014128:	f8cc 0000 	streq.w	r0, [ip]
 801412c:	f8cc 4000 	strne.w	r4, [ip]
 8014130:	ea11 0207 	ands.w	r2, r1, r7
 8014134:	bf0c      	ite	eq
 8014136:	601a      	streq	r2, [r3, #0]
 8014138:	601c      	strne	r4, [r3, #0]
 801413a:	ea11 0008 	ands.w	r0, r1, r8
 801413e:	bf0c      	ite	eq
 8014140:	f8c9 0000 	streq.w	r0, [r9]
 8014144:	f8c9 4000 	strne.w	r4, [r9]
 8014148:	f109 0240 	add.w	r2, r9, #64	@ 0x40
 801414c:	084b      	lsrs	r3, r1, #1
 801414e:	4552      	cmp	r2, sl
 8014150:	d029      	beq.n	80141a6 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x12e>
 8014152:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 8014156:	ea13 0005 	ands.w	r0, r3, r5
 801415a:	f5a2 6980 	sub.w	r9, r2, #1024	@ 0x400
 801415e:	bf0c      	ite	eq
 8014160:	f8cc 0000 	streq.w	r0, [ip]
 8014164:	f8cc 4000 	strne.w	r4, [ip]
 8014168:	ea13 0106 	ands.w	r1, r3, r6
 801416c:	f5a2 7c00 	sub.w	ip, r2, #512	@ 0x200
 8014170:	bf0c      	ite	eq
 8014172:	f8c9 1000 	streq.w	r1, [r9]
 8014176:	f8c9 4000 	strne.w	r4, [r9]
 801417a:	ea13 0007 	ands.w	r0, r3, r7
 801417e:	bf14      	ite	ne
 8014180:	f8cc 4000 	strne.w	r4, [ip]
 8014184:	f8cc 0000 	streq.w	r0, [ip]
 8014188:	ea13 0108 	ands.w	r1, r3, r8
 801418c:	bf0c      	ite	eq
 801418e:	6011      	streq	r1, [r2, #0]
 8014190:	6014      	strne	r4, [r2, #0]
 8014192:	0859      	lsrs	r1, r3, #1
 8014194:	ea15 0353 	ands.w	r3, r5, r3, lsr #1
 8014198:	f102 0940 	add.w	r9, r2, #64	@ 0x40
 801419c:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 80141a0:	d1ba      	bne.n	8014118 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa0>
 80141a2:	6013      	str	r3, [r2, #0]
 80141a4:	e7b9      	b.n	801411a <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
 80141a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141aa:	4b0b      	ldr	r3, [pc, #44]	@ (80141d8 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 80141ac:	4a0b      	ldr	r2, [pc, #44]	@ (80141dc <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 80141ae:	480c      	ldr	r0, [pc, #48]	@ (80141e0 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>)
 80141b0:	f240 3161 	movw	r1, #865	@ 0x361
 80141b4:	f008 fa1a 	bl	801c5ec <__assert_func>
 80141b8:	f8da 3000 	ldr.w	r3, [sl]
 80141bc:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 80141c0:	f4ff af6f 	bcc.w	80140a2 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 80141c4:	4b07      	ldr	r3, [pc, #28]	@ (80141e4 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>)
 80141c6:	4a05      	ldr	r2, [pc, #20]	@ (80141dc <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 80141c8:	4805      	ldr	r0, [pc, #20]	@ (80141e0 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>)
 80141ca:	f240 3162 	movw	r1, #866	@ 0x362
 80141ce:	f008 fa0d 	bl	801c5ec <__assert_func>
 80141d2:	e766      	b.n	80140a2 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 80141d4:	20020000 	andcs	r0, r2, r0
 80141d8:	0801ea3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, sp, lr, pc}
 80141dc:	0801ea7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, fp, sp, lr, pc}
 80141e0:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 80141e4:	0801ea5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, fp, sp, lr, pc}

080141e8 <WS28xxMulti::Setup(unsigned long)>:
 80141e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141ec:	4ac3      	ldr	r2, [pc, #780]	@ (80144fc <WS28xxMulti::Setup(unsigned long)+0x314>)
 80141ee:	4cc4      	ldr	r4, [pc, #784]	@ (8014500 <WS28xxMulti::Setup(unsigned long)+0x318>)
 80141f0:	b094      	sub	sp, #80	@ 0x50
 80141f2:	460d      	mov	r5, r1
 80141f4:	f240 137f 	movw	r3, #383	@ 0x17f
 80141f8:	49c2      	ldr	r1, [pc, #776]	@ (8014504 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 80141fa:	4607      	mov	r7, r0
 80141fc:	48c2      	ldr	r0, [pc, #776]	@ (8014508 <WS28xxMulti::Setup(unsigned long)+0x320>)
 80141fe:	f008 f915 	bl	801c42c <printf>
 8014202:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8014206:	f006 fb9d 	bl	801a944 <rcu_periph_clock_enable>
 801420a:	48c0      	ldr	r0, [pc, #768]	@ (801450c <WS28xxMulti::Setup(unsigned long)+0x324>)
 801420c:	2340      	movs	r3, #64	@ 0x40
 801420e:	2200      	movs	r2, #0
 8014210:	2102      	movs	r1, #2
 8014212:	f006 fb15 	bl	801a840 <gpio_mode_set>
 8014216:	2340      	movs	r3, #64	@ 0x40
 8014218:	48bc      	ldr	r0, [pc, #752]	@ (801450c <WS28xxMulti::Setup(unsigned long)+0x324>)
 801421a:	2202      	movs	r2, #2
 801421c:	2100      	movs	r1, #0
 801421e:	f006 fb31 	bl	801a884 <gpio_output_options_set>
 8014222:	48ba      	ldr	r0, [pc, #744]	@ (801450c <WS28xxMulti::Setup(unsigned long)+0x324>)
 8014224:	2240      	movs	r2, #64	@ 0x40
 8014226:	2102      	movs	r1, #2
 8014228:	f006 fb48 	bl	801a8bc <gpio_af_set>
 801422c:	fbb4 f4f5 	udiv	r4, r4, r5
 8014230:	4ab4      	ldr	r2, [pc, #720]	@ (8014504 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8014232:	49b2      	ldr	r1, [pc, #712]	@ (80144fc <WS28xxMulti::Setup(unsigned long)+0x314>)
 8014234:	48b6      	ldr	r0, [pc, #728]	@ (8014510 <WS28xxMulti::Setup(unsigned long)+0x328>)
 8014236:	f240 13a1 	movw	r3, #417	@ 0x1a1
 801423a:	e9cd 5400 	strd	r5, r4, [sp]
 801423e:	f008 f8f5 	bl	801c42c <printf>
 8014242:	2c0c      	cmp	r4, #12
 8014244:	f241 0001 	movw	r0, #4097	@ 0x1001
 8014248:	bf38      	it	cc
 801424a:	240c      	movcc	r4, #12
 801424c:	f006 fb7a 	bl	801a944 <rcu_periph_clock_enable>
 8014250:	48b0      	ldr	r0, [pc, #704]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8014252:	f006 fc33 	bl	801aabc <timer_deinit>
 8014256:	2600      	movs	r6, #0
 8014258:	1e63      	subs	r3, r4, #1
 801425a:	48ae      	ldr	r0, [pc, #696]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801425c:	9309      	str	r3, [sp, #36]	@ 0x24
 801425e:	a907      	add	r1, sp, #28
 8014260:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8014264:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8014268:	f006 fcd6 	bl	801ac18 <timer_init>
 801426c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8014270:	f04f 0a01 	mov.w	sl, #1
 8014274:	9006      	str	r0, [sp, #24]
 8014276:	4631      	mov	r1, r6
 8014278:	48a6      	ldr	r0, [pc, #664]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801427a:	f04f 0902 	mov.w	r9, #2
 801427e:	aa04      	add	r2, sp, #16
 8014280:	e9cd a904 	strd	sl, r9, [sp, #16]
 8014284:	f006 fd08 	bl	801ac98 <timer_channel_output_config>
 8014288:	fa24 f10a 	lsr.w	r1, r4, sl
 801428c:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 8014290:	1e4d      	subs	r5, r1, #1
 8014292:	4545      	cmp	r5, r8
 8014294:	f200 80f5 	bhi.w	8014482 <WS28xxMulti::Setup(unsigned long)+0x29a>
 8014298:	4631      	mov	r1, r6
 801429a:	489e      	ldr	r0, [pc, #632]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801429c:	b2aa      	uxth	r2, r5
 801429e:	f006 fe09 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 80142a2:	4631      	mov	r1, r6
 80142a4:	489b      	ldr	r0, [pc, #620]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142a6:	2260      	movs	r2, #96	@ 0x60
 80142a8:	f006 fdde 	bl	801ae68 <timer_channel_output_mode_config>
 80142ac:	4632      	mov	r2, r6
 80142ae:	4631      	mov	r1, r6
 80142b0:	4898      	ldr	r0, [pc, #608]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142b2:	f006 fe0d 	bl	801aed0 <timer_channel_output_shadow_config>
 80142b6:	4897      	ldr	r0, [pc, #604]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142b8:	2210      	movs	r2, #16
 80142ba:	4649      	mov	r1, r9
 80142bc:	f006 fdd4 	bl	801ae68 <timer_channel_output_mode_config>
 80142c0:	4894      	ldr	r0, [pc, #592]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142c2:	2210      	movs	r2, #16
 80142c4:	2103      	movs	r1, #3
 80142c6:	f006 fdcf 	bl	801ae68 <timer_channel_output_mode_config>
 80142ca:	4892      	ldr	r0, [pc, #584]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142cc:	4652      	mov	r2, sl
 80142ce:	4649      	mov	r1, r9
 80142d0:	f006 fdf0 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 80142d4:	08a4      	lsrs	r4, r4, #2
 80142d6:	1e66      	subs	r6, r4, #1
 80142d8:	b2b2      	uxth	r2, r6
 80142da:	488e      	ldr	r0, [pc, #568]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142dc:	2103      	movs	r1, #3
 80142de:	f006 fde9 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 80142e2:	488c      	ldr	r0, [pc, #560]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142e4:	2101      	movs	r1, #1
 80142e6:	f006 fe31 	bl	801af4c <timer_master_slave_mode_config>
 80142ea:	2130      	movs	r1, #48	@ 0x30
 80142ec:	4889      	ldr	r0, [pc, #548]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80142ee:	f006 fe1d 	bl	801af2c <timer_master_output_trigger_source_select>
 80142f2:	f241 0002 	movw	r0, #4098	@ 0x1002
 80142f6:	f006 fb25 	bl	801a944 <rcu_periph_clock_enable>
 80142fa:	4887      	ldr	r0, [pc, #540]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 80142fc:	f006 fbde 	bl	801aabc <timer_deinit>
 8014300:	f04f 0a00 	mov.w	sl, #0
 8014304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014308:	4883      	ldr	r0, [pc, #524]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 801430a:	9309      	str	r3, [sp, #36]	@ 0x24
 801430c:	a907      	add	r1, sp, #28
 801430e:	e9cd aa07 	strd	sl, sl, [sp, #28]
 8014312:	f006 fc81 	bl	801ac18 <timer_init>
 8014316:	4880      	ldr	r0, [pc, #512]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8014318:	2101      	movs	r1, #1
 801431a:	f006 fe17 	bl	801af4c <timer_master_slave_mode_config>
 801431e:	487e      	ldr	r0, [pc, #504]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8014320:	2107      	movs	r1, #7
 8014322:	f006 fe0b 	bl	801af3c <timer_slave_mode_select>
 8014326:	487c      	ldr	r0, [pc, #496]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8014328:	2120      	movs	r1, #32
 801432a:	f006 fdf7 	bl	801af1c <timer_input_trigger_source_select>
 801432e:	487a      	ldr	r0, [pc, #488]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8014330:	4651      	mov	r1, sl
 8014332:	2210      	movs	r2, #16
 8014334:	f006 fd98 	bl	801ae68 <timer_channel_output_mode_config>
 8014338:	6839      	ldr	r1, [r7, #0]
 801433a:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 801433e:	4281      	cmp	r1, r0
 8014340:	f200 80d2 	bhi.w	80144e8 <WS28xxMulti::Setup(unsigned long)+0x300>
 8014344:	b28a      	uxth	r2, r1
 8014346:	4874      	ldr	r0, [pc, #464]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8014348:	4d74      	ldr	r5, [pc, #464]	@ (801451c <WS28xxMulti::Setup(unsigned long)+0x334>)
 801434a:	2100      	movs	r1, #0
 801434c:	f006 fdb2 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 8014350:	2400      	movs	r4, #0
 8014352:	4871      	ldr	r0, [pc, #452]	@ (8014518 <WS28xxMulti::Setup(unsigned long)+0x330>)
 8014354:	2102      	movs	r1, #2
 8014356:	f006 fe08 	bl	801af6a <timer_interrupt_enable>
 801435a:	f885 431e 	strb.w	r4, [r5, #798]	@ 0x31e
 801435e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8014362:	602a      	str	r2, [r5, #0]
 8014364:	f640 4015 	movw	r0, #3093	@ 0xc15
 8014368:	f006 faec 	bl	801a944 <rcu_periph_clock_enable>
 801436c:	2107      	movs	r1, #7
 801436e:	486c      	ldr	r0, [pc, #432]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 8014370:	4e6c      	ldr	r6, [pc, #432]	@ (8014524 <WS28xxMulti::Setup(unsigned long)+0x33c>)
 8014372:	f005 fecb 	bl	801a10c <dma_deinit>
 8014376:	a80b      	add	r0, sp, #44	@ 0x2c
 8014378:	f005 fef4 	bl	801a164 <dma_single_data_para_struct_init>
 801437c:	2501      	movs	r5, #1
 801437e:	4b6a      	ldr	r3, [pc, #424]	@ (8014528 <WS28xxMulti::Setup(unsigned long)+0x340>)
 8014380:	4867      	ldr	r0, [pc, #412]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 8014382:	960d      	str	r6, [sp, #52]	@ 0x34
 8014384:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014386:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 801438a:	f04f 0940 	mov.w	r9, #64	@ 0x40
 801438e:	2107      	movs	r1, #7
 8014390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014392:	950e      	str	r5, [sp, #56]	@ 0x38
 8014394:	950c      	str	r5, [sp, #48]	@ 0x30
 8014396:	9413      	str	r4, [sp, #76]	@ 0x4c
 8014398:	960f      	str	r6, [sp, #60]	@ 0x3c
 801439a:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 801439e:	f005 feed 	bl	801a17c <dma_single_data_mode_init>
 80143a2:	485f      	ldr	r0, [pc, #380]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80143a4:	2107      	movs	r1, #7
 80143a6:	f005 ff6f 	bl	801a288 <dma_circulation_disable>
 80143aa:	2205      	movs	r2, #5
 80143ac:	485c      	ldr	r0, [pc, #368]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80143ae:	2107      	movs	r1, #7
 80143b0:	f005 ff72 	bl	801a298 <dma_channel_subperipheral_select>
 80143b4:	2102      	movs	r1, #2
 80143b6:	485a      	ldr	r0, [pc, #360]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80143b8:	f005 fea8 	bl	801a10c <dma_deinit>
 80143bc:	a80b      	add	r0, sp, #44	@ 0x2c
 80143be:	f005 fed1 	bl	801a164 <dma_single_data_para_struct_init>
 80143c2:	e9cd 460e 	strd	r4, r6, [sp, #56]	@ 0x38
 80143c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80143c8:	4855      	ldr	r0, [pc, #340]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80143ca:	950c      	str	r5, [sp, #48]	@ 0x30
 80143cc:	2102      	movs	r1, #2
 80143ce:	9413      	str	r4, [sp, #76]	@ 0x4c
 80143d0:	4d56      	ldr	r5, [pc, #344]	@ (801452c <WS28xxMulti::Setup(unsigned long)+0x344>)
 80143d2:	4c57      	ldr	r4, [pc, #348]	@ (8014530 <WS28xxMulti::Setup(unsigned long)+0x348>)
 80143d4:	4e57      	ldr	r6, [pc, #348]	@ (8014534 <WS28xxMulti::Setup(unsigned long)+0x34c>)
 80143d6:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 80143da:	940d      	str	r4, [sp, #52]	@ 0x34
 80143dc:	950b      	str	r5, [sp, #44]	@ 0x2c
 80143de:	f005 fecd 	bl	801a17c <dma_single_data_mode_init>
 80143e2:	484f      	ldr	r0, [pc, #316]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80143e4:	2102      	movs	r1, #2
 80143e6:	f005 ff4f 	bl	801a288 <dma_circulation_disable>
 80143ea:	484d      	ldr	r0, [pc, #308]	@ (8014520 <WS28xxMulti::Setup(unsigned long)+0x338>)
 80143ec:	2205      	movs	r2, #5
 80143ee:	2102      	movs	r1, #2
 80143f0:	f005 ff52 	bl	801a298 <dma_channel_subperipheral_select>
 80143f4:	6830      	ldr	r0, [r6, #0]
 80143f6:	2800      	cmp	r0, #0
 80143f8:	f000 80a6 	beq.w	8014548 <WS28xxMulti::Setup(unsigned long)+0x360>
 80143fc:	68c1      	ldr	r1, [r0, #12]
 80143fe:	f1a1 020b 	sub.w	r2, r1, #11
 8014402:	2a02      	cmp	r2, #2
 8014404:	d81b      	bhi.n	801443e <WS28xxMulti::Setup(unsigned long)+0x256>
 8014406:	6803      	ldr	r3, [r0, #0]
 8014408:	f103 0801 	add.w	r8, r3, #1
 801440c:	d021      	beq.n	8014452 <WS28xxMulti::Setup(unsigned long)+0x26a>
 801440e:	2400      	movs	r4, #0
 8014410:	4626      	mov	r6, r4
 8014412:	25ff      	movs	r5, #255	@ 0xff
 8014414:	2300      	movs	r3, #0
 8014416:	461a      	mov	r2, r3
 8014418:	4621      	mov	r1, r4
 801441a:	4638      	mov	r0, r7
 801441c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014420:	9600      	str	r6, [sp, #0]
 8014422:	f7ff fe29 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014426:	4621      	mov	r1, r4
 8014428:	e9cd 5501 	strd	r5, r5, [sp, #4]
 801442c:	23ff      	movs	r3, #255	@ 0xff
 801442e:	9500      	str	r5, [sp, #0]
 8014430:	4642      	mov	r2, r8
 8014432:	4638      	mov	r0, r7
 8014434:	3401      	adds	r4, #1
 8014436:	f7ff fe1f 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801443a:	2c08      	cmp	r4, #8
 801443c:	d1ea      	bne.n	8014414 <WS28xxMulti::Setup(unsigned long)+0x22c>
 801443e:	4a2f      	ldr	r2, [pc, #188]	@ (80144fc <WS28xxMulti::Setup(unsigned long)+0x314>)
 8014440:	4930      	ldr	r1, [pc, #192]	@ (8014504 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8014442:	483d      	ldr	r0, [pc, #244]	@ (8014538 <WS28xxMulti::Setup(unsigned long)+0x350>)
 8014444:	f240 234e 	movw	r3, #590	@ 0x24e
 8014448:	f007 fff0 	bl	801c42c <printf>
 801444c:	b014      	add	sp, #80	@ 0x50
 801444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014452:	2600      	movs	r6, #0
 8014454:	4634      	mov	r4, r6
 8014456:	2300      	movs	r3, #0
 8014458:	461a      	mov	r2, r3
 801445a:	4631      	mov	r1, r6
 801445c:	4638      	mov	r0, r7
 801445e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014462:	9400      	str	r4, [sp, #0]
 8014464:	f7ff fe08 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014468:	4631      	mov	r1, r6
 801446a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801446e:	2300      	movs	r3, #0
 8014470:	9400      	str	r4, [sp, #0]
 8014472:	4642      	mov	r2, r8
 8014474:	4638      	mov	r0, r7
 8014476:	3601      	adds	r6, #1
 8014478:	f7ff fdfe 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 801447c:	2e08      	cmp	r6, #8
 801447e:	d1ea      	bne.n	8014456 <WS28xxMulti::Setup(unsigned long)+0x26e>
 8014480:	e7dd      	b.n	801443e <WS28xxMulti::Setup(unsigned long)+0x256>
 8014482:	4b2e      	ldr	r3, [pc, #184]	@ (801453c <WS28xxMulti::Setup(unsigned long)+0x354>)
 8014484:	4a1d      	ldr	r2, [pc, #116]	@ (80144fc <WS28xxMulti::Setup(unsigned long)+0x314>)
 8014486:	481f      	ldr	r0, [pc, #124]	@ (8014504 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 8014488:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 801448c:	f008 f8ae 	bl	801c5ec <__assert_func>
 8014490:	4631      	mov	r1, r6
 8014492:	4820      	ldr	r0, [pc, #128]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 8014494:	b2aa      	uxth	r2, r5
 8014496:	f006 fd0d 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 801449a:	4631      	mov	r1, r6
 801449c:	481d      	ldr	r0, [pc, #116]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 801449e:	2260      	movs	r2, #96	@ 0x60
 80144a0:	f006 fce2 	bl	801ae68 <timer_channel_output_mode_config>
 80144a4:	4632      	mov	r2, r6
 80144a6:	4631      	mov	r1, r6
 80144a8:	481a      	ldr	r0, [pc, #104]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80144aa:	f006 fd11 	bl	801aed0 <timer_channel_output_shadow_config>
 80144ae:	4819      	ldr	r0, [pc, #100]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80144b0:	2210      	movs	r2, #16
 80144b2:	4649      	mov	r1, r9
 80144b4:	f006 fcd8 	bl	801ae68 <timer_channel_output_mode_config>
 80144b8:	4816      	ldr	r0, [pc, #88]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80144ba:	2210      	movs	r2, #16
 80144bc:	2103      	movs	r1, #3
 80144be:	f006 fcd3 	bl	801ae68 <timer_channel_output_mode_config>
 80144c2:	4652      	mov	r2, sl
 80144c4:	4813      	ldr	r0, [pc, #76]	@ (8014514 <WS28xxMulti::Setup(unsigned long)+0x32c>)
 80144c6:	4649      	mov	r1, r9
 80144c8:	f006 fcf4 	bl	801aeb4 <timer_channel_output_pulse_value_config>
 80144cc:	fa24 f209 	lsr.w	r2, r4, r9
 80144d0:	1e56      	subs	r6, r2, #1
 80144d2:	4546      	cmp	r6, r8
 80144d4:	f67f af00 	bls.w	80142d8 <WS28xxMulti::Setup(unsigned long)+0xf0>
 80144d8:	4b19      	ldr	r3, [pc, #100]	@ (8014540 <WS28xxMulti::Setup(unsigned long)+0x358>)
 80144da:	4a08      	ldr	r2, [pc, #32]	@ (80144fc <WS28xxMulti::Setup(unsigned long)+0x314>)
 80144dc:	4809      	ldr	r0, [pc, #36]	@ (8014504 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 80144de:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 80144e2:	f008 f883 	bl	801c5ec <__assert_func>
 80144e6:	e6f7      	b.n	80142d8 <WS28xxMulti::Setup(unsigned long)+0xf0>
 80144e8:	f240 11e5 	movw	r1, #485	@ 0x1e5
 80144ec:	4b15      	ldr	r3, [pc, #84]	@ (8014544 <WS28xxMulti::Setup(unsigned long)+0x35c>)
 80144ee:	4a03      	ldr	r2, [pc, #12]	@ (80144fc <WS28xxMulti::Setup(unsigned long)+0x314>)
 80144f0:	4804      	ldr	r0, [pc, #16]	@ (8014504 <WS28xxMulti::Setup(unsigned long)+0x31c>)
 80144f2:	f008 f87b 	bl	801c5ec <__assert_func>
 80144f6:	6839      	ldr	r1, [r7, #0]
 80144f8:	e724      	b.n	8014344 <WS28xxMulti::Setup(unsigned long)+0x15c>
 80144fa:	bf00      	nop
 80144fc:	0801e934 	stmdaeq	r1, {r2, r4, r5, r8, fp, sp, lr, pc}
 8014500:	0e4e1c00 	cdpeq	12, 4, cr1, cr14, cr0, {0}
 8014504:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 8014508:	0801e7b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 801450c:	40020000 	andmi	r0, r2, r0
 8014510:	0801ea8c 	stmdaeq	r1, {r2, r3, r7, r9, fp, sp, lr, pc}
 8014514:	40000400 	andmi	r0, r0, r0, lsl #8
 8014518:	40000800 	andmi	r0, r0, r0, lsl #16
 801451c:	e000e100 	and	lr, r0, r0, lsl #2
 8014520:	40026000 	andmi	r6, r2, r0
 8014524:	08020fac 	stmdaeq	r2, {r2, r3, r5, r7, r8, r9, sl, fp}
 8014528:	40020828 	andmi	r0, r2, r8, lsr #16
 801452c:	40020818 	andmi	r0, r2, r8, lsl r8
 8014530:	20020000 	andcs	r0, r2, r0
 8014534:	2000007c 	andcs	r0, r0, ip, ror r0
 8014538:	0801e7fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 801453c:	0801eabc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, fp, sp, lr, pc}
 8014540:	0801eae0 	stmdaeq	r1, {r5, r6, r7, r9, fp, sp, lr, pc}
 8014544:	0801eb04 	stmdaeq	r1, {r2, r8, r9, fp, sp, lr, pc}
 8014548:	4804      	ldr	r0, [pc, #16]	@ (801455c <WS28xxMulti::Setup(unsigned long)+0x374>)
 801454a:	4b05      	ldr	r3, [pc, #20]	@ (8014560 <WS28xxMulti::Setup(unsigned long)+0x378>)
 801454c:	4a05      	ldr	r2, [pc, #20]	@ (8014564 <WS28xxMulti::Setup(unsigned long)+0x37c>)
 801454e:	f240 110d 	movw	r1, #269	@ 0x10d
 8014552:	f008 f84b 	bl	801c5ec <__assert_func>
 8014556:	6830      	ldr	r0, [r6, #0]
 8014558:	e750      	b.n	80143fc <WS28xxMulti::Setup(unsigned long)+0x214>
 801455a:	bf00      	nop
 801455c:	0801e998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr, pc}
 8014560:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8014564:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}

08014568 <WS28xxMulti::WS28xxMulti()>:
 8014568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801456a:	4605      	mov	r5, r0
 801456c:	2300      	movs	r3, #0
 801456e:	4cb0      	ldr	r4, [pc, #704]	@ (8014830 <WS28xxMulti::WS28xxMulti()+0x2c8>)
 8014570:	602b      	str	r3, [r5, #0]
 8014572:	4ab0      	ldr	r2, [pc, #704]	@ (8014834 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8014574:	49b0      	ldr	r1, [pc, #704]	@ (8014838 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8014576:	48b1      	ldr	r0, [pc, #708]	@ (801483c <WS28xxMulti::WS28xxMulti()+0x2d4>)
 8014578:	b083      	sub	sp, #12
 801457a:	237c      	movs	r3, #124	@ 0x7c
 801457c:	f007 ff56 	bl	801c42c <printf>
 8014580:	6820      	ldr	r0, [r4, #0]
 8014582:	2800      	cmp	r0, #0
 8014584:	f040 818c 	bne.w	80148a0 <WS28xxMulti::WS28xxMulti()+0x338>
 8014588:	4fad      	ldr	r7, [pc, #692]	@ (8014840 <WS28xxMulti::WS28xxMulti()+0x2d8>)
 801458a:	4aab      	ldr	r2, [pc, #684]	@ (8014838 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 801458c:	49a9      	ldr	r1, [pc, #676]	@ (8014834 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 801458e:	48ad      	ldr	r0, [pc, #692]	@ (8014844 <WS28xxMulti::WS28xxMulti()+0x2dc>)
 8014590:	2608      	movs	r6, #8
 8014592:	9600      	str	r6, [sp, #0]
 8014594:	2381      	movs	r3, #129	@ 0x81
 8014596:	6025      	str	r5, [r4, #0]
 8014598:	f007 ff48 	bl	801c42c <printf>
 801459c:	683c      	ldr	r4, [r7, #0]
 801459e:	2c00      	cmp	r4, #0
 80145a0:	f000 8175 	beq.w	801488e <WS28xxMulti::WS28xxMulti()+0x326>
 80145a4:	4aa8      	ldr	r2, [pc, #672]	@ (8014848 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 80145a6:	49a9      	ldr	r1, [pc, #676]	@ (801484c <WS28xxMulti::WS28xxMulti()+0x2e4>)
 80145a8:	48a4      	ldr	r0, [pc, #656]	@ (801483c <WS28xxMulti::WS28xxMulti()+0x2d4>)
 80145aa:	2397      	movs	r3, #151	@ 0x97
 80145ac:	f007 ff3e 	bl	801c42c <printf>
 80145b0:	68e2      	ldr	r2, [r4, #12]
 80145b2:	6823      	ldr	r3, [r4, #0]
 80145b4:	2a07      	cmp	r2, #7
 80145b6:	f000 80a2 	beq.w	80146fe <WS28xxMulti::WS28xxMulti()+0x196>
 80145ba:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 80145be:	f1a2 000b 	sub.w	r0, r2, #11
 80145c2:	bf28      	it	cs
 80145c4:	f44f 732a 	movcs.w	r3, #680	@ 0x2a8
 80145c8:	2103      	movs	r1, #3
 80145ca:	2801      	cmp	r0, #1
 80145cc:	6926      	ldr	r6, [r4, #16]
 80145ce:	6023      	str	r3, [r4, #0]
 80145d0:	60a1      	str	r1, [r4, #8]
 80145d2:	f200 8112 	bhi.w	80147fa <WS28xxMulti::WS28xxMulti()+0x292>
 80145d6:	7de2      	ldrb	r2, [r4, #23]
 80145d8:	2a1f      	cmp	r2, #31
 80145da:	bf8c      	ite	hi
 80145dc:	22ff      	movhi	r2, #255	@ 0xff
 80145de:	f062 021f 	ornls	r2, r2, #31
 80145e2:	75e2      	strb	r2, [r4, #23]
 80145e4:	2200      	movs	r2, #0
 80145e6:	2e06      	cmp	r6, #6
 80145e8:	7522      	strb	r2, [r4, #20]
 80145ea:	f000 80ba 	beq.w	8014762 <WS28xxMulti::WS28xxMulti()+0x1fa>
 80145ee:	6866      	ldr	r6, [r4, #4]
 80145f0:	2e00      	cmp	r6, #0
 80145f2:	d174      	bne.n	80146de <WS28xxMulti::WS28xxMulti()+0x176>
 80145f4:	4e96      	ldr	r6, [pc, #600]	@ (8014850 <WS28xxMulti::WS28xxMulti()+0x2e8>)
 80145f6:	6066      	str	r6, [r4, #4]
 80145f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80145fc:	005a      	lsls	r2, r3, #1
 80145fe:	4f95      	ldr	r7, [pc, #596]	@ (8014854 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 8014600:	fbb7 f0f2 	udiv	r0, r7, r2
 8014604:	4991      	ldr	r1, [pc, #580]	@ (801484c <WS28xxMulti::WS28xxMulti()+0x2e4>)
 8014606:	61a0      	str	r0, [r4, #24]
 8014608:	4a8f      	ldr	r2, [pc, #572]	@ (8014848 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 801460a:	4893      	ldr	r0, [pc, #588]	@ (8014858 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 801460c:	23f2      	movs	r3, #242	@ 0xf2
 801460e:	f007 ff0d 	bl	801c42c <printf>
 8014612:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8014616:	f1a7 010b 	sub.w	r1, r7, #11
 801461a:	2902      	cmp	r1, #2
 801461c:	f240 8090 	bls.w	8014740 <WS28xxMulti::WS28xxMulti()+0x1d8>
 8014620:	6823      	ldr	r3, [r4, #0]
 8014622:	fb06 f303 	mul.w	r3, r6, r3
 8014626:	4e8d      	ldr	r6, [pc, #564]	@ (801485c <WS28xxMulti::WS28xxMulti()+0x2f4>)
 8014628:	4982      	ldr	r1, [pc, #520]	@ (8014834 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 801462a:	488d      	ldr	r0, [pc, #564]	@ (8014860 <WS28xxMulti::WS28xxMulti()+0x2f8>)
 801462c:	00da      	lsls	r2, r3, #3
 801462e:	f5a6 4700 	sub.w	r7, r6, #32768	@ 0x8000
 8014632:	602a      	str	r2, [r5, #0]
 8014634:	239c      	movs	r3, #156	@ 0x9c
 8014636:	4a80      	ldr	r2, [pc, #512]	@ (8014838 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8014638:	9601      	str	r6, [sp, #4]
 801463a:	9700      	str	r7, [sp, #0]
 801463c:	f007 fef6 	bl	801c42c <printf>
 8014640:	6828      	ldr	r0, [r5, #0]
 8014642:	497c      	ldr	r1, [pc, #496]	@ (8014834 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8014644:	9000      	str	r0, [sp, #0]
 8014646:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 801464a:	0a9e      	lsrs	r6, r3, #10
 801464c:	4a7a      	ldr	r2, [pc, #488]	@ (8014838 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 801464e:	4885      	ldr	r0, [pc, #532]	@ (8014864 <WS28xxMulti::WS28xxMulti()+0x2fc>)
 8014650:	9601      	str	r6, [sp, #4]
 8014652:	239d      	movs	r3, #157	@ 0x9d
 8014654:	f007 feea 	bl	801c42c <printf>
 8014658:	6829      	ldr	r1, [r5, #0]
 801465a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801465e:	f200 810f 	bhi.w	8014880 <WS28xxMulti::WS28xxMulti()+0x318>
 8014662:	f640 4002 	movw	r0, #3074	@ 0xc02
 8014666:	f006 f96d 	bl	801a944 <rcu_periph_clock_enable>
 801466a:	487f      	ldr	r0, [pc, #508]	@ (8014868 <WS28xxMulti::WS28xxMulti()+0x300>)
 801466c:	4f7f      	ldr	r7, [pc, #508]	@ (801486c <WS28xxMulti::WS28xxMulti()+0x304>)
 801466e:	f44f 537f 	mov.w	r3, #16320	@ 0x3fc0
 8014672:	2202      	movs	r2, #2
 8014674:	2101      	movs	r1, #1
 8014676:	f006 f8e3 	bl	801a840 <gpio_mode_set>
 801467a:	f44f 537f 	mov.w	r3, #16320	@ 0x3fc0
 801467e:	2100      	movs	r1, #0
 8014680:	4879      	ldr	r0, [pc, #484]	@ (8014868 <WS28xxMulti::WS28xxMulti()+0x300>)
 8014682:	2202      	movs	r2, #2
 8014684:	f006 f8fe 	bl	801a884 <gpio_output_options_set>
 8014688:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 801468c:	f8c7 2828 	str.w	r2, [r7, #2088]	@ 0x828
 8014690:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8014694:	f006 f956 	bl	801a944 <rcu_periph_clock_enable>
 8014698:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801469c:	2202      	movs	r2, #2
 801469e:	2101      	movs	r1, #1
 80146a0:	4638      	mov	r0, r7
 80146a2:	f006 f8cd 	bl	801a840 <gpio_mode_set>
 80146a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80146aa:	4638      	mov	r0, r7
 80146ac:	2202      	movs	r2, #2
 80146ae:	2100      	movs	r1, #0
 80146b0:	f006 f8e8 	bl	801a884 <gpio_output_options_set>
 80146b4:	7d23      	ldrb	r3, [r4, #20]
 80146b6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80146ba:	61b8      	str	r0, [r7, #24]
 80146bc:	b1d3      	cbz	r3, 80146f4 <WS28xxMulti::WS28xxMulti()+0x18c>
 80146be:	7da2      	ldrb	r2, [r4, #22]
 80146c0:	7d61      	ldrb	r1, [r4, #21]
 80146c2:	4628      	mov	r0, r5
 80146c4:	f7ff f882 	bl	80137cc <WS28xxMulti::Setup(unsigned char, unsigned char)>
 80146c8:	f007 f812 	bl	801b6f0 <dma::memcpy32_init()>
 80146cc:	4a59      	ldr	r2, [pc, #356]	@ (8014834 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 80146ce:	495a      	ldr	r1, [pc, #360]	@ (8014838 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 80146d0:	4861      	ldr	r0, [pc, #388]	@ (8014858 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 80146d2:	23c2      	movs	r3, #194	@ 0xc2
 80146d4:	f007 feaa 	bl	801c42c <printf>
 80146d8:	4628      	mov	r0, r5
 80146da:	b003      	add	sp, #12
 80146dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146de:	4f64      	ldr	r7, [pc, #400]	@ (8014870 <WS28xxMulti::WS28xxMulti()+0x308>)
 80146e0:	42be      	cmp	r6, r7
 80146e2:	d840      	bhi.n	8014766 <WS28xxMulti::WS28xxMulti()+0x1fe>
 80146e4:	4863      	ldr	r0, [pc, #396]	@ (8014874 <WS28xxMulti::WS28xxMulti()+0x30c>)
 80146e6:	fbb0 f1f6 	udiv	r1, r0, r6
 80146ea:	fb03 f101 	mul.w	r1, r3, r1
 80146ee:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80146f2:	e784      	b.n	80145fe <WS28xxMulti::WS28xxMulti()+0x96>
 80146f4:	6861      	ldr	r1, [r4, #4]
 80146f6:	4628      	mov	r0, r5
 80146f8:	f7ff fd76 	bl	80141e8 <WS28xxMulti::Setup(unsigned long)>
 80146fc:	e7e4      	b.n	80146c8 <WS28xxMulti::WS28xxMulti()+0x160>
 80146fe:	6920      	ldr	r0, [r4, #16]
 8014700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014704:	bf28      	it	cs
 8014706:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 801470a:	2104      	movs	r1, #4
 801470c:	2601      	movs	r6, #1
 801470e:	2806      	cmp	r0, #6
 8014710:	6023      	str	r3, [r4, #0]
 8014712:	60a1      	str	r1, [r4, #8]
 8014714:	7526      	strb	r6, [r4, #20]
 8014716:	f000 8136 	beq.w	8014986 <WS28xxMulti::WS28xxMulti()+0x41e>
 801471a:	7d67      	ldrb	r7, [r4, #21]
 801471c:	f894 e016 	ldrb.w	lr, [r4, #22]
 8014720:	45be      	cmp	lr, r7
 8014722:	d823      	bhi.n	801476c <WS28xxMulti::WS28xxMulti()+0x204>
 8014724:	2600      	movs	r6, #0
 8014726:	2a03      	cmp	r2, #3
 8014728:	f8a4 6015 	strh.w	r6, [r4, #21]
 801472c:	d07c      	beq.n	8014828 <WS28xxMulti::WS28xxMulti()+0x2c0>
 801472e:	3a08      	subs	r2, #8
 8014730:	2a02      	cmp	r2, #2
 8014732:	f200 811e 	bhi.w	8014972 <WS28xxMulti::WS28xxMulti()+0x40a>
 8014736:	20fc      	movs	r0, #252	@ 0xfc
 8014738:	75a0      	strb	r0, [r4, #22]
 801473a:	27c0      	movs	r7, #192	@ 0xc0
 801473c:	7567      	strb	r7, [r4, #21]
 801473e:	e017      	b.n	8014770 <WS28xxMulti::WS28xxMulti()+0x208>
 8014740:	f240 37fe 	movw	r7, #1022	@ 0x3fe
 8014744:	4a3c      	ldr	r2, [pc, #240]	@ (8014838 <WS28xxMulti::WS28xxMulti()+0x2d0>)
 8014746:	493b      	ldr	r1, [pc, #236]	@ (8014834 <WS28xxMulti::WS28xxMulti()+0x2cc>)
 8014748:	484b      	ldr	r0, [pc, #300]	@ (8014878 <WS28xxMulti::WS28xxMulti()+0x310>)
 801474a:	9700      	str	r7, [sp, #0]
 801474c:	238b      	movs	r3, #139	@ 0x8b
 801474e:	f007 fe6d 	bl	801c42c <printf>
 8014752:	6820      	ldr	r0, [r4, #0]
 8014754:	42b8      	cmp	r0, r7
 8014756:	d816      	bhi.n	8014786 <WS28xxMulti::WS28xxMulti()+0x21e>
 8014758:	fb06 f300 	mul.w	r3, r6, r0
 801475c:	4403      	add	r3, r0
 801475e:	3308      	adds	r3, #8
 8014760:	e761      	b.n	8014626 <WS28xxMulti::WS28xxMulti()+0xbe>
 8014762:	6122      	str	r2, [r4, #16]
 8014764:	e743      	b.n	80145ee <WS28xxMulti::WS28xxMulti()+0x86>
 8014766:	6067      	str	r7, [r4, #4]
 8014768:	2200      	movs	r2, #0
 801476a:	e748      	b.n	80145fe <WS28xxMulti::WS28xxMulti()+0x96>
 801476c:	2f00      	cmp	r7, #0
 801476e:	d0e4      	beq.n	801473a <WS28xxMulti::WS28xxMulti()+0x1d2>
 8014770:	fb03 f101 	mul.w	r1, r3, r1
 8014774:	4e41      	ldr	r6, [pc, #260]	@ (801487c <WS28xxMulti::WS28xxMulti()+0x314>)
 8014776:	4b37      	ldr	r3, [pc, #220]	@ (8014854 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 8014778:	6066      	str	r6, [r4, #4]
 801477a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801477e:	004a      	lsls	r2, r1, #1
 8014780:	fbb3 f0f2 	udiv	r0, r3, r2
 8014784:	e73e      	b.n	8014604 <WS28xxMulti::WS28xxMulti()+0x9c>
 8014786:	4a30      	ldr	r2, [pc, #192]	@ (8014848 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 8014788:	4930      	ldr	r1, [pc, #192]	@ (801484c <WS28xxMulti::WS28xxMulti()+0x2e4>)
 801478a:	482c      	ldr	r0, [pc, #176]	@ (801483c <WS28xxMulti::WS28xxMulti()+0x2d4>)
 801478c:	6027      	str	r7, [r4, #0]
 801478e:	2397      	movs	r3, #151	@ 0x97
 8014790:	f007 fe4c 	bl	801c42c <printf>
 8014794:	68e2      	ldr	r2, [r4, #12]
 8014796:	6823      	ldr	r3, [r4, #0]
 8014798:	2a07      	cmp	r2, #7
 801479a:	f000 809f 	beq.w	80148dc <WS28xxMulti::WS28xxMulti()+0x374>
 801479e:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 80147a2:	f1a2 010b 	sub.w	r1, r2, #11
 80147a6:	bf28      	it	cs
 80147a8:	f44f 732a 	movcs.w	r3, #680	@ 0x2a8
 80147ac:	2003      	movs	r0, #3
 80147ae:	2901      	cmp	r1, #1
 80147b0:	6927      	ldr	r7, [r4, #16]
 80147b2:	6023      	str	r3, [r4, #0]
 80147b4:	60a0      	str	r0, [r4, #8]
 80147b6:	f200 80bc 	bhi.w	8014932 <WS28xxMulti::WS28xxMulti()+0x3ca>
 80147ba:	7de1      	ldrb	r1, [r4, #23]
 80147bc:	291f      	cmp	r1, #31
 80147be:	bf8c      	ite	hi
 80147c0:	21ff      	movhi	r1, #255	@ 0xff
 80147c2:	f061 011f 	ornls	r1, r1, #31
 80147c6:	75e1      	strb	r1, [r4, #23]
 80147c8:	2200      	movs	r2, #0
 80147ca:	2f06      	cmp	r7, #6
 80147cc:	7522      	strb	r2, [r4, #20]
 80147ce:	f000 80ae 	beq.w	801492e <WS28xxMulti::WS28xxMulti()+0x3c6>
 80147d2:	6860      	ldr	r0, [r4, #4]
 80147d4:	2800      	cmp	r0, #0
 80147d6:	d174      	bne.n	80148c2 <WS28xxMulti::WS28xxMulti()+0x35a>
 80147d8:	4f1d      	ldr	r7, [pc, #116]	@ (8014850 <WS28xxMulti::WS28xxMulti()+0x2e8>)
 80147da:	6067      	str	r7, [r4, #4]
 80147dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80147e0:	0058      	lsls	r0, r3, #1
 80147e2:	491c      	ldr	r1, [pc, #112]	@ (8014854 <WS28xxMulti::WS28xxMulti()+0x2ec>)
 80147e4:	fbb1 f1f0 	udiv	r1, r1, r0
 80147e8:	61a1      	str	r1, [r4, #24]
 80147ea:	4a17      	ldr	r2, [pc, #92]	@ (8014848 <WS28xxMulti::WS28xxMulti()+0x2e0>)
 80147ec:	4917      	ldr	r1, [pc, #92]	@ (801484c <WS28xxMulti::WS28xxMulti()+0x2e4>)
 80147ee:	481a      	ldr	r0, [pc, #104]	@ (8014858 <WS28xxMulti::WS28xxMulti()+0x2f0>)
 80147f0:	23f2      	movs	r3, #242	@ 0xf2
 80147f2:	f007 fe1b 	bl	801c42c <printf>
 80147f6:	6820      	ldr	r0, [r4, #0]
 80147f8:	e7ae      	b.n	8014758 <WS28xxMulti::WS28xxMulti()+0x1f0>
 80147fa:	2a00      	cmp	r2, #0
 80147fc:	f43f aef3 	beq.w	80145e6 <WS28xxMulti::WS28xxMulti()+0x7e>
 8014800:	2a0d      	cmp	r2, #13
 8014802:	d054      	beq.n	80148ae <WS28xxMulti::WS28xxMulti()+0x346>
 8014804:	2701      	movs	r7, #1
 8014806:	2a0e      	cmp	r2, #14
 8014808:	7527      	strb	r7, [r4, #20]
 801480a:	f040 80a2 	bne.w	8014952 <WS28xxMulti::WS28xxMulti()+0x3ea>
 801480e:	2e06      	cmp	r6, #6
 8014810:	7d67      	ldrb	r7, [r4, #21]
 8014812:	f894 c016 	ldrb.w	ip, [r4, #22]
 8014816:	60e1      	str	r1, [r4, #12]
 8014818:	bf04      	itt	eq
 801481a:	2202      	moveq	r2, #2
 801481c:	6122      	streq	r2, [r4, #16]
 801481e:	45bc      	cmp	ip, r7
 8014820:	d8a4      	bhi.n	801476c <WS28xxMulti::WS28xxMulti()+0x204>
 8014822:	2000      	movs	r0, #0
 8014824:	f8a4 0015 	strh.w	r0, [r4, #21]
 8014828:	20f8      	movs	r0, #248	@ 0xf8
 801482a:	75a0      	strb	r0, [r4, #22]
 801482c:	e785      	b.n	801473a <WS28xxMulti::WS28xxMulti()+0x1d2>
 801482e:	bf00      	nop
 8014830:	2000dfc4 	andcs	sp, r0, r4, asr #31
 8014834:	0801eb1c 	stmdaeq	r1, {r2, r3, r4, r8, r9, fp, sp, lr, pc}
 8014838:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 801483c:	0801e7b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 8014840:	2000007c 	andcs	r0, r0, ip, ror r0
 8014844:	0801eb3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, fp, sp, lr, pc}
 8014848:	0801e7c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sl, sp, lr, pc}
 801484c:	0801e998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr, pc}
 8014850:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8014854:	000f4240 	andeq	r4, pc, r0, asr #4
 8014858:	0801e7fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 801485c:	20028000 	andcs	r8, r2, r0
 8014860:	0801eb84 	stmdaeq	r1, {r2, r7, r8, r9, fp, sp, lr, pc}
 8014864:	0801ebb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, fp, sp, lr, pc}
 8014868:	40020800 	andmi	r0, r2, r0, lsl #16
 801486c:	40020000 	andmi	r0, r2, r0
 8014870:	017d7840 	cmneq	sp, r0, asr #16
 8014874:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8014878:	0801eb60 	stmdaeq	r1, {r5, r6, r8, r9, fp, sp, lr, pc}
 801487c:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8014880:	4b59      	ldr	r3, [pc, #356]	@ (80149e8 <WS28xxMulti::WS28xxMulti()+0x480>)
 8014882:	4a5a      	ldr	r2, [pc, #360]	@ (80149ec <WS28xxMulti::WS28xxMulti()+0x484>)
 8014884:	485a      	ldr	r0, [pc, #360]	@ (80149f0 <WS28xxMulti::WS28xxMulti()+0x488>)
 8014886:	219e      	movs	r1, #158	@ 0x9e
 8014888:	f007 feb0 	bl	801c5ec <__assert_func>
 801488c:	e6e9      	b.n	8014662 <WS28xxMulti::WS28xxMulti()+0xfa>
 801488e:	4b59      	ldr	r3, [pc, #356]	@ (80149f4 <WS28xxMulti::WS28xxMulti()+0x48c>)
 8014890:	4a59      	ldr	r2, [pc, #356]	@ (80149f8 <WS28xxMulti::WS28xxMulti()+0x490>)
 8014892:	485a      	ldr	r0, [pc, #360]	@ (80149fc <WS28xxMulti::WS28xxMulti()+0x494>)
 8014894:	f240 110d 	movw	r1, #269	@ 0x10d
 8014898:	f007 fea8 	bl	801c5ec <__assert_func>
 801489c:	683c      	ldr	r4, [r7, #0]
 801489e:	e681      	b.n	80145a4 <WS28xxMulti::WS28xxMulti()+0x3c>
 80148a0:	4b57      	ldr	r3, [pc, #348]	@ (8014a00 <WS28xxMulti::WS28xxMulti()+0x498>)
 80148a2:	4a52      	ldr	r2, [pc, #328]	@ (80149ec <WS28xxMulti::WS28xxMulti()+0x484>)
 80148a4:	4852      	ldr	r0, [pc, #328]	@ (80149f0 <WS28xxMulti::WS28xxMulti()+0x488>)
 80148a6:	217e      	movs	r1, #126	@ 0x7e
 80148a8:	f007 fea0 	bl	801c5ec <__assert_func>
 80148ac:	e66c      	b.n	8014588 <WS28xxMulti::WS28xxMulti()+0x20>
 80148ae:	2100      	movs	r1, #0
 80148b0:	2e06      	cmp	r6, #6
 80148b2:	7521      	strb	r1, [r4, #20]
 80148b4:	d010      	beq.n	80148d8 <WS28xxMulti::WS28xxMulti()+0x370>
 80148b6:	6866      	ldr	r6, [r4, #4]
 80148b8:	2e00      	cmp	r6, #0
 80148ba:	f43f ae9b 	beq.w	80145f4 <WS28xxMulti::WS28xxMulti()+0x8c>
 80148be:	4f51      	ldr	r7, [pc, #324]	@ (8014a04 <WS28xxMulti::WS28xxMulti()+0x49c>)
 80148c0:	e70e      	b.n	80146e0 <WS28xxMulti::WS28xxMulti()+0x178>
 80148c2:	4f51      	ldr	r7, [pc, #324]	@ (8014a08 <WS28xxMulti::WS28xxMulti()+0x4a0>)
 80148c4:	42b8      	cmp	r0, r7
 80148c6:	d857      	bhi.n	8014978 <WS28xxMulti::WS28xxMulti()+0x410>
 80148c8:	4950      	ldr	r1, [pc, #320]	@ (8014a0c <WS28xxMulti::WS28xxMulti()+0x4a4>)
 80148ca:	fbb1 f2f0 	udiv	r2, r1, r0
 80148ce:	fb03 f202 	mul.w	r2, r3, r2
 80148d2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 80148d6:	e784      	b.n	80147e2 <WS28xxMulti::WS28xxMulti()+0x27a>
 80148d8:	6121      	str	r1, [r4, #16]
 80148da:	e7ec      	b.n	80148b6 <WS28xxMulti::WS28xxMulti()+0x34e>
 80148dc:	6921      	ldr	r1, [r4, #16]
 80148de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80148e2:	bf28      	it	cs
 80148e4:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80148e8:	2004      	movs	r0, #4
 80148ea:	2701      	movs	r7, #1
 80148ec:	2906      	cmp	r1, #6
 80148ee:	6023      	str	r3, [r4, #0]
 80148f0:	60a0      	str	r0, [r4, #8]
 80148f2:	7527      	strb	r7, [r4, #20]
 80148f4:	d072      	beq.n	80149dc <WS28xxMulti::WS28xxMulti()+0x474>
 80148f6:	7d61      	ldrb	r1, [r4, #21]
 80148f8:	f894 c016 	ldrb.w	ip, [r4, #22]
 80148fc:	458c      	cmp	ip, r1
 80148fe:	d83f      	bhi.n	8014980 <WS28xxMulti::WS28xxMulti()+0x418>
 8014900:	2700      	movs	r7, #0
 8014902:	2a03      	cmp	r2, #3
 8014904:	f8a4 7015 	strh.w	r7, [r4, #21]
 8014908:	d055      	beq.n	80149b6 <WS28xxMulti::WS28xxMulti()+0x44e>
 801490a:	3a08      	subs	r2, #8
 801490c:	2a02      	cmp	r2, #2
 801490e:	d863      	bhi.n	80149d8 <WS28xxMulti::WS28xxMulti()+0x470>
 8014910:	21fc      	movs	r1, #252	@ 0xfc
 8014912:	75a1      	strb	r1, [r4, #22]
 8014914:	27c0      	movs	r7, #192	@ 0xc0
 8014916:	7567      	strb	r7, [r4, #21]
 8014918:	fb00 f303 	mul.w	r3, r0, r3
 801491c:	4f3c      	ldr	r7, [pc, #240]	@ (8014a10 <WS28xxMulti::WS28xxMulti()+0x4a8>)
 801491e:	4a3d      	ldr	r2, [pc, #244]	@ (8014a14 <WS28xxMulti::WS28xxMulti()+0x4ac>)
 8014920:	6067      	str	r7, [r4, #4]
 8014922:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8014926:	0043      	lsls	r3, r0, #1
 8014928:	fbb2 f1f3 	udiv	r1, r2, r3
 801492c:	e75c      	b.n	80147e8 <WS28xxMulti::WS28xxMulti()+0x280>
 801492e:	6122      	str	r2, [r4, #16]
 8014930:	e74f      	b.n	80147d2 <WS28xxMulti::WS28xxMulti()+0x26a>
 8014932:	2a00      	cmp	r2, #0
 8014934:	f43f af49 	beq.w	80147ca <WS28xxMulti::WS28xxMulti()+0x262>
 8014938:	2a0d      	cmp	r2, #13
 801493a:	d129      	bne.n	8014990 <WS28xxMulti::WS28xxMulti()+0x428>
 801493c:	2200      	movs	r2, #0
 801493e:	2f06      	cmp	r7, #6
 8014940:	7522      	strb	r2, [r4, #20]
 8014942:	d100      	bne.n	8014946 <WS28xxMulti::WS28xxMulti()+0x3de>
 8014944:	6122      	str	r2, [r4, #16]
 8014946:	6860      	ldr	r0, [r4, #4]
 8014948:	2800      	cmp	r0, #0
 801494a:	f43f af45 	beq.w	80147d8 <WS28xxMulti::WS28xxMulti()+0x270>
 801494e:	4f2d      	ldr	r7, [pc, #180]	@ (8014a04 <WS28xxMulti::WS28xxMulti()+0x49c>)
 8014950:	e7b8      	b.n	80148c4 <WS28xxMulti::WS28xxMulti()+0x35c>
 8014952:	2e06      	cmp	r6, #6
 8014954:	f47f aee1 	bne.w	801471a <WS28xxMulti::WS28xxMulti()+0x1b2>
 8014958:	1e50      	subs	r0, r2, #1
 801495a:	2809      	cmp	r0, #9
 801495c:	d913      	bls.n	8014986 <WS28xxMulti::WS28xxMulti()+0x41e>
 801495e:	7d67      	ldrb	r7, [r4, #21]
 8014960:	7da6      	ldrb	r6, [r4, #22]
 8014962:	2202      	movs	r2, #2
 8014964:	42be      	cmp	r6, r7
 8014966:	6122      	str	r2, [r4, #16]
 8014968:	f63f af00 	bhi.w	801476c <WS28xxMulti::WS28xxMulti()+0x204>
 801496c:	2700      	movs	r7, #0
 801496e:	f8a4 7015 	strh.w	r7, [r4, #21]
 8014972:	20f0      	movs	r0, #240	@ 0xf0
 8014974:	75a0      	strb	r0, [r4, #22]
 8014976:	e6e0      	b.n	801473a <WS28xxMulti::WS28xxMulti()+0x1d2>
 8014978:	6067      	str	r7, [r4, #4]
 801497a:	2000      	movs	r0, #0
 801497c:	e731      	b.n	80147e2 <WS28xxMulti::WS28xxMulti()+0x27a>
 801497e:	2003      	movs	r0, #3
 8014980:	2900      	cmp	r1, #0
 8014982:	d1c9      	bne.n	8014918 <WS28xxMulti::WS28xxMulti()+0x3b0>
 8014984:	e7c6      	b.n	8014914 <WS28xxMulti::WS28xxMulti()+0x3ac>
 8014986:	4f24      	ldr	r7, [pc, #144]	@ (8014a18 <WS28xxMulti::WS28xxMulti()+0x4b0>)
 8014988:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801498c:	6120      	str	r0, [r4, #16]
 801498e:	e6c4      	b.n	801471a <WS28xxMulti::WS28xxMulti()+0x1b2>
 8014990:	2101      	movs	r1, #1
 8014992:	2a0e      	cmp	r2, #14
 8014994:	7521      	strb	r1, [r4, #20]
 8014996:	d110      	bne.n	80149ba <WS28xxMulti::WS28xxMulti()+0x452>
 8014998:	2f06      	cmp	r7, #6
 801499a:	7d61      	ldrb	r1, [r4, #21]
 801499c:	f894 c016 	ldrb.w	ip, [r4, #22]
 80149a0:	60e0      	str	r0, [r4, #12]
 80149a2:	bf04      	itt	eq
 80149a4:	2702      	moveq	r7, #2
 80149a6:	6127      	streq	r7, [r4, #16]
 80149a8:	458c      	cmp	ip, r1
 80149aa:	d8e9      	bhi.n	8014980 <WS28xxMulti::WS28xxMulti()+0x418>
 80149ac:	f04f 0e00 	mov.w	lr, #0
 80149b0:	f8a4 e015 	strh.w	lr, [r4, #21]
 80149b4:	2003      	movs	r0, #3
 80149b6:	21f8      	movs	r1, #248	@ 0xf8
 80149b8:	e7ab      	b.n	8014912 <WS28xxMulti::WS28xxMulti()+0x3aa>
 80149ba:	2f06      	cmp	r7, #6
 80149bc:	d19b      	bne.n	80148f6 <WS28xxMulti::WS28xxMulti()+0x38e>
 80149be:	1e51      	subs	r1, r2, #1
 80149c0:	2909      	cmp	r1, #9
 80149c2:	d90b      	bls.n	80149dc <WS28xxMulti::WS28xxMulti()+0x474>
 80149c4:	7d61      	ldrb	r1, [r4, #21]
 80149c6:	7da0      	ldrb	r0, [r4, #22]
 80149c8:	2202      	movs	r2, #2
 80149ca:	4288      	cmp	r0, r1
 80149cc:	6122      	str	r2, [r4, #16]
 80149ce:	d8d6      	bhi.n	801497e <WS28xxMulti::WS28xxMulti()+0x416>
 80149d0:	2700      	movs	r7, #0
 80149d2:	f8a4 7015 	strh.w	r7, [r4, #21]
 80149d6:	2003      	movs	r0, #3
 80149d8:	21f0      	movs	r1, #240	@ 0xf0
 80149da:	e79a      	b.n	8014912 <WS28xxMulti::WS28xxMulti()+0x3aa>
 80149dc:	4f0e      	ldr	r7, [pc, #56]	@ (8014a18 <WS28xxMulti::WS28xxMulti()+0x4b0>)
 80149de:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80149e2:	6121      	str	r1, [r4, #16]
 80149e4:	e787      	b.n	80148f6 <WS28xxMulti::WS28xxMulti()+0x38e>
 80149e6:	bf00      	nop
 80149e8:	0801ebdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, fp, sp, lr, pc}
 80149ec:	0801eb1c 	stmdaeq	r1, {r2, r3, r4, r8, r9, fp, sp, lr, pc}
 80149f0:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 80149f4:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 80149f8:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 80149fc:	0801e998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr, pc}
 8014a00:	0801eb28 	stmdaeq	r1, {r3, r5, r8, r9, fp, sp, lr, pc}
 8014a04:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8014a08:	017d7840 	cmneq	sp, r0, asr #16
 8014a0c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8014a10:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8014a14:	000f4240 	andeq	r4, pc, r0, asr #4
 8014a18:	08020f84 	stmdaeq	r2, {r2, r7, r8, r9, sl, fp}

08014a1c <WS28xxMulti::Blackout()>:
 8014a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a20:	4a75      	ldr	r2, [pc, #468]	@ (8014bf8 <WS28xxMulti::Blackout()+0x1dc>)
 8014a22:	4976      	ldr	r1, [pc, #472]	@ (8014bfc <WS28xxMulti::Blackout()+0x1e0>)
 8014a24:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 8014c24 <WS28xxMulti::Blackout()+0x208>
 8014a28:	b087      	sub	sp, #28
 8014a2a:	4607      	mov	r7, r0
 8014a2c:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8014a30:	4873      	ldr	r0, [pc, #460]	@ (8014c00 <WS28xxMulti::Blackout()+0x1e4>)
 8014a32:	f007 fcfb 	bl	801c42c <printf>
 8014a36:	f3bf 8f5f 	dmb	sy
 8014a3a:	f898 3000 	ldrb.w	r3, [r8]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d1f9      	bne.n	8014a36 <WS28xxMulti::Blackout()+0x1a>
 8014a42:	4c70      	ldr	r4, [pc, #448]	@ (8014c04 <WS28xxMulti::Blackout()+0x1e8>)
 8014a44:	6820      	ldr	r0, [r4, #0]
 8014a46:	2800      	cmp	r0, #0
 8014a48:	f000 80c5 	beq.w	8014bd6 <WS28xxMulti::Blackout()+0x1ba>
 8014a4c:	7d06      	ldrb	r6, [r0, #20]
 8014a4e:	b34e      	cbz	r6, 8014aa4 <WS28xxMulti::Blackout()+0x88>
 8014a50:	4e6d      	ldr	r6, [pc, #436]	@ (8014c08 <WS28xxMulti::Blackout()+0x1ec>)
 8014a52:	496e      	ldr	r1, [pc, #440]	@ (8014c0c <WS28xxMulti::Blackout()+0x1f0>)
 8014a54:	f506 3480 	add.w	r4, r6, #65536	@ 0x10000
 8014a58:	e9c6 1100 	strd	r1, r1, [r6]
 8014a5c:	e9c6 1102 	strd	r1, r1, [r6, #8]
 8014a60:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8014a64:	3640      	adds	r6, #64	@ 0x40
 8014a66:	42b4      	cmp	r4, r6
 8014a68:	e946 110a 	strd	r1, r1, [r6, #-40]	@ 0x28
 8014a6c:	e946 1108 	strd	r1, r1, [r6, #-32]
 8014a70:	e946 1106 	strd	r1, r1, [r6, #-24]
 8014a74:	e946 1104 	strd	r1, r1, [r6, #-16]
 8014a78:	e946 1102 	strd	r1, r1, [r6, #-8]
 8014a7c:	d1ec      	bne.n	8014a58 <WS28xxMulti::Blackout()+0x3c>
 8014a7e:	4638      	mov	r0, r7
 8014a80:	f7fe ffce 	bl	8013a20 <WS28xxMulti::Update()>
 8014a84:	f3bf 8f5f 	dmb	sy
 8014a88:	f898 7000 	ldrb.w	r7, [r8]
 8014a8c:	2f00      	cmp	r7, #0
 8014a8e:	d1f9      	bne.n	8014a84 <WS28xxMulti::Blackout()+0x68>
 8014a90:	4a59      	ldr	r2, [pc, #356]	@ (8014bf8 <WS28xxMulti::Blackout()+0x1dc>)
 8014a92:	495a      	ldr	r1, [pc, #360]	@ (8014bfc <WS28xxMulti::Blackout()+0x1e0>)
 8014a94:	485e      	ldr	r0, [pc, #376]	@ (8014c10 <WS28xxMulti::Blackout()+0x1f4>)
 8014a96:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 8014a9a:	b007      	add	sp, #28
 8014a9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa0:	f007 bcc4 	b.w	801c42c <printf>
 8014aa4:	68c2      	ldr	r2, [r0, #12]
 8014aa6:	f1a2 010b 	sub.w	r1, r2, #11
 8014aaa:	2902      	cmp	r1, #2
 8014aac:	9104      	str	r1, [sp, #16]
 8014aae:	f200 8085 	bhi.w	8014bbc <WS28xxMulti::Blackout()+0x1a0>
 8014ab2:	f8d0 a000 	ldr.w	sl, [r0]
 8014ab6:	f10a 0501 	add.w	r5, sl, #1
 8014aba:	9505      	str	r5, [sp, #20]
 8014abc:	4634      	mov	r4, r6
 8014abe:	f04f 0bff 	mov.w	fp, #255	@ 0xff
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014ac8:	9400      	str	r4, [sp, #0]
 8014aca:	461a      	mov	r2, r3
 8014acc:	4631      	mov	r1, r6
 8014ace:	4638      	mov	r0, r7
 8014ad0:	f7ff fad2 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014ad4:	f1ba 0f00 	cmp.w	sl, #0
 8014ad8:	d05f      	beq.n	8014b9a <WS28xxMulti::Blackout()+0x17e>
 8014ada:	f10a 33ff 	add.w	r3, sl, #4294967295	@ 0xffffffff
 8014ade:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014ae2:	9400      	str	r4, [sp, #0]
 8014ae4:	f003 0903 	and.w	r9, r3, #3
 8014ae8:	2201      	movs	r2, #1
 8014aea:	23e0      	movs	r3, #224	@ 0xe0
 8014aec:	4631      	mov	r1, r6
 8014aee:	4638      	mov	r0, r7
 8014af0:	2502      	movs	r5, #2
 8014af2:	f7ff fac1 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014af6:	4555      	cmp	r5, sl
 8014af8:	d84f      	bhi.n	8014b9a <WS28xxMulti::Blackout()+0x17e>
 8014afa:	f1b9 0f00 	cmp.w	r9, #0
 8014afe:	d025      	beq.n	8014b4c <WS28xxMulti::Blackout()+0x130>
 8014b00:	f1b9 0f01 	cmp.w	r9, #1
 8014b04:	d016      	beq.n	8014b34 <WS28xxMulti::Blackout()+0x118>
 8014b06:	f1b9 0f02 	cmp.w	r9, #2
 8014b0a:	d009      	beq.n	8014b20 <WS28xxMulti::Blackout()+0x104>
 8014b0c:	462a      	mov	r2, r5
 8014b0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014b12:	9400      	str	r4, [sp, #0]
 8014b14:	23e0      	movs	r3, #224	@ 0xe0
 8014b16:	4631      	mov	r1, r6
 8014b18:	4638      	mov	r0, r7
 8014b1a:	f7ff faad 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014b1e:	2503      	movs	r5, #3
 8014b20:	462a      	mov	r2, r5
 8014b22:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014b26:	9400      	str	r4, [sp, #0]
 8014b28:	23e0      	movs	r3, #224	@ 0xe0
 8014b2a:	4631      	mov	r1, r6
 8014b2c:	4638      	mov	r0, r7
 8014b2e:	f7ff faa3 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014b32:	3501      	adds	r5, #1
 8014b34:	462a      	mov	r2, r5
 8014b36:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014b3a:	9400      	str	r4, [sp, #0]
 8014b3c:	23e0      	movs	r3, #224	@ 0xe0
 8014b3e:	4631      	mov	r1, r6
 8014b40:	4638      	mov	r0, r7
 8014b42:	3501      	adds	r5, #1
 8014b44:	f7ff fa98 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014b48:	4555      	cmp	r5, sl
 8014b4a:	d826      	bhi.n	8014b9a <WS28xxMulti::Blackout()+0x17e>
 8014b4c:	462a      	mov	r2, r5
 8014b4e:	23e0      	movs	r3, #224	@ 0xe0
 8014b50:	4631      	mov	r1, r6
 8014b52:	4638      	mov	r0, r7
 8014b54:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014b58:	9400      	str	r4, [sp, #0]
 8014b5a:	f7ff fa8d 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014b5e:	1c6a      	adds	r2, r5, #1
 8014b60:	23e0      	movs	r3, #224	@ 0xe0
 8014b62:	4631      	mov	r1, r6
 8014b64:	4638      	mov	r0, r7
 8014b66:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014b6a:	9400      	str	r4, [sp, #0]
 8014b6c:	f7ff fa84 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014b70:	1caa      	adds	r2, r5, #2
 8014b72:	23e0      	movs	r3, #224	@ 0xe0
 8014b74:	4631      	mov	r1, r6
 8014b76:	4638      	mov	r0, r7
 8014b78:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014b7c:	9400      	str	r4, [sp, #0]
 8014b7e:	f7ff fa7b 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014b82:	1cea      	adds	r2, r5, #3
 8014b84:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014b88:	23e0      	movs	r3, #224	@ 0xe0
 8014b8a:	9400      	str	r4, [sp, #0]
 8014b8c:	4631      	mov	r1, r6
 8014b8e:	4638      	mov	r0, r7
 8014b90:	3504      	adds	r5, #4
 8014b92:	f7ff fa71 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014b96:	4555      	cmp	r5, sl
 8014b98:	d9d8      	bls.n	8014b4c <WS28xxMulti::Blackout()+0x130>
 8014b9a:	9804      	ldr	r0, [sp, #16]
 8014b9c:	2802      	cmp	r0, #2
 8014b9e:	d015      	beq.n	8014bcc <WS28xxMulti::Blackout()+0x1b0>
 8014ba0:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8014ba4:	f8cd b000 	str.w	fp, [sp]
 8014ba8:	23ff      	movs	r3, #255	@ 0xff
 8014baa:	4631      	mov	r1, r6
 8014bac:	9a05      	ldr	r2, [sp, #20]
 8014bae:	4638      	mov	r0, r7
 8014bb0:	3601      	adds	r6, #1
 8014bb2:	f7ff fa61 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014bb6:	2e08      	cmp	r6, #8
 8014bb8:	d183      	bne.n	8014ac2 <WS28xxMulti::Blackout()+0xa6>
 8014bba:	e760      	b.n	8014a7e <WS28xxMulti::Blackout()+0x62>
 8014bbc:	b9a2      	cbnz	r2, 8014be8 <WS28xxMulti::Blackout()+0x1cc>
 8014bbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	4810      	ldr	r0, [pc, #64]	@ (8014c08 <WS28xxMulti::Blackout()+0x1ec>)
 8014bc6:	f007 f94d 	bl	801be64 <memset>
 8014bca:	e758      	b.n	8014a7e <WS28xxMulti::Blackout()+0x62>
 8014bcc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014bd0:	9400      	str	r4, [sp, #0]
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	e7e9      	b.n	8014baa <WS28xxMulti::Blackout()+0x18e>
 8014bd6:	480f      	ldr	r0, [pc, #60]	@ (8014c14 <WS28xxMulti::Blackout()+0x1f8>)
 8014bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8014c18 <WS28xxMulti::Blackout()+0x1fc>)
 8014bda:	4a10      	ldr	r2, [pc, #64]	@ (8014c1c <WS28xxMulti::Blackout()+0x200>)
 8014bdc:	f240 110d 	movw	r1, #269	@ 0x10d
 8014be0:	f007 fd04 	bl	801c5ec <__assert_func>
 8014be4:	6820      	ldr	r0, [r4, #0]
 8014be6:	e731      	b.n	8014a4c <WS28xxMulti::Blackout()+0x30>
 8014be8:	4b0d      	ldr	r3, [pc, #52]	@ (8014c20 <WS28xxMulti::Blackout()+0x204>)
 8014bea:	4a03      	ldr	r2, [pc, #12]	@ (8014bf8 <WS28xxMulti::Blackout()+0x1dc>)
 8014bec:	4803      	ldr	r0, [pc, #12]	@ (8014bfc <WS28xxMulti::Blackout()+0x1e0>)
 8014bee:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8014bf2:	f007 fcfb 	bl	801c5ec <__assert_func>
 8014bf6:	e7e2      	b.n	8014bbe <WS28xxMulti::Blackout()+0x1a2>
 8014bf8:	0801ec04 	stmdaeq	r1, {r2, sl, fp, sp, lr, pc}
 8014bfc:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 8014c00:	0801e7b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 8014c04:	2000007c 	andcs	r0, r0, ip, ror r0
 8014c08:	20020000 	andcs	r0, r2, r0
 8014c0c:	3fc03fc0 	svccc	0x00c03fc0
 8014c10:	0801e7fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 8014c14:	0801e998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr, pc}
 8014c18:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8014c1c:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 8014c20:	0801ec10 	stmdaeq	r1, {r4, sl, fp, sp, lr, pc}
 8014c24:	2000dfc8 	andcs	sp, r0, r8, asr #31

08014c28 <WS28xxMulti::FullOn()>:
 8014c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c2c:	4a75      	ldr	r2, [pc, #468]	@ (8014e04 <WS28xxMulti::FullOn()+0x1dc>)
 8014c2e:	4976      	ldr	r1, [pc, #472]	@ (8014e08 <WS28xxMulti::FullOn()+0x1e0>)
 8014c30:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 8014e2c <WS28xxMulti::FullOn()+0x204>
 8014c34:	b087      	sub	sp, #28
 8014c36:	4607      	mov	r7, r0
 8014c38:	f240 23e1 	movw	r3, #737	@ 0x2e1
 8014c3c:	4873      	ldr	r0, [pc, #460]	@ (8014e0c <WS28xxMulti::FullOn()+0x1e4>)
 8014c3e:	f007 fbf5 	bl	801c42c <printf>
 8014c42:	f3bf 8f5f 	dmb	sy
 8014c46:	f898 3000 	ldrb.w	r3, [r8]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1f9      	bne.n	8014c42 <WS28xxMulti::FullOn()+0x1a>
 8014c4e:	4c70      	ldr	r4, [pc, #448]	@ (8014e10 <WS28xxMulti::FullOn()+0x1e8>)
 8014c50:	6820      	ldr	r0, [r4, #0]
 8014c52:	2800      	cmp	r0, #0
 8014c54:	f000 80c5 	beq.w	8014de2 <WS28xxMulti::FullOn()+0x1ba>
 8014c58:	7d06      	ldrb	r6, [r0, #20]
 8014c5a:	b1c6      	cbz	r6, 8014c8e <WS28xxMulti::FullOn()+0x66>
 8014c5c:	486d      	ldr	r0, [pc, #436]	@ (8014e14 <WS28xxMulti::FullOn()+0x1ec>)
 8014c5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014c62:	2100      	movs	r1, #0
 8014c64:	f007 f8fe 	bl	801be64 <memset>
 8014c68:	4638      	mov	r0, r7
 8014c6a:	f7fe fed9 	bl	8013a20 <WS28xxMulti::Update()>
 8014c6e:	f3bf 8f5f 	dmb	sy
 8014c72:	f898 7000 	ldrb.w	r7, [r8]
 8014c76:	2f00      	cmp	r7, #0
 8014c78:	d1f9      	bne.n	8014c6e <WS28xxMulti::FullOn()+0x46>
 8014c7a:	4a62      	ldr	r2, [pc, #392]	@ (8014e04 <WS28xxMulti::FullOn()+0x1dc>)
 8014c7c:	4962      	ldr	r1, [pc, #392]	@ (8014e08 <WS28xxMulti::FullOn()+0x1e0>)
 8014c7e:	4866      	ldr	r0, [pc, #408]	@ (8014e18 <WS28xxMulti::FullOn()+0x1f0>)
 8014c80:	f240 3315 	movw	r3, #789	@ 0x315
 8014c84:	b007      	add	sp, #28
 8014c86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c8a:	f007 bbcf 	b.w	801c42c <printf>
 8014c8e:	68c2      	ldr	r2, [r0, #12]
 8014c90:	f1a2 010b 	sub.w	r1, r2, #11
 8014c94:	2902      	cmp	r1, #2
 8014c96:	9104      	str	r1, [sp, #16]
 8014c98:	f200 8084 	bhi.w	8014da4 <WS28xxMulti::FullOn()+0x17c>
 8014c9c:	f8d0 a000 	ldr.w	sl, [r0]
 8014ca0:	f10a 0001 	add.w	r0, sl, #1
 8014ca4:	9005      	str	r0, [sp, #20]
 8014ca6:	46b3      	mov	fp, r6
 8014ca8:	24ff      	movs	r4, #255	@ 0xff
 8014caa:	2300      	movs	r3, #0
 8014cac:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8014cb0:	f8cd b000 	str.w	fp, [sp]
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	4631      	mov	r1, r6
 8014cb8:	4638      	mov	r0, r7
 8014cba:	f7ff f9dd 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014cbe:	f1ba 0f00 	cmp.w	sl, #0
 8014cc2:	d05f      	beq.n	8014d84 <WS28xxMulti::FullOn()+0x15c>
 8014cc4:	f10a 32ff 	add.w	r2, sl, #4294967295	@ 0xffffffff
 8014cc8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014ccc:	9400      	str	r4, [sp, #0]
 8014cce:	f002 0903 	and.w	r9, r2, #3
 8014cd2:	23e0      	movs	r3, #224	@ 0xe0
 8014cd4:	2201      	movs	r2, #1
 8014cd6:	4631      	mov	r1, r6
 8014cd8:	4638      	mov	r0, r7
 8014cda:	2502      	movs	r5, #2
 8014cdc:	f7ff f9cc 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014ce0:	4555      	cmp	r5, sl
 8014ce2:	d84f      	bhi.n	8014d84 <WS28xxMulti::FullOn()+0x15c>
 8014ce4:	f1b9 0f00 	cmp.w	r9, #0
 8014ce8:	d025      	beq.n	8014d36 <WS28xxMulti::FullOn()+0x10e>
 8014cea:	f1b9 0f01 	cmp.w	r9, #1
 8014cee:	d016      	beq.n	8014d1e <WS28xxMulti::FullOn()+0xf6>
 8014cf0:	f1b9 0f02 	cmp.w	r9, #2
 8014cf4:	d009      	beq.n	8014d0a <WS28xxMulti::FullOn()+0xe2>
 8014cf6:	462a      	mov	r2, r5
 8014cf8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014cfc:	9400      	str	r4, [sp, #0]
 8014cfe:	23e0      	movs	r3, #224	@ 0xe0
 8014d00:	4631      	mov	r1, r6
 8014d02:	4638      	mov	r0, r7
 8014d04:	f7ff f9b8 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d08:	2503      	movs	r5, #3
 8014d0a:	462a      	mov	r2, r5
 8014d0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014d10:	9400      	str	r4, [sp, #0]
 8014d12:	23e0      	movs	r3, #224	@ 0xe0
 8014d14:	4631      	mov	r1, r6
 8014d16:	4638      	mov	r0, r7
 8014d18:	f7ff f9ae 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d1c:	3501      	adds	r5, #1
 8014d1e:	462a      	mov	r2, r5
 8014d20:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014d24:	9400      	str	r4, [sp, #0]
 8014d26:	23e0      	movs	r3, #224	@ 0xe0
 8014d28:	4631      	mov	r1, r6
 8014d2a:	4638      	mov	r0, r7
 8014d2c:	3501      	adds	r5, #1
 8014d2e:	f7ff f9a3 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d32:	4555      	cmp	r5, sl
 8014d34:	d826      	bhi.n	8014d84 <WS28xxMulti::FullOn()+0x15c>
 8014d36:	462a      	mov	r2, r5
 8014d38:	23e0      	movs	r3, #224	@ 0xe0
 8014d3a:	4631      	mov	r1, r6
 8014d3c:	4638      	mov	r0, r7
 8014d3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014d42:	9400      	str	r4, [sp, #0]
 8014d44:	f7ff f998 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d48:	1c6a      	adds	r2, r5, #1
 8014d4a:	23e0      	movs	r3, #224	@ 0xe0
 8014d4c:	4631      	mov	r1, r6
 8014d4e:	4638      	mov	r0, r7
 8014d50:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014d54:	9400      	str	r4, [sp, #0]
 8014d56:	f7ff f98f 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d5a:	1caa      	adds	r2, r5, #2
 8014d5c:	23e0      	movs	r3, #224	@ 0xe0
 8014d5e:	4631      	mov	r1, r6
 8014d60:	4638      	mov	r0, r7
 8014d62:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014d66:	9400      	str	r4, [sp, #0]
 8014d68:	f7ff f986 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d6c:	1cea      	adds	r2, r5, #3
 8014d6e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014d72:	23e0      	movs	r3, #224	@ 0xe0
 8014d74:	9400      	str	r4, [sp, #0]
 8014d76:	4631      	mov	r1, r6
 8014d78:	4638      	mov	r0, r7
 8014d7a:	3504      	adds	r5, #4
 8014d7c:	f7ff f97c 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d80:	4555      	cmp	r5, sl
 8014d82:	d9d8      	bls.n	8014d36 <WS28xxMulti::FullOn()+0x10e>
 8014d84:	9904      	ldr	r1, [sp, #16]
 8014d86:	2902      	cmp	r1, #2
 8014d88:	d025      	beq.n	8014dd6 <WS28xxMulti::FullOn()+0x1ae>
 8014d8a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8014d8e:	9400      	str	r4, [sp, #0]
 8014d90:	23ff      	movs	r3, #255	@ 0xff
 8014d92:	4631      	mov	r1, r6
 8014d94:	9a05      	ldr	r2, [sp, #20]
 8014d96:	4638      	mov	r0, r7
 8014d98:	3601      	adds	r6, #1
 8014d9a:	f7ff f96d 	bl	8014078 <WS28xxMulti::SetPixel4Bytes(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>
 8014d9e:	2e08      	cmp	r6, #8
 8014da0:	d183      	bne.n	8014caa <WS28xxMulti::FullOn()+0x82>
 8014da2:	e761      	b.n	8014c68 <WS28xxMulti::FullOn()+0x40>
 8014da4:	bb32      	cbnz	r2, 8014df4 <WS28xxMulti::FullOn()+0x1cc>
 8014da6:	4d1b      	ldr	r5, [pc, #108]	@ (8014e14 <WS28xxMulti::FullOn()+0x1ec>)
 8014da8:	23ff      	movs	r3, #255	@ 0xff
 8014daa:	f505 3480 	add.w	r4, r5, #65536	@ 0x10000
 8014dae:	e9c5 3300 	strd	r3, r3, [r5]
 8014db2:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8014db6:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014dba:	3540      	adds	r5, #64	@ 0x40
 8014dbc:	42ac      	cmp	r4, r5
 8014dbe:	e945 330a 	strd	r3, r3, [r5, #-40]	@ 0x28
 8014dc2:	e945 3308 	strd	r3, r3, [r5, #-32]
 8014dc6:	e945 3306 	strd	r3, r3, [r5, #-24]
 8014dca:	e945 3304 	strd	r3, r3, [r5, #-16]
 8014dce:	e945 3302 	strd	r3, r3, [r5, #-8]
 8014dd2:	d1ec      	bne.n	8014dae <WS28xxMulti::FullOn()+0x186>
 8014dd4:	e748      	b.n	8014c68 <WS28xxMulti::FullOn()+0x40>
 8014dd6:	e9cd bb01 	strd	fp, fp, [sp, #4]
 8014dda:	f8cd b000 	str.w	fp, [sp]
 8014dde:	2300      	movs	r3, #0
 8014de0:	e7d7      	b.n	8014d92 <WS28xxMulti::FullOn()+0x16a>
 8014de2:	480e      	ldr	r0, [pc, #56]	@ (8014e1c <WS28xxMulti::FullOn()+0x1f4>)
 8014de4:	4b0e      	ldr	r3, [pc, #56]	@ (8014e20 <WS28xxMulti::FullOn()+0x1f8>)
 8014de6:	4a0f      	ldr	r2, [pc, #60]	@ (8014e24 <WS28xxMulti::FullOn()+0x1fc>)
 8014de8:	f240 110d 	movw	r1, #269	@ 0x10d
 8014dec:	f007 fbfe 	bl	801c5ec <__assert_func>
 8014df0:	6820      	ldr	r0, [r4, #0]
 8014df2:	e731      	b.n	8014c58 <WS28xxMulti::FullOn()+0x30>
 8014df4:	4b0c      	ldr	r3, [pc, #48]	@ (8014e28 <WS28xxMulti::FullOn()+0x200>)
 8014df6:	4a03      	ldr	r2, [pc, #12]	@ (8014e04 <WS28xxMulti::FullOn()+0x1dc>)
 8014df8:	4803      	ldr	r0, [pc, #12]	@ (8014e08 <WS28xxMulti::FullOn()+0x1e0>)
 8014dfa:	f240 3103 	movw	r1, #771	@ 0x303
 8014dfe:	f007 fbf5 	bl	801c5ec <__assert_func>
 8014e02:	e7d0      	b.n	8014da6 <WS28xxMulti::FullOn()+0x17e>
 8014e04:	0801ec2c 	stmdaeq	r1, {r2, r3, r5, sl, fp, sp, lr, pc}
 8014e08:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 8014e0c:	0801e7b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 8014e10:	2000007c 	andcs	r0, r0, ip, ror r0
 8014e14:	20020000 	andcs	r0, r2, r0
 8014e18:	0801e7fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 8014e1c:	0801e998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr, pc}
 8014e20:	0801e5bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 8014e24:	0801e5d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr, pc}
 8014e28:	0801ec10 	stmdaeq	r1, {r4, sl, fp, sp, lr, pc}
 8014e2c:	2000dfc8 	andcs	sp, r0, r8, asr #31

08014e30 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8014e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e34:	290f      	cmp	r1, #15
 8014e36:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8014e3a:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8014e3e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8014e42:	460c      	mov	r4, r1
 8014e44:	4682      	mov	sl, r0
 8014e46:	4691      	mov	r9, r2
 8014e48:	461d      	mov	r5, r3
 8014e4a:	f200 8086 	bhi.w	8014f5a <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x12a>
 8014e4e:	f8da 3000 	ldr.w	r3, [sl]
 8014e52:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 8014e56:	f080 808d 	bcs.w	8014f74 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x144>
 8014e5a:	4a4a      	ldr	r2, [pc, #296]	@ (8014f84 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x154>)
 8014e5c:	3406      	adds	r4, #6
 8014e5e:	eb02 1189 	add.w	r1, r2, r9, lsl #6
 8014e62:	b2e0      	uxtb	r0, r4
 8014e64:	f101 7488 	add.w	r4, r1, #17825792	@ 0x1100000
 8014e68:	3430      	adds	r4, #48	@ 0x30
 8014e6a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8014e6e:	f10c 0080 	add.w	r0, ip, #128	@ 0x80
 8014e72:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8014e76:	ebaa 098c 	sub.w	r9, sl, ip, lsl #2
 8014e7a:	4663      	mov	r3, ip
 8014e7c:	ea5f 6049 	movs.w	r0, r9, lsl #25
 8014e80:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8014e84:	f04f 0400 	mov.w	r4, #0
 8014e88:	f04f 0380 	mov.w	r3, #128	@ 0x80
 8014e8c:	f04f 0e01 	mov.w	lr, #1
 8014e90:	d53a      	bpl.n	8014f08 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd8>
 8014e92:	f5a2 6cc0 	sub.w	ip, r2, #1536	@ 0x600
 8014e96:	0631      	lsls	r1, r6, #24
 8014e98:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8014e9c:	bf4c      	ite	mi
 8014e9e:	f8cc 4000 	strmi.w	r4, [ip]
 8014ea2:	f8cc e000 	strpl.w	lr, [ip]
 8014ea6:	f5a2 7300 	sub.w	r3, r2, #512	@ 0x200
 8014eaa:	0628      	lsls	r0, r5, #24
 8014eac:	bf4c      	ite	mi
 8014eae:	600c      	strmi	r4, [r1, #0]
 8014eb0:	f8c1 e000 	strpl.w	lr, [r1]
 8014eb4:	0639      	lsls	r1, r7, #24
 8014eb6:	bf4c      	ite	mi
 8014eb8:	601c      	strmi	r4, [r3, #0]
 8014eba:	f8c3 e000 	strpl.w	lr, [r3]
 8014ebe:	f018 0f80 	tst.w	r8, #128	@ 0x80
 8014ec2:	bf14      	ite	ne
 8014ec4:	6014      	strne	r4, [r2, #0]
 8014ec6:	f8c2 e000 	streq.w	lr, [r2]
 8014eca:	2340      	movs	r3, #64	@ 0x40
 8014ecc:	3240      	adds	r2, #64	@ 0x40
 8014ece:	e019      	b.n	8014f04 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xd4>
 8014ed0:	f8c2 e000 	str.w	lr, [r2]
 8014ed4:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8014ed8:	4229      	tst	r1, r5
 8014eda:	f5a0 7900 	sub.w	r9, r0, #512	@ 0x200
 8014ede:	bf14      	ite	ne
 8014ee0:	601c      	strne	r4, [r3, #0]
 8014ee2:	f8c3 e000 	streq.w	lr, [r3]
 8014ee6:	4239      	tst	r1, r7
 8014ee8:	bf14      	ite	ne
 8014eea:	f8c9 4000 	strne.w	r4, [r9]
 8014eee:	f8c9 e000 	streq.w	lr, [r9]
 8014ef2:	ea11 0f08 	tst.w	r1, r8
 8014ef6:	bf14      	ite	ne
 8014ef8:	6004      	strne	r4, [r0, #0]
 8014efa:	f8c0 e000 	streq.w	lr, [r0]
 8014efe:	f100 0240 	add.w	r2, r0, #64	@ 0x40
 8014f02:	084b      	lsrs	r3, r1, #1
 8014f04:	4552      	cmp	r2, sl
 8014f06:	d026      	beq.n	8014f56 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x126>
 8014f08:	f5a2 60c0 	sub.w	r0, r2, #1536	@ 0x600
 8014f0c:	4233      	tst	r3, r6
 8014f0e:	f5a2 6980 	sub.w	r9, r2, #1024	@ 0x400
 8014f12:	bf0c      	ite	eq
 8014f14:	f8c0 e000 	streq.w	lr, [r0]
 8014f18:	6004      	strne	r4, [r0, #0]
 8014f1a:	f5a2 7c00 	sub.w	ip, r2, #512	@ 0x200
 8014f1e:	422b      	tst	r3, r5
 8014f20:	bf0c      	ite	eq
 8014f22:	f8c9 e000 	streq.w	lr, [r9]
 8014f26:	f8c9 4000 	strne.w	r4, [r9]
 8014f2a:	423b      	tst	r3, r7
 8014f2c:	bf0c      	ite	eq
 8014f2e:	f8cc e000 	streq.w	lr, [ip]
 8014f32:	f8cc 4000 	strne.w	r4, [ip]
 8014f36:	ea13 0f08 	tst.w	r3, r8
 8014f3a:	bf0c      	ite	eq
 8014f3c:	f8c2 e000 	streq.w	lr, [r2]
 8014f40:	6014      	strne	r4, [r2, #0]
 8014f42:	0859      	lsrs	r1, r3, #1
 8014f44:	ea16 0353 	ands.w	r3, r6, r3, lsr #1
 8014f48:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8014f4c:	f5a2 62b8 	sub.w	r2, r2, #1472	@ 0x5c0
 8014f50:	d0be      	beq.n	8014ed0 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa0>
 8014f52:	6014      	str	r4, [r2, #0]
 8014f54:	e7be      	b.n	8014ed4 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
 8014f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8014f88 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>)
 8014f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8014f8c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 8014f5e:	480c      	ldr	r0, [pc, #48]	@ (8014f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 8014f60:	f240 3187 	movw	r1, #903	@ 0x387
 8014f64:	f007 fb42 	bl	801c5ec <__assert_func>
 8014f68:	f8da 3000 	ldr.w	r3, [sl]
 8014f6c:	ebb9 0fd3 	cmp.w	r9, r3, lsr #3
 8014f70:	f4ff af73 	bcc.w	8014e5a <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 8014f74:	4b07      	ldr	r3, [pc, #28]	@ (8014f94 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>)
 8014f76:	4a05      	ldr	r2, [pc, #20]	@ (8014f8c <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>)
 8014f78:	4805      	ldr	r0, [pc, #20]	@ (8014f90 <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x160>)
 8014f7a:	f44f 7162 	mov.w	r1, #904	@ 0x388
 8014f7e:	f007 fb35 	bl	801c5ec <__assert_func>
 8014f82:	e76a      	b.n	8014e5a <WS28xxMulti::SetColourRTZ(unsigned long, unsigned long, unsigned char, unsigned char, unsigned char, unsigned char)+0x2a>
 8014f84:	20020000 	andcs	r0, r2, r0
 8014f88:	0801ea3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, sp, lr, pc}
 8014f8c:	0801ea2c 	stmdaeq	r1, {r2, r3, r5, r9, fp, sp, lr, pc}
 8014f90:	0801e914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr, pc}
 8014f94:	0801ea5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, fp, sp, lr, pc}

08014f98 <memcpy.isra.0>:
 8014f98:	440a      	add	r2, r1
 8014f9a:	4291      	cmp	r1, r2
 8014f9c:	d100      	bne.n	8014fa0 <memcpy.isra.0+0x8>
 8014f9e:	4770      	bx	lr
 8014fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fa4:	f800 3b01 	strb.w	r3, [r0], #1
 8014fa8:	e7f7      	b.n	8014f9a <memcpy.isra.0+0x2>

08014faa <strlen>:
 8014faa:	4603      	mov	r3, r0
 8014fac:	461a      	mov	r2, r3
 8014fae:	3301      	adds	r3, #1
 8014fb0:	7811      	ldrb	r1, [r2, #0]
 8014fb2:	2900      	cmp	r1, #0
 8014fb4:	d1fa      	bne.n	8014fac <strlen+0x2>
 8014fb6:	1a10      	subs	r0, r2, r0
 8014fb8:	4770      	bx	lr
	...

08014fbc <mdns::Domain::AddDotLocal()>:
 8014fbc:	b510      	push	{r4, lr}
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	f8b0 0100 	ldrh.w	r0, [r0, #256]	@ 0x100
 8014fc4:	4905      	ldr	r1, [pc, #20]	@ (8014fdc <mdns::Domain::AddDotLocal()+0x20>)
 8014fc6:	2207      	movs	r2, #7
 8014fc8:	4420      	add	r0, r4
 8014fca:	f7ff ffe5 	bl	8014f98 <memcpy.isra.0>
 8014fce:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 8014fd2:	3307      	adds	r3, #7
 8014fd4:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8014fd8:	bd10      	pop	{r4, pc}
 8014fda:	bf00      	nop
 8014fdc:	080211aa 	stmdaeq	r2, {r1, r3, r5, r7, r8, ip}

08014fe0 <create_host_domain(mdns::Domain&)>:
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	b570      	push	{r4, r5, r6, lr}
 8014fe4:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 8014fe8:	4b0c      	ldr	r3, [pc, #48]	@ (801501c <create_host_domain(mdns::Domain&)+0x3c>)
 8014fea:	681e      	ldr	r6, [r3, #0]
 8014fec:	3616      	adds	r6, #22
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4630      	mov	r0, r6
 8014ff2:	f7ff ffda 	bl	8014faa <strlen>
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	7020      	strb	r0, [r4, #0]
 8014ffa:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8014ffe:	4602      	mov	r2, r0
 8015000:	4605      	mov	r5, r0
 8015002:	4631      	mov	r1, r6
 8015004:	18e0      	adds	r0, r4, r3
 8015006:	f7ff ffc7 	bl	8014f98 <memcpy.isra.0>
 801500a:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 801500e:	441d      	add	r5, r3
 8015010:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
 8015014:	4620      	mov	r0, r4
 8015016:	f7ff ffd1 	bl	8014fbc <mdns::Domain::AddDotLocal()>
 801501a:	bd70      	pop	{r4, r5, r6, pc}
 801501c:	2000e210 	andcs	lr, r0, r0, lsl r2

08015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>:
 8015020:	2300      	movs	r3, #0
 8015022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015026:	4604      	mov	r4, r0
 8015028:	460e      	mov	r6, r1
 801502a:	f8a0 3100 	strh.w	r3, [r0, #256]	@ 0x100
 801502e:	b1aa      	cbz	r2, 801505c <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x3c>
 8015030:	680f      	ldr	r7, [r1, #0]
 8015032:	f100 0801 	add.w	r8, r0, #1
 8015036:	b3b7      	cbz	r7, 80150a6 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x86>
 8015038:	4638      	mov	r0, r7
 801503a:	f7ff ffb6 	bl	8014faa <strlen>
 801503e:	2301      	movs	r3, #1
 8015040:	4605      	mov	r5, r0
 8015042:	7020      	strb	r0, [r4, #0]
 8015044:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8015048:	4602      	mov	r2, r0
 801504a:	4639      	mov	r1, r7
 801504c:	4640      	mov	r0, r8
 801504e:	f7ff ffa3 	bl	8014f98 <memcpy.isra.0>
 8015052:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 8015056:	441d      	add	r5, r3
 8015058:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
 801505c:	4b15      	ldr	r3, [pc, #84]	@ (80150b4 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x94>)
 801505e:	68f6      	ldr	r6, [r6, #12]
 8015060:	f8b4 0100 	ldrh.w	r0, [r4, #256]	@ 0x100
 8015064:	0131      	lsls	r1, r6, #4
 8015066:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 801506a:	5859      	ldr	r1, [r3, r1]
 801506c:	88b5      	ldrh	r5, [r6, #4]
 801506e:	4420      	add	r0, r4
 8015070:	462a      	mov	r2, r5
 8015072:	f7ff ff91 	bl	8014f98 <memcpy.isra.0>
 8015076:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 801507a:	18e8      	adds	r0, r5, r3
 801507c:	68b3      	ldr	r3, [r6, #8]
 801507e:	b280      	uxth	r0, r0
 8015080:	f8a4 0100 	strh.w	r0, [r4, #256]	@ 0x100
 8015084:	2205      	movs	r2, #5
 8015086:	4420      	add	r0, r4
 8015088:	b98b      	cbnz	r3, 80150ae <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x8e>
 801508a:	490b      	ldr	r1, [pc, #44]	@ (80150b8 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x98>)
 801508c:	f7ff ff84 	bl	8014f98 <memcpy.isra.0>
 8015090:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 8015094:	3305      	adds	r3, #5
 8015096:	b29b      	uxth	r3, r3
 8015098:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 801509c:	4620      	mov	r0, r4
 801509e:	f7ff ff8d 	bl	8014fbc <mdns::Domain::AddDotLocal()>
 80150a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a6:	4b05      	ldr	r3, [pc, #20]	@ (80150bc <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x9c>)
 80150a8:	681f      	ldr	r7, [r3, #0]
 80150aa:	3716      	adds	r7, #22
 80150ac:	e7c4      	b.n	8015038 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x18>
 80150ae:	4904      	ldr	r1, [pc, #16]	@ (80150c0 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0xa0>)
 80150b0:	e7ec      	b.n	801508c <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)+0x6c>
 80150b2:	bf00      	nop
 80150b4:	080210d0 	stmdaeq	r2, {r4, r6, r7, ip}
 80150b8:	080211a5 	stmdaeq	r2, {r0, r2, r5, r7, r8, ip}
 80150bc:	2000e210 	andcs	lr, r0, r0, lsl r2
 80150c0:	080211a0 	stmdaeq	r2, {r5, r7, r8, ip}

080150c4 <mdns::Domain::Print(bool)>:
 80150c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c8:	4605      	mov	r5, r0
 80150ca:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8015108 <mdns::Domain::Print(bool)+0x44>
 80150ce:	2020      	movs	r0, #32
 80150d0:	460e      	mov	r6, r1
 80150d2:	f007 f9fb 	bl	801c4cc <putchar>
 80150d6:	462a      	mov	r2, r5
 80150d8:	7817      	ldrb	r7, [r2, #0]
 80150da:	b92f      	cbnz	r7, 80150e8 <mdns::Domain::Print(bool)+0x24>
 80150dc:	b18e      	cbz	r6, 8015102 <mdns::Domain::Print(bool)+0x3e>
 80150de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150e2:	200a      	movs	r0, #10
 80150e4:	f007 b9f2 	b.w	801c4cc <putchar>
 80150e8:	f8b5 3100 	ldrh.w	r3, [r5, #256]	@ 0x100
 80150ec:	442b      	add	r3, r5
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d2f4      	bcs.n	80150dc <mdns::Domain::Print(bool)+0x18>
 80150f2:	1c54      	adds	r4, r2, #1
 80150f4:	4622      	mov	r2, r4
 80150f6:	4639      	mov	r1, r7
 80150f8:	4640      	mov	r0, r8
 80150fa:	f007 f997 	bl	801c42c <printf>
 80150fe:	19e2      	adds	r2, r4, r7
 8015100:	e7ea      	b.n	80150d8 <mdns::Domain::Print(bool)+0x14>
 8015102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015106:	bf00      	nop
 8015108:	0801dac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp, ip, lr, pc}

0801510c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>:
 801510c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	@ 0x100
 8015110:	f8b1 3100 	ldrh.w	r3, [r1, #256]	@ 0x100
 8015114:	4293      	cmp	r3, r2
 8015116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801511a:	d127      	bne.n	801516c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 801511c:	18c2      	adds	r2, r0, r3
 801511e:	7803      	ldrb	r3, [r0, #0]
 8015120:	b11b      	cbz	r3, 801512a <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x1e>
 8015122:	780c      	ldrb	r4, [r1, #0]
 8015124:	b10c      	cbz	r4, 801512a <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x1e>
 8015126:	4290      	cmp	r0, r2
 8015128:	d301      	bcc.n	801512e <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x22>
 801512a:	2001      	movs	r0, #1
 801512c:	e01f      	b.n	801516e <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x62>
 801512e:	42a3      	cmp	r3, r4
 8015130:	d11c      	bne.n	801516c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 8015132:	4684      	mov	ip, r0
 8015134:	460f      	mov	r7, r1
 8015136:	461e      	mov	r6, r3
 8015138:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 801513c:	f1a4 0541 	sub.w	r5, r4, #65	@ 0x41
 8015140:	2d19      	cmp	r5, #25
 8015142:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8015146:	f1a5 0841 	sub.w	r8, r5, #65	@ 0x41
 801514a:	46a6      	mov	lr, r4
 801514c:	bf98      	it	ls
 801514e:	f104 0e20 	addls.w	lr, r4, #32
 8015152:	f1b8 0f19 	cmp.w	r8, #25
 8015156:	bf98      	it	ls
 8015158:	3520      	addls	r5, #32
 801515a:	4575      	cmp	r5, lr
 801515c:	d106      	bne.n	801516c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x60>
 801515e:	b10c      	cbz	r4, 8015164 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x58>
 8015160:	3e01      	subs	r6, #1
 8015162:	d1e9      	bne.n	8015138 <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x2c>
 8015164:	3301      	adds	r3, #1
 8015166:	4418      	add	r0, r3
 8015168:	4419      	add	r1, r3
 801516a:	e7d8      	b.n	801511e <mdns::operator==(mdns::Domain const&, mdns::Domain const&)+0x12>
 801516c:	2000      	movs	r0, #0
 801516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015172 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)>:
 8015172:	f892 c000 	ldrb.w	ip, [r2]
 8015176:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801517a:	ea6f 050c 	mvn.w	r5, ip
 801517e:	4606      	mov	r6, r0
 8015180:	440d      	add	r5, r1
 8015182:	42b5      	cmp	r5, r6
 8015184:	4628      	mov	r0, r5
 8015186:	d201      	bcs.n	801518c <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x1a>
 8015188:	2000      	movs	r0, #0
 801518a:	e040      	b.n	801520e <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x9c>
 801518c:	7803      	ldrb	r3, [r0, #0]
 801518e:	4563      	cmp	r3, ip
 8015190:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8015194:	d1f5      	bne.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 8015196:	78ac      	ldrb	r4, [r5, #2]
 8015198:	7853      	ldrb	r3, [r2, #1]
 801519a:	429c      	cmp	r4, r3
 801519c:	d1f1      	bne.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801519e:	4604      	mov	r4, r0
 80151a0:	4617      	mov	r7, r2
 80151a2:	e018      	b.n	80151d6 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x64>
 80151a4:	4573      	cmp	r3, lr
 80151a6:	db27      	blt.n	80151f8 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x86>
 80151a8:	e7eb      	b.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80151aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80151ac:	d913      	bls.n	80151d6 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x64>
 80151ae:	2bbf      	cmp	r3, #191	@ 0xbf
 80151b0:	d9e7      	bls.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80151b2:	f104 0e01 	add.w	lr, r4, #1
 80151b6:	4571      	cmp	r1, lr
 80151b8:	d9e3      	bls.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80151ba:	f894 e001 	ldrb.w	lr, [r4, #1]
 80151be:	021b      	lsls	r3, r3, #8
 80151c0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80151c4:	4473      	add	r3, lr
 80151c6:	eb06 0e03 	add.w	lr, r6, r3
 80151ca:	4574      	cmp	r4, lr
 80151cc:	d3d9      	bcc.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80151ce:	5cf3      	ldrb	r3, [r6, r3]
 80151d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80151d2:	d8d6      	bhi.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80151d4:	4674      	mov	r4, lr
 80151d6:	783b      	ldrb	r3, [r7, #0]
 80151d8:	eb04 0e03 	add.w	lr, r4, r3
 80151dc:	4571      	cmp	r1, lr
 80151de:	d9d0      	bls.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 80151e0:	f04f 0e00 	mov.w	lr, #0
 80151e4:	f814 900e 	ldrb.w	r9, [r4, lr]
 80151e8:	f817 800e 	ldrb.w	r8, [r7, lr]
 80151ec:	45c1      	cmp	r9, r8
 80151ee:	d1d9      	bne.n	80151a4 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x32>
 80151f0:	f10e 0e01 	add.w	lr, lr, #1
 80151f4:	4573      	cmp	r3, lr
 80151f6:	daf5      	bge.n	80151e4 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x72>
 80151f8:	3301      	adds	r3, #1
 80151fa:	441f      	add	r7, r3
 80151fc:	441c      	add	r4, r3
 80151fe:	f897 e000 	ldrb.w	lr, [r7]
 8015202:	7823      	ldrb	r3, [r4, #0]
 8015204:	f1be 0f00 	cmp.w	lr, #0
 8015208:	d1cf      	bne.n	80151aa <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x38>
 801520a:	2b00      	cmp	r3, #0
 801520c:	d1b9      	bne.n	8015182 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)+0x10>
 801520e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>:
 8015214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015216:	460a      	mov	r2, r1
 8015218:	4606      	mov	r6, r0
 801521a:	4605      	mov	r5, r0
 801521c:	7814      	ldrb	r4, [r2, #0]
 801521e:	b91c      	cbnz	r4, 8015228 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x14>
 8015220:	4628      	mov	r0, r5
 8015222:	f800 4b01 	strb.w	r4, [r0], #1
 8015226:	e00e      	b.n	8015246 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x32>
 8015228:	4810      	ldr	r0, [pc, #64]	@ (801526c <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x58>)
 801522a:	4631      	mov	r1, r6
 801522c:	f7ff ffa1 	bl	8015172 <find_compression_pointer(unsigned char const*, unsigned char const*, unsigned char const*)>
 8015230:	b150      	cbz	r0, 8015248 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x34>
 8015232:	4b0e      	ldr	r3, [pc, #56]	@ (801526c <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x58>)
 8015234:	1ac3      	subs	r3, r0, r3
 8015236:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801523a:	4628      	mov	r0, r5
 801523c:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 8015240:	f800 2b02 	strb.w	r2, [r0], #2
 8015244:	706b      	strb	r3, [r5, #1]
 8015246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015248:	462b      	mov	r3, r5
 801524a:	3201      	adds	r2, #1
 801524c:	f803 4b01 	strb.w	r4, [r3], #1
 8015250:	4617      	mov	r7, r2
 8015252:	4618      	mov	r0, r3
 8015254:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015258:	f800 1b01 	strb.w	r1, [r0], #1
 801525c:	1b41      	subs	r1, r0, r5
 801525e:	3901      	subs	r1, #1
 8015260:	42a1      	cmp	r1, r4
 8015262:	d3f7      	bcc.n	8015254 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x40>
 8015264:	4422      	add	r2, r4
 8015266:	191d      	adds	r5, r3, r4
 8015268:	e7d8      	b.n	801521c <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)+0x8>
 801526a:	bf00      	nop
 801526c:	2000dfe5 	andcs	sp, r0, r5, ror #31

08015270 <add_answer_a(unsigned char*, unsigned long)>:
 8015270:	b530      	push	{r4, r5, lr}
 8015272:	b0c3      	sub	sp, #268	@ 0x10c
 8015274:	4605      	mov	r5, r0
 8015276:	a801      	add	r0, sp, #4
 8015278:	460c      	mov	r4, r1
 801527a:	f7ff feb1 	bl	8014fe0 <create_host_domain(mdns::Domain&)>
 801527e:	a901      	add	r1, sp, #4
 8015280:	4628      	mov	r0, r5
 8015282:	f7ff ffc7 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8015286:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801528a:	8003      	strh	r3, [r0, #0]
 801528c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8015290:	8043      	strh	r3, [r0, #2]
 8015292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015296:	8103      	strh	r3, [r0, #8]
 8015298:	4b04      	ldr	r3, [pc, #16]	@ (80152ac <add_answer_a(unsigned char*, unsigned long)+0x3c>)
 801529a:	ba24      	rev	r4, r4
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	6044      	str	r4, [r0, #4]
 80152a0:	f8c0 300a 	str.w	r3, [r0, #10]
 80152a4:	300e      	adds	r0, #14
 80152a6:	1b40      	subs	r0, r0, r5
 80152a8:	b043      	add	sp, #268	@ 0x10c
 80152aa:	bd30      	pop	{r4, r5, pc}
 80152ac:	2000e230 	andcs	lr, r0, r0, lsr r2

080152b0 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]>:
 80152b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152b2:	4e11      	ldr	r6, [pc, #68]	@ (80152f8 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]+0x48>)
 80152b4:	b0c3      	sub	sp, #268	@ 0x10c
 80152b6:	4607      	mov	r7, r0
 80152b8:	460d      	mov	r5, r1
 80152ba:	4630      	mov	r0, r6
 80152bc:	490f      	ldr	r1, [pc, #60]	@ (80152fc <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]+0x4c>)
 80152be:	f7ff ffa9 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 80152c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80152c6:	8003      	strh	r3, [r0, #0]
 80152c8:	ba2d      	rev	r5, r5
 80152ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80152ce:	8043      	strh	r3, [r0, #2]
 80152d0:	4604      	mov	r4, r0
 80152d2:	6045      	str	r5, [r0, #4]
 80152d4:	2200      	movs	r2, #0
 80152d6:	f100 050a 	add.w	r5, r0, #10
 80152da:	4639      	mov	r1, r7
 80152dc:	a801      	add	r0, sp, #4
 80152de:	f7ff fe9f 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80152e2:	a901      	add	r1, sp, #4
 80152e4:	4628      	mov	r0, r5
 80152e6:	f7ff ff95 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 80152ea:	1b45      	subs	r5, r0, r5
 80152ec:	ba6d      	rev16	r5, r5
 80152ee:	1b80      	subs	r0, r0, r6
 80152f0:	8125      	strh	r5, [r4, #8]
 80152f2:	b043      	add	sp, #268	@ 0x10c
 80152f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152f6:	bf00      	nop
 80152f8:	2000dff1 	strdcs	sp, [r0], -r1
 80152fc:	08020fcc 	stmdaeq	r2, {r2, r3, r6, r7, r8, r9, sl, fp}

08015300 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 8015300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015302:	b0c3      	sub	sp, #268	@ 0x10c
 8015304:	460e      	mov	r6, r1
 8015306:	4607      	mov	r7, r0
 8015308:	4601      	mov	r1, r0
 801530a:	4615      	mov	r5, r2
 801530c:	a801      	add	r0, sp, #4
 801530e:	2201      	movs	r2, #1
 8015310:	f7ff fe86 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8015314:	a901      	add	r1, sp, #4
 8015316:	4630      	mov	r0, r6
 8015318:	f7ff ff7c 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 801531c:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8015320:	8003      	strh	r3, [r0, #0]
 8015322:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8015326:	8043      	strh	r3, [r0, #2]
 8015328:	2300      	movs	r3, #0
 801532a:	f8c0 300a 	str.w	r3, [r0, #10]
 801532e:	ba2d      	rev	r5, r5
 8015330:	897b      	ldrh	r3, [r7, #10]
 8015332:	81c3      	strh	r3, [r0, #14]
 8015334:	4604      	mov	r4, r0
 8015336:	6045      	str	r5, [r0, #4]
 8015338:	f100 0510 	add.w	r5, r0, #16
 801533c:	a801      	add	r0, sp, #4
 801533e:	f7ff fe4f 	bl	8014fe0 <create_host_domain(mdns::Domain&)>
 8015342:	a901      	add	r1, sp, #4
 8015344:	4628      	mov	r0, r5
 8015346:	f7ff ff65 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 801534a:	1d83      	adds	r3, r0, #6
 801534c:	1b5b      	subs	r3, r3, r5
 801534e:	ba5b      	rev16	r3, r3
 8015350:	1b80      	subs	r0, r0, r6
 8015352:	8123      	strh	r3, [r4, #8]
 8015354:	b043      	add	sp, #268	@ 0x10c
 8015356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015358 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 8015358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801535a:	b0c3      	sub	sp, #268	@ 0x10c
 801535c:	460e      	mov	r6, r1
 801535e:	4607      	mov	r7, r0
 8015360:	4601      	mov	r1, r0
 8015362:	4615      	mov	r5, r2
 8015364:	a801      	add	r0, sp, #4
 8015366:	2200      	movs	r2, #0
 8015368:	f7ff fe5a 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 801536c:	a901      	add	r1, sp, #4
 801536e:	4630      	mov	r0, r6
 8015370:	f7ff ff50 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 8015374:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8015378:	8003      	strh	r3, [r0, #0]
 801537a:	ba2d      	rev	r5, r5
 801537c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015380:	8043      	strh	r3, [r0, #2]
 8015382:	4604      	mov	r4, r0
 8015384:	6045      	str	r5, [r0, #4]
 8015386:	2201      	movs	r2, #1
 8015388:	f100 050a 	add.w	r5, r0, #10
 801538c:	4639      	mov	r1, r7
 801538e:	a801      	add	r0, sp, #4
 8015390:	f7ff fe46 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 8015394:	a901      	add	r1, sp, #4
 8015396:	4628      	mov	r0, r5
 8015398:	f7ff ff3c 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 801539c:	1b45      	subs	r5, r0, r5
 801539e:	ba6d      	rev16	r5, r5
 80153a0:	1b80      	subs	r0, r0, r6
 80153a2:	8125      	strh	r5, [r4, #8]
 80153a4:	b043      	add	sp, #268	@ 0x10c
 80153a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080153a8 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)>:
 80153a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153aa:	b0c3      	sub	sp, #268	@ 0x10c
 80153ac:	4604      	mov	r4, r0
 80153ae:	460e      	mov	r6, r1
 80153b0:	4615      	mov	r5, r2
 80153b2:	4601      	mov	r1, r0
 80153b4:	2201      	movs	r2, #1
 80153b6:	a801      	add	r0, sp, #4
 80153b8:	f7ff fe32 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80153bc:	a901      	add	r1, sp, #4
 80153be:	4630      	mov	r0, r6
 80153c0:	f7ff ff28 	bl	8015214 <put_domain_name_as_labels(unsigned char*, mdns::Domain const&)>
 80153c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80153c8:	8002      	strh	r2, [r0, #0]
 80153ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80153ce:	8042      	strh	r2, [r0, #2]
 80153d0:	6862      	ldr	r2, [r4, #4]
 80153d2:	ba2d      	rev	r5, r5
 80153d4:	6045      	str	r5, [r0, #4]
 80153d6:	f100 050b 	add.w	r5, r0, #11
 80153da:	b932      	cbnz	r2, 80153ea <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)+0x42>
 80153dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80153e0:	8101      	strh	r1, [r0, #8]
 80153e2:	7282      	strb	r2, [r0, #10]
 80153e4:	1ba8      	subs	r0, r5, r6
 80153e6:	b043      	add	sp, #268	@ 0x10c
 80153e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153ea:	8927      	ldrh	r7, [r4, #8]
 80153ec:	7287      	strb	r7, [r0, #10]
 80153ee:	1c7a      	adds	r2, r7, #1
 80153f0:	ba52      	rev16	r2, r2
 80153f2:	8102      	strh	r2, [r0, #8]
 80153f4:	8922      	ldrh	r2, [r4, #8]
 80153f6:	6861      	ldr	r1, [r4, #4]
 80153f8:	4628      	mov	r0, r5
 80153fa:	f7ff fdcd 	bl	8014f98 <memcpy.isra.0>
 80153fe:	443d      	add	r5, r7
 8015400:	e7f0      	b.n	80153e4 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)+0x3c>

08015402 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)>:
 8015402:	4281      	cmp	r1, r0
 8015404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015408:	4606      	mov	r6, r0
 801540a:	d310      	bcc.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 801540c:	4291      	cmp	r1, r2
 801540e:	d20e      	bcs.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8015410:	2500      	movs	r5, #0
 8015412:	f503 7c80 	add.w	ip, r3, #256	@ 0x100
 8015416:	701d      	strb	r5, [r3, #0]
 8015418:	4608      	mov	r0, r1
 801541a:	4607      	mov	r7, r0
 801541c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8015420:	b38c      	cbz	r4, 8015486 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x84>
 8015422:	f004 01c0 	and.w	r1, r4, #192	@ 0xc0
 8015426:	2980      	cmp	r1, #128	@ 0x80
 8015428:	d001      	beq.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 801542a:	d803      	bhi.n	8015434 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x32>
 801542c:	b199      	cbz	r1, 8015456 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x54>
 801542e:	2000      	movs	r0, #0
 8015430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015434:	29c0      	cmp	r1, #192	@ 0xc0
 8015436:	d1f0      	bne.n	801541a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x18>
 8015438:	7800      	ldrb	r0, [r0, #0]
 801543a:	0224      	lsls	r4, r4, #8
 801543c:	f404 547c 	and.w	r4, r4, #16128	@ 0x3f00
 8015440:	4320      	orrs	r0, r4
 8015442:	b905      	cbnz	r5, 8015446 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x44>
 8015444:	1cbd      	adds	r5, r7, #2
 8015446:	1831      	adds	r1, r6, r0
 8015448:	d2f1      	bcs.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 801544a:	428a      	cmp	r2, r1
 801544c:	d9ef      	bls.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 801544e:	5c30      	ldrb	r0, [r6, r0]
 8015450:	283f      	cmp	r0, #63	@ 0x3f
 8015452:	d9e1      	bls.n	8015418 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x16>
 8015454:	e7eb      	b.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8015456:	1901      	adds	r1, r0, r4
 8015458:	4291      	cmp	r1, r2
 801545a:	d2e8      	bcs.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 801545c:	1c67      	adds	r7, r4, #1
 801545e:	441f      	add	r7, r3
 8015460:	4567      	cmp	r7, ip
 8015462:	d2e4      	bcs.n	801542e <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2c>
 8015464:	469e      	mov	lr, r3
 8015466:	f80e 4b01 	strb.w	r4, [lr], #1
 801546a:	f810 8b01 	ldrb.w	r8, [r0], #1
 801546e:	f80e 8b01 	strb.w	r8, [lr], #1
 8015472:	ebae 0803 	sub.w	r8, lr, r3
 8015476:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801547a:	4544      	cmp	r4, r8
 801547c:	dcf5      	bgt.n	801546a <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x68>
 801547e:	2300      	movs	r3, #0
 8015480:	703b      	strb	r3, [r7, #0]
 8015482:	463b      	mov	r3, r7
 8015484:	e7c8      	b.n	8015418 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x16>
 8015486:	2d00      	cmp	r5, #0
 8015488:	bf18      	it	ne
 801548a:	4628      	movne	r0, r5
 801548c:	e7d0      	b.n	8015430 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)+0x2e>
	...

08015490 <MDNS::SendTo(unsigned long)>:
 8015490:	4b0d      	ldr	r3, [pc, #52]	@ (80154c8 <MDNS::SendTo(unsigned long)+0x38>)
 8015492:	b513      	push	{r0, r1, r4, lr}
 8015494:	6818      	ldr	r0, [r3, #0]
 8015496:	4b0d      	ldr	r3, [pc, #52]	@ (80154cc <MDNS::SendTo(unsigned long)+0x3c>)
 8015498:	460a      	mov	r2, r1
 801549a:	6819      	ldr	r1, [r3, #0]
 801549c:	4b0c      	ldr	r3, [pc, #48]	@ (80154d0 <MDNS::SendTo(unsigned long)+0x40>)
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	b94b      	cbnz	r3, 80154b6 <MDNS::SendTo(unsigned long)+0x26>
 80154a2:	b131      	cbz	r1, 80154b2 <MDNS::SendTo(unsigned long)+0x22>
 80154a4:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 80154a8:	9300      	str	r3, [sp, #0]
 80154aa:	4b0a      	ldr	r3, [pc, #40]	@ (80154d4 <MDNS::SendTo(unsigned long)+0x44>)
 80154ac:	490a      	ldr	r1, [pc, #40]	@ (80154d8 <MDNS::SendTo(unsigned long)+0x48>)
 80154ae:	f001 fdc5 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 80154b2:	b002      	add	sp, #8
 80154b4:	bd10      	pop	{r4, pc}
 80154b6:	4b09      	ldr	r3, [pc, #36]	@ (80154dc <MDNS::SendTo(unsigned long)+0x4c>)
 80154b8:	4c09      	ldr	r4, [pc, #36]	@ (80154e0 <MDNS::SendTo(unsigned long)+0x50>)
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	8824      	ldrh	r4, [r4, #0]
 80154be:	2900      	cmp	r1, #0
 80154c0:	d0f7      	beq.n	80154b2 <MDNS::SendTo(unsigned long)+0x22>
 80154c2:	9400      	str	r4, [sp, #0]
 80154c4:	e7f2      	b.n	80154ac <MDNS::SendTo(unsigned long)+0x1c>
 80154c6:	bf00      	nop
 80154c8:	2000dfe0 	andcs	sp, r0, r0, ror #31
 80154cc:	2000e230 	andcs	lr, r0, r0, lsr r2
 80154d0:	2000dfe4 	andcs	sp, r0, r4, ror #31
 80154d4:	fb0000e0 	blx	801585e <MDNS::HandleQuestions(unsigned long)+0x8a>
 80154d8:	2000dfe5 	andcs	sp, r0, r5, ror #31
 80154dc:	2000dfdc 	ldrdcs	sp, [r0], -ip
 80154e0:	2000dfd8 	ldrdcs	sp, [r0], -r8

080154e4 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>:
 80154e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154e6:	4b11      	ldr	r3, [pc, #68]	@ (801552c <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x48>)
 80154e8:	4c11      	ldr	r4, [pc, #68]	@ (8015530 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x4c>)
 80154ea:	681d      	ldr	r5, [r3, #0]
 80154ec:	f015 0501 	ands.w	r5, r5, #1
 80154f0:	460f      	mov	r7, r1
 80154f2:	4606      	mov	r6, r0
 80154f4:	4611      	mov	r1, r2
 80154f6:	d003      	beq.n	8015500 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x1c>
 80154f8:	4620      	mov	r0, r4
 80154fa:	f7ff feb9 	bl	8015270 <add_answer_a(unsigned char*, unsigned long)>
 80154fe:	4404      	add	r4, r0
 8015500:	4b0c      	ldr	r3, [pc, #48]	@ (8015534 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)+0x50>)
 8015502:	2284      	movs	r2, #132	@ 0x84
 8015504:	709a      	strb	r2, [r3, #2]
 8015506:	2200      	movs	r2, #0
 8015508:	ba6d      	rev16	r5, r5
 801550a:	1ae4      	subs	r4, r4, r3
 801550c:	70da      	strb	r2, [r3, #3]
 801550e:	801f      	strh	r7, [r3, #0]
 8015510:	711a      	strb	r2, [r3, #4]
 8015512:	715a      	strb	r2, [r3, #5]
 8015514:	80dd      	strh	r5, [r3, #6]
 8015516:	721a      	strb	r2, [r3, #8]
 8015518:	725a      	strb	r2, [r3, #9]
 801551a:	729a      	strb	r2, [r3, #10]
 801551c:	72da      	strb	r2, [r3, #11]
 801551e:	b2a1      	uxth	r1, r4
 8015520:	4630      	mov	r0, r6
 8015522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015526:	f7ff bfb3 	b.w	8015490 <MDNS::SendTo(unsigned long)>
 801552a:	bf00      	nop
 801552c:	2000e1ec 	andcs	lr, r0, ip, ror #3
 8015530:	2000dff1 	strdcs	sp, [r0], -r1
 8015534:	2000dfe5 	andcs	sp, r0, r5, ror #31

08015538 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>:
 8015538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801553c:	461e      	mov	r6, r3
 801553e:	4b25      	ldr	r3, [pc, #148]	@ (80155d4 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x9c>)
 8015540:	4c25      	ldr	r4, [pc, #148]	@ (80155d8 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0xa0>)
 8015542:	f8d3 9000 	ldr.w	r9, [r3]
 8015546:	f019 0510 	ands.w	r5, r9, #16
 801554a:	4607      	mov	r7, r0
 801554c:	4688      	mov	r8, r1
 801554e:	4692      	mov	sl, r2
 8015550:	d005      	beq.n	801555e <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x26>
 8015552:	4631      	mov	r1, r6
 8015554:	4640      	mov	r0, r8
 8015556:	f7ff feab 	bl	80152b0 <add_answer_dnsd_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long) [clone .constprop.0]>
 801555a:	2501      	movs	r5, #1
 801555c:	4404      	add	r4, r0
 801555e:	f019 0f20 	tst.w	r9, #32
 8015562:	d006      	beq.n	8015572 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x3a>
 8015564:	4621      	mov	r1, r4
 8015566:	4632      	mov	r2, r6
 8015568:	4640      	mov	r0, r8
 801556a:	f7ff fef5 	bl	8015358 <add_answer_ptr(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 801556e:	3501      	adds	r5, #1
 8015570:	4404      	add	r4, r0
 8015572:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8015576:	d006      	beq.n	8015586 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x4e>
 8015578:	4621      	mov	r1, r4
 801557a:	4632      	mov	r2, r6
 801557c:	4640      	mov	r0, r8
 801557e:	f7ff febf 	bl	8015300 <add_answer_srv(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 8015582:	3501      	adds	r5, #1
 8015584:	4404      	add	r4, r0
 8015586:	f019 0f80 	tst.w	r9, #128	@ 0x80
 801558a:	d006      	beq.n	801559a <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0x62>
 801558c:	4621      	mov	r1, r4
 801558e:	4632      	mov	r2, r6
 8015590:	4640      	mov	r0, r8
 8015592:	f7ff ff09 	bl	80153a8 <add_answer_txt(mdns::ServiceRecord const&, unsigned char*, unsigned long)>
 8015596:	3501      	adds	r5, #1
 8015598:	4404      	add	r4, r0
 801559a:	4631      	mov	r1, r6
 801559c:	4620      	mov	r0, r4
 801559e:	f7ff fe67 	bl	8015270 <add_answer_a(unsigned char*, unsigned long)>
 80155a2:	4b0e      	ldr	r3, [pc, #56]	@ (80155dc <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)+0xa4>)
 80155a4:	2284      	movs	r2, #132	@ 0x84
 80155a6:	2101      	movs	r1, #1
 80155a8:	709a      	strb	r2, [r3, #2]
 80155aa:	7259      	strb	r1, [r3, #9]
 80155ac:	2200      	movs	r2, #0
 80155ae:	1821      	adds	r1, r4, r0
 80155b0:	ba6d      	rev16	r5, r5
 80155b2:	70da      	strb	r2, [r3, #3]
 80155b4:	1ac9      	subs	r1, r1, r3
 80155b6:	f8a3 a000 	strh.w	sl, [r3]
 80155ba:	80dd      	strh	r5, [r3, #6]
 80155bc:	4638      	mov	r0, r7
 80155be:	b289      	uxth	r1, r1
 80155c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155c4:	711a      	strb	r2, [r3, #4]
 80155c6:	715a      	strb	r2, [r3, #5]
 80155c8:	721a      	strb	r2, [r3, #8]
 80155ca:	729a      	strb	r2, [r3, #10]
 80155cc:	72da      	strb	r2, [r3, #11]
 80155ce:	f7ff bf5f 	b.w	8015490 <MDNS::SendTo(unsigned long)>
 80155d2:	bf00      	nop
 80155d4:	2000e1e8 	andcs	lr, r0, r8, ror #3
 80155d8:	2000dff1 	strdcs	sp, [r0], -r1
 80155dc:	2000dfe5 	andcs	sp, r0, r5, ror #31

080155e0 <MDNS::SendAnnouncement(unsigned long)>:
 80155e0:	4b14      	ldr	r3, [pc, #80]	@ (8015634 <MDNS::SendAnnouncement(unsigned long)+0x54>)
 80155e2:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 80155e6:	b570      	push	{r4, r5, r6, lr}
 80155e8:	801a      	strh	r2, [r3, #0]
 80155ea:	4b13      	ldr	r3, [pc, #76]	@ (8015638 <MDNS::SendAnnouncement(unsigned long)+0x58>)
 80155ec:	4e13      	ldr	r6, [pc, #76]	@ (801563c <MDNS::SendAnnouncement(unsigned long)+0x5c>)
 80155ee:	2201      	movs	r2, #1
 80155f0:	601a      	str	r2, [r3, #0]
 80155f2:	460c      	mov	r4, r1
 80155f4:	460a      	mov	r2, r1
 80155f6:	2100      	movs	r1, #0
 80155f8:	4605      	mov	r5, r0
 80155fa:	f7ff ff73 	bl	80154e4 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>
 80155fe:	68f3      	ldr	r3, [r6, #12]
 8015600:	2b08      	cmp	r3, #8
 8015602:	dc08      	bgt.n	8015616 <MDNS::SendAnnouncement(unsigned long)+0x36>
 8015604:	4b0e      	ldr	r3, [pc, #56]	@ (8015640 <MDNS::SendAnnouncement(unsigned long)+0x60>)
 8015606:	22f0      	movs	r2, #240	@ 0xf0
 8015608:	601a      	str	r2, [r3, #0]
 801560a:	4631      	mov	r1, r6
 801560c:	4623      	mov	r3, r4
 801560e:	2200      	movs	r2, #0
 8015610:	4628      	mov	r0, r5
 8015612:	f7ff ff91 	bl	8015538 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8015616:	69f3      	ldr	r3, [r6, #28]
 8015618:	2b08      	cmp	r3, #8
 801561a:	dc0a      	bgt.n	8015632 <MDNS::SendAnnouncement(unsigned long)+0x52>
 801561c:	4b08      	ldr	r3, [pc, #32]	@ (8015640 <MDNS::SendAnnouncement(unsigned long)+0x60>)
 801561e:	4909      	ldr	r1, [pc, #36]	@ (8015644 <MDNS::SendAnnouncement(unsigned long)+0x64>)
 8015620:	22f0      	movs	r2, #240	@ 0xf0
 8015622:	601a      	str	r2, [r3, #0]
 8015624:	4628      	mov	r0, r5
 8015626:	4623      	mov	r3, r4
 8015628:	2200      	movs	r2, #0
 801562a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801562e:	f7ff bf83 	b.w	8015538 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 8015632:	bd70      	pop	{r4, r5, r6, pc}
 8015634:	2000dfd8 	ldrdcs	sp, [r0], -r8
 8015638:	2000e1ec 	andcs	lr, r0, ip, ror #3
 801563c:	2000e1f0 	strdcs	lr, [r0], -r0
 8015640:	2000e1e8 	andcs	lr, r0, r8, ror #3
 8015644:	2000e200 	andcs	lr, r0, r0, lsl #4

08015648 <network::mdns_announcement()>:
 8015648:	4b02      	ldr	r3, [pc, #8]	@ (8015654 <network::mdns_announcement()+0xc>)
 801564a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801564e:	6818      	ldr	r0, [r3, #0]
 8015650:	f7ff bfc6 	b.w	80155e0 <MDNS::SendAnnouncement(unsigned long)>
 8015654:	2000dfcc 	andcs	sp, r0, ip, asr #31

08015658 <network::mdns_shutdown()>:
 8015658:	4b02      	ldr	r3, [pc, #8]	@ (8015664 <network::mdns_shutdown()+0xc>)
 801565a:	2100      	movs	r1, #0
 801565c:	6818      	ldr	r0, [r3, #0]
 801565e:	f7ff bfbf 	b.w	80155e0 <MDNS::SendAnnouncement(unsigned long)>
 8015662:	bf00      	nop
 8015664:	2000dfcc 	andcs	sp, r0, ip, asr #31

08015668 <MDNS::MDNS()>:
 8015668:	b538      	push	{r3, r4, r5, lr}
 801566a:	4b16      	ldr	r3, [pc, #88]	@ (80156c4 <MDNS::MDNS()+0x5c>)
 801566c:	4d16      	ldr	r5, [pc, #88]	@ (80156c8 <MDNS::MDNS()+0x60>)
 801566e:	6018      	str	r0, [r3, #0]
 8015670:	4b16      	ldr	r3, [pc, #88]	@ (80156cc <MDNS::MDNS()+0x64>)
 8015672:	2209      	movs	r2, #9
 8015674:	4604      	mov	r4, r0
 8015676:	f241 40e9 	movw	r0, #5353	@ 0x14e9
 801567a:	60da      	str	r2, [r3, #12]
 801567c:	61da      	str	r2, [r3, #28]
 801567e:	f001 fc85 	bl	8016f8c <net::udp_begin(unsigned short)>
 8015682:	4b13      	ldr	r3, [pc, #76]	@ (80156d0 <MDNS::MDNS()+0x68>)
 8015684:	6018      	str	r0, [r3, #0]
 8015686:	4813      	ldr	r0, [pc, #76]	@ (80156d4 <MDNS::MDNS()+0x6c>)
 8015688:	f001 f868 	bl	801675c <net::igmp_join(unsigned long)>
 801568c:	4b12      	ldr	r3, [pc, #72]	@ (80156d8 <MDNS::MDNS()+0x70>)
 801568e:	6819      	ldr	r1, [r3, #0]
 8015690:	233f      	movs	r3, #63	@ 0x3f
 8015692:	f101 0256 	add.w	r2, r1, #86	@ 0x56
 8015696:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801569a:	b118      	cbz	r0, 80156a4 <MDNS::MDNS()+0x3c>
 801569c:	3b01      	subs	r3, #1
 801569e:	f802 0b01 	strb.w	r0, [r2], #1
 80156a2:	d1f8      	bne.n	8015696 <MDNS::MDNS()+0x2e>
 80156a4:	4413      	add	r3, r2
 80156a6:	2000      	movs	r0, #0
 80156a8:	429a      	cmp	r2, r3
 80156aa:	d108      	bne.n	80156be <MDNS::MDNS()+0x56>
 80156ac:	f881 0095 	strb.w	r0, [r1, #149]	@ 0x95
 80156b0:	4620      	mov	r0, r4
 80156b2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80156b6:	f7ff ff93 	bl	80155e0 <MDNS::SendAnnouncement(unsigned long)>
 80156ba:	4620      	mov	r0, r4
 80156bc:	bd38      	pop	{r3, r4, r5, pc}
 80156be:	f802 0b01 	strb.w	r0, [r2], #1
 80156c2:	e7f1      	b.n	80156a8 <MDNS::MDNS()+0x40>
 80156c4:	2000dfcc 	andcs	sp, r0, ip, asr #31
 80156c8:	080211aa 	stmdaeq	r2, {r1, r3, r5, r7, r8, ip}
 80156cc:	2000e1f0 	strdcs	lr, [r0], -r0
 80156d0:	2000dfe0 	andcs	sp, r0, r0, ror #31
 80156d4:	fb0000e0 	blx	8015a5e <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x3a>
 80156d8:	2000e210 	andcs	lr, r0, r0, lsl r2

080156dc <MDNS::ServiceRecordDelete(mdns::Services)>:
 80156dc:	b510      	push	{r4, lr}
 80156de:	4c0c      	ldr	r4, [pc, #48]	@ (8015710 <MDNS::ServiceRecordDelete(mdns::Services)+0x34>)
 80156e0:	68e3      	ldr	r3, [r4, #12]
 80156e2:	4299      	cmp	r1, r3
 80156e4:	d003      	beq.n	80156ee <MDNS::ServiceRecordDelete(mdns::Services)+0x12>
 80156e6:	69e3      	ldr	r3, [r4, #28]
 80156e8:	4299      	cmp	r1, r3
 80156ea:	d10f      	bne.n	801570c <MDNS::ServiceRecordDelete(mdns::Services)+0x30>
 80156ec:	3410      	adds	r4, #16
 80156ee:	2300      	movs	r3, #0
 80156f0:	461a      	mov	r2, r3
 80156f2:	4621      	mov	r1, r4
 80156f4:	f7ff ff20 	bl	8015538 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 80156f8:	6820      	ldr	r0, [r4, #0]
 80156fa:	b108      	cbz	r0, 8015700 <MDNS::ServiceRecordDelete(mdns::Services)+0x24>
 80156fc:	f007 f8e8 	bl	801c8d0 <operator delete[](void*)>
 8015700:	6860      	ldr	r0, [r4, #4]
 8015702:	b108      	cbz	r0, 8015708 <MDNS::ServiceRecordDelete(mdns::Services)+0x2c>
 8015704:	f007 f8e4 	bl	801c8d0 <operator delete[](void*)>
 8015708:	2001      	movs	r0, #1
 801570a:	bd10      	pop	{r4, pc}
 801570c:	2000      	movs	r0, #0
 801570e:	e7fc      	b.n	801570a <MDNS::ServiceRecordDelete(mdns::Services)+0x2e>
 8015710:	2000e1f0 	strdcs	lr, [r0], -r0

08015714 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)>:
 8015714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015718:	4d2a      	ldr	r5, [pc, #168]	@ (80157c4 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb0>)
 801571a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801571e:	461f      	mov	r7, r3
 8015720:	68eb      	ldr	r3, [r5, #12]
 8015722:	2b09      	cmp	r3, #9
 8015724:	4680      	mov	r8, r0
 8015726:	4689      	mov	r9, r1
 8015728:	4692      	mov	sl, r2
 801572a:	d003      	beq.n	8015734 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x20>
 801572c:	69eb      	ldr	r3, [r5, #28]
 801572e:	2b09      	cmp	r3, #9
 8015730:	d145      	bne.n	80157be <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xaa>
 8015732:	3510      	adds	r5, #16
 8015734:	f1b9 0f00 	cmp.w	r9, #0
 8015738:	d012      	beq.n	8015760 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x4c>
 801573a:	4648      	mov	r0, r9
 801573c:	f7ff fc35 	bl	8014faa <strlen>
 8015740:	283f      	cmp	r0, #63	@ 0x3f
 8015742:	4604      	mov	r4, r0
 8015744:	d839      	bhi.n	80157ba <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa6>
 8015746:	2800      	cmp	r0, #0
 8015748:	d035      	beq.n	80157b6 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa2>
 801574a:	1c60      	adds	r0, r4, #1
 801574c:	f007 f8c6 	bl	801c8dc <operator new[](unsigned int)>
 8015750:	4622      	mov	r2, r4
 8015752:	6028      	str	r0, [r5, #0]
 8015754:	4649      	mov	r1, r9
 8015756:	f7ff fc1f 	bl	8014f98 <memcpy.isra.0>
 801575a:	682b      	ldr	r3, [r5, #0]
 801575c:	2200      	movs	r2, #0
 801575e:	551a      	strb	r2, [r3, r4]
 8015760:	f8c5 a00c 	str.w	sl, [r5, #12]
 8015764:	b91e      	cbnz	r6, 801576e <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x5a>
 8015766:	4b18      	ldr	r3, [pc, #96]	@ (80157c8 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb4>)
 8015768:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 801576c:	899e      	ldrh	r6, [r3, #12]
 801576e:	ba76      	rev16	r6, r6
 8015770:	b2b6      	uxth	r6, r6
 8015772:	816e      	strh	r6, [r5, #10]
 8015774:	b187      	cbz	r7, 8015798 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x84>
 8015776:	4638      	mov	r0, r7
 8015778:	f7ff fc17 	bl	8014faa <strlen>
 801577c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8015780:	bf28      	it	cs
 8015782:	f44f 7080 	movcs.w	r0, #256	@ 0x100
 8015786:	4604      	mov	r4, r0
 8015788:	f007 f8a8 	bl	801c8dc <operator new[](unsigned int)>
 801578c:	4622      	mov	r2, r4
 801578e:	6068      	str	r0, [r5, #4]
 8015790:	4639      	mov	r1, r7
 8015792:	f7ff fc01 	bl	8014f98 <memcpy.isra.0>
 8015796:	812c      	strh	r4, [r5, #8]
 8015798:	4b0c      	ldr	r3, [pc, #48]	@ (80157cc <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xb8>)
 801579a:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 801579e:	801a      	strh	r2, [r3, #0]
 80157a0:	4b0b      	ldr	r3, [pc, #44]	@ (80157d0 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xbc>)
 80157a2:	22f0      	movs	r2, #240	@ 0xf0
 80157a4:	601a      	str	r2, [r3, #0]
 80157a6:	4640      	mov	r0, r8
 80157a8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80157ac:	2200      	movs	r2, #0
 80157ae:	4629      	mov	r1, r5
 80157b0:	f7ff fec2 	bl	8015538 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 80157b4:	2001      	movs	r0, #1
 80157b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157ba:	243f      	movs	r4, #63	@ 0x3f
 80157bc:	e7c5      	b.n	801574a <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0x36>
 80157be:	2000      	movs	r0, #0
 80157c0:	e7f9      	b.n	80157b6 <MDNS::ServiceRecordAdd(char const*, mdns::Services, char const*, unsigned short)+0xa2>
 80157c2:	bf00      	nop
 80157c4:	2000e1f0 	strdcs	lr, [r0], -r0
 80157c8:	080210d0 	stmdaeq	r2, {r4, r6, r7, ip}
 80157cc:	2000dfd8 	ldrdcs	sp, [r0], -r8
 80157d0:	2000e1e8 	andcs	lr, r0, r8, ror #3

080157d4 <MDNS::HandleQuestions(unsigned long)>:
 80157d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d8:	4b5c      	ldr	r3, [pc, #368]	@ (801594c <MDNS::HandleQuestions(unsigned long)+0x178>)
 80157da:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 801596c <MDNS::HandleQuestions(unsigned long)+0x198>
 80157de:	881a      	ldrh	r2, [r3, #0]
 80157e0:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 80157e4:	429a      	cmp	r2, r3
 80157e6:	f04f 0500 	mov.w	r5, #0
 80157ea:	4b59      	ldr	r3, [pc, #356]	@ (8015950 <MDNS::HandleQuestions(unsigned long)+0x17c>)
 80157ec:	f8c9 5000 	str.w	r5, [r9]
 80157f0:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 80157f4:	bf14      	ite	ne
 80157f6:	2201      	movne	r2, #1
 80157f8:	462a      	moveq	r2, r5
 80157fa:	9001      	str	r0, [sp, #4]
 80157fc:	4688      	mov	r8, r1
 80157fe:	701a      	strb	r2, [r3, #0]
 8015800:	d004      	beq.n	801580c <MDNS::HandleQuestions(unsigned long)+0x38>
 8015802:	2901      	cmp	r1, #1
 8015804:	bf02      	ittt	eq
 8015806:	4b53      	ldreq	r3, [pc, #332]	@ (8015954 <MDNS::HandleQuestions(unsigned long)+0x180>)
 8015808:	681b      	ldreq	r3, [r3, #0]
 801580a:	881d      	ldrheq	r5, [r3, #0]
 801580c:	4c52      	ldr	r4, [pc, #328]	@ (8015958 <MDNS::HandleQuestions(unsigned long)+0x184>)
 801580e:	f04f 0b00 	mov.w	fp, #0
 8015812:	f04f 0a0c 	mov.w	sl, #12
 8015816:	45c3      	cmp	fp, r8
 8015818:	d10e      	bne.n	8015838 <MDNS::HandleQuestions(unsigned long)+0x64>
 801581a:	f8d9 3000 	ldr.w	r3, [r9]
 801581e:	2b00      	cmp	r3, #0
 8015820:	f000 808f 	beq.w	8015942 <MDNS::HandleQuestions(unsigned long)+0x16e>
 8015824:	9801      	ldr	r0, [sp, #4]
 8015826:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801582a:	4629      	mov	r1, r5
 801582c:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 8015830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015834:	f7ff be56 	b.w	80154e4 <MDNS::SendAnswerLocalIpAddress(unsigned short, unsigned long)>
 8015838:	4b48      	ldr	r3, [pc, #288]	@ (801595c <MDNS::HandleQuestions(unsigned long)+0x188>)
 801583a:	4e46      	ldr	r6, [pc, #280]	@ (8015954 <MDNS::HandleQuestions(unsigned long)+0x180>)
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	6830      	ldr	r0, [r6, #0]
 8015840:	ab03      	add	r3, sp, #12
 8015842:	4402      	add	r2, r0
 8015844:	eb00 010a 	add.w	r1, r0, sl
 8015848:	f7ff fddb 	bl	8015402 <get_domain_name(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char*)>
 801584c:	2800      	cmp	r0, #0
 801584e:	d078      	beq.n	8015942 <MDNS::HandleQuestions(unsigned long)+0x16e>
 8015850:	6833      	ldr	r3, [r6, #0]
 8015852:	eb03 020a 	add.w	r2, r3, sl
 8015856:	1a80      	subs	r0, r0, r2
 8015858:	f8ad 010c 	strh.w	r0, [sp, #268]	@ 0x10c
 801585c:	fa1a f080 	uxtah	r0, sl, r0
 8015860:	181a      	adds	r2, r3, r0
 8015862:	f100 0a04 	add.w	sl, r0, #4
 8015866:	8852      	ldrh	r2, [r2, #2]
 8015868:	f402 42fe 	and.w	r2, r2, #32512	@ 0x7f00
 801586c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8015870:	d002      	beq.n	8015878 <MDNS::HandleQuestions(unsigned long)+0xa4>
 8015872:	f10b 0b01 	add.w	fp, fp, #1
 8015876:	e7ce      	b.n	8015816 <MDNS::HandleQuestions(unsigned long)+0x42>
 8015878:	5a1e      	ldrh	r6, [r3, r0]
 801587a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 801587e:	d002      	beq.n	8015886 <MDNS::HandleQuestions(unsigned long)+0xb2>
 8015880:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 8015884:	d10d      	bne.n	80158a2 <MDNS::HandleQuestions(unsigned long)+0xce>
 8015886:	a844      	add	r0, sp, #272	@ 0x110
 8015888:	f7ff fbaa 	bl	8014fe0 <create_host_domain(mdns::Domain&)>
 801588c:	a903      	add	r1, sp, #12
 801588e:	a844      	add	r0, sp, #272	@ 0x110
 8015890:	f7ff fc3c 	bl	801510c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 8015894:	b128      	cbz	r0, 80158a2 <MDNS::HandleQuestions(unsigned long)+0xce>
 8015896:	f8d9 3000 	ldr.w	r3, [r9]
 801589a:	f043 0301 	orr.w	r3, r3, #1
 801589e:	f8c9 3000 	str.w	r3, [r9]
 80158a2:	4f2f      	ldr	r7, [pc, #188]	@ (8015960 <MDNS::HandleQuestions(unsigned long)+0x18c>)
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2b08      	cmp	r3, #8
 80158a8:	dc46      	bgt.n	8015938 <MDNS::HandleQuestions(unsigned long)+0x164>
 80158aa:	2300      	movs	r3, #0
 80158ac:	f5b6 6f40 	cmp.w	r6, #3072	@ 0xc00
 80158b0:	6023      	str	r3, [r4, #0]
 80158b2:	d002      	beq.n	80158ba <MDNS::HandleQuestions(unsigned long)+0xe6>
 80158b4:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 80158b8:	d115      	bne.n	80158e6 <MDNS::HandleQuestions(unsigned long)+0x112>
 80158ba:	482a      	ldr	r0, [pc, #168]	@ (8015964 <MDNS::HandleQuestions(unsigned long)+0x190>)
 80158bc:	a903      	add	r1, sp, #12
 80158be:	f7ff fc25 	bl	801510c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 80158c2:	b108      	cbz	r0, 80158c8 <MDNS::HandleQuestions(unsigned long)+0xf4>
 80158c4:	2310      	movs	r3, #16
 80158c6:	6023      	str	r3, [r4, #0]
 80158c8:	2200      	movs	r2, #0
 80158ca:	4639      	mov	r1, r7
 80158cc:	a885      	add	r0, sp, #532	@ 0x214
 80158ce:	f7ff fba7 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80158d2:	a903      	add	r1, sp, #12
 80158d4:	a885      	add	r0, sp, #532	@ 0x214
 80158d6:	f7ff fc19 	bl	801510c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 80158da:	6823      	ldr	r3, [r4, #0]
 80158dc:	b118      	cbz	r0, 80158e6 <MDNS::HandleQuestions(unsigned long)+0x112>
 80158de:	f043 0320 	orr.w	r3, r3, #32
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	6023      	str	r3, [r4, #0]
 80158e6:	4639      	mov	r1, r7
 80158e8:	a885      	add	r0, sp, #532	@ 0x214
 80158ea:	2201      	movs	r2, #1
 80158ec:	f7ff fb98 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80158f0:	a903      	add	r1, sp, #12
 80158f2:	a885      	add	r0, sp, #532	@ 0x214
 80158f4:	f7ff fc0a 	bl	801510c <mdns::operator==(mdns::Domain const&, mdns::Domain const&)>
 80158f8:	b1d8      	cbz	r0, 8015932 <MDNS::HandleQuestions(unsigned long)+0x15e>
 80158fa:	f5b6 5f04 	cmp.w	r6, #8448	@ 0x2100
 80158fe:	d002      	beq.n	8015906 <MDNS::HandleQuestions(unsigned long)+0x132>
 8015900:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 8015904:	d112      	bne.n	801592c <MDNS::HandleQuestions(unsigned long)+0x158>
 8015906:	7823      	ldrb	r3, [r4, #0]
 8015908:	f5b6 4f7f 	cmp.w	r6, #65280	@ 0xff00
 801590c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015910:	6023      	str	r3, [r4, #0]
 8015912:	d103      	bne.n	801591c <MDNS::HandleQuestions(unsigned long)+0x148>
 8015914:	7823      	ldrb	r3, [r4, #0]
 8015916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801591a:	6023      	str	r3, [r4, #0]
 801591c:	9801      	ldr	r0, [sp, #4]
 801591e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8015922:	462a      	mov	r2, r5
 8015924:	4639      	mov	r1, r7
 8015926:	f7ff fe07 	bl	8015538 <MDNS::SendMessage(mdns::ServiceRecord const&, unsigned short, unsigned long)>
 801592a:	e005      	b.n	8015938 <MDNS::HandleQuestions(unsigned long)+0x164>
 801592c:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8015930:	d0f0      	beq.n	8015914 <MDNS::HandleQuestions(unsigned long)+0x140>
 8015932:	6823      	ldr	r3, [r4, #0]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d1f1      	bne.n	801591c <MDNS::HandleQuestions(unsigned long)+0x148>
 8015938:	4b0b      	ldr	r3, [pc, #44]	@ (8015968 <MDNS::HandleQuestions(unsigned long)+0x194>)
 801593a:	3710      	adds	r7, #16
 801593c:	429f      	cmp	r7, r3
 801593e:	d1b1      	bne.n	80158a4 <MDNS::HandleQuestions(unsigned long)+0xd0>
 8015940:	e797      	b.n	8015872 <MDNS::HandleQuestions(unsigned long)+0x9e>
 8015942:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 8015946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594a:	bf00      	nop
 801594c:	2000dfd8 	ldrdcs	sp, [r0], -r8
 8015950:	2000dfe4 	andcs	sp, r0, r4, ror #31
 8015954:	2000dfd0 	ldrdcs	sp, [r0], -r0
 8015958:	2000e1e8 	andcs	lr, r0, r8, ror #3
 801595c:	2000dfd4 	ldrdcs	sp, [r0], -r4
 8015960:	2000e1f0 	strdcs	lr, [r0], -r0
 8015964:	08020fcc 	stmdaeq	r2, {r2, r3, r6, r7, r8, r9, sl, fp}
 8015968:	2000e210 	andcs	lr, r0, r0, lsl r2
 801596c:	2000e1ec 	andcs	lr, r0, ip, ror #3

08015970 <MDNS::Print()>:
 8015970:	b530      	push	{r4, r5, lr}
 8015972:	4815      	ldr	r0, [pc, #84]	@ (80159c8 <MDNS::Print()+0x58>)
 8015974:	4c15      	ldr	r4, [pc, #84]	@ (80159cc <MDNS::Print()+0x5c>)
 8015976:	b0c3      	sub	sp, #268	@ 0x10c
 8015978:	f006 fd58 	bl	801c42c <printf>
 801597c:	a801      	add	r0, sp, #4
 801597e:	f7ff fb2f 	bl	8014fe0 <create_host_domain(mdns::Domain&)>
 8015982:	2101      	movs	r1, #1
 8015984:	a801      	add	r0, sp, #4
 8015986:	f7ff fb9d 	bl	80150c4 <mdns::Domain::Print(bool)>
 801598a:	2503      	movs	r5, #3
 801598c:	3d01      	subs	r5, #1
 801598e:	d101      	bne.n	8015994 <MDNS::Print()+0x24>
 8015990:	b043      	add	sp, #268	@ 0x10c
 8015992:	bd30      	pop	{r4, r5, pc}
 8015994:	68e3      	ldr	r3, [r4, #12]
 8015996:	2b08      	cmp	r3, #8
 8015998:	dc14      	bgt.n	80159c4 <MDNS::Print()+0x54>
 801599a:	2200      	movs	r2, #0
 801599c:	4621      	mov	r1, r4
 801599e:	a801      	add	r0, sp, #4
 80159a0:	f7ff fb3e 	bl	8015020 <create_service_domain(mdns::Domain&, mdns::ServiceRecord const&, bool)>
 80159a4:	2100      	movs	r1, #0
 80159a6:	a801      	add	r0, sp, #4
 80159a8:	f7ff fb8c 	bl	80150c4 <mdns::Domain::Print(bool)>
 80159ac:	8961      	ldrh	r1, [r4, #10]
 80159ae:	4a08      	ldr	r2, [pc, #32]	@ (80159d0 <MDNS::Print()+0x60>)
 80159b0:	6863      	ldr	r3, [r4, #4]
 80159b2:	4808      	ldr	r0, [pc, #32]	@ (80159d4 <MDNS::Print()+0x64>)
 80159b4:	ba49      	rev16	r1, r1
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	bf08      	it	eq
 80159ba:	4613      	moveq	r3, r2
 80159bc:	b289      	uxth	r1, r1
 80159be:	8922      	ldrh	r2, [r4, #8]
 80159c0:	f006 fd34 	bl	801c42c <printf>
 80159c4:	3410      	adds	r4, #16
 80159c6:	e7e1      	b.n	801598c <MDNS::Print()+0x1c>
 80159c8:	0801dacf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, fp, ip, lr, pc}
 80159cc:	2000e1f0 	strdcs	lr, [r0], -r0
 80159d0:	0801d1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr, pc}
 80159d4:	0801dad5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, fp, ip, lr, pc}

080159d8 <strncpy.isra.0>:
 80159d8:	3901      	subs	r1, #1
 80159da:	b112      	cbz	r2, 80159e2 <strncpy.isra.0+0xa>
 80159dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80159e0:	b913      	cbnz	r3, 80159e8 <strncpy.isra.0+0x10>
 80159e2:	4402      	add	r2, r0
 80159e4:	2300      	movs	r3, #0
 80159e6:	e005      	b.n	80159f4 <strncpy.isra.0+0x1c>
 80159e8:	f800 3b01 	strb.w	r3, [r0], #1
 80159ec:	3a01      	subs	r2, #1
 80159ee:	e7f4      	b.n	80159da <strncpy.isra.0+0x2>
 80159f0:	f800 3b01 	strb.w	r3, [r0], #1
 80159f4:	4290      	cmp	r0, r2
 80159f6:	d1fb      	bne.n	80159f0 <strncpy.isra.0+0x18>
 80159f8:	4770      	bx	lr
	...

080159fc <NetworkStore::SaveDhcp(bool)>:
 80159fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80159fe:	2301      	movs	r3, #1
 8015a00:	2100      	movs	r1, #0
 8015a02:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015a06:	f88d 0017 	strb.w	r0, [sp, #23]
 8015a0a:	4805      	ldr	r0, [pc, #20]	@ (8015a20 <NetworkStore::SaveDhcp(bool)+0x24>)
 8015a0c:	9300      	str	r3, [sp, #0]
 8015a0e:	6800      	ldr	r0, [r0, #0]
 8015a10:	f10d 0317 	add.w	r3, sp, #23
 8015a14:	2214      	movs	r2, #20
 8015a16:	f002 ffb9 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8015a1a:	b007      	add	sp, #28
 8015a1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a20:	2000e2dc 	ldrdcs	lr, [r0], -ip

08015a24 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)>:
 8015a24:	b530      	push	{r4, r5, lr}
 8015a26:	4605      	mov	r5, r0
 8015a28:	06e8      	lsls	r0, r5, #27
 8015a2a:	b087      	sub	sp, #28
 8015a2c:	460c      	mov	r4, r1
 8015a2e:	d51a      	bpl.n	8015a66 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x42>
 8015a30:	f002 feb2 	bl	8018798 <net::display_ip()>
 8015a34:	f7ff fe08 	bl	8015648 <network::mdns_announcement()>
 8015a38:	4b2e      	ldr	r3, [pc, #184]	@ (8015af4 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8015a3a:	6821      	ldr	r1, [r4, #0]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	482e      	ldr	r0, [pc, #184]	@ (8015af8 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd4>)
 8015a40:	0e1a      	lsrs	r2, r3, #24
 8015a42:	9204      	str	r2, [sp, #16]
 8015a44:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015a48:	9203      	str	r2, [sp, #12]
 8015a4a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	9301      	str	r3, [sp, #4]
 8015a52:	0e0b      	lsrs	r3, r1, #24
 8015a54:	9202      	str	r2, [sp, #8]
 8015a56:	9300      	str	r3, [sp, #0]
 8015a58:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8015a5c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015a60:	b2c9      	uxtb	r1, r1
 8015a62:	f006 fce3 	bl	801c42c <printf>
 8015a66:	0669      	lsls	r1, r5, #25
 8015a68:	d518      	bpl.n	8015a9c <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0x78>
 8015a6a:	f002 fe9d 	bl	80187a8 <net::display_netmask()>
 8015a6e:	4b21      	ldr	r3, [pc, #132]	@ (8015af4 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8015a70:	6861      	ldr	r1, [r4, #4]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	4821      	ldr	r0, [pc, #132]	@ (8015afc <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd8>)
 8015a76:	0e1a      	lsrs	r2, r3, #24
 8015a78:	9204      	str	r2, [sp, #16]
 8015a7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015a7e:	9203      	str	r2, [sp, #12]
 8015a80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015a84:	b2db      	uxtb	r3, r3
 8015a86:	9301      	str	r3, [sp, #4]
 8015a88:	0e0b      	lsrs	r3, r1, #24
 8015a8a:	9202      	str	r2, [sp, #8]
 8015a8c:	9300      	str	r3, [sp, #0]
 8015a8e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8015a92:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015a96:	b2c9      	uxtb	r1, r1
 8015a98:	f006 fcc8 	bl	801c42c <printf>
 8015a9c:	06aa      	lsls	r2, r5, #26
 8015a9e:	d518      	bpl.n	8015ad2 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xae>
 8015aa0:	f002 fea4 	bl	80187ec <net::display_gateway()>
 8015aa4:	4b13      	ldr	r3, [pc, #76]	@ (8015af4 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xd0>)
 8015aa6:	68a1      	ldr	r1, [r4, #8]
 8015aa8:	689b      	ldr	r3, [r3, #8]
 8015aaa:	4815      	ldr	r0, [pc, #84]	@ (8015b00 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xdc>)
 8015aac:	0e1a      	lsrs	r2, r3, #24
 8015aae:	9204      	str	r2, [sp, #16]
 8015ab0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015ab4:	9203      	str	r2, [sp, #12]
 8015ab6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015aba:	b2db      	uxtb	r3, r3
 8015abc:	9301      	str	r3, [sp, #4]
 8015abe:	0e0b      	lsrs	r3, r1, #24
 8015ac0:	9202      	str	r2, [sp, #8]
 8015ac2:	9300      	str	r3, [sp, #0]
 8015ac4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8015ac8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015acc:	b2c9      	uxtb	r1, r1
 8015ace:	f006 fcad 	bl	801c42c <printf>
 8015ad2:	076b      	lsls	r3, r5, #29
 8015ad4:	d50c      	bpl.n	8015af0 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xcc>
 8015ad6:	7823      	ldrb	r3, [r4, #0]
 8015ad8:	b953      	cbnz	r3, 8015af0 <netif_ext_callback(unsigned short, net::netif_ext_callback_args_t const*)+0xcc>
 8015ada:	f7ff fdbd 	bl	8015658 <network::mdns_shutdown()>
 8015ade:	f001 f98f 	bl	8016e00 <net::tcp_shutdown()>
 8015ae2:	f7f2 fbd9 	bl	8008298 <net::igmp_shutdown()>
 8015ae6:	b007      	add	sp, #28
 8015ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015aec:	f000 bc7a 	b.w	80163e4 <net::dhcp_release_and_stop()>
 8015af0:	b007      	add	sp, #28
 8015af2:	bd30      	pop	{r4, r5, pc}
 8015af4:	2000e230 	andcs	lr, r0, r0, lsr r2
 8015af8:	0801dadf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, fp, ip, lr, pc}
 8015afc:	0801daff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, fp, ip, lr, pc}
 8015b00:	0801db24 	stmdaeq	r1, {r2, r5, r8, r9, fp, ip, lr, pc}

08015b04 <Network::Network()>:
 8015b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b06:	2300      	movs	r3, #0
 8015b08:	f240 1201 	movw	r2, #257	@ 0x101
 8015b0c:	6003      	str	r3, [r0, #0]
 8015b0e:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 8015b12:	4b53      	ldr	r3, [pc, #332]	@ (8015c60 <Network::Network()+0x15c>)
 8015b14:	8082      	strh	r2, [r0, #4]
 8015b16:	4a53      	ldr	r2, [pc, #332]	@ (8015c64 <Network::Network()+0x160>)
 8015b18:	6018      	str	r0, [r3, #0]
 8015b1a:	b09f      	sub	sp, #124	@ 0x7c
 8015b1c:	4604      	mov	r4, r0
 8015b1e:	1d83      	adds	r3, r0, #6
 8015b20:	f812 6b01 	ldrb.w	r6, [r2], #1
 8015b24:	f803 6b01 	strb.w	r6, [r3], #1
 8015b28:	2e00      	cmp	r6, #0
 8015b2a:	d1f9      	bne.n	8015b20 <Network::Network()+0x1c>
 8015b2c:	f884 6056 	strb.w	r6, [r4, #86]	@ 0x56
 8015b30:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8015b34:	f104 02a4 	add.w	r2, r4, #164	@ 0xa4
 8015b38:	f803 6b01 	strb.w	r6, [r3], #1
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d1fb      	bne.n	8015b38 <Network::Network()+0x34>
 8015b40:	4d49      	ldr	r5, [pc, #292]	@ (8015c68 <Network::Network()+0x164>)
 8015b42:	f002 fde9 	bl	8018718 <net::display_emac_config()>
 8015b46:	f7f2 fc2b 	bl	80083a0 <emac_config()>
 8015b4a:	f002 fdf7 	bl	801873c <net::display_emac_start()>
 8015b4e:	4847      	ldr	r0, [pc, #284]	@ (8015c6c <Network::Network()+0x168>)
 8015b50:	4621      	mov	r1, r4
 8015b52:	f7f2 fc49 	bl	80083e8 <emac_start(unsigned char*, net::Link&)>
 8015b56:	7e6b      	ldrb	r3, [r5, #25]
 8015b58:	9302      	str	r3, [sp, #8]
 8015b5a:	7e2b      	ldrb	r3, [r5, #24]
 8015b5c:	9301      	str	r3, [sp, #4]
 8015b5e:	7deb      	ldrb	r3, [r5, #23]
 8015b60:	9300      	str	r3, [sp, #0]
 8015b62:	7dab      	ldrb	r3, [r5, #22]
 8015b64:	7d6a      	ldrb	r2, [r5, #21]
 8015b66:	7d29      	ldrb	r1, [r5, #20]
 8015b68:	4841      	ldr	r0, [pc, #260]	@ (8015c70 <Network::Network()+0x16c>)
 8015b6a:	f006 fc5f 	bl	801c42c <printf>
 8015b6e:	f001 fd08 	bl	8017582 <net::phy_customized_timing()>
 8015b72:	f001 fd05 	bl	8017580 <net::phy_customized_led()>
 8015b76:	f000 ff17 	bl	80169a8 <net::netif_init()>
 8015b7a:	483e      	ldr	r0, [pc, #248]	@ (8015c74 <Network::Network()+0x170>)
 8015b7c:	f000 ffb4 	bl	8016ae8 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))>
 8015b80:	a806      	add	r0, sp, #24
 8015b82:	f001 faf3 	bl	801716c <NetworkParams::NetworkParams()>
 8015b86:	a806      	add	r0, sp, #24
 8015b88:	f001 fafa 	bl	8017180 <NetworkParams::Load()>
 8015b8c:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d15b      	bne.n	8015c4c <Network::Network()+0x148>
 8015b94:	4a38      	ldr	r2, [pc, #224]	@ (8015c78 <Network::Network()+0x174>)
 8015b96:	f104 0315 	add.w	r3, r4, #21
 8015b9a:	f104 0120 	add.w	r1, r4, #32
 8015b9e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015ba2:	f803 0f01 	strb.w	r0, [r3, #1]!
 8015ba6:	428b      	cmp	r3, r1
 8015ba8:	d1f9      	bne.n	8015b9e <Network::Network()+0x9a>
 8015baa:	7deb      	ldrb	r3, [r5, #23]
 8015bac:	091a      	lsrs	r2, r3, #4
 8015bae:	2b9f      	cmp	r3, #159	@ 0x9f
 8015bb0:	f003 030f 	and.w	r3, r3, #15
 8015bb4:	bf94      	ite	ls
 8015bb6:	3230      	addls	r2, #48	@ 0x30
 8015bb8:	3237      	addhi	r2, #55	@ 0x37
 8015bba:	2b09      	cmp	r3, #9
 8015bbc:	bf94      	ite	ls
 8015bbe:	3330      	addls	r3, #48	@ 0x30
 8015bc0:	3337      	addhi	r3, #55	@ 0x37
 8015bc2:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8015bc6:	7e2b      	ldrb	r3, [r5, #24]
 8015bc8:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
 8015bcc:	2b9f      	cmp	r3, #159	@ 0x9f
 8015bce:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8015bd2:	f003 030f 	and.w	r3, r3, #15
 8015bd6:	bf94      	ite	ls
 8015bd8:	3230      	addls	r2, #48	@ 0x30
 8015bda:	3237      	addhi	r2, #55	@ 0x37
 8015bdc:	2b09      	cmp	r3, #9
 8015bde:	bf94      	ite	ls
 8015be0:	3330      	addls	r3, #48	@ 0x30
 8015be2:	3337      	addhi	r3, #55	@ 0x37
 8015be4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8015be8:	7e6b      	ldrb	r3, [r5, #25]
 8015bea:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 8015bee:	2b9f      	cmp	r3, #159	@ 0x9f
 8015bf0:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8015bf4:	f003 030f 	and.w	r3, r3, #15
 8015bf8:	bf94      	ite	ls
 8015bfa:	3230      	addls	r2, #48	@ 0x30
 8015bfc:	3237      	addhi	r2, #55	@ 0x37
 8015bfe:	2b09      	cmp	r3, #9
 8015c00:	bf94      	ite	ls
 8015c02:	3330      	addls	r3, #48	@ 0x30
 8015c04:	3337      	addhi	r3, #55	@ 0x37
 8015c06:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 8015c10:	f884 3027 	strb.w	r3, [r4, #39]	@ 0x27
 8015c14:	6820      	ldr	r0, [r4, #0]
 8015c16:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8015c18:	f104 0316 	add.w	r3, r4, #22
 8015c1c:	61eb      	str	r3, [r5, #28]
 8015c1e:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8015c22:	f88d 3017 	strb.w	r3, [sp, #23]
 8015c26:	1e43      	subs	r3, r0, #1
 8015c28:	4258      	negs	r0, r3
 8015c2a:	4158      	adcs	r0, r3
 8015c2c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8015c30:	f002 fd96 	bl	8018760 <net::display_emac_status(bool)>
 8015c34:	f10d 0317 	add.w	r3, sp, #23
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	6820      	ldr	r0, [r4, #0]
 8015c3c:	463b      	mov	r3, r7
 8015c3e:	4632      	mov	r2, r6
 8015c40:	4629      	mov	r1, r5
 8015c42:	f7f2 fb37 	bl	80082b4 <net::net_init(net::Link, net::ip_addr, net::ip_addr, net::ip_addr, bool&)>
 8015c46:	4620      	mov	r0, r4
 8015c48:	b01f      	add	sp, #124	@ 0x7c
 8015c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c4c:	223f      	movs	r2, #63	@ 0x3f
 8015c4e:	f10d 012d 	add.w	r1, sp, #45	@ 0x2d
 8015c52:	f104 0016 	add.w	r0, r4, #22
 8015c56:	f7ff febf 	bl	80159d8 <strncpy.isra.0>
 8015c5a:	f884 6055 	strb.w	r6, [r4, #85]	@ 0x55
 8015c5e:	e7d9      	b.n	8015c14 <Network::Network()+0x110>
 8015c60:	2000e210 	andcs	lr, r0, r0, lsl r2
 8015c64:	0801db44 	stmdaeq	r1, {r2, r6, r8, r9, fp, ip, lr, pc}
 8015c68:	2000e230 	andcs	lr, r0, r0, lsr r2
 8015c6c:	2000e244 	andcs	lr, r0, r4, asr #4
 8015c70:	0801db49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip, lr, pc}
 8015c74:	08015a25 	stmdaeq	r1, {r0, r2, r5, r9, fp, ip, lr}
 8015c78:	0801db68 	stmdaeq	r1, {r3, r5, r6, r8, r9, fp, ip, lr, pc}

08015c7c <Network::SetIp(unsigned long)>:
 8015c7c:	b510      	push	{r4, lr}
 8015c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8015cb4 <Network::SetIp(unsigned long)+0x38>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	428b      	cmp	r3, r1
 8015c84:	b086      	sub	sp, #24
 8015c86:	460c      	mov	r4, r1
 8015c88:	d012      	beq.n	8015cb0 <Network::SetIp(unsigned long)+0x34>
 8015c8a:	4608      	mov	r0, r1
 8015c8c:	f000 fe04 	bl	8016898 <net::net_set_primary_ip(net::ip_addr)>
 8015c90:	9405      	str	r4, [sp, #20]
 8015c92:	2302      	movs	r3, #2
 8015c94:	2400      	movs	r4, #0
 8015c96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015c9a:	2204      	movs	r2, #4
 8015c9c:	4806      	ldr	r0, [pc, #24]	@ (8015cb8 <Network::SetIp(unsigned long)+0x3c>)
 8015c9e:	9200      	str	r2, [sp, #0]
 8015ca0:	6800      	ldr	r0, [r0, #0]
 8015ca2:	ab05      	add	r3, sp, #20
 8015ca4:	4621      	mov	r1, r4
 8015ca6:	f002 fe71 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8015caa:	4620      	mov	r0, r4
 8015cac:	f7ff fea6 	bl	80159fc <NetworkStore::SaveDhcp(bool)>
 8015cb0:	b006      	add	sp, #24
 8015cb2:	bd10      	pop	{r4, pc}
 8015cb4:	2000e230 	andcs	lr, r0, r0, lsr r2
 8015cb8:	2000e2dc 	ldrdcs	lr, [r0], -ip

08015cbc <Network::SetNetmask(unsigned long)>:
 8015cbc:	b510      	push	{r4, lr}
 8015cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8015cec <Network::SetNetmask(unsigned long)+0x30>)
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	428b      	cmp	r3, r1
 8015cc4:	b086      	sub	sp, #24
 8015cc6:	460c      	mov	r4, r1
 8015cc8:	d00e      	beq.n	8015ce8 <Network::SetNetmask(unsigned long)+0x2c>
 8015cca:	4608      	mov	r0, r1
 8015ccc:	f000 fe9e 	bl	8016a0c <net::netif_set_netmask(net::ip_addr)>
 8015cd0:	2304      	movs	r3, #4
 8015cd2:	2100      	movs	r1, #0
 8015cd4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015cd8:	4805      	ldr	r0, [pc, #20]	@ (8015cf0 <Network::SetNetmask(unsigned long)+0x34>)
 8015cda:	9300      	str	r3, [sp, #0]
 8015cdc:	6800      	ldr	r0, [r0, #0]
 8015cde:	9405      	str	r4, [sp, #20]
 8015ce0:	ab05      	add	r3, sp, #20
 8015ce2:	2208      	movs	r2, #8
 8015ce4:	f002 fe52 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8015ce8:	b006      	add	sp, #24
 8015cea:	bd10      	pop	{r4, pc}
 8015cec:	2000e230 	andcs	lr, r0, r0, lsr r2
 8015cf0:	2000e2dc 	ldrdcs	lr, [r0], -ip

08015cf4 <Network::SetGatewayIp(unsigned long)>:
 8015cf4:	b510      	push	{r4, lr}
 8015cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8015d28 <Network::SetGatewayIp(unsigned long)+0x34>)
 8015cf8:	689b      	ldr	r3, [r3, #8]
 8015cfa:	428b      	cmp	r3, r1
 8015cfc:	b086      	sub	sp, #24
 8015cfe:	460c      	mov	r4, r1
 8015d00:	d00f      	beq.n	8015d22 <Network::SetGatewayIp(unsigned long)+0x2e>
 8015d02:	4608      	mov	r0, r1
 8015d04:	f000 fe96 	bl	8016a34 <net::netif_set_gw(net::ip_addr)>
 8015d08:	2308      	movs	r3, #8
 8015d0a:	2100      	movs	r1, #0
 8015d0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015d10:	4806      	ldr	r0, [pc, #24]	@ (8015d2c <Network::SetGatewayIp(unsigned long)+0x38>)
 8015d12:	9405      	str	r4, [sp, #20]
 8015d14:	2304      	movs	r3, #4
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	6800      	ldr	r0, [r0, #0]
 8015d1a:	ab05      	add	r3, sp, #20
 8015d1c:	220c      	movs	r2, #12
 8015d1e:	f002 fe35 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8015d22:	b006      	add	sp, #24
 8015d24:	bd10      	pop	{r4, pc}
 8015d26:	bf00      	nop
 8015d28:	2000e230 	andcs	lr, r0, r0, lsr r2
 8015d2c:	2000e2dc 	ldrdcs	lr, [r0], -ip

08015d30 <Network::SetHostName(char const*)>:
 8015d30:	b530      	push	{r4, r5, lr}
 8015d32:	f100 0416 	add.w	r4, r0, #22
 8015d36:	4605      	mov	r5, r0
 8015d38:	b085      	sub	sp, #20
 8015d3a:	223f      	movs	r2, #63	@ 0x3f
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	f7ff fe4b 	bl	80159d8 <strncpy.isra.0>
 8015d42:	2300      	movs	r3, #0
 8015d44:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8015d48:	4623      	mov	r3, r4
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	7811      	ldrb	r1, [r2, #0]
 8015d50:	2900      	cmp	r1, #0
 8015d52:	d1fa      	bne.n	8015d4a <Network::SetHostName(char const*)+0x1a>
 8015d54:	1b12      	subs	r2, r2, r4
 8015d56:	2a40      	cmp	r2, #64	@ 0x40
 8015d58:	bf28      	it	cs
 8015d5a:	2240      	movcs	r2, #64	@ 0x40
 8015d5c:	2320      	movs	r3, #32
 8015d5e:	4808      	ldr	r0, [pc, #32]	@ (8015d80 <Network::SetHostName(char const*)+0x50>)
 8015d60:	9102      	str	r1, [sp, #8]
 8015d62:	9301      	str	r3, [sp, #4]
 8015d64:	9200      	str	r2, [sp, #0]
 8015d66:	6800      	ldr	r0, [r0, #0]
 8015d68:	4623      	mov	r3, r4
 8015d6a:	2215      	movs	r2, #21
 8015d6c:	f002 fe0e 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8015d70:	f7ff fc6a 	bl	8015648 <network::mdns_announcement()>
 8015d74:	b005      	add	sp, #20
 8015d76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d7a:	f002 bd57 	b.w	801882c <net::display_hostname()>
 8015d7e:	bf00      	nop
 8015d80:	2000e2dc 	ldrdcs	lr, [r0], -ip

08015d84 <Network::SetZeroconf()>:
 8015d84:	b508      	push	{r3, lr}
 8015d86:	f000 f869 	bl	8015e5c <net::autoip_start()>
 8015d8a:	2000      	movs	r0, #0
 8015d8c:	f7ff fe36 	bl	80159fc <NetworkStore::SaveDhcp(bool)>
 8015d90:	bd08      	pop	{r3, pc}

08015d92 <Network::EnableDhcp()>:
 8015d92:	b508      	push	{r3, lr}
 8015d94:	f000 fada 	bl	801634c <net::dhcp_start()>
 8015d98:	2001      	movs	r0, #1
 8015d9a:	f7ff fe2f 	bl	80159fc <NetworkStore::SaveDhcp(bool)>
 8015d9e:	bd08      	pop	{r3, pc}

08015da0 <Network::SetQueuedStaticIp(unsigned long, unsigned long)>:
 8015da0:	b909      	cbnz	r1, 8015da6 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x6>
 8015da2:	4b08      	ldr	r3, [pc, #32]	@ (8015dc4 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x24>)
 8015da4:	6819      	ldr	r1, [r3, #0]
 8015da6:	f8c0 10a8 	str.w	r1, [r0, #168]	@ 0xa8
 8015daa:	b90a      	cbnz	r2, 8015db0 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x10>
 8015dac:	4b05      	ldr	r3, [pc, #20]	@ (8015dc4 <Network::SetQueuedStaticIp(unsigned long, unsigned long)+0x24>)
 8015dae:	685a      	ldr	r2, [r3, #4]
 8015db0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8015db4:	f8c0 20ac 	str.w	r2, [r0, #172]	@ 0xac
 8015db8:	f043 0303 	orr.w	r3, r3, #3
 8015dbc:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 8015dc0:	4770      	bx	lr
 8015dc2:	bf00      	nop
 8015dc4:	2000e230 	andcs	lr, r0, r0, lsr r2

08015dc8 <Network::SetQueuedDefaultRoute(unsigned long)>:
 8015dc8:	b909      	cbnz	r1, 8015dce <Network::SetQueuedDefaultRoute(unsigned long)+0x6>
 8015dca:	4b05      	ldr	r3, [pc, #20]	@ (8015de0 <Network::SetQueuedDefaultRoute(unsigned long)+0x18>)
 8015dcc:	6899      	ldr	r1, [r3, #8]
 8015dce:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8015dd2:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
 8015dd6:	f043 0304 	orr.w	r3, r3, #4
 8015dda:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
 8015dde:	4770      	bx	lr
 8015de0:	2000e230 	andcs	lr, r0, r0, lsr r2

08015de4 <Network::ApplyQueuedConfig()>:
 8015de4:	b538      	push	{r3, r4, r5, lr}
 8015de6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8015dea:	4604      	mov	r4, r0
 8015dec:	b3a3      	cbz	r3, 8015e58 <Network::ApplyQueuedConfig()+0x74>
 8015dee:	07d9      	lsls	r1, r3, #31
 8015df0:	d40f      	bmi.n	8015e12 <Network::ApplyQueuedConfig()+0x2e>
 8015df2:	f013 0f06 	tst.w	r3, #6
 8015df6:	d110      	bne.n	8015e1a <Network::ApplyQueuedConfig()+0x36>
 8015df8:	f013 0508 	ands.w	r5, r3, #8
 8015dfc:	d024      	beq.n	8015e48 <Network::ApplyQueuedConfig()+0x64>
 8015dfe:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 8015e02:	2b01      	cmp	r3, #1
 8015e04:	d101      	bne.n	8015e0a <Network::ApplyQueuedConfig()+0x26>
 8015e06:	f7ff ffc4 	bl	8015d92 <Network::EnableDhcp()>
 8015e0a:	2302      	movs	r3, #2
 8015e0c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8015e10:	e015      	b.n	8015e3e <Network::ApplyQueuedConfig()+0x5a>
 8015e12:	f8d0 10a8 	ldr.w	r1, [r0, #168]	@ 0xa8
 8015e16:	f7ff ff31 	bl	8015c7c <Network::SetIp(unsigned long)>
 8015e1a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8015e1e:	079a      	lsls	r2, r3, #30
 8015e20:	d504      	bpl.n	8015e2c <Network::ApplyQueuedConfig()+0x48>
 8015e22:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8015e26:	4620      	mov	r0, r4
 8015e28:	f7ff ff48 	bl	8015cbc <Network::SetNetmask(unsigned long)>
 8015e2c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8015e30:	075b      	lsls	r3, r3, #29
 8015e32:	d504      	bpl.n	8015e3e <Network::ApplyQueuedConfig()+0x5a>
 8015e34:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f7ff ff5b 	bl	8015cf4 <Network::SetGatewayIp(unsigned long)>
 8015e3e:	2300      	movs	r3, #0
 8015e40:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
 8015e44:	2001      	movs	r0, #1
 8015e46:	bd38      	pop	{r3, r4, r5, pc}
 8015e48:	f013 0310 	ands.w	r3, r3, #16
 8015e4c:	d004      	beq.n	8015e58 <Network::ApplyQueuedConfig()+0x74>
 8015e4e:	f7ff ff99 	bl	8015d84 <Network::SetZeroconf()>
 8015e52:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 8015e56:	e7f5      	b.n	8015e44 <Network::ApplyQueuedConfig()+0x60>
 8015e58:	4618      	mov	r0, r3
 8015e5a:	e7f4      	b.n	8015e46 <Network::ApplyQueuedConfig()+0x62>

08015e5c <net::autoip_start()>:
 8015e5c:	b570      	push	{r4, r5, r6, lr}
 8015e5e:	4e21      	ldr	r6, [pc, #132]	@ (8015ee4 <net::autoip_start()+0x88>)
 8015e60:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 8015e62:	b95c      	cbnz	r4, 8015e7c <net::autoip_start()+0x20>
 8015e64:	201c      	movs	r0, #28
 8015e66:	f006 fd37 	bl	801c8d8 <operator new(unsigned int)>
 8015e6a:	2100      	movs	r1, #0
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	f100 021c 	add.w	r2, r0, #28
 8015e72:	4603      	mov	r3, r0
 8015e74:	f803 1b01 	strb.w	r1, [r3], #1
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	d1fb      	bne.n	8015e74 <net::autoip_start()+0x18>
 8015e7c:	6863      	ldr	r3, [r4, #4]
 8015e7e:	bb7b      	cbnz	r3, 8015ee0 <net::autoip_start()+0x84>
 8015e80:	f104 050c 	add.w	r5, r4, #12
 8015e84:	4918      	ldr	r1, [pc, #96]	@ (8015ee8 <net::autoip_start()+0x8c>)
 8015e86:	4628      	mov	r0, r5
 8015e88:	f001 fec2 	bl	8017c10 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>
 8015e8c:	8822      	ldrh	r2, [r4, #0]
 8015e8e:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 8015e92:	429a      	cmp	r2, r3
 8015e94:	d01c      	beq.n	8015ed0 <net::autoip_start()+0x74>
 8015e96:	f8b6 3017 	ldrh.w	r3, [r6, #23]
 8015e9a:	4a14      	ldr	r2, [pc, #80]	@ (8015eec <net::autoip_start()+0x90>)
 8015e9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015ea0:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8015ea2:	7a1b      	ldrb	r3, [r3, #8]
 8015ea4:	ba12      	rev	r2, r2
 8015ea6:	4413      	add	r3, r2
 8015ea8:	b29b      	uxth	r3, r3
 8015eaa:	4a11      	ldr	r2, [pc, #68]	@ (8015ef0 <net::autoip_start()+0x94>)
 8015eac:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 8015eb0:	f443 037e 	orr.w	r3, r3, #16646144	@ 0xfe0000
 8015eb4:	4293      	cmp	r3, r2
 8015eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8015ef4 <net::autoip_start()+0x98>)
 8015eb8:	bf98      	it	ls
 8015eba:	f503 437e 	addls.w	r3, r3, #65024	@ 0xfe00
 8015ebe:	4293      	cmp	r3, r2
 8015ec0:	6023      	str	r3, [r4, #0]
 8015ec2:	bf84      	itt	hi
 8015ec4:	f5a3 437e 	subhi.w	r3, r3, #65024	@ 0xfe00
 8015ec8:	6023      	strhi	r3, [r4, #0]
 8015eca:	6823      	ldr	r3, [r4, #0]
 8015ecc:	ba1b      	rev	r3, r3
 8015ece:	6023      	str	r3, [r4, #0]
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	6821      	ldr	r1, [r4, #0]
 8015ed4:	6063      	str	r3, [r4, #4]
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015edc:	f001 bd62 	b.w	80179a4 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 8015ee0:	bd70      	pop	{r4, r5, r6, pc}
 8015ee2:	bf00      	nop
 8015ee4:	2000e230 	andcs	lr, r0, r0, lsr r2
 8015ee8:	08015f1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, fp, ip, lr}
 8015eec:	0001fea9 	andeq	pc, r1, r9, lsr #29
 8015ef0:	a9fe00ff 	ldmibge	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}^
 8015ef4:	a9fefeff 	ldmibge	lr!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr, pc}^

08015ef8 <net::autoip_stop()>:
 8015ef8:	4b07      	ldr	r3, [pc, #28]	@ (8015f18 <net::autoip_stop()+0x20>)
 8015efa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8015efc:	b151      	cbz	r1, 8015f14 <net::autoip_stop()+0x1c>
 8015efe:	2200      	movs	r2, #0
 8015f00:	604a      	str	r2, [r1, #4]
 8015f02:	8819      	ldrh	r1, [r3, #0]
 8015f04:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 8015f08:	4299      	cmp	r1, r3
 8015f0a:	d103      	bne.n	8015f14 <net::autoip_stop()+0x1c>
 8015f0c:	4611      	mov	r1, r2
 8015f0e:	4610      	mov	r0, r2
 8015f10:	f000 bda4 	b.w	8016a5c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	2000e230 	andcs	lr, r0, r0, lsr r2

08015f1c <net::autoip_conflict_callback(net::acd::Callback)>:
 8015f1c:	b510      	push	{r4, lr}
 8015f1e:	4c11      	ldr	r4, [pc, #68]	@ (8015f64 <net::autoip_conflict_callback(net::acd::Callback)+0x48>)
 8015f20:	2801      	cmp	r0, #1
 8015f22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015f24:	4602      	mov	r2, r0
 8015f26:	d00e      	beq.n	8015f46 <net::autoip_conflict_callback(net::acd::Callback)+0x2a>
 8015f28:	2802      	cmp	r0, #2
 8015f2a:	d013      	beq.n	8015f54 <net::autoip_conflict_callback(net::acd::Callback)+0x38>
 8015f2c:	b950      	cbnz	r0, 8015f44 <net::autoip_conflict_callback(net::acd::Callback)+0x28>
 8015f2e:	2102      	movs	r1, #2
 8015f30:	6059      	str	r1, [r3, #4]
 8015f32:	6818      	ldr	r0, [r3, #0]
 8015f34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015f38:	f000 fd90 	bl	8016a5c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8015f3c:	7ea3      	ldrb	r3, [r4, #26]
 8015f3e:	f043 0304 	orr.w	r3, r3, #4
 8015f42:	76a3      	strb	r3, [r4, #26]
 8015f44:	bd10      	pop	{r4, pc}
 8015f46:	7a1a      	ldrb	r2, [r3, #8]
 8015f48:	3201      	adds	r2, #1
 8015f4a:	721a      	strb	r2, [r3, #8]
 8015f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f50:	f7ff bf84 	b.w	8015e5c <net::autoip_start()>
 8015f54:	2200      	movs	r2, #0
 8015f56:	601a      	str	r2, [r3, #0]
 8015f58:	f7ff ffce 	bl	8015ef8 <net::autoip_stop()>
 8015f5c:	7ea3      	ldrb	r3, [r4, #26]
 8015f5e:	f023 0304 	bic.w	r3, r3, #4
 8015f62:	e7ee      	b.n	8015f42 <net::autoip_conflict_callback(net::acd::Callback)+0x26>
 8015f64:	2000e230 	andcs	lr, r0, r0, lsr r2

08015f68 <net::dhcp_bind()>:
 8015f68:	4833      	ldr	r0, [pc, #204]	@ (8016038 <net::dhcp_bind()+0xd0>)
 8015f6a:	6a03      	ldr	r3, [r0, #32]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	b410      	push	{r4}
 8015f70:	82da      	strh	r2, [r3, #22]
 8015f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f74:	1c51      	adds	r1, r2, #1
 8015f76:	d009      	beq.n	8015f8c <net::dhcp_bind()+0x24>
 8015f78:	321e      	adds	r2, #30
 8015f7a:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 8015f7e:	d23f      	bcs.n	8016000 <net::dhcp_bind()+0x98>
 8015f80:	2a3b      	cmp	r2, #59	@ 0x3b
 8015f82:	d940      	bls.n	8016006 <net::dhcp_bind()+0x9e>
 8015f84:	213c      	movs	r1, #60	@ 0x3c
 8015f86:	fbb2 f2f1 	udiv	r2, r2, r1
 8015f8a:	831a      	strh	r2, [r3, #24]
 8015f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015f8e:	1c54      	adds	r4, r2, #1
 8015f90:	d00b      	beq.n	8015faa <net::dhcp_bind()+0x42>
 8015f92:	321e      	adds	r2, #30
 8015f94:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 8015f98:	d237      	bcs.n	801600a <net::dhcp_bind()+0xa2>
 8015f9a:	2a3b      	cmp	r2, #59	@ 0x3b
 8015f9c:	d938      	bls.n	8016010 <net::dhcp_bind()+0xa8>
 8015f9e:	213c      	movs	r1, #60	@ 0x3c
 8015fa0:	fbb2 f2f1 	udiv	r2, r2, r1
 8015fa4:	b292      	uxth	r2, r2
 8015fa6:	81da      	strh	r2, [r3, #14]
 8015fa8:	825a      	strh	r2, [r3, #18]
 8015faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015fac:	1c51      	adds	r1, r2, #1
 8015fae:	d00b      	beq.n	8015fc8 <net::dhcp_bind()+0x60>
 8015fb0:	321e      	adds	r2, #30
 8015fb2:	f5b2 1f70 	cmp.w	r2, #3932160	@ 0x3c0000
 8015fb6:	d22d      	bcs.n	8016014 <net::dhcp_bind()+0xac>
 8015fb8:	2a3b      	cmp	r2, #59	@ 0x3b
 8015fba:	d92e      	bls.n	801601a <net::dhcp_bind()+0xb2>
 8015fbc:	213c      	movs	r1, #60	@ 0x3c
 8015fbe:	fbb2 f2f1 	udiv	r2, r2, r1
 8015fc2:	b292      	uxth	r2, r2
 8015fc4:	821a      	strh	r2, [r3, #16]
 8015fc6:	829a      	strh	r2, [r3, #20]
 8015fc8:	8a1a      	ldrh	r2, [r3, #16]
 8015fca:	89d9      	ldrh	r1, [r3, #14]
 8015fcc:	4291      	cmp	r1, r2
 8015fce:	d302      	bcc.n	8015fd6 <net::dhcp_bind()+0x6e>
 8015fd0:	b10a      	cbz	r2, 8015fd6 <net::dhcp_bind()+0x6e>
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	81da      	strh	r2, [r3, #14]
 8015fd6:	7a9a      	ldrb	r2, [r3, #10]
 8015fd8:	07d4      	lsls	r4, r2, #31
 8015fda:	d520      	bpl.n	801601e <net::dhcp_bind()+0xb6>
 8015fdc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8015fde:	7a1c      	ldrb	r4, [r3, #8]
 8015fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015fe2:	2c0a      	cmp	r4, #10
 8015fe4:	bf1f      	itttt	ne
 8015fe6:	240a      	movne	r4, #10
 8015fe8:	811c      	strhne	r4, [r3, #8]
 8015fea:	2400      	movne	r4, #0
 8015fec:	819c      	strhne	r4, [r3, #12]
 8015fee:	7e84      	ldrb	r4, [r0, #26]
 8015ff0:	f044 0402 	orr.w	r4, r4, #2
 8015ff4:	7684      	strb	r4, [r0, #26]
 8015ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ffa:	6a18      	ldr	r0, [r3, #32]
 8015ffc:	f000 bd2e 	b.w	8016a5c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8016000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016004:	e7c1      	b.n	8015f8a <net::dhcp_bind()+0x22>
 8016006:	2201      	movs	r2, #1
 8016008:	e7bf      	b.n	8015f8a <net::dhcp_bind()+0x22>
 801600a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801600e:	e7c9      	b.n	8015fa4 <net::dhcp_bind()+0x3c>
 8016010:	2201      	movs	r2, #1
 8016012:	e7c7      	b.n	8015fa4 <net::dhcp_bind()+0x3c>
 8016014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016018:	e7d3      	b.n	8015fc2 <net::dhcp_bind()+0x5a>
 801601a:	2201      	movs	r2, #1
 801601c:	e7d1      	b.n	8015fc2 <net::dhcp_bind()+0x5a>
 801601e:	6a1a      	ldr	r2, [r3, #32]
 8016020:	0611      	lsls	r1, r2, #24
 8016022:	d507      	bpl.n	8016034 <net::dhcp_bind()+0xcc>
 8016024:	b2d2      	uxtb	r2, r2
 8016026:	2abf      	cmp	r2, #191	@ 0xbf
 8016028:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801602c:	bf88      	it	hi
 801602e:	f06f 417f 	mvnhi.w	r1, #4278190080	@ 0xff000000
 8016032:	e7d4      	b.n	8015fde <net::dhcp_bind()+0x76>
 8016034:	21ff      	movs	r1, #255	@ 0xff
 8016036:	e7d2      	b.n	8015fde <net::dhcp_bind()+0x76>
 8016038:	2000e230 	andcs	lr, r0, r0, lsr r2

0801603c <net::message_init()>:
 801603c:	b508      	push	{r3, lr}
 801603e:	4b0c      	ldr	r3, [pc, #48]	@ (8016070 <net::message_init()+0x34>)
 8016040:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8016044:	2100      	movs	r1, #0
 8016046:	4618      	mov	r0, r3
 8016048:	f005 ff0c 	bl	801be64 <memset>
 801604c:	f240 1201 	movw	r2, #257	@ 0x101
 8016050:	8002      	strh	r2, [r0, #0]
 8016052:	2206      	movs	r2, #6
 8016054:	7082      	strb	r2, [r0, #2]
 8016056:	4a07      	ldr	r2, [pc, #28]	@ (8016074 <net::message_init()+0x38>)
 8016058:	6951      	ldr	r1, [r2, #20]
 801605a:	8b12      	ldrh	r2, [r2, #24]
 801605c:	8402      	strh	r2, [r0, #32]
 801605e:	4a06      	ldr	r2, [pc, #24]	@ (8016078 <net::message_init()+0x3c>)
 8016060:	f8c0 20ec 	str.w	r2, [r0, #236]	@ 0xec
 8016064:	f240 1235 	movw	r2, #309	@ 0x135
 8016068:	f8a0 20f0 	strh.w	r2, [r0, #240]	@ 0xf0
 801606c:	61c1      	str	r1, [r0, #28]
 801606e:	bd08      	pop	{r3, pc}
 8016070:	10008000 	andne	r8, r0, r0
 8016074:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016078:	63538263 	cmpvs	r3, #805306374	@ 0x30000006

0801607c <net::dhcp_discover()>:
 801607c:	4a27      	ldr	r2, [pc, #156]	@ (801611c <net::dhcp_discover()+0xa0>)
 801607e:	b513      	push	{r0, r1, r4, lr}
 8016080:	6a14      	ldr	r4, [r2, #32]
 8016082:	7a21      	ldrb	r1, [r4, #8]
 8016084:	2906      	cmp	r1, #6
 8016086:	bf1c      	itt	ne
 8016088:	2106      	movne	r1, #6
 801608a:	8121      	strhne	r1, [r4, #8]
 801608c:	f04f 0300 	mov.w	r3, #0
 8016090:	6a10      	ldr	r0, [r2, #32]
 8016092:	6223      	str	r3, [r4, #32]
 8016094:	bf18      	it	ne
 8016096:	81a3      	strhne	r3, [r4, #12]
 8016098:	7a43      	ldrb	r3, [r0, #9]
 801609a:	b923      	cbnz	r3, 80160a6 <net::dhcp_discover()+0x2a>
 801609c:	6843      	ldr	r3, [r0, #4]
 801609e:	ba1b      	rev	r3, r3
 80160a0:	3301      	adds	r3, #1
 80160a2:	ba1b      	rev	r3, r3
 80160a4:	6043      	str	r3, [r0, #4]
 80160a6:	491e      	ldr	r1, [pc, #120]	@ (8016120 <net::dhcp_discover()+0xa4>)
 80160a8:	6843      	ldr	r3, [r0, #4]
 80160aa:	604b      	str	r3, [r1, #4]
 80160ac:	f643 5301 	movw	r3, #15617	@ 0x3d01
 80160b0:	f8a1 30f2 	strh.w	r3, [r1, #242]	@ 0xf2
 80160b4:	f240 1307 	movw	r3, #263	@ 0x107
 80160b8:	f8a1 30f4 	strh.w	r3, [r1, #244]	@ 0xf4
 80160bc:	8a93      	ldrh	r3, [r2, #20]
 80160be:	f8a1 30f6 	strh.w	r3, [r1, #246]	@ 0xf6
 80160c2:	8ad3      	ldrh	r3, [r2, #22]
 80160c4:	f8a1 30f8 	strh.w	r3, [r1, #248]	@ 0xf8
 80160c8:	8b13      	ldrh	r3, [r2, #24]
 80160ca:	f8a1 30fa 	strh.w	r3, [r1, #250]	@ 0xfa
 80160ce:	4a15      	ldr	r2, [pc, #84]	@ (8016124 <net::dhcp_discover()+0xa8>)
 80160d0:	4b15      	ldr	r3, [pc, #84]	@ (8016128 <net::dhcp_discover()+0xac>)
 80160d2:	e9c1 233f 	strd	r2, r3, [r1, #252]	@ 0xfc
 80160d6:	23ff      	movs	r3, #255	@ 0xff
 80160d8:	f881 3104 	strb.w	r3, [r1, #260]	@ 0x104
 80160dc:	2343      	movs	r3, #67	@ 0x43
 80160de:	9300      	str	r3, [sp, #0]
 80160e0:	6800      	ldr	r0, [r0, #0]
 80160e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80160e6:	f240 1205 	movw	r2, #261	@ 0x105
 80160ea:	f000 ffa7 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 80160ee:	7a63      	ldrb	r3, [r4, #9]
 80160f0:	2bff      	cmp	r3, #255	@ 0xff
 80160f2:	bf1c      	itt	ne
 80160f4:	3301      	addne	r3, #1
 80160f6:	7263      	strbne	r3, [r4, #9]
 80160f8:	7a62      	ldrb	r2, [r4, #9]
 80160fa:	2a05      	cmp	r2, #5
 80160fc:	bf9a      	itte	ls
 80160fe:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
 8016102:	4093      	lslls	r3, r2
 8016104:	f64e 2360 	movwhi	r3, #60000	@ 0xea60
 8016108:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801610c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016110:	fbb3 f3f2 	udiv	r3, r3, r2
 8016114:	81a3      	strh	r3, [r4, #12]
 8016116:	b002      	add	sp, #8
 8016118:	bd10      	pop	{r4, pc}
 801611a:	bf00      	nop
 801611c:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016120:	10008000 	andne	r8, r0, r0
 8016124:	03010637 	movweq	r0, #5687	@ 0x1637
 8016128:	3b3a330f 	blcc	8ea2d6c <_sidata+0xe81460>

0801612c <net::memcpy_ip(unsigned char*, unsigned long)>:
 801612c:	6001      	str	r1, [r0, #0]
 801612e:	4770      	bx	lr

08016130 <net::send_request()>:
 8016130:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016132:	4c31      	ldr	r4, [pc, #196]	@ (80161f8 <net::send_request()+0xc8>)
 8016134:	4d31      	ldr	r5, [pc, #196]	@ (80161fc <net::send_request()+0xcc>)
 8016136:	f643 5303 	movw	r3, #15619	@ 0x3d03
 801613a:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 801613e:	f240 1307 	movw	r3, #263	@ 0x107
 8016142:	f8a4 30f4 	strh.w	r3, [r4, #244]	@ 0xf4
 8016146:	8aab      	ldrh	r3, [r5, #20]
 8016148:	f8a4 30f6 	strh.w	r3, [r4, #246]	@ 0xf6
 801614c:	8aeb      	ldrh	r3, [r5, #22]
 801614e:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8016152:	8b2b      	ldrh	r3, [r5, #24]
 8016154:	6a2e      	ldr	r6, [r5, #32]
 8016156:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 801615a:	f240 4332 	movw	r3, #1074	@ 0x432
 801615e:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8016162:	6a31      	ldr	r1, [r6, #32]
 8016164:	f104 00fe 	add.w	r0, r4, #254	@ 0xfe
 8016168:	f7ff ffe0 	bl	801612c <net::memcpy_ip(unsigned char*, unsigned long)>
 801616c:	f240 4336 	movw	r3, #1078	@ 0x436
 8016170:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8016174:	69f1      	ldr	r1, [r6, #28]
 8016176:	f504 7082 	add.w	r0, r4, #260	@ 0x104
 801617a:	f7ff ffd7 	bl	801612c <net::memcpy_ip(unsigned char*, unsigned long)>
 801617e:	230c      	movs	r3, #12
 8016180:	f8a4 3108 	strh.w	r3, [r4, #264]	@ 0x108
 8016184:	69eb      	ldr	r3, [r5, #28]
 8016186:	221e      	movs	r2, #30
 8016188:	3b01      	subs	r3, #1
 801618a:	f204 1509 	addw	r5, r4, #265	@ 0x109
 801618e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8016192:	1c51      	adds	r1, r2, #1
 8016194:	bb58      	cbnz	r0, 80161ee <net::send_request()+0xbe>
 8016196:	f1a2 031e 	sub.w	r3, r2, #30
 801619a:	f884 3109 	strb.w	r3, [r4, #265]	@ 0x109
 801619e:	18a3      	adds	r3, r4, r2
 80161a0:	440c      	add	r4, r1
 80161a2:	2037      	movs	r0, #55	@ 0x37
 80161a4:	2106      	movs	r1, #6
 80161a6:	f883 00ec 	strb.w	r0, [r3, #236]	@ 0xec
 80161aa:	f884 10ec 	strb.w	r1, [r4, #236]	@ 0xec
 80161ae:	f883 10f0 	strb.w	r1, [r3, #240]	@ 0xf0
 80161b2:	210f      	movs	r1, #15
 80161b4:	f883 10f1 	strb.w	r1, [r3, #241]	@ 0xf1
 80161b8:	213a      	movs	r1, #58	@ 0x3a
 80161ba:	f883 10f2 	strb.w	r1, [r3, #242]	@ 0xf2
 80161be:	2001      	movs	r0, #1
 80161c0:	213b      	movs	r1, #59	@ 0x3b
 80161c2:	f883 00ee 	strb.w	r0, [r3, #238]	@ 0xee
 80161c6:	f883 10f3 	strb.w	r1, [r3, #243]	@ 0xf3
 80161ca:	2003      	movs	r0, #3
 80161cc:	21ff      	movs	r1, #255	@ 0xff
 80161ce:	f883 10f4 	strb.w	r1, [r3, #244]	@ 0xf4
 80161d2:	f883 00ef 	strb.w	r0, [r3, #239]	@ 0xef
 80161d6:	2343      	movs	r3, #67	@ 0x43
 80161d8:	9300      	str	r3, [sp, #0]
 80161da:	32f5      	adds	r2, #245	@ 0xf5
 80161dc:	4906      	ldr	r1, [pc, #24]	@ (80161f8 <net::send_request()+0xc8>)
 80161de:	6830      	ldr	r0, [r6, #0]
 80161e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80161e4:	b292      	uxth	r2, r2
 80161e6:	f000 ff29 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 80161ea:	b002      	add	sp, #8
 80161ec:	bd70      	pop	{r4, r5, r6, pc}
 80161ee:	f805 0f01 	strb.w	r0, [r5, #1]!
 80161f2:	460a      	mov	r2, r1
 80161f4:	e7cb      	b.n	801618e <net::send_request()+0x5e>
 80161f6:	bf00      	nop
 80161f8:	10008000 	andne	r8, r0, r0
 80161fc:	2000e230 	andcs	lr, r0, r0, lsr r2

08016200 <net::dhcp_select()>:
 8016200:	4b11      	ldr	r3, [pc, #68]	@ (8016248 <net::dhcp_select()+0x48>)
 8016202:	b510      	push	{r4, lr}
 8016204:	6a1c      	ldr	r4, [r3, #32]
 8016206:	7a23      	ldrb	r3, [r4, #8]
 8016208:	2b01      	cmp	r3, #1
 801620a:	bf1f      	itttt	ne
 801620c:	2301      	movne	r3, #1
 801620e:	8123      	strhne	r3, [r4, #8]
 8016210:	2300      	movne	r3, #0
 8016212:	81a3      	strhne	r3, [r4, #12]
 8016214:	f7ff ff8c 	bl	8016130 <net::send_request()>
 8016218:	7a63      	ldrb	r3, [r4, #9]
 801621a:	2bff      	cmp	r3, #255	@ 0xff
 801621c:	bf1c      	itt	ne
 801621e:	3301      	addne	r3, #1
 8016220:	7263      	strbne	r3, [r4, #9]
 8016222:	7a62      	ldrb	r2, [r4, #9]
 8016224:	2a05      	cmp	r2, #5
 8016226:	bf9d      	ittte	ls
 8016228:	f44f 737a 	movls.w	r3, #1000	@ 0x3e8
 801622c:	4093      	lslls	r3, r2
 801622e:	b29b      	uxthls	r3, r3
 8016230:	f64e 2360 	movwhi	r3, #60000	@ 0xea60
 8016234:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016238:	b29b      	uxth	r3, r3
 801623a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801623e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016242:	81a3      	strh	r3, [r4, #12]
 8016244:	bd10      	pop	{r4, pc}
 8016246:	bf00      	nop
 8016248:	2000e230 	andcs	lr, r0, r0, lsr r2

0801624c <net::dhcp_reboot()>:
 801624c:	4b12      	ldr	r3, [pc, #72]	@ (8016298 <net::dhcp_reboot()+0x4c>)
 801624e:	b510      	push	{r4, lr}
 8016250:	6a1c      	ldr	r4, [r3, #32]
 8016252:	7a23      	ldrb	r3, [r4, #8]
 8016254:	2b03      	cmp	r3, #3
 8016256:	bf1f      	itttt	ne
 8016258:	2303      	movne	r3, #3
 801625a:	8123      	strhne	r3, [r4, #8]
 801625c:	2300      	movne	r3, #0
 801625e:	81a3      	strhne	r3, [r4, #12]
 8016260:	f7ff ff66 	bl	8016130 <net::send_request()>
 8016264:	7a63      	ldrb	r3, [r4, #9]
 8016266:	2bff      	cmp	r3, #255	@ 0xff
 8016268:	bf1c      	itt	ne
 801626a:	3301      	addne	r3, #1
 801626c:	7263      	strbne	r3, [r4, #9]
 801626e:	7a63      	ldrb	r3, [r4, #9]
 8016270:	2b09      	cmp	r3, #9
 8016272:	bf9f      	itttt	ls
 8016274:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8016278:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 801627c:	00db      	lslls	r3, r3, #3
 801627e:	b29b      	uxthls	r3, r3
 8016280:	bf88      	it	hi
 8016282:	f242 7310 	movwhi	r3, #10000	@ 0x2710
 8016286:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801628a:	b29b      	uxth	r3, r3
 801628c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8016290:	fbb3 f3f2 	udiv	r3, r3, r2
 8016294:	81a3      	strh	r3, [r4, #12]
 8016296:	bd10      	pop	{r4, pc}
 8016298:	2000e230 	andcs	lr, r0, r0, lsr r2

0801629c <net::memcpy_ip(unsigned char const*)>:
 801629c:	6800      	ldr	r0, [r0, #0]
 801629e:	4770      	bx	lr

080162a0 <net::dhcp_handle_ack(net::dhcp::Message const*)>:
 80162a0:	4b0e      	ldr	r3, [pc, #56]	@ (80162dc <net::dhcp_handle_ack(net::dhcp::Message const*)+0x3c>)
 80162a2:	b510      	push	{r4, lr}
 80162a4:	6a1c      	ldr	r4, [r3, #32]
 80162a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162a8:	b913      	cbnz	r3, 80162b0 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x10>
 80162aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80162ac:	085b      	lsrs	r3, r3, #1
 80162ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80162b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80162b2:	b923      	cbnz	r3, 80162be <net::dhcp_handle_ack(net::dhcp::Message const*)+0x1e>
 80162b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80162b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80162ba:	08db      	lsrs	r3, r3, #3
 80162bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80162be:	3010      	adds	r0, #16
 80162c0:	f7ff ffec 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 80162c4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80162c6:	7aa3      	ldrb	r3, [r4, #10]
 80162c8:	6220      	str	r0, [r4, #32]
 80162ca:	b11a      	cbz	r2, 80162d4 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x34>
 80162cc:	f043 0301 	orr.w	r3, r3, #1
 80162d0:	72a3      	strb	r3, [r4, #10]
 80162d2:	bd10      	pop	{r4, pc}
 80162d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80162d8:	e7fa      	b.n	80162d0 <net::dhcp_handle_ack(net::dhcp::Message const*)+0x30>
 80162da:	bf00      	nop
 80162dc:	2000e230 	andcs	lr, r0, r0, lsr r2

080162e0 <net::dhcp_inform()>:
 80162e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162e2:	2044      	movs	r0, #68	@ 0x44
 80162e4:	f000 fe52 	bl	8016f8c <net::udp_begin(unsigned short)>
 80162e8:	4c16      	ldr	r4, [pc, #88]	@ (8016344 <net::dhcp_inform()+0x64>)
 80162ea:	4d17      	ldr	r5, [pc, #92]	@ (8016348 <net::dhcp_inform()+0x68>)
 80162ec:	4606      	mov	r6, r0
 80162ee:	f7ff fea5 	bl	801603c <net::message_init()>
 80162f2:	6829      	ldr	r1, [r5, #0]
 80162f4:	4620      	mov	r0, r4
 80162f6:	f7ff ff19 	bl	801612c <net::memcpy_ip(unsigned char*, unsigned long)>
 80162fa:	f1a4 010c 	sub.w	r1, r4, #12
 80162fe:	f643 5308 	movw	r3, #15624	@ 0x3d08
 8016302:	f8a1 30f2 	strh.w	r3, [r1, #242]	@ 0xf2
 8016306:	f240 1307 	movw	r3, #263	@ 0x107
 801630a:	f8a1 30f4 	strh.w	r3, [r1, #244]	@ 0xf4
 801630e:	8aab      	ldrh	r3, [r5, #20]
 8016310:	f8a1 30f6 	strh.w	r3, [r1, #246]	@ 0xf6
 8016314:	8aeb      	ldrh	r3, [r5, #22]
 8016316:	f8a1 30f8 	strh.w	r3, [r1, #248]	@ 0xf8
 801631a:	8b2b      	ldrh	r3, [r5, #24]
 801631c:	f8a1 30fa 	strh.w	r3, [r1, #250]	@ 0xfa
 8016320:	23ff      	movs	r3, #255	@ 0xff
 8016322:	f881 30fc 	strb.w	r3, [r1, #252]	@ 0xfc
 8016326:	2343      	movs	r3, #67	@ 0x43
 8016328:	9300      	str	r3, [sp, #0]
 801632a:	4630      	mov	r0, r6
 801632c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016330:	22fd      	movs	r2, #253	@ 0xfd
 8016332:	f000 fe83 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 8016336:	2044      	movs	r0, #68	@ 0x44
 8016338:	b002      	add	sp, #8
 801633a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801633e:	f000 be3b 	b.w	8016fb8 <net::udp_end(unsigned short)>
 8016342:	bf00      	nop
 8016344:	1000800c 	andne	r8, r0, ip
 8016348:	2000e230 	andcs	lr, r0, r0, lsr r2

0801634c <net::dhcp_start()>:
 801634c:	b570      	push	{r4, r5, r6, lr}
 801634e:	4d20      	ldr	r5, [pc, #128]	@ (80163d0 <net::dhcp_start()+0x84>)
 8016350:	6a2c      	ldr	r4, [r5, #32]
 8016352:	b96c      	cbnz	r4, 8016370 <net::dhcp_start()+0x24>
 8016354:	2048      	movs	r0, #72	@ 0x48
 8016356:	f006 fabf 	bl	801c8d8 <operator new(unsigned int)>
 801635a:	4b1e      	ldr	r3, [pc, #120]	@ (80163d4 <net::dhcp_start()+0x88>)
 801635c:	6228      	str	r0, [r5, #32]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8016364:	2907      	cmp	r1, #7
 8016366:	4604      	mov	r4, r0
 8016368:	d919      	bls.n	801639e <net::dhcp_start()+0x52>
 801636a:	481b      	ldr	r0, [pc, #108]	@ (80163d8 <net::dhcp_start()+0x8c>)
 801636c:	f003 fd66 	bl	8019e3c <console_error>
 8016370:	2248      	movs	r2, #72	@ 0x48
 8016372:	2100      	movs	r1, #0
 8016374:	4620      	mov	r0, r4
 8016376:	f005 fd75 	bl	801be64 <memset>
 801637a:	2044      	movs	r0, #68	@ 0x44
 801637c:	f000 fe06 	bl	8016f8c <net::udp_begin(unsigned short)>
 8016380:	6020      	str	r0, [r4, #0]
 8016382:	f7ff fe5b 	bl	801603c <net::message_init()>
 8016386:	7ead      	ldrb	r5, [r5, #26]
 8016388:	f015 0501 	ands.w	r5, r5, #1
 801638c:	d11d      	bne.n	80163ca <net::dhcp_start()+0x7e>
 801638e:	7a23      	ldrb	r3, [r4, #8]
 8016390:	2b02      	cmp	r3, #2
 8016392:	d002      	beq.n	801639a <net::dhcp_start()+0x4e>
 8016394:	2302      	movs	r3, #2
 8016396:	8123      	strh	r3, [r4, #8]
 8016398:	81a5      	strh	r5, [r4, #12]
 801639a:	4628      	mov	r0, r5
 801639c:	bd70      	pop	{r4, r5, r6, pc}
 801639e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80163a2:	4a0e      	ldr	r2, [pc, #56]	@ (80163dc <net::dhcp_start()+0x90>)
 80163a4:	1c46      	adds	r6, r0, #1
 80163a6:	f8c3 60a4 	str.w	r6, [r3, #164]	@ 0xa4
 80163aa:	6812      	ldr	r2, [r2, #0]
 80163ac:	1c4e      	adds	r6, r1, #1
 80163ae:	f8c3 60a0 	str.w	r6, [r3, #160]	@ 0xa0
 80163b2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80163b6:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 80163ba:	621a      	str	r2, [r3, #32]
 80163bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80163c0:	e9c3 2009 	strd	r2, r0, [r3, #36]	@ 0x24
 80163c4:	4a06      	ldr	r2, [pc, #24]	@ (80163e0 <net::dhcp_start()+0x94>)
 80163c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80163c8:	e7d2      	b.n	8016370 <net::dhcp_start()+0x24>
 80163ca:	f7ff fe57 	bl	801607c <net::dhcp_discover()>
 80163ce:	e7e4      	b.n	801639a <net::dhcp_start()+0x4e>
 80163d0:	2000e230 	andcs	lr, r0, r0, lsr r2
 80163d4:	2000e3e0 	andcs	lr, r0, r0, ror #7
 80163d8:	0801db74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 80163dc:	2001bcd0 	ldrdcs	fp, [r1], -r0
 80163e0:	08016489 	stmdaeq	r1, {r0, r3, r7, sl, sp, lr}

080163e4 <net::dhcp_release_and_stop()>:
 80163e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80163e8:	4d25      	ldr	r5, [pc, #148]	@ (8016480 <net::dhcp_release_and_stop()+0x9c>)
 80163ea:	6a2c      	ldr	r4, [r5, #32]
 80163ec:	2c00      	cmp	r4, #0
 80163ee:	d044      	beq.n	801647a <net::dhcp_release_and_stop()+0x96>
 80163f0:	7a23      	ldrb	r3, [r4, #8]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d041      	beq.n	801647a <net::dhcp_release_and_stop()+0x96>
 80163f6:	2600      	movs	r6, #0
 80163f8:	69e7      	ldr	r7, [r4, #28]
 80163fa:	61e6      	str	r6, [r4, #28]
 80163fc:	2218      	movs	r2, #24
 80163fe:	4631      	mov	r1, r6
 8016400:	f104 0020 	add.w	r0, r4, #32
 8016404:	f005 fd2e 	bl	801be64 <memset>
 8016408:	6a2b      	ldr	r3, [r5, #32]
 801640a:	8266      	strh	r6, [r4, #18]
 801640c:	6166      	str	r6, [r4, #20]
 801640e:	8326      	strh	r6, [r4, #24]
 8016410:	b363      	cbz	r3, 801646c <net::dhcp_release_and_stop()+0x88>
 8016412:	7a1b      	ldrb	r3, [r3, #8]
 8016414:	2b0a      	cmp	r3, #10
 8016416:	d002      	beq.n	801641e <net::dhcp_release_and_stop()+0x3a>
 8016418:	3b04      	subs	r3, #4
 801641a:	2b01      	cmp	r3, #1
 801641c:	d826      	bhi.n	801646c <net::dhcp_release_and_stop()+0x88>
 801641e:	2600      	movs	r6, #0
 8016420:	8126      	strh	r6, [r4, #8]
 8016422:	81a6      	strh	r6, [r4, #12]
 8016424:	4c17      	ldr	r4, [pc, #92]	@ (8016484 <net::dhcp_release_and_stop()+0xa0>)
 8016426:	f8d5 8020 	ldr.w	r8, [r5, #32]
 801642a:	f243 6307 	movw	r3, #13831	@ 0x3607
 801642e:	f8a4 30f2 	strh.w	r3, [r4, #242]	@ 0xf2
 8016432:	2304      	movs	r3, #4
 8016434:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
 8016438:	f8d8 101c 	ldr.w	r1, [r8, #28]
 801643c:	f104 00f5 	add.w	r0, r4, #245	@ 0xf5
 8016440:	f7ff fe74 	bl	801612c <net::memcpy_ip(unsigned char*, unsigned long)>
 8016444:	23ff      	movs	r3, #255	@ 0xff
 8016446:	f884 30f9 	strb.w	r3, [r4, #249]	@ 0xf9
 801644a:	2343      	movs	r3, #67	@ 0x43
 801644c:	9300      	str	r3, [sp, #0]
 801644e:	22fa      	movs	r2, #250	@ 0xfa
 8016450:	4621      	mov	r1, r4
 8016452:	f8d8 0000 	ldr.w	r0, [r8]
 8016456:	463b      	mov	r3, r7
 8016458:	f000 fdf0 	bl	801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>
 801645c:	2044      	movs	r0, #68	@ 0x44
 801645e:	f000 fdab 	bl	8016fb8 <net::udp_end(unsigned short)>
 8016462:	4632      	mov	r2, r6
 8016464:	4631      	mov	r1, r6
 8016466:	4630      	mov	r0, r6
 8016468:	f000 faf8 	bl	8016a5c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 801646c:	6a28      	ldr	r0, [r5, #32]
 801646e:	b110      	cbz	r0, 8016476 <net::dhcp_release_and_stop()+0x92>
 8016470:	2148      	movs	r1, #72	@ 0x48
 8016472:	f006 fa2f 	bl	801c8d4 <operator delete(void*, unsigned int)>
 8016476:	2300      	movs	r3, #0
 8016478:	622b      	str	r3, [r5, #32]
 801647a:	b002      	add	sp, #8
 801647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016480:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016484:	10008000 	andne	r8, r0, r0

08016488 <net::dhcp_fine_tmr()>:
 8016488:	b508      	push	{r3, lr}
 801648a:	4b21      	ldr	r3, [pc, #132]	@ (8016510 <net::dhcp_fine_tmr()+0x88>)
 801648c:	6a1b      	ldr	r3, [r3, #32]
 801648e:	b123      	cbz	r3, 801649a <net::dhcp_fine_tmr()+0x12>
 8016490:	899a      	ldrh	r2, [r3, #12]
 8016492:	2a01      	cmp	r2, #1
 8016494:	d902      	bls.n	801649c <net::dhcp_fine_tmr()+0x14>
 8016496:	3a01      	subs	r2, #1
 8016498:	819a      	strh	r2, [r3, #12]
 801649a:	bd08      	pop	{r3, pc}
 801649c:	d1fd      	bne.n	801649a <net::dhcp_fine_tmr()+0x12>
 801649e:	2200      	movs	r2, #0
 80164a0:	819a      	strh	r2, [r3, #12]
 80164a2:	7a1a      	ldrb	r2, [r3, #8]
 80164a4:	3a01      	subs	r2, #1
 80164a6:	2a0b      	cmp	r2, #11
 80164a8:	d8f7      	bhi.n	801649a <net::dhcp_fine_tmr()+0x12>
 80164aa:	a101      	add	r1, pc, #4	@ (adr r1, 80164b0 <net::dhcp_fine_tmr()+0x28>)
 80164ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80164b0:	080164e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, sp, lr}
 80164b4:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164b8:	080164fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, sp, lr}
 80164bc:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164c0:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164c4:	08016509 	stmdaeq	r1, {r0, r3, r8, sl, sp, lr}
 80164c8:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164cc:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164d0:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164d4:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164d8:	0801649b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, sp, lr}
 80164dc:	08016509 	stmdaeq	r1, {r0, r3, r8, sl, sp, lr}
 80164e0:	7a5b      	ldrb	r3, [r3, #9]
 80164e2:	2b05      	cmp	r3, #5
 80164e4:	d803      	bhi.n	80164ee <net::dhcp_fine_tmr()+0x66>
 80164e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80164ea:	f7ff be89 	b.w	8016200 <net::dhcp_select()>
 80164ee:	f7ff ff79 	bl	80163e4 <net::dhcp_release_and_stop()>
 80164f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80164f6:	f7ff bf29 	b.w	801634c <net::dhcp_start()>
 80164fa:	7a5b      	ldrb	r3, [r3, #9]
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d803      	bhi.n	8016508 <net::dhcp_fine_tmr()+0x80>
 8016500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016504:	f7ff bea2 	b.w	801624c <net::dhcp_reboot()>
 8016508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801650c:	f7ff bdb6 	b.w	801607c <net::dhcp_discover()>
 8016510:	2000e230 	andcs	lr, r0, r0, lsr r2

08016514 <net::dhcp_process(net::dhcp::Message const*, unsigned long)>:
 8016514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016518:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 801666c <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x158>
 801651c:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8016520:	4606      	mov	r6, r0
 8016522:	4689      	mov	r9, r1
 8016524:	2218      	movs	r2, #24
 8016526:	2100      	movs	r1, #0
 8016528:	f105 0020 	add.w	r0, r5, #32
 801652c:	2700      	movs	r7, #0
 801652e:	f106 04f0 	add.w	r4, r6, #240	@ 0xf0
 8016532:	f005 fc97 	bl	801be64 <memset>
 8016536:	44a1      	add	r9, r4
 8016538:	61ef      	str	r7, [r5, #28]
 801653a:	454c      	cmp	r4, r9
 801653c:	d318      	bcc.n	8016570 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x5c>
 801653e:	2f02      	cmp	r7, #2
 8016540:	d167      	bne.n	8016612 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xfe>
 8016542:	3610      	adds	r6, #16
 8016544:	4630      	mov	r0, r6
 8016546:	f7ff fea9 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 801654a:	7a2b      	ldrb	r3, [r5, #8]
 801654c:	6228      	str	r0, [r5, #32]
 801654e:	2b06      	cmp	r3, #6
 8016550:	d170      	bne.n	8016634 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 8016552:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8016556:	69e3      	ldr	r3, [r4, #28]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d06b      	beq.n	8016634 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 801655c:	2300      	movs	r3, #0
 801655e:	81a3      	strh	r3, [r4, #12]
 8016560:	4630      	mov	r0, r6
 8016562:	f7ff fe9b 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 8016566:	6220      	str	r0, [r4, #32]
 8016568:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801656c:	f7ff be48 	b.w	8016200 <net::dhcp_select()>
 8016570:	7823      	ldrb	r3, [r4, #0]
 8016572:	2b3b      	cmp	r3, #59	@ 0x3b
 8016574:	d822      	bhi.n	80165bc <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xa8>
 8016576:	2b32      	cmp	r3, #50	@ 0x32
 8016578:	d808      	bhi.n	801658c <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x78>
 801657a:	2b01      	cmp	r3, #1
 801657c:	d027      	beq.n	80165ce <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xba>
 801657e:	2b03      	cmp	r3, #3
 8016580:	d02b      	beq.n	80165da <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc6>
 8016582:	b1fb      	cbz	r3, 80165c4 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xb0>
 8016584:	7863      	ldrb	r3, [r4, #1]
 8016586:	3302      	adds	r3, #2
 8016588:	441c      	add	r4, r3
 801658a:	e7d6      	b.n	801653a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 801658c:	3b33      	subs	r3, #51	@ 0x33
 801658e:	2b08      	cmp	r3, #8
 8016590:	d8f8      	bhi.n	8016584 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x70>
 8016592:	a201      	add	r2, pc, #4	@ (adr r2, 8016598 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x84>)
 8016594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016598:	080165ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, sp, lr}
 801659c:	08016585 	stmdaeq	r1, {r0, r2, r7, r8, sl, sp, lr}
 80165a0:	080165c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl, sp, lr}
 80165a4:	080165e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, sp, lr}
 80165a8:	08016585 	stmdaeq	r1, {r0, r2, r7, r8, sl, sp, lr}
 80165ac:	08016585 	stmdaeq	r1, {r0, r2, r7, r8, sl, sp, lr}
 80165b0:	08016585 	stmdaeq	r1, {r0, r2, r7, r8, sl, sp, lr}
 80165b4:	080165fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, sp, lr}
 80165b8:	08016607 	stmdaeq	r1, {r0, r1, r2, r9, sl, sp, lr}
 80165bc:	2bff      	cmp	r3, #255	@ 0xff
 80165be:	d1e1      	bne.n	8016584 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x70>
 80165c0:	464c      	mov	r4, r9
 80165c2:	e7ba      	b.n	801653a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 80165c4:	3401      	adds	r4, #1
 80165c6:	e7b8      	b.n	801653a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 80165c8:	78a7      	ldrb	r7, [r4, #2]
 80165ca:	3403      	adds	r4, #3
 80165cc:	e7b5      	b.n	801653a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 80165ce:	1ca0      	adds	r0, r4, #2
 80165d0:	f7ff fe64 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 80165d4:	6268      	str	r0, [r5, #36]	@ 0x24
 80165d6:	3406      	adds	r4, #6
 80165d8:	e7af      	b.n	801653a <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x26>
 80165da:	1ca0      	adds	r0, r4, #2
 80165dc:	f7ff fe5e 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 80165e0:	62a8      	str	r0, [r5, #40]	@ 0x28
 80165e2:	e7f8      	b.n	80165d6 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 80165e4:	1ca0      	adds	r0, r4, #2
 80165e6:	f7ff fe59 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 80165ea:	61e8      	str	r0, [r5, #28]
 80165ec:	e7f3      	b.n	80165d6 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 80165ee:	1ca0      	adds	r0, r4, #2
 80165f0:	f7ff fe54 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 80165f4:	ba00      	rev	r0, r0
 80165f6:	62e8      	str	r0, [r5, #44]	@ 0x2c
 80165f8:	e7ed      	b.n	80165d6 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 80165fa:	1ca0      	adds	r0, r4, #2
 80165fc:	f7ff fe4e 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 8016600:	ba00      	rev	r0, r0
 8016602:	6328      	str	r0, [r5, #48]	@ 0x30
 8016604:	e7e7      	b.n	80165d6 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8016606:	1ca0      	adds	r0, r4, #2
 8016608:	f7ff fe48 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 801660c:	ba00      	rev	r0, r0
 801660e:	6368      	str	r0, [r5, #52]	@ 0x34
 8016610:	e7e1      	b.n	80165d6 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0xc2>
 8016612:	2f05      	cmp	r7, #5
 8016614:	d110      	bne.n	8016638 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x124>
 8016616:	7a2b      	ldrb	r3, [r5, #8]
 8016618:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 801661c:	2a01      	cmp	r2, #1
 801661e:	d106      	bne.n	801662e <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x11a>
 8016620:	4630      	mov	r0, r6
 8016622:	f7ff fe3d 	bl	80162a0 <net::dhcp_handle_ack(net::dhcp::Message const*)>
 8016626:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801662a:	f7ff bc9d 	b.w	8015f68 <net::dhcp_bind()>
 801662e:	3b04      	subs	r3, #4
 8016630:	2b01      	cmp	r3, #1
 8016632:	d9f5      	bls.n	8016620 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x10c>
 8016634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016638:	2f06      	cmp	r7, #6
 801663a:	d1fb      	bne.n	8016634 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 801663c:	7a2b      	ldrb	r3, [r5, #8]
 801663e:	1eda      	subs	r2, r3, #3
 8016640:	2a02      	cmp	r2, #2
 8016642:	d901      	bls.n	8016648 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x134>
 8016644:	2b01      	cmp	r3, #1
 8016646:	d1f5      	bne.n	8016634 <net::dhcp_process(net::dhcp::Message const*, unsigned long)+0x120>
 8016648:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801664c:	7a1a      	ldrb	r2, [r3, #8]
 801664e:	2a0c      	cmp	r2, #12
 8016650:	bf1f      	itttt	ne
 8016652:	220c      	movne	r2, #12
 8016654:	811a      	strhne	r2, [r3, #8]
 8016656:	2200      	movne	r2, #0
 8016658:	819a      	strhne	r2, [r3, #12]
 801665a:	2200      	movs	r2, #0
 801665c:	4611      	mov	r1, r2
 801665e:	4610      	mov	r0, r2
 8016660:	f000 f9fc 	bl	8016a5c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 8016664:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016668:	f7ff bd08 	b.w	801607c <net::dhcp_discover()>
 801666c:	2000e230 	andcs	lr, r0, r0, lsr r2

08016670 <net::igmp_send_report(unsigned long)>:
 8016670:	4a19      	ldr	r2, [pc, #100]	@ (80166d8 <net::igmp_send_report(unsigned long)+0x68>)
 8016672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016674:	f3c0 2106 	ubfx	r1, r0, #8, #7
 8016678:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801667c:	4c17      	ldr	r4, [pc, #92]	@ (80166dc <net::igmp_send_report(unsigned long)+0x6c>)
 801667e:	70d1      	strb	r1, [r2, #3]
 8016680:	7113      	strb	r3, [r2, #4]
 8016682:	f3c0 6107 	ubfx	r1, r0, #24, #8
 8016686:	4613      	mov	r3, r2
 8016688:	7151      	strb	r1, [r2, #5]
 801668a:	4605      	mov	r5, r0
 801668c:	4622      	mov	r2, r4
 801668e:	f103 0c06 	add.w	ip, r3, #6
 8016692:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016696:	f802 1b01 	strb.w	r1, [r2], #1
 801669a:	4563      	cmp	r3, ip
 801669c:	d1f9      	bne.n	8016692 <net::igmp_send_report(unsigned long)+0x22>
 801669e:	4e10      	ldr	r6, [pc, #64]	@ (80166e0 <net::igmp_send_report(unsigned long)+0x70>)
 80166a0:	4810      	ldr	r0, [pc, #64]	@ (80166e4 <net::igmp_send_report(unsigned long)+0x74>)
 80166a2:	8833      	ldrh	r3, [r6, #0]
 80166a4:	8263      	strh	r3, [r4, #18]
 80166a6:	2700      	movs	r7, #0
 80166a8:	2118      	movs	r1, #24
 80166aa:	f8c4 501e 	str.w	r5, [r4, #30]
 80166ae:	8327      	strh	r7, [r4, #24]
 80166b0:	f000 f90e 	bl	80168d0 <net::net_chksum(void const*, unsigned long)>
 80166b4:	2120      	movs	r1, #32
 80166b6:	8320      	strh	r0, [r4, #24]
 80166b8:	480a      	ldr	r0, [pc, #40]	@ (80166e4 <net::igmp_send_report(unsigned long)+0x74>)
 80166ba:	f8c4 502a 	str.w	r5, [r4, #42]	@ 0x2a
 80166be:	8527      	strh	r7, [r4, #40]	@ 0x28
 80166c0:	f000 f906 	bl	80168d0 <net::net_chksum(void const*, unsigned long)>
 80166c4:	212e      	movs	r1, #46	@ 0x2e
 80166c6:	4603      	mov	r3, r0
 80166c8:	4804      	ldr	r0, [pc, #16]	@ (80166dc <net::igmp_send_report(unsigned long)+0x6c>)
 80166ca:	8523      	strh	r3, [r4, #40]	@ 0x28
 80166cc:	f001 f924 	bl	8017918 <emac_eth_send(void*, unsigned long)>
 80166d0:	8833      	ldrh	r3, [r6, #0]
 80166d2:	3301      	adds	r3, #1
 80166d4:	8033      	strh	r3, [r6, #0]
 80166d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166d8:	10008348 	andne	r8, r0, r8, asr #6
 80166dc:	10008380 	andne	r8, r0, r0, lsl #7
 80166e0:	10008224 	andne	r8, r0, r4, lsr #4
 80166e4:	1000838e 	andne	r8, r0, lr, lsl #7

080166e8 <net::igmp_timer()>:
 80166e8:	b570      	push	{r4, r5, r6, lr}
 80166ea:	4c12      	ldr	r4, [pc, #72]	@ (8016734 <net::igmp_timer()+0x4c>)
 80166ec:	4e12      	ldr	r6, [pc, #72]	@ (8016738 <net::igmp_timer()+0x50>)
 80166ee:	f504 7590 	add.w	r5, r4, #288	@ 0x120
 80166f2:	e002      	b.n	80166fa <net::igmp_timer()+0x12>
 80166f4:	3408      	adds	r4, #8
 80166f6:	42ac      	cmp	r4, r5
 80166f8:	d01a      	beq.n	8016730 <net::igmp_timer()+0x48>
 80166fa:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80166fe:	1e53      	subs	r3, r2, #1
 8016700:	b29b      	uxth	r3, r3
 8016702:	2a00      	cmp	r2, #0
 8016704:	d0f6      	beq.n	80166f4 <net::igmp_timer()+0xc>
 8016706:	f824 3c04 	strh.w	r3, [r4, #-4]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d1f2      	bne.n	80166f4 <net::igmp_timer()+0xc>
 801670e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8016712:	2b01      	cmp	r3, #1
 8016714:	d1ee      	bne.n	80166f4 <net::igmp_timer()+0xc>
 8016716:	f854 0c08 	ldr.w	r0, [r4, #-8]
 801671a:	42b0      	cmp	r0, r6
 801671c:	f04f 0302 	mov.w	r3, #2
 8016720:	d0e8      	beq.n	80166f4 <net::igmp_timer()+0xc>
 8016722:	f804 3c02 	strb.w	r3, [r4, #-2]
 8016726:	3408      	adds	r4, #8
 8016728:	f7ff ffa2 	bl	8016670 <net::igmp_send_report(unsigned long)>
 801672c:	42ac      	cmp	r4, r5
 801672e:	d1e4      	bne.n	80166fa <net::igmp_timer()+0x12>
 8016730:	bd70      	pop	{r4, r5, r6, pc}
 8016732:	bf00      	nop
 8016734:	10008230 	andne	r8, r0, r0, lsr r2
 8016738:	010000e0 	smlatteq	r0, r0, r0, r0

0801673c <net::igmp_set_ip()>:
 801673c:	4b04      	ldr	r3, [pc, #16]	@ (8016750 <net::igmp_set_ip()+0x14>)
 801673e:	4905      	ldr	r1, [pc, #20]	@ (8016754 <net::igmp_set_ip()+0x18>)
 8016740:	4a05      	ldr	r2, [pc, #20]	@ (8016758 <net::igmp_set_ip()+0x1c>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f8c1 301a 	str.w	r3, [r1, #26]
 8016748:	f8c2 301a 	str.w	r3, [r2, #26]
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop
 8016750:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016754:	10008380 	andne	r8, r0, r0, lsl #7
 8016758:	10008350 	andne	r8, r0, r0, asr r3

0801675c <net::igmp_join(unsigned long)>:
 801675c:	f000 03e0 	and.w	r3, r0, #224	@ 0xe0
 8016760:	2be0      	cmp	r3, #224	@ 0xe0
 8016762:	d10c      	bne.n	801677e <net::igmp_join(unsigned long)+0x22>
 8016764:	490b      	ldr	r1, [pc, #44]	@ (8016794 <net::igmp_join(unsigned long)+0x38>)
 8016766:	2300      	movs	r3, #0
 8016768:	e003      	b.n	8016772 <net::igmp_join(unsigned long)+0x16>
 801676a:	b14a      	cbz	r2, 8016780 <net::igmp_join(unsigned long)+0x24>
 801676c:	3301      	adds	r3, #1
 801676e:	2b24      	cmp	r3, #36	@ 0x24
 8016770:	d005      	beq.n	801677e <net::igmp_join(unsigned long)+0x22>
 8016772:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8016776:	4282      	cmp	r2, r0
 8016778:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
 801677c:	d1f5      	bne.n	801676a <net::igmp_join(unsigned long)+0xe>
 801677e:	4770      	bx	lr
 8016780:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8016784:	2201      	movs	r2, #1
 8016786:	2302      	movs	r3, #2
 8016788:	f88c 2006 	strb.w	r2, [ip, #6]
 801678c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016790:	f7ff bf6e 	b.w	8016670 <net::igmp_send_report(unsigned long)>
 8016794:	10008228 	andne	r8, r0, r8, lsr #4

08016798 <net::igmp_leave(unsigned long)>:
 8016798:	b570      	push	{r4, r5, r6, lr}
 801679a:	4c0f      	ldr	r4, [pc, #60]	@ (80167d8 <net::igmp_leave(unsigned long)+0x40>)
 801679c:	4602      	mov	r2, r0
 801679e:	f504 7190 	add.w	r1, r4, #288	@ 0x120
 80167a2:	e002      	b.n	80167aa <net::igmp_leave(unsigned long)+0x12>
 80167a4:	3408      	adds	r4, #8
 80167a6:	428c      	cmp	r4, r1
 80167a8:	d014      	beq.n	80167d4 <net::igmp_leave(unsigned long)+0x3c>
 80167aa:	6823      	ldr	r3, [r4, #0]
 80167ac:	4293      	cmp	r3, r2
 80167ae:	d1f9      	bne.n	80167a4 <net::igmp_leave(unsigned long)+0xc>
 80167b0:	4e0a      	ldr	r6, [pc, #40]	@ (80167dc <net::igmp_leave(unsigned long)+0x44>)
 80167b2:	480b      	ldr	r0, [pc, #44]	@ (80167e0 <net::igmp_leave(unsigned long)+0x48>)
 80167b4:	8833      	ldrh	r3, [r6, #0]
 80167b6:	8243      	strh	r3, [r0, #18]
 80167b8:	2500      	movs	r5, #0
 80167ba:	212e      	movs	r1, #46	@ 0x2e
 80167bc:	f8c0 202a 	str.w	r2, [r0, #42]	@ 0x2a
 80167c0:	8305      	strh	r5, [r0, #24]
 80167c2:	8505      	strh	r5, [r0, #40]	@ 0x28
 80167c4:	f001 f8a8 	bl	8017918 <emac_eth_send(void*, unsigned long)>
 80167c8:	8833      	ldrh	r3, [r6, #0]
 80167ca:	6025      	str	r5, [r4, #0]
 80167cc:	3301      	adds	r3, #1
 80167ce:	8033      	strh	r3, [r6, #0]
 80167d0:	71a5      	strb	r5, [r4, #6]
 80167d2:	80a5      	strh	r5, [r4, #4]
 80167d4:	bd70      	pop	{r4, r5, r6, pc}
 80167d6:	bf00      	nop
 80167d8:	10008228 	andne	r8, r0, r8, lsr #4
 80167dc:	10008224 	andne	r8, r0, r4, lsr #4
 80167e0:	10008350 	andne	r8, r0, r0, asr r3

080167e4 <net::igmp_report_groups()>:
 80167e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167e6:	4c14      	ldr	r4, [pc, #80]	@ (8016838 <net::igmp_report_groups()+0x54>)
 80167e8:	4d14      	ldr	r5, [pc, #80]	@ (801683c <net::igmp_report_groups()+0x58>)
 80167ea:	f504 7790 	add.w	r7, r4, #288	@ 0x120
 80167ee:	2601      	movs	r6, #1
 80167f0:	e002      	b.n	80167f8 <net::igmp_report_groups()+0x14>
 80167f2:	3408      	adds	r4, #8
 80167f4:	42bc      	cmp	r4, r7
 80167f6:	d01e      	beq.n	8016836 <net::igmp_report_groups()+0x52>
 80167f8:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80167fc:	2b02      	cmp	r3, #2
 80167fe:	d007      	beq.n	8016810 <net::igmp_report_groups()+0x2c>
 8016800:	2b01      	cmp	r3, #1
 8016802:	d1f6      	bne.n	80167f2 <net::igmp_report_groups()+0xe>
 8016804:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8016808:	3b01      	subs	r3, #1
 801680a:	b29b      	uxth	r3, r3
 801680c:	2b04      	cmp	r3, #4
 801680e:	d9f0      	bls.n	80167f2 <net::igmp_report_groups()+0xe>
 8016810:	f005 fe6a 	bl	801c4e8 <random>
 8016814:	fba5 3200 	umull	r3, r2, r5, r0
 8016818:	f022 0303 	bic.w	r3, r2, #3
 801681c:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 8016820:	1ac0      	subs	r0, r0, r3
 8016822:	2801      	cmp	r0, #1
 8016824:	bf38      	it	cc
 8016826:	2001      	movcc	r0, #1
 8016828:	f824 0c04 	strh.w	r0, [r4, #-4]
 801682c:	f804 6c02 	strb.w	r6, [r4, #-2]
 8016830:	3408      	adds	r4, #8
 8016832:	42bc      	cmp	r4, r7
 8016834:	d1e0      	bne.n	80167f8 <net::igmp_report_groups()+0x14>
 8016836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016838:	10008230 	andne	r8, r0, r0, lsr r2
 801683c:	cccccccd 	stclgt	12, cr12, [ip], {205}	@ 0xcd

08016840 <net::primary_ip_conflict_callback(net::acd::Callback)>:
 8016840:	b140      	cbz	r0, 8016854 <net::primary_ip_conflict_callback(net::acd::Callback)+0x14>
 8016842:	2802      	cmp	r0, #2
 8016844:	d000      	beq.n	8016848 <net::primary_ip_conflict_callback(net::acd::Callback)+0x8>
 8016846:	4770      	bx	lr
 8016848:	4a10      	ldr	r2, [pc, #64]	@ (801688c <net::primary_ip_conflict_callback(net::acd::Callback)+0x4c>)
 801684a:	7e93      	ldrb	r3, [r2, #26]
 801684c:	f023 0308 	bic.w	r3, r3, #8
 8016850:	7693      	strb	r3, [r2, #26]
 8016852:	4770      	bx	lr
 8016854:	4b0e      	ldr	r3, [pc, #56]	@ (8016890 <net::primary_ip_conflict_callback(net::acd::Callback)+0x50>)
 8016856:	b510      	push	{r4, lr}
 8016858:	4c0c      	ldr	r4, [pc, #48]	@ (801688c <net::primary_ip_conflict_callback(net::acd::Callback)+0x4c>)
 801685a:	6818      	ldr	r0, [r3, #0]
 801685c:	6923      	ldr	r3, [r4, #16]
 801685e:	4298      	cmp	r0, r3
 8016860:	d008      	beq.n	8016874 <net::primary_ip_conflict_callback(net::acd::Callback)+0x34>
 8016862:	f000 f8c1 	bl	80169e8 <net::netif_set_ipaddr(net::ip_addr)>
 8016866:	f7ff fd3b 	bl	80162e0 <net::dhcp_inform()>
 801686a:	7ea3      	ldrb	r3, [r4, #26]
 801686c:	f043 0308 	orr.w	r3, r3, #8
 8016870:	76a3      	strb	r3, [r4, #26]
 8016872:	bd10      	pop	{r4, pc}
 8016874:	4602      	mov	r2, r0
 8016876:	21ff      	movs	r1, #255	@ 0xff
 8016878:	f000 f8f0 	bl	8016a5c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>
 801687c:	f7ff fd30 	bl	80162e0 <net::dhcp_inform()>
 8016880:	7ea3      	ldrb	r3, [r4, #26]
 8016882:	f043 0308 	orr.w	r3, r3, #8
 8016886:	76a3      	strb	r3, [r4, #26]
 8016888:	bd10      	pop	{r4, pc}
 801688a:	bf00      	nop
 801688c:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016890:	2000e21c 	andcs	lr, r0, ip, lsl r2

08016894 <net::net_shutdown()>:
 8016894:	f000 b92e 	b.w	8016af4 <net::netif_set_link_down()>

08016898 <net::net_set_primary_ip(net::ip_addr)>:
 8016898:	b510      	push	{r4, lr}
 801689a:	4604      	mov	r4, r0
 801689c:	f7ff fda2 	bl	80163e4 <net::dhcp_release_and_stop()>
 80168a0:	4908      	ldr	r1, [pc, #32]	@ (80168c4 <net::net_set_primary_ip(net::ip_addr)+0x2c>)
 80168a2:	4809      	ldr	r0, [pc, #36]	@ (80168c8 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 80168a4:	f001 f9b4 	bl	8017c10 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>
 80168a8:	b934      	cbnz	r4, 80168b8 <net::net_set_primary_ip(net::ip_addr)+0x20>
 80168aa:	4b08      	ldr	r3, [pc, #32]	@ (80168cc <net::net_set_primary_ip(net::ip_addr)+0x34>)
 80168ac:	4806      	ldr	r0, [pc, #24]	@ (80168c8 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 80168ae:	6919      	ldr	r1, [r3, #16]
 80168b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168b4:	f001 b876 	b.w	80179a4 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 80168b8:	4621      	mov	r1, r4
 80168ba:	4803      	ldr	r0, [pc, #12]	@ (80168c8 <net::net_set_primary_ip(net::ip_addr)+0x30>)
 80168bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168c0:	f001 b870 	b.w	80179a4 <net::acd_start(net::acd::Acd*, net::ip_addr)>
 80168c4:	08016841 	stmdaeq	r1, {r0, r6, fp, sp, lr}
 80168c8:	2000e21c 	andcs	lr, r0, ip, lsl r2
 80168cc:	2000e230 	andcs	lr, r0, r0, lsr r2

080168d0 <net::net_chksum(void const*, unsigned long)>:
 80168d0:	2901      	cmp	r1, #1
 80168d2:	d91f      	bls.n	8016914 <net::net_chksum(void const*, unsigned long)+0x44>
 80168d4:	f1a1 0c02 	sub.w	ip, r1, #2
 80168d8:	f02c 0c01 	bic.w	ip, ip, #1
 80168dc:	f10c 0c02 	add.w	ip, ip, #2
 80168e0:	4484      	add	ip, r0
 80168e2:	2300      	movs	r3, #0
 80168e4:	f830 2b02 	ldrh.w	r2, [r0], #2
 80168e8:	4560      	cmp	r0, ip
 80168ea:	4413      	add	r3, r2
 80168ec:	d1fa      	bne.n	80168e4 <net::net_chksum(void const*, unsigned long)+0x14>
 80168ee:	07ca      	lsls	r2, r1, #31
 80168f0:	d40a      	bmi.n	8016908 <net::net_chksum(void const*, unsigned long)+0x38>
 80168f2:	0c1a      	lsrs	r2, r3, #16
 80168f4:	d005      	beq.n	8016902 <net::net_chksum(void const*, unsigned long)+0x32>
 80168f6:	fa12 f383 	uxtah	r3, r2, r3
 80168fa:	0c1a      	lsrs	r2, r3, #16
 80168fc:	bf1c      	itt	ne
 80168fe:	b29b      	uxthne	r3, r3
 8016900:	3301      	addne	r3, #1
 8016902:	43db      	mvns	r3, r3
 8016904:	b298      	uxth	r0, r3
 8016906:	4770      	bx	lr
 8016908:	7802      	ldrb	r2, [r0, #0]
 801690a:	0212      	lsls	r2, r2, #8
 801690c:	ba52      	rev16	r2, r2
 801690e:	fa13 f382 	uxtah	r3, r3, r2
 8016912:	e7ee      	b.n	80168f2 <net::net_chksum(void const*, unsigned long)+0x22>
 8016914:	b121      	cbz	r1, 8016920 <net::net_chksum(void const*, unsigned long)+0x50>
 8016916:	7803      	ldrb	r3, [r0, #0]
 8016918:	021b      	lsls	r3, r3, #8
 801691a:	ba5b      	rev16	r3, r3
 801691c:	b29b      	uxth	r3, r3
 801691e:	e7f0      	b.n	8016902 <net::net_chksum(void const*, unsigned long)+0x32>
 8016920:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016924:	4770      	bx	lr
 8016926:	bf00      	nop

08016928 <net::default_callback(unsigned short, net::netif_ext_callback_args_t const*)>:
 8016928:	4770      	bx	lr
	...

0801692c <net::netif_do_update_globals()>:
 801692c:	4908      	ldr	r1, [pc, #32]	@ (8016950 <net::netif_do_update_globals()+0x24>)
 801692e:	e9d1 3200 	ldrd	r3, r2, [r1]
 8016932:	b410      	push	{r4}
 8016934:	ea63 0402 	orn	r4, r3, r2
 8016938:	43d0      	mvns	r0, r2
 801693a:	60cc      	str	r4, [r1, #12]
 801693c:	4013      	ands	r3, r2
 801693e:	4905      	ldr	r1, [pc, #20]	@ (8016954 <net::netif_do_update_globals()+0x28>)
 8016940:	4a05      	ldr	r2, [pc, #20]	@ (8016958 <net::netif_do_update_globals()+0x2c>)
 8016942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016946:	6008      	str	r0, [r1, #0]
 8016948:	6013      	str	r3, [r2, #0]
 801694a:	f001 bab7 	b.w	8017ebc <net::ip_set_ip()>
 801694e:	bf00      	nop
 8016950:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016954:	2000e218 	andcs	lr, r0, r8, lsl r2
 8016958:	2000e214 	andcs	lr, r0, r4, lsl r2

0801695c <net::netif_issue_reports()>:
 801695c:	4b04      	ldr	r3, [pc, #16]	@ (8016970 <net::netif_issue_reports()+0x14>)
 801695e:	7e9a      	ldrb	r2, [r3, #26]
 8016960:	07d2      	lsls	r2, r2, #31
 8016962:	d503      	bpl.n	801696c <net::netif_issue_reports()+0x10>
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	b10b      	cbz	r3, 801696c <net::netif_issue_reports()+0x10>
 8016968:	f7ff bf3c 	b.w	80167e4 <net::igmp_report_groups()>
 801696c:	4770      	bx	lr
 801696e:	bf00      	nop
 8016970:	2000e230 	andcs	lr, r0, r0, lsr r2

08016974 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>:
 8016974:	b570      	push	{r4, r5, r6, lr}
 8016976:	4e0b      	ldr	r6, [pc, #44]	@ (80169a4 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x30>)
 8016978:	6833      	ldr	r3, [r6, #0]
 801697a:	4283      	cmp	r3, r0
 801697c:	4604      	mov	r4, r0
 801697e:	460d      	mov	r5, r1
 8016980:	d00d      	beq.n	801699e <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x2a>
 8016982:	600b      	str	r3, [r1, #0]
 8016984:	f001 fa9a 	bl	8017ebc <net::ip_set_ip()>
 8016988:	6828      	ldr	r0, [r5, #0]
 801698a:	4621      	mov	r1, r4
 801698c:	f001 f946 	bl	8017c1c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)>
 8016990:	6034      	str	r4, [r6, #0]
 8016992:	f7ff ffcb 	bl	801692c <net::netif_do_update_globals()>
 8016996:	f7ff ffe1 	bl	801695c <net::netif_issue_reports()>
 801699a:	2001      	movs	r0, #1
 801699c:	bd70      	pop	{r4, r5, r6, pc}
 801699e:	2000      	movs	r0, #0
 80169a0:	e7fc      	b.n	801699c <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)+0x28>
 80169a2:	bf00      	nop
 80169a4:	2000e230 	andcs	lr, r0, r0, lsr r2

080169a8 <net::netif_init()>:
 80169a8:	4b0c      	ldr	r3, [pc, #48]	@ (80169dc <net::netif_init()+0x34>)
 80169aa:	7e1a      	ldrb	r2, [r3, #24]
 80169ac:	7dd8      	ldrb	r0, [r3, #23]
 80169ae:	0412      	lsls	r2, r2, #16
 80169b0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80169b4:	7e58      	ldrb	r0, [r3, #25]
 80169b6:	3202      	adds	r2, #2
 80169b8:	2100      	movs	r1, #0
 80169ba:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80169be:	e9c3 1100 	strd	r1, r1, [r3]
 80169c2:	611a      	str	r2, [r3, #16]
 80169c4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80169c8:	e9c3 1108 	strd	r1, r1, [r3, #32]
 80169cc:	7699      	strb	r1, [r3, #26]
 80169ce:	6299      	str	r1, [r3, #40]	@ 0x28
 80169d0:	4b03      	ldr	r3, [pc, #12]	@ (80169e0 <net::netif_init()+0x38>)
 80169d2:	4a04      	ldr	r2, [pc, #16]	@ (80169e4 <net::netif_init()+0x3c>)
 80169d4:	601a      	str	r2, [r3, #0]
 80169d6:	f7f1 bd37 	b.w	8008448 <net::arp_init()>
 80169da:	bf00      	nop
 80169dc:	2000e230 	andcs	lr, r0, r0, lsr r2
 80169e0:	2000e22c 	andcs	lr, r0, ip, lsr #4
 80169e4:	08016929 	stmdaeq	r1, {r0, r3, r5, r8, fp, sp, lr}

080169e8 <net::netif_set_ipaddr(net::ip_addr)>:
 80169e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80169ea:	4669      	mov	r1, sp
 80169ec:	f7ff ffc2 	bl	8016974 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 80169f0:	b130      	cbz	r0, 8016a00 <net::netif_set_ipaddr(net::ip_addr)+0x18>
 80169f2:	9b00      	ldr	r3, [sp, #0]
 80169f4:	9301      	str	r3, [sp, #4]
 80169f6:	4b04      	ldr	r3, [pc, #16]	@ (8016a08 <net::netif_set_ipaddr(net::ip_addr)+0x20>)
 80169f8:	a901      	add	r1, sp, #4
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	2010      	movs	r0, #16
 80169fe:	4798      	blx	r3
 8016a00:	b005      	add	sp, #20
 8016a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a06:	bf00      	nop
 8016a08:	2000e22c 	andcs	lr, r0, ip, lsr #4

08016a0c <net::netif_set_netmask(net::ip_addr)>:
 8016a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a0e:	4b07      	ldr	r3, [pc, #28]	@ (8016a2c <net::netif_set_netmask(net::ip_addr)+0x20>)
 8016a10:	685c      	ldr	r4, [r3, #4]
 8016a12:	42a0      	cmp	r0, r4
 8016a14:	d008      	beq.n	8016a28 <net::netif_set_netmask(net::ip_addr)+0x1c>
 8016a16:	6058      	str	r0, [r3, #4]
 8016a18:	f7ff ff88 	bl	801692c <net::netif_do_update_globals()>
 8016a1c:	4b04      	ldr	r3, [pc, #16]	@ (8016a30 <net::netif_set_netmask(net::ip_addr)+0x24>)
 8016a1e:	9402      	str	r4, [sp, #8]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	a901      	add	r1, sp, #4
 8016a24:	2040      	movs	r0, #64	@ 0x40
 8016a26:	4798      	blx	r3
 8016a28:	b004      	add	sp, #16
 8016a2a:	bd10      	pop	{r4, pc}
 8016a2c:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016a30:	2000e22c 	andcs	lr, r0, ip, lsr #4

08016a34 <net::netif_set_gw(net::ip_addr)>:
 8016a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a36:	4a07      	ldr	r2, [pc, #28]	@ (8016a54 <net::netif_set_gw(net::ip_addr)+0x20>)
 8016a38:	6893      	ldr	r3, [r2, #8]
 8016a3a:	4298      	cmp	r0, r3
 8016a3c:	d006      	beq.n	8016a4c <net::netif_set_gw(net::ip_addr)+0x18>
 8016a3e:	9303      	str	r3, [sp, #12]
 8016a40:	4b05      	ldr	r3, [pc, #20]	@ (8016a58 <net::netif_set_gw(net::ip_addr)+0x24>)
 8016a42:	6090      	str	r0, [r2, #8]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	a901      	add	r1, sp, #4
 8016a48:	2020      	movs	r0, #32
 8016a4a:	4798      	blx	r3
 8016a4c:	b005      	add	sp, #20
 8016a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a52:	bf00      	nop
 8016a54:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016a58:	2000e22c 	andcs	lr, r0, ip, lsr #4

08016a5c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)>:
 8016a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a60:	4688      	mov	r8, r1
 8016a62:	b085      	sub	sp, #20
 8016a64:	4617      	mov	r7, r2
 8016a66:	4605      	mov	r5, r0
 8016a68:	b348      	cbz	r0, 8016abe <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x62>
 8016a6a:	2400      	movs	r4, #0
 8016a6c:	4e1c      	ldr	r6, [pc, #112]	@ (8016ae0 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x84>)
 8016a6e:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8016a72:	45c8      	cmp	r8, r9
 8016a74:	d007      	beq.n	8016a86 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x2a>
 8016a76:	f8c6 8004 	str.w	r8, [r6, #4]
 8016a7a:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8016a7e:	f7ff ff55 	bl	801692c <net::netif_do_update_globals()>
 8016a82:	f8cd 9008 	str.w	r9, [sp, #8]
 8016a86:	68b3      	ldr	r3, [r6, #8]
 8016a88:	429f      	cmp	r7, r3
 8016a8a:	bf1e      	ittt	ne
 8016a8c:	60b7      	strne	r7, [r6, #8]
 8016a8e:	f044 0420 	orrne.w	r4, r4, #32
 8016a92:	9303      	strne	r3, [sp, #12]
 8016a94:	b30d      	cbz	r5, 8016ada <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x7e>
 8016a96:	4669      	mov	r1, sp
 8016a98:	4628      	mov	r0, r5
 8016a9a:	f7ff ff6b 	bl	8016974 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 8016a9e:	b1b8      	cbz	r0, 8016ad0 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x74>
 8016aa0:	9b00      	ldr	r3, [sp, #0]
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	f044 0410 	orr.w	r4, r4, #16
 8016aa8:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8016aac:	b995      	cbnz	r5, 8016ad4 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x78>
 8016aae:	4b0d      	ldr	r3, [pc, #52]	@ (8016ae4 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x88>)
 8016ab0:	a901      	add	r1, sp, #4
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	4798      	blx	r3
 8016ab8:	b005      	add	sp, #20
 8016aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016abe:	4669      	mov	r1, sp
 8016ac0:	f7ff ff58 	bl	8016974 <net::netif_do_set_ipaddr(net::ip_addr, net::ip_addr&)>
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d0d0      	beq.n	8016a6a <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0xe>
 8016ac8:	9b00      	ldr	r3, [sp, #0]
 8016aca:	9301      	str	r3, [sp, #4]
 8016acc:	2410      	movs	r4, #16
 8016ace:	e7cd      	b.n	8016a6c <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x10>
 8016ad0:	2c00      	cmp	r4, #0
 8016ad2:	d1e9      	bne.n	8016aa8 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x4c>
 8016ad4:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 8016ad8:	e7e9      	b.n	8016aae <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x52>
 8016ada:	2c00      	cmp	r4, #0
 8016adc:	d1e4      	bne.n	8016aa8 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x4c>
 8016ade:	e7eb      	b.n	8016ab8 <net::netif_set_addr(net::ip_addr, net::ip_addr, net::ip_addr)+0x5c>
 8016ae0:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016ae4:	2000e22c 	andcs	lr, r0, ip, lsr #4

08016ae8 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))>:
 8016ae8:	4b01      	ldr	r3, [pc, #4]	@ (8016af0 <net::netif_add_ext_callback(void (*)(unsigned short, net::netif_ext_callback_args_t const*))+0x8>)
 8016aea:	6018      	str	r0, [r3, #0]
 8016aec:	4770      	bx	lr
 8016aee:	bf00      	nop
 8016af0:	2000e22c 	andcs	lr, r0, ip, lsr #4

08016af4 <net::netif_set_link_down()>:
 8016af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016af6:	4a0d      	ldr	r2, [pc, #52]	@ (8016b2c <net::netif_set_link_down()+0x38>)
 8016af8:	7e93      	ldrb	r3, [r2, #26]
 8016afa:	07d9      	lsls	r1, r3, #31
 8016afc:	d512      	bpl.n	8016b24 <net::netif_set_link_down()+0x30>
 8016afe:	f023 0301 	bic.w	r3, r3, #1
 8016b02:	7693      	strb	r3, [r2, #26]
 8016b04:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016b06:	b11b      	cbz	r3, 8016b10 <net::netif_set_link_down()+0x1c>
 8016b08:	685b      	ldr	r3, [r3, #4]
 8016b0a:	b10b      	cbz	r3, 8016b10 <net::netif_set_link_down()+0x1c>
 8016b0c:	f7ff f9f4 	bl	8015ef8 <net::autoip_stop()>
 8016b10:	f001 f822 	bl	8017b58 <net::acd_network_changed_link_down()>
 8016b14:	2300      	movs	r3, #0
 8016b16:	f88d 3004 	strb.w	r3, [sp, #4]
 8016b1a:	4b05      	ldr	r3, [pc, #20]	@ (8016b30 <net::netif_set_link_down()+0x3c>)
 8016b1c:	a901      	add	r1, sp, #4
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	2004      	movs	r0, #4
 8016b22:	4798      	blx	r3
 8016b24:	b005      	add	sp, #20
 8016b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b2a:	bf00      	nop
 8016b2c:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016b30:	2000e22c 	andcs	lr, r0, ip, lsr #4

08016b34 <net::_bswap32(t_tcp*)>:
 8016b34:	f100 032a 	add.w	r3, r0, #42	@ 0x2a
 8016b38:	079a      	lsls	r2, r3, #30
 8016b3a:	bf0b      	itete	eq
 8016b3c:	f8d0 302a 	ldreq.w	r3, [r0, #42]	@ 0x2a
 8016b40:	f8d0 302a 	ldrne.w	r3, [r0, #42]	@ 0x2a
 8016b44:	ba1b      	reveq	r3, r3
 8016b46:	ba1b      	revne	r3, r3
 8016b48:	bf0c      	ite	eq
 8016b4a:	f8c0 302a 	streq.w	r3, [r0, #42]	@ 0x2a
 8016b4e:	f8c0 302a 	strne.w	r3, [r0, #42]	@ 0x2a
 8016b52:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 8016b56:	079b      	lsls	r3, r3, #30
 8016b58:	bf0b      	itete	eq
 8016b5a:	f8d0 3026 	ldreq.w	r3, [r0, #38]	@ 0x26
 8016b5e:	f8d0 3026 	ldrne.w	r3, [r0, #38]	@ 0x26
 8016b62:	ba1b      	reveq	r3, r3
 8016b64:	ba1b      	revne	r3, r3
 8016b66:	bf0c      	ite	eq
 8016b68:	f8c0 3026 	streq.w	r3, [r0, #38]	@ 0x26
 8016b6c:	f8c0 3026 	strne.w	r3, [r0, #38]	@ 0x26
 8016b70:	4770      	bx	lr
 8016b72:	bf00      	nop

08016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>:
 8016b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b78:	7a0b      	ldrb	r3, [r1, #8]
 8016b7a:	8f86      	ldrh	r6, [r0, #60]	@ 0x3c
 8016b7c:	4c52      	ldr	r4, [pc, #328]	@ (8016cc8 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8016b7e:	f003 0302 	and.w	r3, r3, #2
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	bf14      	ite	ne
 8016b86:	2324      	movne	r3, #36	@ 0x24
 8016b88:	2320      	moveq	r3, #32
 8016b8a:	441e      	add	r6, r3
 8016b8c:	b084      	sub	sp, #16
 8016b8e:	4605      	mov	r5, r0
 8016b90:	bf14      	ite	ne
 8016b92:	f04f 0e90 	movne.w	lr, #144	@ 0x90
 8016b96:	f04f 0e80 	moveq.w	lr, #128	@ 0x80
 8016b9a:	f100 030c 	add.w	r3, r0, #12
 8016b9e:	f100 0c12 	add.w	ip, r0, #18
 8016ba2:	4622      	mov	r2, r4
 8016ba4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016ba8:	f802 0b01 	strb.w	r0, [r2], #1
 8016bac:	459c      	cmp	ip, r3
 8016bae:	d1f9      	bne.n	8016ba4 <net::send_package(net::tcb const*, net::SendInfo const&)+0x30>
 8016bb0:	b2b7      	uxth	r7, r6
 8016bb2:	4a46      	ldr	r2, [pc, #280]	@ (8016ccc <net::send_package(net::tcb const*, net::SendInfo const&)+0x158>)
 8016bb4:	f107 0314 	add.w	r3, r7, #20
 8016bb8:	ba5b      	rev16	r3, r3
 8016bba:	8223      	strh	r3, [r4, #16]
 8016bbc:	8813      	ldrh	r3, [r2, #0]
 8016bbe:	8263      	strh	r3, [r4, #18]
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	8013      	strh	r3, [r2, #0]
 8016bc4:	682b      	ldr	r3, [r5, #0]
 8016bc6:	f8c4 301a 	str.w	r3, [r4, #26]
 8016bca:	686b      	ldr	r3, [r5, #4]
 8016bcc:	f8c4 301e 	str.w	r3, [r4, #30]
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	8323      	strh	r3, [r4, #24]
 8016bd4:	892a      	ldrh	r2, [r5, #8]
 8016bd6:	8462      	strh	r2, [r4, #34]	@ 0x22
 8016bd8:	680a      	ldr	r2, [r1, #0]
 8016bda:	8968      	ldrh	r0, [r5, #10]
 8016bdc:	f8c4 2026 	str.w	r2, [r4, #38]	@ 0x26
 8016be0:	684a      	ldr	r2, [r1, #4]
 8016be2:	84a0      	strh	r0, [r4, #36]	@ 0x24
 8016be4:	f884 e02e 	strb.w	lr, [r4, #46]	@ 0x2e
 8016be8:	f8c4 202a 	str.w	r2, [r4, #42]	@ 0x2a
 8016bec:	7a0a      	ldrb	r2, [r1, #8]
 8016bee:	f884 202f 	strb.w	r2, [r4, #47]	@ 0x2f
 8016bf2:	f8b5 2044 	ldrh.w	r2, [r5, #68]	@ 0x44
 8016bf6:	8622      	strh	r2, [r4, #48]	@ 0x30
 8016bf8:	8c2a      	ldrh	r2, [r5, #32]
 8016bfa:	86a2      	strh	r2, [r4, #52]	@ 0x34
 8016bfc:	8663      	strh	r3, [r4, #50]	@ 0x32
 8016bfe:	7a0b      	ldrb	r3, [r1, #8]
 8016c00:	079b      	lsls	r3, r3, #30
 8016c02:	bf41      	itttt	mi
 8016c04:	f240 4302 	movwmi	r3, #1026	@ 0x402
 8016c08:	86e3      	strhmi	r3, [r4, #54]	@ 0x36
 8016c0a:	f648 4305 	movwmi	r3, #35845	@ 0x8c05
 8016c0e:	8723      	strhmi	r3, [r4, #56]	@ 0x38
 8016c10:	4b2f      	ldr	r3, [pc, #188]	@ (8016cd0 <net::send_package(net::tcb const*, net::SendInfo const&)+0x15c>)
 8016c12:	bf48      	it	mi
 8016c14:	4a2f      	ldrmi	r2, [pc, #188]	@ (8016cd4 <net::send_package(net::tcb const*, net::SendInfo const&)+0x160>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	bf58      	it	pl
 8016c1a:	4a2f      	ldrpl	r2, [pc, #188]	@ (8016cd8 <net::send_package(net::tcb const*, net::SendInfo const&)+0x164>)
 8016c1c:	ba1b      	rev	r3, r3
 8016c1e:	6053      	str	r3, [r2, #4]
 8016c20:	4b2e      	ldr	r3, [pc, #184]	@ (8016cdc <net::send_package(net::tcb const*, net::SendInfo const&)+0x168>)
 8016c22:	6013      	str	r3, [r2, #0]
 8016c24:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016c26:	6093      	str	r3, [r2, #8]
 8016c28:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8016c2a:	b18b      	cbz	r3, 8016c50 <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 8016c2c:	8fa9      	ldrh	r1, [r5, #60]	@ 0x3c
 8016c2e:	b179      	cbz	r1, 8016c50 <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 8016c30:	781b      	ldrb	r3, [r3, #0]
 8016c32:	7313      	strb	r3, [r2, #12]
 8016c34:	8fab      	ldrh	r3, [r5, #60]	@ 0x3c
 8016c36:	2b01      	cmp	r3, #1
 8016c38:	f102 020d 	add.w	r2, r2, #13
 8016c3c:	d908      	bls.n	8016c50 <net::send_package(net::tcb const*, net::SendInfo const&)+0xdc>
 8016c3e:	2301      	movs	r3, #1
 8016c40:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8016c42:	5cc9      	ldrb	r1, [r1, r3]
 8016c44:	f802 1b01 	strb.w	r1, [r2], #1
 8016c48:	8fa9      	ldrh	r1, [r5, #60]	@ 0x3c
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	4299      	cmp	r1, r3
 8016c4e:	dcf7      	bgt.n	8016c40 <net::send_package(net::tcb const*, net::SendInfo const&)+0xcc>
 8016c50:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8016c52:	481d      	ldr	r0, [pc, #116]	@ (8016cc8 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8016c54:	ba5b      	rev16	r3, r3
 8016c56:	8463      	strh	r3, [r4, #34]	@ 0x22
 8016c58:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8016c5a:	ba5b      	rev16	r3, r3
 8016c5c:	84a3      	strh	r3, [r4, #36]	@ 0x24
 8016c5e:	f7ff ff69 	bl	8016b34 <net::_bswap32(t_tcp*)>
 8016c62:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016c64:	ba5b      	rev16	r3, r3
 8016c66:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016c68:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016c6a:	f100 0816 	add.w	r8, r0, #22
 8016c6e:	ba5b      	rev16	r3, r3
 8016c70:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016c72:	4642      	mov	r2, r8
 8016c74:	ab01      	add	r3, sp, #4
 8016c76:	f852 1b04 	ldr.w	r1, [r2], #4
 8016c7a:	f843 1b04 	str.w	r1, [r3], #4
 8016c7e:	a904      	add	r1, sp, #16
 8016c80:	428b      	cmp	r3, r1
 8016c82:	d1f8      	bne.n	8016c76 <net::send_package(net::tcb const*, net::SendInfo const&)+0x102>
 8016c84:	682b      	ldr	r3, [r5, #0]
 8016c86:	f8c4 3016 	str.w	r3, [r4, #22]
 8016c8a:	686b      	ldr	r3, [r5, #4]
 8016c8c:	f8c4 301a 	str.w	r3, [r4, #26]
 8016c90:	b2b1      	uxth	r1, r6
 8016c92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8016c96:	4812      	ldr	r0, [pc, #72]	@ (8016ce0 <net::send_package(net::tcb const*, net::SendInfo const&)+0x16c>)
 8016c98:	83e3      	strh	r3, [r4, #30]
 8016c9a:	ba7f      	rev16	r7, r7
 8016c9c:	310c      	adds	r1, #12
 8016c9e:	8427      	strh	r7, [r4, #32]
 8016ca0:	f7ff fe16 	bl	80168d0 <net::net_chksum(void const*, unsigned long)>
 8016ca4:	ab01      	add	r3, sp, #4
 8016ca6:	4605      	mov	r5, r0
 8016ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cac:	f848 2b04 	str.w	r2, [r8], #4
 8016cb0:	aa04      	add	r2, sp, #16
 8016cb2:	4293      	cmp	r3, r2
 8016cb4:	d1f8      	bne.n	8016ca8 <net::send_package(net::tcb const*, net::SendInfo const&)+0x134>
 8016cb6:	4804      	ldr	r0, [pc, #16]	@ (8016cc8 <net::send_package(net::tcb const*, net::SendInfo const&)+0x154>)
 8016cb8:	8665      	strh	r5, [r4, #50]	@ 0x32
 8016cba:	f106 0122 	add.w	r1, r6, #34	@ 0x22
 8016cbe:	b004      	add	sp, #16
 8016cc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc4:	f000 be28 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 8016cc8:	100083b0 			@ <UNDEFINED> instruction: 0x100083b0
 8016ccc:	1000899c 	mulne	r0, ip, r9
 8016cd0:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8016cd4:	100083ea 	andne	r8, r0, sl, ror #7
 8016cd8:	100083e6 	andne	r8, r0, r6, ror #7
 8016cdc:	0a080101 	beq	82170e8 <_sidata+0x1f57dc>
 8016ce0:	100083c6 	andne	r8, r0, r6, asr #7

08016ce4 <net::send_reset(t_tcp*, net::tcb const*)>:
 8016ce4:	f890 202f 	ldrb.w	r2, [r0, #47]	@ 0x2f
 8016ce8:	0753      	lsls	r3, r2, #29
 8016cea:	d42d      	bmi.n	8016d48 <net::send_reset(t_tcp*, net::tcb const*)+0x64>
 8016cec:	b500      	push	{lr}
 8016cee:	b085      	sub	sp, #20
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	4608      	mov	r0, r1
 8016cf4:	2104      	movs	r1, #4
 8016cf6:	f88d 100c 	strb.w	r1, [sp, #12]
 8016cfa:	f012 0110 	ands.w	r1, r2, #16
 8016cfe:	d119      	bne.n	8016d34 <net::send_reset(t_tcp*, net::tcb const*)+0x50>
 8016d00:	f04f 0c14 	mov.w	ip, #20
 8016d04:	9101      	str	r1, [sp, #4]
 8016d06:	f88d c00c 	strb.w	ip, [sp, #12]
 8016d0a:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8016d0e:	07d2      	lsls	r2, r2, #31
 8016d10:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016d14:	bf48      	it	mi
 8016d16:	3101      	addmi	r1, #1
 8016d18:	0792      	lsls	r2, r2, #30
 8016d1a:	bf0c      	ite	eq
 8016d1c:	f8d3 3026 	ldreq.w	r3, [r3, #38]	@ 0x26
 8016d20:	f8d3 3026 	ldrne.w	r3, [r3, #38]	@ 0x26
 8016d24:	440b      	add	r3, r1
 8016d26:	a901      	add	r1, sp, #4
 8016d28:	9302      	str	r3, [sp, #8]
 8016d2a:	f7ff ff23 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8016d2e:	b005      	add	sp, #20
 8016d30:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d34:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8016d38:	0789      	lsls	r1, r1, #30
 8016d3a:	bf0c      	ite	eq
 8016d3c:	f8d3 102a 	ldreq.w	r1, [r3, #42]	@ 0x2a
 8016d40:	f8d3 102a 	ldrne.w	r1, [r3, #42]	@ 0x2a
 8016d44:	9101      	str	r1, [sp, #4]
 8016d46:	e7e0      	b.n	8016d0a <net::send_reset(t_tcp*, net::tcb const*)+0x26>
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop

08016d4c <net::scan_options(t_tcp*, net::tcb*, long)>:
 8016d4c:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 8016d50:	441a      	add	r2, r3
 8016d52:	f100 0c3c 	add.w	ip, r0, #60	@ 0x3c
 8016d56:	4562      	cmp	r2, ip
 8016d58:	d349      	bcc.n	8016dee <net::scan_options(t_tcp*, net::tcb*, long)+0xa2>
 8016d5a:	b530      	push	{r4, r5, lr}
 8016d5c:	f100 0336 	add.w	r3, r0, #54	@ 0x36
 8016d60:	f893 c000 	ldrb.w	ip, [r3]
 8016d64:	f1bc 0f08 	cmp.w	ip, #8
 8016d68:	d820      	bhi.n	8016dac <net::scan_options(t_tcp*, net::tcb*, long)+0x60>
 8016d6a:	e8df f00c 	tbb	[pc, ip]
 8016d6e:	1f052726 	svcne	0x00052726
 8016d72:	1f1f1f1f 	svcne	0x001f1f1f
 8016d76:	f8930029 			@ <UNDEFINED> instruction: 0xf8930029
 8016d7a:	c001      	stmia	r0!, {r0}
 8016d7c:	f1bc 0f04 	cmp.w	ip, #4
 8016d80:	d116      	bne.n	8016db0 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8016d82:	f103 0e04 	add.w	lr, r3, #4
 8016d86:	4572      	cmp	r2, lr
 8016d88:	d312      	bcc.n	8016db0 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8016d8a:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8016d8e:	fa9c fc9c 	rev16.w	ip, ip
 8016d92:	fa1f fc8c 	uxth.w	ip, ip
 8016d96:	f10c 0c14 	add.w	ip, ip, #20
 8016d9a:	f240 5e8c 	movw	lr, #1420	@ 0x58c
 8016d9e:	45f4      	cmp	ip, lr
 8016da0:	bfa8      	it	ge
 8016da2:	46f4      	movge	ip, lr
 8016da4:	f1ac 0c14 	sub.w	ip, ip, #20
 8016da8:	f8a1 c034 	strh.w	ip, [r1, #52]	@ 0x34
 8016dac:	f893 c001 	ldrb.w	ip, [r3, #1]
 8016db0:	4463      	add	r3, ip
 8016db2:	f103 0c06 	add.w	ip, r3, #6
 8016db6:	4562      	cmp	r2, ip
 8016db8:	d2d2      	bcs.n	8016d60 <net::scan_options(t_tcp*, net::tcb*, long)+0x14>
 8016dba:	bd30      	pop	{r4, r5, pc}
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	e7f8      	b.n	8016db2 <net::scan_options(t_tcp*, net::tcb*, long)+0x66>
 8016dc0:	f893 c001 	ldrb.w	ip, [r3, #1]
 8016dc4:	f1bc 0f0a 	cmp.w	ip, #10
 8016dc8:	d1f2      	bne.n	8016db0 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8016dca:	f103 0e0a 	add.w	lr, r3, #10
 8016dce:	4572      	cmp	r2, lr
 8016dd0:	d3ee      	bcc.n	8016db0 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8016dd2:	1c9c      	adds	r4, r3, #2
 8016dd4:	f890 e02f 	ldrb.w	lr, [r0, #47]	@ 0x2f
 8016dd8:	07a4      	lsls	r4, r4, #30
 8016dda:	bf0c      	ite	eq
 8016ddc:	f8d3 4002 	ldreq.w	r4, [r3, #2]
 8016de0:	f8d3 4002 	ldrne.w	r4, [r3, #2]
 8016de4:	f01e 0f02 	tst.w	lr, #2
 8016de8:	d002      	beq.n	8016df0 <net::scan_options(t_tcp*, net::tcb*, long)+0xa4>
 8016dea:	630c      	str	r4, [r1, #48]	@ 0x30
 8016dec:	e7de      	b.n	8016dac <net::scan_options(t_tcp*, net::tcb*, long)+0x60>
 8016dee:	4770      	bx	lr
 8016df0:	6b0d      	ldr	r5, [r1, #48]	@ 0x30
 8016df2:	fa95 fe85 	rev.w	lr, r5
 8016df6:	ba25      	rev	r5, r4
 8016df8:	4575      	cmp	r5, lr
 8016dfa:	d9d9      	bls.n	8016db0 <net::scan_options(t_tcp*, net::tcb*, long)+0x64>
 8016dfc:	e7f5      	b.n	8016dea <net::scan_options(t_tcp*, net::tcb*, long)+0x9e>
 8016dfe:	bf00      	nop

08016e00 <net::tcp_shutdown()>:
 8016e00:	4770      	bx	lr
 8016e02:	bf00      	nop

08016e04 <net::tcp_begin(unsigned short)>:
 8016e04:	4b16      	ldr	r3, [pc, #88]	@ (8016e60 <net::tcp_begin(unsigned short)+0x5c>)
 8016e06:	f8b3 1d04 	ldrh.w	r1, [r3, #3332]	@ 0xd04
 8016e0a:	4281      	cmp	r1, r0
 8016e0c:	d025      	beq.n	8016e5a <net::tcp_begin(unsigned short)+0x56>
 8016e0e:	bb09      	cbnz	r1, 8016e54 <net::tcp_begin(unsigned short)+0x50>
 8016e10:	b530      	push	{r4, r5, lr}
 8016e12:	4d14      	ldr	r5, [pc, #80]	@ (8016e64 <net::tcp_begin(unsigned short)+0x60>)
 8016e14:	f8a3 0d04 	strh.w	r0, [r3, #3332]	@ 0xd04
 8016e18:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8016e1c:	f503 7c0c 	add.w	ip, r3, #560	@ 0x230
 8016e20:	f640 3418 	movw	r4, #2840	@ 0xb18
 8016e24:	f04f 0e01 	mov.w	lr, #1
 8016e28:	f1a2 0350 	sub.w	r3, r2, #80	@ 0x50
 8016e2c:	f843 1b04 	str.w	r1, [r3], #4
 8016e30:	4293      	cmp	r3, r2
 8016e32:	d1fb      	bne.n	8016e2c <net::tcp_begin(unsigned short)+0x28>
 8016e34:	682b      	ldr	r3, [r5, #0]
 8016e36:	f822 0c48 	strh.w	r0, [r2, #-72]
 8016e3a:	f822 4c0c 	strh.w	r4, [r2, #-12]
 8016e3e:	f802 ec04 	strb.w	lr, [r2, #-4]
 8016e42:	e942 330f 	strd	r3, r3, [r2, #-60]	@ 0x3c
 8016e46:	e942 330a 	strd	r3, r3, [r2, #-40]	@ 0x28
 8016e4a:	3250      	adds	r2, #80	@ 0x50
 8016e4c:	4562      	cmp	r2, ip
 8016e4e:	d1eb      	bne.n	8016e28 <net::tcp_begin(unsigned short)+0x24>
 8016e50:	2000      	movs	r0, #0
 8016e52:	bd30      	pop	{r4, r5, pc}
 8016e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e58:	4770      	bx	lr
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	4770      	bx	lr
 8016e5e:	bf00      	nop
 8016e60:	100089a0 	andne	r8, r0, r0, lsr #19
 8016e64:	2001bcd0 	ldrdcs	fp, [r1], -r0

08016e68 <net::tcp_read(long, unsigned char const**, unsigned long&)>:
 8016e68:	b570      	push	{r4, r5, r6, lr}
 8016e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8016ed4 <net::tcp_read(long, unsigned char const**, unsigned long&)+0x6c>)
 8016e6c:	f640 5408 	movw	r4, #3336	@ 0xd08
 8016e70:	fb04 f000 	mul.w	r0, r4, r0
 8016e74:	eb03 0c00 	add.w	ip, r3, r0
 8016e78:	f8bc e1e2 	ldrh.w	lr, [ip, #482]	@ 0x1e2
 8016e7c:	f8bc 41e0 	ldrh.w	r4, [ip, #480]	@ 0x1e0
 8016e80:	4574      	cmp	r4, lr
 8016e82:	bf08      	it	eq
 8016e84:	2000      	moveq	r0, #0
 8016e86:	d100      	bne.n	8016e8a <net::tcp_read(long, unsigned char const**, unsigned long&)+0x22>
 8016e88:	bd70      	pop	{r4, r5, r6, pc}
 8016e8a:	f44f 64b2 	mov.w	r4, #1424	@ 0x590
 8016e8e:	fb04 fe0e 	mul.w	lr, r4, lr
 8016e92:	eb0e 0500 	add.w	r5, lr, r0
 8016e96:	441d      	add	r5, r3
 8016e98:	f500 76f2 	add.w	r6, r0, #484	@ 0x1e4
 8016e9c:	f8b5 4772 	ldrh.w	r4, [r5, #1906]	@ 0x772
 8016ea0:	6014      	str	r4, [r2, #0]
 8016ea2:	4476      	add	r6, lr
 8016ea4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016ea8:	441e      	add	r6, r3
 8016eaa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8016eae:	600e      	str	r6, [r1, #0]
 8016eb0:	4403      	add	r3, r0
 8016eb2:	f8bc 21e2 	ldrh.w	r2, [ip, #482]	@ 0x1e2
 8016eb6:	f8b3 1044 	ldrh.w	r1, [r3, #68]	@ 0x44
 8016eba:	f8b5 0770 	ldrh.w	r0, [r5, #1904]	@ 0x770
 8016ebe:	3201      	adds	r2, #1
 8016ec0:	f201 518c 	addw	r1, r1, #1420	@ 0x58c
 8016ec4:	f002 0201 	and.w	r2, r2, #1
 8016ec8:	f8a3 1044 	strh.w	r1, [r3, #68]	@ 0x44
 8016ecc:	f8ac 21e2 	strh.w	r2, [ip, #482]	@ 0x1e2
 8016ed0:	bd70      	pop	{r4, r5, r6, pc}
 8016ed2:	bf00      	nop
 8016ed4:	100089a0 	andne	r8, r0, r0, lsr #19

08016ed8 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)>:
 8016ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016edc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016ee0:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8016f74 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x9c>
 8016ee4:	f640 5408 	movw	r4, #3336	@ 0xd08
 8016ee8:	011b      	lsls	r3, r3, #4
 8016eea:	fb04 3700 	mla	r7, r4, r0, r3
 8016eee:	b085      	sub	sp, #20
 8016ef0:	eb08 0907 	add.w	r9, r8, r7
 8016ef4:	2a00      	cmp	r2, #0
 8016ef6:	d038      	beq.n	8016f6a <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x92>
 8016ef8:	f107 0b10 	add.w	fp, r7, #16
 8016efc:	468a      	mov	sl, r1
 8016efe:	4616      	mov	r6, r2
 8016f00:	44c3      	add	fp, r8
 8016f02:	e01e      	b.n	8016f42 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x6a>
 8016f04:	f8c5 a038 	str.w	sl, [r5, #56]	@ 0x38
 8016f08:	87ac      	strh	r4, [r5, #60]	@ 0x3c
 8016f0a:	f8db 3008 	ldr.w	r3, [fp, #8]
 8016f0e:	f8db 2030 	ldr.w	r2, [fp, #48]	@ 0x30
 8016f12:	4566      	cmp	r6, ip
 8016f14:	bf8c      	ite	hi
 8016f16:	f04f 0c10 	movhi.w	ip, #16
 8016f1a:	f04f 0c18 	movls.w	ip, #24
 8016f1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016f22:	f88d c00c 	strb.w	ip, [sp, #12]
 8016f26:	f7ff fe25 	bl	8016b74 <net::send_package(net::tcb const*, net::SendInfo const&)>
 8016f2a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8016f2e:	2100      	movs	r1, #0
 8016f30:	4422      	add	r2, r4
 8016f32:	1b1b      	subs	r3, r3, r4
 8016f34:	1b36      	subs	r6, r6, r4
 8016f36:	e9c5 2306 	strd	r2, r3, [r5, #24]
 8016f3a:	63a9      	str	r1, [r5, #56]	@ 0x38
 8016f3c:	87a9      	strh	r1, [r5, #60]	@ 0x3c
 8016f3e:	44a2      	add	sl, r4
 8016f40:	d013      	beq.n	8016f6a <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x92>
 8016f42:	eb08 0507 	add.w	r5, r8, r7
 8016f46:	f240 548c 	movw	r4, #1420	@ 0x58c
 8016f4a:	42b4      	cmp	r4, r6
 8016f4c:	69eb      	ldr	r3, [r5, #28]
 8016f4e:	bf28      	it	cs
 8016f50:	4634      	movcs	r4, r6
 8016f52:	429c      	cmp	r4, r3
 8016f54:	f240 5c8b 	movw	ip, #1419	@ 0x58b
 8016f58:	a901      	add	r1, sp, #4
 8016f5a:	4648      	mov	r0, r9
 8016f5c:	d9d2      	bls.n	8016f04 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x2c>
 8016f5e:	4804      	ldr	r0, [pc, #16]	@ (8016f70 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x98>)
 8016f60:	f002 ff6c 	bl	8019e3c <console_error>
 8016f64:	1b36      	subs	r6, r6, r4
 8016f66:	44a2      	add	sl, r4
 8016f68:	d1eb      	bne.n	8016f42 <net::tcp_write(long, unsigned char const*, unsigned long, unsigned long)+0x6a>
 8016f6a:	b005      	add	sp, #20
 8016f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f70:	0801ec48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr, pc}
 8016f74:	100089a0 	andne	r8, r0, r0, lsr #19

08016f78 <net::udp_set_ip()>:
 8016f78:	4a02      	ldr	r2, [pc, #8]	@ (8016f84 <net::udp_set_ip()+0xc>)
 8016f7a:	4b03      	ldr	r3, [pc, #12]	@ (8016f88 <net::udp_set_ip()+0x10>)
 8016f7c:	6812      	ldr	r2, [r2, #0]
 8016f7e:	f8c3 201a 	str.w	r2, [r3, #26]
 8016f82:	4770      	bx	lr
 8016f84:	2000e230 	andcs	lr, r0, r0, lsr r2
 8016f88:	100096b4 			@ <UNDEFINED> instruction: 0x100096b4

08016f8c <net::udp_begin(unsigned short)>:
 8016f8c:	4a08      	ldr	r2, [pc, #32]	@ (8016fb0 <net::udp_begin(unsigned short)+0x24>)
 8016f8e:	4601      	mov	r1, r0
 8016f90:	2000      	movs	r0, #0
 8016f92:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8016f96:	428b      	cmp	r3, r1
 8016f98:	d005      	beq.n	8016fa6 <net::udp_begin(unsigned short)+0x1a>
 8016f9a:	b12b      	cbz	r3, 8016fa8 <net::udp_begin(unsigned short)+0x1c>
 8016f9c:	3001      	adds	r0, #1
 8016f9e:	2808      	cmp	r0, #8
 8016fa0:	d1f7      	bne.n	8016f92 <net::udp_begin(unsigned short)+0x6>
 8016fa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fa6:	4770      	bx	lr
 8016fa8:	4b02      	ldr	r3, [pc, #8]	@ (8016fb4 <net::udp_begin(unsigned short)+0x28>)
 8016faa:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
 8016fae:	4770      	bx	lr
 8016fb0:	1000cafe 	strdne	ip, [r0], -lr
 8016fb4:	1000cb00 	andne	ip, r0, r0, lsl #22

08016fb8 <net::udp_end(unsigned short)>:
 8016fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8016ff0 <net::udp_end(unsigned short)+0x38>)
 8016fba:	b508      	push	{r3, lr}
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8016fc2:	4281      	cmp	r1, r0
 8016fc4:	d008      	beq.n	8016fd8 <net::udp_end(unsigned short)+0x20>
 8016fc6:	3301      	adds	r3, #1
 8016fc8:	2b08      	cmp	r3, #8
 8016fca:	d1f8      	bne.n	8016fbe <net::udp_end(unsigned short)+0x6>
 8016fcc:	4809      	ldr	r0, [pc, #36]	@ (8016ff4 <net::udp_end(unsigned short)+0x3c>)
 8016fce:	f002 ff35 	bl	8019e3c <console_error>
 8016fd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016fd6:	bd08      	pop	{r3, pc}
 8016fd8:	4a07      	ldr	r2, [pc, #28]	@ (8016ff8 <net::udp_end(unsigned short)+0x40>)
 8016fda:	4908      	ldr	r1, [pc, #32]	@ (8016ffc <net::udp_end(unsigned short)+0x44>)
 8016fdc:	f240 50cc 	movw	r0, #1484	@ 0x5cc
 8016fe0:	fb00 2203 	mla	r2, r0, r3, r2
 8016fe4:	2000      	movs	r0, #0
 8016fe6:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
 8016fea:	6050      	str	r0, [r2, #4]
 8016fec:	bd08      	pop	{r3, pc}
 8016fee:	bf00      	nop
 8016ff0:	1000cafe 	strdne	ip, [r0], -lr
 8016ff4:	0801ec78 	stmdaeq	r1, {r3, r4, r5, r6, sl, fp, sp, lr, pc}
 8016ff8:	10009ca0 	andne	r9, r0, r0, lsr #25
 8016ffc:	1000cb00 	andne	ip, r0, r0, lsl #22

08017000 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)>:
 8017000:	b510      	push	{r4, lr}
 8017002:	f240 5ccc 	movw	ip, #1484	@ 0x5cc
 8017006:	4c0c      	ldr	r4, [pc, #48]	@ (8017038 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)+0x38>)
 8017008:	fb0c fc00 	mul.w	ip, ip, r0
 801700c:	eb04 0e0c 	add.w	lr, r4, ip
 8017010:	f8de 0004 	ldr.w	r0, [lr, #4]
 8017014:	b900      	cbnz	r0, 8017018 <net::udp_recv2(int, unsigned char const**, unsigned long*, unsigned short*)+0x18>
 8017016:	bd10      	pop	{r4, pc}
 8017018:	f10c 000a 	add.w	r0, ip, #10
 801701c:	4420      	add	r0, r4
 801701e:	6008      	str	r0, [r1, #0]
 8017020:	f854 100c 	ldr.w	r1, [r4, ip]
 8017024:	6011      	str	r1, [r2, #0]
 8017026:	f8be 2008 	ldrh.w	r2, [lr, #8]
 801702a:	801a      	strh	r2, [r3, #0]
 801702c:	2300      	movs	r3, #0
 801702e:	f8de 0004 	ldr.w	r0, [lr, #4]
 8017032:	f8ce 3004 	str.w	r3, [lr, #4]
 8017036:	bd10      	pop	{r4, pc}
 8017038:	10009ca0 	andne	r9, r0, r0, lsr #25

0801703c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)>:
 801703c:	b570      	push	{r4, r5, r6, lr}
 801703e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8017042:	4e3d      	ldr	r6, [pc, #244]	@ (8017138 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xfc>)
 8017044:	fa94 fe94 	rev16.w	lr, r4
 8017048:	4c3c      	ldr	r4, [pc, #240]	@ (801713c <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x100>)
 801704a:	f8b6 c000 	ldrh.w	ip, [r6]
 801704e:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
 8017052:	4c3b      	ldr	r4, [pc, #236]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8017054:	b290      	uxth	r0, r2
 8017056:	f8a4 c012 	strh.w	ip, [r4, #18]
 801705a:	f10c 0c01 	add.w	ip, ip, #1
 801705e:	f8a6 c000 	strh.w	ip, [r6]
 8017062:	f100 0c1c 	add.w	ip, r0, #28
 8017066:	3008      	adds	r0, #8
 8017068:	ba40      	rev16	r0, r0
 801706a:	ba6d      	rev16	r5, r5
 801706c:	fa9c fc9c 	rev16.w	ip, ip
 8017070:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8017072:	f5b2 6fb8 	cmp.w	r2, #1472	@ 0x5c0
 8017076:	f04f 0000 	mov.w	r0, #0
 801707a:	8465      	strh	r5, [r4, #34]	@ 0x22
 801707c:	f8a4 e024 	strh.w	lr, [r4, #36]	@ 0x24
 8017080:	4615      	mov	r5, r2
 8017082:	f8a4 c010 	strh.w	ip, [r4, #16]
 8017086:	bf28      	it	cs
 8017088:	f44f 65b8 	movcs.w	r5, #1472	@ 0x5c0
 801708c:	8320      	strh	r0, [r4, #24]
 801708e:	b14a      	cbz	r2, 80170a4 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x68>
 8017090:	eb01 0e05 	add.w	lr, r1, r5
 8017094:	f104 002a 	add.w	r0, r4, #42	@ 0x2a
 8017098:	f811 cb01 	ldrb.w	ip, [r1], #1
 801709c:	f800 cb01 	strb.w	ip, [r0], #1
 80170a0:	4571      	cmp	r1, lr
 80170a2:	d1f9      	bne.n	8017098 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x5c>
 80170a4:	1c5a      	adds	r2, r3, #1
 80170a6:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 80170aa:	d02e      	beq.n	801710a <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xce>
 80170ac:	4a25      	ldr	r2, [pc, #148]	@ (8017144 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x108>)
 80170ae:	6812      	ldr	r2, [r2, #0]
 80170b0:	439a      	bics	r2, r3
 80170b2:	d01c      	beq.n	80170ee <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xb2>
 80170b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80170b8:	2ae0      	cmp	r2, #224	@ 0xe0
 80170ba:	d136      	bne.n	801712a <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xee>
 80170bc:	4822      	ldr	r0, [pc, #136]	@ (8017148 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x10c>)
 80170be:	f3c3 2206 	ubfx	r2, r3, #8, #7
 80170c2:	70c2      	strb	r2, [r0, #3]
 80170c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80170c8:	7102      	strb	r2, [r0, #4]
 80170ca:	f3c3 6207 	ubfx	r2, r3, #24, #8
 80170ce:	7142      	strb	r2, [r0, #5]
 80170d0:	4a1b      	ldr	r2, [pc, #108]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80170d2:	1d85      	adds	r5, r0, #6
 80170d4:	f810 cb01 	ldrb.w	ip, [r0], #1
 80170d8:	f802 cb01 	strb.w	ip, [r2], #1
 80170dc:	42a8      	cmp	r0, r5
 80170de:	d1f9      	bne.n	80170d4 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x98>
 80170e0:	f8c4 301e 	str.w	r3, [r4, #30]
 80170e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170e8:	4815      	ldr	r0, [pc, #84]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80170ea:	f000 bc15 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 80170ee:	4a14      	ldr	r2, [pc, #80]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 80170f0:	25ff      	movs	r5, #255	@ 0xff
 80170f2:	1d90      	adds	r0, r2, #6
 80170f4:	f802 5b01 	strb.w	r5, [r2], #1
 80170f8:	4282      	cmp	r2, r0
 80170fa:	d1fb      	bne.n	80170f4 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xb8>
 80170fc:	f8c4 301e 	str.w	r3, [r4, #30]
 8017100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017104:	480e      	ldr	r0, [pc, #56]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8017106:	f000 bc07 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 801710a:	4b0d      	ldr	r3, [pc, #52]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 801710c:	22ff      	movs	r2, #255	@ 0xff
 801710e:	1d98      	adds	r0, r3, #6
 8017110:	f803 2b01 	strb.w	r2, [r3], #1
 8017114:	4283      	cmp	r3, r0
 8017116:	d1fb      	bne.n	8017110 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0xd4>
 8017118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801711c:	f8c4 301e 	str.w	r3, [r4, #30]
 8017120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017124:	4806      	ldr	r0, [pc, #24]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8017126:	f000 bbf7 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 801712a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801712e:	4804      	ldr	r0, [pc, #16]	@ (8017140 <net::udp_send(int, unsigned char const*, unsigned long, unsigned long, unsigned short)+0x104>)
 8017130:	461a      	mov	r2, r3
 8017132:	f000 be27 	b.w	8017d84 <net::arp_send(t_udp*, unsigned long, unsigned long)>
 8017136:	bf00      	nop
 8017138:	100096b0 			@ <UNDEFINED> instruction: 0x100096b0
 801713c:	1000cb00 	andne	ip, r0, r0, lsl #22
 8017140:	100096b4 			@ <UNDEFINED> instruction: 0x100096b4
 8017144:	2000e218 	andcs	lr, r0, r8, lsl r2
 8017148:	100096a8 	andne	r9, r0, r8, lsr #13

0801714c <NetworkParamsStore::Copy(networkparams::Params*)>:
 801714c:	b507      	push	{r0, r1, r2, lr}
 801714e:	2301      	movs	r3, #1
 8017150:	2100      	movs	r1, #0
 8017152:	e9cd 1300 	strd	r1, r3, [sp]
 8017156:	4602      	mov	r2, r0
 8017158:	4803      	ldr	r0, [pc, #12]	@ (8017168 <NetworkParamsStore::Copy(networkparams::Params*)+0x1c>)
 801715a:	235e      	movs	r3, #94	@ 0x5e
 801715c:	6800      	ldr	r0, [r0, #0]
 801715e:	f001 fc3b 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 8017162:	b003      	add	sp, #12
 8017164:	f85d fb04 	ldr.w	pc, [sp], #4
 8017168:	2000e2dc 	ldrdcs	lr, [r0], -ip

0801716c <NetworkParams::NetworkParams()>:
 801716c:	b510      	push	{r4, lr}
 801716e:	225e      	movs	r2, #94	@ 0x5e
 8017170:	4604      	mov	r4, r0
 8017172:	2100      	movs	r1, #0
 8017174:	f004 fe76 	bl	801be64 <memset>
 8017178:	2301      	movs	r3, #1
 801717a:	7523      	strb	r3, [r4, #20]
 801717c:	4620      	mov	r0, r4
 801717e:	bd10      	pop	{r4, pc}

08017180 <NetworkParams::Load()>:
 8017180:	b508      	push	{r3, lr}
 8017182:	2200      	movs	r2, #0
 8017184:	7002      	strb	r2, [r0, #0]
 8017186:	7042      	strb	r2, [r0, #1]
 8017188:	7082      	strb	r2, [r0, #2]
 801718a:	70c2      	strb	r2, [r0, #3]
 801718c:	f7ff ffde 	bl	801714c <NetworkParamsStore::Copy(networkparams::Params*)>
 8017190:	bd08      	pop	{r3, pc}
	...

08017194 <NetworkParams::Load(char const*, unsigned long)>:
 8017194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017196:	2500      	movs	r5, #0
 8017198:	b087      	sub	sp, #28
 801719a:	4604      	mov	r4, r0
 801719c:	460e      	mov	r6, r1
 801719e:	4617      	mov	r7, r2
 80171a0:	7005      	strb	r5, [r0, #0]
 80171a2:	7045      	strb	r5, [r0, #1]
 80171a4:	7085      	strb	r5, [r0, #2]
 80171a6:	70c5      	strb	r5, [r0, #3]
 80171a8:	4602      	mov	r2, r0
 80171aa:	490c      	ldr	r1, [pc, #48]	@ (80171dc <NetworkParams::Load(char const*, unsigned long)+0x48>)
 80171ac:	a804      	add	r0, sp, #16
 80171ae:	f001 feed 	bl	8018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80171b2:	463a      	mov	r2, r7
 80171b4:	4631      	mov	r1, r6
 80171b6:	a804      	add	r0, sp, #16
 80171b8:	f001 feec 	bl	8018f94 <ReadConfigFile::Read(char const*, unsigned int)>
 80171bc:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80171c0:	235e      	movs	r3, #94	@ 0x5e
 80171c2:	4807      	ldr	r0, [pc, #28]	@ (80171e0 <NetworkParams::Load(char const*, unsigned long)+0x4c>)
 80171c4:	9300      	str	r3, [sp, #0]
 80171c6:	462a      	mov	r2, r5
 80171c8:	4623      	mov	r3, r4
 80171ca:	4629      	mov	r1, r5
 80171cc:	6800      	ldr	r0, [r0, #0]
 80171ce:	f001 fbdd 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 80171d2:	a804      	add	r0, sp, #16
 80171d4:	f001 fedd 	bl	8018f92 <ReadConfigFile::~ReadConfigFile()>
 80171d8:	b007      	add	sp, #28
 80171da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171dc:	08017341 	stmdaeq	r1, {r0, r6, r8, r9, ip, sp, lr}
 80171e0:	2000e2dc 	ldrdcs	lr, [r0], -ip

080171e4 <NetworkParams::callbackFunction(char const*)>:
 80171e4:	b530      	push	{r4, r5, lr}
 80171e6:	460d      	mov	r5, r1
 80171e8:	b085      	sub	sp, #20
 80171ea:	4604      	mov	r4, r0
 80171ec:	494d      	ldr	r1, [pc, #308]	@ (8017324 <NetworkParams::callbackFunction(char const*)+0x140>)
 80171ee:	f10d 0207 	add.w	r2, sp, #7
 80171f2:	4628      	mov	r0, r5
 80171f4:	f001 fff4 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80171f8:	b978      	cbnz	r0, 801721a <NetworkParams::callbackFunction(char const*)+0x36>
 80171fa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80171fe:	6823      	ldr	r3, [r4, #0]
 8017200:	b142      	cbz	r2, 8017214 <NetworkParams::callbackFunction(char const*)+0x30>
 8017202:	f023 0301 	bic.w	r3, r3, #1
 8017206:	3a00      	subs	r2, #0
 8017208:	bf18      	it	ne
 801720a:	2201      	movne	r2, #1
 801720c:	6023      	str	r3, [r4, #0]
 801720e:	7522      	strb	r2, [r4, #20]
 8017210:	b005      	add	sp, #20
 8017212:	bd30      	pop	{r4, r5, pc}
 8017214:	f043 0301 	orr.w	r3, r3, #1
 8017218:	e7f5      	b.n	8017206 <NetworkParams::callbackFunction(char const*)+0x22>
 801721a:	4943      	ldr	r1, [pc, #268]	@ (8017328 <NetworkParams::callbackFunction(char const*)+0x144>)
 801721c:	f10d 0207 	add.w	r2, sp, #7
 8017220:	4628      	mov	r0, r5
 8017222:	f001 ffdd 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8017226:	b980      	cbnz	r0, 801724a <NetworkParams::callbackFunction(char const*)+0x66>
 8017228:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801722c:	6823      	ldr	r3, [r4, #0]
 801722e:	1e51      	subs	r1, r2, #1
 8017230:	2904      	cmp	r1, #4
 8017232:	bf97      	itett	ls
 8017234:	f443 7380 	orrls.w	r3, r3, #256	@ 0x100
 8017238:	f423 7380 	bichi.w	r3, r3, #256	@ 0x100
 801723c:	6023      	strls	r3, [r4, #0]
 801723e:	f884 205d 	strbls.w	r2, [r4, #93]	@ 0x5d
 8017242:	bf84      	itt	hi
 8017244:	6023      	strhi	r3, [r4, #0]
 8017246:	f884 005d 	strbhi.w	r0, [r4, #93]	@ 0x5d
 801724a:	4938      	ldr	r1, [pc, #224]	@ (801732c <NetworkParams::callbackFunction(char const*)+0x148>)
 801724c:	aa02      	add	r2, sp, #8
 801724e:	4628      	mov	r0, r5
 8017250:	f001 ff41 	bl	80190d6 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8017254:	b9d8      	cbnz	r0, 801728e <NetworkParams::callbackFunction(char const*)+0xaa>
 8017256:	9a02      	ldr	r2, [sp, #8]
 8017258:	6823      	ldr	r3, [r4, #0]
 801725a:	b2d1      	uxtb	r1, r2
 801725c:	29ac      	cmp	r1, #172	@ 0xac
 801725e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8017262:	d007      	beq.n	8017274 <NetworkParams::callbackFunction(char const*)+0x90>
 8017264:	29c0      	cmp	r1, #192	@ 0xc0
 8017266:	d00c      	beq.n	8017282 <NetworkParams::callbackFunction(char const*)+0x9e>
 8017268:	290a      	cmp	r1, #10
 801726a:	d006      	beq.n	801727a <NetworkParams::callbackFunction(char const*)+0x96>
 801726c:	2902      	cmp	r1, #2
 801726e:	d004      	beq.n	801727a <NetworkParams::callbackFunction(char const*)+0x96>
 8017270:	b11a      	cbz	r2, 801727a <NetworkParams::callbackFunction(char const*)+0x96>
 8017272:	e008      	b.n	8017286 <NetworkParams::callbackFunction(char const*)+0xa2>
 8017274:	3810      	subs	r0, #16
 8017276:	280f      	cmp	r0, #15
 8017278:	d805      	bhi.n	8017286 <NetworkParams::callbackFunction(char const*)+0xa2>
 801727a:	6062      	str	r2, [r4, #4]
 801727c:	f043 0302 	orr.w	r3, r3, #2
 8017280:	e003      	b.n	801728a <NetworkParams::callbackFunction(char const*)+0xa6>
 8017282:	28a8      	cmp	r0, #168	@ 0xa8
 8017284:	d0f9      	beq.n	801727a <NetworkParams::callbackFunction(char const*)+0x96>
 8017286:	f023 0302 	bic.w	r3, r3, #2
 801728a:	6023      	str	r3, [r4, #0]
 801728c:	e7c0      	b.n	8017210 <NetworkParams::callbackFunction(char const*)+0x2c>
 801728e:	4928      	ldr	r1, [pc, #160]	@ (8017330 <NetworkParams::callbackFunction(char const*)+0x14c>)
 8017290:	aa02      	add	r2, sp, #8
 8017292:	4628      	mov	r0, r5
 8017294:	f001 ff1f 	bl	80190d6 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8017298:	b970      	cbnz	r0, 80172b8 <NetworkParams::callbackFunction(char const*)+0xd4>
 801729a:	9a02      	ldr	r2, [sp, #8]
 801729c:	6823      	ldr	r3, [r4, #0]
 801729e:	b142      	cbz	r2, 80172b2 <NetworkParams::callbackFunction(char const*)+0xce>
 80172a0:	ba11      	rev	r1, r2
 80172a2:	43c8      	mvns	r0, r1
 80172a4:	ea11 0150 	ands.w	r1, r1, r0, lsr #1
 80172a8:	d103      	bne.n	80172b2 <NetworkParams::callbackFunction(char const*)+0xce>
 80172aa:	60a2      	str	r2, [r4, #8]
 80172ac:	f043 0304 	orr.w	r3, r3, #4
 80172b0:	e7eb      	b.n	801728a <NetworkParams::callbackFunction(char const*)+0xa6>
 80172b2:	f023 0304 	bic.w	r3, r3, #4
 80172b6:	e7e8      	b.n	801728a <NetworkParams::callbackFunction(char const*)+0xa6>
 80172b8:	491e      	ldr	r1, [pc, #120]	@ (8017334 <NetworkParams::callbackFunction(char const*)+0x150>)
 80172ba:	aa02      	add	r2, sp, #8
 80172bc:	4628      	mov	r0, r5
 80172be:	f001 ff0a 	bl	80190d6 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 80172c2:	b950      	cbnz	r0, 80172da <NetworkParams::callbackFunction(char const*)+0xf6>
 80172c4:	9a02      	ldr	r2, [sp, #8]
 80172c6:	6823      	ldr	r3, [r4, #0]
 80172c8:	b122      	cbz	r2, 80172d4 <NetworkParams::callbackFunction(char const*)+0xf0>
 80172ca:	f043 0308 	orr.w	r3, r3, #8
 80172ce:	6023      	str	r3, [r4, #0]
 80172d0:	60e2      	str	r2, [r4, #12]
 80172d2:	e79d      	b.n	8017210 <NetworkParams::callbackFunction(char const*)+0x2c>
 80172d4:	f023 0308 	bic.w	r3, r3, #8
 80172d8:	e7d7      	b.n	801728a <NetworkParams::callbackFunction(char const*)+0xa6>
 80172da:	233f      	movs	r3, #63	@ 0x3f
 80172dc:	9303      	str	r3, [sp, #12]
 80172de:	4916      	ldr	r1, [pc, #88]	@ (8017338 <NetworkParams::callbackFunction(char const*)+0x154>)
 80172e0:	ab03      	add	r3, sp, #12
 80172e2:	f104 0215 	add.w	r2, r4, #21
 80172e6:	4628      	mov	r0, r5
 80172e8:	f001 fe8a 	bl	8019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>
 80172ec:	b930      	cbnz	r0, 80172fc <NetworkParams::callbackFunction(char const*)+0x118>
 80172ee:	9b03      	ldr	r3, [sp, #12]
 80172f0:	4423      	add	r3, r4
 80172f2:	7558      	strb	r0, [r3, #21]
 80172f4:	6823      	ldr	r3, [r4, #0]
 80172f6:	f043 0320 	orr.w	r3, r3, #32
 80172fa:	e7c6      	b.n	801728a <NetworkParams::callbackFunction(char const*)+0xa6>
 80172fc:	490f      	ldr	r1, [pc, #60]	@ (801733c <NetworkParams::callbackFunction(char const*)+0x158>)
 80172fe:	aa02      	add	r2, sp, #8
 8017300:	4628      	mov	r0, r5
 8017302:	f001 fee8 	bl	80190d6 <Sscan::IpAddress(char const*, char const*, unsigned long&)>
 8017306:	2800      	cmp	r0, #0
 8017308:	d182      	bne.n	8017210 <NetworkParams::callbackFunction(char const*)+0x2c>
 801730a:	9a02      	ldr	r2, [sp, #8]
 801730c:	6823      	ldr	r3, [r4, #0]
 801730e:	b12a      	cbz	r2, 801731c <NetworkParams::callbackFunction(char const*)+0x138>
 8017310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017314:	6023      	str	r3, [r4, #0]
 8017316:	f8c4 2055 	str.w	r2, [r4, #85]	@ 0x55
 801731a:	e779      	b.n	8017210 <NetworkParams::callbackFunction(char const*)+0x2c>
 801731c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017320:	e7f8      	b.n	8017314 <NetworkParams::callbackFunction(char const*)+0x130>
 8017322:	bf00      	nop
 8017324:	080211f9 	stmdaeq	r2, {r0, r3, r4, r5, r6, r7, r8, ip}
 8017328:	080211e9 	stmdaeq	r2, {r0, r3, r5, r6, r7, r8, ip}
 801732c:	080211de 	stmdaeq	r2, {r1, r2, r3, r4, r6, r7, r8, ip}
 8017330:	080211d5 	stmdaeq	r2, {r0, r2, r4, r6, r7, r8, ip}
 8017334:	080211c5 	stmdaeq	r2, {r0, r2, r6, r7, r8, ip}
 8017338:	080211bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, ip}
 801733c:	080211b1 	stmdaeq	r2, {r0, r4, r5, r7, r8, ip}

08017340 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8017340:	f7ff bf50 	b.w	80171e4 <NetworkParams::callbackFunction(char const*)>

08017344 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)>:
 8017344:	b570      	push	{r4, r5, r6, lr}
 8017346:	4604      	mov	r4, r0
 8017348:	b086      	sub	sp, #24
 801734a:	4615      	mov	r5, r2
 801734c:	461e      	mov	r6, r3
 801734e:	2900      	cmp	r1, #0
 8017350:	d046      	beq.n	80173e0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x9c>
 8017352:	225e      	movs	r2, #94	@ 0x5e
 8017354:	f004 fd6f 	bl	801be36 <memmove>
 8017358:	462a      	mov	r2, r5
 801735a:	4d76      	ldr	r5, [pc, #472]	@ (8017534 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f0>)
 801735c:	4976      	ldr	r1, [pc, #472]	@ (8017538 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f4>)
 801735e:	4633      	mov	r3, r6
 8017360:	a803      	add	r0, sp, #12
 8017362:	f001 fd3d 	bl	8018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 8017366:	692a      	ldr	r2, [r5, #16]
 8017368:	4974      	ldr	r1, [pc, #464]	@ (801753c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1f8>)
 801736a:	2300      	movs	r3, #0
 801736c:	a803      	add	r0, sp, #12
 801736e:	f001 fd79 	bl	8018e64 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 8017372:	6823      	ldr	r3, [r4, #0]
 8017374:	0799      	lsls	r1, r3, #30
 8017376:	bf5c      	itt	pl
 8017378:	682a      	ldrpl	r2, [r5, #0]
 801737a:	6062      	strpl	r2, [r4, #4]
 801737c:	075a      	lsls	r2, r3, #29
 801737e:	bf5c      	itt	pl
 8017380:	686a      	ldrpl	r2, [r5, #4]
 8017382:	60a2      	strpl	r2, [r4, #8]
 8017384:	071e      	lsls	r6, r3, #28
 8017386:	bf5c      	itt	pl
 8017388:	68aa      	ldrpl	r2, [r5, #8]
 801738a:	60e2      	strpl	r2, [r4, #12]
 801738c:	0698      	lsls	r0, r3, #26
 801738e:	d412      	bmi.n	80173b6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x72>
 8017390:	4b6b      	ldr	r3, [pc, #428]	@ (8017540 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1fc>)
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	f104 0015 	add.w	r0, r4, #21
 8017398:	3315      	adds	r3, #21
 801739a:	223f      	movs	r2, #63	@ 0x3f
 801739c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80173a0:	b119      	cbz	r1, 80173aa <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x66>
 80173a2:	3a01      	subs	r2, #1
 80173a4:	f800 1b01 	strb.w	r1, [r0], #1
 80173a8:	d1f8      	bne.n	801739c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x58>
 80173aa:	2100      	movs	r1, #0
 80173ac:	f004 fd5a 	bl	801be64 <memset>
 80173b0:	2300      	movs	r3, #0
 80173b2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80173b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80173ba:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80173be:	7d23      	ldrb	r3, [r4, #20]
 80173c0:	6821      	ldr	r1, [r4, #0]
 80173c2:	42aa      	cmp	r2, r5
 80173c4:	d21d      	bcs.n	8017402 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xbe>
 80173c6:	9803      	ldr	r0, [sp, #12]
 80173c8:	07c9      	lsls	r1, r1, #31
 80173ca:	4410      	add	r0, r2
 80173cc:	eba5 0502 	sub.w	r5, r5, r2
 80173d0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80173d4:	d407      	bmi.n	80173e6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xa2>
 80173d6:	b93a      	cbnz	r2, 80173e8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xa4>
 80173d8:	9300      	str	r3, [sp, #0]
 80173da:	4a5a      	ldr	r2, [pc, #360]	@ (8017544 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x200>)
 80173dc:	4b5a      	ldr	r3, [pc, #360]	@ (8017548 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 80173de:	e006      	b.n	80173ee <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xaa>
 80173e0:	f7ff feb4 	bl	801714c <NetworkParamsStore::Copy(networkparams::Params*)>
 80173e4:	e7b8      	b.n	8017358 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 80173e6:	b312      	cbz	r2, 801742e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xea>
 80173e8:	9300      	str	r3, [sp, #0]
 80173ea:	4a58      	ldr	r2, [pc, #352]	@ (801754c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x208>)
 80173ec:	4b56      	ldr	r3, [pc, #344]	@ (8017548 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 80173ee:	4629      	mov	r1, r5
 80173f0:	f005 f844 	bl	801c47c <snprintf>
 80173f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80173f8:	4285      	cmp	r5, r0
 80173fa:	bfa4      	itt	ge
 80173fc:	181b      	addge	r3, r3, r0
 80173fe:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8017402:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017406:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801740a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 801740e:	6821      	ldr	r1, [r4, #0]
 8017410:	42aa      	cmp	r2, r5
 8017412:	d21f      	bcs.n	8017454 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x110>
 8017414:	9803      	ldr	r0, [sp, #12]
 8017416:	05ce      	lsls	r6, r1, #23
 8017418:	4410      	add	r0, r2
 801741a:	eba5 0502 	sub.w	r5, r5, r2
 801741e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8017422:	d408      	bmi.n	8017436 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xf2>
 8017424:	b94a      	cbnz	r2, 801743a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xf6>
 8017426:	9300      	str	r3, [sp, #0]
 8017428:	4a46      	ldr	r2, [pc, #280]	@ (8017544 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x200>)
 801742a:	4b49      	ldr	r3, [pc, #292]	@ (8017550 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 801742c:	e008      	b.n	8017440 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xfc>
 801742e:	9300      	str	r3, [sp, #0]
 8017430:	4a48      	ldr	r2, [pc, #288]	@ (8017554 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x210>)
 8017432:	4b45      	ldr	r3, [pc, #276]	@ (8017548 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x204>)
 8017434:	e7db      	b.n	80173ee <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xaa>
 8017436:	2a00      	cmp	r2, #0
 8017438:	d03e      	beq.n	80174b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x174>
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	4a43      	ldr	r2, [pc, #268]	@ (801754c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x208>)
 801743e:	4b44      	ldr	r3, [pc, #272]	@ (8017550 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 8017440:	4629      	mov	r1, r5
 8017442:	f005 f81b 	bl	801c47c <snprintf>
 8017446:	4285      	cmp	r5, r0
 8017448:	bfa2      	ittt	ge
 801744a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801744e:	18c0      	addge	r0, r0, r3
 8017450:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8017454:	4940      	ldr	r1, [pc, #256]	@ (8017558 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x214>)
 8017456:	a803      	add	r0, sp, #12
 8017458:	f001 fd7e 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 801745c:	6823      	ldr	r3, [r4, #0]
 801745e:	6862      	ldr	r2, [r4, #4]
 8017460:	493e      	ldr	r1, [pc, #248]	@ (801755c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x218>)
 8017462:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017466:	a803      	add	r0, sp, #12
 8017468:	f001 fcfc 	bl	8018e64 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 801746c:	6823      	ldr	r3, [r4, #0]
 801746e:	68a2      	ldr	r2, [r4, #8]
 8017470:	493b      	ldr	r1, [pc, #236]	@ (8017560 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x21c>)
 8017472:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017476:	a803      	add	r0, sp, #12
 8017478:	f001 fcf4 	bl	8018e64 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 801747c:	6823      	ldr	r3, [r4, #0]
 801747e:	68e2      	ldr	r2, [r4, #12]
 8017480:	4938      	ldr	r1, [pc, #224]	@ (8017564 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x220>)
 8017482:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017486:	a803      	add	r0, sp, #12
 8017488:	f001 fcec 	bl	8018e64 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 801748c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017490:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8017494:	6821      	ldr	r1, [r4, #0]
 8017496:	42aa      	cmp	r2, r5
 8017498:	d221      	bcs.n	80174de <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x19a>
 801749a:	9803      	ldr	r0, [sp, #12]
 801749c:	0689      	lsls	r1, r1, #26
 801749e:	4410      	add	r0, r2
 80174a0:	eba5 0502 	sub.w	r5, r5, r2
 80174a4:	f104 0315 	add.w	r3, r4, #21
 80174a8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80174ac:	d408      	bmi.n	80174c0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x17c>
 80174ae:	b94a      	cbnz	r2, 80174c4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x180>
 80174b0:	9300      	str	r3, [sp, #0]
 80174b2:	4a2d      	ldr	r2, [pc, #180]	@ (8017568 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x224>)
 80174b4:	4b2d      	ldr	r3, [pc, #180]	@ (801756c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 80174b6:	e008      	b.n	80174ca <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x186>
 80174b8:	9300      	str	r3, [sp, #0]
 80174ba:	4a26      	ldr	r2, [pc, #152]	@ (8017554 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x210>)
 80174bc:	4b24      	ldr	r3, [pc, #144]	@ (8017550 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x20c>)
 80174be:	e7bf      	b.n	8017440 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0xfc>
 80174c0:	2a00      	cmp	r2, #0
 80174c2:	d032      	beq.n	801752a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1e6>
 80174c4:	9300      	str	r3, [sp, #0]
 80174c6:	4a2a      	ldr	r2, [pc, #168]	@ (8017570 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x22c>)
 80174c8:	4b28      	ldr	r3, [pc, #160]	@ (801756c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 80174ca:	4629      	mov	r1, r5
 80174cc:	f004 ffd6 	bl	801c47c <snprintf>
 80174d0:	4285      	cmp	r5, r0
 80174d2:	bfa2      	ittt	ge
 80174d4:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80174d8:	18c0      	addge	r0, r0, r3
 80174da:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80174de:	4925      	ldr	r1, [pc, #148]	@ (8017574 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x230>)
 80174e0:	a803      	add	r0, sp, #12
 80174e2:	f001 fd39 	bl	8018f58 <PropertiesBuilder::AddComment(char const*)>
 80174e6:	6823      	ldr	r3, [r4, #0]
 80174e8:	f8d4 2055 	ldr.w	r2, [r4, #85]	@ 0x55
 80174ec:	4922      	ldr	r1, [pc, #136]	@ (8017578 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x234>)
 80174ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80174f2:	a803      	add	r0, sp, #12
 80174f4:	f001 fcb6 	bl	8018e64 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>
 80174f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80174fc:	b17b      	cbz	r3, 801751e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x1da>
 80174fe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017502:	9b03      	ldr	r3, [sp, #12]
 8017504:	4413      	add	r3, r2
 8017506:	227d      	movs	r2, #125	@ 0x7d
 8017508:	f803 2c01 	strb.w	r2, [r3, #-1]
 801750c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017510:	9903      	ldr	r1, [sp, #12]
 8017512:	54ca      	strb	r2, [r1, r3]
 8017514:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017518:	3301      	adds	r3, #1
 801751a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801751e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017524:	601a      	str	r2, [r3, #0]
 8017526:	b006      	add	sp, #24
 8017528:	bd70      	pop	{r4, r5, r6, pc}
 801752a:	9300      	str	r3, [sp, #0]
 801752c:	4a13      	ldr	r2, [pc, #76]	@ (801757c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x238>)
 801752e:	4b0f      	ldr	r3, [pc, #60]	@ (801756c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x228>)
 8017530:	e7cb      	b.n	80174ca <NetworkParams::Builder(networkparams::Params const*, char*, unsigned long, unsigned long&)+0x186>
 8017532:	bf00      	nop
 8017534:	2000e230 	andcs	lr, r0, r0, lsr r2
 8017538:	08021202 	stmdaeq	r2, {r1, r9, ip}
 801753c:	0801db86 	stmdaeq	r1, {r1, r2, r7, r8, r9, fp, ip, lr, pc}
 8017540:	2000e210 	andcs	lr, r0, r0, lsl r2
 8017544:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 8017548:	080211f9 	stmdaeq	r2, {r0, r3, r4, r5, r6, r7, r8, ip}
 801754c:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 8017550:	080211e9 	stmdaeq	r2, {r0, r3, r5, r6, r7, r8, ip}
 8017554:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}
 8017558:	0801db93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, fp, ip, lr, pc}
 801755c:	080211de 	stmdaeq	r2, {r1, r2, r3, r4, r6, r7, r8, ip}
 8017560:	080211d5 	stmdaeq	r2, {r0, r2, r4, r6, r7, r8, ip}
 8017564:	080211c5 	stmdaeq	r2, {r0, r2, r6, r7, r8, ip}
 8017568:	0801d221 	stmdaeq	r1, {r0, r5, r9, ip, lr, pc}
 801756c:	080211bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, ip}
 8017570:	0801d216 	stmdaeq	r1, {r1, r2, r4, r9, ip, lr, pc}
 8017574:	0801db9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, fp, ip, lr, pc}
 8017578:	080211b1 	stmdaeq	r2, {r0, r4, r5, r7, r8, ip}
 801757c:	0801d222 	stmdaeq	r1, {r1, r5, r9, ip, lr, pc}

08017580 <net::phy_customized_led()>:
 8017580:	4770      	bx	lr

08017582 <net::phy_customized_timing()>:
 8017582:	4770      	bx	lr

08017584 <emac_adjust_link(net::PhyStatus)>:
 8017584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017586:	ac04      	add	r4, sp, #16
 8017588:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801758c:	460c      	mov	r4, r1
 801758e:	4b14      	ldr	r3, [pc, #80]	@ (80175e0 <emac_adjust_link(net::PhyStatus)+0x5c>)
 8017590:	4914      	ldr	r1, [pc, #80]	@ (80175e4 <emac_adjust_link(net::PhyStatus)+0x60>)
 8017592:	2a00      	cmp	r2, #0
 8017594:	4615      	mov	r5, r2
 8017596:	4606      	mov	r6, r0
 8017598:	bf14      	ite	ne
 801759a:	2264      	movne	r2, #100	@ 0x64
 801759c:	220a      	moveq	r2, #10
 801759e:	4812      	ldr	r0, [pc, #72]	@ (80175e8 <emac_adjust_link(net::PhyStatus)+0x64>)
 80175a0:	2c00      	cmp	r4, #0
 80175a2:	bf18      	it	ne
 80175a4:	460b      	movne	r3, r1
 80175a6:	4911      	ldr	r1, [pc, #68]	@ (80175ec <emac_adjust_link(net::PhyStatus)+0x68>)
 80175a8:	2e01      	cmp	r6, #1
 80175aa:	bf08      	it	eq
 80175ac:	4601      	moveq	r1, r0
 80175ae:	4810      	ldr	r0, [pc, #64]	@ (80175f0 <emac_adjust_link(net::PhyStatus)+0x6c>)
 80175b0:	f004 ff3c 	bl	801c42c <printf>
 80175b4:	2d01      	cmp	r5, #1
 80175b6:	d10d      	bne.n	80175d4 <emac_adjust_link(net::PhyStatus)+0x50>
 80175b8:	2c01      	cmp	r4, #1
 80175ba:	bf14      	ite	ne
 80175bc:	f44f 4080 	movne.w	r0, #16384	@ 0x4000
 80175c0:	f44f 4090 	moveq.w	r0, #18432	@ 0x4800
 80175c4:	2210      	movs	r2, #16
 80175c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80175ca:	b004      	add	sp, #16
 80175cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175d0:	f002 bf2e 	b.w	801a430 <enet_init>
 80175d4:	1e63      	subs	r3, r4, #1
 80175d6:	4258      	negs	r0, r3
 80175d8:	4158      	adcs	r0, r3
 80175da:	02c0      	lsls	r0, r0, #11
 80175dc:	e7f2      	b.n	80175c4 <emac_adjust_link(net::PhyStatus)+0x40>
 80175de:	bf00      	nop
 80175e0:	0801dbd5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, fp, ip, lr, pc}
 80175e4:	0801dbda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, r9, fp, ip, lr, pc}
 80175e8:	0801dbcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, ip, lr, pc}
 80175ec:	0801dbd0 	stmdaeq	r1, {r4, r6, r7, r8, r9, fp, ip, lr, pc}
 80175f0:	0801dbdf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, r9, fp, ip, lr, pc}

080175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>:
 80175f4:	b508      	push	{r3, lr}
 80175f6:	4613      	mov	r3, r2
 80175f8:	b28a      	uxth	r2, r1
 80175fa:	b281      	uxth	r1, r0
 80175fc:	2000      	movs	r0, #0
 80175fe:	f002 feed 	bl	801a3dc <enet_phy_write_read>
 8017602:	1e43      	subs	r3, r0, #1
 8017604:	4258      	negs	r0, r3
 8017606:	4158      	adcs	r0, r3
 8017608:	bd08      	pop	{r3, pc}

0801760a <net::phy_write(unsigned long, unsigned long, unsigned short)>:
 801760a:	b507      	push	{r0, r1, r2, lr}
 801760c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017610:	f10d 0306 	add.w	r3, sp, #6
 8017614:	b28a      	uxth	r2, r1
 8017616:	b281      	uxth	r1, r0
 8017618:	2002      	movs	r0, #2
 801761a:	f002 fedf 	bl	801a3dc <enet_phy_write_read>
 801761e:	1e43      	subs	r3, r0, #1
 8017620:	4258      	negs	r0, r3
 8017622:	4158      	adcs	r0, r3
 8017624:	b003      	add	sp, #12
 8017626:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801762c <net::phy_config(unsigned long)>:
 801762c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801762e:	4e28      	ldr	r6, [pc, #160]	@ (80176d0 <net::phy_config(unsigned long)+0xa4>)
 8017630:	4605      	mov	r5, r0
 8017632:	2001      	movs	r0, #1
 8017634:	6934      	ldr	r4, [r6, #16]
 8017636:	f003 f9c1 	bl	801a9bc <rcu_clock_freq_get>
 801763a:	4b26      	ldr	r3, [pc, #152]	@ (80176d4 <net::phy_config(unsigned long)+0xa8>)
 801763c:	4a26      	ldr	r2, [pc, #152]	@ (80176d8 <net::phy_config(unsigned long)+0xac>)
 801763e:	4403      	add	r3, r0
 8017640:	4293      	cmp	r3, r2
 8017642:	f024 041c 	bic.w	r4, r4, #28
 8017646:	d216      	bcs.n	8017676 <net::phy_config(unsigned long)+0x4a>
 8017648:	f044 0408 	orr.w	r4, r4, #8
 801764c:	6134      	str	r4, [r6, #16]
 801764e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8017652:	2100      	movs	r1, #0
 8017654:	4628      	mov	r0, r5
 8017656:	f7ff ffd8 	bl	801760a <net::phy_write(unsigned long, unsigned long, unsigned short)>
 801765a:	b330      	cbz	r0, 80176aa <net::phy_config(unsigned long)+0x7e>
 801765c:	4c1f      	ldr	r4, [pc, #124]	@ (80176dc <net::phy_config(unsigned long)+0xb0>)
 801765e:	6826      	ldr	r6, [r4, #0]
 8017660:	6823      	ldr	r3, [r4, #0]
 8017662:	1b9b      	subs	r3, r3, r6
 8017664:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8017668:	d325      	bcc.n	80176b6 <net::phy_config(unsigned long)+0x8a>
 801766a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801766e:	43c0      	mvns	r0, r0
 8017670:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8017674:	e01a      	b.n	80176ac <net::phy_config(unsigned long)+0x80>
 8017676:	4b1a      	ldr	r3, [pc, #104]	@ (80176e0 <net::phy_config(unsigned long)+0xb4>)
 8017678:	4a1a      	ldr	r2, [pc, #104]	@ (80176e4 <net::phy_config(unsigned long)+0xb8>)
 801767a:	4403      	add	r3, r0
 801767c:	4293      	cmp	r3, r2
 801767e:	d802      	bhi.n	8017686 <net::phy_config(unsigned long)+0x5a>
 8017680:	f044 040c 	orr.w	r4, r4, #12
 8017684:	e7e2      	b.n	801764c <net::phy_config(unsigned long)+0x20>
 8017686:	4b18      	ldr	r3, [pc, #96]	@ (80176e8 <net::phy_config(unsigned long)+0xbc>)
 8017688:	4a18      	ldr	r2, [pc, #96]	@ (80176ec <net::phy_config(unsigned long)+0xc0>)
 801768a:	4403      	add	r3, r0
 801768c:	4293      	cmp	r3, r2
 801768e:	d3dd      	bcc.n	801764c <net::phy_config(unsigned long)+0x20>
 8017690:	4b17      	ldr	r3, [pc, #92]	@ (80176f0 <net::phy_config(unsigned long)+0xc4>)
 8017692:	4a18      	ldr	r2, [pc, #96]	@ (80176f4 <net::phy_config(unsigned long)+0xc8>)
 8017694:	4403      	add	r3, r0
 8017696:	4293      	cmp	r3, r2
 8017698:	d802      	bhi.n	80176a0 <net::phy_config(unsigned long)+0x74>
 801769a:	f044 0404 	orr.w	r4, r4, #4
 801769e:	e7d5      	b.n	801764c <net::phy_config(unsigned long)+0x20>
 80176a0:	4b15      	ldr	r3, [pc, #84]	@ (80176f8 <net::phy_config(unsigned long)+0xcc>)
 80176a2:	4a16      	ldr	r2, [pc, #88]	@ (80176fc <net::phy_config(unsigned long)+0xd0>)
 80176a4:	4403      	add	r3, r0
 80176a6:	4293      	cmp	r3, r2
 80176a8:	d902      	bls.n	80176b0 <net::phy_config(unsigned long)+0x84>
 80176aa:	2000      	movs	r0, #0
 80176ac:	b002      	add	sp, #8
 80176ae:	bd70      	pop	{r4, r5, r6, pc}
 80176b0:	f044 0410 	orr.w	r4, r4, #16
 80176b4:	e7ca      	b.n	801764c <net::phy_config(unsigned long)+0x20>
 80176b6:	f10d 0206 	add.w	r2, sp, #6
 80176ba:	2100      	movs	r1, #0
 80176bc:	4628      	mov	r0, r5
 80176be:	f7ff ff99 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 80176c2:	2800      	cmp	r0, #0
 80176c4:	d0f1      	beq.n	80176aa <net::phy_config(unsigned long)+0x7e>
 80176c6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	dbc8      	blt.n	8017660 <net::phy_config(unsigned long)+0x34>
 80176ce:	e7ed      	b.n	80176ac <net::phy_config(unsigned long)+0x80>
 80176d0:	40028000 	andmi	r8, r2, r0
 80176d4:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 80176d8:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80176dc:	2001bcd0 	ldrdcs	fp, [r1], -r0
 80176e0:	fde9f140 	stc2l	1, cr15, [r9, #256]!	@ 0x100
 80176e4:	017d783f 	cmneq	sp, pc, lsr r8
 80176e8:	fc6c7900 	stc2l	9, cr7, [ip], #-0	@ <UNPREDICTABLE>
 80176ec:	02625a00 	rsbeq	r5, r2, #0, 20
 80176f0:	fa0a1f00 	blx	829f2f8 <_sidata+0x27d9ec>
 80176f4:	02faf07f 	rscseq	pc, sl, #127	@ 0x7f
 80176f8:	f70f2e80 			@ <UNDEFINED> instruction: 0xf70f2e80
 80176fc:	055d4a80 	ldrbeq	r4, [sp, #-2688]	@ 0xfffff580

08017700 <enet_gpio_config()>:
 8017700:	b510      	push	{r4, lr}
 8017702:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8017706:	f003 f91d 	bl	801a944 <rcu_periph_clock_enable>
 801770a:	f640 4001 	movw	r0, #3073	@ 0xc01
 801770e:	4c68      	ldr	r4, [pc, #416]	@ (80178b0 <enet_gpio_config()+0x1b0>)
 8017710:	f003 f918 	bl	801a944 <rcu_periph_clock_enable>
 8017714:	f640 4002 	movw	r0, #3074	@ 0xc02
 8017718:	f003 f914 	bl	801a944 <rcu_periph_clock_enable>
 801771c:	f241 100e 	movw	r0, #4366	@ 0x110e
 8017720:	f003 f910 	bl	801a944 <rcu_periph_clock_enable>
 8017724:	4620      	mov	r0, r4
 8017726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801772a:	2100      	movs	r1, #0
 801772c:	f003 f8c6 	bl	801a8bc <gpio_af_set>
 8017730:	4620      	mov	r0, r4
 8017732:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017736:	2200      	movs	r2, #0
 8017738:	2102      	movs	r1, #2
 801773a:	f003 f881 	bl	801a840 <gpio_mode_set>
 801773e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017742:	2203      	movs	r2, #3
 8017744:	4620      	mov	r0, r4
 8017746:	2100      	movs	r1, #0
 8017748:	f003 f89c 	bl	801a884 <gpio_output_options_set>
 801774c:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 8017750:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 8017754:	f003 f916 	bl	801a984 <rcu_ckout0_config>
 8017758:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801775c:	f003 f9a2 	bl	801aaa4 <syscfg_enet_phy_interface_config>
 8017760:	2302      	movs	r3, #2
 8017762:	4619      	mov	r1, r3
 8017764:	4620      	mov	r0, r4
 8017766:	2200      	movs	r2, #0
 8017768:	f003 f86a 	bl	801a840 <gpio_mode_set>
 801776c:	4620      	mov	r0, r4
 801776e:	2302      	movs	r3, #2
 8017770:	2203      	movs	r2, #3
 8017772:	2100      	movs	r1, #0
 8017774:	f003 f886 	bl	801a884 <gpio_output_options_set>
 8017778:	4620      	mov	r0, r4
 801777a:	2304      	movs	r3, #4
 801777c:	2200      	movs	r2, #0
 801777e:	2102      	movs	r1, #2
 8017780:	f003 f85e 	bl	801a840 <gpio_mode_set>
 8017784:	4620      	mov	r0, r4
 8017786:	2304      	movs	r3, #4
 8017788:	2203      	movs	r2, #3
 801778a:	2100      	movs	r1, #0
 801778c:	f003 f87a 	bl	801a884 <gpio_output_options_set>
 8017790:	4620      	mov	r0, r4
 8017792:	2380      	movs	r3, #128	@ 0x80
 8017794:	2200      	movs	r2, #0
 8017796:	2102      	movs	r1, #2
 8017798:	f003 f852 	bl	801a840 <gpio_mode_set>
 801779c:	2380      	movs	r3, #128	@ 0x80
 801779e:	4620      	mov	r0, r4
 80177a0:	2203      	movs	r2, #3
 80177a2:	2100      	movs	r1, #0
 80177a4:	f003 f86e 	bl	801a884 <gpio_output_options_set>
 80177a8:	4620      	mov	r0, r4
 80177aa:	2202      	movs	r2, #2
 80177ac:	210b      	movs	r1, #11
 80177ae:	f003 f885 	bl	801a8bc <gpio_af_set>
 80177b2:	4620      	mov	r0, r4
 80177b4:	2204      	movs	r2, #4
 80177b6:	210b      	movs	r1, #11
 80177b8:	f003 f880 	bl	801a8bc <gpio_af_set>
 80177bc:	4620      	mov	r0, r4
 80177be:	2280      	movs	r2, #128	@ 0x80
 80177c0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80177c4:	210b      	movs	r1, #11
 80177c6:	f003 f879 	bl	801a8bc <gpio_af_set>
 80177ca:	4620      	mov	r0, r4
 80177cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80177d0:	2200      	movs	r2, #0
 80177d2:	2102      	movs	r1, #2
 80177d4:	f003 f834 	bl	801a840 <gpio_mode_set>
 80177d8:	4620      	mov	r0, r4
 80177da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80177de:	2203      	movs	r2, #3
 80177e0:	2100      	movs	r1, #0
 80177e2:	f003 f84f 	bl	801a884 <gpio_output_options_set>
 80177e6:	4620      	mov	r0, r4
 80177e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80177ec:	2200      	movs	r2, #0
 80177ee:	2102      	movs	r1, #2
 80177f0:	f003 f826 	bl	801a840 <gpio_mode_set>
 80177f4:	4620      	mov	r0, r4
 80177f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80177fa:	2203      	movs	r2, #3
 80177fc:	2100      	movs	r1, #0
 80177fe:	f003 f841 	bl	801a884 <gpio_output_options_set>
 8017802:	4620      	mov	r0, r4
 8017804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017808:	2200      	movs	r2, #0
 801780a:	2102      	movs	r1, #2
 801780c:	f003 f818 	bl	801a840 <gpio_mode_set>
 8017810:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017814:	4620      	mov	r0, r4
 8017816:	2203      	movs	r2, #3
 8017818:	2100      	movs	r1, #0
 801781a:	f003 f833 	bl	801a884 <gpio_output_options_set>
 801781e:	4620      	mov	r0, r4
 8017820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017824:	210b      	movs	r1, #11
 8017826:	f003 f849 	bl	801a8bc <gpio_af_set>
 801782a:	4620      	mov	r0, r4
 801782c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017830:	210b      	movs	r1, #11
 8017832:	f003 f843 	bl	801a8bc <gpio_af_set>
 8017836:	4620      	mov	r0, r4
 8017838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801783c:	210b      	movs	r1, #11
 801783e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8017842:	f003 f83b 	bl	801a8bc <gpio_af_set>
 8017846:	2302      	movs	r3, #2
 8017848:	4619      	mov	r1, r3
 801784a:	4620      	mov	r0, r4
 801784c:	2200      	movs	r2, #0
 801784e:	f002 fff7 	bl	801a840 <gpio_mode_set>
 8017852:	4620      	mov	r0, r4
 8017854:	2302      	movs	r3, #2
 8017856:	2203      	movs	r2, #3
 8017858:	2100      	movs	r1, #0
 801785a:	f003 f813 	bl	801a884 <gpio_output_options_set>
 801785e:	4620      	mov	r0, r4
 8017860:	2310      	movs	r3, #16
 8017862:	2200      	movs	r2, #0
 8017864:	2102      	movs	r1, #2
 8017866:	f002 ffeb 	bl	801a840 <gpio_mode_set>
 801786a:	4620      	mov	r0, r4
 801786c:	2310      	movs	r3, #16
 801786e:	2203      	movs	r2, #3
 8017870:	2100      	movs	r1, #0
 8017872:	f003 f807 	bl	801a884 <gpio_output_options_set>
 8017876:	4620      	mov	r0, r4
 8017878:	2320      	movs	r3, #32
 801787a:	2200      	movs	r2, #0
 801787c:	2102      	movs	r1, #2
 801787e:	f002 ffdf 	bl	801a840 <gpio_mode_set>
 8017882:	2320      	movs	r3, #32
 8017884:	4620      	mov	r0, r4
 8017886:	2203      	movs	r2, #3
 8017888:	2100      	movs	r1, #0
 801788a:	f002 fffb 	bl	801a884 <gpio_output_options_set>
 801788e:	4620      	mov	r0, r4
 8017890:	2202      	movs	r2, #2
 8017892:	210b      	movs	r1, #11
 8017894:	f003 f812 	bl	801a8bc <gpio_af_set>
 8017898:	4620      	mov	r0, r4
 801789a:	2210      	movs	r2, #16
 801789c:	210b      	movs	r1, #11
 801789e:	f003 f80d 	bl	801a8bc <gpio_af_set>
 80178a2:	4620      	mov	r0, r4
 80178a4:	2220      	movs	r2, #32
 80178a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178aa:	210b      	movs	r1, #11
 80178ac:	f003 b806 	b.w	801a8bc <gpio_af_set>
 80178b0:	40020000 	andmi	r0, r2, r0

080178b4 <emac_eth_recv(unsigned char**)>:
 80178b4:	b538      	push	{r3, r4, r5, lr}
 80178b6:	4d07      	ldr	r5, [pc, #28]	@ (80178d4 <emac_eth_recv(unsigned char**)+0x20>)
 80178b8:	4604      	mov	r4, r0
 80178ba:	2102      	movs	r1, #2
 80178bc:	6828      	ldr	r0, [r5, #0]
 80178be:	f002 ff39 	bl	801a734 <enet_desc_information_get>
 80178c2:	b118      	cbz	r0, 80178cc <emac_eth_recv(unsigned char**)+0x18>
 80178c4:	682b      	ldr	r3, [r5, #0]
 80178c6:	689b      	ldr	r3, [r3, #8]
 80178c8:	6023      	str	r3, [r4, #0]
 80178ca:	bd38      	pop	{r3, r4, r5, pc}
 80178cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178d0:	bd38      	pop	{r3, r4, r5, pc}
 80178d2:	bf00      	nop
 80178d4:	2000e430 	andcs	lr, r0, r0, lsr r4

080178d8 <emac_free_pkt()>:
 80178d8:	490d      	ldr	r1, [pc, #52]	@ (8017910 <emac_free_pkt()+0x38>)
 80178da:	e001      	b.n	80178e0 <emac_free_pkt()+0x8>
 80178dc:	f3bf 8f5f 	dmb	sy
 80178e0:	680b      	ldr	r3, [r1, #0]
 80178e2:	681a      	ldr	r2, [r3, #0]
 80178e4:	2a00      	cmp	r2, #0
 80178e6:	dbf9      	blt.n	80178dc <emac_free_pkt()+0x4>
 80178e8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80178ec:	4a09      	ldr	r2, [pc, #36]	@ (8017914 <emac_free_pkt()+0x3c>)
 80178ee:	6018      	str	r0, [r3, #0]
 80178f0:	6950      	ldr	r0, [r2, #20]
 80178f2:	0600      	lsls	r0, r0, #24
 80178f4:	d509      	bpl.n	801790a <emac_free_pkt()+0x32>
 80178f6:	b410      	push	{r4}
 80178f8:	2000      	movs	r0, #0
 80178fa:	2480      	movs	r4, #128	@ 0x80
 80178fc:	6154      	str	r4, [r2, #20]
 80178fe:	6090      	str	r0, [r2, #8]
 8017900:	68db      	ldr	r3, [r3, #12]
 8017902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017906:	600b      	str	r3, [r1, #0]
 8017908:	4770      	bx	lr
 801790a:	68db      	ldr	r3, [r3, #12]
 801790c:	600b      	str	r3, [r1, #0]
 801790e:	4770      	bx	lr
 8017910:	2000e430 	andcs	lr, r0, r0, lsr r4
 8017914:	40029000 	andmi	r9, r2, r0

08017918 <emac_eth_send(void*, unsigned long)>:
 8017918:	b570      	push	{r4, r5, r6, lr}
 801791a:	4c20      	ldr	r4, [pc, #128]	@ (801799c <emac_eth_send(void*, unsigned long)+0x84>)
 801791c:	e001      	b.n	8017922 <emac_eth_send(void*, unsigned long)+0xa>
 801791e:	f3bf 8f5f 	dmb	sy
 8017922:	6823      	ldr	r3, [r4, #0]
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	2a00      	cmp	r2, #0
 8017928:	dbf9      	blt.n	801791e <emac_eth_send(void*, unsigned long)+0x6>
 801792a:	689b      	ldr	r3, [r3, #8]
 801792c:	ea43 0200 	orr.w	r2, r3, r0
 8017930:	0792      	lsls	r2, r2, #30
 8017932:	d01e      	beq.n	8017972 <emac_eth_send(void*, unsigned long)+0x5a>
 8017934:	460a      	mov	r2, r1
 8017936:	eb00 0c02 	add.w	ip, r0, r2
 801793a:	b12a      	cbz	r2, 8017948 <emac_eth_send(void*, unsigned long)+0x30>
 801793c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017940:	f803 2b01 	strb.w	r2, [r3], #1
 8017944:	4584      	cmp	ip, r0
 8017946:	d1f9      	bne.n	801793c <emac_eth_send(void*, unsigned long)+0x24>
 8017948:	6822      	ldr	r2, [r4, #0]
 801794a:	4815      	ldr	r0, [pc, #84]	@ (80179a0 <emac_eth_send(void*, unsigned long)+0x88>)
 801794c:	6813      	ldr	r3, [r2, #0]
 801794e:	6051      	str	r1, [r2, #4]
 8017950:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 8017954:	6013      	str	r3, [r2, #0]
 8017956:	6943      	ldr	r3, [r0, #20]
 8017958:	6941      	ldr	r1, [r0, #20]
 801795a:	f003 0304 	and.w	r3, r3, #4
 801795e:	f001 0120 	and.w	r1, r1, #32
 8017962:	430b      	orrs	r3, r1
 8017964:	d002      	beq.n	801796c <emac_eth_send(void*, unsigned long)+0x54>
 8017966:	2100      	movs	r1, #0
 8017968:	6143      	str	r3, [r0, #20]
 801796a:	6041      	str	r1, [r0, #4]
 801796c:	68d3      	ldr	r3, [r2, #12]
 801796e:	6023      	str	r3, [r4, #0]
 8017970:	bd70      	pop	{r4, r5, r6, pc}
 8017972:	2903      	cmp	r1, #3
 8017974:	d9de      	bls.n	8017934 <emac_eth_send(void*, unsigned long)+0x1c>
 8017976:	1f0e      	subs	r6, r1, #4
 8017978:	f026 0603 	bic.w	r6, r6, #3
 801797c:	3604      	adds	r6, #4
 801797e:	eb00 0c06 	add.w	ip, r0, r6
 8017982:	eba3 0e00 	sub.w	lr, r3, r0
 8017986:	eb00 020e 	add.w	r2, r0, lr
 801798a:	f850 5b04 	ldr.w	r5, [r0], #4
 801798e:	6015      	str	r5, [r2, #0]
 8017990:	4560      	cmp	r0, ip
 8017992:	d1f8      	bne.n	8017986 <emac_eth_send(void*, unsigned long)+0x6e>
 8017994:	4433      	add	r3, r6
 8017996:	f001 0203 	and.w	r2, r1, #3
 801799a:	e7cc      	b.n	8017936 <emac_eth_send(void*, unsigned long)+0x1e>
 801799c:	2000e434 	andcs	lr, r0, r4, lsr r4
 80179a0:	40029000 	andmi	r9, r2, r0

080179a4 <net::acd_start(net::acd::Acd*, net::ip_addr)>:
 80179a4:	2301      	movs	r3, #1
 80179a6:	b510      	push	{r4, lr}
 80179a8:	7103      	strb	r3, [r0, #4]
 80179aa:	6001      	str	r1, [r0, #0]
 80179ac:	4604      	mov	r4, r0
 80179ae:	f004 fd9b 	bl	801c4e8 <random>
 80179b2:	230a      	movs	r3, #10
 80179b4:	fbb0 f2f3 	udiv	r2, r0, r3
 80179b8:	fb02 0013 	mls	r0, r2, r3, r0
 80179bc:	4b11      	ldr	r3, [pc, #68]	@ (8017a04 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x60>)
 80179be:	81a0      	strh	r0, [r4, #12]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80179c6:	2807      	cmp	r0, #7
 80179c8:	d907      	bls.n	80179da <net::acd_start(net::acd::Acd*, net::ip_addr)+0x36>
 80179ca:	480f      	ldr	r0, [pc, #60]	@ (8017a08 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x64>)
 80179cc:	f002 fa36 	bl	8019e3c <console_error>
 80179d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80179d4:	4b0d      	ldr	r3, [pc, #52]	@ (8017a0c <net::acd_start(net::acd::Acd*, net::ip_addr)+0x68>)
 80179d6:	601a      	str	r2, [r3, #0]
 80179d8:	bd10      	pop	{r4, pc}
 80179da:	4a0d      	ldr	r2, [pc, #52]	@ (8017a10 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x6c>)
 80179dc:	6811      	ldr	r1, [r2, #0]
 80179de:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80179e2:	1c54      	adds	r4, r2, #1
 80179e4:	f8c3 40a4 	str.w	r4, [r3, #164]	@ 0xa4
 80179e8:	1c44      	adds	r4, r0, #1
 80179ea:	f8c3 40a0 	str.w	r4, [r3, #160]	@ 0xa0
 80179ee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80179f2:	3164      	adds	r1, #100	@ 0x64
 80179f4:	6219      	str	r1, [r3, #32]
 80179f6:	2164      	movs	r1, #100	@ 0x64
 80179f8:	e9c3 1209 	strd	r1, r2, [r3, #36]	@ 0x24
 80179fc:	4905      	ldr	r1, [pc, #20]	@ (8017a14 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x70>)
 80179fe:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8017a00:	e7e8      	b.n	80179d4 <net::acd_start(net::acd::Acd*, net::ip_addr)+0x30>
 8017a02:	bf00      	nop
 8017a04:	2000e3e0 	andcs	lr, r0, r0, ror #7
 8017a08:	0801db74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 8017a0c:	2000e25c 	andcs	lr, r0, ip, asr r2
 8017a10:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8017a14:	08017a71 	stmdaeq	r1, {r0, r4, r5, r6, r9, fp, ip, sp, lr}

08017a18 <net::acd_stop(net::acd::Acd*)>:
 8017a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1a:	4e13      	ldr	r6, [pc, #76]	@ (8017a68 <net::acd_stop(net::acd::Acd*)+0x50>)
 8017a1c:	6832      	ldr	r2, [r6, #0]
 8017a1e:	2300      	movs	r3, #0
 8017a20:	429a      	cmp	r2, r3
 8017a22:	7103      	strb	r3, [r0, #4]
 8017a24:	db1a      	blt.n	8017a5c <net::acd_stop(net::acd::Acd*)+0x44>
 8017a26:	4911      	ldr	r1, [pc, #68]	@ (8017a6c <net::acd_stop(net::acd::Acd*)+0x54>)
 8017a28:	680d      	ldr	r5, [r1, #0]
 8017a2a:	f8d5 40a0 	ldr.w	r4, [r5, #160]	@ 0xa0
 8017a2e:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 8017a32:	42a3      	cmp	r3, r4
 8017a34:	d012      	beq.n	8017a5c <net::acd_stop(net::acd::Acd*)+0x44>
 8017a36:	0118      	lsls	r0, r3, #4
 8017a38:	580f      	ldr	r7, [r1, r0]
 8017a3a:	42ba      	cmp	r2, r7
 8017a3c:	d112      	bne.n	8017a64 <net::acd_stop(net::acd::Acd*)+0x4c>
 8017a3e:	3c01      	subs	r4, #1
 8017a40:	1ae2      	subs	r2, r4, r3
 8017a42:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8017a46:	0112      	lsls	r2, r2, #4
 8017a48:	3020      	adds	r0, #32
 8017a4a:	42a3      	cmp	r3, r4
 8017a4c:	bf88      	it	hi
 8017a4e:	2200      	movhi	r2, #0
 8017a50:	4429      	add	r1, r5
 8017a52:	4428      	add	r0, r5
 8017a54:	f004 f9ef 	bl	801be36 <memmove>
 8017a58:	f8c5 40a0 	str.w	r4, [r5, #160]	@ 0xa0
 8017a5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017a60:	6033      	str	r3, [r6, #0]
 8017a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a64:	3301      	adds	r3, #1
 8017a66:	e7e4      	b.n	8017a32 <net::acd_stop(net::acd::Acd*)+0x1a>
 8017a68:	2000e25c 	andcs	lr, r0, ip, asr r2
 8017a6c:	2000e3e0 	andcs	lr, r0, r0, ror #7

08017a70 <net::acd_timer()>:
 8017a70:	b510      	push	{r4, lr}
 8017a72:	4b2b      	ldr	r3, [pc, #172]	@ (8017b20 <net::acd_timer()+0xb0>)
 8017a74:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017a76:	79a3      	ldrb	r3, [r4, #6]
 8017a78:	b10b      	cbz	r3, 8017a7e <net::acd_timer()+0xe>
 8017a7a:	3b01      	subs	r3, #1
 8017a7c:	71a3      	strb	r3, [r4, #6]
 8017a7e:	89a3      	ldrh	r3, [r4, #12]
 8017a80:	b10b      	cbz	r3, 8017a86 <net::acd_timer()+0x16>
 8017a82:	3b01      	subs	r3, #1
 8017a84:	81a3      	strh	r3, [r4, #12]
 8017a86:	7923      	ldrb	r3, [r4, #4]
 8017a88:	2b04      	cmp	r3, #4
 8017a8a:	d805      	bhi.n	8017a98 <net::acd_timer()+0x28>
 8017a8c:	2b02      	cmp	r3, #2
 8017a8e:	d82b      	bhi.n	8017ae8 <net::acd_timer()+0x78>
 8017a90:	3b01      	subs	r3, #1
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d90b      	bls.n	8017aae <net::acd_timer()+0x3e>
 8017a96:	bd10      	pop	{r4, pc}
 8017a98:	2b07      	cmp	r3, #7
 8017a9a:	d1fc      	bne.n	8017a96 <net::acd_timer()+0x26>
 8017a9c:	89a3      	ldrh	r3, [r4, #12]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d1f9      	bne.n	8017a96 <net::acd_timer()+0x26>
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f7ff ffb8 	bl	8017a18 <net::acd_stop(net::acd::Acd*)>
 8017aa8:	68a3      	ldr	r3, [r4, #8]
 8017aaa:	2001      	movs	r0, #1
 8017aac:	e034      	b.n	8017b18 <net::acd_timer()+0xa8>
 8017aae:	89a3      	ldrh	r3, [r4, #12]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d1f0      	bne.n	8017a96 <net::acd_timer()+0x26>
 8017ab4:	2302      	movs	r3, #2
 8017ab6:	7123      	strb	r3, [r4, #4]
 8017ab8:	6820      	ldr	r0, [r4, #0]
 8017aba:	f000 f9df 	bl	8017e7c <net::arp_acd_probe(net::ip_addr)>
 8017abe:	7963      	ldrb	r3, [r4, #5]
 8017ac0:	3301      	adds	r3, #1
 8017ac2:	b2db      	uxtb	r3, r3
 8017ac4:	2b02      	cmp	r3, #2
 8017ac6:	7163      	strb	r3, [r4, #5]
 8017ac8:	d904      	bls.n	8017ad4 <net::acd_timer()+0x64>
 8017aca:	2303      	movs	r3, #3
 8017acc:	80a3      	strh	r3, [r4, #4]
 8017ace:	2314      	movs	r3, #20
 8017ad0:	81a3      	strh	r3, [r4, #12]
 8017ad2:	e7e0      	b.n	8017a96 <net::acd_timer()+0x26>
 8017ad4:	f004 fd08 	bl	801c4e8 <random>
 8017ad8:	230a      	movs	r3, #10
 8017ada:	fbb0 f2f3 	udiv	r2, r0, r3
 8017ade:	fb02 0013 	mls	r0, r2, r3, r0
 8017ae2:	4418      	add	r0, r3
 8017ae4:	81a0      	strh	r0, [r4, #12]
 8017ae6:	e7d6      	b.n	8017a96 <net::acd_timer()+0x26>
 8017ae8:	89a3      	ldrh	r3, [r4, #12]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d1d3      	bne.n	8017a96 <net::acd_timer()+0x26>
 8017aee:	7963      	ldrb	r3, [r4, #5]
 8017af0:	b913      	cbnz	r3, 8017af8 <net::acd_timer()+0x88>
 8017af2:	2204      	movs	r2, #4
 8017af4:	7122      	strb	r2, [r4, #4]
 8017af6:	71e3      	strb	r3, [r4, #7]
 8017af8:	6820      	ldr	r0, [r4, #0]
 8017afa:	f000 f9d3 	bl	8017ea4 <net::arp_acd_send_announcement(net::ip_addr)>
 8017afe:	2314      	movs	r3, #20
 8017b00:	81a3      	strh	r3, [r4, #12]
 8017b02:	7963      	ldrb	r3, [r4, #5]
 8017b04:	3301      	adds	r3, #1
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	2b01      	cmp	r3, #1
 8017b0a:	7163      	strb	r3, [r4, #5]
 8017b0c:	d9c3      	bls.n	8017a96 <net::acd_timer()+0x26>
 8017b0e:	2305      	movs	r3, #5
 8017b10:	80a3      	strh	r3, [r4, #4]
 8017b12:	2000      	movs	r0, #0
 8017b14:	68a3      	ldr	r3, [r4, #8]
 8017b16:	81a0      	strh	r0, [r4, #12]
 8017b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b1c:	4718      	bx	r3
 8017b1e:	bf00      	nop
 8017b20:	2000e230 	andcs	lr, r0, r0, lsr r2

08017b24 <net::acd_restart(net::acd::Acd*)>:
 8017b24:	b510      	push	{r4, lr}
 8017b26:	79c3      	ldrb	r3, [r0, #7]
 8017b28:	4604      	mov	r4, r0
 8017b2a:	3301      	adds	r3, #1
 8017b2c:	71c3      	strb	r3, [r0, #7]
 8017b2e:	6883      	ldr	r3, [r0, #8]
 8017b30:	2002      	movs	r0, #2
 8017b32:	4798      	blx	r3
 8017b34:	79e3      	ldrb	r3, [r4, #7]
 8017b36:	2b09      	cmp	r3, #9
 8017b38:	d905      	bls.n	8017b46 <net::acd_restart(net::acd::Acd*)+0x22>
 8017b3a:	2307      	movs	r3, #7
 8017b3c:	7123      	strb	r3, [r4, #4]
 8017b3e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8017b42:	81a3      	strh	r3, [r4, #12]
 8017b44:	bd10      	pop	{r4, pc}
 8017b46:	4620      	mov	r0, r4
 8017b48:	f7ff ff66 	bl	8017a18 <net::acd_stop(net::acd::Acd*)>
 8017b4c:	68a3      	ldr	r3, [r4, #8]
 8017b4e:	2001      	movs	r0, #1
 8017b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b54:	4718      	bx	r3
	...

08017b58 <net::acd_network_changed_link_down()>:
 8017b58:	4b01      	ldr	r3, [pc, #4]	@ (8017b60 <net::acd_network_changed_link_down()+0x8>)
 8017b5a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017b5c:	f7ff bf5c 	b.w	8017a18 <net::acd_stop(net::acd::Acd*)>
 8017b60:	2000e230 	andcs	lr, r0, r0, lsr r2

08017b64 <net::acd_arp_reply(t_arp*)>:
 8017b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b68:	4e28      	ldr	r6, [pc, #160]	@ (8017c0c <net::acd_arp_reply(t_arp*)+0xa8>)
 8017b6a:	6a75      	ldr	r5, [r6, #36]	@ 0x24
 8017b6c:	792f      	ldrb	r7, [r5, #4]
 8017b6e:	2f03      	cmp	r7, #3
 8017b70:	4604      	mov	r4, r0
 8017b72:	d802      	bhi.n	8017b7a <net::acd_arp_reply(t_arp*)+0x16>
 8017b74:	b9bf      	cbnz	r7, 8017ba6 <net::acd_arp_reply(t_arp*)+0x42>
 8017b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b7a:	1f3b      	subs	r3, r7, #4
 8017b7c:	2b02      	cmp	r3, #2
 8017b7e:	d8fa      	bhi.n	8017b76 <net::acd_arp_reply(t_arp*)+0x12>
 8017b80:	301c      	adds	r0, #28
 8017b82:	f7fe fb8b 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 8017b86:	682b      	ldr	r3, [r5, #0]
 8017b88:	4298      	cmp	r0, r3
 8017b8a:	d1f4      	bne.n	8017b76 <net::acd_arp_reply(t_arp*)+0x12>
 8017b8c:	f104 0315 	add.w	r3, r4, #21
 8017b90:	3613      	adds	r6, #19
 8017b92:	341b      	adds	r4, #27
 8017b94:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017b98:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8017b9c:	4291      	cmp	r1, r2
 8017b9e:	d121      	bne.n	8017be4 <net::acd_arp_reply(t_arp*)+0x80>
 8017ba0:	42a3      	cmp	r3, r4
 8017ba2:	d1f7      	bne.n	8017b94 <net::acd_arp_reply(t_arp*)+0x30>
 8017ba4:	e7e7      	b.n	8017b76 <net::acd_arp_reply(t_arp*)+0x12>
 8017ba6:	301c      	adds	r0, #28
 8017ba8:	f7fe fb78 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 8017bac:	682f      	ldr	r7, [r5, #0]
 8017bae:	42b8      	cmp	r0, r7
 8017bb0:	d013      	beq.n	8017bda <net::acd_arp_reply(t_arp*)+0x76>
 8017bb2:	2800      	cmp	r0, #0
 8017bb4:	d0df      	beq.n	8017b76 <net::acd_arp_reply(t_arp*)+0x12>
 8017bb6:	f104 0026 	add.w	r0, r4, #38	@ 0x26
 8017bba:	f7fe fb6f 	bl	801629c <net::memcpy_ip(unsigned char const*)>
 8017bbe:	4287      	cmp	r7, r0
 8017bc0:	d1d9      	bne.n	8017b76 <net::acd_arp_reply(t_arp*)+0x12>
 8017bc2:	f104 0315 	add.w	r3, r4, #21
 8017bc6:	3613      	adds	r6, #19
 8017bc8:	341b      	adds	r4, #27
 8017bca:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017bce:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8017bd2:	4291      	cmp	r1, r2
 8017bd4:	d1cf      	bne.n	8017b76 <net::acd_arp_reply(t_arp*)+0x12>
 8017bd6:	42a3      	cmp	r3, r4
 8017bd8:	d1f7      	bne.n	8017bca <net::acd_arp_reply(t_arp*)+0x66>
 8017bda:	4628      	mov	r0, r5
 8017bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017be0:	f7ff bfa0 	b.w	8017b24 <net::acd_restart(net::acd::Acd*)>
 8017be4:	2f06      	cmp	r7, #6
 8017be6:	d107      	bne.n	8017bf8 <net::acd_arp_reply(t_arp*)+0x94>
 8017be8:	4628      	mov	r0, r5
 8017bea:	f7ff ff15 	bl	8017a18 <net::acd_stop(net::acd::Acd*)>
 8017bee:	68ab      	ldr	r3, [r5, #8]
 8017bf0:	2002      	movs	r0, #2
 8017bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bf6:	4718      	bx	r3
 8017bf8:	79ab      	ldrb	r3, [r5, #6]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d1ed      	bne.n	8017bda <net::acd_arp_reply(t_arp*)+0x76>
 8017bfe:	6828      	ldr	r0, [r5, #0]
 8017c00:	f000 f950 	bl	8017ea4 <net::arp_acd_send_announcement(net::ip_addr)>
 8017c04:	2364      	movs	r3, #100	@ 0x64
 8017c06:	71ab      	strb	r3, [r5, #6]
 8017c08:	e7b5      	b.n	8017b76 <net::acd_arp_reply(t_arp*)+0x12>
 8017c0a:	bf00      	nop
 8017c0c:	2000e230 	andcs	lr, r0, r0, lsr r2

08017c10 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))>:
 8017c10:	4b01      	ldr	r3, [pc, #4]	@ (8017c18 <net::acd_add(net::acd::Acd*, void (*)(net::acd::Callback))+0x8>)
 8017c12:	6081      	str	r1, [r0, #8]
 8017c14:	6258      	str	r0, [r3, #36]	@ 0x24
 8017c16:	4770      	bx	lr
 8017c18:	2000e230 	andcs	lr, r0, r0, lsr r2

08017c1c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)>:
 8017c1c:	b320      	cbz	r0, 8017c68 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x4c>
 8017c1e:	b319      	cbz	r1, 8017c68 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x4c>
 8017c20:	4b12      	ldr	r3, [pc, #72]	@ (8017c6c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x50>)
 8017c22:	b510      	push	{r4, lr}
 8017c24:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017c26:	6823      	ldr	r3, [r4, #0]
 8017c28:	4283      	cmp	r3, r0
 8017c2a:	d119      	bne.n	8017c60 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8017c2c:	b29b      	uxth	r3, r3
 8017c2e:	f64a 12fe 	movw	r2, #43518	@ 0xa9fe
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d114      	bne.n	8017c60 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8017c36:	b289      	uxth	r1, r1
 8017c38:	4299      	cmp	r1, r3
 8017c3a:	d011      	beq.n	8017c60 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8017c3c:	7923      	ldrb	r3, [r4, #4]
 8017c3e:	2b05      	cmp	r3, #5
 8017c40:	d80c      	bhi.n	8017c5c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x40>
 8017c42:	2b03      	cmp	r3, #3
 8017c44:	d80d      	bhi.n	8017c62 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x46>
 8017c46:	3b01      	subs	r3, #1
 8017c48:	2b02      	cmp	r3, #2
 8017c4a:	d809      	bhi.n	8017c60 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	f7ff fee3 	bl	8017a18 <net::acd_stop(net::acd::Acd*)>
 8017c52:	68a3      	ldr	r3, [r4, #8]
 8017c54:	2002      	movs	r0, #2
 8017c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c5a:	4718      	bx	r3
 8017c5c:	2b07      	cmp	r3, #7
 8017c5e:	d0f5      	beq.n	8017c4c <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x30>
 8017c60:	bd10      	pop	{r4, pc}
 8017c62:	2306      	movs	r3, #6
 8017c64:	7123      	strb	r3, [r4, #4]
 8017c66:	e7fb      	b.n	8017c60 <net::acd_netif_ip_addr_changed(net::ip_addr, net::ip_addr)+0x44>
 8017c68:	4770      	bx	lr
 8017c6a:	bf00      	nop
 8017c6c:	2000e230 	andcs	lr, r0, r0, lsr r2

08017c70 <net::arp_find_record(unsigned long, net::arp::Flags)>:
 8017c70:	4b17      	ldr	r3, [pc, #92]	@ (8017cd0 <net::arp_find_record(unsigned long, net::arp::Flags)+0x60>)
 8017c72:	b570      	push	{r4, r5, r6, lr}
 8017c74:	f04f 0e00 	mov.w	lr, #0
 8017c78:	4604      	mov	r4, r0
 8017c7a:	f503 7cc0 	add.w	ip, r3, #384	@ 0x180
 8017c7e:	4676      	mov	r6, lr
 8017c80:	4675      	mov	r5, lr
 8017c82:	4670      	mov	r0, lr
 8017c84:	e004      	b.n	8017c90 <net::arp_find_record(unsigned long, net::arp::Flags)+0x20>
 8017c86:	2a03      	cmp	r2, #3
 8017c88:	d019      	beq.n	8017cbe <net::arp_find_record(unsigned long, net::arp::Flags)+0x4e>
 8017c8a:	3318      	adds	r3, #24
 8017c8c:	4563      	cmp	r3, ip
 8017c8e:	d012      	beq.n	8017cb6 <net::arp_find_record(unsigned long, net::arp::Flags)+0x46>
 8017c90:	681a      	ldr	r2, [r3, #0]
 8017c92:	42a2      	cmp	r2, r4
 8017c94:	d01a      	beq.n	8017ccc <net::arp_find_record(unsigned long, net::arp::Flags)+0x5c>
 8017c96:	2901      	cmp	r1, #1
 8017c98:	d0f7      	beq.n	8017c8a <net::arp_find_record(unsigned long, net::arp::Flags)+0x1a>
 8017c9a:	695a      	ldr	r2, [r3, #20]
 8017c9c:	b1aa      	cbz	r2, 8017cca <net::arp_find_record(unsigned long, net::arp::Flags)+0x5a>
 8017c9e:	2a02      	cmp	r2, #2
 8017ca0:	d1f1      	bne.n	8017c86 <net::arp_find_record(unsigned long, net::arp::Flags)+0x16>
 8017ca2:	8a5a      	ldrh	r2, [r3, #18]
 8017ca4:	4572      	cmp	r2, lr
 8017ca6:	bf88      	it	hi
 8017ca8:	461d      	movhi	r5, r3
 8017caa:	f103 0318 	add.w	r3, r3, #24
 8017cae:	bf88      	it	hi
 8017cb0:	4696      	movhi	lr, r2
 8017cb2:	4563      	cmp	r3, ip
 8017cb4:	d1ec      	bne.n	8017c90 <net::arp_find_record(unsigned long, net::arp::Flags)+0x20>
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	bf08      	it	eq
 8017cba:	4628      	moveq	r0, r5
 8017cbc:	bd70      	pop	{r4, r5, r6, pc}
 8017cbe:	8a5a      	ldrh	r2, [r3, #18]
 8017cc0:	42b2      	cmp	r2, r6
 8017cc2:	bf84      	itt	hi
 8017cc4:	4616      	movhi	r6, r2
 8017cc6:	4618      	movhi	r0, r3
 8017cc8:	e7df      	b.n	8017c8a <net::arp_find_record(unsigned long, net::arp::Flags)+0x1a>
 8017cca:	601c      	str	r4, [r3, #0]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	bd70      	pop	{r4, r5, r6, pc}
 8017cd0:	1000cb10 	andne	ip, r0, r0, lsl fp

08017cd4 <net::arp_timer()>:
 8017cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd8:	4c28      	ldr	r4, [pc, #160]	@ (8017d7c <net::arp_timer()+0xa8>)
 8017cda:	2703      	movs	r7, #3
 8017cdc:	f504 76c0 	add.w	r6, r4, #384	@ 0x180
 8017ce0:	f04f 0800 	mov.w	r8, #0
 8017ce4:	e006      	b.n	8017cf4 <net::arp_timer()+0x20>
 8017ce6:	2a01      	cmp	r2, #1
 8017ce8:	d101      	bne.n	8017cee <net::arp_timer()+0x1a>
 8017cea:	2b02      	cmp	r3, #2
 8017cec:	d839      	bhi.n	8017d62 <net::arp_timer()+0x8e>
 8017cee:	3418      	adds	r4, #24
 8017cf0:	42a6      	cmp	r6, r4
 8017cf2:	d02c      	beq.n	8017d4e <net::arp_timer()+0x7a>
 8017cf4:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8017cf8:	2a00      	cmp	r2, #0
 8017cfa:	d0f8      	beq.n	8017cee <net::arp_timer()+0x1a>
 8017cfc:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8017d00:	3301      	adds	r3, #1
 8017d02:	b29b      	uxth	r3, r3
 8017d04:	2a02      	cmp	r2, #2
 8017d06:	f824 3c06 	strh.w	r3, [r4, #-6]
 8017d0a:	d022      	beq.n	8017d52 <net::arp_timer()+0x7e>
 8017d0c:	2a03      	cmp	r2, #3
 8017d0e:	d1ea      	bne.n	8017ce6 <net::arp_timer()+0x12>
 8017d10:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8017d14:	d9eb      	bls.n	8017cee <net::arp_timer()+0x1a>
 8017d16:	4d1a      	ldr	r5, [pc, #104]	@ (8017d80 <net::arp_timer()+0xac>)
 8017d18:	2301      	movs	r3, #1
 8017d1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d1e:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8017d22:	f8c5 3026 	str.w	r3, [r5, #38]	@ 0x26
 8017d26:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8017d2a:	602b      	str	r3, [r5, #0]
 8017d2c:	4628      	mov	r0, r5
 8017d2e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8017d32:	80ab      	strh	r3, [r5, #4]
 8017d34:	213c      	movs	r1, #60	@ 0x3c
 8017d36:	f7ff fdef 	bl	8017918 <emac_eth_send(void*, unsigned long)>
 8017d3a:	4628      	mov	r0, r5
 8017d3c:	1dab      	adds	r3, r5, #6
 8017d3e:	22ff      	movs	r2, #255	@ 0xff
 8017d40:	f800 2b01 	strb.w	r2, [r0], #1
 8017d44:	4298      	cmp	r0, r3
 8017d46:	d1fb      	bne.n	8017d40 <net::arp_timer()+0x6c>
 8017d48:	3418      	adds	r4, #24
 8017d4a:	42a6      	cmp	r6, r4
 8017d4c:	d1d2      	bne.n	8017cf4 <net::arp_timer()+0x20>
 8017d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d52:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8017d56:	d9ca      	bls.n	8017cee <net::arp_timer()+0x1a>
 8017d58:	f844 7c04 	str.w	r7, [r4, #-4]
 8017d5c:	f824 8c06 	strh.w	r8, [r4, #-6]
 8017d60:	e7c5      	b.n	8017cee <net::arp_timer()+0x1a>
 8017d62:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8017d66:	b108      	cbz	r0, 8017d6c <net::arp_timer()+0x98>
 8017d68:	f004 fdb2 	bl	801c8d0 <operator delete[](void*)>
 8017d6c:	f1a4 0318 	sub.w	r3, r4, #24
 8017d70:	2200      	movs	r2, #0
 8017d72:	f843 2b04 	str.w	r2, [r3], #4
 8017d76:	42a3      	cmp	r3, r4
 8017d78:	d1fb      	bne.n	8017d72 <net::arp_timer()+0x9e>
 8017d7a:	e7b8      	b.n	8017cee <net::arp_timer()+0x1a>
 8017d7c:	1000cb28 	andne	ip, r0, r8, lsr #22
 8017d80:	2000e29c 	mulcs	r0, ip, r2

08017d84 <net::arp_send(t_udp*, unsigned long, unsigned long)>:
 8017d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d86:	4b39      	ldr	r3, [pc, #228]	@ (8017e6c <net::arp_send(t_udp*, unsigned long, unsigned long)+0xe8>)
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4604      	mov	r4, r0
 8017d8c:	4393      	bics	r3, r2
 8017d8e:	f04f 0000 	mov.w	r0, #0
 8017d92:	4615      	mov	r5, r2
 8017d94:	f8c4 201e 	str.w	r2, [r4, #30]
 8017d98:	7620      	strb	r0, [r4, #24]
 8017d9a:	7660      	strb	r0, [r4, #25]
 8017d9c:	460e      	mov	r6, r1
 8017d9e:	d15c      	bne.n	8017e5a <net::arp_send(t_udp*, unsigned long, unsigned long)+0xd6>
 8017da0:	4b33      	ldr	r3, [pc, #204]	@ (8017e70 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xec>)
 8017da2:	f503 72c0 	add.w	r2, r3, #384	@ 0x180
 8017da6:	6959      	ldr	r1, [r3, #20]
 8017da8:	2901      	cmp	r1, #1
 8017daa:	dd02      	ble.n	8017db2 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x2e>
 8017dac:	6819      	ldr	r1, [r3, #0]
 8017dae:	42a9      	cmp	r1, r5
 8017db0:	d031      	beq.n	8017e16 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x92>
 8017db2:	3318      	adds	r3, #24
 8017db4:	4293      	cmp	r3, r2
 8017db6:	d1f6      	bne.n	8017da6 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x22>
 8017db8:	2100      	movs	r1, #0
 8017dba:	4628      	mov	r0, r5
 8017dbc:	f7ff ff58 	bl	8017c70 <net::arp_find_record(unsigned long, net::arp::Flags)>
 8017dc0:	6943      	ldr	r3, [r0, #20]
 8017dc2:	4607      	mov	r7, r0
 8017dc4:	b1d3      	cbz	r3, 8017dfc <net::arp_send(t_udp*, unsigned long, unsigned long)+0x78>
 8017dc6:	2b01      	cmp	r3, #1
 8017dc8:	d000      	beq.n	8017dcc <net::arp_send(t_udp*, unsigned long, unsigned long)+0x48>
 8017dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dcc:	6878      	ldr	r0, [r7, #4]
 8017dce:	b108      	cbz	r0, 8017dd4 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x50>
 8017dd0:	f004 fd7e 	bl	801c8d0 <operator delete[](void*)>
 8017dd4:	4630      	mov	r0, r6
 8017dd6:	f004 fd81 	bl	801c8dc <operator new[](unsigned int)>
 8017dda:	ea44 0200 	orr.w	r2, r4, r0
 8017dde:	0792      	lsls	r2, r2, #30
 8017de0:	4603      	mov	r3, r0
 8017de2:	6078      	str	r0, [r7, #4]
 8017de4:	d027      	beq.n	8017e36 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xb2>
 8017de6:	4631      	mov	r1, r6
 8017de8:	b131      	cbz	r1, 8017df8 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x74>
 8017dea:	4421      	add	r1, r4
 8017dec:	f814 2b01 	ldrb.w	r2, [r4], #1
 8017df0:	f803 2b01 	strb.w	r2, [r3], #1
 8017df4:	428c      	cmp	r4, r1
 8017df6:	d1f9      	bne.n	8017dec <net::arp_send(t_udp*, unsigned long, unsigned long)+0x68>
 8017df8:	60be      	str	r6, [r7, #8]
 8017dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dfc:	8243      	strh	r3, [r0, #18]
 8017dfe:	2301      	movs	r3, #1
 8017e00:	481c      	ldr	r0, [pc, #112]	@ (8017e74 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xf0>)
 8017e02:	617b      	str	r3, [r7, #20]
 8017e04:	213c      	movs	r1, #60	@ 0x3c
 8017e06:	f8c0 5026 	str.w	r5, [r0, #38]	@ 0x26
 8017e0a:	f7ff fd85 	bl	8017918 <emac_eth_send(void*, unsigned long)>
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	2b01      	cmp	r3, #1
 8017e12:	d1da      	bne.n	8017dca <net::arp_send(t_udp*, unsigned long, unsigned long)+0x46>
 8017e14:	e7da      	b.n	8017dcc <net::arp_send(t_udp*, unsigned long, unsigned long)+0x48>
 8017e16:	f103 020c 	add.w	r2, r3, #12
 8017e1a:	4621      	mov	r1, r4
 8017e1c:	3312      	adds	r3, #18
 8017e1e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8017e22:	f801 0b01 	strb.w	r0, [r1], #1
 8017e26:	429a      	cmp	r2, r3
 8017e28:	d1f9      	bne.n	8017e1e <net::arp_send(t_udp*, unsigned long, unsigned long)+0x9a>
 8017e2a:	4631      	mov	r1, r6
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017e32:	f7ff bd71 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 8017e36:	2e03      	cmp	r6, #3
 8017e38:	d9d5      	bls.n	8017de6 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x62>
 8017e3a:	1f35      	subs	r5, r6, #4
 8017e3c:	f025 0503 	bic.w	r5, r5, #3
 8017e40:	3504      	adds	r5, #4
 8017e42:	1960      	adds	r0, r4, r5
 8017e44:	461a      	mov	r2, r3
 8017e46:	f854 1b04 	ldr.w	r1, [r4], #4
 8017e4a:	f842 1b04 	str.w	r1, [r2], #4
 8017e4e:	4284      	cmp	r4, r0
 8017e50:	d1f9      	bne.n	8017e46 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xc2>
 8017e52:	442b      	add	r3, r5
 8017e54:	f006 0103 	and.w	r1, r6, #3
 8017e58:	e7c6      	b.n	8017de8 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x64>
 8017e5a:	f64a 13fe 	movw	r3, #43518	@ 0xa9fe
 8017e5e:	b292      	uxth	r2, r2
 8017e60:	429a      	cmp	r2, r3
 8017e62:	bf1c      	itt	ne
 8017e64:	4b04      	ldrne	r3, [pc, #16]	@ (8017e78 <net::arp_send(t_udp*, unsigned long, unsigned long)+0xf4>)
 8017e66:	689d      	ldrne	r5, [r3, #8]
 8017e68:	e79a      	b.n	8017da0 <net::arp_send(t_udp*, unsigned long, unsigned long)+0x1c>
 8017e6a:	bf00      	nop
 8017e6c:	2000e214 	andcs	lr, r0, r4, lsl r2
 8017e70:	1000cb10 	andne	ip, r0, r0, lsl fp
 8017e74:	2000e29c 	mulcs	r0, ip, r2
 8017e78:	2000e230 	andcs	lr, r0, r0, lsr r2

08017e7c <net::arp_acd_probe(net::ip_addr)>:
 8017e7c:	b510      	push	{r4, lr}
 8017e7e:	4c07      	ldr	r4, [pc, #28]	@ (8017e9c <net::arp_acd_probe(net::ip_addr)+0x20>)
 8017e80:	4603      	mov	r3, r0
 8017e82:	2200      	movs	r2, #0
 8017e84:	213c      	movs	r1, #60	@ 0x3c
 8017e86:	4620      	mov	r0, r4
 8017e88:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8017e8c:	61e2      	str	r2, [r4, #28]
 8017e8e:	f7ff fd43 	bl	8017918 <emac_eth_send(void*, unsigned long)>
 8017e92:	4b03      	ldr	r3, [pc, #12]	@ (8017ea0 <net::arp_acd_probe(net::ip_addr)+0x24>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	61e3      	str	r3, [r4, #28]
 8017e98:	bd10      	pop	{r4, pc}
 8017e9a:	bf00      	nop
 8017e9c:	2000e29c 	mulcs	r0, ip, r2
 8017ea0:	2000e230 	andcs	lr, r0, r0, lsr r2

08017ea4 <net::arp_acd_send_announcement(net::ip_addr)>:
 8017ea4:	4a04      	ldr	r2, [pc, #16]	@ (8017eb8 <net::arp_acd_send_announcement(net::ip_addr)+0x14>)
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	213c      	movs	r1, #60	@ 0x3c
 8017eaa:	4610      	mov	r0, r2
 8017eac:	f8c2 3026 	str.w	r3, [r2, #38]	@ 0x26
 8017eb0:	61d3      	str	r3, [r2, #28]
 8017eb2:	f7ff bd31 	b.w	8017918 <emac_eth_send(void*, unsigned long)>
 8017eb6:	bf00      	nop
 8017eb8:	2000e29c 	mulcs	r0, ip, r2

08017ebc <net::ip_set_ip()>:
 8017ebc:	b508      	push	{r3, lr}
 8017ebe:	f7ff f85b 	bl	8016f78 <net::udp_set_ip()>
 8017ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017ec6:	f7fe bc39 	b.w	801673c <net::igmp_set_ip()>
 8017eca:	bf00      	nop

08017ecc <net::phy_get_link(unsigned long)>:
 8017ecc:	b507      	push	{r0, r1, r2, lr}
 8017ece:	2300      	movs	r3, #0
 8017ed0:	f10d 0206 	add.w	r2, sp, #6
 8017ed4:	2101      	movs	r1, #1
 8017ed6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017eda:	f7ff fb8b 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8017ede:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017ee2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8017ee6:	b003      	add	sp, #12
 8017ee8:	f85d fb04 	ldr.w	pc, [sp], #4

08017eec <net::phy_start(unsigned long, net::PhyStatus&)>:
 8017eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017ef0:	460d      	mov	r5, r1
 8017ef2:	f10d 0206 	add.w	r2, sp, #6
 8017ef6:	2104      	movs	r1, #4
 8017ef8:	4604      	mov	r4, r0
 8017efa:	f7ff fb7b 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8017efe:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017f02:	f240 1241 	movw	r2, #321	@ 0x141
 8017f06:	f401 637e 	and.w	r3, r1, #4064	@ 0xfe0
 8017f0a:	4313      	orrs	r3, r2
 8017f0c:	f411 616a 	ands.w	r1, r1, #3744	@ 0xea0
 8017f10:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f14:	d10a      	bne.n	8017f2c <net::phy_start(unsigned long, net::PhyStatus&)+0x40>
 8017f16:	f10d 0206 	add.w	r2, sp, #6
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f7ff fb6a 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8017f20:	b9f8      	cbnz	r0, 8017f62 <net::phy_start(unsigned long, net::PhyStatus&)+0x76>
 8017f22:	2600      	movs	r6, #0
 8017f24:	4630      	mov	r0, r6
 8017f26:	b003      	add	sp, #12
 8017f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f2c:	2104      	movs	r1, #4
 8017f2e:	4620      	mov	r0, r4
 8017f30:	f7ff fb6b 	bl	801760a <net::phy_write(unsigned long, unsigned long, unsigned short)>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	d0f4      	beq.n	8017f22 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 8017f38:	f10d 0206 	add.w	r2, sp, #6
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	4620      	mov	r0, r4
 8017f40:	f7ff fb58 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8017f44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8017f4c:	f442 5290 	orr.w	r2, r2, #4608	@ 0x1200
 8017f50:	b292      	uxth	r2, r2
 8017f52:	2100      	movs	r1, #0
 8017f54:	4620      	mov	r0, r4
 8017f56:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017f5a:	f7ff fb56 	bl	801760a <net::phy_write(unsigned long, unsigned long, unsigned short)>
 8017f5e:	b938      	cbnz	r0, 8017f70 <net::phy_start(unsigned long, net::PhyStatus&)+0x84>
 8017f60:	e7df      	b.n	8017f22 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 8017f62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017f66:	f403 53a0 	and.w	r3, r3, #5120	@ 0x1400
 8017f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017f6e:	d1e3      	bne.n	8017f38 <net::phy_start(unsigned long, net::PhyStatus&)+0x4c>
 8017f70:	f10d 0206 	add.w	r2, sp, #6
 8017f74:	2101      	movs	r1, #1
 8017f76:	4620      	mov	r0, r4
 8017f78:	f7ff fb3c 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8017f7c:	4606      	mov	r6, r0
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	d0cf      	beq.n	8017f22 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 8017f82:	682a      	ldr	r2, [r5, #0]
 8017f84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017f88:	b90a      	cbnz	r2, 8017f8e <net::phy_start(unsigned long, net::PhyStatus&)+0xa2>
 8017f8a:	0759      	lsls	r1, r3, #29
 8017f8c:	d40f      	bmi.n	8017fae <net::phy_start(unsigned long, net::PhyStatus&)+0xc2>
 8017f8e:	069a      	lsls	r2, r3, #26
 8017f90:	d43b      	bmi.n	801800a <net::phy_start(unsigned long, net::PhyStatus&)+0x11e>
 8017f92:	4f25      	ldr	r7, [pc, #148]	@ (8018028 <net::phy_start(unsigned long, net::PhyStatus&)+0x13c>)
 8017f94:	4825      	ldr	r0, [pc, #148]	@ (801802c <net::phy_start(unsigned long, net::PhyStatus&)+0x140>)
 8017f96:	f004 fa9e 	bl	801c4d6 <puts>
 8017f9a:	f8d7 8000 	ldr.w	r8, [r7]
 8017f9e:	f241 3988 	movw	r9, #5000	@ 0x1388
 8017fa2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017fa6:	069b      	lsls	r3, r3, #26
 8017fa8:	d523      	bpl.n	8017ff2 <net::phy_start(unsigned long, net::PhyStatus&)+0x106>
 8017faa:	2301      	movs	r3, #1
 8017fac:	602b      	str	r3, [r5, #0]
 8017fae:	2300      	movs	r3, #0
 8017fb0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017fb4:	aa01      	add	r2, sp, #4
 8017fb6:	2104      	movs	r1, #4
 8017fb8:	4620      	mov	r0, r4
 8017fba:	f7ff fb1b 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8017fbe:	f10d 0206 	add.w	r2, sp, #6
 8017fc2:	2105      	movs	r1, #5
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	f7ff fb15 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8017fca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017fce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017fd2:	4013      	ands	r3, r2
 8017fd4:	f413 7fc0 	tst.w	r3, #384	@ 0x180
 8017fd8:	d022      	beq.n	8018020 <net::phy_start(unsigned long, net::PhyStatus&)+0x134>
 8017fda:	2201      	movs	r2, #1
 8017fdc:	60aa      	str	r2, [r5, #8]
 8017fde:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8017fe2:	d001      	beq.n	8017fe8 <net::phy_start(unsigned long, net::PhyStatus&)+0xfc>
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	606b      	str	r3, [r5, #4]
 8017fe8:	4620      	mov	r0, r4
 8017fea:	f7ff ff6f 	bl	8017ecc <net::phy_get_link(unsigned long)>
 8017fee:	6028      	str	r0, [r5, #0]
 8017ff0:	e798      	b.n	8017f24 <net::phy_start(unsigned long, net::PhyStatus&)+0x38>
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	eba3 0308 	sub.w	r3, r3, r8
 8017ff8:	454b      	cmp	r3, r9
 8017ffa:	d892      	bhi.n	8017f22 <net::phy_start(unsigned long, net::PhyStatus&)+0x36>
 8017ffc:	f10d 0206 	add.w	r2, sp, #6
 8018000:	2101      	movs	r1, #1
 8018002:	4620      	mov	r0, r4
 8018004:	f7ff faf6 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8018008:	e7cb      	b.n	8017fa2 <net::phy_start(unsigned long, net::PhyStatus&)+0xb6>
 801800a:	f10d 0206 	add.w	r2, sp, #6
 801800e:	2101      	movs	r1, #1
 8018010:	4620      	mov	r0, r4
 8018012:	f7ff faef 	bl	80175f4 <net::phy_read(unsigned long, unsigned long, unsigned short&)>
 8018016:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801801a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801801e:	e7c5      	b.n	8017fac <net::phy_start(unsigned long, net::PhyStatus&)+0xc0>
 8018020:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8018024:	e7dd      	b.n	8017fe2 <net::phy_start(unsigned long, net::PhyStatus&)+0xf6>
 8018026:	bf00      	nop
 8018028:	2001bcd0 	ldrdcs	fp, [r1], -r0
 801802c:	0801dbf0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}

08018030 <Display::ClearEndOfLine() [clone .isra.0]>:
 8018030:	b108      	cbz	r0, 8018036 <Display::ClearEndOfLine() [clone .isra.0]+0x6>
 8018032:	2301      	movs	r3, #1
 8018034:	7303      	strb	r3, [r0, #12]
 8018036:	4770      	bx	lr

08018038 <Display::Write(unsigned long, char const*) [clone .isra.0]>:
 8018038:	b430      	push	{r4, r5}
 801803a:	b160      	cbz	r0, 8018056 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x1e>
 801803c:	6845      	ldr	r5, [r0, #4]
 801803e:	2300      	movs	r3, #0
 8018040:	5cd4      	ldrb	r4, [r2, r3]
 8018042:	b11c      	cbz	r4, 801804c <Display::Write(unsigned long, char const*) [clone .isra.0]+0x14>
 8018044:	1c5c      	adds	r4, r3, #1
 8018046:	429d      	cmp	r5, r3
 8018048:	4623      	mov	r3, r4
 801804a:	d8f9      	bhi.n	8018040 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x8>
 801804c:	6804      	ldr	r4, [r0, #0]
 801804e:	69e4      	ldr	r4, [r4, #28]
 8018050:	46a4      	mov	ip, r4
 8018052:	bc30      	pop	{r4, r5}
 8018054:	4760      	bx	ip
 8018056:	bc30      	pop	{r4, r5}
 8018058:	4770      	bx	lr
	...

0801805c <DisplayUdf::ShowIpAddress()>:
 801805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018060:	4e16      	ldr	r6, [pc, #88]	@ (80180bc <DisplayUdf::ShowIpAddress()+0x60>)
 8018062:	b086      	sub	sp, #24
 8018064:	4605      	mov	r5, r0
 8018066:	6980      	ldr	r0, [r0, #24]
 8018068:	f7ff ffe2 	bl	8018030 <Display::ClearEndOfLine() [clone .isra.0]>
 801806c:	6870      	ldr	r0, [r6, #4]
 801806e:	6834      	ldr	r4, [r6, #0]
 8018070:	f895 703e 	ldrb.w	r7, [r5, #62]	@ 0x3e
 8018074:	f004 fc80 	bl	801c978 <__popcountsi2>
 8018078:	7eb3      	ldrb	r3, [r6, #26]
 801807a:	075a      	lsls	r2, r3, #29
 801807c:	fa5f f884 	uxtb.w	r8, r4
 8018080:	f3c4 2907 	ubfx	r9, r4, #8, #8
 8018084:	f3c4 4a07 	ubfx	sl, r4, #16, #8
 8018088:	ea4f 6414 	mov.w	r4, r4, lsr #24
 801808c:	d413      	bmi.n	80180b6 <DisplayUdf::ShowIpAddress()+0x5a>
 801808e:	f013 0f02 	tst.w	r3, #2
 8018092:	bf0c      	ite	eq
 8018094:	2253      	moveq	r2, #83	@ 0x53
 8018096:	2244      	movne	r2, #68	@ 0x44
 8018098:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801809c:	e9cd a401 	strd	sl, r4, [sp, #4]
 80180a0:	4a07      	ldr	r2, [pc, #28]	@ (80180c0 <DisplayUdf::ShowIpAddress()+0x64>)
 80180a2:	f8cd 9000 	str.w	r9, [sp]
 80180a6:	4643      	mov	r3, r8
 80180a8:	4639      	mov	r1, r7
 80180aa:	4628      	mov	r0, r5
 80180ac:	f7f1 fc94 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80180b0:	b006      	add	sp, #24
 80180b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180b6:	225a      	movs	r2, #90	@ 0x5a
 80180b8:	e7ee      	b.n	8018098 <DisplayUdf::ShowIpAddress()+0x3c>
 80180ba:	bf00      	nop
 80180bc:	2000e230 	andcs	lr, r0, r0, lsr r2
 80180c0:	0801dc1d 	stmdaeq	r1, {r0, r2, r3, r4, sl, fp, ip, lr, pc}

080180c4 <DisplayUdf::DisplayUdf()>:
 80180c4:	b510      	push	{r4, lr}
 80180c6:	4604      	mov	r4, r0
 80180c8:	f001 f952 	bl	8019370 <Display::Display()>
 80180cc:	2202      	movs	r2, #2
 80180ce:	2300      	movs	r3, #0
 80180d0:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
 80180d4:	4b05      	ldr	r3, [pc, #20]	@ (80180ec <DisplayUdf::DisplayUdf()+0x28>)
 80180d6:	f104 023b 	add.w	r2, r4, #59	@ 0x3b
 80180da:	601c      	str	r4, [r3, #0]
 80180dc:	2301      	movs	r3, #1
 80180de:	f802 3f01 	strb.w	r3, [r2, #1]!
 80180e2:	3301      	adds	r3, #1
 80180e4:	2b15      	cmp	r3, #21
 80180e6:	d1fa      	bne.n	80180de <DisplayUdf::DisplayUdf()+0x1a>
 80180e8:	4620      	mov	r0, r4
 80180ea:	bd10      	pop	{r4, pc}
 80180ec:	2000e2d8 	ldrdcs	lr, [r0], -r8

080180f0 <DisplayUdf::SetTitle(char const*, ...)>:
 80180f0:	b40e      	push	{r1, r2, r3}
 80180f2:	b517      	push	{r0, r1, r2, r4, lr}
 80180f4:	ab05      	add	r3, sp, #20
 80180f6:	4604      	mov	r4, r0
 80180f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80180fc:	9301      	str	r3, [sp, #4]
 80180fe:	211f      	movs	r1, #31
 8018100:	301c      	adds	r0, #28
 8018102:	f004 f9d3 	bl	801c4ac <vsnprintf>
 8018106:	4404      	add	r4, r0
 8018108:	2300      	movs	r3, #0
 801810a:	7723      	strb	r3, [r4, #28]
 801810c:	b003      	add	sp, #12
 801810e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018112:	b003      	add	sp, #12
 8018114:	4770      	bx	lr

08018116 <DisplayUdf::Set(unsigned long, displayudf::Labels)>:
 8018116:	1e4b      	subs	r3, r1, #1
 8018118:	2b05      	cmp	r3, #5
 801811a:	b530      	push	{r4, r5, lr}
 801811c:	d810      	bhi.n	8018140 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2a>
 801811e:	f100 043b 	add.w	r4, r0, #59	@ 0x3b
 8018122:	2300      	movs	r3, #0
 8018124:	b2c9      	uxtb	r1, r1
 8018126:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801812a:	428d      	cmp	r5, r1
 801812c:	d109      	bne.n	8018142 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x2c>
 801812e:	1884      	adds	r4, r0, r2
 8018130:	4403      	add	r3, r0
 8018132:	f894 403c 	ldrb.w	r4, [r4, #60]	@ 0x3c
 8018136:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
 801813a:	4410      	add	r0, r2
 801813c:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
 8018140:	bd30      	pop	{r4, r5, pc}
 8018142:	3301      	adds	r3, #1
 8018144:	2b14      	cmp	r3, #20
 8018146:	d1ee      	bne.n	8018126 <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x10>
 8018148:	e7f7      	b.n	801813a <DisplayUdf::Set(unsigned long, displayudf::Labels)+0x24>
	...

0801814c <DisplayUdf::Show()>:
 801814c:	b530      	push	{r4, r5, lr}
 801814e:	4604      	mov	r4, r0
 8018150:	b085      	sub	sp, #20
 8018152:	f000 fa93 	bl	801867c <DisplayUdf::ShowArtNetNode()>
 8018156:	f104 033b 	add.w	r3, r4, #59	@ 0x3b
 801815a:	f104 024f 	add.w	r2, r4, #79	@ 0x4f
 801815e:	21ff      	movs	r1, #255	@ 0xff
 8018160:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8018164:	2806      	cmp	r0, #6
 8018166:	bf88      	it	hi
 8018168:	7019      	strbhi	r1, [r3, #0]
 801816a:	4293      	cmp	r3, r2
 801816c:	d1f8      	bne.n	8018160 <DisplayUdf::Show()+0x14>
 801816e:	69a0      	ldr	r0, [r4, #24]
 8018170:	4d2a      	ldr	r5, [pc, #168]	@ (801821c <DisplayUdf::Show()+0xd0>)
 8018172:	f7ff ff5d 	bl	8018030 <Display::ClearEndOfLine() [clone .isra.0]>
 8018176:	f104 021c 	add.w	r2, r4, #28
 801817a:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 801817e:	f7ff ff5b 	bl	8018038 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 8018182:	69a0      	ldr	r0, [r4, #24]
 8018184:	4a26      	ldr	r2, [pc, #152]	@ (8018220 <DisplayUdf::Show()+0xd4>)
 8018186:	f7ff ff53 	bl	8018030 <Display::ClearEndOfLine() [clone .isra.0]>
 801818a:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 801818e:	f7ff ff53 	bl	8018038 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 8018192:	69a0      	ldr	r0, [r4, #24]
 8018194:	4a23      	ldr	r2, [pc, #140]	@ (8018224 <DisplayUdf::Show()+0xd8>)
 8018196:	f7ff ff4b 	bl	8018030 <Display::ClearEndOfLine() [clone .isra.0]>
 801819a:	4b23      	ldr	r3, [pc, #140]	@ (8018228 <DisplayUdf::Show()+0xdc>)
 801819c:	9300      	str	r3, [sp, #0]
 801819e:	f894 103f 	ldrb.w	r1, [r4, #63]	@ 0x3f
 80181a2:	2303      	movs	r3, #3
 80181a4:	4620      	mov	r0, r4
 80181a6:	f7f1 fc17 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80181aa:	4620      	mov	r0, r4
 80181ac:	f7ff ff56 	bl	801805c <DisplayUdf::ShowIpAddress()>
 80181b0:	69a0      	ldr	r0, [r4, #24]
 80181b2:	f7ff ff3d 	bl	8018030 <Display::ClearEndOfLine() [clone .isra.0]>
 80181b6:	68ab      	ldr	r3, [r5, #8]
 80181b8:	0e1a      	lsrs	r2, r3, #24
 80181ba:	9202      	str	r2, [sp, #8]
 80181bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80181c0:	9201      	str	r2, [sp, #4]
 80181c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80181c6:	9200      	str	r2, [sp, #0]
 80181c8:	f894 104e 	ldrb.w	r1, [r4, #78]	@ 0x4e
 80181cc:	4a17      	ldr	r2, [pc, #92]	@ (801822c <DisplayUdf::Show()+0xe0>)
 80181ce:	b2db      	uxtb	r3, r3
 80181d0:	4620      	mov	r0, r4
 80181d2:	f7f1 fc01 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80181d6:	69a0      	ldr	r0, [r4, #24]
 80181d8:	f7ff ff2a 	bl	8018030 <Display::ClearEndOfLine() [clone .isra.0]>
 80181dc:	686b      	ldr	r3, [r5, #4]
 80181de:	0e1a      	lsrs	r2, r3, #24
 80181e0:	9202      	str	r2, [sp, #8]
 80181e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80181e6:	9201      	str	r2, [sp, #4]
 80181e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80181ec:	9200      	str	r2, [sp, #0]
 80181ee:	f894 1048 	ldrb.w	r1, [r4, #72]	@ 0x48
 80181f2:	4a0f      	ldr	r2, [pc, #60]	@ (8018230 <DisplayUdf::Show()+0xe4>)
 80181f4:	b2db      	uxtb	r3, r3
 80181f6:	4620      	mov	r0, r4
 80181f8:	f7f1 fbee 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80181fc:	4620      	mov	r0, r4
 80181fe:	f7ff ff2d 	bl	801805c <DisplayUdf::ShowIpAddress()>
 8018202:	69a0      	ldr	r0, [r4, #24]
 8018204:	f7ff ff14 	bl	8018030 <Display::ClearEndOfLine() [clone .isra.0]>
 8018208:	4b0a      	ldr	r3, [pc, #40]	@ (8018234 <DisplayUdf::Show()+0xe8>)
 801820a:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	3216      	adds	r2, #22
 8018212:	b005      	add	sp, #20
 8018214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018218:	f7ff bf0e 	b.w	8018038 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 801821c:	2000e230 	andcs	lr, r0, r0, lsr r2
 8018220:	0801d33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, ip, lr, pc}
 8018224:	0801dc2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, fp, ip, lr, pc}
 8018228:	2000e3c8 	andcs	lr, r0, r8, asr #7
 801822c:	0801dc3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, fp, ip, lr, pc}
 8018230:	0801dc4d 	stmdaeq	r1, {r0, r2, r3, r6, sl, fp, ip, lr, pc}
 8018234:	2000e210 	andcs	lr, r0, r0, lsl r2

08018238 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>:
 8018238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801823a:	88c6      	ldrh	r6, [r0, #6]
 801823c:	8885      	ldrh	r5, [r0, #4]
 801823e:	42ae      	cmp	r6, r5
 8018240:	d216      	bcs.n	8018270 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x38>
 8018242:	4604      	mov	r4, r0
 8018244:	6800      	ldr	r0, [r0, #0]
 8018246:	1bad      	subs	r5, r5, r6
 8018248:	4430      	add	r0, r6
 801824a:	7a26      	ldrb	r6, [r4, #8]
 801824c:	b923      	cbnz	r3, 8018258 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x20>
 801824e:	b926      	cbnz	r6, 801825a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x22>
 8018250:	9200      	str	r2, [sp, #0]
 8018252:	460b      	mov	r3, r1
 8018254:	4a09      	ldr	r2, [pc, #36]	@ (801827c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x44>)
 8018256:	e003      	b.n	8018260 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 8018258:	b166      	cbz	r6, 8018274 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x3c>
 801825a:	9200      	str	r2, [sp, #0]
 801825c:	4a08      	ldr	r2, [pc, #32]	@ (8018280 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x48>)
 801825e:	460b      	mov	r3, r1
 8018260:	4629      	mov	r1, r5
 8018262:	f004 f90b 	bl	801c47c <snprintf>
 8018266:	4285      	cmp	r5, r0
 8018268:	bfa2      	ittt	ge
 801826a:	88e3      	ldrhge	r3, [r4, #6]
 801826c:	181b      	addge	r3, r3, r0
 801826e:	80e3      	strhge	r3, [r4, #6]
 8018270:	b002      	add	sp, #8
 8018272:	bd70      	pop	{r4, r5, r6, pc}
 8018274:	9200      	str	r2, [sp, #0]
 8018276:	460b      	mov	r3, r1
 8018278:	4a02      	ldr	r2, [pc, #8]	@ (8018284 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x4c>)
 801827a:	e7f1      	b.n	8018260 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]+0x28>
 801827c:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 8018280:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 8018284:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

08018288 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>:
 8018288:	b507      	push	{r0, r1, r2, lr}
 801828a:	2300      	movs	r3, #0
 801828c:	2101      	movs	r1, #1
 801828e:	e9cd 3100 	strd	r3, r1, [sp]
 8018292:	4602      	mov	r2, r0
 8018294:	4804      	ldr	r0, [pc, #16]	@ (80182a8 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)+0x20>)
 8018296:	2322      	movs	r3, #34	@ 0x22
 8018298:	6800      	ldr	r0, [r0, #0]
 801829a:	210d      	movs	r1, #13
 801829c:	f000 fb9c 	bl	80189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>
 80182a0:	b003      	add	sp, #12
 80182a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80182a6:	bf00      	nop
 80182a8:	2000e2dc 	ldrdcs	lr, [r0], -ip

080182ac <DisplayUdfParams::DisplayUdfParams()>:
 80182ac:	b510      	push	{r4, lr}
 80182ae:	2220      	movs	r2, #32
 80182b0:	4604      	mov	r4, r0
 80182b2:	2100      	movs	r1, #0
 80182b4:	f003 fdd6 	bl	801be64 <memset>
 80182b8:	2305      	movs	r3, #5
 80182ba:	f884 3020 	strb.w	r3, [r4, #32]
 80182be:	237f      	movs	r3, #127	@ 0x7f
 80182c0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 80182c4:	4620      	mov	r0, r4
 80182c6:	bd10      	pop	{r4, pc}

080182c8 <DisplayUdfParams::Load()>:
 80182c8:	b508      	push	{r3, lr}
 80182ca:	2200      	movs	r2, #0
 80182cc:	7002      	strb	r2, [r0, #0]
 80182ce:	7042      	strb	r2, [r0, #1]
 80182d0:	7082      	strb	r2, [r0, #2]
 80182d2:	70c2      	strb	r2, [r0, #3]
 80182d4:	f7ff ffd8 	bl	8018288 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>
 80182d8:	bd08      	pop	{r3, pc}
	...

080182dc <DisplayUdfParams::Load(char const*, unsigned long)>:
 80182dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182de:	2500      	movs	r5, #0
 80182e0:	b087      	sub	sp, #28
 80182e2:	4604      	mov	r4, r0
 80182e4:	460e      	mov	r6, r1
 80182e6:	4617      	mov	r7, r2
 80182e8:	7005      	strb	r5, [r0, #0]
 80182ea:	7045      	strb	r5, [r0, #1]
 80182ec:	7085      	strb	r5, [r0, #2]
 80182ee:	70c5      	strb	r5, [r0, #3]
 80182f0:	4602      	mov	r2, r0
 80182f2:	490c      	ldr	r1, [pc, #48]	@ (8018324 <DisplayUdfParams::Load(char const*, unsigned long)+0x48>)
 80182f4:	a804      	add	r0, sp, #16
 80182f6:	f000 fe49 	bl	8018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80182fa:	463a      	mov	r2, r7
 80182fc:	4631      	mov	r1, r6
 80182fe:	a804      	add	r0, sp, #16
 8018300:	f000 fe48 	bl	8018f94 <ReadConfigFile::Read(char const*, unsigned int)>
 8018304:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8018308:	2322      	movs	r3, #34	@ 0x22
 801830a:	4807      	ldr	r0, [pc, #28]	@ (8018328 <DisplayUdfParams::Load(char const*, unsigned long)+0x4c>)
 801830c:	9300      	str	r3, [sp, #0]
 801830e:	462a      	mov	r2, r5
 8018310:	4623      	mov	r3, r4
 8018312:	210d      	movs	r1, #13
 8018314:	6800      	ldr	r0, [r0, #0]
 8018316:	f000 fb39 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 801831a:	a804      	add	r0, sp, #16
 801831c:	f000 fe39 	bl	8018f92 <ReadConfigFile::~ReadConfigFile()>
 8018320:	b007      	add	sp, #28
 8018322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018324:	080183ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, pc}
 8018328:	2000e2dc 	ldrdcs	lr, [r0], -ip

0801832c <DisplayUdfParams::callbackFunction(char const*)>:
 801832c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801832e:	460e      	mov	r6, r1
 8018330:	4604      	mov	r4, r0
 8018332:	492a      	ldr	r1, [pc, #168]	@ (80183dc <DisplayUdfParams::callbackFunction(char const*)+0xb0>)
 8018334:	f10d 0207 	add.w	r2, sp, #7
 8018338:	4630      	mov	r0, r6
 801833a:	f000 ff51 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801833e:	b968      	cbnz	r0, 801835c <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8018340:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018344:	6823      	ldr	r3, [r4, #0]
 8018346:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
 801834a:	2a7f      	cmp	r2, #127	@ 0x7f
 801834c:	bf14      	ite	ne
 801834e:	f043 5300 	orrne.w	r3, r3, #536870912	@ 0x20000000
 8018352:	f023 5300 	biceq.w	r3, r3, #536870912	@ 0x20000000
 8018356:	6023      	str	r3, [r4, #0]
 8018358:	b003      	add	sp, #12
 801835a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801835c:	4920      	ldr	r1, [pc, #128]	@ (80183e0 <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 801835e:	f10d 0207 	add.w	r2, sp, #7
 8018362:	4630      	mov	r0, r6
 8018364:	f000 ff3c 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8018368:	b958      	cbnz	r0, 8018382 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 801836a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801836e:	6823      	ldr	r3, [r4, #0]
 8018370:	f884 2020 	strb.w	r2, [r4, #32]
 8018374:	2a05      	cmp	r2, #5
 8018376:	bf14      	ite	ne
 8018378:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 801837c:	f023 5380 	biceq.w	r3, r3, #268435456	@ 0x10000000
 8018380:	e7e9      	b.n	8018356 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8018382:	4918      	ldr	r1, [pc, #96]	@ (80183e4 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8018384:	f10d 0207 	add.w	r2, sp, #7
 8018388:	4630      	mov	r0, r6
 801838a:	f000 ff29 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801838e:	b948      	cbnz	r0, 80183a4 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8018390:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	b112      	cbz	r2, 801839e <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8018398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801839c:	e7db      	b.n	8018356 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801839e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80183a2:	e7d8      	b.n	8018356 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80183a4:	4f10      	ldr	r7, [pc, #64]	@ (80183e8 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 80183a6:	2500      	movs	r5, #0
 80183a8:	f857 1b04 	ldr.w	r1, [r7], #4
 80183ac:	f10d 0207 	add.w	r2, sp, #7
 80183b0:	4630      	mov	r0, r6
 80183b2:	f000 ff15 	bl	80191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80183b6:	b968      	cbnz	r0, 80183d4 <DisplayUdfParams::callbackFunction(char const*)+0xa8>
 80183b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80183bc:	6823      	ldr	r3, [r4, #0]
 80183be:	2201      	movs	r2, #1
 80183c0:	40aa      	lsls	r2, r5
 80183c2:	1e4e      	subs	r6, r1, #1
 80183c4:	4425      	add	r5, r4
 80183c6:	2e05      	cmp	r6, #5
 80183c8:	bf99      	ittee	ls
 80183ca:	7129      	strbls	r1, [r5, #4]
 80183cc:	4313      	orrls	r3, r2
 80183ce:	7128      	strbhi	r0, [r5, #4]
 80183d0:	4393      	bichi	r3, r2
 80183d2:	e7c0      	b.n	8018356 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80183d4:	3501      	adds	r5, #1
 80183d6:	2d14      	cmp	r5, #20
 80183d8:	d1e6      	bne.n	80183a8 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80183da:	e7bd      	b.n	8018358 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80183dc:	080212b2 	stmdaeq	r2, {r1, r4, r5, r7, r9, ip}
 80183e0:	080212a4 	stmdaeq	r2, {r2, r5, r7, r9, ip}
 80183e4:	08021294 	stmdaeq	r2, {r2, r4, r7, r9, ip}
 80183e8:	08021210 	stmdaeq	r2, {r4, r9, ip}

080183ec <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80183ec:	f7ff bf9e 	b.w	801832c <DisplayUdfParams::callbackFunction(char const*)>

080183f0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)>:
 80183f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f4:	4604      	mov	r4, r0
 80183f6:	b086      	sub	sp, #24
 80183f8:	4615      	mov	r5, r2
 80183fa:	461e      	mov	r6, r3
 80183fc:	b379      	cbz	r1, 801845e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x6e>
 80183fe:	2222      	movs	r2, #34	@ 0x22
 8018400:	f003 fd19 	bl	801be36 <memmove>
 8018404:	462a      	mov	r2, r5
 8018406:	493c      	ldr	r1, [pc, #240]	@ (80184f8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x108>)
 8018408:	4633      	mov	r3, r6
 801840a:	a803      	add	r0, sp, #12
 801840c:	f000 fce8 	bl	8018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 8018410:	6823      	ldr	r3, [r4, #0]
 8018412:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 8018416:	4939      	ldr	r1, [pc, #228]	@ (80184fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x10c>)
 8018418:	f3c3 7340 	ubfx	r3, r3, #29, #1
 801841c:	a803      	add	r0, sp, #12
 801841e:	f7ff ff0b 	bl	8018238 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8018422:	6823      	ldr	r3, [r4, #0]
 8018424:	f894 2020 	ldrb.w	r2, [r4, #32]
 8018428:	4935      	ldr	r1, [pc, #212]	@ (8018500 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x110>)
 801842a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 801842e:	a803      	add	r0, sp, #12
 8018430:	f7ff ff02 	bl	8018238 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 8018434:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8018438:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801843c:	6823      	ldr	r3, [r4, #0]
 801843e:	42aa      	cmp	r2, r5
 8018440:	d222      	bcs.n	8018488 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x98>
 8018442:	9803      	ldr	r0, [sp, #12]
 8018444:	f013 4380 	ands.w	r3, r3, #1073741824	@ 0x40000000
 8018448:	4410      	add	r0, r2
 801844a:	eba5 0502 	sub.w	r5, r5, r2
 801844e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8018452:	d107      	bne.n	8018464 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x74>
 8018454:	b942      	cbnz	r2, 8018468 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x78>
 8018456:	9200      	str	r2, [sp, #0]
 8018458:	4b2a      	ldr	r3, [pc, #168]	@ (8018504 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 801845a:	4a2b      	ldr	r2, [pc, #172]	@ (8018508 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x118>)
 801845c:	e00a      	b.n	8018474 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 801845e:	f7ff ff13 	bl	8018288 <DisplayUdfParamsStore::Copy(displayudfparams::Params*)>
 8018462:	e7cf      	b.n	8018404 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x14>
 8018464:	2a00      	cmp	r2, #0
 8018466:	d042      	beq.n	80184ee <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xfe>
 8018468:	3b00      	subs	r3, #0
 801846a:	bf18      	it	ne
 801846c:	2301      	movne	r3, #1
 801846e:	9300      	str	r3, [sp, #0]
 8018470:	4a26      	ldr	r2, [pc, #152]	@ (801850c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x11c>)
 8018472:	4b24      	ldr	r3, [pc, #144]	@ (8018504 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 8018474:	4629      	mov	r1, r5
 8018476:	f004 f801 	bl	801c47c <snprintf>
 801847a:	4285      	cmp	r5, r0
 801847c:	bfa2      	ittt	ge
 801847e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8018482:	18c0      	addge	r0, r0, r3
 8018484:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8018488:	4e21      	ldr	r6, [pc, #132]	@ (8018510 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x120>)
 801848a:	2500      	movs	r5, #0
 801848c:	2701      	movs	r7, #1
 801848e:	f104 0804 	add.w	r8, r4, #4
 8018492:	f856 1b04 	ldr.w	r1, [r6], #4
 8018496:	780b      	ldrb	r3, [r1, #0]
 8018498:	b163      	cbz	r3, 80184b4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xc4>
 801849a:	6822      	ldr	r2, [r4, #0]
 801849c:	fa07 f305 	lsl.w	r3, r7, r5
 80184a0:	4393      	bics	r3, r2
 80184a2:	bf08      	it	eq
 80184a4:	2301      	moveq	r3, #1
 80184a6:	f818 2005 	ldrb.w	r2, [r8, r5]
 80184aa:	bf18      	it	ne
 80184ac:	2300      	movne	r3, #0
 80184ae:	a803      	add	r0, sp, #12
 80184b0:	f7ff fec2 	bl	8018238 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, int) [clone .isra.0]>
 80184b4:	3501      	adds	r5, #1
 80184b6:	2d14      	cmp	r5, #20
 80184b8:	d1eb      	bne.n	8018492 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xa2>
 80184ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80184be:	b17b      	cbz	r3, 80184e0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0xf0>
 80184c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80184c4:	9b03      	ldr	r3, [sp, #12]
 80184c6:	4413      	add	r3, r2
 80184c8:	227d      	movs	r2, #125	@ 0x7d
 80184ca:	f803 2c01 	strb.w	r2, [r3, #-1]
 80184ce:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80184d2:	9903      	ldr	r1, [sp, #12]
 80184d4:	54ca      	strb	r2, [r1, r3]
 80184d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80184da:	3301      	adds	r3, #1
 80184dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80184e0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80184e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80184e6:	601a      	str	r2, [r3, #0]
 80184e8:	b006      	add	sp, #24
 80184ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184ee:	2301      	movs	r3, #1
 80184f0:	9300      	str	r3, [sp, #0]
 80184f2:	4a08      	ldr	r2, [pc, #32]	@ (8018514 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x124>)
 80184f4:	4b03      	ldr	r3, [pc, #12]	@ (8018504 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x114>)
 80184f6:	e7bd      	b.n	8018474 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned long, unsigned long&)+0x84>
 80184f8:	080212bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r9, ip}
 80184fc:	080212b2 	stmdaeq	r2, {r1, r4, r5, r7, r9, ip}
 8018500:	080212a4 	stmdaeq	r2, {r2, r5, r7, r9, ip}
 8018504:	08021294 	stmdaeq	r2, {r2, r4, r7, r9, ip}
 8018508:	0801d20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, lr, pc}
 801850c:	0801d205 	stmdaeq	r1, {r0, r2, r9, ip, lr, pc}
 8018510:	08021210 	stmdaeq	r2, {r4, r9, ip}
 8018514:	0801d993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, ip, lr, pc}

08018518 <DisplayUdfParams::Set(DisplayUdf*)>:
 8018518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801851c:	4604      	mov	r4, r0
 801851e:	460d      	mov	r5, r1
 8018520:	6823      	ldr	r3, [r4, #0]
 8018522:	6988      	ldr	r0, [r1, #24]
 8018524:	009a      	lsls	r2, r3, #2
 8018526:	d506      	bpl.n	8018536 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8018528:	f894 1021 	ldrb.w	r1, [r4, #33]	@ 0x21
 801852c:	7529      	strb	r1, [r5, #20]
 801852e:	b110      	cbz	r0, 8018536 <DisplayUdfParams::Set(DisplayUdf*)+0x1e>
 8018530:	6803      	ldr	r3, [r0, #0]
 8018532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018534:	4798      	blx	r3
 8018536:	6823      	ldr	r3, [r4, #0]
 8018538:	69a8      	ldr	r0, [r5, #24]
 801853a:	00db      	lsls	r3, r3, #3
 801853c:	bf41      	itttt	mi
 801853e:	f894 3020 	ldrbmi.w	r3, [r4, #32]
 8018542:	f64e 2260 	movwmi	r2, #60000	@ 0xea60
 8018546:	4353      	mulmi	r3, r2
 8018548:	612b      	strmi	r3, [r5, #16]
 801854a:	6821      	ldr	r1, [r4, #0]
 801854c:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8018550:	75a9      	strb	r1, [r5, #22]
 8018552:	b110      	cbz	r0, 801855a <DisplayUdfParams::Set(DisplayUdf*)+0x42>
 8018554:	6803      	ldr	r3, [r0, #0]
 8018556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018558:	4798      	blx	r3
 801855a:	2600      	movs	r6, #0
 801855c:	2701      	movs	r7, #1
 801855e:	f104 0804 	add.w	r8, r4, #4
 8018562:	6822      	ldr	r2, [r4, #0]
 8018564:	fa07 f306 	lsl.w	r3, r7, r6
 8018568:	4393      	bics	r3, r2
 801856a:	d105      	bne.n	8018578 <DisplayUdfParams::Set(DisplayUdf*)+0x60>
 801856c:	f818 1006 	ldrb.w	r1, [r8, r6]
 8018570:	4632      	mov	r2, r6
 8018572:	4628      	mov	r0, r5
 8018574:	f7ff fdcf 	bl	8018116 <DisplayUdf::Set(unsigned long, displayudf::Labels)>
 8018578:	3601      	adds	r6, #1
 801857a:	2e14      	cmp	r6, #20
 801857c:	d1f1      	bne.n	8018562 <DisplayUdfParams::Set(DisplayUdf*)+0x4a>
 801857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018582 <artnet::display_longname(char const*)>:
 8018582:	4770      	bx	lr

08018584 <artnet::display_universe_switch(unsigned long, unsigned char)>:
 8018584:	4b01      	ldr	r3, [pc, #4]	@ (801858c <artnet::display_universe_switch(unsigned long, unsigned char)+0x8>)
 8018586:	6818      	ldr	r0, [r3, #0]
 8018588:	f000 b810 	b.w	80185ac <DisplayUdf::ShowUniverseArtNetNode()>
 801858c:	2000e2d8 	ldrdcs	lr, [r0], -r8

08018590 <artnet::display_merge_mode(unsigned long, lightset::MergeMode)>:
 8018590:	4b01      	ldr	r3, [pc, #4]	@ (8018598 <artnet::display_merge_mode(unsigned long, lightset::MergeMode)+0x8>)
 8018592:	6818      	ldr	r0, [r3, #0]
 8018594:	f000 b80a 	b.w	80185ac <DisplayUdf::ShowUniverseArtNetNode()>
 8018598:	2000e2d8 	ldrdcs	lr, [r0], -r8

0801859c <artnet::display_port_protocol(unsigned long, artnet::PortProtocol)>:
 801859c:	4b01      	ldr	r3, [pc, #4]	@ (80185a4 <artnet::display_port_protocol(unsigned long, artnet::PortProtocol)+0x8>)
 801859e:	6818      	ldr	r0, [r3, #0]
 80185a0:	f000 b804 	b.w	80185ac <DisplayUdf::ShowUniverseArtNetNode()>
 80185a4:	2000e2d8 	ldrdcs	lr, [r0], -r8

080185a8 <artnet::display_failsafe(unsigned char)>:
 80185a8:	4770      	bx	lr
	...

080185ac <DisplayUdf::ShowUniverseArtNetNode()>:
 80185ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185b0:	4b29      	ldr	r3, [pc, #164]	@ (8018658 <DisplayUdf::ShowUniverseArtNetNode()+0xac>)
 80185b2:	4f2a      	ldr	r7, [pc, #168]	@ (801865c <DisplayUdf::ShowUniverseArtNetNode()+0xb0>)
 80185b4:	681e      	ldr	r6, [r3, #0]
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	2b03      	cmp	r3, #3
 80185ba:	b085      	sub	sp, #20
 80185bc:	4605      	mov	r5, r0
 80185be:	d947      	bls.n	8018650 <DisplayUdf::ShowUniverseArtNetNode()+0xa4>
 80185c0:	b005      	add	sp, #20
 80185c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185c6:	683b      	ldr	r3, [r7, #0]
 80185c8:	4423      	add	r3, r4
 80185ca:	2b03      	cmp	r3, #3
 80185cc:	d8f8      	bhi.n	80185c0 <DisplayUdf::ShowUniverseArtNetNode()+0x14>
 80185ce:	fb08 6203 	mla	r2, r8, r3, r6
 80185d2:	f8d2 1ca8 	ldr.w	r1, [r2, #3240]	@ 0xca8
 80185d6:	2901      	cmp	r1, #1
 80185d8:	d136      	bne.n	8018648 <DisplayUdf::ShowUniverseArtNetNode()+0x9c>
 80185da:	f8b2 cca0 	ldrh.w	ip, [r2, #3232]	@ 0xca0
 80185de:	69aa      	ldr	r2, [r5, #24]
 80185e0:	b102      	cbz	r2, 80185e4 <DisplayUdf::ShowUniverseArtNetNode()+0x38>
 80185e2:	7311      	strb	r1, [r2, #12]
 80185e4:	2224      	movs	r2, #36	@ 0x24
 80185e6:	fb02 6203 	mla	r2, r2, r3, r6
 80185ea:	f241 2078 	movw	r0, #4728	@ 0x1278
 80185ee:	f8df e080 	ldr.w	lr, [pc, #128]	@ 8018670 <DisplayUdf::ShowUniverseArtNetNode()+0xc4>
 80185f2:	5c10      	ldrb	r0, [r2, r0]
 80185f4:	f010 0f02 	tst.w	r0, #2
 80185f8:	4819      	ldr	r0, [pc, #100]	@ (8018660 <DisplayUdf::ShowUniverseArtNetNode()+0xb4>)
 80185fa:	bf18      	it	ne
 80185fc:	4670      	movne	r0, lr
 80185fe:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 8018602:	fb0e 6303 	mla	r3, lr, r3, r6
 8018606:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8018674 <DisplayUdf::ShowUniverseArtNetNode()+0xc8>
 801860a:	f8d3 9cac 	ldr.w	r9, [r3, #3244]	@ 0xcac
 801860e:	4b15      	ldr	r3, [pc, #84]	@ (8018664 <DisplayUdf::ShowUniverseArtNetNode()+0xb8>)
 8018610:	f1b9 0f00 	cmp.w	r9, #0
 8018614:	bf18      	it	ne
 8018616:	4673      	movne	r3, lr
 8018618:	f241 2e79 	movw	lr, #4729	@ 0x1279
 801861c:	f105 0144 	add.w	r1, r5, #68	@ 0x44
 8018620:	f912 900e 	ldrsb.w	r9, [r2, lr]
 8018624:	4a10      	ldr	r2, [pc, #64]	@ (8018668 <DisplayUdf::ShowUniverseArtNetNode()+0xbc>)
 8018626:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8018678 <DisplayUdf::ShowUniverseArtNetNode()+0xcc>
 801862a:	ea12 0229 	ands.w	r2, r2, r9, asr #32
 801862e:	bf38      	it	cc
 8018630:	4672      	movcc	r2, lr
 8018632:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018636:	e9cd c000 	strd	ip, r0, [sp]
 801863a:	4a0c      	ldr	r2, [pc, #48]	@ (801866c <DisplayUdf::ShowUniverseArtNetNode()+0xc0>)
 801863c:	5d09      	ldrb	r1, [r1, r4]
 801863e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8018642:	4628      	mov	r0, r5
 8018644:	f7f1 f9c8 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 8018648:	3401      	adds	r4, #1
 801864a:	2c04      	cmp	r4, #4
 801864c:	d1bb      	bne.n	80185c6 <DisplayUdf::ShowUniverseArtNetNode()+0x1a>
 801864e:	e7b7      	b.n	80185c0 <DisplayUdf::ShowUniverseArtNetNode()+0x14>
 8018650:	2400      	movs	r4, #0
 8018652:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8018656:	e7ba      	b.n	80185ce <DisplayUdf::ShowUniverseArtNetNode()+0x22>
 8018658:	2000d2d4 	ldrdcs	sp, [r0], -r4
 801865c:	20000000 	andcs	r0, r0, r0
 8018660:	0801d4d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, ip, lr, pc}
 8018664:	0801d4e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip, lr, pc}
 8018668:	0801d1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr, pc}
 801866c:	0801dc5c 	stmdaeq	r1, {r2, r3, r4, r6, sl, fp, ip, lr, pc}
 8018670:	0801d4dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, ip, lr, pc}
 8018674:	0801d4e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, ip, lr, pc}
 8018678:	0801d4ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, sl, ip, lr, pc}

0801867c <DisplayUdf::ShowArtNetNode()>:
 801867c:	4b15      	ldr	r3, [pc, #84]	@ (80186d4 <DisplayUdf::ShowArtNetNode()+0x58>)
 801867e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018680:	681d      	ldr	r5, [r3, #0]
 8018682:	4604      	mov	r4, r0
 8018684:	f7ff ff92 	bl	80185ac <DisplayUdf::ShowUniverseArtNetNode()>
 8018688:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 801868c:	4620      	mov	r0, r4
 801868e:	f892 124c 	ldrb.w	r1, [r2, #588]	@ 0x24c
 8018692:	f892 324b 	ldrb.w	r3, [r2, #587]	@ 0x24b
 8018696:	4a10      	ldr	r2, [pc, #64]	@ (80186d8 <DisplayUdf::ShowArtNetNode()+0x5c>)
 8018698:	440b      	add	r3, r1
 801869a:	f894 1041 	ldrb.w	r1, [r4, #65]	@ 0x41
 801869e:	f7f1 f99b 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80186a2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80186a4:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 80186a8:	2a02      	cmp	r2, #2
 80186aa:	d001      	beq.n	80186b0 <DisplayUdf::ShowArtNetNode()+0x34>
 80186ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80186ae:	b92b      	cbnz	r3, 80186bc <DisplayUdf::ShowArtNetNode()+0x40>
 80186b0:	4a0a      	ldr	r2, [pc, #40]	@ (80186dc <DisplayUdf::ShowArtNetNode()+0x60>)
 80186b2:	4620      	mov	r0, r4
 80186b4:	f7f1 f990 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80186b8:	b003      	add	sp, #12
 80186ba:	bd30      	pop	{r4, r5, pc}
 80186bc:	4808      	ldr	r0, [pc, #32]	@ (80186e0 <DisplayUdf::ShowArtNetNode()+0x64>)
 80186be:	9300      	str	r3, [sp, #0]
 80186c0:	4b08      	ldr	r3, [pc, #32]	@ (80186e4 <DisplayUdf::ShowArtNetNode()+0x68>)
 80186c2:	2a00      	cmp	r2, #0
 80186c4:	bf18      	it	ne
 80186c6:	4603      	movne	r3, r0
 80186c8:	4a07      	ldr	r2, [pc, #28]	@ (80186e8 <DisplayUdf::ShowArtNetNode()+0x6c>)
 80186ca:	4620      	mov	r0, r4
 80186cc:	f7f1 f984 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80186d0:	e7f2      	b.n	80186b8 <DisplayUdf::ShowArtNetNode()+0x3c>
 80186d2:	bf00      	nop
 80186d4:	2000d2d4 	ldrdcs	sp, [r0], -r4
 80186d8:	0801dc71 	stmdaeq	r1, {r0, r4, r5, r6, sl, fp, ip, lr, pc}
 80186dc:	0801dc78 	stmdaeq	r1, {r3, r4, r5, r6, sl, fp, ip, lr, pc}
 80186e0:	0801d593 	stmdaeq	r1, {r0, r1, r4, r7, r8, sl, ip, lr, pc}
 80186e4:	0801dc6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, sl, fp, ip, lr, pc}
 80186e8:	0801dc7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sl, fp, ip, lr, pc}

080186ec <Display::ClearEndOfLine() [clone .isra.0]>:
 80186ec:	b108      	cbz	r0, 80186f2 <Display::ClearEndOfLine() [clone .isra.0]+0x6>
 80186ee:	2301      	movs	r3, #1
 80186f0:	7303      	strb	r3, [r0, #12]
 80186f2:	4770      	bx	lr

080186f4 <Display::Write(unsigned long, char const*) [clone .isra.0]>:
 80186f4:	b430      	push	{r4, r5}
 80186f6:	b160      	cbz	r0, 8018712 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x1e>
 80186f8:	6845      	ldr	r5, [r0, #4]
 80186fa:	2300      	movs	r3, #0
 80186fc:	5cd4      	ldrb	r4, [r2, r3]
 80186fe:	b11c      	cbz	r4, 8018708 <Display::Write(unsigned long, char const*) [clone .isra.0]+0x14>
 8018700:	1c5c      	adds	r4, r3, #1
 8018702:	429d      	cmp	r5, r3
 8018704:	4623      	mov	r3, r4
 8018706:	d8f9      	bhi.n	80186fc <Display::Write(unsigned long, char const*) [clone .isra.0]+0x8>
 8018708:	6804      	ldr	r4, [r0, #0]
 801870a:	69e4      	ldr	r4, [r4, #28]
 801870c:	46a4      	mov	ip, r4
 801870e:	bc30      	pop	{r4, r5}
 8018710:	4760      	bx	ip
 8018712:	bc30      	pop	{r4, r5}
 8018714:	4770      	bx	lr
	...

08018718 <net::display_emac_config()>:
 8018718:	4b06      	ldr	r3, [pc, #24]	@ (8018734 <net::display_emac_config()+0x1c>)
 801871a:	4a07      	ldr	r2, [pc, #28]	@ (8018738 <net::display_emac_config()+0x20>)
 801871c:	b510      	push	{r4, lr}
 801871e:	681c      	ldr	r4, [r3, #0]
 8018720:	69a0      	ldr	r0, [r4, #24]
 8018722:	f7ff ffe3 	bl	80186ec <Display::ClearEndOfLine() [clone .isra.0]>
 8018726:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 801872a:	4620      	mov	r0, r4
 801872c:	f7f1 f954 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 8018730:	bd10      	pop	{r4, pc}
 8018732:	bf00      	nop
 8018734:	2000e2d8 	ldrdcs	lr, [r0], -r8
 8018738:	0801dc89 	stmdaeq	r1, {r0, r3, r7, sl, fp, ip, lr, pc}

0801873c <net::display_emac_start()>:
 801873c:	4b06      	ldr	r3, [pc, #24]	@ (8018758 <net::display_emac_start()+0x1c>)
 801873e:	4a07      	ldr	r2, [pc, #28]	@ (801875c <net::display_emac_start()+0x20>)
 8018740:	b510      	push	{r4, lr}
 8018742:	681c      	ldr	r4, [r3, #0]
 8018744:	69a0      	ldr	r0, [r4, #24]
 8018746:	f7ff ffd1 	bl	80186ec <Display::ClearEndOfLine() [clone .isra.0]>
 801874a:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 801874e:	4620      	mov	r0, r4
 8018750:	f7f1 f942 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 8018754:	bd10      	pop	{r4, pc}
 8018756:	bf00      	nop
 8018758:	2000e2d8 	ldrdcs	lr, [r0], -r8
 801875c:	0801dc97 	stmdaeq	r1, {r0, r1, r2, r4, r7, sl, fp, ip, lr, pc}

08018760 <net::display_emac_status(bool)>:
 8018760:	4b09      	ldr	r3, [pc, #36]	@ (8018788 <net::display_emac_status(bool)+0x28>)
 8018762:	490a      	ldr	r1, [pc, #40]	@ (801878c <net::display_emac_status(bool)+0x2c>)
 8018764:	b510      	push	{r4, lr}
 8018766:	681c      	ldr	r4, [r3, #0]
 8018768:	4602      	mov	r2, r0
 801876a:	69a0      	ldr	r0, [r4, #24]
 801876c:	f7ff ffbe 	bl	80186ec <Display::ClearEndOfLine() [clone .isra.0]>
 8018770:	4b07      	ldr	r3, [pc, #28]	@ (8018790 <net::display_emac_status(bool)+0x30>)
 8018772:	4620      	mov	r0, r4
 8018774:	2a00      	cmp	r2, #0
 8018776:	bf08      	it	eq
 8018778:	460b      	moveq	r3, r1
 801877a:	4a06      	ldr	r2, [pc, #24]	@ (8018794 <net::display_emac_status(bool)+0x34>)
 801877c:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
 8018780:	f7f1 f92a 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 8018784:	bd10      	pop	{r4, pc}
 8018786:	bf00      	nop
 8018788:	2000e2d8 	ldrdcs	lr, [r0], -r8
 801878c:	0801dca9 	stmdaeq	r1, {r0, r3, r5, r7, sl, fp, ip, lr, pc}
 8018790:	0801dca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr, pc}
 8018794:	0801dcae 	stmdaeq	r1, {r1, r2, r3, r5, r7, sl, fp, ip, lr, pc}

08018798 <net::display_ip()>:
 8018798:	b508      	push	{r3, lr}
 801879a:	4b02      	ldr	r3, [pc, #8]	@ (80187a4 <net::display_ip()+0xc>)
 801879c:	6818      	ldr	r0, [r3, #0]
 801879e:	f7ff fc5d 	bl	801805c <DisplayUdf::ShowIpAddress()>
 80187a2:	bd08      	pop	{r3, pc}
 80187a4:	2000e2d8 	ldrdcs	lr, [r0], -r8

080187a8 <net::display_netmask()>:
 80187a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80187aa:	4b0d      	ldr	r3, [pc, #52]	@ (80187e0 <net::display_netmask()+0x38>)
 80187ac:	681c      	ldr	r4, [r3, #0]
 80187ae:	69a0      	ldr	r0, [r4, #24]
 80187b0:	f7ff ff9c 	bl	80186ec <Display::ClearEndOfLine() [clone .isra.0]>
 80187b4:	4b0b      	ldr	r3, [pc, #44]	@ (80187e4 <net::display_netmask()+0x3c>)
 80187b6:	f894 1048 	ldrb.w	r1, [r4, #72]	@ 0x48
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	0e1a      	lsrs	r2, r3, #24
 80187be:	9202      	str	r2, [sp, #8]
 80187c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80187c4:	9201      	str	r2, [sp, #4]
 80187c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80187ca:	9200      	str	r2, [sp, #0]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	4a06      	ldr	r2, [pc, #24]	@ (80187e8 <net::display_netmask()+0x40>)
 80187d0:	4620      	mov	r0, r4
 80187d2:	f7f1 f901 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 80187d6:	4620      	mov	r0, r4
 80187d8:	f7ff fc40 	bl	801805c <DisplayUdf::ShowIpAddress()>
 80187dc:	b004      	add	sp, #16
 80187de:	bd10      	pop	{r4, pc}
 80187e0:	2000e2d8 	ldrdcs	lr, [r0], -r8
 80187e4:	2000e230 	andcs	lr, r0, r0, lsr r2
 80187e8:	0801dc4d 	stmdaeq	r1, {r0, r2, r3, r6, sl, fp, ip, lr, pc}

080187ec <net::display_gateway()>:
 80187ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80187ee:	4b0c      	ldr	r3, [pc, #48]	@ (8018820 <net::display_gateway()+0x34>)
 80187f0:	681c      	ldr	r4, [r3, #0]
 80187f2:	69a0      	ldr	r0, [r4, #24]
 80187f4:	f7ff ff7a 	bl	80186ec <Display::ClearEndOfLine() [clone .isra.0]>
 80187f8:	4b0a      	ldr	r3, [pc, #40]	@ (8018824 <net::display_gateway()+0x38>)
 80187fa:	f894 104e 	ldrb.w	r1, [r4, #78]	@ 0x4e
 80187fe:	689b      	ldr	r3, [r3, #8]
 8018800:	0e1a      	lsrs	r2, r3, #24
 8018802:	9202      	str	r2, [sp, #8]
 8018804:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8018808:	9201      	str	r2, [sp, #4]
 801880a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801880e:	9200      	str	r2, [sp, #0]
 8018810:	b2db      	uxtb	r3, r3
 8018812:	4a05      	ldr	r2, [pc, #20]	@ (8018828 <net::display_gateway()+0x3c>)
 8018814:	4620      	mov	r0, r4
 8018816:	f7f1 f8df 	bl	80099d8 <Display::Printf(unsigned long, char const*, ...)>
 801881a:	b004      	add	sp, #16
 801881c:	bd10      	pop	{r4, pc}
 801881e:	bf00      	nop
 8018820:	2000e2d8 	ldrdcs	lr, [r0], -r8
 8018824:	2000e230 	andcs	lr, r0, r0, lsr r2
 8018828:	0801dc3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, fp, ip, lr, pc}

0801882c <net::display_hostname()>:
 801882c:	b508      	push	{r3, lr}
 801882e:	4b07      	ldr	r3, [pc, #28]	@ (801884c <net::display_hostname()+0x20>)
 8018830:	6819      	ldr	r1, [r3, #0]
 8018832:	6988      	ldr	r0, [r1, #24]
 8018834:	f7ff ff5a 	bl	80186ec <Display::ClearEndOfLine() [clone .isra.0]>
 8018838:	4b05      	ldr	r3, [pc, #20]	@ (8018850 <net::display_hostname()+0x24>)
 801883a:	f891 1043 	ldrb.w	r1, [r1, #67]	@ 0x43
 801883e:	681a      	ldr	r2, [r3, #0]
 8018840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018844:	3216      	adds	r2, #22
 8018846:	f7ff bf55 	b.w	80186f4 <Display::Write(unsigned long, char const*) [clone .isra.0]>
 801884a:	bf00      	nop
 801884c:	2000e2d8 	ldrdcs	lr, [r0], -r8
 8018850:	2000e210 	andcs	lr, r0, r0, lsl r2

08018854 <ConfigStore::GetStoreOffset(configstore::Store)>:
 8018854:	b510      	push	{r4, lr}
 8018856:	4a05      	ldr	r2, [pc, #20]	@ (801886c <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 8018858:	2300      	movs	r3, #0
 801885a:	2020      	movs	r0, #32
 801885c:	428b      	cmp	r3, r1
 801885e:	d100      	bne.n	8018862 <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 8018860:	bd10      	pop	{r4, pc}
 8018862:	f852 4b04 	ldr.w	r4, [r2], #4
 8018866:	3301      	adds	r3, #1
 8018868:	4420      	add	r0, r4
 801886a:	e7f7      	b.n	801885c <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 801886c:	080212c8 	stmdaeq	r2, {r3, r6, r7, r9, ip}

08018870 <ConfigStore::ConfigStore()>:
 8018870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018874:	b085      	sub	sp, #20
 8018876:	4605      	mov	r5, r0
 8018878:	f000 f9e4 	bl	8018c44 <StoreDevice::StoreDevice()>
 801887c:	4b30      	ldr	r3, [pc, #192]	@ (8018940 <ConfigStore::ConfigStore()+0xd0>)
 801887e:	4c31      	ldr	r4, [pc, #196]	@ (8018944 <ConfigStore::ConfigStore()+0xd4>)
 8018880:	601d      	str	r5, [r3, #0]
 8018882:	4b31      	ldr	r3, [pc, #196]	@ (8018948 <ConfigStore::ConfigStore()+0xd8>)
 8018884:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8018964 <ConfigStore::ConfigStore()+0xf4>
 8018888:	601c      	str	r4, [r3, #0]
 801888a:	4628      	mov	r0, r5
 801888c:	782b      	ldrb	r3, [r5, #0]
 801888e:	f888 3000 	strb.w	r3, [r8]
 8018892:	f000 f9e8 	bl	8018c66 <StoreDevice::GetSectorSize() const>
 8018896:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 801889a:	4606      	mov	r6, r0
 801889c:	fbb7 f9f0 	udiv	r9, r7, r0
 80188a0:	4628      	mov	r0, r5
 80188a2:	f000 f9dd 	bl	8018c60 <StoreDevice::GetSize() const>
 80188a6:	4b29      	ldr	r3, [pc, #164]	@ (801894c <ConfigStore::ConfigStore()+0xdc>)
 80188a8:	fb09 0116 	mls	r1, r9, r6, r0
 80188ac:	6019      	str	r1, [r3, #0]
 80188ae:	f898 3000 	ldrb.w	r3, [r8]
 80188b2:	3c10      	subs	r4, #16
 80188b4:	b133      	cbz	r3, 80188c4 <ConfigStore::ConfigStore()+0x54>
 80188b6:	ab03      	add	r3, sp, #12
 80188b8:	9300      	str	r3, [sp, #0]
 80188ba:	463a      	mov	r2, r7
 80188bc:	4623      	mov	r3, r4
 80188be:	4628      	mov	r0, r5
 80188c0:	f000 f9d4 	bl	8018c6c <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>
 80188c4:	4822      	ldr	r0, [pc, #136]	@ (8018950 <ConfigStore::ConfigStore()+0xe0>)
 80188c6:	4b23      	ldr	r3, [pc, #140]	@ (8018954 <ConfigStore::ConfigStore()+0xe4>)
 80188c8:	2104      	movs	r1, #4
 80188ca:	2201      	movs	r2, #1
 80188cc:	f810 6b01 	ldrb.w	r6, [r0], #1
 80188d0:	f813 7b01 	ldrb.w	r7, [r3], #1
 80188d4:	42be      	cmp	r6, r7
 80188d6:	bf1c      	itt	ne
 80188d8:	f803 6c01 	strbne.w	r6, [r3, #-1]
 80188dc:	2200      	movne	r2, #0
 80188de:	3901      	subs	r1, #1
 80188e0:	d1f4      	bne.n	80188cc <ConfigStore::ConfigStore()+0x5c>
 80188e2:	b952      	cbnz	r2, 80188fa <ConfigStore::ConfigStore()+0x8a>
 80188e4:	4a17      	ldr	r2, [pc, #92]	@ (8018944 <ConfigStore::ConfigStore()+0xd4>)
 80188e6:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 80188ea:	4608      	mov	r0, r1
 80188ec:	3b01      	subs	r3, #1
 80188ee:	f802 0b01 	strb.w	r0, [r2], #1
 80188f2:	d1fb      	bne.n	80188ec <ConfigStore::ConfigStore()+0x7c>
 80188f4:	4b18      	ldr	r3, [pc, #96]	@ (8018958 <ConfigStore::ConfigStore()+0xe8>)
 80188f6:	2201      	movs	r2, #1
 80188f8:	601a      	str	r2, [r3, #0]
 80188fa:	4818      	ldr	r0, [pc, #96]	@ (801895c <ConfigStore::ConfigStore()+0xec>)
 80188fc:	2200      	movs	r2, #0
 80188fe:	2320      	movs	r3, #32
 8018900:	f850 6b04 	ldr.w	r6, [r0], #4
 8018904:	3201      	adds	r2, #1
 8018906:	2a1b      	cmp	r2, #27
 8018908:	4433      	add	r3, r6
 801890a:	d1f9      	bne.n	8018900 <ConfigStore::ConfigStore()+0x90>
 801890c:	4a14      	ldr	r2, [pc, #80]	@ (8018960 <ConfigStore::ConfigStore()+0xf0>)
 801890e:	2600      	movs	r6, #0
 8018910:	6013      	str	r3, [r2, #0]
 8018912:	4628      	mov	r0, r5
 8018914:	f7ff ff9e 	bl	8018854 <ConfigStore::GetStoreOffset(configstore::Store)>
 8018918:	5823      	ldr	r3, [r4, r0]
 801891a:	3101      	adds	r1, #1
 801891c:	3301      	adds	r3, #1
 801891e:	bf08      	it	eq
 8018920:	5026      	streq	r6, [r4, r0]
 8018922:	291b      	cmp	r1, #27
 8018924:	d1f5      	bne.n	8018912 <ConfigStore::ConfigStore()+0xa2>
 8018926:	6923      	ldr	r3, [r4, #16]
 8018928:	3301      	adds	r3, #1
 801892a:	d104      	bne.n	8018936 <ConfigStore::ConfigStore()+0xc6>
 801892c:	2300      	movs	r3, #0
 801892e:	7423      	strb	r3, [r4, #16]
 8018930:	7463      	strb	r3, [r4, #17]
 8018932:	74a3      	strb	r3, [r4, #18]
 8018934:	74e3      	strb	r3, [r4, #19]
 8018936:	4628      	mov	r0, r5
 8018938:	b005      	add	sp, #20
 801893a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801893e:	bf00      	nop
 8018940:	2000e2dc 	ldrdcs	lr, [r0], -ip
 8018944:	40024010 	andmi	r4, r2, r0, lsl r0
 8018948:	2001bd04 	andcs	fp, r1, r4, lsl #26
 801894c:	2000e2e8 	andcs	lr, r0, r8, ror #5
 8018950:	08021334 	stmdaeq	r2, {r2, r4, r5, r8, r9, ip}
 8018954:	40024000 	andmi	r4, r2, r0
 8018958:	2000e2ec 	andcs	lr, r0, ip, ror #5
 801895c:	080212c8 	stmdaeq	r2, {r3, r6, r7, r9, ip}
 8018960:	2000e2e4 	andcs	lr, r0, r4, ror #5
 8018964:	2000e2f0 	strdcs	lr, [r0], -r0

08018968 <ConfigStore::ResetSetList(configstore::Store)>:
 8018968:	b508      	push	{r3, lr}
 801896a:	f7ff ff73 	bl	8018854 <ConfigStore::GetStoreOffset(configstore::Store)>
 801896e:	4905      	ldr	r1, [pc, #20]	@ (8018984 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 8018970:	1842      	adds	r2, r0, r1
 8018972:	2300      	movs	r3, #0
 8018974:	540b      	strb	r3, [r1, r0]
 8018976:	7053      	strb	r3, [r2, #1]
 8018978:	7093      	strb	r3, [r2, #2]
 801897a:	70d3      	strb	r3, [r2, #3]
 801897c:	4b02      	ldr	r3, [pc, #8]	@ (8018988 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 801897e:	2201      	movs	r2, #1
 8018980:	601a      	str	r2, [r3, #0]
 8018982:	bd08      	pop	{r3, pc}
 8018984:	40024000 	andmi	r4, r2, r0
 8018988:	2000e2ec 	andcs	lr, r0, ip, ror #5

0801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>:
 801898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801898e:	4614      	mov	r4, r2
 8018990:	461d      	mov	r5, r3
 8018992:	f7ff ff5f 	bl	8018854 <ConfigStore::GetStoreOffset(configstore::Store)>
 8018996:	490e      	ldr	r1, [pc, #56]	@ (80189d0 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x44>)
 8018998:	1902      	adds	r2, r0, r4
 801899a:	9c06      	ldr	r4, [sp, #24]
 801899c:	440a      	add	r2, r1
 801899e:	1e6b      	subs	r3, r5, #1
 80189a0:	4414      	add	r4, r2
 80189a2:	2500      	movs	r5, #0
 80189a4:	42a2      	cmp	r2, r4
 80189a6:	d10a      	bne.n	80189be <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x32>
 80189a8:	b145      	cbz	r5, 80189bc <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x30>
 80189aa:	9b08      	ldr	r3, [sp, #32]
 80189ac:	9a07      	ldr	r2, [sp, #28]
 80189ae:	4418      	add	r0, r3
 80189b0:	580b      	ldr	r3, [r1, r0]
 80189b2:	4313      	orrs	r3, r2
 80189b4:	500b      	str	r3, [r1, r0]
 80189b6:	4b07      	ldr	r3, [pc, #28]	@ (80189d4 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x48>)
 80189b8:	2201      	movs	r2, #1
 80189ba:	601a      	str	r2, [r3, #0]
 80189bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189be:	7817      	ldrb	r7, [r2, #0]
 80189c0:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80189c4:	42b7      	cmp	r7, r6
 80189c6:	bf1c      	itt	ne
 80189c8:	7016      	strbne	r6, [r2, #0]
 80189ca:	2501      	movne	r5, #1
 80189cc:	3201      	adds	r2, #1
 80189ce:	e7e9      	b.n	80189a4 <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)+0x18>
 80189d0:	40024000 	andmi	r4, r2, r0
 80189d4:	2000e2ec 	andcs	lr, r0, ip, ror #5

080189d8 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)>:
 80189d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189dc:	b085      	sub	sp, #20
 80189de:	461e      	mov	r6, r3
 80189e0:	4615      	mov	r5, r2
 80189e2:	4607      	mov	r7, r0
 80189e4:	f7ff ff36 	bl	8018854 <ConfigStore::GetStoreOffset(configstore::Store)>
 80189e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189ea:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 80189ee:	18c4      	adds	r4, r0, r3
 80189f0:	4b10      	ldr	r3, [pc, #64]	@ (8018a34 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x5c>)
 80189f2:	441c      	add	r4, r3
 80189f4:	4688      	mov	r8, r1
 80189f6:	4623      	mov	r3, r4
 80189f8:	1932      	adds	r2, r6, r4
 80189fa:	4293      	cmp	r3, r2
 80189fc:	d10c      	bne.n	8018a18 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x40>
 80189fe:	f1b9 0f00 	cmp.w	r9, #0
 8018a02:	d00f      	beq.n	8018a24 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x4c>
 8018a04:	2200      	movs	r2, #0
 8018a06:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8018a0a:	9600      	str	r6, [sp, #0]
 8018a0c:	462b      	mov	r3, r5
 8018a0e:	4641      	mov	r1, r8
 8018a10:	4638      	mov	r0, r7
 8018a12:	f7ff ffbb 	bl	801898c <ConfigStore::Update(configstore::Store, unsigned long, void const*, unsigned long, unsigned long, unsigned long)>
 8018a16:	e005      	b.n	8018a24 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x4c>
 8018a18:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018a1c:	2900      	cmp	r1, #0
 8018a1e:	d0ec      	beq.n	80189fa <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x22>
 8018a20:	4294      	cmp	r4, r2
 8018a22:	d102      	bne.n	8018a2a <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x52>
 8018a24:	b005      	add	sp, #20
 8018a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a2e:	f805 3b01 	strb.w	r3, [r5], #1
 8018a32:	e7f5      	b.n	8018a20 <ConfigStore::Copy(configstore::Store, void*, unsigned long, unsigned long, bool)+0x48>
 8018a34:	40024000 	andmi	r4, r2, r0

08018a38 <ConfigStore::Flash()>:
 8018a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a3a:	4c24      	ldr	r4, [pc, #144]	@ (8018acc <ConfigStore::Flash()+0x94>)
 8018a3c:	6823      	ldr	r3, [r4, #0]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d041      	beq.n	8018ac6 <ConfigStore::Flash()+0x8e>
 8018a42:	3b01      	subs	r3, #1
 8018a44:	2b05      	cmp	r3, #5
 8018a46:	d82f      	bhi.n	8018aa8 <ConfigStore::Flash()+0x70>
 8018a48:	e8df f003 	tbb	[pc, r3]
 8018a4c:	2c140b03 			@ <UNDEFINED> instruction: 0x2c140b03
 8018a50:	4b1f2e23 	blmi	87e42e4 <_sidata+0x7c29d8>
 8018a54:	681a      	ldr	r2, [r3, #0]
 8018a56:	4b1f      	ldr	r3, [pc, #124]	@ (8018ad4 <ConfigStore::Flash()+0x9c>)
 8018a58:	601a      	str	r2, [r3, #0]
 8018a5a:	2302      	movs	r3, #2
 8018a5c:	6023      	str	r3, [r4, #0]
 8018a5e:	2001      	movs	r0, #1
 8018a60:	e02f      	b.n	8018ac2 <ConfigStore::Flash()+0x8a>
 8018a62:	4b1b      	ldr	r3, [pc, #108]	@ (8018ad0 <ConfigStore::Flash()+0x98>)
 8018a64:	4a1b      	ldr	r2, [pc, #108]	@ (8018ad4 <ConfigStore::Flash()+0x9c>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	6812      	ldr	r2, [r2, #0]
 8018a6a:	1a9b      	subs	r3, r3, r2
 8018a6c:	2b63      	cmp	r3, #99	@ 0x63
 8018a6e:	d9f6      	bls.n	8018a5e <ConfigStore::Flash()+0x26>
 8018a70:	2303      	movs	r3, #3
 8018a72:	e7f3      	b.n	8018a5c <ConfigStore::Flash()+0x24>
 8018a74:	4918      	ldr	r1, [pc, #96]	@ (8018ad8 <ConfigStore::Flash()+0xa0>)
 8018a76:	ab03      	add	r3, sp, #12
 8018a78:	6809      	ldr	r1, [r1, #0]
 8018a7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8018a7e:	f000 f8fa 	bl	8018c76 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>
 8018a82:	2800      	cmp	r0, #0
 8018a84:	d0eb      	beq.n	8018a5e <ConfigStore::Flash()+0x26>
 8018a86:	4b12      	ldr	r3, [pc, #72]	@ (8018ad0 <ConfigStore::Flash()+0x98>)
 8018a88:	681a      	ldr	r2, [r3, #0]
 8018a8a:	4b12      	ldr	r3, [pc, #72]	@ (8018ad4 <ConfigStore::Flash()+0x9c>)
 8018a8c:	601a      	str	r2, [r3, #0]
 8018a8e:	2305      	movs	r3, #5
 8018a90:	e7e4      	b.n	8018a5c <ConfigStore::Flash()+0x24>
 8018a92:	4b0f      	ldr	r3, [pc, #60]	@ (8018ad0 <ConfigStore::Flash()+0x98>)
 8018a94:	4a0f      	ldr	r2, [pc, #60]	@ (8018ad4 <ConfigStore::Flash()+0x9c>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	6812      	ldr	r2, [r2, #0]
 8018a9a:	1a9b      	subs	r3, r3, r2
 8018a9c:	2b63      	cmp	r3, #99	@ 0x63
 8018a9e:	d9de      	bls.n	8018a5e <ConfigStore::Flash()+0x26>
 8018aa0:	2304      	movs	r3, #4
 8018aa2:	e7db      	b.n	8018a5c <ConfigStore::Flash()+0x24>
 8018aa4:	2306      	movs	r3, #6
 8018aa6:	e7d9      	b.n	8018a5c <ConfigStore::Flash()+0x24>
 8018aa8:	ab03      	add	r3, sp, #12
 8018aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8018adc <ConfigStore::Flash()+0xa4>)
 8018aac:	490a      	ldr	r1, [pc, #40]	@ (8018ad8 <ConfigStore::Flash()+0xa0>)
 8018aae:	9300      	str	r3, [sp, #0]
 8018ab0:	6812      	ldr	r2, [r2, #0]
 8018ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8018ae0 <ConfigStore::Flash()+0xa8>)
 8018ab4:	6809      	ldr	r1, [r1, #0]
 8018ab6:	f000 f8e2 	bl	8018c7e <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>
 8018aba:	2800      	cmp	r0, #0
 8018abc:	d0cf      	beq.n	8018a5e <ConfigStore::Flash()+0x26>
 8018abe:	2000      	movs	r0, #0
 8018ac0:	6020      	str	r0, [r4, #0]
 8018ac2:	b004      	add	sp, #16
 8018ac4:	bd10      	pop	{r4, pc}
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	e7fb      	b.n	8018ac2 <ConfigStore::Flash()+0x8a>
 8018aca:	bf00      	nop
 8018acc:	2000e2ec 	andcs	lr, r0, ip, ror #5
 8018ad0:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8018ad4:	2000e2e0 	andcs	lr, r0, r0, ror #5
 8018ad8:	2000e2e8 	andcs	lr, r0, r8, ror #5
 8018adc:	2000e2e4 	andcs	lr, r0, r4, ror #5
 8018ae0:	40024000 	andmi	r4, r2, r0

08018ae4 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]>:
 8018ae4:	b510      	push	{r4, lr}
 8018ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8018b1c <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x38>)
 8018ae8:	f44f 6461 	mov.w	r4, #3600	@ 0xe10
 8018aec:	6913      	ldr	r3, [r2, #16]
 8018aee:	fb93 f3f4 	sdiv	r3, r3, r4
 8018af2:	b25b      	sxtb	r3, r3
 8018af4:	7003      	strb	r3, [r0, #0]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	6912      	ldr	r2, [r2, #16]
 8018afa:	dd08      	ble.n	8018b0e <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x2a>
 8018afc:	4808      	ldr	r0, [pc, #32]	@ (8018b20 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x3c>)
 8018afe:	fb00 2203 	mla	r2, r0, r3, r2
 8018b02:	233c      	movs	r3, #60	@ 0x3c
 8018b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8018b08:	b2d3      	uxtb	r3, r2
 8018b0a:	700b      	strb	r3, [r1, #0]
 8018b0c:	bd10      	pop	{r4, pc}
 8018b0e:	4363      	muls	r3, r4
 8018b10:	1a9b      	subs	r3, r3, r2
 8018b12:	223c      	movs	r2, #60	@ 0x3c
 8018b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	e7f6      	b.n	8018b0a <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]+0x26>
 8018b1c:	40024000 	andmi	r4, r2, r0
 8018b20:	fffff1f0 			@ <UNDEFINED> instruction: 0xfffff1f0

08018b24 <EnvParams::EnvParams()>:
 8018b24:	4770      	bx	lr
	...

08018b28 <EnvParams::LoadAndSet(char const*, unsigned long)>:
 8018b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b2a:	460c      	mov	r4, r1
 8018b2c:	4615      	mov	r5, r2
 8018b2e:	4907      	ldr	r1, [pc, #28]	@ (8018b4c <EnvParams::LoadAndSet(char const*, unsigned long)+0x24>)
 8018b30:	4602      	mov	r2, r0
 8018b32:	4668      	mov	r0, sp
 8018b34:	f000 fa2a 	bl	8018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8018b38:	462a      	mov	r2, r5
 8018b3a:	4621      	mov	r1, r4
 8018b3c:	4668      	mov	r0, sp
 8018b3e:	f000 fa29 	bl	8018f94 <ReadConfigFile::Read(char const*, unsigned int)>
 8018b42:	4668      	mov	r0, sp
 8018b44:	f000 fa25 	bl	8018f92 <ReadConfigFile::~ReadConfigFile()>
 8018b48:	b003      	add	sp, #12
 8018b4a:	bd30      	pop	{r4, r5, pc}
 8018b4c:	08018bdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, fp, pc}

08018b50 <EnvParams::callbackFunction(char const*)>:
 8018b50:	b513      	push	{r0, r1, r4, lr}
 8018b52:	4608      	mov	r0, r1
 8018b54:	f10d 0307 	add.w	r3, sp, #7
 8018b58:	491c      	ldr	r1, [pc, #112]	@ (8018bcc <EnvParams::callbackFunction(char const*)+0x7c>)
 8018b5a:	f10d 0206 	add.w	r2, sp, #6
 8018b5e:	f000 fb5a 	bl	8019216 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)>
 8018b62:	bb70      	cbnz	r0, 8018bc2 <EnvParams::callbackFunction(char const*)+0x72>
 8018b64:	f99d 1006 	ldrsb.w	r1, [sp, #6]
 8018b68:	f101 030c 	add.w	r3, r1, #12
 8018b6c:	b2db      	uxtb	r3, r3
 8018b6e:	2b1a      	cmp	r3, #26
 8018b70:	d827      	bhi.n	8018bc2 <EnvParams::callbackFunction(char const*)+0x72>
 8018b72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018b76:	bb32      	cbnz	r2, 8018bc6 <EnvParams::callbackFunction(char const*)+0x76>
 8018b78:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8018b7c:	434b      	muls	r3, r1
 8018b7e:	4a14      	ldr	r2, [pc, #80]	@ (8018bd0 <EnvParams::callbackFunction(char const*)+0x80>)
 8018b80:	6911      	ldr	r1, [r2, #16]
 8018b82:	4299      	cmp	r1, r3
 8018b84:	bf1f      	itttt	ne
 8018b86:	6113      	strne	r3, [r2, #16]
 8018b88:	4b12      	ldrne	r3, [pc, #72]	@ (8018bd4 <EnvParams::callbackFunction(char const*)+0x84>)
 8018b8a:	2201      	movne	r2, #1
 8018b8c:	601a      	strne	r2, [r3, #0]
 8018b8e:	e018      	b.n	8018bc2 <EnvParams::callbackFunction(char const*)+0x72>
 8018b90:	f993 4000 	ldrsb.w	r4, [r3]
 8018b94:	428c      	cmp	r4, r1
 8018b96:	d111      	bne.n	8018bbc <EnvParams::callbackFunction(char const*)+0x6c>
 8018b98:	785c      	ldrb	r4, [r3, #1]
 8018b9a:	4294      	cmp	r4, r2
 8018b9c:	d10e      	bne.n	8018bbc <EnvParams::callbackFunction(char const*)+0x6c>
 8018b9e:	2900      	cmp	r1, #0
 8018ba0:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8018ba4:	fb01 f303 	mul.w	r3, r1, r3
 8018ba8:	bfcb      	itete	gt
 8018baa:	ebc2 1202 	rsbgt	r2, r2, r2, lsl #4
 8018bae:	f06f 013b 	mvnle.w	r1, #59	@ 0x3b
 8018bb2:	eb03 0382 	addgt.w	r3, r3, r2, lsl #2
 8018bb6:	fb01 3302 	mlale	r3, r1, r2, r3
 8018bba:	e7e0      	b.n	8018b7e <EnvParams::callbackFunction(char const*)+0x2e>
 8018bbc:	3302      	adds	r3, #2
 8018bbe:	3801      	subs	r0, #1
 8018bc0:	d1e6      	bne.n	8018b90 <EnvParams::callbackFunction(char const*)+0x40>
 8018bc2:	b002      	add	sp, #8
 8018bc4:	bd10      	pop	{r4, pc}
 8018bc6:	4b04      	ldr	r3, [pc, #16]	@ (8018bd8 <EnvParams::callbackFunction(char const*)+0x88>)
 8018bc8:	200c      	movs	r0, #12
 8018bca:	e7f8      	b.n	8018bbe <EnvParams::callbackFunction(char const*)+0x6e>
 8018bcc:	0802134e 	stmdaeq	r2, {r1, r2, r3, r6, r8, r9, ip}
 8018bd0:	40024000 	andmi	r4, r2, r0
 8018bd4:	2000e2ec 	andcs	lr, r0, ip, ror #5
 8018bd8:	08021338 	stmdaeq	r2, {r3, r4, r5, r8, r9, ip}

08018bdc <EnvParams::staticCallbackFunction(void*, char const*)>:
 8018bdc:	f7ff bfb8 	b.w	8018b50 <EnvParams::callbackFunction(char const*)>

08018be0 <EnvParams::Builder(char*, unsigned long, unsigned long&)>:
 8018be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018be2:	461c      	mov	r4, r3
 8018be4:	a801      	add	r0, sp, #4
 8018be6:	4613      	mov	r3, r2
 8018be8:	460a      	mov	r2, r1
 8018bea:	4914      	ldr	r1, [pc, #80]	@ (8018c3c <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x5c>)
 8018bec:	f000 f8f8 	bl	8018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>
 8018bf0:	f10d 0103 	add.w	r1, sp, #3
 8018bf4:	f10d 0002 	add.w	r0, sp, #2
 8018bf8:	f7ff ff74 	bl	8018ae4 <ConfigStore::GetEnvUtcOffset(signed char&, unsigned char&) [clone .isra.0]>
 8018bfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018c00:	f99d 2002 	ldrsb.w	r2, [sp, #2]
 8018c04:	490e      	ldr	r1, [pc, #56]	@ (8018c40 <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x60>)
 8018c06:	a801      	add	r0, sp, #4
 8018c08:	f000 f970 	bl	8018eec <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)>
 8018c0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018c10:	b17b      	cbz	r3, 8018c32 <EnvParams::Builder(char*, unsigned long, unsigned long&)+0x52>
 8018c12:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018c16:	9b01      	ldr	r3, [sp, #4]
 8018c18:	4413      	add	r3, r2
 8018c1a:	227d      	movs	r2, #125	@ 0x7d
 8018c1c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018c20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018c24:	9901      	ldr	r1, [sp, #4]
 8018c26:	54ca      	strb	r2, [r1, r3]
 8018c28:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018c2c:	3301      	adds	r3, #1
 8018c2e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8018c32:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018c36:	6023      	str	r3, [r4, #0]
 8018c38:	b004      	add	sp, #16
 8018c3a:	bd10      	pop	{r4, pc}
 8018c3c:	08021359 	stmdaeq	r2, {r0, r3, r4, r6, r8, r9, ip}
 8018c40:	0802134e 	stmdaeq	r2, {r1, r2, r3, r6, r8, r9, ip}

08018c44 <StoreDevice::StoreDevice()>:
 8018c44:	b510      	push	{r4, lr}
 8018c46:	2301      	movs	r3, #1
 8018c48:	4604      	mov	r4, r0
 8018c4a:	7003      	strb	r3, [r0, #0]
 8018c4c:	2204      	movs	r2, #4
 8018c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8018c52:	4802      	ldr	r0, [pc, #8]	@ (8018c5c <StoreDevice::StoreDevice()+0x18>)
 8018c54:	f003 fbea 	bl	801c42c <printf>
 8018c58:	4620      	mov	r0, r4
 8018c5a:	bd10      	pop	{r4, pc}
 8018c5c:	0801dcbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, sl, fp, ip, lr, pc}

08018c60 <StoreDevice::GetSize() const>:
 8018c60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8018c64:	4770      	bx	lr

08018c66 <StoreDevice::GetSectorSize() const>:
 8018c66:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8018c6a:	4770      	bx	lr

08018c6c <StoreDevice::Read(unsigned long, unsigned long, unsigned char*, storedevice::result&)>:
 8018c6c:	9b00      	ldr	r3, [sp, #0]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	601a      	str	r2, [r3, #0]
 8018c72:	2001      	movs	r0, #1
 8018c74:	4770      	bx	lr

08018c76 <StoreDevice::Erase(unsigned long, unsigned long, storedevice::result&)>:
 8018c76:	2200      	movs	r2, #0
 8018c78:	601a      	str	r2, [r3, #0]
 8018c7a:	2001      	movs	r0, #1
 8018c7c:	4770      	bx	lr

08018c7e <StoreDevice::Write(unsigned long, unsigned long, unsigned char const*, storedevice::result&)>:
 8018c7e:	9b00      	ldr	r3, [sp, #0]
 8018c80:	2200      	movs	r2, #0
 8018c82:	601a      	str	r2, [r3, #0]
 8018c84:	2001      	movs	r0, #1
 8018c86:	4770      	bx	lr

08018c88 <properties::convert_json_file(char*, unsigned long, bool)>:
 8018c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c8c:	7803      	ldrb	r3, [r0, #0]
 8018c8e:	2b7b      	cmp	r3, #123	@ 0x7b
 8018c90:	4604      	mov	r4, r0
 8018c92:	f040 80a2 	bne.w	8018dda <properties::convert_json_file(char*, unsigned long, bool)+0x152>
 8018c96:	b172      	cbz	r2, 8018cb6 <properties::convert_json_file(char*, unsigned long, bool)+0x2e>
 8018c98:	2501      	movs	r5, #1
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	f04f 0c3d 	mov.w	ip, #61	@ 0x3d
 8018ca2:	f04f 0e0a 	mov.w	lr, #10
 8018ca6:	428d      	cmp	r5, r1
 8018ca8:	d377      	bcc.n	8018d9a <properties::convert_json_file(char*, unsigned long, bool)+0x112>
 8018caa:	b102      	cbz	r2, 8018cae <properties::convert_json_file(char*, unsigned long, bool)+0x26>
 8018cac:	3801      	subs	r0, #1
 8018cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cb2:	4635      	mov	r5, r6
 8018cb4:	e7f3      	b.n	8018c9e <properties::convert_json_file(char*, unsigned long, bool)+0x16>
 8018cb6:	4605      	mov	r5, r0
 8018cb8:	2323      	movs	r3, #35	@ 0x23
 8018cba:	f805 3b01 	strb.w	r3, [r5], #1
 8018cbe:	2601      	movs	r6, #1
 8018cc0:	462f      	mov	r7, r5
 8018cc2:	428e      	cmp	r6, r1
 8018cc4:	d317      	bcc.n	8018cf6 <properties::convert_json_file(char*, unsigned long, bool)+0x6e>
 8018cc6:	1c6b      	adds	r3, r5, #1
 8018cc8:	428e      	cmp	r6, r1
 8018cca:	eba3 0004 	sub.w	r0, r3, r4
 8018cce:	d205      	bcs.n	8018cdc <properties::convert_json_file(char*, unsigned long, bool)+0x54>
 8018cd0:	46bc      	mov	ip, r7
 8018cd2:	f81c eb01 	ldrb.w	lr, [ip], #1
 8018cd6:	f1be 0f22 	cmp.w	lr, #34	@ 0x22
 8018cda:	d112      	bne.n	8018d02 <properties::convert_json_file(char*, unsigned long, bool)+0x7a>
 8018cdc:	240a      	movs	r4, #10
 8018cde:	702c      	strb	r4, [r5, #0]
 8018ce0:	463c      	mov	r4, r7
 8018ce2:	3701      	adds	r7, #1
 8018ce4:	7825      	ldrb	r5, [r4, #0]
 8018ce6:	2d7b      	cmp	r5, #123	@ 0x7b
 8018ce8:	d0e3      	beq.n	8018cb2 <properties::convert_json_file(char*, unsigned long, bool)+0x2a>
 8018cea:	428e      	cmp	r6, r1
 8018cec:	f106 0501 	add.w	r5, r6, #1
 8018cf0:	d2d5      	bcs.n	8018c9e <properties::convert_json_file(char*, unsigned long, bool)+0x16>
 8018cf2:	462e      	mov	r6, r5
 8018cf4:	e7f4      	b.n	8018ce0 <properties::convert_json_file(char*, unsigned long, bool)+0x58>
 8018cf6:	f817 3b01 	ldrb.w	r3, [r7], #1
 8018cfa:	2b22      	cmp	r3, #34	@ 0x22
 8018cfc:	d0e3      	beq.n	8018cc6 <properties::convert_json_file(char*, unsigned long, bool)+0x3e>
 8018cfe:	3601      	adds	r6, #1
 8018d00:	e7df      	b.n	8018cc2 <properties::convert_json_file(char*, unsigned long, bool)+0x3a>
 8018d02:	f803 ec01 	strb.w	lr, [r3, #-1]
 8018d06:	3601      	adds	r6, #1
 8018d08:	4667      	mov	r7, ip
 8018d0a:	461d      	mov	r5, r3
 8018d0c:	e7db      	b.n	8018cc6 <properties::convert_json_file(char*, unsigned long, bool)+0x3e>
 8018d0e:	f1b8 0f22 	cmp.w	r8, #34	@ 0x22
 8018d12:	d142      	bne.n	8018d9a <properties::convert_json_file(char*, unsigned long, bool)+0x112>
 8018d14:	eba0 0904 	sub.w	r9, r0, r4
 8018d18:	f894 8000 	ldrb.w	r8, [r4]
 8018d1c:	f1b8 0f22 	cmp.w	r8, #34	@ 0x22
 8018d20:	eb04 0009 	add.w	r0, r4, r9
 8018d24:	4626      	mov	r6, r4
 8018d26:	f105 0701 	add.w	r7, r5, #1
 8018d2a:	f104 0401 	add.w	r4, r4, #1
 8018d2e:	d13f      	bne.n	8018db0 <properties::convert_json_file(char*, unsigned long, bool)+0x128>
 8018d30:	f803 cb01 	strb.w	ip, [r3], #1
 8018d34:	3001      	adds	r0, #1
 8018d36:	462f      	mov	r7, r5
 8018d38:	428f      	cmp	r7, r1
 8018d3a:	f896 8000 	ldrb.w	r8, [r6]
 8018d3e:	4634      	mov	r4, r6
 8018d40:	f107 0701 	add.w	r7, r7, #1
 8018d44:	f106 0601 	add.w	r6, r6, #1
 8018d48:	d338      	bcc.n	8018dbc <properties::convert_json_file(char*, unsigned long, bool)+0x134>
 8018d4a:	7825      	ldrb	r5, [r4, #0]
 8018d4c:	2d20      	cmp	r5, #32
 8018d4e:	4626      	mov	r6, r4
 8018d50:	46b8      	mov	r8, r7
 8018d52:	f104 0401 	add.w	r4, r4, #1
 8018d56:	f107 0701 	add.w	r7, r7, #1
 8018d5a:	d134      	bne.n	8018dc6 <properties::convert_json_file(char*, unsigned long, bool)+0x13e>
 8018d5c:	4588      	cmp	r8, r1
 8018d5e:	d3f4      	bcc.n	8018d4a <properties::convert_json_file(char*, unsigned long, bool)+0xc2>
 8018d60:	46b8      	mov	r8, r7
 8018d62:	7834      	ldrb	r4, [r6, #0]
 8018d64:	2c22      	cmp	r4, #34	@ 0x22
 8018d66:	d100      	bne.n	8018d6a <properties::convert_json_file(char*, unsigned long, bool)+0xe2>
 8018d68:	3601      	adds	r6, #1
 8018d6a:	4634      	mov	r4, r6
 8018d6c:	f108 0501 	add.w	r5, r8, #1
 8018d70:	f814 7b01 	ldrb.w	r7, [r4], #1
 8018d74:	2f22      	cmp	r7, #34	@ 0x22
 8018d76:	d02a      	beq.n	8018dce <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8018d78:	2f2c      	cmp	r7, #44	@ 0x2c
 8018d7a:	d028      	beq.n	8018dce <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8018d7c:	2f7d      	cmp	r7, #125	@ 0x7d
 8018d7e:	d026      	beq.n	8018dce <properties::convert_json_file(char*, unsigned long, bool)+0x146>
 8018d80:	4588      	cmp	r8, r1
 8018d82:	d228      	bcs.n	8018dd6 <properties::convert_json_file(char*, unsigned long, bool)+0x14e>
 8018d84:	f1a7 0820 	sub.w	r8, r7, #32
 8018d88:	f1b8 0f5a 	cmp.w	r8, #90	@ 0x5a
 8018d8c:	d803      	bhi.n	8018d96 <properties::convert_json_file(char*, unsigned long, bool)+0x10e>
 8018d8e:	f803 7b01 	strb.w	r7, [r3], #1
 8018d92:	3001      	adds	r0, #1
 8018d94:	4626      	mov	r6, r4
 8018d96:	46a8      	mov	r8, r5
 8018d98:	e7e7      	b.n	8018d6a <properties::convert_json_file(char*, unsigned long, bool)+0xe2>
 8018d9a:	428d      	cmp	r5, r1
 8018d9c:	f894 8000 	ldrb.w	r8, [r4]
 8018da0:	4627      	mov	r7, r4
 8018da2:	f105 0501 	add.w	r5, r5, #1
 8018da6:	f104 0401 	add.w	r4, r4, #1
 8018daa:	d3b0      	bcc.n	8018d0e <properties::convert_json_file(char*, unsigned long, bool)+0x86>
 8018dac:	463c      	mov	r4, r7
 8018dae:	e7b1      	b.n	8018d14 <properties::convert_json_file(char*, unsigned long, bool)+0x8c>
 8018db0:	428d      	cmp	r5, r1
 8018db2:	d2c1      	bcs.n	8018d38 <properties::convert_json_file(char*, unsigned long, bool)+0xb0>
 8018db4:	f803 8b01 	strb.w	r8, [r3], #1
 8018db8:	463d      	mov	r5, r7
 8018dba:	e7ad      	b.n	8018d18 <properties::convert_json_file(char*, unsigned long, bool)+0x90>
 8018dbc:	f1b8 0f3a 	cmp.w	r8, #58	@ 0x3a
 8018dc0:	d1ba      	bne.n	8018d38 <properties::convert_json_file(char*, unsigned long, bool)+0xb0>
 8018dc2:	4634      	mov	r4, r6
 8018dc4:	e7c1      	b.n	8018d4a <properties::convert_json_file(char*, unsigned long, bool)+0xc2>
 8018dc6:	2d22      	cmp	r5, #34	@ 0x22
 8018dc8:	bf08      	it	eq
 8018dca:	4626      	moveq	r6, r4
 8018dcc:	e7c9      	b.n	8018d62 <properties::convert_json_file(char*, unsigned long, bool)+0xda>
 8018dce:	f803 eb01 	strb.w	lr, [r3], #1
 8018dd2:	3001      	adds	r0, #1
 8018dd4:	4645      	mov	r5, r8
 8018dd6:	3501      	adds	r5, #1
 8018dd8:	e765      	b.n	8018ca6 <properties::convert_json_file(char*, unsigned long, bool)+0x1e>
 8018dda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018dde:	e766      	b.n	8018cae <properties::convert_json_file(char*, unsigned long, bool)+0x26>

08018de0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)>:
 8018de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018de4:	6002      	str	r2, [r0, #0]
 8018de6:	4614      	mov	r4, r2
 8018de8:	2200      	movs	r2, #0
 8018dea:	80c2      	strh	r2, [r0, #6]
 8018dec:	4a1c      	ldr	r2, [pc, #112]	@ (8018e60 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x80>)
 8018dee:	8083      	strh	r3, [r0, #4]
 8018df0:	7812      	ldrb	r2, [r2, #0]
 8018df2:	f002 0201 	and.w	r2, r2, #1
 8018df6:	4606      	mov	r6, r0
 8018df8:	7202      	strb	r2, [r0, #8]
 8018dfa:	4608      	mov	r0, r1
 8018dfc:	4605      	mov	r5, r0
 8018dfe:	3001      	adds	r0, #1
 8018e00:	782f      	ldrb	r7, [r5, #0]
 8018e02:	2f00      	cmp	r7, #0
 8018e04:	d1fa      	bne.n	8018dfc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x1c>
 8018e06:	1a6d      	subs	r5, r5, r1
 8018e08:	b29b      	uxth	r3, r3
 8018e0a:	b1d2      	cbz	r2, 8018e42 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x62>
 8018e0c:	1d2f      	adds	r7, r5, #4
 8018e0e:	429f      	cmp	r7, r3
 8018e10:	d814      	bhi.n	8018e3c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 8018e12:	f04f 087b 	mov.w	r8, #123	@ 0x7b
 8018e16:	f04f 0922 	mov.w	r9, #34	@ 0x22
 8018e1a:	462a      	mov	r2, r5
 8018e1c:	f884 8000 	strb.w	r8, [r4]
 8018e20:	f884 9001 	strb.w	r9, [r4, #1]
 8018e24:	1ca0      	adds	r0, r4, #2
 8018e26:	f003 f806 	bl	801be36 <memmove>
 8018e2a:	1963      	adds	r3, r4, r5
 8018e2c:	223a      	movs	r2, #58	@ 0x3a
 8018e2e:	f883 9002 	strb.w	r9, [r3, #2]
 8018e32:	70da      	strb	r2, [r3, #3]
 8018e34:	3505      	adds	r5, #5
 8018e36:	f804 8007 	strb.w	r8, [r4, r7]
 8018e3a:	80f5      	strh	r5, [r6, #6]
 8018e3c:	4630      	mov	r0, r6
 8018e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e42:	1caf      	adds	r7, r5, #2
 8018e44:	42bb      	cmp	r3, r7
 8018e46:	d3f9      	bcc.n	8018e3c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 8018e48:	4620      	mov	r0, r4
 8018e4a:	2323      	movs	r3, #35	@ 0x23
 8018e4c:	f800 3b01 	strb.w	r3, [r0], #1
 8018e50:	462a      	mov	r2, r5
 8018e52:	442c      	add	r4, r5
 8018e54:	f002 ffef 	bl	801be36 <memmove>
 8018e58:	230a      	movs	r3, #10
 8018e5a:	7063      	strb	r3, [r4, #1]
 8018e5c:	80f7      	strh	r7, [r6, #6]
 8018e5e:	e7ed      	b.n	8018e3c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned long)+0x5c>
 8018e60:	2000e2f1 	strdcs	lr, [r0], -r1

08018e64 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)>:
 8018e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e66:	469c      	mov	ip, r3
 8018e68:	8885      	ldrh	r5, [r0, #4]
 8018e6a:	88c3      	ldrh	r3, [r0, #6]
 8018e6c:	42ab      	cmp	r3, r5
 8018e6e:	b085      	sub	sp, #20
 8018e70:	d302      	bcc.n	8018e78 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x14>
 8018e72:	2000      	movs	r0, #0
 8018e74:	b005      	add	sp, #20
 8018e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e78:	4604      	mov	r4, r0
 8018e7a:	6800      	ldr	r0, [r0, #0]
 8018e7c:	f894 e008 	ldrb.w	lr, [r4, #8]
 8018e80:	4418      	add	r0, r3
 8018e82:	1aed      	subs	r5, r5, r3
 8018e84:	b2d6      	uxtb	r6, r2
 8018e86:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8018e8a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8018e8e:	0e12      	lsrs	r2, r2, #24
 8018e90:	f1bc 0f00 	cmp.w	ip, #0
 8018e94:	d109      	bne.n	8018eaa <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x46>
 8018e96:	f1be 0f00 	cmp.w	lr, #0
 8018e9a:	d109      	bne.n	8018eb0 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x4c>
 8018e9c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018ea0:	e9cd 6700 	strd	r6, r7, [sp]
 8018ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8018ee0 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x7c>)
 8018ea6:	460b      	mov	r3, r1
 8018ea8:	e008      	b.n	8018ebc <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x58>
 8018eaa:	f1be 0f00 	cmp.w	lr, #0
 8018eae:	d00f      	beq.n	8018ed0 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x6c>
 8018eb0:	e9cd 6700 	strd	r6, r7, [sp]
 8018eb4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8018ee4 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x80>)
 8018eba:	460b      	mov	r3, r1
 8018ebc:	4629      	mov	r1, r5
 8018ebe:	f003 fadd 	bl	801c47c <snprintf>
 8018ec2:	4285      	cmp	r5, r0
 8018ec4:	dbd5      	blt.n	8018e72 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0xe>
 8018ec6:	88e3      	ldrh	r3, [r4, #6]
 8018ec8:	4403      	add	r3, r0
 8018eca:	80e3      	strh	r3, [r4, #6]
 8018ecc:	2001      	movs	r0, #1
 8018ece:	e7d1      	b.n	8018e74 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x10>
 8018ed0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018ed4:	e9cd 6700 	strd	r6, r7, [sp]
 8018ed8:	4a03      	ldr	r2, [pc, #12]	@ (8018ee8 <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x84>)
 8018eda:	460b      	mov	r3, r1
 8018edc:	e7ee      	b.n	8018ebc <PropertiesBuilder::AddIpAddress(char const*, unsigned long, bool)+0x58>
 8018ede:	bf00      	nop
 8018ee0:	0801dd03 	stmdaeq	r1, {r0, r1, r8, sl, fp, ip, lr, pc}
 8018ee4:	0801dcef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, fp, ip, lr, pc}
 8018ee8:	0801dd04 	stmdaeq	r1, {r2, r8, sl, fp, ip, lr, pc}

08018eec <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)>:
 8018eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eee:	88c6      	ldrh	r6, [r0, #6]
 8018ef0:	8885      	ldrh	r5, [r0, #4]
 8018ef2:	42ae      	cmp	r6, r5
 8018ef4:	b085      	sub	sp, #20
 8018ef6:	d302      	bcc.n	8018efe <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x12>
 8018ef8:	2000      	movs	r0, #0
 8018efa:	b005      	add	sp, #20
 8018efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018efe:	4604      	mov	r4, r0
 8018f00:	6800      	ldr	r0, [r0, #0]
 8018f02:	1bad      	subs	r5, r5, r6
 8018f04:	4430      	add	r0, r6
 8018f06:	7a26      	ldrb	r6, [r4, #8]
 8018f08:	b19e      	cbz	r6, 8018f32 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x46>
 8018f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8018f48 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x5c>)
 8018f0c:	4f0f      	ldr	r7, [pc, #60]	@ (8018f4c <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x60>)
 8018f0e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8018f12:	2a00      	cmp	r2, #0
 8018f14:	bfc8      	it	gt
 8018f16:	463e      	movgt	r6, r7
 8018f18:	4a0d      	ldr	r2, [pc, #52]	@ (8018f50 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x64>)
 8018f1a:	9600      	str	r6, [sp, #0]
 8018f1c:	460b      	mov	r3, r1
 8018f1e:	4629      	mov	r1, r5
 8018f20:	f003 faac 	bl	801c47c <snprintf>
 8018f24:	4285      	cmp	r5, r0
 8018f26:	dbe7      	blt.n	8018ef8 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0xc>
 8018f28:	88e3      	ldrh	r3, [r4, #6]
 8018f2a:	4403      	add	r3, r0
 8018f2c:	80e3      	strh	r3, [r4, #6]
 8018f2e:	2001      	movs	r0, #1
 8018f30:	e7e3      	b.n	8018efa <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0xe>
 8018f32:	4e05      	ldr	r6, [pc, #20]	@ (8018f48 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x5c>)
 8018f34:	4f05      	ldr	r7, [pc, #20]	@ (8018f4c <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x60>)
 8018f36:	2a00      	cmp	r2, #0
 8018f38:	bfc8      	it	gt
 8018f3a:	463e      	movgt	r6, r7
 8018f3c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8018f40:	9600      	str	r6, [sp, #0]
 8018f42:	4a04      	ldr	r2, [pc, #16]	@ (8018f54 <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x68>)
 8018f44:	460b      	mov	r3, r1
 8018f46:	e7ea      	b.n	8018f1e <PropertiesBuilder::AddUtcOffset(char const*, signed char, unsigned char)+0x32>
 8018f48:	0801d1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr, pc}
 8018f4c:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}
 8018f50:	0801dd16 	stmdaeq	r1, {r1, r2, r4, r8, sl, fp, ip, lr, pc}
 8018f54:	0801dd2a 	stmdaeq	r1, {r1, r3, r5, r8, sl, fp, ip, lr, pc}

08018f58 <PropertiesBuilder::AddComment(char const*)>:
 8018f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f5a:	7a06      	ldrb	r6, [r0, #8]
 8018f5c:	b98e      	cbnz	r6, 8018f82 <PropertiesBuilder::AddComment(char const*)+0x2a>
 8018f5e:	4604      	mov	r4, r0
 8018f60:	88c0      	ldrh	r0, [r0, #6]
 8018f62:	88a5      	ldrh	r5, [r4, #4]
 8018f64:	42a8      	cmp	r0, r5
 8018f66:	d20d      	bcs.n	8018f84 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8018f68:	6827      	ldr	r7, [r4, #0]
 8018f6a:	4a07      	ldr	r2, [pc, #28]	@ (8018f88 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8018f6c:	1a2d      	subs	r5, r5, r0
 8018f6e:	460b      	mov	r3, r1
 8018f70:	4438      	add	r0, r7
 8018f72:	4629      	mov	r1, r5
 8018f74:	f003 fa82 	bl	801c47c <snprintf>
 8018f78:	4285      	cmp	r5, r0
 8018f7a:	db03      	blt.n	8018f84 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8018f7c:	88e3      	ldrh	r3, [r4, #6]
 8018f7e:	4418      	add	r0, r3
 8018f80:	80e0      	strh	r0, [r4, #6]
 8018f82:	2601      	movs	r6, #1
 8018f84:	4630      	mov	r0, r6
 8018f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f88:	0801dd39 	stmdaeq	r1, {r0, r3, r4, r5, r8, sl, fp, ip, lr, pc}

08018f8c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8018f8c:	e9c0 1200 	strd	r1, r2, [r0]
 8018f90:	4770      	bx	lr

08018f92 <ReadConfigFile::~ReadConfigFile()>:
 8018f92:	4770      	bx	lr

08018f94 <ReadConfigFile::Read(char const*, unsigned int)>:
 8018f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f98:	b0a0      	sub	sp, #128	@ 0x80
 8018f9a:	230a      	movs	r3, #10
 8018f9c:	4607      	mov	r7, r0
 8018f9e:	460d      	mov	r5, r1
 8018fa0:	4614      	mov	r4, r2
 8018fa2:	f88d 3000 	strb.w	r3, [sp]
 8018fa6:	f04f 0800 	mov.w	r8, #0
 8018faa:	b334      	cbz	r4, 8018ffa <ReadConfigFile::Read(char const*, unsigned int)+0x66>
 8018fac:	466e      	mov	r6, sp
 8018fae:	462a      	mov	r2, r5
 8018fb0:	4631      	mov	r1, r6
 8018fb2:	7810      	ldrb	r0, [r2, #0]
 8018fb4:	280d      	cmp	r0, #13
 8018fb6:	4613      	mov	r3, r2
 8018fb8:	f102 0201 	add.w	r2, r2, #1
 8018fbc:	d009      	beq.n	8018fd2 <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 8018fbe:	280a      	cmp	r0, #10
 8018fc0:	d007      	beq.n	8018fd2 <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 8018fc2:	f806 0b01 	strb.w	r0, [r6], #1
 8018fc6:	1a73      	subs	r3, r6, r1
 8018fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8018fca:	dc16      	bgt.n	8018ffa <ReadConfigFile::Read(char const*, unsigned int)+0x66>
 8018fcc:	3c01      	subs	r4, #1
 8018fce:	d1f0      	bne.n	8018fb2 <ReadConfigFile::Read(char const*, unsigned int)+0x1e>
 8018fd0:	4613      	mov	r3, r2
 8018fd2:	461d      	mov	r5, r3
 8018fd4:	b12c      	cbz	r4, 8018fe2 <ReadConfigFile::Read(char const*, unsigned int)+0x4e>
 8018fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fda:	2a0d      	cmp	r2, #13
 8018fdc:	d00b      	beq.n	8018ff6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8018fde:	2a0a      	cmp	r2, #10
 8018fe0:	d009      	beq.n	8018ff6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8018fe2:	f89d 3000 	ldrb.w	r3, [sp]
 8018fe6:	2b2f      	cmp	r3, #47	@ 0x2f
 8018fe8:	d9df      	bls.n	8018faa <ReadConfigFile::Read(char const*, unsigned int)+0x16>
 8018fea:	e9d7 3000 	ldrd	r3, r0, [r7]
 8018fee:	f886 8000 	strb.w	r8, [r6]
 8018ff2:	4798      	blx	r3
 8018ff4:	e7d9      	b.n	8018faa <ReadConfigFile::Read(char const*, unsigned int)+0x16>
 8018ff6:	3c01      	subs	r4, #1
 8018ff8:	e7eb      	b.n	8018fd2 <ReadConfigFile::Read(char const*, unsigned int)+0x3e>
 8018ffa:	b020      	add	sp, #128	@ 0x80
 8018ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019000 <Sscan::Char(char const*, char const*, char*, unsigned long&)>:
 8019000:	b570      	push	{r4, r5, r6, lr}
 8019002:	4615      	mov	r5, r2
 8019004:	461c      	mov	r4, r3
 8019006:	f000 f950 	bl	80192aa <Sscan::checkName(char const*, char const*)>
 801900a:	b170      	cbz	r0, 801902a <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x2a>
 801900c:	2100      	movs	r1, #0
 801900e:	5c43      	ldrb	r3, [r0, r1]
 8019010:	6826      	ldr	r6, [r4, #0]
 8019012:	b28a      	uxth	r2, r1
 8019014:	b11b      	cbz	r3, 801901e <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x1e>
 8019016:	4296      	cmp	r6, r2
 8019018:	d804      	bhi.n	8019024 <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x24>
 801901a:	2b0a      	cmp	r3, #10
 801901c:	d107      	bne.n	801902e <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x2e>
 801901e:	6022      	str	r2, [r4, #0]
 8019020:	2000      	movs	r0, #0
 8019022:	bd70      	pop	{r4, r5, r6, pc}
 8019024:	546b      	strb	r3, [r5, r1]
 8019026:	3101      	adds	r1, #1
 8019028:	e7f1      	b.n	801900e <Sscan::Char(char const*, char const*, char*, unsigned long&)+0xe>
 801902a:	2001      	movs	r0, #1
 801902c:	e7f9      	b.n	8019022 <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x22>
 801902e:	2002      	movs	r0, #2
 8019030:	e7f7      	b.n	8019022 <Sscan::Char(char const*, char const*, char*, unsigned long&)+0x22>

08019032 <Sscan::Float(char const*, char const*, float&)>:
 8019032:	b570      	push	{r4, r5, r6, lr}
 8019034:	4614      	mov	r4, r2
 8019036:	f000 f938 	bl	80192aa <Sscan::checkName(char const*, char const*)>
 801903a:	2800      	cmp	r0, #0
 801903c:	d049      	beq.n	80190d2 <Sscan::Float(char const*, char const*, float&)+0xa0>
 801903e:	7803      	ldrb	r3, [r0, #0]
 8019040:	2b2d      	cmp	r3, #45	@ 0x2d
 8019042:	bf04      	itt	eq
 8019044:	3001      	addeq	r0, #1
 8019046:	2501      	moveq	r5, #1
 8019048:	7803      	ldrb	r3, [r0, #0]
 801904a:	bf18      	it	ne
 801904c:	2500      	movne	r5, #0
 801904e:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 8019052:	d101      	bne.n	8019058 <Sscan::Float(char const*, char const*, float&)+0x26>
 8019054:	2002      	movs	r0, #2
 8019056:	bd70      	pop	{r4, r5, r6, pc}
 8019058:	2300      	movs	r3, #0
 801905a:	7802      	ldrb	r2, [r0, #0]
 801905c:	3a30      	subs	r2, #48	@ 0x30
 801905e:	2a09      	cmp	r2, #9
 8019060:	d8f8      	bhi.n	8019054 <Sscan::Float(char const*, char const*, float&)+0x22>
 8019062:	210a      	movs	r1, #10
 8019064:	fb01 2303 	mla	r3, r1, r3, r2
 8019068:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801906c:	2a2e      	cmp	r2, #46	@ 0x2e
 801906e:	d002      	beq.n	8019076 <Sscan::Float(char const*, char const*, float&)+0x44>
 8019070:	f012 0fdf 	tst.w	r2, #223	@ 0xdf
 8019074:	d1f1      	bne.n	801905a <Sscan::Float(char const*, char const*, float&)+0x28>
 8019076:	ee07 3a90 	vmov	s15, r3
 801907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801907e:	edc4 7a00 	vstr	s15, [r4]
 8019082:	7803      	ldrb	r3, [r0, #0]
 8019084:	2b2e      	cmp	r3, #46	@ 0x2e
 8019086:	d006      	beq.n	8019096 <Sscan::Float(char const*, char const*, float&)+0x64>
 8019088:	b11d      	cbz	r5, 8019092 <Sscan::Float(char const*, char const*, float&)+0x60>
 801908a:	eef1 7a67 	vneg.f32	s15, s15
 801908e:	edc4 7a00 	vstr	s15, [r4]
 8019092:	2000      	movs	r0, #0
 8019094:	e7df      	b.n	8019056 <Sscan::Float(char const*, char const*, float&)+0x24>
 8019096:	2301      	movs	r3, #1
 8019098:	2200      	movs	r2, #0
 801909a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 801909e:	f011 0fdf 	tst.w	r1, #223	@ 0xdf
 80190a2:	d10e      	bne.n	80190c2 <Sscan::Float(char const*, char const*, float&)+0x90>
 80190a4:	ee07 2a10 	vmov	s14, r2
 80190a8:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80190ac:	ee07 3a10 	vmov	s14, r3
 80190b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80190b4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80190b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190bc:	2d00      	cmp	r5, #0
 80190be:	d1e4      	bne.n	801908a <Sscan::Float(char const*, char const*, float&)+0x58>
 80190c0:	e7e5      	b.n	801908e <Sscan::Float(char const*, char const*, float&)+0x5c>
 80190c2:	3930      	subs	r1, #48	@ 0x30
 80190c4:	2909      	cmp	r1, #9
 80190c6:	d8c5      	bhi.n	8019054 <Sscan::Float(char const*, char const*, float&)+0x22>
 80190c8:	260a      	movs	r6, #10
 80190ca:	fb06 1202 	mla	r2, r6, r2, r1
 80190ce:	4373      	muls	r3, r6
 80190d0:	e7e3      	b.n	801909a <Sscan::Float(char const*, char const*, float&)+0x68>
 80190d2:	2001      	movs	r0, #1
 80190d4:	e7bf      	b.n	8019056 <Sscan::Float(char const*, char const*, float&)+0x24>

080190d6 <Sscan::IpAddress(char const*, char const*, unsigned long&)>:
 80190d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190d8:	4615      	mov	r5, r2
 80190da:	f000 f8e6 	bl	80192aa <Sscan::checkName(char const*, char const*)>
 80190de:	bb60      	cbnz	r0, 801913a <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x64>
 80190e0:	2001      	movs	r0, #1
 80190e2:	e028      	b.n	8019136 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x60>
 80190e4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80190e8:	2b09      	cmp	r3, #9
 80190ea:	d823      	bhi.n	8019134 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 80190ec:	230a      	movs	r3, #10
 80190ee:	fb03 2101 	mla	r1, r3, r1, r2
 80190f2:	3930      	subs	r1, #48	@ 0x30
 80190f4:	4603      	mov	r3, r0
 80190f6:	4618      	mov	r0, r3
 80190f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190fc:	2a2e      	cmp	r2, #46	@ 0x2e
 80190fe:	d115      	bne.n	801912c <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x56>
 8019100:	29ff      	cmp	r1, #255	@ 0xff
 8019102:	d817      	bhi.n	8019134 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 8019104:	3401      	adds	r4, #1
 8019106:	2c03      	cmp	r4, #3
 8019108:	f806 1b01 	strb.w	r1, [r6], #1
 801910c:	d117      	bne.n	801913e <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x68>
 801910e:	1d1a      	adds	r2, r3, #4
 8019110:	2400      	movs	r4, #0
 8019112:	260a      	movs	r6, #10
 8019114:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8019118:	f011 00df 	ands.w	r0, r1, #223	@ 0xdf
 801911c:	d113      	bne.n	8019146 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x70>
 801911e:	2cff      	cmp	r4, #255	@ 0xff
 8019120:	d808      	bhi.n	8019134 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 8019122:	f88d 4007 	strb.w	r4, [sp, #7]
 8019126:	9b01      	ldr	r3, [sp, #4]
 8019128:	602b      	str	r3, [r5, #0]
 801912a:	e004      	b.n	8019136 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x60>
 801912c:	2a00      	cmp	r2, #0
 801912e:	d0e7      	beq.n	8019100 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x2a>
 8019130:	42b8      	cmp	r0, r7
 8019132:	d1d7      	bne.n	80190e4 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0xe>
 8019134:	2002      	movs	r0, #2
 8019136:	b003      	add	sp, #12
 8019138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801913a:	ae01      	add	r6, sp, #4
 801913c:	2400      	movs	r4, #0
 801913e:	4603      	mov	r3, r0
 8019140:	1d07      	adds	r7, r0, #4
 8019142:	2100      	movs	r1, #0
 8019144:	e7d7      	b.n	80190f6 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x20>
 8019146:	4293      	cmp	r3, r2
 8019148:	d0f4      	beq.n	8019134 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 801914a:	3930      	subs	r1, #48	@ 0x30
 801914c:	2909      	cmp	r1, #9
 801914e:	d8f1      	bhi.n	8019134 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x5e>
 8019150:	fb06 1404 	mla	r4, r6, r4, r1
 8019154:	e7de      	b.n	8019114 <Sscan::IpAddress(char const*, char const*, unsigned long&)+0x3e>

08019156 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8019156:	b538      	push	{r3, r4, r5, lr}
 8019158:	4615      	mov	r5, r2
 801915a:	f000 f8a6 	bl	80192aa <Sscan::checkName(char const*, char const*)>
 801915e:	b190      	cbz	r0, 8019186 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x30>
 8019160:	4601      	mov	r1, r0
 8019162:	2400      	movs	r4, #0
 8019164:	780b      	ldrb	r3, [r1, #0]
 8019166:	3b30      	subs	r3, #48	@ 0x30
 8019168:	2b09      	cmp	r3, #9
 801916a:	d80e      	bhi.n	801918a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 801916c:	220a      	movs	r2, #10
 801916e:	fb02 3404 	mla	r4, r2, r4, r3
 8019172:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019176:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 801917a:	d1f3      	bne.n	8019164 <Sscan::Uint16(char const*, char const*, unsigned short&)+0xe>
 801917c:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 8019180:	d203      	bcs.n	801918a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8019182:	802c      	strh	r4, [r5, #0]
 8019184:	bd38      	pop	{r3, r4, r5, pc}
 8019186:	2001      	movs	r0, #1
 8019188:	e7fc      	b.n	8019184 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x2e>
 801918a:	2002      	movs	r0, #2
 801918c:	e7fa      	b.n	8019184 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x2e>

0801918e <Sscan::Uint32(char const*, char const*, unsigned long&)>:
 801918e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019190:	4616      	mov	r6, r2
 8019192:	f000 f88a 	bl	80192aa <Sscan::checkName(char const*, char const*)>
 8019196:	b1f8      	cbz	r0, 80191d8 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4a>
 8019198:	2300      	movs	r3, #0
 801919a:	4605      	mov	r5, r0
 801919c:	461c      	mov	r4, r3
 801919e:	782a      	ldrb	r2, [r5, #0]
 80191a0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80191a4:	2909      	cmp	r1, #9
 80191a6:	d819      	bhi.n	80191dc <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4e>
 80191a8:	200a      	movs	r0, #10
 80191aa:	fba3 3700 	umull	r3, r7, r3, r0
 80191ae:	3a30      	subs	r2, #48	@ 0x30
 80191b0:	eb62 0202 	sbc.w	r2, r2, r2
 80191b4:	18cb      	adds	r3, r1, r3
 80191b6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80191ba:	fb00 7404 	mla	r4, r0, r4, r7
 80191be:	eb44 0402 	adc.w	r4, r4, r2
 80191c2:	f011 00df 	ands.w	r0, r1, #223	@ 0xdf
 80191c6:	d1ea      	bne.n	801919e <Sscan::Uint32(char const*, char const*, unsigned long&)+0x10>
 80191c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80191cc:	429a      	cmp	r2, r3
 80191ce:	eb70 0404 	sbcs.w	r4, r0, r4
 80191d2:	d303      	bcc.n	80191dc <Sscan::Uint32(char const*, char const*, unsigned long&)+0x4e>
 80191d4:	6033      	str	r3, [r6, #0]
 80191d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191d8:	2001      	movs	r0, #1
 80191da:	e7fc      	b.n	80191d6 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x48>
 80191dc:	2002      	movs	r0, #2
 80191de:	e7fa      	b.n	80191d6 <Sscan::Uint32(char const*, char const*, unsigned long&)+0x48>

080191e0 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80191e0:	b538      	push	{r3, r4, r5, lr}
 80191e2:	4615      	mov	r5, r2
 80191e4:	f000 f861 	bl	80192aa <Sscan::checkName(char const*, char const*)>
 80191e8:	b188      	cbz	r0, 801920e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2e>
 80191ea:	4601      	mov	r1, r0
 80191ec:	2400      	movs	r4, #0
 80191ee:	780b      	ldrb	r3, [r1, #0]
 80191f0:	3b30      	subs	r3, #48	@ 0x30
 80191f2:	2b09      	cmp	r3, #9
 80191f4:	d80d      	bhi.n	8019212 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80191f6:	220a      	movs	r2, #10
 80191f8:	fb02 3404 	mla	r4, r2, r4, r3
 80191fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019200:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 8019204:	d1f3      	bne.n	80191ee <Sscan::Uint8(char const*, char const*, unsigned char&)+0xe>
 8019206:	2cff      	cmp	r4, #255	@ 0xff
 8019208:	d803      	bhi.n	8019212 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 801920a:	702c      	strb	r4, [r5, #0]
 801920c:	bd38      	pop	{r3, r4, r5, pc}
 801920e:	2001      	movs	r0, #1
 8019210:	e7fc      	b.n	801920c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2c>
 8019212:	2002      	movs	r0, #2
 8019214:	e7fa      	b.n	801920c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x2c>

08019216 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)>:
 8019216:	b570      	push	{r4, r5, r6, lr}
 8019218:	4615      	mov	r5, r2
 801921a:	461e      	mov	r6, r3
 801921c:	f000 f845 	bl	80192aa <Sscan::checkName(char const*, char const*)>
 8019220:	2800      	cmp	r0, #0
 8019222:	d040      	beq.n	80192a6 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x90>
 8019224:	7803      	ldrb	r3, [r0, #0]
 8019226:	2b2d      	cmp	r3, #45	@ 0x2d
 8019228:	4601      	mov	r1, r0
 801922a:	d107      	bne.n	801923c <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x26>
 801922c:	3101      	adds	r1, #1
 801922e:	2201      	movs	r2, #1
 8019230:	780b      	ldrb	r3, [r1, #0]
 8019232:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 8019236:	d106      	bne.n	8019246 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x30>
 8019238:	2002      	movs	r0, #2
 801923a:	bd70      	pop	{r4, r5, r6, pc}
 801923c:	2b2b      	cmp	r3, #43	@ 0x2b
 801923e:	bf08      	it	eq
 8019240:	3101      	addeq	r1, #1
 8019242:	2200      	movs	r2, #0
 8019244:	e7f4      	b.n	8019230 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x1a>
 8019246:	2300      	movs	r3, #0
 8019248:	702b      	strb	r3, [r5, #0]
 801924a:	780b      	ldrb	r3, [r1, #0]
 801924c:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8019250:	2801      	cmp	r0, #1
 8019252:	d8f1      	bhi.n	8019238 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8019254:	2b31      	cmp	r3, #49	@ 0x31
 8019256:	bf14      	ite	ne
 8019258:	2300      	movne	r3, #0
 801925a:	230a      	moveq	r3, #10
 801925c:	702b      	strb	r3, [r5, #0]
 801925e:	7848      	ldrb	r0, [r1, #1]
 8019260:	3830      	subs	r0, #48	@ 0x30
 8019262:	2809      	cmp	r0, #9
 8019264:	d8e8      	bhi.n	8019238 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8019266:	4403      	add	r3, r0
 8019268:	702b      	strb	r3, [r5, #0]
 801926a:	788b      	ldrb	r3, [r1, #2]
 801926c:	2b3a      	cmp	r3, #58	@ 0x3a
 801926e:	d1e3      	bne.n	8019238 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8019270:	78cc      	ldrb	r4, [r1, #3]
 8019272:	3c30      	subs	r4, #48	@ 0x30
 8019274:	2c09      	cmp	r4, #9
 8019276:	d8df      	bhi.n	8019238 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8019278:	790b      	ldrb	r3, [r1, #4]
 801927a:	3b30      	subs	r3, #48	@ 0x30
 801927c:	2b09      	cmp	r3, #9
 801927e:	d8db      	bhi.n	8019238 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8019280:	7948      	ldrb	r0, [r1, #5]
 8019282:	f010 00df 	ands.w	r0, r0, #223	@ 0xdf
 8019286:	d1d7      	bne.n	8019238 <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x22>
 8019288:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801928c:	0064      	lsls	r4, r4, #1
 801928e:	b2e4      	uxtb	r4, r4
 8019290:	7034      	strb	r4, [r6, #0]
 8019292:	790b      	ldrb	r3, [r1, #4]
 8019294:	3b30      	subs	r3, #48	@ 0x30
 8019296:	441c      	add	r4, r3
 8019298:	7034      	strb	r4, [r6, #0]
 801929a:	2a00      	cmp	r2, #0
 801929c:	d0cd      	beq.n	801923a <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>
 801929e:	782b      	ldrb	r3, [r5, #0]
 80192a0:	425b      	negs	r3, r3
 80192a2:	702b      	strb	r3, [r5, #0]
 80192a4:	e7c9      	b.n	801923a <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>
 80192a6:	2001      	movs	r0, #1
 80192a8:	e7c7      	b.n	801923a <Sscan::UtcOffset(char const*, char const*, signed char&, unsigned char&)+0x24>

080192aa <Sscan::checkName(char const*, char const*)>:
 80192aa:	3901      	subs	r1, #1
 80192ac:	4602      	mov	r2, r0
 80192ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80192b2:	b130      	cbz	r0, 80192c2 <Sscan::checkName(char const*, char const*)+0x18>
 80192b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80192b8:	b10b      	cbz	r3, 80192be <Sscan::checkName(char const*, char const*)+0x14>
 80192ba:	4298      	cmp	r0, r3
 80192bc:	d0f7      	beq.n	80192ae <Sscan::checkName(char const*, char const*)+0x4>
 80192be:	2000      	movs	r0, #0
 80192c0:	4770      	bx	lr
 80192c2:	7813      	ldrb	r3, [r2, #0]
 80192c4:	2b3d      	cmp	r3, #61	@ 0x3d
 80192c6:	d1fb      	bne.n	80192c0 <Sscan::checkName(char const*, char const*)+0x16>
 80192c8:	7853      	ldrb	r3, [r2, #1]
 80192ca:	f013 00df 	ands.w	r0, r3, #223	@ 0xdf
 80192ce:	d0f7      	beq.n	80192c0 <Sscan::checkName(char const*, char const*)+0x16>
 80192d0:	1c50      	adds	r0, r2, #1
 80192d2:	4770      	bx	lr

080192d4 <Display::PrintInfo() [clone .isra.0]>:
 80192d4:	b910      	cbnz	r0, 80192dc <Display::PrintInfo() [clone .isra.0]+0x8>
 80192d6:	4803      	ldr	r0, [pc, #12]	@ (80192e4 <Display::PrintInfo() [clone .isra.0]+0x10>)
 80192d8:	f003 b8fd 	b.w	801c4d6 <puts>
 80192dc:	6803      	ldr	r3, [r0, #0]
 80192de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80192e0:	4718      	bx	r3
 80192e2:	bf00      	nop
 80192e4:	0801dd41 	stmdaeq	r1, {r0, r6, r8, sl, fp, ip, lr, pc}

080192e8 <display::timeout::gpio_init()>:
 80192e8:	b510      	push	{r4, lr}
 80192ea:	4c0a      	ldr	r4, [pc, #40]	@ (8019314 <display::timeout::gpio_init()+0x2c>)
 80192ec:	f640 4002 	movw	r0, #3074	@ 0xc02
 80192f0:	f001 fb28 	bl	801a944 <rcu_periph_clock_enable>
 80192f4:	4620      	mov	r0, r4
 80192f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80192fa:	2201      	movs	r2, #1
 80192fc:	2100      	movs	r1, #0
 80192fe:	f001 fa9f 	bl	801a840 <gpio_mode_set>
 8019302:	4620      	mov	r0, r4
 8019304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801930c:	2201      	movs	r2, #1
 801930e:	2100      	movs	r1, #0
 8019310:	f001 ba96 	b.w	801a840 <gpio_mode_set>
 8019314:	40020800 	andmi	r0, r2, r0, lsl #16

08019318 <Display::Detect(display::Type)>:
 8019318:	2902      	cmp	r1, #2
 801931a:	b538      	push	{r3, r4, r5, lr}
 801931c:	4604      	mov	r4, r0
 801931e:	d014      	beq.n	801934a <Display::Detect(display::Type)+0x32>
 8019320:	2904      	cmp	r1, #4
 8019322:	d01b      	beq.n	801935c <Display::Detect(display::Type)+0x44>
 8019324:	69a0      	ldr	r0, [r4, #24]
 8019326:	b168      	cbz	r0, 8019344 <Display::Detect(display::Type)+0x2c>
 8019328:	6803      	ldr	r3, [r0, #0]
 801932a:	689b      	ldr	r3, [r3, #8]
 801932c:	4798      	blx	r3
 801932e:	4603      	mov	r3, r0
 8019330:	69a0      	ldr	r0, [r4, #24]
 8019332:	b9ab      	cbnz	r3, 8019360 <Display::Detect(display::Type)+0x48>
 8019334:	b110      	cbz	r0, 801933c <Display::Detect(display::Type)+0x24>
 8019336:	6803      	ldr	r3, [r0, #0]
 8019338:	685b      	ldr	r3, [r3, #4]
 801933a:	4798      	blx	r3
 801933c:	2300      	movs	r3, #0
 801933e:	61a3      	str	r3, [r4, #24]
 8019340:	2304      	movs	r3, #4
 8019342:	6023      	str	r3, [r4, #0]
 8019344:	2300      	movs	r3, #0
 8019346:	6123      	str	r3, [r4, #16]
 8019348:	e010      	b.n	801936c <Display::Detect(display::Type)+0x54>
 801934a:	2020      	movs	r0, #32
 801934c:	f003 fac4 	bl	801c8d8 <operator new(unsigned int)>
 8019350:	2100      	movs	r1, #0
 8019352:	4605      	mov	r5, r0
 8019354:	f000 f8bc 	bl	80194d0 <Ssd1306::Ssd1306(TOledPanel)>
 8019358:	61a5      	str	r5, [r4, #24]
 801935a:	e7e3      	b.n	8019324 <Display::Detect(display::Type)+0xc>
 801935c:	6001      	str	r1, [r0, #0]
 801935e:	e7e1      	b.n	8019324 <Display::Detect(display::Type)+0xc>
 8019360:	6803      	ldr	r3, [r0, #0]
 8019362:	68db      	ldr	r3, [r3, #12]
 8019364:	4798      	blx	r3
 8019366:	69a3      	ldr	r3, [r4, #24]
 8019368:	2b00      	cmp	r3, #0
 801936a:	d0eb      	beq.n	8019344 <Display::Detect(display::Type)+0x2c>
 801936c:	bd38      	pop	{r3, r4, r5, pc}
	...

08019370 <Display::Display()>:
 8019370:	2304      	movs	r3, #4
 8019372:	b510      	push	{r4, lr}
 8019374:	6003      	str	r3, [r0, #0]
 8019376:	4b0e      	ldr	r3, [pc, #56]	@ (80193b0 <Display::Display()+0x40>)
 8019378:	4a0e      	ldr	r2, [pc, #56]	@ (80193b4 <Display::Display()+0x44>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	6043      	str	r3, [r0, #4]
 801937e:	2321      	movs	r3, #33	@ 0x21
 8019380:	7203      	strb	r3, [r0, #8]
 8019382:	4b0d      	ldr	r3, [pc, #52]	@ (80193b8 <Display::Display()+0x48>)
 8019384:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8019388:	237f      	movs	r3, #127	@ 0x7f
 801938a:	8283      	strh	r3, [r0, #20]
 801938c:	2300      	movs	r3, #0
 801938e:	4604      	mov	r4, r0
 8019390:	7583      	strb	r3, [r0, #22]
 8019392:	6183      	str	r3, [r0, #24]
 8019394:	4b09      	ldr	r3, [pc, #36]	@ (80193bc <Display::Display()+0x4c>)
 8019396:	2102      	movs	r1, #2
 8019398:	6018      	str	r0, [r3, #0]
 801939a:	f7ff ffbd 	bl	8019318 <Display::Detect(display::Type)>
 801939e:	69a3      	ldr	r3, [r4, #24]
 80193a0:	b10b      	cbz	r3, 80193a6 <Display::Display()+0x36>
 80193a2:	f7ff ffa1 	bl	80192e8 <display::timeout::gpio_init()>
 80193a6:	69a0      	ldr	r0, [r4, #24]
 80193a8:	f7ff ff94 	bl	80192d4 <Display::PrintInfo() [clone .isra.0]>
 80193ac:	4620      	mov	r0, r4
 80193ae:	bd10      	pop	{r4, pc}
 80193b0:	2001bcd0 	ldrdcs	fp, [r1], -r0
 80193b4:	00061a80 	andeq	r1, r6, r0, lsl #21
 80193b8:	000493e0 	andeq	r9, r4, r0, ror #7
 80193bc:	2000e2f4 	strdcs	lr, [r0], -r4

080193c0 <Ssd1306::~Ssd1306()>:
 80193c0:	4770      	bx	lr

080193c2 <Ssd1306::SetCursor(unsigned long)>:
 80193c2:	4770      	bx	lr

080193c4 <Ssd1306::PrintInfo()>:
 80193c4:	b410      	push	{r4}
 80193c6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80193ca:	7e44      	ldrb	r4, [r0, #25]
 80193cc:	4904      	ldr	r1, [pc, #16]	@ (80193e0 <Ssd1306::PrintInfo()+0x1c>)
 80193ce:	4805      	ldr	r0, [pc, #20]	@ (80193e4 <Ssd1306::PrintInfo()+0x20>)
 80193d0:	2c00      	cmp	r4, #0
 80193d2:	bf18      	it	ne
 80193d4:	4601      	movne	r1, r0
 80193d6:	4804      	ldr	r0, [pc, #16]	@ (80193e8 <Ssd1306::PrintInfo()+0x24>)
 80193d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193dc:	f003 b826 	b.w	801c42c <printf>
 80193e0:	0801dd59 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, fp, ip, lr, pc}
 80193e4:	0801dd52 	stmdaeq	r1, {r1, r4, r6, r8, sl, fp, ip, lr, pc}
 80193e8:	0801dd61 	stmdaeq	r1, {r0, r5, r6, r8, sl, fp, ip, lr, pc}

080193ec <Ssd1306::~Ssd1306()>:
 80193ec:	b510      	push	{r4, lr}
 80193ee:	2120      	movs	r1, #32
 80193f0:	4604      	mov	r4, r0
 80193f2:	f003 fa6f 	bl	801c8d4 <operator delete(void*, unsigned int)>
 80193f6:	4620      	mov	r0, r4
 80193f8:	bd10      	pop	{r4, pc}

080193fa <HAL_I2C::Setup()>:
 80193fa:	b510      	push	{r4, lr}
 80193fc:	4604      	mov	r4, r0
 80193fe:	7800      	ldrb	r0, [r0, #0]
 8019400:	f002 fa08 	bl	801b814 <gd32_i2c_set_address>
 8019404:	6860      	ldr	r0, [r4, #4]
 8019406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801940a:	f002 b9fb 	b.w	801b804 <gd32_i2c_set_baudrate>
	...

08019410 <Ssd1306::PutChar(int)>:
 8019410:	b510      	push	{r4, lr}
 8019412:	f1a1 0420 	sub.w	r4, r1, #32
 8019416:	2c5f      	cmp	r4, #95	@ 0x5f
 8019418:	f100 0010 	add.w	r0, r0, #16
 801941c:	bf88      	it	hi
 801941e:	2400      	movhi	r4, #0
 8019420:	f7ff ffeb 	bl	80193fa <HAL_I2C::Setup()>
 8019424:	4804      	ldr	r0, [pc, #16]	@ (8019438 <Ssd1306::PutChar(int)+0x28>)
 8019426:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801942a:	4420      	add	r0, r4
 801942c:	2107      	movs	r1, #7
 801942e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019432:	f002 b9f5 	b.w	801b820 <gd32_i2c_write>
 8019436:	bf00      	nop
 8019438:	0802163c 	stmdaeq	r2, {r2, r3, r4, r5, r9, sl, ip}

0801943c <Ssd1306::PutString(char const*)>:
 801943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801943e:	4604      	mov	r4, r0
 8019440:	460e      	mov	r6, r1
 8019442:	460f      	mov	r7, r1
 8019444:	463d      	mov	r5, r7
 8019446:	f817 1b01 	ldrb.w	r1, [r7], #1
 801944a:	b939      	cbnz	r1, 801945c <Ssd1306::PutString(char const*)+0x20>
 801944c:	7b23      	ldrb	r3, [r4, #12]
 801944e:	b123      	cbz	r3, 801945a <Ssd1306::PutString(char const*)+0x1e>
 8019450:	7321      	strb	r1, [r4, #12]
 8019452:	1bad      	subs	r5, r5, r6
 8019454:	6863      	ldr	r3, [r4, #4]
 8019456:	42ab      	cmp	r3, r5
 8019458:	d804      	bhi.n	8019464 <Ssd1306::PutString(char const*)+0x28>
 801945a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801945c:	4620      	mov	r0, r4
 801945e:	f7ff ffd7 	bl	8019410 <Ssd1306::PutChar(int)>
 8019462:	e7ef      	b.n	8019444 <Ssd1306::PutString(char const*)+0x8>
 8019464:	2120      	movs	r1, #32
 8019466:	4620      	mov	r0, r4
 8019468:	f7ff ffd2 	bl	8019410 <Ssd1306::PutChar(int)>
 801946c:	3501      	adds	r5, #1
 801946e:	e7f1      	b.n	8019454 <Ssd1306::PutString(char const*)+0x18>

08019470 <Ssd1306::Text(char const*, unsigned long)>:
 8019470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019472:	6843      	ldr	r3, [r0, #4]
 8019474:	429a      	cmp	r2, r3
 8019476:	bf28      	it	cs
 8019478:	461a      	movcs	r2, r3
 801947a:	4604      	mov	r4, r0
 801947c:	4615      	mov	r5, r2
 801947e:	460e      	mov	r6, r1
 8019480:	188f      	adds	r7, r1, r2
 8019482:	42be      	cmp	r6, r7
 8019484:	d107      	bne.n	8019496 <Ssd1306::Text(char const*, unsigned long)+0x26>
 8019486:	7b23      	ldrb	r3, [r4, #12]
 8019488:	b123      	cbz	r3, 8019494 <Ssd1306::Text(char const*, unsigned long)+0x24>
 801948a:	2300      	movs	r3, #0
 801948c:	7323      	strb	r3, [r4, #12]
 801948e:	6863      	ldr	r3, [r4, #4]
 8019490:	42ab      	cmp	r3, r5
 8019492:	d806      	bhi.n	80194a2 <Ssd1306::Text(char const*, unsigned long)+0x32>
 8019494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019496:	f816 1b01 	ldrb.w	r1, [r6], #1
 801949a:	4620      	mov	r0, r4
 801949c:	f7ff ffb8 	bl	8019410 <Ssd1306::PutChar(int)>
 80194a0:	e7ef      	b.n	8019482 <Ssd1306::Text(char const*, unsigned long)+0x12>
 80194a2:	2120      	movs	r1, #32
 80194a4:	4620      	mov	r0, r4
 80194a6:	f7ff ffb3 	bl	8019410 <Ssd1306::PutChar(int)>
 80194aa:	3501      	adds	r5, #1
 80194ac:	e7ef      	b.n	801948e <Ssd1306::Text(char const*, unsigned long)+0x1e>

080194ae <Ssd1306::InitMembers()>:
 80194ae:	2315      	movs	r3, #21
 80194b0:	6043      	str	r3, [r0, #4]
 80194b2:	7e03      	ldrb	r3, [r0, #24]
 80194b4:	b12b      	cbz	r3, 80194c2 <Ssd1306::InitMembers()+0x14>
 80194b6:	3b01      	subs	r3, #1
 80194b8:	2b01      	cmp	r3, #1
 80194ba:	d807      	bhi.n	80194cc <Ssd1306::InitMembers()+0x1e>
 80194bc:	2304      	movs	r3, #4
 80194be:	2204      	movs	r2, #4
 80194c0:	e001      	b.n	80194c6 <Ssd1306::InitMembers()+0x18>
 80194c2:	2308      	movs	r3, #8
 80194c4:	461a      	mov	r2, r3
 80194c6:	6083      	str	r3, [r0, #8]
 80194c8:	61c2      	str	r2, [r0, #28]
 80194ca:	4770      	bx	lr
 80194cc:	2308      	movs	r3, #8
 80194ce:	e7f6      	b.n	80194be <Ssd1306::InitMembers()+0x10>

080194d0 <Ssd1306::Ssd1306(TOledPanel)>:
 80194d0:	b510      	push	{r4, lr}
 80194d2:	4c07      	ldr	r4, [pc, #28]	@ (80194f0 <Ssd1306::Ssd1306(TOledPanel)+0x20>)
 80194d4:	6004      	str	r4, [r0, #0]
 80194d6:	2200      	movs	r2, #0
 80194d8:	243c      	movs	r4, #60	@ 0x3c
 80194da:	7302      	strb	r2, [r0, #12]
 80194dc:	7404      	strb	r4, [r0, #16]
 80194de:	7642      	strb	r2, [r0, #25]
 80194e0:	4c04      	ldr	r4, [pc, #16]	@ (80194f4 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 80194e2:	4a05      	ldr	r2, [pc, #20]	@ (80194f8 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 80194e4:	6144      	str	r4, [r0, #20]
 80194e6:	7601      	strb	r1, [r0, #24]
 80194e8:	6010      	str	r0, [r2, #0]
 80194ea:	f7ff ffe0 	bl	80194ae <Ssd1306::InitMembers()>
 80194ee:	bd10      	pop	{r4, pc}
 80194f0:	080215d4 	stmdaeq	r2, {r2, r4, r6, r7, r8, sl, ip}
 80194f4:	00061a80 	andeq	r1, r6, r0, lsl #21
 80194f8:	2000e2f8 	strdcs	lr, [r0], -r8

080194fc <Ssd1306::SendCommand(unsigned char)>:
 80194fc:	b507      	push	{r0, r1, r2, lr}
 80194fe:	2300      	movs	r3, #0
 8019500:	3010      	adds	r0, #16
 8019502:	f88d 3004 	strb.w	r3, [sp, #4]
 8019506:	f88d 1005 	strb.w	r1, [sp, #5]
 801950a:	f7ff ff76 	bl	80193fa <HAL_I2C::Setup()>
 801950e:	2102      	movs	r1, #2
 8019510:	a801      	add	r0, sp, #4
 8019512:	f002 f985 	bl	801b820 <gd32_i2c_write>
 8019516:	b003      	add	sp, #12
 8019518:	f85d fb04 	ldr.w	pc, [sp], #4

0801951c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>:
 801951c:	2914      	cmp	r1, #20
 801951e:	b570      	push	{r4, r5, r6, lr}
 8019520:	4605      	mov	r5, r0
 8019522:	4616      	mov	r6, r2
 8019524:	d81d      	bhi.n	8019562 <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x46>
 8019526:	6883      	ldr	r3, [r0, #8]
 8019528:	4293      	cmp	r3, r2
 801952a:	d91a      	bls.n	8019562 <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x46>
 801952c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019530:	7e43      	ldrb	r3, [r0, #25]
 8019532:	004c      	lsls	r4, r1, #1
 8019534:	b2e4      	uxtb	r4, r4
 8019536:	b10b      	cbz	r3, 801953c <Ssd1306::SetCursorPos(unsigned long, unsigned long)+0x20>
 8019538:	3404      	adds	r4, #4
 801953a:	b2e4      	uxtb	r4, r4
 801953c:	f004 010e 	and.w	r1, r4, #14
 8019540:	4628      	mov	r0, r5
 8019542:	f7ff ffdb 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019546:	0921      	lsrs	r1, r4, #4
 8019548:	4628      	mov	r0, r5
 801954a:	f041 0110 	orr.w	r1, r1, #16
 801954e:	f7ff ffd5 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019552:	f066 014f 	orn	r1, r6, #79	@ 0x4f
 8019556:	4628      	mov	r0, r5
 8019558:	b2c9      	uxtb	r1, r1
 801955a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801955e:	f7ff bfcd 	b.w	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019562:	bd70      	pop	{r4, r5, r6, pc}

08019564 <Ssd1306::TextLine(unsigned long, char const*, unsigned long)>:
 8019564:	b570      	push	{r4, r5, r6, lr}
 8019566:	461e      	mov	r6, r3
 8019568:	6883      	ldr	r3, [r0, #8]
 801956a:	428b      	cmp	r3, r1
 801956c:	4604      	mov	r4, r0
 801956e:	4615      	mov	r5, r2
 8019570:	d30b      	bcc.n	801958a <Ssd1306::TextLine(unsigned long, char const*, unsigned long)+0x26>
 8019572:	3901      	subs	r1, #1
 8019574:	b2ca      	uxtb	r2, r1
 8019576:	2100      	movs	r1, #0
 8019578:	f7ff ffd0 	bl	801951c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 801957c:	4632      	mov	r2, r6
 801957e:	4629      	mov	r1, r5
 8019580:	4620      	mov	r0, r4
 8019582:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019586:	f7ff bf73 	b.w	8019470 <Ssd1306::Text(char const*, unsigned long)>
 801958a:	bd70      	pop	{r4, r5, r6, pc}

0801958c <Ssd1306::ClearLine(unsigned long)>:
 801958c:	b538      	push	{r3, r4, r5, lr}
 801958e:	6883      	ldr	r3, [r0, #8]
 8019590:	428b      	cmp	r3, r1
 8019592:	4605      	mov	r5, r0
 8019594:	d314      	bcc.n	80195c0 <Ssd1306::ClearLine(unsigned long)+0x34>
 8019596:	3901      	subs	r1, #1
 8019598:	b2cc      	uxtb	r4, r1
 801959a:	4622      	mov	r2, r4
 801959c:	2100      	movs	r1, #0
 801959e:	f7ff ffbd 	bl	801951c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 80195a2:	f105 0010 	add.w	r0, r5, #16
 80195a6:	f7ff ff28 	bl	80193fa <HAL_I2C::Setup()>
 80195aa:	2181      	movs	r1, #129	@ 0x81
 80195ac:	4805      	ldr	r0, [pc, #20]	@ (80195c4 <Ssd1306::ClearLine(unsigned long)+0x38>)
 80195ae:	f002 f937 	bl	801b820 <gd32_i2c_write>
 80195b2:	4622      	mov	r2, r4
 80195b4:	4628      	mov	r0, r5
 80195b6:	2100      	movs	r1, #0
 80195b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80195bc:	f7ff bfae 	b.w	801951c <Ssd1306::SetCursorPos(unsigned long, unsigned long)>
 80195c0:	bd38      	pop	{r3, r4, r5, pc}
 80195c2:	bf00      	nop
 80195c4:	2000e2fc 	strdcs	lr, [r0], -ip

080195c8 <Ssd1306::SetSleep(bool)>:
 80195c8:	b111      	cbz	r1, 80195d0 <Ssd1306::SetSleep(bool)+0x8>
 80195ca:	21ae      	movs	r1, #174	@ 0xae
 80195cc:	f7ff bf96 	b.w	80194fc <Ssd1306::SendCommand(unsigned char)>
 80195d0:	21af      	movs	r1, #175	@ 0xaf
 80195d2:	e7fb      	b.n	80195cc <Ssd1306::SetSleep(bool)+0x4>

080195d4 <Ssd1306::SetContrast(unsigned char)>:
 80195d4:	b538      	push	{r3, r4, r5, lr}
 80195d6:	4604      	mov	r4, r0
 80195d8:	460d      	mov	r5, r1
 80195da:	2181      	movs	r1, #129	@ 0x81
 80195dc:	f7ff ff8e 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80195e0:	4629      	mov	r1, r5
 80195e2:	4620      	mov	r0, r4
 80195e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80195e8:	f7ff bf88 	b.w	80194fc <Ssd1306::SendCommand(unsigned char)>

080195ec <Ssd1306::SetFlipVertically(bool)>:
 80195ec:	b510      	push	{r4, lr}
 80195ee:	4604      	mov	r4, r0
 80195f0:	b141      	cbz	r1, 8019604 <Ssd1306::SetFlipVertically(bool)+0x18>
 80195f2:	21a0      	movs	r1, #160	@ 0xa0
 80195f4:	f7ff ff82 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80195f8:	21c0      	movs	r1, #192	@ 0xc0
 80195fa:	4620      	mov	r0, r4
 80195fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019600:	f7ff bf7c 	b.w	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019604:	21a1      	movs	r1, #161	@ 0xa1
 8019606:	f7ff ff79 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 801960a:	21c8      	movs	r1, #200	@ 0xc8
 801960c:	e7f5      	b.n	80195fa <Ssd1306::SetFlipVertically(bool)+0xe>
	...

08019610 <Ssd1306::CheckSH1106()>:
 8019610:	b530      	push	{r4, r5, lr}
 8019612:	2100      	movs	r1, #0
 8019614:	b087      	sub	sp, #28
 8019616:	4604      	mov	r4, r0
 8019618:	f7ff ff70 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 801961c:	2190      	movs	r1, #144	@ 0x90
 801961e:	4620      	mov	r0, r4
 8019620:	f7ff ff6c 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019624:	21b0      	movs	r1, #176	@ 0xb0
 8019626:	4620      	mov	r0, r4
 8019628:	f7ff ff68 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 801962c:	4b21      	ldr	r3, [pc, #132]	@ (80196b4 <Ssd1306::CheckSH1106()+0xa4>)
 801962e:	f104 0510 	add.w	r5, r4, #16
 8019632:	6818      	ldr	r0, [r3, #0]
 8019634:	9002      	str	r0, [sp, #8]
 8019636:	791b      	ldrb	r3, [r3, #4]
 8019638:	f88d 300c 	strb.w	r3, [sp, #12]
 801963c:	4628      	mov	r0, r5
 801963e:	f7ff fedc 	bl	80193fa <HAL_I2C::Setup()>
 8019642:	2105      	movs	r1, #5
 8019644:	a802      	add	r0, sp, #8
 8019646:	f002 f8eb 	bl	801b820 <gd32_i2c_write>
 801964a:	2100      	movs	r1, #0
 801964c:	4620      	mov	r0, r4
 801964e:	f7ff ff55 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019652:	2190      	movs	r1, #144	@ 0x90
 8019654:	4620      	mov	r0, r4
 8019656:	f7ff ff51 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 801965a:	21b0      	movs	r1, #176	@ 0xb0
 801965c:	4620      	mov	r0, r4
 801965e:	f7ff ff4d 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019662:	2300      	movs	r3, #0
 8019664:	4628      	mov	r0, r5
 8019666:	9304      	str	r3, [sp, #16]
 8019668:	f88d 3014 	strb.w	r3, [sp, #20]
 801966c:	f7ff fec5 	bl	80193fa <HAL_I2C::Setup()>
 8019670:	2340      	movs	r3, #64	@ 0x40
 8019672:	2101      	movs	r1, #1
 8019674:	a801      	add	r0, sp, #4
 8019676:	f88d 3004 	strb.w	r3, [sp, #4]
 801967a:	f002 f8d1 	bl	801b820 <gd32_i2c_write>
 801967e:	4628      	mov	r0, r5
 8019680:	f7ff febb 	bl	80193fa <HAL_I2C::Setup()>
 8019684:	2105      	movs	r1, #5
 8019686:	a804      	add	r0, sp, #16
 8019688:	f002 f930 	bl	801b8ec <gd32_i2c_read>
 801968c:	a902      	add	r1, sp, #8
 801968e:	aa04      	add	r2, sp, #16
 8019690:	2003      	movs	r0, #3
 8019692:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019696:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801969a:	42ab      	cmp	r3, r5
 801969c:	d006      	beq.n	80196ac <Ssd1306::CheckSH1106()+0x9c>
 801969e:	1b5b      	subs	r3, r3, r5
 80196a0:	fab3 f383 	clz	r3, r3
 80196a4:	095b      	lsrs	r3, r3, #5
 80196a6:	7663      	strb	r3, [r4, #25]
 80196a8:	b007      	add	sp, #28
 80196aa:	bd30      	pop	{r4, r5, pc}
 80196ac:	3801      	subs	r0, #1
 80196ae:	d2f0      	bcs.n	8019692 <Ssd1306::CheckSH1106()+0x82>
 80196b0:	2300      	movs	r3, #0
 80196b2:	e7f5      	b.n	80196a0 <Ssd1306::CheckSH1106()+0x90>
 80196b4:	0801dd6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl, fp, ip, lr, pc}

080196b8 <Ssd1306::Cls()>:
 80196b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196bc:	7e46      	ldrb	r6, [r0, #25]
 80196be:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 8019720 <Ssd1306::Cls()+0x68>
 80196c2:	00b6      	lsls	r6, r6, #2
 80196c4:	b2f7      	uxtb	r7, r6
 80196c6:	4604      	mov	r4, r0
 80196c8:	2500      	movs	r5, #0
 80196ca:	f047 0810 	orr.w	r8, r7, #16
 80196ce:	69e3      	ldr	r3, [r4, #28]
 80196d0:	42ab      	cmp	r3, r5
 80196d2:	4639      	mov	r1, r7
 80196d4:	4620      	mov	r0, r4
 80196d6:	d80b      	bhi.n	80196f0 <Ssd1306::Cls()+0x38>
 80196d8:	f7ff ff10 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80196dc:	4641      	mov	r1, r8
 80196de:	4620      	mov	r0, r4
 80196e0:	f7ff ff0c 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80196e4:	4620      	mov	r0, r4
 80196e6:	21b0      	movs	r1, #176	@ 0xb0
 80196e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196ec:	f7ff bf06 	b.w	80194fc <Ssd1306::SendCommand(unsigned char)>
 80196f0:	f7ff ff04 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80196f4:	4641      	mov	r1, r8
 80196f6:	4620      	mov	r0, r4
 80196f8:	f7ff ff00 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80196fc:	f065 014f 	orn	r1, r5, #79	@ 0x4f
 8019700:	b2c9      	uxtb	r1, r1
 8019702:	4620      	mov	r0, r4
 8019704:	f7ff fefa 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 8019708:	f104 0010 	add.w	r0, r4, #16
 801970c:	f7ff fe75 	bl	80193fa <HAL_I2C::Setup()>
 8019710:	f106 0181 	add.w	r1, r6, #129	@ 0x81
 8019714:	4648      	mov	r0, r9
 8019716:	f002 f883 	bl	801b820 <gd32_i2c_write>
 801971a:	3501      	adds	r5, #1
 801971c:	e7d7      	b.n	80196ce <Ssd1306::Cls()+0x16>
 801971e:	bf00      	nop
 8019720:	2000e2fc 	strdcs	lr, [r0], -ip

08019724 <Ssd1306::Start()>:
 8019724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019726:	7c04      	ldrb	r4, [r0, #16]
 8019728:	6946      	ldr	r6, [r0, #20]
 801972a:	4605      	mov	r5, r0
 801972c:	4620      	mov	r0, r4
 801972e:	f002 f871 	bl	801b814 <gd32_i2c_set_address>
 8019732:	4630      	mov	r0, r6
 8019734:	f002 f866 	bl	801b804 <gd32_i2c_set_baudrate>
 8019738:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801973c:	2b07      	cmp	r3, #7
 801973e:	d902      	bls.n	8019746 <Ssd1306::Start()+0x22>
 8019740:	3c50      	subs	r4, #80	@ 0x50
 8019742:	2c0f      	cmp	r4, #15
 8019744:	d80f      	bhi.n	8019766 <Ssd1306::Start()+0x42>
 8019746:	2101      	movs	r1, #1
 8019748:	f10d 0007 	add.w	r0, sp, #7
 801974c:	f002 f8ce 	bl	801b8ec <gd32_i2c_read>
 8019750:	fab0 f480 	clz	r4, r0
 8019754:	0964      	lsrs	r4, r4, #5
 8019756:	b34c      	cbz	r4, 80197ac <Ssd1306::Start()+0x88>
 8019758:	7e2e      	ldrb	r6, [r5, #24]
 801975a:	b14e      	cbz	r6, 8019770 <Ssd1306::Start()+0x4c>
 801975c:	3e01      	subs	r6, #1
 801975e:	2e01      	cmp	r6, #1
 8019760:	d927      	bls.n	80197b2 <Ssd1306::Start()+0x8e>
 8019762:	2400      	movs	r4, #0
 8019764:	e022      	b.n	80197ac <Ssd1306::Start()+0x88>
 8019766:	2100      	movs	r1, #0
 8019768:	4608      	mov	r0, r1
 801976a:	f002 f859 	bl	801b820 <gd32_i2c_write>
 801976e:	e7ef      	b.n	8019750 <Ssd1306::Start()+0x2c>
 8019770:	4f15      	ldr	r7, [pc, #84]	@ (80197c8 <Ssd1306::Start()+0xa4>)
 8019772:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019776:	4628      	mov	r0, r5
 8019778:	3601      	adds	r6, #1
 801977a:	f7ff febf 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 801977e:	2e18      	cmp	r6, #24
 8019780:	d1f7      	bne.n	8019772 <Ssd1306::Start()+0x4e>
 8019782:	4a12      	ldr	r2, [pc, #72]	@ (80197cc <Ssd1306::Start()+0xa8>)
 8019784:	2300      	movs	r3, #0
 8019786:	4611      	mov	r1, r2
 8019788:	4618      	mov	r0, r3
 801978a:	3301      	adds	r3, #1
 801978c:	2b86      	cmp	r3, #134	@ 0x86
 801978e:	f802 0b01 	strb.w	r0, [r2], #1
 8019792:	d1fa      	bne.n	801978a <Ssd1306::Start()+0x66>
 8019794:	2340      	movs	r3, #64	@ 0x40
 8019796:	4628      	mov	r0, r5
 8019798:	700b      	strb	r3, [r1, #0]
 801979a:	f7ff ff39 	bl	8019610 <Ssd1306::CheckSH1106()>
 801979e:	4628      	mov	r0, r5
 80197a0:	f7ff ff8a 	bl	80196b8 <Ssd1306::Cls()>
 80197a4:	21af      	movs	r1, #175	@ 0xaf
 80197a6:	4628      	mov	r0, r5
 80197a8:	f7ff fea8 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80197ac:	4620      	mov	r0, r4
 80197ae:	b003      	add	sp, #12
 80197b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197b2:	4f07      	ldr	r7, [pc, #28]	@ (80197d0 <Ssd1306::Start()+0xac>)
 80197b4:	2600      	movs	r6, #0
 80197b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80197ba:	4628      	mov	r0, r5
 80197bc:	3601      	adds	r6, #1
 80197be:	f7ff fe9d 	bl	80194fc <Ssd1306::SendCommand(unsigned char)>
 80197c2:	2e18      	cmp	r6, #24
 80197c4:	d1f7      	bne.n	80197b6 <Ssd1306::Start()+0x92>
 80197c6:	e7dc      	b.n	8019782 <Ssd1306::Start()+0x5e>
 80197c8:	08021624 	stmdaeq	r2, {r2, r5, r9, sl, ip}
 80197cc:	2000e2fc 	strdcs	lr, [r0], -ip
 80197d0:	0802160c 	stmdaeq	r2, {r2, r3, r9, sl, ip}

080197d4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80197d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197d8:	4d15      	ldr	r5, [pc, #84]	@ (8019830 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80197da:	461e      	mov	r6, r3
 80197dc:	4b15      	ldr	r3, [pc, #84]	@ (8019834 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80197de:	b086      	sub	sp, #24
 80197e0:	6018      	str	r0, [r3, #0]
 80197e2:	4604      	mov	r4, r0
 80197e4:	4617      	mov	r7, r2
 80197e6:	f105 0803 	add.w	r8, r5, #3
 80197ea:	2203      	movs	r2, #3
 80197ec:	4628      	mov	r0, r5
 80197ee:	f002 fb22 	bl	801be36 <memmove>
 80197f2:	4639      	mov	r1, r7
 80197f4:	220b      	movs	r2, #11
 80197f6:	4640      	mov	r0, r8
 80197f8:	f002 fb1d 	bl	801be36 <memmove>
 80197fc:	f105 030e 	add.w	r3, r5, #14
 8019800:	4631      	mov	r1, r6
 8019802:	2208      	movs	r2, #8
 8019804:	4618      	mov	r0, r3
 8019806:	f002 fb16 	bl	801be36 <memmove>
 801980a:	2308      	movs	r3, #8
 801980c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8019810:	230b      	movs	r3, #11
 8019812:	9302      	str	r3, [sp, #8]
 8019814:	4b08      	ldr	r3, [pc, #32]	@ (8019838 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8019816:	9005      	str	r0, [sp, #20]
 8019818:	e9cd 5300 	strd	r5, r3, [sp]
 801981c:	4a07      	ldr	r2, [pc, #28]	@ (801983c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 801981e:	4808      	ldr	r0, [pc, #32]	@ (8019840 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8019820:	2303      	movs	r3, #3
 8019822:	213f      	movs	r1, #63	@ 0x3f
 8019824:	f002 fe2a 	bl	801c47c <snprintf>
 8019828:	4620      	mov	r0, r4
 801982a:	b006      	add	sp, #24
 801982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019830:	2000e3c8 	andcs	lr, r0, r8, asr #7
 8019834:	2000e384 	andcs	lr, r0, r4, lsl #7
 8019838:	0801d33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, ip, lr, pc}
 801983c:	0801dd73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, sl, fp, ip, lr, pc}
 8019840:	2000e388 	andcs	lr, r0, r8, lsl #7

08019844 <Hardware::ledblink()>:
 8019844:	4b02      	ldr	r3, [pc, #8]	@ (8019850 <Hardware::ledblink()+0xc>)
 8019846:	2210      	movs	r2, #16
 8019848:	f8c3 2c2c 	str.w	r2, [r3, #3116]	@ 0xc2c
 801984c:	4770      	bx	lr
 801984e:	bf00      	nop
 8019850:	40020000 	andmi	r0, r2, r0

08019854 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>:
 8019854:	2900      	cmp	r1, #0
 8019856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019858:	db10      	blt.n	801987c <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 801985a:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 801985e:	2300      	movs	r3, #0
 8019860:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8019864:	42ab      	cmp	r3, r5
 8019866:	d009      	beq.n	801987c <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8019868:	011c      	lsls	r4, r3, #4
 801986a:	5937      	ldr	r7, [r6, r4]
 801986c:	42b9      	cmp	r1, r7
 801986e:	d106      	bne.n	801987e <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x2a>
 8019870:	4b04      	ldr	r3, [pc, #16]	@ (8019884 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x30>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4420      	add	r0, r4
 8019876:	4413      	add	r3, r2
 8019878:	e9c0 3208 	strd	r3, r2, [r0, #32]
 801987c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801987e:	3301      	adds	r3, #1
 8019880:	e7f0      	b.n	8019864 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x10>
 8019882:	bf00      	nop
 8019884:	2001bcd0 	ldrdcs	fp, [r1], -r0

08019888 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>:
 8019888:	680a      	ldr	r2, [r1, #0]
 801988a:	2a00      	cmp	r2, #0
 801988c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801988e:	4606      	mov	r6, r0
 8019890:	468e      	mov	lr, r1
 8019892:	db17      	blt.n	80198c4 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3c>
 8019894:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8019898:	2400      	movs	r4, #0
 801989a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801989e:	429c      	cmp	r4, r3
 80198a0:	d010      	beq.n	80198c4 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3c>
 80198a2:	0125      	lsls	r5, r4, #4
 80198a4:	5948      	ldr	r0, [r1, r5]
 80198a6:	4282      	cmp	r2, r0
 80198a8:	d116      	bne.n	80198d8 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x50>
 80198aa:	4435      	add	r5, r6
 80198ac:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 80198b0:	4564      	cmp	r4, ip
 80198b2:	f105 0510 	add.w	r5, r5, #16
 80198b6:	d306      	bcc.n	80198c6 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x3e>
 80198b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80198bc:	f8c6 c0a0 	str.w	ip, [r6, #160]	@ 0xa0
 80198c0:	f8ce 3000 	str.w	r3, [lr]
 80198c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198c6:	f105 0320 	add.w	r3, r5, #32
 80198ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80198cc:	f105 0710 	add.w	r7, r5, #16
 80198d0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80198d4:	3401      	adds	r4, #1
 80198d6:	e7eb      	b.n	80198b0 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x28>
 80198d8:	3401      	adds	r4, #1
 80198da:	e7e0      	b.n	801989e <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]+0x16>

080198dc <Hardware::SetFrequency(unsigned long)>:
 80198dc:	460a      	mov	r2, r1
 80198de:	69c1      	ldr	r1, [r0, #28]
 80198e0:	2900      	cmp	r1, #0
 80198e2:	b538      	push	{r3, r4, r5, lr}
 80198e4:	4604      	mov	r4, r0
 80198e6:	da21      	bge.n	801992c <Hardware::SetFrequency(unsigned long)+0x50>
 80198e8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 80198ec:	2b07      	cmp	r3, #7
 80198ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80198f2:	fbb1 f1f2 	udiv	r1, r1, r2
 80198f6:	d906      	bls.n	8019906 <Hardware::SetFrequency(unsigned long)+0x2a>
 80198f8:	4825      	ldr	r0, [pc, #148]	@ (8019990 <Hardware::SetFrequency(unsigned long)+0xb4>)
 80198fa:	f000 fa9f 	bl	8019e3c <console_error>
 80198fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019902:	61e2      	str	r2, [r4, #28]
 8019904:	bd38      	pop	{r3, r4, r5, pc}
 8019906:	4a23      	ldr	r2, [pc, #140]	@ (8019994 <Hardware::SetFrequency(unsigned long)+0xb8>)
 8019908:	6810      	ldr	r0, [r2, #0]
 801990a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 801990e:	1c55      	adds	r5, r2, #1
 8019910:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
 8019914:	4408      	add	r0, r1
 8019916:	1c5d      	adds	r5, r3, #1
 8019918:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 801991c:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
 8019920:	e9c3 0108 	strd	r0, r1, [r3, #32]
 8019924:	491c      	ldr	r1, [pc, #112]	@ (8019998 <Hardware::SetFrequency(unsigned long)+0xbc>)
 8019926:	629a      	str	r2, [r3, #40]	@ 0x28
 8019928:	62d9      	str	r1, [r3, #44]	@ 0x2c
 801992a:	e7ea      	b.n	8019902 <Hardware::SetFrequency(unsigned long)+0x26>
 801992c:	2a08      	cmp	r2, #8
 801992e:	d808      	bhi.n	8019942 <Hardware::SetFrequency(unsigned long)+0x66>
 8019930:	2a08      	cmp	r2, #8
 8019932:	d808      	bhi.n	8019946 <Hardware::SetFrequency(unsigned long)+0x6a>
 8019934:	e8df f002 	tbb	[pc, r2]
 8019938:	1c07150c 	cfstr32ne	mvfx1, [r7], {12}
 801993c:	07071f07 	streq	r1, [r7, -r7, lsl #30]
 8019940:	2aff0021 	bcs	7fd99cc <__stack_size+0x7fd19cc>
 8019944:	d01b      	beq.n	801997e <Hardware::SetFrequency(unsigned long)+0xa2>
 8019946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801994a:	fbb3 f2f2 	udiv	r2, r3, r2
 801994e:	e00a      	b.n	8019966 <Hardware::SetFrequency(unsigned long)+0x8a>
 8019950:	f100 011c 	add.w	r1, r0, #28
 8019954:	f7ff ff98 	bl	8019888 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>
 8019958:	4b10      	ldr	r3, [pc, #64]	@ (801999c <Hardware::SetFrequency(unsigned long)+0xc0>)
 801995a:	2210      	movs	r2, #16
 801995c:	f8c3 2c28 	str.w	r2, [r3, #3112]	@ 0xc28
 8019960:	e7d0      	b.n	8019904 <Hardware::SetFrequency(unsigned long)+0x28>
 8019962:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019966:	4620      	mov	r0, r4
 8019968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801996c:	f7ff bf72 	b.w	8019854 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>
 8019970:	f240 124d 	movw	r2, #333	@ 0x14d
 8019974:	e7f7      	b.n	8019966 <Hardware::SetFrequency(unsigned long)+0x8a>
 8019976:	22c8      	movs	r2, #200	@ 0xc8
 8019978:	e7f5      	b.n	8019966 <Hardware::SetFrequency(unsigned long)+0x8a>
 801997a:	227d      	movs	r2, #125	@ 0x7d
 801997c:	e7f3      	b.n	8019966 <Hardware::SetFrequency(unsigned long)+0x8a>
 801997e:	f100 011c 	add.w	r1, r0, #28
 8019982:	f7ff ff81 	bl	8019888 <Hardware::SoftwareTimerDelete(long&) [clone .isra.0]>
 8019986:	4b05      	ldr	r3, [pc, #20]	@ (801999c <Hardware::SetFrequency(unsigned long)+0xc0>)
 8019988:	2210      	movs	r2, #16
 801998a:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18
 801998e:	e7b9      	b.n	8019904 <Hardware::SetFrequency(unsigned long)+0x28>
 8019990:	0801db74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 8019994:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8019998:	08019845 	stmdaeq	r1, {r0, r2, r6, fp, ip, pc}
 801999c:	40020000 	andmi	r0, r2, r0

080199a0 <Hardware::SetMode(hardware::ledblink::Mode)>:
 80199a0:	7e03      	ldrb	r3, [r0, #24]
 80199a2:	b510      	push	{r4, lr}
 80199a4:	4604      	mov	r4, r0
 80199a6:	b993      	cbnz	r3, 80199ce <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 80199a8:	6943      	ldr	r3, [r0, #20]
 80199aa:	428b      	cmp	r3, r1
 80199ac:	d00f      	beq.n	80199ce <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 80199ae:	6141      	str	r1, [r0, #20]
 80199b0:	3901      	subs	r1, #1
 80199b2:	2904      	cmp	r1, #4
 80199b4:	d804      	bhi.n	80199c0 <Hardware::SetMode(hardware::ledblink::Mode)+0x20>
 80199b6:	e8df f001 	tbb	[pc, r1]
 80199ba:	110f0d0b 	tstne	pc, fp, lsl #26
 80199be:	21000013 	tstcs	r0, r3, lsl r0
 80199c2:	4620      	mov	r0, r4
 80199c4:	f7ff ff8a 	bl	80198dc <Hardware::SetFrequency(unsigned long)>
 80199c8:	6960      	ldr	r0, [r4, #20]
 80199ca:	f7f0 f8d9 	bl	8009b80 <hardware::ledblink::display(unsigned long)>
 80199ce:	bd10      	pop	{r4, pc}
 80199d0:	21ff      	movs	r1, #255	@ 0xff
 80199d2:	e7f6      	b.n	80199c2 <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80199d4:	2101      	movs	r1, #1
 80199d6:	e7f4      	b.n	80199c2 <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80199d8:	2103      	movs	r1, #3
 80199da:	e7f2      	b.n	80199c2 <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80199dc:	2105      	movs	r1, #5
 80199de:	e7f0      	b.n	80199c2 <Hardware::SetMode(hardware::ledblink::Mode)+0x22>
 80199e0:	2108      	movs	r1, #8
 80199e2:	e7ee      	b.n	80199c2 <Hardware::SetMode(hardware::ledblink::Mode)+0x22>

080199e4 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>:
 80199e4:	b538      	push	{r3, r4, r5, lr}
 80199e6:	4604      	mov	r4, r0
 80199e8:	2300      	movs	r3, #0
 80199ea:	4615      	mov	r5, r2
 80199ec:	7603      	strb	r3, [r0, #24]
 80199ee:	f7ff ffd7 	bl	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 80199f2:	7625      	strb	r5, [r4, #24]
 80199f4:	bd38      	pop	{r3, r4, r5, pc}

080199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>:
 80199f6:	b530      	push	{r4, r5, lr}
 80199f8:	4603      	mov	r3, r0
 80199fa:	4401      	add	r1, r0
 80199fc:	250a      	movs	r5, #10
 80199fe:	2000      	movs	r0, #0
 8019a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a04:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019a08:	2c09      	cmp	r4, #9
 8019a0a:	d805      	bhi.n	8019a18 <remoteconfig::timedate::atoi(char const*, unsigned long)+0x22>
 8019a0c:	fb05 2000 	mla	r0, r5, r0, r2
 8019a10:	428b      	cmp	r3, r1
 8019a12:	f1a0 0030 	sub.w	r0, r0, #48	@ 0x30
 8019a16:	d1f3      	bne.n	8019a00 <remoteconfig::timedate::atoi(char const*, unsigned long)+0xa>
 8019a18:	bd30      	pop	{r4, r5, pc}
	...

08019a1c <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)>:
 8019a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a20:	b08a      	sub	sp, #40	@ 0x28
 8019a22:	4605      	mov	r5, r0
 8019a24:	460e      	mov	r6, r1
 8019a26:	a808      	add	r0, sp, #32
 8019a28:	2100      	movs	r1, #0
 8019a2a:	f002 fed7 	bl	801c7dc <gettimeofday>
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	db52      	blt.n	8019ad8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xbc>
 8019a32:	a808      	add	r0, sp, #32
 8019a34:	f002 fe5a 	bl	801c6ec <localtime>
 8019a38:	4b28      	ldr	r3, [pc, #160]	@ (8019adc <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc0>)
 8019a3a:	4604      	mov	r4, r0
 8019a3c:	6919      	ldr	r1, [r3, #16]
 8019a3e:	6827      	ldr	r7, [r4, #0]
 8019a40:	6963      	ldr	r3, [r4, #20]
 8019a42:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8019a46:	fb91 fcf2 	sdiv	ip, r1, r2
 8019a4a:	fa4f f08c 	sxtb.w	r0, ip
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	f04f 0e3c 	mov.w	lr, #60	@ 0x3c
 8019a54:	dd21      	ble.n	8019a9a <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0x7e>
 8019a56:	f5a2 52e1 	sub.w	r2, r2, #7200	@ 0x1c20
 8019a5a:	fb02 1100 	mla	r1, r2, r0, r1
 8019a5e:	fbb1 f1fe 	udiv	r1, r1, lr
 8019a62:	b2ca      	uxtb	r2, r1
 8019a64:	e9d4 8e02 	ldrd	r8, lr, [r4, #8]
 8019a68:	6921      	ldr	r1, [r4, #16]
 8019a6a:	6864      	ldr	r4, [r4, #4]
 8019a6c:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8019aec <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xd0>
 8019a70:	9403      	str	r4, [sp, #12]
 8019a72:	4c1b      	ldr	r4, [pc, #108]	@ (8019ae0 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc4>)
 8019a74:	3101      	adds	r1, #1
 8019a76:	2800      	cmp	r0, #0
 8019a78:	bfd8      	it	le
 8019a7a:	4664      	movle	r4, ip
 8019a7c:	e9cd 0206 	strd	r0, r2, [sp, #24]
 8019a80:	9100      	str	r1, [sp, #0]
 8019a82:	e9cd 7404 	strd	r7, r4, [sp, #16]
 8019a86:	e9cd e801 	strd	lr, r8, [sp, #4]
 8019a8a:	4a16      	ldr	r2, [pc, #88]	@ (8019ae4 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xc8>)
 8019a8c:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8019a90:	4631      	mov	r1, r6
 8019a92:	4628      	mov	r0, r5
 8019a94:	f002 fcf2 	bl	801c47c <snprintf>
 8019a98:	e01b      	b.n	8019ad2 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xb6>
 8019a9a:	4342      	muls	r2, r0
 8019a9c:	1a52      	subs	r2, r2, r1
 8019a9e:	fbb2 f2fe 	udiv	r2, r2, lr
 8019aa2:	b2d2      	uxtb	r2, r2
 8019aa4:	ea42 0c0c 	orr.w	ip, r2, ip
 8019aa8:	fa5f f18c 	uxtb.w	r1, ip
 8019aac:	2900      	cmp	r1, #0
 8019aae:	d1d9      	bne.n	8019a64 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0x48>
 8019ab0:	9704      	str	r7, [sp, #16]
 8019ab2:	6862      	ldr	r2, [r4, #4]
 8019ab4:	9203      	str	r2, [sp, #12]
 8019ab6:	68a2      	ldr	r2, [r4, #8]
 8019ab8:	9202      	str	r2, [sp, #8]
 8019aba:	68e2      	ldr	r2, [r4, #12]
 8019abc:	9201      	str	r2, [sp, #4]
 8019abe:	6922      	ldr	r2, [r4, #16]
 8019ac0:	3201      	adds	r2, #1
 8019ac2:	9200      	str	r2, [sp, #0]
 8019ac4:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8019ac8:	4a07      	ldr	r2, [pc, #28]	@ (8019ae8 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xcc>)
 8019aca:	4631      	mov	r1, r6
 8019acc:	4628      	mov	r0, r5
 8019ace:	f002 fcd5 	bl	801c47c <snprintf>
 8019ad2:	b00a      	add	sp, #40	@ 0x28
 8019ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ad8:	2000      	movs	r0, #0
 8019ada:	e7fa      	b.n	8019ad2 <remoteconfig::timedate::json_get_timeofday(char*, unsigned long)+0xb6>
 8019adc:	40024000 	andmi	r4, r2, r0
 8019ae0:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}
 8019ae4:	0801ddc0 	stmdaeq	r1, {r6, r7, r8, sl, fp, ip, lr, pc}
 8019ae8:	0801dd97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, sl, fp, ip, lr, pc}
 8019aec:	0801d1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr, pc}

08019af0 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)>:
 8019af0:	b570      	push	{r4, r5, r6, lr}
 8019af2:	291a      	cmp	r1, #26
 8019af4:	b08c      	sub	sp, #48	@ 0x30
 8019af6:	4606      	mov	r6, r0
 8019af8:	460c      	mov	r4, r1
 8019afa:	d001      	beq.n	8019b00 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x10>
 8019afc:	291f      	cmp	r1, #31
 8019afe:	d174      	bne.n	8019bea <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xfa>
 8019b00:	2104      	movs	r1, #4
 8019b02:	1d70      	adds	r0, r6, #5
 8019b04:	f7ff ff77 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b08:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 8019b0c:	9008      	str	r0, [sp, #32]
 8019b0e:	2102      	movs	r1, #2
 8019b10:	f106 000a 	add.w	r0, r6, #10
 8019b14:	f7ff ff6f 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b18:	3801      	subs	r0, #1
 8019b1a:	9007      	str	r0, [sp, #28]
 8019b1c:	2102      	movs	r1, #2
 8019b1e:	f106 000d 	add.w	r0, r6, #13
 8019b22:	f7ff ff68 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b26:	2102      	movs	r1, #2
 8019b28:	9006      	str	r0, [sp, #24]
 8019b2a:	f106 0010 	add.w	r0, r6, #16
 8019b2e:	f7ff ff62 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b32:	2102      	movs	r1, #2
 8019b34:	9005      	str	r0, [sp, #20]
 8019b36:	f106 0013 	add.w	r0, r6, #19
 8019b3a:	f7ff ff5c 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b3e:	2102      	movs	r1, #2
 8019b40:	9004      	str	r0, [sp, #16]
 8019b42:	f106 0016 	add.w	r0, r6, #22
 8019b46:	f7ff ff56 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b4a:	9003      	str	r0, [sp, #12]
 8019b4c:	a803      	add	r0, sp, #12
 8019b4e:	f002 fddd 	bl	801c70c <mktime>
 8019b52:	2300      	movs	r3, #0
 8019b54:	2c1a      	cmp	r4, #26
 8019b56:	4605      	mov	r5, r0
 8019b58:	9001      	str	r0, [sp, #4]
 8019b5a:	9302      	str	r3, [sp, #8]
 8019b5c:	d041      	beq.n	8019be2 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xf2>
 8019b5e:	7e33      	ldrb	r3, [r6, #24]
 8019b60:	2102      	movs	r1, #2
 8019b62:	2b2d      	cmp	r3, #45	@ 0x2d
 8019b64:	f106 0019 	add.w	r0, r6, #25
 8019b68:	bf14      	ite	ne
 8019b6a:	2401      	movne	r4, #1
 8019b6c:	f04f 34ff 	moveq.w	r4, #4294967295	@ 0xffffffff
 8019b70:	f7ff ff41 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b74:	4344      	muls	r4, r0
 8019b76:	f004 04ff 	and.w	r4, r4, #255	@ 0xff
 8019b7a:	f104 030c 	add.w	r3, r4, #12
 8019b7e:	b2db      	uxtb	r3, r3
 8019b80:	2b1a      	cmp	r3, #26
 8019b82:	d82a      	bhi.n	8019bda <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xea>
 8019b84:	2102      	movs	r1, #2
 8019b86:	f106 001c 	add.w	r0, r6, #28
 8019b8a:	f7ff ff34 	bl	80199f6 <remoteconfig::timedate::atoi(char const*, unsigned long)>
 8019b8e:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 8019b92:	b264      	sxtb	r4, r4
 8019b94:	d12b      	bne.n	8019bee <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xfe>
 8019b96:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8019b9a:	4363      	muls	r3, r4
 8019b9c:	4a15      	ldr	r2, [pc, #84]	@ (8019bf4 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x104>)
 8019b9e:	6911      	ldr	r1, [r2, #16]
 8019ba0:	4299      	cmp	r1, r3
 8019ba2:	bf1f      	itttt	ne
 8019ba4:	6113      	strne	r3, [r2, #16]
 8019ba6:	4b14      	ldrne	r3, [pc, #80]	@ (8019bf8 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x108>)
 8019ba8:	2201      	movne	r2, #1
 8019baa:	601a      	strne	r2, [r3, #0]
 8019bac:	e015      	b.n	8019bda <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xea>
 8019bae:	f993 1000 	ldrsb.w	r1, [r3]
 8019bb2:	42a1      	cmp	r1, r4
 8019bb4:	d10e      	bne.n	8019bd4 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe4>
 8019bb6:	7859      	ldrb	r1, [r3, #1]
 8019bb8:	4281      	cmp	r1, r0
 8019bba:	d10b      	bne.n	8019bd4 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe4>
 8019bbc:	2c00      	cmp	r4, #0
 8019bbe:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8019bc2:	fb04 f303 	mul.w	r3, r4, r3
 8019bc6:	bfcc      	ite	gt
 8019bc8:	223c      	movgt	r2, #60	@ 0x3c
 8019bca:	f06f 023b 	mvnle.w	r2, #59	@ 0x3b
 8019bce:	fb02 3300 	mla	r3, r2, r0, r3
 8019bd2:	e7e3      	b.n	8019b9c <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xac>
 8019bd4:	3302      	adds	r3, #2
 8019bd6:	3a01      	subs	r2, #1
 8019bd8:	d1e9      	bne.n	8019bae <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xbe>
 8019bda:	4b06      	ldr	r3, [pc, #24]	@ (8019bf4 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x104>)
 8019bdc:	691b      	ldr	r3, [r3, #16]
 8019bde:	1aed      	subs	r5, r5, r3
 8019be0:	9501      	str	r5, [sp, #4]
 8019be2:	2100      	movs	r1, #0
 8019be4:	a801      	add	r0, sp, #4
 8019be6:	f002 fe2b 	bl	801c840 <settimeofday>
 8019bea:	b00c      	add	sp, #48	@ 0x30
 8019bec:	bd70      	pop	{r4, r5, r6, pc}
 8019bee:	4b03      	ldr	r3, [pc, #12]	@ (8019bfc <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0x10c>)
 8019bf0:	220c      	movs	r2, #12
 8019bf2:	e7f0      	b.n	8019bd6 <remoteconfig::timedate::json_set_timeofday(char const*, unsigned long)+0xe6>
 8019bf4:	40024000 	andmi	r4, r2, r0
 8019bf8:	2000e2ec 	andcs	lr, r0, ip, ror #5
 8019bfc:	08021338 	stmdaeq	r2, {r3, r4, r5, r8, r9, ip}

08019c00 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>:
 8019c00:	2900      	cmp	r1, #0
 8019c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c04:	db10      	blt.n	8019c28 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8019c06:	f8d0 50a0 	ldr.w	r5, [r0, #160]	@ 0xa0
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8019c10:	42ab      	cmp	r3, r5
 8019c12:	d009      	beq.n	8019c28 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x28>
 8019c14:	011c      	lsls	r4, r3, #4
 8019c16:	5937      	ldr	r7, [r6, r4]
 8019c18:	42b9      	cmp	r1, r7
 8019c1a:	d106      	bne.n	8019c2a <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x2a>
 8019c1c:	4b04      	ldr	r3, [pc, #16]	@ (8019c30 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x30>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	4420      	add	r0, r4
 8019c22:	4413      	add	r3, r2
 8019c24:	e9c0 3208 	strd	r3, r2, [r0, #32]
 8019c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c2a:	3301      	adds	r3, #1
 8019c2c:	e7f0      	b.n	8019c10 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]+0x10>
 8019c2e:	bf00      	nop
 8019c30:	2001bcd0 	ldrdcs	fp, [r1], -r0

08019c34 <Hardware::Hardware()>:
 8019c34:	b570      	push	{r4, r5, r6, lr}
 8019c36:	2306      	movs	r3, #6
 8019c38:	6143      	str	r3, [r0, #20]
 8019c3a:	2500      	movs	r5, #0
 8019c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8019db0 <Hardware::Hardware()+0x17c>)
 8019c3e:	7405      	strb	r5, [r0, #16]
 8019c40:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019c44:	b090      	sub	sp, #64	@ 0x40
 8019c46:	e9c0 5528 	strd	r5, r5, [r0, #160]	@ 0xa0
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	7605      	strb	r5, [r0, #24]
 8019c4e:	61c6      	str	r6, [r0, #28]
 8019c50:	6018      	str	r0, [r3, #0]
 8019c52:	f7ee fca1 	bl	8008598 <console_init()>
 8019c56:	f001 fc71 	bl	801b53c <timer6_config()>
 8019c5a:	f001 fcd5 	bl	801b608 <systick_config>
 8019c5e:	f001 fca7 	bl	801b5b0 <udelay_init()>
 8019c62:	4620      	mov	r0, r4
 8019c64:	f002 fd9e 	bl	801c7a4 <hal::uuid_init(unsigned char*)>
 8019c68:	f001 fcf4 	bl	801b654 <gd32_adc_init()>
 8019c6c:	f001 fd7e 	bl	801b76c <gd32_i2c_begin>
 8019c70:	f241 0004 	movw	r0, #4100	@ 0x1004
 8019c74:	f000 fe66 	bl	801a944 <rcu_periph_clock_enable>
 8019c78:	484e      	ldr	r0, [pc, #312]	@ (8019db4 <Hardware::Hardware()+0x180>)
 8019c7a:	f000 ff1f 	bl	801aabc <timer_deinit>
 8019c7e:	a803      	add	r0, sp, #12
 8019c80:	f000 ffc2 	bl	801ac08 <timer_struct_para_init>
 8019c84:	23ef      	movs	r3, #239	@ 0xef
 8019c86:	a903      	add	r1, sp, #12
 8019c88:	484a      	ldr	r0, [pc, #296]	@ (8019db4 <Hardware::Hardware()+0x180>)
 8019c8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019c8e:	9605      	str	r6, [sp, #20]
 8019c90:	f000 ffc2 	bl	801ac18 <timer_init>
 8019c94:	4847      	ldr	r0, [pc, #284]	@ (8019db4 <Hardware::Hardware()+0x180>)
 8019c96:	f000 fff3 	bl	801ac80 <timer_enable>
 8019c9a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8019c9e:	f000 fe7d 	bl	801a99c <rcu_timer_clock_prescaler_config>
 8019ca2:	f641 400f 	movw	r0, #7183	@ 0x1c0f
 8019ca6:	f000 fe4d 	bl	801a944 <rcu_periph_clock_enable>
 8019caa:	f241 001c 	movw	r0, #4124	@ 0x101c
 8019cae:	f000 fe49 	bl	801a944 <rcu_periph_clock_enable>
 8019cb2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019cb6:	f000 fe31 	bl	801a91c <pmu_backup_ldo_config>
 8019cba:	f640 4012 	movw	r0, #3090	@ 0xc12
 8019cbe:	f000 fe41 	bl	801a944 <rcu_periph_clock_enable>
 8019cc2:	f000 fe37 	bl	801a934 <pmu_backup_write_enable>
 8019cc6:	4629      	mov	r1, r5
 8019cc8:	2001      	movs	r0, #1
 8019cca:	f001 fa3b 	bl	801b144 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 8019cce:	4a3a      	ldr	r2, [pc, #232]	@ (8019db8 <Hardware::Hardware()+0x184>)
 8019cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8019dbc <Hardware::Hardware()+0x188>)
 8019cd2:	1a9b      	subs	r3, r3, r2
 8019cd4:	3b01      	subs	r3, #1
 8019cd6:	d245      	bcs.n	8019d64 <Hardware::Hardware()+0x130>
 8019cd8:	4a39      	ldr	r2, [pc, #228]	@ (8019dc0 <Hardware::Hardware()+0x18c>)
 8019cda:	4b3a      	ldr	r3, [pc, #232]	@ (8019dc4 <Hardware::Hardware()+0x190>)
 8019cdc:	2100      	movs	r1, #0
 8019cde:	1a9b      	subs	r3, r3, r2
 8019ce0:	3b01      	subs	r3, #1
 8019ce2:	d242      	bcs.n	8019d6a <Hardware::Hardware()+0x136>
 8019ce4:	4a38      	ldr	r2, [pc, #224]	@ (8019dc8 <Hardware::Hardware()+0x194>)
 8019ce6:	4b39      	ldr	r3, [pc, #228]	@ (8019dcc <Hardware::Hardware()+0x198>)
 8019ce8:	2100      	movs	r1, #0
 8019cea:	1a9b      	subs	r3, r3, r2
 8019cec:	3b01      	subs	r3, #1
 8019cee:	d23f      	bcs.n	8019d70 <Hardware::Hardware()+0x13c>
 8019cf0:	ab07      	add	r3, sp, #28
 8019cf2:	2524      	movs	r5, #36	@ 0x24
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	3d01      	subs	r5, #1
 8019cfa:	f803 2b01 	strb.w	r2, [r3], #1
 8019cfe:	d1fb      	bne.n	8019cf8 <Hardware::Hardware()+0xc4>
 8019d00:	2217      	movs	r2, #23
 8019d02:	2308      	movs	r3, #8
 8019d04:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8019d08:	237c      	movs	r3, #124	@ 0x7c
 8019d0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8019d0c:	f002 fcfe 	bl	801c70c <mktime>
 8019d10:	4629      	mov	r1, r5
 8019d12:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8019d16:	a801      	add	r0, sp, #4
 8019d18:	f002 fd92 	bl	801c840 <settimeofday>
 8019d1c:	f640 4003 	movw	r0, #3075	@ 0xc03
 8019d20:	f000 fe10 	bl	801a944 <rcu_periph_clock_enable>
 8019d24:	482a      	ldr	r0, [pc, #168]	@ (8019dd0 <Hardware::Hardware()+0x19c>)
 8019d26:	2310      	movs	r3, #16
 8019d28:	462a      	mov	r2, r5
 8019d2a:	2101      	movs	r1, #1
 8019d2c:	f000 fd88 	bl	801a840 <gpio_mode_set>
 8019d30:	2310      	movs	r3, #16
 8019d32:	2202      	movs	r2, #2
 8019d34:	4629      	mov	r1, r5
 8019d36:	4826      	ldr	r0, [pc, #152]	@ (8019dd0 <Hardware::Hardware()+0x19c>)
 8019d38:	f000 fda4 	bl	801a884 <gpio_output_options_set>
 8019d3c:	4b25      	ldr	r3, [pc, #148]	@ (8019dd4 <Hardware::Hardware()+0x1a0>)
 8019d3e:	2210      	movs	r2, #16
 8019d40:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18
 8019d44:	69e1      	ldr	r1, [r4, #28]
 8019d46:	2900      	cmp	r1, #0
 8019d48:	da2b      	bge.n	8019da2 <Hardware::Hardware()+0x16e>
 8019d4a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8019d4e:	2b07      	cmp	r3, #7
 8019d50:	d911      	bls.n	8019d76 <Hardware::Hardware()+0x142>
 8019d52:	4821      	ldr	r0, [pc, #132]	@ (8019dd8 <Hardware::Hardware()+0x1a4>)
 8019d54:	f000 f872 	bl	8019e3c <console_error>
 8019d58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019d5c:	61e2      	str	r2, [r4, #28]
 8019d5e:	4620      	mov	r0, r4
 8019d60:	b010      	add	sp, #64	@ 0x40
 8019d62:	bd70      	pop	{r4, r5, r6, pc}
 8019d64:	f802 5b01 	strb.w	r5, [r2], #1
 8019d68:	e7b4      	b.n	8019cd4 <Hardware::Hardware()+0xa0>
 8019d6a:	f802 1b01 	strb.w	r1, [r2], #1
 8019d6e:	e7b7      	b.n	8019ce0 <Hardware::Hardware()+0xac>
 8019d70:	f802 1b01 	strb.w	r1, [r2], #1
 8019d74:	e7ba      	b.n	8019cec <Hardware::Hardware()+0xb8>
 8019d76:	4a19      	ldr	r2, [pc, #100]	@ (8019ddc <Hardware::Hardware()+0x1a8>)
 8019d78:	6811      	ldr	r1, [r2, #0]
 8019d7a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8019d7e:	1c50      	adds	r0, r2, #1
 8019d80:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 8019d84:	1c58      	adds	r0, r3, #1
 8019d86:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8019d8a:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8019d8e:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 8019d92:	6219      	str	r1, [r3, #32]
 8019d94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8019d98:	e9c3 1209 	strd	r1, r2, [r3, #36]	@ 0x24
 8019d9c:	4910      	ldr	r1, [pc, #64]	@ (8019de0 <Hardware::Hardware()+0x1ac>)
 8019d9e:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8019da0:	e7dc      	b.n	8019d5c <Hardware::Hardware()+0x128>
 8019da2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019da6:	4620      	mov	r0, r4
 8019da8:	f7ff ff2a 	bl	8019c00 <Hardware::SoftwareTimerChange(long, unsigned long) [clone .isra.0]>
 8019dac:	e7d7      	b.n	8019d5e <Hardware::Hardware()+0x12a>
 8019dae:	bf00      	nop
 8019db0:	2000e3e0 	andcs	lr, r0, r0, ror #7
 8019db4:	40001000 	andmi	r1, r0, r0
 8019db8:	2001c000 	andcs	ip, r1, r0
 8019dbc:	2001c428 	andcs	ip, r1, r8, lsr #8
 8019dc0:	10008000 	andne	r8, r0, r0
 8019dc4:	1000cc90 	mulne	r0, r0, ip
 8019dc8:	20020000 	andcs	r0, r2, r0
 8019dcc:	20030000 	andcs	r0, r3, r0
 8019dd0:	40020c00 	andmi	r0, r2, r0, lsl #24
 8019dd4:	40020000 	andmi	r0, r2, r0
 8019dd8:	0801db74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 8019ddc:	2001bcd0 	ldrdcs	fp, [r1], -r0
 8019de0:	08019845 	stmdaeq	r1, {r0, r2, r6, fp, ip, pc}

08019de4 <Hardware::Reboot()>:
 8019de4:	4604      	mov	r4, r0
 8019de6:	b508      	push	{r3, lr}
 8019de8:	2500      	movs	r5, #0
 8019dea:	480f      	ldr	r0, [pc, #60]	@ (8019e28 <Hardware::Reboot()+0x44>)
 8019dec:	f002 fb73 	bl	801c4d6 <puts>
 8019df0:	2104      	movs	r1, #4
 8019df2:	7425      	strb	r5, [r4, #16]
 8019df4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019df8:	f000 fcf8 	bl	801a7ec <fwdgt_config>
 8019dfc:	4620      	mov	r0, r4
 8019dfe:	f7f0 f97d 	bl	800a0fc <Hardware::RebootHandler()>
 8019e02:	f7fc fd47 	bl	8016894 <net::net_shutdown()>
 8019e06:	4629      	mov	r1, r5
 8019e08:	4620      	mov	r0, r4
 8019e0a:	f7ff fdc9 	bl	80199a0 <Hardware::SetMode(hardware::ledblink::Mode)>
 8019e0e:	f3bf 8f4f 	dsb	sy
 8019e12:	4906      	ldr	r1, [pc, #24]	@ (8019e2c <Hardware::Reboot()+0x48>)
 8019e14:	4b06      	ldr	r3, [pc, #24]	@ (8019e30 <Hardware::Reboot()+0x4c>)
 8019e16:	68ca      	ldr	r2, [r1, #12]
 8019e18:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8019e1c:	4313      	orrs	r3, r2
 8019e1e:	60cb      	str	r3, [r1, #12]
 8019e20:	f3bf 8f4f 	dsb	sy
 8019e24:	bf00      	nop
 8019e26:	e7fd      	b.n	8019e24 <Hardware::Reboot()+0x40>
 8019e28:	0801d229 	stmdaeq	r1, {r0, r3, r5, r9, ip, lr, pc}
 8019e2c:	e000ed00 	and	lr, r0, r0, lsl #26
 8019e30:	05fa0004 	ldrbeq	r0, [sl, #4]!

08019e34 <console_putc>:
 8019e34:	f001 be10 	b.w	801ba58 <uart0_putc>

08019e38 <console_puts>:
 8019e38:	f001 be28 	b.w	801ba8c <uart0_puts>

08019e3c <console_error>:
 8019e3c:	b510      	push	{r4, lr}
 8019e3e:	4604      	mov	r4, r0
 8019e40:	4805      	ldr	r0, [pc, #20]	@ (8019e58 <console_error+0x1c>)
 8019e42:	f001 fe23 	bl	801ba8c <uart0_puts>
 8019e46:	4620      	mov	r0, r4
 8019e48:	f001 fe20 	bl	801ba8c <uart0_puts>
 8019e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e50:	4802      	ldr	r0, [pc, #8]	@ (8019e5c <console_error+0x20>)
 8019e52:	f001 be1b 	b.w	801ba8c <uart0_puts>
 8019e56:	bf00      	nop
 8019e58:	0801ddf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8019e5c:	0801ddf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}

08019e60 <console_set_fg_color>:
 8019e60:	2807      	cmp	r0, #7
 8019e62:	d810      	bhi.n	8019e86 <console_set_fg_color+0x26>
 8019e64:	e8df f000 	tbb	[pc, r0]
 8019e68:	0b090704 	bleq	825ba80 <_sidata+0x23a174>
 8019e6c:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	@ 8019e38 <console_puts>
 8019e70:	4806      	ldr	r0, [pc, #24]	@ (8019e8c <console_set_fg_color+0x2c>)
 8019e72:	f001 be0b 	b.w	801ba8c <uart0_puts>
 8019e76:	4806      	ldr	r0, [pc, #24]	@ (8019e90 <console_set_fg_color+0x30>)
 8019e78:	e7fb      	b.n	8019e72 <console_set_fg_color+0x12>
 8019e7a:	4806      	ldr	r0, [pc, #24]	@ (8019e94 <console_set_fg_color+0x34>)
 8019e7c:	e7f9      	b.n	8019e72 <console_set_fg_color+0x12>
 8019e7e:	4806      	ldr	r0, [pc, #24]	@ (8019e98 <console_set_fg_color+0x38>)
 8019e80:	e7f7      	b.n	8019e72 <console_set_fg_color+0x12>
 8019e82:	4806      	ldr	r0, [pc, #24]	@ (8019e9c <console_set_fg_color+0x3c>)
 8019e84:	e7f5      	b.n	8019e72 <console_set_fg_color+0x12>
 8019e86:	4806      	ldr	r0, [pc, #24]	@ (8019ea0 <console_set_fg_color+0x40>)
 8019e88:	e7f3      	b.n	8019e72 <console_set_fg_color+0x12>
 8019e8a:	bf00      	nop
 8019e8c:	0801ddff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8019e90:	0801ddf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8019e94:	0801de05 	stmdaeq	r1, {r0, r2, r9, sl, fp, ip, lr, pc}
 8019e98:	0801de0b 	stmdaeq	r1, {r0, r1, r3, r9, sl, fp, ip, lr, pc}
 8019e9c:	0801ddf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8019ea0:	0801de11 	stmdaeq	r1, {r0, r4, r9, sl, fp, ip, lr, pc}

08019ea4 <console_status>:
 8019ea4:	b510      	push	{r4, lr}
 8019ea6:	b280      	uxth	r0, r0
 8019ea8:	460c      	mov	r4, r1
 8019eaa:	f7ff ffd9 	bl	8019e60 <console_set_fg_color>
 8019eae:	4807      	ldr	r0, [pc, #28]	@ (8019ecc <console_status+0x28>)
 8019eb0:	f001 fdec 	bl	801ba8c <uart0_puts>
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	f001 fde9 	bl	801ba8c <uart0_puts>
 8019eba:	200a      	movs	r0, #10
 8019ebc:	f001 fdcc 	bl	801ba58 <uart0_putc>
 8019ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ec4:	4802      	ldr	r0, [pc, #8]	@ (8019ed0 <console_status+0x2c>)
 8019ec6:	f001 bde1 	b.w	801ba8c <uart0_puts>
 8019eca:	bf00      	nop
 8019ecc:	0801de17 	stmdaeq	r1, {r0, r1, r2, r4, r9, sl, fp, ip, lr, pc}
 8019ed0:	0801ddf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}

08019ed4 <stack_debug_init>:
 8019ed4:	4b04      	ldr	r3, [pc, #16]	@ (8019ee8 <stack_debug_init+0x14>)
 8019ed6:	4a05      	ldr	r2, [pc, #20]	@ (8019eec <stack_debug_init+0x18>)
 8019ed8:	4905      	ldr	r1, [pc, #20]	@ (8019ef0 <stack_debug_init+0x1c>)
 8019eda:	4293      	cmp	r3, r2
 8019edc:	d300      	bcc.n	8019ee0 <stack_debug_init+0xc>
 8019ede:	4770      	bx	lr
 8019ee0:	f843 1b04 	str.w	r1, [r3], #4
 8019ee4:	e7f9      	b.n	8019eda <stack_debug_init+0x6>
 8019ee6:	bf00      	nop
 8019ee8:	10000000 	andne	r0, r0, r0
 8019eec:	10008000 	andne	r8, r0, r0
 8019ef0:	abcdabcd 	blge	7384e2c <__stack_size+0x737ce2c>

08019ef4 <stack_debug_print()>:
 8019ef4:	b570      	push	{r4, r5, r6, lr}
 8019ef6:	4d18      	ldr	r5, [pc, #96]	@ (8019f58 <stack_debug_print()+0x64>)
 8019ef8:	4c18      	ldr	r4, [pc, #96]	@ (8019f5c <stack_debug_print()+0x68>)
 8019efa:	4a19      	ldr	r2, [pc, #100]	@ (8019f60 <stack_debug_print()+0x6c>)
 8019efc:	4629      	mov	r1, r5
 8019efe:	42a5      	cmp	r5, r4
 8019f00:	d202      	bcs.n	8019f08 <stack_debug_print()+0x14>
 8019f02:	6828      	ldr	r0, [r5, #0]
 8019f04:	4290      	cmp	r0, r2
 8019f06:	d005      	beq.n	8019f14 <stack_debug_print()+0x20>
 8019f08:	4a16      	ldr	r2, [pc, #88]	@ (8019f64 <stack_debug_print()+0x70>)
 8019f0a:	6810      	ldr	r0, [r2, #0]
 8019f0c:	1b66      	subs	r6, r4, r5
 8019f0e:	42b0      	cmp	r0, r6
 8019f10:	d102      	bne.n	8019f18 <stack_debug_print()+0x24>
 8019f12:	bd70      	pop	{r4, r5, r6, pc}
 8019f14:	3504      	adds	r5, #4
 8019f16:	e7f2      	b.n	8019efe <stack_debug_print()+0xa>
 8019f18:	1a64      	subs	r4, r4, r1
 8019f1a:	1a6d      	subs	r5, r5, r1
 8019f1c:	2319      	movs	r3, #25
 8019f1e:	10a4      	asrs	r4, r4, #2
 8019f20:	436b      	muls	r3, r5
 8019f22:	6016      	str	r6, [r2, #0]
 8019f24:	fb93 f3f4 	sdiv	r3, r3, r4
 8019f28:	b983      	cbnz	r3, 8019f4c <stack_debug_print()+0x58>
 8019f2a:	480f      	ldr	r0, [pc, #60]	@ (8019f68 <stack_debug_print()+0x74>)
 8019f2c:	f002 fa7e 	bl	801c42c <printf>
 8019f30:	1e21      	subs	r1, r4, #0
 8019f32:	bfb8      	it	lt
 8019f34:	31ff      	addlt	r1, #255	@ 0xff
 8019f36:	462b      	mov	r3, r5
 8019f38:	4632      	mov	r2, r6
 8019f3a:	480c      	ldr	r0, [pc, #48]	@ (8019f6c <stack_debug_print()+0x78>)
 8019f3c:	1209      	asrs	r1, r1, #8
 8019f3e:	f002 fa75 	bl	801c42c <printf>
 8019f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f46:	480a      	ldr	r0, [pc, #40]	@ (8019f70 <stack_debug_print()+0x7c>)
 8019f48:	f002 ba70 	b.w	801c42c <printf>
 8019f4c:	2b01      	cmp	r3, #1
 8019f4e:	bf0c      	ite	eq
 8019f50:	4808      	ldreq	r0, [pc, #32]	@ (8019f74 <stack_debug_print()+0x80>)
 8019f52:	4809      	ldrne	r0, [pc, #36]	@ (8019f78 <stack_debug_print()+0x84>)
 8019f54:	e7ea      	b.n	8019f2c <stack_debug_print()+0x38>
 8019f56:	bf00      	nop
 8019f58:	10000000 	andne	r0, r0, r0
 8019f5c:	10008000 	andne	r8, r0, r0
 8019f60:	abcdabcd 	blge	7384e9c <__stack_size+0x737ce9c>
 8019f64:	2000e3e8 	andcs	lr, r0, r8, ror #7
 8019f68:	0801ddf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8019f6c:	0801de35 	stmdaeq	r1, {r0, r2, r4, r5, r9, sl, fp, ip, lr, pc}
 8019f70:	0801de5a 	stmdaeq	r1, {r1, r3, r4, r6, r9, sl, fp, ip, lr, pc}
 8019f74:	0801de0b 	stmdaeq	r1, {r0, r1, r3, r9, sl, fp, ip, lr, pc}
 8019f78:	0801de2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, fp, ip, lr, pc}

08019f7c <stack_debug_run()>:
 8019f7c:	b508      	push	{r3, lr}
 8019f7e:	2000      	movs	r0, #0
 8019f80:	f002 fc74 	bl	801c86c <time>
 8019f84:	4b04      	ldr	r3, [pc, #16]	@ (8019f98 <stack_debug_run()+0x1c>)
 8019f86:	681a      	ldr	r2, [r3, #0]
 8019f88:	4282      	cmp	r2, r0
 8019f8a:	d004      	beq.n	8019f96 <stack_debug_run()+0x1a>
 8019f8c:	6018      	str	r0, [r3, #0]
 8019f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019f92:	f7ff bfaf 	b.w	8019ef4 <stack_debug_print()>
 8019f96:	bd08      	pop	{r3, pc}
 8019f98:	2000e3e4 	andcs	lr, r0, r4, ror #7

08019f9c <SystemInit>:
 8019f9c:	4a56      	ldr	r2, [pc, #344]	@ (801a0f8 <SystemInit+0x15c>)
 8019f9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8019fa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019fa6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8019faa:	4b54      	ldr	r3, [pc, #336]	@ (801a0fc <SystemInit+0x160>)
 8019fac:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8019fb0:	f042 0201 	orr.w	r2, r2, #1
 8019fb4:	b082      	sub	sp, #8
 8019fb6:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8019fba:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8019fbe:	0790      	lsls	r0, r2, #30
 8019fc0:	d5fb      	bpl.n	8019fba <SystemInit+0x1e>
 8019fc2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8019fc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8019fca:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 8019fce:	2300      	movs	r3, #0
 8019fd0:	9301      	str	r3, [sp, #4]
 8019fd2:	9b01      	ldr	r3, [sp, #4]
 8019fd4:	2b4f      	cmp	r3, #79	@ 0x4f
 8019fd6:	d93d      	bls.n	801a054 <SystemInit+0xb8>
 8019fd8:	4b48      	ldr	r3, [pc, #288]	@ (801a0fc <SystemInit+0x160>)
 8019fda:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8019fde:	f042 0290 	orr.w	r2, r2, #144	@ 0x90
 8019fe2:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 8019fe6:	2200      	movs	r2, #0
 8019fe8:	9201      	str	r2, [sp, #4]
 8019fea:	9a01      	ldr	r2, [sp, #4]
 8019fec:	2a4f      	cmp	r2, #79	@ 0x4f
 8019fee:	d934      	bls.n	801a05a <SystemInit+0xbe>
 8019ff0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8019ff4:	f022 0203 	bic.w	r2, r2, #3
 8019ff8:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 8019ffc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801a000:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 801a004:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801a008:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 801a00c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801a010:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801a014:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 801a018:	2200      	movs	r2, #0
 801a01a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 801a01e:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801a022:	4937      	ldr	r1, [pc, #220]	@ (801a100 <SystemInit+0x164>)
 801a024:	f8c3 1804 	str.w	r1, [r3, #2052]	@ 0x804
 801a028:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
 801a02c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801a030:	f042 0201 	orr.w	r2, r2, #1
 801a034:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 801a038:	4b30      	ldr	r3, [pc, #192]	@ (801a0fc <SystemInit+0x160>)
 801a03a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 801a03e:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 801a042:	0789      	lsls	r1, r1, #30
 801a044:	d401      	bmi.n	801a04a <SystemInit+0xae>
 801a046:	3a01      	subs	r2, #1
 801a048:	d1f9      	bne.n	801a03e <SystemInit+0xa2>
 801a04a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 801a04e:	0792      	lsls	r2, r2, #30
 801a050:	d406      	bmi.n	801a060 <SystemInit+0xc4>
 801a052:	e7fe      	b.n	801a052 <SystemInit+0xb6>
 801a054:	9b01      	ldr	r3, [sp, #4]
 801a056:	3301      	adds	r3, #1
 801a058:	e7ba      	b.n	8019fd0 <SystemInit+0x34>
 801a05a:	9a01      	ldr	r2, [sp, #4]
 801a05c:	3201      	adds	r2, #1
 801a05e:	e7c3      	b.n	8019fe8 <SystemInit+0x4c>
 801a060:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
 801a064:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 801a068:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
 801a06c:	4a25      	ldr	r2, [pc, #148]	@ (801a104 <SystemInit+0x168>)
 801a06e:	6811      	ldr	r1, [r2, #0]
 801a070:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 801a074:	6011      	str	r1, [r2, #0]
 801a076:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801a07a:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 801a07e:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801a082:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801a086:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 801a08a:	f8d3 1808 	ldr.w	r1, [r3, #2056]	@ 0x808
 801a08e:	f441 51a0 	orr.w	r1, r1, #5120	@ 0x1400
 801a092:	f8c3 1808 	str.w	r1, [r3, #2056]	@ 0x808
 801a096:	491c      	ldr	r1, [pc, #112]	@ (801a108 <SystemInit+0x16c>)
 801a098:	f8c3 1804 	str.w	r1, [r3, #2052]	@ 0x804
 801a09c:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 801a0a0:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 801a0a4:	f8c3 1800 	str.w	r1, [r3, #2048]	@ 0x800
 801a0a8:	4914      	ldr	r1, [pc, #80]	@ (801a0fc <SystemInit+0x160>)
 801a0aa:	f8d1 3800 	ldr.w	r3, [r1, #2048]	@ 0x800
 801a0ae:	019b      	lsls	r3, r3, #6
 801a0b0:	d5fb      	bpl.n	801a0aa <SystemInit+0x10e>
 801a0b2:	6813      	ldr	r3, [r2, #0]
 801a0b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a0b8:	6013      	str	r3, [r2, #0]
 801a0ba:	4b12      	ldr	r3, [pc, #72]	@ (801a104 <SystemInit+0x168>)
 801a0bc:	685a      	ldr	r2, [r3, #4]
 801a0be:	03d0      	lsls	r0, r2, #15
 801a0c0:	d5fc      	bpl.n	801a0bc <SystemInit+0x120>
 801a0c2:	681a      	ldr	r2, [r3, #0]
 801a0c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801a0c8:	601a      	str	r2, [r3, #0]
 801a0ca:	685a      	ldr	r2, [r3, #4]
 801a0cc:	0391      	lsls	r1, r2, #14
 801a0ce:	d5fc      	bpl.n	801a0ca <SystemInit+0x12e>
 801a0d0:	4b0a      	ldr	r3, [pc, #40]	@ (801a0fc <SystemInit+0x160>)
 801a0d2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 801a0d6:	f022 0203 	bic.w	r2, r2, #3
 801a0da:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 801a0de:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 801a0e2:	f042 0202 	orr.w	r2, r2, #2
 801a0e6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
 801a0ea:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 801a0ee:	0712      	lsls	r2, r2, #28
 801a0f0:	d5fb      	bpl.n	801a0ea <SystemInit+0x14e>
 801a0f2:	b002      	add	sp, #8
 801a0f4:	4770      	bx	lr
 801a0f6:	bf00      	nop
 801a0f8:	e000ed00 	and	lr, r0, r0, lsl #26
 801a0fc:	40023000 	andmi	r3, r2, r0
 801a100:	24003010 	strcs	r3, [r0], #-16
 801a104:	40007000 	andmi	r7, r0, r0
 801a108:	0a007810 	beq	8038150 <_sidata+0x16844>

0801a10c <dma_deinit>:
 801a10c:	2318      	movs	r3, #24
 801a10e:	fb03 0301 	mla	r3, r3, r1, r0
 801a112:	b510      	push	{r4, lr}
 801a114:	691a      	ldr	r2, [r3, #16]
 801a116:	f022 0201 	bic.w	r2, r2, #1
 801a11a:	611a      	str	r2, [r3, #16]
 801a11c:	2200      	movs	r2, #0
 801a11e:	611a      	str	r2, [r3, #16]
 801a120:	2903      	cmp	r1, #3
 801a122:	615a      	str	r2, [r3, #20]
 801a124:	619a      	str	r2, [r3, #24]
 801a126:	61da      	str	r2, [r3, #28]
 801a128:	621a      	str	r2, [r3, #32]
 801a12a:	f04f 0221 	mov.w	r2, #33	@ 0x21
 801a12e:	625a      	str	r2, [r3, #36]	@ 0x24
 801a130:	d80a      	bhi.n	801a148 <dma_deinit+0x3c>
 801a132:	2406      	movs	r4, #6
 801a134:	084b      	lsrs	r3, r1, #1
 801a136:	4361      	muls	r1, r4
 801a138:	6882      	ldr	r2, [r0, #8]
 801a13a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a13e:	233d      	movs	r3, #61	@ 0x3d
 801a140:	408b      	lsls	r3, r1
 801a142:	4313      	orrs	r3, r2
 801a144:	6083      	str	r3, [r0, #8]
 801a146:	bd10      	pop	{r4, pc}
 801a148:	3904      	subs	r1, #4
 801a14a:	b2ca      	uxtb	r2, r1
 801a14c:	2306      	movs	r3, #6
 801a14e:	435a      	muls	r2, r3
 801a150:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801a154:	68c4      	ldr	r4, [r0, #12]
 801a156:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a15a:	233d      	movs	r3, #61	@ 0x3d
 801a15c:	4093      	lsls	r3, r2
 801a15e:	4323      	orrs	r3, r4
 801a160:	60c3      	str	r3, [r0, #12]
 801a162:	e7f0      	b.n	801a146 <dma_deinit+0x3a>

0801a164 <dma_single_data_para_struct_init>:
 801a164:	2300      	movs	r3, #0
 801a166:	2201      	movs	r2, #1
 801a168:	e9c0 3200 	strd	r3, r2, [r0]
 801a16c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 801a170:	e9c0 3204 	strd	r3, r2, [r0, #16]
 801a174:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a178:	6203      	str	r3, [r0, #32]
 801a17a:	4770      	bx	lr

0801a17c <dma_single_data_mode_init>:
 801a17c:	2318      	movs	r3, #24
 801a17e:	fb03 0101 	mla	r1, r3, r1, r0
 801a182:	b530      	push	{r4, r5, lr}
 801a184:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801a186:	f023 0304 	bic.w	r3, r3, #4
 801a18a:	624b      	str	r3, [r1, #36]	@ 0x24
 801a18c:	6813      	ldr	r3, [r2, #0]
 801a18e:	618b      	str	r3, [r1, #24]
 801a190:	6893      	ldr	r3, [r2, #8]
 801a192:	61cb      	str	r3, [r1, #28]
 801a194:	69d3      	ldr	r3, [r2, #28]
 801a196:	614b      	str	r3, [r1, #20]
 801a198:	6914      	ldr	r4, [r2, #16]
 801a19a:	6a13      	ldr	r3, [r2, #32]
 801a19c:	6908      	ldr	r0, [r1, #16]
 801a19e:	6995      	ldr	r5, [r2, #24]
 801a1a0:	4323      	orrs	r3, r4
 801a1a2:	f420 305e 	bic.w	r0, r0, #227328	@ 0x37800
 801a1a6:	432b      	orrs	r3, r5
 801a1a8:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 801a1ac:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 801a1b0:	4303      	orrs	r3, r0
 801a1b2:	610b      	str	r3, [r1, #16]
 801a1b4:	6853      	ldr	r3, [r2, #4]
 801a1b6:	b983      	cbnz	r3, 801a1da <dma_single_data_mode_init+0x5e>
 801a1b8:	690b      	ldr	r3, [r1, #16]
 801a1ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a1be:	610b      	str	r3, [r1, #16]
 801a1c0:	68d3      	ldr	r3, [r2, #12]
 801a1c2:	b993      	cbnz	r3, 801a1ea <dma_single_data_mode_init+0x6e>
 801a1c4:	690b      	ldr	r3, [r1, #16]
 801a1c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801a1ca:	610b      	str	r3, [r1, #16]
 801a1cc:	6953      	ldr	r3, [r2, #20]
 801a1ce:	b983      	cbnz	r3, 801a1f2 <dma_single_data_mode_init+0x76>
 801a1d0:	690b      	ldr	r3, [r1, #16]
 801a1d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a1d6:	610b      	str	r3, [r1, #16]
 801a1d8:	bd30      	pop	{r4, r5, pc}
 801a1da:	2b01      	cmp	r3, #1
 801a1dc:	690b      	ldr	r3, [r1, #16]
 801a1de:	bf0c      	ite	eq
 801a1e0:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 801a1e4:	f443 4300 	orrne.w	r3, r3, #32768	@ 0x8000
 801a1e8:	e7e9      	b.n	801a1be <dma_single_data_mode_init+0x42>
 801a1ea:	690b      	ldr	r3, [r1, #16]
 801a1ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a1f0:	e7eb      	b.n	801a1ca <dma_single_data_mode_init+0x4e>
 801a1f2:	690b      	ldr	r3, [r1, #16]
 801a1f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a1f8:	e7ed      	b.n	801a1d6 <dma_single_data_mode_init+0x5a>
	...

0801a1fc <dma_multi_data_mode_init>:
 801a1fc:	2318      	movs	r3, #24
 801a1fe:	fb03 0101 	mla	r1, r3, r1, r0
 801a202:	6a10      	ldr	r0, [r2, #32]
 801a204:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 801a206:	4303      	orrs	r3, r0
 801a208:	f043 0304 	orr.w	r3, r3, #4
 801a20c:	b510      	push	{r4, lr}
 801a20e:	624b      	str	r3, [r1, #36]	@ 0x24
 801a210:	6813      	ldr	r3, [r2, #0]
 801a212:	618b      	str	r3, [r1, #24]
 801a214:	68d3      	ldr	r3, [r2, #12]
 801a216:	61cb      	str	r3, [r1, #28]
 801a218:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801a21a:	614b      	str	r3, [r1, #20]
 801a21c:	690b      	ldr	r3, [r1, #16]
 801a21e:	4819      	ldr	r0, [pc, #100]	@ (801a284 <dma_multi_data_mode_init+0x88>)
 801a220:	6914      	ldr	r4, [r2, #16]
 801a222:	4018      	ands	r0, r3
 801a224:	6853      	ldr	r3, [r2, #4]
 801a226:	4323      	orrs	r3, r4
 801a228:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 801a22a:	4323      	orrs	r3, r4
 801a22c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 801a22e:	4323      	orrs	r3, r4
 801a230:	6994      	ldr	r4, [r2, #24]
 801a232:	4323      	orrs	r3, r4
 801a234:	69d4      	ldr	r4, [r2, #28]
 801a236:	4323      	orrs	r3, r4
 801a238:	4303      	orrs	r3, r0
 801a23a:	610b      	str	r3, [r1, #16]
 801a23c:	6893      	ldr	r3, [r2, #8]
 801a23e:	b983      	cbnz	r3, 801a262 <dma_multi_data_mode_init+0x66>
 801a240:	690b      	ldr	r3, [r1, #16]
 801a242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a246:	610b      	str	r3, [r1, #16]
 801a248:	6953      	ldr	r3, [r2, #20]
 801a24a:	b993      	cbnz	r3, 801a272 <dma_multi_data_mode_init+0x76>
 801a24c:	690b      	ldr	r3, [r1, #16]
 801a24e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801a252:	610b      	str	r3, [r1, #16]
 801a254:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801a256:	b983      	cbnz	r3, 801a27a <dma_multi_data_mode_init+0x7e>
 801a258:	690b      	ldr	r3, [r1, #16]
 801a25a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a25e:	610b      	str	r3, [r1, #16]
 801a260:	bd10      	pop	{r4, pc}
 801a262:	2b01      	cmp	r3, #1
 801a264:	690b      	ldr	r3, [r1, #16]
 801a266:	bf0c      	ite	eq
 801a268:	f423 7300 	biceq.w	r3, r3, #512	@ 0x200
 801a26c:	f443 4300 	orrne.w	r3, r3, #32768	@ 0x8000
 801a270:	e7e9      	b.n	801a246 <dma_multi_data_mode_init+0x4a>
 801a272:	690b      	ldr	r3, [r1, #16]
 801a274:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801a278:	e7eb      	b.n	801a252 <dma_multi_data_mode_init+0x56>
 801a27a:	690b      	ldr	r3, [r1, #16]
 801a27c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a280:	e7ed      	b.n	801a25e <dma_multi_data_mode_init+0x62>
 801a282:	bf00      	nop
 801a284:	fe1c873f 	mrc2	7, 0, r8, cr12, cr15, {1}

0801a288 <dma_circulation_disable>:
 801a288:	2318      	movs	r3, #24
 801a28a:	4359      	muls	r1, r3
 801a28c:	3010      	adds	r0, #16
 801a28e:	580b      	ldr	r3, [r1, r0]
 801a290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a294:	500b      	str	r3, [r1, r0]
 801a296:	4770      	bx	lr

0801a298 <dma_channel_subperipheral_select>:
 801a298:	2318      	movs	r3, #24
 801a29a:	4359      	muls	r1, r3
 801a29c:	3010      	adds	r0, #16
 801a29e:	580b      	ldr	r3, [r1, r0]
 801a2a0:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 801a2a4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 801a2a8:	500b      	str	r3, [r1, r0]
 801a2aa:	4770      	bx	lr

0801a2ac <dma_flag_clear>:
 801a2ac:	2903      	cmp	r1, #3
 801a2ae:	b530      	push	{r4, r5, lr}
 801a2b0:	d80a      	bhi.n	801a2c8 <dma_flag_clear+0x1c>
 801a2b2:	2506      	movs	r5, #6
 801a2b4:	084c      	lsrs	r4, r1, #1
 801a2b6:	4369      	muls	r1, r5
 801a2b8:	6883      	ldr	r3, [r0, #8]
 801a2ba:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a2be:	fa02 f101 	lsl.w	r1, r2, r1
 801a2c2:	4319      	orrs	r1, r3
 801a2c4:	6081      	str	r1, [r0, #8]
 801a2c6:	bd30      	pop	{r4, r5, pc}
 801a2c8:	3904      	subs	r1, #4
 801a2ca:	b2cb      	uxtb	r3, r1
 801a2cc:	2506      	movs	r5, #6
 801a2ce:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801a2d2:	436b      	muls	r3, r5
 801a2d4:	68c4      	ldr	r4, [r0, #12]
 801a2d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a2da:	409a      	lsls	r2, r3
 801a2dc:	4322      	orrs	r2, r4
 801a2de:	60c2      	str	r2, [r0, #12]
 801a2e0:	e7f1      	b.n	801a2c6 <dma_flag_clear+0x1a>

0801a2e2 <dma_interrupt_flag_clear>:
 801a2e2:	f7ff bfe3 	b.w	801a2ac <dma_flag_clear>
	...

0801a2e8 <enet_software_reset>:
 801a2e8:	4b07      	ldr	r3, [pc, #28]	@ (801a308 <enet_software_reset+0x20>)
 801a2ea:	681a      	ldr	r2, [r3, #0]
 801a2ec:	f042 0201 	orr.w	r2, r2, #1
 801a2f0:	601a      	str	r2, [r3, #0]
 801a2f2:	4a06      	ldr	r2, [pc, #24]	@ (801a30c <enet_software_reset+0x24>)
 801a2f4:	6819      	ldr	r1, [r3, #0]
 801a2f6:	07c9      	lsls	r1, r1, #31
 801a2f8:	d501      	bpl.n	801a2fe <enet_software_reset+0x16>
 801a2fa:	3a01      	subs	r2, #1
 801a2fc:	d1fa      	bne.n	801a2f4 <enet_software_reset+0xc>
 801a2fe:	6818      	ldr	r0, [r3, #0]
 801a300:	43c0      	mvns	r0, r0
 801a302:	f000 0001 	and.w	r0, r0, #1
 801a306:	4770      	bx	lr
 801a308:	40029000 	andmi	r9, r2, r0
 801a30c:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

0801a310 <enet_descriptors_chain_init>:
 801a310:	f5b0 0fe0 	cmp.w	r0, #7340032	@ 0x700000
 801a314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a316:	4a19      	ldr	r2, [pc, #100]	@ (801a37c <enet_descriptors_chain_init+0x6c>)
 801a318:	d125      	bne.n	801a366 <enet_descriptors_chain_init+0x56>
 801a31a:	4b19      	ldr	r3, [pc, #100]	@ (801a380 <enet_descriptors_chain_init+0x70>)
 801a31c:	6113      	str	r3, [r2, #16]
 801a31e:	4a19      	ldr	r2, [pc, #100]	@ (801a384 <enet_descriptors_chain_init+0x74>)
 801a320:	4c19      	ldr	r4, [pc, #100]	@ (801a388 <enet_descriptors_chain_init+0x78>)
 801a322:	6013      	str	r3, [r2, #0]
 801a324:	2500      	movs	r5, #0
 801a326:	f44f 1680 	mov.w	r6, #1048576	@ 0x100000
 801a32a:	2002      	movs	r0, #2
 801a32c:	4917      	ldr	r1, [pc, #92]	@ (801a38c <enet_descriptors_chain_init+0x7c>)
 801a32e:	2200      	movs	r2, #0
 801a330:	600a      	str	r2, [r1, #0]
 801a332:	4917      	ldr	r1, [pc, #92]	@ (801a390 <enet_descriptors_chain_init+0x80>)
 801a334:	f240 5ef4 	movw	lr, #1524	@ 0x5f4
 801a338:	600a      	str	r2, [r1, #0]
 801a33a:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801a33e:	f103 0110 	add.w	r1, r3, #16
 801a342:	fb0e 4702 	mla	r7, lr, r2, r4
 801a346:	f841 7c08 	str.w	r7, [r1, #-8]
 801a34a:	4594      	cmp	ip, r2
 801a34c:	bf94      	ite	ls
 801a34e:	461f      	movls	r7, r3
 801a350:	460f      	movhi	r7, r1
 801a352:	3201      	adds	r2, #1
 801a354:	4290      	cmp	r0, r2
 801a356:	e941 6504 	strd	r6, r5, [r1, #-16]
 801a35a:	f841 7c04 	str.w	r7, [r1, #-4]
 801a35e:	f101 0110 	add.w	r1, r1, #16
 801a362:	d1ee      	bne.n	801a342 <enet_descriptors_chain_init+0x32>
 801a364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a366:	4b0b      	ldr	r3, [pc, #44]	@ (801a394 <enet_descriptors_chain_init+0x84>)
 801a368:	60d3      	str	r3, [r2, #12]
 801a36a:	4a0b      	ldr	r2, [pc, #44]	@ (801a398 <enet_descriptors_chain_init+0x88>)
 801a36c:	4c0b      	ldr	r4, [pc, #44]	@ (801a39c <enet_descriptors_chain_init+0x8c>)
 801a36e:	6013      	str	r3, [r2, #0]
 801a370:	f244 55f4 	movw	r5, #17908	@ 0x45f4
 801a374:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801a378:	2022      	movs	r0, #34	@ 0x22
 801a37a:	e7d7      	b.n	801a32c <enet_descriptors_chain_init+0x1c>
 801a37c:	40029000 	andmi	r9, r2, r0
 801a380:	2001ba88 	andcs	fp, r1, r8, lsl #21
 801a384:	2000e434 	andcs	lr, r0, r4, lsr r4
 801a388:	2000e438 	andcs	lr, r0, r8, lsr r4
 801a38c:	2000e428 	andcs	lr, r0, r8, lsr #8
 801a390:	2000e42c 	andcs	lr, r0, ip, lsr #8
 801a394:	2001baa8 	andcs	fp, r1, r8, lsr #21
 801a398:	2000e430 	andcs	lr, r0, r0, lsr r4
 801a39c:	2000f020 	andcs	pc, r0, r0, lsr #32

0801a3a0 <enet_transmit_checksum_config>:
 801a3a0:	6803      	ldr	r3, [r0, #0]
 801a3a2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 801a3a6:	430b      	orrs	r3, r1
 801a3a8:	6003      	str	r3, [r0, #0]
 801a3aa:	4770      	bx	lr

0801a3ac <enet_mac_address_set>:
 801a3ac:	4b03      	ldr	r3, [pc, #12]	@ (801a3bc <enet_mac_address_set+0x10>)
 801a3ae:	888a      	ldrh	r2, [r1, #4]
 801a3b0:	50c2      	str	r2, [r0, r3]
 801a3b2:	3304      	adds	r3, #4
 801a3b4:	680a      	ldr	r2, [r1, #0]
 801a3b6:	50c2      	str	r2, [r0, r3]
 801a3b8:	4770      	bx	lr
 801a3ba:	bf00      	nop
 801a3bc:	40028040 	andmi	r8, r2, r0, asr #32

0801a3c0 <enet_rx_enable>:
 801a3c0:	4a05      	ldr	r2, [pc, #20]	@ (801a3d8 <enet_rx_enable+0x18>)
 801a3c2:	6813      	ldr	r3, [r2, #0]
 801a3c4:	f043 0304 	orr.w	r3, r3, #4
 801a3c8:	6013      	str	r3, [r2, #0]
 801a3ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a3ce:	6993      	ldr	r3, [r2, #24]
 801a3d0:	f043 0302 	orr.w	r3, r3, #2
 801a3d4:	6193      	str	r3, [r2, #24]
 801a3d6:	4770      	bx	lr
 801a3d8:	40028000 	andmi	r8, r2, r0

0801a3dc <enet_phy_write_read>:
 801a3dc:	b530      	push	{r4, r5, lr}
 801a3de:	4d12      	ldr	r5, [pc, #72]	@ (801a428 <enet_phy_write_read+0x4c>)
 801a3e0:	4604      	mov	r4, r0
 801a3e2:	6928      	ldr	r0, [r5, #16]
 801a3e4:	0192      	lsls	r2, r2, #6
 801a3e6:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
 801a3ea:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 801a3ee:	f020 00c3 	bic.w	r0, r0, #195	@ 0xc3
 801a3f2:	4302      	orrs	r2, r0
 801a3f4:	02c9      	lsls	r1, r1, #11
 801a3f6:	b289      	uxth	r1, r1
 801a3f8:	4322      	orrs	r2, r4
 801a3fa:	430a      	orrs	r2, r1
 801a3fc:	2c02      	cmp	r4, #2
 801a3fe:	bf04      	itt	eq
 801a400:	8819      	ldrheq	r1, [r3, #0]
 801a402:	6169      	streq	r1, [r5, #20]
 801a404:	f042 0201 	orr.w	r2, r2, #1
 801a408:	612a      	str	r2, [r5, #16]
 801a40a:	4907      	ldr	r1, [pc, #28]	@ (801a428 <enet_phy_write_read+0x4c>)
 801a40c:	4a07      	ldr	r2, [pc, #28]	@ (801a42c <enet_phy_write_read+0x50>)
 801a40e:	6908      	ldr	r0, [r1, #16]
 801a410:	07c0      	lsls	r0, r0, #31
 801a412:	d501      	bpl.n	801a418 <enet_phy_write_read+0x3c>
 801a414:	3a01      	subs	r2, #1
 801a416:	d1fa      	bne.n	801a40e <enet_phy_write_read+0x32>
 801a418:	690a      	ldr	r2, [r1, #16]
 801a41a:	43d2      	mvns	r2, r2
 801a41c:	f002 0001 	and.w	r0, r2, #1
 801a420:	b90c      	cbnz	r4, 801a426 <enet_phy_write_read+0x4a>
 801a422:	694a      	ldr	r2, [r1, #20]
 801a424:	801a      	strh	r2, [r3, #0]
 801a426:	bd30      	pop	{r4, r5, pc}
 801a428:	40028000 	andmi	r8, r2, r0
 801a42c:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

0801a430 <enet_init>:
 801a430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a432:	4616      	mov	r6, r2
 801a434:	4a9d      	ldr	r2, [pc, #628]	@ (801a6ac <enet_init+0x27c>)
 801a436:	460d      	mov	r5, r1
 801a438:	6814      	ldr	r4, [r2, #0]
 801a43a:	499d      	ldr	r1, [pc, #628]	@ (801a6b0 <enet_init+0x280>)
 801a43c:	2300      	movs	r3, #0
 801a43e:	4021      	ands	r1, r4
 801a440:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a444:	6011      	str	r1, [r2, #0]
 801a446:	6053      	str	r3, [r2, #4]
 801a448:	6093      	str	r3, [r2, #8]
 801a44a:	60d3      	str	r3, [r2, #12]
 801a44c:	6991      	ldr	r1, [r2, #24]
 801a44e:	f021 01be 	bic.w	r1, r1, #190	@ 0xbe
 801a452:	0409      	lsls	r1, r1, #16
 801a454:	0c09      	lsrs	r1, r1, #16
 801a456:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801a45a:	6191      	str	r1, [r2, #24]
 801a45c:	4995      	ldr	r1, [pc, #596]	@ (801a6b4 <enet_init+0x284>)
 801a45e:	61d3      	str	r3, [r2, #28]
 801a460:	698c      	ldr	r4, [r1, #24]
 801a462:	4a95      	ldr	r2, [pc, #596]	@ (801a6b8 <enet_init+0x288>)
 801a464:	4022      	ands	r2, r4
 801a466:	f042 7208 	orr.w	r2, r2, #35651584	@ 0x2200000
 801a46a:	618a      	str	r2, [r1, #24]
 801a46c:	680a      	ldr	r2, [r1, #0]
 801a46e:	4a93      	ldr	r2, [pc, #588]	@ (801a6bc <enet_init+0x28c>)
 801a470:	600a      	str	r2, [r1, #0]
 801a472:	2801      	cmp	r0, #1
 801a474:	d146      	bne.n	801a504 <enet_init+0xd4>
 801a476:	4f92      	ldr	r7, [pc, #584]	@ (801a6c0 <enet_init+0x290>)
 801a478:	461c      	mov	r4, r3
 801a47a:	2201      	movs	r2, #1
 801a47c:	4611      	mov	r1, r2
 801a47e:	f10d 0306 	add.w	r3, sp, #6
 801a482:	2000      	movs	r0, #0
 801a484:	f7ff ffaa 	bl	801a3dc <enet_phy_write_read>
 801a488:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a48c:	f002 0204 	and.w	r2, r2, #4
 801a490:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a494:	3401      	adds	r4, #1
 801a496:	b922      	cbnz	r2, 801a4a2 <enet_init+0x72>
 801a498:	42bc      	cmp	r4, r7
 801a49a:	d1ee      	bne.n	801a47a <enet_init+0x4a>
 801a49c:	2000      	movs	r0, #0
 801a49e:	b003      	add	sp, #12
 801a4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4a2:	42bc      	cmp	r4, r7
 801a4a4:	d0fa      	beq.n	801a49c <enet_init+0x6c>
 801a4a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801a4aa:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a4ae:	2101      	movs	r1, #1
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	2002      	movs	r0, #2
 801a4b4:	f7ff ff92 	bl	801a3dc <enet_phy_write_read>
 801a4b8:	2800      	cmp	r0, #0
 801a4ba:	d0ef      	beq.n	801a49c <enet_init+0x6c>
 801a4bc:	4f80      	ldr	r7, [pc, #512]	@ (801a6c0 <enet_init+0x290>)
 801a4be:	2400      	movs	r4, #0
 801a4c0:	2201      	movs	r2, #1
 801a4c2:	4611      	mov	r1, r2
 801a4c4:	f10d 0306 	add.w	r3, sp, #6
 801a4c8:	2000      	movs	r0, #0
 801a4ca:	f7ff ff87 	bl	801a3dc <enet_phy_write_read>
 801a4ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a4d2:	f002 0220 	and.w	r2, r2, #32
 801a4d6:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a4da:	3401      	adds	r4, #1
 801a4dc:	b912      	cbnz	r2, 801a4e4 <enet_init+0xb4>
 801a4de:	42bc      	cmp	r4, r7
 801a4e0:	d1ee      	bne.n	801a4c0 <enet_init+0x90>
 801a4e2:	e7db      	b.n	801a49c <enet_init+0x6c>
 801a4e4:	42bc      	cmp	r4, r7
 801a4e6:	d0d9      	beq.n	801a49c <enet_init+0x6c>
 801a4e8:	2101      	movs	r1, #1
 801a4ea:	2210      	movs	r2, #16
 801a4ec:	2000      	movs	r0, #0
 801a4ee:	f7ff ff75 	bl	801a3dc <enet_phy_write_read>
 801a4f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a4f6:	f3c3 0080 	ubfx	r0, r3, #2, #1
 801a4fa:	02c0      	lsls	r0, r0, #11
 801a4fc:	0799      	lsls	r1, r3, #30
 801a4fe:	bf58      	it	pl
 801a500:	f440 4080 	orrpl.w	r0, r0, #16384	@ 0x4000
 801a504:	4b69      	ldr	r3, [pc, #420]	@ (801a6ac <enet_init+0x27c>)
 801a506:	681a      	ldr	r2, [r3, #0]
 801a508:	f422 42b0 	bic.w	r2, r2, #22528	@ 0x5800
 801a50c:	4310      	orrs	r0, r2
 801a50e:	056a      	lsls	r2, r5, #21
 801a510:	6018      	str	r0, [r3, #0]
 801a512:	d50b      	bpl.n	801a52c <enet_init+0xfc>
 801a514:	681a      	ldr	r2, [r3, #0]
 801a516:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801a51a:	601a      	str	r2, [r3, #0]
 801a51c:	4a65      	ldr	r2, [pc, #404]	@ (801a6b4 <enet_init+0x284>)
 801a51e:	6993      	ldr	r3, [r2, #24]
 801a520:	f005 6580 	and.w	r5, r5, #67108864	@ 0x4000000
 801a524:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a528:	431d      	orrs	r5, r3
 801a52a:	6195      	str	r5, [r2, #24]
 801a52c:	485f      	ldr	r0, [pc, #380]	@ (801a6ac <enet_init+0x27c>)
 801a52e:	6843      	ldr	r3, [r0, #4]
 801a530:	431e      	orrs	r6, r3
 801a532:	4b64      	ldr	r3, [pc, #400]	@ (801a6c4 <enet_init+0x294>)
 801a534:	6046      	str	r6, [r0, #4]
 801a536:	681a      	ldr	r2, [r3, #0]
 801a538:	07d7      	lsls	r7, r2, #31
 801a53a:	d513      	bpl.n	801a564 <enet_init+0x134>
 801a53c:	6801      	ldr	r1, [r0, #0]
 801a53e:	685a      	ldr	r2, [r3, #4]
 801a540:	4c61      	ldr	r4, [pc, #388]	@ (801a6c8 <enet_init+0x298>)
 801a542:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 801a546:	4014      	ands	r4, r2
 801a548:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801a54c:	4321      	orrs	r1, r4
 801a54e:	6001      	str	r1, [r0, #0]
 801a550:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801a554:	0892      	lsrs	r2, r2, #2
 801a556:	6981      	ldr	r1, [r0, #24]
 801a558:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 801a55c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 801a560:	430a      	orrs	r2, r1
 801a562:	6182      	str	r2, [r0, #24]
 801a564:	681a      	ldr	r2, [r3, #0]
 801a566:	0796      	lsls	r6, r2, #30
 801a568:	d508      	bpl.n	801a57c <enet_init+0x14c>
 801a56a:	4952      	ldr	r1, [pc, #328]	@ (801a6b4 <enet_init+0x284>)
 801a56c:	6898      	ldr	r0, [r3, #8]
 801a56e:	680a      	ldr	r2, [r1, #0]
 801a570:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 801a574:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801a578:	4302      	orrs	r2, r0
 801a57a:	600a      	str	r2, [r1, #0]
 801a57c:	681a      	ldr	r2, [r3, #0]
 801a57e:	0755      	lsls	r5, r2, #29
 801a580:	d508      	bpl.n	801a594 <enet_init+0x164>
 801a582:	494c      	ldr	r1, [pc, #304]	@ (801a6b4 <enet_init+0x284>)
 801a584:	68d8      	ldr	r0, [r3, #12]
 801a586:	680a      	ldr	r2, [r1, #0]
 801a588:	f422 027e 	bic.w	r2, r2, #16646144	@ 0xfe0000
 801a58c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 801a590:	4302      	orrs	r2, r0
 801a592:	600a      	str	r2, [r1, #0]
 801a594:	681a      	ldr	r2, [r3, #0]
 801a596:	0714      	lsls	r4, r2, #28
 801a598:	d508      	bpl.n	801a5ac <enet_init+0x17c>
 801a59a:	4946      	ldr	r1, [pc, #280]	@ (801a6b4 <enet_init+0x284>)
 801a59c:	6918      	ldr	r0, [r3, #16]
 801a59e:	680a      	ldr	r2, [r1, #0]
 801a5a0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801a5a4:	f022 0202 	bic.w	r2, r2, #2
 801a5a8:	4302      	orrs	r2, r0
 801a5aa:	600a      	str	r2, [r1, #0]
 801a5ac:	681a      	ldr	r2, [r3, #0]
 801a5ae:	06d0      	lsls	r0, r2, #27
 801a5b0:	d506      	bpl.n	801a5c0 <enet_init+0x190>
 801a5b2:	4940      	ldr	r1, [pc, #256]	@ (801a6b4 <enet_init+0x284>)
 801a5b4:	4a45      	ldr	r2, [pc, #276]	@ (801a6cc <enet_init+0x29c>)
 801a5b6:	6988      	ldr	r0, [r1, #24]
 801a5b8:	4002      	ands	r2, r0
 801a5ba:	6958      	ldr	r0, [r3, #20]
 801a5bc:	4302      	orrs	r2, r0
 801a5be:	618a      	str	r2, [r1, #24]
 801a5c0:	681a      	ldr	r2, [r3, #0]
 801a5c2:	0691      	lsls	r1, r2, #26
 801a5c4:	d511      	bpl.n	801a5ea <enet_init+0x1ba>
 801a5c6:	483b      	ldr	r0, [pc, #236]	@ (801a6b4 <enet_init+0x284>)
 801a5c8:	699a      	ldr	r2, [r3, #24]
 801a5ca:	6981      	ldr	r1, [r0, #24]
 801a5cc:	4c40      	ldr	r4, [pc, #256]	@ (801a6d0 <enet_init+0x2a0>)
 801a5ce:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 801a5d2:	4014      	ands	r4, r2
 801a5d4:	f021 0104 	bic.w	r1, r1, #4
 801a5d8:	4321      	orrs	r1, r4
 801a5da:	6181      	str	r1, [r0, #24]
 801a5dc:	6801      	ldr	r1, [r0, #0]
 801a5de:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 801a5e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801a5e6:	430a      	orrs	r2, r1
 801a5e8:	6002      	str	r2, [r0, #0]
 801a5ea:	681a      	ldr	r2, [r3, #0]
 801a5ec:	0652      	lsls	r2, r2, #25
 801a5ee:	d506      	bpl.n	801a5fe <enet_init+0x1ce>
 801a5f0:	492e      	ldr	r1, [pc, #184]	@ (801a6ac <enet_init+0x27c>)
 801a5f2:	69d8      	ldr	r0, [r3, #28]
 801a5f4:	69ca      	ldr	r2, [r1, #28]
 801a5f6:	f36f 0210 	bfc	r2, #0, #17
 801a5fa:	4302      	orrs	r2, r0
 801a5fc:	61ca      	str	r2, [r1, #28]
 801a5fe:	681a      	ldr	r2, [r3, #0]
 801a600:	0617      	lsls	r7, r2, #24
 801a602:	d517      	bpl.n	801a634 <enet_init+0x204>
 801a604:	4c29      	ldr	r4, [pc, #164]	@ (801a6ac <enet_init+0x27c>)
 801a606:	6a1a      	ldr	r2, [r3, #32]
 801a608:	69a0      	ldr	r0, [r4, #24]
 801a60a:	f020 00be 	bic.w	r0, r0, #190	@ 0xbe
 801a60e:	f422 417f 	bic.w	r1, r2, #65280	@ 0xff00
 801a612:	0400      	lsls	r0, r0, #16
 801a614:	0c00      	lsrs	r0, r0, #16
 801a616:	f021 0141 	bic.w	r1, r1, #65	@ 0x41
 801a61a:	4301      	orrs	r1, r0
 801a61c:	4825      	ldr	r0, [pc, #148]	@ (801a6b4 <enet_init+0x284>)
 801a61e:	61a1      	str	r1, [r4, #24]
 801a620:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
 801a624:	0a12      	lsrs	r2, r2, #8
 801a626:	f021 0177 	bic.w	r1, r1, #119	@ 0x77
 801a62a:	f002 0277 	and.w	r2, r2, #119	@ 0x77
 801a62e:	430a      	orrs	r2, r1
 801a630:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 801a634:	681a      	ldr	r2, [r3, #0]
 801a636:	05d6      	lsls	r6, r2, #23
 801a638:	bf42      	ittt	mi
 801a63a:	4a1c      	ldrmi	r2, [pc, #112]	@ (801a6ac <enet_init+0x27c>)
 801a63c:	6a59      	ldrmi	r1, [r3, #36]	@ 0x24
 801a63e:	6091      	strmi	r1, [r2, #8]
 801a640:	681a      	ldr	r2, [r3, #0]
 801a642:	0595      	lsls	r5, r2, #22
 801a644:	bf42      	ittt	mi
 801a646:	4a19      	ldrmi	r2, [pc, #100]	@ (801a6ac <enet_init+0x27c>)
 801a648:	6a99      	ldrmi	r1, [r3, #40]	@ 0x28
 801a64a:	60d1      	strmi	r1, [r2, #12]
 801a64c:	681a      	ldr	r2, [r3, #0]
 801a64e:	0554      	lsls	r4, r2, #21
 801a650:	d508      	bpl.n	801a664 <enet_init+0x234>
 801a652:	4916      	ldr	r1, [pc, #88]	@ (801a6ac <enet_init+0x27c>)
 801a654:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801a656:	684a      	ldr	r2, [r1, #4]
 801a658:	f422 62fb 	bic.w	r2, r2, #2008	@ 0x7d8
 801a65c:	f022 0206 	bic.w	r2, r2, #6
 801a660:	4302      	orrs	r2, r0
 801a662:	604a      	str	r2, [r1, #4]
 801a664:	681a      	ldr	r2, [r3, #0]
 801a666:	0510      	lsls	r0, r2, #20
 801a668:	d508      	bpl.n	801a67c <enet_init+0x24c>
 801a66a:	4910      	ldr	r1, [pc, #64]	@ (801a6ac <enet_init+0x27c>)
 801a66c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801a66e:	680a      	ldr	r2, [r1, #0]
 801a670:	f422 3291 	bic.w	r2, r2, #74240	@ 0x12200
 801a674:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801a678:	4302      	orrs	r2, r0
 801a67a:	600a      	str	r2, [r1, #0]
 801a67c:	681a      	ldr	r2, [r3, #0]
 801a67e:	04d1      	lsls	r1, r2, #19
 801a680:	d506      	bpl.n	801a690 <enet_init+0x260>
 801a682:	490a      	ldr	r1, [pc, #40]	@ (801a6ac <enet_init+0x27c>)
 801a684:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801a686:	680a      	ldr	r2, [r1, #0]
 801a688:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 801a68c:	4302      	orrs	r2, r0
 801a68e:	600a      	str	r2, [r1, #0]
 801a690:	681a      	ldr	r2, [r3, #0]
 801a692:	0492      	lsls	r2, r2, #18
 801a694:	d401      	bmi.n	801a69a <enet_init+0x26a>
 801a696:	2001      	movs	r0, #1
 801a698:	e701      	b.n	801a49e <enet_init+0x6e>
 801a69a:	4904      	ldr	r1, [pc, #16]	@ (801a6ac <enet_init+0x27c>)
 801a69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a69e:	680a      	ldr	r2, [r1, #0]
 801a6a0:	f422 2260 	bic.w	r2, r2, #917504	@ 0xe0000
 801a6a4:	4313      	orrs	r3, r2
 801a6a6:	600b      	str	r3, [r1, #0]
 801a6a8:	e7f5      	b.n	801a696 <enet_init+0x266>
 801a6aa:	bf00      	nop
 801a6ac:	40028000 	andmi	r8, r2, r0
 801a6b0:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	@ 0xffffffc4
 801a6b4:	40029000 	andmi	r9, r2, r0
 801a6b8:	f8de3f23 			@ <UNDEFINED> instruction: 0xf8de3f23
 801a6bc:	02c16000 	sbceq	r6, r1, #0
 801a6c0:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>
 801a6c4:	2000e3ec 	andcs	lr, r0, ip, ror #7
 801a6c8:	02000080 	andeq	r0, r0, #128	@ 0x80
 801a6cc:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	@ 0x39c
 801a6d0:	01000004 	tsteq	r0, r4

0801a6d4 <enet_txfifo_flush>:
 801a6d4:	4a08      	ldr	r2, [pc, #32]	@ (801a6f8 <enet_txfifo_flush+0x24>)
 801a6d6:	6993      	ldr	r3, [r2, #24]
 801a6d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a6dc:	6193      	str	r3, [r2, #24]
 801a6de:	4b07      	ldr	r3, [pc, #28]	@ (801a6fc <enet_txfifo_flush+0x28>)
 801a6e0:	6990      	ldr	r0, [r2, #24]
 801a6e2:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 801a6e6:	d003      	beq.n	801a6f0 <enet_txfifo_flush+0x1c>
 801a6e8:	3b01      	subs	r3, #1
 801a6ea:	d1f9      	bne.n	801a6e0 <enet_txfifo_flush+0xc>
 801a6ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801a6f0:	fab0 f080 	clz	r0, r0
 801a6f4:	0940      	lsrs	r0, r0, #5
 801a6f6:	4770      	bx	lr
 801a6f8:	40029000 	andmi	r9, r2, r0
 801a6fc:	0004ffff 	strdeq	pc, [r4], -pc	@ <UNPREDICTABLE>

0801a700 <enet_tx_enable>:
 801a700:	4a06      	ldr	r2, [pc, #24]	@ (801a71c <enet_tx_enable+0x1c>)
 801a702:	b508      	push	{r3, lr}
 801a704:	6813      	ldr	r3, [r2, #0]
 801a706:	f043 0308 	orr.w	r3, r3, #8
 801a70a:	6013      	str	r3, [r2, #0]
 801a70c:	f7ff ffe2 	bl	801a6d4 <enet_txfifo_flush>
 801a710:	4a03      	ldr	r2, [pc, #12]	@ (801a720 <enet_tx_enable+0x20>)
 801a712:	6993      	ldr	r3, [r2, #24]
 801a714:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a718:	6193      	str	r3, [r2, #24]
 801a71a:	bd08      	pop	{r3, pc}
 801a71c:	40028000 	andmi	r8, r2, r0
 801a720:	40029000 	andmi	r9, r2, r0

0801a724 <enet_enable>:
 801a724:	b508      	push	{r3, lr}
 801a726:	f7ff ffeb 	bl	801a700 <enet_tx_enable>
 801a72a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a72e:	f7ff be47 	b.w	801a3c0 <enet_rx_enable>
	...

0801a734 <enet_desc_information_get>:
 801a734:	2905      	cmp	r1, #5
 801a736:	d820      	bhi.n	801a77a <enet_desc_information_get+0x46>
 801a738:	e8df f001 	tbb	[pc, r1]
 801a73c:	0309191b 	movweq	r1, #39195	@ 0x991b
 801a740:	68401907 	stmdavs	r0, {r0, r1, r2, r8, fp, ip}^
 801a744:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a748:	4770      	bx	lr
 801a74a:	88c0      	ldrh	r0, [r0, #6]
 801a74c:	e7fa      	b.n	801a744 <enet_desc_information_get+0x10>
 801a74e:	6802      	ldr	r2, [r0, #0]
 801a750:	f3c2 430d 	ubfx	r3, r2, #16, #14
 801a754:	2b04      	cmp	r3, #4
 801a756:	d913      	bls.n	801a780 <enet_desc_information_get+0x4c>
 801a758:	490a      	ldr	r1, [pc, #40]	@ (801a784 <enet_desc_information_get+0x50>)
 801a75a:	6809      	ldr	r1, [r1, #0]
 801a75c:	0189      	lsls	r1, r1, #6
 801a75e:	f1a3 0004 	sub.w	r0, r3, #4
 801a762:	d50e      	bpl.n	801a782 <enet_desc_information_get+0x4e>
 801a764:	f012 0f20 	tst.w	r2, #32
 801a768:	bf18      	it	ne
 801a76a:	4618      	movne	r0, r3
 801a76c:	4770      	bx	lr
 801a76e:	6880      	ldr	r0, [r0, #8]
 801a770:	4770      	bx	lr
 801a772:	6800      	ldr	r0, [r0, #0]
 801a774:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 801a778:	4770      	bx	lr
 801a77a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a77e:	4770      	bx	lr
 801a780:	2000      	movs	r0, #0
 801a782:	4770      	bx	lr
 801a784:	40028000 	andmi	r8, r2, r0

0801a788 <enet_initpara_reset>:
 801a788:	4b08      	ldr	r3, [pc, #32]	@ (801a7ac <enet_initpara_reset+0x24>)
 801a78a:	2200      	movs	r2, #0
 801a78c:	e9c3 2200 	strd	r2, r2, [r3]
 801a790:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801a794:	e9c3 2204 	strd	r2, r2, [r3, #16]
 801a798:	e9c3 2206 	strd	r2, r2, [r3, #24]
 801a79c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 801a7a0:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
 801a7a4:	e9c3 220c 	strd	r2, r2, [r3, #48]	@ 0x30
 801a7a8:	639a      	str	r2, [r3, #56]	@ 0x38
 801a7aa:	4770      	bx	lr
 801a7ac:	2000e3ec 	andcs	lr, r0, ip, ror #7

0801a7b0 <enet_deinit>:
 801a7b0:	b508      	push	{r3, lr}
 801a7b2:	f240 4019 	movw	r0, #1049	@ 0x419
 801a7b6:	f000 f8e0 	bl	801a97a <rcu_periph_reset_enable>
 801a7ba:	f240 4019 	movw	r0, #1049	@ 0x419
 801a7be:	f000 f8de 	bl	801a97e <rcu_periph_reset_disable>
 801a7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a7c6:	f7ff bfdf 	b.w	801a788 <enet_initpara_reset>
	...

0801a7cc <fwdgt_enable>:
 801a7cc:	4b02      	ldr	r3, [pc, #8]	@ (801a7d8 <fwdgt_enable+0xc>)
 801a7ce:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 801a7d2:	601a      	str	r2, [r3, #0]
 801a7d4:	4770      	bx	lr
 801a7d6:	bf00      	nop
 801a7d8:	40003000 	andmi	r3, r0, r0

0801a7dc <fwdgt_counter_reload>:
 801a7dc:	4b02      	ldr	r3, [pc, #8]	@ (801a7e8 <fwdgt_counter_reload+0xc>)
 801a7de:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 801a7e2:	601a      	str	r2, [r3, #0]
 801a7e4:	4770      	bx	lr
 801a7e6:	bf00      	nop
 801a7e8:	40003000 	andmi	r3, r0, r0

0801a7ec <fwdgt_config>:
 801a7ec:	4a12      	ldr	r2, [pc, #72]	@ (801a838 <fwdgt_config+0x4c>)
 801a7ee:	b510      	push	{r4, lr}
 801a7f0:	f245 5355 	movw	r3, #21845	@ 0x5555
 801a7f4:	4c11      	ldr	r4, [pc, #68]	@ (801a83c <fwdgt_config+0x50>)
 801a7f6:	6013      	str	r3, [r2, #0]
 801a7f8:	68d3      	ldr	r3, [r2, #12]
 801a7fa:	3c01      	subs	r4, #1
 801a7fc:	f003 0301 	and.w	r3, r3, #1
 801a800:	d013      	beq.n	801a82a <fwdgt_config+0x3e>
 801a802:	2b00      	cmp	r3, #0
 801a804:	d1f8      	bne.n	801a7f8 <fwdgt_config+0xc>
 801a806:	6051      	str	r1, [r2, #4]
 801a808:	490c      	ldr	r1, [pc, #48]	@ (801a83c <fwdgt_config+0x50>)
 801a80a:	4a0b      	ldr	r2, [pc, #44]	@ (801a838 <fwdgt_config+0x4c>)
 801a80c:	68d3      	ldr	r3, [r2, #12]
 801a80e:	3901      	subs	r1, #1
 801a810:	f003 0302 	and.w	r3, r3, #2
 801a814:	d00d      	beq.n	801a832 <fwdgt_config+0x46>
 801a816:	2b00      	cmp	r3, #0
 801a818:	d1f8      	bne.n	801a80c <fwdgt_config+0x20>
 801a81a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801a81e:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
 801a822:	6090      	str	r0, [r2, #8]
 801a824:	6013      	str	r3, [r2, #0]
 801a826:	2001      	movs	r0, #1
 801a828:	e002      	b.n	801a830 <fwdgt_config+0x44>
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d0eb      	beq.n	801a806 <fwdgt_config+0x1a>
 801a82e:	2000      	movs	r0, #0
 801a830:	bd10      	pop	{r4, pc}
 801a832:	2b00      	cmp	r3, #0
 801a834:	d1fb      	bne.n	801a82e <fwdgt_config+0x42>
 801a836:	e7f0      	b.n	801a81a <fwdgt_config+0x2e>
 801a838:	40003000 	andmi	r3, r0, r0
 801a83c:	000fffff 	strdeq	pc, [pc], -pc	@ <UNPREDICTABLE>

0801a840 <gpio_mode_set>:
 801a840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a844:	6805      	ldr	r5, [r0, #0]
 801a846:	68c4      	ldr	r4, [r0, #12]
 801a848:	2600      	movs	r6, #0
 801a84a:	f04f 0e01 	mov.w	lr, #1
 801a84e:	f04f 0803 	mov.w	r8, #3
 801a852:	fa0e f706 	lsl.w	r7, lr, r6
 801a856:	421f      	tst	r7, r3
 801a858:	d00d      	beq.n	801a876 <gpio_mode_set+0x36>
 801a85a:	0077      	lsls	r7, r6, #1
 801a85c:	fa08 fc07 	lsl.w	ip, r8, r7
 801a860:	fa01 f907 	lsl.w	r9, r1, r7
 801a864:	ea25 050c 	bic.w	r5, r5, ip
 801a868:	ea24 040c 	bic.w	r4, r4, ip
 801a86c:	fa02 f707 	lsl.w	r7, r2, r7
 801a870:	ea49 0505 	orr.w	r5, r9, r5
 801a874:	433c      	orrs	r4, r7
 801a876:	3601      	adds	r6, #1
 801a878:	2e10      	cmp	r6, #16
 801a87a:	d1ea      	bne.n	801a852 <gpio_mode_set+0x12>
 801a87c:	6005      	str	r5, [r0, #0]
 801a87e:	60c4      	str	r4, [r0, #12]
 801a880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a884 <gpio_output_options_set>:
 801a884:	2901      	cmp	r1, #1
 801a886:	6841      	ldr	r1, [r0, #4]
 801a888:	bf0c      	ite	eq
 801a88a:	4319      	orreq	r1, r3
 801a88c:	4399      	bicne	r1, r3
 801a88e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a890:	6041      	str	r1, [r0, #4]
 801a892:	6881      	ldr	r1, [r0, #8]
 801a894:	2400      	movs	r4, #0
 801a896:	2601      	movs	r6, #1
 801a898:	2703      	movs	r7, #3
 801a89a:	fa06 f504 	lsl.w	r5, r6, r4
 801a89e:	421d      	tst	r5, r3
 801a8a0:	d007      	beq.n	801a8b2 <gpio_output_options_set+0x2e>
 801a8a2:	0065      	lsls	r5, r4, #1
 801a8a4:	fa07 fc05 	lsl.w	ip, r7, r5
 801a8a8:	ea21 010c 	bic.w	r1, r1, ip
 801a8ac:	fa02 f505 	lsl.w	r5, r2, r5
 801a8b0:	4329      	orrs	r1, r5
 801a8b2:	3401      	adds	r4, #1
 801a8b4:	2c10      	cmp	r4, #16
 801a8b6:	d1f0      	bne.n	801a89a <gpio_output_options_set+0x16>
 801a8b8:	6081      	str	r1, [r0, #8]
 801a8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a8bc <gpio_af_set>:
 801a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8be:	6a06      	ldr	r6, [r0, #32]
 801a8c0:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 801a8c2:	2300      	movs	r3, #0
 801a8c4:	f04f 0c01 	mov.w	ip, #1
 801a8c8:	f04f 0e0f 	mov.w	lr, #15
 801a8cc:	fa0c f403 	lsl.w	r4, ip, r3
 801a8d0:	4214      	tst	r4, r2
 801a8d2:	d007      	beq.n	801a8e4 <gpio_af_set+0x28>
 801a8d4:	009c      	lsls	r4, r3, #2
 801a8d6:	fa0e f704 	lsl.w	r7, lr, r4
 801a8da:	ea26 0607 	bic.w	r6, r6, r7
 801a8de:	fa01 f404 	lsl.w	r4, r1, r4
 801a8e2:	4326      	orrs	r6, r4
 801a8e4:	3301      	adds	r3, #1
 801a8e6:	2b08      	cmp	r3, #8
 801a8e8:	d1f0      	bne.n	801a8cc <gpio_af_set+0x10>
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	f04f 0c01 	mov.w	ip, #1
 801a8f0:	f04f 0e0f 	mov.w	lr, #15
 801a8f4:	f103 0408 	add.w	r4, r3, #8
 801a8f8:	fa0c f404 	lsl.w	r4, ip, r4
 801a8fc:	4214      	tst	r4, r2
 801a8fe:	d007      	beq.n	801a910 <gpio_af_set+0x54>
 801a900:	009c      	lsls	r4, r3, #2
 801a902:	fa0e f704 	lsl.w	r7, lr, r4
 801a906:	ea25 0507 	bic.w	r5, r5, r7
 801a90a:	fa01 f404 	lsl.w	r4, r1, r4
 801a90e:	4325      	orrs	r5, r4
 801a910:	3301      	adds	r3, #1
 801a912:	2b08      	cmp	r3, #8
 801a914:	d1ee      	bne.n	801a8f4 <gpio_af_set+0x38>
 801a916:	6206      	str	r6, [r0, #32]
 801a918:	6245      	str	r5, [r0, #36]	@ 0x24
 801a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a91c <pmu_backup_ldo_config>:
 801a91c:	4b04      	ldr	r3, [pc, #16]	@ (801a930 <pmu_backup_ldo_config+0x14>)
 801a91e:	685a      	ldr	r2, [r3, #4]
 801a920:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801a924:	605a      	str	r2, [r3, #4]
 801a926:	685a      	ldr	r2, [r3, #4]
 801a928:	4302      	orrs	r2, r0
 801a92a:	605a      	str	r2, [r3, #4]
 801a92c:	4770      	bx	lr
 801a92e:	bf00      	nop
 801a930:	40007000 	andmi	r7, r0, r0

0801a934 <pmu_backup_write_enable>:
 801a934:	4a02      	ldr	r2, [pc, #8]	@ (801a940 <pmu_backup_write_enable+0xc>)
 801a936:	6813      	ldr	r3, [r2, #0]
 801a938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a93c:	6013      	str	r3, [r2, #0]
 801a93e:	4770      	bx	lr
 801a940:	40007000 	andmi	r7, r0, r0

0801a944 <rcu_periph_clock_enable>:
 801a944:	0983      	lsrs	r3, r0, #6
 801a946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801a94a:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 801a94e:	f000 001f 	and.w	r0, r0, #31
 801a952:	6819      	ldr	r1, [r3, #0]
 801a954:	2201      	movs	r2, #1
 801a956:	4082      	lsls	r2, r0
 801a958:	430a      	orrs	r2, r1
 801a95a:	601a      	str	r2, [r3, #0]
 801a95c:	4770      	bx	lr

0801a95e <rcu_periph_clock_disable>:
 801a95e:	0983      	lsrs	r3, r0, #6
 801a960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801a964:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 801a968:	f000 001f 	and.w	r0, r0, #31
 801a96c:	681a      	ldr	r2, [r3, #0]
 801a96e:	2101      	movs	r1, #1
 801a970:	4081      	lsls	r1, r0
 801a972:	ea22 0201 	bic.w	r2, r2, r1
 801a976:	601a      	str	r2, [r3, #0]
 801a978:	4770      	bx	lr

0801a97a <rcu_periph_reset_enable>:
 801a97a:	f7ff bfe3 	b.w	801a944 <rcu_periph_clock_enable>

0801a97e <rcu_periph_reset_disable>:
 801a97e:	f7ff bfee 	b.w	801a95e <rcu_periph_clock_disable>
	...

0801a984 <rcu_ckout0_config>:
 801a984:	4a04      	ldr	r2, [pc, #16]	@ (801a998 <rcu_ckout0_config+0x14>)
 801a986:	f8d2 3808 	ldr.w	r3, [r2, #2056]	@ 0x808
 801a98a:	f023 63ec 	bic.w	r3, r3, #123731968	@ 0x7600000
 801a98e:	430b      	orrs	r3, r1
 801a990:	4303      	orrs	r3, r0
 801a992:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
 801a996:	4770      	bx	lr
 801a998:	40023000 	andmi	r3, r2, r0

0801a99c <rcu_timer_clock_prescaler_config>:
 801a99c:	f06f 7380 	mvn.w	r3, #16777216	@ 0x1000000
 801a9a0:	4298      	cmp	r0, r3
 801a9a2:	4b05      	ldr	r3, [pc, #20]	@ (801a9b8 <rcu_timer_clock_prescaler_config+0x1c>)
 801a9a4:	f8d3 288c 	ldr.w	r2, [r3, #2188]	@ 0x88c
 801a9a8:	bf0c      	ite	eq
 801a9aa:	f022 7280 	biceq.w	r2, r2, #16777216	@ 0x1000000
 801a9ae:	4302      	orrne	r2, r0
 801a9b0:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
 801a9b4:	4770      	bx	lr
 801a9b6:	bf00      	nop
 801a9b8:	40023000 	andmi	r3, r2, r0

0801a9bc <rcu_clock_freq_get>:
 801a9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9be:	4b35      	ldr	r3, [pc, #212]	@ (801aa94 <rcu_clock_freq_get+0xd8>)
 801a9c0:	b089      	sub	sp, #36	@ 0x24
 801a9c2:	4604      	mov	r4, r0
 801a9c4:	ad04      	add	r5, sp, #16
 801a9c6:	f103 0610 	add.w	r6, r3, #16
 801a9ca:	461f      	mov	r7, r3
 801a9cc:	6818      	ldr	r0, [r3, #0]
 801a9ce:	6859      	ldr	r1, [r3, #4]
 801a9d0:	462a      	mov	r2, r5
 801a9d2:	c203      	stmia	r2!, {r0, r1}
 801a9d4:	3308      	adds	r3, #8
 801a9d6:	42b3      	cmp	r3, r6
 801a9d8:	4615      	mov	r5, r2
 801a9da:	d1f7      	bne.n	801a9cc <rcu_clock_freq_get+0x10>
 801a9dc:	6938      	ldr	r0, [r7, #16]
 801a9de:	6871      	ldr	r1, [r6, #4]
 801a9e0:	4a2d      	ldr	r2, [pc, #180]	@ (801aa98 <rcu_clock_freq_get+0xdc>)
 801a9e2:	466b      	mov	r3, sp
 801a9e4:	c303      	stmia	r3!, {r0, r1}
 801a9e6:	c303      	stmia	r3!, {r0, r1}
 801a9e8:	f8d2 3808 	ldr.w	r3, [r2, #2056]	@ 0x808
 801a9ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a9f0:	2b01      	cmp	r3, #1
 801a9f2:	d03f      	beq.n	801aa74 <rcu_clock_freq_get+0xb8>
 801a9f4:	2b02      	cmp	r3, #2
 801a9f6:	d13f      	bne.n	801aa78 <rcu_clock_freq_get+0xbc>
 801a9f8:	f8d2 0804 	ldr.w	r0, [r2, #2052]	@ 0x804
 801a9fc:	f8d2 1804 	ldr.w	r1, [r2, #2052]	@ 0x804
 801aa00:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 801aa04:	f8d2 2804 	ldr.w	r2, [r2, #2052]	@ 0x804
 801aa08:	4d24      	ldr	r5, [pc, #144]	@ (801aa9c <rcu_clock_freq_get+0xe0>)
 801aa0a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801aa0e:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 801aa12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801aa16:	f103 0301 	add.w	r3, r3, #1
 801aa1a:	4a21      	ldr	r2, [pc, #132]	@ (801aaa0 <rcu_clock_freq_get+0xe4>)
 801aa1c:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801aa20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801aa24:	bf18      	it	ne
 801aa26:	462a      	movne	r2, r5
 801aa28:	fbb2 f2f0 	udiv	r2, r2, r0
 801aa2c:	434a      	muls	r2, r1
 801aa2e:	fbb2 f0f3 	udiv	r0, r2, r3
 801aa32:	4919      	ldr	r1, [pc, #100]	@ (801aa98 <rcu_clock_freq_get+0xdc>)
 801aa34:	f8d1 3808 	ldr.w	r3, [r1, #2056]	@ 0x808
 801aa38:	f8d1 2808 	ldr.w	r2, [r1, #2056]	@ 0x808
 801aa3c:	f3c2 2282 	ubfx	r2, r2, #10, #3
 801aa40:	3220      	adds	r2, #32
 801aa42:	446a      	add	r2, sp
 801aa44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801aa48:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 801aa4c:	f8d1 2808 	ldr.w	r2, [r1, #2056]	@ 0x808
 801aa50:	3320      	adds	r3, #32
 801aa52:	446b      	add	r3, sp
 801aa54:	f3c2 3242 	ubfx	r2, r2, #13, #3
 801aa58:	3220      	adds	r2, #32
 801aa5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801aa5e:	446a      	add	r2, sp
 801aa60:	fa20 f303 	lsr.w	r3, r0, r3
 801aa64:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 801aa68:	2c03      	cmp	r4, #3
 801aa6a:	d807      	bhi.n	801aa7c <rcu_clock_freq_get+0xc0>
 801aa6c:	e8df f004 	tbb	[pc, r4]
 801aa70:	0e0b0907 	vmlaeq.f16	s0, s22, s14	@ <UNPREDICTABLE>
 801aa74:	4809      	ldr	r0, [pc, #36]	@ (801aa9c <rcu_clock_freq_get+0xe0>)
 801aa76:	e7dc      	b.n	801aa32 <rcu_clock_freq_get+0x76>
 801aa78:	4809      	ldr	r0, [pc, #36]	@ (801aaa0 <rcu_clock_freq_get+0xe4>)
 801aa7a:	e7da      	b.n	801aa32 <rcu_clock_freq_get+0x76>
 801aa7c:	2000      	movs	r0, #0
 801aa7e:	b009      	add	sp, #36	@ 0x24
 801aa80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa82:	4618      	mov	r0, r3
 801aa84:	e7fb      	b.n	801aa7e <rcu_clock_freq_get+0xc2>
 801aa86:	fa23 f005 	lsr.w	r0, r3, r5
 801aa8a:	e7f8      	b.n	801aa7e <rcu_clock_freq_get+0xc2>
 801aa8c:	fa23 f002 	lsr.w	r0, r3, r2
 801aa90:	e7f5      	b.n	801aa7e <rcu_clock_freq_get+0xc2>
 801aa92:	bf00      	nop
 801aa94:	0801c9e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, fp, lr, pc}
 801aa98:	40023000 	andmi	r3, r2, r0
 801aa9c:	017d7840 	cmneq	sp, r0, asr #16
 801aaa0:	00f42400 	rscseq	r2, r4, r0, lsl #8

0801aaa4 <syscfg_enet_phy_interface_config>:
 801aaa4:	4a04      	ldr	r2, [pc, #16]	@ (801aab8 <syscfg_enet_phy_interface_config+0x14>)
 801aaa6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	@ 0x804
 801aaaa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801aaae:	4303      	orrs	r3, r0
 801aab0:	f8c2 3804 	str.w	r3, [r2, #2052]	@ 0x804
 801aab4:	4770      	bx	lr
 801aab6:	bf00      	nop
 801aab8:	40013000 	andmi	r3, r1, r0

0801aabc <timer_deinit>:
 801aabc:	b508      	push	{r3, lr}
 801aabe:	4b4e      	ldr	r3, [pc, #312]	@ (801abf8 <timer_deinit+0x13c>)
 801aac0:	4298      	cmp	r0, r3
 801aac2:	f000 8092 	beq.w	801abea <timer_deinit+0x12e>
 801aac6:	d822      	bhi.n	801ab0e <timer_deinit+0x52>
 801aac8:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 801aacc:	4298      	cmp	r0, r3
 801aace:	d062      	beq.n	801ab96 <timer_deinit+0xda>
 801aad0:	d80b      	bhi.n	801aaea <timer_deinit+0x2e>
 801aad2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801aad6:	4298      	cmp	r0, r3
 801aad8:	d04f      	beq.n	801ab7a <timer_deinit+0xbe>
 801aada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801aade:	4298      	cmp	r0, r3
 801aae0:	d052      	beq.n	801ab88 <timer_deinit+0xcc>
 801aae2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801aae6:	d041      	beq.n	801ab6c <timer_deinit+0xb0>
 801aae8:	bd08      	pop	{r3, pc}
 801aaea:	4b44      	ldr	r3, [pc, #272]	@ (801abfc <timer_deinit+0x140>)
 801aaec:	4298      	cmp	r0, r3
 801aaee:	d059      	beq.n	801aba4 <timer_deinit+0xe8>
 801aaf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801aaf4:	4298      	cmp	r0, r3
 801aaf6:	d071      	beq.n	801abdc <timer_deinit+0x120>
 801aaf8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801aafc:	4298      	cmp	r0, r3
 801aafe:	d1f3      	bne.n	801aae8 <timer_deinit+0x2c>
 801ab00:	f640 0004 	movw	r0, #2052	@ 0x804
 801ab04:	f7ff ff39 	bl	801a97a <rcu_periph_reset_enable>
 801ab08:	f640 0004 	movw	r0, #2052	@ 0x804
 801ab0c:	e02a      	b.n	801ab64 <timer_deinit+0xa8>
 801ab0e:	4b3c      	ldr	r3, [pc, #240]	@ (801ac00 <timer_deinit+0x144>)
 801ab10:	4298      	cmp	r0, r3
 801ab12:	d055      	beq.n	801abc0 <timer_deinit+0x104>
 801ab14:	d812      	bhi.n	801ab3c <timer_deinit+0x80>
 801ab16:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801ab1a:	4298      	cmp	r0, r3
 801ab1c:	d01c      	beq.n	801ab58 <timer_deinit+0x9c>
 801ab1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801ab22:	4298      	cmp	r0, r3
 801ab24:	d045      	beq.n	801abb2 <timer_deinit+0xf6>
 801ab26:	f5a3 4364 	sub.w	r3, r3, #58368	@ 0xe400
 801ab2a:	4298      	cmp	r0, r3
 801ab2c:	d1dc      	bne.n	801aae8 <timer_deinit+0x2c>
 801ab2e:	f640 0008 	movw	r0, #2056	@ 0x808
 801ab32:	f7ff ff22 	bl	801a97a <rcu_periph_reset_enable>
 801ab36:	f640 0008 	movw	r0, #2056	@ 0x808
 801ab3a:	e013      	b.n	801ab64 <timer_deinit+0xa8>
 801ab3c:	4b31      	ldr	r3, [pc, #196]	@ (801ac04 <timer_deinit+0x148>)
 801ab3e:	4298      	cmp	r0, r3
 801ab40:	d045      	beq.n	801abce <timer_deinit+0x112>
 801ab42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801ab46:	4298      	cmp	r0, r3
 801ab48:	d1ce      	bne.n	801aae8 <timer_deinit+0x2c>
 801ab4a:	f640 1012 	movw	r0, #2322	@ 0x912
 801ab4e:	f7ff ff14 	bl	801a97a <rcu_periph_reset_enable>
 801ab52:	f640 1012 	movw	r0, #2322	@ 0x912
 801ab56:	e005      	b.n	801ab64 <timer_deinit+0xa8>
 801ab58:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801ab5c:	f7ff ff0d 	bl	801a97a <rcu_periph_reset_enable>
 801ab60:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801ab64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ab68:	f7ff bf09 	b.w	801a97e <rcu_periph_reset_disable>
 801ab6c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801ab70:	f7ff ff03 	bl	801a97a <rcu_periph_reset_enable>
 801ab74:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801ab78:	e7f4      	b.n	801ab64 <timer_deinit+0xa8>
 801ab7a:	f640 0001 	movw	r0, #2049	@ 0x801
 801ab7e:	f7ff fefc 	bl	801a97a <rcu_periph_reset_enable>
 801ab82:	f640 0001 	movw	r0, #2049	@ 0x801
 801ab86:	e7ed      	b.n	801ab64 <timer_deinit+0xa8>
 801ab88:	f640 0002 	movw	r0, #2050	@ 0x802
 801ab8c:	f7ff fef5 	bl	801a97a <rcu_periph_reset_enable>
 801ab90:	f640 0002 	movw	r0, #2050	@ 0x802
 801ab94:	e7e6      	b.n	801ab64 <timer_deinit+0xa8>
 801ab96:	f640 0003 	movw	r0, #2051	@ 0x803
 801ab9a:	f7ff feee 	bl	801a97a <rcu_periph_reset_enable>
 801ab9e:	f640 0003 	movw	r0, #2051	@ 0x803
 801aba2:	e7df      	b.n	801ab64 <timer_deinit+0xa8>
 801aba4:	f640 0005 	movw	r0, #2053	@ 0x805
 801aba8:	f7ff fee7 	bl	801a97a <rcu_periph_reset_enable>
 801abac:	f640 0005 	movw	r0, #2053	@ 0x805
 801abb0:	e7d8      	b.n	801ab64 <timer_deinit+0xa8>
 801abb2:	f640 1001 	movw	r0, #2305	@ 0x901
 801abb6:	f7ff fee0 	bl	801a97a <rcu_periph_reset_enable>
 801abba:	f640 1001 	movw	r0, #2305	@ 0x901
 801abbe:	e7d1      	b.n	801ab64 <timer_deinit+0xa8>
 801abc0:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 801abc4:	f7ff fed9 	bl	801a97a <rcu_periph_reset_enable>
 801abc8:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 801abcc:	e7ca      	b.n	801ab64 <timer_deinit+0xa8>
 801abce:	f640 1011 	movw	r0, #2321	@ 0x911
 801abd2:	f7ff fed2 	bl	801a97a <rcu_periph_reset_enable>
 801abd6:	f640 1011 	movw	r0, #2321	@ 0x911
 801abda:	e7c3      	b.n	801ab64 <timer_deinit+0xa8>
 801abdc:	f640 0006 	movw	r0, #2054	@ 0x806
 801abe0:	f7ff fecb 	bl	801a97a <rcu_periph_reset_enable>
 801abe4:	f640 0006 	movw	r0, #2054	@ 0x806
 801abe8:	e7bc      	b.n	801ab64 <timer_deinit+0xa8>
 801abea:	f640 0007 	movw	r0, #2055	@ 0x807
 801abee:	f7ff fec4 	bl	801a97a <rcu_periph_reset_enable>
 801abf2:	f640 0007 	movw	r0, #2055	@ 0x807
 801abf6:	e7b5      	b.n	801ab64 <timer_deinit+0xa8>
 801abf8:	40001c00 	andmi	r1, r0, r0, lsl #24
 801abfc:	40001400 	andmi	r1, r0, r0, lsl #8
 801ac00:	40014000 	andmi	r4, r1, r0
 801ac04:	40014400 	andmi	r4, r1, r0, lsl #8

0801ac08 <timer_struct_para_init>:
 801ac08:	2300      	movs	r3, #0
 801ac0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ac0e:	e9c0 3300 	strd	r3, r3, [r0]
 801ac12:	6082      	str	r2, [r0, #8]
 801ac14:	7303      	strb	r3, [r0, #12]
 801ac16:	4770      	bx	lr

0801ac18 <timer_init>:
 801ac18:	880b      	ldrh	r3, [r1, #0]
 801ac1a:	4a17      	ldr	r2, [pc, #92]	@ (801ac78 <timer_init+0x60>)
 801ac1c:	b510      	push	{r4, lr}
 801ac1e:	6283      	str	r3, [r0, #40]	@ 0x28
 801ac20:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
 801ac24:	4293      	cmp	r3, r2
 801ac26:	d004      	beq.n	801ac32 <timer_init+0x1a>
 801ac28:	f420 6240 	bic.w	r2, r0, #3072	@ 0xc00
 801ac2c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 801ac30:	d10b      	bne.n	801ac4a <timer_init+0x32>
 801ac32:	6802      	ldr	r2, [r0, #0]
 801ac34:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801ac38:	6002      	str	r2, [r0, #0]
 801ac3a:	6804      	ldr	r4, [r0, #0]
 801ac3c:	884a      	ldrh	r2, [r1, #2]
 801ac3e:	4322      	orrs	r2, r4
 801ac40:	6002      	str	r2, [r0, #0]
 801ac42:	6804      	ldr	r4, [r0, #0]
 801ac44:	888a      	ldrh	r2, [r1, #4]
 801ac46:	4322      	orrs	r2, r4
 801ac48:	6002      	str	r2, [r0, #0]
 801ac4a:	688a      	ldr	r2, [r1, #8]
 801ac4c:	62c2      	str	r2, [r0, #44]	@ 0x2c
 801ac4e:	4a0b      	ldr	r2, [pc, #44]	@ (801ac7c <timer_init+0x64>)
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d00c      	beq.n	801ac6e <timer_init+0x56>
 801ac54:	6802      	ldr	r2, [r0, #0]
 801ac56:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 801ac5a:	6002      	str	r2, [r0, #0]
 801ac5c:	6804      	ldr	r4, [r0, #0]
 801ac5e:	88ca      	ldrh	r2, [r1, #6]
 801ac60:	4322      	orrs	r2, r4
 801ac62:	6002      	str	r2, [r0, #0]
 801ac64:	4a04      	ldr	r2, [pc, #16]	@ (801ac78 <timer_init+0x60>)
 801ac66:	4293      	cmp	r3, r2
 801ac68:	bf04      	itt	eq
 801ac6a:	7b0b      	ldrbeq	r3, [r1, #12]
 801ac6c:	6303      	streq	r3, [r0, #48]	@ 0x30
 801ac6e:	6943      	ldr	r3, [r0, #20]
 801ac70:	f043 0301 	orr.w	r3, r3, #1
 801ac74:	6143      	str	r3, [r0, #20]
 801ac76:	bd10      	pop	{r4, pc}
 801ac78:	40010000 	andmi	r0, r1, r0
 801ac7c:	40001000 	andmi	r1, r0, r0

0801ac80 <timer_enable>:
 801ac80:	6803      	ldr	r3, [r0, #0]
 801ac82:	f043 0301 	orr.w	r3, r3, #1
 801ac86:	6003      	str	r3, [r0, #0]
 801ac88:	4770      	bx	lr

0801ac8a <timer_counter_value_config>:
 801ac8a:	6241      	str	r1, [r0, #36]	@ 0x24
 801ac8c:	4770      	bx	lr

0801ac8e <timer_dma_enable>:
 801ac8e:	68c3      	ldr	r3, [r0, #12]
 801ac90:	4319      	orrs	r1, r3
 801ac92:	60c1      	str	r1, [r0, #12]
 801ac94:	4770      	bx	lr
	...

0801ac98 <timer_channel_output_config>:
 801ac98:	2903      	cmp	r1, #3
 801ac9a:	d83e      	bhi.n	801ad1a <timer_channel_output_config+0x82>
 801ac9c:	e8df f011 	tbh	[pc, r1, lsl #1]
 801aca0:	003e0004 	eorseq	r0, lr, r4
 801aca4:	00bc007d 	adcseq	r0, ip, sp, ror r0
 801aca8:	6a03      	ldr	r3, [r0, #32]
 801acaa:	f023 0301 	bic.w	r3, r3, #1
 801acae:	6203      	str	r3, [r0, #32]
 801acb0:	6983      	ldr	r3, [r0, #24]
 801acb2:	f023 0303 	bic.w	r3, r3, #3
 801acb6:	6183      	str	r3, [r0, #24]
 801acb8:	6a01      	ldr	r1, [r0, #32]
 801acba:	8813      	ldrh	r3, [r2, #0]
 801acbc:	430b      	orrs	r3, r1
 801acbe:	6203      	str	r3, [r0, #32]
 801acc0:	6a03      	ldr	r3, [r0, #32]
 801acc2:	f023 0302 	bic.w	r3, r3, #2
 801acc6:	6203      	str	r3, [r0, #32]
 801acc8:	6a01      	ldr	r1, [r0, #32]
 801acca:	8893      	ldrh	r3, [r2, #4]
 801accc:	430b      	orrs	r3, r1
 801acce:	6203      	str	r3, [r0, #32]
 801acd0:	4b64      	ldr	r3, [pc, #400]	@ (801ae64 <timer_channel_output_config+0x1cc>)
 801acd2:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 801acd6:	4299      	cmp	r1, r3
 801acd8:	d11f      	bne.n	801ad1a <timer_channel_output_config+0x82>
 801acda:	6a03      	ldr	r3, [r0, #32]
 801acdc:	f023 0304 	bic.w	r3, r3, #4
 801ace0:	6203      	str	r3, [r0, #32]
 801ace2:	6a01      	ldr	r1, [r0, #32]
 801ace4:	8853      	ldrh	r3, [r2, #2]
 801ace6:	430b      	orrs	r3, r1
 801ace8:	6203      	str	r3, [r0, #32]
 801acea:	6a03      	ldr	r3, [r0, #32]
 801acec:	f023 0308 	bic.w	r3, r3, #8
 801acf0:	6203      	str	r3, [r0, #32]
 801acf2:	6a01      	ldr	r1, [r0, #32]
 801acf4:	88d3      	ldrh	r3, [r2, #6]
 801acf6:	430b      	orrs	r3, r1
 801acf8:	6203      	str	r3, [r0, #32]
 801acfa:	6843      	ldr	r3, [r0, #4]
 801acfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ad00:	6043      	str	r3, [r0, #4]
 801ad02:	6841      	ldr	r1, [r0, #4]
 801ad04:	8913      	ldrh	r3, [r2, #8]
 801ad06:	430b      	orrs	r3, r1
 801ad08:	6043      	str	r3, [r0, #4]
 801ad0a:	6843      	ldr	r3, [r0, #4]
 801ad0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801ad10:	6043      	str	r3, [r0, #4]
 801ad12:	6841      	ldr	r1, [r0, #4]
 801ad14:	8953      	ldrh	r3, [r2, #10]
 801ad16:	430b      	orrs	r3, r1
 801ad18:	6043      	str	r3, [r0, #4]
 801ad1a:	4770      	bx	lr
 801ad1c:	6a03      	ldr	r3, [r0, #32]
 801ad1e:	8811      	ldrh	r1, [r2, #0]
 801ad20:	f023 0310 	bic.w	r3, r3, #16
 801ad24:	6203      	str	r3, [r0, #32]
 801ad26:	6983      	ldr	r3, [r0, #24]
 801ad28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ad2c:	6183      	str	r3, [r0, #24]
 801ad2e:	6a03      	ldr	r3, [r0, #32]
 801ad30:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801ad34:	6203      	str	r3, [r0, #32]
 801ad36:	6a03      	ldr	r3, [r0, #32]
 801ad38:	8891      	ldrh	r1, [r2, #4]
 801ad3a:	f023 0320 	bic.w	r3, r3, #32
 801ad3e:	6203      	str	r3, [r0, #32]
 801ad40:	6a03      	ldr	r3, [r0, #32]
 801ad42:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801ad46:	6203      	str	r3, [r0, #32]
 801ad48:	4b46      	ldr	r3, [pc, #280]	@ (801ae64 <timer_channel_output_config+0x1cc>)
 801ad4a:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 801ad4e:	4299      	cmp	r1, r3
 801ad50:	d1e3      	bne.n	801ad1a <timer_channel_output_config+0x82>
 801ad52:	6a03      	ldr	r3, [r0, #32]
 801ad54:	8851      	ldrh	r1, [r2, #2]
 801ad56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801ad5a:	6203      	str	r3, [r0, #32]
 801ad5c:	6a03      	ldr	r3, [r0, #32]
 801ad5e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801ad62:	6203      	str	r3, [r0, #32]
 801ad64:	6a03      	ldr	r3, [r0, #32]
 801ad66:	88d1      	ldrh	r1, [r2, #6]
 801ad68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ad6c:	6203      	str	r3, [r0, #32]
 801ad6e:	6a03      	ldr	r3, [r0, #32]
 801ad70:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801ad74:	6203      	str	r3, [r0, #32]
 801ad76:	6843      	ldr	r3, [r0, #4]
 801ad78:	8911      	ldrh	r1, [r2, #8]
 801ad7a:	8952      	ldrh	r2, [r2, #10]
 801ad7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801ad80:	6043      	str	r3, [r0, #4]
 801ad82:	6843      	ldr	r3, [r0, #4]
 801ad84:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 801ad88:	6043      	str	r3, [r0, #4]
 801ad8a:	6843      	ldr	r3, [r0, #4]
 801ad8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ad90:	6043      	str	r3, [r0, #4]
 801ad92:	6843      	ldr	r3, [r0, #4]
 801ad94:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801ad98:	e7be      	b.n	801ad18 <timer_channel_output_config+0x80>
 801ad9a:	6a03      	ldr	r3, [r0, #32]
 801ad9c:	8811      	ldrh	r1, [r2, #0]
 801ad9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ada2:	6203      	str	r3, [r0, #32]
 801ada4:	69c3      	ldr	r3, [r0, #28]
 801ada6:	f023 0303 	bic.w	r3, r3, #3
 801adaa:	61c3      	str	r3, [r0, #28]
 801adac:	6a03      	ldr	r3, [r0, #32]
 801adae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801adb2:	6203      	str	r3, [r0, #32]
 801adb4:	6a03      	ldr	r3, [r0, #32]
 801adb6:	8891      	ldrh	r1, [r2, #4]
 801adb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801adbc:	6203      	str	r3, [r0, #32]
 801adbe:	6a03      	ldr	r3, [r0, #32]
 801adc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801adc4:	6203      	str	r3, [r0, #32]
 801adc6:	4b27      	ldr	r3, [pc, #156]	@ (801ae64 <timer_channel_output_config+0x1cc>)
 801adc8:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 801adcc:	4299      	cmp	r1, r3
 801adce:	d1a4      	bne.n	801ad1a <timer_channel_output_config+0x82>
 801add0:	6a03      	ldr	r3, [r0, #32]
 801add2:	8851      	ldrh	r1, [r2, #2]
 801add4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801add8:	6203      	str	r3, [r0, #32]
 801adda:	6a03      	ldr	r3, [r0, #32]
 801addc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801ade0:	6203      	str	r3, [r0, #32]
 801ade2:	6a03      	ldr	r3, [r0, #32]
 801ade4:	88d1      	ldrh	r1, [r2, #6]
 801ade6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801adea:	6203      	str	r3, [r0, #32]
 801adec:	6a03      	ldr	r3, [r0, #32]
 801adee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801adf2:	6203      	str	r3, [r0, #32]
 801adf4:	6843      	ldr	r3, [r0, #4]
 801adf6:	8911      	ldrh	r1, [r2, #8]
 801adf8:	8952      	ldrh	r2, [r2, #10]
 801adfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801adfe:	6043      	str	r3, [r0, #4]
 801ae00:	6843      	ldr	r3, [r0, #4]
 801ae02:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801ae06:	6043      	str	r3, [r0, #4]
 801ae08:	6843      	ldr	r3, [r0, #4]
 801ae0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ae0e:	6043      	str	r3, [r0, #4]
 801ae10:	6843      	ldr	r3, [r0, #4]
 801ae12:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801ae16:	e77f      	b.n	801ad18 <timer_channel_output_config+0x80>
 801ae18:	6a03      	ldr	r3, [r0, #32]
 801ae1a:	8811      	ldrh	r1, [r2, #0]
 801ae1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ae20:	6203      	str	r3, [r0, #32]
 801ae22:	69c3      	ldr	r3, [r0, #28]
 801ae24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ae28:	61c3      	str	r3, [r0, #28]
 801ae2a:	6a03      	ldr	r3, [r0, #32]
 801ae2c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 801ae30:	6203      	str	r3, [r0, #32]
 801ae32:	6a03      	ldr	r3, [r0, #32]
 801ae34:	8891      	ldrh	r1, [r2, #4]
 801ae36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ae3a:	6203      	str	r3, [r0, #32]
 801ae3c:	6a03      	ldr	r3, [r0, #32]
 801ae3e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 801ae42:	6203      	str	r3, [r0, #32]
 801ae44:	4b07      	ldr	r3, [pc, #28]	@ (801ae64 <timer_channel_output_config+0x1cc>)
 801ae46:	f420 6180 	bic.w	r1, r0, #1024	@ 0x400
 801ae4a:	4299      	cmp	r1, r3
 801ae4c:	f47f af65 	bne.w	801ad1a <timer_channel_output_config+0x82>
 801ae50:	6843      	ldr	r3, [r0, #4]
 801ae52:	8912      	ldrh	r2, [r2, #8]
 801ae54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801ae58:	6043      	str	r3, [r0, #4]
 801ae5a:	6843      	ldr	r3, [r0, #4]
 801ae5c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801ae60:	e75a      	b.n	801ad18 <timer_channel_output_config+0x80>
 801ae62:	bf00      	nop
 801ae64:	40010000 	andmi	r0, r1, r0

0801ae68 <timer_channel_output_mode_config>:
 801ae68:	2903      	cmp	r1, #3
 801ae6a:	d81a      	bhi.n	801aea2 <timer_channel_output_mode_config+0x3a>
 801ae6c:	e8df f001 	tbb	[pc, r1]
 801ae70:	1a120a02 	bne	849d680 <_sidata+0x47bd74>
 801ae74:	6983      	ldr	r3, [r0, #24]
 801ae76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ae7a:	6183      	str	r3, [r0, #24]
 801ae7c:	6983      	ldr	r3, [r0, #24]
 801ae7e:	4313      	orrs	r3, r2
 801ae80:	6183      	str	r3, [r0, #24]
 801ae82:	4770      	bx	lr
 801ae84:	6983      	ldr	r3, [r0, #24]
 801ae86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801ae8a:	6183      	str	r3, [r0, #24]
 801ae8c:	6983      	ldr	r3, [r0, #24]
 801ae8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ae92:	e7f5      	b.n	801ae80 <timer_channel_output_mode_config+0x18>
 801ae94:	69c3      	ldr	r3, [r0, #28]
 801ae96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ae9a:	61c3      	str	r3, [r0, #28]
 801ae9c:	69c3      	ldr	r3, [r0, #28]
 801ae9e:	4313      	orrs	r3, r2
 801aea0:	61c3      	str	r3, [r0, #28]
 801aea2:	4770      	bx	lr
 801aea4:	69c3      	ldr	r3, [r0, #28]
 801aea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801aeaa:	61c3      	str	r3, [r0, #28]
 801aeac:	69c3      	ldr	r3, [r0, #28]
 801aeae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801aeb2:	e7f5      	b.n	801aea0 <timer_channel_output_mode_config+0x38>

0801aeb4 <timer_channel_output_pulse_value_config>:
 801aeb4:	2903      	cmp	r1, #3
 801aeb6:	d80a      	bhi.n	801aece <timer_channel_output_pulse_value_config+0x1a>
 801aeb8:	e8df f001 	tbb	[pc, r1]
 801aebc:	08060402 	stmdaeq	r6, {r1, sl}
 801aec0:	6342      	str	r2, [r0, #52]	@ 0x34
 801aec2:	4770      	bx	lr
 801aec4:	6382      	str	r2, [r0, #56]	@ 0x38
 801aec6:	4770      	bx	lr
 801aec8:	63c2      	str	r2, [r0, #60]	@ 0x3c
 801aeca:	4770      	bx	lr
 801aecc:	6402      	str	r2, [r0, #64]	@ 0x40
 801aece:	4770      	bx	lr

0801aed0 <timer_channel_output_shadow_config>:
 801aed0:	2903      	cmp	r1, #3
 801aed2:	d81a      	bhi.n	801af0a <timer_channel_output_shadow_config+0x3a>
 801aed4:	e8df f001 	tbb	[pc, r1]
 801aed8:	1a120a02 	bne	849d6e8 <_sidata+0x47bddc>
 801aedc:	6983      	ldr	r3, [r0, #24]
 801aede:	f023 0308 	bic.w	r3, r3, #8
 801aee2:	6183      	str	r3, [r0, #24]
 801aee4:	6983      	ldr	r3, [r0, #24]
 801aee6:	4313      	orrs	r3, r2
 801aee8:	6183      	str	r3, [r0, #24]
 801aeea:	4770      	bx	lr
 801aeec:	6983      	ldr	r3, [r0, #24]
 801aeee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801aef2:	6183      	str	r3, [r0, #24]
 801aef4:	6983      	ldr	r3, [r0, #24]
 801aef6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801aefa:	e7f5      	b.n	801aee8 <timer_channel_output_shadow_config+0x18>
 801aefc:	69c3      	ldr	r3, [r0, #28]
 801aefe:	f023 0308 	bic.w	r3, r3, #8
 801af02:	61c3      	str	r3, [r0, #28]
 801af04:	69c3      	ldr	r3, [r0, #28]
 801af06:	4313      	orrs	r3, r2
 801af08:	61c3      	str	r3, [r0, #28]
 801af0a:	4770      	bx	lr
 801af0c:	69c3      	ldr	r3, [r0, #28]
 801af0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801af12:	61c3      	str	r3, [r0, #28]
 801af14:	69c3      	ldr	r3, [r0, #28]
 801af16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801af1a:	e7f5      	b.n	801af08 <timer_channel_output_shadow_config+0x38>

0801af1c <timer_input_trigger_source_select>:
 801af1c:	6883      	ldr	r3, [r0, #8]
 801af1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801af22:	6083      	str	r3, [r0, #8]
 801af24:	6883      	ldr	r3, [r0, #8]
 801af26:	430b      	orrs	r3, r1
 801af28:	6083      	str	r3, [r0, #8]
 801af2a:	4770      	bx	lr

0801af2c <timer_master_output_trigger_source_select>:
 801af2c:	6843      	ldr	r3, [r0, #4]
 801af2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801af32:	6043      	str	r3, [r0, #4]
 801af34:	6843      	ldr	r3, [r0, #4]
 801af36:	430b      	orrs	r3, r1
 801af38:	6043      	str	r3, [r0, #4]
 801af3a:	4770      	bx	lr

0801af3c <timer_slave_mode_select>:
 801af3c:	6883      	ldr	r3, [r0, #8]
 801af3e:	f023 0307 	bic.w	r3, r3, #7
 801af42:	6083      	str	r3, [r0, #8]
 801af44:	6883      	ldr	r3, [r0, #8]
 801af46:	430b      	orrs	r3, r1
 801af48:	6083      	str	r3, [r0, #8]
 801af4a:	4770      	bx	lr

0801af4c <timer_master_slave_mode_config>:
 801af4c:	b921      	cbnz	r1, 801af58 <timer_master_slave_mode_config+0xc>
 801af4e:	6883      	ldr	r3, [r0, #8]
 801af50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801af54:	6083      	str	r3, [r0, #8]
 801af56:	4770      	bx	lr
 801af58:	2901      	cmp	r1, #1
 801af5a:	d1fc      	bne.n	801af56 <timer_master_slave_mode_config+0xa>
 801af5c:	6883      	ldr	r3, [r0, #8]
 801af5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801af62:	e7f7      	b.n	801af54 <timer_master_slave_mode_config+0x8>

0801af64 <timer_flag_clear>:
 801af64:	43c9      	mvns	r1, r1
 801af66:	6101      	str	r1, [r0, #16]
 801af68:	4770      	bx	lr

0801af6a <timer_interrupt_enable>:
 801af6a:	68c3      	ldr	r3, [r0, #12]
 801af6c:	430b      	orrs	r3, r1
 801af6e:	60c3      	str	r3, [r0, #12]
 801af70:	4770      	bx	lr

0801af72 <timer_interrupt_flag_clear>:
 801af72:	43c9      	mvns	r1, r1
 801af74:	6101      	str	r1, [r0, #16]
 801af76:	4770      	bx	lr

0801af78 <usart_deinit>:
 801af78:	b508      	push	{r3, lr}
 801af7a:	4b2d      	ldr	r3, [pc, #180]	@ (801b030 <usart_deinit+0xb8>)
 801af7c:	4298      	cmp	r0, r3
 801af7e:	d050      	beq.n	801b022 <usart_deinit+0xaa>
 801af80:	d817      	bhi.n	801afb2 <usart_deinit+0x3a>
 801af82:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 801af86:	4298      	cmp	r0, r3
 801af88:	d044      	beq.n	801b014 <usart_deinit+0x9c>
 801af8a:	d808      	bhi.n	801af9e <usart_deinit+0x26>
 801af8c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801af90:	4298      	cmp	r0, r3
 801af92:	d02a      	beq.n	801afea <usart_deinit+0x72>
 801af94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801af98:	4298      	cmp	r0, r3
 801af9a:	d02d      	beq.n	801aff8 <usart_deinit+0x80>
 801af9c:	bd08      	pop	{r3, pc}
 801af9e:	4b25      	ldr	r3, [pc, #148]	@ (801b034 <usart_deinit+0xbc>)
 801afa0:	4298      	cmp	r0, r3
 801afa2:	d1fb      	bne.n	801af9c <usart_deinit+0x24>
 801afa4:	f640 0014 	movw	r0, #2068	@ 0x814
 801afa8:	f7ff fce7 	bl	801a97a <rcu_periph_reset_enable>
 801afac:	f640 0014 	movw	r0, #2068	@ 0x814
 801afb0:	e017      	b.n	801afe2 <usart_deinit+0x6a>
 801afb2:	4b21      	ldr	r3, [pc, #132]	@ (801b038 <usart_deinit+0xc0>)
 801afb4:	4298      	cmp	r0, r3
 801afb6:	d00e      	beq.n	801afd6 <usart_deinit+0x5e>
 801afb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801afbc:	4298      	cmp	r0, r3
 801afbe:	d022      	beq.n	801b006 <usart_deinit+0x8e>
 801afc0:	f5a3 4318 	sub.w	r3, r3, #38912	@ 0x9800
 801afc4:	4298      	cmp	r0, r3
 801afc6:	d1e9      	bne.n	801af9c <usart_deinit+0x24>
 801afc8:	f640 001f 	movw	r0, #2079	@ 0x81f
 801afcc:	f7ff fcd5 	bl	801a97a <rcu_periph_reset_enable>
 801afd0:	f640 001f 	movw	r0, #2079	@ 0x81f
 801afd4:	e005      	b.n	801afe2 <usart_deinit+0x6a>
 801afd6:	f640 1004 	movw	r0, #2308	@ 0x904
 801afda:	f7ff fcce 	bl	801a97a <rcu_periph_reset_enable>
 801afde:	f640 1004 	movw	r0, #2308	@ 0x904
 801afe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801afe6:	f7ff bcca 	b.w	801a97e <rcu_periph_reset_disable>
 801afea:	f640 0011 	movw	r0, #2065	@ 0x811
 801afee:	f7ff fcc4 	bl	801a97a <rcu_periph_reset_enable>
 801aff2:	f640 0011 	movw	r0, #2065	@ 0x811
 801aff6:	e7f4      	b.n	801afe2 <usart_deinit+0x6a>
 801aff8:	f640 0012 	movw	r0, #2066	@ 0x812
 801affc:	f7ff fcbd 	bl	801a97a <rcu_periph_reset_enable>
 801b000:	f640 0012 	movw	r0, #2066	@ 0x812
 801b004:	e7ed      	b.n	801afe2 <usart_deinit+0x6a>
 801b006:	f640 1005 	movw	r0, #2309	@ 0x905
 801b00a:	f7ff fcb6 	bl	801a97a <rcu_periph_reset_enable>
 801b00e:	f640 1005 	movw	r0, #2309	@ 0x905
 801b012:	e7e6      	b.n	801afe2 <usart_deinit+0x6a>
 801b014:	f640 0013 	movw	r0, #2067	@ 0x813
 801b018:	f7ff fcaf 	bl	801a97a <rcu_periph_reset_enable>
 801b01c:	f640 0013 	movw	r0, #2067	@ 0x813
 801b020:	e7df      	b.n	801afe2 <usart_deinit+0x6a>
 801b022:	f640 001e 	movw	r0, #2078	@ 0x81e
 801b026:	f7ff fca8 	bl	801a97a <rcu_periph_reset_enable>
 801b02a:	f640 001e 	movw	r0, #2078	@ 0x81e
 801b02e:	e7d8      	b.n	801afe2 <usart_deinit+0x6a>
 801b030:	40007800 	andmi	r7, r0, r0, lsl #16
 801b034:	40005000 	andmi	r5, r0, r0
 801b038:	40011000 	andmi	r1, r1, r0

0801b03c <usart_baudrate_set>:
 801b03c:	b538      	push	{r3, r4, r5, lr}
 801b03e:	4b1e      	ldr	r3, [pc, #120]	@ (801b0b8 <usart_baudrate_set+0x7c>)
 801b040:	4298      	cmp	r0, r3
 801b042:	4604      	mov	r4, r0
 801b044:	460d      	mov	r5, r1
 801b046:	d02e      	beq.n	801b0a6 <usart_baudrate_set+0x6a>
 801b048:	d821      	bhi.n	801b08e <usart_baudrate_set+0x52>
 801b04a:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 801b04e:	4298      	cmp	r0, r3
 801b050:	d029      	beq.n	801b0a6 <usart_baudrate_set+0x6a>
 801b052:	d81a      	bhi.n	801b08a <usart_baudrate_set+0x4e>
 801b054:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801b058:	4298      	cmp	r0, r3
 801b05a:	d024      	beq.n	801b0a6 <usart_baudrate_set+0x6a>
 801b05c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801b060:	429c      	cmp	r4, r3
 801b062:	d020      	beq.n	801b0a6 <usart_baudrate_set+0x6a>
 801b064:	2000      	movs	r0, #0
 801b066:	68e2      	ldr	r2, [r4, #12]
 801b068:	0412      	lsls	r2, r2, #16
 801b06a:	ea4f 0355 	mov.w	r3, r5, lsr #1
 801b06e:	d51c      	bpl.n	801b0aa <usart_baudrate_set+0x6e>
 801b070:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801b074:	fbb3 f1f5 	udiv	r1, r3, r5
 801b078:	f3c1 0342 	ubfx	r3, r1, #1, #3
 801b07c:	f021 010f 	bic.w	r1, r1, #15
 801b080:	0409      	lsls	r1, r1, #16
 801b082:	0c09      	lsrs	r1, r1, #16
 801b084:	430b      	orrs	r3, r1
 801b086:	60a3      	str	r3, [r4, #8]
 801b088:	bd38      	pop	{r3, r4, r5, pc}
 801b08a:	4b0c      	ldr	r3, [pc, #48]	@ (801b0bc <usart_baudrate_set+0x80>)
 801b08c:	e7e8      	b.n	801b060 <usart_baudrate_set+0x24>
 801b08e:	4b0c      	ldr	r3, [pc, #48]	@ (801b0c0 <usart_baudrate_set+0x84>)
 801b090:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
 801b094:	429a      	cmp	r2, r3
 801b096:	d002      	beq.n	801b09e <usart_baudrate_set+0x62>
 801b098:	f5a3 4314 	sub.w	r3, r3, #37888	@ 0x9400
 801b09c:	e7e0      	b.n	801b060 <usart_baudrate_set+0x24>
 801b09e:	2003      	movs	r0, #3
 801b0a0:	f7ff fc8c 	bl	801a9bc <rcu_clock_freq_get>
 801b0a4:	e7df      	b.n	801b066 <usart_baudrate_set+0x2a>
 801b0a6:	2002      	movs	r0, #2
 801b0a8:	e7fa      	b.n	801b0a0 <usart_baudrate_set+0x64>
 801b0aa:	18c1      	adds	r1, r0, r3
 801b0ac:	fbb1 f1f5 	udiv	r1, r1, r5
 801b0b0:	b289      	uxth	r1, r1
 801b0b2:	60a1      	str	r1, [r4, #8]
 801b0b4:	e7e8      	b.n	801b088 <usart_baudrate_set+0x4c>
 801b0b6:	bf00      	nop
 801b0b8:	40007800 	andmi	r7, r0, r0, lsl #16
 801b0bc:	40005000 	andmi	r5, r0, r0
 801b0c0:	40011000 	andmi	r1, r1, r0

0801b0c4 <usart_parity_config>:
 801b0c4:	68c3      	ldr	r3, [r0, #12]
 801b0c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801b0ca:	60c3      	str	r3, [r0, #12]
 801b0cc:	68c3      	ldr	r3, [r0, #12]
 801b0ce:	430b      	orrs	r3, r1
 801b0d0:	60c3      	str	r3, [r0, #12]
 801b0d2:	4770      	bx	lr

0801b0d4 <usart_word_length_set>:
 801b0d4:	68c3      	ldr	r3, [r0, #12]
 801b0d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b0da:	60c3      	str	r3, [r0, #12]
 801b0dc:	68c3      	ldr	r3, [r0, #12]
 801b0de:	430b      	orrs	r3, r1
 801b0e0:	60c3      	str	r3, [r0, #12]
 801b0e2:	4770      	bx	lr

0801b0e4 <usart_stop_bit_set>:
 801b0e4:	6903      	ldr	r3, [r0, #16]
 801b0e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 801b0ea:	6103      	str	r3, [r0, #16]
 801b0ec:	6903      	ldr	r3, [r0, #16]
 801b0ee:	430b      	orrs	r3, r1
 801b0f0:	6103      	str	r3, [r0, #16]
 801b0f2:	4770      	bx	lr

0801b0f4 <usart_transmit_config>:
 801b0f4:	68c3      	ldr	r3, [r0, #12]
 801b0f6:	f023 0308 	bic.w	r3, r3, #8
 801b0fa:	430b      	orrs	r3, r1
 801b0fc:	60c3      	str	r3, [r0, #12]
 801b0fe:	4770      	bx	lr

0801b100 <usart_receive_config>:
 801b100:	68c3      	ldr	r3, [r0, #12]
 801b102:	f023 0304 	bic.w	r3, r3, #4
 801b106:	430b      	orrs	r3, r1
 801b108:	60c3      	str	r3, [r0, #12]
 801b10a:	4770      	bx	lr

0801b10c <usart_hardware_flow_rts_config>:
 801b10c:	6943      	ldr	r3, [r0, #20]
 801b10e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b112:	6143      	str	r3, [r0, #20]
 801b114:	6943      	ldr	r3, [r0, #20]
 801b116:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b11a:	4319      	orrs	r1, r3
 801b11c:	6141      	str	r1, [r0, #20]
 801b11e:	4770      	bx	lr

0801b120 <usart_hardware_flow_cts_config>:
 801b120:	6943      	ldr	r3, [r0, #20]
 801b122:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801b126:	6143      	str	r3, [r0, #20]
 801b128:	6943      	ldr	r3, [r0, #20]
 801b12a:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 801b12e:	4319      	orrs	r1, r3
 801b130:	6141      	str	r1, [r0, #20]
 801b132:	4770      	bx	lr

0801b134 <usart_flag_get>:
 801b134:	098b      	lsrs	r3, r1, #6
 801b136:	f001 011f 	and.w	r1, r1, #31
 801b13a:	5818      	ldr	r0, [r3, r0]
 801b13c:	40c8      	lsrs	r0, r1
 801b13e:	f000 0001 	and.w	r0, r0, #1
 801b142:	4770      	bx	lr

0801b144 <bkp_data_write(bkp_data_register_enum, unsigned short)>:
 801b144:	b110      	cbz	r0, 801b14c <bkp_data_write(bkp_data_register_enum, unsigned short)+0x8>
 801b146:	2801      	cmp	r0, #1
 801b148:	d004      	beq.n	801b154 <bkp_data_write(bkp_data_register_enum, unsigned short)+0x10>
 801b14a:	4770      	bx	lr
 801b14c:	4b03      	ldr	r3, [pc, #12]	@ (801b15c <bkp_data_write(bkp_data_register_enum, unsigned short)+0x18>)
 801b14e:	f8c3 1850 	str.w	r1, [r3, #2128]	@ 0x850
 801b152:	4770      	bx	lr
 801b154:	4b01      	ldr	r3, [pc, #4]	@ (801b15c <bkp_data_write(bkp_data_register_enum, unsigned short)+0x18>)
 801b156:	f8c3 1854 	str.w	r1, [r3, #2132]	@ 0x854
 801b15a:	4770      	bx	lr
 801b15c:	40002000 	andmi	r2, r0, r0

0801b160 <bkp_data_read(bkp_data_register_enum)>:
 801b160:	b118      	cbz	r0, 801b16a <bkp_data_read(bkp_data_register_enum)+0xa>
 801b162:	2801      	cmp	r0, #1
 801b164:	d006      	beq.n	801b174 <bkp_data_read(bkp_data_register_enum)+0x14>
 801b166:	2000      	movs	r0, #0
 801b168:	4770      	bx	lr
 801b16a:	4b04      	ldr	r3, [pc, #16]	@ (801b17c <bkp_data_read(bkp_data_register_enum)+0x1c>)
 801b16c:	f8d3 0850 	ldr.w	r0, [r3, #2128]	@ 0x850
 801b170:	b280      	uxth	r0, r0
 801b172:	4770      	bx	lr
 801b174:	4b01      	ldr	r3, [pc, #4]	@ (801b17c <bkp_data_read(bkp_data_register_enum)+0x1c>)
 801b176:	f8d3 0854 	ldr.w	r0, [r3, #2132]	@ 0x854
 801b17a:	e7f9      	b.n	801b170 <bkp_data_read(bkp_data_register_enum)+0x10>
 801b17c:	40002000 	andmi	r2, r0, r0

0801b180 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>:
 801b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b182:	461e      	mov	r6, r3
 801b184:	4bc3      	ldr	r3, [pc, #780]	@ (801b494 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x314>)
 801b186:	4298      	cmp	r0, r3
 801b188:	4604      	mov	r4, r0
 801b18a:	460f      	mov	r7, r1
 801b18c:	4615      	mov	r5, r2
 801b18e:	f000 818f 	beq.w	801b4b0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x330>
 801b192:	d83a      	bhi.n	801b20a <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x8a>
 801b194:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 801b198:	4298      	cmp	r0, r3
 801b19a:	f000 80f5 	beq.w	801b388 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x208>
 801b19e:	f200 8122 	bhi.w	801b3e6 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x266>
 801b1a2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 801b1a6:	4298      	cmp	r0, r3
 801b1a8:	f000 80c8 	beq.w	801b33c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x1bc>
 801b1ac:	f241 0012 	movw	r0, #4114	@ 0x1012
 801b1b0:	f7ff fbc8 	bl	801a944 <rcu_periph_clock_enable>
 801b1b4:	f640 4001 	movw	r0, #3073	@ 0xc01
 801b1b8:	f7ff fbc4 	bl	801a944 <rcu_periph_clock_enable>
 801b1bc:	48b6      	ldr	r0, [pc, #728]	@ (801b498 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801b1be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b1c2:	2107      	movs	r1, #7
 801b1c4:	f7ff fb7a 	bl	801a8bc <gpio_af_set>
 801b1c8:	48b3      	ldr	r0, [pc, #716]	@ (801b498 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801b1ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b1ce:	2201      	movs	r2, #1
 801b1d0:	2102      	movs	r1, #2
 801b1d2:	f7ff fb35 	bl	801a840 <gpio_mode_set>
 801b1d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b1da:	48af      	ldr	r0, [pc, #700]	@ (801b498 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801b1dc:	2202      	movs	r2, #2
 801b1de:	2100      	movs	r1, #0
 801b1e0:	f7ff fb50 	bl	801a884 <gpio_output_options_set>
 801b1e4:	48ac      	ldr	r0, [pc, #688]	@ (801b498 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801b1e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b1ea:	2107      	movs	r1, #7
 801b1ec:	f7ff fb66 	bl	801a8bc <gpio_af_set>
 801b1f0:	48a9      	ldr	r0, [pc, #676]	@ (801b498 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801b1f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b1f6:	2201      	movs	r2, #1
 801b1f8:	2102      	movs	r1, #2
 801b1fa:	f7ff fb21 	bl	801a840 <gpio_mode_set>
 801b1fe:	48a6      	ldr	r0, [pc, #664]	@ (801b498 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x318>)
 801b200:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b204:	2202      	movs	r2, #2
 801b206:	2100      	movs	r1, #0
 801b208:	e05b      	b.n	801b2c2 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801b20a:	4ba4      	ldr	r3, [pc, #656]	@ (801b49c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x31c>)
 801b20c:	4298      	cmp	r0, r3
 801b20e:	d02a      	beq.n	801b266 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0xe6>
 801b210:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801b214:	4298      	cmp	r0, r3
 801b216:	f000 8116 	beq.w	801b446 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x2c6>
 801b21a:	f241 001f 	movw	r0, #4127	@ 0x101f
 801b21e:	f7ff fb91 	bl	801a944 <rcu_periph_clock_enable>
 801b222:	f640 4004 	movw	r0, #3076	@ 0xc04
 801b226:	f7ff fb8d 	bl	801a944 <rcu_periph_clock_enable>
 801b22a:	489d      	ldr	r0, [pc, #628]	@ (801b4a0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801b22c:	2202      	movs	r2, #2
 801b22e:	2108      	movs	r1, #8
 801b230:	f7ff fb44 	bl	801a8bc <gpio_af_set>
 801b234:	2302      	movs	r3, #2
 801b236:	4619      	mov	r1, r3
 801b238:	4899      	ldr	r0, [pc, #612]	@ (801b4a0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801b23a:	2201      	movs	r2, #1
 801b23c:	f7ff fb00 	bl	801a840 <gpio_mode_set>
 801b240:	2302      	movs	r3, #2
 801b242:	461a      	mov	r2, r3
 801b244:	4896      	ldr	r0, [pc, #600]	@ (801b4a0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801b246:	2100      	movs	r1, #0
 801b248:	f7ff fb1c 	bl	801a884 <gpio_output_options_set>
 801b24c:	4894      	ldr	r0, [pc, #592]	@ (801b4a0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801b24e:	2201      	movs	r2, #1
 801b250:	2108      	movs	r1, #8
 801b252:	f7ff fb33 	bl	801a8bc <gpio_af_set>
 801b256:	2301      	movs	r3, #1
 801b258:	461a      	mov	r2, r3
 801b25a:	4891      	ldr	r0, [pc, #580]	@ (801b4a0 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x320>)
 801b25c:	2102      	movs	r1, #2
 801b25e:	f7ff faef 	bl	801a840 <gpio_mode_set>
 801b262:	2301      	movs	r3, #1
 801b264:	e14c      	b.n	801b500 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x380>
 801b266:	f241 1004 	movw	r0, #4356	@ 0x1104
 801b26a:	f7ff fb6b 	bl	801a944 <rcu_periph_clock_enable>
 801b26e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801b272:	f7ff fb67 	bl	801a944 <rcu_periph_clock_enable>
 801b276:	488b      	ldr	r0, [pc, #556]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b27c:	2107      	movs	r1, #7
 801b27e:	f7ff fb1d 	bl	801a8bc <gpio_af_set>
 801b282:	4888      	ldr	r0, [pc, #544]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b288:	2201      	movs	r2, #1
 801b28a:	2102      	movs	r1, #2
 801b28c:	f7ff fad8 	bl	801a840 <gpio_mode_set>
 801b290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b294:	4883      	ldr	r0, [pc, #524]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b296:	2202      	movs	r2, #2
 801b298:	2100      	movs	r1, #0
 801b29a:	f7ff faf3 	bl	801a884 <gpio_output_options_set>
 801b29e:	4881      	ldr	r0, [pc, #516]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b2a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b2a4:	2107      	movs	r1, #7
 801b2a6:	f7ff fb09 	bl	801a8bc <gpio_af_set>
 801b2aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b2ae:	487d      	ldr	r0, [pc, #500]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b2b0:	2201      	movs	r2, #1
 801b2b2:	2102      	movs	r1, #2
 801b2b4:	f7ff fac4 	bl	801a840 <gpio_mode_set>
 801b2b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b2bc:	4879      	ldr	r0, [pc, #484]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b2be:	2202      	movs	r2, #2
 801b2c0:	2100      	movs	r1, #0
 801b2c2:	f7ff fadf 	bl	801a884 <gpio_output_options_set>
 801b2c6:	4620      	mov	r0, r4
 801b2c8:	f7ff fe56 	bl	801af78 <usart_deinit>
 801b2cc:	68e3      	ldr	r3, [r4, #12]
 801b2ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801b2d2:	60e3      	str	r3, [r4, #12]
 801b2d4:	4639      	mov	r1, r7
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	f7ff feb0 	bl	801b03c <usart_baudrate_set>
 801b2dc:	f1a5 0309 	sub.w	r3, r5, #9
 801b2e0:	4259      	negs	r1, r3
 801b2e2:	4159      	adcs	r1, r3
 801b2e4:	0309      	lsls	r1, r1, #12
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	f7ff fef4 	bl	801b0d4 <usart_word_length_set>
 801b2ec:	9906      	ldr	r1, [sp, #24]
 801b2ee:	1e8a      	subs	r2, r1, #2
 801b2f0:	4251      	negs	r1, r2
 801b2f2:	4151      	adcs	r1, r2
 801b2f4:	0349      	lsls	r1, r1, #13
 801b2f6:	4620      	mov	r0, r4
 801b2f8:	f7ff fef4 	bl	801b0e4 <usart_stop_bit_set>
 801b2fc:	2e01      	cmp	r6, #1
 801b2fe:	f000 8103 	beq.w	801b508 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x388>
 801b302:	2e02      	cmp	r6, #2
 801b304:	f040 8103 	bne.w	801b50e <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x38e>
 801b308:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801b30c:	4620      	mov	r0, r4
 801b30e:	f7ff fed9 	bl	801b0c4 <usart_parity_config>
 801b312:	2100      	movs	r1, #0
 801b314:	4620      	mov	r0, r4
 801b316:	f7ff fef9 	bl	801b10c <usart_hardware_flow_rts_config>
 801b31a:	2100      	movs	r1, #0
 801b31c:	4620      	mov	r0, r4
 801b31e:	f7ff feff 	bl	801b120 <usart_hardware_flow_cts_config>
 801b322:	2104      	movs	r1, #4
 801b324:	4620      	mov	r0, r4
 801b326:	f7ff feeb 	bl	801b100 <usart_receive_config>
 801b32a:	2108      	movs	r1, #8
 801b32c:	4620      	mov	r0, r4
 801b32e:	f7ff fee1 	bl	801b0f4 <usart_transmit_config>
 801b332:	68e3      	ldr	r3, [r4, #12]
 801b334:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801b338:	60e3      	str	r3, [r4, #12]
 801b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b33c:	f241 0011 	movw	r0, #4113	@ 0x1011
 801b340:	f7ff fb00 	bl	801a944 <rcu_periph_clock_enable>
 801b344:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 801b348:	f7ff fafc 	bl	801a944 <rcu_periph_clock_enable>
 801b34c:	4855      	ldr	r0, [pc, #340]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b34e:	2204      	movs	r2, #4
 801b350:	2107      	movs	r1, #7
 801b352:	f7ff fab3 	bl	801a8bc <gpio_af_set>
 801b356:	4853      	ldr	r0, [pc, #332]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b358:	2304      	movs	r3, #4
 801b35a:	2201      	movs	r2, #1
 801b35c:	2102      	movs	r1, #2
 801b35e:	f7ff fa6f 	bl	801a840 <gpio_mode_set>
 801b362:	2304      	movs	r3, #4
 801b364:	484f      	ldr	r0, [pc, #316]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b366:	2202      	movs	r2, #2
 801b368:	2100      	movs	r1, #0
 801b36a:	f7ff fa8b 	bl	801a884 <gpio_output_options_set>
 801b36e:	484d      	ldr	r0, [pc, #308]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b370:	2208      	movs	r2, #8
 801b372:	2107      	movs	r1, #7
 801b374:	f7ff faa2 	bl	801a8bc <gpio_af_set>
 801b378:	2308      	movs	r3, #8
 801b37a:	484a      	ldr	r0, [pc, #296]	@ (801b4a4 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x324>)
 801b37c:	2201      	movs	r2, #1
 801b37e:	2102      	movs	r1, #2
 801b380:	f7ff fa5e 	bl	801a840 <gpio_mode_set>
 801b384:	2308      	movs	r3, #8
 801b386:	e799      	b.n	801b2bc <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x13c>
 801b388:	f241 0013 	movw	r0, #4115	@ 0x1013
 801b38c:	f7ff fada 	bl	801a944 <rcu_periph_clock_enable>
 801b390:	f640 4002 	movw	r0, #3074	@ 0xc02
 801b394:	f7ff fad6 	bl	801a944 <rcu_periph_clock_enable>
 801b398:	4843      	ldr	r0, [pc, #268]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b39a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b39e:	2108      	movs	r1, #8
 801b3a0:	f7ff fa8c 	bl	801a8bc <gpio_af_set>
 801b3a4:	4840      	ldr	r0, [pc, #256]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b3a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b3aa:	2201      	movs	r2, #1
 801b3ac:	2102      	movs	r1, #2
 801b3ae:	f7ff fa47 	bl	801a840 <gpio_mode_set>
 801b3b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b3b6:	483c      	ldr	r0, [pc, #240]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b3b8:	2202      	movs	r2, #2
 801b3ba:	2100      	movs	r1, #0
 801b3bc:	f7ff fa62 	bl	801a884 <gpio_output_options_set>
 801b3c0:	4839      	ldr	r0, [pc, #228]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b3c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b3c6:	2108      	movs	r1, #8
 801b3c8:	f7ff fa78 	bl	801a8bc <gpio_af_set>
 801b3cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b3d0:	4835      	ldr	r0, [pc, #212]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b3d2:	2201      	movs	r2, #1
 801b3d4:	2102      	movs	r1, #2
 801b3d6:	f7ff fa33 	bl	801a840 <gpio_mode_set>
 801b3da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b3de:	4832      	ldr	r0, [pc, #200]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b3e0:	2202      	movs	r2, #2
 801b3e2:	2100      	movs	r1, #0
 801b3e4:	e76d      	b.n	801b2c2 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801b3e6:	f241 0014 	movw	r0, #4116	@ 0x1014
 801b3ea:	f7ff faab 	bl	801a944 <rcu_periph_clock_enable>
 801b3ee:	f640 4002 	movw	r0, #3074	@ 0xc02
 801b3f2:	f7ff faa7 	bl	801a944 <rcu_periph_clock_enable>
 801b3f6:	f640 4003 	movw	r0, #3075	@ 0xc03
 801b3fa:	f7ff faa3 	bl	801a944 <rcu_periph_clock_enable>
 801b3fe:	482a      	ldr	r0, [pc, #168]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b400:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801b404:	2108      	movs	r1, #8
 801b406:	f7ff fa59 	bl	801a8bc <gpio_af_set>
 801b40a:	4827      	ldr	r0, [pc, #156]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b40c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b410:	2201      	movs	r2, #1
 801b412:	2102      	movs	r1, #2
 801b414:	f7ff fa14 	bl	801a840 <gpio_mode_set>
 801b418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b41c:	4822      	ldr	r0, [pc, #136]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b41e:	2202      	movs	r2, #2
 801b420:	2100      	movs	r1, #0
 801b422:	f7ff fa2f 	bl	801a884 <gpio_output_options_set>
 801b426:	4821      	ldr	r0, [pc, #132]	@ (801b4ac <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 801b428:	2204      	movs	r2, #4
 801b42a:	2108      	movs	r1, #8
 801b42c:	f7ff fa46 	bl	801a8bc <gpio_af_set>
 801b430:	481e      	ldr	r0, [pc, #120]	@ (801b4ac <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 801b432:	2304      	movs	r3, #4
 801b434:	2201      	movs	r2, #1
 801b436:	2102      	movs	r1, #2
 801b438:	f7ff fa02 	bl	801a840 <gpio_mode_set>
 801b43c:	481b      	ldr	r0, [pc, #108]	@ (801b4ac <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x32c>)
 801b43e:	2304      	movs	r3, #4
 801b440:	2202      	movs	r2, #2
 801b442:	2100      	movs	r1, #0
 801b444:	e73d      	b.n	801b2c2 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801b446:	f241 1005 	movw	r0, #4357	@ 0x1105
 801b44a:	f7ff fa7b 	bl	801a944 <rcu_periph_clock_enable>
 801b44e:	f640 4002 	movw	r0, #3074	@ 0xc02
 801b452:	f7ff fa77 	bl	801a944 <rcu_periph_clock_enable>
 801b456:	4814      	ldr	r0, [pc, #80]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b458:	2240      	movs	r2, #64	@ 0x40
 801b45a:	2108      	movs	r1, #8
 801b45c:	f7ff fa2e 	bl	801a8bc <gpio_af_set>
 801b460:	4811      	ldr	r0, [pc, #68]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b462:	2340      	movs	r3, #64	@ 0x40
 801b464:	2201      	movs	r2, #1
 801b466:	2102      	movs	r1, #2
 801b468:	f7ff f9ea 	bl	801a840 <gpio_mode_set>
 801b46c:	2340      	movs	r3, #64	@ 0x40
 801b46e:	480e      	ldr	r0, [pc, #56]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b470:	2202      	movs	r2, #2
 801b472:	2100      	movs	r1, #0
 801b474:	f7ff fa06 	bl	801a884 <gpio_output_options_set>
 801b478:	480b      	ldr	r0, [pc, #44]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b47a:	2280      	movs	r2, #128	@ 0x80
 801b47c:	2108      	movs	r1, #8
 801b47e:	f7ff fa1d 	bl	801a8bc <gpio_af_set>
 801b482:	2380      	movs	r3, #128	@ 0x80
 801b484:	4808      	ldr	r0, [pc, #32]	@ (801b4a8 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x328>)
 801b486:	2201      	movs	r2, #1
 801b488:	2102      	movs	r1, #2
 801b48a:	f7ff f9d9 	bl	801a840 <gpio_mode_set>
 801b48e:	2380      	movs	r3, #128	@ 0x80
 801b490:	e7a5      	b.n	801b3de <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x25e>
 801b492:	bf00      	nop
 801b494:	40007800 	andmi	r7, r0, r0, lsl #16
 801b498:	40020400 	andmi	r0, r2, r0, lsl #8
 801b49c:	40011000 	andmi	r1, r1, r0
 801b4a0:	40021000 	andmi	r1, r2, r0
 801b4a4:	40020000 	andmi	r0, r2, r0
 801b4a8:	40020800 	andmi	r0, r2, r0, lsl #16
 801b4ac:	40020c00 	andmi	r0, r2, r0, lsl #24
 801b4b0:	f241 001e 	movw	r0, #4126	@ 0x101e
 801b4b4:	f7ff fa46 	bl	801a944 <rcu_periph_clock_enable>
 801b4b8:	f640 4004 	movw	r0, #3076	@ 0xc04
 801b4bc:	f7ff fa42 	bl	801a944 <rcu_periph_clock_enable>
 801b4c0:	4814      	ldr	r0, [pc, #80]	@ (801b514 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801b4c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b4c6:	2108      	movs	r1, #8
 801b4c8:	f7ff f9f8 	bl	801a8bc <gpio_af_set>
 801b4cc:	4811      	ldr	r0, [pc, #68]	@ (801b514 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801b4ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b4d2:	2201      	movs	r2, #1
 801b4d4:	2102      	movs	r1, #2
 801b4d6:	f7ff f9b3 	bl	801a840 <gpio_mode_set>
 801b4da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b4de:	480d      	ldr	r0, [pc, #52]	@ (801b514 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801b4e0:	2202      	movs	r2, #2
 801b4e2:	2100      	movs	r1, #0
 801b4e4:	f7ff f9ce 	bl	801a884 <gpio_output_options_set>
 801b4e8:	480a      	ldr	r0, [pc, #40]	@ (801b514 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801b4ea:	2280      	movs	r2, #128	@ 0x80
 801b4ec:	2108      	movs	r1, #8
 801b4ee:	f7ff f9e5 	bl	801a8bc <gpio_af_set>
 801b4f2:	2380      	movs	r3, #128	@ 0x80
 801b4f4:	4807      	ldr	r0, [pc, #28]	@ (801b514 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801b4f6:	2201      	movs	r2, #1
 801b4f8:	2102      	movs	r1, #2
 801b4fa:	f7ff f9a1 	bl	801a840 <gpio_mode_set>
 801b4fe:	2380      	movs	r3, #128	@ 0x80
 801b500:	4804      	ldr	r0, [pc, #16]	@ (801b514 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x394>)
 801b502:	2202      	movs	r2, #2
 801b504:	2100      	movs	r1, #0
 801b506:	e6dc      	b.n	801b2c2 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x142>
 801b508:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801b50c:	e6fe      	b.n	801b30c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x18c>
 801b50e:	2100      	movs	r1, #0
 801b510:	e6fc      	b.n	801b30c <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)+0x18c>
 801b512:	bf00      	nop
 801b514:	40021000 	andmi	r1, r2, r0

0801b518 <mac_address_get(unsigned char*)>:
 801b518:	4a07      	ldr	r2, [pc, #28]	@ (801b538 <mac_address_get(unsigned char*)+0x20>)
 801b51a:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
 801b51e:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	@ 0xa14
 801b522:	7042      	strb	r2, [r0, #1]
 801b524:	0e1a      	lsrs	r2, r3, #24
 801b526:	7082      	strb	r2, [r0, #2]
 801b528:	0c1a      	lsrs	r2, r3, #16
 801b52a:	2102      	movs	r1, #2
 801b52c:	70c2      	strb	r2, [r0, #3]
 801b52e:	0a1a      	lsrs	r2, r3, #8
 801b530:	7001      	strb	r1, [r0, #0]
 801b532:	7102      	strb	r2, [r0, #4]
 801b534:	7143      	strb	r3, [r0, #5]
 801b536:	4770      	bx	lr
 801b538:	1fff7000 	svcne	0x00ff7000

0801b53c <timer6_config()>:
 801b53c:	b530      	push	{r4, r5, lr}
 801b53e:	4b19      	ldr	r3, [pc, #100]	@ (801b5a4 <timer6_config()+0x68>)
 801b540:	4c19      	ldr	r4, [pc, #100]	@ (801b5a8 <timer6_config()+0x6c>)
 801b542:	b085      	sub	sp, #20
 801b544:	2500      	movs	r5, #0
 801b546:	f241 0005 	movw	r0, #4101	@ 0x1005
 801b54a:	605d      	str	r5, [r3, #4]
 801b54c:	f7ff f9fa 	bl	801a944 <rcu_periph_clock_enable>
 801b550:	4620      	mov	r0, r4
 801b552:	f7ff fab3 	bl	801aabc <timer_deinit>
 801b556:	4668      	mov	r0, sp
 801b558:	f7ff fb56 	bl	801ac08 <timer_struct_para_init>
 801b55c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 801b560:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b564:	4669      	mov	r1, sp
 801b566:	4620      	mov	r0, r4
 801b568:	f8ad 2000 	strh.w	r2, [sp]
 801b56c:	9302      	str	r3, [sp, #8]
 801b56e:	f7ff fb53 	bl	801ac18 <timer_init>
 801b572:	4629      	mov	r1, r5
 801b574:	4620      	mov	r0, r4
 801b576:	f7ff fb88 	bl	801ac8a <timer_counter_value_config>
 801b57a:	4620      	mov	r0, r4
 801b57c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801b580:	f7ff fcf7 	bl	801af72 <timer_interrupt_flag_clear>
 801b584:	2101      	movs	r1, #1
 801b586:	4620      	mov	r0, r4
 801b588:	f7ff fcef 	bl	801af6a <timer_interrupt_enable>
 801b58c:	4b07      	ldr	r3, [pc, #28]	@ (801b5ac <timer6_config()+0x70>)
 801b58e:	22f0      	movs	r2, #240	@ 0xf0
 801b590:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
 801b594:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 801b598:	605a      	str	r2, [r3, #4]
 801b59a:	4620      	mov	r0, r4
 801b59c:	f7ff fb70 	bl	801ac80 <timer_enable>
 801b5a0:	b005      	add	sp, #20
 801b5a2:	bd30      	pop	{r4, r5, pc}
 801b5a4:	2001bcc8 	andcs	fp, r1, r8, asr #25
 801b5a8:	40001400 	andmi	r1, r0, r0, lsl #8
 801b5ac:	e000e100 	and	lr, r0, r0, lsl #2

0801b5b0 <udelay_init()>:
 801b5b0:	4a07      	ldr	r2, [pc, #28]	@ (801b5d0 <udelay_init()+0x20>)
 801b5b2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 801b5b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801b5ba:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
 801b5be:	4b05      	ldr	r3, [pc, #20]	@ (801b5d4 <udelay_init()+0x24>)
 801b5c0:	2200      	movs	r2, #0
 801b5c2:	605a      	str	r2, [r3, #4]
 801b5c4:	681a      	ldr	r2, [r3, #0]
 801b5c6:	f042 0201 	orr.w	r2, r2, #1
 801b5ca:	601a      	str	r2, [r3, #0]
 801b5cc:	4770      	bx	lr
 801b5ce:	bf00      	nop
 801b5d0:	e000ed00 	and	lr, r0, r0, lsl #26
 801b5d4:	e0001000 	and	r1, r0, r0

0801b5d8 <udelay(unsigned long, unsigned long)>:
 801b5d8:	23f0      	movs	r3, #240	@ 0xf0
 801b5da:	b530      	push	{r4, r5, lr}
 801b5dc:	4358      	muls	r0, r3
 801b5de:	b909      	cbnz	r1, 801b5e4 <udelay(unsigned long, unsigned long)+0xc>
 801b5e0:	4b08      	ldr	r3, [pc, #32]	@ (801b604 <udelay(unsigned long, unsigned long)+0x2c>)
 801b5e2:	6859      	ldr	r1, [r3, #4]
 801b5e4:	4c07      	ldr	r4, [pc, #28]	@ (801b604 <udelay(unsigned long, unsigned long)+0x2c>)
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	6862      	ldr	r2, [r4, #4]
 801b5ea:	4291      	cmp	r1, r2
 801b5ec:	d0fc      	beq.n	801b5e8 <udelay(unsigned long, unsigned long)+0x10>
 801b5ee:	bf2a      	itet	cs
 801b5f0:	f102 35ff 	addcs.w	r5, r2, #4294967295	@ 0xffffffff
 801b5f4:	189b      	addcc	r3, r3, r2
 801b5f6:	195b      	addcs	r3, r3, r5
 801b5f8:	1a5b      	subs	r3, r3, r1
 801b5fa:	4283      	cmp	r3, r0
 801b5fc:	d300      	bcc.n	801b600 <udelay(unsigned long, unsigned long)+0x28>
 801b5fe:	bd30      	pop	{r4, r5, pc}
 801b600:	4611      	mov	r1, r2
 801b602:	e7f1      	b.n	801b5e8 <udelay(unsigned long, unsigned long)+0x10>
 801b604:	e0001000 	and	r1, r0, r0

0801b608 <systick_config>:
 801b608:	4b0c      	ldr	r3, [pc, #48]	@ (801b63c <systick_config+0x34>)
 801b60a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	fbb3 f3f2 	udiv	r3, r3, r2
 801b614:	3b01      	subs	r3, #1
 801b616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b61a:	d20d      	bcs.n	801b638 <systick_config+0x30>
 801b61c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 801b620:	21f0      	movs	r1, #240	@ 0xf0
 801b622:	6153      	str	r3, [r2, #20]
 801b624:	4b06      	ldr	r3, [pc, #24]	@ (801b640 <systick_config+0x38>)
 801b626:	2000      	movs	r0, #0
 801b628:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
 801b62c:	6190      	str	r0, [r2, #24]
 801b62e:	2007      	movs	r0, #7
 801b630:	6110      	str	r0, [r2, #16]
 801b632:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
 801b636:	4770      	bx	lr
 801b638:	e7fe      	b.n	801b638 <systick_config+0x30>
 801b63a:	bf00      	nop
 801b63c:	20000004 	andcs	r0, r0, r4
 801b640:	e000ed00 	and	lr, r0, r0, lsl #26

0801b644 <SysTick_Handler>:
 801b644:	4a02      	ldr	r2, [pc, #8]	@ (801b650 <SysTick_Handler+0xc>)
 801b646:	6813      	ldr	r3, [r2, #0]
 801b648:	3301      	adds	r3, #1
 801b64a:	6013      	str	r3, [r2, #0]
 801b64c:	4770      	bx	lr
 801b64e:	bf00      	nop
 801b650:	2001bcd0 	ldrdcs	fp, [r1], -r0

0801b654 <gd32_adc_init()>:
 801b654:	b510      	push	{r4, lr}
 801b656:	f241 1008 	movw	r0, #4360	@ 0x1108
 801b65a:	4c24      	ldr	r4, [pc, #144]	@ (801b6ec <gd32_adc_init()+0x98>)
 801b65c:	f7ff f972 	bl	801a944 <rcu_periph_clock_enable>
 801b660:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 801b664:	f000 fa22 	bl	801baac <adc_clock_config>
 801b668:	4620      	mov	r0, r4
 801b66a:	2203      	movs	r2, #3
 801b66c:	2102      	movs	r1, #2
 801b66e:	f000 fa9f 	bl	801bbb0 <adc_channel_length_config>
 801b672:	4620      	mov	r0, r4
 801b674:	2306      	movs	r3, #6
 801b676:	2210      	movs	r2, #16
 801b678:	2100      	movs	r1, #0
 801b67a:	f000 fab6 	bl	801bbea <adc_inserted_channel_config>
 801b67e:	4620      	mov	r0, r4
 801b680:	2306      	movs	r3, #6
 801b682:	2211      	movs	r2, #17
 801b684:	2101      	movs	r1, #1
 801b686:	f000 fab0 	bl	801bbea <adc_inserted_channel_config>
 801b68a:	2306      	movs	r3, #6
 801b68c:	4620      	mov	r0, r4
 801b68e:	2212      	movs	r2, #18
 801b690:	2102      	movs	r1, #2
 801b692:	f000 faaa 	bl	801bbea <adc_inserted_channel_config>
 801b696:	2200      	movs	r2, #0
 801b698:	4620      	mov	r0, r4
 801b69a:	2102      	movs	r1, #2
 801b69c:	f000 fad5 	bl	801bc4a <adc_external_trigger_config>
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	2100      	movs	r1, #0
 801b6a4:	f000 fa3a 	bl	801bb1c <adc_data_alignment_config>
 801b6a8:	2201      	movs	r2, #1
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b6b0:	f000 fa0c 	bl	801bacc <adc_special_function_config>
 801b6b4:	2101      	movs	r1, #1
 801b6b6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801b6ba:	f000 fa51 	bl	801bb60 <adc_channel_16_to_18>
 801b6be:	2101      	movs	r1, #1
 801b6c0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801b6c4:	f000 fa4c 	bl	801bb60 <adc_channel_16_to_18>
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	f000 fa30 	bl	801bb2e <adc_enable>
 801b6ce:	2100      	movs	r1, #0
 801b6d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801b6d4:	f7ff ff80 	bl	801b5d8 <udelay(unsigned long, unsigned long)>
 801b6d8:	4620      	mov	r0, r4
 801b6da:	f000 fa30 	bl	801bb3e <adc_calibration_enable>
 801b6de:	4620      	mov	r0, r4
 801b6e0:	2102      	movs	r1, #2
 801b6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6e6:	f000 bac6 	b.w	801bc76 <adc_software_trigger_enable>
 801b6ea:	bf00      	nop
 801b6ec:	40012000 	andmi	r2, r1, r0

0801b6f0 <dma::memcpy32_init()>:
 801b6f0:	b510      	push	{r4, lr}
 801b6f2:	4c14      	ldr	r4, [pc, #80]	@ (801b744 <dma::memcpy32_init()+0x54>)
 801b6f4:	b08e      	sub	sp, #56	@ 0x38
 801b6f6:	f640 4016 	movw	r0, #3094	@ 0xc16
 801b6fa:	f7ff f923 	bl	801a944 <rcu_periph_clock_enable>
 801b6fe:	4620      	mov	r0, r4
 801b700:	2100      	movs	r1, #0
 801b702:	f7fe fd03 	bl	801a10c <dma_deinit>
 801b706:	2100      	movs	r1, #0
 801b708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b70c:	e9cd 3102 	strd	r3, r1, [sp, #8]
 801b710:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801b714:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801b718:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 801b71c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801b720:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b724:	2003      	movs	r0, #3
 801b726:	2301      	movs	r3, #1
 801b728:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
 801b72c:	2380      	movs	r3, #128	@ 0x80
 801b72e:	e9cd 310b 	strd	r3, r1, [sp, #44]	@ 0x2c
 801b732:	aa01      	add	r2, sp, #4
 801b734:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 801b738:	4620      	mov	r0, r4
 801b73a:	930d      	str	r3, [sp, #52]	@ 0x34
 801b73c:	f7fe fd5e 	bl	801a1fc <dma_multi_data_mode_init>
 801b740:	b00e      	add	sp, #56	@ 0x38
 801b742:	bd10      	pop	{r4, pc}
 801b744:	40026400 	andmi	r6, r2, r0, lsl #8

0801b748 <send_stop() [clone .isra.0]>:
 801b748:	b508      	push	{r3, lr}
 801b74a:	4806      	ldr	r0, [pc, #24]	@ (801b764 <send_stop() [clone .isra.0]+0x1c>)
 801b74c:	f000 fb22 	bl	801bd94 <i2c_stop_on_bus>
 801b750:	4905      	ldr	r1, [pc, #20]	@ (801b768 <send_stop() [clone .isra.0]+0x20>)
 801b752:	f640 73ff 	movw	r3, #4095	@ 0xfff
 801b756:	f8d1 2400 	ldr.w	r2, [r1, #1024]	@ 0x400
 801b75a:	0592      	lsls	r2, r2, #22
 801b75c:	d501      	bpl.n	801b762 <send_stop() [clone .isra.0]+0x1a>
 801b75e:	3b01      	subs	r3, #1
 801b760:	d1f9      	bne.n	801b756 <send_stop() [clone .isra.0]+0xe>
 801b762:	bd08      	pop	{r3, pc}
 801b764:	40005400 	andmi	r5, r0, r0, lsl #8
 801b768:	40005000 	andmi	r5, r0, r0

0801b76c <gd32_i2c_begin>:
 801b76c:	b510      	push	{r4, lr}
 801b76e:	f241 0015 	movw	r0, #4117	@ 0x1015
 801b772:	4c22      	ldr	r4, [pc, #136]	@ (801b7fc <gd32_i2c_begin+0x90>)
 801b774:	f7ff f8e6 	bl	801a944 <rcu_periph_clock_enable>
 801b778:	f640 4001 	movw	r0, #3073	@ 0xc01
 801b77c:	f7ff f8e2 	bl	801a944 <rcu_periph_clock_enable>
 801b780:	f640 4001 	movw	r0, #3073	@ 0xc01
 801b784:	f7ff f8de 	bl	801a944 <rcu_periph_clock_enable>
 801b788:	4620      	mov	r0, r4
 801b78a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b78e:	2104      	movs	r1, #4
 801b790:	f7ff f894 	bl	801a8bc <gpio_af_set>
 801b794:	4620      	mov	r0, r4
 801b796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b79a:	2201      	movs	r2, #1
 801b79c:	2102      	movs	r1, #2
 801b79e:	f7ff f84f 	bl	801a840 <gpio_mode_set>
 801b7a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b7a6:	4620      	mov	r0, r4
 801b7a8:	2202      	movs	r2, #2
 801b7aa:	2101      	movs	r1, #1
 801b7ac:	f7ff f86a 	bl	801a884 <gpio_output_options_set>
 801b7b0:	4620      	mov	r0, r4
 801b7b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b7b6:	2104      	movs	r1, #4
 801b7b8:	f7ff f880 	bl	801a8bc <gpio_af_set>
 801b7bc:	4620      	mov	r0, r4
 801b7be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b7c2:	2201      	movs	r2, #1
 801b7c4:	2102      	movs	r1, #2
 801b7c6:	f7ff f83b 	bl	801a840 <gpio_mode_set>
 801b7ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	2202      	movs	r2, #2
 801b7d2:	f5a4 34d8 	sub.w	r4, r4, #110592	@ 0x1b000
 801b7d6:	2101      	movs	r1, #1
 801b7d8:	f7ff f854 	bl	801a884 <gpio_output_options_set>
 801b7dc:	4908      	ldr	r1, [pc, #32]	@ (801b800 <gd32_i2c_begin+0x94>)
 801b7de:	4620      	mov	r0, r4
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	f000 fa57 	bl	801bc94 <i2c_clock_config>
 801b7e6:	4620      	mov	r0, r4
 801b7e8:	f000 faca 	bl	801bd80 <i2c_enable>
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801b7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7f6:	f000 baaf 	b.w	801bd58 <i2c_ack_config>
 801b7fa:	bf00      	nop
 801b7fc:	40020400 	andmi	r0, r2, r0, lsl #8
 801b800:	00061a80 	andeq	r1, r6, r0, lsl #21

0801b804 <gd32_i2c_set_baudrate>:
 801b804:	4601      	mov	r1, r0
 801b806:	2200      	movs	r2, #0
 801b808:	4801      	ldr	r0, [pc, #4]	@ (801b810 <gd32_i2c_set_baudrate+0xc>)
 801b80a:	f000 ba43 	b.w	801bc94 <i2c_clock_config>
 801b80e:	bf00      	nop
 801b810:	40005400 	andmi	r5, r0, r0, lsl #8

0801b814 <gd32_i2c_set_address>:
 801b814:	4b01      	ldr	r3, [pc, #4]	@ (801b81c <gd32_i2c_set_address+0x8>)
 801b816:	0040      	lsls	r0, r0, #1
 801b818:	7018      	strb	r0, [r3, #0]
 801b81a:	4770      	bx	lr
 801b81c:	2001bcd4 	ldrdcs	fp, [r1], -r4

0801b820 <gd32_i2c_write>:
 801b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b822:	4f30      	ldr	r7, [pc, #192]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b824:	4604      	mov	r4, r0
 801b826:	460d      	mov	r5, r1
 801b828:	f640 76ff 	movw	r6, #4095	@ 0xfff
 801b82c:	f240 6101 	movw	r1, #1537	@ 0x601
 801b830:	4638      	mov	r0, r7
 801b832:	f000 fab9 	bl	801bda8 <i2c_flag_get>
 801b836:	bb90      	cbnz	r0, 801b89e <gd32_i2c_write+0x7e>
 801b838:	482a      	ldr	r0, [pc, #168]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b83a:	4f2a      	ldr	r7, [pc, #168]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b83c:	f000 faa5 	bl	801bd8a <i2c_start_on_bus>
 801b840:	f640 76ff 	movw	r6, #4095	@ 0xfff
 801b844:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801b848:	4638      	mov	r0, r7
 801b84a:	f000 faad 	bl	801bda8 <i2c_flag_get>
 801b84e:	b370      	cbz	r0, 801b8ae <gd32_i2c_write+0x8e>
 801b850:	4b25      	ldr	r3, [pc, #148]	@ (801b8e8 <gd32_i2c_write+0xc8>)
 801b852:	4824      	ldr	r0, [pc, #144]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b854:	7819      	ldrb	r1, [r3, #0]
 801b856:	4f23      	ldr	r7, [pc, #140]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b858:	f06f 0201 	mvn.w	r2, #1
 801b85c:	f000 fa88 	bl	801bd70 <i2c_master_addressing>
 801b860:	f640 76ff 	movw	r6, #4095	@ 0xfff
 801b864:	f240 5101 	movw	r1, #1281	@ 0x501
 801b868:	4638      	mov	r0, r7
 801b86a:	f000 fa9d 	bl	801bda8 <i2c_flag_get>
 801b86e:	b308      	cbz	r0, 801b8b4 <gd32_i2c_write+0x94>
 801b870:	481c      	ldr	r0, [pc, #112]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b872:	4f1c      	ldr	r7, [pc, #112]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b874:	f240 5101 	movw	r1, #1281	@ 0x501
 801b878:	f000 fa9e 	bl	801bdb8 <i2c_flag_clear>
 801b87c:	f640 76ff 	movw	r6, #4095	@ 0xfff
 801b880:	f240 5107 	movw	r1, #1287	@ 0x507
 801b884:	4638      	mov	r0, r7
 801b886:	f000 fa8f 	bl	801bda8 <i2c_flag_get>
 801b88a:	2801      	cmp	r0, #1
 801b88c:	d115      	bne.n	801b8ba <gd32_i2c_write+0x9a>
 801b88e:	4f15      	ldr	r7, [pc, #84]	@ (801b8e4 <gd32_i2c_write+0xc4>)
 801b890:	4425      	add	r5, r4
 801b892:	42ac      	cmp	r4, r5
 801b894:	d114      	bne.n	801b8c0 <gd32_i2c_write+0xa0>
 801b896:	f7ff ff57 	bl	801b748 <send_stop() [clone .isra.0]>
 801b89a:	2000      	movs	r0, #0
 801b89c:	e005      	b.n	801b8aa <gd32_i2c_write+0x8a>
 801b89e:	3e01      	subs	r6, #1
 801b8a0:	d1c4      	bne.n	801b82c <gd32_i2c_write+0xc>
 801b8a2:	f7ff ff51 	bl	801b748 <send_stop() [clone .isra.0]>
 801b8a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8aa:	4240      	negs	r0, r0
 801b8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8ae:	3e01      	subs	r6, #1
 801b8b0:	d1c8      	bne.n	801b844 <gd32_i2c_write+0x24>
 801b8b2:	e7f6      	b.n	801b8a2 <gd32_i2c_write+0x82>
 801b8b4:	3e01      	subs	r6, #1
 801b8b6:	d1d5      	bne.n	801b864 <gd32_i2c_write+0x44>
 801b8b8:	e7f3      	b.n	801b8a2 <gd32_i2c_write+0x82>
 801b8ba:	3e01      	subs	r6, #1
 801b8bc:	d1e0      	bne.n	801b880 <gd32_i2c_write+0x60>
 801b8be:	e7f0      	b.n	801b8a2 <gd32_i2c_write+0x82>
 801b8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8c4:	4638      	mov	r0, r7
 801b8c6:	f000 fa6a 	bl	801bd9e <i2c_data_transmit>
 801b8ca:	f640 76ff 	movw	r6, #4095	@ 0xfff
 801b8ce:	f240 5102 	movw	r1, #1282	@ 0x502
 801b8d2:	4638      	mov	r0, r7
 801b8d4:	f000 fa68 	bl	801bda8 <i2c_flag_get>
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	d1da      	bne.n	801b892 <gd32_i2c_write+0x72>
 801b8dc:	3e01      	subs	r6, #1
 801b8de:	d1f6      	bne.n	801b8ce <gd32_i2c_write+0xae>
 801b8e0:	e7df      	b.n	801b8a2 <gd32_i2c_write+0x82>
 801b8e2:	bf00      	nop
 801b8e4:	40005400 	andmi	r5, r0, r0, lsl #8
 801b8e8:	2001bcd4 	ldrdcs	fp, [r1], -r4

0801b8ec <gd32_i2c_read>:
 801b8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8f0:	4f4e      	ldr	r7, [pc, #312]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b8f2:	4680      	mov	r8, r0
 801b8f4:	460c      	mov	r4, r1
 801b8f6:	f640 75ff 	movw	r5, #4095	@ 0xfff
 801b8fa:	f240 6101 	movw	r1, #1537	@ 0x601
 801b8fe:	4638      	mov	r0, r7
 801b900:	f000 fa52 	bl	801bda8 <i2c_flag_get>
 801b904:	4606      	mov	r6, r0
 801b906:	bb10      	cbnz	r0, 801b94e <gd32_i2c_read+0x62>
 801b908:	2c02      	cmp	r4, #2
 801b90a:	d104      	bne.n	801b916 <gd32_i2c_read+0x2a>
 801b90c:	4847      	ldr	r0, [pc, #284]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b90e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b912:	f000 fa27 	bl	801bd64 <i2c_ackpos_config>
 801b916:	4845      	ldr	r0, [pc, #276]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b918:	4f44      	ldr	r7, [pc, #272]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b91a:	f000 fa36 	bl	801bd8a <i2c_start_on_bus>
 801b91e:	f640 75ff 	movw	r5, #4095	@ 0xfff
 801b922:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801b926:	4638      	mov	r0, r7
 801b928:	f000 fa3e 	bl	801bda8 <i2c_flag_get>
 801b92c:	b1b8      	cbz	r0, 801b95e <gd32_i2c_read+0x72>
 801b92e:	4b40      	ldr	r3, [pc, #256]	@ (801ba30 <gd32_i2c_read+0x144>)
 801b930:	483e      	ldr	r0, [pc, #248]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b932:	7819      	ldrb	r1, [r3, #0]
 801b934:	2201      	movs	r2, #1
 801b936:	f000 fa1b 	bl	801bd70 <i2c_master_addressing>
 801b93a:	2c02      	cmp	r4, #2
 801b93c:	d803      	bhi.n	801b946 <gd32_i2c_read+0x5a>
 801b93e:	483b      	ldr	r0, [pc, #236]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b940:	2100      	movs	r1, #0
 801b942:	f000 fa09 	bl	801bd58 <i2c_ack_config>
 801b946:	4f39      	ldr	r7, [pc, #228]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b948:	f640 75ff 	movw	r5, #4095	@ 0xfff
 801b94c:	e00c      	b.n	801b968 <gd32_i2c_read+0x7c>
 801b94e:	3d01      	subs	r5, #1
 801b950:	d1d3      	bne.n	801b8fa <gd32_i2c_read+0xe>
 801b952:	f7ff fef9 	bl	801b748 <send_stop() [clone .isra.0]>
 801b956:	2604      	movs	r6, #4
 801b958:	4630      	mov	r0, r6
 801b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b95e:	3d01      	subs	r5, #1
 801b960:	d1df      	bne.n	801b922 <gd32_i2c_read+0x36>
 801b962:	e7f6      	b.n	801b952 <gd32_i2c_read+0x66>
 801b964:	3d01      	subs	r5, #1
 801b966:	d0f4      	beq.n	801b952 <gd32_i2c_read+0x66>
 801b968:	f240 5101 	movw	r1, #1281	@ 0x501
 801b96c:	4638      	mov	r0, r7
 801b96e:	f000 fa1b 	bl	801bda8 <i2c_flag_get>
 801b972:	2800      	cmp	r0, #0
 801b974:	d0f6      	beq.n	801b964 <gd32_i2c_read+0x78>
 801b976:	482d      	ldr	r0, [pc, #180]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b978:	f240 5101 	movw	r1, #1281	@ 0x501
 801b97c:	f000 fa1c 	bl	801bdb8 <i2c_flag_clear>
 801b980:	2c01      	cmp	r4, #1
 801b982:	d102      	bne.n	801b98a <gd32_i2c_read+0x9e>
 801b984:	4829      	ldr	r0, [pc, #164]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b986:	f000 fa05 	bl	801bd94 <i2c_stop_on_bus>
 801b98a:	4d28      	ldr	r5, [pc, #160]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b98c:	f640 77ff 	movw	r7, #4095	@ 0xfff
 801b990:	e022      	b.n	801b9d8 <gd32_i2c_read+0xec>
 801b992:	2c03      	cmp	r4, #3
 801b994:	d134      	bne.n	801ba00 <gd32_i2c_read+0x114>
 801b996:	f640 79ff 	movw	r9, #4095	@ 0xfff
 801b99a:	e002      	b.n	801b9a2 <gd32_i2c_read+0xb6>
 801b99c:	f1b9 0901 	subs.w	r9, r9, #1
 801b9a0:	d0d7      	beq.n	801b952 <gd32_i2c_read+0x66>
 801b9a2:	f240 5102 	movw	r1, #1282	@ 0x502
 801b9a6:	4628      	mov	r0, r5
 801b9a8:	f000 f9fe 	bl	801bda8 <i2c_flag_get>
 801b9ac:	2800      	cmp	r0, #0
 801b9ae:	d0f5      	beq.n	801b99c <gd32_i2c_read+0xb0>
 801b9b0:	2100      	movs	r1, #0
 801b9b2:	4628      	mov	r0, r5
 801b9b4:	f000 f9d0 	bl	801bd58 <i2c_ack_config>
 801b9b8:	f240 5106 	movw	r1, #1286	@ 0x506
 801b9bc:	4628      	mov	r0, r5
 801b9be:	f000 f9f3 	bl	801bda8 <i2c_flag_get>
 801b9c2:	b138      	cbz	r0, 801b9d4 <gd32_i2c_read+0xe8>
 801b9c4:	4628      	mov	r0, r5
 801b9c6:	f000 f9ec 	bl	801bda2 <i2c_data_receive>
 801b9ca:	f808 0b01 	strb.w	r0, [r8], #1
 801b9ce:	3c01      	subs	r4, #1
 801b9d0:	f640 77ff 	movw	r7, #4095	@ 0xfff
 801b9d4:	3f01      	subs	r7, #1
 801b9d6:	d0bc      	beq.n	801b952 <gd32_i2c_read+0x66>
 801b9d8:	2c00      	cmp	r4, #0
 801b9da:	d1da      	bne.n	801b992 <gd32_i2c_read+0xa6>
 801b9dc:	4a15      	ldr	r2, [pc, #84]	@ (801ba34 <gd32_i2c_read+0x148>)
 801b9de:	f640 73ff 	movw	r3, #4095	@ 0xfff
 801b9e2:	f8d2 4400 	ldr.w	r4, [r2, #1024]	@ 0x400
 801b9e6:	f414 7400 	ands.w	r4, r4, #512	@ 0x200
 801b9ea:	d11c      	bne.n	801ba26 <gd32_i2c_read+0x13a>
 801b9ec:	480f      	ldr	r0, [pc, #60]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b9ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801b9f2:	f000 f9b1 	bl	801bd58 <i2c_ack_config>
 801b9f6:	480d      	ldr	r0, [pc, #52]	@ (801ba2c <gd32_i2c_read+0x140>)
 801b9f8:	4621      	mov	r1, r4
 801b9fa:	f000 f9b3 	bl	801bd64 <i2c_ackpos_config>
 801b9fe:	e7ab      	b.n	801b958 <gd32_i2c_read+0x6c>
 801ba00:	2c02      	cmp	r4, #2
 801ba02:	d1d9      	bne.n	801b9b8 <gd32_i2c_read+0xcc>
 801ba04:	f640 79ff 	movw	r9, #4095	@ 0xfff
 801ba08:	e002      	b.n	801ba10 <gd32_i2c_read+0x124>
 801ba0a:	f1b9 0901 	subs.w	r9, r9, #1
 801ba0e:	d0a0      	beq.n	801b952 <gd32_i2c_read+0x66>
 801ba10:	f240 5102 	movw	r1, #1282	@ 0x502
 801ba14:	4628      	mov	r0, r5
 801ba16:	f000 f9c7 	bl	801bda8 <i2c_flag_get>
 801ba1a:	2800      	cmp	r0, #0
 801ba1c:	d0f5      	beq.n	801ba0a <gd32_i2c_read+0x11e>
 801ba1e:	4628      	mov	r0, r5
 801ba20:	f000 f9b8 	bl	801bd94 <i2c_stop_on_bus>
 801ba24:	e7c8      	b.n	801b9b8 <gd32_i2c_read+0xcc>
 801ba26:	3b01      	subs	r3, #1
 801ba28:	d1db      	bne.n	801b9e2 <gd32_i2c_read+0xf6>
 801ba2a:	e794      	b.n	801b956 <gd32_i2c_read+0x6a>
 801ba2c:	40005400 	andmi	r5, r0, r0, lsl #8
 801ba30:	2001bcd4 	ldrdcs	fp, [r1], -r4
 801ba34:	40005000 	andmi	r5, r0, r0

0801ba38 <uart0_init>:
 801ba38:	b507      	push	{r0, r1, r2, lr}
 801ba3a:	2301      	movs	r3, #1
 801ba3c:	9300      	str	r3, [sp, #0]
 801ba3e:	4805      	ldr	r0, [pc, #20]	@ (801ba54 <uart0_init+0x1c>)
 801ba40:	2300      	movs	r3, #0
 801ba42:	2208      	movs	r2, #8
 801ba44:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 801ba48:	f7ff fb9a 	bl	801b180 <gd32_uart_begin(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
 801ba4c:	b003      	add	sp, #12
 801ba4e:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba52:	bf00      	nop
 801ba54:	40011000 	andmi	r1, r1, r0

0801ba58 <uart0_putc>:
 801ba58:	280a      	cmp	r0, #10
 801ba5a:	b570      	push	{r4, r5, r6, lr}
 801ba5c:	4d0a      	ldr	r5, [pc, #40]	@ (801ba88 <uart0_putc+0x30>)
 801ba5e:	4604      	mov	r4, r0
 801ba60:	d107      	bne.n	801ba72 <uart0_putc+0x1a>
 801ba62:	2107      	movs	r1, #7
 801ba64:	4628      	mov	r0, r5
 801ba66:	f7ff fb65 	bl	801b134 <usart_flag_get>
 801ba6a:	2800      	cmp	r0, #0
 801ba6c:	d0f9      	beq.n	801ba62 <uart0_putc+0xa>
 801ba6e:	230d      	movs	r3, #13
 801ba70:	606b      	str	r3, [r5, #4]
 801ba72:	4e05      	ldr	r6, [pc, #20]	@ (801ba88 <uart0_putc+0x30>)
 801ba74:	2107      	movs	r1, #7
 801ba76:	4630      	mov	r0, r6
 801ba78:	f7ff fb5c 	bl	801b134 <usart_flag_get>
 801ba7c:	2800      	cmp	r0, #0
 801ba7e:	d0f9      	beq.n	801ba74 <uart0_putc+0x1c>
 801ba80:	b2e4      	uxtb	r4, r4
 801ba82:	606c      	str	r4, [r5, #4]
 801ba84:	bd70      	pop	{r4, r5, r6, pc}
 801ba86:	bf00      	nop
 801ba88:	40011000 	andmi	r1, r1, r0

0801ba8c <uart0_puts>:
 801ba8c:	b510      	push	{r4, lr}
 801ba8e:	1e44      	subs	r4, r0, #1
 801ba90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ba94:	b903      	cbnz	r3, 801ba98 <uart0_puts+0xc>
 801ba96:	bd10      	pop	{r4, pc}
 801ba98:	2b0a      	cmp	r3, #10
 801ba9a:	d102      	bne.n	801baa2 <uart0_puts+0x16>
 801ba9c:	200d      	movs	r0, #13
 801ba9e:	f7ff ffdb 	bl	801ba58 <uart0_putc>
 801baa2:	7820      	ldrb	r0, [r4, #0]
 801baa4:	f7ff ffd8 	bl	801ba58 <uart0_putc>
 801baa8:	e7f2      	b.n	801ba90 <uart0_puts+0x4>
	...

0801baac <adc_clock_config>:
 801baac:	4b06      	ldr	r3, [pc, #24]	@ (801bac8 <adc_clock_config+0x1c>)
 801baae:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 801bab2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 801bab6:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
 801baba:	f8d3 2304 	ldr.w	r2, [r3, #772]	@ 0x304
 801babe:	4302      	orrs	r2, r0
 801bac0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
 801bac4:	4770      	bx	lr
 801bac6:	bf00      	nop
 801bac8:	40012000 	andmi	r2, r1, r0

0801bacc <adc_special_function_config>:
 801bacc:	b510      	push	{r4, lr}
 801bace:	f401 7380 	and.w	r3, r1, #256	@ 0x100
 801bad2:	f401 6480 	and.w	r4, r1, #1024	@ 0x400
 801bad6:	f001 0102 	and.w	r1, r1, #2
 801bada:	b17a      	cbz	r2, 801bafc <adc_special_function_config+0x30>
 801badc:	b11b      	cbz	r3, 801bae6 <adc_special_function_config+0x1a>
 801bade:	6843      	ldr	r3, [r0, #4]
 801bae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801bae4:	6043      	str	r3, [r0, #4]
 801bae6:	b11c      	cbz	r4, 801baf0 <adc_special_function_config+0x24>
 801bae8:	6843      	ldr	r3, [r0, #4]
 801baea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801baee:	6043      	str	r3, [r0, #4]
 801baf0:	b119      	cbz	r1, 801bafa <adc_special_function_config+0x2e>
 801baf2:	6883      	ldr	r3, [r0, #8]
 801baf4:	f043 0302 	orr.w	r3, r3, #2
 801baf8:	6083      	str	r3, [r0, #8]
 801bafa:	bd10      	pop	{r4, pc}
 801bafc:	b11b      	cbz	r3, 801bb06 <adc_special_function_config+0x3a>
 801bafe:	6843      	ldr	r3, [r0, #4]
 801bb00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801bb04:	6043      	str	r3, [r0, #4]
 801bb06:	b11c      	cbz	r4, 801bb10 <adc_special_function_config+0x44>
 801bb08:	6843      	ldr	r3, [r0, #4]
 801bb0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801bb0e:	6043      	str	r3, [r0, #4]
 801bb10:	2900      	cmp	r1, #0
 801bb12:	d0f2      	beq.n	801bafa <adc_special_function_config+0x2e>
 801bb14:	6883      	ldr	r3, [r0, #8]
 801bb16:	f023 0302 	bic.w	r3, r3, #2
 801bb1a:	e7ed      	b.n	801baf8 <adc_special_function_config+0x2c>

0801bb1c <adc_data_alignment_config>:
 801bb1c:	6883      	ldr	r3, [r0, #8]
 801bb1e:	b119      	cbz	r1, 801bb28 <adc_data_alignment_config+0xc>
 801bb20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801bb24:	6083      	str	r3, [r0, #8]
 801bb26:	4770      	bx	lr
 801bb28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801bb2c:	e7fa      	b.n	801bb24 <adc_data_alignment_config+0x8>

0801bb2e <adc_enable>:
 801bb2e:	6883      	ldr	r3, [r0, #8]
 801bb30:	07db      	lsls	r3, r3, #31
 801bb32:	bf5e      	ittt	pl
 801bb34:	6883      	ldrpl	r3, [r0, #8]
 801bb36:	f043 0301 	orrpl.w	r3, r3, #1
 801bb3a:	6083      	strpl	r3, [r0, #8]
 801bb3c:	4770      	bx	lr

0801bb3e <adc_calibration_enable>:
 801bb3e:	6883      	ldr	r3, [r0, #8]
 801bb40:	f043 0308 	orr.w	r3, r3, #8
 801bb44:	f100 0208 	add.w	r2, r0, #8
 801bb48:	6083      	str	r3, [r0, #8]
 801bb4a:	6813      	ldr	r3, [r2, #0]
 801bb4c:	0719      	lsls	r1, r3, #28
 801bb4e:	d4fc      	bmi.n	801bb4a <adc_calibration_enable+0xc>
 801bb50:	6883      	ldr	r3, [r0, #8]
 801bb52:	f043 0304 	orr.w	r3, r3, #4
 801bb56:	6083      	str	r3, [r0, #8]
 801bb58:	6813      	ldr	r3, [r2, #0]
 801bb5a:	075b      	lsls	r3, r3, #29
 801bb5c:	d4fc      	bmi.n	801bb58 <adc_calibration_enable+0x1a>
 801bb5e:	4770      	bx	lr

0801bb60 <adc_channel_16_to_18>:
 801bb60:	f400 0380 	and.w	r3, r0, #4194304	@ 0x400000
 801bb64:	f400 0000 	and.w	r0, r0, #8388608	@ 0x800000
 801bb68:	b181      	cbz	r1, 801bb8c <adc_channel_16_to_18+0x2c>
 801bb6a:	b133      	cbz	r3, 801bb7a <adc_channel_16_to_18+0x1a>
 801bb6c:	4a0f      	ldr	r2, [pc, #60]	@ (801bbac <adc_channel_16_to_18+0x4c>)
 801bb6e:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 801bb72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801bb76:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 801bb7a:	b130      	cbz	r0, 801bb8a <adc_channel_16_to_18+0x2a>
 801bb7c:	4a0b      	ldr	r2, [pc, #44]	@ (801bbac <adc_channel_16_to_18+0x4c>)
 801bb7e:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 801bb82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801bb86:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 801bb8a:	4770      	bx	lr
 801bb8c:	b133      	cbz	r3, 801bb9c <adc_channel_16_to_18+0x3c>
 801bb8e:	4a07      	ldr	r2, [pc, #28]	@ (801bbac <adc_channel_16_to_18+0x4c>)
 801bb90:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 801bb94:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 801bb98:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
 801bb9c:	2800      	cmp	r0, #0
 801bb9e:	d0f4      	beq.n	801bb8a <adc_channel_16_to_18+0x2a>
 801bba0:	4a02      	ldr	r2, [pc, #8]	@ (801bbac <adc_channel_16_to_18+0x4c>)
 801bba2:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 801bba6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801bbaa:	e7ec      	b.n	801bb86 <adc_channel_16_to_18+0x26>
 801bbac:	40012000 	andmi	r2, r1, r0

0801bbb0 <adc_channel_length_config>:
 801bbb0:	2901      	cmp	r1, #1
 801bbb2:	d002      	beq.n	801bbba <adc_channel_length_config+0xa>
 801bbb4:	2902      	cmp	r1, #2
 801bbb6:	d00c      	beq.n	801bbd2 <adc_channel_length_config+0x22>
 801bbb8:	4770      	bx	lr
 801bbba:	3a01      	subs	r2, #1
 801bbbc:	2a0f      	cmp	r2, #15
 801bbbe:	d813      	bhi.n	801bbe8 <adc_channel_length_config+0x38>
 801bbc0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801bbc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801bbc6:	62c3      	str	r3, [r0, #44]	@ 0x2c
 801bbc8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801bbca:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801bbce:	62c3      	str	r3, [r0, #44]	@ 0x2c
 801bbd0:	4770      	bx	lr
 801bbd2:	3a01      	subs	r2, #1
 801bbd4:	2a03      	cmp	r2, #3
 801bbd6:	d807      	bhi.n	801bbe8 <adc_channel_length_config+0x38>
 801bbd8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801bbda:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 801bbde:	6383      	str	r3, [r0, #56]	@ 0x38
 801bbe0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801bbe2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801bbe6:	6383      	str	r3, [r0, #56]	@ 0x38
 801bbe8:	4770      	bx	lr

0801bbea <adc_inserted_channel_config>:
 801bbea:	2903      	cmp	r1, #3
 801bbec:	b530      	push	{r4, r5, lr}
 801bbee:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801bbf0:	d80f      	bhi.n	801bc12 <adc_inserted_channel_config+0x28>
 801bbf2:	f3c4 5401 	ubfx	r4, r4, #20, #2
 801bbf6:	1a61      	subs	r1, r4, r1
 801bbf8:	f06f 0404 	mvn.w	r4, #4
 801bbfc:	4361      	muls	r1, r4
 801bbfe:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801bc00:	310f      	adds	r1, #15
 801bc02:	241f      	movs	r4, #31
 801bc04:	408c      	lsls	r4, r1
 801bc06:	ea25 0404 	bic.w	r4, r5, r4
 801bc0a:	fa02 f101 	lsl.w	r1, r2, r1
 801bc0e:	4321      	orrs	r1, r4
 801bc10:	6381      	str	r1, [r0, #56]	@ 0x38
 801bc12:	2a09      	cmp	r2, #9
 801bc14:	d80b      	bhi.n	801bc2e <adc_inserted_channel_config+0x44>
 801bc16:	6901      	ldr	r1, [r0, #16]
 801bc18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc1c:	2407      	movs	r4, #7
 801bc1e:	4094      	lsls	r4, r2
 801bc20:	ea21 0104 	bic.w	r1, r1, r4
 801bc24:	fa03 f202 	lsl.w	r2, r3, r2
 801bc28:	430a      	orrs	r2, r1
 801bc2a:	6102      	str	r2, [r0, #16]
 801bc2c:	bd30      	pop	{r4, r5, pc}
 801bc2e:	2a12      	cmp	r2, #18
 801bc30:	d8fc      	bhi.n	801bc2c <adc_inserted_channel_config+0x42>
 801bc32:	3a0a      	subs	r2, #10
 801bc34:	68c1      	ldr	r1, [r0, #12]
 801bc36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc3a:	2407      	movs	r4, #7
 801bc3c:	4094      	lsls	r4, r2
 801bc3e:	ea21 0104 	bic.w	r1, r1, r4
 801bc42:	4093      	lsls	r3, r2
 801bc44:	430b      	orrs	r3, r1
 801bc46:	60c3      	str	r3, [r0, #12]
 801bc48:	e7f0      	b.n	801bc2c <adc_inserted_channel_config+0x42>

0801bc4a <adc_external_trigger_config>:
 801bc4a:	2901      	cmp	r1, #1
 801bc4c:	d002      	beq.n	801bc54 <adc_external_trigger_config+0xa>
 801bc4e:	2902      	cmp	r1, #2
 801bc50:	d009      	beq.n	801bc66 <adc_external_trigger_config+0x1c>
 801bc52:	4770      	bx	lr
 801bc54:	6883      	ldr	r3, [r0, #8]
 801bc56:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 801bc5a:	6083      	str	r3, [r0, #8]
 801bc5c:	6883      	ldr	r3, [r0, #8]
 801bc5e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 801bc62:	6083      	str	r3, [r0, #8]
 801bc64:	4770      	bx	lr
 801bc66:	6883      	ldr	r3, [r0, #8]
 801bc68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 801bc6c:	6083      	str	r3, [r0, #8]
 801bc6e:	6883      	ldr	r3, [r0, #8]
 801bc70:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801bc74:	e7f5      	b.n	801bc62 <adc_external_trigger_config+0x18>

0801bc76 <adc_software_trigger_enable>:
 801bc76:	2901      	cmp	r1, #1
 801bc78:	d002      	beq.n	801bc80 <adc_software_trigger_enable+0xa>
 801bc7a:	2902      	cmp	r1, #2
 801bc7c:	d005      	beq.n	801bc8a <adc_software_trigger_enable+0x14>
 801bc7e:	4770      	bx	lr
 801bc80:	6883      	ldr	r3, [r0, #8]
 801bc82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801bc86:	6083      	str	r3, [r0, #8]
 801bc88:	4770      	bx	lr
 801bc8a:	6883      	ldr	r3, [r0, #8]
 801bc8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801bc90:	e7f9      	b.n	801bc86 <adc_software_trigger_enable+0x10>
	...

0801bc94 <i2c_clock_config>:
 801bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc96:	4605      	mov	r5, r0
 801bc98:	2002      	movs	r0, #2
 801bc9a:	460c      	mov	r4, r1
 801bc9c:	4617      	mov	r7, r2
 801bc9e:	f7fe fe8d 	bl	801a9bc <rcu_clock_freq_get>
 801bca2:	4a29      	ldr	r2, [pc, #164]	@ (801bd48 <i2c_clock_config+0xb4>)
 801bca4:	686e      	ldr	r6, [r5, #4]
 801bca6:	4603      	mov	r3, r0
 801bca8:	4828      	ldr	r0, [pc, #160]	@ (801bd4c <i2c_clock_config+0xb8>)
 801bcaa:	fbb3 f0f0 	udiv	r0, r3, r0
 801bcae:	4293      	cmp	r3, r2
 801bcb0:	bf34      	ite	cc
 801bcb2:	4601      	movcc	r1, r0
 801bcb4:	213c      	movcs	r1, #60	@ 0x3c
 801bcb6:	4a26      	ldr	r2, [pc, #152]	@ (801bd50 <i2c_clock_config+0xbc>)
 801bcb8:	f026 063f 	bic.w	r6, r6, #63	@ 0x3f
 801bcbc:	430e      	orrs	r6, r1
 801bcbe:	4294      	cmp	r4, r2
 801bcc0:	606e      	str	r6, [r5, #4]
 801bcc2:	d816      	bhi.n	801bcf2 <i2c_clock_config+0x5e>
 801bcc4:	3001      	adds	r0, #1
 801bcc6:	283b      	cmp	r0, #59	@ 0x3b
 801bcc8:	d90d      	bls.n	801bce6 <i2c_clock_config+0x52>
 801bcca:	223c      	movs	r2, #60	@ 0x3c
 801bccc:	622a      	str	r2, [r5, #32]
 801bcce:	0064      	lsls	r4, r4, #1
 801bcd0:	fbb3 f4f4 	udiv	r4, r3, r4
 801bcd4:	2c04      	cmp	r4, #4
 801bcd6:	69ea      	ldr	r2, [r5, #28]
 801bcd8:	bf38      	it	cc
 801bcda:	2404      	movcc	r4, #4
 801bcdc:	f3c4 040b 	ubfx	r4, r4, #0, #12
 801bce0:	4314      	orrs	r4, r2
 801bce2:	61ec      	str	r4, [r5, #28]
 801bce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bce6:	2802      	cmp	r0, #2
 801bce8:	d801      	bhi.n	801bcee <i2c_clock_config+0x5a>
 801bcea:	2202      	movs	r2, #2
 801bcec:	e7ee      	b.n	801bccc <i2c_clock_config+0x38>
 801bcee:	6228      	str	r0, [r5, #32]
 801bcf0:	e7ed      	b.n	801bcce <i2c_clock_config+0x3a>
 801bcf2:	4a18      	ldr	r2, [pc, #96]	@ (801bd54 <i2c_clock_config+0xc0>)
 801bcf4:	4294      	cmp	r4, r2
 801bcf6:	d8f5      	bhi.n	801bce4 <i2c_clock_config+0x50>
 801bcf8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801bcfc:	4351      	muls	r1, r2
 801bcfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801bd02:	fbb1 f1f2 	udiv	r1, r1, r2
 801bd06:	3101      	adds	r1, #1
 801bd08:	6229      	str	r1, [r5, #32]
 801bd0a:	b9a7      	cbnz	r7, 801bd36 <i2c_clock_config+0xa2>
 801bd0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd10:	fbb3 f4f4 	udiv	r4, r3, r4
 801bd14:	69eb      	ldr	r3, [r5, #28]
 801bd16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801bd1a:	61eb      	str	r3, [r5, #28]
 801bd1c:	f3c4 030b 	ubfx	r3, r4, #0, #12
 801bd20:	b90b      	cbnz	r3, 801bd26 <i2c_clock_config+0x92>
 801bd22:	f044 0401 	orr.w	r4, r4, #1
 801bd26:	69eb      	ldr	r3, [r5, #28]
 801bd28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801bd2c:	61eb      	str	r3, [r5, #28]
 801bd2e:	69eb      	ldr	r3, [r5, #28]
 801bd30:	4323      	orrs	r3, r4
 801bd32:	61eb      	str	r3, [r5, #28]
 801bd34:	e7d6      	b.n	801bce4 <i2c_clock_config+0x50>
 801bd36:	2219      	movs	r2, #25
 801bd38:	4354      	muls	r4, r2
 801bd3a:	fbb3 f4f4 	udiv	r4, r3, r4
 801bd3e:	69eb      	ldr	r3, [r5, #28]
 801bd40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801bd44:	e7e9      	b.n	801bd1a <i2c_clock_config+0x86>
 801bd46:	bf00      	nop
 801bd48:	03938700 	orrseq	r8, r3, #0, 14
 801bd4c:	000f4240 	andeq	r4, pc, r0, asr #4
 801bd50:	000186a0 	andeq	r8, r1, r0, lsr #13
 801bd54:	00061a80 	andeq	r1, r6, r0, lsl #21

0801bd58 <i2c_ack_config>:
 801bd58:	6803      	ldr	r3, [r0, #0]
 801bd5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801bd5e:	430b      	orrs	r3, r1
 801bd60:	6003      	str	r3, [r0, #0]
 801bd62:	4770      	bx	lr

0801bd64 <i2c_ackpos_config>:
 801bd64:	6803      	ldr	r3, [r0, #0]
 801bd66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801bd6a:	430b      	orrs	r3, r1
 801bd6c:	6003      	str	r3, [r0, #0]
 801bd6e:	4770      	bx	lr

0801bd70 <i2c_master_addressing>:
 801bd70:	3202      	adds	r2, #2
 801bd72:	bf0c      	ite	eq
 801bd74:	f021 0101 	biceq.w	r1, r1, #1
 801bd78:	f041 0101 	orrne.w	r1, r1, #1
 801bd7c:	6101      	str	r1, [r0, #16]
 801bd7e:	4770      	bx	lr

0801bd80 <i2c_enable>:
 801bd80:	6803      	ldr	r3, [r0, #0]
 801bd82:	f043 0301 	orr.w	r3, r3, #1
 801bd86:	6003      	str	r3, [r0, #0]
 801bd88:	4770      	bx	lr

0801bd8a <i2c_start_on_bus>:
 801bd8a:	6803      	ldr	r3, [r0, #0]
 801bd8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801bd90:	6003      	str	r3, [r0, #0]
 801bd92:	4770      	bx	lr

0801bd94 <i2c_stop_on_bus>:
 801bd94:	6803      	ldr	r3, [r0, #0]
 801bd96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801bd9a:	6003      	str	r3, [r0, #0]
 801bd9c:	4770      	bx	lr

0801bd9e <i2c_data_transmit>:
 801bd9e:	6101      	str	r1, [r0, #16]
 801bda0:	4770      	bx	lr

0801bda2 <i2c_data_receive>:
 801bda2:	6900      	ldr	r0, [r0, #16]
 801bda4:	b2c0      	uxtb	r0, r0
 801bda6:	4770      	bx	lr

0801bda8 <i2c_flag_get>:
 801bda8:	098b      	lsrs	r3, r1, #6
 801bdaa:	f001 011f 	and.w	r1, r1, #31
 801bdae:	5818      	ldr	r0, [r3, r0]
 801bdb0:	40c8      	lsrs	r0, r1
 801bdb2:	f000 0001 	and.w	r0, r0, #1
 801bdb6:	4770      	bx	lr

0801bdb8 <i2c_flag_clear>:
 801bdb8:	f240 5301 	movw	r3, #1281	@ 0x501
 801bdbc:	4299      	cmp	r1, r3
 801bdbe:	b510      	push	{r4, lr}
 801bdc0:	d102      	bne.n	801bdc8 <i2c_flag_clear+0x10>
 801bdc2:	6943      	ldr	r3, [r0, #20]
 801bdc4:	6983      	ldr	r3, [r0, #24]
 801bdc6:	bd10      	pop	{r4, pc}
 801bdc8:	098c      	lsrs	r4, r1, #6
 801bdca:	2201      	movs	r2, #1
 801bdcc:	5823      	ldr	r3, [r4, r0]
 801bdce:	f001 011f 	and.w	r1, r1, #31
 801bdd2:	408a      	lsls	r2, r1
 801bdd4:	ea23 0302 	bic.w	r3, r3, r2
 801bdd8:	5023      	str	r3, [r4, r0]
 801bdda:	e7f4      	b.n	801bdc6 <i2c_flag_clear+0xe>

0801bddc <__libc_init_array>:
 801bddc:	b570      	push	{r4, r5, r6, lr}
 801bdde:	4d0c      	ldr	r5, [pc, #48]	@ (801be10 <__libc_init_array+0x34>)
 801bde0:	4c0c      	ldr	r4, [pc, #48]	@ (801be14 <__libc_init_array+0x38>)
 801bde2:	1b64      	subs	r4, r4, r5
 801bde4:	10a4      	asrs	r4, r4, #2
 801bde6:	2600      	movs	r6, #0
 801bde8:	42a6      	cmp	r6, r4
 801bdea:	d107      	bne.n	801bdfc <__libc_init_array+0x20>
 801bdec:	4d0a      	ldr	r5, [pc, #40]	@ (801be18 <__libc_init_array+0x3c>)
 801bdee:	4c0b      	ldr	r4, [pc, #44]	@ (801be1c <__libc_init_array+0x40>)
 801bdf0:	1b64      	subs	r4, r4, r5
 801bdf2:	10a4      	asrs	r4, r4, #2
 801bdf4:	2600      	movs	r6, #0
 801bdf6:	42a6      	cmp	r6, r4
 801bdf8:	d105      	bne.n	801be06 <__libc_init_array+0x2a>
 801bdfa:	bd70      	pop	{r4, r5, r6, pc}
 801bdfc:	f855 3b04 	ldr.w	r3, [r5], #4
 801be00:	4798      	blx	r3
 801be02:	3601      	adds	r6, #1
 801be04:	e7f0      	b.n	801bde8 <__libc_init_array+0xc>
 801be06:	f855 3b04 	ldr.w	r3, [r5], #4
 801be0a:	4798      	blx	r3
 801be0c:	3601      	adds	r6, #1
 801be0e:	e7f2      	b.n	801bdf6 <__libc_init_array+0x1a>
 801be10:	0802190c 	stmdaeq	r2, {r2, r3, r8, fp, ip}
 801be14:	0802190c 	stmdaeq	r2, {r2, r3, r8, fp, ip}
 801be18:	0802190c 	stmdaeq	r2, {r2, r3, r8, fp, ip}
 801be1c:	0802190c 	stmdaeq	r2, {r2, r3, r8, fp, ip}

0801be20 <memcpy>:
 801be20:	b510      	push	{r4, lr}
 801be22:	1e43      	subs	r3, r0, #1
 801be24:	440a      	add	r2, r1
 801be26:	4291      	cmp	r1, r2
 801be28:	d100      	bne.n	801be2c <memcpy+0xc>
 801be2a:	bd10      	pop	{r4, pc}
 801be2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801be30:	f803 4f01 	strb.w	r4, [r3, #1]!
 801be34:	e7f7      	b.n	801be26 <memcpy+0x6>

0801be36 <memmove>:
 801be36:	4288      	cmp	r0, r1
 801be38:	b510      	push	{r4, lr}
 801be3a:	eb01 0302 	add.w	r3, r1, r2
 801be3e:	d208      	bcs.n	801be52 <memmove+0x1c>
 801be40:	1e42      	subs	r2, r0, #1
 801be42:	4299      	cmp	r1, r3
 801be44:	d100      	bne.n	801be48 <memmove+0x12>
 801be46:	bd10      	pop	{r4, pc}
 801be48:	f811 4b01 	ldrb.w	r4, [r1], #1
 801be4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801be50:	e7f7      	b.n	801be42 <memmove+0xc>
 801be52:	4402      	add	r2, r0
 801be54:	4601      	mov	r1, r0
 801be56:	428a      	cmp	r2, r1
 801be58:	d0f5      	beq.n	801be46 <memmove+0x10>
 801be5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801be5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801be62:	e7f8      	b.n	801be56 <memmove+0x20>

0801be64 <memset>:
 801be64:	b570      	push	{r4, r5, r6, lr}
 801be66:	b1ca      	cbz	r2, 801be9c <memset+0x38>
 801be68:	b2c9      	uxtb	r1, r1
 801be6a:	4603      	mov	r3, r0
 801be6c:	075c      	lsls	r4, r3, #29
 801be6e:	d111      	bne.n	801be94 <memset+0x30>
 801be70:	f04f 3501 	mov.w	r5, #16843009	@ 0x1010101
 801be74:	fba1 5605 	umull	r5, r6, r1, r5
 801be78:	f022 0407 	bic.w	r4, r2, #7
 801be7c:	442e      	add	r6, r5
 801be7e:	441c      	add	r4, r3
 801be80:	42a3      	cmp	r3, r4
 801be82:	d10c      	bne.n	801be9e <memset+0x3a>
 801be84:	f002 0207 	and.w	r2, r2, #7
 801be88:	4422      	add	r2, r4
 801be8a:	4294      	cmp	r4, r2
 801be8c:	d006      	beq.n	801be9c <memset+0x38>
 801be8e:	f804 1b01 	strb.w	r1, [r4], #1
 801be92:	e7fa      	b.n	801be8a <memset+0x26>
 801be94:	3a01      	subs	r2, #1
 801be96:	f803 1b01 	strb.w	r1, [r3], #1
 801be9a:	d1e7      	bne.n	801be6c <memset+0x8>
 801be9c:	bd70      	pop	{r4, r5, r6, pc}
 801be9e:	f843 5b08 	str.w	r5, [r3], #8
 801bea2:	f843 6c04 	str.w	r6, [r3, #-4]
 801bea6:	e7eb      	b.n	801be80 <memset+0x1c>

0801bea8 <_itostr>:
 801bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801beaa:	0fc7      	lsrs	r7, r0, #31
 801beac:	b091      	sub	sp, #68	@ 0x44
 801beae:	f10d 043f 	add.w	r4, sp, #63	@ 0x3f
 801beb2:	d01b      	beq.n	801beec <_itostr+0x44>
 801beb4:	4240      	negs	r0, r0
 801beb6:	4623      	mov	r3, r4
 801beb8:	250a      	movs	r5, #10
 801beba:	46ec      	mov	ip, sp
 801bebc:	fb90 f6f5 	sdiv	r6, r0, r5
 801bec0:	fb05 0016 	mls	r0, r5, r6, r0
 801bec4:	3030      	adds	r0, #48	@ 0x30
 801bec6:	f803 0901 	strb.w	r0, [r3], #-1
 801beca:	4630      	mov	r0, r6
 801becc:	b10e      	cbz	r6, 801bed2 <_itostr+0x2a>
 801bece:	4563      	cmp	r3, ip
 801bed0:	d1f4      	bne.n	801bebc <_itostr+0x14>
 801bed2:	b132      	cbz	r2, 801bee2 <_itostr+0x3a>
 801bed4:	4668      	mov	r0, sp
 801bed6:	2530      	movs	r5, #48	@ 0x30
 801bed8:	1ae6      	subs	r6, r4, r3
 801beda:	4296      	cmp	r6, r2
 801bedc:	da01      	bge.n	801bee2 <_itostr+0x3a>
 801bede:	4283      	cmp	r3, r0
 801bee0:	d816      	bhi.n	801bf10 <_itostr+0x68>
 801bee2:	b167      	cbz	r7, 801befe <_itostr+0x56>
 801bee4:	222d      	movs	r2, #45	@ 0x2d
 801bee6:	f803 2901 	strb.w	r2, [r3], #-1
 801beea:	e008      	b.n	801befe <_itostr+0x56>
 801beec:	2800      	cmp	r0, #0
 801beee:	d1e2      	bne.n	801beb6 <_itostr+0xe>
 801bef0:	2330      	movs	r3, #48	@ 0x30
 801bef2:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801bef6:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801befa:	2a00      	cmp	r2, #0
 801befc:	d1ea      	bne.n	801bed4 <_itostr+0x2c>
 801befe:	3301      	adds	r3, #1
 801bf00:	1ae0      	subs	r0, r4, r3
 801bf02:	3901      	subs	r1, #1
 801bf04:	aa10      	add	r2, sp, #64	@ 0x40
 801bf06:	4293      	cmp	r3, r2
 801bf08:	d305      	bcc.n	801bf16 <_itostr+0x6e>
 801bf0a:	3001      	adds	r0, #1
 801bf0c:	b011      	add	sp, #68	@ 0x44
 801bf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf10:	f803 5901 	strb.w	r5, [r3], #-1
 801bf14:	e7e0      	b.n	801bed8 <_itostr+0x30>
 801bf16:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf1a:	f801 2f01 	strb.w	r2, [r1, #1]!
 801bf1e:	e7f1      	b.n	801bf04 <_itostr+0x5c>

0801bf20 <_xputch>:
 801bf20:	4603      	mov	r3, r0
 801bf22:	b410      	push	{r4}
 801bf24:	4c09      	ldr	r4, [pc, #36]	@ (801bf4c <_xputch+0x2c>)
 801bf26:	68da      	ldr	r2, [r3, #12]
 801bf28:	4608      	mov	r0, r1
 801bf2a:	6821      	ldr	r1, [r4, #0]
 801bf2c:	3201      	adds	r2, #1
 801bf2e:	60da      	str	r2, [r3, #12]
 801bf30:	b141      	cbz	r1, 801bf44 <_xputch+0x24>
 801bf32:	691b      	ldr	r3, [r3, #16]
 801bf34:	429a      	cmp	r2, r3
 801bf36:	da02      	bge.n	801bf3e <_xputch+0x1e>
 801bf38:	1c4b      	adds	r3, r1, #1
 801bf3a:	6023      	str	r3, [r4, #0]
 801bf3c:	7008      	strb	r0, [r1, #0]
 801bf3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf42:	4770      	bx	lr
 801bf44:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf48:	f7fd bf74 	b.w	8019e34 <console_putc>
 801bf4c:	2001bcd8 	ldrdcs	fp, [r1], -r8

0801bf50 <_format_int>:
 801bf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf52:	b091      	sub	sp, #68	@ 0x44
 801bf54:	4606      	mov	r6, r0
 801bf56:	f10d 043f 	add.w	r4, sp, #63	@ 0x3f
 801bf5a:	bb91      	cbnz	r1, 801bfc2 <_format_int+0x72>
 801bf5c:	2330      	movs	r3, #48	@ 0x30
 801bf5e:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801bf62:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801bf66:	6832      	ldr	r2, [r6, #0]
 801bf68:	07d5      	lsls	r5, r2, #31
 801bf6a:	d507      	bpl.n	801bf7c <_format_int+0x2c>
 801bf6c:	6870      	ldr	r0, [r6, #4]
 801bf6e:	4669      	mov	r1, sp
 801bf70:	2530      	movs	r5, #48	@ 0x30
 801bf72:	1ae7      	subs	r7, r4, r3
 801bf74:	4287      	cmp	r7, r0
 801bf76:	da01      	bge.n	801bf7c <_format_int+0x2c>
 801bf78:	428b      	cmp	r3, r1
 801bf7a:	d833      	bhi.n	801bfe4 <_format_int+0x94>
 801bf7c:	0690      	lsls	r0, r2, #26
 801bf7e:	d507      	bpl.n	801bf90 <_format_int+0x40>
 801bf80:	68b0      	ldr	r0, [r6, #8]
 801bf82:	4669      	mov	r1, sp
 801bf84:	2530      	movs	r5, #48	@ 0x30
 801bf86:	1ae7      	subs	r7, r4, r3
 801bf88:	4287      	cmp	r7, r0
 801bf8a:	da01      	bge.n	801bf90 <_format_int+0x40>
 801bf8c:	428b      	cmp	r3, r1
 801bf8e:	d82c      	bhi.n	801bfea <_format_int+0x9a>
 801bf90:	0711      	lsls	r1, r2, #28
 801bf92:	bf44      	itt	mi
 801bf94:	212d      	movmi	r1, #45	@ 0x2d
 801bf96:	f803 1901 	strbmi.w	r1, [r3], #-1
 801bf9a:	0652      	lsls	r2, r2, #25
 801bf9c:	d407      	bmi.n	801bfae <_format_int+0x5e>
 801bf9e:	68b1      	ldr	r1, [r6, #8]
 801bfa0:	466a      	mov	r2, sp
 801bfa2:	2020      	movs	r0, #32
 801bfa4:	1ae5      	subs	r5, r4, r3
 801bfa6:	428d      	cmp	r5, r1
 801bfa8:	da01      	bge.n	801bfae <_format_int+0x5e>
 801bfaa:	4293      	cmp	r3, r2
 801bfac:	d820      	bhi.n	801bff0 <_format_int+0xa0>
 801bfae:	1ae5      	subs	r5, r4, r3
 801bfb0:	1c5c      	adds	r4, r3, #1
 801bfb2:	ab10      	add	r3, sp, #64	@ 0x40
 801bfb4:	429c      	cmp	r4, r3
 801bfb6:	d31e      	bcc.n	801bff6 <_format_int+0xa6>
 801bfb8:	68b3      	ldr	r3, [r6, #8]
 801bfba:	42ab      	cmp	r3, r5
 801bfbc:	dc21      	bgt.n	801c002 <_format_int+0xb2>
 801bfbe:	b011      	add	sp, #68	@ 0x44
 801bfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfc2:	4623      	mov	r3, r4
 801bfc4:	200a      	movs	r0, #10
 801bfc6:	466f      	mov	r7, sp
 801bfc8:	fbb1 f5f0 	udiv	r5, r1, r0
 801bfcc:	fb00 1215 	mls	r2, r0, r5, r1
 801bfd0:	3230      	adds	r2, #48	@ 0x30
 801bfd2:	f803 2901 	strb.w	r2, [r3], #-1
 801bfd6:	460a      	mov	r2, r1
 801bfd8:	2a09      	cmp	r2, #9
 801bfda:	4629      	mov	r1, r5
 801bfdc:	d9c3      	bls.n	801bf66 <_format_int+0x16>
 801bfde:	42bb      	cmp	r3, r7
 801bfe0:	d1f2      	bne.n	801bfc8 <_format_int+0x78>
 801bfe2:	e7c0      	b.n	801bf66 <_format_int+0x16>
 801bfe4:	f803 5901 	strb.w	r5, [r3], #-1
 801bfe8:	e7c3      	b.n	801bf72 <_format_int+0x22>
 801bfea:	f803 5901 	strb.w	r5, [r3], #-1
 801bfee:	e7ca      	b.n	801bf86 <_format_int+0x36>
 801bff0:	f803 0901 	strb.w	r0, [r3], #-1
 801bff4:	e7d6      	b.n	801bfa4 <_format_int+0x54>
 801bff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bffa:	4630      	mov	r0, r6
 801bffc:	f7ff ff90 	bl	801bf20 <_xputch>
 801c000:	e7d7      	b.n	801bfb2 <_format_int+0x62>
 801c002:	2120      	movs	r1, #32
 801c004:	4630      	mov	r0, r6
 801c006:	f7ff ff8b 	bl	801bf20 <_xputch>
 801c00a:	3501      	adds	r5, #1
 801c00c:	e7d4      	b.n	801bfb8 <_format_int+0x68>

0801c00e <_format_hex>:
 801c00e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c010:	b091      	sub	sp, #68	@ 0x44
 801c012:	6804      	ldr	r4, [r0, #0]
 801c014:	4606      	mov	r6, r0
 801c016:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 801c01a:	bb61      	cbnz	r1, 801c076 <_format_hex+0x68>
 801c01c:	2330      	movs	r3, #48	@ 0x30
 801c01e:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f
 801c022:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 801c026:	07e5      	lsls	r5, r4, #31
 801c028:	d507      	bpl.n	801c03a <_format_hex+0x2c>
 801c02a:	6870      	ldr	r0, [r6, #4]
 801c02c:	4669      	mov	r1, sp
 801c02e:	2530      	movs	r5, #48	@ 0x30
 801c030:	1ad7      	subs	r7, r2, r3
 801c032:	4287      	cmp	r7, r0
 801c034:	da01      	bge.n	801c03a <_format_hex+0x2c>
 801c036:	428b      	cmp	r3, r1
 801c038:	d831      	bhi.n	801c09e <_format_hex+0x90>
 801c03a:	06a0      	lsls	r0, r4, #26
 801c03c:	d507      	bpl.n	801c04e <_format_hex+0x40>
 801c03e:	68b0      	ldr	r0, [r6, #8]
 801c040:	4669      	mov	r1, sp
 801c042:	2530      	movs	r5, #48	@ 0x30
 801c044:	1ad7      	subs	r7, r2, r3
 801c046:	4287      	cmp	r7, r0
 801c048:	da01      	bge.n	801c04e <_format_hex+0x40>
 801c04a:	428b      	cmp	r3, r1
 801c04c:	d82a      	bhi.n	801c0a4 <_format_hex+0x96>
 801c04e:	0661      	lsls	r1, r4, #25
 801c050:	d407      	bmi.n	801c062 <_format_hex+0x54>
 801c052:	68b0      	ldr	r0, [r6, #8]
 801c054:	4669      	mov	r1, sp
 801c056:	2420      	movs	r4, #32
 801c058:	1ad5      	subs	r5, r2, r3
 801c05a:	4285      	cmp	r5, r0
 801c05c:	da01      	bge.n	801c062 <_format_hex+0x54>
 801c05e:	428b      	cmp	r3, r1
 801c060:	d823      	bhi.n	801c0aa <_format_hex+0x9c>
 801c062:	1ad5      	subs	r5, r2, r3
 801c064:	1c5c      	adds	r4, r3, #1
 801c066:	ab10      	add	r3, sp, #64	@ 0x40
 801c068:	429c      	cmp	r4, r3
 801c06a:	d321      	bcc.n	801c0b0 <_format_hex+0xa2>
 801c06c:	68b3      	ldr	r3, [r6, #8]
 801c06e:	42ab      	cmp	r3, r5
 801c070:	dc24      	bgt.n	801c0bc <_format_hex+0xae>
 801c072:	b011      	add	sp, #68	@ 0x44
 801c074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c076:	f014 0f02 	tst.w	r4, #2
 801c07a:	bf0c      	ite	eq
 801c07c:	2757      	moveq	r7, #87	@ 0x57
 801c07e:	2737      	movne	r7, #55	@ 0x37
 801c080:	4613      	mov	r3, r2
 801c082:	466d      	mov	r5, sp
 801c084:	f001 000f 	and.w	r0, r1, #15
 801c088:	2809      	cmp	r0, #9
 801c08a:	bf94      	ite	ls
 801c08c:	3030      	addls	r0, #48	@ 0x30
 801c08e:	19c0      	addhi	r0, r0, r7
 801c090:	0909      	lsrs	r1, r1, #4
 801c092:	f803 0901 	strb.w	r0, [r3], #-1
 801c096:	d0c6      	beq.n	801c026 <_format_hex+0x18>
 801c098:	42ab      	cmp	r3, r5
 801c09a:	d1f3      	bne.n	801c084 <_format_hex+0x76>
 801c09c:	e7c3      	b.n	801c026 <_format_hex+0x18>
 801c09e:	f803 5901 	strb.w	r5, [r3], #-1
 801c0a2:	e7c5      	b.n	801c030 <_format_hex+0x22>
 801c0a4:	f803 5901 	strb.w	r5, [r3], #-1
 801c0a8:	e7cc      	b.n	801c044 <_format_hex+0x36>
 801c0aa:	f803 4901 	strb.w	r4, [r3], #-1
 801c0ae:	e7d3      	b.n	801c058 <_format_hex+0x4a>
 801c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0b4:	4630      	mov	r0, r6
 801c0b6:	f7ff ff33 	bl	801bf20 <_xputch>
 801c0ba:	e7d4      	b.n	801c066 <_format_hex+0x58>
 801c0bc:	2120      	movs	r1, #32
 801c0be:	4630      	mov	r0, r6
 801c0c0:	f7ff ff2e 	bl	801bf20 <_xputch>
 801c0c4:	3501      	adds	r5, #1
 801c0c6:	e7d1      	b.n	801c06c <_format_hex+0x5e>

0801c0c8 <_vprintf>:
 801c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0cc:	2700      	movs	r7, #0
 801c0ce:	b096      	sub	sp, #88	@ 0x58
 801c0d0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801c0d4:	460b      	mov	r3, r1
 801c0d6:	4614      	mov	r4, r2
 801c0d8:	f04f 080a 	mov.w	r8, #10
 801c0dc:	7819      	ldrb	r1, [r3, #0]
 801c0de:	b919      	cbnz	r1, 801c0e8 <_vprintf+0x20>
 801c0e0:	9804      	ldr	r0, [sp, #16]
 801c0e2:	b016      	add	sp, #88	@ 0x58
 801c0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0e8:	2925      	cmp	r1, #37	@ 0x25
 801c0ea:	f103 0501 	add.w	r5, r3, #1
 801c0ee:	d004      	beq.n	801c0fa <_vprintf+0x32>
 801c0f0:	a801      	add	r0, sp, #4
 801c0f2:	f7ff ff15 	bl	801bf20 <_xputch>
 801c0f6:	462b      	mov	r3, r5
 801c0f8:	e7f0      	b.n	801c0dc <_vprintf+0x14>
 801c0fa:	785a      	ldrb	r2, [r3, #1]
 801c0fc:	9703      	str	r7, [sp, #12]
 801c0fe:	2a30      	cmp	r2, #48	@ 0x30
 801c100:	e9cd 7701 	strd	r7, r7, [sp, #4]
 801c104:	d127      	bne.n	801c156 <_vprintf+0x8e>
 801c106:	2220      	movs	r2, #32
 801c108:	9201      	str	r2, [sp, #4]
 801c10a:	1c9d      	adds	r5, r3, #2
 801c10c:	2200      	movs	r2, #0
 801c10e:	462e      	mov	r6, r5
 801c110:	4613      	mov	r3, r2
 801c112:	7831      	ldrb	r1, [r6, #0]
 801c114:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 801c118:	2809      	cmp	r0, #9
 801c11a:	4635      	mov	r5, r6
 801c11c:	f106 0601 	add.w	r6, r6, #1
 801c120:	d91d      	bls.n	801c15e <_vprintf+0x96>
 801c122:	b12a      	cbz	r2, 801c130 <_vprintf+0x68>
 801c124:	9303      	str	r3, [sp, #12]
 801c126:	b11b      	cbz	r3, 801c130 <_vprintf+0x68>
 801c128:	9b01      	ldr	r3, [sp, #4]
 801c12a:	f043 0310 	orr.w	r3, r3, #16
 801c12e:	9301      	str	r3, [sp, #4]
 801c130:	292e      	cmp	r1, #46	@ 0x2e
 801c132:	d123      	bne.n	801c17c <_vprintf+0xb4>
 801c134:	786b      	ldrb	r3, [r5, #1]
 801c136:	2b2a      	cmp	r3, #42	@ 0x2a
 801c138:	d015      	beq.n	801c166 <_vprintf+0x9e>
 801c13a:	2100      	movs	r1, #0
 801c13c:	1c68      	adds	r0, r5, #1
 801c13e:	460a      	mov	r2, r1
 801c140:	260a      	movs	r6, #10
 801c142:	7803      	ldrb	r3, [r0, #0]
 801c144:	3b30      	subs	r3, #48	@ 0x30
 801c146:	2b09      	cmp	r3, #9
 801c148:	4605      	mov	r5, r0
 801c14a:	f100 0001 	add.w	r0, r0, #1
 801c14e:	d959      	bls.n	801c204 <_vprintf+0x13c>
 801c150:	b181      	cbz	r1, 801c174 <_vprintf+0xac>
 801c152:	9202      	str	r2, [sp, #8]
 801c154:	e00e      	b.n	801c174 <_vprintf+0xac>
 801c156:	2a2d      	cmp	r2, #45	@ 0x2d
 801c158:	d1d8      	bne.n	801c10c <_vprintf+0x44>
 801c15a:	2240      	movs	r2, #64	@ 0x40
 801c15c:	e7d4      	b.n	801c108 <_vprintf+0x40>
 801c15e:	fb08 0303 	mla	r3, r8, r3, r0
 801c162:	2201      	movs	r2, #1
 801c164:	e7d5      	b.n	801c112 <_vprintf+0x4a>
 801c166:	f854 3b04 	ldr.w	r3, [r4], #4
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	bfb8      	it	lt
 801c16e:	425b      	neglt	r3, r3
 801c170:	3502      	adds	r5, #2
 801c172:	9302      	str	r3, [sp, #8]
 801c174:	9b01      	ldr	r3, [sp, #4]
 801c176:	f043 0301 	orr.w	r3, r3, #1
 801c17a:	9301      	str	r3, [sp, #4]
 801c17c:	782b      	ldrb	r3, [r5, #0]
 801c17e:	2b6c      	cmp	r3, #108	@ 0x6c
 801c180:	bf04      	itt	eq
 801c182:	3501      	addeq	r5, #1
 801c184:	9b01      	ldreq	r3, [sp, #4]
 801c186:	7829      	ldrb	r1, [r5, #0]
 801c188:	bf04      	itt	eq
 801c18a:	f043 0304 	orreq.w	r3, r3, #4
 801c18e:	9301      	streq	r3, [sp, #4]
 801c190:	2958      	cmp	r1, #88	@ 0x58
 801c192:	f000 8143 	beq.w	801c41c <_vprintf+0x354>
 801c196:	f1a1 0363 	sub.w	r3, r1, #99	@ 0x63
 801c19a:	b2da      	uxtb	r2, r3
 801c19c:	2a15      	cmp	r2, #21
 801c19e:	d8a7      	bhi.n	801c0f0 <_vprintf+0x28>
 801c1a0:	2b15      	cmp	r3, #21
 801c1a2:	d8a5      	bhi.n	801c0f0 <_vprintf+0x28>
 801c1a4:	a201      	add	r2, pc, #4	@ (adr r2, 801c1ac <_vprintf+0xe4>)
 801c1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1aa:	bf00      	nop
 801c1ac:	0801c20d 	stmdaeq	r1, {r0, r2, r3, r9, lr, pc}
 801c1b0:	0801c21b 	stmdaeq	r1, {r0, r1, r3, r4, r9, lr, pc}
 801c1b4:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1b8:	0801c235 	stmdaeq	r1, {r0, r2, r4, r5, r9, lr, pc}
 801c1bc:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1c0:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1c4:	0801c21b 	stmdaeq	r1, {r0, r1, r3, r4, r9, lr, pc}
 801c1c8:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1cc:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1d0:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1d4:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1d8:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1dc:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1e0:	0801c37d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, lr, pc}
 801c1e4:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1e8:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1ec:	0801c3a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, lr, pc}
 801c1f0:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1f4:	0801c417 	stmdaeq	r1, {r0, r1, r2, r4, sl, lr, pc}
 801c1f8:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c1fc:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 801c200:	0801c425 	stmdaeq	r1, {r0, r2, r5, sl, lr, pc}
 801c204:	fb06 3202 	mla	r2, r6, r2, r3
 801c208:	2101      	movs	r1, #1
 801c20a:	e79a      	b.n	801c142 <_vprintf+0x7a>
 801c20c:	f854 1b04 	ldr.w	r1, [r4], #4
 801c210:	a801      	add	r0, sp, #4
 801c212:	f7ff fe85 	bl	801bf20 <_xputch>
 801c216:	3501      	adds	r5, #1
 801c218:	e76d      	b.n	801c0f6 <_vprintf+0x2e>
 801c21a:	f854 1b04 	ldr.w	r1, [r4], #4
 801c21e:	9b01      	ldr	r3, [sp, #4]
 801c220:	2900      	cmp	r1, #0
 801c222:	da03      	bge.n	801c22c <_vprintf+0x164>
 801c224:	f043 0308 	orr.w	r3, r3, #8
 801c228:	9301      	str	r3, [sp, #4]
 801c22a:	4249      	negs	r1, r1
 801c22c:	a801      	add	r0, sp, #4
 801c22e:	f7ff fe8f 	bl	801bf50 <_format_int>
 801c232:	e7f0      	b.n	801c216 <_vprintf+0x14e>
 801c234:	3407      	adds	r4, #7
 801c236:	f024 0407 	bic.w	r4, r4, #7
 801c23a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801c23e:	f7ed f855 	bl	80092ec <__aeabi_d2f>
 801c242:	9b01      	ldr	r3, [sp, #4]
 801c244:	ee07 0a90 	vmov	s15, r0
 801c248:	07de      	lsls	r6, r3, #31
 801c24a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c24e:	bf4c      	ite	mi
 801c250:	9e02      	ldrmi	r6, [sp, #8]
 801c252:	2606      	movpl	r6, #6
 801c254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c258:	bf48      	it	mi
 801c25a:	eef1 7a67 	vnegmi.f32	s15, s15
 801c25e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c262:	bf4a      	itet	mi
 801c264:	f10d 0a19 	addmi.w	sl, sp, #25
 801c268:	f10d 0a18 	addpl.w	sl, sp, #24
 801c26c:	232d      	movmi	r3, #45	@ 0x2d
 801c26e:	ee17 0a10 	vmov	r0, s14
 801c272:	f04f 0200 	mov.w	r2, #0
 801c276:	4651      	mov	r1, sl
 801c278:	bf48      	it	mi
 801c27a:	f88d 3018 	strbmi.w	r3, [sp, #24]
 801c27e:	f7ff fe13 	bl	801bea8 <_itostr>
 801c282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c286:	232e      	movs	r3, #46	@ 0x2e
 801c288:	f80a 3000 	strb.w	r3, [sl, r0]
 801c28c:	eb0a 0900 	add.w	r9, sl, r0
 801c290:	230a      	movs	r3, #10
 801c292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c296:	1c72      	adds	r2, r6, #1
 801c298:	f109 0901 	add.w	r9, r9, #1
 801c29c:	4619      	mov	r1, r3
 801c29e:	2e00      	cmp	r6, #0
 801c2a0:	dc41      	bgt.n	801c326 <_vprintf+0x25e>
 801c2a2:	ee07 3a10 	vmov	s14, r3
 801c2a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c2aa:	4649      	mov	r1, r9
 801c2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c2b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c2b4:	ee17 0a90 	vmov	r0, s15
 801c2b8:	f7ff fdf6 	bl	801bea8 <_itostr>
 801c2bc:	4448      	add	r0, r9
 801c2be:	f10d 0918 	add.w	r9, sp, #24
 801c2c2:	eba0 0009 	sub.w	r0, r0, r9
 801c2c6:	1e46      	subs	r6, r0, #1
 801c2c8:	eb09 0206 	add.w	r2, r9, r6
 801c2cc:	f819 3006 	ldrb.w	r3, [r9, r6]
 801c2d0:	2b34      	cmp	r3, #52	@ 0x34
 801c2d2:	d911      	bls.n	801c2f8 <_vprintf+0x230>
 801c2d4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801c2d8:	292e      	cmp	r1, #46	@ 0x2e
 801c2da:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
 801c2de:	d028      	beq.n	801c332 <_vprintf+0x26a>
 801c2e0:	469c      	mov	ip, r3
 801c2e2:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 801c2e6:	4663      	mov	r3, ip
 801c2e8:	f81c 1901 	ldrb.w	r1, [ip], #-1
 801c2ec:	2939      	cmp	r1, #57	@ 0x39
 801c2ee:	d01d      	beq.n	801c32c <_vprintf+0x264>
 801c2f0:	292e      	cmp	r1, #46	@ 0x2e
 801c2f2:	d01e      	beq.n	801c332 <_vprintf+0x26a>
 801c2f4:	3101      	adds	r1, #1
 801c2f6:	7019      	strb	r1, [r3, #0]
 801c2f8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801c2fc:	446b      	add	r3, sp
 801c2fe:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 801c302:	2b2e      	cmp	r3, #46	@ 0x2e
 801c304:	bf08      	it	eq
 801c306:	f106 36ff 	addeq.w	r6, r6, #4294967295	@ 0xffffffff
 801c30a:	46b2      	mov	sl, r6
 801c30c:	9b03      	ldr	r3, [sp, #12]
 801c30e:	4553      	cmp	r3, sl
 801c310:	dc2d      	bgt.n	801c36e <_vprintf+0x2a6>
 801c312:	2e00      	cmp	r6, #0
 801c314:	f77f af7f 	ble.w	801c216 <_vprintf+0x14e>
 801c318:	f819 1b01 	ldrb.w	r1, [r9], #1
 801c31c:	a801      	add	r0, sp, #4
 801c31e:	f7ff fdff 	bl	801bf20 <_xputch>
 801c322:	3e01      	subs	r6, #1
 801c324:	e7f5      	b.n	801c312 <_vprintf+0x24a>
 801c326:	434b      	muls	r3, r1
 801c328:	3e01      	subs	r6, #1
 801c32a:	e7b8      	b.n	801c29e <_vprintf+0x1d6>
 801c32c:	f88c e001 	strb.w	lr, [ip, #1]
 801c330:	e7d9      	b.n	801c2e6 <_vprintf+0x21e>
 801c332:	3b01      	subs	r3, #1
 801c334:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801c338:	7819      	ldrb	r1, [r3, #0]
 801c33a:	2939      	cmp	r1, #57	@ 0x39
 801c33c:	d10d      	bne.n	801c35a <_vprintf+0x292>
 801c33e:	454b      	cmp	r3, r9
 801c340:	d208      	bcs.n	801c354 <_vprintf+0x28c>
 801c342:	1c51      	adds	r1, r2, #1
 801c344:	1c9e      	adds	r6, r3, #2
 801c346:	3202      	adds	r2, #2
 801c348:	4296      	cmp	r6, r2
 801c34a:	d10b      	bne.n	801c364 <_vprintf+0x29c>
 801c34c:	2231      	movs	r2, #49	@ 0x31
 801c34e:	705a      	strb	r2, [r3, #1]
 801c350:	4606      	mov	r6, r0
 801c352:	e7d1      	b.n	801c2f8 <_vprintf+0x230>
 801c354:	f803 c901 	strb.w	ip, [r3], #-1
 801c358:	e7ee      	b.n	801c338 <_vprintf+0x270>
 801c35a:	454b      	cmp	r3, r9
 801c35c:	d3f1      	bcc.n	801c342 <_vprintf+0x27a>
 801c35e:	292d      	cmp	r1, #45	@ 0x2d
 801c360:	d1c8      	bne.n	801c2f4 <_vprintf+0x22c>
 801c362:	e7ee      	b.n	801c342 <_vprintf+0x27a>
 801c364:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 801c368:	f802 cd01 	strb.w	ip, [r2, #-1]!
 801c36c:	e7ec      	b.n	801c348 <_vprintf+0x280>
 801c36e:	2120      	movs	r1, #32
 801c370:	a801      	add	r0, sp, #4
 801c372:	f7ff fdd5 	bl	801bf20 <_xputch>
 801c376:	f10a 0a01 	add.w	sl, sl, #1
 801c37a:	e7c7      	b.n	801c30c <_vprintf+0x244>
 801c37c:	2308      	movs	r3, #8
 801c37e:	f854 6b04 	ldr.w	r6, [r4], #4
 801c382:	9303      	str	r3, [sp, #12]
 801c384:	2130      	movs	r1, #48	@ 0x30
 801c386:	2320      	movs	r3, #32
 801c388:	a801      	add	r0, sp, #4
 801c38a:	9301      	str	r3, [sp, #4]
 801c38c:	f7ff fdc8 	bl	801bf20 <_xputch>
 801c390:	2178      	movs	r1, #120	@ 0x78
 801c392:	a801      	add	r0, sp, #4
 801c394:	f7ff fdc4 	bl	801bf20 <_xputch>
 801c398:	4631      	mov	r1, r6
 801c39a:	a801      	add	r0, sp, #4
 801c39c:	f7ff fe37 	bl	801c00e <_format_hex>
 801c3a0:	e739      	b.n	801c216 <_vprintf+0x14e>
 801c3a2:	f854 9b04 	ldr.w	r9, [r4], #4
 801c3a6:	2600      	movs	r6, #0
 801c3a8:	f819 3006 	ldrb.w	r3, [r9, r6]
 801c3ac:	b993      	cbnz	r3, 801c3d4 <_vprintf+0x30c>
 801c3ae:	9b01      	ldr	r3, [sp, #4]
 801c3b0:	07d9      	lsls	r1, r3, #31
 801c3b2:	d503      	bpl.n	801c3bc <_vprintf+0x2f4>
 801c3b4:	9b02      	ldr	r3, [sp, #8]
 801c3b6:	429e      	cmp	r6, r3
 801c3b8:	bfa8      	it	ge
 801c3ba:	461e      	movge	r6, r3
 801c3bc:	9b01      	ldr	r3, [sp, #4]
 801c3be:	065a      	lsls	r2, r3, #25
 801c3c0:	f106 0a01 	add.w	sl, r6, #1
 801c3c4:	d403      	bmi.n	801c3ce <_vprintf+0x306>
 801c3c6:	9b03      	ldr	r3, [sp, #12]
 801c3c8:	429e      	cmp	r6, r3
 801c3ca:	db05      	blt.n	801c3d8 <_vprintf+0x310>
 801c3cc:	4656      	mov	r6, sl
 801c3ce:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801c3d2:	e00d      	b.n	801c3f0 <_vprintf+0x328>
 801c3d4:	3601      	adds	r6, #1
 801c3d6:	e7e7      	b.n	801c3a8 <_vprintf+0x2e0>
 801c3d8:	2120      	movs	r1, #32
 801c3da:	a801      	add	r0, sp, #4
 801c3dc:	f7ff fda0 	bl	801bf20 <_xputch>
 801c3e0:	4656      	mov	r6, sl
 801c3e2:	e7eb      	b.n	801c3bc <_vprintf+0x2f4>
 801c3e4:	a801      	add	r0, sp, #4
 801c3e6:	f7ff fd9b 	bl	801bf20 <_xputch>
 801c3ea:	9b02      	ldr	r3, [sp, #8]
 801c3ec:	3b01      	subs	r3, #1
 801c3ee:	9302      	str	r3, [sp, #8]
 801c3f0:	9b01      	ldr	r3, [sp, #4]
 801c3f2:	07db      	lsls	r3, r3, #31
 801c3f4:	d501      	bpl.n	801c3fa <_vprintf+0x332>
 801c3f6:	9b02      	ldr	r3, [sp, #8]
 801c3f8:	b11b      	cbz	r3, 801c402 <_vprintf+0x33a>
 801c3fa:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 801c3fe:	2900      	cmp	r1, #0
 801c400:	d1f0      	bne.n	801c3e4 <_vprintf+0x31c>
 801c402:	9b03      	ldr	r3, [sp, #12]
 801c404:	42b3      	cmp	r3, r6
 801c406:	f77f af06 	ble.w	801c216 <_vprintf+0x14e>
 801c40a:	2120      	movs	r1, #32
 801c40c:	a801      	add	r0, sp, #4
 801c40e:	f7ff fd87 	bl	801bf20 <_xputch>
 801c412:	3601      	adds	r6, #1
 801c414:	e7f5      	b.n	801c402 <_vprintf+0x33a>
 801c416:	f854 1b04 	ldr.w	r1, [r4], #4
 801c41a:	e707      	b.n	801c22c <_vprintf+0x164>
 801c41c:	9b01      	ldr	r3, [sp, #4]
 801c41e:	f043 0302 	orr.w	r3, r3, #2
 801c422:	9301      	str	r3, [sp, #4]
 801c424:	f854 1b04 	ldr.w	r1, [r4], #4
 801c428:	e7b7      	b.n	801c39a <_vprintf+0x2d2>
 801c42a:	bf00      	nop

0801c42c <printf>:
 801c42c:	b40f      	push	{r0, r1, r2, r3}
 801c42e:	b507      	push	{r0, r1, r2, lr}
 801c430:	aa04      	add	r2, sp, #16
 801c432:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c436:	f852 1b04 	ldr.w	r1, [r2], #4
 801c43a:	9201      	str	r2, [sp, #4]
 801c43c:	f7ff fe44 	bl	801c0c8 <_vprintf>
 801c440:	b003      	add	sp, #12
 801c442:	f85d eb04 	ldr.w	lr, [sp], #4
 801c446:	b004      	add	sp, #16
 801c448:	4770      	bx	lr
	...

0801c44c <sprintf>:
 801c44c:	b40e      	push	{r1, r2, r3}
 801c44e:	b517      	push	{r0, r1, r2, r4, lr}
 801c450:	4c09      	ldr	r4, [pc, #36]	@ (801c478 <sprintf+0x2c>)
 801c452:	aa05      	add	r2, sp, #20
 801c454:	6020      	str	r0, [r4, #0]
 801c456:	f852 1b04 	ldr.w	r1, [r2], #4
 801c45a:	9201      	str	r2, [sp, #4]
 801c45c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c460:	f7ff fe32 	bl	801c0c8 <_vprintf>
 801c464:	6822      	ldr	r2, [r4, #0]
 801c466:	2300      	movs	r3, #0
 801c468:	7013      	strb	r3, [r2, #0]
 801c46a:	6023      	str	r3, [r4, #0]
 801c46c:	b003      	add	sp, #12
 801c46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c472:	b003      	add	sp, #12
 801c474:	4770      	bx	lr
 801c476:	bf00      	nop
 801c478:	2001bcd8 	ldrdcs	fp, [r1], -r8

0801c47c <snprintf>:
 801c47c:	b40c      	push	{r2, r3}
 801c47e:	b513      	push	{r0, r1, r4, lr}
 801c480:	4c09      	ldr	r4, [pc, #36]	@ (801c4a8 <snprintf+0x2c>)
 801c482:	aa04      	add	r2, sp, #16
 801c484:	460b      	mov	r3, r1
 801c486:	6020      	str	r0, [r4, #0]
 801c488:	f852 1b04 	ldr.w	r1, [r2], #4
 801c48c:	9201      	str	r2, [sp, #4]
 801c48e:	4618      	mov	r0, r3
 801c490:	f7ff fe1a 	bl	801c0c8 <_vprintf>
 801c494:	6822      	ldr	r2, [r4, #0]
 801c496:	2300      	movs	r3, #0
 801c498:	7013      	strb	r3, [r2, #0]
 801c49a:	6023      	str	r3, [r4, #0]
 801c49c:	b002      	add	sp, #8
 801c49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4a2:	b002      	add	sp, #8
 801c4a4:	4770      	bx	lr
 801c4a6:	bf00      	nop
 801c4a8:	2001bcd8 	ldrdcs	fp, [r1], -r8

0801c4ac <vsnprintf>:
 801c4ac:	b538      	push	{r3, r4, r5, lr}
 801c4ae:	4c06      	ldr	r4, [pc, #24]	@ (801c4c8 <vsnprintf+0x1c>)
 801c4b0:	4605      	mov	r5, r0
 801c4b2:	4608      	mov	r0, r1
 801c4b4:	4611      	mov	r1, r2
 801c4b6:	461a      	mov	r2, r3
 801c4b8:	6025      	str	r5, [r4, #0]
 801c4ba:	f7ff fe05 	bl	801c0c8 <_vprintf>
 801c4be:	6822      	ldr	r2, [r4, #0]
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	7013      	strb	r3, [r2, #0]
 801c4c4:	6023      	str	r3, [r4, #0]
 801c4c6:	bd38      	pop	{r3, r4, r5, pc}
 801c4c8:	2001bcd8 	ldrdcs	fp, [r1], -r8

0801c4cc <putchar>:
 801c4cc:	b508      	push	{r3, lr}
 801c4ce:	f7fd fcb1 	bl	8019e34 <console_putc>
 801c4d2:	2001      	movs	r0, #1
 801c4d4:	bd08      	pop	{r3, pc}

0801c4d6 <puts>:
 801c4d6:	b508      	push	{r3, lr}
 801c4d8:	f7fd fcae 	bl	8019e38 <console_puts>
 801c4dc:	200a      	movs	r0, #10
 801c4de:	f7fd fca9 	bl	8019e34 <console_putc>
 801c4e2:	2001      	movs	r0, #1
 801c4e4:	bd08      	pop	{r3, pc}
	...

0801c4e8 <random>:
 801c4e8:	4a06      	ldr	r2, [pc, #24]	@ (801c504 <random+0x1c>)
 801c4ea:	6813      	ldr	r3, [r2, #0]
 801c4ec:	10d8      	asrs	r0, r3, #3
 801c4ee:	ea80 00a3 	eor.w	r0, r0, r3, asr #2
 801c4f2:	4058      	eors	r0, r3
 801c4f4:	ea80 1063 	eor.w	r0, r0, r3, asr #5
 801c4f8:	03c0      	lsls	r0, r0, #15
 801c4fa:	b280      	uxth	r0, r0
 801c4fc:	ea40 0063 	orr.w	r0, r0, r3, asr #1
 801c500:	6010      	str	r0, [r2, #0]
 801c502:	4770      	bx	lr
 801c504:	20000008 	andcs	r0, r0, r8

0801c508 <strtok>:
 801c508:	b570      	push	{r4, r5, r6, lr}
 801c50a:	4603      	mov	r3, r0
 801c50c:	b910      	cbnz	r0, 801c514 <strtok+0xc>
 801c50e:	4b12      	ldr	r3, [pc, #72]	@ (801c558 <strtok+0x50>)
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	b14b      	cbz	r3, 801c528 <strtok+0x20>
 801c514:	4618      	mov	r0, r3
 801c516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c51a:	460d      	mov	r5, r1
 801c51c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c520:	b924      	cbnz	r4, 801c52c <strtok+0x24>
 801c522:	b94a      	cbnz	r2, 801c538 <strtok+0x30>
 801c524:	4b0c      	ldr	r3, [pc, #48]	@ (801c558 <strtok+0x50>)
 801c526:	601a      	str	r2, [r3, #0]
 801c528:	2000      	movs	r0, #0
 801c52a:	bd70      	pop	{r4, r5, r6, pc}
 801c52c:	42a2      	cmp	r2, r4
 801c52e:	d1f5      	bne.n	801c51c <strtok+0x14>
 801c530:	e7f0      	b.n	801c514 <strtok+0xc>
 801c532:	4613      	mov	r3, r2
 801c534:	e00c      	b.n	801c550 <strtok+0x48>
 801c536:	b91c      	cbnz	r4, 801c540 <strtok+0x38>
 801c538:	461e      	mov	r6, r3
 801c53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c53e:	460d      	mov	r5, r1
 801c540:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c544:	42a2      	cmp	r2, r4
 801c546:	d1f6      	bne.n	801c536 <strtok+0x2e>
 801c548:	2a00      	cmp	r2, #0
 801c54a:	d0f2      	beq.n	801c532 <strtok+0x2a>
 801c54c:	2200      	movs	r2, #0
 801c54e:	7032      	strb	r2, [r6, #0]
 801c550:	4a01      	ldr	r2, [pc, #4]	@ (801c558 <strtok+0x50>)
 801c552:	6013      	str	r3, [r2, #0]
 801c554:	e7e9      	b.n	801c52a <strtok+0x22>
 801c556:	bf00      	nop
 801c558:	2001bcdc 	ldrdcs	fp, [r1], -ip

0801c55c <uuid_unparse_x>:
 801c55c:	b530      	push	{r4, r5, lr}
 801c55e:	4603      	mov	r3, r0
 801c560:	4608      	mov	r0, r1
 801c562:	4611      	mov	r1, r2
 801c564:	681a      	ldr	r2, [r3, #0]
 801c566:	891c      	ldrh	r4, [r3, #8]
 801c568:	b08f      	sub	sp, #60	@ 0x3c
 801c56a:	ba12      	rev	r2, r2
 801c56c:	920a      	str	r2, [sp, #40]	@ 0x28
 801c56e:	889a      	ldrh	r2, [r3, #4]
 801c570:	ba52      	rev16	r2, r2
 801c572:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801c576:	88da      	ldrh	r2, [r3, #6]
 801c578:	ba64      	rev16	r4, r4
 801c57a:	ba52      	rev16	r2, r2
 801c57c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801c580:	f8ad 4030 	strh.w	r4, [sp, #48]	@ 0x30
 801c584:	f103 020a 	add.w	r2, r3, #10
 801c588:	f10d 0431 	add.w	r4, sp, #49	@ 0x31
 801c58c:	3310      	adds	r3, #16
 801c58e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c592:	f804 5f01 	strb.w	r5, [r4, #1]!
 801c596:	4293      	cmp	r3, r2
 801c598:	d1f9      	bne.n	801c58e <uuid_unparse_x+0x32>
 801c59a:	f89d 2037 	ldrb.w	r2, [sp, #55]	@ 0x37
 801c59e:	9208      	str	r2, [sp, #32]
 801c5a0:	f89d 2036 	ldrb.w	r2, [sp, #54]	@ 0x36
 801c5a4:	9207      	str	r2, [sp, #28]
 801c5a6:	f89d 2035 	ldrb.w	r2, [sp, #53]	@ 0x35
 801c5aa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801c5ae:	9206      	str	r2, [sp, #24]
 801c5b0:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
 801c5b4:	9205      	str	r2, [sp, #20]
 801c5b6:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 801c5ba:	9204      	str	r2, [sp, #16]
 801c5bc:	0a1b      	lsrs	r3, r3, #8
 801c5be:	f89d 2032 	ldrb.w	r2, [sp, #50]	@ 0x32
 801c5c2:	9203      	str	r2, [sp, #12]
 801c5c4:	9301      	str	r3, [sp, #4]
 801c5c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 801c5ca:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801c5ce:	9202      	str	r2, [sp, #8]
 801c5d0:	9300      	str	r3, [sp, #0]
 801c5d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c5d4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801c5d8:	f7ff ff38 	bl	801c44c <sprintf>
 801c5dc:	b00f      	add	sp, #60	@ 0x3c
 801c5de:	bd30      	pop	{r4, r5, pc}

0801c5e0 <uuid_unparse>:
 801c5e0:	4a01      	ldr	r2, [pc, #4]	@ (801c5e8 <uuid_unparse+0x8>)
 801c5e2:	f7ff bfbb 	b.w	801c55c <uuid_unparse_x>
 801c5e6:	bf00      	nop
 801c5e8:	0801de61 	stmdaeq	r1, {r0, r5, r6, r9, sl, fp, ip, lr, pc}

0801c5ec <__assert_func>:
 801c5ec:	b507      	push	{r0, r1, r2, lr}
 801c5ee:	460c      	mov	r4, r1
 801c5f0:	4619      	mov	r1, r3
 801c5f2:	b142      	cbz	r2, 801c606 <__assert_func+0x1a>
 801c5f4:	4b05      	ldr	r3, [pc, #20]	@ (801c60c <__assert_func+0x20>)
 801c5f6:	e9cd 3200 	strd	r3, r2, [sp]
 801c5fa:	4602      	mov	r2, r0
 801c5fc:	4623      	mov	r3, r4
 801c5fe:	4804      	ldr	r0, [pc, #16]	@ (801c610 <__assert_func+0x24>)
 801c600:	f7ff ff14 	bl	801c42c <printf>
 801c604:	e7fe      	b.n	801c604 <__assert_func+0x18>
 801c606:	4b03      	ldr	r3, [pc, #12]	@ (801c614 <__assert_func+0x28>)
 801c608:	461a      	mov	r2, r3
 801c60a:	e7f4      	b.n	801c5f6 <__assert_func+0xa>
 801c60c:	0801de92 	stmdaeq	r1, {r1, r4, r7, r9, sl, fp, ip, lr, pc}
 801c610:	0801de9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, sl, fp, ip, lr, pc}
 801c614:	0801d1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr, pc}

0801c618 <isleapyear(int)>:
 801c618:	2264      	movs	r2, #100	@ 0x64
 801c61a:	fb90 f3f2 	sdiv	r3, r0, r2
 801c61e:	fb02 0313 	mls	r3, r2, r3, r0
 801c622:	b94b      	cbnz	r3, 801c638 <isleapyear(int)+0x20>
 801c624:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801c628:	fb90 f2f3 	sdiv	r2, r0, r3
 801c62c:	fb03 0012 	mls	r0, r3, r2, r0
 801c630:	fab0 f080 	clz	r0, r0
 801c634:	0940      	lsrs	r0, r0, #5
 801c636:	4770      	bx	lr
 801c638:	f010 0f03 	tst.w	r0, #3
 801c63c:	bf0c      	ite	eq
 801c63e:	2001      	moveq	r0, #1
 801c640:	2000      	movne	r0, #0
 801c642:	4770      	bx	lr

0801c644 <getdaysofmonth(int, int)>:
 801c644:	b510      	push	{r4, lr}
 801c646:	4604      	mov	r4, r0
 801c648:	2c01      	cmp	r4, #1
 801c64a:	4608      	mov	r0, r1
 801c64c:	d102      	bne.n	801c654 <getdaysofmonth(int, int)+0x10>
 801c64e:	f7ff ffe3 	bl	801c618 <isleapyear(int)>
 801c652:	b918      	cbnz	r0, 801c65c <getdaysofmonth(int, int)+0x18>
 801c654:	4b02      	ldr	r3, [pc, #8]	@ (801c660 <getdaysofmonth(int, int)+0x1c>)
 801c656:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c65a:	bd10      	pop	{r4, pc}
 801c65c:	201d      	movs	r0, #29
 801c65e:	e7fc      	b.n	801c65a <getdaysofmonth(int, int)+0x16>
 801c660:	080218dc 	stmdaeq	r2, {r2, r3, r4, r6, r7, fp, ip}

0801c664 <gmtime>:
 801c664:	b570      	push	{r4, r5, r6, lr}
 801c666:	2800      	cmp	r0, #0
 801c668:	d03c      	beq.n	801c6e4 <gmtime+0x80>
 801c66a:	6803      	ldr	r3, [r0, #0]
 801c66c:	4d1e      	ldr	r5, [pc, #120]	@ (801c6e8 <gmtime+0x84>)
 801c66e:	213c      	movs	r1, #60	@ 0x3c
 801c670:	fb93 f2f1 	sdiv	r2, r3, r1
 801c674:	fb01 3312 	mls	r3, r1, r2, r3
 801c678:	602b      	str	r3, [r5, #0]
 801c67a:	fb92 f3f1 	sdiv	r3, r2, r1
 801c67e:	fb01 2213 	mls	r2, r1, r3, r2
 801c682:	606a      	str	r2, [r5, #4]
 801c684:	2218      	movs	r2, #24
 801c686:	fb93 f4f2 	sdiv	r4, r3, r2
 801c68a:	fb02 3314 	mls	r3, r2, r4, r3
 801c68e:	60ab      	str	r3, [r5, #8]
 801c690:	1d22      	adds	r2, r4, #4
 801c692:	2307      	movs	r3, #7
 801c694:	fb92 f3f3 	sdiv	r3, r2, r3
 801c698:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c69c:	1ad2      	subs	r2, r2, r3
 801c69e:	61aa      	str	r2, [r5, #24]
 801c6a0:	f240 71b2 	movw	r1, #1970	@ 0x7b2
 801c6a4:	f240 166d 	movw	r6, #365	@ 0x16d
 801c6a8:	4608      	mov	r0, r1
 801c6aa:	f7ff ffb5 	bl	801c618 <isleapyear(int)>
 801c6ae:	2800      	cmp	r0, #0
 801c6b0:	bf0c      	ite	eq
 801c6b2:	4633      	moveq	r3, r6
 801c6b4:	f44f 73b7 	movne.w	r3, #366	@ 0x16e
 801c6b8:	429c      	cmp	r4, r3
 801c6ba:	db02      	blt.n	801c6c2 <gmtime+0x5e>
 801c6bc:	1ae4      	subs	r4, r4, r3
 801c6be:	3101      	adds	r1, #1
 801c6c0:	e7f2      	b.n	801c6a8 <gmtime+0x44>
 801c6c2:	f2a1 736c 	subw	r3, r1, #1900	@ 0x76c
 801c6c6:	616b      	str	r3, [r5, #20]
 801c6c8:	61ec      	str	r4, [r5, #28]
 801c6ca:	2600      	movs	r6, #0
 801c6cc:	4630      	mov	r0, r6
 801c6ce:	f7ff ffb9 	bl	801c644 <getdaysofmonth(int, int)>
 801c6d2:	4284      	cmp	r4, r0
 801c6d4:	db02      	blt.n	801c6dc <gmtime+0x78>
 801c6d6:	1a24      	subs	r4, r4, r0
 801c6d8:	3601      	adds	r6, #1
 801c6da:	e7f7      	b.n	801c6cc <gmtime+0x68>
 801c6dc:	3401      	adds	r4, #1
 801c6de:	4802      	ldr	r0, [pc, #8]	@ (801c6e8 <gmtime+0x84>)
 801c6e0:	612e      	str	r6, [r5, #16]
 801c6e2:	60ec      	str	r4, [r5, #12]
 801c6e4:	bd70      	pop	{r4, r5, r6, pc}
 801c6e6:	bf00      	nop
 801c6e8:	2001bce0 	andcs	fp, r1, r0, ror #25

0801c6ec <localtime>:
 801c6ec:	b507      	push	{r0, r1, r2, lr}
 801c6ee:	b140      	cbz	r0, 801c702 <localtime+0x16>
 801c6f0:	4b05      	ldr	r3, [pc, #20]	@ (801c708 <localtime+0x1c>)
 801c6f2:	6802      	ldr	r2, [r0, #0]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	a801      	add	r0, sp, #4
 801c6fa:	4413      	add	r3, r2
 801c6fc:	9301      	str	r3, [sp, #4]
 801c6fe:	f7ff ffb1 	bl	801c664 <gmtime>
 801c702:	b003      	add	sp, #12
 801c704:	f85d fb04 	ldr.w	pc, [sp], #4
 801c708:	2001bd04 	andcs	fp, r1, r4, lsl #26

0801c70c <mktime>:
 801c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c710:	4604      	mov	r4, r0
 801c712:	2800      	cmp	r0, #0
 801c714:	d043      	beq.n	801c79e <mktime+0x92>
 801c716:	6941      	ldr	r1, [r0, #20]
 801c718:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 801c71c:	2b45      	cmp	r3, #69	@ 0x45
 801c71e:	d83e      	bhi.n	801c79e <mktime+0x92>
 801c720:	f240 75b2 	movw	r5, #1970	@ 0x7b2
 801c724:	2600      	movs	r6, #0
 801c726:	f201 776b 	addw	r7, r1, #1899	@ 0x76b
 801c72a:	f240 186d 	movw	r8, #365	@ 0x16d
 801c72e:	42af      	cmp	r7, r5
 801c730:	da24      	bge.n	801c77c <mktime+0x70>
 801c732:	6927      	ldr	r7, [r4, #16]
 801c734:	2f0b      	cmp	r7, #11
 801c736:	d832      	bhi.n	801c79e <mktime+0x92>
 801c738:	2500      	movs	r5, #0
 801c73a:	42af      	cmp	r7, r5
 801c73c:	d129      	bne.n	801c792 <mktime+0x86>
 801c73e:	68e5      	ldr	r5, [r4, #12]
 801c740:	2d00      	cmp	r5, #0
 801c742:	dd2c      	ble.n	801c79e <mktime+0x92>
 801c744:	4638      	mov	r0, r7
 801c746:	f7ff ff7d 	bl	801c644 <getdaysofmonth(int, int)>
 801c74a:	4285      	cmp	r5, r0
 801c74c:	dc27      	bgt.n	801c79e <mktime+0x92>
 801c74e:	3d01      	subs	r5, #1
 801c750:	2318      	movs	r3, #24
 801c752:	4435      	add	r5, r6
 801c754:	435d      	muls	r5, r3
 801c756:	68a3      	ldr	r3, [r4, #8]
 801c758:	2b17      	cmp	r3, #23
 801c75a:	d820      	bhi.n	801c79e <mktime+0x92>
 801c75c:	442b      	add	r3, r5
 801c75e:	213c      	movs	r1, #60	@ 0x3c
 801c760:	fb01 f203 	mul.w	r2, r1, r3
 801c764:	6863      	ldr	r3, [r4, #4]
 801c766:	2b3b      	cmp	r3, #59	@ 0x3b
 801c768:	d819      	bhi.n	801c79e <mktime+0x92>
 801c76a:	6820      	ldr	r0, [r4, #0]
 801c76c:	4413      	add	r3, r2
 801c76e:	283b      	cmp	r0, #59	@ 0x3b
 801c770:	fb01 f303 	mul.w	r3, r1, r3
 801c774:	d813      	bhi.n	801c79e <mktime+0x92>
 801c776:	4418      	add	r0, r3
 801c778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c77c:	4628      	mov	r0, r5
 801c77e:	f7ff ff4b 	bl	801c618 <isleapyear(int)>
 801c782:	2800      	cmp	r0, #0
 801c784:	bf0c      	ite	eq
 801c786:	4643      	moveq	r3, r8
 801c788:	f44f 73b7 	movne.w	r3, #366	@ 0x16e
 801c78c:	441e      	add	r6, r3
 801c78e:	3501      	adds	r5, #1
 801c790:	e7cd      	b.n	801c72e <mktime+0x22>
 801c792:	4628      	mov	r0, r5
 801c794:	f7ff ff56 	bl	801c644 <getdaysofmonth(int, int)>
 801c798:	3501      	adds	r5, #1
 801c79a:	4406      	add	r6, r0
 801c79c:	e7cd      	b.n	801c73a <mktime+0x2e>
 801c79e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c7a2:	e7e9      	b.n	801c778 <mktime+0x6c>

0801c7a4 <hal::uuid_init(unsigned char*)>:
 801c7a4:	4a0c      	ldr	r2, [pc, #48]	@ (801c7d8 <hal::uuid_init(unsigned char*)+0x34>)
 801c7a6:	b084      	sub	sp, #16
 801c7a8:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	@ 0xa10
 801c7ac:	9300      	str	r3, [sp, #0]
 801c7ae:	f8d2 1a14 	ldr.w	r1, [r2, #2580]	@ 0xa14
 801c7b2:	9101      	str	r1, [sp, #4]
 801c7b4:	f8d2 2a18 	ldr.w	r2, [r2, #2584]	@ 0xa18
 801c7b8:	9202      	str	r2, [sp, #8]
 801c7ba:	440b      	add	r3, r1
 801c7bc:	4413      	add	r3, r2
 801c7be:	9303      	str	r3, [sp, #12]
 801c7c0:	f100 0210 	add.w	r2, r0, #16
 801c7c4:	466b      	mov	r3, sp
 801c7c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 801c7ca:	f800 1b01 	strb.w	r1, [r0], #1
 801c7ce:	4282      	cmp	r2, r0
 801c7d0:	d1f9      	bne.n	801c7c6 <hal::uuid_init(unsigned char*)+0x22>
 801c7d2:	b004      	add	sp, #16
 801c7d4:	4770      	bx	lr
 801c7d6:	bf00      	nop
 801c7d8:	1fff7000 	svcne	0x00ff7000

0801c7dc <gettimeofday>:
 801c7dc:	4b13      	ldr	r3, [pc, #76]	@ (801c82c <gettimeofday+0x50>)
 801c7de:	4a14      	ldr	r2, [pc, #80]	@ (801c830 <gettimeofday+0x54>)
 801c7e0:	6819      	ldr	r1, [r3, #0]
 801c7e2:	6812      	ldr	r2, [r2, #0]
 801c7e4:	b510      	push	{r4, lr}
 801c7e6:	4c13      	ldr	r4, [pc, #76]	@ (801c834 <gettimeofday+0x58>)
 801c7e8:	601a      	str	r2, [r3, #0]
 801c7ea:	4b13      	ldr	r3, [pc, #76]	@ (801c838 <gettimeofday+0x5c>)
 801c7ec:	1a51      	subs	r1, r2, r1
 801c7ee:	fba3 2301 	umull	r2, r3, r3, r1
 801c7f2:	6822      	ldr	r2, [r4, #0]
 801c7f4:	ea4f 1e93 	mov.w	lr, r3, lsr #6
 801c7f8:	eb02 1293 	add.w	r2, r2, r3, lsr #6
 801c7fc:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 801c800:	6863      	ldr	r3, [r4, #4]
 801c802:	6022      	str	r2, [r4, #0]
 801c804:	fb0c 111e 	mls	r1, ip, lr, r1
 801c808:	fb0c 3301 	mla	r3, ip, r1, r3
 801c80c:	490b      	ldr	r1, [pc, #44]	@ (801c83c <gettimeofday+0x60>)
 801c80e:	6063      	str	r3, [r4, #4]
 801c810:	428b      	cmp	r3, r1
 801c812:	bfc2      	ittt	gt
 801c814:	f5a3 2374 	subgt.w	r3, r3, #999424	@ 0xf4000
 801c818:	3201      	addgt	r2, #1
 801c81a:	f5a3 7310 	subgt.w	r3, r3, #576	@ 0x240
 801c81e:	e9c0 2300 	strd	r2, r3, [r0]
 801c822:	bfc8      	it	gt
 801c824:	e9c4 2300 	strdgt	r2, r3, [r4]
 801c828:	2000      	movs	r0, #0
 801c82a:	bd10      	pop	{r4, pc}
 801c82c:	2001bd10 	andcs	fp, r1, r0, lsl sp
 801c830:	2001bcd0 	ldrdcs	fp, [r1], -r0
 801c834:	2001bd08 	andcs	fp, r1, r8, lsl #26
 801c838:	10624dd3 	ldrdne	r4, [r2], #-211	@ 0xffffff2d	@ <UNPREDICTABLE>
 801c83c:	000f423f 	andeq	r4, pc, pc, lsr r2	@ <UNPREDICTABLE>

0801c840 <settimeofday>:
 801c840:	4a07      	ldr	r2, [pc, #28]	@ (801c860 <settimeofday+0x20>)
 801c842:	4b08      	ldr	r3, [pc, #32]	@ (801c864 <settimeofday+0x24>)
 801c844:	4908      	ldr	r1, [pc, #32]	@ (801c868 <settimeofday+0x28>)
 801c846:	b410      	push	{r4}
 801c848:	6814      	ldr	r4, [r2, #0]
 801c84a:	6844      	ldr	r4, [r0, #4]
 801c84c:	6812      	ldr	r2, [r2, #0]
 801c84e:	6800      	ldr	r0, [r0, #0]
 801c850:	605c      	str	r4, [r3, #4]
 801c852:	6018      	str	r0, [r3, #0]
 801c854:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c858:	600a      	str	r2, [r1, #0]
 801c85a:	2000      	movs	r0, #0
 801c85c:	4770      	bx	lr
 801c85e:	bf00      	nop
 801c860:	2001bcd0 	ldrdcs	fp, [r1], -r0
 801c864:	2001bd08 	andcs	fp, r1, r8, lsl #26
 801c868:	2001bd10 	andcs	fp, r1, r0, lsl sp

0801c86c <time>:
 801c86c:	4b13      	ldr	r3, [pc, #76]	@ (801c8bc <time+0x50>)
 801c86e:	4914      	ldr	r1, [pc, #80]	@ (801c8c0 <time+0x54>)
 801c870:	681a      	ldr	r2, [r3, #0]
 801c872:	b430      	push	{r4, r5}
 801c874:	680d      	ldr	r5, [r1, #0]
 801c876:	601d      	str	r5, [r3, #0]
 801c878:	4912      	ldr	r1, [pc, #72]	@ (801c8c4 <time+0x58>)
 801c87a:	4b13      	ldr	r3, [pc, #76]	@ (801c8c8 <time+0x5c>)
 801c87c:	1aaa      	subs	r2, r5, r2
 801c87e:	fba3 3c02 	umull	r3, ip, r3, r2
 801c882:	680b      	ldr	r3, [r1, #0]
 801c884:	ea4f 159c 	mov.w	r5, ip, lsr #6
 801c888:	4604      	mov	r4, r0
 801c88a:	eb03 109c 	add.w	r0, r3, ip, lsr #6
 801c88e:	684b      	ldr	r3, [r1, #4]
 801c890:	6008      	str	r0, [r1, #0]
 801c892:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
 801c896:	fb0c 2215 	mls	r2, ip, r5, r2
 801c89a:	fb0c 3302 	mla	r3, ip, r2, r3
 801c89e:	4a0b      	ldr	r2, [pc, #44]	@ (801c8cc <time+0x60>)
 801c8a0:	604b      	str	r3, [r1, #4]
 801c8a2:	4293      	cmp	r3, r2
 801c8a4:	bfc1      	itttt	gt
 801c8a6:	f5a3 2374 	subgt.w	r3, r3, #999424	@ 0xf4000
 801c8aa:	3001      	addgt	r0, #1
 801c8ac:	f5a3 7310 	subgt.w	r3, r3, #576	@ 0x240
 801c8b0:	e9c1 0300 	strdgt	r0, r3, [r1]
 801c8b4:	b104      	cbz	r4, 801c8b8 <time+0x4c>
 801c8b6:	6020      	str	r0, [r4, #0]
 801c8b8:	bc30      	pop	{r4, r5}
 801c8ba:	4770      	bx	lr
 801c8bc:	2001bd10 	andcs	fp, r1, r0, lsl sp
 801c8c0:	2001bcd0 	ldrdcs	fp, [r1], -r0
 801c8c4:	2001bd08 	andcs	fp, r1, r8, lsl #26
 801c8c8:	10624dd3 	ldrdne	r4, [r2], #-211	@ 0xffffff2d	@ <UNPREDICTABLE>
 801c8cc:	000f423f 	andeq	r4, pc, pc, lsr r2	@ <UNPREDICTABLE>

0801c8d0 <operator delete[](void*)>:
 801c8d0:	f000 b838 	b.w	801c944 <free>

0801c8d4 <operator delete(void*, unsigned int)>:
 801c8d4:	f000 b836 	b.w	801c944 <free>

0801c8d8 <operator new(unsigned int)>:
 801c8d8:	f000 b802 	b.w	801c8e0 <malloc>

0801c8dc <operator new[](unsigned int)>:
 801c8dc:	f000 b800 	b.w	801c8e0 <malloc>

0801c8e0 <malloc>:
 801c8e0:	b510      	push	{r4, lr}
 801c8e2:	b180      	cbz	r0, 801c906 <malloc+0x26>
 801c8e4:	4b12      	ldr	r3, [pc, #72]	@ (801c930 <malloc+0x50>)
 801c8e6:	681a      	ldr	r2, [r3, #0]
 801c8e8:	b97a      	cbnz	r2, 801c90a <malloc+0x2a>
 801c8ea:	4602      	mov	r2, r0
 801c8ec:	4911      	ldr	r1, [pc, #68]	@ (801c934 <malloc+0x54>)
 801c8ee:	4c12      	ldr	r4, [pc, #72]	@ (801c938 <malloc+0x58>)
 801c8f0:	6808      	ldr	r0, [r1, #0]
 801c8f2:	f102 031b 	add.w	r3, r2, #27
 801c8f6:	f023 030f 	bic.w	r3, r3, #15
 801c8fa:	4403      	add	r3, r0
 801c8fc:	42a3      	cmp	r3, r4
 801c8fe:	d911      	bls.n	801c924 <malloc+0x44>
 801c900:	480e      	ldr	r0, [pc, #56]	@ (801c93c <malloc+0x5c>)
 801c902:	f7fd fa9b 	bl	8019e3c <console_error>
 801c906:	2000      	movs	r0, #0
 801c908:	bd10      	pop	{r4, pc}
 801c90a:	4282      	cmp	r2, r0
 801c90c:	d201      	bcs.n	801c912 <malloc+0x32>
 801c90e:	3308      	adds	r3, #8
 801c910:	e7e9      	b.n	801c8e6 <malloc+0x6>
 801c912:	6858      	ldr	r0, [r3, #4]
 801c914:	2800      	cmp	r0, #0
 801c916:	d0e9      	beq.n	801c8ec <malloc+0xc>
 801c918:	6882      	ldr	r2, [r0, #8]
 801c91a:	605a      	str	r2, [r3, #4]
 801c91c:	2300      	movs	r3, #0
 801c91e:	6083      	str	r3, [r0, #8]
 801c920:	300c      	adds	r0, #12
 801c922:	e7f1      	b.n	801c908 <malloc+0x28>
 801c924:	600b      	str	r3, [r1, #0]
 801c926:	4b06      	ldr	r3, [pc, #24]	@ (801c940 <malloc+0x60>)
 801c928:	e9c0 3200 	strd	r3, r2, [r0]
 801c92c:	e7f6      	b.n	801c91c <malloc+0x3c>
 801c92e:	bf00      	nop
 801c930:	2000000c 	andcs	r0, r0, ip
 801c934:	20000074 	andcs	r0, r0, r4, ror r0
 801c938:	1000ec90 	mulne	r0, r0, ip
 801c93c:	0801dece 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, sl, fp, ip, lr, pc}
 801c940:	424c4d43 	submi	r4, ip, #4288	@ 0x10c0

0801c944 <free>:
 801c944:	b138      	cbz	r0, 801c956 <free+0x12>
 801c946:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 801c94a:	4b09      	ldr	r3, [pc, #36]	@ (801c970 <free+0x2c>)
 801c94c:	429a      	cmp	r2, r3
 801c94e:	d102      	bne.n	801c956 <free+0x12>
 801c950:	4b08      	ldr	r3, [pc, #32]	@ (801c974 <free+0x30>)
 801c952:	681a      	ldr	r2, [r3, #0]
 801c954:	b902      	cbnz	r2, 801c958 <free+0x14>
 801c956:	4770      	bx	lr
 801c958:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801c95c:	4291      	cmp	r1, r2
 801c95e:	d105      	bne.n	801c96c <free+0x28>
 801c960:	685a      	ldr	r2, [r3, #4]
 801c962:	f840 2c04 	str.w	r2, [r0, #-4]
 801c966:	380c      	subs	r0, #12
 801c968:	6058      	str	r0, [r3, #4]
 801c96a:	4770      	bx	lr
 801c96c:	3308      	adds	r3, #8
 801c96e:	e7f0      	b.n	801c952 <free+0xe>
 801c970:	424c4d43 	submi	r4, ip, #4288	@ 0x10c0
 801c974:	2000000c 	andcs	r0, r0, ip

0801c978 <__popcountsi2>:
 801c978:	0843      	lsrs	r3, r0, #1
 801c97a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 801c97e:	1ac0      	subs	r0, r0, r3
 801c980:	0883      	lsrs	r3, r0, #2
 801c982:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 801c986:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 801c98a:	4418      	add	r0, r3
 801c98c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 801c990:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 801c994:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801c998:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801c99c:	0e00      	lsrs	r0, r0, #24
 801c99e:	4770      	bx	lr

Disassembly of section .rodata:

0801c9a0 <CSWTCH.158-0x1542>:
 801c9a0:	00000000 	andeq	r0, r0, r0
 801c9a4:	00000001 	andeq	r0, r0, r1
 801c9a8:	00000002 	andeq	r0, r0, r2
 801c9ac:	00000000 	andeq	r0, r0, r0
 801c9b0:	00000002 	andeq	r0, r0, r2
 801c9b4:	00000001 	andeq	r0, r0, r1
 801c9b8:	00000001 	andeq	r0, r0, r1
 801c9bc:	00000000 	andeq	r0, r0, r0
 801c9c0:	00000002 	andeq	r0, r0, r2
 801c9c4:	00000002 	andeq	r0, r0, r2
 801c9c8:	00000000 	andeq	r0, r0, r0
 801c9cc:	00000001 	andeq	r0, r0, r1
 801c9d0:	00000001 	andeq	r0, r0, r1
 801c9d4:	00000002 	andeq	r0, r0, r2
 801c9d8:	00000000 	andeq	r0, r0, r0
 801c9dc:	00000002 	andeq	r0, r0, r2
 801c9e0:	00000001 	andeq	r0, r0, r1
	...
 801c9f0:	04030201 	streq	r0, [r3], #-513	@ 0xfffffdff
 801c9f4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
 801c9f8:	00000000 	andeq	r0, r0, r0
 801c9fc:	04030201 	streq	r0, [r3], #-513	@ 0xfffffdff
 801ca00:	7261485b 	rsbvc	r4, r1, #5963776	@ 0x5b0000
 801ca04:	75614664 	strbvc	r4, [r1, #-1636]!	@ 0xfffff99c
 801ca08:	0a5d746c 	beq	9779bc0 <__init_array_end+0x17582b4>
 801ca0c:	53202d00 	noppl	{0}	@ <UNPREDICTABLE>
 801ca10:	6b636174 	blvs	98f4fe8 <__init_array_end+0x18d36dc>
 801ca14:	61726620 	cmnvs	r2, r0, lsr #12
 801ca18:	0a3a656d 	beq	8eb5fd4 <__init_array_end+0xe946c8>
 801ca1c:	30522000 	subscc	r2, r2, r0
 801ca20:	203d2020 	eorscs	r2, sp, r0, lsr #32
 801ca24:	000a7825 	andeq	r7, sl, r5, lsr #16
 801ca28:	20315220 	eorscs	r5, r1, r0, lsr #4
 801ca2c:	25203d20 	strcs	r3, [r0, #-3360]!	@ 0xfffff2e0
 801ca30:	20000a78 	andcs	r0, r0, r8, ror sl
 801ca34:	20203252 	eorcs	r3, r0, r2, asr r2
 801ca38:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801ca3c:	5220000a 	eorpl	r0, r0, #10
 801ca40:	3d202033 	stccc	0, cr2, [r0, #-204]!	@ 0xffffff34
 801ca44:	0a782520 	beq	9e25ecc <__init_array_end+0x1e045c0>
 801ca48:	31522000 	cmpcc	r2, r0
 801ca4c:	203d2032 	eorscs	r2, sp, r2, lsr r0
 801ca50:	000a7825 	andeq	r7, sl, r5, lsr #16
 801ca54:	20524c20 	subscs	r4, r2, r0, lsr #24
 801ca58:	25203d20 	strcs	r3, [r0, #-3360]!	@ 0xfffff2e0
 801ca5c:	20000a78 	andcs	r0, r0, r8, ror sl
 801ca60:	20204350 	eorcs	r4, r0, r0, asr r3
 801ca64:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801ca68:	5020000a 	eorpl	r0, r0, sl
 801ca6c:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ca70:	0a782520 	beq	9e25ef8 <__init_array_end+0x1e045ec>
 801ca74:	46202d00 	strtmi	r2, [r0], -r0, lsl #26
 801ca78:	462f5253 			@ <UNDEFINED> instruction: 0x462f5253
 801ca7c:	0a3a5241 	beq	8eb1388 <__init_array_end+0xe8fa7c>
 801ca80:	46432000 	strbmi	r2, [r3], -r0
 801ca84:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ca88:	0a782520 	beq	9e25f10 <__init_array_end+0x1e04604>
 801ca8c:	46482000 	strbmi	r2, [r8], -r0
 801ca90:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801ca94:	0a782520 	beq	9e25f1c <__init_array_end+0x1e04610>
 801ca98:	46442000 	strbmi	r2, [r4], -r0
 801ca9c:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801caa0:	0a782520 	beq	9e25f28 <__init_array_end+0x1e0461c>
 801caa4:	46412000 	strbmi	r2, [r1], -r0
 801caa8:	3d205253 	sfmcc	f5, 4, [r0, #-332]!	@ 0xfffffeb4
 801caac:	0a782520 	beq	9e25f34 <__init_array_end+0x1e04628>
 801cab0:	4d4d2000 	stclmi	0, cr2, [sp, #-0]
 801cab4:	20524146 	subscs	r4, r2, r6, asr #2
 801cab8:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801cabc:	4220000a 	eormi	r0, r0, #10
 801cac0:	20524146 	subscs	r4, r2, r6, asr #2
 801cac4:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801cac8:	202d000a 	eorcs	r0, sp, sl
 801cacc:	6373694d 	cmnvs	r3, #1261568	@ 0x134000
 801cad0:	4c20000a 	stcmi	0, cr0, [r0], #-40	@ 0xffffffd8
 801cad4:	58452f52 	stmdapl	r5, {r1, r4, r6, r8, r9, sl, fp, sp}^
 801cad8:	45525f43 	ldrbmi	r5, [r2, #-3907]	@ 0xfffff0bd
 801cadc:	4e525554 	mrcmi	5, 2, r5, cr2, cr4, {2}
 801cae0:	7825203d 	stmdavc	r5!, {r0, r2, r3, r4, r5, sp}
 801cae4:	696c000a 	stmdbvs	ip!, {r1, r3}^
 801cae8:	73746867 	cmnvc	r4, #6750208	@ 0x670000
 801caec:	3a3a7465 	bcc	8eb9c88 <__init_array_end+0xe9837c>
 801caf0:	61746144 	cmnvs	r4, r4, asr #2
 801caf4:	65473a3a 	strbvs	r3, [r7, #-2618]	@ 0xfffff5c6
 801caf8:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
 801cafc:	28687467 	stmdacs	r8!, {r0, r1, r2, r5, r6, sl, ip, sp, lr}^
 801cb00:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801cb04:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801cb08:	20297865 	eorcs	r7, r9, r5, ror #16
 801cb0c:	30203d21 	eorcc	r3, r0, r1, lsr #26
 801cb10:	6e795300 	cdpvs	3, 7, cr5, cr9, cr0, {0}
 801cb14:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
 801cb18:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801cb1c:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 801cb20:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801cb24:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801cb28:	786d642f 	stmdavc	sp!, {r0, r1, r2, r3, r5, sl, sp, lr}^
 801cb2c:	646e6573 	strbtvs	r6, [lr], #-1395	@ 0xfffffa8d
 801cb30:	6e00682e 	cdpvs	8, 0, cr6, cr0, cr14, {1}
 801cb34:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
 801cb38:	65646e49 	strbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801cb3c:	203c2078 	eorscs	r2, ip, r8, ror r0
 801cb40:	54524f50 	ldrbpl	r4, [r2], #-3920	@ 0xfffff0b0
 801cb44:	42490053 	submi	r0, r9, #83	@ 0x53
 801cb48:	756b6361 	strbvc	r6, [fp, #-865]!	@ 0xfffffc9f
 801cb4c:	2e2e0070 	mcrcs	0, 1, r0, cr14, cr0, {3}
 801cb50:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801cb54:	67696c2d 	strbvs	r6, [r9, -sp, lsr #24]!
 801cb58:	65737468 	ldrbvs	r7, [r3, #-1128]!	@ 0xfffffb98
 801cb5c:	6e692f74 	mcrvs	15, 3, r2, cr9, cr4, {3}
 801cb60:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801cb64:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801cb68:	73746867 	cmnvc	r4, #6750208	@ 0x670000
 801cb6c:	61647465 	cmnvs	r4, r5, ror #8
 801cb70:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
 801cb74:	584d4400 	stmdapl	sp, {sl, lr}^
 801cb78:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 801cb7c:	42200064 	eormi	r0, r0, #100	@ 0x64
 801cb80:	6b616572 	blvs	9876150 <__init_array_end+0x1854844>
 801cb84:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	@ 0xffffff80
 801cb88:	20202065 	eorcs	r2, r0, r5, rrx
 801cb8c:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801cb90:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	@ 0xffffffd8
 801cb94:	74204241 	strtvc	r4, [r0], #-577	@ 0xfffffdbf
 801cb98:	20656d69 	rsbcs	r6, r5, r9, ror #26
 801cb9c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cba0:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801cba4:	5220000a 	eorpl	r0, r0, #10
 801cba8:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801cbac:	72206873 	eorvc	r6, r0, #7536640	@ 0x730000
 801cbb0:	20657461 	rsbcs	r7, r5, r1, ror #8
 801cbb4:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801cbb8:	5320000a 			@ <UNDEFINED> instruction: 0x5320000a
 801cbbc:	73746f6c 	cmnvc	r4, #108, 30	@ 0x1b0
 801cbc0:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cbc4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cbc8:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801cbcc:	506e000a 	rsbpl	r0, lr, sl
 801cbd0:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801cbd4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801cbd8:	43203c20 			@ <UNDEFINED> instruction: 0x43203c20
 801cbdc:	5f524148 	svcpl	0x00524148
 801cbe0:	00544942 	subseq	r4, r4, r2, asr #18
 801cbe4:	44746553 	ldrbtmi	r6, [r4], #-1363	@ 0xfffffaad
 801cbe8:	00617461 	rsbeq	r7, r1, r1, ror #8
 801cbec:	74614470 	strbtvc	r4, [r1], #-1136	@ 0xfffffb90
 801cbf0:	3d212061 	stccc	0, cr2, [r1, #-388]!	@ 0xfffffe7c
 801cbf4:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801cbf8:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801cbfc:	654c6e00 	strbvs	r6, [ip, #-3584]	@ 0xfffff200
 801cc00:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801cc04:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801cc08:	74530030 	ldrbvc	r0, [r3], #-48	@ 0xffffffd0
 801cc0c:	2d00706f 	stccs	0, cr7, [r0, #-444]	@ 0xfffffe44
 801cc10:	25203e2d 	strcs	r3, [r0, #-3629]!	@ 0xfffff1d3
 801cc14:	73253a73 			@ <UNDEFINED> instruction: 0x73253a73
 801cc18:	0a64253a 	beq	9926108 <__init_array_end+0x19047fc>
 801cc1c:	28732500 	ldmdacs	r3!, {r8, sl, sp}^
 801cc20:	73252029 			@ <UNDEFINED> instruction: 0x73252029
 801cc24:	696c202c 	stmdbvs	ip!, {r2, r3, r5, sp}^
 801cc28:	2520656e 	strcs	r6, [r0, #-1390]!	@ 0xfffffa92
 801cc2c:	6e203a69 	vnmulvs.f32	s6, s0, s19
 801cc30:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
 801cc34:	65646e49 	strbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801cc38:	64253d78 	strtvs	r3, [r5], #-3448	@ 0xfffff288
 801cc3c:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801cc40:	000a7525 	andeq	r7, sl, r5, lsr #10
 801cc44:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 801cc48:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801cc4c:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801cc50:	7453000a 	ldrbvc	r0, [r3], #-10
 801cc54:	00747261 	rsbseq	r7, r4, r1, ror #4
 801cc58:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cc5c:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801cc60:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801cc64:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801cc68:	506e203a 	rsbpl	r2, lr, sl, lsr r0
 801cc6c:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801cc70:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801cc74:	0a64253d 	beq	9926170 <__init_array_end+0x1904864>
 801cc78:	2f2e2e00 	svccs	0x002e2e00
 801cc7c:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
 801cc80:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801cc84:	2f6b726f 	svccs	0x006b726f
 801cc88:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801cc8c:	2f656475 	svccs	0x00656475
 801cc90:	2f74656e 	svccs	0x0074656e
 801cc94:	70636864 	rsbvc	r6, r3, r4, ror #16
 801cc98:	6400682e 	strvs	r6, [r0], #-2094	@ 0xfffff7d2
 801cc9c:	5f706368 	svcpl	0x00706368
 801cca0:	006e7572 	rsbeq	r7, lr, r2, ror r5
 801cca4:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801cca8:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801ccac:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801ccb0:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801ccb4:	4470203a 	ldrbtmi	r2, [r0], #-58	@ 0xffffffc6
 801ccb8:	4d706368 	ldclmi	3, cr6, [r0, #-416]!	@ 0xfffffe60
 801ccbc:	61737365 	cmnvs	r3, r5, ror #6
 801ccc0:	3e2d6567 	cfsh64cc	mvdx6, mvdx13, #55
 801ccc4:	3d646978 			@ <UNDEFINED> instruction: 0x3d646978
 801ccc8:	202c7525 	eorcs	r7, ip, r5, lsr #10
 801cccc:	70636864 	rsbvc	r6, r3, r4, ror #16
 801ccd0:	69783e2d 	ldmdbvs	r8!, {r0, r2, r3, r5, r9, sl, fp, ip, sp}^
 801ccd4:	75253d64 	strvc	r3, [r5, #-3428]!	@ 0xfffff29c
 801ccd8:	436e000a 	cmnmi	lr, #10
 801ccdc:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	@ 0xfffffe44
 801cce0:	3e20736e 	cdpcc	3, 2, cr7, cr0, cr14, {3}
 801cce4:	0031203d 	eorseq	r2, r1, sp, lsr r0
 801cce8:	74786554 	ldrbtvc	r6, [r8], #-1364	@ 0xfffffaac
 801ccec:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
 801ccf0:	2e007375 	mcrcs	3, 0, r7, cr0, cr5, {3}
 801ccf4:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801ccf8:	69642d62 	stmdbvs	r4!, {r1, r5, r6, r8, sl, fp, sp}^
 801ccfc:	616c7073 	smcvs	50947	@ 0xc703
 801cd00:	6e692f79 	mcrvs	15, 3, r2, cr9, cr9, {3}
 801cd04:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801cd08:	32692f65 	rsbcc	r2, r9, #404	@ 0x194
 801cd0c:	69642f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 801cd10:	616c7073 	smcvs	50947	@ 0xc703
 801cd14:	00682e79 	rsbeq	r2, r8, r9, ror lr
 801cd18:	776f526e 	strbvc	r5, [pc, -lr, ror #4]!
 801cd1c:	3d3e2073 	ldccc	0, cr2, [lr, #-460]!	@ 0xfffffe34
 801cd20:	73003120 	movwvc	r3, #288	@ 0x120
 801cd24:	6854705f 	ldmdavs	r4, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 801cd28:	21207369 			@ <UNDEFINED> instruction: 0x21207369
 801cd2c:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801cd30:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801cd34:	65470072 	strbvs	r0, [r7, #-114]	@ 0xffffff8e
 801cd38:	2e2e0074 	mcrcs	0, 1, r0, cr14, cr4, {3}
 801cd3c:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801cd40:	3273772d 	rsbscc	r7, r3, #11796480	@ 0xb40000
 801cd44:	2f787838 	svccs	0x00787838
 801cd48:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801cd4c:	2f656475 	svccs	0x00656475
 801cd50:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801cd54:	6e6f636c 	cdpvs	3, 6, cr6, cr15, cr12, {3}
 801cd58:	75676966 	strbvc	r6, [r7, #-2406]!	@ 0xfffff69a
 801cd5c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801cd60:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801cd64:	74655300 	strbtvc	r5, [r5], #-768	@ 0xfffffd00
 801cd68:	74746150 	ldrbtvc	r6, [r4], #-336	@ 0xfffffeb0
 801cd6c:	006e7265 	rsbeq	r7, lr, r5, ror #4
 801cd70:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801ccc0 <_etext+0x320>
 801cd74:	772d6269 	strvc	r6, [sp, -r9, ror #4]!
 801cd78:	78383273 	ldmdavc	r8!, {r0, r1, r4, r5, r6, r9, ip, sp}
 801cd7c:	6e692f78 	mcrvs	15, 3, r2, cr9, cr8, {3}
 801cd80:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801cd84:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801cd88:	746c6578 	strbtvc	r6, [ip], #-1400	@ 0xfffffa88
 801cd8c:	70747365 	rsbsvc	r7, r4, r5, ror #6
 801cd90:	65747461 	ldrbvs	r7, [r4, #-1121]!	@ 0xfffffb9f
 801cd94:	682e6e72 	stmdavs	lr!, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
 801cd98:	3a732500 	bcc	9ce61a0 <__init_array_end+0x1cc4894>
 801cd9c:	50007525 	andpl	r7, r0, r5, lsr #10
 801cda0:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801cda4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801cda8:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801cdac:	6f697461 	svcvs	0x00697461
 801cdb0:	5f73006e 	svcpl	0x0073006e
 801cdb4:	69685470 	stmdbvs	r8!, {r4, r5, r6, sl, ip, lr}^
 801cdb8:	3d3d2073 	ldccc	0, cr2, [sp, #-460]!	@ 0xfffffe34
 801cdbc:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801cdc0:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801cdc4:	78695000 	stmdavc	r9!, {ip, lr}^
 801cdc8:	6d446c65 	stclvs	12, cr6, [r4, #-404]	@ 0xfffffe6c
 801cdcc:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
 801cdd0:	75676966 	strbvc	r6, [r7, #-2406]!	@ 0xfffff69a
 801cdd4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801cdd8:	2e006e6f 	cdpcs	14, 0, cr6, cr0, cr15, {3}
 801cddc:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801cde0:	73772d62 	cmnvc	r7, #6272	@ 0x1880
 801cde4:	78783832 	ldmdavc	r8!, {r1, r4, r5, fp, ip, sp}^
 801cde8:	2f786d64 	svccs	0x00786d64
 801cdec:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801cdf0:	2f656475 	svccs	0x00656475
 801cdf4:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801cdf8:	786d646c 	stmdavc	sp!, {r2, r3, r5, r6, sl, sp, lr}^
 801cdfc:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801ce00:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801ce04:	6f697461 	svcvs	0x00697461
 801ce08:	00682e6e 	rsbeq	r2, r8, lr, ror #28
 801ce0c:	4d44527e 	sfmmi	f5, 2, [r4, #-504]	@ 0xfffffe08
 801ce10:	44627553 	strbtmi	r7, [r2], #-1363	@ 0xfffffaad
 801ce14:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801ce18:	2e007365 	cdpcs	3, 0, cr7, cr0, cr5, {3}
 801ce1c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801ce20:	64722d62 	ldrbtvs	r2, [r2], #-3426	@ 0xfffff29e
 801ce24:	6e692f6d 	cdpvs	15, 6, cr2, cr9, cr13, {3}
 801ce28:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801ce2c:	64722f65 	ldrbtvs	r2, [r2], #-3941	@ 0xfffff09b
 801ce30:	6275736d 	rsbsvs	r7, r5, #-1275068415	@ 0xb4000001
 801ce34:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801ce38:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801ce3c:	2e2e0068 	cdpcs	0, 2, cr0, cr14, cr8, {3}
 801ce40:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801ce44:	6d64722d 	sfmvs	f7, 2, [r4, #-180]!	@ 0xffffff4c
 801ce48:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801ce4c:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801ce50:	726c6c2f 	rsbvc	r6, ip, #12032	@ 0x2f00
 801ce54:	6c6c2f70 	stclvs	15, cr2, [ip], #-448	@ 0xfffffe40
 801ce58:	65647072 	strbvs	r7, [r4, #-114]!	@ 0xffffff8e
 801ce5c:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801ce60:	6e00682e 	cdpvs	8, 0, cr6, cr0, cr14, {1}
 801ce64:	65646e49 	strbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801ce68:	3d212078 	stccc	0, cr2, [r1, #-480]!	@ 0xfffffe20
 801ce6c:	00312d20 	eorseq	r2, r1, r0, lsr #26
 801ce70:	69676542 	stmdbvs	r7!, {r1, r6, r8, sl, sp, lr}^
 801ce74:	2e2e006e 	cdpcs	0, 2, cr0, cr14, cr14, {3}
 801ce78:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801ce7c:	74656e2d 	strbtvc	r6, [r5], #-3629	@ 0xfffff1d3
 801ce80:	6b726f77 	blvs	9cb8c64 <__init_array_end+0x1c97358>
 801ce84:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801ce88:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801ce8c:	616d652f 	cmnvs	sp, pc, lsr #10
 801ce90:	656e2f63 	strbvs	r2, [lr, #-3939]!	@ 0xfffff09d
 801ce94:	726f7774 	rsbvc	r7, pc, #116, 14	@ 0x1d00000
 801ce98:	00682e6b 	rsbeq	r2, r8, fp, ror #28
 801ce9c:	486e5f73 	stmdami	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801cea0:	6c646e61 	stclvs	14, cr6, [r4], #-388	@ 0xfffffe7c
 801cea4:	524c4c65 	subpl	r4, ip, #25856	@ 0x6500
 801cea8:	3d212050 	stccc	0, cr2, [r1, #-320]!	@ 0xfffffec0
 801ceac:	00312d20 	eorseq	r2, r1, r0, lsr #26
 801ceb0:	4d44527e 	sfmmi	f5, 2, [r4, #-504]	@ 0xfffffe08
 801ceb4:	736e6553 	cmnvc	lr, #348127232	@ 0x14c00000
 801ceb8:	0073726f 	rsbseq	r7, r3, pc, ror #4
 801cebc:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801ce0c <_etext+0x46c>
 801cec0:	722d6269 	eorvc	r6, sp, #-1879048186	@ 0x90000006
 801cec4:	692f6d64 	stmdbvs	pc!, {r2, r5, r6, r8, sl, fp, sp, lr}	@ <UNPREDICTABLE>
 801cec8:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801cecc:	722f6564 	eorvc	r6, pc, #100, 10	@ 0x19000000
 801ced0:	65736d64 	ldrbvs	r6, [r3, #-3428]!	@ 0xfffff29c
 801ced4:	726f736e 	rsbvc	r7, pc, #-1207959551	@ 0xb8000001
 801ced8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 801cedc:	4d44527e 	sfmmi	f5, 2, [r4, #-504]	@ 0xfffffe08
 801cee0:	4474654e 	ldrbtmi	r6, [r4], #-1358	@ 0xfffffab2
 801cee4:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801cee8:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
 801ceec:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801cef0:	6d64722d 	sfmvs	f7, 2, [r4, #-180]!	@ 0xffffff4c
 801cef4:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801cef8:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801cefc:	6d64722f 	sfmvs	f7, 2, [r4, #-188]!	@ 0xffffff44
 801cf00:	6474656e 	ldrbtvs	r6, [r4], #-1390	@ 0xfffffa92
 801cf04:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801cf08:	00682e65 	rsbeq	r2, r8, r5, ror #28
 801cf0c:	524c4c7e 	subpl	r4, ip, #32256	@ 0x7e00
 801cf10:	76654450 			@ <UNDEFINED> instruction: 0x76654450
 801cf14:	00656369 	rsbeq	r6, r5, r9, ror #6
 801cf18:	646e496e 	strbtvs	r4, [lr], #-2414	@ 0xfffff692
 801cf1c:	3d207865 	stccc	8, cr7, [r0, #-404]!	@ 0xfffffe6c
 801cf20:	0030203d 	eorseq	r2, r0, sp, lsr r0
 801cf24:	00646e45 	rsbeq	r6, r4, r5, asr #28
 801cf28:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801cf2c:	000a7465 	andeq	r7, sl, r5, ror #8
 801cf30:	44494320 	strbmi	r4, [r9], #-800	@ 0xfffffce0
 801cf34:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cf38:	4c000a73 			@ <UNDEFINED> instruction: 0x4c000a73
 801cf3c:	2050524c 	subscs	r5, r0, ip, asr #4
 801cf40:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801cf44:	000a6563 	andeq	r6, sl, r3, ror #10
 801cf48:	726f5020 	rsbvc	r5, pc, #32
 801cf4c:	44552074 	ldrbmi	r2, [r5], #-116	@ 0xffffff8c
 801cf50:	20202050 	eorcs	r2, r0, r0, asr r0
 801cf54:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cf58:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cf5c:	6425203a 	strtvs	r2, [r5], #-58	@ 0xffffffc6
 801cf60:	4a20000a 	bmi	881cf90 <__init_array_end+0x7fb684>
 801cf64:	206e696f 	rsbcs	r6, lr, pc, ror #18
 801cf68:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801cf6c:	20747365 	rsbscs	r7, r4, r5, ror #6
 801cf70:	20202020 	eorcs	r2, r0, r0, lsr #32
 801cf74:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801cf78:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801cf7c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801cf80:	0a64252e 	beq	9926440 <__init_array_end+0x1904b34>
 801cf84:	754d2000 	strbvc	r2, [sp, #-0]
 801cf88:	6369746c 	cmnvs	r9, #108, 8	@ 0x6c000000
 801cf8c:	20747361 	rsbscs	r7, r4, r1, ror #6
 801cf90:	70736552 	rsbsvc	r6, r3, r2, asr r5
 801cf94:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	@ 0xfffff191
 801cf98:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801cf9c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801cfa0:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801cfa4:	000a6425 	andeq	r6, sl, r5, lsr #8
 801cfa8:	333a3831 	teqcc	sl, #3211264	@ 0x310000
 801cfac:	33303a32 	teqcc	r0, #204800	@ 0x32000
 801cfb0:	70655300 	rsbvc	r5, r5, r0, lsl #6
 801cfb4:	20333220 	eorscs	r3, r3, r0, lsr #4
 801cfb8:	34323032 	ldrtcc	r3, [r2], #-50	@ 0xffffffce
 801cfbc:	74724100 	ldrbtvc	r4, [r2], #-256	@ 0xffffff00
 801cfc0:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
 801cfc4:	50203420 	eorpl	r3, r0, r0, lsr #8
 801cfc8:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801cfcc:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801cfd0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	@ 801ce08 <_etext+0x468>
 801cfd4:	2072656c 	rsbscs	r6, r2, ip, ror #10
 801cfd8:	7836317b 	ldmdavc	r6!, {r0, r1, r3, r4, r5, r6, r8, ip, sp}
 801cfdc:	55203420 	strpl	r3, [r0, #-1056]!	@ 0xfffffbe0
 801cfe0:	6576696e 	ldrbvs	r6, [r6, #-2414]!	@ 0xfffff692
 801cfe4:	73657372 	cmnvc	r5, #-939524095	@ 0xc8000001
 801cfe8:	202f207d 	eorcs	r2, pc, sp, ror r0	@ <UNPREDICTABLE>
 801cfec:	44207832 	strtmi	r7, [r0], #-2098	@ 0xfffff7ce
 801cff0:	1b00584d 	blne	803312c <__init_array_end+0x11820>
 801cff4:	6d32335b 	ldcvs	3, cr3, [r2, #-364]!	@ 0xfffffe94
 801cff8:	5b1b7325 	blpl	86f9c94 <__init_array_end+0x6d8388>
 801cffc:	000a6d30 	andeq	r6, sl, r0, lsr sp
 801d000:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801d004:	6325206c 			@ <UNDEFINED> instruction: 0x6325206c
 801d008:	253a5520 	ldrcs	r5, [sl, #-1312]!	@ 0xfffffae0
 801d00c:	69500075 	ldmdbvs	r0, {r0, r2, r4, r5, r6}^
 801d010:	546c6578 	strbtpl	r6, [ip], #-1400	@ 0xfffffa88
 801d014:	50747365 	rsbspl	r7, r4, r5, ror #6
 801d018:	65747461 	ldrbvs	r7, [r4, #-1121]!	@ 0xfffffb9f
 801d01c:	2e006e72 	mcrcs	14, 0, r6, cr0, cr2, {3}
 801d020:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
 801d024:	696c2d62 	stmdbvs	ip!, {r1, r5, r6, r8, sl, fp, sp}^
 801d028:	73746867 	cmnvc	r4, #6750208	@ 0x670000
 801d02c:	692f7465 	stmdbvs	pc!, {r0, r2, r5, r6, sl, ip, sp, lr}	@ <UNPREDICTABLE>
 801d030:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
 801d034:	6c2f6564 	cfstr32vs	mvfx6, [pc], #-400	@ 801ceac <_etext+0x50c>
 801d038:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801d03c:	77746573 			@ <UNDEFINED> instruction: 0x77746573
 801d040:	34687469 	strbtcc	r7, [r8], #-1129	@ 0xfffffb97
 801d044:	4c00682e 	stcmi	8, cr6, [r0], {46}	@ 0x2e
 801d048:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801d04c:	57746553 			@ <UNDEFINED> instruction: 0x57746553
 801d050:	34687469 	strbtcc	r7, [r8], #-1129	@ 0xfffffb97
 801d054:	28732500 	ldmdacs	r3!, {r8, sl, sp}^
 801d058:	73252029 			@ <UNDEFINED> instruction: 0x73252029
 801d05c:	696c202c 	stmdbvs	ip!, {r2, r3, r5, sp}^
 801d060:	2520656e 	strcs	r6, [r0, #-1390]!	@ 0xfffffa92
 801d064:	25203a69 	strcs	r3, [r0, #-2665]!	@ 0xfffff597
 801d068:	70252075 	eorvc	r2, r5, r5, ror r0
 801d06c:	0a702520 	beq	9c264f4 <__init_array_end+0x1c04be8>
 801d070:	74724100 	ldrbtvc	r4, [r2], #-256	@ 0xffffff00
 801d074:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
 801d078:	50203420 	eorpl	r3, r0, r0, lsr #8
 801d07c:	2d75253a 	cfldr64cs	mvdx2, [r5, #-232]!	@ 0xffffff18
 801d080:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801d084:	3a442064 	bcc	912521c <__init_array_end+0x1103910>
 801d088:	47007525 	strmi	r7, [r0, -r5, lsr #10]
 801d08c:	46323344 	ldrtmi	r3, [r2], -r4, asr #6
 801d090:	5a303734 	bpl	8c2ad68 <__init_array_end+0xc0945c>
 801d094:	4156455f 	cmpmi	r6, pc, asr r5
 801d098:	6950204c 	ldmdbvs	r0, {r2, r3, r6, sp}^
 801d09c:	2d6c6578 	cfstr64cs	mvdx6, [ip, #-480]!	@ 0xfffffe20
 801d0a0:	00584d44 	subseq	r4, r8, r4, asr #26
 801d0a4:	4e747241 	cdpmi	2, 7, cr7, cr4, cr1, {2}
 801d0a8:	34207465 	strtcc	r7, [r0], #-1125	@ 0xfffffb9b
 801d0ac:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 801d0b0:	25206c65 	strcs	r6, [r0, #-3173]!	@ 0xfffff39b
 801d0b4:	75257875 	strvc	r7, [r5, #-2165]!	@ 0xfffff78b
 801d0b8:	3a732500 	bcc	9ce64c0 <__init_array_end+0x1cc4bb4>
 801d0bc:	47206425 	strmi	r6, [r0, -r5, lsr #8]!
 801d0c0:	25206425 	strcs	r6, [r0, #-1061]!	@ 0xfffffbdb
 801d0c4:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 801d0c8:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
 801d0cc:	6d65722d 	sfmvs	f7, 2, [r5, #-180]!	@ 0xffffff4c
 801d0d0:	6365746f 	cmnvs	r5, #1862270976	@ 0x6f000000
 801d0d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801d0d8:	6e692f67 	cdpvs	15, 6, cr2, cr9, cr7, {3}
 801d0dc:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801d0e0:	74682f65 	strbtvc	r2, [r8], #-3941	@ 0xfffff09b
 801d0e4:	2f647074 	svccs	0x00647074
 801d0e8:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801d0ec:	00682e64 	rsbeq	r2, r8, r4, ror #28
 801d0f0:	006e7552 	rsbeq	r7, lr, r2, asr r5
 801d0f4:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d0f8:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801d0fc:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801d100:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801d104:	436e203a 	cmnmi	lr, #58	@ 0x3a
 801d108:	656e6e6f 	strbvs	r6, [lr, #-3695]!	@ 0xfffff191
 801d10c:	6f697463 	svcvs	0x00697463
 801d110:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
 801d114:	3d656c64 	stclcc	12, cr6, [r5, #-400]!	@ 0xfffffe70
 801d118:	000a7525 	andeq	r7, sl, r5, lsr #10
 801d11c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d120:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801d124:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801d128:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801d12c:	7325203a 			@ <UNDEFINED> instruction: 0x7325203a
 801d130:	4556000a 	ldrbmi	r0, [r6, #-10]
 801d134:	524f5443 	subpl	r5, pc, #1124073472	@ 0x43000000
 801d138:	524c4c5f 	subpl	r4, ip, #24320	@ 0x5f00
 801d13c:	52505f50 	subspl	r5, r0, #80, 30	@ 0x140
 801d140:	5f45424f 	svcpl	0x0045424f
 801d144:	4c504552 	cfldr64mi	mvdx4, [r0], {82}	@ 0x52
 801d148:	6e4f0059 	mcrvs	0, 2, r0, cr15, cr9, {2}
 801d14c:	73696400 	cmnvc	r9, #0, 8
 801d150:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801d154:	0a73253a 	beq	9ce6644 <__init_array_end+0x1cc4d38>
 801d158:	74707500 	ldrbtvc	r7, [r0], #-1280	@ 0xfffffb00
 801d15c:	3a656d69 	bcc	9978708 <__init_array_end+0x1956dfc>
 801d160:	73752520 	cmnvc	r5, #32, 10	@ 0x8000000
 801d164:	6576000a 	ldrbvs	r0, [r6, #-10]!
 801d168:	6f697372 	svcvs	0x00697372
 801d16c:	73253a6e 			@ <UNDEFINED> instruction: 0x73253a6e
 801d170:	74667400 	strbtvc	r7, [r6], #-1024	@ 0xfffffc00
 801d174:	73253a70 			@ <UNDEFINED> instruction: 0x73253a70
 801d178:	6425000a 	strtvs	r0, [r5], #-10
 801d17c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d180:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801d184:	73252c64 			@ <UNDEFINED> instruction: 0x73252c64
 801d188:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	@ 0xffffff50
 801d18c:	252c7525 	strcs	r7, [ip, #-1317]!	@ 0xfffffadb
 801d190:	25000a73 	strcs	r0, [r0, #-2675]	@ 0xfffff58d
 801d194:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801d198:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d19c:	252c6425 	strcs	r6, [ip, #-1061]!	@ 0xfffffbdb
 801d1a0:	73252c73 			@ <UNDEFINED> instruction: 0x73252c73
 801d1a4:	0a75252c 	beq	9d6665c <__init_array_end+0x1d44d50>
 801d1a8:	52524500 	subspl	r4, r2, #0, 10
 801d1ac:	3f23524f 	svccc	0x0023524f
 801d1b0:	0a746567 	beq	9d36754 <__init_array_end+0x1d14e48>
 801d1b4:	52524500 	subspl	r4, r2, #0, 10
 801d1b8:	3f23524f 	svccc	0x0023524f
 801d1bc:	6674000a 	ldrbtvs	r0, [r4], -sl
 801d1c0:	00237074 	eoreq	r7, r3, r4, ror r0
 801d1c4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801d1c8:	2379616c 	cmncs	r9, #108, 2
 801d1cc:	52524500 	subspl	r4, r2, #0, 10
 801d1d0:	2123524f 			@ <UNDEFINED> instruction: 0x2123524f
 801d1d4:	6572000a 	ldrbvs	r0, [r2, #-10]!
 801d1d8:	746f6f62 	strbtvc	r6, [pc], #-3938	@ 801d1e0 <_etext+0x840>
 801d1dc:	6c002323 	stcvs	3, cr2, [r0], {35}	@ 0x23
 801d1e0:	23747369 	cmncs	r4, #-1543503871	@ 0xa4000001
 801d1e4:	72657600 	rsbvc	r7, r5, #0, 12
 801d1e8:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801d1ec:	70750023 	rsbsvc	r0, r5, r3, lsr #32
 801d1f0:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801d1f4:	65670023 	strbvs	r0, [r7, #-35]!	@ 0xffffffdd
 801d1f8:	66002374 			@ <UNDEFINED> instruction: 0x66002374
 801d1fc:	6f746361 	svcvs	0x00746361
 801d200:	23237972 			@ <UNDEFINED> instruction: 0x23237972
 801d204:	73252200 			@ <UNDEFINED> instruction: 0x73252200
 801d208:	64253a22 	strtvs	r3, [r5], #-2594	@ 0xfffff5de
 801d20c:	2523002c 	strcs	r0, [r3, #-44]!	@ 0xffffffd4
 801d210:	64253d73 	strtvs	r3, [r5], #-3443	@ 0xfffff28d
 801d214:	2522000a 	strcs	r0, [r2, #-10]!
 801d218:	223a2273 	eorscs	r2, sl, #805306375	@ 0x30000007
 801d21c:	2c227325 	stccs	3, cr7, [r2], #-148	@ 0xffffff6c
 801d220:	73252300 			@ <UNDEFINED> instruction: 0x73252300
 801d224:	0a73253d 	beq	9ce6720 <__init_array_end+0x1cc4e14>
 801d228:	62655200 	rsbvs	r5, r5, #0, 4
 801d22c:	69746f6f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801d230:	2e20676e 	cdpcs	7, 2, cr6, cr0, cr14, {3}
 801d234:	72002e2e 	andvc	r2, r0, #736	@ 0x2e0
 801d238:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801d23c:	742e6769 	strtvc	r6, [lr], #-1897	@ 0xfffff897
 801d240:	65007478 	strvs	r7, [r0, #-1144]	@ 0xfffffb88
 801d244:	742e766e 	strtvc	r7, [lr], #-1646	@ 0xfffff992
 801d248:	6e007478 	mcrvs	4, 0, r7, cr0, cr8, {3}
 801d24c:	6f777465 	svcvs	0x00777465
 801d250:	742e6b72 	strtvc	r6, [lr], #-2930	@ 0xfffff48e
 801d254:	64007478 	strvs	r7, [r0], #-1144	@ 0xfffffb88
 801d258:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801d25c:	742e7961 	strtvc	r7, [lr], #-2401	@ 0xfffff69f
 801d260:	61007478 	tstvs	r0, r8, ror r4
 801d264:	656e7472 	strbvs	r7, [lr, #-1138]!	@ 0xfffffb8e
 801d268:	78742e74 	ldmdavc	r4!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801d26c:	61700074 	cmnvs	r0, r4, ror r0
 801d270:	736d6172 	cmnvc	sp, #-2147483620	@ 0x8000001c
 801d274:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801d278:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 801d27c:	73656369 	cmnvc	r5, #-1543503871	@ 0xa4000001
 801d280:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801d284:	54465400 	strbpl	r5, [r6], #-1024	@ 0xfffffc00
 801d288:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801d28c:	46540020 	ldrbmi	r0, [r4], -r0, lsr #32
 801d290:	4f205054 	svcmi	0x00205054
 801d294:	7b006666 	blvc	8036c34 <__init_array_end+0x15328>
 801d298:	73696c22 	cmnvc	r9, #8704	@ 0x2200
 801d29c:	7b3a2274 	blvc	8ea5c74 <__init_array_end+0xe84368>
 801d2a0:	22706922 	rsbscs	r6, r0, #557056	@ 0x88000
 801d2a4:	6425223a 	strtvs	r2, [r5], #-570	@ 0xfffffdc6
 801d2a8:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d2ac:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801d2b0:	222c2264 	eorcs	r2, ip, #100, 4	@ 0x40000006
 801d2b4:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
 801d2b8:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801d2bc:	222c2273 	eorcs	r2, ip, #805306375	@ 0x30000007
 801d2c0:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 801d2c4:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801d2c8:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801d2cc:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801d2d0:	222c2273 	eorcs	r2, ip, #805306375	@ 0x30000007
 801d2d4:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 801d2d8:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801d2dc:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801d2e0:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801d2e4:	222c2273 	eorcs	r2, ip, #805306375	@ 0x30000007
 801d2e8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801d2ec:	253a2274 	ldrcs	r2, [sl, #-628]!	@ 0xfffffd8c
 801d2f0:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	@ 0xfffffe70
 801d2f4:	227b007d 	rsbscs	r0, fp, #125	@ 0x7d
 801d2f8:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801d2fc:	226e6f69 	rsbcs	r6, lr, #420	@ 0x1a4
 801d300:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801d304:	2c22732a 	stccs	3, cr7, [r2], #-168	@ 0xffffff58
 801d308:	616f6222 	cmnvs	pc, r2, lsr #4
 801d30c:	3a226472 	bcc	88b64dc <__init_array_end+0x894bd0>
 801d310:	22732522 	rsbscs	r2, r3, #142606336	@ 0x8800000
 801d314:	7562222c 	strbvc	r2, [r2, #-556]!	@ 0xfffffdd4
 801d318:	22646c69 	rsbcs	r6, r4, #26880	@ 0x6900
 801d31c:	64227b3a 	strtvs	r7, [r2], #-2874	@ 0xfffff4c6
 801d320:	22657461 	rsbcs	r7, r5, #1627389952	@ 0x61000000
 801d324:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801d328:	2c22732a 	stccs	3, cr7, [r2], #-168	@ 0xffffff58
 801d32c:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	@ 0xffffff78
 801d330:	223a2265 	eorscs	r2, sl, #1342177286	@ 0x50000006
 801d334:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801d338:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 801d33c:	32334447 	eorscc	r4, r3, #1191182336	@ 0x47000000
 801d340:	30373446 	eorscc	r3, r7, r6, asr #8
 801d344:	56455f5a 			@ <UNDEFINED> instruction: 0x56455f5a
 801d348:	7b004c41 	blvc	8030454 <__init_array_end+0xeb48>
 801d34c:	74707522 	ldrbtvc	r7, [r0], #-1314	@ 0xfffffade
 801d350:	22656d69 	rsbcs	r6, r5, #6720	@ 0x1a40
 801d354:	7d75253a 	cfldr64vc	mvdx2, [r5, #-232]!	@ 0xffffff18
 801d358:	227b000a 	rsbscs	r0, fp, #10
 801d35c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801d360:	2279616c 	rsbscs	r6, r9, #108, 2
 801d364:	7d64253a 	cfstr64vc	mvdx2, [r4, #-232]!	@ 0xffffff18
 801d368:	66227b00 	strtvs	r7, [r2], -r0, lsl #22
 801d36c:	73656c69 	cmnvc	r5, #26880	@ 0x6900
 801d370:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801d374:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801d378:	742e7465 	strtvc	r7, [lr], #-1125	@ 0xfffffb9b
 801d37c:	3a227478 	bcc	88ba564 <__init_array_end+0x898c58>
 801d380:	74724122 	ldrbtvc	r4, [r2], #-290	@ 0xfffffede
 801d384:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
 801d388:	70222c22 	eorvc	r2, r2, r2, lsr #24
 801d38c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	@ 0xfffffe7c
 801d390:	78742e73 	ldmdavc	r4!, {r0, r1, r4, r5, r6, r9, sl, fp, sp}^
 801d394:	223a2274 	eorscs	r2, sl, #116, 4	@ 0x40000007
 801d398:	20584d44 	subscs	r4, r8, r4, asr #26
 801d39c:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
 801d3a0:	74696d73 	strbtvc	r6, [r9], #-3443	@ 0xfffff28d
 801d3a4:	64222c22 	strtvs	r2, [r2], #-3106	@ 0xfffff3de
 801d3a8:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 801d3ac:	742e7365 	strtvc	r7, [lr], #-869	@ 0xfffffc9b
 801d3b0:	3a227478 	bcc	88ba598 <__init_array_end+0x898c8c>
 801d3b4:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 801d3b8:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 801d3bc:	2c226c65 	stccs	12, cr6, [r2], #-404	@ 0xfffffe6c
 801d3c0:	73696422 	cmnvc	r9, #570425344	@ 0x22000000
 801d3c4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801d3c8:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801d3cc:	44223a22 	strtmi	r3, [r2], #-2594	@ 0xfffff5de
 801d3d0:	6c707369 	ldclvs	3, cr7, [r0], #-420	@ 0xfffffe5c
 801d3d4:	55207961 	strpl	r7, [r0, #-2401]!	@ 0xfffff69f
 801d3d8:	2c224644 	stccs	6, cr4, [r2], #-272	@ 0xfffffef0
 801d3dc:	74656e22 	strbtvc	r6, [r5], #-3618	@ 0xfffff1de
 801d3e0:	6b726f77 	blvs	9cb91c4 <__init_array_end+0x1c978b8>
 801d3e4:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801d3e8:	4e223a22 	vmulmi.f32	s6, s4, s5
 801d3ec:	6f777465 	svcvs	0x00777465
 801d3f0:	2c226b72 			@ <UNDEFINED> instruction: 0x2c226b72
 801d3f4:	766e6522 	strbtvc	r6, [lr], -r2, lsr #10
 801d3f8:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801d3fc:	45223a22 	strmi	r3, [r2, #-2594]!	@ 0xfffff5de
 801d400:	7269766e 	rsbvc	r7, r9, #115343360	@ 0x6e00000
 801d404:	656d6e6f 	strbvs	r6, [sp, #-3695]!	@ 0xfffff191
 801d408:	2c22746e 	cfstrscs	mvf7, [r2], #-440	@ 0xfffffe48
 801d40c:	6f637222 	svcvs	0x00637222
 801d410:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801d414:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801d418:	52223a22 	eorpl	r3, r2, #139264	@ 0x22000
 801d41c:	746f6d65 	strbtvc	r6, [pc], #-3429	@ 801d424 <_etext+0xa84>
 801d420:	6f632065 	svcvs	0x00632065
 801d424:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801d428:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801d42c:	226e6f69 	rsbcs	r6, lr, #420	@ 0x1a4
 801d430:	64007d7d 	strvs	r7, [r0], #-3453	@ 0xfffff283
 801d434:	6a2e786d 	bvs	8bbb5f0 <__init_array_end+0xb99ce4>
 801d438:	74730073 	ldrbtvc	r0, [r3], #-115	@ 0xffffff8d
 801d43c:	63697461 	cmnvs	r9, #1627389952	@ 0x61000000
 801d440:	00736a2e 	rsbseq	r6, r3, lr, lsr #20
 801d444:	6c797473 	cfldrdvs	mvd7, [r9], #-460	@ 0xfffffe34
 801d448:	632e7365 			@ <UNDEFINED> instruction: 0x632e7365
 801d44c:	69007373 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}
 801d450:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801d454:	00736a2e 	rsbseq	r6, r3, lr, lsr #20
 801d458:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801d45c:	00736a2e 	rsbseq	r6, r3, lr, lsr #20
 801d460:	61666564 	cmnvs	r6, r4, ror #10
 801d464:	2e746c75 	mrccs	12, 3, r6, cr4, cr5, {3}
 801d468:	7400736a 	strvc	r7, [r0], #-874	@ 0xfffffc96
 801d46c:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
 801d470:	6900736a 	stmdbvs	r0, {r1, r3, r5, r6, r8, r9, ip, sp, lr}
 801d474:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801d478:	6d74682e 	ldclvs	8, cr6, [r4, #-184]!	@ 0xffffff48
 801d47c:	6974006c 	ldmdbvs	r4!, {r2, r3, r5, r6}^
 801d480:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 801d484:	006c6d74 	rsbeq	r6, ip, r4, ror sp
 801d488:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801d48c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	@ 0xfffffe60
 801d490:	726f5000 	rsbvc	r5, pc, #0
 801d494:	75252074 	strvc	r2, [r5, #-116]!	@ 0xffffff8c
 801d498:	20732500 	rsbscs	r2, r3, r0, lsl #10
 801d49c:	25207325 	strcs	r7, [r0, #-805]!	@ 0xfffffcdb
 801d4a0:	73252075 			@ <UNDEFINED> instruction: 0x73252075
 801d4a4:	74746800 	ldrbtvc	r6, [r4], #-2048	@ 0xfffff800
 801d4a8:	2f3a7370 	svccs	0x003a7370
 801d4ac:	3364672f 	cmncc	r4, #12320768	@ 0xbc0000
 801d4b0:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	@ 0xffffff38
 801d4b4:	726f2e78 	rsbvc	r2, pc, #120, 28	@ 0x780
 801d4b8:	25230067 	strcs	r0, [r3, #-103]!	@ 0xffffff99
 801d4bc:	20783430 	rsbscs	r3, r8, r0, lsr r4
 801d4c0:	3430255b 	ldrtcc	r2, [r0], #-1371	@ 0xfffffaa5
 801d4c4:	25205d64 	strcs	r5, [r0, #-3428]!	@ 0xfffff29c
 801d4c8:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801d4cc:	00567641 	subseq	r7, r6, r1, asr #12
 801d4d0:	65626d45 	strbvs	r6, [r2, #-3397]!	@ 0xfffff2bb
 801d4d4:	64656464 	strbtvs	r6, [r5], #-1124	@ 0xfffffb9c
 801d4d8:	50544800 	subspl	r4, r4, r0, lsl #16
 801d4dc:	50544c00 	subspl	r4, r4, r0, lsl #24
 801d4e0:	74724100 	ldrbtvc	r4, [r2], #-256	@ 0xffffff00
 801d4e4:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
 801d4e8:	43417300 	movtmi	r7, #4864	@ 0x1300
 801d4ec:	4452004e 	ldrbmi	r0, [r2], #-78	@ 0xffffffb2
 801d4f0:	2020004d 	eorcs	r0, r0, sp, asr #32
 801d4f4:	72410020 	subvc	r0, r1, #32
 801d4f8:	654e2d74 	strbvs	r2, [lr, #-3444]	@ 0xfffff28c
 801d4fc:	75252074 	strvc	r2, [r5, #-116]!	@ 0xffffff8c
 801d500:	75255620 	strvc	r5, [r5, #-1568]!	@ 0xfffff9e0
 801d504:	0a75252e 	beq	9d669c4 <__init_array_end+0x1d450b8>
 801d508:	6f4c2000 	svcvs	0x004c2000
 801d50c:	6e20676e 	cdpvs	7, 2, cr6, cr0, cr14, {3}
 801d510:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801d514:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801d518:	20000a73 	andcs	r0, r0, r3, ror sl
 801d51c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 801d520:	000a7475 	andeq	r7, sl, r5, ror r4
 801d524:	6f502020 	svcvs	0x00502020
 801d528:	25207472 	strcs	r7, [r0, #-1138]!	@ 0xfffffb8e
 801d52c:	2075322d 	rsbscs	r3, r5, sp, lsr #4
 801d530:	75342d25 	ldrvc	r2, [r4, #-3365]!	@ 0xfffff2db
 801d534:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801d538:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 801d53c:	72657669 	rsbvc	r7, r5, #110100480	@ 0x6900000
 801d540:	20736573 	rsbscs	r6, r3, r3, ror r5
 801d544:	20657261 	rsbcs	r7, r5, r1, ror #4
 801d548:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801d54c:	20646570 	rsbcs	r6, r4, r0, ror r5
 801d550:	000a312b 	andeq	r3, sl, fp, lsr #2
 801d554:	646c6f68 	strbtvs	r6, [ip], #-3944	@ 0xfffff098
 801d558:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 801d55c:	616c7000 	cmnvs	ip, r0
 801d560:	63616279 	cmnvs	r1, #-1879048185	@ 0x90000007
 801d564:	6e69006b 	cdpvs	0, 6, cr0, cr9, cr11, {3}
 801d568:	00747570 	rsbseq	r7, r4, r0, ror r5
 801d56c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 801d570:	64007475 	strvs	r7, [r0], #-1141	@ 0xfffffb8b
 801d574:	62617369 	rsbvs	r7, r1, #-1543503871	@ 0xa4000001
 801d578:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	@ 0x6c
 801d57c:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 801d580:	73007074 	movwvc	r7, #116	@ 0x74
 801d584:	006e6361 	rsbeq	r6, lr, r1, ror #6
 801d588:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801d58c:	44007465 	strmi	r7, [r0], #-1125	@ 0xfffffb9b
 801d590:	4f20584d 	svcmi	0x0020584d
 801d594:	75707475 	ldrbvc	r7, [r0, #-1141]!	@ 0xfffffb8b
 801d598:	72410074 	subvc	r0, r1, #116	@ 0x74
 801d59c:	654e2d74 	strbvs	r2, [lr, #-3444]	@ 0xfffff28c
 801d5a0:	00342074 	eorseq	r2, r4, r4, ror r0
 801d5a4:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801d5a8:	2e314520 	cfabs64cs	mvdx4, mvdx1
 801d5ac:	56203133 			@ <UNDEFINED> instruction: 0x56203133
 801d5b0:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801d5b4:	20000a64 	andcs	r0, r0, r4, ror #20
 801d5b8:	726f5020 	rsbvc	r5, pc, #32
 801d5bc:	2d252074 	stccs	0, cr2, [r5, #-464]!	@ 0xfffffe30
 801d5c0:	25207532 	strcs	r7, [r0, #-1330]!	@ 0xffffface
 801d5c4:	2075342d 	rsbscs	r3, r5, sp, lsr #8
 801d5c8:	000a7325 	andeq	r7, sl, r5, lsr #6
 801d5cc:	6e795320 	cdpvs	3, 7, cr5, cr9, cr0, {1}
 801d5d0:	6f726863 	svcvs	0x00726863
 801d5d4:	657a696e 	ldrbvs	r6, [sl, #-2414]!	@ 0xfffff692
 801d5d8:	20736920 	rsbscs	r6, r3, r0, lsr #18
 801d5dc:	61736964 	cmnvs	r3, r4, ror #18
 801d5e0:	64656c62 	strbtvs	r6, [r5], #-3170	@ 0xfffff39e
 801d5e4:	4452000a 	ldrbmi	r0, [r2], #-10
 801d5e8:	6552204d 	ldrbvs	r2, [r2, #-77]	@ 0xffffffb3
 801d5ec:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 801d5f0:	20726564 	rsbscs	r6, r2, r4, ror #10
 801d5f4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801d5f8:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801d5fc:	6f697461 	svcvs	0x00697461
 801d600:	5020006e 	eorpl	r0, r0, lr, rrx
 801d604:	6f746f72 	svcvs	0x00746f72
 801d608:	206c6f63 	rsbcs	r6, ip, r3, ror #30
 801d60c:	73726556 	cmnvc	r2, #360710144	@ 0x15800000
 801d610:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801d614:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801d618:	20000a64 	andcs	r0, r0, r4, ror #20
 801d61c:	20584d44 	subscs	r4, r8, r4, asr #26
 801d620:	72646441 	rsbvc	r6, r4, #1090519040	@ 0x41000000
 801d624:	20737365 	rsbscs	r7, r3, r5, ror #6
 801d628:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d62c:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801d630:	20000a64 	andcs	r0, r0, r4, ror #20
 801d634:	20584d44 	subscs	r4, r8, r4, asr #26
 801d638:	746f6f46 	strbtvc	r6, [pc], #-3910	@ 801d640 <_etext+0xca0>
 801d63c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 801d640:	20202074 	eorcs	r2, r0, r4, ror r0
 801d644:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801d648:	20000a64 	andcs	r0, r0, r4, ror #20
 801d64c:	73726550 	cmnvc	r2, #80, 10	@ 0x14000000
 801d650:	6c616e6f 	stclvs	14, cr6, [r1], #-444	@ 0xfffffe44
 801d654:	20797469 	rsbscs	r7, r9, r9, ror #8
 801d658:	6f206425 	svcvs	0x00206425
 801d65c:	64252066 	strtvs	r2, [r5], #-102	@ 0xffffff9a
 801d660:	2e255b20 	vmulcs.f64	d5, d5, d16
 801d664:	0a5d732a 	beq	977a314 <__init_array_end+0x1758a08>
 801d668:	75532000 	ldrbvc	r2, [r3, #-0]
 801d66c:	65442062 	strbvs	r2, [r4, #-98]	@ 0xffffff9e
 801d670:	65636976 	strbvs	r6, [r3, #-2422]!	@ 0xfffff68a
 801d674:	20202073 	eorcs	r2, r0, r3, ror r0
 801d678:	3a202020 	bcc	8825700 <__init_array_end+0x803df4>
 801d67c:	0a642520 	beq	9926b04 <__init_array_end+0x19051f8>
 801d680:	65532000 	ldrbvs	r2, [r3, #-0]
 801d684:	726f736e 	rsbvc	r7, pc, #-1207959551	@ 0xb8000001
 801d688:	20202073 	eorcs	r2, r0, r3, ror r0
 801d68c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d690:	3a202020 	bcc	8825718 <__init_array_end+0x803e0c>
 801d694:	0a642520 	beq	9926b1c <__init_array_end+0x1905210>
 801d698:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 801d69c:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 801d6a0:	20656369 	rsbcs	r6, r5, r9, ror #6
 801d6a4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801d6a8:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801d6ac:	6f697461 	svcvs	0x00697461
 801d6b0:	4d20006e 	stcmi	0, cr0, [r0, #-440]!	@ 0xfffffe48
 801d6b4:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 801d6b8:	75746361 	ldrbvc	r6, [r4, #-865]!	@ 0xfffffc9f
 801d6bc:	20726572 	rsbscs	r6, r2, r2, ror r5
 801d6c0:	656d614e 	strbvs	r6, [sp, #-334]!	@ 0xfffffeb2
 801d6c4:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801d6c8:	0a732a2e 	beq	9ce7f88 <__init_array_end+0x1cc667c>
 801d6cc:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801d6d0:	6166756e 	cmnvs	r6, lr, ror #10
 801d6d4:	72757463 	rsbsvc	r7, r5, #1660944384	@ 0x63000000
 801d6d8:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 801d6dc:	20202044 	eorcs	r2, r0, r4, asr #32
 801d6e0:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801d6e4:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801d6e8:	000a5832 	andeq	r5, sl, r2, lsr r8
 801d6ec:	72655320 	rsbvc	r5, r5, #32, 6	@ 0x80000000
 801d6f0:	206c6169 	rsbcs	r6, ip, r9, ror #2
 801d6f4:	626d754e 	rsbvs	r7, sp, #327155712	@ 0x13800000
 801d6f8:	20207265 	eorcs	r7, r0, r5, ror #4
 801d6fc:	3a202020 	bcc	8825784 <__init_array_end+0x803e78>
 801d700:	322e2520 	eorcc	r2, lr, #32, 10	@ 0x8000000
 801d704:	322e2558 	eorcc	r2, lr, #88, 10	@ 0x16000000
 801d708:	322e2558 	eorcc	r2, lr, #88, 10	@ 0x16000000
 801d70c:	322e2558 	eorcc	r2, lr, #88, 10	@ 0x16000000
 801d710:	20000a58 	andcs	r0, r0, r8, asr sl
 801d714:	746f6f52 	strbtvc	r6, [pc], #-3922	@ 801d71c <_etext+0xd7c>
 801d718:	62616c20 	rsbvs	r6, r1, #32, 24	@ 0x2000
 801d71c:	20206c65 	eorcs	r6, r0, r5, ror #24
 801d720:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d724:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d728:	732a2e25 			@ <UNDEFINED> instruction: 0x732a2e25
 801d72c:	5020000a 	eorpl	r0, r0, sl
 801d730:	75646f72 	strbvc	r6, [r4, #-3954]!	@ 0xfffff08e
 801d734:	43207463 			@ <UNDEFINED> instruction: 0x43207463
 801d738:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 801d73c:	2079726f 	rsbscs	r7, r9, pc, ror #4
 801d740:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801d744:	2558322e 	ldrbcs	r3, [r8, #-558]	@ 0xfffffdd2
 801d748:	0a58322e 	beq	962a008 <__init_array_end+0x16086fc>
 801d74c:	72502000 	subsvc	r2, r0, #0
 801d750:	6375646f 	cmnvs	r5, #1862270976	@ 0x6f000000
 801d754:	65442074 	strbvs	r2, [r4, #-116]	@ 0xffffff8c
 801d758:	6c696174 	stfvse	f6, [r9], #-464	@ 0xfffffe30
 801d75c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d760:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801d764:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801d768:	000a5832 	andeq	r5, sl, r2, lsr r8
 801d76c:	6f70227b 	svcvs	0x0070227b
 801d770:	3a227472 	bcc	88ba940 <__init_array_end+0x899034>
 801d774:	22632522 	rsbcs	r2, r3, #142606336	@ 0x8800000
 801d778:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 801d77c:	74636572 	strbtvc	r6, [r3], #-1394	@ 0xfffffa8e
 801d780:	226e6f69 	rsbcs	r6, lr, #420	@ 0x1a4
 801d784:	7325223a 			@ <UNDEFINED> instruction: 0x7325223a
 801d788:	002c7d22 	eoreq	r7, ip, r2, lsr #26
 801d78c:	6f70227b 	svcvs	0x0070227b
 801d790:	3a227472 	bcc	88ba960 <__init_array_end+0x899054>
 801d794:	22632522 	rsbcs	r2, r3, #142606336	@ 0x8800000
 801d798:	6d64222c 	sfmvs	f2, 2, [r4, #-176]!	@ 0xffffff50
 801d79c:	7b3a2278 	blvc	8ea6184 <__init_array_end+0xe84878>
 801d7a0:	6e657322 	cdpvs	3, 6, cr7, cr5, cr2, {1}
 801d7a4:	223a2274 	eorscs	r2, sl, #116, 4	@ 0x40000007
 801d7a8:	2c227525 	cfstr32cs	mvfx7, [r2], #-148	@ 0xffffff6c
 801d7ac:	63657222 	cmnvs	r5, #536870914	@ 0x20000002
 801d7b0:	65766965 	ldrbvs	r6, [r6, #-2405]!	@ 0xfffff69b
 801d7b4:	223a2264 	eorscs	r2, sl, #100, 4	@ 0x40000006
 801d7b8:	7d227525 	cfstr32vc	mvfx7, [r2, #-148]!	@ 0xffffff6c
 801d7bc:	6472222c 	ldrbtvs	r2, [r2], #-556	@ 0xfffffdd4
 801d7c0:	7b3a226d 	blvc	8ea617c <__init_array_end+0xe84870>
 801d7c4:	6e657322 	cdpvs	3, 6, cr7, cr5, cr2, {1}
 801d7c8:	7b3a2274 	blvc	8ea61a0 <__init_array_end+0xe84894>
 801d7cc:	616c6322 	cmnvs	ip, r2, lsr #6
 801d7d0:	3a227373 	bcc	88ba5a4 <__init_array_end+0x898c98>
 801d7d4:	22752522 	rsbscs	r2, r5, #142606336	@ 0x8800000
 801d7d8:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 801d7dc:	766f6373 			@ <UNDEFINED> instruction: 0x766f6373
 801d7e0:	22797265 	rsbscs	r7, r9, #1342177286	@ 0x50000006
 801d7e4:	7525223a 	strvc	r2, [r5, #-570]!	@ 0xfffffdc6
 801d7e8:	222c7d22 	eorcs	r7, ip, #2176	@ 0x880
 801d7ec:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 801d7f0:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 801d7f4:	227b3a22 	rsbscs	r3, fp, #139264	@ 0x22000
 801d7f8:	646f6f67 	strbtvs	r6, [pc], #-3943	@ 801d800 <_etext+0xe60>
 801d7fc:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801d800:	222c2275 	eorcs	r2, ip, #1342177287	@ 0x50000007
 801d804:	22646162 	rsbcs	r6, r4, #-2147483624	@ 0x80000018
 801d808:	7525223a 	strvc	r2, [r5, #-570]!	@ 0xfffffdc6
 801d80c:	64222c22 	strtvs	r2, [r2], #-3106	@ 0xfffff3de
 801d810:	6f637369 	svcvs	0x00637369
 801d814:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 801d818:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801d81c:	7d7d2275 	lfmvc	f2, 2, [sp, #-468]!	@ 0xfffffe2c
 801d820:	2522007d 	strcs	r0, [r2, #-125]!	@ 0xffffff83
 801d824:	253a2273 	ldrcs	r2, [sl, #-627]!	@ 0xfffffd8d
 801d828:	2c662a2e 			@ <UNDEFINED> instruction: 0x2c662a2e
 801d82c:	73252300 			@ <UNDEFINED> instruction: 0x73252300
 801d830:	2a2e253d 	bcs	8ba6d2c <__init_array_end+0xb85420>
 801d834:	70000a66 	andvc	r0, r0, r6, ror #20
 801d838:	656e694c 	strbvs	r6, [lr, #-2380]!	@ 0xfffff6b4
 801d83c:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801d840:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	@ 0xfffffe48
 801d844:	00727470 	rsbseq	r7, r2, r0, ror r4
 801d848:	6c6c6163 	stfvse	f6, [ip], #-396	@ 0xfffffe74
 801d84c:	6b636162 	blvs	98f5ddc <__init_array_end+0x18d44d0>
 801d850:	636e7546 	cmnvs	lr, #293601280	@ 0x11800000
 801d854:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801d858:	63727300 	cmnvs	r2, #0, 6
 801d85c:	7261702f 	rsbvc	r7, r1, #47	@ 0x2f
 801d860:	2f736d61 	svccs	0x00736d61
 801d864:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801d868:	786d646c 	stmdavc	sp!, {r2, r3, r5, r6, sl, sp, lr}^
 801d86c:	61726170 	cmnvs	r2, r0, ror r1
 801d870:	632e736d 			@ <UNDEFINED> instruction: 0x632e736d
 801d874:	70007070 	andvc	r7, r0, r0, ror r0
 801d878:	203d2120 	eorscs	r2, sp, r0, lsr #2
 801d87c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	@ 0xfffffe48
 801d880:	00727470 	rsbseq	r7, r2, r0, ror r4
 801d884:	74617473 	strbtvc	r7, [r1], #-1139	@ 0xfffffb8d
 801d888:	61436369 	cmpvs	r3, r9, ror #6
 801d88c:	61626c6c 	cmnvs	r2, ip, ror #24
 801d890:	75466b63 	strbvc	r6, [r6, #-2915]	@ 0xfffff49d
 801d894:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801d898:	70006e6f 	andvc	r6, r0, pc, ror #28
 801d89c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 801d8a0:	21207265 			@ <UNDEFINED> instruction: 0x21207265
 801d8a4:	756e203d 	strbvc	r2, [lr, #-61]!	@ 0xffffffc3
 801d8a8:	74706c6c 	ldrbtvc	r6, [r0], #-3180	@ 0xfffff394
 801d8ac:	75420072 	strbvc	r0, [r2, #-114]	@ 0xffffff8e
 801d8b0:	65646c69 	strbvs	r6, [r4, #-3177]!	@ 0xfffff397
 801d8b4:	764f0072 			@ <UNDEFINED> instruction: 0x764f0072
 801d8b8:	72777265 	rsbsvc	r7, r7, #1342177286	@ 0x50000006
 801d8bc:	20657469 	rsbcs	r7, r5, r9, ror #8
 801d8c0:	61746164 	cmnvs	r4, r4, ror #2
 801d8c4:	65656873 	strbvs	r6, [r5, #-2163]!	@ 0xfffff78d
 801d8c8:	764f0074 			@ <UNDEFINED> instruction: 0x764f0074
 801d8cc:	72777265 	rsbsvc	r7, r7, #1342177286	@ 0x50000006
 801d8d0:	20657469 	rsbcs	r7, r5, r9, ror #8
 801d8d4:	696d6974 	stmdbvs	sp!, {r2, r4, r5, r6, r8, fp, sp, lr}^
 801d8d8:	2820676e 	stmdacs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 801d8dc:	00297375 	eoreq	r7, r9, r5, ror r3
 801d8e0:	756f7247 	strbvc	r7, [pc, #-583]!	@ 801d6a1 <_etext+0xd01>
 801d8e4:	676e6970 			@ <UNDEFINED> instruction: 0x676e6970
 801d8e8:	6f6c4300 	svcvs	0x006c4300
 801d8ec:	62206b63 	eorvs	r6, r0, #101376	@ 0x18c00
 801d8f0:	64657361 	strbtvs	r7, [r5], #-865	@ 0xfffffc9f
 801d8f4:	69686320 	stmdbvs	r8!, {r5, r8, r9, sp, lr}^
 801d8f8:	41007370 	tstmi	r0, r0, ror r3
 801d8fc:	30314150 	eorscc	r4, r1, r0, asr r1
 801d900:	4b532f32 	blmi	94e95d0 <__init_array_end+0x14c7cc4>
 801d904:	32323839 	eorscc	r3, r2, #3735552	@ 0x390000
 801d908:	73655400 	cmnvc	r5, #0, 8
 801d90c:	61702074 	cmnvs	r0, r4, ror r0
 801d910:	72657474 	rsbvc	r7, r5, #116, 8	@ 0x74000000
 801d914:	7325006e 			@ <UNDEFINED> instruction: 0x7325006e
 801d918:	25202928 	strcs	r2, [r0, #-2344]!	@ 0xfffff6d8
 801d91c:	6c202c73 	stcvs	12, cr2, [r0], #-460	@ 0xfffffe34
 801d920:	20656e69 	rsbcs	r6, r5, r9, ror #28
 801d924:	203a6925 	eorscs	r6, sl, r5, lsr #18
 801d928:	7a69536e 	bvc	9a726e8 <__init_array_end+0x1a50ddc>
 801d92c:	64253d65 	strtvs	r3, [r5], #-3429	@ 0xfffff29b
 801d930:	2f2e000a 	svccs	0x002e000a
 801d934:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801d938:	2f656475 	svccs	0x00656475
 801d93c:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801d940:	786d646c 	stmdavc	sp!, {r2, r3, r5, r6, sl, sp, lr}^
 801d944:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801d948:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 801d94c:	6f697461 	svcvs	0x00697461
 801d950:	00682e6e 	rsbeq	r2, r8, lr, ror #28
 801d954:	706d7544 	rsbvc	r7, sp, r4, asr #10
 801d958:	3a732500 	bcc	9ce6d60 <__init_array_end+0x1cc5454>
 801d95c:	2073253a 	rsbscs	r2, r3, sl, lsr r5
 801d960:	27732527 	ldrbcs	r2, [r3, -r7, lsr #10]!
 801d964:	20000a3a 	andcs	r0, r0, sl, lsr sl
 801d968:	253d7325 	ldrcs	r7, [sp, #-805]!	@ 0xfffffcdb
 801d96c:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801d970:	000a5d64 	andeq	r5, sl, r4, ror #26
 801d974:	3d732520 	cfldr64cc	mvdx2, [r3, #-128]!	@ 0xffffff80
 801d978:	5b206425 	blpl	8836a14 <__init_array_end+0x815108>
 801d97c:	0a5d7325 	beq	977a618 <__init_array_end+0x1758d0c>
 801d980:	73252000 			@ <UNDEFINED> instruction: 0x73252000
 801d984:	322e253d 	eorcc	r2, lr, #255852544	@ 0xf400000
 801d988:	305b2066 	subscc	r2, fp, r6, rrx
 801d98c:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	@ 0xfffffe20
 801d990:	2520000a 	strcs	r0, [r0, #-10]!
 801d994:	64253d73 	strtvs	r3, [r5], #-3443	@ 0xfffff28d
 801d998:	2520000a 	strcs	r0, [r0, #-10]!
 801d99c:	75253d73 	strvc	r3, [r5, #-3443]!	@ 0xfffff28d
 801d9a0:	6f4c000a 	svcvs	0x004c000a
 801d9a4:	2e006461 	cdpcs	4, 0, cr6, cr0, cr1, {3}
 801d9a8:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
 801d9ac:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
 801d9b0:	7869702f 	stmdavc	r9!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 801d9b4:	6f636c65 	svcvs	0x00636c65
 801d9b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801d9bc:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801d9c0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801d9c4:	227b0068 	rsbscs	r0, fp, #104	@ 0x68
 801d9c8:	72666572 	rsbvc	r6, r6, #478150656	@ 0x1c800000
 801d9cc:	5f687365 	svcpl	0x00687365
 801d9d0:	65746172 	ldrbvs	r6, [r4, #-370]!	@ 0xfffffe8e
 801d9d4:	25223a22 	strcs	r3, [r2, #-2594]!	@ 0xfffff5de
 801d9d8:	007d2275 	rsbseq	r2, sp, r5, ror r2
 801d9dc:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801d9e0:	006e776f 	rsbeq	r7, lr, pc, ror #14
 801d9e4:	72745370 	rsbsvc	r5, r4, #112, 6	@ 0xc0000001
 801d9e8:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801d9ec:	6e203d21 	cdpvs	13, 2, cr3, cr0, cr1, {1}
 801d9f0:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801d9f4:	70007274 	andvc	r7, r0, r4, ror r2
 801d9f8:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801d9fc:	7465675f 	strbtvc	r6, [r5], #-1887	@ 0xfffff8a1
 801da00:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 801da04:	72730065 	rsbsvc	r0, r3, #101	@ 0x65
 801da08:	69702f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 801da0c:	746c6578 	strbtvc	r6, [ip], #-1400	@ 0xfffffa88
 801da10:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
 801da14:	00707063 	rsbseq	r7, r0, r3, rrx
 801da18:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801da1c:	65675f6c 	strbvs	r5, [r7, #-3948]!	@ 0xfffff094
 801da20:	616d5f74 	smcvs	54772	@ 0xd5f4
 801da24:	6e550070 	mrcvs	0, 2, r0, cr5, cr0, {3}
 801da28:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801da2c:	0064656e 	rsbeq	r6, r4, lr, ror #10
 801da30:	7974227b 	ldmdbvc	r4!, {r0, r1, r3, r4, r5, r6, r9, sp}^
 801da34:	22736570 	rsbscs	r6, r3, #112, 10	@ 0x1c000000
 801da38:	6e005b3a 	vmovvs.16	d0[0], r5
 801da3c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801da40:	3c206874 	stccc	8, cr6, [r0], #-464	@ 0xfffffe30
 801da44:	4f6e203d 	svcmi	0x006e203d
 801da48:	75427475 	strbvc	r7, [r2, #-1141]	@ 0xfffffb8b
 801da4c:	72656666 	rsbvc	r6, r5, #106954752	@ 0x6600000
 801da50:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801da54:	6f736a00 	svcvs	0x00736a00
 801da58:	65675f6e 	strbvs	r5, [r7, #-3950]!	@ 0xfffff092
 801da5c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801da60:	00736570 	rsbseq	r6, r3, r0, ror r5
 801da64:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801da68:	7461506c 	strbtvc	r5, [r1], #-108	@ 0xffffff94
 801da6c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 801da70:	72730073 	rsbsvc	r0, r3, #115	@ 0x73
 801da74:	61702f63 	cmnvs	r0, r3, ror #30
 801da78:	72657474 	rsbvc	r7, r5, #116, 8	@ 0x74000000
 801da7c:	702f736e 	eorvc	r7, pc, lr, ror #6
 801da80:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801da84:	74746170 	ldrbtvc	r6, [r4], #-368	@ 0xfffffe90
 801da88:	736e7265 	cmnvc	lr, #1342177286	@ 0x50000006
 801da8c:	7070632e 	rsbsvc	r6, r0, lr, lsr #6
 801da90:	28732500 	ldmdacs	r3!, {r8, sl, sp}^
 801da94:	73252029 			@ <UNDEFINED> instruction: 0x73252029
 801da98:	696c202c 	stmdbvs	ip!, {r2, r3, r5, sp}^
 801da9c:	2520656e 	strcs	r6, [r0, #-1390]!	@ 0xfffffa92
 801daa0:	6e203a69 	vnmulvs.f32	s6, s0, s19
 801daa4:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 801daa8:	6f506576 	svcvs	0x00506576
 801daac:	3d737472 	cfldrdcc	mvd7, [r3, #-456]!	@ 0xfffffe38
 801dab0:	000a7525 	andeq	r7, sl, r5, lsr #10
 801dab4:	4f705f73 	svcmi	0x00705f73
 801dab8:	75707475 	ldrbvc	r7, [r0, #-1141]!	@ 0xfffffb8b
 801dabc:	3d212074 	stccc	0, cr2, [r1, #-464]!	@ 0xfffffe30
 801dac0:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801dac4:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801dac8:	2a2e2500 	bcs	8ba6ed0 <__init_array_end+0xb855c4>
 801dacc:	6d002e73 	stcvs	14, cr2, [r0, #-460]	@ 0xfffffe34
 801dad0:	0a534e44 	beq	94f13e8 <__init_array_end+0x14cfadc>
 801dad4:	64252000 	strtvs	r2, [r5], #-0
 801dad8:	2a2e2520 	bcs	8ba6f60 <__init_array_end+0xb85654>
 801dadc:	69000a73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r9, fp}
 801dae0:	25203a70 	strcs	r3, [r0, #-2672]!	@ 0xfffff590
 801dae4:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801dae8:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801daec:	2d206425 	cfstrscs	mvf6, [r0, #-148]!	@ 0xffffff6c
 801daf0:	6425203e 	strtvs	r2, [r5], #-62	@ 0xffffffc2
 801daf4:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801daf8:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801dafc:	6e000a64 	vmlsvs.f32	s0, s0, s9
 801db00:	616d7465 	cmnvs	sp, r5, ror #8
 801db04:	203a6b73 	eorscs	r6, sl, r3, ror fp
 801db08:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801db0c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801db10:	2064252e 	rsbcs	r2, r4, lr, lsr #10
 801db14:	25203e2d 	strcs	r3, [r0, #-3629]!	@ 0xfffff1d3
 801db18:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801db1c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801db20:	000a6425 	andeq	r6, sl, r5, lsr #8
 801db24:	203a7767 	eorscs	r7, sl, r7, ror #14
 801db28:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801db2c:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801db30:	2064252e 	rsbcs	r2, r4, lr, lsr #10
 801db34:	25203e2d 	strcs	r3, [r0, #-3629]!	@ 0xfffff1d3
 801db38:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801db3c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801db40:	000a6425 	andeq	r6, sl, r5, lsr #8
 801db44:	30687465 	rsbcc	r7, r8, r5, ror #8
 801db48:	322e2500 	eorcc	r2, lr, #0, 10
 801db4c:	2e253a78 			@ <UNDEFINED> instruction: 0x2e253a78
 801db50:	253a7832 	ldrcs	r7, [sl, #-2098]!	@ 0xfffff7ce
 801db54:	3a78322e 	bcc	9e2a414 <__init_array_end+0x1e08b08>
 801db58:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801db5c:	322e253a 	eorcc	r2, lr, #243269632	@ 0xe800000
 801db60:	2e253a78 			@ <UNDEFINED> instruction: 0x2e253a78
 801db64:	000a7832 	andeq	r7, sl, r2, lsr r8
 801db68:	61676967 	cmnvs	r7, r7, ror #18
 801db6c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801db70:	005f6563 	subseq	r6, pc, r3, ror #10
 801db74:	74666f53 	strbtvc	r6, [r6], #-3923	@ 0xfffff0ad
 801db78:	65726177 	ldrbvs	r6, [r2, #-375]!	@ 0xfffffe89
 801db7c:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801db80:	64644172 	strbtvs	r4, [r4], #-370	@ 0xfffffe8e
 801db84:	6573000a 	ldrbvs	r0, [r3, #-10]!
 801db88:	646e6f63 	strbtvs	r6, [lr], #-3939	@ 0xfffff09d
 801db8c:	5f797261 	svcpl	0x00797261
 801db90:	53007069 	movwpl	r7, #105	@ 0x69
 801db94:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 801db98:	50492063 	subpl	r2, r9, r3, rrx
 801db9c:	50544e00 	subspl	r4, r4, r0, lsl #28
 801dba0:	72655320 	rsbvc	r5, r5, #32, 6	@ 0x80000000
 801dba4:	00726576 	rsbseq	r6, r2, r6, ror r5
 801dba8:	33385044 	teqcc	r8, #68	@ 0x44
 801dbac:	00383438 	eorseq	r3, r8, r8, lsr r4
 801dbb0:	3a74656e 	bcc	9d37170 <__init_array_end+0x1d15864>
 801dbb4:	7968703a 	stmdbvc	r8!, {r1, r3, r4, r5, ip, sp, lr}^
 801dbb8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 801dbbc:	28676966 	stmdacs	r7!, {r1, r2, r5, r6, r8, fp, sp, lr}^
 801dbc0:	5f594850 	svcpl	0x00594850
 801dbc4:	52444441 	subpl	r4, r4, #1090519040	@ 0x41000000
 801dbc8:	29535345 	ldmdbcs	r3, {r0, r2, r6, r8, r9, ip, lr}^
 801dbcc:	00705500 	rsbseq	r5, r0, r0, lsl #10
 801dbd0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 801dbd4:	4c414800 	mcrrmi	8, 0, r4, r1, cr0
 801dbd8:	55460046 	strbpl	r0, [r6, #-70]	@ 0xffffffba
 801dbdc:	4c004c4c 	stcmi	12, cr4, [r0], {76}	@ 0x4c
 801dbe0:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 801dbe4:	202c7325 	eorcs	r7, ip, r5, lsr #6
 801dbe8:	202c6425 	eorcs	r6, ip, r5, lsr #8
 801dbec:	000a7325 	andeq	r7, sl, r5, lsr #6
 801dbf0:	74696157 	strbtvc	r6, [r9], #-343	@ 0xfffffea9
 801dbf4:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801dbf8:	20726f66 	rsbscs	r6, r2, r6, ror #30
 801dbfc:	20594850 	subscs	r4, r9, r0, asr r8
 801dc00:	6f747561 	svcvs	0x00747561
 801dc04:	67656e20 	strbvs	r6, [r5, -r0, lsr #28]!
 801dc08:	6169746f 	cmnvs	r9, pc, ror #8
 801dc0c:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801dc10:	206f7420 	rsbcs	r7, pc, r0, lsr #8
 801dc14:	706d6f63 	rsbvc	r6, sp, r3, ror #30
 801dc18:	6574656c 	ldrbvs	r6, [r4, #-1388]!	@ 0xfffffa94
 801dc1c:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 801dc20:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801dc24:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801dc28:	2064252f 	rsbcs	r2, r4, pc, lsr #10
 801dc2c:	46006325 	strmi	r6, [r0], -r5, lsr #6
 801dc30:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 801dc34:	20657261 	rsbcs	r7, r5, r1, ror #4
 801dc38:	2a2e2556 	bcs	8ba7198 <__init_array_end+0xb8588c>
 801dc3c:	3a470073 	bcc	91dde10 <__init_array_end+0x11bc504>
 801dc40:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801dc44:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801dc48:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801dc4c:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 801dc50:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801dc54:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801dc58:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 801dc5c:	25206325 	strcs	r6, [r0, #-805]!	@ 0xfffffcdb
 801dc60:	73252064 			@ <UNDEFINED> instruction: 0x73252064
 801dc64:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801dc68:	49007325 	stmdbmi	r0, {r0, r2, r5, r8, r9, ip, sp, lr}
 801dc6c:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 801dc70:	3a504100 	bcc	942e078 <__init_array_end+0x140c76c>
 801dc74:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801dc78:	44206f4e 	strtmi	r6, [r0], #-3918	@ 0xfffff0b2
 801dc7c:	4400584d 	strmi	r5, [r0], #-2125	@ 0xfffff7b3
 801dc80:	2520584d 	strcs	r5, [r0, #-2125]!	@ 0xfffff7b3
 801dc84:	64252073 	strtvs	r2, [r5], #-115	@ 0xffffff8d
 801dc88:	68744500 	ldmdavs	r4!, {r8, sl, lr}^
 801dc8c:	656e7265 	strbvs	r7, [lr, #-613]!	@ 0xfffffd9b
 801dc90:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 801dc94:	45007469 	strmi	r7, [r0, #-1129]	@ 0xfffffb97
 801dc98:	72656874 	rsbvc	r6, r5, #116, 16	@ 0x740000
 801dc9c:	2074656e 	rsbscs	r6, r4, lr, ror #10
 801dca0:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 801dca4:	50550074 	subspl	r0, r5, r4, ror r0
 801dca8:	574f4400 	strbpl	r4, [pc, -r0, lsl #8]
 801dcac:	7445004e 	strbvc	r0, [r5], #-78	@ 0xffffffb2
 801dcb0:	6e726568 	cdpvs	5, 7, cr6, cr2, cr8, {3}
 801dcb4:	4c207465 	cfstrsmi	mvf7, [r0], #-404	@ 0xfffffe6c
 801dcb8:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 801dcbc:	53007325 	movwpl	r7, #805	@ 0x325
 801dcc0:	65726f74 	ldrbvs	r6, [r2, #-3956]!	@ 0xfffff08c
 801dcc4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801dcc8:	203a6563 	eorscs	r6, sl, r3, ror #10
 801dccc:	41525342 	cmpmi	r2, r2, asr #6
 801dcd0:	6977204d 	ldmdbvs	r7!, {r0, r2, r3, r6, sp}^
 801dcd4:	74206874 	strtvc	r6, [r0], #-2164	@ 0xfffff78c
 801dcd8:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	@ 0xfffffe44
 801dcdc:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801dce0:	65747962 	ldrbvs	r7, [r4, #-2402]!	@ 0xfffff69e
 801dce4:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801dce8:	426b2064 	rsbmi	r2, fp, #100	@ 0x64
 801dcec:	22000a5d 	andcs	r0, r0, #380928	@ 0x5d000
 801dcf0:	3a227325 	bcc	88ba98c <__init_array_end+0x899080>
 801dcf4:	2e642522 	cdpcs	5, 6, cr2, cr4, cr2, {1}
 801dcf8:	252e6425 	strcs	r6, [lr, #-1061]!	@ 0xfffffbdb
 801dcfc:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801dd00:	23002c22 	movwcs	r2, #3106	@ 0xc22
 801dd04:	253d7325 	ldrcs	r7, [sp, #-805]!	@ 0xfffffcdb
 801dd08:	64252e64 	strtvs	r2, [r5], #-3684	@ 0xfffff19c
 801dd0c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801dd10:	000a6425 	andeq	r6, sl, r5, lsr #8
 801dd14:	2522002b 	strcs	r0, [r2, #-43]!	@ 0xffffffd5
 801dd18:	223a2273 	eorscs	r2, sl, #805306375	@ 0x30000007
 801dd1c:	2e257325 	cdpcs	3, 2, cr7, cr5, cr5, {1}
 801dd20:	253a6432 	ldrcs	r6, [sl, #-1074]!	@ 0xfffffbce
 801dd24:	2275322e 	rsbscs	r3, r5, #-536870910	@ 0xe0000002
 801dd28:	7325002c 			@ <UNDEFINED> instruction: 0x7325002c
 801dd2c:	2573253d 	ldrbcs	r2, [r3, #-1341]!	@ 0xfffffac3
 801dd30:	3a64322e 	bcc	992a5f0 <__init_array_end+0x1908ce4>
 801dd34:	75322e25 	ldrvc	r2, [r2, #-3621]!	@ 0xfffff1db
 801dd38:	25202300 	strcs	r2, [r0, #-768]!	@ 0xfffffd00
 801dd3c:	0a232073 	beq	88e5f10 <__init_array_end+0x8c4604>
 801dd40:	206f4e00 	rsbcs	r4, pc, r0, lsl #28
 801dd44:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801dd48:	2079616c 	rsbscs	r6, r9, ip, ror #2
 801dd4c:	6e756f66 	cdpvs	15, 7, cr6, cr5, cr6, {3}
 801dd50:	48530064 	ldmdami	r3, {r2, r5, r6}^
 801dd54:	36303131 			@ <UNDEFINED> instruction: 0x36303131
 801dd58:	44535300 	ldrbmi	r5, [r3], #-768	@ 0xfffffd00
 801dd5c:	36303331 			@ <UNDEFINED> instruction: 0x36303331
 801dd60:	20732500 	rsbscs	r2, r3, r0, lsl #10
 801dd64:	2c752528 	cfldr64cs	mvdx2, [r5], #-160	@ 0xffffff60
 801dd68:	0a297525 	beq	8a7b204 <__init_array_end+0xa598f8>
 801dd6c:	eeaa4000 	cdp	0, 10, cr4, cr10, cr0, {0}
 801dd70:	5b00eeaa 	blpl	8059820 <__init_array_end+0x37f14>
 801dd74:	2a2e2556 	bcs	8ba72d4 <__init_array_end+0xb859c8>
 801dd78:	25205d73 	strcs	r5, [r0, #-3443]!	@ 0xfffff28d
 801dd7c:	6f432073 	svcvs	0x00432073
 801dd80:	6c69706d 	stclvs	0, cr7, [r9], #-436	@ 0xfffffe4c
 801dd84:	6f206465 	svcvs	0x00206465
 801dd88:	2e25206e 	cdpcs	0, 2, cr2, cr5, cr14, {3}
 801dd8c:	6120732a 			@ <UNDEFINED> instruction: 0x6120732a
 801dd90:	2e252074 	mcrcs	0, 1, r2, cr5, cr4, {3}
 801dd94:	7b00732a 	blvc	803aa44 <__init_array_end+0x19138>
 801dd98:	74616422 	strbtvc	r6, [r1], #-1058	@ 0xfffffbde
 801dd9c:	223a2265 	eorscs	r2, sl, #1342177286	@ 0x50000006
 801dda0:	252d6425 	strcs	r6, [sp, #-1061]!	@ 0xfffffbdb
 801dda4:	2d64322e 	sfmcs	f3, 2, [r4, #-184]!	@ 0xffffff48
 801dda8:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801ddac:	322e2554 	eorcc	r2, lr, #84, 10	@ 0x15000000
 801ddb0:	2e253a64 	vnmulcs.f32	s6, s10, s9
 801ddb4:	253a6432 	ldrcs	r6, [sl, #-1074]!	@ 0xfffffbce
 801ddb8:	5a64322e 	bpl	992a678 <__init_array_end+0x1908d6c>
 801ddbc:	000a7d22 	andeq	r7, sl, r2, lsr #26
 801ddc0:	6164227b 	smcvs	16939	@ 0x422b
 801ddc4:	3a226574 	bcc	88b739c <__init_array_end+0x895a90>
 801ddc8:	2d642522 	cfstr64cs	mvdx2, [r4, #-136]!	@ 0xffffff78
 801ddcc:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801ddd0:	322e252d 	eorcc	r2, lr, #188743680	@ 0xb400000
 801ddd4:	2e255464 	cdpcs	4, 2, cr5, cr5, cr4, {3}
 801ddd8:	253a6432 	ldrcs	r6, [sl, #-1074]!	@ 0xfffffbce
 801dddc:	3a64322e 	bcc	992a69c <__init_array_end+0x1908d90>
 801dde0:	64322e25 	ldrtvs	r2, [r2], #-3621	@ 0xfffff1db
 801dde4:	2e257325 	cdpcs	3, 2, cr7, cr5, cr5, {1}
 801dde8:	253a6432 	ldrcs	r6, [sl, #-1074]!	@ 0xfffffbce
 801ddec:	2275322e 	rsbscs	r3, r5, #-536870910	@ 0xe0000002
 801ddf0:	1b000a7d 	blne	80207ec <dmx_js+0x299>
 801ddf4:	6d31335b 	ldcvs	3, cr3, [r1, #-364]!	@ 0xfffffe94
 801ddf8:	335b1b00 	cmpcc	fp, #0, 22
 801ddfc:	1b006d37 	blne	80392e0 <__init_array_end+0x179d4>
 801de00:	6d30335b 	ldcvs	3, cr3, [r0, #-364]!	@ 0xfffffe94
 801de04:	335b1b00 	cmpcc	fp, #0, 22
 801de08:	1b006d32 	blne	80392d8 <__init_array_end+0x179cc>
 801de0c:	6d33335b 	ldcvs	3, cr3, [r3, #-364]!	@ 0xfffffe94
 801de10:	335b1b00 	cmpcc	fp, #0, 22
 801de14:	1b006d39 	blne	8039300 <__init_array_end+0x179f4>
 801de18:	6d30345b 	cfldrsvs	mvf3, [r0, #-364]!	@ 0xfffffe94
 801de1c:	345b1b00 	ldrbcc	r1, [fp], #-2816	@ 0xfffff500
 801de20:	1b006d31 	blne	80392ec <__init_array_end+0x179e0>
 801de24:	6d37345b 	cfldrsvs	mvf3, [r7, #-364]!	@ 0xfffffe94
 801de28:	345b1b00 	ldrbcc	r1, [fp], #-2816	@ 0xfffff500
 801de2c:	1b006d39 	blne	8039318 <__init_array_end+0x17a0c>
 801de30:	6d34335b 	ldcvs	3, cr3, [r4, #-364]!	@ 0xfffffe94
 801de34:	61745300 	cmnvs	r4, r0, lsl #6
 801de38:	203a6b63 	eorscs	r6, sl, r3, ror #22
 801de3c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801de40:	4b752520 	blmi	9d672c8 <__init_array_end+0x1d459bc>
 801de44:	55202c42 	strpl	r2, [r0, #-3138]!	@ 0xfffff3be
 801de48:	3a646573 	bcc	993741c <__init_array_end+0x1915b10>
 801de4c:	2c752520 	cfldr64cs	mvdx2, [r5], #-128	@ 0xffffff80
 801de50:	65724620 	ldrbvs	r4, [r2, #-1568]!	@ 0xfffff9e0
 801de54:	25203a65 	strcs	r3, [r0, #-2661]!	@ 0xfffff59b
 801de58:	5b1b0075 	blpl	86de034 <__init_array_end+0x6bc728>
 801de5c:	0a6d3933 	beq	9b6c330 <__init_array_end+0x1b4aa24>
 801de60:	38302500 	ldmdacc	r0!, {r8, sl, sp}
 801de64:	30252d78 	eorcc	r2, r5, r8, ror sp
 801de68:	252d7834 	strcs	r7, [sp, #-2100]!	@ 0xfffff7cc
 801de6c:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	@ 0xffffff40
 801de70:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801de74:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801de78:	3230252d 	eorscc	r2, r0, #188743680	@ 0xb400000
 801de7c:	32302578 	eorscc	r2, r0, #120, 10	@ 0x1e000000
 801de80:	32302578 	eorscc	r2, r0, #120, 10	@ 0x1e000000
 801de84:	32302578 	eorscc	r2, r0, #120, 10	@ 0x1e000000
 801de88:	32302578 	eorscc	r2, r0, #120, 10	@ 0x1e000000
 801de8c:	32302578 	eorscc	r2, r0, #120, 10	@ 0x1e000000
 801de90:	202c0078 	eorcs	r0, ip, r8, ror r0
 801de94:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801de98:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801de9c:	6100203a 	tstvs	r0, sl, lsr r0
 801dea0:	72657373 	rsbvc	r7, r5, #-872415231	@ 0xcc000001
 801dea4:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801dea8:	73252220 			@ <UNDEFINED> instruction: 0x73252220
 801deac:	61662022 	cmnvs	r6, r2, lsr #32
 801deb0:	64656c69 	strbtvs	r6, [r5], #-3177	@ 0xfffff397
 801deb4:	6966203a 	stmdbvs	r6!, {r1, r3, r4, r5, sp}^
 801deb8:	2220656c 	eorcs	r6, r0, #108, 10	@ 0x1b000000
 801debc:	2c227325 	stccs	3, cr7, [r2], #-148	@ 0xffffff6c
 801dec0:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801dec4:	64252065 	strtvs	r2, [r5], #-101	@ 0xffffff9b
 801dec8:	73257325 			@ <UNDEFINED> instruction: 0x73257325
 801decc:	656e000a 	strbvs	r0, [lr, #-10]!
 801ded0:	3e207478 	mcrcc	4, 1, r7, cr0, cr8, {3}
 801ded4:	6f6c6220 	svcvs	0x006c6220
 801ded8:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3	@ <UNPREDICTABLE>
 801dedc:	74696d69 	strbtvc	r6, [r9], #-3433	@ 0xfffff297
 801dee0:	 	svcmi	0x004f000a

0801dee2 <CSWTCH.158>:
 801dee2:	444e4f4f 	strbmi	r4, [lr], #-3919	@ 0xfffff0b1
 801dee6:	 	andeq	r5, r0, r6, asr #4

0801dee8 <vtable for ArtNetTriggerHandler>:
	...
 801def0:	0800952b 	stmdaeq	r0, {r0, r1, r3, r5, r8, sl, ip, pc}
 801def4:	08009709 	stmdaeq	r0, {r0, r3, r8, r9, sl, ip, pc}
 801def8:	08009d4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, fp, ip, pc}

0801defc <vtable for LightSetWith4<64ul>>:
	...
 801df04:	08009547 	stmdaeq	r0, {r0, r1, r2, r6, r8, sl, ip, pc}
 801df08:	080096fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, ip, pc}
 801df0c:	08009567 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, sl, ip, pc}
 801df10:	08009589 	stmdaeq	r0, {r0, r3, r7, r8, sl, ip, pc}
 801df14:	080095ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, sl, ip, pc}
 801df18:	080095eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8, sl, ip, pc}
 801df1c:	0800960d 	stmdaeq	r0, {r0, r2, r3, r9, sl, ip, pc}
 801df20:	0800950d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip, pc}
 801df24:	0800962b 	stmdaeq	r0, {r0, r1, r3, r5, r9, sl, ip, pc}
 801df28:	08009511 	stmdaeq	r0, {r0, r4, r8, sl, ip, pc}
 801df2c:	08009549 	stmdaeq	r0, {r0, r3, r6, r8, sl, ip, pc}
 801df30:	0800964d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, pc}
 801df34:	08009651 	stmdaeq	r0, {r0, r4, r6, r9, sl, ip, pc}
 801df38:	08009657 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, sl, ip, pc}
 801df3c:	0800965b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, sl, ip, pc}

0801df40 <vtable for DmxSend>:
	...
 801df48:	08009545 	stmdaeq	r0, {r0, r2, r6, r8, sl, ip, pc}
 801df4c:	080096ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, ip, pc}
 801df50:	0800987d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, ip, pc}
 801df54:	080097e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, ip, pc}
 801df58:	08009779 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, ip, pc}
 801df5c:	08009679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, ip, pc}
 801df60:	08009905 	stmdaeq	r0, {r0, r2, r8, fp, ip, pc}
 801df64:	0800952d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, ip, pc}
 801df68:	08009661 	stmdaeq	r0, {r0, r5, r6, r9, sl, ip, pc}
 801df6c:	0800966d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, ip, pc}
 801df70:	08009719 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, ip, pc}
 801df74:	08009513 	stmdaeq	r0, {r0, r1, r4, r8, sl, ip, pc}
 801df78:	08009517 	stmdaeq	r0, {r0, r1, r2, r4, r8, sl, ip, pc}
 801df7c:	0800951b 	stmdaeq	r0, {r0, r1, r3, r4, r8, sl, ip, pc}
 801df80:	08009521 	stmdaeq	r0, {r0, r5, r8, sl, ip, pc}

0801df84 <vtable for RDMNetDevice>:
	...
 801df8c:	08009fc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, sl, fp, ip, pc}
 801df90:	0800a051 	stmdaeq	r0, {r0, r4, r6, sp, pc}
 801df94:	0800f099 	stmdaeq	r0, {r0, r3, r4, r7, ip, sp, lr, pc}
 801df98:	0800f09b 	stmdaeq	r0, {r0, r1, r3, r4, r7, ip, sp, lr, pc}

0801df9c <SOFTWARE_VERSION>:
 801df9c:	00302e31 	eorseq	r2, r0, r1, lsr lr

0801dfa0 <SOFTWARE_VERSION>:
 801dfa0:	00302e31 	eorseq	r2, r0, r1, lsr lr

0801dfa4 <s_Output>:
 801dfa4:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 801dfb0:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801dfbc:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 801dfc0:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801dfc4:	00000000 	andeq	r0, r0, r0
 801dfc8:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801dfcc:	0000006c 	andeq	r0, r0, ip, rrx
 801dfd0:	00000000 	andeq	r0, r0, r0
 801dfd4:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801dfd8:	65646f43 	strbvs	r6, [r4, #-3907]!	@ 0xfffff0bd
 801dfdc:	00000000 	andeq	r0, r0, r0
 801dfe0:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801dfec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801dff0:	00006769 	andeq	r6, r0, r9, ror #14
 801dff4:	00000000 	andeq	r0, r0, r0
 801dff8:	70657453 	rsbvc	r7, r5, r3, asr r4
 801dffc:	00726570 	rsbseq	r6, r2, r0, ror r5
 801e000:	00000000 	andeq	r0, r0, r0
 801e004:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801e008:	00007265 	andeq	r7, r0, r5, ror #4
 801e00c:	00000000 	andeq	r0, r0, r0
 801e010:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801e014:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801e018:	00000000 	andeq	r0, r0, r0
 801e01c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801e020:	00006c61 	andeq	r6, r0, r1, ror #24
 801e024:	00000000 	andeq	r0, r0, r0
 801e028:	20424752 	subcs	r4, r2, r2, asr r7
 801e02c:	656e6150 	strbvs	r6, [lr, #-336]!	@ 0xfffffeb0
 801e030:	0000006c 	andeq	r0, r0, ip, rrx
 801e034:	004d5750 	subeq	r5, sp, r0, asr r7
	...

0801e040 <s_Node>:
 801e040:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 801e044:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801e050:	41730000 	cmnmi	r3, r0
 801e054:	45204e43 	strmi	r4, [r0, #-3651]!	@ 0xfffff1bd
 801e058:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801e064:	2043534f 	subcs	r5, r3, pc, asr #6
 801e068:	76726553 			@ <UNDEFINED> instruction: 0x76726553
 801e06c:	00007265 	andeq	r7, r0, r5, ror #4
 801e070:	00000000 	andeq	r0, r0, r0
 801e074:	544c0000 	strbpl	r0, [ip], #-0
 801e078:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801e088:	2043534f 	subcs	r5, r3, pc, asr #6
 801e08c:	65696c43 	strbvs	r6, [r9, #-3139]!	@ 0xfffff3bd
 801e090:	0000746e 	andeq	r7, r0, lr, ror #8
 801e094:	00000000 	andeq	r0, r0, r0
 801e098:	44520000 	ldrbmi	r0, [r2], #-0
 801e09c:	74654e4d 	strbtvc	r4, [r5], #-3661	@ 0xfffff1b3
 801e0a0:	524c4c20 	subpl	r4, ip, #32, 24	@ 0x2000
 801e0a4:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801e0a8:	0000796c 	andeq	r7, r0, ip, ror #18
 801e0ac:	776f6853 			@ <UNDEFINED> instruction: 0x776f6853
 801e0b0:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
	...
 801e0bc:	494d0000 	stmdbmi	sp, {}^	@ <UNPREDICTABLE>
 801e0c0:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801e0d0:	00504444 	subseq	r4, r0, r4, asr #8
	...
 801e0e0:	69500000 	ldmdbvs	r0, {}^	@ <UNPREDICTABLE>
 801e0e4:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801e0e8:	65687375 	strbvs	r7, [r8, #-885]!	@ 0xfffffc8b
 801e0ec:	00000072 	andeq	r0, r0, r2, ror r0
 801e0f0:	00000000 	andeq	r0, r0, r0
 801e0f4:	65646f4e 	strbvs	r6, [r4, #-3918]!	@ 0xfffff0b2
	...
 801e104:	6f420000 	svcvs	0x00420000
 801e108:	6f6c746f 	svcvs	0x006c746f
 801e10c:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801e110:	54465420 	strbpl	r5, [r6], #-1056	@ 0xfffffbe0
 801e114:	00000050 	andeq	r0, r0, r0, asr r0
 801e118:	204d4452 	subcs	r4, sp, r2, asr r4
 801e11c:	70736552 	rsbsvc	r6, r3, r2, asr r5
 801e120:	65646e6f 	strbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801e124:	00000072 	andeq	r0, r0, r2, ror r0
 801e128:	00000000 	andeq	r0, r0, r0

0801e12c <RemoteConfig::s_SET>:
 801e12c:	0800ab39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, fp, sp, pc}
 801e130:	00000000 	andeq	r0, r0, r0
 801e134:	0801d1be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, ip, lr, pc}
 801e138:	00010005 	andeq	r0, r1, r5
 801e13c:	0800ab11 	stmdaeq	r0, {r0, r4, r8, r9, fp, sp, pc}
 801e140:	00000000 	andeq	r0, r0, r0
 801e144:	0801d1c4 	stmdaeq	r1, {r2, r6, r7, r8, ip, lr, pc}
 801e148:	00010008 	andeq	r0, r1, r8

0801e14c <RemoteConfig::s_GET>:
 801e14c:	0800b3a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, sp, pc}
 801e150:	00000000 	andeq	r0, r0, r0
 801e154:	0801d1d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, ip, lr, pc}
 801e158:	00000008 	andeq	r0, r0, r8
 801e15c:	0800aa61 	stmdaeq	r0, {r0, r5, r6, r9, fp, sp, pc}
 801e160:	00000000 	andeq	r0, r0, r0
 801e164:	0801d1df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, ip, lr, pc}
 801e168:	00000005 	andeq	r0, r0, r5
 801e16c:	0800a9dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, sp, pc}
 801e170:	00000000 	andeq	r0, r0, r0
 801e174:	0801d1e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, ip, lr, pc}
 801e178:	00000008 	andeq	r0, r0, r8
 801e17c:	0800a951 	stmdaeq	r0, {r0, r4, r6, r8, fp, sp, pc}
 801e180:	00000000 	andeq	r0, r0, r0
 801e184:	0801d1c4 	stmdaeq	r1, {r2, r6, r7, r8, ip, lr, pc}
 801e188:	00000008 	andeq	r0, r0, r8
 801e18c:	0800a99d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, fp, sp, pc}
 801e190:	00000000 	andeq	r0, r0, r0
 801e194:	0801d1ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, ip, lr, pc}
 801e198:	00000007 	andeq	r0, r0, r7
 801e19c:	0800ad55 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, fp, sp, pc}
 801e1a0:	00000000 	andeq	r0, r0, r0
 801e1a4:	0801d1f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, ip, lr, pc}
 801e1a8:	00010004 	andeq	r0, r1, r4
 801e1ac:	0800aa15 	stmdaeq	r0, {r0, r2, r4, r9, fp, sp, pc}
 801e1b0:	00000000 	andeq	r0, r0, r0
 801e1b4:	0801d1be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, ip, lr, pc}
 801e1b8:	00000005 	andeq	r0, r0, r5
 801e1bc:	0800b0fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, ip, sp, pc}
 801e1c0:	00000000 	andeq	r0, r0, r0
 801e1c4:	0801d1fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr, pc}
 801e1c8:	00000009 	andeq	r0, r0, r9

0801e1cc <paramMasks>:
 801e1cc:	0801ed66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, sp, lr, pc}
 801e1d0:	00000001 	andeq	r0, r0, r1
 801e1d4:	0801ed58 	stmdaeq	r1, {r3, r4, r6, r8, sl, fp, sp, lr, pc}
 801e1d8:	00000002 	andeq	r0, r0, r2
 801e1dc:	0801ed4a 	stmdaeq	r1, {r1, r3, r6, r8, sl, fp, sp, lr, pc}
 801e1e0:	00000004 	andeq	r0, r0, r4
 801e1e4:	0801ed3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, fp, sp, lr, pc}
 801e1e8:	00000008 	andeq	r0, r0, r8
 801e1ec:	0801ed2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, fp, sp, lr, pc}
 801e1f0:	00000020 	andeq	r0, r0, r0, lsr #32

0801e1f4 <RemoteConfig::s_TXT>:
 801e1f4:	0800ad5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, fp, sp, pc}
 801e1f8:	00000000 	andeq	r0, r0, r0
 801e1fc:	0800b015 	stmdaeq	r0, {r0, r2, r4, ip, sp, pc}
 801e200:	00000000 	andeq	r0, r0, r0
 801e204:	0801d237 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, ip, lr, pc}
 801e208:	0000000b 	andeq	r0, r0, fp
 801e20c:	0800ad85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, sp, pc}
 801e210:	00000000 	andeq	r0, r0, r0
 801e214:	0800b03d 	stmdaeq	r0, {r0, r2, r3, r4, r5, ip, sp, pc}
 801e218:	00000000 	andeq	r0, r0, r0
 801e21c:	0801d243 	stmdaeq	r1, {r0, r1, r6, r9, ip, lr, pc}
 801e220:	00000007 	andeq	r0, r0, r7
 801e224:	0800ada9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, fp, sp, pc}
 801e228:	00000000 	andeq	r0, r0, r0
 801e22c:	0800b05d 	stmdaeq	r0, {r0, r2, r3, r4, r6, ip, sp, pc}
 801e230:	00000000 	andeq	r0, r0, r0
 801e234:	0801d24b 	stmdaeq	r1, {r0, r1, r3, r6, r9, ip, lr, pc}
 801e238:	0000000b 	andeq	r0, r0, fp
 801e23c:	0800ae49 	stmdaeq	r0, {r0, r3, r6, r9, sl, fp, sp, pc}
 801e240:	00000000 	andeq	r0, r0, r0
 801e244:	0800b0dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, ip, sp, pc}
 801e248:	00000000 	andeq	r0, r0, r0
 801e24c:	0801d257 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, ip, lr, pc}
 801e250:	0000000b 	andeq	r0, r0, fp
 801e254:	0800add1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl, fp, sp, pc}
 801e258:	00000000 	andeq	r0, r0, r0
 801e25c:	0800b07d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, ip, sp, pc}
 801e260:	00000000 	andeq	r0, r0, r0
 801e264:	0801d263 	stmdaeq	r1, {r0, r1, r5, r6, r9, ip, lr, pc}
 801e268:	0000000a 	andeq	r0, r0, sl
 801e26c:	0800adf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp, sp, pc}
 801e270:	00000000 	andeq	r0, r0, r0
 801e274:	0800b09d 	stmdaeq	r0, {r0, r2, r3, r4, r7, ip, sp, pc}
 801e278:	00000000 	andeq	r0, r0, r0
 801e27c:	0801d26e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, ip, lr, pc}
 801e280:	0000000a 	andeq	r0, r0, sl
 801e284:	0800ae21 	stmdaeq	r0, {r0, r5, r9, sl, fp, sp, pc}
 801e288:	00000000 	andeq	r0, r0, r0
 801e28c:	0800b0bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, ip, sp, pc}
 801e290:	00000000 	andeq	r0, r0, r0
 801e294:	0801d279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, ip, lr, pc}
 801e298:	0000000b 	andeq	r0, r0, fp
 801e29c:	00000020 	andeq	r0, r0, r0, lsr #32
 801e2a0:	00544547 	subseq	r4, r4, r7, asr #10
 801e2a4:	54534f50 	ldrbpl	r4, [r3], #-3920	@ 0xfffff0b0
 801e2a8:	00000000 	andeq	r0, r0, r0
 801e2ac:	0000002f 	andeq	r0, r0, pc, lsr #32
 801e2b0:	50545448 	subspl	r5, r4, r8, asr #8
 801e2b4:	00000000 	andeq	r0, r0, r0
 801e2b8:	00000a20 	andeq	r0, r0, r0, lsr #20
 801e2bc:	00312e31 	eorseq	r2, r1, r1, lsr lr
 801e2c0:	0000003a 	andeq	r0, r0, sl, lsr r0
 801e2c4:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801e2c8:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801e2cc:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801e2d0:	00000000 	andeq	r0, r0, r0
 801e2d4:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801e2d8:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801e2dc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801e2e0:	00006874 	andeq	r6, r0, r4, ror r8
 801e2e4:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801e2e8:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801e2ec:	2f6e6f69 	svccs	0x006e6f69
 801e2f0:	00000000 	andeq	r0, r0, r0
 801e2f4:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801e2f8:	00000000 	andeq	r0, r0, r0
 801e2fc:	6574636f 	ldrbvs	r6, [r4, #-879]!	@ 0xfffffc91
 801e300:	74732d74 	ldrbtvc	r2, [r3], #-3444	@ 0xfffff28c
 801e304:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	@ 0xfffffe38
 801e308:	00000000 	andeq	r0, r0, r0
 801e30c:	00003b20 	andeq	r3, r0, r0, lsr #22
 801e310:	7478742e 	ldrbtvc	r7, [r8], #-1070	@ 0xfffffbd2
 801e314:	00000000 	andeq	r0, r0, r0
 801e318:	6f736a2f 	svcvs	0x00736a2f
 801e31c:	00002f6e 	andeq	r2, r0, lr, ror #30
 801e320:	2f786d64 	svccs	0x00786d64
 801e324:	00000000 	andeq	r0, r0, r0
 801e328:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801e32c:	00002f6c 	andeq	r2, r0, ip, ror #30
 801e330:	65646e69 	strbvs	r6, [r4, #-3689]!	@ 0xfffff197
 801e334:	74682e78 	strbtvc	r2, [r8], #-3704	@ 0xfffff188
 801e338:	00006c6d 	andeq	r6, r0, sp, ror #24
 801e33c:	786d642f 	stmdavc	sp!, {r0, r1, r2, r3, r5, sl, sp, lr}^
 801e340:	00000000 	andeq	r0, r0, r0
 801e344:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801e348:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	@ 0xfffffe60
 801e34c:	00000000 	andeq	r0, r0, r0
 801e350:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	@ 0xffffff44
 801e354:	00000065 	andeq	r0, r0, r5, rrx
 801e358:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801e35c:	6d74682e 	ldclvs	8, cr6, [r4, #-184]!	@ 0xffffff48
 801e360:	0000006c 	andeq	r0, r0, ip, rrx
 801e364:	6f736a2f 	svcvs	0x00736a2f
 801e368:	63612f6e 	cmnvs	r1, #440	@ 0x1b8
 801e36c:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801e370:	00000000 	andeq	r0, r0, r0
 801e374:	6f736a2f 	svcvs	0x00736a2f
 801e378:	0000006e 	andeq	r0, r0, lr, rrx
 801e37c:	6f626572 	svcvs	0x00626572
 801e380:	0000746f 	andeq	r7, r0, pc, ror #8
 801e384:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801e388:	0079616c 	rsbseq	r6, r9, ip, ror #2
 801e38c:	6e656469 	cdpvs	4, 6, cr6, cr5, cr9, {3}
 801e390:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
 801e394:	00000000 	andeq	r0, r0, r0
 801e398:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801e39c:	0000003d 	andeq	r0, r0, sp, lsr r0
 801e3a0:	4f44213c 	svcmi	0x0044213c
 801e3a4:	50595443 	subspl	r5, r9, r3, asr #8
 801e3a8:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801e3ac:	0a3e6c6d 	beq	8fb9568 <__init_array_end+0xf97c5c>
 801e3b0:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801e3b4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801e3b8:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801e3bc:	69743c3e 	ldmdbvs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801e3c0:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801e3c4:	6d627553 	cfstr64vs	mvdx7, [r2, #-332]!	@ 0xfffffeb4
 801e3c8:	2f3c7469 	svccs	0x003c7469
 801e3cc:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 801e3d0:	2f3c3e65 	svccs	0x003c3e65
 801e3d4:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801e3d8:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801e3dc:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801e3e0:	3e31683c 	mrccc	8, 1, r6, cr1, cr12, {1}
 801e3e4:	2f3c4b4f 	svccs	0x003c4b4f
 801e3e8:	3c3e3168 	ldfccs	f3, [lr], #-416	@ 0xfffffe60
 801e3ec:	646f622f 	strbtvs	r6, [pc], #-559	@ 801e3f4 <RemoteConfig::s_TXT+0x200>
 801e3f0:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801e3f4:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801e3f8:	000a3e6c 	andeq	r3, sl, ip, ror #28
 801e3fc:	20646142 	rsbcs	r6, r4, r2, asr #2
 801e400:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801e404:	00747365 	rsbseq	r7, r4, r5, ror #6
 801e408:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801e40c:	206e776f 	rsbcs	r7, lr, pc, ror #14
 801e410:	6f727245 	svcvs	0x00727245
 801e414:	00000072 	andeq	r0, r0, r2, ror r0
 801e418:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801e41c:	20747365 	rsbscs	r7, r4, r5, ror #6
 801e420:	69746e45 	ldmdbvs	r4!, {r0, r2, r6, r9, sl, fp, sp, lr}^
 801e424:	54207974 	strtpl	r7, [r0], #-2420	@ 0xfffff68c
 801e428:	4c206f6f 	stcmi	15, cr6, [r0], #-444	@ 0xfffffe44
 801e42c:	65677261 	strbvs	r7, [r7, #-609]!	@ 0xfffffd9f
 801e430:	00000000 	andeq	r0, r0, r0
 801e434:	75716552 	ldrbvc	r6, [r1, #-1362]!	@ 0xfffffaae
 801e438:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	@ 0xfffffe6c
 801e43c:	20495255 	subcs	r5, r9, r5, asr r2
 801e440:	206f6f54 	rsbcs	r6, pc, r4, asr pc	@ <UNPREDICTABLE>
 801e444:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 801e448:	00000000 	andeq	r0, r0, r0
 801e44c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
 801e450:	6c616e72 	stclvs	14, cr6, [r1], #-456	@ 0xfffffe38
 801e454:	72655320 	rsbvc	r5, r5, #32, 6	@ 0x80000000
 801e458:	20726576 	rsbscs	r6, r2, r6, ror r5
 801e45c:	6f727245 	svcvs	0x00727245
 801e460:	00000072 	andeq	r0, r0, r2, ror r0
 801e464:	6874654d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
 801e468:	4e20646f 	cdpmi	4, 2, cr6, cr0, cr15, {3}
 801e46c:	4920746f 	stmdbmi	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
 801e470:	656c706d 	strbvs	r7, [ip, #-109]!	@ 0xffffff93
 801e474:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801e478:	00006465 	andeq	r6, r0, r5, ror #8
 801e47c:	73726556 	cmnvc	r2, #360710144	@ 0x15800000
 801e480:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801e484:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801e488:	70707553 	rsbsvc	r7, r0, r3, asr r5
 801e48c:	6574726f 	ldrbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801e490:	00000064 	andeq	r0, r0, r4, rrx
 801e494:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801e498:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 801e49c:	00000064 	andeq	r0, r0, r4, rrx
 801e4a0:	00004b4f 	andeq	r4, r0, pc, asr #22
 801e4a4:	4f44213c 	svcmi	0x0044213c
 801e4a8:	50595443 	subspl	r5, r9, r3, asr #8
 801e4ac:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801e4b0:	0a3e6c6d 	beq	8fb966c <__init_array_end+0xf97d60>
 801e4b4:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801e4b8:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801e4bc:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801e4c0:	69743c3e 	ldmdbvs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801e4c4:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801e4c8:	25207525 	strcs	r7, [r0, #-1317]!	@ 0xfffffadb
 801e4cc:	742f3c73 	strtvc	r3, [pc], #-3187	@ 801e4d4 <RemoteConfig::s_TXT+0x2e0>
 801e4d0:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801e4d4:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801e4d8:	3e646165 	powccsz	f6, f4, f5
 801e4dc:	6f623c0a 	svcvs	0x00623c0a
 801e4e0:	3c3e7964 			@ <UNDEFINED> instruction: 0x3c3e7964
 801e4e4:	253e3168 	ldrcs	r3, [lr, #-360]!	@ 0xfffffe98
 801e4e8:	682f3c73 	stmdavs	pc!, {r0, r1, r4, r5, r6, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801e4ec:	2f3c3e31 	svccs	0x003c3e31
 801e4f0:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e4f4:	2f3c0a3e 	svccs	0x003c0a3e
 801e4f8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	@ 0xfffffe60
 801e4fc:	00000a3e 	andeq	r0, r0, lr, lsr sl
 801e500:	50545448 	subspl	r5, r4, r8, asr #8
 801e504:	312e312f 			@ <UNDEFINED> instruction: 0x312e312f
 801e508:	20752520 	rsbscs	r2, r5, r0, lsr #10
 801e50c:	0a0d7325 	beq	837b1a8 <__init_array_end+0x35989c>
 801e510:	76726553 			@ <UNDEFINED> instruction: 0x76726553
 801e514:	203a7265 	eorscs	r7, sl, r5, ror #4
 801e518:	0a0d7325 	beq	837b1b4 <__init_array_end+0x3598a8>
 801e51c:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 801e520:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 801e524:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801e528:	7325203a 			@ <UNDEFINED> instruction: 0x7325203a
 801e52c:	6f430a0d 	svcvs	0x00430a0d
 801e530:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801e534:	654c2d74 	strbvs	r2, [ip, #-3444]	@ 0xfffff28c
 801e538:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 801e53c:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801e540:	6f430a0d 	svcvs	0x00430a0d
 801e544:	63656e6e 	cmnvs	r5, #1760	@ 0x6e0
 801e548:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801e54c:	6c63203a 	stclvs	0, cr2, [r3], #-232	@ 0xffffff18
 801e550:	0d65736f 	stcleq	3, cr7, [r5, #-444]!	@ 0xfffffe44
 801e554:	000a0d0a 	andeq	r0, sl, sl, lsl #26
 801e558:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 801e55c:	2e37203a 	mrccs	0, 1, r2, cr7, cr10, {1}
 801e560:	726f4d20 	rsbvc	r4, pc, #32, 26	@ 0x800
 801e564:	68742065 	ldmdavs	r4!, {r0, r2, r5, r6, sp}^
 801e568:	74206e61 	strtvc	r6, [r0], #-3681	@ 0xfffff19f
 801e56c:	73206f77 			@ <UNDEFINED> instruction: 0x73206f77
 801e570:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
 801e574:	202c7365 	eorcs	r7, ip, r5, ror #6
 801e578:	63736964 	cmnvs	r3, #100, 18	@ 0x190000
 801e57c:	69647261 	stmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
 801e580:	6420676e 	strtvs	r6, [r0], #-1902	@ 0xfffff892
 801e584:	00617461 	rsbeq	r7, r1, r1, ror #8
 801e588:	4e524157 	mrcmi	1, 2, r4, cr2, cr7, {2}
 801e58c:	2e38203a 	mrccs	0, 1, r2, cr8, cr10, {1}
 801e590:	756f5320 	strbvc	r5, [pc, #-800]!	@ 801e278 <RemoteConfig::s_TXT+0x84>
 801e594:	20656372 	rsbcs	r6, r5, r2, ror r3
 801e598:	6374616d 	cmnvs	r4, #1073741851	@ 0x4000001b
 801e59c:	20736568 	rsbscs	r6, r3, r8, ror #10
 801e5a0:	68746f62 	ldmdavs	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801e5a4:	2c706920 			@ <UNDEFINED> instruction: 0x2c706920
 801e5a8:	73696420 	cmnvc	r9, #32, 8	@ 0x20000000
 801e5ac:	64726163 	ldrbtvs	r6, [r2], #-355	@ 0xfffffe9d
 801e5b0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801e5b4:	61746164 	cmnvs	r4, r4, ror #2
 801e5b8:	00000000 	andeq	r0, r0, r0
 801e5bc:	54705f73 	ldrbtpl	r5, [r0], #-3955	@ 0xfffff08d
 801e5c0:	20736968 	rsbscs	r6, r3, r8, ror #18
 801e5c4:	6e203d21 	cdpvs	13, 2, cr3, cr0, cr1, {1}
 801e5c8:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801e5cc:	00007274 	andeq	r7, r0, r4, ror r2
 801e5d0:	00746547 	rsbseq	r6, r4, r7, asr #10
 801e5d4:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801e5d8:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801e5dc:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801e5e0:	646c6578 	strbtvs	r6, [ip], #-1400	@ 0xfffffa88
 801e5e4:	6f63786d 	svcvs	0x0063786d
 801e5e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801e5ec:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801e5f0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801e5f4:	00000068 	andeq	r0, r0, r8, rrx
 801e5f8:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801e5fc:	6f63206c 	svcvs	0x0063206c
 801e600:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801e604:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801e608:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801e60c:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 801e610:	20202065 	eorcs	r2, r0, r5, rrx
 801e614:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e618:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801e61c:	3c205d64 	stccc	13, cr5, [r0], #-400	@ 0xfffffe70
 801e620:	6c206425 	cfstrsvs	mvf6, [r0], #-148	@ 0xffffff6c
 801e624:	2f736465 	svccs	0x00736465
 801e628:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801e62c:	000a3e6c 	andeq	r3, sl, ip, ror #28
 801e630:	756f4320 	strbvc	r4, [pc, #-800]!	@ 801e318 <RemoteConfig::s_TXT+0x124>
 801e634:	2020746e 	eorcs	r7, r0, lr, ror #8
 801e638:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e63c:	00000a64 	andeq	r0, r0, r4, ror #20
 801e640:	70614d20 	rsbvc	r4, r1, r0, lsr #26
 801e644:	676e6970 			@ <UNDEFINED> instruction: 0x676e6970
 801e648:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e64c:	255b2073 	ldrbcs	r2, [fp, #-115]	@ 0xffffff8d
 801e650:	000a5d64 	andeq	r5, sl, r4, ror #26
 801e654:	48305420 	ldmdami	r0!, {r5, sl, ip, lr}
 801e658:	20202020 	eorcs	r2, r0, r0, lsr #32
 801e65c:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e660:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801e664:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801e668:	000a5d58 	andeq	r5, sl, r8, asr sp
 801e66c:	48315420 	ldmdami	r1!, {r5, sl, ip, lr}
 801e670:	20202020 	eorcs	r2, r0, r0, lsr #32
 801e674:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e678:	2066322e 	rsbcs	r3, r6, lr, lsr #4
 801e67c:	2578305b 	ldrbcs	r3, [r8, #-91]!	@ 0xffffffa5
 801e680:	000a5d58 	andeq	r5, sl, r8, asr sp
 801e684:	6f6c4720 	svcvs	0x006c4720
 801e688:	426c6162 	rsbmi	r6, ip, #-2147483624	@ 0x80000018
 801e68c:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801e690:	73656e74 	cmnvc	r5, #116, 28	@ 0x740
 801e694:	25203a73 	strcs	r3, [r0, #-2675]!	@ 0xfffff58d
 801e698:	00000a75 	andeq	r0, r0, r5, ror sl
 801e69c:	6f6c4320 	svcvs	0x006c4320
 801e6a0:	20206b63 	eorcs	r6, r0, r3, ror #22
 801e6a4:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e6a8:	7a482075 	bvc	9226884 <__init_array_end+0x1204f78>
 801e6ac:	0000000a 	andeq	r0, r0, sl
 801e6b0:	66655220 	strbtvs	r5, [r5], -r0, lsr #4
 801e6b4:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801e6b8:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e6bc:	7a482075 	bvc	9226898 <__init_array_end+0x1204f8c>
 801e6c0:	0000000a 	andeq	r0, r0, sl
 801e6c4:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801e6c8:	4d44206c 	stclmi	0, cr2, [r4, #-432]	@ 0xfffffe50
 801e6cc:	6f632058 	svcvs	0x00632058
 801e6d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801e6d4:	74617275 	strbtvc	r7, [r1], #-629	@ 0xfffffd8b
 801e6d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 801e6dc:	74754f20 	ldrbtvc	r4, [r5], #-3872	@ 0xfffff0e0
 801e6e0:	73747570 	cmnvc	r4, #112, 10	@ 0x1c000000
 801e6e4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801e6e8:	20202020 	eorcs	r2, r0, r0, lsr #32
 801e6ec:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801e6f0:	0000000a 	andeq	r0, r0, sl
 801e6f4:	6f724720 	svcvs	0x00724720
 801e6f8:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 801e6fc:	6f632067 	svcvs	0x00632067
 801e700:	20746e75 	rsbscs	r6, r4, r5, ror lr
 801e704:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801e708:	72475b20 	subvc	r5, r7, #32, 22	@ 0x8000
 801e70c:	7370756f 	cmnvc	r0, #465567744	@ 0x1bc00000
 801e710:	25203a20 	strcs	r3, [r0, #-2592]!	@ 0xfffff5e0
 801e714:	000a5d75 	andeq	r5, sl, r5, ror sp
 801e718:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801e71c:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 801e720:	20207365 	eorcs	r7, r0, r5, ror #6
 801e724:	20202020 	eorcs	r2, r0, r0, lsr #32
 801e728:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801e72c:	0000000a 	andeq	r0, r0, sl
 801e730:	786d4420 	stmdavc	sp!, {r5, sl, lr}^
 801e734:	746f6f46 	strbtvc	r6, [pc], #-3910	@ 801e73c <RemoteConfig::s_TXT+0x548>
 801e738:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 801e73c:	20202074 	eorcs	r2, r0, r4, ror r0
 801e740:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801e744:	0000000a 	andeq	r0, r0, sl
 801e748:	3a752520 	bcc	9d67bd0 <__init_array_end+0x1d462c4>
 801e74c:	253a7525 	ldrcs	r7, [sl, #-1317]!	@ 0xfffffadb
 801e750:	75253a75 	strvc	r3, [r5, #-2677]!	@ 0xfffff58b
 801e754:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801e758:	000a7525 	andeq	r7, sl, r5, lsr #10
 801e75c:	2f637273 	svccs	0x00637273
 801e760:	6d786d64 	ldclvs	13, cr6, [r8, #-400]!	@ 0xfffffe70
 801e764:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801e768:	3273772f 	rsbscc	r7, r3, #12320768	@ 0xbc0000
 801e76c:	64787838 	ldrbtvs	r7, [r8], #-2104	@ 0xfffff7c8
 801e770:	756d786d 	strbvc	r7, [sp, #-2157]!	@ 0xfffff793
 801e774:	2e69746c 	cdpcs	4, 6, cr7, cr9, cr12, {3}
 801e778:	00707063 	rsbseq	r7, r0, r3, rrx
 801e77c:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
 801e780:	00000074 	andeq	r0, r0, r4, ror r0
 801e784:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801e788:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801e78c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801e790:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801e794:	7525203a 	strvc	r2, [r5, #-58]!	@ 0xffffffc6
 801e798:	0000000a 	andeq	r0, r0, sl
 801e79c:	706f7453 	rsbvc	r7, pc, r3, asr r4	@ <UNPREDICTABLE>
 801e7a0:	00000000 	andeq	r0, r0, r0
 801e7a4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801e7a8:	6d447878 	stclvs	8, cr7, [r4, #-480]	@ 0xfffffe20
 801e7ac:	6c754d78 	ldclvs	13, cr4, [r5], #-480	@ 0xfffffe20
 801e7b0:	00006974 	andeq	r6, r0, r4, ror r9
 801e7b4:	203e2d2d 	eorscs	r2, lr, sp, lsr #26
 801e7b8:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801e7bc:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801e7c0:	0000000a 	andeq	r0, r0, sl
 801e7c4:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
 801e7c8:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801e7cc:	00000000 	andeq	r0, r0, r0
 801e7d0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801e720 <RemoteConfig::s_TXT+0x52c>
 801e7d4:	772d6269 	strvc	r6, [sp, -r9, ror #4]!
 801e7d8:	78383273 	ldmdavc	r8!, {r0, r1, r4, r5, r6, r9, ip, sp}
 801e7dc:	6e692f78 	mcrvs	15, 3, r2, cr9, cr8, {3}
 801e7e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801e7e4:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801e7e8:	636c6578 	cmnvs	ip, #120, 10	@ 0x1e000000
 801e7ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801e7f0:	61727567 	cmnvs	r2, r7, ror #10
 801e7f4:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801e7f8:	0000682e 	andeq	r6, r0, lr, lsr #16
 801e7fc:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 801e800:	253a7325 	ldrcs	r7, [sl, #-805]!	@ 0xfffffcdb
 801e804:	64253a73 	strtvs	r3, [r5], #-2675	@ 0xfffff58d
 801e808:	0000000a 	andeq	r0, r0, sl
 801e80c:	74614470 	strbtvc	r4, [r1], #-1136	@ 0xfffffb90
 801e810:	3d212061 	stccc	0, cr2, [r1, #-388]!	@ 0xfffffe7c
 801e814:	6c756e20 	ldclvs	14, cr6, [r5], #-128	@ 0xffffff80
 801e818:	7274706c 	rsbsvc	r7, r4, #108	@ 0x6c
 801e81c:	00000000 	andeq	r0, r0, r0
 801e820:	44746553 	ldrbtmi	r6, [r4], #-1363	@ 0xfffffaad
 801e824:	00617461 	rsbeq	r7, r1, r1, ror #8
 801e828:	6e654c6e 	cdpvs	12, 6, cr4, cr5, cr14, {3}
 801e82c:	20687467 	rsbcs	r7, r8, r7, ror #8
 801e830:	6c203d3c 	stcvs	13, cr3, [r0], #-240	@ 0xffffff10
 801e834:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801e838:	3a746573 	bcc	9d37e0c <__init_array_end+0x1d16500>
 801e83c:	786d643a 	stmdavc	sp!, {r1, r3, r4, r5, sl, sp, lr}^
 801e840:	4e553a3a 			@ <UNDEFINED> instruction: 0x4e553a3a
 801e844:	52455649 	subpl	r5, r5, #76546048	@ 0x4900000
 801e848:	535f4553 	cmppl	pc, #348127232	@ 0x14c00000
 801e84c:	00455a49 	subeq	r5, r5, r9, asr #20
 801e850:	4970616d 	ldmdbmi	r0!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 801e854:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801e858:	73203c20 			@ <UNDEFINED> instruction: 0x73203c20
 801e85c:	6f657a69 	svcvs	0x00657a69
 801e860:	68632866 	stmdavs	r3!, {r1, r2, r5, r6, fp, sp}^
 801e864:	656e6e61 	strbvs	r6, [lr, #-3681]!	@ 0xfffff19f
 801e868:	70614d6c 	rsbvc	r4, r1, ip, ror #26
 801e86c:	202f2029 	eorcs	r2, pc, r9, lsr #32
 801e870:	657a6973 	ldrbvs	r6, [sl, #-2419]!	@ 0xfffff68d
 801e874:	6328666f 			@ <UNDEFINED> instruction: 0x6328666f
 801e878:	6e6e6168 	powvsez	f6, f6, #0.0
 801e87c:	614d6c65 	cmpvs	sp, r5, ror #24
 801e880:	5d305b70 	vldmdbpl	r0!, {d5-<overflow reg d60>}
 801e884:	00000029 	andeq	r0, r0, r9, lsr #32
 801e888:	00000030 	andeq	r0, r0, r0, lsr r0
 801e88c:	7265706f 	rsbvc	r7, r5, #111	@ 0x6f
 801e890:	726f7461 	rsbvc	r7, pc, #1627389952	@ 0x61000000
 801e894:	00002928 	andeq	r2, r0, r8, lsr #18
 801e898:	6168436e 	cmnvs	r8, lr, ror #6
 801e89c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	@ 0xfffffe48
 801e8a0:	72655073 	rsbvc	r5, r5, #115	@ 0x73
 801e8a4:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801e8a8:	3d3d206c 	ldccc	0, cr2, [sp, #-432]!	@ 0xfffffe50
 801e8ac:	00003420 	andeq	r3, r0, r0, lsr #8
 801e8b0:	54527369 	ldrbpl	r7, [r2], #-873	@ 0xfffffc97
 801e8b4:	6f72505a 	svcvs	0x0072505a
 801e8b8:	6f636f74 	svcvs	0x00636f74
 801e8bc:	0000006c 	andeq	r0, r0, ip, rrx
 801e8c0:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801e8c4:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801e8c8:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801e8cc:	524f5020 	subpl	r5, pc, #32
 801e8d0:	00005354 	andeq	r5, r0, r4, asr r3
 801e8d4:	63614249 	cmnvs	r1, #-1879048188	@ 0x90000004
 801e8d8:	0070756b 	rsbseq	r7, r0, fp, ror #10
 801e8dc:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	@ 801e82c <RemoteConfig::s_TXT+0x638>
 801e8e0:	6c2d6269 	sfmvs	f6, 4, [sp], #-420	@ 0xfffffe5c
 801e8e4:	74686769 	strbtvc	r6, [r8], #-1897	@ 0xfffff897
 801e8e8:	2f746573 	svccs	0x00746573
 801e8ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
 801e8f0:	2f656475 	svccs	0x00656475
 801e8f4:	6867696c 	stmdavs	r7!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 801e8f8:	74657374 	strbtvc	r7, [r5], #-884	@ 0xfffffc8c
 801e8fc:	61746164 	cmnvs	r4, r4, ror #2
 801e900:	0000682e 	andeq	r6, r0, lr, lsr #16
 801e904:	3253577e 	subscc	r5, r3, #33030144	@ 0x1f80000
 801e908:	4d787838 	ldclmi	8, cr7, [r8, #-224]!	@ 0xffffff20
 801e90c:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801e910:	00000000 	andeq	r0, r0, r0
 801e914:	2f637273 	svccs	0x00637273
 801e918:	32336467 	eorscc	r6, r3, #1728053248	@ 0x67000000
 801e91c:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
 801e920:	73772f6f 	cmnvc	r7, #444	@ 0x1bc
 801e924:	78783832 	ldmdavc	r8!, {r1, r4, r5, fp, ip, sp}^
 801e928:	746c756d 	strbtvc	r7, [ip], #-1389	@ 0xfffffa93
 801e92c:	70632e69 	rsbvc	r2, r3, r9, ror #28
 801e930:	00000070 	andeq	r0, r0, r0, ror r0
 801e934:	75746553 	ldrbvc	r6, [r4, #-1363]!	@ 0xfffffaad
 801e938:	00000070 	andeq	r0, r0, r0, ror r0
 801e93c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801e940:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801e944:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801e948:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801e94c:	5452203a 	ldrbpl	r2, [r2], #-58	@ 0xffffffc6
 801e950:	49545f5a 	ldmdbmi	r4, {r1, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
 801e954:	5f52454d 	svcpl	0x0052454d
 801e958:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
 801e95c:	253d444f 	ldrcs	r4, [sp, #-1103]!	@ 0xfffffbb1
 801e960:	6e202c75 	mcrvs	12, 1, r2, cr0, cr5, {3}
 801e964:	3d483054 	stclcc	0, cr3, [r8, #-336]	@ 0xfffffeb0
 801e968:	202c7525 	eorcs	r7, ip, r5, lsr #10
 801e96c:	4831546e 	ldmdami	r1!, {r1, r2, r3, r5, r6, sl, ip, lr}
 801e970:	0a75253d 	beq	9d67e6c <__init_array_end+0x1d46560>
 801e974:	00000000 	andeq	r0, r0, r0
 801e978:	2b203128 	blcs	882ae20 <__init_array_end+0x809514>
 801e97c:	6e5f6d20 	cdpvs	13, 5, cr6, cr15, cr0, {1}
 801e980:	53667542 	cmnpl	r6, #276824064	@ 0x10800000
 801e984:	29657a69 	stmdbcs	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 801e988:	55203c20 	strpl	r3, [r0, #-3104]!	@ 0xfffff3e0
 801e98c:	31544e49 	cmpcc	r4, r9, asr #28
 801e990:	414d5f36 	cmpmi	sp, r6, lsr pc
 801e994:	00000058 	andeq	r0, r0, r8, asr r0
 801e998:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
 801e99c:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
 801e9a0:	69702f65 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 801e9a4:	636c6578 	cmnvs	ip, #120, 10	@ 0x1e000000
 801e9a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801e9ac:	61727567 	cmnvs	r2, r7, ror #10
 801e9b0:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801e9b4:	0000682e 	andeq	r6, r0, lr, lsr #16
 801e9b8:	65786950 	ldrbvs	r6, [r8, #-2384]!	@ 0xfffff6b0
 801e9bc:	00000a6c 	andeq	r0, r0, ip, ror #20
 801e9c0:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 801e9c4:	3a202065 	bcc	8826b60 <__init_array_end+0x805254>
 801e9c8:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801e9cc:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	@ 0xfffffe94
 801e9d0:	0000000a 	andeq	r0, r0, sl
 801e9d4:	756f4320 	strbvc	r4, [pc, #-800]!	@ 801e6bc <RemoteConfig::s_TXT+0x4c8>
 801e9d8:	3a20746e 	bcc	883bb98 <__init_array_end+0x81a28c>
 801e9dc:	0a642520 	beq	9927e64 <__init_array_end+0x1906558>
 801e9e0:	00000000 	andeq	r0, r0, r0
 801e9e4:	6f6c4320 	svcvs	0x006c4320
 801e9e8:	3a206b63 	bcc	883977c <__init_array_end+0x817e70>
 801e9ec:	20752520 	rsbscs	r2, r5, r0, lsr #10
 801e9f0:	000a7a48 	andeq	r7, sl, r8, asr #20
 801e9f4:	5f767321 	svcpl	0x00767321
 801e9f8:	75527369 	ldrbvc	r7, [r2, #-873]	@ 0xfffffc97
 801e9fc:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 801ea00:	00000067 	andeq	r0, r0, r7, rrx
 801ea04:	61647055 	qdsubvs	r7, r5, r4
 801ea08:	00006574 	andeq	r6, r0, r4, ror r5
 801ea0c:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801ea10:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801ea14:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801ea18:	78697020 	stmdavc	r9!, {r5, ip, sp, lr}^
 801ea1c:	3a3a6c65 	bcc	8eb9bb8 <__init_array_end+0xe982ac>
 801ea20:	54524f50 	ldrbpl	r4, [r2], #-3920	@ 0xfffff0b0
 801ea24:	554f435f 	strbpl	r4, [pc, #-863]	@ 801e6cd <RemoteConfig::s_TXT+0x4d9>
 801ea28:	0000544e 	andeq	r5, r0, lr, asr #8
 801ea2c:	43746553 	cmnmi	r4, #348127232	@ 0x14c00000
 801ea30:	756f6c6f 	strbvc	r6, [pc, #-3183]!	@ 801ddc9 <_etext+0x1429>
 801ea34:	5a545272 	bpl	9533404 <__init_array_end+0x1511af8>
 801ea38:	00000000 	andeq	r0, r0, r0
 801ea3c:	726f506e 	rsbvc	r5, pc, #110	@ 0x6e
 801ea40:	646e4974 	strbtvs	r4, [lr], #-2420	@ 0xfffff68c
 801ea44:	3c207865 	stccc	8, cr7, [r0], #-404	@ 0xfffffe6c
 801ea48:	00363120 	eorseq	r3, r6, r0, lsr #2
 801ea4c:	43746553 	cmnmi	r4, #348127232	@ 0x14c00000
 801ea50:	756f6c6f 	strbvc	r6, [pc, #-3183]!	@ 801dde9 <_etext+0x1449>
 801ea54:	32535772 	subscc	r5, r3, #29884416	@ 0x1c80000
 801ea58:	00313038 	eorseq	r3, r1, r8, lsr r0
 801ea5c:	7869506e 	stmdavc	r9!, {r1, r2, r3, r5, r6, ip, lr}^
 801ea60:	6e496c65 	cdpvs	12, 4, cr6, cr9, cr5, {3}
 801ea64:	20786564 	rsbscs	r6, r8, r4, ror #10
 801ea68:	5f6d203c 	svcpl	0x006d203c
 801ea6c:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
 801ea70:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801ea74:	38202f20 	stmdacc	r0!, {r5, r8, r9, sl, fp, sp}
 801ea78:	00000000 	andeq	r0, r0, r0
 801ea7c:	50746553 	rsbspl	r6, r4, r3, asr r5
 801ea80:	6c657869 	stclvs	8, cr7, [r5], #-420	@ 0xfffffe5c
 801ea84:	74794234 	ldrbtvc	r4, [r9], #-564	@ 0xfffffdcc
 801ea88:	00007365 	andeq	r7, r0, r5, ror #6
 801ea8c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801ea90:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801ea94:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801ea98:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801ea9c:	466e203a 			@ <UNDEFINED> instruction: 0x466e203a
 801eaa0:	75716572 	ldrbvc	r6, [r1, #-1394]!	@ 0xfffffa8e
 801eaa4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801eaa8:	2c75253d 	cfldr64cs	mvdx2, [r5], #-244	@ 0xffffff0c
 801eaac:	69546e20 	ldmdbvs	r4, {r5, r9, sl, fp, sp, lr}^
 801eab0:	72656b63 	rsbvc	r6, r5, #101376	@ 0x18c00
 801eab4:	0a75253d 	beq	9d67fb0 <__init_array_end+0x1d466a4>
 801eab8:	00000000 	andeq	r0, r0, r0
 801eabc:	546e2828 	strbtpl	r2, [lr], #-2088	@ 0xfffff7d8
 801eac0:	656b6369 	strbvs	r6, [fp, #-873]!	@ 0xfffffc97
 801eac4:	202f2072 	eorcs	r2, pc, r2, ror r0	@ <UNPREDICTABLE>
 801eac8:	2d202932 			@ <UNDEFINED> instruction: 0x2d202932
 801eacc:	20293120 	eorcs	r3, r9, r0, lsr #2
 801ead0:	4955203c 	ldmdbmi	r5, {r2, r3, r4, r5, sp}^
 801ead4:	3631544e 	ldrtcc	r5, [r1], -lr, asr #8
 801ead8:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
 801eadc:	00000000 	andeq	r0, r0, r0
 801eae0:	546e2828 	strbtpl	r2, [lr], #-2088	@ 0xfffff7d8
 801eae4:	656b6369 	strbvs	r6, [fp, #-873]!	@ 0xfffffc97
 801eae8:	202f2072 	eorcs	r2, pc, r2, ror r0	@ <UNPREDICTABLE>
 801eaec:	2d202934 			@ <UNDEFINED> instruction: 0x2d202934
 801eaf0:	20293120 	eorcs	r3, r9, r0, lsr #2
 801eaf4:	4955203c 	ldmdbmi	r5, {r2, r3, r4, r5, sp}^
 801eaf8:	3631544e 	ldrtcc	r5, [r1], -lr, asr #8
 801eafc:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
 801eb00:	00000000 	andeq	r0, r0, r0
 801eb04:	426e5f6d 	rsbmi	r5, lr, #436	@ 0x1b4
 801eb08:	69536675 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
 801eb0c:	3c20657a 	cfstr32cc	mvfx6, [r0], #-488	@ 0xfffffe18
 801eb10:	4e495520 	cdpmi	5, 4, cr5, cr9, cr0, {1}
 801eb14:	5f363154 	svcpl	0x00363154
 801eb18:	0058414d 	subseq	r4, r8, sp, asr #2
 801eb1c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801eb20:	754d7878 	strbvc	r7, [sp, #-2168]	@ 0xfffff788
 801eb24:	0069746c 	rsbeq	r7, r9, ip, ror #8
 801eb28:	54705f73 	ldrbtpl	r5, [r0], #-3955	@ 0xfffff08d
 801eb2c:	20736968 	rsbscs	r6, r3, r8, ror #18
 801eb30:	6e203d3d 	mcrvs	13, 1, r3, cr0, cr13, {1}
 801eb34:	706c6c75 	rsbvc	r6, ip, r5, ror ip
 801eb38:	00007274 	andeq	r7, r0, r4, ror r2
 801eb3c:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801eb40:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801eb44:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801eb48:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801eb4c:	4f50203a 	svcmi	0x0050203a
 801eb50:	435f5452 	cmpmi	pc, #1375731712	@ 0x52000000
 801eb54:	544e554f 	strbpl	r5, [lr], #-1359	@ 0xfffffab1
 801eb58:	0a75253d 	beq	9d68054 <__init_array_end+0x1d46748>
 801eb5c:	00000000 	andeq	r0, r0, r0
 801eb60:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801eb64:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801eb68:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801eb6c:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801eb70:	414d203a 	cmpmi	sp, sl, lsr r0
 801eb74:	50415f58 	subpl	r5, r1, r8, asr pc
 801eb78:	32303141 	eorscc	r3, r0, #1073741840	@ 0x40000010
 801eb7c:	0a75253d 	beq	9d68078 <__init_array_end+0x1d4676c>
 801eb80:	00000000 	andeq	r0, r0, r0
 801eb84:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801eb88:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801eb8c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801eb90:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801eb94:	5f73203a 	svcpl	0x0073203a
 801eb98:	42616d44 	rsbmi	r6, r1, #68, 26	@ 0x1100
 801eb9c:	65666675 	strbvs	r6, [r6, #-1653]!	@ 0xfffff98b
 801eba0:	70253d72 	eorvc	r3, r5, r2, ror sp
 801eba4:	5f73202c 	svcpl	0x0073202c
 801eba8:	66754270 			@ <UNDEFINED> instruction: 0x66754270
 801ebac:	3d726566 	cfldr64cc	mvdx6, [r2, #-408]!	@ 0xfffffe68
 801ebb0:	000a7025 	andeq	r7, sl, r5, lsr #32
 801ebb4:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801ebb8:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	@ 0xffffff80
 801ebbc:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 801ebc0:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 801ebc4:	5f6d203a 	svcpl	0x006d203a
 801ebc8:	6675426e 	ldrbtvs	r4, [r5], -lr, ror #4
 801ebcc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
 801ebd0:	2075253d 	rsbscs	r2, r5, sp, lsr r5
 801ebd4:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	@ 0xfffffe94
 801ebd8:	0000000a 	andeq	r0, r0, sl
 801ebdc:	426e5f6d 	rsbmi	r5, lr, #436	@ 0x1b4
 801ebe0:	69536675 	ldmdbvs	r3, {r0, r2, r4, r5, r6, r9, sl, sp, lr}^
 801ebe4:	3c20657a 	cfstr32cc	mvfx6, [r0], #-488	@ 0xfffffe18
 801ebe8:	6970203d 	ldmdbvs	r0!, {r0, r2, r3, r4, r5, sp}^
 801ebec:	3a6c6578 	bcc	9b381d4 <__init_array_end+0x1b168c8>
 801ebf0:	414d443a 	cmpmi	sp, sl, lsr r4
 801ebf4:	4655425f 			@ <UNDEFINED> instruction: 0x4655425f
 801ebf8:	5f524546 	svcpl	0x00524546
 801ebfc:	455a4953 	ldrbmi	r4, [sl, #-2387]	@ 0xfffff6ad
 801ec00:	00000000 	andeq	r0, r0, r0
 801ec04:	63616c42 	cmnvs	r1, #16896	@ 0x4200
 801ec08:	74756f6b 	ldrbtvc	r6, [r5], #-3947	@ 0xfffff095
 801ec0c:	00000000 	andeq	r0, r0, r0
 801ec10:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 801ec14:	203d3d20 	eorscs	r3, sp, r0, lsr #26
 801ec18:	65786970 	ldrbvs	r6, [r8, #-2416]!	@ 0xfffff690
 801ec1c:	543a3a6c 	ldrtpl	r3, [sl], #-2668	@ 0xfffff594
 801ec20:	3a657079 	bcc	997ae0c <__init_array_end+0x1959500>
 801ec24:	3253573a 	subscc	r5, r3, #15204352	@ 0xe80000
 801ec28:	00313038 	eorseq	r3, r1, r8, lsr r0
 801ec2c:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	@ 0xfffffee8
 801ec30:	00006e4f 	andeq	r6, r0, pc, asr #28
 801ec34:	74666f53 	strbtvc	r6, [r6], #-3923	@ 0xfffff0ad
 801ec38:	65726177 	ldrbvs	r6, [r2, #-375]!	@ 0xfffffe89
 801ec3c:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801ec40:	64644172 	strbtvs	r4, [r4], #-370	@ 0xfffffe8e
 801ec44:	0000000a 	andeq	r0, r0, sl
 801ec48:	72746552 	rsbsvc	r6, r4, #343932928	@ 0x14800000
 801ec4c:	726f2079 	rsbvc	r2, pc, #121	@ 0x79
 801ec50:	65757120 	ldrbvs	r7, [r5, #-288]!	@ 0xfffffee0
 801ec54:	74206575 	strtvc	r6, [r0], #-1397	@ 0xfffffa8b
 801ec58:	64206568 	strtvs	r6, [r0], #-1384	@ 0xfffffa98
 801ec5c:	20617461 	rsbcs	r7, r1, r1, ror #8
 801ec60:	20726f66 	rsbscs	r6, r2, r6, ror #30
 801ec64:	6574616c 	ldrbvs	r6, [r4, #-364]!	@ 0xfffffe94
 801ec68:	72742072 	rsbsvc	r2, r4, #114	@ 0x72
 801ec6c:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	@ 0xfffffe7c
 801ec70:	69737369 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 801ec74:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801ec78:	69626e75 	stmdbvs	r2!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 801ec7c:	000a646e 	andeq	r6, sl, lr, ror #8

0801ec80 <s_contentType>:
 801ec80:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801ec84:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801ec88:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801eca0:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801eca4:	7373632f 	cmnvc	r3, #-1140850688	@ 0xbc000000
	...
 801ecc0:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801ecc4:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801ecc8:	72637361 	rsbvc	r7, r3, #-2080374783	@ 0x84000001
 801eccc:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801ece0:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801ece4:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801ece8:	2f6e6f69 	svccs	0x006e6f69
 801ecec:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...
 801ed00:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 801ed04:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 801ed08:	2f6e6f69 	svccs	0x006e6f69
 801ed0c:	6574636f 	ldrbvs	r6, [r4, #-879]!	@ 0xfffffc91
 801ed10:	74732d74 	ldrbtvc	r2, [r3], #-3444	@ 0xfffff28c
 801ed14:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	@ 0xfffffe38
	...

0801ed20 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801ed20:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801ed24:	5f79616c 	svcpl	0x0079616c
 801ed28:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
	...

0801ed2d <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 801ed2d:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801ed31:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801ed35:	6f746361 	svcvs	0x00746361
 801ed39:	 	strvs	r7, [r0, #-2418]	@ 0xfffff68e

0801ed3c <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801ed3c:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801ed40:	755f656c 	ldrbvc	r6, [pc, #-1388]	@ 801e7dc <RemoteConfig::s_TXT+0x5e8>
 801ed44:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	@ 0xfffffe40
 801ed48:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801ed4a <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 801ed4a:	62616e65 	rsbvs	r6, r1, #1616	@ 0x650
 801ed4e:	725f656c 	subsvc	r6, pc, #108, 10	@ 0x1b000000
 801ed52:	6f6f6265 	svcvs	0x006f6265
 801ed56:	 	stmdbvs	r4!, {r2, r4, r5, r6}^

0801ed58 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 801ed58:	61736964 	cmnvs	r3, r4, ror #18
 801ed5c:	5f656c62 	svcpl	0x00656c62
 801ed60:	74697277 	strbtvc	r7, [r9], #-631	@ 0xfffffd89
 801ed64:	 	stmdbvs	r4!, {r0, r2, r5, r6}^

0801ed66 <RemoteConfigConst::PARAMS_DISABLE>:
 801ed66:	61736964 	cmnvs	r3, r4, ror #18
 801ed6a:	00656c62 	rsbeq	r6, r5, r2, ror #24

0801ed6e <RemoteConfigConst::PARAMS_FILE_NAME>:
 801ed6e:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 801ed72:	2e676966 	vnmulcs.f16	s13, s14, s13	@ <UNPREDICTABLE>
 801ed76:	00747874 	rsbseq	r7, r4, r4, ror r8
	...

0801ed7c <HttpContent>:
 801ed7c:	0801d433 	stmdaeq	r1, {r0, r1, r4, r5, sl, ip, lr, pc}
 801ed80:	08020553 	stmdaeq	r2, {r0, r1, r4, r6, r8, sl}
 801ed84:	00000551 	andeq	r0, r0, r1, asr r5
 801ed88:	00000002 	andeq	r0, r0, r2
 801ed8c:	0801d43a 	stmdaeq	r1, {r1, r3, r4, r5, sl, ip, lr, pc}
 801ed90:	0802008f 	stmdaeq	r2, {r0, r1, r2, r3, r7}
 801ed94:	000004c3 	andeq	r0, r0, r3, asr #9
 801ed98:	00000002 	andeq	r0, r0, r2
 801ed9c:	0801d444 	stmdaeq	r1, {r2, r6, sl, ip, lr, pc}
 801eda0:	0801fef5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr, pc}
 801eda4:	00000199 	muleq	r0, r9, r1
 801eda8:	00000001 	andeq	r0, r0, r1
 801edac:	0801d44f 	stmdaeq	r1, {r0, r1, r2, r3, r6, sl, ip, lr, pc}
 801edb0:	0801fa80 	stmdaeq	r1, {r7, r9, fp, ip, sp, lr, pc}
 801edb4:	00000474 	andeq	r0, r0, r4, ror r4
 801edb8:	00000002 	andeq	r0, r0, r2
 801edbc:	0801d458 	stmdaeq	r1, {r3, r4, r6, sl, ip, lr, pc}
 801edc0:	0801f7b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, r9, sl, ip, sp, lr, pc}
 801edc4:	000002cc 	andeq	r0, r0, ip, asr #5
 801edc8:	00000002 	andeq	r0, r0, r2
 801edcc:	0801d460 	stmdaeq	r1, {r5, r6, sl, ip, lr, pc}
 801edd0:	0801f6b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, ip, sp, lr, pc}
 801edd4:	000000fe 	strdeq	r0, [r0], -lr
 801edd8:	00000002 	andeq	r0, r0, r2
 801eddc:	0801d46b 	stmdaeq	r1, {r0, r1, r3, r5, r6, sl, ip, lr, pc}
 801ede0:	0801f52d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, ip, sp, lr, pc}
 801ede4:	00000186 	andeq	r0, r0, r6, lsl #3
 801ede8:	00000002 	andeq	r0, r0, r2
 801edec:	0801d473 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, ip, lr, pc}
 801edf0:	0801f28f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r9, ip, sp, lr, pc}
 801edf4:	0000029d 	muleq	r0, sp, r2
 801edf8:	00000000 	andeq	r0, r0, r0
 801edfc:	0801d47e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, lr, pc}
 801ee00:	0801f037 	stmdaeq	r1, {r0, r1, r2, r4, r5, ip, sp, lr, pc}
 801ee04:	00000257 	andeq	r0, r0, r7, asr r2
 801ee08:	00000000 	andeq	r0, r0, r0
 801ee0c:	0801d488 	stmdaeq	r1, {r3, r7, sl, ip, lr, pc}
 801ee10:	0801ee1c 	stmdaeq	r1, {r2, r3, r4, r9, sl, fp, sp, lr, pc}
 801ee14:	0000021a 	andeq	r0, r0, sl, lsl r2
 801ee18:	00000000 	andeq	r0, r0, r0

0801ee1c <dmx_html>:
 801ee1c:	4f44213c 	svcmi	0x0044213c
 801ee20:	50595443 	subspl	r5, r9, r3, asr #8
 801ee24:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801ee28:	0a3e6c6d 	beq	8fb9fe4 <__init_array_end+0xf986d8>
 801ee2c:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801ee30:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801ee34:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801ee38:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801ee3c:	72206b6e 	eorvc	r6, r0, #112640	@ 0x1b800
 801ee40:	223d6c65 	eorscs	r6, sp, #25856	@ 0x6500
 801ee44:	6c797473 	cfldrdvs	mvd7, [r9], #-460	@ 0xfffffe34
 801ee48:	65687365 	strbvs	r7, [r8, #-869]!	@ 0xfffffc9b
 801ee4c:	20227465 	eorcs	r7, r2, r5, ror #8
 801ee50:	66657268 	strbtvs	r7, [r5], -r8, ror #4
 801ee54:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801ee58:	73656c79 	cmnvc	r5, #30976	@ 0x7900
 801ee5c:	7373632e 	cmnvc	r3, #-1207959552	@ 0xb8000000
 801ee60:	3e2f2022 	cdpcc	0, 2, cr2, cr15, cr2, {1}
 801ee64:	7469743c 	strbtvc	r7, [r9], #-1084	@ 0xfffffbc4
 801ee68:	443e656c 	ldrtmi	r6, [lr], #-1388	@ 0xfffffa94
 801ee6c:	2f3c584d 	svccs	0x003c584d
 801ee70:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 801ee74:	2f3c3e65 	svccs	0x003c3e65
 801ee78:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801ee7c:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801ee80:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801ee84:	65683c0a 	strbvs	r3, [r8, #-3082]!	@ 0xfffff3f6
 801ee88:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801ee8c:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	@ 0xffffff08
 801ee90:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801ee94:	4c646922 			@ <UNDEFINED> instruction: 0x4c646922
 801ee98:	22747369 	rsbscs	r7, r4, #-1543503871	@ 0xa4000001
 801ee9c:	752f3c3e 	strvc	r3, [pc, #-3134]!	@ 801e266 <RemoteConfig::s_TXT+0x72>
 801eea0:	2f3c3e6c 	svccs	0x003c3e6c
 801eea4:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801eea8:	0a3e7265 	beq	8fbb844 <__init_array_end+0xf99f38>
 801eeac:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801eeb0:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801eeb4:	6f206e6f 	svcvs	0x00206e6f
 801eeb8:	696c636e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801eebc:	223d6b63 	eorscs	r6, sp, #101376	@ 0x18c00
 801eec0:	72666572 	rsbvc	r6, r6, #478150656	@ 0x1c800000
 801eec4:	28687365 	stmdacs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
 801eec8:	523e2229 	eorspl	r2, lr, #-1879048190	@ 0x90000002
 801eecc:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801eed0:	2f3c6873 	svccs	0x003c6873
 801eed4:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801eed8:	3c3e6e6f 	ldccc	14, cr6, [lr], #-444	@ 0xfffffe44
 801eedc:	0a3e702f 	beq	8fbafa0 <__init_array_end+0xf99694>
 801eee0:	7669643c 			@ <UNDEFINED> instruction: 0x7669643c
 801eee4:	616c6320 	cmnvs	ip, r0, lsr #6
 801eee8:	223d7373 	eorscs	r7, sp, #-872415231	@ 0xcc000001
 801eeec:	74617473 	strbtvc	r7, [r1], #-1139	@ 0xfffffb8d
 801eef0:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	@ 0xfffffe34
 801eef4:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
 801eef8:	64692065 	strbtvs	r2, [r9], #-101	@ 0xffffff9b
 801eefc:	6469223d 	strbtvs	r2, [r9], #-573	@ 0xfffffdc3
 801ef00:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
 801ef04:	62202273 	eorvs	r2, r0, #805306375	@ 0x30000007
 801ef08:	6564726f 	strbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801ef0c:	31273d72 			@ <UNDEFINED> instruction: 0x31273d72
 801ef10:	2f3c3e27 	svccs	0x003c3e27
 801ef14:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
 801ef18:	2f3c3e65 	svccs	0x003c3e65
 801ef1c:	3e766964 	vsubcc.f16	s13, s12, s9	@ <UNPREDICTABLE>
 801ef20:	69643c0a 	stmdbvs	r4!, {r1, r3, sl, fp, ip, sp}^
 801ef24:	6c632076 	stclvs	0, cr2, [r3], #-472	@ 0xfffffe28
 801ef28:	3d737361 	ldclcc	3, cr7, [r3, #-388]!	@ 0xfffffe7c
 801ef2c:	726f7022 	rsbvc	r7, pc, #34	@ 0x22
 801ef30:	3e227374 	mcrcc	3, 1, r7, cr2, cr4, {3}
 801ef34:	6261743c 	rsbvs	r7, r1, #60, 8	@ 0x3c000000
 801ef38:	6920656c 	stmdbvs	r0!, {r2, r3, r5, r6, r8, sl, sp, lr}
 801ef3c:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801ef40:	726f5064 	rsbvc	r5, pc, #100	@ 0x64
 801ef44:	20227374 	eorcs	r7, r2, r4, ror r3
 801ef48:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 801ef4c:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 801ef50:	3c3e2731 	ldccc	7, cr2, [lr], #-196	@ 0xffffff3c
 801ef54:	6261742f 	rsbvs	r7, r1, #788529152	@ 0x2f000000
 801ef58:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	@ 0xfffffe50
 801ef5c:	7669642f 	strbtvc	r6, [r9], -pc, lsr #8
 801ef60:	663c0a3e 			@ <UNDEFINED> instruction: 0x663c0a3e
 801ef64:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	@ 0xfffff091
 801ef68:	753c3e72 	ldrvc	r3, [ip, #-3698]!	@ 0xfffff18e
 801ef6c:	6469206c 	strbtvs	r2, [r9], #-108	@ 0xffffff94
 801ef70:	6469223d 	strbtvs	r2, [r9], #-573	@ 0xfffffdc3
 801ef74:	73726556 	cmnvc	r2, #360710144	@ 0x15800000
 801ef78:	226e6f69 	rsbcs	r6, lr, #420	@ 0x1a4
 801ef7c:	752f3c3e 	strvc	r3, [pc, #-3134]!	@ 801e346 <RemoteConfig::s_TXT+0x152>
 801ef80:	2f3c3e6c 	svccs	0x003c3e6c
 801ef84:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801ef8c <dmx_html+0x170>
 801ef88:	0a3e7265 	beq	8fbb924 <__init_array_end+0xf9a018>
 801ef8c:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801ef90:	20747069 	rsbscs	r7, r4, r9, rrx
 801ef94:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801ef98:	61747322 	cmnvs	r4, r2, lsr #6
 801ef9c:	2e636974 			@ <UNDEFINED> instruction: 0x2e636974
 801efa0:	2022736a 	eorcs	r7, r2, sl, ror #6
 801efa4:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801efa8:	6574223d 	ldrbvs	r2, [r4, #-573]!	@ 0xfffffdc3
 801efac:	6a2f7478 	bvs	8bfc194 <__init_array_end+0xbda888>
 801efb0:	73617661 	cmnvc	r1, #101711872	@ 0x6100000
 801efb4:	70697263 	rsbvc	r7, r9, r3, ror #4
 801efb8:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801efbc:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801efc0:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801efc4:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801efc8:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801efcc:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801efd0:	6d64223d 	sfmvs	f2, 2, [r4, #-244]!	@ 0xffffff0c
 801efd4:	736a2e78 	cmnvc	sl, #120, 28	@ 0x780
 801efd8:	79742022 	ldmdbvc	r4!, {r1, r5, sp}^
 801efdc:	223d6570 	eorscs	r6, sp, #112, 10	@ 0x1c000000
 801efe0:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
 801efe4:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801efe8:	72637361 	rsbvc	r7, r3, #-2080374783	@ 0x84000001
 801efec:	22747069 	rsbscs	r7, r4, #105	@ 0x69
 801eff0:	732f3c3e 			@ <UNDEFINED> instruction: 0x732f3c3e
 801eff4:	70697263 	rsbvc	r7, r9, r3, ror #4
 801eff8:	3c0a3e74 	stccc	14, cr3, [sl], {116}	@ 0x74
 801effc:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f000:	6c3e7470 	cfldrsvs	mvf7, [lr], #-448	@ 0xfffffe40
 801f004:	28747369 	ldmdacs	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 801f008:	65763b29 	ldrbvs	r3, [r6, #-2857]!	@ 0xfffff4d7
 801f00c:	6f697372 	svcvs	0x00697372
 801f010:	3b29286e 	blcc	8a691d0 <__init_array_end+0xa478c4>
 801f014:	72666572 	rsbvc	r6, r6, #478150656	@ 0x1c800000
 801f018:	28687365 	stmdacs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
 801f01c:	732f3c29 			@ <UNDEFINED> instruction: 0x732f3c29
 801f020:	70697263 	rsbvc	r7, r9, r3, ror #4
 801f024:	3c0a3e74 	stccc	14, cr3, [sl], {116}	@ 0x74
 801f028:	646f622f 	strbtvs	r6, [pc], #-559	@ 801f030 <dmx_html+0x214>
 801f02c:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801f030:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	@ 0xffffff44
 801f034:	 	stccc	14, cr3, [r0], {108}	@ 0x6c

0801f037 <time_html>:
 801f037:	4f44213c 	svcmi	0x0044213c
 801f03b:	50595443 	subspl	r5, r9, r3, asr #8
 801f03f:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801f043:	0a3e6c6d 	beq	8fba1ff <__init_array_end+0xf988f3>
 801f047:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801f04b:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801f04f:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801f053:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801f057:	72206b6e 	eorvc	r6, r0, #112640	@ 0x1b800
 801f05b:	223d6c65 	eorscs	r6, sp, #25856	@ 0x6500
 801f05f:	6c797473 	cfldrdvs	mvd7, [r9], #-460	@ 0xfffffe34
 801f063:	65687365 	strbvs	r7, [r8, #-869]!	@ 0xfffffc9b
 801f067:	20227465 	eorcs	r7, r2, r5, ror #8
 801f06b:	66657268 	strbtvs	r7, [r5], -r8, ror #4
 801f06f:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801f073:	73656c79 	cmnvc	r5, #30976	@ 0x7900
 801f077:	7373632e 	cmnvc	r3, #-1207959552	@ 0xb8000000
 801f07b:	3e2f2022 	cdpcc	0, 2, cr2, cr15, cr2, {1}
 801f07f:	7469743c 	strbtvc	r7, [r9], #-1084	@ 0xfffffbc4
 801f083:	4e3e656c 	cdpmi	5, 3, cr6, cr14, cr12, {3}
 801f087:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801f08b:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801f08f:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801f093:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801f097:	65682f3c 	strbvs	r2, [r8, #-3900]!	@ 0xfffff0c4
 801f09b:	0a3e6461 	beq	8fb8227 <__init_array_end+0xf9691b>
 801f09f:	646f623c 	strbtvs	r6, [pc], #-572	@ 801f0a7 <time_html+0x70>
 801f0a3:	3c0a3e79 	stccc	14, cr3, [sl], {121}	@ 0x79
 801f0a7:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801f0ab:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801f0af:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801f0b3:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801f0b7:	73694c64 	cmnvc	r9, #100, 24	@ 0x6400
 801f0bb:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801f0bf:	3e6c752f 	cdpcc	5, 6, cr7, cr12, cr15, {1}
 801f0c3:	65682f3c 	strbvs	r2, [r8, #-3900]!	@ 0xfffff0c4
 801f0c7:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801f0cb:	703c0a3e 	eorsvc	r0, ip, lr, lsr sl
 801f0cf:	75623c3e 	strbvc	r3, [r2, #-3134]!	@ 0xfffff3c2
 801f0d3:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801f0d7:	636e6f20 	cmnvs	lr, #32, 30	@ 0x80
 801f0db:	6b63696c 	blvs	98f9693 <__init_array_end+0x18d7d87>
 801f0df:	6572223d 	ldrbvs	r2, [r2, #-573]!	@ 0xfffffdc3
 801f0e3:	73657266 	cmnvc	r5, #1610612742	@ 0x60000006
 801f0e7:	22292868 	eorcs	r2, r9, #104, 16	@ 0x680000
 801f0eb:	6665523e 			@ <UNDEFINED> instruction: 0x6665523e
 801f0ef:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801f0f3:	75622f3c 	strbvc	r2, [r2, #-3900]!	@ 0xfffff0c4
 801f0f7:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801f0fb:	702f3c3e 	eorvc	r3, pc, lr, lsr ip	@ <UNPREDICTABLE>
 801f0ff:	703c0a3e 	eorsvc	r0, ip, lr, lsr sl
 801f103:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801f107:	646f6e22 	strbtvs	r6, [pc], #-3618	@ 801f10f <time_html+0xd8>
 801f10b:	6d695465 	cfstrdvs	mvd5, [r9, #-404]!	@ 0xfffffe6c
 801f10f:	4e3e2265 	cdpmi	2, 3, cr2, cr14, cr5, {3}
 801f113:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801f117:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
 801f11b:	6c697720 	stclvs	7, cr7, [r9], #-128	@ 0xffffff80
 801f11f:	6562206c 	strbvs	r2, [r2, #-108]!	@ 0xffffff94
 801f123:	73696420 	cmnvc	r9, #32, 8	@ 0x20000000
 801f127:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801f12b:	68206465 	stmdavs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 801f12f:	3c657265 	sfmcc	f7, 2, [r5], #-404	@ 0xfffffe6c
 801f133:	0a3e702f 	beq	8fbb1f7 <__init_array_end+0xf998eb>
 801f137:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801f13b:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801f13f:	6f206e6f 	svcvs	0x00206e6f
 801f143:	696c636e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801f147:	223d6b63 	eorscs	r6, sp, #101376	@ 0x18c00
 801f14b:	636e7973 	cmnvs	lr, #1884160	@ 0x1cc000
 801f14f:	68746957 	ldmdavs	r4!, {r0, r1, r2, r4, r6, r8, fp, sp, lr}^
 801f153:	61636f4c 	cmnvs	r3, ip, asr #30
 801f157:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	@ 0xfffffe50
 801f15b:	22292865 	eorcs	r2, r9, #6619136	@ 0x650000
 801f15f:	6e79533e 	mrcvs	3, 3, r5, cr9, cr14, {1}
 801f163:	69772063 	ldmdbvs	r7!, {r0, r1, r5, r6, sp}^
 801f167:	4c206874 	stcmi	8, cr6, [r0], #-464	@ 0xfffffe30
 801f16b:	6c61636f 	stclvs	3, cr6, [r1], #-444	@ 0xfffffe44
 801f16f:	6d695420 	cfstrdvs	mvd5, [r9, #-128]!	@ 0xffffff80
 801f173:	622f3c65 	eorvs	r3, pc, #25856	@ 0x6500
 801f177:	6f747475 	svcvs	0x00747475
 801f17b:	2f3c3e6e 	svccs	0x003c3e6e
 801f17f:	3c0a3e70 	stccc	14, cr3, [sl], {112}	@ 0x70
 801f183:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801f18b <time_html+0x154>
 801f187:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801f18b:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801f18f:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801f193:	72655664 	rsbvc	r5, r5, #100, 12	@ 0x6400000
 801f197:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801f19b:	2f3c3e22 	svccs	0x003c3e22
 801f19f:	3c3e6c75 	ldccc	12, cr6, [lr], #-468	@ 0xfffffe2c
 801f1a3:	6f6f662f 	svcvs	0x006f662f
 801f1a7:	3e726574 	mrccc	5, 3, r6, cr2, cr4, {3}
 801f1ab:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801f1af:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801f1b3:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801f1b7:	7473223d 	ldrbtvc	r2, [r3], #-573	@ 0xfffffdc3
 801f1bb:	63697461 	cmnvs	r9, #1627389952	@ 0x61000000
 801f1bf:	22736a2e 	rsbscs	r6, r3, #188416	@ 0x2e000
 801f1c3:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801f1c7:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801f1cb:	2f747865 	svccs	0x00747865
 801f1cf:	6176616a 	cmnvs	r6, sl, ror #2
 801f1d3:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f1d7:	3e227470 	mcrcc	4, 1, r7, cr2, cr0, {3}
 801f1db:	63732f3c 	cmnvs	r3, #60, 30	@ 0xf0
 801f1df:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801f1e3:	733c0a3e 	teqvc	ip, #253952	@ 0x3e000
 801f1e7:	70697263 	rsbvc	r7, r9, r3, ror #4
 801f1eb:	72732074 	rsbsvc	r2, r3, #116	@ 0x74
 801f1ef:	64223d63 	strtvs	r3, [r2], #-3427	@ 0xfffff29d
 801f1f3:	2e657461 	cdpcs	4, 6, cr7, cr5, cr1, {3}
 801f1f7:	2022736a 	eorcs	r7, r2, sl, ror #6
 801f1fb:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 801f1ff:	6574223d 	ldrbvs	r2, [r4, #-573]!	@ 0xfffffdc3
 801f203:	6a2f7478 	bvs	8bfc3eb <__init_array_end+0xbdaadf>
 801f207:	73617661 	cmnvc	r1, #101711872	@ 0x6100000
 801f20b:	70697263 	rsbvc	r7, r9, r3, ror #4
 801f20f:	3c3e2274 	lfmcc	f2, 4, [lr], #-464	@ 0xfffffe30
 801f213:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801f217:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801f21b:	63733c0a 	cmnvs	r3, #2560	@ 0xa00
 801f21f:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801f223:	63727320 	cmnvs	r2, #32, 6	@ 0x80000000
 801f227:	6974223d 	ldmdbvs	r4!, {r0, r2, r3, r4, r5, r9, sp}^
 801f22b:	6a2e656d 	bvs	8bb87e7 <__init_array_end+0xb96edb>
 801f22f:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801f233:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801f237:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801f23b:	616a2f74 	smcvs	41716	@ 0xa2f4
 801f23f:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801f243:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801f247:	2f3c3e22 	svccs	0x003c3e22
 801f24b:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f24f:	0a3e7470 	beq	8fbc417 <__init_array_end+0xf9ab0b>
 801f253:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801f257:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801f25b:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801f25f:	763b2928 	ldrtvc	r2, [fp], -r8, lsr #18
 801f263:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801f267:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801f26b:	6665723b 			@ <UNDEFINED> instruction: 0x6665723b
 801f26f:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801f273:	2f3c2928 	svccs	0x003c2928
 801f277:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f27b:	0a3e7470 	beq	8fbc443 <__init_array_end+0xf9ab37>
 801f27f:	6f622f3c 	svcvs	0x00622f3c
 801f283:	0a3e7964 	beq	8fbd81b <__init_array_end+0xf9bf0f>
 801f287:	74682f3c 	strbtvc	r2, [r8], #-3900	@ 0xfffff0c4
 801f28b:	003e6c6d 	eorseq	r6, lr, sp, ror #24

0801f28f <index_html>:
 801f28f:	4f44213c 	svcmi	0x0044213c
 801f293:	50595443 	subspl	r5, r9, r3, asr #8
 801f297:	74682045 	strbtvc	r2, [r8], #-69	@ 0xffffffbb
 801f29b:	0a3e6c6d 	beq	8fba457 <__init_array_end+0xf98b4b>
 801f29f:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	@ 0xffffff10
 801f2a3:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	@ 0x6c
 801f2a7:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801f2ab:	6c3c0a3e 			@ <UNDEFINED> instruction: 0x6c3c0a3e
 801f2af:	206b6e69 	rsbcs	r6, fp, r9, ror #28
 801f2b3:	3d6c6572 	cfstr64cc	mvdx6, [ip, #-456]!	@ 0xfffffe38
 801f2b7:	79747322 	ldmdbvc	r4!, {r1, r5, r8, r9, ip, sp, lr}^
 801f2bb:	6873656c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, sp, lr}^
 801f2bf:	22746565 	rsbscs	r6, r4, #423624704	@ 0x19400000
 801f2c3:	65726820 	ldrbvs	r6, [r2, #-2080]!	@ 0xfffff7e0
 801f2c7:	73223d66 			@ <UNDEFINED> instruction: 0x73223d66
 801f2cb:	656c7974 	strbvs	r7, [ip, #-2420]!	@ 0xfffff68c
 801f2cf:	73632e73 	cmnvc	r3, #1840	@ 0x730
 801f2d3:	2f202273 	svccs	0x00202273
 801f2d7:	743c0a3e 	ldrtvc	r0, [ip], #-2622	@ 0xfffff5c2
 801f2db:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801f2df:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801f2e7 <index_html+0x58>
 801f2e3:	656c7469 	strbvs	r7, [ip, #-1129]!	@ 0xfffffb97
 801f2e7:	2f3c0a3e 	svccs	0x003c0a3e
 801f2eb:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801f2ef:	623c0a3e 	eorsvs	r0, ip, #253952	@ 0x3e000
 801f2f3:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801f2f7:	65683c0a 	strbvs	r3, [r8, #-3082]!	@ 0xfffff3f6
 801f2fb:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801f2ff:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	@ 0xffffff08
 801f303:	3d646920 			@ <UNDEFINED> instruction: 0x3d646920
 801f307:	4c646922 			@ <UNDEFINED> instruction: 0x4c646922
 801f30b:	22747369 	rsbscs	r7, r4, #-1543503871	@ 0xa4000001
 801f30f:	752f3c3e 	strvc	r3, [pc, #-3134]!	@ 801e6d9 <RemoteConfig::s_TXT+0x4e5>
 801f313:	2f3c3e6c 	svccs	0x003c3e6c
 801f317:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 801f31b:	0a3e7265 	beq	8fbbcb7 <__init_array_end+0xf9a3ab>
 801f31f:	3c3e703c 	ldccc	0, cr7, [lr], #-240	@ 0xffffff10
 801f323:	656c6573 	strbvs	r6, [ip, #-1395]!	@ 0xfffffa8d
 801f327:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801f32b:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801f32f:	72694464 	rsbvc	r4, r9, #100, 8	@ 0x64000000
 801f333:	6f746365 	svcvs	0x00746365
 801f337:	20227972 	eorcs	r7, r2, r2, ror r9
 801f33b:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801f33f:	65676e61 	strbvs	r6, [r7, #-3681]!	@ 0xfffff19f
 801f343:	6567223d 	strbvs	r2, [r7, #-573]!	@ 0xfffffdc3
 801f347:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801f34b:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801f34f:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801f353:	65756c61 	ldrbvs	r6, [r5, #-3169]!	@ 0xfffff39f
 801f357:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	@ 0xffffff5c
 801f35b:	6c65732f 	stclvs	3, cr7, [r5], #-188	@ 0xffffff44
 801f35f:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801f363:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801f367:	61743c0a 	cmnvs	r4, sl, lsl #24
 801f36b:	20656c62 	rsbcs	r6, r5, r2, ror #24
 801f36f:	223d6469 	eorscs	r6, sp, #1761607680	@ 0x69000000
 801f373:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801f377:	62202274 	eorvs	r2, r0, #116, 4	@ 0x40000007
 801f37b:	6564726f 	strbvs	r7, [r4, #-623]!	@ 0xfffffd91
 801f37f:	31273d72 			@ <UNDEFINED> instruction: 0x31273d72
 801f383:	2f3c3e27 	svccs	0x003c3e27
 801f387:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
 801f38b:	3c0a3e65 	stccc	14, cr3, [sl], {101}	@ 0x65
 801f38f:	746f6f66 	strbtvc	r6, [pc], #-3942	@ 801f397 <index_html+0x108>
 801f393:	3c3e7265 	lfmcc	f7, 4, [lr], #-404	@ 0xfffffe6c
 801f397:	69206c75 	stmdbvs	r0!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}
 801f39b:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801f39f:	72655664 	rsbvc	r5, r5, #100, 12	@ 0x6400000
 801f3a3:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801f3a7:	2f3c3e22 	svccs	0x003c3e22
 801f3ab:	3c3e6c75 	ldccc	12, cr6, [lr], #-468	@ 0xfffffe2c
 801f3af:	6f6f662f 	svcvs	0x006f662f
 801f3b3:	3e726574 	mrccc	5, 3, r6, cr2, cr4, {3}
 801f3b7:	69643c0a 	stmdbvs	r4!, {r1, r3, sl, fp, ip, sp}^
 801f3bb:	3c0a3e76 	stccc	14, cr3, [sl], {118}	@ 0x76
 801f3bf:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801f3c3:	69206e6f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801f3c7:	6c223d64 	stcvs	13, cr3, [r2], #-400	@ 0xfffffe70
 801f3cb:	7461636f 	strbtvc	r6, [r1], #-879	@ 0xfffffc91
 801f3cf:	74754265 	ldrbtvc	r4, [r5], #-613	@ 0xfffffd9b
 801f3d3:	226e6f74 	rsbcs	r6, lr, #116, 30	@ 0x1d0
 801f3d7:	616c6320 	cmnvs	ip, r0, lsr #6
 801f3db:	223d7373 	eorscs	r7, sp, #-872415231	@ 0xcc000001
 801f3df:	63616e69 	cmnvs	r1, #1680	@ 0x690
 801f3e3:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 801f3e7:	6e6f2022 	cdpvs	0, 6, cr2, cr15, cr2, {1}
 801f3eb:	63696c63 	cmnvs	r9, #25344	@ 0x6300
 801f3ef:	6c223d6b 	stcvs	13, cr3, [r2], #-428	@ 0xfffffe54
 801f3f3:	7461636f 	strbtvc	r6, [r1], #-879	@ 0xfffffc91
 801f3f7:	22292865 	eorcs	r2, r9, #6619136	@ 0x650000
 801f3fb:	636f4c3e 	cmnvs	pc, #15872	@ 0x3e00
 801f3ff:	20657461 	rsbcs	r7, r5, r1, ror #8
 801f403:	3c66664f 	stclcc	6, cr6, [r6], #-316	@ 0xfffffec4
 801f407:	7475622f 	ldrbtvc	r6, [r5], #-559	@ 0xfffffdd1
 801f40b:	3e6e6f74 	mcrcc	15, 3, r6, cr14, cr4, {3}
 801f40f:	75623c0a 	strbvc	r3, [r2, #-3082]!	@ 0xfffff3f6
 801f413:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 801f417:	636e6f20 	cmnvs	lr, #32, 30	@ 0x80
 801f41b:	6b63696c 	blvs	98f99d3 <__init_array_end+0x18d80c7>
 801f41f:	6572223d 	ldrbvs	r2, [r2, #-573]!	@ 0xfffffdc3
 801f423:	746f6f62 	strbtvc	r6, [pc], #-3938	@ 801f42b <index_html+0x19c>
 801f427:	3e222928 	vmulcc.f16	s4, s4, s17	@ <UNPREDICTABLE>
 801f42b:	6f626552 	svcvs	0x00626552
 801f42f:	2f3c746f 	svccs	0x003c746f
 801f433:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801f437:	0a3e6e6f 	beq	8fbadfb <__init_array_end+0xf994ef>
 801f43b:	69642f3c 	stmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801f43f:	3c0a3e76 	stccc	14, cr3, [sl], {118}	@ 0x76
 801f443:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f447:	73207470 			@ <UNDEFINED> instruction: 0x73207470
 801f44b:	223d6372 	eorscs	r6, sp, #-939524095	@ 0xc8000001
 801f44f:	74617473 	strbtvc	r7, [r1], #-1139	@ 0xfffffb8d
 801f453:	6a2e6369 	bvs	8bb81ff <__init_array_end+0xb968f3>
 801f457:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801f45b:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801f45f:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801f463:	616a2f74 	smcvs	41716	@ 0xa2f4
 801f467:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801f46b:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801f46f:	2f3c3e22 	svccs	0x003c3e22
 801f473:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f477:	0a3e7470 	beq	8fbc63f <__init_array_end+0xf9ad33>
 801f47b:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801f47f:	20747069 	rsbscs	r7, r4, r9, rrx
 801f483:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801f487:	646e6922 	strbtvs	r6, [lr], #-2338	@ 0xfffff6de
 801f48b:	6a2e7865 	bvs	8bbd627 <__init_array_end+0xb9bd1b>
 801f48f:	74202273 	strtvc	r2, [r0], #-627	@ 0xfffffd8d
 801f493:	3d657079 	stclcc	0, cr7, [r5, #-484]!	@ 0xfffffe1c
 801f497:	78657422 	stmdavc	r5!, {r1, r5, sl, ip, sp, lr}^
 801f49b:	616a2f74 	smcvs	41716	@ 0xa2f4
 801f49f:	63736176 	cmnvs	r3, #-2147483619	@ 0x8000001d
 801f4a3:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801f4a7:	2f3c3e22 	svccs	0x003c3e22
 801f4ab:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f4af:	0a3e7470 	beq	8fbc677 <__init_array_end+0xf9ad6b>
 801f4b3:	7263733c 	rsbvc	r7, r3, #60, 6	@ 0xf0000000
 801f4b7:	20747069 	rsbscs	r7, r4, r9, rrx
 801f4bb:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	@ 0xfffffe34
 801f4bf:	66656422 	strbtvs	r6, [r5], -r2, lsr #8
 801f4c3:	746c7561 	strbtvc	r7, [ip], #-1377	@ 0xfffffa9f
 801f4c7:	22736a2e 	rsbscs	r6, r3, #188416	@ 0x2e000
 801f4cb:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801f4cf:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801f4d3:	2f747865 	svccs	0x00747865
 801f4d7:	6176616a 	cmnvs	r6, sl, ror #2
 801f4db:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 801f4df:	3e227470 	mcrcc	4, 1, r7, cr2, cr0, {3}
 801f4e3:	63732f3c 	cmnvs	r3, #60, 30	@ 0xf0
 801f4e7:	74706972 	ldrbtvc	r6, [r0], #-2418	@ 0xfffff68e
 801f4eb:	733c0a3e 	teqvc	ip, #253952	@ 0x3e000
 801f4ef:	70697263 	rsbvc	r7, r9, r3, ror #4
 801f4f3:	696c3e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, ip, sp}^
 801f4f7:	29287473 	stmdbcs	r8!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 801f4fb:	7265763b 	rsbvc	r7, r5, #61865984	@ 0x3b00000
 801f4ff:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 801f503:	643b2928 	ldrtvs	r2, [fp], #-2344	@ 0xfffff6d8
 801f507:	63657269 	cmnvs	r5, #-1879048186	@ 0x90000006
 801f50b:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801f50f:	3c3b2928 			@ <UNDEFINED> instruction: 0x3c3b2928
 801f513:	7263732f 	rsbvc	r7, r3, #-1140850688	@ 0xbc000000
 801f517:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801f51b:	622f3c0a 	eorvs	r3, pc, #2560	@ 0xa00
 801f51f:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801f523:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	@ <UNPREDICTABLE>
 801f527:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801f52b:	 	cmnvc	r1, #10

0801f52d <time_js>:
 801f52d:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801f531:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801f535:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801f539:	72206e6f 	eorvc	r6, r0, #1776	@ 0x6f0
 801f53d:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801f541:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 801f545:	6c0a7b20 			@ <UNDEFINED> instruction: 0x6c0a7b20
 801f549:	64207465 	strtvs	r7, [r0], #-1125	@ 0xfffffb9b
 801f54d:	20617461 	rsbcs	r7, r1, r1, ror #8
 801f551:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801f555:	20746961 	rsbscs	r6, r4, r1, ror #18
 801f559:	4a746567 	bmi	9d38afd <__init_array_end+0x1d171f1>
 801f55d:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801f561:	6d697427 	cfstrdvs	mvd7, [r9, #-156]!	@ 0xffffff64
 801f565:	74616465 	strbtvc	r6, [r1], #-1125	@ 0xfffffb9b
 801f569:	0a292765 	beq	8a69305 <__init_array_end+0xa479f9>
 801f56d:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801f571:	6f6e2074 	svcvs	0x006e2074
 801f575:	3d206564 	cfstr32cc	mvfx6, [r0, #-400]!	@ 0xfffffe70
 801f579:	726f6620 	rsbvc	r6, pc, #32, 12	@ 0x2000000
 801f57d:	4474616d 	ldrbtmi	r6, [r4], #-365	@ 0xfffffe93
 801f581:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
 801f585:	28656d69 	stmdacs	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
 801f589:	2077656e 	rsbscs	r6, r7, lr, ror #10
 801f58d:	65746144 	ldrbvs	r6, [r4, #-324]!	@ 0xfffffebc
 801f591:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801f595:	61642e61 	cmnvs	r4, r1, ror #28
 801f599:	29296574 	stmdbcs	r9!, {r2, r4, r5, r6, r8, sl, sp, lr}
 801f59d:	636f640a 	cmnvs	pc, #167772160	@ 0xa000000
 801f5a1:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801f5a5:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801f5a9:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801f5ad:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801f5b1:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801f5b5:	6f6e2728 	svcvs	0x006e2728
 801f5b9:	69546564 	ldmdbvs	r4, {r2, r5, r6, r8, sl, sp, lr}^
 801f5bd:	2927656d 	stmdbcs	r7!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 801f5c1:	7865742e 	stmdavc	r5!, {r1, r2, r3, r5, sl, ip, sp, lr}^
 801f5c5:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
 801f5c9:	746e6574 	strbtvc	r6, [lr], #-1396	@ 0xfffffa8c
 801f5cd:	60203d20 	eorvs	r3, r0, r0, lsr #26
 801f5d1:	65646f4e 	strbvs	r6, [r4, #-3918]!	@ 0xfffff0b2
 801f5d5:	6d695420 	cfstrdvs	mvd5, [r9, #-128]!	@ 0xffffff80
 801f5d9:	24203a65 	strtcs	r3, [r0], #-2661	@ 0xfffff59b
 801f5dd:	646f6e7b 	strbtvs	r6, [pc], #-3707	@ 801f5e5 <time_js+0xb8>
 801f5e1:	0a607d65 	beq	983eb7d <__init_array_end+0x181d271>
 801f5e5:	73610a7d 	cmnvc	r1, #512000	@ 0x7d000
 801f5e9:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801f5ed:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801f5f1:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801f5f5:	6e797320 	cdpvs	3, 7, cr7, cr9, cr0, {1}
 801f5f9:	74695763 	strbtvc	r5, [r9], #-1891	@ 0xfffff89d
 801f5fd:	636f4c68 	cmnvs	pc, #104, 24	@ 0x6800
 801f601:	69546c61 	ldmdbvs	r4, {r0, r5, r6, sl, fp, sp, lr}^
 801f605:	2928656d 	stmdbcs	r8!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
 801f609:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 801f60d:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801f611:	646f6e20 	strbtvs	r6, [pc], #-3616	@ 801f619 <time_js+0xec>
 801f615:	203d2065 	eorscs	r2, sp, r5, rrx
 801f619:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	@ 0xfffffe68
 801f61d:	61447461 	cmpvs	r4, r1, ror #8
 801f621:	69546574 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
 801f625:	6e28656d 	cfsh64vs	mvdx6, mvdx8, #61
 801f629:	44207765 	strtmi	r7, [r0], #-1893	@ 0xfffff89b
 801f62d:	28657461 	stmdacs	r5!, {r0, r5, r6, sl, ip, sp, lr}^
 801f631:	640a2929 	strvs	r2, [sl], #-2345	@ 0xfffff6d7
 801f635:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801f639:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801f63d:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801f641:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801f645:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801f649:	27286449 	strcs	r6, [r8, -r9, asr #8]!
 801f64d:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 801f651:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
 801f655:	742e2927 	strtvc	r2, [lr], #-2343	@ 0xfffff6d9
 801f659:	43747865 	cmnmi	r4, #6619136	@ 0x650000
 801f65d:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801f661:	3d20746e 	cfstrscc	mvf7, [r0, #-440]!	@ 0xfffffe48
 801f665:	6f4e6020 	svcvs	0x004e6020
 801f669:	54206564 	strtpl	r6, [r0], #-1380	@ 0xfffffa9c
 801f66d:	3a656d69 	bcc	997ac19 <__init_array_end+0x195930d>
 801f671:	6e7b2420 	cdpvs	4, 7, cr2, cr11, cr0, {1}
 801f675:	7d65646f 	cfstrdvc	mvd6, [r5, #-444]!	@ 0xfffffe44
 801f679:	6f630a60 	svcvs	0x00630a60
 801f67d:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801f681:	61746164 	cmnvs	r4, r4, ror #2
 801f685:	7b203d20 	blvc	882eb0d <__init_array_end+0x80d201>
 801f689:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801f68d:	6e203a65 	vnmulvs.f32	s6, s0, s11
 801f691:	2065646f 	rsbcs	r6, r5, pc, ror #8
 801f695:	77610a7d 			@ <UNDEFINED> instruction: 0x77610a7d
 801f699:	20746961 	rsbscs	r6, r4, r1, ror #18
 801f69d:	74736f70 	ldrbtvc	r6, [r3], #-3952	@ 0xfffff090
 801f6a1:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801f6a5:	720a2961 	andvc	r2, sl, #1589248	@ 0x184000
 801f6a9:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 801f6ad:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 801f6b1:	 	strvs	r7, [r0], -sl, lsl #26

0801f6b4 <default_js>:
 801f6b4:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801f6b8:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801f6bc:	73657220 	cmnvc	r5, #32, 4
 801f6c0:	73287465 			@ <UNDEFINED> instruction: 0x73287465
 801f6c4:	20296c65 	eorcs	r6, r9, r5, ror #24
 801f6c8:	61760a7b 	cmnvs	r6, fp, ror sl
 801f6cc:	20642072 	rsbcs	r2, r4, r2, ror r0
 801f6d0:	7d7b203d 	ldclvc	0, cr2, [fp, #-244]!	@ 0xffffff0c
 801f6d4:	61760a3b 	cmnvs	r6, fp, lsr sl
 801f6d8:	756f2072 	strbvc	r2, [pc, #-114]!	@ 801f66e <time_js+0x141>
 801f6dc:	203d2074 	eorscs	r2, sp, r4, ror r0
 801f6e0:	0a3b7d7b 	beq	8efecd4 <__init_array_end+0xedd3c8>
 801f6e4:	5b74756f 	blpl	9d3cca8 <__init_array_end+0x1d1b39c>
 801f6e8:	5d6c6573 	cfstr64pl	mvdx6, [ip, #-460]!	@ 0xfffffe34
 801f6ec:	64203d20 	strtvs	r3, [r0], #-3360	@ 0xfffff2e0
 801f6f0:	61760a3b 	cmnvs	r6, fp, lsr sl
 801f6f4:	61702072 	cmnvs	r0, r2, ror r0
 801f6f8:	616f6c79 	smcvs	63177	@ 0xf6c9
 801f6fc:	203d2064 	eorscs	r2, sp, r4, rrx
 801f700:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801f704:	7274732e 	rsbsvc	r7, r4, #-1207959552	@ 0xb8000000
 801f708:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 801f70c:	6f287966 	svcvs	0x00287966
 801f710:	3b297475 	blcc	8a7c8ec <__init_array_end+0xa5afe0>
 801f714:	7465660a 	strbtvc	r6, [r5], #-1546	@ 0xfffff9f6
 801f718:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 801f71c:	6f736a2f 	svcvs	0x00736a2f
 801f720:	202c276e 	eorcs	r2, ip, lr, ror #14
 801f724:	656d0a7b 	strbvs	r0, [sp, #-2683]!	@ 0xfffff585
 801f728:	646f6874 	strbtvs	r6, [pc], #-2164	@ 801f730 <default_js+0x7c>
 801f72c:	5027203a 	eorpl	r2, r7, sl, lsr r0
 801f730:	2754534f 	ldrbcs	r5, [r4, -pc, asr #6]
 801f734:	65680a2c 	strbvs	r0, [r8, #-2604]!	@ 0xfffff5d4
 801f738:	72656461 	rsbvc	r6, r5, #1627389952	@ 0x61000000
 801f73c:	7b203a73 	blvc	882e110 <__init_array_end+0x80c804>
 801f740:	6f43270a 	svcvs	0x0043270a
 801f744:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801f748:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801f74c:	3a276570 	bcc	89f8d14 <__init_array_end+0x9d7408>
 801f750:	70612720 	rsbvc	r2, r1, r0, lsr #14
 801f754:	63696c70 	cmnvs	r9, #112, 24	@ 0x7000
 801f758:	6f697461 	svcvs	0x00697461
 801f75c:	736a2f6e 	cmnvc	sl, #440	@ 0x1b8
 801f760:	0a276e6f 	beq	89fb124 <__init_array_end+0x9d9818>
 801f764:	620a2c7d 	andvs	r2, sl, #32000	@ 0x7d00
 801f768:	3a79646f 	bcc	9e7892c <__init_array_end+0x1e57020>
 801f76c:	79617020 	stmdbvc	r1!, {r5, ip, sp, lr}^
 801f770:	64616f6c 	strbtvs	r6, [r1], #-3948	@ 0xfffff094
 801f774:	20297d0a 	eorcs	r7, r9, sl, lsl #26
 801f778:	6568742e 	strbvs	r7, [r8, #-1070]!	@ 0xfffffbd2
 801f77c:	6572286e 	ldrbvs	r2, [r2, #-2158]!	@ 0xfffff792
 801f780:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 801f784:	3d206573 	cfstr32cc	mvfx6, [r0, #-460]!	@ 0xfffffe34
 801f788:	697b203e 	ldmdbvs	fp!, {r1, r2, r3, r4, r5, sp}^
 801f78c:	72282066 	eorvc	r2, r8, #102	@ 0x66
 801f790:	6f707365 	svcvs	0x00707365
 801f794:	2e65736e 	cdpcs	3, 6, cr7, cr5, cr14, {3}
 801f798:	20296b6f 	eorcs	r6, r9, pc, ror #22
 801f79c:	6567207b 	strbvs	r2, [r7, #-123]!	@ 0xffffff85
 801f7a0:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801f7a4:	65732874 	ldrbvs	r2, [r3, #-2164]!	@ 0xfffff78c
 801f7a8:	203b296c 	eorscs	r2, fp, ip, ror #18
 801f7ac:	3b297d7d 	blcc	8a7eda8 <__init_array_end+0xa5d49c>
 801f7b0:	 	strvs	r7, [r0], -sl, lsl #26

0801f7b3 <date_js>:
 801f7b3:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801f7b7:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801f7bb:	726f6620 	rsbvc	r6, pc, #32, 12	@ 0x2000000
 801f7bf:	4474616d 	ldrbtmi	r6, [r4], #-365	@ 0xfffffe93
 801f7c3:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
 801f7c7:	28656d69 	stmdacs	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
 801f7cb:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801f7cf:	0a7b2029 	beq	9ee787b <__init_array_end+0x1ec5f6f>
 801f7d3:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801f7d7:	65792074 	ldrbvs	r2, [r9, #-116]!	@ 0xffffff8c
 801f7db:	3d207261 	sfmcc	f7, 4, [r0, #-388]!	@ 0xfffffe7c
 801f7df:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801f7e3:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801f7e7:	6c754674 	ldclvs	6, cr4, [r5], #-464	@ 0xfffffe30
 801f7eb:	6165596c 	cmnvs	r5, ip, ror #18
 801f7ef:	3b292872 	blcc	8a699bf <__init_array_end+0xa480b3>
 801f7f3:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801f7f7:	6d207473 	cfstrsvs	mvf7, [r0, #-460]!	@ 0xfffffe34
 801f7fb:	3d206e6f 	stccc	14, cr6, [r0, #-444]!	@ 0xfffffe44
 801f7ff:	30272820 	eorcc	r2, r7, r0, lsr #16
 801f803:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801f807:	74616428 	strbtvc	r6, [r1], #-1064	@ 0xfffffbd8
 801f80b:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801f80f:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
 801f813:	29286874 	stmdbcs	r8!, {r2, r4, r5, r6, fp, sp, lr}
 801f817:	31202b20 			@ <UNDEFINED> instruction: 0x31202b20
 801f81b:	732e2929 			@ <UNDEFINED> instruction: 0x732e2929
 801f81f:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801f823:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801f827:	6f630a3b 	svcvs	0x00630a3b
 801f82b:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801f82f:	20796164 	rsbscs	r6, r9, r4, ror #2
 801f833:	2728203d 			@ <UNDEFINED> instruction: 0x2728203d
 801f837:	2b202730 	blcs	88294ff <__init_array_end+0x807bf3>
 801f83b:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801f83f:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801f843:	74614474 	strbtvc	r4, [r1], #-1140	@ 0xfffffb8c
 801f847:	29292865 	stmdbcs	r9!, {r0, r2, r5, r6, fp, sp}
 801f84b:	696c732e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 801f84f:	2d286563 	cfstr32cs	mvfx6, [r8, #-396]!	@ 0xfffffe74
 801f853:	0a3b2932 	beq	8ee9d23 <__init_array_end+0xec8417>
 801f857:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801f85b:	6f682074 	svcvs	0x00682074
 801f85f:	3d207275 	sfmcc	f7, 4, [r0, #-468]!	@ 0xfffffe2c
 801f863:	30272820 	eorcc	r2, r7, r0, lsr #16
 801f867:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801f86b:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801f86f:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 801f873:	72756f48 	rsbsvc	r6, r5, #72, 30	@ 0x120
 801f877:	29292873 	stmdbcs	r9!, {r0, r1, r4, r5, r6, fp, sp}
 801f87b:	696c732e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, ip, sp, lr}^
 801f87f:	2d286563 	cfstr32cs	mvfx6, [r8, #-396]!	@ 0xfffffe74
 801f883:	0a3b2932 	beq	8ee9d53 <__init_array_end+0xec8447>
 801f887:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 801f88b:	696d2074 	stmdbvs	sp!, {r2, r4, r5, r6, sp}^
 801f88f:	203d206e 	eorscs	r2, sp, lr, rrx
 801f893:	27302728 	ldrcs	r2, [r0, -r8, lsr #14]!
 801f897:	64202b20 	strtvs	r2, [r0], #-2848	@ 0xfffff4e0
 801f89b:	2e657461 	cdpcs	4, 6, cr7, cr5, cr1, {3}
 801f89f:	4d746567 	cfldr64mi	mvdx6, [r4, #-412]!	@ 0xfffffe64
 801f8a3:	74756e69 	ldrbtvc	r6, [r5], #-3689	@ 0xfffff197
 801f8a7:	29287365 	stmdbcs	r8!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 801f8ab:	6c732e29 	ldclvs	14, cr2, [r3], #-164	@ 0xffffff5c
 801f8af:	28656369 	stmdacs	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 801f8b3:	3b29322d 	blcc	8a6c16f <__init_array_end+0xa4a863>
 801f8b7:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 801f8bb:	73207473 			@ <UNDEFINED> instruction: 0x73207473
 801f8bf:	3d206365 	stccc	3, cr6, [r0, #-404]!	@ 0xfffffe6c
 801f8c3:	30272820 	eorcc	r2, r7, r0, lsr #16
 801f8c7:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801f8cb:	65746164 	ldrbvs	r6, [r4, #-356]!	@ 0xfffffe9c
 801f8cf:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 801f8d3:	6f636553 	svcvs	0x00636553
 801f8d7:	2873646e 	ldmdacs	r3!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 801f8db:	732e2929 			@ <UNDEFINED> instruction: 0x732e2929
 801f8df:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801f8e3:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801f8e7:	6f630a3b 	svcvs	0x00630a3b
 801f8eb:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801f8ef:	7366666f 	cmnvc	r6, #116391936	@ 0x6f00000
 801f8f3:	3d207465 	cfstrscc	mvf7, [r0, #-404]!	@ 0xfffffe6c
 801f8f7:	74616420 	strbtvc	r6, [r1], #-1056	@ 0xfffffbe0
 801f8fb:	65672e65 	strbvs	r2, [r7, #-3685]!	@ 0xfffff19b
 801f8ff:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	@ 0xfffffe30
 801f903:	6e6f7a65 	vnmulvs.f32	s15, s30, s11
 801f907:	66664f65 	strbtvs	r4, [r6], -r5, ror #30
 801f90b:	28746573 	ldmdacs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801f90f:	630a3b29 	movwvs	r3, #43817	@ 0xab29
 801f913:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801f917:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 801f91b:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801f91f:	2072756f 	rsbscs	r7, r2, pc, ror #10
 801f923:	2728203d 			@ <UNDEFINED> instruction: 0x2728203d
 801f927:	2b202730 	blcs	88295ef <__init_array_end+0x807ce3>
 801f92b:	74614d20 	strbtvc	r4, [r1], #-3360	@ 0xfffff2e0
 801f92f:	6c662e68 	stclvs	14, cr2, [r6], #-416	@ 0xfffffe60
 801f933:	28726f6f 	ldmdacs	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801f937:	6874614d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sp, lr}^
 801f93b:	7362612e 	cmnvc	r2, #-2147483637	@ 0x8000000b
 801f93f:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801f943:	29746573 	ldmdbcs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801f947:	36202f20 	strtcc	r2, [r0], -r0, lsr #30
 801f94b:	2e292930 			@ <UNDEFINED> instruction: 0x2e292930
 801f94f:	63696c73 	cmnvs	r9, #29440	@ 0x7300
 801f953:	322d2865 	eorcc	r2, sp, #6619136	@ 0x650000
 801f957:	630a3b29 	movwvs	r3, #43817	@ 0xab29
 801f95b:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 801f95f:	66666f20 	strbtvs	r6, [r6], -r0, lsr #30
 801f963:	4d746573 	cfldr64mi	mvdx6, [r4, #-460]!	@ 0xfffffe34
 801f967:	3d206e69 	stccc	14, cr6, [r0, #-420]!	@ 0xfffffe5c
 801f96b:	30272820 	eorcc	r2, r7, r0, lsr #16
 801f96f:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801f973:	6874614d 	ldmdavs	r4!, {r0, r2, r3, r6, r8, sp, lr}^
 801f977:	7362612e 	cmnvc	r2, #-2147483637	@ 0x8000000b
 801f97b:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801f97f:	29746573 	ldmdbcs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801f983:	36202520 	strtcc	r2, [r0], -r0, lsr #10
 801f987:	732e2930 			@ <UNDEFINED> instruction: 0x732e2930
 801f98b:	6563696c 	strbvs	r6, [r3, #-2412]!	@ 0xfffff694
 801f98f:	29322d28 	ldmdbcs	r2!, {r3, r5, r8, sl, fp, sp}
 801f993:	6f630a3b 	svcvs	0x00630a3b
 801f997:	2074736e 	rsbscs	r7, r4, lr, ror #6
 801f99b:	6e676973 			@ <UNDEFINED> instruction: 0x6e676973
 801f99f:	6f203d20 	svcvs	0x00203d20
 801f9a3:	65736666 	ldrbvs	r6, [r3, #-1638]!	@ 0xfffff99a
 801f9a7:	3d3c2074 	ldccc	0, cr2, [ip, #-464]!	@ 0xfffffe30
 801f9ab:	3f203020 	svccc	0x00203020
 801f9af:	272b2720 	strcs	r2, [fp, -r0, lsr #14]!
 801f9b3:	27203a20 	strcs	r3, [r0, -r0, lsr #20]!
 801f9b7:	0a3b272d 	beq	8ee9673 <__init_array_end+0xec7d67>
 801f9bb:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801f9bf:	66666f28 	strbtvs	r6, [r6], -r8, lsr #30
 801f9c3:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801f9c7:	2072756f 	rsbscs	r7, r2, pc, ror #10
 801f9cb:	30203d3d 	eorcc	r3, r0, sp, lsr sp
 801f9cf:	26262029 	strtcs	r2, [r6], -r9, lsr #32
 801f9d3:	666f2820 	strbtvs	r2, [pc], -r0, lsr #16
 801f9d7:	74657366 	strbtvc	r7, [r5], #-870	@ 0xfffffc9a
 801f9db:	206e694d 	rsbcs	r6, lr, sp, asr #18
 801f9df:	30203d3d 	eorcc	r3, r0, sp, lsr sp
 801f9e3:	7b202929 	blvc	8829e8f <__init_array_end+0x808583>
 801f9e7:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801f9eb:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801f9ef:	797b2460 	ldmdbvc	fp!, {r5, r6, sl, sp}^
 801f9f3:	7d726165 	ldfvce	f6, [r2, #-404]!	@ 0xfffffe6c
 801f9f7:	6d7b242d 	cfldrdvs	mvd2, [fp, #-180]!	@ 0xffffff4c
 801f9fb:	2d7d6e6f 	ldclcs	14, cr6, [sp, #-444]!	@ 0xfffffe44
 801f9ff:	61647b24 	cmnvs	r4, r4, lsr #22
 801fa03:	24547d79 	ldrbcs	r7, [r4], #-3449	@ 0xfffff287
 801fa07:	756f687b 	strbvc	r6, [pc, #-2171]!	@ 801f194 <time_html+0x15d>
 801fa0b:	243a7d72 	ldrtcs	r7, [sl], #-3442	@ 0xfffff28e
 801fa0f:	6e696d7b 	mcrvs	13, 3, r6, cr9, cr11, {3}
 801fa13:	7b243a7d 	blvc	892e40f <__init_array_end+0x90cb03>
 801fa17:	7d636573 	cfstr64vc	mvdx6, [r3, #-460]!	@ 0xfffffe34
 801fa1b:	203b605a 	eorscs	r6, fp, sl, asr r0
 801fa1f:	207d0a20 	rsbscs	r0, sp, r0, lsr #20
 801fa23:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 801fa27:	206e7275 	rsbcs	r7, lr, r5, ror r2
 801fa2b:	797b2460 	ldmdbvc	fp!, {r5, r6, sl, sp}^
 801fa2f:	7d726165 	ldfvce	f6, [r2, #-404]!	@ 0xfffffe6c
 801fa33:	6d7b242d 	cfldrdvs	mvd2, [fp, #-180]!	@ 0xffffff4c
 801fa37:	2d7d6e6f 	ldclcs	14, cr6, [sp, #-444]!	@ 0xfffffe44
 801fa3b:	61647b24 	cmnvs	r4, r4, lsr #22
 801fa3f:	24547d79 	ldrbcs	r7, [r4], #-3449	@ 0xfffff287
 801fa43:	756f687b 	strbvc	r6, [pc, #-2171]!	@ 801f1d0 <time_html+0x199>
 801fa47:	243a7d72 	ldrtcs	r7, [sl], #-3442	@ 0xfffff28e
 801fa4b:	6e696d7b 	mcrvs	13, 3, r6, cr9, cr11, {3}
 801fa4f:	7b243a7d 	blvc	892e44b <__init_array_end+0x90cb3f>
 801fa53:	7d636573 	cfstr64vc	mvdx6, [r3, #-460]!	@ 0xfffffe34
 801fa57:	69737b24 	ldmdbvs	r3!, {r2, r5, r8, r9, fp, ip, sp, lr}^
 801fa5b:	247d6e67 	ldrbtcs	r6, [sp], #-3687	@ 0xfffff199
 801fa5f:	66666f7b 	uqsub16vs	r6, r6, fp
 801fa63:	48746573 	ldmdami	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801fa67:	7d72756f 	cfldr64vc	mvdx7, [r2, #-444]!	@ 0xfffffe44
 801fa6b:	6f7b243a 	svcvs	0x007b243a
 801fa6f:	65736666 	ldrbvs	r6, [r3, #-1638]!	@ 0xfffff99a
 801fa73:	6e694d74 	mcrvs	13, 3, r4, cr9, cr4, {3}
 801fa77:	203b607d 	eorscs	r6, fp, sp, ror r0
 801fa7b:	7d0a2020 	stcvc	0, cr2, [sl, #-128]	@ 0xffffff80
	...

0801fa80 <index_js>:
 801fa80:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801fa84:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 801fa88:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801fa8c:	64206e6f 	strtvs	r6, [r0], #-3695	@ 0xfffff191
 801fa90:	63657269 	cmnvs	r5, #-1879048186	@ 0x90000006
 801fa94:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801fa98:	7b202928 	blvc	8829f40 <__init_array_end+0x808634>
 801fa9c:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 801faa0:	3d206420 	cfstrscc	mvf6, [r0, #-128]!	@ 0xffffff80
 801faa4:	61776120 	cmnvs	r7, r0, lsr #2
 801faa8:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801faac:	534a7465 	movtpl	r7, #42085	@ 0xa465
 801fab0:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801fab4:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 801fab8:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801fabc:	0a292779 	beq	8a698a8 <__init_array_end+0xa47f9c>
 801fac0:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801fac4:	203d2068 	eorscs	r2, sp, r8, rrx
 801fac8:	6c0a2222 	sfmvs	f2, 4, [sl], {34}	@ 0x22
 801facc:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801fad0:	4f203d20 	svcmi	0x00203d20
 801fad4:	63656a62 	cmnvs	r5, #401408	@ 0x62000
 801fad8:	656b2e74 	strbvs	r2, [fp, #-3700]!	@ 0xfffff18c
 801fadc:	64287379 	strtvs	r7, [r8], #-889	@ 0xfffffc87
 801fae0:	6966225b 	stmdbvs	r6!, {r0, r1, r3, r4, r6, r9, sp}^
 801fae4:	2273656c 	rsbscs	r6, r3, #108, 10	@ 0x1b000000
 801fae8:	660a295d 			@ <UNDEFINED> instruction: 0x660a295d
 801faec:	726f662e 	rsbvc	r6, pc, #48234496	@ 0x2e00000
 801faf0:	68636145 	stmdavs	r3!, {r0, r2, r6, r8, sp, lr}^
 801faf4:	6e756628 	cdpvs	6, 7, cr6, cr5, cr8, {1}
 801faf8:	6f697463 	svcvs	0x00697463
 801fafc:	656b286e 	strbvs	r2, [fp, #-2158]!	@ 0xfffff792
 801fb00:	7b202979 	blvc	882a0ec <__init_array_end+0x8087e0>
 801fb04:	7261760a 	rsbvc	r7, r1, #10485760	@ 0xa00000
 801fb08:	3d207620 	stccc	6, cr7, [r0, #-128]!	@ 0xffffff80
 801fb0c:	225b6420 	subscs	r6, fp, #32, 8	@ 0x20000000
 801fb10:	656c6966 	strbvs	r6, [ip, #-2406]!	@ 0xfffff69a
 801fb14:	5b5d2273 	blpl	97684e8 <__init_array_end+0x1746bdc>
 801fb18:	5d79656b 	cfldr64pl	mvdx6, [r9, #-428]!	@ 0xfffffe54
 801fb1c:	2b20680a 	blcs	8839b4c <__init_array_end+0x818240>
 801fb20:	3c22203d 	stccc	0, cr2, [r2], #-244	@ 0xffffff0c
 801fb24:	6974706f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 801fb28:	76206e6f 	strtvc	r6, [r0], -pc, ror #28
 801fb2c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	@ 0xfffff39f
 801fb30:	6b2b223d 	blvs	8ae842c <__init_array_end+0xac6b20>
 801fb34:	222b7965 	eorcs	r7, fp, #1654784	@ 0x194000
 801fb38:	762b223e 			@ <UNDEFINED> instruction: 0x762b223e
 801fb3c:	2f3c222b 	svccs	0x003c222b
 801fb40:	6974706f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
 801fb44:	223e6e6f 	eorscs	r6, lr, #1776	@ 0x6f0
 801fb48:	3b297d0a 	blcc	8a7ef78 <__init_array_end+0xa5d66c>
 801fb4c:	636f640a 	cmnvs	pc, #167772160	@ 0xa000000
 801fb50:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801fb54:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801fb58:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801fb5c:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801fb60:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801fb64:	64692228 	strbtvs	r2, [r9], #-552	@ 0xfffffdd8
 801fb68:	65726944 	ldrbvs	r6, [r2, #-2372]!	@ 0xfffff6bc
 801fb6c:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
 801fb70:	2e292279 	mcrcs	2, 1, r2, cr9, cr9, {3}
 801fb74:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801fb78:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801fb7c:	203d204c 	eorscs	r2, sp, ip, asr #32
 801fb80:	65670a68 	strbvs	r0, [r7, #-2664]!	@ 0xfffff598
 801fb84:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801fb88:	5b662874 	blpl	99a9d60 <__init_array_end+0x1988454>
 801fb8c:	0a295d30 	beq	8a77054 <__init_array_end+0xa55748>
 801fb90:	73610a7d 	cmnvc	r1, #512000	@ 0x7d000
 801fb94:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801fb98:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801fb9c:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801fba0:	74656720 	strbtvc	r6, [r5], #-1824	@ 0xfffff8e0
 801fba4:	7478745f 	ldrbtvc	r7, [r8], #-1119	@ 0xfffffba1
 801fba8:	6c657328 	stclvs	3, cr7, [r5], #-160	@ 0xffffff60
 801fbac:	0a7b2029 	beq	9ee7c58 <__init_array_end+0x1ec634c>
 801fbb0:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801fbb4:	20747874 	rsbscs	r7, r4, r4, ror r8
 801fbb8:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 801fbbc:	20746961 	rsbscs	r6, r4, r1, ror #18
 801fbc0:	4a746567 	bmi	9d39164 <__init_array_end+0x1d17858>
 801fbc4:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 801fbc8:	296c6573 	stmdbcs	ip!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
 801fbcc:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 801fbd0:	3d206820 	stccc	8, cr6, [r0, #-128]!	@ 0xffffff80
 801fbd4:	0a222220 	beq	88a845c <__init_array_end+0x886b50>
 801fbd8:	656a624f 	strbvs	r6, [sl, #-591]!	@ 0xfffffdb1
 801fbdc:	6b2e7463 	blvs	8bbcd70 <__init_array_end+0xb9b464>
 801fbe0:	28737965 	ldmdacs	r3!, {r0, r2, r5, r6, r8, fp, ip, sp, lr}^
 801fbe4:	5b747874 	blpl	9d3ddbc <__init_array_end+0x1d1c4b0>
 801fbe8:	5d6c6573 	cfstr64pl	mvdx6, [ip, #-460]!	@ 0xfffffe34
 801fbec:	6f662e29 	svcvs	0x00662e29
 801fbf0:	63614572 	cmnvs	r1, #478150656	@ 0x1c800000
 801fbf4:	75662868 	strbvc	r2, [r6, #-2152]!	@ 0xfffff798
 801fbf8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801fbfc:	6b286e6f 	blvs	8a3b5c0 <__init_array_end+0xa19cb4>
 801fc00:	20297965 	eorcs	r7, r9, r5, ror #18
 801fc04:	61760a7b 	cmnvs	r6, fp, ror sl
 801fc08:	20762072 	rsbscs	r2, r6, r2, ror r0
 801fc0c:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801fc10:	65735b74 	ldrbvs	r5, [r3, #-2932]!	@ 0xfffff48c
 801fc14:	6b5b5d6c 	blvs	96f71cc <__init_array_end+0x16d58c0>
 801fc18:	0a5d7965 	beq	977e1b4 <__init_array_end+0x175c8a8>
 801fc1c:	3d2b2068 	stccc	0, cr2, [fp, #-416]!	@ 0xfffffe60
 801fc20:	743c2220 	ldrtvc	r2, [ip], #-544	@ 0xfffffde0
 801fc24:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801fc28:	2b223e64 	blcs	88af5c0 <__init_array_end+0x88dcb4>
 801fc2c:	2b79656b 	blcs	9e791e0 <__init_array_end+0x1e578d4>
 801fc30:	742f3c27 	strtvc	r3, [pc], #-3111	@ 801fc38 <index_js+0x1b8>
 801fc34:	743c3e64 	ldrtvc	r3, [ip], #-3684	@ 0xfffff19c
 801fc38:	693c3e64 	ldmdbvs	ip!, {r2, r5, r6, r9, sl, fp, ip, sp}
 801fc3c:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 801fc40:	70797420 	rsbsvc	r7, r9, r0, lsr #8
 801fc44:	74223d65 	strtvc	r3, [r2], #-3429	@ 0xfffff29b
 801fc48:	22747865 	rsbscs	r7, r4, #6619136	@ 0x650000
 801fc4c:	6c617620 	stclvs	6, cr7, [r1], #-128	@ 0xffffff80
 801fc50:	223d6575 	eorscs	r6, sp, #490733568	@ 0x1d400000
 801fc54:	2b762b27 	blcs	9daa8f8 <__init_array_end+0x1d88fec>
 801fc58:	69202227 	stmdbvs	r0!, {r0, r1, r2, r5, r9, sp}
 801fc5c:	27223d64 	strcs	r3, [r2, -r4, ror #26]!
 801fc60:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801fc64:	3e22272b 	cdpcc	7, 2, cr2, cr2, cr11, {1}
 801fc68:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 801fc6c:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 801fc74 <index_js+0x1f4>
 801fc70:	0a273e72 	beq	89ef640 <__init_array_end+0x9cdd34>
 801fc74:	0a3b297d 	beq	8eea270 <__init_array_end+0xec8964>
 801fc78:	3d2b2068 	stccc	0, cr2, [fp, #-416]!	@ 0xfffffe60
 801fc7c:	743c2720 	ldrtvc	r2, [ip], #-1824	@ 0xfffff8e0
 801fc80:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 801fc84:	6f632064 	svcvs	0x00632064
 801fc88:	6170736c 	cmnvs	r0, ip, ror #6
 801fc8c:	32223d6e 	eorcc	r3, r2, #7040	@ 0x1b80
 801fc90:	623c3e22 	eorsvs	r3, ip, #544	@ 0x220
 801fc94:	6f747475 	svcvs	0x00747475
 801fc98:	6e6f206e 	cdpvs	0, 6, cr2, cr15, cr14, {3}
 801fc9c:	63696c63 	cmnvs	r9, #25344	@ 0x6300
 801fca0:	73223d6b 			@ <UNDEFINED> instruction: 0x73223d6b
 801fca4:	28657661 	stmdacs	r5!, {r0, r5, r6, r9, sl, ip, sp, lr}^
 801fca8:	2b27275c 	blcs	89e9a20 <__init_array_end+0x9c8114>
 801fcac:	2b6c6573 	blcs	9b39280 <__init_array_end+0x1b17974>
 801fcb0:	29275c27 	stmdbcs	r7!, {r0, r1, r2, r5, sl, fp, ip, lr}
 801fcb4:	61533e22 	cmpvs	r3, r2, lsr #28
 801fcb8:	2f3c6576 	svccs	0x003c6576
 801fcbc:	74747562 	ldrbtvc	r7, [r4], #-1378	@ 0xfffffa9e
 801fcc0:	273e6e6f 	ldrcs	r6, [lr, -pc, ror #28]!
 801fcc4:	20680a3b 	rsbcs	r0, r8, fp, lsr sl
 801fcc8:	27203d2b 	strcs	r3, [r0, -fp, lsr #26]!
 801fccc:	7475623c 	ldrbtvc	r6, [r5], #-572	@ 0xfffffdc4
 801fcd0:	206e6f74 	rsbcs	r6, lr, r4, ror pc
 801fcd4:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 801fcd8:	62223d73 	eorvs	r3, r2, #7360	@ 0x1cc0
 801fcdc:	20226e74 	eorcs	r6, r2, r4, ror lr
 801fce0:	6c636e6f 	stclvs	14, cr6, [r3], #-444	@ 0xfffffe44
 801fce4:	3d6b6369 	stclcc	3, cr6, [fp, #-420]!	@ 0xfffffe5c
 801fce8:	73657222 	cmnvc	r5, #536870914	@ 0x20000002
 801fcec:	5c287465 	cfstrspl	mvf7, [r8], #-404	@ 0xfffffe6c
 801fcf0:	732b2727 			@ <UNDEFINED> instruction: 0x732b2727
 801fcf4:	272b6c65 	strcs	r6, [fp, -r5, ror #24]!
 801fcf8:	2229275c 	eorcs	r2, r9, #92, 14	@ 0x1700000
 801fcfc:	6665443e 			@ <UNDEFINED> instruction: 0x6665443e
 801fd00:	746c7561 	strbtvc	r7, [ip], #-1377	@ 0xfffffa9f
 801fd04:	622f3c73 	eorvs	r3, pc, #29440	@ 0x7300
 801fd08:	6f747475 	svcvs	0x00747475
 801fd0c:	2f3c3e6e 	svccs	0x003c3e6e
 801fd10:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	@ 0xfffffe30
 801fd14:	3e72742f 	cdpcc	4, 7, cr7, cr2, cr15, {1}
 801fd18:	640a3b27 	strvs	r3, [sl], #-2855	@ 0xfffff4d9
 801fd1c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 801fd20:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801fd24:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 801fd28:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 801fd2c:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801fd30:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 801fd34:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801fd38:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801fd3c:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 801fd40:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 801fd44:	203d204c 	eorscs	r2, sp, ip, asr #32
 801fd48:	0a7d0a68 	beq	9f626f0 <__init_array_end+0x1f40de4>
 801fd4c:	636e7566 	cmnvs	lr, #427819008	@ 0x19800000
 801fd50:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 801fd54:	76617320 	strbtvc	r7, [r1], -r0, lsr #6
 801fd58:	65732865 	ldrbvs	r2, [r3, #-2149]!	@ 0xfffff79b
 801fd5c:	7b20296c 	blvc	882a314 <__init_array_end+0x808a08>
 801fd60:	7261760a 	rsbvc	r7, r1, #10485760	@ 0xa00000
 801fd64:	3d206420 	cfstrscc	mvf6, [r0, #-128]!	@ 0xffffff80
 801fd68:	0a7d7b20 	beq	9f7e9f0 <__init_array_end+0x1f5d0e4>
 801fd6c:	20726176 	rsbscs	r6, r2, r6, ror r1
 801fd70:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801fd74:	3d207374 	stccc	3, cr7, [r0, #-464]!	@ 0xfffffe30
 801fd78:	636f6420 	cmnvs	pc, #32, 8	@ 0x20000000
 801fd7c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801fd80:	65672e74 	strbvs	r2, [r7, #-3700]!	@ 0xfffff18c
 801fd84:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801fd88:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801fd8c:	64497942 	strbvs	r7, [r9], #-2370	@ 0xfffff6be
 801fd90:	64692228 	strbtvs	r2, [r9], #-552	@ 0xfffffdd8
 801fd94:	22747854 	rsbscs	r7, r4, #84, 16	@ 0x540000
 801fd98:	65672e29 	strbvs	r2, [r7, #-3625]!	@ 0xfffff1d7
 801fd9c:	656c4574 	strbvs	r4, [ip, #-1396]!	@ 0xfffffa8c
 801fda0:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 801fda4:	54794273 	ldrbtpl	r4, [r9], #-627	@ 0xfffffd8d
 801fda8:	614e6761 	cmpvs	lr, r1, ror #14
 801fdac:	2228656d 	eorcs	r6, r8, #457179136	@ 0x1b400000
 801fdb0:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801fdb4:	0a292274 	beq	8a6878c <__init_array_end+0xa46e80>
 801fdb8:	20726f66 	rsbscs	r6, r2, r6, ror #30
 801fdbc:	72617628 	rsbvc	r7, r1, #40, 12	@ 0x2800000
 801fdc0:	3d206920 			@ <UNDEFINED> instruction: 0x3d206920
 801fdc4:	203b3020 	eorscs	r3, fp, r0, lsr #32
 801fdc8:	203c2069 	eorscs	r2, ip, r9, rrx
 801fdcc:	75706e69 	ldrbvc	r6, [r0, #-3689]!	@ 0xfffff197
 801fdd0:	6c2e7374 	stcvs	3, cr7, [lr], #-464	@ 0xfffffe30
 801fdd4:	74676e65 	strbtvc	r6, [r7], #-3685	@ 0xfffff19b
 801fdd8:	69203b68 	stmdbvs	r0!, {r3, r5, r6, r8, r9, fp, ip, sp}
 801fddc:	20292b2b 	eorcs	r2, r9, fp, lsr #22
 801fde0:	61760a7b 	cmnvs	r6, fp, ror sl
 801fde4:	206b2072 	rsbcs	r2, fp, r2, ror r0
 801fde8:	6e69203d 	mcrvs	0, 3, r2, cr9, cr13, {1}
 801fdec:	73747570 	cmnvc	r4, #112, 10	@ 0x1c000000
 801fdf0:	2e5d695b 			@ <UNDEFINED> instruction: 0x2e5d695b
 801fdf4:	760a6469 	strvc	r6, [sl], -r9, ror #8
 801fdf8:	76207261 	strtvc	r7, [r0], -r1, ror #4
 801fdfc:	69203d20 	stmdbvs	r0!, {r5, r8, sl, fp, ip, sp}
 801fe00:	7475706e 	ldrbtvc	r7, [r5], #-110	@ 0xffffff92
 801fe04:	5d695b73 	fstmdbxpl	r9!, {d21-d77}	@ Deprecated
 801fe08:	6c61762e 	stclvs	6, cr7, [r1], #-184	@ 0xffffff48
 801fe0c:	640a6575 	strvs	r6, [sl], #-1397	@ 0xfffffa8b
 801fe10:	205d6b5b 	subscs	r6, sp, fp, asr fp
 801fe14:	0a76203d 	beq	9da7f10 <__init_array_end+0x1d86604>
 801fe18:	61760a7d 	cmnvs	r6, sp, ror sl
 801fe1c:	756f2072 	strbvc	r2, [pc, #-114]!	@ 801fdb2 <index_js+0x332>
 801fe20:	203d2074 	eorscs	r2, sp, r4, ror r0
 801fe24:	6f0a7d7b 	svcvs	0x000a7d7b
 801fe28:	735b7475 	cmpvc	fp, #1962934272	@ 0x75000000
 801fe2c:	205d6c65 	subscs	r6, sp, r5, ror #24
 801fe30:	0a64203d 	beq	9927f2c <__init_array_end+0x1906620>
 801fe34:	20726176 	rsbscs	r6, r2, r6, ror r1
 801fe38:	6c796170 	ldfvse	f6, [r9], #-448	@ 0xfffffe40
 801fe3c:	2064616f 	rsbcs	r6, r4, pc, ror #2
 801fe40:	534a203d 	movtpl	r2, #41021	@ 0xa03d
 801fe44:	732e4e4f 			@ <UNDEFINED> instruction: 0x732e4e4f
 801fe48:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 801fe4c:	79666967 	stmdbvc	r6!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
 801fe50:	74756f28 	ldrbtvc	r6, [r5], #-3880	@ 0xfffff0d8
 801fe54:	65660a29 	strbvs	r0, [r6, #-2601]!	@ 0xfffff5d7
 801fe58:	28686374 	stmdacs	r8!, {r2, r4, r5, r6, r8, r9, sp, lr}^
 801fe5c:	736a2f27 	cmnvc	sl, #39, 30	@ 0x9c
 801fe60:	2c276e6f 	stccs	14, cr6, [r7], #-444	@ 0xfffffe44
 801fe64:	6d0a7b20 	vstrvs	d7, [sl, #-128]	@ 0xffffff80
 801fe68:	6f687465 	svcvs	0x00687465
 801fe6c:	27203a64 	strcs	r3, [r0, -r4, ror #20]!
 801fe70:	54534f50 	ldrbpl	r4, [r3], #-3920	@ 0xfffff0b0
 801fe74:	680a2c27 	stmdavs	sl, {r0, r1, r2, r5, sl, fp, sp}
 801fe78:	65646165 	strbvs	r6, [r4, #-357]!	@ 0xfffffe9b
 801fe7c:	203a7372 	eorscs	r7, sl, r2, ror r3
 801fe80:	43270a7b 			@ <UNDEFINED> instruction: 0x43270a7b
 801fe84:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801fe88:	542d746e 	strtpl	r7, [sp], #-1134	@ 0xfffffb92
 801fe8c:	27657079 			@ <UNDEFINED> instruction: 0x27657079
 801fe90:	6127203a 			@ <UNDEFINED> instruction: 0x6127203a
 801fe94:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801fe98:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801fe9c:	6a2f6e6f 	bvs	8bfb860 <__init_array_end+0xbd9f54>
 801fea0:	276e6f73 			@ <UNDEFINED> instruction: 0x276e6f73
 801fea4:	0a2c7d0a 	beq	8b3f2d4 <__init_array_end+0xb1d9c8>
 801fea8:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801feac:	6170203a 	cmnvs	r0, sl, lsr r0
 801feb0:	616f6c79 	smcvs	63177	@ 0xf6c9
 801feb4:	297d0a64 	ldmdbcs	sp!, {r2, r5, r6, r9, fp}^
 801feb8:	68742e20 	ldmdavs	r4!, {r5, r9, sl, fp, sp}^
 801febc:	72286e65 	eorvc	r6, r8, #1616	@ 0x650
 801fec0:	6f707365 	svcvs	0x00707365
 801fec4:	2065736e 	rsbcs	r7, r5, lr, ror #6
 801fec8:	7b203e3d 	blvc	882f7c4 <__init_array_end+0x80deb8>
 801fecc:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 801fed0:	70736572 	rsbsvc	r6, r3, r2, ror r5
 801fed4:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	@ 0xfffff191
 801fed8:	296b6f2e 	stmdbcs	fp!, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}^
 801fedc:	67207b20 	strvs	r7, [r0, -r0, lsr #22]!
 801fee0:	745f7465 	ldrbvc	r7, [pc], #-1125	@ 801fee8 <index_js+0x468>
 801fee4:	73287478 			@ <UNDEFINED> instruction: 0x73287478
 801fee8:	3b296c65 	blcc	8a7b084 <__init_array_end+0xa59778>
 801feec:	297d7d20 	ldmdbcs	sp!, {r5, r8, sl, fp, ip, sp, lr}^
 801fef0:	0a7d0a3b 	beq	9f627e4 <__init_array_end+0x1f40ed8>
	...

0801fef5 <styles_css>:
 801fef5:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801fef9:	620a7b20 	andvs	r7, sl, #32, 22	@ 0x8000
 801fefd:	676b6361 	strbvs	r6, [fp, -r1, ror #6]!
 801ff01:	6e756f72 	mrcvs	15, 3, r6, cr5, cr2, {3}
 801ff05:	6f632d64 	svcvs	0x00632d64
 801ff09:	3a726f6c 	bcc	9cbbcc1 <__init_array_end+0x1c9a3b5>
 801ff0d:	62677220 	rsbvs	r7, r7, #32, 4
 801ff11:	2c303228 	lfmcs	f3, 4, [r0], #-160	@ 0xffffff60
 801ff15:	322c3032 	eorcc	r3, ip, #50	@ 0x32
 801ff19:	0a3b2930 	beq	8eea3e1 <__init_array_end+0xec8ad5>
 801ff1d:	6f6c6f63 	svcvs	0x006c6f63
 801ff21:	72203a72 	eorvc	r3, r0, #466944	@ 0x72000
 801ff25:	32286267 	eorcc	r6, r8, #1879048198	@ 0x70000006
 801ff29:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801ff2d:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	@ 0xffffff38
 801ff31:	35353220 	ldrcc	r3, [r5, #-544]!	@ 0xfffffde0
 801ff35:	7d0a3b29 	vstrvc	d3, [sl, #-164]	@ 0xffffff5c
 801ff39:	206c750a 	rsbcs	r7, ip, sl, lsl #10
 801ff3d:	69640a7b 	stmdbvs	r4!, {r0, r1, r3, r4, r5, r6, r9, fp}^
 801ff41:	616c7073 	smcvs	50947	@ 0xc703
 801ff45:	66203a79 			@ <UNDEFINED> instruction: 0x66203a79
 801ff49:	3b78656c 	blcc	9e39501 <__init_array_end+0x1e17bf5>
 801ff4d:	6c0a7d0a 	stcvs	13, cr7, [sl], {10}
 801ff51:	0a7b2069 	beq	9ee80fd <__init_array_end+0x1ec67f1>
 801ff55:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 801ff59:	7974732d 	ldmdbvc	r4!, {r0, r2, r3, r5, r8, r9, ip, sp, lr}^
 801ff5d:	203a656c 	eorscs	r6, sl, ip, ror #10
 801ff61:	656e6f6e 	strbvs	r6, [lr, #-3950]!	@ 0xfffff092
 801ff65:	616d0a3b 	cmnvs	sp, fp, lsr sl
 801ff69:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 801ff6d:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801ff71:	70352078 	eorsvc	r2, r5, r8, ror r0
 801ff75:	7d0a3b78 	vstrvc	d3, [sl, #-480]	@ 0xfffffe20
 801ff79:	6165680a 	cmnvs	r5, sl, lsl #16
 801ff7d:	20726564 	rsbscs	r6, r2, r4, ror #10
 801ff81:	69640a7b 	stmdbvs	r4!, {r0, r1, r3, r4, r5, r6, r9, fp}^
 801ff85:	616c7073 	smcvs	50947	@ 0xc703
 801ff89:	66203a79 			@ <UNDEFINED> instruction: 0x66203a79
 801ff8d:	3b78656c 	blcc	9e39545 <__init_array_end+0x1e17c39>
 801ff91:	726f620a 	rsbvc	r6, pc, #-1610612736	@ 0xa0000000
 801ff95:	2d726564 	cfldr64cs	mvdx6, [r2, #-400]!	@ 0xfffffe70
 801ff99:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801ff9d:	203a7375 	eorscs	r7, sl, r5, ror r3
 801ffa1:	3b787034 	blcc	9e3c079 <__init_array_end+0x1e1a76d>
 801ffa5:	726f620a 	rsbvc	r6, pc, #-1610612736	@ 0xa0000000
 801ffa9:	3a726564 	bcc	9cb9541 <__init_array_end+0x1c97c35>
 801ffad:	6c6f7320 	stclvs	3, cr7, [pc], #-128	@ 801ff34 <styles_css+0x3f>
 801ffb1:	67206469 	strvs	r6, [r0, -r9, ror #8]!
 801ffb5:	20796572 	rsbscs	r6, r9, r2, ror r5
 801ffb9:	3b787031 	blcc	9e3c085 <__init_array_end+0x1e1a779>
 801ffbd:	660a7d0a 	strvs	r7, [sl], -sl, lsl #26
 801ffc1:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	@ 0xfffff091
 801ffc5:	0a7b2072 	beq	9ee8195 <__init_array_end+0x1ec6889>
 801ffc9:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801ffcd:	3a79616c 	bcc	9e78585 <__init_array_end+0x1e56c79>
 801ffd1:	656c6620 	strbvs	r6, [ip, #-1568]!	@ 0xfffff9e0
 801ffd5:	6a0a3b78 	bvs	82aedbd <__init_array_end+0x28d4b1>
 801ffd9:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801ffdd:	632d7966 			@ <UNDEFINED> instruction: 0x632d7966
 801ffe1:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 801ffe5:	203a746e 	eorscs	r7, sl, lr, ror #8
 801ffe9:	746e6563 	strbtvc	r6, [lr], #-1379	@ 0xfffffa9d
 801ffed:	0a3b7265 	beq	8efc989 <__init_array_end+0xedb07d>
 801fff1:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 801fff5:	722d7265 	eorvc	r7, sp, #1342177286	@ 0x50000006
 801fff9:	75696461 	strbvc	r6, [r9, #-1121]!	@ 0xfffffb9f
 801fffd:	34203a73 	strtcc	r3, [r0], #-2675	@ 0xfffff58d
 8020001:	0a3b7870 	beq	8efe1c9 <__init_array_end+0xedc8bd>
 8020005:	64726f62 	ldrbtvs	r6, [r2], #-3938	@ 0xfffff09e
 8020009:	203a7265 	eorscs	r7, sl, r5, ror #4
 802000d:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8020011:	72672064 	rsbvc	r2, r7, #100	@ 0x64
 8020015:	31207965 			@ <UNDEFINED> instruction: 0x31207965
 8020019:	0a3b7870 	beq	8efe1e1 <__init_array_end+0xedc8d5>
 802001d:	75620a7d 	strbvc	r0, [r2, #-2685]!	@ 0xfffff583
 8020021:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 8020025:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 8020029:	6f737275 	svcvs	0x00737275
 802002d:	70203a72 	eorvc	r3, r0, r2, ror sl
 8020031:	746e696f 	strbtvc	r6, [lr], #-2415	@ 0xfffff691
 8020035:	0a3b7265 	beq	8efc9d1 <__init_array_end+0xedb0c5>
 8020039:	75620a7d 	strbvc	r0, [r2, #-2685]!	@ 0xfffff583
 802003d:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 8020041:	7463613a 	strbtvc	r6, [r3], #-314	@ 0xfffffec6
 8020045:	20657669 	rsbcs	r7, r5, r9, ror #12
 8020049:	61620a7b 	smcvs	8363	@ 0x20ab
 802004d:	72676b63 	rsbvc	r6, r7, #101376	@ 0x18c00
 8020051:	646e756f 	strbtvs	r7, [lr], #-1391	@ 0xfffffa91
 8020055:	6c6f632d 	stclvs	3, cr6, [pc], #-180	@ 801ffa8 <styles_css+0xb3>
 8020059:	203a726f 	eorscs	r7, sl, pc, ror #4
 802005d:	30303023 	eorscc	r3, r0, r3, lsr #32
 8020061:	6f630a3b 	svcvs	0x00630a3b
 8020065:	3a726f6c 	bcc	9cbbe1d <__init_array_end+0x1c9a511>
 8020069:	66662320 	strbtvs	r2, [r6], -r0, lsr #6
 802006d:	7d0a3b66 	vstrvc	d3, [sl, #-408]	@ 0xfffffe68
 8020071:	74622e0a 	strbtvc	r2, [r2], #-3594	@ 0xfffff1f6
 8020075:	0a7b206e 	beq	9ee8235 <__init_array_end+0x1ec6929>
 8020079:	6772616d 	ldrbvs	r6, [r2, -sp, ror #2]!
 802007d:	6c2d6e69 	stcvs	14, cr6, [sp], #-420	@ 0xfffffe5c
 8020081:	3a746665 	bcc	9d39a1d <__init_array_end+0x1d18111>
 8020085:	70303520 	eorsvc	r3, r0, r0, lsr #10
 8020089:	7d0a3b78 	vstrvc	d3, [sl, #-480]	@ 0xfffffe20
 802008d:	 	cmnvc	r1, #10

0802008f <static_js>:
 802008f:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8020093:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 8020097:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 802009b:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 802009f:	534a7465 	movtpl	r7, #42085	@ 0xa465
 80200a3:	6a284e4f 	bvs	8a339e7 <__init_array_end+0xa120db>
 80200a7:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80200ab:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 80200af:	7b207972 	blvc	883e67f <__init_array_end+0x81cd73>
 80200b3:	6e6f630a 	cdpvs	3, 6, cr6, cr15, cr10, {0}
 80200b7:	72207473 	eorvc	r7, r0, #1929379840	@ 0x73000000
 80200bb:	61203d20 			@ <UNDEFINED> instruction: 0x61203d20
 80200bf:	74696177 	strbtvc	r6, [r9], #-375	@ 0xfffffe89
 80200c3:	74656620 	strbtvc	r6, [r5], #-1568	@ 0xfffff9e0
 80200c7:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 80200cb:	6f736a2f 	svcvs	0x00736a2f
 80200cf:	2b272f6e 	blcs	89ebe8f <__init_array_end+0x9ca583>
 80200d3:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 80200d7:	66690a29 	strbtvs	r0, [r9], -r9, lsr #20
 80200db:	72212820 	eorvc	r2, r1, #32, 16	@ 0x200000
 80200df:	296b6f2e 	stmdbcs	fp!, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}^
 80200e3:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 80200e7:	776f7268 	strbvc	r7, [pc, -r8, ror #4]!
 80200eb:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
 80200ef:	72724520 	rsbsvc	r4, r2, #32, 10	@ 0x8000000
 80200f3:	2728726f 	strcs	r7, [r8, -pc, ror #4]!
 80200f7:	6f727245 	svcvs	0x00727245
 80200fb:	0a292772 	beq	8a69ecb <__init_array_end+0xa485bf>
 80200ff:	65720a7d 	ldrbvs	r0, [r2, #-2685]!	@ 0xfffff583
 8020103:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 8020107:	6a2e7220 	bvs	8bbc98f <__init_array_end+0xb9b083>
 802010b:	286e6f73 	stmdacs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 802010f:	207d0a29 	rsbscs	r0, sp, r9, lsr #20
 8020113:	63746163 	cmnvs	r4, #-1073741800	@ 0xc0000018
 8020117:	65282068 	strvs	r2, [r8, #-104]!	@ 0xffffff98
 802011b:	726f7272 	rsbvc	r7, pc, #536870919	@ 0x20000007
 802011f:	7d7b2029 	ldclvc	0, cr2, [fp, #-164]!	@ 0xffffff5c
 8020123:	610a7d0a 	tstvs	sl, sl, lsl #26
 8020127:	636e7973 	cmnvs	lr, #1884160	@ 0x1cc000
 802012b:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 802012f:	6f697463 	svcvs	0x00697463
 8020133:	696c206e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, sp}^
 8020137:	29287473 	stmdbcs	r8!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 802013b:	630a7b20 	movwvs	r7, #43808	@ 0xab20
 802013f:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
 8020143:	3d206c20 	stccc	12, cr6, [r0, #-128]!	@ 0xffffff80
 8020147:	61776120 	cmnvs	r7, r0, lsr #2
 802014b:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 802014f:	534a7465 	movtpl	r7, #42085	@ 0xa465
 8020153:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8020157:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
 802015b:	640a2927 	strvs	r2, [sl], #-2343	@ 0xfffff6d9
 802015f:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 8020163:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8020167:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 802016b:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 802016f:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8020173:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 8020177:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 802017b:	29227473 	stmdbcs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
 802017f:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 8020183:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 8020187:	3d204c4d 	stccc	12, cr4, [r0, #-308]!	@ 0xfffffecc
 802018b:	6c3c2220 	lfmvs	f2, 4, [ip], #-128	@ 0xffffff80
 802018f:	2b223e69 	blcs	88afb3b <__init_array_end+0x88e22f>
 8020193:	696c2e6c 	stmdbvs	ip!, {r2, r3, r5, r6, r9, sl, fp, sp}^
 8020197:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 802019b:	2b656d61 	blcs	997b727 <__init_array_end+0x1959e1b>
 802019f:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 802011c <static_js+0x8d>
 80201a3:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	@ 0xfffffe5c
 80201a7:	2b223e69 	blcs	88afb53 <__init_array_end+0x88e247>
 80201ab:	696c2e6c 	stmdbvs	ip!, {r2, r3, r5, r6, r9, sl, fp, sp}^
 80201af:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 80201b3:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
 80201b7:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
 80201bb:	2f3c222b 	svccs	0x003c222b
 80201bf:	3c3e696c 			@ <UNDEFINED> instruction: 0x3c3e696c
 80201c3:	223e696c 	eorscs	r6, lr, #108, 18	@ 0x1b0000
 80201c7:	6c2e6c2b 	stcvs	12, cr6, [lr], #-172	@ 0xffffff54
 80201cb:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 80201cf:	65646f6e 	strbvs	r6, [r4, #-3950]!	@ 0xfffff092
 80201d3:	726f702e 	rsbvc	r7, pc, #46	@ 0x2e
 80201d7:	79742e74 	ldmdbvc	r4!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 80201db:	222b6570 	eorcs	r6, fp, #112, 10	@ 0x1c000000
 80201df:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80201e3:	7d0a223e 	sfmvc	f2, 4, [sl, #-248]	@ 0xffffff08
 80201e7:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 80201eb:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 80201ef:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
 80201f3:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 80201f7:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 80201fb:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 80201ff:	0a7b2029 	beq	9ee82ab <__init_array_end+0x1ec699f>
 8020203:	736e6f63 	cmnvc	lr, #396	@ 0x18c
 8020207:	20762074 	rsbscs	r2, r6, r4, ror r0
 802020b:	7761203d 			@ <UNDEFINED> instruction: 0x7761203d
 802020f:	20746961 	rsbscs	r6, r4, r1, ror #18
 8020213:	4a746567 	bmi	9d397b7 <__init_array_end+0x1d17eab>
 8020217:	284e4f53 	stmdacs	lr, {r0, r1, r4, r6, r8, r9, sl, fp, lr}^
 802021b:	72657627 	rsbvc	r7, r5, #40894464	@ 0x2700000
 802021f:	6e6f6973 			@ <UNDEFINED> instruction: 0x6e6f6973
 8020223:	640a2927 	strvs	r2, [sl], #-2343	@ 0xfffff6d9
 8020227:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 802022b:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 802022f:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 8020233:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 8020237:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 802023b:	22286449 	eorcs	r6, r8, #1224736768	@ 0x49000000
 802023f:	65566469 	ldrbvs	r6, [r6, #-1129]	@ 0xfffffb97
 8020243:	6f697372 	svcvs	0x00697372
 8020247:	2e29226e 	cdpcs	2, 2, cr2, cr9, cr14, {3}
 802024b:	656e6e69 	strbvs	r6, [lr, #-3689]!	@ 0xfffff197
 802024f:	4d544872 	ldclmi	8, cr4, [r4, #-456]	@ 0xfffffe38
 8020253:	203d204c 	eorscs	r2, sp, ip, asr #32
 8020257:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 802025b:	2b22563e 	blcs	88b5b5b <__init_array_end+0x89424f>
 802025f:	65762e76 	ldrbvs	r2, [r6, #-3702]!	@ 0xfffff18a
 8020263:	6f697372 	svcvs	0x00697372
 8020267:	3c222b6e 			@ <UNDEFINED> instruction: 0x3c222b6e
 802026b:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 802026f:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8020273:	2e762b22 	vaddcs.f64	d18, d6, d18
 8020277:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	@ 0xfffffe78
 802027b:	61642e64 	cmnvs	r4, r4, ror #28
 802027f:	222b6574 	eorcs	r6, fp, #116, 10	@ 0x1d000000
 8020283:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8020287:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 802028b:	762b223e 			@ <UNDEFINED> instruction: 0x762b223e
 802028f:	6975622e 	ldmdbvs	r5!, {r1, r2, r3, r5, r9, sp, lr}^
 8020293:	742e646c 	strtvc	r6, [lr], #-1132	@ 0xfffffb94
 8020297:	2b656d69 	blcs	997b843 <__init_array_end+0x1959f37>
 802029b:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 8020218 <static_js+0x189>
 802029f:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	@ 0xfffffe5c
 80202a3:	2b223e69 	blcs	88afc4f <__init_array_end+0x88e343>
 80202a7:	6f622e76 	svcvs	0x00622e76
 80202ab:	2b647261 	blcs	993cc37 <__init_array_end+0x191b32b>
 80202af:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	@ 802022c <static_js+0x19d>
 80202b3:	0a223e69 	beq	88afc5f <__init_array_end+0x88e353>
 80202b7:	75660a7d 	strbvc	r0, [r6, #-2685]!	@ 0xfffff583
 80202bb:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80202bf:	70206e6f 	eorvc	r6, r0, pc, ror #28
 80202c3:	2874736f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 80202c7:	7b202973 	blvc	882a89b <__init_array_end+0x808f8f>
 80202cb:	7465720a 	strbtvc	r7, [r5], #-522	@ 0xfffffdf6
 80202cf:	206e7275 	rsbcs	r7, lr, r5, ror r2
 80202d3:	63746566 	cmnvs	r4, #427819008	@ 0x19800000
 80202d7:	2f272868 	svccs	0x00272868
 80202db:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 80202df:	7463612f 	strbtvc	r6, [r3], #-303	@ 0xfffffed1
 80202e3:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 80202e7:	0a7b202c 	beq	9ee839f <__init_array_end+0x1ec6a93>
 80202eb:	6874656d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 80202ef:	203a646f 	eorscs	r6, sl, pc, ror #8
 80202f3:	534f5027 	movtpl	r5, #61479	@ 0xf027
 80202f7:	0a2c2754 	beq	8b2a04f <__init_array_end+0xb08743>
 80202fb:	64616568 	strbtvs	r6, [r1], #-1384	@ 0xfffffa98
 80202ff:	3a737265 	bcc	9cfcc9b <__init_array_end+0x1cdb38f>
 8020303:	270a7b20 	strcs	r7, [sl, -r0, lsr #22]
 8020307:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
 802030b:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 802030f:	65707954 	ldrbvs	r7, [r0, #-2388]!	@ 0xfffff6ac
 8020313:	27203a27 	strcs	r3, [r0, -r7, lsr #20]!
 8020317:	6c707061 	ldclvs	0, cr7, [r0], #-388	@ 0xfffffe7c
 802031b:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
 802031f:	2f6e6f69 	svccs	0x006e6f69
 8020323:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8020327:	2c7d0a27 			@ <UNDEFINED> instruction: 0x2c7d0a27
 802032b:	646f620a 	strbtvs	r6, [pc], #-522	@ 8020333 <static_js+0x2a4>
 802032f:	4a203a79 	bmi	882ed1b <__init_array_end+0x80d40f>
 8020333:	2e4e4f53 	mcrcs	15, 2, r4, cr14, cr3, {2}
 8020337:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 802033b:	6669676e 	strbtvs	r6, [r9], -lr, ror #14
 802033f:	29732879 	ldmdbcs	r3!, {r0, r3, r4, r5, r6, fp, sp}^
 8020343:	0a297d0a 	beq	8a7f773 <__init_array_end+0xa5de67>
 8020347:	75660a7d 	strbvc	r0, [r6, #-2685]!	@ 0xfffff583
 802034b:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 802034f:	64206e6f 	strtvs	r6, [r0], #-3695	@ 0xfffff191
 8020353:	74656c65 	strbtvc	r6, [r5], #-3173	@ 0xfffff39b
 8020357:	20297328 	eorcs	r7, r9, r8, lsr #6
 802035b:	65720a7b 	ldrbvs	r0, [r2, #-2683]!	@ 0xfffff585
 802035f:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 8020363:	74656620 	strbtvc	r6, [r5], #-1568	@ 0xfffff9e0
 8020367:	27286863 	strcs	r6, [r8, -r3, ror #16]!
 802036b:	6f736a2f 	svcvs	0x00736a2f
 802036f:	63612f6e 	cmnvs	r1, #440	@ 0x1b8
 8020373:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
 8020377:	7b202c27 	blvc	882b41b <__init_array_end+0x809b0f>
 802037b:	74656d0a 	strbtvc	r6, [r5], #-3338	@ 0xfffff2f6
 802037f:	3a646f68 	bcc	993c127 <__init_array_end+0x191a81b>
 8020383:	45442720 	strbmi	r2, [r4, #-1824]	@ 0xfffff8e0
 8020387:	4554454c 	ldrbmi	r4, [r4, #-1356]	@ 0xfffffab4
 802038b:	680a2c27 	stmdavs	sl, {r0, r1, r2, r5, sl, fp, sp}
 802038f:	65646165 	strbvs	r6, [r4, #-357]!	@ 0xfffffe9b
 8020393:	203a7372 	eorscs	r7, sl, r2, ror r3
 8020397:	43270a7b 			@ <UNDEFINED> instruction: 0x43270a7b
 802039b:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
 802039f:	542d746e 	strtpl	r7, [sp], #-1134	@ 0xfffffb92
 80203a3:	27657079 			@ <UNDEFINED> instruction: 0x27657079
 80203a7:	6127203a 			@ <UNDEFINED> instruction: 0x6127203a
 80203ab:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 80203af:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 80203b3:	6a2f6e6f 	bvs	8bfbd77 <__init_array_end+0xbda46b>
 80203b7:	276e6f73 			@ <UNDEFINED> instruction: 0x276e6f73
 80203bb:	0a2c7d0a 	beq	8b3f7eb <__init_array_end+0xb1dedf>
 80203bf:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80203c3:	534a203a 	movtpl	r2, #41018	@ 0xa03a
 80203c7:	732e4e4f 			@ <UNDEFINED> instruction: 0x732e4e4f
 80203cb:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
 80203cf:	79666967 	stmdbvc	r6!, {r0, r1, r2, r5, r6, r8, fp, sp, lr}^
 80203d3:	0a297328 	beq	8a7d07b <__init_array_end+0xa5b76f>
 80203d7:	7d0a297d 	vstrvc.16	s4, [sl, #-250]	@ 0xffffff06	@ <UNPREDICTABLE>
 80203db:	6e75660a 	cdpvs	6, 7, cr6, cr5, cr10, {0}
 80203df:	6f697463 	svcvs	0x00697463
 80203e3:	6572206e 	ldrbvs	r2, [r2, #-110]!	@ 0xffffff92
 80203e7:	746f6f62 	strbtvc	r6, [pc], #-3938	@ 80203ef <static_js+0x360>
 80203eb:	7b202928 	blvc	882a893 <__init_array_end+0x808f87>
 80203ef:	736f700a 	cmnvc	pc, #10
 80203f3:	207b2874 	rsbscs	r2, fp, r4, ror r8
 80203f7:	6f626572 	svcvs	0x00626572
 80203fb:	203a746f 	eorscs	r7, sl, pc, ror #8
 80203ff:	297d2031 	ldmdbcs	sp!, {r0, r4, r5, sp}^
 8020403:	660a7d0a 	strvs	r7, [sl], -sl, lsl #26
 8020407:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
 802040b:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 802040f:	61636f6c 	cmnvs	r3, ip, ror #30
 8020413:	29286574 	stmdbcs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}
 8020417:	760a7b20 	strvc	r7, [sl], -r0, lsr #22
 802041b:	62207261 	eorvs	r7, r0, #268435462	@ 0x10000006
 802041f:	64203d20 	strtvs	r3, [r0], #-3360	@ 0xfffff2e0
 8020423:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	@ 0xfffffe44
 8020427:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 802042b:	45746567 	ldrbmi	r6, [r4, #-1383]!	@ 0xfffffa99
 802042f:	656d656c 	strbvs	r6, [sp, #-1388]!	@ 0xfffffa94
 8020433:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8020437:	27286449 	strcs	r6, [r8, -r9, asr #8]!
 802043b:	61636f6c 	cmnvs	r3, ip, ror #30
 802043f:	75426574 	strbvc	r6, [r2, #-1396]	@ 0xfffffa8c
 8020443:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
 8020447:	0a3b2927 	beq	8eea8eb <__init_array_end+0xec8fdf>
 802044b:	28206669 	stmdacs	r0!, {r0, r3, r5, r6, r9, sl, sp, lr}
 802044f:	6c632e62 	stclvs	14, cr2, [r3], #-392	@ 0xfffffe78
 8020453:	4c737361 	ldclmi	3, cr7, [r3], #-388	@ 0xfffffe7c
 8020457:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 802045b:	746e6f63 	strbtvc	r6, [lr], #-3939	@ 0xfffff09d
 802045f:	736e6961 	cmnvc	lr, #1589248	@ 0x184000
 8020463:	6e692728 	cdpvs	7, 6, cr2, cr9, cr8, {1}
 8020467:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 802046b:	29276576 	stmdbcs	r7!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 802046f:	0a7b2029 	beq	9ee851b <__init_array_end+0x1ec6c0f>
 8020473:	6c632e62 	stclvs	14, cr2, [r3], #-392	@ 0xfffffe78
 8020477:	4c737361 	ldclmi	3, cr7, [r3], #-388	@ 0xfffffe7c
 802047b:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
 802047f:	6f6d6572 	svcvs	0x006d6572
 8020483:	27286576 			@ <UNDEFINED> instruction: 0x27286576
 8020487:	63616e69 	cmnvs	r1, #1680	@ 0x690
 802048b:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 802048f:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 8020493:	616c632e 	cmnvs	ip, lr, lsr #6
 8020497:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 802049b:	612e7473 			@ <UNDEFINED> instruction: 0x612e7473
 802049f:	27286464 	strcs	r6, [r8, -r4, ror #8]!
 80204a3:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 80204a7:	29276576 	stmdbcs	r7!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 80204ab:	692e620a 	stmdbvs	lr!, {r1, r3, r9, sp, lr}
 80204af:	72656e6e 	rsbvc	r6, r5, #1760	@ 0x6e0
 80204b3:	4c4d5448 	cfstrdmi	mvd5, [sp], {72}	@ 0x48
 80204b7:	27203d20 	strcs	r3, [r0, -r0, lsr #26]!
 80204bb:	61636f4c 	cmnvs	r3, ip, asr #30
 80204bf:	4f206574 	svcmi	0x00206574
 80204c3:	700a276e 	andvc	r2, sl, lr, ror #14
 80204c7:	2874736f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 80204cb:	6469207b 	strbtvs	r2, [r9], #-123	@ 0xffffff85
 80204cf:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 80204d3:	203a7966 	eorscs	r7, sl, r6, ror #18
 80204d7:	297d2031 	ldmdbcs	sp!, {r0, r4, r5, sp}^
 80204db:	65207d0a 	strvs	r7, [r0, #-3338]!	@ 0xfffff2f6
 80204df:	2065736c 	rsbcs	r7, r5, ip, ror #6
 80204e3:	2e620a7b 			@ <UNDEFINED> instruction: 0x2e620a7b
 80204e7:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 80204eb:	73694c73 	cmnvc	r9, #29440	@ 0x7300
 80204ef:	65722e74 	ldrbvs	r2, [r2, #-3700]!	@ 0xfffff18c
 80204f3:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	@ 0xfffff093
 80204f7:	63612728 	cmnvs	r1, #40, 14	@ 0xa00000
 80204fb:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 80204ff:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 8020503:	616c632e 	cmnvs	ip, lr, lsr #6
 8020507:	694c7373 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 802050b:	612e7473 			@ <UNDEFINED> instruction: 0x612e7473
 802050f:	27286464 	strcs	r6, [r8, -r4, ror #8]!
 8020513:	63616e69 	cmnvs	r1, #1680	@ 0x690
 8020517:	65766974 	ldrbvs	r6, [r6, #-2420]!	@ 0xfffff68c
 802051b:	620a2927 	andvs	r2, sl, #638976	@ 0x9c000
 802051f:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 8020523:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 8020527:	3d204c4d 	stccc	12, cr4, [r0, #-308]!	@ 0xfffffecc
 802052b:	6f4c2720 	svcvs	0x004c2720
 802052f:	65746163 	ldrbvs	r6, [r4, #-355]!	@ 0xfffffe9d
 8020533:	66664f20 	strbtvs	r4, [r6], -r0, lsr #30
 8020537:	6f700a27 	svcvs	0x00700a27
 802053b:	7b287473 	blvc	8a3d70f <__init_array_end+0xa1be03>
 802053f:	65646920 	strbvs	r6, [r4, #-2336]!	@ 0xfffff6e0
 8020543:	6669746e 	strbtvs	r7, [r9], -lr, ror #8
 8020547:	30203a79 	eorcc	r3, r0, r9, ror sl
 802054b:	0a297d20 	beq	8a7f9d3 <__init_array_end+0xa5e0c7>
 802054f:	007d0a7d 	rsbseq	r0, sp, sp, ror sl

08020553 <dmx_js>:
 8020553:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8020557:	75662063 	strbvc	r2, [r6, #-99]!	@ 0xffffff9d
 802055b:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 802055f:	72206e6f 	eorvc	r6, r0, #1776	@ 0x6f0
 8020563:	65726665 	ldrbvs	r6, [r2, #-1637]!	@ 0xfffff99b
 8020567:	29286873 	stmdbcs	r8!, {r0, r1, r4, r5, r6, fp, sp, lr}
 802056b:	740a7b20 	strvc	r7, [sl], #-2848	@ 0xfffff4e0
 802056f:	7b207972 	blvc	883eb3f <__init_array_end+0x81d233>
 8020573:	74656c0a 	strbtvc	r6, [r5], #-3082	@ 0xfffff3f6
 8020577:	613d6420 	teqvs	sp, r0, lsr #8
 802057b:	74696177 	strbtvc	r6, [r9], #-375	@ 0xfffffe89
 802057f:	74656720 	strbtvc	r6, [r5], #-1824	@ 0xfffff8e0
 8020583:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8020587:	6d642728 	stclvs	7, cr2, [r4, #-160]!	@ 0xffffff60
 802058b:	6f702f78 	svcvs	0x00702f78
 802058f:	74737472 	ldrbtvc	r7, [r3], #-1138	@ 0xfffffb8e
 8020593:	73757461 	cmnvc	r5, #1627389952	@ 0x61000000
 8020597:	6c0a2927 			@ <UNDEFINED> instruction: 0x6c0a2927
 802059b:	68207465 	stmdavs	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
 802059f:	3d737264 	lfmcc	f7, 2, [r3, #-400]!	@ 0xfffffe70
 80205a3:	72743c27 	rsbsvc	r3, r4, #9984	@ 0x2700
 80205a7:	6c0a273e 	stcvs	7, cr2, [sl], {62}	@ 0x3e
 80205ab:	74207465 	strtvc	r7, [r0], #-1125	@ 0xfffffb9b
 80205af:	273d6464 	ldrcs	r6, [sp, -r4, ror #8]!
 80205b3:	3e72743c 	mrccc	4, 3, r7, cr2, cr12, {1}
 80205b7:	2e640a27 	vmulcs.f32	s1, s8, s15
 80205bb:	45726f66 	ldrbmi	r6, [r2, #-3942]!	@ 0xfffff09a
 80205bf:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 80205c3:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	@ 0xfffffe5c
 80205c7:	203e3d20 	eorscs	r3, lr, r0, lsr #26
 80205cb:	64680a7b 	strbtvs	r0, [r8], #-2683	@ 0xfffff585
 80205cf:	3d2b7372 	stccc	3, cr7, [fp, #-456]!	@ 0xfffffe38
 80205d3:	68743c60 	ldmdavs	r4!, {r5, r6, sl, fp, ip, sp}^
 80205d7:	697b243e 	ldmdbvs	fp!, {r1, r2, r3, r4, r5, sl, sp}^
 80205db:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 80205df:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 80205e3:	742f3c7d 	strtvc	r3, [pc], #-3197	@ 80205eb <dmx_js+0x98>
 80205e7:	0a603e68 	beq	982ff8f <__init_array_end+0x180e683>
 80205eb:	2b646474 	blcs	99397c3 <__init_array_end+0x1917eb7>
 80205ef:	743c603d 	ldrtvc	r6, [ip], #-61	@ 0xffffffc3
 80205f3:	7b243e64 	blvc	892ff8b <__init_array_end+0x90e67f>
 80205f7:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	@ 0xfffffe5c
 80205fb:	7269642e 	rsbvc	r6, r9, #771751936	@ 0x2e000000
 80205ff:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8020603:	3c7d6e6f 	ldclcc	14, cr6, [sp], #-444	@ 0xfffffe44
 8020607:	3e64742f 	cdpcc	4, 6, cr7, cr4, cr15, {1}
 802060b:	297d0a60 	ldmdbcs	sp!, {r5, r6, r9, fp}^
 802060f:	6f640a3b 	svcvs	0x00640a3b
 8020613:	656d7563 	strbvs	r7, [sp, #-1379]!	@ 0xfffffa9d
 8020617:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 802061b:	6c457465 	cfstrdvs	mvd7, [r5], {101}	@ 0x65
 802061f:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8020623:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8020627:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 802062b:	61745364 	cmnvs	r4, r4, ror #6
 802062f:	29227374 	stmdbcs	r2!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
 8020633:	6e6e692e 	vmulvs.f16	s13, s28, s29	@ <UNPREDICTABLE>
 8020637:	54487265 	strbpl	r7, [r8], #-613	@ 0xfffffd9b
 802063b:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 802063f:	2b737264 	blcs	9cfcfd7 <__init_array_end+0x1cdb6cb>
 8020643:	742f3c27 	strtvc	r3, [pc], #-3111	@ 802064b <dmx_js+0xf8>
 8020647:	2b273e72 	blcs	89f0017 <__init_array_end+0x9ce70b>
 802064b:	2b646474 	blcs	9939823 <__init_array_end+0x1917f17>
 802064f:	742f3c27 	strtvc	r3, [pc], #-3111	@ 8020657 <dmx_js+0x104>
 8020653:	0a273e72 	beq	89f0023 <__init_array_end+0x9ce717>
 8020657:	2074656c 	rsbscs	r6, r4, ip, ror #10
 802065b:	3d207274 	sfmcc	f7, 4, [r0, #-464]!	@ 0xfffffe30
 802065f:	61776120 	cmnvs	r7, r0, lsr #2
 8020663:	50207469 	eorpl	r7, r0, r9, ror #8
 8020667:	696d6f72 	stmdbvs	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 802066b:	612e6573 			@ <UNDEFINED> instruction: 0x612e6573
 802066f:	0a286c6c 	beq	8a3b827 <__init_array_end+0xa19f1b>
 8020673:	616d2e64 	cmnvs	sp, r4, ror #28
 8020677:	74692870 	strbtvc	r2, [r9], #-2160	@ 0xfffff790
 802067b:	3d206d65 	stccc	13, cr6, [r0, #-404]!	@ 0xfffffe6c
 802067f:	6567203e 	strbvs	r2, [r7, #-62]!	@ 0xffffffc2
 8020683:	4f534a74 	svcmi	0x00534a74
 8020687:	6427284e 	strtvs	r2, [r7], #-2126	@ 0xfffff7b2
 802068b:	732f786d 			@ <UNDEFINED> instruction: 0x732f786d
 802068f:	75746174 	ldrbvc	r6, [r4, #-372]!	@ 0xfffffe8c
 8020693:	20273f73 	eorcs	r3, r7, r3, ror pc
 8020697:	7469202b 	strbtvc	r2, [r9], #-43	@ 0xffffffd5
 802069b:	702e6d65 	eorvc	r6, lr, r5, ror #26
 802069f:	2974726f 	ldmdbcs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80206a3:	6568742e 	strbvs	r7, [r8, #-1070]!	@ 0xfffffbd2
 80206a7:	6572286e 	ldrbvs	r2, [r2, #-2158]!	@ 0xfffff792
 80206ab:	3d207073 	stccc	0, cr7, [r0, #-460]!	@ 0xfffffe34
 80206af:	7b28203e 	blvc	8a287af <__init_array_end+0xa06ea3>
 80206b3:	726f700a 	rsbvc	r7, pc, #10
 80206b7:	69203a74 	stmdbvs	r0!, {r2, r4, r5, r6, r9, fp, ip, sp}
 80206bb:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 80206bf:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 80206c3:	3a640a2c 	bcc	9922f7b <__init_array_end+0x190166f>
 80206c7:	73207b20 			@ <UNDEFINED> instruction: 0x73207b20
 80206cb:	3a746e65 	bcc	9d3c067 <__init_array_end+0x1d1a75b>
 80206cf:	73657220 	cmnvc	r5, #32, 4
 80206d3:	6d642e70 	stclvs	14, cr2, [r4, #-448]!	@ 0xfffffe40
 80206d7:	65732e78 	ldrbvs	r2, [r3, #-3704]!	@ 0xfffff188
 80206db:	202c746e 	eorcs	r7, ip, lr, ror #8
 80206df:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 80206e3:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 80206e7:	6572203a 	ldrbvs	r2, [r2, #-58]!	@ 0xffffffc6
 80206eb:	642e7073 	strtvs	r7, [lr], #-115	@ 0xffffff8d
 80206ef:	722e786d 	eorvc	r7, lr, #7143424	@ 0x6d0000
 80206f3:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 80206f7:	20646576 	rsbcs	r6, r4, r6, ror r5
 80206fb:	720a2c7d 	andvc	r2, sl, #32000	@ 0x7d00
 80206ff:	0a7b203a 	beq	9ee87ef <__init_array_end+0x1ec6ee3>
 8020703:	746e6573 	strbtvc	r6, [lr], #-1395	@ 0xfffffa8d
 8020707:	207b203a 	rsbscs	r2, fp, sl, lsr r0
 802070b:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 802070f:	72203a73 	eorvc	r3, r0, #471040	@ 0x73000
 8020713:	2e707365 	cdpcs	3, 7, cr7, cr0, cr5, {3}
 8020717:	2e6d6472 	mcrcs	4, 3, r6, cr13, cr2, {3}
 802071b:	746e6573 	strbtvc	r6, [lr], #-1395	@ 0xfffffa8d
 802071f:	616c632e 	cmnvs	ip, lr, lsr #6
 8020723:	202c7373 	eorcs	r7, ip, r3, ror r3
 8020727:	63736964 	cmnvs	r3, #100, 18	@ 0x190000
 802072b:	7265766f 	rsbvc	r7, r5, #116391936	@ 0x6f00000
 802072f:	72203a79 	eorvc	r3, r0, #495616	@ 0x79000
 8020733:	2e707365 	cdpcs	3, 7, cr7, cr0, cr5, {3}
 8020737:	2e6d6472 	mcrcs	4, 3, r6, cr13, cr2, {3}
 802073b:	746e6573 	strbtvc	r6, [lr], #-1395	@ 0xfffffa8d
 802073f:	7369642e 	cmnvc	r9, #771751936	@ 0x2e000000
 8020743:	65766f63 	ldrbvs	r6, [r6, #-3939]!	@ 0xfffff09d
 8020747:	7d207972 			@ <UNDEFINED> instruction: 0x7d207972
 802074b:	65720a2c 	ldrbvs	r0, [r2, #-2604]!	@ 0xfffff5d4
 802074f:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 8020753:	203a6465 	eorscs	r6, sl, r5, ror #8
 8020757:	6f67207b 	svcvs	0x0067207b
 802075b:	203a646f 	eorscs	r6, sl, pc, ror #8
 802075f:	70736572 	rsbsvc	r6, r3, r2, ror r5
 8020763:	6d64722e 	sfmvs	f7, 2, [r4, #-184]!	@ 0xffffff48
 8020767:	6365722e 	cmnvs	r5, #-536870910	@ 0xe0000002
 802076b:	65766965 	ldrbvs	r6, [r6, #-2405]!	@ 0xfffff69b
 802076f:	6f672e64 	svcvs	0x00672e64
 8020773:	202c646f 	eorcs	r6, ip, pc, ror #8
 8020777:	3a646162 	bcc	9938d07 <__init_array_end+0x19173fb>
 802077b:	73657220 	cmnvc	r5, #32, 4
 802077f:	64722e70 	ldrbtvs	r2, [r2], #-3696	@ 0xfffff190
 8020783:	65722e6d 	ldrbvs	r2, [r2, #-3693]!	@ 0xfffff193
 8020787:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 802078b:	622e6465 	eorvs	r6, lr, #1694498816	@ 0x65000000
 802078f:	202c6461 	eorcs	r6, ip, r1, ror #8
 8020793:	63736964 	cmnvs	r3, #100, 18	@ 0x190000
 8020797:	7265766f 	rsbvc	r7, r5, #116391936	@ 0x6f00000
 802079b:	72203a79 	eorvc	r3, r0, #495616	@ 0x79000
 802079f:	2e707365 	cdpcs	3, 7, cr7, cr0, cr5, {3}
 80207a3:	2e6d6472 	mcrcs	4, 3, r6, cr13, cr2, {3}
 80207a7:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 80207ab:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 80207af:	7369642e 	cmnvc	r9, #771751936	@ 0x2e000000
 80207b3:	65766f63 	ldrbvs	r6, [r6, #-3939]!	@ 0xfffff09d
 80207b7:	7d0a7972 	vstrvc.16	s14, [sl, #-228]	@ 0xffffff1c	@ <UNPREDICTABLE>
 80207bb:	29297d7d 	stmdbcs	r9!, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 80207bf:	0a3b2929 	beq	8eeac6b <__init_array_end+0xec935f>
 80207c3:	732e7274 			@ <UNDEFINED> instruction: 0x732e7274
 80207c7:	2874726f 	ldmdacs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80207cb:	202c6128 	eorcs	r6, ip, r8, lsr #2
 80207cf:	3d202962 			@ <UNDEFINED> instruction: 0x3d202962
 80207d3:	0a7b203e 	beq	9ee88d3 <__init_array_end+0x1ec6fc7>
 80207d7:	75746572 	ldrbvc	r6, [r4, #-1394]!	@ 0xfffffa8e
 80207db:	64206e72 	strtvs	r6, [r0], #-3698	@ 0xfffff18e
 80207df:	6e69662e 	cdpvs	6, 6, cr6, cr9, cr14, {1}
 80207e3:	646e4964 	strbtvs	r4, [lr], #-2404	@ 0xfffff69c
 80207e7:	69287865 	stmdbvs	r8!, {r0, r2, r5, r6, fp, ip, sp, lr}
 80207eb:	206d6574 	rsbcs	r6, sp, r4, ror r5
 80207ef:	69203e3d 	stmdbvs	r0!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 80207f3:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 80207f7:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 80207fb:	3d3d3d20 	ldccc	13, cr3, [sp, #-128]!	@ 0xffffff80
 80207ff:	702e6120 	eorvc	r6, lr, r0, lsr #2
 8020803:	2974726f 	ldmdbcs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8020807:	64202d20 	strtvs	r2, [r0], #-3360	@ 0xfffff2e0
 802080b:	6e69662e 	cdpvs	6, 6, cr6, cr9, cr14, {1}
 802080f:	646e4964 	strbtvs	r4, [lr], #-2404	@ 0xfffff69c
 8020813:	69287865 	stmdbvs	r8!, {r0, r2, r5, r6, fp, ip, sp, lr}
 8020817:	206d6574 	rsbcs	r6, sp, r4, ror r5
 802081b:	69203e3d 	stmdbvs	r0!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}
 802081f:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
 8020823:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 8020827:	3d3d3d20 	ldccc	13, cr3, [sp, #-128]!	@ 0xffffff80
 802082b:	702e6220 	eorvc	r6, lr, r0, lsr #4
 802082f:	2974726f 	ldmdbcs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8020833:	3b297d0a 	blcc	8a7fc63 <__init_array_end+0xa5e357>
 8020837:	7264680a 	rsbvc	r6, r4, #655360	@ 0xa0000
 802083b:	3c273d73 	stccc	13, cr3, [r7], #-460	@ 0xfffffe34
 802083f:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	@ 0xfffffe30
 8020843:	72206874 	eorvc	r6, r0, #116, 16	@ 0x740000
 8020847:	7073776f 	rsbsvc	r7, r3, pc, ror #14
 802084b:	223d6e61 	eorscs	r6, sp, #1552	@ 0x610
 802084f:	503e2233 	eorspl	r2, lr, r3, lsr r2
 8020853:	3c74726f 	lfmcc	f7, 2, [r4], #-444	@ 0xfffffe44
 8020857:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 802085b:	2068743c 	rsbcs	r7, r8, ip, lsr r4
 802085f:	736c6f63 	cmnvc	ip, #396	@ 0x18c
 8020863:	3d6e6170 	stfcce	f6, [lr, #-448]!	@ 0xfffffe40
 8020867:	3e223222 	cdpcc	2, 2, cr3, cr2, cr2, {1}
 802086b:	3c584d44 	mrrccc	13, 4, r4, r8, cr4
 802086f:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 8020873:	2068743c 	rsbcs	r7, r8, ip, lsr r4
 8020877:	736c6f63 	cmnvc	ip, #396	@ 0x18c
 802087b:	3d6e6170 	stfcce	f6, [lr, #-448]!	@ 0xfffffe40
 802087f:	3e223522 	cfsh64cc	mvdx3, mvdx2, #18
 8020883:	3c4d4452 	cfstrdcc	mvd4, [sp], {82}	@ 0x52
 8020887:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 802088b:	72742f3c 	rsbsvc	r2, r4, #60, 30	@ 0xf0
 802088f:	72743c3e 	rsbsvc	r3, r4, #15872	@ 0x3e00
 8020893:	68743c3e 	ldmdavs	r4!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8020897:	776f7220 	strbvc	r7, [pc, -r0, lsr #4]!
 802089b:	6e617073 	mcrvs	0, 3, r7, cr1, cr3, {3}
 802089f:	2232223d 	eorscs	r2, r2, #-805306365	@ 0xd0000003
 80208a3:	6e65533e 	mcrvs	3, 3, r5, cr5, cr14, {1}
 80208a7:	742f3c74 	strtvc	r3, [pc], #-3188	@ 80208af <dmx_js+0x35c>
 80208ab:	743c3e68 	ldrtvc	r3, [ip], #-3688	@ 0xfffff198
 80208af:	6f722068 	svcvs	0x00722068
 80208b3:	61707377 	cmnvs	r0, r7, ror r3
 80208b7:	32223d6e 	eorcc	r3, r2, #7040	@ 0x1b80
 80208bb:	65523e22 	ldrbvs	r3, [r2, #-3618]	@ 0xfffff1de
 80208bf:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 80208c3:	2f3c6465 	svccs	0x003c6465
 80208c7:	3c3e6874 	ldccc	8, cr6, [lr], #-464	@ 0xfffffe30
 80208cb:	63206874 			@ <UNDEFINED> instruction: 0x63206874
 80208cf:	70736c6f 	rsbsvc	r6, r3, pc, ror #24
 80208d3:	223d6e61 	eorscs	r6, sp, #1552	@ 0x610
 80208d7:	533e2232 	teqpl	lr, #536870915	@ 0x20000003
 80208db:	3c746e65 	ldclcc	14, cr6, [r4], #-404	@ 0xfffffe6c
 80208df:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 80208e3:	2068743c 	rsbcs	r7, r8, ip, lsr r4
 80208e7:	736c6f63 	cmnvc	ip, #396	@ 0x18c
 80208eb:	3d6e6170 	stfcce	f6, [lr, #-448]!	@ 0xfffffe40
 80208ef:	3e223322 	cdpcc	3, 2, cr3, cr2, cr2, {1}
 80208f3:	65636552 	strbvs	r6, [r3, #-1362]!	@ 0xfffffaae
 80208f7:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 80208fb:	68742f3c 	ldmdavs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80208ff:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 8020907 <dmx_js+0x3b4>
 8020903:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 8020907:	743c3e72 	ldrtvc	r3, [ip], #-3698	@ 0xfffff18e
 802090b:	6c433e68 	mcrrvs	14, 6, r3, r3, cr8
 802090f:	3c737361 	ldclcc	3, cr7, [r3], #-388	@ 0xfffffe7c
 8020913:	3e68742f 	cdpcc	4, 6, cr7, cr8, cr15, {1}
 8020917:	3e68743c 	mcrcc	4, 3, r7, cr8, cr12, {1}
 802091b:	63736944 	cmnvs	r3, #68, 18	@ 0x110000
 802091f:	7265766f 	rsbvc	r7, r5, #116391936	@ 0x6f00000
 8020923:	742f3c79 	strtvc	r3, [pc], #-3193	@ 802092b <dmx_js+0x3d8>
 8020927:	743c3e68 	ldrtvc	r3, [ip], #-3688	@ 0xfffff198
 802092b:	6f473e68 	svcvs	0x00473e68
 802092f:	2f3c646f 	svccs	0x003c646f
 8020933:	3c3e6874 	ldccc	8, cr6, [lr], #-464	@ 0xfffffe30
 8020937:	423e6874 	eorsmi	r6, lr, #116, 16	@ 0x740000
 802093b:	2f3c6461 	svccs	0x003c6461
 802093f:	3c3e6874 	ldccc	8, cr6, [lr], #-464	@ 0xfffffe30
 8020943:	443e6874 	ldrtmi	r6, [lr], #-2164	@ 0xfffff78c
 8020947:	6f637369 	svcvs	0x00637369
 802094b:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 802094f:	68742f3c 	ldmdavs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8020953:	742f3c3e 	strtvc	r3, [pc], #-3134	@ 802095b <dmx_js+0x408>
 8020957:	0a273e72 	beq	89f0327 <__init_array_end+0x9cea1b>
 802095b:	3d646474 	cfstrdcc	mvd6, [r4, #-464]!	@ 0xfffffe30
 802095f:	740a2727 	strvc	r2, [sl], #-1831	@ 0xfffff8d9
 8020963:	6f662e72 	svcvs	0x00662e72
 8020967:	63614572 	cmnvs	r1, #478150656	@ 0x1c800000
 802096b:	20702868 	rsbscs	r2, r0, r8, ror #16
 802096f:	7b203e3d 	blvc	883026b <__init_array_end+0x80e95f>
 8020973:	6464740a 	strbtvs	r7, [r4], #-1034	@ 0xfffffbf6
 8020977:	3c603d2b 	stclcc	13, cr3, [r0], #-172	@ 0xffffff54
 802097b:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	@ 0xfffffe30
 802097f:	243e6474 	ldrtcs	r6, [lr], #-1140	@ 0xfffffb8c
 8020983:	702e707b 	eorvc	r7, lr, fp, ror r0
 8020987:	7d74726f 	lfmvc	f7, 2, [r4, #-444]!	@ 0xfffffe44
 802098b:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 802098f:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 8020993:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 8020997:	732e642e 			@ <UNDEFINED> instruction: 0x732e642e
 802099b:	7d746e65 	ldclvc	14, cr6, [r4, #-404]!	@ 0xfffffe6c
 802099f:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 80209a3:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 80209a7:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 80209ab:	722e642e 	eorvc	r6, lr, #771751936	@ 0x2e000000
 80209af:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 80209b3:	7d646576 	cfstr64vc	mvdx6, [r4, #-472]!	@ 0xfffffe28
 80209b7:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 80209bb:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 80209bf:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 80209c3:	732e722e 			@ <UNDEFINED> instruction: 0x732e722e
 80209c7:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 80209cb:	73616c63 	cmnvc	r1, #25344	@ 0x6300
 80209cf:	2f3c7d73 	svccs	0x003c7d73
 80209d3:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	@ 0xfffffe30
 80209d7:	243e6474 	ldrtcs	r6, [lr], #-1140	@ 0xfffffb8c
 80209db:	722e707b 	eorvc	r7, lr, #123	@ 0x7b
 80209df:	6e65732e 	cdpvs	3, 6, cr7, cr5, cr14, {1}
 80209e3:	69642e74 	stmdbvs	r4!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 80209e7:	766f6373 			@ <UNDEFINED> instruction: 0x766f6373
 80209eb:	7d797265 	lfmvc	f7, 2, [r9, #-404]!	@ 0xfffffe6c
 80209ef:	64742f3c 	ldrbtvs	r2, [r4], #-3900	@ 0xfffff0c4
 80209f3:	64743c3e 	ldrbtvs	r3, [r4], #-3134	@ 0xfffff3c2
 80209f7:	707b243e 	rsbsvc	r2, fp, lr, lsr r4
 80209fb:	722e722e 	eorvc	r7, lr, #-536870910	@ 0xe0000002
 80209ff:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8020a03:	2e646576 	mcrcs	5, 3, r6, cr4, cr6, {3}
 8020a07:	646f6f67 	strbtvs	r6, [pc], #-3943	@ 8020a0f <dmx_js+0x4bc>
 8020a0b:	742f3c7d 	strtvc	r3, [pc], #-3197	@ 8020a13 <dmx_js+0x4c0>
 8020a0f:	743c3e64 	ldrtvc	r3, [ip], #-3684	@ 0xfffff19c
 8020a13:	7b243e64 	blvc	89303ab <__init_array_end+0x90ea9f>
 8020a17:	2e722e70 	mrccs	14, 3, r2, cr2, cr0, {3}
 8020a1b:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 8020a1f:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 8020a23:	6461622e 	strbtvs	r6, [r1], #-558	@ 0xfffffdd2
 8020a27:	742f3c7d 	strtvc	r3, [pc], #-3197	@ 8020a2f <dmx_js+0x4dc>
 8020a2b:	743c3e64 	ldrtvc	r3, [ip], #-3684	@ 0xfffff19c
 8020a2f:	7b243e64 	blvc	89303c7 <__init_array_end+0x90eabb>
 8020a33:	2e722e70 	mrccs	14, 3, r2, cr2, cr0, {3}
 8020a37:	65636572 	strbvs	r6, [r3, #-1394]!	@ 0xfffffa8e
 8020a3b:	64657669 	strbtvs	r7, [r5], #-1641	@ 0xfffff997
 8020a3f:	7369642e 	cmnvc	r9, #771751936	@ 0x2e000000
 8020a43:	65766f63 	ldrbvs	r6, [r6, #-3939]!	@ 0xfffff09d
 8020a47:	3c7d7972 			@ <UNDEFINED> instruction: 0x3c7d7972
 8020a4b:	3e64742f 	cdpcc	4, 6, cr7, cr4, cr15, {1}
 8020a4f:	72742f3c 	rsbsvc	r2, r4, #60, 30	@ 0xf0
 8020a53:	0a3b603e 	beq	8ef8b53 <__init_array_end+0xed7247>
 8020a57:	0a3b297d 	beq	8eeb053 <__init_array_end+0xec9747>
 8020a5b:	75636f64 	strbvc	r6, [r3, #-3940]!	@ 0xfffff09c
 8020a5f:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
 8020a63:	7465672e 	strbtvc	r6, [r5], #-1838	@ 0xfffff8d2
 8020a67:	6d656c45 	stclvs	12, cr6, [r5, #-276]!	@ 0xfffffeec
 8020a6b:	42746e65 	rsbsmi	r6, r4, #1616	@ 0x650
 8020a6f:	28644979 	stmdacs	r4!, {r0, r3, r4, r5, r6, r8, fp, lr}^
 8020a73:	50646922 	rsbpl	r6, r4, r2, lsr #18
 8020a77:	7374726f 	cmnvc	r4, #-268435450	@ 0xf0000006
 8020a7b:	692e2922 	stmdbvs	lr!, {r1, r5, r8, fp, sp}
 8020a7f:	72656e6e 	rsbvc	r6, r5, #1760	@ 0x6e0
 8020a83:	4c4d5448 	cfstrdmi	mvd5, [sp], {72}	@ 0x48
 8020a87:	7264683d 	rsbvc	r6, r4, #3997696	@ 0x3d0000
 8020a8b:	64742b73 	ldrbtvs	r2, [r4], #-2931	@ 0xfffff48d
 8020a8f:	207d0a64 	rsbscs	r0, sp, r4, ror #20
 8020a93:	63746163 	cmnvs	r4, #-1073741800	@ 0xc0000018
 8020a97:	65282068 	strvs	r2, [r8, #-104]!	@ 0xffffff98
 8020a9b:	726f7272 	rsbvc	r7, pc, #536870919	@ 0x20000007
 8020a9f:	0a7d7b29 	beq	9f7f74b <__init_array_end+0x1f5de3f>
 8020aa3:	 	subvc	r0, r1, #125	@ 0x7d

08020aa5 <ArtNetMsgConst::STARTED>:
 8020aa5:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 8020aa9:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8020aad:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8020ab1:	00646574 	rsbeq	r6, r4, r4, ror r5

08020ab5 <ArtNetMsgConst::START>:
 8020ab5:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
 8020ab9:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
 8020abd:	74724120 	ldrbtvc	r4, [r2], #-288	@ 0xfffffee0
 8020ac1:	74654e2d 	strbtvc	r4, [r5], #-3629	@ 0xfffff1d3
	...

08020ac6 <artnet::NODE_ID>:
 8020ac6:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	@ 0xfffffefc
 8020aca:	0074654e 	rsbseq	r6, r4, lr, asr #10

08020ace <ArtNetParamsConst::MAP_UNIVERSE0>:
 8020ace:	5f70616d 	svcpl	0x0070616d
 8020ad2:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 8020ad6:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 8020ada:	 	rsbsvc	r0, r0, #48	@ 0x30

08020adc <ArtNetParamsConst::PROTOCOL_PORT>:
 8020adc:	746f7270 	strbtvc	r7, [pc], #-624	@ 8020ae4 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8020ae0:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 802092c <dmx_js+0x3d9>
 8020ae4:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 8020ae8:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8020aec:	746f7270 	strbtvc	r7, [pc], #-624	@ 8020af4 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8020af0:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 802093c <dmx_js+0x3e9>
 8020af4:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 8020af8:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8020afc:	746f7270 	strbtvc	r7, [pc], #-624	@ 8020b04 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8020b00:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 802094c <dmx_js+0x3f9>
 8020b04:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 8020b08:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8020b0c:	746f7270 	strbtvc	r7, [pc], #-624	@ 8020b14 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8020b10:	6c6f636f 	stclvs	3, cr6, [pc], #-444	@ 802095c <dmx_js+0x409>
 8020b14:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 8020b18:	00645f74 	rsbeq	r5, r4, r4, ror pc

08020b1c <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8020b1c:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 8020b20:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 8020b24:	5f6e6f69 	svcpl	0x006e6f69
 8020b28:	705f7069 	subsvc	r7, pc, r9, rrx
 8020b2c:	5f74726f 	svcpl	0x0074726f
 8020b30:	00000061 	andeq	r0, r0, r1, rrx
 8020b34:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 8020b38:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 8020b3c:	5f6e6f69 	svcpl	0x006e6f69
 8020b40:	705f7069 	subsvc	r7, pc, r9, rrx
 8020b44:	5f74726f 	svcpl	0x0074726f
 8020b48:	00000062 	andeq	r0, r0, r2, rrx
 8020b4c:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 8020b50:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 8020b54:	5f6e6f69 	svcpl	0x006e6f69
 8020b58:	705f7069 	subsvc	r7, pc, r9, rrx
 8020b5c:	5f74726f 	svcpl	0x0074726f
 8020b60:	00000063 	andeq	r0, r0, r3, rrx
 8020b64:	74736564 	ldrbtvc	r6, [r3], #-1380	@ 0xfffffa9c
 8020b68:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
 8020b6c:	5f6e6f69 	svcpl	0x006e6f69
 8020b70:	705f7069 	subsvc	r7, pc, r9, rrx
 8020b74:	5f74726f 	svcpl	0x0074726f
 8020b78:	00000064 	andeq	r0, r0, r4, rrx

08020b7c <ArtNetParamsConst::FILE_NAME>:
 8020b7c:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8020b80:	742e7465 	strtvc	r7, [lr], #-1125	@ 0xfffffb9b
 8020b84:	 			@ <UNDEFINED> instruction: 0xff007478

08020b87 <ArtNetConst::OEM_ID>:
 8020b87:	 	ldrsheq	pc, [r0], #-255	@ 0xffffff01	@ <UNPREDICTABLE>

08020b89 <ArtNetConst::ESTA_ID>:
 8020b89:	 	stccc	0, cr0, [r1], {80}	@ 0x50

08020b8b <ArtNetConst::VERSION>:
 8020b8b:	 	movtpl	r3, #7169	@ 0x1c01

08020b8d <E117Const::ACN_PACKET_IDENTIFIER>:
 8020b8d:	2d435341 	stclcs	3, cr5, [r3, #-260]	@ 0xfffffefc
 8020b91:	312e3145 			@ <UNDEFINED> instruction: 0x312e3145
 8020b95:	00000037 	andeq	r0, r0, r7, lsr r0

08020b99 <E131Const::VERSION>:
 8020b99:	 	andeq	r1, r0, r1, lsl #22

08020b9c <vtable for RDMDeviceResponder>:
	...
 8020ba4:	08009f5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, ip, pc}
 8020ba8:	0800a065 	stmdaeq	r0, {r0, r2, r5, r6, sp, pc}
 8020bac:	0800f099 	stmdaeq	r0, {r0, r3, r4, r7, ip, sp, lr, pc}
 8020bb0:	0800f09b 	stmdaeq	r0, {r0, r1, r3, r4, r7, ip, sp, lr, pc}

08020bb4 <RDMHandler::PID_DEFINITIONS>:
 8020bb4:	00000060 	andeq	r0, r0, r0, rrx
 8020bb8:	0800f5b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, ip, sp, lr, pc}
	...
 8020bc8:	01010000 	mrseq	r0, (UNDEF: 1)
 8020bcc:	00000080 	andeq	r0, r0, r0, lsl #1
 8020bd0:	0800f6f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, ip, sp, lr, pc}
	...
 8020be0:	01010100 	mrseq	r0, (UNDEF: 17)
 8020be4:	00000081 	andeq	r0, r0, r1, lsl #1
 8020be8:	0800f75d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr, pc}
	...
 8020bf8:	01010100 	mrseq	r0, (UNDEF: 17)
 8020bfc:	00000082 	andeq	r0, r0, r2, lsl #1
 8020c00:	0800f70d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, ip, sp, lr, pc}
 8020c04:	00000000 	andeq	r0, r0, r0
 8020c08:	0800f88d 	stmdaeq	r0, {r0, r2, r3, r7, fp, ip, sp, lr, pc}
 8020c0c:	00000000 	andeq	r0, r0, r0
 8020c10:	01010100 	mrseq	r0, (UNDEF: 17)
 8020c14:	00000090 	muleq	r0, r0, r0
 8020c18:	0800f631 	stmdaeq	r0, {r0, r4, r5, r9, sl, ip, sp, lr, pc}
 8020c1c:	00000000 	andeq	r0, r0, r0
 8020c20:	0800f859 	stmdaeq	r0, {r0, r3, r4, r6, fp, ip, sp, lr, pc}
 8020c24:	00000000 	andeq	r0, r0, r0
 8020c28:	01010100 	mrseq	r0, (UNDEF: 17)
 8020c2c:	00001000 	andeq	r1, r0, r0
 8020c30:	0800f749 	stmdaeq	r0, {r0, r3, r6, r8, r9, sl, ip, sp, lr, pc}
 8020c34:	00000000 	andeq	r0, r0, r0
 8020c38:	0800f7dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, sl, ip, sp, lr, pc}
 8020c3c:	00000000 	andeq	r0, r0, r0
 8020c40:	01010000 	mrseq	r0, (UNDEF: 1)
 8020c44:	00001001 	andeq	r1, r0, r1
	...
 8020c50:	0800f795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, ip, sp, lr, pc}
 8020c54:	00000000 	andeq	r0, r0, r0
 8020c58:	01010100 	mrseq	r0, (UNDEF: 17)
 8020c5c:	00000700 	andeq	r0, r0, r0, lsl #14
 8020c60:	0800fd69 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, fp, ip, sp, lr, pc}
	...
 8020c70:	01000000 	mrseq	r0, (UNDEF: 0)
 8020c74:	00000701 	andeq	r0, r0, r1, lsl #14
 8020c78:	0800fd85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, ip, sp, lr, pc}
	...
 8020c88:	01000004 	tsteq	r0, r4
 8020c8c:	00000702 	andeq	r0, r0, r2, lsl #14
 8020c90:	0800fdd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, fp, ip, sp, lr, pc}
	...
 8020ca0:	01000004 	tsteq	r0, r4
 8020ca4:	00000703 	andeq	r0, r0, r3, lsl #14
 8020ca8:	0800fe09 	stmdaeq	r0, {r0, r3, r9, sl, fp, ip, sp, lr, pc}
 8020cac:	00000000 	andeq	r0, r0, r0
 8020cb0:	0800fe39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, ip, sp, lr, pc}
 8020cb4:	00000000 	andeq	r0, r0, r0
 8020cb8:	01000004 	tsteq	r0, r4
 8020cbc:	00000704 	andeq	r0, r0, r4, lsl #14
 8020cc0:	0800feb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, ip, sp, lr, pc}
 8020cc4:	00000000 	andeq	r0, r0, r0
 8020cc8:	0800fef5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr, pc}
 8020ccc:	00000000 	andeq	r0, r0, r0
 8020cd0:	01000004 	tsteq	r0, r4
 8020cd4:	00000705 	andeq	r0, r0, r5, lsl #14
 8020cd8:	0800ff6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, sp, lr, pc}
	...
 8020ce8:	01000004 	tsteq	r0, r4
 8020cec:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 8020cf8:	0800ff3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp, lr, pc}
 8020cfc:	00000000 	andeq	r0, r0, r0
 8020d00:	01000004 	tsteq	r0, r4
 8020d04:	00000706 	andeq	r0, r0, r6, lsl #14
 8020d08:	0800ffbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8020d0c:	00000000 	andeq	r0, r0, r0
 8020d10:	08010005 	stmdaeq	r1, {r0, r2}
 8020d14:	00000000 	andeq	r0, r0, r0
 8020d18:	01000004 	tsteq	r0, r4
 8020d1c:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 8020d28:	08010055 	stmdaeq	r1, {r0, r2, r4, r6}
 8020d2c:	00000000 	andeq	r0, r0, r0
 8020d30:	01000004 	tsteq	r0, r4
 8020d34:	0000070b 	andeq	r0, r0, fp, lsl #14
 8020d38:	0800fe6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr, pc}
	...
 8020d48:	01000001 	tsteq	r0, r1
 8020d4c:	0000070a 	andeq	r0, r0, sl, lsl #14
 8020d50:	0801007d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6}
 8020d54:	00000000 	andeq	r0, r0, r0
 8020d58:	080100b9 	stmdaeq	r1, {r0, r3, r4, r5, r7}
 8020d5c:	00000000 	andeq	r0, r0, r0
 8020d60:	01000004 	tsteq	r0, r4
 8020d64:	0000070c 	andeq	r0, r0, ip, lsl #14
 8020d68:	080100f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7}
 8020d6c:	00000000 	andeq	r0, r0, r0
 8020d70:	08010125 	stmdaeq	r1, {r0, r2, r5, r8}
 8020d74:	00000000 	andeq	r0, r0, r0
 8020d78:	01000000 	mrseq	r0, (UNDEF: 0)
 8020d7c:	0000070d 	andeq	r0, r0, sp, lsl #14
 8020d80:	08010159 	stmdaeq	r1, {r0, r3, r4, r6, r8}
 8020d84:	00000000 	andeq	r0, r0, r0
 8020d88:	08010185 	stmdaeq	r1, {r0, r2, r7, r8}
 8020d8c:	00000000 	andeq	r0, r0, r0
 8020d90:	01000000 	mrseq	r0, (UNDEF: 0)

08020d94 <UID_ALL>:
 8020d94:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 8020d98:	 	svcvs	0x0043ffff

08020d9a <RDMNetConst::MSG_CONFIG>:
 8020d9a:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8020d9e:	72756769 	rsbsvc	r6, r5, #27525120	@ 0x1a40000
 8020da2:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8020da6:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 8020daa:	 	andpl	r7, r0, r5, ror #8

08020dad <RDMConst::MANUFACTURER_ID>:
 8020dad:	 	strbtvc	r0, [r8], #-80	@ 0xffffffb0

08020daf <RDMConst::MANUFACTURER_NAME>:
 8020daf:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8020db3:	772f2f3a 			@ <UNDEFINED> instruction: 0x772f2f3a
 8020db7:	6f2e7777 	svcvs	0x002e7777
 8020dbb:	676e6172 			@ <UNDEFINED> instruction: 0x676e6172
 8020dbf:	2d697065 	stclcs	0, cr7, [r9, #-404]!	@ 0xfffffe6c
 8020dc3:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 8020dc7:	0067726f 	rsbeq	r7, r7, pc, ror #4

08020dcb <DEVICE_LABEL>:
 8020dcb:	32334447 	eorscc	r4, r3, #1191182336	@ 0x47000000
 8020dcf:	30373446 	eorscc	r3, r7, r6, asr #8
 8020dd3:	56455f5a 			@ <UNDEFINED> instruction: 0x56455f5a
 8020dd7:	52204c41 	eorpl	r4, r0, #16640	@ 0x4100
 8020ddb:	44204d44 	strtmi	r4, [r0], #-3396	@ 0xfffff2bc
 8020ddf:	63697665 	cmnvs	r9, #105906176	@ 0x6500000
 8020de3:	 	ldclvs	0, cr0, [r3], #-404	@ 0xfffffe6c

08020de5 <DmxParamsConst::SLOTS_COUNT>:
 8020de5:	746f6c73 	strbtvc	r6, [pc], #-3187	@ 8020ded <DmxParamsConst::SLOTS_COUNT+0x8>
 8020de9:	6f635f73 	svcvs	0x00635f73
 8020ded:	00746e75 	rsbseq	r6, r4, r5, ror lr

08020df1 <DmxParamsConst::REFRESH_RATE>:
 8020df1:	72666572 	rsbvc	r6, r6, #478150656	@ 0x1c800000
 8020df5:	5f687365 	svcpl	0x00687365
 8020df9:	65746172 	ldrbvs	r6, [r4, #-370]!	@ 0xfffffe8e
	...

08020dfe <DmxParamsConst::MAB_TIME>:
 8020dfe:	5f62616d 	svcpl	0x0062616d
 8020e02:	656d6974 	strbvs	r6, [sp, #-2420]!	@ 0xfffff68c
	...

08020e07 <DmxParamsConst::BREAK_TIME>:
 8020e07:	61657262 	cmnvs	r5, r2, ror #4
 8020e0b:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 8020e0f:	 	andvc	r6, r0, sp, ror #10

08020e12 <DmxParamsConst::FILE_NAME>:
 8020e12:	61726170 	cmnvs	r2, r0, ror r1
 8020e16:	742e736d 	strtvc	r7, [lr], #-877	@ 0xfffffc93
 8020e1a:	00007478 	andeq	r7, r0, r8, ror r4
	...

08020e20 <s_DirGpio>:
 8020e20:	40020c00 	andmi	r0, r2, r0, lsl #24
 8020e24:	00000001 	andeq	r0, r0, r1
 8020e28:	40020c00 	andmi	r0, r2, r0, lsl #24
 8020e2c:	00000002 	andeq	r0, r0, r2

08020e30 <CSWTCH.81>:
 8020e30:	02020200 	andeq	r0, r2, #0, 4
 8020e34:	04020202 	streq	r0, [r2], #-514	@ 0xfffffdfe
 8020e38:	00000500 	andeq	r0, r0, r0, lsl #10

08020e3c <CSWTCH.49>:
 8020e3c:	00000000 	andeq	r0, r0, r0
 8020e40:	00000002 	andeq	r0, r0, r2
 8020e44:	00000002 	andeq	r0, r0, r2
 8020e48:	00000002 	andeq	r0, r0, r2
 8020e4c:	00000002 	andeq	r0, r0, r2
 8020e50:	00000002 	andeq	r0, r0, r2
 8020e54:	00000002 	andeq	r0, r0, r2
 8020e58:	00000004 	andeq	r0, r0, r4
 8020e5c:	00000000 	andeq	r0, r0, r0
 8020e60:	00000005 	andeq	r0, r0, r5

08020e64 <vtable for WS28xxDmxMulti>:
	...
 8020e6c:	08011f11 	stmdaeq	r1, {r0, r4, r8, r9, sl, fp, ip}
 8020e70:	08012229 	stmdaeq	r1, {r0, r3, r5, r9, sp}
 8020e74:	08012175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sp}
 8020e78:	080121e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sp}
 8020e7c:	08012f19 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, fp, sp}
 8020e80:	08012ecd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r9, sl, fp, sp}
 8020e84:	08011f35 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, sl, fp, ip}
 8020e88:	0800950d 	stmdaeq	r0, {r0, r2, r3, r8, sl, ip, pc}
 8020e8c:	080121b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sp}
 8020e90:	08011f4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, fp, ip}
 8020e94:	08011f65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip}
 8020e98:	08011f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip}
 8020e9c:	08011f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip}
 8020ea0:	08011f0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, sl, fp, ip}
 8020ea4:	08009521 	stmdaeq	r0, {r0, r5, r8, sl, ip, pc}

08020ea8 <pixel::MAPS>:
 8020ea8:	00424752 	subeq	r4, r2, r2, asr r7
 8020eac:	00474252 	subeq	r4, r7, r2, asr r2
 8020eb0:	00425247 	subeq	r5, r2, r7, asr #4
 8020eb4:	00524247 	subseq	r4, r2, r7, asr #4
 8020eb8:	00475242 	subeq	r5, r7, r2, asr #4
 8020ebc:	00524742 	subseq	r4, r2, r2, asr #14

08020ec0 <pixel::TYPES>:
 8020ec0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8020ec4:	00003130 	andeq	r3, r0, r0, lsr r1
 8020ec8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8020ecc:	00003131 	andeq	r3, r0, r1, lsr r1
 8020ed0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8020ed4:	00003231 	andeq	r3, r0, r1, lsr r2
 8020ed8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8020edc:	00423231 	subeq	r3, r2, r1, lsr r2
 8020ee0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8020ee4:	00003331 	andeq	r3, r0, r1, lsr r3
 8020ee8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8020eec:	00003531 	andeq	r3, r0, r1, lsr r5
 8020ef0:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8020ef4:	00003231 	andeq	r3, r0, r1, lsr r2
 8020ef8:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8020efc:	00573231 	subseq	r3, r7, r1, lsr r2
 8020f00:	31534355 	cmpcc	r3, r5, asr r3
 8020f04:	00333039 	eorseq	r3, r3, r9, lsr r0
 8020f08:	32534355 	subscc	r4, r3, #1409286145	@ 0x54000001
 8020f0c:	00333039 	eorseq	r3, r3, r9, lsr r0
 8020f10:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 8020f14:	00003231 	andeq	r3, r0, r1, lsr r2
 8020f18:	31415041 	cmpcc	r1, r1, asr #32
 8020f1c:	00003230 	andeq	r3, r0, r0, lsr r2
 8020f20:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8020f24:	00003232 	andeq	r3, r0, r2, lsr r2
 8020f28:	31383950 	teqcc	r8, r0, asr r9
 8020f2c:	00000033 	andeq	r0, r0, r3, lsr r0

08020f30 <s_patternName>:
 8020f30:	656e6f4e 	strbvs	r6, [lr, #-3918]!	@ 0xfffff0b2
	...
 8020f3c:	61520000 	cmpvs	r2, r0
 8020f40:	6f626e69 	svcvs	0x00626e69
 8020f44:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 8020f48:	00656c63 	rsbeq	r6, r5, r3, ror #24
 8020f4c:	61656854 	cmnvs	r5, r4, asr r8
 8020f50:	20726574 	rsbscs	r6, r2, r4, ror r5
 8020f54:	73616863 	cmnvc	r1, #6488064	@ 0x630000
 8020f58:	6f430065 	svcvs	0x00430065
 8020f5c:	72756f6c 	rsbsvc	r6, r5, #108, 30	@ 0x1b0
 8020f60:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8020f64:	00000065 	andeq	r0, r0, r5, rrx
 8020f68:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 8020f6c:	0072656e 	rsbseq	r6, r2, lr, ror #10
 8020f70:	00000000 	andeq	r0, r0, r0
 8020f74:	61460000 	mrsvs	r0, (UNDEF: 70)
 8020f78:	00006564 	andeq	r6, r0, r4, ror #10
	...

08020f84 <CSWTCH.69>:
 8020f84:	00000000 	andeq	r0, r0, r0
 8020f88:	00000002 	andeq	r0, r0, r2
 8020f8c:	00000002 	andeq	r0, r0, r2
 8020f90:	00000002 	andeq	r0, r0, r2
 8020f94:	00000002 	andeq	r0, r0, r2
 8020f98:	00000002 	andeq	r0, r0, r2
 8020f9c:	00000002 	andeq	r0, r0, r2
 8020fa0:	00000004 	andeq	r0, r0, r4
 8020fa4:	00000000 	andeq	r0, r0, r0
 8020fa8:	00000005 	andeq	r0, r0, r5

08020fac <pixel::s_GPIO_PINs>:
 8020fac:	 	strbvs	r3, [lr, #-4032]	@ 0xfffff040

08020fae <NetworkConst::MSG_NETWORK_STARTED>:
 8020fae:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8020fb2:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8020fb6:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8020fba:	00646574 	rsbeq	r6, r4, r4, ror r5

08020fbe <NetworkConst::MSG_NETWORK_INIT>:
 8020fbe:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8020fc2:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8020fc6:	74696e69 	strbtvc	r6, [r9], #-3689	@ 0xfffff197
	...

08020fcc <mdns::DOMAIN_DNSSD>:
 8020fcc:	65735f09 	ldrbvs	r5, [r3, #-3849]!	@ 0xfffff0f7
 8020fd0:	63697672 	cmnvs	r9, #119537664	@ 0x7200000
 8020fd4:	5f077365 	svcpl	0x00077365
 8020fd8:	2d736e64 	ldclcs	14, cr6, [r3, #-400]!	@ 0xfffffe70
 8020fdc:	5f046473 	svcpl	0x00046473
 8020fe0:	05706475 	ldrbeq	r6, [r0, #-1141]!	@ 0xfffffb8b
 8020fe4:	61636f6c 	cmnvs	r3, ip, ror #30
 8020fe8:	0000006c 	andeq	r0, r0, ip, rrx
	...
 80210cc:	0000001e 	andeq	r0, r0, lr, lsl r0

080210d0 <mdns::s_Services>:
 80210d0:	08021198 	stmdaeq	r2, {r3, r4, r7, r8, ip}
 80210d4:	00000008 	andeq	r0, r0, r8
 80210d8:	00000000 	andeq	r0, r0, r0
 80210dc:	00002905 	andeq	r2, r0, r5, lsl #18
 80210e0:	08021192 	stmdaeq	r2, {r1, r4, r7, r8, ip}
 80210e4:	00000006 	andeq	r0, r0, r6
 80210e8:	00000000 	andeq	r0, r0, r0
 80210ec:	00000045 	andeq	r0, r0, r5, asr #32
 80210f0:	0802118c 	stmdaeq	r2, {r2, r3, r7, r8, ip}
 80210f4:	00000006 	andeq	r0, r0, r6
 80210f8:	00000001 	andeq	r0, r0, r1
 80210fc:	00000050 	andeq	r0, r0, r0, asr r0
 8021100:	0802117f 	stmdaeq	r2, {r0, r1, r2, r3, r4, r5, r6, r8, ip}
 8021104:	0000000d 	andeq	r0, r0, sp
 8021108:	00000000 	andeq	r0, r0, r0
 802110c:	000015c1 	andeq	r1, r0, r1, asr #11
 8021110:	0802117a 	stmdaeq	r2, {r1, r3, r4, r5, r6, r8, ip}
 8021114:	00000005 	andeq	r0, r0, r5
 8021118:	00000000 	andeq	r0, r0, r0
 802111c:	0000007b 	andeq	r0, r0, fp, ror r0
 8021120:	0802116e 	stmdaeq	r2, {r1, r2, r3, r5, r6, r8, ip}
 8021124:	0000000c 	andeq	r0, r0, ip
 8021128:	00000000 	andeq	r0, r0, r0
 802112c:	0000138c 	andeq	r1, r0, ip, lsl #7
 8021130:	08021169 	stmdaeq	r2, {r0, r3, r5, r6, r8, ip}
 8021134:	00000005 	andeq	r0, r0, r5
	...
 8021140:	08021164 	stmdaeq	r2, {r2, r5, r6, r8, ip}
 8021144:	00000005 	andeq	r0, r0, r5
 8021148:	00000000 	andeq	r0, r0, r0
 802114c:	00000fd0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 8021150:	08021160 	stmdaeq	r2, {r5, r6, r8, ip}
 8021154:	00000004 	andeq	r0, r0, r4
 8021158:	00000000 	andeq	r0, r0, r0
 802115c:	000013d6 	ldrdeq	r1, [r0], -r6

08021160 <mdns::DOMAIN_PP>:
 8021160:	70705f03 	rsbsvc	r5, r0, r3, lsl #30

08021164 <mdns::DOMAIN_DDP>:
 8021164:	64645f04 	strbtvs	r5, [r4], #-3844	@ 0xfffff0fc
 8021168:	 	svcvs	0x005f0470

08021169 <mdns::DOMAIN_OSC>:
 8021169:	736f5f04 	cmnvc	pc, #4, 30
 802116d:	 	cmpvs	pc, r3, ror #22

0802116e <mdns::DOMAIN_MIDI>:
 802116e:	70615f0b 	rsbvc	r5, r1, fp, lsl #30
 8021172:	2d656c70 	stclcs	12, cr6, [r5, #-448]!	@ 0xfffffe40
 8021176:	6964696d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^

0802117a <mdns::DOMAIN_NTP>:
 802117a:	746e5f04 	strbtvc	r5, [lr], #-3844	@ 0xfffff0fc
 802117e:	 	subsvc	r0, pc, #112, 24	@ 0x7000

0802117f <mdns::DOMAIN_RDMNET_LLRP>:
 802117f:	64725f0c 	ldrbtvs	r5, [r2], #-3852	@ 0xfffff0f4
 8021183:	74656e6d 	strbtvc	r6, [r5], #-3693	@ 0xfffff193
 8021187:	726c6c2d 	rsbvc	r6, ip, #11520	@ 0x2d00
 802118b:	 	ldmdavs	pc, {r4, r5, r6, r8, sl}^	@ <UNPREDICTABLE>

0802118c <mdns::DOMAIN_HTTP>:
 802118c:	74685f05 	strbtvc	r5, [r8], #-3845	@ 0xfffff0fb
 8021190:	 	svcpl	0x00057074

08021192 <mdns::DOMAIN_TFTP>:
 8021192:	66745f05 	ldrbtvs	r5, [r4], -r5, lsl #30
 8021196:	 	svcpl	0x00077074

08021198 <mdns::DOMAIN_CONFIG>:
 8021198:	6f635f07 	svcvs	0x00635f07
 802119c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!

080211a0 <mdns::DOMAIN_TCP>:
 80211a0:	63745f04 	cmnvs	r4, #4, 30
 80211a4:	 	ldrbvc	r0, [pc, #-1136]	@ 8020d3c <RDMHandler::PID_DEFINITIONS+0x188>

080211a5 <mdns::DOMAIN_UDP>:
 80211a5:	64755f04 	ldrbtvs	r5, [r5], #-3844	@ 0xfffff0fc
 80211a9:	 	svcvs	0x006c0570

080211aa <mdns::DOMAIN_LOCAL>:
 80211aa:	636f6c05 	cmnvs	pc, #1280	@ 0x500
 80211ae:	 	cdpvs	12, 0, cr6, cr0, cr1, {3}

080211b1 <NetworkParamsConst::NTP_SERVER>:
 80211b1:	5f70746e 	svcpl	0x0070746e
 80211b5:	76726573 			@ <UNDEFINED> instruction: 0x76726573
 80211b9:	 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}

080211bc <NetworkParamsConst::HOSTNAME>:
 80211bc:	74736f68 	ldrbtvc	r6, [r3], #-3944	@ 0xfffff098
 80211c0:	656d616e 	strbvs	r6, [sp, #-366]!	@ 0xfffffe92
	...

080211c5 <NetworkParamsConst::DEFAULT_GATEWAY>:
 80211c5:	61666564 	cmnvs	r6, r4, ror #10
 80211c9:	5f746c75 	svcpl	0x00746c75
 80211cd:	65746167 	ldrbvs	r6, [r4, #-359]!	@ 0xfffffe99
 80211d1:	00796177 	rsbseq	r6, r9, r7, ror r1

080211d5 <NetworkParamsConst::NET_MASK>:
 80211d5:	5f74656e 	svcpl	0x0074656e
 80211d9:	6b73616d 	blvs	9cf9795 <__init_array_end+0x1cd7e89>
	...

080211de <NetworkParamsConst::IP_ADDRESS>:
 80211de:	615f7069 	cmpvs	pc, r9, rrx
 80211e2:	65726464 	ldrbvs	r6, [r2, #-1124]!	@ 0xfffffb9c
 80211e6:	 	strvs	r7, [r0], #-883	@ 0xfffffc8d

080211e9 <NetworkParamsConst::DHCP_RETRY_TIME>:
 80211e9:	70636864 	rsbvc	r6, r3, r4, ror #16
 80211ed:	7465725f 	strbtvc	r7, [r5], #-607	@ 0xfffffda1
 80211f1:	745f7972 	ldrbvc	r7, [pc], #-2418	@ 80211f9 <NetworkParamsConst::USE_DHCP>
 80211f5:	00656d69 	rsbeq	r6, r5, r9, ror #26

080211f9 <NetworkParamsConst::USE_DHCP>:
 80211f9:	5f657375 	svcpl	0x00657375
 80211fd:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08021202 <NetworkParamsConst::FILE_NAME>:
 8021202:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8021206:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 802120a:	00747874 	rsbseq	r7, r4, r4, ror r8
	...

08021210 <pArray>:
 8021210:	0802128e 	stmdaeq	r2, {r1, r2, r3, r7, r9, ip}
 8021214:	08021283 	stmdaeq	r2, {r0, r1, r7, r9, ip}
 8021218:	080211de 	stmdaeq	r2, {r1, r2, r3, r4, r6, r7, r8, ip}
 802121c:	0802127b 	stmdaeq	r2, {r0, r1, r3, r4, r5, r6, r9, ip}
 8021220:	0801d1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr, pc}
 8021224:	0802126e 	stmdaeq	r2, {r1, r2, r3, r5, r6, r9, ip}
 8021228:	0801d1d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr, pc}
 802122c:	080211bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, ip}
 8021230:	0802158c 	stmdaeq	r2, {r2, r3, r7, r8, sl, ip}
 8021234:	0802159c 	stmdaeq	r2, {r2, r3, r4, r7, r8, sl, ip}
 8021238:	080215ac 	stmdaeq	r2, {r2, r3, r5, r7, r8, sl, ip}
 802123c:	080215bc 	stmdaeq	r2, {r2, r3, r4, r5, r7, r8, sl, ip}
 8021240:	080211d5 	stmdaeq	r2, {r0, r2, r4, r6, r7, r8, ip}
 8021244:	080214a8 	stmdaeq	r2, {r3, r5, r7, sl, ip}
 8021248:	08020b1c 	stmdaeq	r2, {r2, r3, r4, r8, r9, fp}
 802124c:	08020b34 	stmdaeq	r2, {r2, r4, r5, r8, r9, fp}
 8021250:	08020b4c 	stmdaeq	r2, {r2, r3, r6, r8, r9, fp}
 8021254:	08020b64 	stmdaeq	r2, {r2, r5, r6, r8, r9, fp}
 8021258:	080211c5 	stmdaeq	r2, {r0, r2, r6, r7, r8, ip}
 802125c:	08021260 	stmdaeq	r2, {r5, r6, r9, ip}

08021260 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8021260:	5f786d64 	svcpl	0x00786d64
 8021264:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 8021268:	6f697463 	svcvs	0x00697463
 802126c:	 	cmnvs	r1, #110	@ 0x6e

0802126e <DisplayUdfParamsConst::ACTIVE_PORTS>:
 802126e:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8021272:	705f6576 	subsvc	r6, pc, r6, ror r5	@ <UNPREDICTABLE>
 8021276:	7374726f 	cmnvc	r4, #-268435450	@ 0xf0000006
	...

0802127b <DisplayUdfParamsConst::VERSION>:
 802127b:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
 802127f:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08021283 <DisplayUdfParamsConst::BOARD_NAME>:
 8021283:	72616f62 	rsbvc	r6, r1, #392	@ 0x188
 8021287:	616e5f64 	cmnvs	lr, r4, ror #30
 802128b:	 	strvc	r6, [r0], #-1389	@ 0xfffffa93

0802128e <DisplayUdfParamsConst::TITLE>:
 802128e:	6c746974 			@ <UNDEFINED> instruction: 0x6c746974
 8021292:	 	stclvs	0, cr0, [r6], #-404	@ 0xfffffe6c

08021294 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8021294:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8021298:	7265765f 	rsbvc	r7, r5, #99614720	@ 0x5f00000
 802129c:	61636974 	smcvs	13972	@ 0x3694
 80212a0:	00796c6c 	rsbseq	r6, r9, ip, ror #24

080212a4 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 80212a4:	65656c73 	strbvs	r6, [r5, #-3187]!	@ 0xfffff38d
 80212a8:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80212ac:	756f656d 	strbvc	r6, [pc, #-1389]!	@ 8020d47 <RDMHandler::PID_DEFINITIONS+0x193>
 80212b0:	 	mcrvs	0, 3, r0, cr9, cr4, {3}

080212b2 <DisplayUdfParamsConst::INTENSITY>:
 80212b2:	65746e69 	ldrbvs	r6, [r4, #-3689]!	@ 0xfffff197
 80212b6:	7469736e 	strbtvc	r7, [r9], #-878	@ 0xfffffc92
 80212ba:	 	stmdbvs	r4!, {r0, r3, r4, r5, r6}^

080212bc <DisplayUdfParamsConst::FILE_NAME>:
 80212bc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80212c0:	2e79616c 	rpwcsez	f6, f1, #4.0
 80212c4:	00747874 	rsbseq	r7, r4, r4, ror r8

080212c8 <s_aStorSize>:
 80212c8:	00000060 	andeq	r0, r0, r0, rrx
 80212cc:	00000020 	andeq	r0, r0, r0, lsr #32
 80212d0:	00000040 	andeq	r0, r0, r0, asr #32
 80212d4:	00000040 	andeq	r0, r0, r0, asr #32
 80212d8:	00000020 	andeq	r0, r0, r0, lsr #32
 80212dc:	00000020 	andeq	r0, r0, r0, lsr #32
 80212e0:	000001e0 	andeq	r0, r0, r0, ror #3
 80212e4:	00000040 	andeq	r0, r0, r0, asr #32
 80212e8:	00000020 	andeq	r0, r0, r0, lsr #32
 80212ec:	00000060 	andeq	r0, r0, r0, rrx
 80212f0:	00000030 	andeq	r0, r0, r0, lsr r0
 80212f4:	00000020 	andeq	r0, r0, r0, lsr #32
 80212f8:	000003b0 			@ <UNDEFINED> instruction: 0x000003b0
 80212fc:	00000030 	andeq	r0, r0, r0, lsr r0
 8021300:	00000040 	andeq	r0, r0, r0, asr #32
 8021304:	00000020 	andeq	r0, r0, r0, lsr #32
 8021308:	00000060 	andeq	r0, r0, r0, rrx
 802130c:	00000020 	andeq	r0, r0, r0, lsr #32
 8021310:	00000400 	andeq	r0, r0, r0, lsl #8
 8021314:	00000020 	andeq	r0, r0, r0, lsr #32
 8021318:	00000020 	andeq	r0, r0, r0, lsr #32
 802131c:	00000040 	andeq	r0, r0, r0, asr #32
 8021320:	00000060 	andeq	r0, r0, r0, rrx
 8021324:	00000020 	andeq	r0, r0, r0, lsr #32
 8021328:	00000020 	andeq	r0, r0, r0, lsr #32
 802132c:	00000140 	andeq	r0, r0, r0, asr #2
 8021330:	00000020 	andeq	r0, r0, r0, lsr #32

08021334 <s_aSignature>:
 8021334:	01567641 	cmpeq	r6, r1, asr #12

08021338 <hal::utc_validate(signed char, unsigned char, long&)::s_ValidOffsets>:
 8021338:	1efd1ef7 	mrcne	14, 7, r1, cr13, cr7, {7}
 802133c:	1e041e03 	cdpne	14, 0, cr1, cr4, cr3, {0}
 8021340:	2d051e05 	stccs	14, cr1, [r5, #-20]	@ 0xffffffec
 8021344:	2d081e06 	stccs	14, cr1, [r8, #-24]	@ 0xffffffe8
 8021348:	1e0a1e09 	cdpne	14, 0, cr1, cr10, cr9, {0}
 802134c:	 	ldrbtvc	r2, [r5], #-3340	@ 0xfffff2f4

0802134e <EnvParamsConst::UTC_OFFSET>:
 802134e:	5f637475 	svcpl	0x00637475
 8021352:	7366666f 	cmnvc	r6, #116391936	@ 0x6f00000
 8021356:	 	strvs	r7, [r0, #-1125]	@ 0xfffffb9b

08021359 <EnvParamsConst::FILE_NAME>:
 8021359:	2e766e65 	cdpcs	14, 7, cr6, cr6, cr5, {3}
 802135d:	00747874 	rsbseq	r7, r4, r4, ror r8

08021361 <DevicesParamsConst::TEST_PATTERN>:
 8021361:	74736574 	ldrbtvc	r6, [r3], #-1396	@ 0xfffffa8c
 8021365:	7461705f 	strbtvc	r7, [r1], #-95	@ 0xffffffa1
 8021369:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0802136e <DevicesParamsConst::ACTIVE_OUT>:
 802136e:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8021372:	6f5f6576 	svcvs	0x005f6576
 8021376:	 	smlsdxvs	r0, r5, r4, r7

08021379 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8021379:	626f6c67 	rsbvs	r6, pc, #26368	@ 0x6700
 802137d:	625f6c61 	subsvs	r6, pc, #24832	@ 0x6100
 8021381:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8021385:	73656e74 	cmnvc	r5, #116, 28	@ 0x740
 8021389:	 	stclvs	0, cr0, [r3], #-460	@ 0xfffffe34

0802138b <DevicesParamsConst::SPI_SPEED_HZ>:
 802138b:	636f6c63 	cmnvs	pc, #25344	@ 0x6300
 802138f:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8021393:	5f646565 	svcpl	0x00646565
 8021397:	 			@ <UNDEFINED> instruction: 0x6c007a68

0802139a <DevicesParamsConst::GROUPING_COUNT>:
 802139a:	5f64656c 	svcpl	0x0064656c
 802139e:	756f7267 	strbvc	r7, [pc, #-615]!	@ 802113f <mdns::s_Services+0x6f>
 80213a2:	6f635f70 	svcvs	0x00635f70
 80213a6:	00746e75 	rsbseq	r6, r4, r5, ror lr

080213aa <DevicesParamsConst::COUNT>:
 80213aa:	5f64656c 	svcpl	0x0064656c
 80213ae:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 80213b2:	 	strbvs	r0, [ip, #-116]!	@ 0xffffff8c

080213b4 <DevicesParamsConst::LED_T1H>:
 80213b4:	5f64656c 	svcpl	0x0064656c
 80213b8:	00683174 	rsbeq	r3, r8, r4, ror r1

080213bc <DevicesParamsConst::LED_T0H>:
 80213bc:	5f64656c 	svcpl	0x0064656c
 80213c0:	00683074 	rsbeq	r3, r8, r4, ror r0

080213c4 <DevicesParamsConst::MAP>:
 80213c4:	5f64656c 	svcpl	0x0064656c
 80213c8:	5f626772 	svcpl	0x00626772
 80213cc:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 80213d0:	00676e69 	rsbeq	r6, r7, r9, ror #28

080213d4 <DevicesParamsConst::TYPE>:
 80213d4:	5f64656c 	svcpl	0x0064656c
 80213d8:	65707974 	ldrbvs	r7, [r0, #-2420]!	@ 0xfffff68c
	...

080213dd <DevicesParamsConst::FILE_NAME>:
 80213dd:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80213e1:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 80213e5:	00747874 	rsbseq	r7, r4, r4, ror r8

080213e9 <LightSetParamsConst::START_UNI_PORT>:
 80213e9:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 80213ed:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 80213f1:	6f705f69 	svcvs	0x00705f69
 80213f5:	315f7472 	cmpcc	pc, r2, ror r4	@ <UNPREDICTABLE>
 80213f9:	00000000 	andeq	r0, r0, r0
 80213fd:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8021401:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8021405:	6f705f69 	svcvs	0x00705f69
 8021409:	325f7472 	subscc	r7, pc, #1912602624	@ 0x72000000
 802140d:	00000000 	andeq	r0, r0, r0
 8021411:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8021415:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8021419:	6f705f69 	svcvs	0x00705f69
 802141d:	335f7472 	cmpcc	pc, #1912602624	@ 0x72000000
 8021421:	00000000 	andeq	r0, r0, r0
 8021425:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8021429:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 802142d:	6f705f69 	svcvs	0x00705f69
 8021431:	345f7472 	ldrbcc	r7, [pc], #-1138	@ 8021439 <LightSetParamsConst::START_UNI_PORT+0x50>
 8021435:	00000000 	andeq	r0, r0, r0
 8021439:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 802143d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8021441:	6f705f69 	svcvs	0x00705f69
 8021445:	355f7472 	ldrbcc	r7, [pc, #-1138]	@ 8020fdb <mdns::DOMAIN_DNSSD+0xf>
 8021449:	00000000 	andeq	r0, r0, r0
 802144d:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8021451:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8021455:	6f705f69 	svcvs	0x00705f69
 8021459:	365f7472 			@ <UNDEFINED> instruction: 0x365f7472
 802145d:	00000000 	andeq	r0, r0, r0
 8021461:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8021465:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8021469:	6f705f69 	svcvs	0x00705f69
 802146d:	375f7472 			@ <UNDEFINED> instruction: 0x375f7472
 8021471:	00000000 	andeq	r0, r0, r0
 8021475:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 8021479:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 802147d:	6f705f69 	svcvs	0x00705f69
 8021481:	385f7472 	ldmdacc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	@ <UNPREDICTABLE>
 8021485:	00000000 	andeq	r0, r0, r0

08021489 <LightSetParamsConst::FAILSAFE>:
 8021489:	6c696166 	stfvse	f6, [r9], #-408	@ 0xfffffe68
 802148d:	65666173 	strbvs	r6, [r6, #-371]!	@ 0xfffffe8d
	...

08021492 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8021492:	61736964 	cmnvs	r3, r4, ror #18
 8021496:	5f656c62 	svcpl	0x00656c62
 802149a:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 802149e:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 80214a2:	756f656d 	strbvc	r6, [pc, #-1389]!	@ 8020f3d <s_patternName+0xd>
 80214a6:	 	stclvs	0, cr0, [r4, #-464]!	@ 0xfffffe30

080214a8 <LightSetParamsConst::DMX_START_ADDRESS>:
 80214a8:	5f786d64 	svcpl	0x00786d64
 80214ac:	72617473 	rsbvc	r7, r1, #1929379840	@ 0x73000000
 80214b0:	64615f74 	strbtvs	r5, [r1], #-3956	@ 0xfffff08c
 80214b4:	73657264 	cmnvc	r5, #100, 4	@ 0x40000006
 80214b8:	 	svcvs	0x006c0073

080214ba <LightSetParamsConst::NODE_LONG_NAME>:
 80214ba:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 80214be:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	@ 0xfffffe84
 80214c2:	 	cmnvs	ip, r5, rrx

080214c4 <LightSetParamsConst::NODE_LABEL>:
 80214c4:	6562616c 	strbvs	r6, [r2, #-364]!	@ 0xfffffe94
 80214c8:	6f705f6c 	svcvs	0x00705f6c
 80214cc:	615f7472 	cmpvs	pc, r2, ror r4	@ <UNPREDICTABLE>
 80214d0:	616c0000 	cmnvs	ip, r0
 80214d4:	5f6c6562 	svcpl	0x006c6562
 80214d8:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 80214dc:	0000625f 	andeq	r6, r0, pc, asr r2
 80214e0:	6562616c 	strbvs	r6, [r2, #-364]!	@ 0xfffffe94
 80214e4:	6f705f6c 	svcvs	0x00705f6c
 80214e8:	635f7472 	cmpvs	pc, #1912602624	@ 0x72000000
 80214ec:	616c0000 	cmnvs	ip, r0
 80214f0:	5f6c6562 	svcpl	0x006c6562
 80214f4:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 80214f8:	0000645f 	andeq	r6, r0, pc, asr r4

080214fc <LightSetParamsConst::DIRECTION>:
 80214fc:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 8021500:	6f697463 	svcvs	0x00697463
 8021504:	6f705f6e 	svcvs	0x00705f6e
 8021508:	615f7472 	cmpvs	pc, r2, ror r4	@ <UNPREDICTABLE>
 802150c:	69640000 	stmdbvs	r4!, {}^	@ <UNPREDICTABLE>
 8021510:	74636572 	strbtvc	r6, [r3], #-1394	@ 0xfffffa8e
 8021514:	5f6e6f69 	svcpl	0x006e6f69
 8021518:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 802151c:	0000625f 	andeq	r6, r0, pc, asr r2
 8021520:	65726964 	ldrbvs	r6, [r2, #-2404]!	@ 0xfffff69c
 8021524:	6f697463 	svcvs	0x00697463
 8021528:	6f705f6e 	svcvs	0x00705f6e
 802152c:	635f7472 	cmpvs	pc, #1912602624	@ 0x72000000
 8021530:	69640000 	stmdbvs	r4!, {}^	@ <UNPREDICTABLE>
 8021534:	74636572 	strbtvc	r6, [r3], #-1394	@ 0xfffffa8e
 8021538:	5f6e6f69 	svcpl	0x006e6f69
 802153c:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
 8021540:	0000645f 	andeq	r6, r0, pc, asr r4

08021544 <LightSetParamsConst::MERGE_MODE_PORT>:
 8021544:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8021548:	6f6d5f65 	svcvs	0x006d5f65
 802154c:	705f6564 	subsvc	r6, pc, r4, ror #10
 8021550:	5f74726f 	svcpl	0x0074726f
 8021554:	656d0061 	strbvs	r0, [sp, #-97]!	@ 0xffffff9f
 8021558:	5f656772 	svcpl	0x00656772
 802155c:	65646f6d 	strbvs	r6, [r4, #-3949]!	@ 0xfffff093
 8021560:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 8021564:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8021568:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 802156c:	6f6d5f65 	svcvs	0x006d5f65
 8021570:	705f6564 	subsvc	r6, pc, r4, ror #10
 8021574:	5f74726f 	svcpl	0x0074726f
 8021578:	656d0063 	strbvs	r0, [sp, #-99]!	@ 0xffffff9d
 802157c:	5f656772 	svcpl	0x00656772
 8021580:	65646f6d 	strbvs	r6, [r4, #-3949]!	@ 0xfffff093
 8021584:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 8021588:	00645f74 	rsbeq	r5, r4, r4, ror pc

0802158c <LightSetParamsConst::UNIVERSE_PORT>:
 802158c:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 8021590:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 8021594:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 8021598:	00615f74 	rsbeq	r5, r1, r4, ror pc
 802159c:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 80215a0:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 80215a4:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 80215a8:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80215ac:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 80215b0:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 80215b4:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 80215b8:	00635f74 	rsbeq	r5, r3, r4, ror pc
 80215bc:	76696e75 			@ <UNDEFINED> instruction: 0x76696e75
 80215c0:	65737265 	ldrbvs	r7, [r3, #-613]!	@ 0xfffffd9b
 80215c4:	726f705f 	rsbvc	r7, pc, #95	@ 0x5f
 80215c8:	00645f74 	rsbeq	r5, r4, r4, ror pc

080215cc <vtable for Ssd1306>:
	...
 80215d4:	080193c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, ip, pc}
 80215d8:	080193ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, ip, pc}
 80215dc:	08019725 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, ip, pc}
 80215e0:	080196b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl, ip, pc}
 80215e4:	0801958d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, ip, pc}
 80215e8:	08019411 	stmdaeq	r1, {r0, r4, sl, ip, pc}
 80215ec:	0801943d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, ip, pc}
 80215f0:	08019565 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, ip, pc}
 80215f4:	0801951d 	stmdaeq	r1, {r0, r2, r3, r4, r8, sl, ip, pc}
 80215f8:	080193c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, r9, ip, pc}
 80215fc:	080195c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl, ip, pc}
 8021600:	080195d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl, ip, pc}
 8021604:	080195ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, ip, pc}
 8021608:	080193c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, ip, pc}

0802160c <oled_128x32_init>:
 802160c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8021610:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8021614:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8021618:	02dac8a1 	sbcseq	ip, sl, #10551296	@ 0xa10000
 802161c:	f1d97f81 			@ <UNDEFINED> instruction: 0xf1d97f81
 8021620:	a6a440db 	ssatge	r4, #5, fp, asr #1

08021624 <oled_128x64_init>:
 8021624:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8021628:	4000d33f 	andmi	sp, r0, pc, lsr r3
 802162c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8021630:	12dac8a1 	sbcsne	ip, sl, #10551296	@ 0xa10000
 8021634:	f1d97f81 			@ <UNDEFINED> instruction: 0xf1d97f81
 8021638:	a6a440db 	ssatge	r4, #5, fp, asr #1

0802163c <_OledFont8x6>:
 802163c:	00000040 	andeq	r0, r0, r0, asr #32
 8021640:	40000000 	andmi	r0, r0, r0
 8021644:	005f0000 	subseq	r0, pc, r0
 8021648:	00400000 	subeq	r0, r0, r0
 802164c:	00070007 	andeq	r0, r7, r7
 8021650:	7f144000 	svcvc	0x00144000
 8021654:	00147f14 	andseq	r7, r4, r4, lsl pc
 8021658:	7f2a2440 	svcvc	0x002a2440
 802165c:	4000122a 	andmi	r1, r0, sl, lsr #4
 8021660:	64081323 	strvs	r1, [r8], #-803	@ 0xfffffcdd
 8021664:	36400062 	strbcc	r0, [r0], -r2, rrx
 8021668:	50205649 	eorpl	r5, r0, r9, asr #12
 802166c:	08004000 	stmdaeq	r0, {lr}
 8021670:	00000307 	andeq	r0, r0, r7, lsl #6
 8021674:	221c0040 	andscs	r0, ip, #64	@ 0x40
 8021678:	40000041 	andmi	r0, r0, r1, asr #32
 802167c:	1c224100 	stfnes	f4, [r2], #-0
 8021680:	2a400000 	bcs	9021688 <__init_array_end+0xfffd7c>
 8021684:	2a1c7f1c 	bcs	87412fc <__init_array_end+0x71f9f0>
 8021688:	08084000 	stmdaeq	r8, {lr}
 802168c:	0008083e 	andeq	r0, r8, lr, lsr r8
 8021690:	70800040 	addvc	r0, r0, r0, asr #32
 8021694:	40000030 	andmi	r0, r0, r0, lsr r0
 8021698:	08080808 	stmdaeq	r8, {r3, fp}
 802169c:	00400008 	subeq	r0, r0, r8
 80216a0:	00606000 	rsbeq	r6, r0, r0
 80216a4:	10204000 	eorne	r4, r0, r0
 80216a8:	00020408 	andeq	r0, r2, r8, lsl #8
 80216ac:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 80216b0:	40003e45 	andmi	r3, r0, r5, asr #28
 80216b4:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 80216b8:	72400000 	subvc	r0, r0, #0
 80216bc:	46494949 	strbmi	r4, [r9], -r9, asr #18
 80216c0:	41214000 			@ <UNDEFINED> instruction: 0x41214000
 80216c4:	00334d49 	eorseq	r4, r3, r9, asr #26
 80216c8:	12141840 	andsne	r1, r4, #64, 16	@ 0x400000
 80216cc:	4000107f 	andmi	r1, r0, pc, ror r0
 80216d0:	45454527 	strbmi	r4, [r5, #-1319]	@ 0xfffffad9
 80216d4:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 80216d8:	3149494a 	cmpcc	r9, sl, asr #18
 80216dc:	21414000 	mrscs	r4, (UNDEF: 65)
 80216e0:	00070911 	andeq	r0, r7, r1, lsl r9
 80216e4:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 80216e8:	40003649 	andmi	r3, r0, r9, asr #12
 80216ec:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 80216f0:	0040001e 	subeq	r0, r0, lr, lsl r0
 80216f4:	00001400 	andeq	r1, r0, r0, lsl #8
 80216f8:	40004000 	andmi	r4, r0, r0
 80216fc:	00000034 	andeq	r0, r0, r4, lsr r0
 8021700:	14080040 	strne	r0, [r8], #-64	@ 0xffffffc0
 8021704:	40004122 	andmi	r4, r0, r2, lsr #2
 8021708:	14141414 	ldrne	r1, [r4], #-1044	@ 0xfffffbec
 802170c:	00400014 	subeq	r0, r0, r4, lsl r0
 8021710:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8021714:	01024000 	mrseq	r4, (UNDEF: 2)
 8021718:	00060959 	andeq	r0, r6, r9, asr r9
 802171c:	5d413e40 	stclpl	14, cr3, [r1, #-256]	@ 0xffffff00
 8021720:	40004e59 	andmi	r4, r0, r9, asr lr
 8021724:	1211127c 	andsne	r1, r1, #124, 4	@ 0xc0000007
 8021728:	7f40007c 	svcvc	0x0040007c
 802172c:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8021730:	413e4000 	teqmi	lr, r0
 8021734:	00224141 	eoreq	r4, r2, r1, asr #2
 8021738:	41417f40 	cmpmi	r1, r0, asr #30
 802173c:	40003e41 	andmi	r3, r0, r1, asr #28
 8021740:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8021744:	7f400041 	svcvc	0x00400041
 8021748:	01090909 	tsteq	r9, r9, lsl #18
 802174c:	413e4000 	teqmi	lr, r0
 8021750:	00735141 	rsbseq	r5, r3, r1, asr #2
 8021754:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8021758:	40007f08 	andmi	r7, r0, r8, lsl #30
 802175c:	417f4100 	cmnmi	pc, r0, lsl #2
 8021760:	20400000 	subcs	r0, r0, r0
 8021764:	013f4140 	teqeq	pc, r0, asr #2
 8021768:	087f4000 	ldmdaeq	pc!, {lr}^	@ <UNPREDICTABLE>
 802176c:	00412214 	subeq	r2, r1, r4, lsl r2
 8021770:	40407f40 	submi	r7, r0, r0, asr #30
 8021774:	40004040 	andmi	r4, r0, r0, asr #32
 8021778:	021c027f 	andseq	r0, ip, #-268435449	@ 0xf0000007
 802177c:	7f40007f 	svcvc	0x0040007f
 8021780:	7f100804 	svcvc	0x00100804
 8021784:	413e4000 	teqmi	lr, r0
 8021788:	003e4141 	eorseq	r4, lr, r1, asr #2
 802178c:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8021790:	40000609 	andmi	r0, r0, r9, lsl #12
 8021794:	2151413e 	cmpcs	r1, lr, lsr r1
 8021798:	7f40005e 	svcvc	0x0040005e
 802179c:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 80217a0:	49264000 	stmdbmi	r6!, {lr}
 80217a4:	00324949 	eorseq	r4, r2, r9, asr #18
 80217a8:	7f010340 	svcvc	0x00010340
 80217ac:	40000301 	andmi	r0, r0, r1, lsl #6
 80217b0:	4040403f 	submi	r4, r0, pc, lsr r0
 80217b4:	1f40003f 	svcne	0x0040003f
 80217b8:	1f204020 	svcne	0x00204020
 80217bc:	403f4000 	eorsmi	r4, pc, r0
 80217c0:	003f4038 	eorseq	r4, pc, r8, lsr r0	@ <UNPREDICTABLE>
 80217c4:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 80217c8:	40006314 	andmi	r6, r0, r4, lsl r3
 80217cc:	04780403 	ldrbteq	r0, [r8], #-1027	@ 0xfffffbfd
 80217d0:	61400003 	cmpvs	r0, r3
 80217d4:	434d4959 	movtmi	r4, #55641	@ 0xd959
 80217d8:	7f004000 	svcvc	0x00004000
 80217dc:	00414141 	subeq	r4, r1, r1, asr #2
 80217e0:	08040240 	stmdaeq	r4, {r6, r9}
 80217e4:	40002010 	andmi	r2, r0, r0, lsl r0
 80217e8:	41414100 	mrsmi	r4, (UNDEF: 81)
 80217ec:	0440007f 	strbeq	r0, [r0], #-127	@ 0xffffff81
 80217f0:	04020102 	streq	r0, [r2], #-258	@ 0xfffffefe
 80217f4:	40404000 	submi	r4, r0, r0
 80217f8:	00404040 	subeq	r4, r0, r0, asr #32
 80217fc:	07030040 	streq	r0, [r3, -r0, asr #32]
 8021800:	40000008 	andmi	r0, r0, r8
 8021804:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8021808:	7f400040 	svcvc	0x00400040
 802180c:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8021810:	44384000 	ldrtmi	r4, [r8], #-0
 8021814:	00284444 	eoreq	r4, r8, r4, asr #8
 8021818:	44443840 	strbmi	r3, [r4], #-2112	@ 0xfffff7c0
 802181c:	40007f28 	andmi	r7, r0, r8, lsr #30
 8021820:	54545438 	ldrbpl	r5, [r4], #-1080	@ 0xfffffbc8
 8021824:	00400018 	subeq	r0, r0, r8, lsl r0
 8021828:	02097e08 	andeq	r7, r9, #8, 28	@ 0x80
 802182c:	a4184000 	ldrge	r4, [r8], #-0
 8021830:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8021834:	04087f40 	streq	r7, [r8], #-3904	@ 0xfffff0c0
 8021838:	40007804 	andmi	r7, r0, r4, lsl #16
 802183c:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8021840:	20400000 	subcs	r0, r0, r0
 8021844:	003d4040 	eorseq	r4, sp, r0, asr #32
 8021848:	107f4000 	rsbsne	r4, pc, r0
 802184c:	00004428 	andeq	r4, r0, r8, lsr #8
 8021850:	7f410040 	svcvc	0x00410040
 8021854:	40000040 	andmi	r0, r0, r0, asr #32
 8021858:	0478047c 	ldrbteq	r0, [r8], #-1148	@ 0xfffffb84
 802185c:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8021860:	78040408 	stmdavc	r4, {r3, sl}
 8021864:	44384000 	ldrtmi	r4, [r8], #-0
 8021868:	00384444 	eorseq	r4, r8, r4, asr #8
 802186c:	2418fc40 	ldrcs	pc, [r8], #-3136	@ 0xfffff3c0
 8021870:	40001824 	andmi	r1, r0, r4, lsr #16
 8021874:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8021878:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 802187c:	08040408 	stmdaeq	r4, {r3, sl}
 8021880:	54484000 	strbpl	r4, [r8], #-0
 8021884:	00245454 	eoreq	r5, r4, r4, asr r4
 8021888:	3f040440 	svccc	0x00040440
 802188c:	40002444 	andmi	r2, r0, r4, asr #8
 8021890:	2040403c 	subcs	r4, r0, ip, lsr r0
 8021894:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8021898:	1c204020 	stcne	0, cr4, [r0], #-128	@ 0xffffff80
 802189c:	403c4000 	eorsmi	r4, ip, r0
 80218a0:	003c4030 	eorseq	r4, ip, r0, lsr r0
 80218a4:	10284440 	eorne	r4, r8, r0, asr #8
 80218a8:	40004428 	andmi	r4, r0, r8, lsr #8
 80218ac:	9090904c 	addsls	r9, r0, ip, asr #32
 80218b0:	4440007c 	strbmi	r0, [r0], #-124	@ 0xffffff84
 80218b4:	444c5464 	strbmi	r5, [ip], #-1124	@ 0xfffffb9c
 80218b8:	08004000 	stmdaeq	r0, {lr}
 80218bc:	00004136 	andeq	r4, r0, r6, lsr r1
 80218c0:	77000040 	strvc	r0, [r0, -r0, asr #32]
 80218c4:	40000000 	andmi	r0, r0, r0
 80218c8:	08364100 	ldmdaeq	r6!, {r8, lr}
 80218cc:	02400000 	subeq	r0, r0, #0
 80218d0:	02040201 	andeq	r0, r4, #268435456	@ 0x10000000
 80218d4:	263c4000 	ldrtcs	r4, [ip], -r0
 80218d8:	003c2623 	eorseq	r2, ip, r3, lsr #12

080218dc <days_of_month>:
 80218dc:	0000001f 	andeq	r0, r0, pc, lsl r0
 80218e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 80218e4:	0000001f 	andeq	r0, r0, pc, lsl r0
 80218e8:	0000001e 	andeq	r0, r0, lr, lsl r0
 80218ec:	0000001f 	andeq	r0, r0, pc, lsl r0
 80218f0:	0000001e 	andeq	r0, r0, lr, lsl r0
 80218f4:	0000001f 	andeq	r0, r0, pc, lsl r0
 80218f8:	0000001f 	andeq	r0, r0, pc, lsl r0
 80218fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 8021900:	0000001f 	andeq	r0, r0, pc, lsl r0
 8021904:	0000001e 	andeq	r0, r0, lr, lsl r0
 8021908:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .tcmsram:

10008000 <net::s_dhcp_message>:
	...

10008224 <net::s_id>:
10008224:	00000000 	andeq	r0, r0, r0

10008228 <net::s_groups>:
	...

10008348 <net::s_multicast_mac>:
	...

10008350 <net::s_leave>:
	...

10008380 <net::s_report>:
	...

100083b0 <net::s_tcp>:
	...

1000899c <net::s_id>:
1000899c:	00000000 	andeq	r0, r0, r0

100089a0 <net::s_Port>:
	...

100096a8 <net::s_multicast_mac>:
	...

100096b0 <net::s_id>:
100096b0:	00000000 	andeq	r0, r0, r0

100096b4 <net::s_send_packet>:
	...

10009ca0 <net::s_data>:
	...

1000cb00 <net::s_Port>:
	...

1000cb10 <net::s_ArpRecords>:
	...

Disassembly of section .data:

20000000 <artnetnode::configstore::DMXPORT_OFFSET>:
20000000:	00000040 	andeq	r0, r0, r0, asr #32

20000004 <SystemCoreClock>:
20000004:	0e4e1c00 	cdpeq	12, 4, cr1, cr14, cr0, {0}

20000008 <lfsr>:
20000008:	0000ace1 	andeq	sl, r0, r1, ror #25

2000000c <s_block_bucket>:
2000000c:	00000010 	andeq	r0, r0, r0, lsl r0
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000020 	andeq	r0, r0, r0, lsr #32
20000018:	00000000 	andeq	r0, r0, r0
2000001c:	00000040 	andeq	r0, r0, r0, asr #32
20000020:	00000000 	andeq	r0, r0, r0
20000024:	00000060 	andeq	r0, r0, r0, rrx
20000028:	00000000 	andeq	r0, r0, r0
2000002c:	00000080 	andeq	r0, r0, r0, lsl #1
20000030:	00000000 	andeq	r0, r0, r0
20000034:	00000100 	andeq	r0, r0, r0, lsl #2
20000038:	00000000 	andeq	r0, r0, r0
2000003c:	00000140 	andeq	r0, r0, r0, asr #2
20000040:	00000000 	andeq	r0, r0, r0
20000044:	00000180 	andeq	r0, r0, r0, lsl #3
20000048:	00000000 	andeq	r0, r0, r0
2000004c:	00000200 	andeq	r0, r0, r0, lsl #4
20000050:	00000000 	andeq	r0, r0, r0
20000054:	00000300 	andeq	r0, r0, r0, lsl #6
20000058:	00000000 	andeq	r0, r0, r0
2000005c:	00000400 	andeq	r0, r0, r0, lsl #8
20000060:	00000000 	andeq	r0, r0, r0
20000064:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20000074 <next_block>:
20000074:	1000cc90 	mulne	r0, r0, ip

Disassembly of section .sram1:

2001c000 <s_TxBuffer>:
	...

Disassembly of section .sram2:

20020000 <pixel::s_DmaBuffer>:
	...

Disassembly of section .bkpsram:

40024000 <ConfigStore::s_SpiFlashData>:
	...
